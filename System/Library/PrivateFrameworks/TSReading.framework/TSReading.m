uint64_t p_TSSPropertyEntryCompare(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(a1 + 8) - *(unsigned __int16 *)(a2 + 8);
}

BOOL String(size_t *a1, unsigned __int16 a2)
{
  return p_TSSPropertyStoreSearch(a1, a2) != 0;
}

uint64_t TSWPLayoutChore::pSetupStateForColumnMetrics(id *this)
{
  uint64_t result;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;

  result = objc_msgSend(this[257], "columnMetricsForCharIndex:outRange:", this[10], this + 25);
  if (result)
  {
    if ((id)result != this[24])
    {
      this[24] = (id)result;
      this[32] = 0;
      objc_msgSend((id)result, "adjustedInsets");
      this[27] = v3;
      this[29] = (id)objc_msgSend(this[24], "columnCount");
      *((_BYTE *)this + 248) = objc_msgSend(this[24], "shrinkTextToFit");
      result = objc_opt_respondsToSelector();
      if ((result & 1) != 0)
      {
        result = objc_msgSend(this[24], "textScaleFactor");
        this[32] = v4;
      }
    }
  }
  else
  {
    v5 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v6 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSWPLayoutChore::pSetupStateForColumnMetrics()");
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 5814, CFSTR("invalid nil value for '%s'"), "newColumnMetrics");
    this[24] = 0;
    this[32] = 0;
    this[27] = 0;
    result = objc_msgSend(this[1], "characterCount");
    this[25] = 0;
    this[26] = (id)result;
    this[29] = (id)1;
    *((_BYTE *)this + 248) = 0;
  }
  this[30] = 0;
  return result;
}

id TSWPLayoutChore::pSetupStateForParagraphIndex(TSWPLayoutChore *this, TSWPLayoutState *a2)
{
  TSWPLayoutState *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  float v10;
  float v11;
  void *v12;
  void *v13;
  double v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  float v34;
  float v35;
  double v36;
  BOOL v37;
  double v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  const void *v44;
  __CFString *v45;
  CFLocaleRef System;
  CFLocaleRef v47;
  float v48;
  double v49;
  void *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  float v54;
  double v55;
  double v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  id result;
  void *v70;
  uint64_t v71;
  uint64_t v72;

  if (a2)
    v3 = a2;
  else
    v3 = (TSWPLayoutChore *)((char *)this + 80);
  if (!TSWPParagraphEnumerator::paragraphStyle((TSWPParagraphEnumerator *)((char *)v3 + 24), 0))
  {
    v4 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v5 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSWPLayoutChore::pSetupStateForParagraphIndex(TSWPLayoutState *)");
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 5845, CFSTR("Bad paragraphEnumerator"));
  }
  *((_QWORD *)v3 + 62) = 0;
  *((_QWORD *)v3 + 63) = 0;
  *((_QWORD *)v3 + 59) = 0x7FFFFFFFFFFFFFFFLL;
  v6 = (void *)TSWPParagraphEnumerator::paragraphStyle((TSWPParagraphEnumerator *)((char *)v3 + 24), (_NSRange *)v3 + 5);
  v7 = *((_QWORD *)v3 + 10);
  v8 = *((_QWORD *)this + 8);
  if (*((_QWORD *)v3 + 11) + v7 > v8)
    *((_QWORD *)v3 + 11) = v8 - v7;
  *((_QWORD *)v3 + 24) = TSWPParagraphEnumerator::paragraphLevel((TSWPParagraphEnumerator *)((char *)v3 + 24));
  *((_BYTE *)v3 + 512) = *(_QWORD *)v3 == *((_QWORD *)v3 + 10);
  v9 = objc_msgSend(*((id *)this + 23), "scaleTextPercent");
  if (v6 != *((void **)v3 + 12))
  {
    *((_QWORD *)v3 + 12) = v6;
    objc_msgSend(v6, "floatValueForProperty:", 87);
    *((double *)v3 + 35) = v10;
    objc_msgSend(v6, "floatValueForProperty:", 88);
    *((double *)v3 + 36) = v11;
    v12 = (void *)objc_msgSend(v6, "valueForProperty:", 85);
    v13 = v12;
    if (v12)
      objc_msgSend(v12, "amount");
    else
      v14 = 1.0;
    *((double *)v3 + 34) = v14;
    *((_DWORD *)v3 + 64) = objc_msgSend(v13, "mode");
    objc_msgSend(v13, "baselineRule");
    *((_QWORD *)v3 + 33) = v15;
    objc_msgSend(v6, "floatValueForProperty:", 81);
    *((double *)v3 + 26) = v16;
    objc_msgSend(v6, "floatValueForProperty:", 82);
    *((double *)v3 + 27) = v17;
    objc_msgSend(v6, "floatValueForProperty:", 80);
    *((double *)v3 + 28) = v18;
    *((_BYTE *)v3 + 384) = objc_msgSend(v6, "intValueForProperty:", 91) != 0;
    *((_BYTE *)v3 + 328) = objc_msgSend(v6, "intValueForProperty:", 92) != 0;
    *((_BYTE *)v3 + 329) = objc_msgSend(v6, "intValueForProperty:", 89) != 0;
    *((_BYTE *)v3 + 330) = objc_msgSend(v6, "intValueForProperty:", 90) != 0;
    v19 = objc_msgSend(v6, "valueForProperty:", 98);
    if (v19)
      v20 = v19 != objc_msgSend(MEMORY[0x24BDBCEF8], "null");
    else
      v20 = 0;
    *((_BYTE *)v3 + 368) = v20;
    *((_DWORD *)v3 + 87) = objc_msgSend(v6, "intValueForProperty:", 102);
    v21 = objc_msgSend(v6, "valueForProperty:", 103);
    if (v21)
    {
      v22 = v21;
      if (v21 == objc_msgSend(MEMORY[0x24BDBCEF8], "null"))
        v23 = 0;
      else
        v23 = (void *)v22;
    }
    else
    {
      v23 = 0;
    }
    if (*((_DWORD *)v3 + 87))
      v24 = v23;
    else
      v24 = 0;
    *((_QWORD *)v3 + 44) = v24;
    if (v24)
    {
      objc_msgSend(v24, "width");
      v25 = *((_QWORD *)v3 + 44);
      *((_QWORD *)v3 + 47) = v26;
      if (v25)
      {
        objc_msgSend((id)objc_msgSend(v6, "valueForProperty:", 105), "sizeValue");
        goto LABEL_28;
      }
    }
    else
    {
      *((_QWORD *)v3 + 47) = 0;
    }
    v27 = 0;
LABEL_28:
    *((_QWORD *)v3 + 45) = v27;
    *((_BYTE *)v3 + 346) = objc_msgSend(v6, "intValueForProperty:", 93) != 0;
    v28 = objc_msgSend(v6, "intValueForProperty:", 94);
    if (v28 == 0x80000000)
      v29 = 2;
    else
      v29 = v28;
    *((_QWORD *)v3 + 54) = v29;
    v30 = objc_msgSend(v6, "intValueForProperty:", 95);
    if (v30 == 0x80000000)
      v31 = 3;
    else
      v31 = v30;
    *((_QWORD *)v3 + 55) = v31;
    v32 = objc_msgSend(v6, "intValueForProperty:", 96);
    if (v32 == 0x80000000)
      v33 = 3;
    else
      v33 = v32;
    *((_QWORD *)v3 + 56) = v33;
    objc_msgSend(v6, "floatValueForProperty:", 97);
    if (v34 == INFINITY)
      v34 = 18.0;
    *((double *)v3 + 52) = v34;
    *((_QWORD *)v3 + 49) = objc_msgSend(v6, "valueForProperty:", 84);
    objc_msgSend(v6, "floatValueForProperty:", 83);
    v36 = v35;
    v37 = v35 == 0.0;
    v38 = 36.0;
    if (!v37)
      v38 = v36;
    *((double *)v3 + 50) = v38;
    v39 = objc_msgSend(*((id *)v3 + 49), "count");
    if (v39)
    {
      v40 = v39;
      v41 = 0;
      v42 = 1;
      while (objc_msgSend((id)objc_msgSend(*((id *)v3 + 49), "tabAtIndex:", v41), "alignment") != 3)
      {
        v41 = v42;
        if (v40 <= v42++)
          goto LABEL_47;
      }
      *((_QWORD *)v3 + 51) = objc_msgSend(v6, "valueForProperty:", 101);
    }
LABEL_47:
    v44 = (const void *)*((_QWORD *)this + 258);
    if (v44)
    {
      CFRelease(v44);
      *((_QWORD *)this + 258) = 0;
    }
    if (*((_BYTE *)v3 + 346))
    {
      v45 = (__CFString *)objc_msgSend(v6, "valueForProperty:", 39);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0
        || -[__CFString isEqualToString:](v45, "isEqualToString:", CFSTR("__multilingual")))
      {
        System = (CFLocaleRef)objc_msgSend((id)objc_msgSend(*((id *)this + 1), "documentRoot"), "hyphenationLocale");
        *((_QWORD *)this + 258) = System;
        if (!System)
        {
          System = CFLocaleGetSystem();
          *((_QWORD *)this + 258) = System;
        }
        CFRetain(System);
      }
      else if (v45 && (-[__CFString isEqualToString:](v45, "isEqualToString:", CFSTR("__none")) & 1) == 0)
      {
        v47 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v45);
        *((_QWORD *)this + 258) = v47;
        if (v47)
          goto LABEL_57;
        goto LABEL_56;
      }
    }
    v47 = (CFLocaleRef)*((_QWORD *)this + 258);
    if (v47)
    {
LABEL_57:
      *((_QWORD *)v3 + 53) = v47;
      goto LABEL_58;
    }
LABEL_56:
    *((_BYTE *)v3 + 346) = 0;
    goto LABEL_57;
  }
LABEL_58:
  v48 = (float)v9 / 100.0;
  v49 = v48;
  *((float64x2_t *)this + 24) = vmulq_n_f64(*(float64x2_t *)((char *)this + 360), v48);
  if (!*((_DWORD *)this + 84))
    v49 = 1.0;
  *((double *)this + 47) = *((double *)this + 44) * v49;
  v50 = (void *)TSWPParagraphEnumerator::paragraphListStyle((TSWPParagraphEnumerator *)((char *)v3 + 24));
  *((_QWORD *)v3 + 23) = v50;
  objc_msgSend(v50, "labelIndentForLevel:", *((_QWORD *)v3 + 24));
  *((_QWORD *)v3 + 30) = v51;
  v52 = (void *)*((_QWORD *)v3 + 23);
  v53 = *((_QWORD *)v3 + 24);
  objc_msgSend(*((id *)v3 + 12), "floatValueForProperty:", 17);
  objc_msgSend(v52, "textIndentForLevel:fontSize:", v53, (float)(v48 * v54));
  v56 = v55 + *((double *)v3 + 30);
  *((double *)v3 + 29) = v56;
  *((double *)v3 + 31) = v56 + *((double *)v3 + 26);
  if (*((_QWORD *)v3 + 23)
    && (TSWPParagraphEnumerator::isFirstParagraph((TSWPParagraphEnumerator *)((char *)v3 + 24))
     || objc_msgSend(*((id *)this + 1), "characterAtIndex:", *((_QWORD *)v3 + 10) - 1) != 11))
  {
    *((_BYTE *)v3 + 332) = objc_msgSend(*((id *)v3 + 23), "labelTypeForLevel:", *((_QWORD *)v3 + 24)) != 0;
    *((_BYTE *)v3 + 344) = TSWPParagraphEnumerator::listRunsRightToLeft((TSWPParagraphEnumerator *)((char *)v3 + 24));
  }
  else
  {
    *((_BYTE *)v3 + 332) = 0;
    *((_BYTE *)v3 + 344) = 0;
  }
  *((_BYTE *)v3 + 333) = TSWPParagraphEnumerator::paragraphRunsRightToLeft((TSWPParagraphEnumerator *)((char *)v3 + 24));
  v57 = objc_msgSend(v6, "intValueForProperty:", 86);
  if (*((_QWORD *)this + 257) && v57 == 4)
    v57 = objc_msgSend(*((id *)this + 257), "naturalAlignment");
  *((_DWORD *)v3 + 97) = v57;
  if (v57 == 4)
    *((_DWORD *)v3 + 97) = *((unsigned __int8 *)v3 + 333);
  *((_WORD *)v3 + 244) = 0;
  v59 = *((_QWORD *)v3 + 10);
  v58 = *((_QWORD *)v3 + 11);
  if (v59 != TSWPCoreTextTypesetter::paragraphRange(*((TSWPCoreTextTypesetter **)this + 253)) || v58 != v60)
    (*(void (**)(_QWORD))(**((_QWORD **)this + 253) + 24))(*((_QWORD *)this + 253));
  if (TSWPCoreTextTypesetter::isParagraphSetUp(*((TSWPCoreTextTypesetter **)this + 253)))
  {
    v61 = objc_msgSend(*((id *)this + 1), "attachmentIndexRangeForTextRange:", *((_QWORD *)v3 + 10), *((_QWORD *)v3 + 11));
    if (v61 < v61 + v62)
    {
      v63 = v61;
      v64 = v62;
      do
      {
        if (*((_BYTE *)v3 + 488))
          break;
        v72 = 0x7FFFFFFFFFFFFFFFLL;
        objc_msgSend(*((id *)this + 1), "attachmentAtAttachmentIndex:outCharIndex:", v63, &v72);
        if (v72 != 0x7FFFFFFFFFFFFFFFLL && objc_msgSend(*((id *)this + 1), "characterAtIndex:") == 65532)
          *((_BYTE *)v3 + 488) = 1;
        ++v63;
        --v64;
      }
      while (v64);
    }
    v65 = objc_msgSend(*((id *)this + 1), "footnoteRangeForTextRange:", *((_QWORD *)v3 + 10), *((_QWORD *)v3 + 11));
    if (v65 < v65 + v66)
    {
      v67 = v65;
      v68 = v66;
      do
      {
        if (*((_BYTE *)v3 + 489))
          break;
        v72 = 0x7FFFFFFFFFFFFFFFLL;
        objc_msgSend(*((id *)this + 1), "footnoteAtFootnoteIndex:outCharIndex:", v67, &v72);
        if (v72 != 0x7FFFFFFFFFFFFFFFLL && objc_msgSend(*((id *)this + 1), "characterAtIndex:") == 14)
          *((_BYTE *)v3 + 489) = 1;
        ++v67;
        --v68;
      }
      while (v68);
    }
  }
  result = *((id *)this + 1);
  *((_QWORD *)this + 35) = result;
  if (__CFADD__(*((_QWORD *)v3 + 10), *((_QWORD *)v3 + 11)))
  {
    v70 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v71 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSWPLayoutChore::pSetupStateForParagraphIndex(TSWPLayoutState *)");
    return (id)objc_msgSend(v70, "handleFailureInFunction:file:lineNumber:description:", v71, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 6065, CFSTR("Bad _state.paragraphRange.length"));
  }
  return result;
}

float String(size_t *a1, unsigned __int16 a2)
{
  size_t *v2;
  double v3;

  v2 = p_TSSPropertyStoreSearch(a1, a2);
  if (v2)
    return String((uint64_t)v2, v3);
  else
    return INFINITY;
}

float String(uint64_t a1, double a2)
{
  void *v3;
  uint64_t v4;
  unsigned int v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v13;

  if (!a1)
  {
    v3 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v4 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "float TSSPropertyEntryGetFloatValue(const TSSPropertyEntry *)");
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.m"), 81, CFSTR("invalid nil value for '%s'"), "entry");
  }
  v5 = *(unsigned __int8 *)(a1 + 10);
  if (v5 < 2)
    goto LABEL_6;
  if (v5 != 2)
  {
    if (v5 != 3)
    {
      v8 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
      v9 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "float TSSPropertyEntryGetFloatValue(const TSSPropertyEntry *)");
      objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.m"), 96, CFSTR("Unexpected entry type"), v13);
      goto LABEL_10;
    }
LABEL_6:
    v6 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v7 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "float TSSPropertyEntryGetFloatValue(const TSSPropertyEntry *)");
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.m"), 93, CFSTR("Asked for float value of a %@-valued property."), String(*(unsigned __int8 *)(a1 + 10)));
LABEL_10:
    v10 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler", a2);
    v11 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "float TSSPropertyEntryGetFloatValue(const TSSPropertyEntry *)");
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.m"), 100, CFSTR("Undefined value in entry for property %d %@"), *(unsigned __int16 *)(a1 + 8), String(*(unsigned __int16 *)(a1 + 8)));
    LODWORD(a2) = 2139095040;
    return *(float *)&a2;
  }
  LODWORD(a2) = *(_DWORD *)a1;
  if (*(float *)a1 == INFINITY)
    goto LABEL_10;
  return *(float *)&a2;
}

uint64_t TSWPResolveIntPropertyForStyles(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6;
  char v7;
  void *v8;
  uint64_t result;
  char v10;
  _QWORD v11[3];

  v6 = 0;
  v11[2] = *MEMORY[0x24BDAC8D0];
  v11[0] = a1;
  v11[1] = a2;
  v7 = 1;
  do
  {
    v8 = (void *)v11[v6];
    if (v8)
      LODWORD(result) = objc_msgSend(v8, "intValueForProperty:", a3);
    else
      LODWORD(result) = 0x80000000;
    v10 = v7 & ((_DWORD)result == 0x80000000);
    v6 = 1;
    v7 = 0;
  }
  while ((v10 & 1) != 0);
  if ((_DWORD)result == 0x80000000)
    return a4;
  else
    return result;
}

uint64_t String(size_t *a1, unsigned __int16 a2)
{
  unsigned int *v2;

  v2 = (unsigned int *)p_TSSPropertyStoreSearch(a1, a2);
  if (v2)
    return String(v2);
  else
    return 0x80000000;
}

size_t *p_TSSPropertyStoreSearch(size_t *result, unsigned __int16 a2)
{
  const void *v3;
  _QWORD v4[2];

  if (result)
  {
    v3 = (const void *)result[1];
    if (v3)
    {
      v4[0] = 0;
      v4[1] = a2;
      return (size_t *)bsearch(v4, v3, *result, 0x10uLL, (int (__cdecl *)(const void *, const void *))p_TSSPropertyEntryCompare);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t String(unsigned int *a1)
{
  void *v2;
  uint64_t v3;
  int v4;
  void *v5;
  uint64_t v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  if (!a1)
  {
    v2 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v3 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "int TSSPropertyEntryGetIntValue(const TSSPropertyEntry *)");
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.m"), 56, CFSTR("invalid nil value for '%s'"), "entry");
  }
  v4 = *((unsigned __int8 *)a1 + 10);
  if ((v4 - 2) < 2)
  {
LABEL_6:
    v5 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v6 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "int TSSPropertyEntryGetIntValue(const TSSPropertyEntry *)");
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.m"), 68, CFSTR("Asked for int value of a %@-valued property."), String(*((unsigned __int8 *)a1 + 10)));
LABEL_10:
    v10 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v11 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "int TSSPropertyEntryGetIntValue(const TSSPropertyEntry *)");
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.m"), 75, CFSTR("Undefined value in entry for property %d %@"), *((unsigned __int16 *)a1 + 4), String(*((unsigned __int16 *)a1 + 4)));
    return 0x80000000;
  }
  if (v4 != 1)
  {
    if (*((_BYTE *)a1 + 10))
    {
      v8 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
      v9 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "int TSSPropertyEntryGetIntValue(const TSSPropertyEntry *)");
      objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.m"), 71, CFSTR("Unexpected entry type"), v12);
      goto LABEL_10;
    }
    goto LABEL_6;
  }
  result = *a1;
  if ((_DWORD)result == 0x80000000)
    goto LABEL_10;
  return result;
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  objc_class *v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *((unsigned __int16 *)a1 + 4);
  switch(*((_BYTE *)a1 + 10))
  {
    case 0:
      v3 = (void *)MEMORY[0x24BDD17C8];
      v4 = String(*((unsigned __int16 *)a1 + 4));
      v5 = *(id *)a1;
      v6 = (objc_class *)objc_opt_class();
      result = objc_msgSend(v3, "stringWithFormat:", CFSTR("%@  %3d (%@) = %p (%@) '%@'"), CFSTR("Object"), v2, v4, v5, NSStringFromClass(v6), objc_msgSend(*(id *)a1, "description"));
      break;
    case 1:
      result = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("int     %3d (%@) = %d"), v2, String(*((unsigned __int16 *)a1 + 4)), *a1, v10, v11, v12);
      break;
    case 2:
      result = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("float   %3d (%@) = %f"), v2, String(*((unsigned __int16 *)a1 + 4)), *(float *)a1, v10, v11, v12);
      break;
    case 3:
      result = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("double  %3d (%@) = %g"), v2, String(*((unsigned __int16 *)a1 + 4)), *(_QWORD *)a1, v10, v11, v12);
      break;
    default:
      v8 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
      v9 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *TSSPropertyEntryDescription(TSSPropertyEntry *)");
      objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyStore.m"), 651, CFSTR("Invalid property type value"));
      result = 0;
      break;
  }
  return result;
}

uint64_t TSWPLayoutChore::pSetupTypesetterIfNeeded(TSWPLayoutChore *this, CGSize a2, CGSize a3)
{
  double height;
  double width;
  double v5;
  double v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t result;
  TSWPCoreTextTypesetter *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16[2];

  height = a3.height;
  width = a3.width;
  v5 = a2.height;
  v6 = a2.width;
  if (!TSWPCoreTextTypesetter::isParagraphSetUp(*((TSWPCoreTextTypesetter **)this + 253))
    || ((v8 = *((_QWORD *)this + 20),
         v9 = *((_QWORD *)this + 21),
         v8 == TSWPCoreTextTypesetter::paragraphRange(*((TSWPCoreTextTypesetter **)this + 253)))
      ? (v11 = v9 == v10)
      : (v11 = 0),
        !v11
     || !TSWPDropCapCTState::isAffectingCTAttributesEquallyTo((TSWPLayoutChore *)((char *)this + 872), (const TSWPDropCapCTState *)(*((_QWORD *)this + 253) + 288))|| (result = TSWPLineStylingCTState::isAffectingCTAttributesEquallyTo((uint64_t)this + 1936, *((_QWORD *)this + 253) + 328), (result & 1) == 0)))
  {
    v16[0] = (uint64_t)this + 872;
    v16[1] = (uint64_t)this + 1936;
    v13 = (TSWPCoreTextTypesetter *)*((_QWORD *)this + 253);
    v14 = TSWPParagraphEnumerator::relevantParagraphIndex((TSWPParagraphEnumerator *)((char *)this + 104));
    v15 = TSWPCoreTextTypesetter::beginParagraphLayout(v13, (uint64_t)this + 80, (uint64_t)this + 768, v16, v14, v6 - width, v5 - height);
    *((_DWORD *)this + 117) = v15;
    *((_BYTE *)this + 413) = BYTE4(v15) & 1;
    *((_BYTE *)this + 568) = BYTE5(v15) & 1;
    *((_BYTE *)this + 569) = BYTE6(v15) & 1;
    result = (uint64_t)*((id *)this + 1);
    *((_QWORD *)this + 35) = result;
  }
  return result;
}

uint64_t TSWPCoreTextTypesetter::isParagraphSetUp(TSWPCoreTextTypesetter *this)
{
  return *((unsigned __int8 *)this + 34);
}

uint64_t TSWPLayoutChore::pFillSingleLineFragment@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W4>, uint64_t a5@<X5>, uint64_t **a6@<X6>, uint64_t **a7@<X7>, TSWPLineFragment **a8@<X8>, double a9@<D0>, double a10@<D1>, double a11@<D2>, double a12@<D3>, _WORD *a13, _BYTE *a14, char a15)
{
  unint64_t *v20;
  unint64_t v21;
  uint64_t *i;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  TSWPLineFragment *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  double *v40;
  double v41;
  int v42;
  _BOOL4 Paragraph;
  int v44;
  uint64_t result;
  int v46;
  __int16 v47;
  unsigned int v48;
  BOOL v49;
  TSWPLineFragment *v50;

  *a8 = 0;
  a8[1] = 0;
  *(double *)(a1 + 600) = a9;
  *(double *)(a1 + 608) = a10;
  *(double *)(a1 + 616) = a11;
  *(double *)(a1 + 624) = a12;
  v20 = (unint64_t *)(a1 + 80);
  if (a11 < 0.0)
  {
    *(_QWORD *)(a1 + 616) = 0;
    a11 = 0.0;
  }
  v21 = *v20;
  *(_BYTE *)(a5 + 145) = a4;
  *(_BYTE *)(a5 + 146) = a4 ^ 1;
  for (i = *a6; ; *a6 = i)
  {
    if (i == *a7)
    {
      v23 = 0;
LABEL_8:
      *(_QWORD *)(a5 + 152) = v23;
      goto LABEL_9;
    }
    v23 = (_QWORD *)*i;
    v24 = *(_QWORD *)*i;
    if (v24 >= v21)
      break;
    i += 2;
  }
  if (v23[25] == v23[24] && (*(_BYTE *)(a5 + 58) & 1) == 0)
    goto LABEL_8;
  v48 = *((_DWORD *)v23 + 6);
  if ((v48 & 4) != 0 || v21 != v24 || ((v48 >> 13) & 1) != (*(_BYTE *)(a1 + 32) & 0x10) >> 4)
    goto LABEL_8;
  v49 = *((double *)v23 + 6) == a9 && *((double *)v23 + 7) == a10;
  if (!v49 || *((double *)v23 + 8) != a11)
    goto LABEL_8;
  std::shared_ptr<EQKit::StemStretch::Glyph>::operator=[abi:nn180100](a8, i);
  TSWPLineFragment::setWasReused(*a8);
  v50 = *a8;
  *(_QWORD *)(a5 + 152) = v23;
  if (v50)
  {
    *(_QWORD *)(a5 + 200) = v50;
    v27 = TSWPCoreTextTypesetter::skipLine(*(_QWORD *)(a1 + 2024), v20, a5);
    v25 = 0;
    goto LABEL_16;
  }
LABEL_9:
  v25 = operator new();
  TSWPLineFragment::TSWPLineFragment((TSWPLineFragment *)v25);
  std::shared_ptr<TSWPLineFragment>::reset[abi:ne180100]<TSWPLineFragment,void>(a8, v25);
  *(_QWORD *)(a5 + 200) = v25;
  *(_QWORD *)(a5 + 176) = a2;
  *(_QWORD *)(a5 + 184) = a3;
  if (TSWPParagraphEnumerator::paragraphRunsRightToLeft((TSWPParagraphEnumerator *)(a1 + 104)))
    *(_DWORD *)(v25 + 24) |= 0x1000u;
  if (a15)
    TSWPLineFragment::setHyphenated((TSWPLineFragment *)v25, 1);
  v26 = TSWPCoreTextTypesetter::layoutLine(*(_QWORD *)(a1 + 2024), (uint64_t)v20, a5);
  *v20 = v26;
  if (a2 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v27 = a2 + a3;
    if (v26 != v27)
    {
      v28 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
      v29 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "line_fragment_ptr TSWPLayoutChore::pFillSingleLineFragment(const CGRect, const NSRange, const NSUInteger, const BOOL, TSWPTypesetterParamBlock &, TSWPLineFragmentArray::line_iterator &, const TSWPLineFragmentArray::line_iterator &, unichar &, BOOL &, BOOL)");
      objc_msgSend(v28, "handleFailureInFunction:file:lineNumber:description:", v29, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 1767, CFSTR("unexpected character index after hinted layout (expected %lu, got %lu)"), v27, *v20);
LABEL_16:
      *v20 = v27;
      v26 = v27;
    }
  }
  v30 = *(_QWORD *)(a1 + 168) + *(_QWORD *)(a1 + 160);
  if (v26 > v30)
  {
    v31 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v32 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "line_fragment_ptr TSWPLayoutChore::pFillSingleLineFragment(const CGRect, const NSRange, const NSUInteger, const BOOL, TSWPTypesetterParamBlock &, TSWPLineFragmentArray::line_iterator &, const TSWPLineFragmentArray::line_iterator &, unichar &, BOOL &, BOOL)");
    objc_msgSend(v31, "handleFailureInFunction:file:lineNumber:description:", v32, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 1778, CFSTR("Bad _state.charIndex"));
    v30 = *(_QWORD *)(a1 + 168) + *(_QWORD *)(a1 + 160);
  }
  v33 = *a8;
  if (*((_QWORD *)*a8 + 1) + *(_QWORD *)*a8 > v30)
  {
    v34 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v35 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "line_fragment_ptr TSWPLayoutChore::pFillSingleLineFragment(const CGRect, const NSRange, const NSUInteger, const BOOL, TSWPTypesetterParamBlock &, TSWPLineFragmentArray::line_iterator &, const TSWPLineFragmentArray::line_iterator &, unichar &, BOOL &, BOOL)");
    objc_msgSend(v34, "handleFailureInFunction:file:lineNumber:description:", v35, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 1779, CFSTR("Bad line end"));
    v33 = *a8;
  }
  if (*((_QWORD *)v33 + 25) == *((_QWORD *)v33 + 24) && (*(_BYTE *)(a5 + 58) & 1) == 0)
  {
    v36 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v37 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "line_fragment_ptr TSWPLayoutChore::pFillSingleLineFragment(const CGRect, const NSRange, const NSUInteger, const BOOL, TSWPTypesetterParamBlock &, TSWPLineFragmentArray::line_iterator &, const TSWPLineFragmentArray::line_iterator &, unichar &, BOOL &, BOOL)");
    objc_msgSend(v36, "handleFailureInFunction:file:lineNumber:description:", v37, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 1780, CFSTR("Bad glyphCount"));
    v33 = *a8;
    if (!*a8)
    {
      v38 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
      v39 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "line_fragment_ptr TSWPLayoutChore::pFillSingleLineFragment(const CGRect, const NSRange, const NSUInteger, const BOOL, TSWPTypesetterParamBlock &, TSWPLineFragmentArray::line_iterator &, const TSWPLineFragmentArray::line_iterator &, unichar &, BOOL &, BOOL)");
      objc_msgSend(v38, "handleFailureInFunction:file:lineNumber:description:", v39, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 1782, CFSTR("failed to create a line fragment"));
      v33 = *a8;
    }
  }
  if ((*(_BYTE *)(a5 + 32) & 4) != 0)
  {
    v40 = (double *)((char *)v33 + 216);
    v41 = *((double *)v33 + 27);
    if (*(double *)(a1 + 632) >= v41)
      v41 = *(double *)(a1 + 632);
    *(double *)(a1 + 632) = v41;
    if (*((_QWORD *)v33 + 22))
    {
      if (v41 >= *v40)
        v40 = (double *)(a1 + 632);
      *(double *)(a1 + 632) = *v40;
    }
  }
  v42 = TSWPLayoutChore::pApplySpaceAfterToLineFragment((TSWPLayoutChore *)a1, v33, (TSWPLineFragment *)v25, *(unsigned __int16 *)(a5 + 208), *(_QWORD *)(a5 + 216));
  if (v42)
  {
    Paragraph = TSWPLayoutChore::pSetupNextParagraph((TSWPLayoutChore *)a1);
    *a14 = 0;
    if (Paragraph && *v20 > v21)
    {
      LOBYTE(v42) = objc_msgSend(*(id *)(a1 + 8), "hasColumnStyleForParagraphBreakAtCharIndex:", *(_QWORD *)(a5 + 216));
      goto LABEL_36;
    }
  }
  else
  {
LABEL_36:
    *a14 = v42;
  }
  v44 = *(unsigned __int16 *)(a5 + 208);
  result = IsParagraphBreakingCharacter(*(unsigned __int16 *)(a5 + 208));
  if (v44 == 8232)
    v46 = 1;
  else
    v46 = result;
  if (v46)
    v47 = *(_WORD *)(a5 + 208);
  else
    v47 = 0;
  *a13 = v47;
  return result;
}

void sub_2178E5110(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t TSWPParagraphEnumerator::paragraphRunsRightToLeft(TSWPParagraphEnumerator *this)
{
  return objc_msgSend(this->var0, "isWritingDirectionRightToLeftForParagraphAtParIndex:", this->var2);
}

void TSWPLineFragment::TSWPLineFragment(TSWPLineFragment *this)
{
  __int128 v1;
  __int128 v2;

  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 56) = 0;
  *((_QWORD *)this + 62) = 0;
  *((_QWORD *)this + 63) = 0;
  *((_QWORD *)this + 61) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  *((_DWORD *)this + 6) = 0;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_QWORD *)this + 48) = 0;
  *((_OWORD *)this + 10) = unk_217C2B3A8;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = *(_OWORD *)&qword_217C2B388;
  *((_OWORD *)this + 9) = xmmword_217C2B398;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  v2 = *MEMORY[0x24BDBF070];
  v1 = *(_OWORD *)(MEMORY[0x24BDBF070] + 16);
  *((_OWORD *)this + 2) = xmmword_217C2AD60;
  *((_OWORD *)this + 3) = v2;
  *((_OWORD *)this + 6) = v1;
  *((_OWORD *)this + 7) = gZeroHeightInfo;
  *((_OWORD *)this + 4) = v1;
  *((_OWORD *)this + 5) = v2;
  *((_QWORD *)this + 57) = 0;
  *((_QWORD *)this + 58) = 0;
  *((_QWORD *)this + 59) = 0;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 33) = 0u;
}

{
  __int128 v1;
  __int128 v2;

  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 56) = 0;
  *((_QWORD *)this + 62) = 0;
  *((_QWORD *)this + 63) = 0;
  *((_QWORD *)this + 61) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  *((_DWORD *)this + 6) = 0;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_QWORD *)this + 48) = 0;
  *((_OWORD *)this + 10) = unk_217C2B3A8;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = *(_OWORD *)&qword_217C2B388;
  *((_OWORD *)this + 9) = xmmword_217C2B398;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  v2 = *MEMORY[0x24BDBF070];
  v1 = *(_OWORD *)(MEMORY[0x24BDBF070] + 16);
  *((_OWORD *)this + 2) = xmmword_217C2AD60;
  *((_OWORD *)this + 3) = v2;
  *((_OWORD *)this + 6) = v1;
  *((_OWORD *)this + 7) = gZeroHeightInfo;
  *((_OWORD *)this + 4) = v1;
  *((_OWORD *)this + 5) = v2;
  *((_QWORD *)this + 57) = 0;
  *((_QWORD *)this + 58) = 0;
  *((_QWORD *)this + 59) = 0;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 33) = 0u;
}

uint64_t TSWPLayoutChore::pApplySpaceAfterToLineFragment(TSWPLayoutChore *this, const TSWPLineFragment *a2, TSWPLineFragment *a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v10;
  double v11;
  int v12;
  double v13;
  double v14;
  uint64_t result;
  unsigned int v17;
  void *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  double v22;
  double Line;
  double v24;
  double v25;
  double v26;
  TSWPParagraphEnumerator v27;

  if (a3)
    v10 = *((double *)a3 + 20) == 0.0;
  else
    v10 = 0;
  v11 = *((double *)this + 57);
  v12 = objc_msgSend(*((id *)this + 1), "wpKind");
  v13 = 6.0;
  if (v12 == 5)
    v13 = 0.0;
  v14 = fmax(*((double *)this + 55) + v11 + v13, 0.0);
  if (*((_DWORD *)this + 107) == 4 && v10)
    *(CGRect *)((char *)a3 + 80) = CGRectInset(*(CGRect *)((char *)a2 + 80), -v14, 0.0);
  if (*((_QWORD *)this + 10) < *((_QWORD *)this + 21) + *((_QWORD *)this + 20))
    goto LABEL_12;
  if (*((double *)this + 57) != 0.0)
  {
    if (TSWPParagraphEnumerator::isLastParagraph((TSWPParagraphEnumerator *)((char *)this + 104))
      || (v17 = objc_msgSend(*((id *)this + 1), "characterAtIndex:", *((_QWORD *)this + 20) + *((_QWORD *)this + 21) - 1)- 4, v17 < 0xC)&& ((0x907u >> v17) & 1) != 0|| (TSWPParagraphEnumerator::next((TSWPParagraphEnumerator *)((char *)this + 104), (uint64_t)&v27), v18 = (void *)TSWPParagraphEnumerator::paragraphStyle(&v27, 0), TSWPParagraphEnumerator::~TSWPParagraphEnumerator(&v27), objc_msgSend(v18, "intValueForProperty:", 102) != 4))
    {
      v19 = 0;
      if (!v10)
        goto LABEL_25;
    }
    else
    {
      v19 = objc_msgSend(v18, "valueForProperty:", 103);
      if (!v10)
        goto LABEL_25;
    }
    v20 = *((_DWORD *)this + 107);
    if ((v20 - 2) < 2 || v20 == 4 && (objc_msgSend(*((id *)this + 54), "isEqual:", v19) & 1) == 0)
    {
      *((double *)a3 + 20) = v14 + *((double *)a3 + 20);
      *((double *)a3 + 9) = v14 + *((double *)a3 + 9);
      *((double *)a3 + 13) = v14 + *((double *)a3 + 13);
    }
  }
LABEL_25:
  *((_QWORD *)this + 88) = 0;
  v21 = IsParagraphBreakingCharacter(a4);
  if ((v21 & 1) != 0)
  {
    v22 = *((double *)this + 49);
    if (v22 <= 0.0 || *((_QWORD *)this + 26) + *((_QWORD *)this + 25) == a5)
    {
      result = 1;
      goto LABEL_38;
    }
  }
  else
  {
    result = 0;
    if ((_DWORD)a4 == 8232 || *((_QWORD *)this + 10) != *((_QWORD *)this + 8))
      goto LABEL_38;
    v22 = *((double *)this + 49);
    if (v22 <= 0.0)
    {
LABEL_12:
      result = 0;
      goto LABEL_38;
    }
  }
  if (v10)
  {
    *((double *)a3 + 20) = v22 + *((double *)a3 + 20);
    *((double *)a3 + 9) = v22 + *((double *)a3 + 9);
    *((double *)a3 + 13) = v22 + *((double *)a3 + 13);
  }
  Line = TSWPLineFragment::calculateOffsetForNextLine((uint64_t)a2, *((_DWORD *)this + 84), *((double *)this + 47));
  v24 = *((double *)a2 + 20);
  v25 = *((double *)a2 + 14)
      + *((double *)a2 + 18)
      + *((double *)a2 + 16)
      + *((double *)a2 + 17)
      + *((double *)a2 + 19)
      + v24
      - Line;
  if (v25 > 0.0)
  {
    v26 = fmin(v25, v24);
    *((double *)this + 88) = -v26;
    if (a3)
      *((double *)a3 + 9) = *((double *)a3 + 9) - v26;
  }
  result = v21;
LABEL_38:
  *((_BYTE *)this + 592) = 0;
  return result;
}

void sub_2178E5838(_Unwind_Exception *a1, TSWPParagraphEnumerator *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  TSWPParagraphEnumerator::~TSWPParagraphEnumerator((TSWPParagraphEnumerator *)&a10);
  _Unwind_Resume(a1);
}

uint64_t TSWPCoreTextTypesetter::paragraphRange(TSWPCoreTextTypesetter *this)
{
  return *((_QWORD *)this + 5);
}

void TSWPLayoutChore::pSetupStateForLineStyling(id *this, id *a2)
{
  uint64_t v4;
  _BYTE v5[72];

  objc_opt_class();
  objc_msgSend(this[22], "objectForProperty:", 111);
  v4 = TSUDynamicCast();
  TSWPLineStylingLayoutState::TSWPLineStylingLayoutState(v5, v4, objc_msgSend(this[1], "textSourceForLayoutInRange:", this[20], this[21]));
  TSWPLineStylingLayoutState::operator=((uint64_t)a2, (uint64_t)v5);
  TSWPLineStylingLayoutState::~TSWPLineStylingLayoutState((TSWPLineStylingLayoutState *)v5);
  if (this[20] < this[10] || objc_msgSend(this[33], "effectiveTypeForLevel:", this[34]))
    TSWPLineStylingLayoutState::clear(a2);
}

void sub_2178E5908(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  TSWPLineStylingLayoutState::~TSWPLineStylingLayoutState((TSWPLineStylingLayoutState *)va);
  _Unwind_Resume(a1);
}

void TSWPLineStylingLayoutState::~TSWPLineStylingLayoutState(id *this)
{

  *this = 0;
  this[1] = 0;
}

void sub_2178E5AAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(a1);
}

uint64_t TSWPLineStylingLayoutState::TSWPLineStylingLayoutState(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;

  TSWPLineStylingCTState::TSWPLineStylingCTState(a1 + 8, a2, a3);
  *(_QWORD *)a1 = a2;
  if (a2)
    v5 = objc_msgSend(a2, "lineCount");
  else
    v5 = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v5;
  *(_BYTE *)(a1 + 64) &= ~1u;
  return a1;
}

void sub_2178E5B2C(_Unwind_Exception *a1)
{
  id *v1;

  *v1 = 0;
  _Unwind_Resume(a1);
}

uint64_t *String(size_t *a1, unsigned __int16 a2)
{
  uint64_t *result;

  result = (uint64_t *)p_TSSPropertyStoreSearch(a1, a2);
  if (result)
    return (uint64_t *)String(result);
  return result;
}

uint64_t String(uint64_t *a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t result;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v2 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v3 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "id TSSPropertyEntryGetObjectValue(const TSSPropertyEntry *)");
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.m"), 131, CFSTR("invalid nil value for '%s'"), "entry");
  }
  if (*((unsigned __int8 *)a1 + 10) - 1 >= 3)
  {
    if (*((_BYTE *)a1 + 10))
    {
      v7 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
      v8 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "id TSSPropertyEntryGetObjectValue(const TSSPropertyEntry *)");
      objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.m"), 146, CFSTR("Unexpected entry type"), v11);
    }
    else
    {
      result = *a1;
      if (*a1)
        return result;
    }
  }
  else
  {
    v4 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v5 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "id TSSPropertyEntryGetObjectValue(const TSSPropertyEntry *)");
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.m"), 143, CFSTR("Asked for object value of a %@-valued property."), String(*((unsigned __int8 *)a1 + 10)));
  }
  v9 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
  v10 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "id TSSPropertyEntryGetObjectValue(const TSSPropertyEntry *)");
  objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v10, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.m"), 150, CFSTR("Undefined value in entry for property %d %@"), *((unsigned __int16 *)a1 + 4), String(*((unsigned __int16 *)a1 + 4)));
  return 0;
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  const __CFString *v6;

  v2 = (void *)objc_msgSend(MEMORY[0x24BDD16A8], "string");
  if (a1)
  {
    v3 = *a1;
    if (*a1)
    {
      v4 = 0;
      v5 = 0;
      v6 = &stru_24D82FEB0;
      do
      {
        objc_msgSend(v2, "appendFormat:", CFSTR("%@%@"), v6, String((unsigned int *)(a1[1] + v4)));
        ++v5;
        v3 = *a1;
        v4 += 16;
        v6 = CFSTR("\n");
      }
      while (v5 < *a1);
    }
  }
  else
  {
    v3 = 0;
  }
  return objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("TSSPropertyStoreDescription(%p) %lu entries {\n%@\n}"), a1, v3, objc_msgSend(MEMORY[0x24BDD17C8], "tsu_stringByIndentingString:", v2));
}

uint64_t TSWPResolvePropertyForStyles(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!a2)
    return 0;
  v8 = 0;
  v9 = 1;
  while (1)
  {
    v10 = *(void **)(a1 + 8 * v8);
    if (v10)
    {
      v11 = objc_msgSend(v10, "boxedValueForProperty:", a3);
      if (v11)
      {
        v12 = v11;
        v13 = objc_msgSend(MEMORY[0x24BDBCEF8], "null");
        if (v12 != v13 || (a4 & 1) != 0)
          break;
      }
    }
    v8 = v9++;
    if (v8 >= a2)
      return 0;
  }
  if (v12 == v13)
    return 0;
  else
    return v12;
}

double *String(size_t *a1, unsigned __int16 a2)
{
  double *result;
  double v3;

  result = (double *)p_TSSPropertyStoreSearch(a1, a2);
  if (result)
    return (double *)String(result, v3);
  return result;
}

uint64_t String(int a1)
{
  uint64_t i;

  if ((TSSPropertyGetType_typeLookupInitialized & 1) == 0)
  {
    for (i = 0; i != 701; ++i)
      TSSPropertyGetType_typeLookup[(unsigned __int16)TSSPropertyGetType_typeTable[i]] = BYTE2(TSSPropertyGetType_typeTable[i]);
    TSSPropertyGetType_typeLookupInitialized = 1;
  }
  return TSSPropertyGetType_typeLookup[a1];
}

uint64_t String(double *a1, double a2)
{
  void *v3;
  uint64_t v4;
  uint64_t result;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  if (!a1)
  {
    v3 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v4 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "id TSSPropertyEntryGetBoxedObjectValue(const TSSPropertyEntry *)");
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.m"), 156, CFSTR("invalid nil value for '%s'"), "entry");
  }
  switch(*((_BYTE *)a1 + 10))
  {
    case 0:
      result = *(_QWORD *)a1;
      if (!*(_QWORD *)a1)
        goto LABEL_12;
      break;
    case 1:
      result = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", *(unsigned int *)a1);
      if (!result)
        goto LABEL_12;
      break;
    case 2:
      LODWORD(a2) = *(_DWORD *)a1;
      result = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", a2);
      if (!result)
        goto LABEL_12;
      break;
    case 3:
      result = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", *a1);
      if (!result)
        goto LABEL_12;
      break;
    default:
      v6 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
      v7 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "id TSSPropertyEntryGetBoxedObjectValue(const TSSPropertyEntry *)");
      objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.m"), 176, CFSTR("Unexpected entry type"));
LABEL_12:
      v8 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
      v9 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "id TSSPropertyEntryGetBoxedObjectValue(const TSSPropertyEntry *)");
      objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.m"), 180, CFSTR("Undefined value in entry for property %d %@"), *((unsigned __int16 *)a1 + 4), String(*((unsigned __int16 *)a1 + 4)));
      result = 0;
      break;
  }
  return result;
}

double TSDMultiplySizeScalar(double a1, double a2, double a3)
{
  return a1 * a3;
}

uint64_t TSWPLineStylingLayoutState::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
  {

    *(_QWORD *)a1 = *(id *)a2;
  }
  TSWPLineStylingCTState::operator=(a1 + 8, a2 + 8);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v4;
  return a1;
}

uint64_t TSWPLineStylingCTState::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
  {

    *(_QWORD *)a1 = *(id *)a2;
  }
  v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  return a1;
}

uint64_t TSWPLineStylingCTState::isAffectingCTAttributesEquallyTo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  BOOL v6;
  void *v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    v4 = *(unsigned __int8 *)(a1 + 8);
    v5 = *(_QWORD *)(a2 + 24);
    if (v5)
    {
      if (((v4 ^ *(unsigned __int8 *)(a2 + 8)) & 1) != 0)
        return 0;
    }
    else
    {
      if ((v4 & 1) != 0)
        return 0;
      v5 = 0;
    }
  }
  else
  {
    v5 = *(_QWORD *)(a2 + 24);
    if (v5 && (*(_BYTE *)(a2 + 8) & 1) != 0)
      return 0;
  }
  if (((*(unsigned __int8 *)(a2 + 8) ^ *(unsigned __int8 *)(a1 + 8)) & 1) != 0)
    return 0;
  v6 = *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && v3 == v5;
  if (!v6 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
    return 0;
  v7 = (void *)objc_msgSend((id)objc_msgSend(*(id *)a1, "overrideCharacterStylePropertyMap"), "propertyMapWithProperties:", +[TSWPCharacterStyle properties](TSWPCharacterStyle, "properties"));
  v8 = objc_msgSend((id)objc_msgSend(*(id *)a2, "overrideCharacterStylePropertyMap"), "propertyMapWithProperties:", +[TSWPCharacterStyle properties](TSWPCharacterStyle, "properties"));
  if (v7 == (void *)v8)
    return 1;
  else
    return objc_msgSend(v7, "isEqual:", v8);
}

uint64_t TSWPDropCapCTState::isAffectingCTAttributesEquallyTo(TSWPDropCapCTState *this, const TSWPDropCapCTState *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _BYTE *v6;
  BOOL v7;
  void *v8;
  uint64_t v9;

  v3 = *((_QWORD *)this + 4);
  if (!v3)
  {
    v6 = (char *)a2 + 8;
    v4 = *((_QWORD *)a2 + 4);
    if (v4 && (*((double *)a2 + 2) != 1.0 || (*v6 & 1) != 0))
      return 0;
    goto LABEL_15;
  }
  if (*((double *)this + 2) == 1.0)
  {
    v4 = *((_QWORD *)a2 + 4);
    if (!v4)
      return 0;
    v5 = *((_BYTE *)this + 8) & 1;
  }
  else
  {
    v4 = *((_QWORD *)a2 + 4);
    if (!v4)
      return 0;
    v5 = 1;
  }
  v6 = (char *)a2 + 8;
  if (*((double *)a2 + 2) == 1.0)
  {
    if (((v5 ^ *v6) & 1) == 0)
      goto LABEL_15;
    return 0;
  }
  if ((v5 & 1) == 0)
    return 0;
LABEL_15:
  v7 = *((_QWORD *)this + 3) == *((_QWORD *)a2 + 3) && v3 == v4;
  if (!v7
    || *((double *)this + 2) != *((double *)a2 + 2)
    || ((*v6 ^ *((unsigned __int8 *)this + 8)) & 1) != 0)
  {
    return 0;
  }
  v8 = (void *)objc_msgSend((id)objc_msgSend(*(id *)this, "characterStyleOverridePropertyMap"), "propertyMapWithProperties:", +[TSWPCharacterStyle properties](TSWPCharacterStyle, "properties"));
  v9 = objc_msgSend((id)objc_msgSend(*(id *)a2, "characterStyleOverridePropertyMap"), "propertyMapWithProperties:", +[TSWPCharacterStyle properties](TSWPCharacterStyle, "properties"));
  if (v8 == (void *)v9)
    return 1;
  else
    return objc_msgSend(v8, "isEqual:", v9);
}

uint64_t TSWPDropCapCTState::TSWPDropCapCTState(uint64_t a1, void *a2, void *a3)
{
  id v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;

  v5 = a2;
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a1 + 8) & 0xFE | objc_msgSend((id)objc_msgSend(v5, "characterStyleOverridePropertyMap"), "containsAnyPropertyInProperties:", +[TSWPCharacterStyle properties](TSWPCharacterStyle, "properties"));
  v6 = objc_msgSend(*(id *)a1, "charCount");
  v7 = objc_msgSend(a3, "length");
  v8 = objc_msgSend(a3, "charRangeMappedToStorage:", 0, objc_msgSend(a3, "length"));
  if (!v7 || !v6)
    goto LABEL_13;
  v9 = v8;
  v10 = 0;
  v11 = 1;
  do
  {
    v12 = v10 + 1;
    if (objc_msgSend(a3, "characterAtIndex:", v11 - 1) == 65532)
    {
      v13 = (void *)objc_msgSend(a3, "attachmentAtCharIndex:", v11 - 1);
      if (objc_msgSend(v13, "isDrawable"))
      {
        v14 = objc_msgSend(v13, "isAnchored");
        if (v14)
          v12 = v10;
        v6 += v14;
      }
    }
    v10 = v12;
    if (v11 >= v7)
      break;
  }
  while (v11++ < v6);
  if (!v12)
  {
LABEL_13:
    v6 = 0;
    v9 = 0x7FFFFFFFFFFFFFFFLL;
  }
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 16) = 0x3FF0000000000000;
  return a1;
}

uint64_t TSWPLineStylingCTState::TSWPLineStylingCTState(uint64_t a1, void *a2, void *a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;

  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a1 + 8) & 0xFE | objc_msgSend((id)objc_msgSend(a2, "overrideCharacterStylePropertyMap"), "containsAnyPropertyInProperties:", +[TSWPCharacterStyle properties](TSWPCharacterStyle, "properties"));
  v6 = objc_msgSend(a2, "options");
  v7 = objc_msgSend(a3, "length");
  v8 = objc_msgSend(a3, "charRangeMappedToStorage:", 0, objc_msgSend(a3, "length"));
  if (!a2 || !v7)
    goto LABEL_19;
  v9 = v8;
  v10 = 0;
  v11 = 0;
  while (1)
  {
    v12 = v11++;
    v13 = objc_msgSend(a3, "characterAtIndex:", v10);
    v14 = v13;
    if ((v6 & 1) == 0 && v11 <= 1 && (IsWhitespaceCharacter(v13) & 1) != 0)
    {
      v11 = v12;
      goto LABEL_15;
    }
    if ((v6 & 1) == 0 && (_DWORD)v14 == 65532)
    {
      v15 = (void *)objc_msgSend(a3, "attachmentAtCharIndex:", v10);
      if (objc_msgSend(v15, "isDrawable") && objc_msgSend(v15, "isAnchored"))
        v11 = v12;
      goto LABEL_15;
    }
    if ((IsParagraphBreakingCharacter(v14) & 1) != 0)
      break;
LABEL_15:
    if (v7 == ++v10)
    {
      if (!v11)
        goto LABEL_19;
      goto LABEL_17;
    }
  }
  v7 = v10 + 1;
  if (v12)
  {
LABEL_17:
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v7;
    v16 = v7 + v9;
    goto LABEL_20;
  }
LABEL_19:
  v16 = 0;
  *(_OWORD *)(a1 + 16) = xmmword_217C27470;
LABEL_20:
  *(_QWORD *)(a1 + 32) = v16;
  return a1;
}

uint64_t TSWPParagraphEnumerator::listRunsRightToLeft(TSWPParagraphEnumerator *this)
{
  return objc_msgSend(this->var0, "isWritingDirectionRightToLeftForListAtParIndex:", this->var2);
}

BOOL TSWPParagraphEnumerator::isFirstParagraph(TSWPParagraphEnumerator *this)
{
  return this->var4 == 0;
}

void TSWPLineStylingLayoutState::clear(id *this)
{

  *this = 0;
  this[1] = 0;
  *((_BYTE *)this + 16) &= ~1u;
  this[3] = (id)0x7FFFFFFFFFFFFFFFLL;
  this[4] = 0;
  this[5] = 0;
  this[6] = 0;
  *((_BYTE *)this + 64) &= ~1u;
}

uint64_t TSWPLineFragmentArray::logicalLineCount(TSWPLineFragmentArray *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1 == *(_QWORD *)this)
    return 0;
  else
    return *(unsigned __int16 *)(*(_QWORD *)(v1 - 16) + 552) + 1;
}

unint64_t TSWPAttributeArray::findObject(TSWPAttributeArray *this, objc_object *a2, unint64_t a3)
{
  unint64_t var2;
  objc_object **i;

  var2 = this->var2;
  if (var2 <= a3)
  {
    if (!var2)
      return 0x7FFFFFFFFFFFFFFFLL;
  }
  else if (*((objc_object **)this->var4 + 2 * a3 + 1) == a2)
  {
    return a3;
  }
  a3 = 0;
  for (i = (objc_object **)((char *)this->var4 + 8); *i != a2; i += 2)
  {
    if (var2 == ++a3)
      return 0x7FFFFFFFFFFFFFFFLL;
  }
  return a3;
}

unint64_t TSWPParagraphAttributeArray::paragraphRangeForCharRange(TSWPParagraphAttributeArray *this, _NSRange a2)
{
  NSUInteger length;
  NSUInteger location;
  unint64_t v5;
  unint64_t v6;
  NSUInteger v7;

  length = a2.length;
  location = a2.location;
  v5 = TSWPAttributeArray::characterCount((TSWPAttributeArray *)this);
  v6 = TSWPAttributeArray::effectiveAttributeIndexForCharIndex((TSWPAttributeArray *)this, location);
  if (length)
  {
    v7 = location + length;
    if (v7 != v5 || (IsParagraphBreakingCharacter(objc_msgSend(this->var5, "characterAtIndex:", v5 - 1)) & 1) == 0)
      v5 = v7 - 1;
  }
  else
  {
    v5 = location;
  }
  TSWPAttributeArray::effectiveAttributeIndexForCharIndex((TSWPAttributeArray *)this, v5);
  return v6;
}

void sub_2178E7CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2178E820C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A153AC](v1, MEMORY[0x24BEDB6B8]);
  _Unwind_Resume(a1);
}

double TSWPAttributeArray::TSWPAttributeArray(uint64_t a1, int a2)
{
  double result;

  *(_QWORD *)a1 = off_24D82DA48;
  *(_DWORD *)(a1 + 8) = a2;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t TSWPParagraphAttributeArray::didReplaceCharactersInRangeWithString(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;

  if (a2 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v12 = result;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 80))(result, 5, a2, a3, a4, a5);
    if (a5)
    {
      v13 = result;
      if (result != 0x7FFFFFFFFFFFFFFFLL)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 168))(v12);
        if ((_DWORD)result)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 160))(v12, a2, a3, a5, v13, a6, a7);
      }
    }
  }
  return result;
}

uint64_t TSWPParagraphAttributeArray::shouldInsertAttributesForMarkers(TSWPParagraphAttributeArray *this)
{
  return (this->var1 < 0x13) & (0x40907u >> this->var1);
}

unint64_t TSWPParagraphAttributeArray::adjustCharIndexForCharRangeWithString(TSWPAttributeArray *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v10;
  unint64_t v11;

  v10 = TSWPAttributeArray::effectiveAttributeIndexForCharIndex(a1, a3);
  if (v10 == 0x7FFFFFFFFFFFFFFFLL)
    v11 = 0;
  else
    v11 = v10;
  if (a6 != a4)
    TSWPAttributeArray::adjustCharIndexStartingAtAttributeIndex((uint64_t)a1, a2, v11 + 1, a6 - a4);
  return v11;
}

uint64_t TSWPAttributeArray::adjustCharIndexStartingAtAttributeIndex(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  _QWORD *v7;

  v4 = *(_QWORD *)(result + 16);
  v5 = v4 > a3;
  v6 = v4 - a3;
  if (v5)
  {
    v7 = (_QWORD *)(*(_QWORD *)(result + 32) + 16 * a3);
    do
    {
      *v7 += a4;
      v7 += 2;
      --v6;
    }
    while (v6);
  }
  return result;
}

int64x2_t TSWPParagraphAttributeArray::insertAttributesForMarkers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t *a6, TSWPStorageTransaction *a7)
{
  void *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t i;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64x2_t result;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1) & 1) == 0)
  {
    v13 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v14 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "virtual void TSWPParagraphAttributeArray::insertAttributesForMarkers(NSRange, NSUInteger, TSWPAttributeIndex, markerArray &, TSWPStorageTransaction *)");
    objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPParagraphAttributeArray.mm"), 304, CFSTR("insertAttributesForMarkers: we should not be in this method without objects or starts."));
  }
  v15 = *(_DWORD *)(a1 + 8);
  switch(v15)
  {
    case 0:
      v56 = objc_msgSend(*(id *)(a1 + 40), "isInInit");
      v55 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 40), "documentRoot"), "isBeingLocalized");
      v16 = *a6;
      if (*a6 != a6[1])
      {
        v17 = 0;
        v18 = a2 + 1;
        do
        {
          if (IsParagraphBreakingCharacter(*(unsigned __int16 *)(v16 + 8)))
          {
            v19 = v18 + *(_QWORD *)v16;
            if (!v17)
            {
              v20 = *(_QWORD *)(a1 + 72);
              v21 = *(_QWORD *)(a1 + 32);
              if (v20 == 0x7FFFFFFFFFFFFFFFLL)
              {
                v17 = *(void **)(v21 + 16 * a5 + 8);
                v22 = v18 + *(_QWORD *)v16;
              }
              else
              {
                v17 = *(void **)(v21 + 16 * v20 + 8);
                v22 = TSWPAttributeArray::charIndexForAttributeIndex((TSWPAttributeArray *)a1, v20);
              }
              v23 = v56;
              if (!*(_BYTE *)(a1 + 56))
                v23 = 1;
              if (((v23 | v55) & 1) == 0)
              {
                v24 = objc_msgSend(v17, "followingParagraphStyle");
                if (v24 && v24 != (_QWORD)v17)
                {
                  v26 = (void *)v24;
                  if (*(_QWORD *)(a1 + 64) == 0x7FFFFFFFFFFFFFFFLL)
                  {
                    *(_QWORD *)(a1 + 64) = v22;
                    v27 = objc_msgSend(*(id *)(a1 + 40), "attributeArrayForKind:", 2);
                    if (v27)
                      *(_QWORD *)(v27 + 64) = *(_QWORD *)(a1 + 64);
                  }
                  v17 = v26;
                }
              }
            }
            ++a5;
            v57 = v19;
            v58 = (uint64_t)v17;
            TSWPAttributeArray::insertAttribute((TSWPAttributeArray *)a1, (const TSWPAttributeRecord *)&v57, a5, 0, a7);
          }
          v16 += 16;
        }
        while (v16 != a6[1]);
      }
      break;
    case 1:
      if (*(_QWORD *)(a1 + 72) != 0x7FFFFFFFFFFFFFFFLL)
      {
        v32 = objc_msgSend(*(id *)(a1 + 40), "paragraphLevelAtParIndex:");
        v33 = *a6;
        if (*a6 != a6[1])
        {
          v34 = v32;
          v35 = a2 + 1;
          do
          {
            if (IsParagraphBreakingCharacter(*(unsigned __int16 *)(v33 + 8)))
              objc_msgSend(*(id *)(a1 + 40), "setParagraphLevel:forCharRange:undoTransaction:", v34, v35 + *(_QWORD *)v33, 1, a7);
            v33 += 16;
          }
          while (v33 != a6[1]);
        }
      }
      break;
    case 2:
      if (a4 && *(_QWORD *)(a1 + 64) != 0x7FFFFFFFFFFFFFFFLL && (v36 = *(void **)(a1 + 40)) != 0)
      {
        v37 = objc_msgSend((id)objc_msgSend(v36, "stylesheet"), "defaultListStyle");
        if (!v37)
          v37 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 40), "stylesheet"), "defaultListStyle");
        if (objc_msgSend(*(id *)(a1 + 40), "listStyleAtCharIndex:effectiveRange:", *(_QWORD *)(a1 + 64), 0) != v37)
          objc_msgSend(*(id *)(a1 + 40), "setListStyle:forCharRange:undoTransaction:", v37, *(_QWORD *)(a1 + 64), a2 + a4 - *(_QWORD *)(a1 + 64), a7);
      }
      else
      {
        v42 = *(_QWORD *)(a1 + 72);
        if (v42 != 0x7FFFFFFFFFFFFFFFLL)
        {
          v43 = objc_msgSend(*(id *)(a1 + 40), "listStyleAtParIndex:effectiveRange:", v42, 0);
          v44 = *a6;
          if (*a6 != a6[1])
          {
            v45 = v43;
            v46 = a2 + 1;
            do
            {
              if (IsParagraphBreakingCharacter(*(unsigned __int16 *)(v44 + 8)))
              {
                ++a5;
                v57 = v46 + *(_QWORD *)v44;
                v58 = v45;
                TSWPAttributeArray::insertAttribute((TSWPAttributeArray *)a1, (const TSWPAttributeRecord *)&v57, a5, 0, a7);
              }
              v44 += 16;
            }
            while (v44 != a6[1]);
          }
        }
      }
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
      break;
    case 8:
      v39 = *a6;
      v38 = a6[1];
      if (*a6 != v38)
      {
        v40 = a2 + 1;
        do
        {
          if (*(_WORD *)(v39 + 8) == 4)
          {
            ++a5;
            v57 = v40 + *(_QWORD *)v39;
            v58 = 0;
            TSWPAttributeArray::insertAttribute((TSWPAttributeArray *)a1, (const TSWPAttributeRecord *)&v57, a5, 0, a7);
            v38 = a6[1];
          }
          v39 += 16;
        }
        while (v39 != v38);
      }
      break;
    case 11:
      for (i = *a6; i != a6[1]; i += 16)
      {
        if (IsParagraphBreakingCharacter(*(unsigned __int16 *)(i + 8)))
        {
          v47 = *(_QWORD *)(a1 + 72);
          if (v47 == 0x7FFFFFFFFFFFFFFFLL)
            v47 = a5;
          if (v47 < *(_QWORD *)(a1 + 16))
          {
            if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 16 * v47 + 8))
            {
              if (a4)
              {
                v48 = a2 + *(_QWORD *)i + 1;
                if (a2 + *(_QWORD *)i != 0x7FFFFFFFFFFFFFFELL)
                {
                  v49 = *(void **)(a1 + 40);
                  if (v49)
                  {
                    v50 = *a6;
                    v51 = a6[1] - *a6;
                    if (v51 && (v52 = (v51 >> 4) - 1, *(_QWORD *)(v50 + 16 * v52) == a4 - 1))
                    {
                      v53 = IsParagraphBreakingCharacter(*(unsigned __int16 *)(v50 + 16 * v52 + 8));
                      v49 = *(void **)(a1 + 40);
                    }
                    else
                    {
                      v53 = 0;
                    }
                    objc_msgSend(v49, "setListStart:forCharRange:undoTransaction:", 0, v48, a2 + a4 - v48 + v53, a7);
                  }
                }
              }
            }
          }
          goto LABEL_76;
        }
      }
      break;
    default:
      if (v15 == 18 && *(_QWORD *)(a1 + 72) != 0x7FFFFFFFFFFFFFFFLL)
      {
        v28 = objc_msgSend(*(id *)(a1 + 40), "writingDirectionForParagraphAtParIndex:");
        v29 = *a6;
        if (*a6 != a6[1])
        {
          v30 = v28;
          v31 = a2 + 1;
          do
          {
            if (IsParagraphBreakingCharacter(*(unsigned __int16 *)(v29 + 8)))
              objc_msgSend(*(id *)(a1 + 40), "setParagraphWritingDirection:forCharRange:undoTransaction:", v30, v31 + *(_QWORD *)v29, 1, a7);
            v29 += 16;
          }
          while (v29 != a6[1]);
        }
      }
      break;
  }
LABEL_76:
  *(_BYTE *)(a1 + 56) = 0;
  result = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(a1 + 64) = result;
  return result;
}

uint64_t TSWPAttributeArray::appliesToRange(TSWPAttributeArray *this)
{
  return 1;
}

void std::vector<_TSWPCharIndexAndAffinity>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      abort();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLength>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void TSWPParagraphAttributeArray::willReplaceCharactersInRangeWithString(TSWPParagraphAttributeArray *a1, _NSRange a2, uint64_t a3, uint64_t a4, uint64_t a5, TSWPStorageTransaction *a6)
{
  NSUInteger length;
  NSUInteger location;
  TSWPParagraphAttributeArray *v10;
  TSWPParagraphAttributeArray *v11;
  uint64_t v12;
  id var5;
  unint64_t v14;
  uint64_t v15;
  TSWPParagraphAttributeArray *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t var2;
  _BOOL4 v21;
  _BOOL8 v22;
  _NSRange v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  TSWPParagraphEnumerator v30;
  _NSRange v31;
  _NSRange v32;

  length = a2.length;
  location = a2.location;
  v10 = a1;
  a1->var7 = 0;
  a1->var9 = 0x7FFFFFFFFFFFFFFFLL;
  if (a4 && a1->var1 != 8)
  {
    v11 = (TSWPParagraphAttributeArray *)(a2.location + a2.length);
    v12 = objc_msgSend(a1->var5, "paragraphIndexAtCharIndex:", a2.location + a2.length);
    a1 = (TSWPParagraphAttributeArray *)(v12 + 1 >= v10->var2
                                       ? TSWPAttributeArray::characterCount((TSWPAttributeArray *)v10)
                                       : objc_msgSend(v10->var5, "textRangeForParagraphAtIndex:") - 1);
    v10->var7 = a1 == v11;
    if (a1 == v11)
    {
      var5 = v10->var5;
      if (var5)
        objc_msgSend(var5, "paragraphEnumeratorAtCharIndex:styleProvider:", location + length, 0);
      else
        memset(&v30, 0, sizeof(v30));
      v14 = TSWPParagraphEnumerator::relevantParagraphIndex(&v30);
      v15 = 0x7FFFFFFFFFFFFFFFLL;
      if (v14 != v12)
        v15 = v14;
      v10->var9 = v15;
      TSWPParagraphEnumerator::~TSWPParagraphEnumerator(&v30);
    }
  }
  if (length)
  {
    v16 = v10;
    if (v10->var1)
    {
      a1 = (TSWPParagraphAttributeArray *)objc_msgSend(v10->var5, "attributeArrayForKind:", 0);
      v16 = a1;
    }
    if (!a4)
    {
      if (v16)
      {
        v31.location = location;
        v31.length = length;
        if (TSWPParagraphAttributeArray::deletingWholeParagraphs(a1, v31, (TSWPAttributeArray *)v16))
        {
          if (v10->var1 != 8)
          {
            v32.location = location;
            v32.length = length;
            TSWPParagraphAttributeArray::assignAttributesAtFrontOfRange(v10, v32, v16, a6);
          }
        }
      }
    }
    v17 = TSWPAttributeArray::effectiveAttributeIndexForCharIndex((TSWPAttributeArray *)v10, location);
    v18 = location + length;
    v19 = TSWPAttributeArray::effectiveAttributeIndexForCharIndex((TSWPAttributeArray *)v10, location + length);
    var2 = v10->var2;
    if (v17 >= var2)
    {
      v21 = 0;
    }
    else
    {
      v21 = TSWPAttributeArray::charIndexForAttributeIndex((TSWPAttributeArray *)v10, v17) == location;
      var2 = v10->var2;
    }
    if (v19 >= var2)
    {
      v22 = 0;
    }
    else
    {
      v22 = TSWPAttributeArray::charIndexForAttributeIndex((TSWPAttributeArray *)v10, v19) == v18;
      var2 = v10->var2;
    }
    if (v17 + 1 < var2 && v18 >= TSWPAttributeArray::charIndexForAttributeIndex((TSWPAttributeArray *)v10, v17 + 1))
    {
      v23.length = length - v21 + v22;
      if (v23.length)
      {
        v23.location = location + v21;
        v24 = TSWPAttributeArray::calculateAttributeRangeForCharacterRange((TSWPAttributeArray *)v10, v23);
        if (v25)
        {
          v26 = v24;
          v27 = v25;
          if (!v16
            || (v10->var1 | 8) == 8
            || (v28 = TSWPAttributeArray::effectiveAttributeIndexForCharIndex((TSWPAttributeArray *)v16, v18) + 1,
                v28 >= v16->var2)
            || !TSWPParagraphAttributeArray::isParagraphBreakSparse(v10, v28, (TSWPAttributeArray *)v16)
            || (v29 = TSWPAttributeArray::charIndexForAttributeIndex((TSWPAttributeArray *)v16, v28),
                --v27,
                TSWPAttributeArray::replaceCharIndexForAttributeIndex((TSWPAttributeArray *)v10, v29, v27 + v26, a6),
                v27))
          {
            (*((void (**)(TSWPParagraphAttributeArray *, unint64_t, uint64_t, TSWPStorageTransaction *))v10->var0
             + 7))(v10, v26, v27, a6);
            (*((void (**)(TSWPParagraphAttributeArray *, unint64_t, TSWPStorageTransaction *))v10->var0
             + 29))(v10, v26, a6);
          }
        }
      }
    }
  }
}

void sub_2178E97C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TSWPParagraphEnumerator::~TSWPParagraphEnumerator((TSWPParagraphEnumerator *)&a9);
  _Unwind_Resume(a1);
}

unint64_t TSWPAttributeArray::characterCount(TSWPAttributeArray *this)
{
  id var5;

  var5 = this->var5;
  if (var5)
    return objc_msgSend(var5, "characterCount");
  else
    return this->var6;
}

uint64_t TSWPParagraphEnumerator::TSWPParagraphEnumerator(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_QWORD *)(result + 24) = a5;
  *(_QWORD *)(result + 32) = a4;
  *(_QWORD *)(result + 40) = a4;
  *(_BYTE *)(result + 48) = a6;
  if (a3 == a2)
    *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = a4;
  return result;
}

{
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_QWORD *)(result + 24) = a5;
  *(_QWORD *)(result + 32) = a4;
  *(_QWORD *)(result + 40) = a4;
  *(_BYTE *)(result + 48) = a6;
  if (a3 == a2)
    *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = a4;
  return result;
}

void sub_2178E9ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  TSWPAttributeEnumerator::~TSWPAttributeEnumerator((TSWPAttributeEnumerator *)va);
  _Unwind_Resume(a1);
}

uint64_t TSWPAttributeArray::rangeForCharIndex(TSWPAttributeArray *this, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  id var5;

  v3 = TSWPAttributeArray::effectiveAttributeIndexForCharIndex(this, a2);
  if (v3 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v4 = 0;
    v5 = 0;
  }
  else
  {
    v6 = v3;
    v4 = TSWPAttributeArray::charIndexForAttributeIndex(this, v3);
    v5 = v6 + 1;
  }
  if (v5 >= this->var2)
  {
    var5 = this->var5;
    if (var5)
      objc_msgSend(var5, "characterCount");
  }
  else
  {
    TSWPAttributeArray::charIndexForAttributeIndex(this, v5);
  }
  return v4;
}

uint64_t TSWPAttributeArray::rangeForAttributeIndex(TSWPAttributeArray *this, unint64_t a2)
{
  uint64_t v4;
  id var5;

  v4 = TSWPAttributeArray::charIndexForAttributeIndex(this, a2);
  if (a2 + 1 >= this->var2)
  {
    var5 = this->var5;
    if (var5)
      objc_msgSend(var5, "characterCount");
  }
  else
  {
    TSWPAttributeArray::charIndexForAttributeIndex(this, a2 + 1);
  }
  return v4;
}

unint64_t TSWPAttributeArray::effectiveAttributeIndexForCharIndex(TSWPAttributeArray *this, unint64_t a2)
{
  unint64_t var2;
  TSWPAttributeRecord *var4;
  TSWPAttributeRecord *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  TSWPAttributeRecord *v8;
  unint64_t v9;
  unint64_t v10;

  var2 = this->var2;
  if (!var2)
    return 0x7FFFFFFFFFFFFFFFLL;
  var4 = this->var4;
  v4 = var4;
  v5 = this->var2;
  do
  {
    v6 = v5 >> 1;
    v7 = (_QWORD *)((char *)v4 + 16 * (v5 >> 1));
    v9 = *v7;
    v8 = (TSWPAttributeRecord *)(v7 + 2);
    v5 += ~(v5 >> 1);
    if (v9 < a2)
      v4 = v8;
    else
      v5 = v6;
  }
  while (v5);
  v10 = (v4 - var4) >> 4;
  if (v10 >= var2)
    return var2 - 1;
  if (TSWPAttributeArray::charIndexForAttributeIndex(this, (v4 - var4) >> 4) != a2)
  {
    if (v4 == var4)
      return 0x7FFFFFFFFFFFFFFFLL;
    else
      --v10;
  }
  return v10;
}

uint64_t TSWPAttributeArray::charIndexForAttributeIndex(TSWPAttributeArray *this, unint64_t a2)
{
  unint64_t var2;
  void *v5;
  uint64_t v6;

  var2 = this->var2;
  if (var2 <= a2)
  {
    v5 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v6 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "TSWPCharIndex TSWPAttributeArray::charIndexForAttributeIndex(TSWPAttributeIndex) const");
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPAttributeArray.mm"), 67, CFSTR("TSWPAttributeArray: charIndexForAttributeIndex: bad index."));
    var2 = this->var2;
  }
  if (var2 <= a2)
    return 0;
  else
    return *((_QWORD *)this->var4 + 2 * a2);
}

unint64_t TSWPParagraphEnumerator::relevantParagraphIndex(TSWPParagraphEnumerator *this)
{
  return this->var2;
}

uint64_t std::__split_buffer<TSWPLayoutState>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 688;
    TSWPLayoutState::~TSWPLayoutState((TSWPLayoutState *)(i - 688));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void TSWPLayoutState::~TSWPLayoutState(TSWPLayoutState *this)
{

  TSWPParagraphEnumerator::~TSWPParagraphEnumerator((TSWPParagraphEnumerator *)((char *)this + 24));
}

void sub_2178EA0D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TSWPParagraphEnumerator::~TSWPParagraphEnumerator((TSWPParagraphEnumerator *)&a9);
  _Unwind_Resume(a1);
}

uint64_t TSWPParagraphEnumerator::paragraphListStyle(TSWPParagraphEnumerator *this)
{
  if (this->var1 && (objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend(this->var1, "listStyleAtParIndex:", this->var2);
  else
    return objc_msgSend(this->var0, "listStyleAtParIndex:effectiveRange:", this->var2, 0);
}

uint64_t TSWPParagraphEnumerator::paragraphLevel(TSWPParagraphEnumerator *this)
{
  unint64_t var2;
  char v3;
  uint64_t result;

  var2 = this->var2;
  if (var2 >= this->var3)
    return 0;
  if (this->var1)
  {
    v3 = objc_opt_respondsToSelector();
    var2 = this->var2;
    if ((v3 & 1) != 0)
    {
      result = objc_msgSend(this->var1, "paragraphLevelAtParIndex:", var2);
      if (result != 0x7FFFFFFFFFFFFFFFLL)
        return result;
      var2 = this->var2;
    }
  }
  return objc_msgSend(this->var0, "paragraphLevelAtParIndex:", var2);
}

unint64_t TSWPStyleAttributeArray::willReplaceCharactersInRangeWithString(TSWPAttributeArray *this, _NSRange a2, uint64_t a3, uint64_t a4, uint64_t a5, TSWPStorageTransaction *a6)
{
  NSUInteger length;
  NSUInteger location;
  unint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  unint64_t v17;
  uint64_t v18;
  _NSRange v19;

  length = a2.length;
  location = a2.location;
  result = 1;
  LOBYTE(this[1].var0) = 1;
  if (this->var1 == 14)
    result = TSWPStyleAttributeArray::deleteAttributesInRangeWithString((uint64_t)this, a2, a3, a4, a5, a6);
  if ((_DWORD)result)
  {
    if (length)
    {
      v19.location = location;
      v19.length = length;
      result = TSWPAttributeArray::calculateAttributeRangeForCharacterRange(this, v19);
      if (v12)
      {
        v13 = result;
        v14 = v12;
        result = TSWPAttributeArray::charIndexForAttributeIndex(this, result);
        if (a4 && result == location)
        {
          if (v13)
          {
            v15 = (void *)*((_QWORD *)this->var4 + 2 * v13 + 1);
            *(_QWORD *)&this[1].var1 = v15;
            if (!v15)
            {
              v15 = (void *)objc_msgSend(MEMORY[0x24BDBCEF8], "null");
              *(_QWORD *)&this[1].var1 = v15;
            }
            v16 = v15;
          }
          else
          {
            if (!--v14)
              return result;
            v13 = 1;
          }
        }
        v17 = v13 + 1;
        if (v13 + 1 >= this->var2
          || (result = TSWPAttributeArray::charIndexForAttributeIndex(this, v13 + 1), result <= location + length))
        {
          v17 = v13;
        }
        else if (!--v14)
        {
          return result;
        }
        v18 = v14 + v17;
        if (v14 + v17 < this->var2)
        {
          result = TSWPAttributeArray::charIndexForAttributeIndex(this, v14 + v17);
          if (result > location + length)
          {
            if (!--v14)
              return result;
            v18 = v14 + v17;
          }
        }
        if (v18 != this->var2
          || (result = TSWPAttributeArray::characterCount(this), location + length >= result)
          || (--v14, v14))
        {
          LOBYTE(this[1].var0) = 0;
          (*((void (**)(TSWPAttributeArray *, unint64_t, uint64_t, TSWPStorageTransaction *))this->var0
           + 7))(this, v17, v14, a6);
          return (*((uint64_t (**)(TSWPAttributeArray *, unint64_t, TSWPStorageTransaction *))this->var0
                  + 29))(this, v17, a6);
        }
      }
    }
  }
  return result;
}

void TSWPStyleAttributeArray::didReplaceCharactersInRangeWithString(TSWPAttributeArray *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, TSWPStorageTransaction *a7)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t var2;
  uint64_t v16;
  _BOOL4 v17;
  _BOOL4 v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;

  if (a2 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v12 = a5 - a3;
    if (a5 != a3)
    {
      if (this->var2)
      {
        if (LOBYTE(this[1].var0))
          v13 = 5;
        else
          v13 = 4;
        v14 = TSWPAttributeArray::calculateAttributeIndexForCharacterIndex(this, a2);
        if (v14)
        {
          var2 = this->var2;
        }
        else
        {
          v16 = TSWPAttributeArray::charIndexForAttributeIndex(this, 0);
          var2 = this->var2;
          if (!v16)
          {
            if (!var2)
            {
              v17 = a3 != 0;
              v18 = a5 != 0;
              v13 = 4;
              v14 = 1;
LABEL_15:
              v19 = this->var2;
              if (!v18 || !v17 || v14 >= v19)
              {
LABEL_20:
                if (v14 < v19 && v12 + (int)TSWPAttributeArray::charIndexForAttributeIndex(this, v14) < (int)a2)
                  goto LABEL_22;
                if (v14)
                  v20 = this->var1 == 17;
                else
                  v20 = 0;
                if (!v20 || !v18)
                  goto LABEL_44;
                v22 = this->var2;
                if (v14 < v22)
                {
                  if (a2 == TSWPAttributeArray::charIndexForAttributeIndex(this, v14))
                  {
                    v23 = v14 - 1;
LABEL_41:
                    if (!*((_QWORD *)this->var4 + 2 * v23 + 1))
                      goto LABEL_44;
                    if (v14 == this->var2)
                    {
                      v33 = a2;
                      v34 = 0;
                      TSWPAttributeArray::insertAttribute(this, (const TSWPAttributeRecord *)&v33, v14, 0, a7);
                    }
LABEL_23:
                    ++v14;
                    v13 = 4;
LABEL_44:
                    TSWPAttributeArray::adjustCharIndexStartingAtAttributeIndex((uint64_t)this, v13, v14, a5 - a3);
                    goto LABEL_45;
                  }
                  v22 = this->var2;
                }
                if (v14 != v22)
                  goto LABEL_44;
                v23 = v14 - 1;
                v24 = TSWPAttributeArray::rangeForAttributeIndex(this, v14 - 1);
                if (a2 + a5 + a3 != v24 + v25)
                  goto LABEL_44;
                goto LABEL_41;
              }
              if (TSWPAttributeArray::charIndexForAttributeIndex(this, v14) < a2 + a3)
              {
LABEL_22:
                TSWPAttributeArray::replaceCharIndexForAttributeIndex(this, a2 + a5, v14, a7);
                goto LABEL_23;
              }
LABEL_19:
              v19 = this->var2;
              goto LABEL_20;
            }
            v13 = 4;
            v14 = 1;
            if (*((_QWORD *)this->var4 + 1) && !a3)
            {
              v33 = 0;
              v34 = 0;
              TSWPAttributeArray::insertAttribute(this, (const TSWPAttributeRecord *)&v33, 0, 0, a7);
              v18 = a5 != 0;
              v14 = 1;
              goto LABEL_19;
            }
          }
        }
        v17 = a3 != 0;
        v18 = a5 != 0;
        if (a5 && v14 < var2 && a3)
        {
          if (TSWPAttributeArray::charIndexForAttributeIndex(this, v14) == a2)
            goto LABEL_23;
          v18 = 1;
          v17 = 1;
        }
        goto LABEL_15;
      }
    }
  }
LABEL_45:
  v26 = *(_QWORD *)&this[1].var1;
  if (v26)
  {
    if (a3)
    {
      if (v26 == objc_msgSend(MEMORY[0x24BDBCEF8], "null"))
        v27 = 0;
      else
        v27 = v26;
      v28 = TSWPAttributeArray::effectiveAttributeIndexForCharIndex(this, a2);
      if (v28 == 0x7FFFFFFFFFFFFFFFLL
        || *((_QWORD *)this->var4 + 2 * v28 + 1) != v27
        || (v29 = TSWPAttributeArray::rangeForAttributeIndex(this, v28), v29 > a2)
        || v29 + v30 < a2 + a5)
      {
        (*((void (**)(TSWPAttributeArray *, uint64_t, unint64_t, uint64_t, _QWORD, TSWPStorageTransaction *))this->var0
         + 8))(this, v27, a2, a5, 0, a7);
      }
    }
    else
    {
      v31 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
      v32 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "virtual void TSWPStyleAttributeArray::didReplaceCharactersInRangeWithString(NSRange, NSString *, NSUInteger, markerArray &, TSWPStorageTransaction *, TSWPStyleInsertionBehavior)");
      objc_msgSend(v31, "handleFailureInFunction:file:lineNumber:description:", v32, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPStyleAttributeArray.mm"), 406, CFSTR("TSWPStyleAttributeArray::didReplaceCharactersInRangeWithString: we should have a range selection."));
    }

    *(_QWORD *)&this[1].var1 = 0;
  }
}

TSWPAttributeArray *TSWPAttachmentAttributeArray::insertAttributesForMarkers(TSWPAttributeArray *this, uint64_t a2, int a3, int a4, unint64_t a5, uint64_t *a6, TSWPStorageTransaction *a7)
{
  uint64_t v7;
  uint64_t v8;
  TSWPAttributeArray *v13;
  int v14;
  unint64_t v15;
  _QWORD v16[2];

  v8 = *a6;
  v7 = a6[1];
  if (*a6 != v7)
  {
    v13 = this;
    while (1)
    {
      v14 = *(unsigned __int16 *)(v8 + 8);
      if (v14 != 14)
        break;
      if (v13->var1 == 5)
        goto LABEL_8;
LABEL_9:
      v8 += 16;
      if (v8 == v7)
        return this;
    }
    if (v14 != 65532 || v13->var1 != 4)
      goto LABEL_9;
LABEL_8:
    v15 = a5 + 1;
    v16[0] = *(_QWORD *)v8 + a2;
    v16[1] = 0;
    this = (TSWPAttributeArray *)TSWPAttributeArray::insertAttribute(v13, (const TSWPAttributeRecord *)v16, a5, 0, a7);
    v7 = a6[1];
    a5 = v15;
    goto LABEL_9;
  }
  return this;
}

TSWPAttributeArray *TSWPAttributeArray::willReplaceCharactersInRangeWithString(TSWPAttributeArray *result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  TSWPAttributeArray *v10;
  unint64_t v11;

  if (a3)
  {
    v10 = result;
    v11 = TSWPAttributeArray::calculateAttributeIndexForCharacterIndex(result, a2);
    result = (TSWPAttributeArray *)TSWPAttributeArray::calculateAttributeIndexForCharacterIndex(v10, a2 + a3);
    if (result != (TSWPAttributeArray *)v11)
      return (TSWPAttributeArray *)(*((uint64_t (**)(TSWPAttributeArray *, unint64_t, char *, uint64_t))v10->var0
                                    + 7))(v10, v11, (char *)result - v11, a7);
  }
  return result;
}

uint64_t TSWPAttributeArray::didReplaceCharactersInRangeWithString(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;

  if (a2 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v12 = result;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 80))(result, 5, a2, a3, a4, a5);
    if (a5)
    {
      v13 = result;
      if (result != 0x7FFFFFFFFFFFFFFFLL)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 168))(v12);
        if ((_DWORD)result)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 160))(v12, a2, a3, a5, v13, a6, a7);
      }
    }
  }
  return result;
}

uint64_t TSWPAttachmentAttributeArray::shouldInsertAttributesForMarkers(TSWPAttachmentAttributeArray *this)
{
  return 1;
}

unint64_t TSWPAttributeArray::adjustCharIndexForCharRangeWithString(TSWPAttributeArray *a1, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t result;
  unint64_t var2;
  BOOL v11;
  unint64_t v12;
  _QWORD *v13;

  result = TSWPAttributeArray::calculateAttributeIndexForCharacterIndex(a1, a3);
  if (a6 != a4 && result != 0x7FFFFFFFFFFFFFFFLL)
  {
    var2 = a1->var2;
    v11 = var2 > result;
    v12 = var2 - result;
    if (v11)
    {
      v13 = (_QWORD *)((char *)a1->var4 + 16 * result);
      do
      {
        *v13 += a6 - a4;
        v13 += 2;
        --v12;
      }
      while (v12);
    }
  }
  return result;
}

double TSWPLineFragmentArray::topOfCapForLogicalLineIndex(TSWPLineFragmentArray *this, unint64_t a2)
{
  NSUInteger v3;
  NSUInteger v4;
  NSUInteger v5;
  _NSRange v7;

  v3 = TSWPLineFragmentArray::lineFragmentRangeForLogicalLineIndex(this, a2);
  v5 = v4;
  v7.location = v3;
  v7.length = v5;
  return TSWPLineFragmentArray::topOfCapForForLineFragmentRange(this, v7);
}

uint64_t TSWPLineFragmentArray::lineFragmentRangeForLogicalLineIndex(TSWPLineFragmentArray *this, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;

  v2 = *(_QWORD *)this;
  v3 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this == v3)
    return 0x7FFFFFFFFFFFFFFFLL;
  v4 = 0;
  v5 = 0;
  result = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    v7 = *(unsigned __int16 *)(*(_QWORD *)v2 + 552);
    if (v7 == a2)
    {
      if (result == 0x7FFFFFFFFFFFFFFFLL)
        result = v5;
      ++v4;
    }
    else if (v7 > a2)
    {
      return result;
    }
    ++v5;
    v2 += 16;
  }
  while (v2 != v3);
  return result;
}

void TSWPLineFragment::~TSWPLineFragment(TSWPLineFragment *this)
{
  TSWPListLabel *v2;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  const void *v6;
  void *v7;
  void **v8;

  v2 = (TSWPListLabel *)*((_QWORD *)this + 22);
  if (v2)
  {
    TSWPListLabel::~TSWPListLabel(v2);
    MEMORY[0x219A153B8]();
    *((_QWORD *)this + 22) = 0;
  }
  v3 = *((_QWORD *)this + 58);
  if (v3)
  {
    CGColorRelease(*(CGColorRef *)(v3 + 24));

    MEMORY[0x219A153B8](v3, 0x10A0C406E8A3FE5);
    *((_QWORD *)this + 58) = 0;
  }
  v4 = *((_QWORD *)this + 49);
  if (v4)
  {
    v5 = *(const void **)(v4 + 16);
    if (v5)
      CFRelease(v5);
    MEMORY[0x219A153B8](v4, 0x1060C4051B6AA0BLL);
    *((_QWORD *)this + 49) = 0;
  }

  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 59) = 0;

  *((_QWORD *)this + 64) = 0;
  *((_QWORD *)this + 66) = 0;
  v6 = (const void *)*((_QWORD *)this + 67);
  if (v6)
  {
    CFRelease(v6);
    *((_QWORD *)this + 67) = 0;
  }
  v7 = (void *)*((_QWORD *)this + 61);
  if (v7)
  {
    *((_QWORD *)this + 62) = v7;
    operator delete(v7);
  }
  v8 = (void **)((char *)this + 440);
  std::vector<TSWPAdornments>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)((char *)this + 368);
  std::vector<TSWPUIAttachmentData>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)((char *)this + 344);
  std::vector<TSWPAdornmentLine>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)((char *)this + 320);
  std::vector<TSWPAdornmentLine>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)((char *)this + 296);
  std::vector<TSWPAdornmentLine>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)((char *)this + 272);
  std::vector<TSWPAdornmentLine>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)((char *)this + 248);
  std::vector<TSWPLineRef>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)((char *)this + 224);
  std::vector<TSWPLineRef>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)((char *)this + 192);
  std::vector<TSWPLineRef>::__destroy_vector::operator()[abi:ne180100](&v8);
}

void TSWPAdornments::~TSWPAdornments(CGColorRef *this)
{
  CGColorRef v2;
  CGColor *v3;
  CGColor *v4;
  CGColor *v5;
  CGColor *v6;
  CGColor *v7;

  CGColorRelease(this[2]);
  v2 = this[3];
  if (v2)
    CFRelease(v2);
  v3 = this[16];
  if (v3)
  {
    this[17] = v3;
    operator delete(v3);
  }
  v4 = this[13];
  if (v4)
  {
    this[14] = v4;
    operator delete(v4);
  }
  v5 = this[10];
  if (v5)
  {
    this[11] = v5;
    operator delete(v5);
  }
  v6 = this[7];
  if (v6)
  {
    this[8] = v6;
    operator delete(v6);
  }
  v7 = this[4];
  if (v7)
  {
    this[5] = v7;
    operator delete(v7);
  }
}

void sub_2178EBC8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  TSWPDrawingState::~TSWPDrawingState((TSWPDrawingState *)&a37);
  _Unwind_Resume(a1);
}

uint64_t TSWPLayoutChore::TSWPLayoutChore(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  __int128 v17;
  char v18;
  TSWPCoreTextTypesetter *v19;
  double v20;

  *(_QWORD *)a1 = &off_24D82DC40;
  TSWPParagraphEnumerator::TSWPParagraphEnumerator((TSWPParagraphEnumerator *)(a1 + 104));
  bzero((void *)(a1 + 80), 0x2B0uLL);
  TSWPTopicNumberHints::TSWPTopicNumberHints(a1 + 768, objc_msgSend(a4, "styleProvider"));
  TSWPTopicNumberHints::TSWPTopicNumberHints(a1 + 816, objc_msgSend(a4, "styleProvider"));
  TSWPDropCapLayoutState::TSWPDropCapLayoutState();
  TSWPLineBalancingLayoutState::TSWPLineBalancingLayoutState((TSWPLineBalancingLayoutState *)(a1 + 1128));
  TSWPLineStylingLayoutState::TSWPLineStylingLayoutState(a1 + 1928, 0, 0);
  *(_QWORD *)(a1 + 2016) = 0;
  *(_OWORD *)(a1 + 2000) = 0u;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 32) = a6;
  *(_QWORD *)(a1 + 2032) = a7;
  *(_QWORD *)(a1 + 2040) = a8;
  *(_QWORD *)(a1 + 2048) = a9;
  *(_DWORD *)(a1 + 56) = objc_msgSend(a2, "wpKind");
  *(_QWORD *)(a1 + 64) = objc_msgSend(a2, "characterCount");
  *(_QWORD *)(a1 + 72) = objc_msgSend(a2, "attachmentCount");
  *(_QWORD *)&v17 = 0xFFFFFFFFLL;
  *((_QWORD *)&v17 + 1) = 0xFFFFFFFFLL;
  *(_OWORD *)(a1 + 40) = v17;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v18 = objc_msgSend(a3, "forceWesternLineBreaking") ^ 1;
  else
    v18 = 1;
  v19 = (TSWPCoreTextTypesetter *)operator new();
  TSWPCoreTextTypesetter::TSWPCoreTextTypesetter(v19, *(TSWPStorage **)(a1 + 8), (TSWPLayoutChore *)a1, (TSWPCTTypesetterCache *)objc_msgSend(a4, "typesetterCache"), (*(_DWORD *)(a1 + 32) & 0x10) != 0, v18);
  *(_QWORD *)(a1 + 2024) = v19;
  (*(void (**)(TSWPCoreTextTypesetter *, _QWORD))(*(_QWORD *)v19 + 16))(v19, 0);
  *(_QWORD *)(a1 + 2056) = 0;
  *(_QWORD *)(a1 + 80) = a5;
  TSWPLayoutState::setPreviousPartHint((_QWORD *)(a1 + 80), a10);
  v20 = -INFINITY;
  if (*(_DWORD *)(a1 + 56) >= 3u)
    v20 = 0.0;
  *(double *)(a1 + 400) = v20;
  *(_QWORD *)(a1 + 96) = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 552) = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 2064) = 0;
  return a1;
}

{
  return TSWPLayoutChore::TSWPLayoutChore(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_2178EBF00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, TSWPDropCapLayoutState *a10, TSWPTopicNumberHints *a11, TSWPTopicNumberHints *a12, uint64_t a13, uint64_t a14)
{
  TSWPLayoutState *v14;
  TSWPLineBalancingLayoutState *v15;

  TSWPLineBalancingLayoutState::~TSWPLineBalancingLayoutState(v15);
  TSWPDropCapLayoutState::~TSWPDropCapLayoutState(a10);
  TSWPTopicNumberHints::~TSWPTopicNumberHints(a11);
  TSWPTopicNumberHints::~TSWPTopicNumberHints(a12);
  TSWPLayoutState::~TSWPLayoutState(v14);
  _Unwind_Resume(a1);
}

uint64_t TSWPTopicNumberHints::TSWPTopicNumberHints(uint64_t a1, void *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  *(int64x2_t *)(a1 + 24) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(_QWORD *)(a1 + 40) = a2;
  return a1;
}

void sub_2178EBFDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::__map_value_compare<TSWPListStyle const*,std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::less<TSWPListStyle const*>,true>,std::allocator<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void TSWPLineBalancingLayoutState::TSWPLineBalancingLayoutState(TSWPLineBalancingLayoutState *this)
{
  TSWPParagraphEnumerator::TSWPParagraphEnumerator((TSWPParagraphEnumerator *)((char *)this + 24));
  bzero(this, 0x2B0uLL);
  *((_OWORD *)this + 43) = 0u;
  *((_DWORD *)this + 182) = 0;
  *((_QWORD *)this + 92) = 0;
  *(_OWORD *)((char *)this + 744) = 0u;
  *((_BYTE *)this + 792) = 0;
}

{
  TSWPParagraphEnumerator::TSWPParagraphEnumerator((TSWPParagraphEnumerator *)((char *)this + 24));
  bzero(this, 0x2B0uLL);
  *((_OWORD *)this + 43) = 0u;
  *((_DWORD *)this + 182) = 0;
  *((_QWORD *)this + 92) = 0;
  *(_OWORD *)((char *)this + 744) = 0u;
  *((_BYTE *)this + 792) = 0;
}

void TSWPCoreTextTypesetter::TSWPCoreTextTypesetter(TSWPCoreTextTypesetter *this, TSWPStorage *a2, TSWPLayoutChore *a3, TSWPCTTypesetterCache *a4, char a5, char a6)
{
  *(_QWORD *)this = &off_24D82E658;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  TSWPDropCapCTState::TSWPDropCapCTState((char *)this + 288, 0, 0);
  TSWPLineStylingCTState::TSWPLineStylingCTState((char *)this + 328, 0, 0);
  *((_QWORD *)this + 2) = a2;
  *((_DWORD *)this + 6) = -[TSWPStorage wpKind](a2, "wpKind");
  *((_QWORD *)this + 1) = a3;
  *((_BYTE *)this + 32) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_BYTE *)this + 30) = a5;
  *((_BYTE *)this + 31) = a6;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = a4;
  *((_QWORD *)this + 35) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
}

void sub_2178EC120(_Unwind_Exception *a1)
{
  uint64_t v1;
  id *v2;

  TSWPDropCapCTState::~TSWPDropCapCTState(v2);
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

_BYTE *TSWPCoreTextTypesetter::beginLayout(_BYTE *this, char a2)
{
  this[32] = 1;
  this[34] = 0;
  this[33] = a2;
  return this;
}

uint64_t TSWPLayoutChore::pLayoutPiece(NSUInteger a1, void *a2, int a3, double *a4, _DWORD *a5, unsigned __int16 *a6, int *a7, double a8, double a9)
{
  int *v9;
  double v12;
  void *v14;
  uint64_t v16;
  __int128 *v17;
  _BYTE *v18;
  __int128 v19;
  __int128 v20;
  double v21;
  double v22;
  double v23;
  _BOOL4 v24;
  unsigned int v25;
  char v26;
  char v27;
  id v28;
  _BYTE *v29;
  _BYTE *v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  int v44;
  NSUInteger v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  int v61;
  char v62;
  uint64_t v63;
  void *v64;
  char v65;
  char v66;
  int v67;
  char v68;
  NSUInteger v69;
  NSUInteger v70;
  NSUInteger v71;
  void *v72;
  void *v74;
  double v75;
  double v76;
  _BOOL4 v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  unsigned int v82;
  int v83;
  unint64_t v84;
  TSWPColumn *v85;
  TSWPColumn *v86;
  CGFloat v87;
  CGFloat v88;
  CGFloat v89;
  CGFloat v90;
  void *v91;
  uint64_t v92;
  CGFloat v93;
  CGFloat v94;
  CGFloat v95;
  CGFloat v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  void *v100;
  uint64_t v101;
  void *v102;
  void *v103;
  uint64_t v104;
  NSUInteger v105;
  uint64_t v106;
  uint64_t v107;
  NSUInteger v108;
  _NSRange v109;
  uint64_t i;
  uint64_t v112;
  uint64_t v113;
  void *v115;
  double *v117;
  unsigned __int16 *v118;
  TSWPLayoutState *v119;
  int v120;
  int v121;
  int v122;
  char v123;
  char v124;
  int *v125;
  NSUInteger v126;
  _BYTE v127[688];
  _BYTE v128[689];
  BOOL v129;
  BOOL v130;
  char v131;
  unsigned int v132;
  TSWPTopicNumberHints v133;
  id v134[41];
  char v135;
  BOOL v136;
  double v137;
  uint64_t v138;
  double v139;
  _BYTE v140[880];
  uint64_t v141;
  _NSRange v142;
  _NSRange v143;
  _NSRange v144;
  CGRect v145;
  CGRect v146;
  CGRect v147;
  CGRect v148;

  v9 = a7;
  v12 = a9;
  v14 = a2;
  v16 = 0;
  v141 = *MEMORY[0x24BDAC8D0];
  v139 = a9;
  v138 = 0x4028000000000000;
  v17 = (__int128 *)MEMORY[0x24BDBF090];
  do
  {
    v18 = &v140[v16];
    *(_QWORD *)v18 = 0;
    *((_QWORD *)v18 + 1) = 0;
    v19 = *v17;
    v20 = v17[1];
    *((_OWORD *)v18 + 1) = *v17;
    *((_OWORD *)v18 + 2) = v20;
    *((_OWORD *)v18 + 3) = v19;
    *((_OWORD *)v18 + 4) = v20;
    *((_QWORD *)v18 + 10) = 0;
    v16 += 88;
  }
  while (v16 != 880);
  v21 = TSWPLayoutChore::pCacheErasableInfos(a1, a2, *a7, (uint64_t)v140);
  v119 = (TSWPLayoutState *)(a1 + 80);
  if (*(_QWORD *)(a1 + 232) < 2uLL || v21 == 0.0)
  {
    v24 = 0;
    v22 = v12;
  }
  else
  {
    v22 = rint(v21 + *(double *)(a1 + 216) * 2.0);
    v23 = rint(v12);
    v24 = v22 < v23;
    if (v22 >= v23)
      v22 = v12;
  }
  v137 = v22;
  v136 = v24;
  TSWPLayoutState::TSWPLayoutState((TSWPLayoutState *)v134, v119);
  TSWPLayoutChore::pPushLayoutState((TSWPLayoutChore *)a1, (const TSWPLayoutState *)v134);
  v120 = v24;
  TSWPTopicNumberHints::TSWPTopicNumberHints(&v133, (const TSWPTopicNumberHints *)(a1 + 768));
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v123 = v24;
  v124 = 0;
  LOBYTE(v121) = 0;
  v122 = a3;
  v117 = a4;
  v118 = a6;
  v125 = v9;
  v115 = v14;
  while (1)
  {
    *a6 = 0;
    v131 = 0;
    *(_QWORD *)(a1 + 240) = *v9;
    v132 = v25 + 1;
    if ((v26 & 1) != 0)
    {
      v28 = *(id *)(a1 + 80);
      if (v134[0] <= v28)
        v29 = *(_BYTE **)(a1 + 80);
      else
        v29 = v134[0];
      if (v134[0] >= v28)
        v30 = *(_BYTE **)(a1 + 80);
      else
        v30 = v134[0];
      TSWPLayoutChore::pRestoreStateFromOldState((TSWPLayoutChore *)a1, v134);
      TSWPTopicNumberHints::operator=((TSWPTopicNumberHints *)(a1 + 768), &v133);
      if (*(_QWORD *)(a1 + 680))
      {
        v142.length = v29 - v30;
        v142.location = (NSUInteger)v30;
        TSWPLayoutChore::removeFootnotesInRange((id *)a1, v142);
      }
      TSWPCoreTextTypesetter::endParagraphLayout(*(TSWPCoreTextTypesetter **)(a1 + 2024));
    }
    v31 = *(_QWORD *)(a1 + 80);
    if (v31 > *(_QWORD *)(a1 + 64))
    {
      v32 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
      v33 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "BOOL TSWPLayoutChore::pLayoutPiece(TSDLayout<TSWPLayoutTarget> *, TSWPLayoutFlags, const CGFloat, CGFloat, CGFloat &, uint &, unichar &, uint &)");
      objc_msgSend(v32, "handleFailureInFunction:file:lineNumber:description:", v33, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 3597, CFSTR("Bad _state.charIndex"));
      v31 = *(_QWORD *)v119;
    }
    v34 = *(_QWORD *)(a1 + 2056);
    v35 = *(_QWORD *)(a1 + 8);
    v36 = *v125;
    v37 = *a4;
    v38 = v137;
    v39 = objc_msgSend(*(id *)(a1 + 24), "styleProvider");
    LOBYTE(v112) = (*(_DWORD *)(a1 + 32) & 0x10) != 0;
    +[TSWPLayoutManager fixColumnBoundsForTarget:storage:charIndex:firstColumnIndex:precedingHeight:height:alreadyHasMargins:styleProvider:vertical:](TSWPLayoutManager, "fixColumnBoundsForTarget:storage:charIndex:firstColumnIndex:precedingHeight:height:alreadyHasMargins:styleProvider:vertical:", v34, v35, v31, v36, 0, v39, v37, v38, v112);
    v130 = 0;
    v129 = 0;
    v9 = v125;
    v40 = *v125;
    v41 = *(_QWORD *)(a1 + 232);
    objc_msgSend((id)objc_msgSend((id)objc_msgSend(v14, "columns"), "objectAtIndexedSubscript:", v40), "wpBounds");
    v126 = v41 + v40;
    if (v42 <= 0.0 && (objc_msgSend(v14, "autosizeFlags") & 1) == 0)
    {
      v67 = 1;
      goto LABEL_62;
    }
    if ((v123 == 0 || (v124 & 1) == 0) | v27 & 1)
    {
      v44 = v122;
    }
    else
    {
      v44 = v122;
      if (!*(_BYTE *)(a1 + 414))
        v44 = v122 | 0x10000;
    }
    v122 = v44;
    v45 = *v125;
    if (v126 <= v45)
      v46 = *v125;
    else
      v46 = v41 + v40;
    if (v126 >= v45)
      v47 = *v125;
    else
      v47 = v41 + v40;
    v121 = TSWPLayoutChore::pLayoutColumns(a1, v44 & 0xFE, v47, v46 - v47, *(void **)(a1 + 2056), a6, &v131, &v130, &v129);
    if (*(_DWORD *)(a1 + 56) == 2)
      goto LABEL_43;
    v49 = *(void **)(a1 + 680);
    if (!v49)
      goto LABEL_43;
    objc_msgSend(v49, "footnoteHeight");
    if (v50 <= 0.0)
      goto LABEL_43;
    v51 = *(double *)(a1 + 672);
    v52 = *a4;
    v53 = v50 + *a4;
    v54 = v51 - v53;
    if (v38 <= v51 - v53)
      goto LABEL_43;
    v137 = v51 - v53;
    v55 = *(_QWORD *)(a1 + 2056);
    v56 = *(_QWORD *)(a1 + 8);
    v57 = *(_QWORD *)(a1 + 80);
    v58 = *v125;
    v59 = objc_msgSend(*(id *)(a1 + 24), "styleProvider");
    LOBYTE(v113) = (*(_DWORD *)(a1 + 32) & 0x10) != 0;
    +[TSWPLayoutManager fixColumnBoundsForTarget:storage:charIndex:firstColumnIndex:precedingHeight:height:alreadyHasMargins:styleProvider:vertical:](TSWPLayoutManager, "fixColumnBoundsForTarget:storage:charIndex:firstColumnIndex:precedingHeight:height:alreadyHasMargins:styleProvider:vertical:", v55, v56, v57, v58, 0, v59, v52, v54, v113);
    if (v46 - v47 >= 2)
      break;
    v12 = v54;
    a4 = v117;
    a6 = v118;
    v9 = v125;
    v14 = v115;
LABEL_43:
    if (v131)
      v60 = *a6 == 5;
    else
      v60 = 1;
    if (v60)
      v61 = 0;
    else
      v61 = v121 ^ 1;
    v62 = TSWPLayoutChore::pHandleLayoutBreaksAndColumnBalancing(a1, v61, *v9, (uint64_t)v134, (uint64_t)v140, v12, v48, v126, v120, (double *)&v138, &v139, &v137, a4, &v136, &v132);
    v123 = v136;
    if ((v62 & 1) == 0)
    {
LABEL_60:
      v67 = 0;
      goto LABEL_62;
    }
    if (!(!v136 | v124 & 1))
    {
      v63 = objc_msgSend(v14, "columns");
      if (v46 <= v47)
      {
        v27 = 0;
        v123 = 1;
        v124 = 1;
      }
      else
      {
        v64 = (void *)v63;
        do
        {
          v65 = objc_msgSend((id)objc_msgSend(v64, "objectAtIndexedSubscript:", v47), "requiresGlyphVectorsForHeightMeasurement");
          v27 = v65;
          v60 = v46 - 1 == v47++;
          if (v60)
            v66 = 1;
          else
            v66 = v65;
        }
        while ((v66 & 1) == 0);
        v124 = 1;
      }
    }
LABEL_59:
    v25 = v132;
    v26 = 1;
    if (v132 >= 0x10)
      goto LABEL_60;
  }
  if (*a5 < 2u
    || (v143.location = v47,
        v143.length = v46 - v47,
        v43 = TSWPLayoutChore::pMinimumLayoutHeightForColumnRange((id *)a1, v143, 0),
        v43 <= v54))
  {
    *(_BYTE *)(a1 + 640) = 1;
    v12 = v54;
    a4 = v117;
    a6 = v118;
    v9 = v125;
    v14 = v115;
    goto LABEL_59;
  }
  v67 = 1;
  v12 = v54;
  v9 = v125;
LABEL_62:
  v68 = v122;
  if (v123)
  {
    v68 = a3;
    if ((a3 & 0x10000) == 0)
    {
      TSWPLayoutState::TSWPLayoutState((TSWPLayoutState *)v128, (const TSWPLayoutState *)v134);
      TSWPLayoutChore::pCreateLineRefsAfterColumnBalancing(a1, (uint64_t)v128, a3);
      TSWPLayoutState::~TSWPLayoutState((TSWPLayoutState *)v128);
    }
  }
  if (*a5 < 2u)
  {
    if ((v67 & 1) != 0)
      goto LABEL_121;
  }
  else
  {
    v130 = 0;
    v69 = *v9;
    if (v126 <= v69)
      v70 = *v9;
    else
      v70 = v126;
    if (v126 >= v69)
      v71 = *v9;
    else
      v71 = v126;
    v72 = (void *)objc_msgSend(*(id *)(a1 + 2056), "columns");
    v144.length = v70 - v71;
    v144.location = v71;
    v43 = TSWPLayoutChore::pMinimumLayoutHeightForColumnRange((id *)a1, v144, &v130);
    if (v43 > v12 || !v130)
      goto LABEL_106;
    if (v134[19] == (id)1)
    {
      v74 = (void *)objc_msgSend(v72, "objectAtIndexedSubscript:", v134[20]);
      objc_msgSend(v74, "textHeight");
      v76 = v75;
      v78 = objc_msgSend(v74, "countLines") == 1 && v135 != 0;
      v43 = v12 - v76;
      if (v12 - v76 >= v76)
        v78 = 0;
      if (((v67 | v78) & 1) != 0)
      {
LABEL_106:
        if (*(_DWORD *)(a1 + 56) != 2 && *(_QWORD *)(a1 + 680) && v70 != v71)
        {
          v99 = (void *)objc_msgSend(v72, "objectAtIndexedSubscript:", v71, v43);
          if (!v99)
          {
            v100 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
            v101 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "BOOL TSWPLayoutChore::pLayoutPiece(TSDLayout<TSWPLayoutTarget> *, TSWPLayoutFlags, const CGFloat, CGFloat, CGFloat &, uint &, unichar &, uint &)");
            objc_msgSend(v100, "handleFailureInFunction:file:lineNumber:description:", v101, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 3709, CFSTR("Nil first column in column array"));
          }
          v102 = (void *)objc_msgSend(v72, "objectAtIndexedSubscript:", v70 - 1);
          if (!v102)
          {
            v103 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
            v104 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "BOOL TSWPLayoutChore::pLayoutPiece(TSDLayout<TSWPLayoutTarget> *, TSWPLayoutFlags, const CGFloat, CGFloat, CGFloat &, uint &, unichar &, uint &)");
            objc_msgSend(v103, "handleFailureInFunction:file:lineNumber:description:", v104, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 3712, CFSTR("Nil last column in column array"));
          }
          v105 = objc_msgSend(v99, "range");
          v106 = objc_msgSend(v102, "range");
          if (v105 <= v106 + v107)
            v108 = v106 + v107;
          else
            v108 = v105;
          if (v105 >= v106 + v107)
            v109.location = v106 + v107;
          else
            v109.location = v105;
          v109.length = v108 - v109.location;
          TSWPLayoutChore::removeFootnotesInRange((id *)a1, v109);
        }
        TSWPLayoutChore::pRestoreStateFromOldState((TSWPLayoutChore *)a1, v134);
        *v118 = 10;
        goto LABEL_121;
      }
    }
    else if (v67)
    {
      goto LABEL_106;
    }
  }
  v79 = objc_msgSend(*(id *)(a1 + 2056), "columns", v43);
  if (*(_QWORD *)(a1 + 232))
  {
    v80 = (void *)v79;
    v81 = 0;
    v82 = 0;
    do
    {
      v83 = *v125;
      v84 = v82 + *v125;
      if (objc_msgSend(v80, "count") > v84
        && (v85 = (TSWPColumn *)objc_msgSend(v80, "objectAtIndexedSubscript:", v82 + v83), (v86 = v85) != 0))
      {
        if ((v68 & 1) != 0)
        {
          -[TSWPColumn wpBounds](v85, "wpBounds");
          v146.origin.x = v87;
          v146.origin.y = v88;
          v146.size.width = v89;
          v146.size.height = v90;
          if (CGRectEqualToRect(*(CGRect *)&v140[88 * v81 + 16], v146))
          {
            TSWPLayoutChore::pCompareLineFragments(a1, (TSWPLineFragmentArray **)&v140[88 * v81], (TSWPLineFragmentArray **)-[TSWPColumn lineFragmentArray](v86, "lineFragmentArray"), v86, v68, *(double *)&v140[88 * v81 + 80]);
          }
          else
          {
            -[TSWPColumn erasableBounds:](v86, "erasableBounds:", 1);
            v147.origin.x = v93;
            v147.origin.y = v94;
            v147.size.width = v95;
            v147.size.height = v96;
            v148 = CGRectUnion(*(CGRect *)&v140[88 * v81 + 48], v147);
            v145 = CGRectUnion(v148, v148);
            objc_msgSend(*(id *)(a1 + 2056), "setNeedsDisplayInTargetRect:", v145.origin.x, v145.origin.y, v145.size.width, v145.size.height);
          }
        }
      }
      else
      {
        v91 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
        v92 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "BOOL TSWPLayoutChore::pLayoutPiece(TSDLayout<TSWPLayoutTarget> *, TSWPLayoutFlags, const CGFloat, CGFloat, CGFloat &, uint &, unichar &, uint &)");
        objc_msgSend(v91, "handleFailureInFunction:file:lineNumber:description:", v92, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 3737, CFSTR("Invalid columnIndex: %lu columns.count: %lu"), v84, objc_msgSend(v80, "count"));
      }
      v81 = ++v82;
    }
    while (*(_QWORD *)(a1 + 232) > (unint64_t)v82);
  }
  *v125 = v126;
  if (v131)
  {
    TSWPLayoutChore::pSetupStateForColumnMetrics((id *)a1);
    v97 = *v125;
    *(_QWORD *)(a1 + 224) = v97;
    *(_QWORD *)(a1 + 240) = v97;
    v98 = 1;
    if (!((*v118 == 5) | v121 & 1)
      && *v117 < a8
      && *(_QWORD *)(a1 + 80) < *(_QWORD *)(a1 + 40)
      && (objc_msgSend(*(id *)(a1 + 192), "alwaysStartsNewTarget", *v117) & 1) == 0)
    {
      v98 = 0;
      ++*a5;
    }
  }
  else
  {
LABEL_121:
    v98 = 1;
  }
  TSWPLayoutChore::pPopLayoutState((TSWPLayoutChore *)a1, (uint64_t)v127);
  TSWPLayoutState::~TSWPLayoutState((TSWPLayoutState *)v127);
  TSWPTopicNumberHints::~TSWPTopicNumberHints(&v133);
  TSWPLayoutState::~TSWPLayoutState((TSWPLayoutState *)v134);
  for (i = 792; i != -88; i -= 88)
    std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)&v140[i]);
  return v98;
}

void sub_2178ECB70(_Unwind_Exception *a1)
{
  uint64_t i;

  TSWPTopicNumberHints::~TSWPTopicNumberHints((TSWPTopicNumberHints *)&STACK[0x600]);
  TSWPLayoutState::~TSWPLayoutState((TSWPLayoutState *)&STACK[0x630]);
  for (i = 792; i != -88; i -= 88)
    std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)&STACK[0x900] + i);
  _Unwind_Resume(a1);
}

double TSWPCoreTextTypesetter::pLineRefStartForLineFragment(TSWPCoreTextTypesetter *this, id *a2, const TSWPLineFragment *a3, double a4)
{
  double v5;
  double v6;
  double v7;
  void *v8;
  uint64_t v9;

  v5 = *((double *)a3 + 6);
  objc_msgSend(a2[13], "wpBounds");
  v7 = a4 - (v5 - v6);
  if (v7 < 0.0)
  {
    v8 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v9 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "CGFloat TSWPCoreTextTypesetter::pLineRefStartForLineFragment(const TSWPLayoutState *, const TSWPLineFragment *, CGFloat) const");
    objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 4481, CFSTR("Negative lineRef start position"));
  }
  return v7;
}

uint64_t TSWPLayoutChore::pHandleLayoutBreaksAndColumnBalancing(uint64_t a1, int a2, NSUInteger a3, uint64_t a4, uint64_t a5, double a6, uint64_t a7, NSUInteger a8, int a9, double *a10, double *a11, double *a12, double *a13, _BYTE *a14, _DWORD *a15)
{
  double v22;
  double v23;
  uint64_t result;
  void *v25;
  void *v26;
  void *v27;
  double v28;
  double v29;
  uint64_t Object;
  double MaxY;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  uint64_t v38;
  void *v39;
  double v40;
  NSUInteger v41;
  _NSRange v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v51;
  unsigned int v52;
  CGFloat v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  CGRect v61;

  if (!a2
    || (objc_msgSend((id)objc_msgSend(*(id *)(a1 + 2056), "columnMetricsForCharIndex:outRange:", *(_QWORD *)(a1 + 80), 0), "alwaysStartsNewTarget") & 1) != 0)
  {
    if (!*a14)
      return 0;
    if (*a15 != 1 || a9 == 0)
    {
      v22 = *a12 + 1.0;
      *a10 = v22;
      v23 = fmax(*a11, v22);
      *a11 = v23;
      v40 = rint((v23 + *a10) * 0.5);
    }
    else
    {
      *a14 = 0;
      *a15 = 0;
      *a10 = *a12;
      v40 = *a11;
    }
    *a12 = v40;
    return 1;
  }
  v25 = (void *)objc_msgSend(*(id *)(a1 + 2056), "columns");
  if (*(_QWORD *)(a1 + 232) == 1)
  {
    v26 = v25;
    v27 = (void *)objc_msgSend(v25, "objectAtIndexedSubscript:", a3);
    objc_msgSend(v27, "contentBottom");
    v29 = v28;
    Object = TSWPLineFragmentArray::lastObject(*(TSWPLineFragmentArray **)objc_msgSend(v27, "lineFragmentArray"));
    if (Object)
    {
      MaxY = CGRectGetMaxY(*(CGRect *)(Object + 48));
      if (v29 < MaxY)
        v29 = MaxY;
    }
    objc_msgSend(v27, "wpBounds");
    *a12 = fmin(ceil(v29 - v32), a6);
    v33 = *(_QWORD *)(a1 + 2056);
    v34 = *(_QWORD *)(a1 + 8);
    v35 = objc_msgSend(v27, "startCharIndex");
    v36 = *a13;
    v37 = *a12;
    v38 = objc_msgSend(*(id *)(a1 + 24), "styleProvider");
    LOBYTE(v57) = (*(_DWORD *)(a1 + 32) & 0x10) != 0;
    +[TSWPLayoutManager fixColumnBoundsForTarget:storage:charIndex:firstColumnIndex:precedingHeight:height:alreadyHasMargins:styleProvider:vertical:](TSWPLayoutManager, "fixColumnBoundsForTarget:storage:charIndex:firstColumnIndex:precedingHeight:height:alreadyHasMargins:styleProvider:vertical:", v33, v34, v35, a3, 0, v38, v36, v37, v57);
    v39 = v26;
    goto LABEL_35;
  }
  v58 = v25;
  v59 = a5;
  if (a3 <= a8)
    v41 = a8;
  else
    v41 = a3;
  if (a3 >= a8)
    v42.location = a8;
  else
    v42.location = a3;
  v42.length = v41 - v42.location;
  v43 = ceil(fmax(*a10, fmin(TSWPLayoutChore::pMinimumLayoutHeightForColumnRange((id *)a1, v42, 0), *a11)));
  *a10 = v43;
  v44 = *a12;
  if (*a12 < v43)
  {
    *a12 = v43;
    v45 = *(_QWORD *)(a1 + 2056);
    v46 = *(_QWORD *)(a1 + 8);
    v47 = *(_QWORD *)(a1 + 80);
    v48 = *a13;
    v49 = objc_msgSend(*(id *)(a1 + 24), "styleProvider", v44);
    LOBYTE(v57) = (*(_DWORD *)(a1 + 32) & 0x10) != 0;
    +[TSWPLayoutManager fixColumnBoundsForTarget:storage:charIndex:firstColumnIndex:precedingHeight:height:alreadyHasMargins:styleProvider:vertical:](TSWPLayoutManager, "fixColumnBoundsForTarget:storage:charIndex:firstColumnIndex:precedingHeight:height:alreadyHasMargins:styleProvider:vertical:", v45, v46, v47, a3, 0, v49, v48, v43, v57);
    v39 = v58;
LABEL_35:
    objc_msgSend((id)objc_msgSend(v39, "objectAtIndexedSubscript:", a3), "wpBounds");
    v54 = CGRectGetMaxY(v61);
    result = 0;
    *a13 = v54 + *(double *)(a1 + 216);
    return result;
  }
  v39 = v58;
  if (*a12 <= v43)
    goto LABEL_35;
  if (*a15 == 1 && a9 != 0)
  {
    if (!*(_QWORD *)(a1 + 232))
      goto LABEL_35;
    v51 = 0;
    v52 = 1;
    while (1)
    {
      objc_msgSend((id)objc_msgSend(v58, "objectAtIndexedSubscript:", *(_QWORD *)(a4 + 160) + v51, v44), "contentBottom");
      if (v44 != *(double *)(v59 + 88 * v51 + 80))
        break;
      v51 = v52;
      if (*(_QWORD *)(a1 + 232) <= (unint64_t)v52++)
        goto LABEL_35;
    }
    v44 = *a12;
  }
  result = 1;
  *a14 = 1;
  *a11 = v44;
  *a12 = floor((v44 + *a10) * 0.5);
  if (*a10 >= *a11)
  {
    v55 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler", *a10);
    v56 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "BOOL TSWPLayoutChore::pHandleLayoutBreaksAndColumnBalancing(const BOOL, const NSUInteger, const TSWPLayoutState &, const tswpColumnErasableInfo *, uint, const NSUInteger, const BOOL, const CGFloat, CGFloat &, CGFloat &, CGFloat &, CGFloat &, BOOL &, uint &)");
    objc_msgSend(v55, "handleFailureInFunction:file:lineNumber:description:", v56, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 3883, CFSTR("Bad minHeight/maxHeight"));
    return 1;
  }
  return result;
}

double TSWPLayoutChore::pCacheErasableInfos(uint64_t a1, void *a2, int a3, uint64_t a4)
{
  void *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  double v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v7 = (void *)objc_msgSend(a2, "columns");
  v8 = objc_msgSend(v7, "count");
  if (!*(_QWORD *)(a1 + 232))
    return 0.0;
  v9 = v8;
  v10 = 0;
  v11 = 0;
  v12 = 0.0;
  do
  {
    if (v9 > v11 + a3)
    {
      v13 = (void *)objc_msgSend(v7, "objectAtIndexedSubscript:");
      v14 = (_QWORD *)objc_msgSend(v13, "lineFragmentArray");
      v15 = v14[1];
      *(_QWORD *)&v34 = *v14;
      *((_QWORD *)&v34 + 1) = v15;
      if (v15)
      {
        v16 = (unint64_t *)(v15 + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      objc_msgSend(v13, "wpBounds");
      *(_QWORD *)&v35 = v18;
      *((_QWORD *)&v35 + 1) = v19;
      *(_QWORD *)&v36 = v20;
      *((_QWORD *)&v36 + 1) = v21;
      objc_msgSend(v13, "erasableBounds:", 1);
      *(_QWORD *)&v37 = v22;
      *((_QWORD *)&v37 + 1) = v23;
      *(_QWORD *)&v38 = v24;
      *((_QWORD *)&v38 + 1) = v25;
      objc_msgSend(v13, "contentBottom");
      v39 = v26;
      v27 = a4 + 88 * v10;
      std::shared_ptr<EQKit::OpticalKern::Edge::Path>::operator=[abi:nn180100](v27, &v34);
      v28 = v38;
      *(_OWORD *)(v27 + 48) = v37;
      *(_OWORD *)(v27 + 64) = v28;
      *(_QWORD *)(v27 + 80) = v39;
      v29 = v36;
      *(_OWORD *)(v27 + 16) = v35;
      *(_OWORD *)(v27 + 32) = v29;
      v30 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
      if (*((_QWORD *)&v34 + 1))
      {
        v31 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
    }
    if (v12 == 0.0)
    {
      v12 = *(double *)(a4 + 88 * v10 + 40);
    }
    else if (v12 != *(double *)(a4 + 88 * v10 + 40))
    {
      v12 = 0.0;
    }
    v10 = ++v11;
  }
  while (*(_QWORD *)(a1 + 232) > (unint64_t)v11);
  return v12;
}

void sub_2178ED22C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11)
    TSWPLayoutChore::pCacheErasableInfos(a11);
  _Unwind_Resume(exception_object);
}

double TSWPLineFragmentArray::erasableBounds(TSWPLineFragmentArray *this, char a2, TSWPStorage *a3)
{
  CGFloat y;
  double x;
  CGFloat height;
  CGFloat width;
  NSUInteger **v7;
  NSUInteger **v8;
  CGFloat *v11;
  NSUInteger **v12;
  uint64_t v13;
  NSUInteger *v14;
  NSUInteger v15;
  NSUInteger v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  _NSRange v28;
  _NSRange v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;
  CGRect v33;
  CGRect v34;
  CGRect v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;

  x = *MEMORY[0x24BDBF070];
  y = *(double *)(MEMORY[0x24BDBF070] + 8);
  width = *(double *)(MEMORY[0x24BDBF070] + 16);
  height = *(double *)(MEMORY[0x24BDBF070] + 24);
  v7 = *(NSUInteger ***)this;
  v8 = (NSUInteger **)*((_QWORD *)this + 1);
  if (v8 != *(NSUInteger ***)this)
  {
    if ((a2 & 2) != 0)
    {
      v11 = (CGFloat *)*(v8 - 2);
      v8 -= 2;
      v37.origin.x = v11[10];
      v37.origin.y = v11[11];
      v37.size.width = v11[12];
      v37.size.height = v11[13] - v11[20];
      v30 = CGRectUnion(*MEMORY[0x24BDBF070], v37);
      x = v30.origin.x;
      y = v30.origin.y;
      width = v30.size.width;
      height = v30.size.height;
      v7 = *(NSUInteger ***)this;
    }
    if (v8 != v7)
    {
      v12 = v8;
      do
      {
        v13 = (uint64_t)*(v12 - 2);
        v12 -= 2;
        v31.origin.x = x;
        v31.origin.y = y;
        v31.size.width = width;
        v31.size.height = height;
        v32 = CGRectUnion(v31, *(CGRect *)(v13 + 80));
        x = v32.origin.x;
        y = v32.origin.y;
        width = v32.size.width;
        height = v32.size.height;
        v14 = *v12;
        if ((*((_BYTE *)*v12 + 27) & 4) != 0)
        {
          v15 = v14[1];
          if (v15)
          {
            v16 = *v14;
            v28.location = *v14;
            v28.length = 1;
            v38.origin.x = TSWPLineFragment::glyphRectForLineRange((TSWPLineFragment *)v14, v28, a3, 1);
            v38.origin.y = v17;
            v38.size.width = v18;
            v38.size.height = v19;
            v33.origin.x = x;
            v33.origin.y = y;
            v33.size.width = width;
            v33.size.height = height;
            v34 = CGRectUnion(v33, v38);
            v20 = v34.origin.x;
            v21 = v34.origin.y;
            v22 = v34.size.width;
            v23 = v34.size.height;
            v29.location = v15 + v16 - 1;
            v29.length = 1;
            v39.origin.x = TSWPLineFragment::glyphRectForLineRange((TSWPLineFragment *)*(v8 - 2), v29, a3, 1);
            v39.origin.y = v24;
            v39.size.width = v25;
            v39.size.height = v26;
            v35.origin.x = v20;
            v35.origin.y = v21;
            v35.size.width = v22;
            v35.size.height = v23;
            v36 = CGRectUnion(v35, v39);
            x = v36.origin.x;
            y = v36.origin.y;
            width = v36.size.width;
            height = v36.size.height;
          }
        }
        v8 = v12;
      }
      while (v12 != v7);
    }
  }
  return x;
}

uint64_t TSWPLayoutChore::pLayoutColumns(NSUInteger a1, char a2, unint64_t a3, uint64_t a4, void *a5, _WORD *a6, _BYTE *a7, BOOL *a8, BOOL *a9)
{
  void *v13;
  void *v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  double v18;
  double v19;
  int v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  BOOL v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v44;
  char v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  int v50;
  TSWPLayoutState *v51;
  void *v56;
  _BYTE v57[688];
  TSWPTopicNumberHints v58;
  id v59[87];

  v13 = (void *)objc_msgSend(a5, "columns");
  v14 = v13;
  v51 = (TSWPLayoutState *)(a1 + 80);
  if (*(_BYTE *)(a1 + 248))
  {
    v15 = objc_msgSend((id)objc_msgSend(v13, "objectAtIndexedSubscript:", 0), "scaleTextPercent");
    v16 = v15 < 0x64;
    if (v15 >= 0x64)
      v17 = v15;
    else
      v17 = v15 + 1;
  }
  else
  {
    v16 = 0;
    v18 = *(double *)(a1 + 256);
    if (v18 == 0.0)
      v19 = 100.0;
    else
      v19 = v18 * 100.0;
    v17 = (unint64_t)v19;
  }
  TSWPLayoutState::TSWPLayoutState((TSWPLayoutState *)v59, v51);
  TSWPLayoutChore::pPushLayoutState((TSWPLayoutChore *)a1, (const TSWPLayoutState *)v59);
  v56 = v14;
  TSWPTopicNumberHints::TSWPTopicNumberHints(&v58, (const TSWPTopicNumberHints *)(a1 + 768));
  v20 = 0;
  v21 = 0;
  v22 = a3 + a4;
  v23 = 100;
  v44 = 40;
  v24 = v16;
  v45 = v16;
  v47 = a3;
  while (1)
  {
    v50 = v20;
    v25 = v24;
    v26 = v24;
    v48 = v23;
    v46 = v24;
    while (1)
    {
      v49 = v25;
      if ((v26 & 1) != 0)
      {
        TSWPCoreTextTypesetter::endParagraphLayout(*(TSWPCoreTextTypesetter **)(a1 + 2024));
        objc_msgSend((id)objc_msgSend(v56, "objectAtIndexedSubscript:", 0), "setScaleTextPercent:", v17);
        TSWPLayoutChore::pSetupStateForParagraphIndex((TSWPLayoutChore *)a1, 0);
        if ((objc_opt_respondsToSelector() & 1) != 0)
          objc_msgSend(*(id *)(a1 + 2056), "scaleTextPercentDidChange:", v17);
      }
      if ((objc_opt_respondsToSelector() & 1) != 0)
        v27 = objc_msgSend(*(id *)(a1 + 2056), "anchoredDrawablesForRelayout");
      else
        v27 = 0;
      v28 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCEB8]), "initWithArray:copyItems:", v27, 0);
      if (a3 < v22)
      {
        v29 = a3;
        do
        {
          *(_QWORD *)(a1 + 240) = v29;
          v30 = (void *)objc_msgSend(v56, "objectAtIndexedSubscript:", v29);
          *(_QWORD *)(a1 + 184) = v30;
          objc_msgSend(v30, "setScaleTextPercent:", v17);
          v31 = *(void **)(a1 + 184);
          v32 = *(_QWORD *)(a1 + 80);
          if (*a8)
          {
            objc_msgSend(v31, "makeEmpty:layoutResultFlags:", v32, 16 * *a9);
          }
          else
          {
            objc_msgSend(v31, "setStartCharIndex:", v32);
            objc_msgSend(a5, "maxSize");
            objc_msgSend(*(id *)(a1 + 184), "maxSize");
            objc_msgSend(*(id *)(a1 + 8), "wpKind");
            v21 = TSWPLayoutChore::pLayoutColumn(a1, a2);
            v33 = objc_msgSend(v28, "count");
            if (v33)
            {
              v34 = v33 - 1;
              do
              {
                if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(v28, "objectAtIndexedSubscript:", v34), "exteriorTextWrap"), "isHTMLWrap"))objc_msgSend(v28, "removeObjectAtIndex:", v34);
                --v34;
              }
              while (v34 != -1);
            }
            if (*a6 == 5)
              v35 = 1;
            else
              v35 = v21;
            v36 = (v35 & 1) != 0 || *a7 != 0;
            *a9 = v36;
            v37 = objc_msgSend(*(id *)(a1 + 8), "characterCount");
            if (*a9)
            {
              v38 = 1;
            }
            else if (*(_QWORD *)v51 >= v37)
            {
              v38 = 0;
              if (*(_QWORD *)(a1 + 88) >= v37 && !*a6)
                v38 = objc_msgSend(*(id *)(a1 + 184), "countLines") != 0;
            }
            else
            {
              v38 = 0;
            }
            *a8 = v38;
            if ((a2 & 0x10) == 0
              && *(_DWORD *)(a1 + 56)
              && objc_msgSend(*(id *)(a1 + 8), "hasSmartFields"))
            {
              if ((objc_opt_respondsToSelector() & 1) != 0)
                objc_msgSend(a5, "pageIndex");
              v39 = objc_msgSend(*(id *)(a1 + 184), "range");
              if (v39 + v40 < (unint64_t)objc_msgSend(*(id *)(a1 + 8), "characterCount"))
                TSWPLayoutChore::pIsLastColumn((id *)a1);
            }
          }
          ++v29;
        }
        while (v29 != v22);
      }

      a3 = v47;
      v23 = v48;
      v20 = v50 + 1;
      if (*(_BYTE *)(a1 + 248))
        break;
      v25 = 1;
      ++v50;
      v26 = v46;
      if ((v49 & 1) == 0)
        goto LABEL_66;
    }
    v41 = objc_msgSend((id)objc_msgSend(v56, "lastObject"), "layoutResultFlags") & 3;
    if (!(v49 & 1 | (v41 != 0)))
      break;
    if (((v50 == 0) & v45) == 1)
    {
      if (v41)
      {
        v23 = v17 - 1;
        v45 = 1;
        --v17;
      }
      else
      {
        v45 = 0;
        v17 = 100;
      }
    }
    else
    {
      if (v20 == 2 && (v45 & 1) != 0 && v41 == 0)
        break;
      v42 = v44;
      if ((unint64_t)(v48 - v44) > 1)
      {
        v45 = 0;
        if (v41)
          v23 = v17;
        else
          v42 = v17;
        v44 = v42;
        v17 = (unint64_t)(v42 + v23) >> 1;
      }
      else
      {
        if (!v41 || v17 == v44)
          break;
        v45 = 0;
        v17 = v44;
      }
    }
    TSWPLayoutChore::pRestoreStateFromOldState((TSWPLayoutChore *)a1, v59);
    TSWPTopicNumberHints::operator=((TSWPTopicNumberHints *)(a1 + 768), &v58);
    *a8 = 0;
    v24 = 1;
  }
LABEL_66:
  TSWPLayoutChore::pPopLayoutState((TSWPLayoutChore *)a1, (uint64_t)v57);
  TSWPLayoutState::~TSWPLayoutState((TSWPLayoutState *)v57);
  TSWPTopicNumberHints::~TSWPTopicNumberHints(&v58);
  TSWPLayoutState::~TSWPLayoutState((TSWPLayoutState *)v59);
  return v21 & 1;
}

void sub_2178ED994(_Unwind_Exception *a1)
{
  TSWPTopicNumberHints::~TSWPTopicNumberHints((TSWPTopicNumberHints *)&STACK[0x338]);
  TSWPLayoutState::~TSWPLayoutState((TSWPLayoutState *)&STACK[0x368]);
  _Unwind_Resume(a1);
}

void TSWPLayoutState::TSWPLayoutState(TSWPLayoutState *this, const TSWPLayoutState *a2)
{
  id v4;

  TSWPParagraphEnumerator::TSWPParagraphEnumerator((TSWPParagraphEnumerator *)((char *)this + 24));
  memcpy(this, a2, 0x2B0uLL);
  v4 = *((id *)this + 85);
}

void sub_2178EDA40(_Unwind_Exception *a1)
{
  TSWPParagraphEnumerator *v1;

  TSWPParagraphEnumerator::~TSWPParagraphEnumerator(v1);
  _Unwind_Resume(a1);
}

void TSWPParagraphEnumerator::TSWPParagraphEnumerator(TSWPParagraphEnumerator *this)
{
  *(_OWORD *)&this->var2 = 0u;
  *(_OWORD *)&this->var4 = 0u;
  *(_OWORD *)&this->var0 = 0u;
  this->var6 = 1;
}

{
  *(_OWORD *)&this->var2 = 0u;
  *(_OWORD *)&this->var4 = 0u;
  *(_OWORD *)&this->var0 = 0u;
  this->var6 = 1;
}

void TSWPLayoutChore::~TSWPLayoutChore(TSWPLayoutChore *this)
{
  uint64_t v2;
  const void *v3;
  void **v4;

  *(_QWORD *)this = &off_24D82DC40;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 253) + 24))(*((_QWORD *)this + 253));
  v2 = *((_QWORD *)this + 253);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (const void *)*((_QWORD *)this + 258);
  if (v3)
    CFRelease(v3);
  v4 = (void **)((char *)this + 2000);
  std::vector<TSWPLayoutState>::__destroy_vector::operator()[abi:ne180100](&v4);
  TSWPLineStylingLayoutState::~TSWPLineStylingLayoutState((TSWPLayoutChore *)((char *)this + 1928));
  TSWPLineBalancingLayoutState::~TSWPLineBalancingLayoutState((TSWPLayoutChore *)((char *)this + 1128));
  TSWPDropCapLayoutState::~TSWPDropCapLayoutState((TSWPLayoutChore *)((char *)this + 864));
  TSWPTopicNumberHints::~TSWPTopicNumberHints((TSWPTopicNumberHints *)this + 17);
  TSWPTopicNumberHints::~TSWPTopicNumberHints((TSWPTopicNumberHints *)this + 16);
  TSWPLayoutState::~TSWPLayoutState((TSWPLayoutChore *)((char *)this + 80));
}

{
  TSWPLayoutChore::~TSWPLayoutChore(this);
  JUMPOUT(0x219A153B8);
}

void TSWPTopicNumberHints::~TSWPTopicNumberHints(TSWPTopicNumberHints *this)
{

  std::__tree<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::__map_value_compare<TSWPListStyle const*,std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::less<TSWPListStyle const*>,true>,std::allocator<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>>>::destroy((uint64_t)this, (_QWORD *)this->_numbersForListStyle.__tree_.__pair1_.__value_.__left_);
}

void sub_2178EDB50(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::__map_value_compare<TSWPListStyle const*,std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::less<TSWPListStyle const*>,true>,std::allocator<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::__map_value_compare<TSWPListStyle const*,std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::less<TSWPListStyle const*>,true>,std::allocator<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    std::__tree<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::__map_value_compare<TSWPListStyle const*,std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::less<TSWPListStyle const*>,true>,std::allocator<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::__map_value_compare<TSWPListStyle const*,std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::less<TSWPListStyle const*>,true>,std::allocator<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>>>::destroy(a1, a2[1]);
    v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

void TSWPCoreTextTypesetter::endLayout(TSWPCoreTextTypesetter *this)
{
  if (*((_BYTE *)this + 34))
    TSWPCoreTextTypesetter::endParagraphLayout(this);
  *((_BYTE *)this + 32) = 0;
}

void TSWPLayoutChore::pSetupStateForDropCap(id *this, id *a2)
{
  uint64_t v4;
  unint64_t v5;
  _BYTE v6[264];

  objc_opt_class();
  objc_msgSend(this[22], "objectForProperty:", 109);
  v4 = TSUDynamicCast();
  TSWPDropCapLayoutState::TSWPDropCapLayoutState(v6, v4, objc_msgSend(this[1], "textSourceForLayoutInRange:", this[20], this[21]));
  TSWPDropCapLayoutState::operator=((uint64_t)a2, (uint64_t)v6);
  TSWPDropCapLayoutState::~TSWPDropCapLayoutState((TSWPDropCapLayoutState *)v6);
  if (this[20] < this[10]
    || (v5 = (unint64_t)this[21], v5 <= objc_msgSend(*a2, "charCount"))
    || objc_msgSend(this[33], "effectiveTypeForLevel:", this[34]))
  {
    TSWPDropCapLayoutState::clear(a2);
  }
}

void sub_2178EDCB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  TSWPDropCapLayoutState::~TSWPDropCapLayoutState((TSWPDropCapLayoutState *)va);
  _Unwind_Resume(a1);
}

void TSWPDropCapLayoutState::~TSWPDropCapLayoutState(id *this)
{

  *this = 0;
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)(this + 31));

  this[1] = 0;
}

void sub_2178EDD04(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100](v1 + 248);

  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(a1);
}

uint64_t TSWPDropCapLayoutState::TSWPDropCapLayoutState(uint64_t a1, void *a2, void *a3)
{
  TSWPDropCapCTState::TSWPDropCapCTState(a1 + 8, a2, a3);
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = xmmword_217C27470;
  *(_QWORD *)(a1 + 232) = 0x7FFFFFFFFFFFFFFFLL;
  *(_BYTE *)(a1 + 240) &= 0xE0u;
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  TSWPDropCapLayoutState::updateSpacing((TSWPDropCapLayoutState *)a1, 0);
  TSWPDropCapLayoutState::validate((id *)a1);
  return a1;
}

void sub_2178EDDC0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100](v2);

  *v1 = 0;
  _Unwind_Resume(a1);
}

void TSWPDropCapLayoutState::clear(id *this)
{

  *this = 0;
  this[1] = 0;
  *((_BYTE *)this + 16) &= ~1u;
  *((_OWORD *)this + 2) = xmmword_217C27470;
  this[3] = (id)0x3FF0000000000000;
  this[7] = 0;
  this[8] = 0;
  this[9] = (id)0x7FFFFFFFFFFFFFFFLL;
  this[11] = 0;
  this[12] = 0;
  *((_BYTE *)this + 80) = 1;
  this[23] = 0;
  this[25] = 0;
  this[26] = 0;
  *((_OWORD *)this + 14) = xmmword_217C2AC80;
  *((_BYTE *)this + 240) &= 0xE0u;
  *((_DWORD *)this + 26) = 0;
  this[20] = 0;
  this[21] = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 7) = 0u;
  std::shared_ptr<TSWPLineFragmentArray>::reset[abi:ne180100](this + 31);
}

void TSWPDropCapLayoutState::validate(id *this)
{
  if ((unint64_t)this[7] < 2 || !objc_msgSend(*this, "charCount") || this[8] >= this[7])
    TSWPDropCapLayoutState::clear(this);
}

void TSWPDropCapLayoutState::updateSpacing(TSWPDropCapLayoutState *this, unint64_t a2)
{
  void *v4;
  uint64_t v5;

  if (objc_msgSend((id)objc_msgSend(*(id *)this, "spacings"), "count") <= a2)
  {
    *((_QWORD *)this + 6) = 0x7FFFFFFFFFFFFFFFLL;
    TSWPDropCapLayoutState::clear((id *)this);
  }
  else
  {
    v4 = (void *)objc_msgSend((id)objc_msgSend(*(id *)this, "spacings"), "objectAtIndexedSubscript:", a2);
    *((_QWORD *)this + 6) = a2;
    *((_QWORD *)this + 7) = objc_msgSend(v4, "lineCount");
    *((_QWORD *)this + 8) = objc_msgSend(v4, "elevatedLineCount");
    *((_QWORD *)this + 9) = objc_msgSend(v4, "followingLineCount");
    *((_BYTE *)this + 80) = objc_msgSend(v4, "allowSpanParagraphs");
    objc_msgSend(v4, "padding");
    *((_QWORD *)this + 11) = v5;
    *((_QWORD *)this + 12) = objc_msgSend(*(id *)this, "computedFlagsForSpacing:", v4);
    *((_DWORD *)this + 26) = 0;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_QWORD *)this + 20) = 0;
  }
}

uint64_t TSWPDropCapLayoutState::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
  {

    *(_QWORD *)a1 = *(id *)a2;
  }
  TSWPDropCapCTState::operator=(a1 + 8, a2 + 8);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v4 = *(_OWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 80) = v5;
  v7 = *(_OWORD *)(a2 + 128);
  v8 = *(_OWORD *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v9;
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 144) = v8;
  v10 = *(_OWORD *)(a2 + 192);
  v11 = *(_OWORD *)(a2 + 208);
  v12 = *(_OWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 208) = v11;
  *(_OWORD *)(a1 + 224) = v12;
  *(_OWORD *)(a1 + 192) = v10;
  std::shared_ptr<EQKit::StemStretch::Glyph>::operator=[abi:nn180100]((_QWORD *)(a1 + 248), (uint64_t *)(a2 + 248));
  return a1;
}

uint64_t TSWPDropCapCTState::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
  {

    *(_QWORD *)a1 = *(id *)a2;
  }
  v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  return a1;
}

void TSWPCoreTextTypesetter::endParagraphLayout(TSWPCoreTextTypesetter *this)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  void *v8;
  __int128 v9;

  if (*((_BYTE *)this + 34))
  {
    v9 = 0uLL;
    std::shared_ptr<EQKit::OpticalKern::Edge::Path>::operator=[abi:nn180100]((uint64_t)this + 232, &v9);
    v2 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
    if (*((_QWORD *)&v9 + 1))
    {
      v3 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    if (*((_DWORD *)this + 27))
    {
      v5 = 0;
      v6 = 0;
      do
      {
        CFRelease(*(CFTypeRef *)(*((_QWORD *)this + 15) + v5 + 32));
        CFRelease(*(CFTypeRef *)(*((_QWORD *)this + 15) + v5 + 24));
        ++v6;
        v5 += 104;
      }
      while (v6 < *((unsigned int *)this + 27));
    }
    v7 = (void *)*((_QWORD *)this + 15);
    if (v7)
    {
      free(v7);
      *((_QWORD *)this + 15) = 0;
    }
    v8 = (void *)*((_QWORD *)this + 16);
    if (v8)
    {
      free(v8);
      *((_QWORD *)this + 16) = 0;
    }
    *((_DWORD *)this + 27) = 0;
    *((_BYTE *)this + 34) = 0;

    *((_QWORD *)this + 8) = 0;
    *((_QWORD *)this + 9) = 0;

    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 35) = 0;
  }
}

void TSWPLineBalancingLayoutState::~TSWPLineBalancingLayoutState(TSWPLineBalancingLayoutState *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 92);
  if (v2)
  {
    *((_QWORD *)this + 93) = v2;
    operator delete(v2);
  }
  TSWPLayoutState::~TSWPLayoutState(this);
}

void sub_2178EE2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  TSWPAttributeEnumerator::~TSWPAttributeEnumerator((TSWPAttributeEnumerator *)va);
  _Unwind_Resume(a1);
}

void TSWPCoreTextTypesetter::~TSWPCoreTextTypesetter(TSWPCoreTextTypesetter *this)
{
  TSWPCoreTextTypesetter::~TSWPCoreTextTypesetter(this);
  JUMPOUT(0x219A153B8);
}

{
  void *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24D82E658;
  if (*((_BYTE *)this + 34))
  {
    v2 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v3 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "virtual TSWPCoreTextTypesetter::~TSWPCoreTextTypesetter()");
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 226, CFSTR("Didn't end paragraph layout"));
  }
  TSWPCoreTextTypesetter::pDestroyCachedLabelFont((id *)this);

  *((_QWORD *)this + 27) = 0;
  if (*((_BYTE *)this + 32))
    (*(void (**)(TSWPCoreTextTypesetter *))(*(_QWORD *)this + 24))(this);
  TSWPLineStylingCTState::~TSWPLineStylingCTState((id *)this + 41);
  TSWPDropCapCTState::~TSWPDropCapCTState((id *)this + 36);
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)this + 232);
}

void TSWPLineStylingCTState::~TSWPLineStylingCTState(id *this)
{

  *this = 0;
}

{

  *this = 0;
}

void TSWPDropCapCTState::~TSWPDropCapCTState(id *this)
{

  *this = 0;
}

{

  *this = 0;
}

void TSWPCoreTextTypesetter::pDestroyCachedLabelFont(id *this)
{
  id v2;
  id v3;

  this[32] = 0;
  v2 = this[33];
  if (v2)
  {
    CFRelease(v2);
    this[33] = 0;
  }
  v3 = this[31];
  if (v3)
  {
    CFRelease(v3);
    this[31] = 0;
  }
  this[34] = 0;
}

void String(unint64_t *a1, uint64_t *a2, double a3)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  _OWORD *v13;
  _OWORD *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;

  v4 = *a1;
  if (*a2 >= 1)
  {
    v6 = a2[1];
    v7 = v6 + 16 * *a2;
    v8 = a1[1];
LABEL_3:
    v9 = *a1;
    while (2)
    {
      v6 += 16;
      while (1)
      {
        if (v8 < a1[1] + 16 * *a1)
        {
          v10 = *(unsigned __int16 *)(v8 + 8);
          v11 = *(unsigned __int16 *)(v6 - 8);
          if (v10 == v11)
          {
            if (String(v8, v6 - 16, a3))
            {
              if (!*(_BYTE *)(v8 + 10))

              *(_WORD *)(v8 + 8) = 0;
              --v4;
            }
            v8 += 16;
            v7 = a2[1] + 16 * *a2;
            if (v6 >= v7)
            {
              v9 = *a1;
              goto LABEL_19;
            }
            goto LABEL_3;
          }
          if (v10 < v11)
            break;
        }
        v12 = v6 >= v7;
        v6 += 16;
        if (v12)
          goto LABEL_19;
      }
      v8 += 16;
      v6 -= 16;
      if (v6 < v7)
        continue;
      break;
    }
LABEL_19:
    if (v4 < v9)
    {
      v13 = (_OWORD *)a1[1];
      v14 = v13;
      if (v9 >= 1)
      {
        v15 = a1[1];
        do
        {
          if (*(_WORD *)(v15 + 8))
          {
            if ((_OWORD *)v15 != v14)
            {
              *v14 = *(_OWORD *)v15;
              v9 = *a1;
              v13 = (_OWORD *)a1[1];
            }
            ++v14;
          }
          v15 += 16;
        }
        while (v15 < (unint64_t)&v13[v9]);
      }
      if (v14 - v13 != (int)v4)
      {
        v16 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
        v17 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSSPropertyStoreRemovePropertiesFromStore(TSSPropertyStoreRef, TSSPropertyStoreRef)");
        objc_msgSend(v16, "handleFailureInFunction:file:lineNumber:description:", v17, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyStore.m"), 958, CFSTR("mismatch in entry count"));
      }
    }
  }
  if (v4)
  {
    v18 = malloc_type_realloc((void *)a1[1], 16 * v4, 0x10820400B94AB5FuLL);
    if (!v18)
      goto LABEL_35;
    goto LABEL_34;
  }
  if (*a1)
  {
    free((void *)a1[1]);
    v18 = 0;
LABEL_34:
    a1[1] = (unint64_t)v18;
  }
LABEL_35:
  *a1 = v4;
}

uint64_t String(uint64_t a1, uint64_t a2, double a3)
{
  void *v4;
  void *v5;
  uint64_t v6;
  int v7;
  double v9;
  double v10;

  if (*(unsigned __int16 *)(a1 + 8) != *(unsigned __int16 *)(a2 + 8)
    || *(unsigned __int8 *)(a1 + 10) != *(unsigned __int8 *)(a2 + 10))
  {
    return 0;
  }
  switch(*(_BYTE *)(a1 + 10))
  {
    case 0:
      v4 = *(void **)a1;
      if (v4 != *(void **)a2 && (objc_msgSend(v4, "isEqual:") & 1) == 0)
        return 0;
      break;
    case 1:
      v7 = String((unsigned int *)a1);
      if (v7 != String((unsigned int *)a2))
        return 0;
      break;
    case 2:
      *(float *)&v9 = String(a1, a3);
      if (*(float *)&v9 != String(a2, v9))
        return 0;
      break;
    case 3:
      v10 = String(a1);
      if (v10 != String(a2))
        return 0;
      break;
    default:
      v5 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
      v6 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "BOOL TSSPropertyEntryEqual(const TSSPropertyEntry *, const TSSPropertyEntry *)");
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.m"), 239, CFSTR("Unexpected entry type"));
      return 0;
  }
  return 1;
}

{
  void *v6;
  uint64_t v7;
  uint64_t result;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  __CFString *v13;
  void *v14;
  void *v15;
  uint64_t v16;

  if (a2 >> 4 >= 0x121)
  {
    v6 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v7 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSSPropertyEntryInitWithDouble(TSSPropertyEntry *, TSSProperty, double)");
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h"), 94, CFSTR("Property ID <%d> out of range."), a2);
  }
  result = String(a2);
  if ((_DWORD)result != 3)
  {
    v9 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v10 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSSPropertyEntryInitWithDouble(TSSPropertyEntry *, TSSProperty, double)");
    v11 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h");
    v12 = String(a2);
    v13 = String(v12);
    v14 = String(a2);
    result = objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v10, v11, 95, CFSTR("Unexpected property type of '%@' for property '%@'. Expected '%@'."), v13, v14, String(3u));
  }
  if (a3 == INFINITY)
  {
    v15 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v16 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSSPropertyEntryInitWithDouble(TSSPropertyEntry *, TSSProperty, double)");
    result = objc_msgSend(v15, "handleFailureInFunction:file:lineNumber:description:", v16, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h"), 96, CFSTR("Illegal to set undefined value for property %d %@"), a2, String(a2));
  }
  *(_WORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 10) = 3;
  *(double *)a1 = a3;
  return result;
}

unint64_t *String(uint64_t a1)
{
  unint64_t *v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  id v8;

  if (!a1)
    return 0;
  v2 = p_TSSPropertyStoreAllocateWithCapacity(*(_QWORD *)a1);
  v3 = v2;
  if (v2)
  {
    if (*(_QWORD *)a1)
    {
      memcpy((void *)v2[1], *(const void **)(a1 + 8), 16 * *(_QWORD *)a1);
      v4 = *(_QWORD *)a1;
      *v3 = *(_QWORD *)a1;
      if (v4)
      {
        v5 = 0;
        v6 = 1;
        do
        {
          v7 = v3[1];
          if (!*(_BYTE *)(v7 + 16 * v5 + 10))
          {
            v8 = *(id *)(v7 + 16 * v5);
            v4 = *v3;
          }
          v5 = v6;
        }
        while (v4 > v6++);
      }
    }
  }
  return v3;
}

_QWORD *p_TSSPropertyStoreAllocateWithCapacity(size_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = malloc_type_malloc(0x10uLL, 0x10200405730B0C9uLL);
  v3 = v2;
  if (v2)
  {
    *v2 = a1;
    if (a1)
    {
      v4 = malloc_type_calloc(a1, 0x10uLL, 0x10820400B94AB5FuLL);
      v3[1] = v4;
      if (!v4)
      {
        free(v3);
        return 0;
      }
    }
    else
    {
      v2[1] = 0;
    }
  }
  return v3;
}

void sub_2178EED88(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void String(void *a1)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  if (a1)
  {
    v2 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v3 = 0;
      v4 = 0;
      do
      {
        v5 = *((_QWORD *)a1 + 1);
        if (!*(_BYTE *)(v5 + 16 * v3 + 10))

        v3 = (unsigned __int16)++v4;
      }
      while (v2 > (unsigned __int16)v4);
    }
    free(*((void **)a1 + 1));
    free(a1);
  }
}

BOOL String(unint64_t *a1, unint64_t *a2, double a3)
{
  _BOOL8 result;
  unint64_t v6;
  uint64_t v7;
  unint64_t i;
  int v9;

  if (a1 == a2)
    return 1;
  result = 0;
  if (a1 && a2)
  {
    v6 = *a1;
    if (*a1 == *a2)
    {
      if (v6)
      {
        v7 = 0;
        for (i = 0; i < v6; ++i)
        {
          v9 = String(a1[1] + v7, a2[1] + v7, a3);
          v6 = *a1;
          if (!v9)
            break;
          v7 += 16;
        }
      }
      else
      {
        i = 0;
      }
      return i == v6;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t String(uint64_t result)
{
  if (result)
    return *(_QWORD *)result;
  return result;
}

void sub_2178EF068(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<unsigned long,std::shared_ptr<TSWPParagraphTypesetter>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<TSWPParagraphTypesetter>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<TSWPParagraphTypesetter>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long,std::shared_ptr<TSWPParagraphTypesetter>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<TSWPParagraphTypesetter>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<TSWPParagraphTypesetter>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long,std::shared_ptr<TSWPParagraphTypesetter>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<TSWPParagraphTypesetter>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<TSWPParagraphTypesetter>>>>::destroy(a1, a2[1]);
    std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)(a2 + 5));
    operator delete(a2);
  }
}

void sub_2178EF948(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_2178EF9F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void TSWPCoreTextTypesetter::createLineRefsForLineFragment(uint64_t a1, TSWPLineFragment *this, uint64_t a3, int a4, int a5)
{
  double v5;
  void *v6;
  uint64_t v7;
  const __CFArray *GlyphRuns;
  const __CFArray *v9;
  CFIndex Count;
  const __CTRun *ValueAtIndex;
  unsigned int v12;
  CFIndex v13;
  double TypographicBounds;
  const __CFAllocator *v15;
  const __CFString *v16;
  const __CFAttributedString *v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  _BOOL4 v26;
  _BOOL4 v27;
  _BOOL4 v28;
  uint64_t v29;
  const __CTLine *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  int v34;
  CGFloat v35;
  CGColor *v36;
  double v37;
  const __CFDictionary *v38;
  CFIndex v39;
  const __CFAllocator *v40;
  __CFDictionary *MutableCopy;
  const __CFAttributedString *v42;
  double v43;
  double TrailingWhitespaceWidth;
  double v45;
  double v46;
  const __CFAttributedString *v47;
  CTLineRef TruncatedLine;
  char v49;
  CTLineRef JustifiedLine;
  int v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double PenOffsetForFlush;
  id *v62;
  double v63;
  TSWPCoreTextTypesetter *v64;
  double v65;
  double x;
  double width;
  double v68;
  uint64_t v69;
  char v70;
  int v71;
  char v72;
  void *v73;
  uint64_t v74;
  CFArrayRef v75;
  uint64_t v76;
  const __CTRun *v77;
  double v78;
  double v79;
  __CTFont *v80;
  __int128 v81;
  CFArrayRef v82;
  uint64_t v83;
  const __CTRun *v84;
  CFRange StringRange;
  CFDictionaryRef v86;
  TSWPLineFragment *v87;
  CGColor *v88;
  float v89;
  CGColor *v90;
  int v91;
  NSString *v92;
  NSString *v93;
  void *v94;
  uint64_t v95;
  TSWPDrawableAttachment *v96;
  TSWPLineFragment *v97;
  int isKindOfClass;
  void *v99;
  void *v100;
  void *v101;
  uint64_t v102;
  double v103;
  const void *v104;
  unint64_t v105;
  uint64_t v106;
  CGFloat v107;
  void *v108;
  uint64_t v109;
  id v110;
  unint64_t v111;
  uint64_t v112;
  TSWPLineFragment *v113;
  void *v114;
  uint64_t v115;
  void *v116;
  double v117;
  double v118;
  int v119;
  void *v120;
  TSWPParagraphTypesetter *v121;
  double *TateChuYokoLineRefsForCharIndex;
  double *v123;
  double v124;
  double v125;
  CTRunStatus v126;
  __CTFont *v127;
  uint64_t v128;
  const __CFDictionary *v129;
  double v130;
  double v131;
  double PositionForLocalCharIndex;
  void *v133;
  uint64_t v134;
  double v135;
  double v136;
  double v137;
  _BOOL4 v139;
  TSKAnnotationAuthor *v140;
  CGColor *v141;
  int v142;
  double v143;
  uint64_t v144;
  double v145;
  unsigned int v146;
  char v147;
  BOOL v148;
  char v149;
  void *v150;
  float v151;
  double v152;
  double v153;
  double v154;
  double v155;
  unsigned int v156;
  id v157;
  unint64_t v158;
  _BOOL4 v159;
  double v160;
  CGColor *v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  int v170;
  char v171;
  double v172;
  unint64_t v173;
  uint64_t v174;
  CFIndex v175;
  double v176;
  CGFloat v177;
  id v178;
  CGColor *v179;
  double v180;
  CGColor *v181;
  id v182;
  CFIndex v183;
  unsigned int v184;
  const __CTLine *v185;
  unsigned int v186;
  CFIndex v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  double v192;
  double *v193;
  double *v194;
  double v195;
  double v196;
  void *v197;
  uint64_t v198;
  double v199;
  double v200;
  double v201;
  int v202;
  double *v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  char *v208;
  double *v209;
  double *v210;
  double v211;
  double v212;
  id v213;
  double v214;
  const __CFDictionary *v215;
  const __CTLine *v216;
  double v217;
  double v218;
  uint64_t i;
  const __CFAttributedString *v220;
  const __CTLine *v221;
  double v222;
  void *v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  __CFString *v227;
  unint64_t v229;
  uint64_t v230;
  TSWPLineFragment *v231;
  unint64_t v232;
  uint64_t v233;
  TSWPLineFragment *v234;
  TSWPLineFragment *v235;
  unint64_t v236;
  uint64_t v237;
  double OffsetForStringIndex;
  double v239;
  double v240;
  unint64_t v241;
  uint64_t v242;
  double v243;
  double v244;
  double v245;
  double v246;
  unint64_t v247;
  const __CTLine *v248;
  uint64_t v249;
  int v250;
  CGColor *v251;
  int v252;
  const __CTLine *line;
  const __CTLine *truncationToken;
  double v255;
  uint64_t *v256;
  double v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  double v262;
  TSWPLineFragment *charIndex;
  uint64_t v264;
  __CTFont *v266;
  uint64_t v267;
  uint64_t v268;
  CFArrayRef v269;
  TSKAnnotationAuthor *v270;
  const __CFAllocator *allocator;
  double v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  double v276;
  unsigned int v278;
  CFIndex range;
  BOOL v281[4];
  const __CTFont *font;
  int v283;
  _BOOL4 v284;
  unint64_t GlyphCount;
  TSWPAdornmentLine buffer;
  TSWPAdornmentLine v289;
  CGGlyph glyphs;
  CGFloat leading;
  CGFloat descent;
  CGFloat ascent;
  CGSize *v294[3];
  CGPoint *v295[3];
  CFIndex *v296[3];
  unsigned __int16 v297;
  CGSize v298;
  UniChar chars[4];
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  uint64_t v310;
  __int128 v311;
  char v312;
  CTRunRef run;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  unsigned int v318[2];
  uint64_t v319;
  CGColorRef v320;
  CFTypeRef v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 __p;
  _QWORD v329[4];
  __int128 v330;
  char v331;
  CTLineRef v332;
  double v333;
  uint64_t v334;
  __int128 v335;
  int v336;
  _QWORD v337[2];
  void (*v338)(uint64_t, CGColorRef);
  void *v339;
  uint64_t *v340;
  uint64_t *v341;
  uint64_t v342;
  uint64_t *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t *v347;
  uint64_t v348;
  char v349;
  double v350;
  double v351;
  _BYTE v352[128];
  CGSize attributes;
  CGColorRef v354;
  CFTypeRef cf;
  void *v356[2];
  void *v357[2];
  __int128 v358;
  void *v359[2];
  void *v360[2];
  __int128 v361;
  void *v362[2];
  __int128 v363;
  __int128 v364;
  __int128 v365;
  char v366;
  uint64_t v367;
  CFRange v368;
  CFRange v369;
  CFRange v370;
  CFRange v371;
  CFRange v372;
  CFRange v373;
  CFRange v374;
  CFRange v375;
  CGRect BoundsWithOptions;

  v367 = *MEMORY[0x24BDAC8D0];
  v351 = 0.0;
  v350 = 0.0;
  TSWPLineFragment::getTypesetterPos(this, &v351, &v350);
  if (v350 - v351 <= 32000.0)
    v5 = v350 - v351;
  else
    v5 = 32000.0;
  if ((~*((_DWORD *)this + 6) & 0x800002) == 0)
  {
    v6 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v7 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSWPCoreTextTypesetter::createLineRefsForLineFragment(TSWPLineFragment *, const TSWPLayoutState *, BOOL, TSWPLayoutFlags) const");
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 2438, CFSTR("Hyphenation and line truncation should not occur at the same time"));
  }
  if (TSWPLineFragment::isHyphenated(this))
  {
    attributes.width = 0.0;
    v318[0] = 0;
    TSWPLineFragment::getHyphenInfo(this, (const __CFDictionary **)&attributes, v318);
    if (!v318[0])
    {
      v318[0] = 45;
      GlyphRuns = CTLineGetGlyphRuns(0);
      v9 = GlyphRuns;
      if (GlyphRuns)
      {
        Count = CFArrayGetCount(GlyphRuns);
        ValueAtIndex = (const __CTRun *)CFArrayGetValueAtIndex(v9, Count - 1);
        *(_QWORD *)&attributes.width = CTRunGetAttributes(ValueAtIndex);
      }
    }
    if ((v318[0] - 0x10000) >> 20)
    {
      v13 = 1;
      LOWORD(v12) = v318[0];
    }
    else
    {
      v12 = ((v318[0] + 67043328) >> 10) - 10240;
      chars[1] = v318[0] & 0x3FF | 0xDC00;
      v13 = 2;
    }
    chars[0] = v12;
    v15 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v16 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x24BDBD240], chars, v13);
    v17 = CFAttributedStringCreate(v15, v16, *(CFDictionaryRef *)&attributes.width);
    line = CTLineCreateWithAttributedString(v17);
    TypographicBounds = CTLineGetTypographicBounds(line, 0, 0, 0);
    CFRelease(v17);
    CFRelease(v16);
  }
  else
  {
    line = 0;
    TypographicBounds = 0.0;
  }
  if (TSWPParagraphEnumerator::paragraphTextRange((TSWPParagraphEnumerator *)(a3 + 24)) != *((_QWORD *)this + 2))
  {
    v18 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v19 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSWPCoreTextTypesetter::createLineRefsForLineFragment(TSWPLineFragment *, const TSWPLayoutState *, BOOL, TSWPLayoutFlags) const");
    objc_msgSend(v18, "handleFailureInFunction:file:lineNumber:description:", v19, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 2472, CFSTR("line fragment isn't from the current paragraph"));
  }
  v20 = objc_msgSend(*(id *)(a1 + 64), "charRangeMappedFromStorage:", *(_QWORD *)this, *((_QWORD *)this + 1));
  v22 = v21;
  if (v21 < 0)
  {
    v23 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v24 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSWPCoreTextTypesetter::createLineRefsForLineFragment(TSWPLineFragment *, const TSWPLayoutState *, BOOL, TSWPLayoutFlags) const");
    objc_msgSend(v23, "handleFailureInFunction:file:lineNumber:description:", v24, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 2474, CFSTR("Bad range length, goodbye cruel world."));
  }
  v25 = v20 + v22;
  if (*(_WORD *)(*(_QWORD *)(a1 + 232) + 72))
    v26 = v20 + v22 == *(_QWORD *)(a1 + 56);
  else
    v26 = 0;
  charIndex = (TSWPLineFragment *)(v20 + v22);
  if (v25)
    v27 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 80) + 2 * v25 - 2) == 8232;
  else
    v27 = 0;
  v28 = *(_DWORD *)(a3 + 388) == 3 && v25 < *(_QWORD *)(a1 + 56) || TSWPLineFragment::getOikomiSquish(this);
  v278 = *((_DWORD *)this + 6);
  v29 = TSWPCoreTextTypesetter::pCTTypesetter((TSWPCoreTextTypesetter *)a1);
  v30 = (const __CTLine *)MEMORY[0x219A14C20](v29, v20, v22, v351);
  if (!CTLineGetGlyphCount(v30))
  {
    v31 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v32 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSWPCoreTextTypesetter::createLineRefsForLineFragment(TSWPLineFragment *, const TSWPLayoutState *, BOOL, TSWPLayoutFlags) const");
    objc_msgSend(v31, "handleFailureInFunction:file:lineNumber:description:", v32, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 2485, CFSTR("bad lineGlyphCount"));
  }
  *((_DWORD *)this + 6) = *((_DWORD *)this + 6) & 0xFBFFFFFF | ((objc_msgSend((id)TSWPParagraphEnumerator::paragraphStyle((TSWPParagraphEnumerator *)(a3 + 24), 0), "intValueForProperty:", 110) != 0) << 26);
  v346 = 0;
  v347 = &v346;
  v348 = 0x2020000000;
  v349 = 1;
  v342 = 0;
  v343 = &v342;
  v344 = 0x2020000000;
  v345 = 0;
  v337[0] = MEMORY[0x24BDAC760];
  v337[1] = 3221225472;
  v338 = (void (*)(uint64_t, CGColorRef))___ZNK22TSWPCoreTextTypesetter29createLineRefsForLineFragmentEP16TSWPLineFragmentPK15TSWPLayoutStateb15TSWPLayoutFlags_block_invoke;
  v339 = &unk_24D82E6B0;
  v340 = &v346;
  v341 = &v342;
  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 232) + 56), "hasColorGlyphsInRange:", v20, v22))
  {
LABEL_32:
    *((_BYTE *)v347 + 24) = 0;
    goto LABEL_39;
  }
  if (*(_BYTE *)(a3 + 512))
  {
    v33 = *(void **)(a3 + 184);
    if (v33)
    {
      if (*(_BYTE *)(a3 + 332))
      {
        v34 = objc_msgSend(v33, "labelTypeForLevel:", *(_QWORD *)(a3 + 192));
        if ((v34 - 2) < 2)
        {
          v35 = *(double *)(a3 + 96);
          attributes.width = *(CGFloat *)(a3 + 184);
          attributes.height = v35;
          v36 = (CGColor *)objc_msgSend((id)TSWPResolvePropertyForStyles((uint64_t)&attributes, 2uLL, 18, 0), "CGColor");
          v338((uint64_t)v337, v36);
          goto LABEL_39;
        }
        if (v34 != 1)
          goto LABEL_39;
        goto LABEL_32;
      }
    }
  }
LABEL_39:
  v37 = 0.0;
  if ((*((_BYTE *)this + 26) & 0x80) == 0)
    goto LABEL_44;
  v38 = *(const __CFDictionary **)(*(_QWORD *)(a1 + 120)
                                 + 104
                                 * TSWPCoreTextTypesetter::pFindFontRunIndexForLocalCharIndex((TSWPCoreTextTypesetter *)a1, objc_msgSend(*(id *)(a1 + 64), "charIndexMappedFromStorage:", *((_QWORD *)this + 1) + *(_QWORD *)this))+ 32);
  v39 = CFDictionaryGetCount(v38);
  v40 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], v39 + 1, v38);
  CFDictionarySetValue(MutableCopy, CFSTR("__TSWPTruncationKey"), MEMORY[0x24BDBD1C8]);
  v42 = CFAttributedStringCreate(v40, CFSTR("…"), MutableCopy);
  CFRelease(MutableCopy);
  truncationToken = CTLineCreateWithAttributedString(v42);
  CFRelease(v42);
  if (truncationToken)
  {
    v37 = CTLineGetTypographicBounds(truncationToken, 0, 0, 0);
    v43 = CTLineGetTypographicBounds(v30, 0, 0, 0);
    TrailingWhitespaceWidth = CTLineGetTrailingWhitespaceWidth(v30);
    v45 = *(double *)(a3 + 336);
    if (v37 + v43 + v45 - TrailingWhitespaceWidth <= v5)
    {
      v49 = 1;
    }
    else
    {
      v46 = v43 - (TrailingWhitespaceWidth + v37 + v45);
      if (v37 <= v46)
      {
        TruncatedLine = CTLineCreateTruncatedLine(v30, v46, kCTLineTruncationEnd, truncationToken);
        CFRelease(truncationToken);
        truncationToken = 0;
        v37 = 0.0;
      }
      else
      {
        v47 = CFAttributedStringCreate(v40, &stru_24D82FEB0, v38);
        TruncatedLine = CTLineCreateWithAttributedString(v47);
        CFRelease(v47);
      }
      CFRelease(v30);
      v49 = 1;
      v30 = TruncatedLine;
    }
  }
  else
  {
LABEL_44:
    v49 = 0;
    truncationToken = 0;
  }
  if (v28 && !v26 && !v27)
  {
    v5 = v5 - (TypographicBounds + v37);
    JustifiedLine = CTLineCreateJustifiedLine(v30, 1.0, v5);
    if (JustifiedLine)
    {
      CFRelease(v30);
      *((_DWORD *)this + 6) &= ~0x8000u;
      v30 = JustifiedLine;
    }
    else
    {
      *((_DWORD *)this + 6) |= 0x8000u;
      TSWPLineFragment::getOikomiSquish(this);
    }
  }
  v51 = *(_DWORD *)(a3 + 388);
  v52 = TypographicBounds + v37;
  v53 = v5 - (TypographicBounds + v37);
  if ((v278 & 0x1000) != 0)
    v54 = 1.0;
  else
    v54 = 0.0;
  if ((v278 & 0x1000) != 0)
    v55 = TypographicBounds;
  else
    v55 = 0.0;
  v56 = v5 - v55;
  v57 = 0.5;
  if (v51 == 2)
  {
    v58 = v5 - (TypographicBounds + v37);
  }
  else
  {
    v57 = 0.0;
    v58 = v5;
  }
  if (v51 != 3)
  {
    v54 = v57;
    v56 = v58;
  }
  if (v51 == 1)
    v59 = 1.0;
  else
    v59 = v54;
  if (v51 != 1)
    v53 = v56;
  if (a4)
    v60 = 0.0;
  else
    v60 = v53;
  PenOffsetForFlush = CTLineGetPenOffsetForFlush(v30, v59, v60);
  if ((v49 & 1) != 0)
  {
    v62 = (id *)a3;
    if ((v278 & 0x1000) != 0)
      PenOffsetForFlush = PenOffsetForFlush + *(double *)(a3 + 336) * (1.0 - v59);
    else
      PenOffsetForFlush = PenOffsetForFlush - *(double *)(a3 + 336) * v59;
  }
  else
  {
    v62 = (id *)a3;
  }
  v63 = TSWPCoreTextTypesetter::pAdditionalOffsetForLineFragment(a1, (uint64_t)v62, this, a5);
  v65 = TSWPCoreTextTypesetter::pLineRefStartForLineFragment(v64, v62, this, v351);
  BoundsWithOptions = CTLineGetBoundsWithOptions(v30, 0);
  x = BoundsWithOptions.origin.x;
  width = BoundsWithOptions.size.width;
  v68 = PenOffsetForFlush + v63 + v65;
  *((double *)this + 27) = v68 + CTLineGetTypographicBounds(v30, 0, 0, 0);
  if ((unint64_t)charIndex <= v20)
  {
    v71 = 0;
    if (!v30)
      goto LABEL_417;
    goto LABEL_81;
  }
  v69 = objc_msgSend(*(id *)(a1 + 64), "characterAtIndex:", (char *)charIndex - 1);
  v70 = IsParagraphBreakingCharacter(v69);
  v71 = v69;
  v72 = v70 ^ 1;
  if ((_DWORD)v69 == 8232)
    v72 = 0;
  if ((v72 & 1) == 0)
    *((_DWORD *)this + 6) |= 0x800u;
  if (v30)
  {
LABEL_81:
    v252 = v71;
    if (!*((_QWORD *)this + 64))
      *((_QWORD *)this + 64) = (id)CFAttributedStringGetString(*(CFAttributedStringRef *)(*(_QWORD *)(a1 + 232) + 56));
    v332 = v30;
    v333 = PenOffsetForFlush + v63 + v65;
    v334 = 0;
    v335 = *MEMORY[0x24BEB3BF0];
    v336 = 0;
    CFRetain(v30);
    v256 = (uint64_t *)((char *)this + 192);
    if (*((_QWORD *)this + 25) != *((_QWORD *)this + 24))
    {
      v73 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
      v74 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSWPLineFragment::setLineRef(const TSWPLineRef &)");
      objc_msgSend(v73, "handleFailureInFunction:file:lineNumber:description:", v74, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.h"), 518, CFSTR("Line ref is already set"));
    }
    std::vector<TSWPLineRef>::assign((uint64_t)v256, 1uLL, (uint64_t)&v332);
    v75 = CTLineGetGlyphRuns(v30);
    v76 = -[__CFArray count](v75, "count");
    v262 = CTLineGetTrailingWhitespaceWidth(v332);
    v269 = v75;
    if ((v278 & 0x1000) != 0)
    {
      if (v262 == 0.0
        && v76
        && objc_msgSend(*(id *)(a1 + 64), "characterAtIndex:", objc_msgSend(*(id *)(a1 + 64), "charIndexMappedFromStorage:", TSWPLineFragment::leftMostCharIndex(this))) == 9)
      {
        v77 = (const __CTRun *)-[__CFArray objectAtIndex:](v75, "objectAtIndex:", 0);
        v368.location = 0;
        v368.length = 1;
        CTRunGetAdvances(v77, v368, &attributes);
        v262 = attributes.width;
        v78 = -attributes.width;
      }
      else
      {
        *(_QWORD *)&v78 = (unint64_t)CTLineGetBoundsWithOptions(v30, 1uLL);
      }
      if (iOSIsGreaterThan7(void)::onceToken != -1)
        dispatch_once(&iOSIsGreaterThan7(void)::onceToken, &__block_literal_global_188);
      v79 = 0.0;
      if (iOSIsGreaterThan7(void)::result)
        v79 = v78;
    }
    else
    {
      v79 = 0.0;
    }
    v276 = v79;
    *((double *)this + 65) = v79;
    v80 = +[TSWPRenderer invisiblesFont](TSWPRenderer, "invisiblesFont");
    *(_QWORD *)&attributes.width = 0x100000001;
    v354 = 0;
    attributes.height = 0.0;
    cf = v80;
    *(_OWORD *)v356 = 0u;
    *(_OWORD *)v357 = 0u;
    v358 = 0u;
    *(_OWORD *)v359 = 0u;
    *(_OWORD *)v360 = 0u;
    v361 = 0u;
    *(_OWORD *)v362 = 0u;
    v363 = 0u;
    v81 = *MEMORY[0x24BDBEFB0];
    v364 = 0u;
    v365 = v81;
    v366 = 0;
    CGColorRetain(0);
    if (cf)
      CFRetain(cf);
    *(_QWORD *)v318 = 0x100000003;
    v320 = 0;
    v319 = 0;
    v321 = v80;
    v322 = 0u;
    v323 = 0u;
    v324 = 0u;
    v325 = 0u;
    v326 = 0u;
    v327 = 0u;
    __p = 0u;
    memset(v329, 0, sizeof(v329));
    v330 = *MEMORY[0x24BDBEFB0];
    v331 = 0;
    CGColorRetain(0);
    if (v321)
      CFRetain(v321);
    v316 = 0u;
    v317 = 0u;
    v314 = 0u;
    v315 = 0u;
    v82 = v269;
    v83 = -[__CFArray countByEnumeratingWithState:objects:count:](v269, "countByEnumeratingWithState:objects:count:", &v314, v352, 16);
    if (!v83)
    {
      v272 = INFINITY;
      goto LABEL_361;
    }
    v274 = 0;
    v260 = v76 - 1;
    v255 = width + x;
    v272 = INFINITY;
    v267 = *(_QWORD *)v315;
    v264 = *MEMORY[0x24BDC4EE0];
    v259 = *MEMORY[0x24BDC4F38];
    v258 = *MEMORY[0x24BDC4F30];
    v261 = *MEMORY[0x24BDC4C28];
    allocator = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v257 = v68;
    while (1)
    {
      v275 = 0;
      v268 = v83;
      do
      {
        if (*(_QWORD *)v315 != v267)
          objc_enumerationMutation(v82);
        v84 = *(const __CTRun **)(*((_QWORD *)&v314 + 1) + 8 * v275);
        run = v84;
        StringRange = CTRunGetStringRange(v84);
        GlyphCount = CTRunGetGlyphCount(v84);
        v86 = CTRunGetAttributes(v84);
        v87 = (TSWPLineFragment *)v86;
        if (*((_BYTE *)v347 + 24))
        {
          v88 = (CGColor *)-[__CFDictionary objectForKey:](v86, "objectForKey:", v264);
          v338((uint64_t)v337, v88);
          if (*((_BYTE *)v347 + 24))
          {
            objc_msgSend((id)-[TSWPLineFragment objectForKey:](v87, "objectForKey:", v259), "floatValue");
            if (v89 != 0.0)
            {
              v90 = (CGColor *)-[TSWPLineFragment objectForKey:](v87, "objectForKey:", v258);
              if (v90)
                v338((uint64_t)v337, v90);
            }
          }
        }
        v91 = objc_msgSend(*(id *)(a1 + 64), "characterAtIndex:", StringRange.location);
        *(_QWORD *)chars = 0x100000004;
        v300 = 0u;
        v301 = 0u;
        v302 = 0u;
        v303 = 0u;
        v304 = 0u;
        v305 = 0u;
        v306 = 0u;
        v307 = 0u;
        v308 = 0u;
        v309 = 0u;
        v310 = 0;
        v311 = *MEMORY[0x24BDBEFB0];
        v312 = 0;
        CGColorRetain(0);
        if ((_QWORD)v301)
          CFRetain((CFTypeRef)v301);
        v298 = (CGSize)*MEMORY[0x24BDBF148];
        v297 = 0;
        v92 = (NSString *)-[TSWPLineFragment objectForKeyedSubscript:](v87, "objectForKeyedSubscript:", CFSTR("emphasisMarks"));
        v93 = v92;
        if (v92)
        {
          v284 = 0;
          if (-[NSString length](v92, "length") && GlyphCount)
            v284 = TSWPCoreTextTypesetter::pSetUpEmphasisMarkAdornments((id *)a1, (const TSWPLayoutState *)a3, (TSWPAdornments *)chars, &run, this, v93, &v297, &v298);
        }
        else
        {
          v284 = 0;
        }
        if (v91 == 65532 || v91 == 14)
        {
          if (GlyphCount != 1)
          {
            v94 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
            v95 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSWPCoreTextTypesetter::createLineRefsForLineFragment(TSWPLineFragment *, const TSWPLayoutState *, BOOL, TSWPLayoutFlags) const");
            objc_msgSend(v94, "handleFailureInFunction:file:lineNumber:description:", v95, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 2783, CFSTR("Attachment or footnote spanning multiple characters"));
          }
          v96 = (TSWPDrawableAttachment *)objc_msgSend(*(id *)(a1 + 64), "attachmentOrFootnoteAtCharIndex:", StringRange.location);
          v97 = (TSWPLineFragment *)objc_msgSend(*(id *)(a1 + 64), "charIndexMappedToStorage:", StringRange.location);
          objc_opt_class();
          objc_msgSend((id)TSUDynamicCast(), "drawable");
          objc_opt_class();
          isKindOfClass = objc_opt_isKindOfClass();
          if (!-[TSWPDrawableAttachment isDrawable](v96, "isDrawable")
            || -[TSWPDrawableAttachment isAnchored](v96, "isAnchored")
            || -[TSWPDrawableAttachment isPartitioned](v96, "isPartitioned"))
          {
            if ((-[TSWPDrawableAttachment elementKind](v96, "elementKind") & 0x1E0) != 0)
            {
              v99 = (void *)-[TSWPLineFragment objectForKeyedSubscript:](v87, "objectForKeyedSubscript:", kTSWPAttachmentMap);
              v100 = v99;
              if (v99)
              {
                if (!objc_msgSend(v99, "lineRef"))
                {
                  v101 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
                  v102 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSWPCoreTextTypesetter::createLineRefsForLineFragment(TSWPLineFragment *, const TSWPLayoutState *, BOOL, TSWPLayoutFlags) const");
                  objc_msgSend(v101, "handleFailureInFunction:file:lineNumber:description:", v102, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 2808, CFSTR("invalid nil value for '%s'"), "attachmentMap.lineRef");
                }
                if (objc_msgSend(v100, "lineRef"))
                {
                  v369.location = 0;
                  v369.length = 1;
                  CTRunGetPositions(v84, v369, &buffer.var0);
                  v103 = TSWPLineFragment::baselineAdjustAtCharIndex(v97, *(void **)(a1 + 16), *(TSWPStorage **)(a3 + 104), 0, objc_msgSend(*(id *)(a3 + 104), "scaleTextPercent"));
                  buffer.var0.x = buffer.var0.x + v276 + v333;
                  buffer.var0.y = v103 + buffer.var0.y;
                  v104 = (const void *)objc_msgSend(v100, "lineRef");
                  *(_QWORD *)&v289.var0.x = v104;
                  *(CGPoint *)&v289.var0.y = buffer.var0;
                  v289.var2 = (CGColor *)v97;
                  *(_QWORD *)&v289.var3 = 1;
                  v289.var4 = 0;
                  if (v104)
                    CFRetain(v104);
                  v105 = *((_QWORD *)this + 25);
                  if (v105 >= *((_QWORD *)this + 26))
                  {
                    v106 = std::vector<TSWPLineRef>::__push_back_slow_path<TSWPLineRef const&>(v256, (uint64_t)&v289);
                  }
                  else
                  {
                    std::vector<TSWPLineRef>::__construct_one_at_end[abi:ne180100]<TSWPLineRef const&>((uint64_t)v256, (uint64_t)&v289);
                    v106 = v105 + 48;
                  }
                  *((_QWORD *)this + 25) = v106;
                  if (objc_msgSend((id)objc_msgSend(v100, "attachment"), "changesWithPageCount"))
                    *((_DWORD *)this + 6) |= 0x100000u;
                  if (*(_QWORD *)&v289.var0.x)
                    CFRelease(*(CFTypeRef *)&v289.var0.x);
                }
              }
              else
              {
                v114 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
                v115 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSWPCoreTextTypesetter::createLineRefsForLineFragment(TSWPLineFragment *, const TSWPLayoutState *, BOOL, TSWPLayoutFlags) const");
                objc_msgSend(v114, "handleFailureInFunction:file:lineNumber:description:", v115, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 2806, CFSTR("invalid nil value for '%s'"), "attachmentMap");
              }
            }
            else if ((-[TSWPDrawableAttachment elementKind](v96, "elementKind") & 0x10) != 0)
            {
              v370.location = 0;
              v370.length = 1;
              CTRunGetPositions(v84, v370, &buffer.var0);
              buffer.var0.x = v333 + buffer.var0.x;
              objc_opt_class();
              v107 = COERCE_DOUBLE(TSUDynamicCast());
              *(CGPoint *)&v289.var0.y = buffer.var0;
              v289.var0.x = v107;
              v289.var2 = (CGColor *)StringRange.location;
              if (v107 == 0.0)
              {
                v108 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
                v109 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "TSWPUIAttachmentData::TSWPUIAttachmentData(TSWPUIGraphicalAttachment *, CGPoint &, CFIndex)");
                objc_msgSend(v108, "handleFailureInFunction:file:lineNumber:description:", v109, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.h"), 58, CFSTR("invalid nil value for '%s'"), "_attachment");
                v107 = v289.var0.x;
              }
              v110 = *(id *)&v107;
              v111 = *((_QWORD *)this + 47);
              if (v111 >= *((_QWORD *)this + 48))
              {
                v112 = std::vector<TSWPUIAttachmentData>::__push_back_slow_path<TSWPUIAttachmentData const&>((uint64_t *)this + 46, (uint64_t)&v289);
                v113 = this;
              }
              else
              {
                std::allocator<TSWPUIAttachmentData>::construct[abi:ne180100]<TSWPUIAttachmentData,TSWPUIAttachmentData const&>((uint64_t)this + 384, *((_QWORD *)this + 47), (uint64_t)&v289);
                v112 = v111 + 32;
                v113 = this;
                *((_QWORD *)this + 47) = v111 + 32;
              }
              *((_QWORD *)v113 + 47) = v112;

            }
          }
          else
          {
            v116 = TSWPLayoutChore::validatedLayoutForInlineAttachment(*(id **)(a1 + 8), v96, 0, 0);
            v117 = TSWPLineFragment::wpOffsetForCharIndex(this, (unint64_t)v97, 0, a4, 0);
            if ((CTRunGetStatus(v84) & 1) != 0)
            {
              TSWPLineFragment::wpOffsetForInsertionPoint(this, (unint64_t)v97, 0, 1, 0);
              v117 = v118;
            }
            objc_msgSend(v116, "setAdjustedInterimPositionX:", v117);
          }
        }
        else
        {
          isKindOfClass = 0;
        }
        v119 = objc_msgSend((id)-[TSWPLineFragment objectForKeyedSubscript:](v87, "objectForKeyedSubscript:", CFSTR("TSWPUnderline")), "integerValue");
        v273 = objc_msgSend((id)-[TSWPLineFragment objectForKeyedSubscript:](v87, "objectForKeyedSubscript:", CFSTR("TSWPStrikethrough")), "integerValue");
        v120 = (void *)-[TSWPLineFragment objectForKeyedSubscript:](v87, "objectForKeyedSubscript:", CFSTR("TSWPTextBackgroundColor"));
        objc_opt_class();
        -[TSWPLineFragment objectForKeyedSubscript:](v87, "objectForKeyedSubscript:", CFSTR("TSWPTextHighlightAuthorAttribute"));
        v270 = (TSKAnnotationAuthor *)TSUDynamicCast();
        if (GlyphCount)
        {
          std::vector<long>::vector(v296, GlyphCount);
          v371.location = 0;
          v371.length = GlyphCount;
          CTRunGetStringIndices(v84, v371, v296[0]);
          std::vector<CGPoint>::vector(v295, GlyphCount);
          v372.location = 0;
          v372.length = GlyphCount;
          CTRunGetPositions(v84, v372, v295[0]);
          std::vector<CGSize>::vector(v294, GlyphCount);
          v373.location = 0;
          v373.length = GlyphCount;
          CTRunGetAdvances(v84, v373, v294[0]);
          if (*(unsigned __int16 *)(*(_QWORD *)(a1 + 80) + 2 * *v296[0]) == (unsigned __int16)kTateChuYokoDummySpaceCharacter
            && GlyphCount == 1
            && (v121 = *(TSWPParagraphTypesetter **)(a1 + 232)) != 0)
          {
            TateChuYokoLineRefsForCharIndex = (double *)TSWPParagraphTypesetter::findTateChuYokoLineRefsForCharIndex(v121, *v296[0]);
            v123 = TateChuYokoLineRefsForCharIndex;
            ascent = 0.0;
            descent = 0.0;
            leading = 0.0;
            if (TateChuYokoLineRefsForCharIndex)
            {
              v124 = TateChuYokoLineRefsForCharIndex[4];
              ascent = TateChuYokoLineRefsForCharIndex[3] * 0.5;
              descent = ascent;
              v125 = v124 + TateChuYokoLineRefsForCharIndex[5] + TateChuYokoLineRefsForCharIndex[6];
              v283 = 1;
              goto LABEL_158;
            }
          }
          else
          {
            ascent = 0.0;
            descent = 0.0;
            leading = 0.0;
          }
          v374.location = 0;
          v374.length = 0;
          v125 = CTRunGetTypographicBounds(v84, v374, &ascent, &descent, &leading);
          v283 = 0;
          v123 = 0;
LABEL_158:
          range = (CFIndex)v123;
          v126 = (CTRunGetStatus(v84) >> 2) & 1;
          if (!*(_BYTE *)(a1 + 30))
            v126 = 0;
          *(_DWORD *)v281 = v126;
          v127 = *(__CTFont **)(*(_QWORD *)(a1 + 120)
                              + 104
                              * TSWPCoreTextTypesetter::pFindFontRunIndexForLocalCharIndex((TSWPCoreTextTypesetter *)a1, *v296[0])+ 24);
          v128 = -[TSWPLineFragment objectForKeyedSubscript:](v87, "objectForKeyedSubscript:", v261);
          font = (const __CTFont *)v128;
          v266 = v127;
          if ((__CTFont *)v128 != v127)
            *((_DWORD *)this + 6) |= 0x80u;
          if ((v278 & 0x1000) != 0 || v274 != v260)
          {
            v130 = 0.0;
            if (((v274 == 0) & (v278 >> 12)) != 0)
              v131 = v262;
            else
              v131 = 0.0;
          }
          else
          {
            v130 = TSWPCoreTextTypesetter::pCalculateTrailingWhiteSpace((TSWPCoreTextTypesetter *)a1, v262, 0, *(_BYTE *)(a1 + 30), GlyphCount, v295[0], v294[0], v296[0]);
            v131 = 0.0;
          }
          if (*(_DWORD *)v281)
          {
            LOWORD(buffer.var0.x) = 0;
            LOWORD(buffer.var0.x) = *(_WORD *)(*(_QWORD *)(a1 + 80) + 2 * *v296[0]);
            glyphs = 0;
            if (CTFontGetGlyphsForCharacters(font, (const UniChar *)&buffer, &glyphs, 1))
            {
              CTFontGetVerticalTranslationsForGlyphs(font, &glyphs, (CGSize *)&v289, 1);
              PositionForLocalCharIndex = v68 - v295[0]->y + v289.var0.y;
            }
            else
            {
              v133 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
              v134 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSWPCoreTextTypesetter::createLineRefsForLineFragment(TSWPLineFragment *, const TSWPLayoutState *, BOOL, TSWPLayoutFlags) const");
              objc_msgSend(v133, "handleFailureInFunction:file:lineNumber:description:", v134, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 2908, CFSTR("CTFontGetGlyphsForCharacters failed. Using fallback."));
              PositionForLocalCharIndex = TSWPParagraphTypesetter::getPositionForLocalCharIndex(*(TSWPParagraphTypesetter **)(a1 + 232), this, StringRange.location);
            }
          }
          else
          {
            PositionForLocalCharIndex = v276 + v68 + v295[0]->x;
          }
          v135 = v125 - (v131 + v130);
          if ((*((_DWORD *)this + 6) & 0x800002) != 0)
          {
            v136 = -0.0;
            if ((TSWPLineFragment *)(LODWORD(StringRange.location) + LODWORD(StringRange.length)) == charIndex)
              v136 = v52;
            v135 = v135 + v136;
          }
          v137 = v131 + PositionForLocalCharIndex;
          v139 = v135 <= 0.0 && v273 != -1;
          if (((v139 | isKindOfClass) & 1) != 0)
          {
            v140 = v270;
            if (!v120)
              goto LABEL_241;
LABEL_236:
            v179 = (CGColor *)objc_msgSend(v120, "CGColor");
            v180 = v130 + v135;
            v289.var0.x = v137;
            v289.var0.y = 0.0;
            v289.var1 = v180;
            v289.var2 = v179;
            v289.var7 = 0.0;
            v289.var8 = 0;
            v289.var9 = 0;
            memset(&v289.var3, 0, 20);
            CGColorRetain(v179);
            if (*((double *)this + 8) - v137 < v180)
              v180 = *((double *)this + 8) - v137;
            if (v180 > 0.0)
            {
              v181 = (CGColor *)objc_msgSend(v120, "CGColor");
              buffer.var0.x = v137;
              buffer.var0.y = 0.0;
              buffer.var1 = v180;
              buffer.var2 = v181;
              buffer.var7 = 0.0;
              buffer.var8 = 0;
              buffer.var9 = 0;
              memset(&buffer.var3, 0, 20);
              CGColorRetain(v181);
              v182 = buffer.var9;
              addAdornmentLine((uint64_t *)this + 40, &buffer);
              CGColorRelease(buffer.var2);

            }
            *((_BYTE *)v347 + 24) = 0;
            CGColorRelease(v179);
          }
          else
          {
            if (v119)
            {
              v141 = (CGColor *)objc_msgSend((id)-[TSWPLineFragment objectForKeyedSubscript:](v87, "objectForKeyedSubscript:", CFSTR("TSWPUnderlineColor")), "CGColor");
              if (!v141)
                v141 = (CGColor *)-[TSWPLineFragment objectForKeyedSubscript:](v87, "objectForKeyedSubscript:", v264);
              v338((uint64_t)v337, v141);
              v142 = TSWPGetAdornmentLocation(*(void **)(a1 + 96), *(unsigned __int8 *)(a1 + 30), 5);
              if (v142 != 1
                || (v289.var0 = (CGPoint)*MEMORY[0x24BEB3BF0], *(_QWORD *)&v289.var0.x != *MEMORY[0x24BEB3BF0])
                || *(_QWORD *)&v289.var0.y != *(_QWORD *)(MEMORY[0x24BEB3BF0] + 8)
                || (v128 = objc_msgSend(*(id *)(a1 + 64), "smartFieldAtCharIndex:attributeKind:effectiveRange:", *v296[0], 7, &v289)) == 0|| *v296[0] < *(_QWORD *)&v289.var0.x|| *v296[0] - *(_QWORD *)&v289.var0.x >= *(_QWORD *)&v289.var0.y)
              {
                v143 = TSWPLineFragment::baselineShiftFromRunAttributes(v87, v129);
                v144 = 0;
                v145 = -v143;
                v146 = 1;
                do
                {
                  v147 = IsWhitespaceCharacter(*(unsigned __int16 *)(*(_QWORD *)(a1 + 80) + 2 * v296[0][v144]));
                  v148 = v147;
                  v144 = v146;
                  if (GlyphCount > v146)
                    v149 = v147;
                  else
                    v149 = 0;
                  ++v146;
                }
                while ((v149 & 1) != 0);
                v150 = (void *)-[TSWPLineFragment objectForKeyedSubscript:](v87, "objectForKeyedSubscript:", CFSTR("TSWPUnderlineWidthAttribute"));
                if (v150)
                {
                  objc_msgSend(v150, "floatValue");
                  v152 = v151;
                }
                else
                {
                  v152 = 0.0;
                }
                v153 = TSWPUnderlineAdornmentMetricsForFont(font, v266, v119, *(unsigned __int8 *)(a1 + 30), *(void **)(a1 + 96), v142, v145, ascent, descent, leading, v152);
                if (v119 == 2)
                  v156 = 2;
                else
                  v156 = 1;
                v289.var0.x = v137;
                v289.var0.y = v153;
                v289.var1 = v135;
                v289.var2 = v141;
                v289.var3 = v154;
                v289.var4 = v156;
                v289.var5 = v119;
                v289.var6 = v142;
                v289.var7 = v155;
                v289.var8 = v148;
                v289.var9 = 0;
                CGColorRetain(v141);
                v157 = v289.var9;
                v158 = addAdornmentLine((uint64_t *)this + 34, &v289);
                v159 = v284;
                if (v142 != *(_DWORD *)&chars[2])
                  v159 = 0;
                if (v159)
                  *(_QWORD *)&v300 = *(_QWORD *)(v158 + 56);
                CGColorRelease(v289.var2);

              }
            }
            v140 = v270;
            if (v273)
            {
              v160 = TSWPLineFragment::baselineShiftFromRunAttributes(v87, v129);
              v161 = (CGColor *)objc_msgSend((id)-[TSWPLineFragment objectForKeyedSubscript:](v87, "objectForKeyedSubscript:", CFSTR("TSWPStrikethroughColor")), "CGColor");
              if (!v161)
                v161 = (CGColor *)-[TSWPLineFragment objectForKeyedSubscript:](v87, "objectForKeyedSubscript:", v264);
              v338((uint64_t)v337, v161);
              v162 = v125;
              v163 = v137;
              v164 = v52;
              TSWPStrikethroughAdornmentMetricsForFont(v266, -v160, ascent, descent, leading);
              v167 = v166;
              v168 = v165;
              if (v273 == 2)
                v169 = v165;
              else
                v169 = 0.0;
              if (v273 == -1)
              {
                v128 = objc_msgSend(*(id *)(a1 + 64), "characterAtIndex:", StringRange.length + StringRange.location - 1);
                v170 = v128;
                if (v128 <= 0xC && ((1 << v128) & 0x1030) != 0)
                {
                  v135 = v350 - v163;
                }
                else
                {
                  v128 = IsParagraphBreakingCharacter(v128);
                  v171 = v128 ^ 1;
                  if (v170 == 8232)
                    v171 = 0;
                  v172 = v130;
                  if ((v171 & 1) == 0)
                  {
                    v173 = GlyphCount;
                    v174 = GlyphCount;
                    do
                    {
                      if (v174 <= 0)
                      {
                        v172 = v130;
                        goto LABEL_229;
                      }
                      v175 = v296[0][--v174];
                      --v173;
                    }
                    while (v175 != StringRange.length + StringRange.location - 1);
                    v172 = v130 - v294[0][v173].width + 7.0;
                  }
LABEL_229:
                  v176 = v135 + v172;
                  if (v350 - v163 >= v176)
                    v135 = v176;
                  else
                    v135 = v350 - v163;
                }
                LODWORD(v273) = 1;
              }
              if (v135 <= 0.0)
              {
                v52 = v164;
                v68 = v257;
                v137 = v163;
                v125 = v162;
                if (!v120)
                  goto LABEL_241;
                goto LABEL_236;
              }
              v177 = v167 - v169;
              v137 = v163;
              v289.var0.x = v163;
              v289.var0.y = v177;
              v289.var1 = v135;
              v289.var2 = v161;
              v289.var3 = v168;
              v289.var6 = 0;
              v289.var4 = v273;
              v289.var5 = 0;
              v289.var7 = 0.0;
              v289.var8 = 0;
              v289.var9 = 0;
              CGColorRetain(v161);
              v178 = v289.var9;
              addAdornmentLine((uint64_t *)this + 37, &v289);
              v125 = v162;
              CGColorRelease(v289.var2);
              v52 = v164;

              v68 = v257;
            }
            if (v120)
              goto LABEL_236;
          }
LABEL_241:
          if (v140 && v125 > 0.0)
            TSWPCoreTextTypesetter::pAddHighlightAdornmentToLineFragment((TSWPCoreTextTypesetter *)v128, this, v125, v137, v140);
          v183 = 0;
          v184 = 0;
          while (2)
          {
            v185 = v30;
            v186 = 0;
            v187 = v296[0][v183];
            v188 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 80) + 2 * v187);
            v189 = 1;
            if (*(unsigned __int16 *)(*(_QWORD *)(a1 + 80) + 2 * v187) > 0x205Eu)
            {
              if (*(unsigned __int16 *)(*(_QWORD *)(a1 + 80) + 2 * v187) <= 0xFEFEu)
              {
                if ((_DWORD)v188 != 8287 && (_DWORD)v188 != 12288)
                {
LABEL_278:
                  v189 = 0;
                  goto LABEL_279;
                }
LABEL_267:
                v195 = v295[0][v183].x;
                v196 = v294[0][v183].width;
                if (*((_BYTE *)&gInvisibles + 40 * v186 + 2))
                {
                  v197 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
                  v198 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSWPCoreTextTypesetter::createLineRefsForLineFragment(TSWPLineFragment *, const TSWPLayoutState *, BOOL, TSWPLayoutFlags) const");
                  objc_msgSend(v197, "handleFailureInFunction:file:lineNumber:description:", v198, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 3240, CFSTR("Shouldn't be handling invisible breaks here."));
                }
                v199 = *((double *)&gInvisibles + 5 * v186 + 1);
                v200 = v195 + (v196 - v199) * 0.5;
                if ((a4 & 1) == 0)
                {
                  if ((v278 & 0x1000) != 0)
                  {
                    if (v200 < -v333)
                      v200 = -v333;
                    v200 = v276 + v200;
                  }
                  else
                  {
                    v201 = *((double *)this + 8) - v333 - v199;
                    if (v201 < v200)
                      v200 = v201;
                  }
                }
                v289.var0.x = v200;
                v289.var0.y = 0.0;
                TSWPAdornments::add((TSWPAdornments *)&attributes, &v289.var0, (const unsigned __int16 *)&gInvisibles + 20 * v186 + 16);
                v202 = 0;
LABEL_280:
                v30 = v185;
LABEL_301:
                if (((v202 | v283 & v189) & v284) == 1)
                {
                  v375.location = v183;
                  v375.length = range;
                  TSWPCoreTextTypesetter::pAddEmphasisMarkGlyph(a1, (TSWPAdornments *)chars, (uint64_t)&v332, run, v375, v188, font, v295[0][v183].x, v295[0][v183].y, v294[0][v183].width, v294[0][v183].height, v298.width, v296[0][v183], v281[0], v297);
                }
                v183 = ++v184;
                if (GlyphCount <= v184)
                {
                  v82 = v269;
                  v227 = (__CFString *)CTFontCopyFamilyName(font);
                  if (-[__CFString isEqualToString:](v227, "isEqualToString:", CFSTR("Zapfino")))
                    *((_DWORD *)this + 6) |= 0x40000u;

                  if (v294[0])
                  {
                    v294[1] = v294[0];
                    operator delete(v294[0]);
                  }
                  if (v295[0])
                  {
                    v295[1] = v295[0];
                    operator delete(v295[0]);
                  }
                  if (v296[0])
                  {
                    v296[1] = v296[0];
                    operator delete(v296[0]);
                  }
                  goto LABEL_337;
                }
                continue;
              }
              if ((_DWORD)v188 != 65532)
              {
                if ((_DWORD)v188 != 65279)
                  goto LABEL_278;
                goto LABEL_252;
              }
              v30 = v185;
              if (objc_msgSend((id)objc_msgSend(*(id *)(a1 + 64), "attachmentAtCharIndex:", v296[0][v183]), "isAnchored"))
              {
                v190 = objc_msgSend(*(id *)(a1 + 64), "charIndexMappedToStorage:", v187);
                v191 = v190;
                v192 = v276 + v295[0][v183].x;
                v193 = (double *)*((_QWORD *)&__p + 1);
                if (*((_QWORD *)&__p + 1) >= v329[0])
                {
                  v203 = (double *)__p;
                  v204 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 4;
                  v205 = v204 + 1;
                  if ((unint64_t)(v204 + 1) >> 60)
                    std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
                  v206 = v329[0] - __p;
                  if ((uint64_t)(v329[0] - __p) >> 3 > v205)
                    v205 = v206 >> 3;
                  if ((unint64_t)v206 >= 0x7FFFFFFFFFFFFFF0)
                    v207 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v207 = v205;
                  if (v207)
                  {
                    v208 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)v329, v207);
                    v193 = (double *)*((_QWORD *)&__p + 1);
                    v203 = (double *)__p;
                  }
                  else
                  {
                    v208 = 0;
                  }
                  v209 = (double *)&v208[16 * v204];
                  *(_QWORD *)v209 = v191;
                  v209[1] = v192;
                  v210 = v209;
                  if (v193 != v203)
                  {
                    do
                    {
                      *((_OWORD *)v210 - 1) = *((_OWORD *)v193 - 1);
                      v210 -= 2;
                      v193 -= 2;
                    }
                    while (v193 != v203);
                    v203 = (double *)__p;
                  }
                  v194 = v209 + 2;
                  *(_QWORD *)&__p = v210;
                  *((_QWORD *)&__p + 1) = v209 + 2;
                  v329[0] = &v208[16 * v207];
                  if (v203)
                    operator delete(v203);
                }
                else
                {
                  **((_QWORD **)&__p + 1) = v190;
                  v193[1] = v192;
                  v194 = v193 + 2;
                }
                v189 = 0;
                *((_QWORD *)&__p + 1) = v194;
              }
              else
              {
                v189 = 0;
              }
LABEL_300:
              v202 = 1;
              goto LABEL_301;
            }
            break;
          }
          if ((v188 - 0x2000) <= 0x2F)
          {
            if (((1 << v188) & 0xF7F) != 0)
              goto LABEL_267;
            if (((1 << v188) & 0x30000000000) == 0)
            {
              if (((1 << v188) & 0x800000000080) != 0)
                goto LABEL_252;
              goto LABEL_258;
            }
LABEL_260:
            if ((v278 & 0x1000) == 0)
            {
              v272 = v295[0][v183].x;
              goto LABEL_278;
            }
            v189 = 0;
            v272 = v295[0][v183].x + v276 + v294[0][v183].width;
LABEL_279:
            v202 = 1;
            goto LABEL_280;
          }
LABEL_258:
          if (v188 <= 0x20)
          {
            if (((1 << v188) & 0x3C30) != 0)
              goto LABEL_260;
            if (v188 == 9)
            {
              v211 = v295[0][v183].x;
              v212 = v211;
              if ((v278 & 0x1000) != 0)
                v212 = v276 + v255 - (v211 + v294[0][v183].width);
              v213 = (id)objc_msgSend((id)objc_msgSend(*(id *)(a3 + 392), "tabAfterPosition:", v212), "leader");
              if (objc_msgSend(v213, "length"))
              {
                v214 = v294[0][v183].width;
                v215 = CFDictionaryCreateMutableCopy(allocator, 0, (CFDictionaryRef)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 64), "paragraphStyleAtCharIndex:effectiveRange:", v187, 0), "getTypesetterAttributes:scalePercent:isRightToLeft:", objc_msgSend(*(id *)(a1 + 64), "characterStyleAtCharIndex:effectiveRange:", v187, 0), objc_msgSend(*(id *)(a3 + 104), "scaleTextPercent"), objc_msgSend(*(id *)(a1 + 64), "isWritingDirectionRightToLeftForParagraphAtCharIndex:", v187)));
                if (v215)
                {
                  if (v214 > 0.0)
                  {
                    if (*(_BYTE *)(a3 + 333)
                      && objc_msgSend(v213, "isEqualToString:", +[TSWPTab kTabStopLeaderStringArrow](TSWPTab, "kTabStopLeaderStringArrow")))
                    {
                      v213 = +[TSWPTab kTabStopLeaderStringArrowRTL](TSWPTab, "kTabStopLeaderStringArrowRTL");
                    }
                    v216 = 0;
                    v217 = v276 + v211;
                    v218 = 0.0;
                    for (i = 1; ; ++i)
                    {
                      v220 = CFAttributedStringCreate(allocator, (CFStringRef)objc_msgSend(&stru_24D82FEB0, "stringByPaddingToLength:withString:startingAtIndex:", i, v213, 0), v215);
                      v221 = CTLineCreateWithAttributedString(v220);
                      v222 = CTLineGetTypographicBounds(v221, 0, 0, 0);
                      CFRelease(v220);
                      if (v222 > v214)
                        break;
                      if (v216)
                        CFRelease(v216);
                      v216 = v221;
                      v218 = v222;
                    }
                    if (v221)
                      CFRelease(v221);
                    if (v216)
                    {
                      *(_QWORD *)&v289.var0.x = v216;
                      v289.var0.y = v214 + v217 + v333 - v218;
                      v289.var1 = 0.0;
                      *(_OWORD *)&v289.var2 = *MEMORY[0x24BEB3BF0];
                      v289.var4 = 0;
                      CFRetain(v216);
                      v225 = *((_QWORD *)this + 25);
                      if (v225 >= *((_QWORD *)this + 26))
                      {
                        v226 = std::vector<TSWPLineRef>::__push_back_slow_path<TSWPLineRef const&>(v256, (uint64_t)&v289);
                      }
                      else
                      {
                        std::vector<TSWPLineRef>::__construct_one_at_end[abi:ne180100]<TSWPLineRef const&>((uint64_t)v256, (uint64_t)&v289);
                        v226 = v225 + 48;
                      }
                      *((_QWORD *)this + 25) = v226;
                      CFRelease(v216);
                      if (*(_QWORD *)&v289.var0.x)
                        CFRelease(*(CFTypeRef *)&v289.var0.x);
                    }
                  }
                  CFRelease(v215);
                }
                else
                {
                  v223 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
                  v224 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSWPCoreTextTypesetter::createLineRefsForLineFragment(TSWPLineFragment *, const TSWPLayoutState *, BOOL, TSWPLayoutFlags) const");
                  objc_msgSend(v223, "handleFailureInFunction:file:lineNumber:description:", v224, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 3135, CFSTR("invalid nil value for '%s'"), "tabLeaderAttrs");
                }
              }
              v189 = 0;
              v186 = 1;
              goto LABEL_267;
            }
            if (v188 == 32)
              goto LABEL_267;
          }
          if ((_DWORD)v188 != 160)
            goto LABEL_278;
LABEL_252:
          v189 = 0;
          if (!objc_msgSend(*(id *)(a1 + 64), "footnoteReferenceAtCharIndex:", v296[0][v183]))
          {
            v186 = 8;
            goto LABEL_267;
          }
          v30 = v185;
          goto LABEL_300;
        }
LABEL_337:
        if (*((_QWORD *)&v306 + 1) != (_QWORD)v306)
        {
          v229 = *((_QWORD *)this + 56);
          if (v229 >= *((_QWORD *)this + 57))
          {
            v230 = std::vector<TSWPAdornments>::__push_back_slow_path<TSWPAdornments const&>((uint64_t *)this + 55, (const TSWPAdornments *)chars);
            v82 = v269;
            v231 = this;
          }
          else
          {
            TSWPAdornments::TSWPAdornments(*((TSWPAdornments **)this + 56), (const TSWPAdornments *)chars);
            v230 = v229 + 200;
            v231 = this;
            *((_QWORD *)this + 56) = v229 + 200;
            v82 = v269;
          }
          *((_QWORD *)v231 + 56) = v230;
        }
        CGColorRelease(*((CGColorRef *)&v300 + 1));
        if ((_QWORD)v301)
          CFRelease((CFTypeRef)v301);
        if (*((_QWORD *)&v307 + 1))
        {
          *(_QWORD *)&v308 = *((_QWORD *)&v307 + 1);
          operator delete(*((void **)&v307 + 1));
        }
        if ((_QWORD)v306)
        {
          *((_QWORD *)&v306 + 1) = v306;
          operator delete((void *)v306);
        }
        if (*((_QWORD *)&v304 + 1))
        {
          *(_QWORD *)&v305 = *((_QWORD *)&v304 + 1);
          operator delete(*((void **)&v304 + 1));
        }
        if ((_QWORD)v303)
        {
          *((_QWORD *)&v303 + 1) = v303;
          operator delete((void *)v303);
        }
        if (*((_QWORD *)&v301 + 1))
        {
          *(_QWORD *)&v302 = *((_QWORD *)&v301 + 1);
          operator delete(*((void **)&v301 + 1));
        }
        ++v274;
        ++v275;
      }
      while (v275 != v268);
      v83 = -[__CFArray countByEnumeratingWithState:objects:count:](v82, "countByEnumeratingWithState:objects:count:", &v314, v352, 16);
      if (!v83)
      {
LABEL_361:
        if ((*((_BYTE *)this + 25) & 8) != 0)
          TSWPCoreTextTypesetter::pAddInvisibleBreakToLineFragment((id *)a1, (const TSWPLayoutState *)a3, this, v252, v272, a4);
        if ((void *)v361 != v360[1])
        {
          v232 = *((_QWORD *)this + 56);
          if (v232 >= *((_QWORD *)this + 57))
          {
            v233 = std::vector<TSWPAdornments>::__push_back_slow_path<TSWPAdornments const&>((uint64_t *)this + 55, (const TSWPAdornments *)&attributes);
            v234 = this;
          }
          else
          {
            TSWPAdornments::TSWPAdornments(*((TSWPAdornments **)this + 56), (const TSWPAdornments *)&attributes);
            v233 = v232 + 200;
            v234 = this;
            *((_QWORD *)this + 56) = v232 + 200;
          }
          *((_QWORD *)v234 + 56) = v233;
        }
        v235 = this;
        if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
        {
          v236 = *((_QWORD *)this + 56);
          if (v236 >= *((_QWORD *)this + 57))
          {
            v237 = std::vector<TSWPAdornments>::__push_back_slow_path<TSWPAdornments const&>((uint64_t *)this + 55, (const TSWPAdornments *)v318);
            v235 = this;
          }
          else
          {
            TSWPAdornments::TSWPAdornments(*((TSWPAdornments **)this + 56), (const TSWPAdornments *)v318);
            v237 = v236 + 200;
            v235 = this;
            *((_QWORD *)this + 56) = v236 + 200;
          }
          *((_QWORD *)v235 + 56) = v237;
        }
        if (TSWPLineFragment::isHyphenated(v235))
        {
          OffsetForStringIndex = CTLineGetOffsetForStringIndex(v30, (CFIndex)charIndex, 0);
          v239 = v333;
          v240 = TSWPLineFragment::baselineAdjustAtCharIndex(charIndex, *(void **)(a1 + 16), *(TSWPStorage **)(a3 + 104), 0, objc_msgSend(*(id *)(a3 + 104), "scaleTextPercent"));
          *(_QWORD *)chars = line;
          *(double *)&v300 = OffsetForStringIndex + v239;
          *((double *)&v300 + 1) = v240;
          v301 = *MEMORY[0x24BEB3BF0];
          LODWORD(v302) = 2;
          if (line)
            CFRetain(line);
          v241 = *((_QWORD *)this + 25);
          if (v241 >= *((_QWORD *)this + 26))
          {
            v242 = std::vector<TSWPLineRef>::__push_back_slow_path<TSWPLineRef const&>(v256, (uint64_t)chars);
          }
          else
          {
            std::vector<TSWPLineRef>::__construct_one_at_end[abi:ne180100]<TSWPLineRef const&>((uint64_t)v256, (uint64_t)chars);
            v242 = v241 + 48;
          }
          *((_QWORD *)this + 25) = v242;
          if (line)
            CFRelease(line);
          if (*(_QWORD *)chars)
            CFRelease(*(CFTypeRef *)chars);
        }
        TSWPCoreTextTypesetter::pApplyChangeTrackingToLineFragment((id *)a1, this);
        if ((*((_BYTE *)this + 26) & 0x80) != 0 && truncationToken)
        {
          v243 = CTLineGetOffsetForStringIndex(v30, (CFIndex)charIndex, 0);
          v244 = CTLineGetTrailingWhitespaceWidth(v30);
          v245 = v333;
          v246 = TSWPLineFragment::baselineAdjustAtCharIndex(charIndex, *(void **)(a1 + 16), *(TSWPStorage **)(a3 + 104), 0, objc_msgSend(*(id *)(a3 + 104), "scaleTextPercent"));
          *(_QWORD *)chars = truncationToken;
          *(double *)&v300 = v243 - v244 + v245;
          *((double *)&v300 + 1) = v246;
          v301 = *MEMORY[0x24BEB3BF0];
          LODWORD(v302) = 4;
          CFRetain(truncationToken);
          v247 = *((_QWORD *)this + 25);
          if (v247 >= *((_QWORD *)this + 26))
          {
            v249 = std::vector<TSWPLineRef>::__push_back_slow_path<TSWPLineRef const&>(v256, (uint64_t)chars);
            v248 = truncationToken;
          }
          else
          {
            std::vector<TSWPLineRef>::__construct_one_at_end[abi:ne180100]<TSWPLineRef const&>((uint64_t)v256, (uint64_t)chars);
            v248 = truncationToken;
            v249 = v247 + 48;
          }
          *((_QWORD *)this + 25) = v249;
          CFRelease(v248);
          if (*(_QWORD *)chars)
            CFRelease(*(CFTypeRef *)chars);
        }
        CFRelease(v30);
        CGColorRelease(v320);
        if (v321)
          CFRelease(v321);
        if ((_QWORD)__p)
        {
          *((_QWORD *)&__p + 1) = __p;
          operator delete((void *)__p);
        }
        if (*((_QWORD *)&v326 + 1))
        {
          *(_QWORD *)&v327 = *((_QWORD *)&v326 + 1);
          operator delete(*((void **)&v326 + 1));
        }
        if ((_QWORD)v325)
        {
          *((_QWORD *)&v325 + 1) = v325;
          operator delete((void *)v325);
        }
        if (*((_QWORD *)&v323 + 1))
        {
          *(_QWORD *)&v324 = *((_QWORD *)&v323 + 1);
          operator delete(*((void **)&v323 + 1));
        }
        if ((_QWORD)v322)
        {
          *((_QWORD *)&v322 + 1) = v322;
          operator delete((void *)v322);
        }
        CGColorRelease(v354);
        if (cf)
          CFRelease(cf);
        if (v362[0])
        {
          v362[1] = v362[0];
          operator delete(v362[0]);
        }
        if (v360[1])
        {
          *(void **)&v361 = v360[1];
          operator delete(v360[1]);
        }
        if (v359[0])
        {
          v359[1] = v359[0];
          operator delete(v359[0]);
        }
        if (v357[1])
        {
          *(void **)&v358 = v357[1];
          operator delete(v357[1]);
        }
        if (v356[0])
        {
          v356[1] = v356[0];
          operator delete(v356[0]);
        }
        if (v332)
          CFRelease(v332);
        break;
      }
    }
  }
LABEL_417:
  v250 = *((_DWORD *)this + 6);
  if (*((_BYTE *)v347 + 24))
  {
    *((_DWORD *)this + 6) = v250 | 0x8000000;
    v251 = (CGColor *)v343[3];
  }
  else
  {
    v251 = 0;
    *((_DWORD *)this + 6) = v250 & 0xF7FFFFFF;
  }
  TSWPLineFragment::setSingleColor(this, v251);
  TSWPLineFragment::clearTypesetterState(this);
  _Block_object_dispose(&v342, 8);
  _Block_object_dispose(&v346, 8);
}

void sub_2178F2224(_Unwind_Exception *a1)
{
  TSWPLineRef::~TSWPLineRef((const void **)&STACK[0x4E0]);
  _Block_object_dispose(&STACK[0x540], 8);
  _Block_object_dispose(&STACK[0x560], 8);
  _Unwind_Resume(a1);
}

uint64_t TSWPParagraphEnumerator::paragraphStyle(TSWPParagraphEnumerator *this, _NSRange *a2)
{
  NSUInteger v4;
  id var1;

  if (a2)
  {
    a2->location = TSWPParagraphEnumerator::paragraphTextRange(this);
    a2->length = v4;
  }
  if (this->var2 >= this->var3)
    return 0;
  var1 = this->var1;
  if (var1)
    return objc_msgSend(var1, "paragraphStyleAtParIndex:effectiveRange:");
  else
    return *(_QWORD *)(*(_QWORD *)(objc_msgSend(this->var0, "attributeArrayForKind:", 0) + 32) + 16 * this->var2 + 8);
}

NSUInteger TSWPParagraphEnumerator::paragraphTextRange(TSWPParagraphEnumerator *this)
{
  NSUInteger result;
  NSUInteger v3;
  NSUInteger v4;
  NSUInteger v5;
  NSUInteger v6;
  NSRange v7;
  NSRange v8;

  result = TSWPAttributeArray::rangeForAttributeIndex((TSWPAttributeArray *)objc_msgSend(this->var0, "attributeArrayForKind:", 0), this->var4);
  v3 = result;
  v5 = v4;
  if (this->var5 != this->var4)
  {
    v8.location = TSWPAttributeArray::rangeForAttributeIndex((TSWPAttributeArray *)objc_msgSend(this->var0, "attributeArrayForKind:", 0), this->var5);
    v8.length = v6;
    v7.location = v3;
    v7.length = v5;
    return NSUnionRange(v7, v8).location;
  }
  return result;
}

uint64_t TSWPLineFragment::isHyphenated(TSWPLineFragment *this)
{
  return (*((unsigned __int8 *)this + 24) >> 1) & 1;
}

void TSWPAdornments::add(TSWPAdornments *this, const CGPoint *a2, const unsigned __int16 *a3)
{
  char *v6;
  unint64_t v7;
  unint64_t v8;
  CGPoint *v9;
  CGPoint *v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  CGPoint *v18;
  char *v19;
  CGPoint *v20;
  CGPoint *v21;
  unint64_t v22;
  char *v23;
  _WORD *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int16 v34;

  v8 = *((_QWORD *)this + 15);
  v6 = (char *)this + 120;
  v7 = v8;
  v9 = (CGPoint *)*((_QWORD *)v6 - 1);
  if ((unint64_t)v9 >= v8)
  {
    v11 = (void **)(v6 - 16);
    v12 = *((_QWORD *)v6 - 2);
    v13 = ((uint64_t)v9 - v12) >> 4;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 60)
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    v15 = v7 - v12;
    if (v15 >> 3 > v14)
      v14 = v15 >> 3;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
      v16 = 0xFFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)v6, v16);
    else
      v17 = 0;
    v18 = (CGPoint *)&v17[16 * v13];
    v19 = &v17[16 * v16];
    *v18 = *a2;
    v10 = v18 + 1;
    v21 = (CGPoint *)*((_QWORD *)this + 13);
    v20 = (CGPoint *)*((_QWORD *)this + 14);
    if (v20 != v21)
    {
      do
      {
        v18[-1] = v20[-1];
        --v18;
        --v20;
      }
      while (v20 != v21);
      v20 = (CGPoint *)*v11;
    }
    *((_QWORD *)this + 13) = v18;
    *((_QWORD *)this + 14) = v10;
    *((_QWORD *)this + 15) = v19;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *v9 = *a2;
    v10 = v9 + 1;
  }
  v22 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 14) = v10;
  v23 = (char *)*((_QWORD *)this + 8);
  if ((unint64_t)v23 >= v22)
  {
    v25 = (char *)*((_QWORD *)this + 7);
    v26 = v23 - v25;
    if (v23 - v25 <= -3)
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    v27 = v26 >> 1;
    v28 = v22 - (_QWORD)v25;
    if (v28 <= (v26 >> 1) + 1)
      v29 = v27 + 1;
    else
      v29 = v28;
    if (v28 >= 0x7FFFFFFFFFFFFFFELL)
      v30 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v30 = v29;
    if (v30)
    {
      v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)this + 72, v30);
      v25 = (char *)*((_QWORD *)this + 7);
      v23 = (char *)*((_QWORD *)this + 8);
    }
    else
    {
      v31 = 0;
    }
    v32 = &v31[2 * v27];
    v33 = &v31[2 * v30];
    *(_WORD *)v32 = *a3;
    v24 = v32 + 2;
    while (v23 != v25)
    {
      v34 = *((_WORD *)v23 - 1);
      v23 -= 2;
      *((_WORD *)v32 - 1) = v34;
      v32 -= 2;
    }
    *((_QWORD *)this + 7) = v32;
    *((_QWORD *)this + 8) = v24;
    *((_QWORD *)this + 9) = v33;
    if (v25)
      operator delete(v25);
  }
  else
  {
    *(_WORD *)v23 = *a3;
    v24 = v23 + 2;
  }
  *((_QWORD *)this + 8) = v24;
}

_QWORD *std::vector<long>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_2178F2BAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZNK22TSWPCoreTextTypesetter29createLineRefsForLineFragmentEP16TSWPLineFragmentPK15TSWPLayoutStateb15TSWPLayoutFlags_block_invoke(uint64_t result, CGColorRef color2)
{
  uint64_t v2;
  uint64_t v4;

  if (color2)
  {
    v2 = result;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24))
    {
      v4 = *(_QWORD *)(*(_QWORD *)(result + 40) + 8);
      result = *(_QWORD *)(v4 + 24);
      if (!result)
      {
LABEL_6:
        *(_QWORD *)(v4 + 24) = color2;
        return result;
      }
      result = CGColorEqualToColor((CGColorRef)result, color2);
      if ((_DWORD)result)
      {
        v4 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8);
        goto LABEL_6;
      }
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 24) = 0;
    }
  }
  return result;
}

_QWORD *std::vector<CGPoint>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<CGPoint>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_2178F2C8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<CGSize>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<CGPoint>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_2178F2D00(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TSWPCoreTextTypesetter::pFindFontRunIndexForLocalCharIndex(TSWPCoreTextTypesetter *this, unint64_t a2)
{
  unsigned int v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;

  v4 = *((_DWORD *)this + 27);
  if (!v4)
  {
    v5 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v6 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "uint TSWPCoreTextTypesetter::pFindFontRunIndexForLocalCharIndex(TSWPCharIndex) const");
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 3745, CFSTR("Bad runCount"));
    v4 = *((_DWORD *)this + 27);
  }
  v7 = v4;
  if (v4 > 1)
  {
    v8 = (unint64_t *)(*((_QWORD *)this + 15) + 104);
    v9 = 1;
    while (1)
    {
      v10 = *v8;
      v8 += 13;
      if (v10 > a2)
        break;
      if (v7 == ++v9)
        return (v7 - 1);
    }
    LODWORD(v7) = v9;
  }
  return (v7 - 1);
}

void std::vector<TSWPLineRef>::assign(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  CFTypeRef *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFTypeRef v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CFTypeRef v21;
  CFTypeRef *v22;

  v6 = a1 + 16;
  v7 = *(CFTypeRef **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a2)
  {
    std::vector<TSWPLineRef>::__vdeallocate((CFTypeRef **)a1);
    if (a2 > 0x555555555555555)
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    v8 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4);
    if (v8 <= a2)
      v8 = a2;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
      v9 = 0x555555555555555;
    else
      v9 = v8;
    std::vector<TSWPLineRef>::__vallocate[abi:ne180100]((_QWORD *)a1, v9);
    v10 = *(_QWORD *)(a1 + 8);
    v11 = 3 * a2;
    v12 = v10 + 48 * a2;
    v13 = 16 * v11;
    do
    {
      v14 = *(CFTypeRef *)a3;
      *(_QWORD *)v10 = *(_QWORD *)a3;
      *(_OWORD *)(v10 + 8) = *(_OWORD *)(a3 + 8);
      *(_OWORD *)(v10 + 24) = *(_OWORD *)(a3 + 24);
      *(_DWORD *)(v10 + 40) = *(_DWORD *)(a3 + 40);
      if (v14)
        CFRetain(v14);
      v10 += 48;
      v13 -= 48;
    }
    while (v13);
    goto LABEL_12;
  }
  v15 = (*(_QWORD *)(a1 + 8) - (_QWORD)v7) / 48;
  if (v15 >= a2)
    v16 = a2;
  else
    v16 = (*(_QWORD *)(a1 + 8) - (_QWORD)v7) / 48;
  if (v16)
  {
    v17 = (_OWORD *)(a3 + 24);
    do
    {
      if (*(_QWORD *)a3)
        CFRetain(*(CFTypeRef *)a3);
      if (*v7)
        CFRelease(*v7);
      *v7 = *(CFTypeRef *)a3;
      *((_DWORD *)v7 + 10) = *(_DWORD *)(a3 + 40);
      *(_OWORD *)(v7 + 1) = *(_OWORD *)(a3 + 8);
      *(_OWORD *)(v7 + 3) = *v17;
      v7 += 6;
      --v16;
    }
    while (v16);
  }
  if (a2 <= v15)
  {
    v22 = *(CFTypeRef **)(a1 + 8);
    v12 = *(_QWORD *)a1 + 48 * a2;
    while (v22 != (CFTypeRef *)v12)
    {
      v22 -= 6;
      std::allocator<TSWPLineRef>::destroy[abi:ne180100](v6, v22);
    }
LABEL_12:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  v18 = *(_QWORD *)(a1 + 8);
  v19 = v18 + 48 * (a2 - v15);
  v20 = -48 * v15 + 48 * a2;
  do
  {
    v21 = *(CFTypeRef *)a3;
    *(_QWORD *)v18 = *(_QWORD *)a3;
    *(_OWORD *)(v18 + 8) = *(_OWORD *)(a3 + 8);
    *(_OWORD *)(v18 + 24) = *(_OWORD *)(a3 + 24);
    *(_DWORD *)(v18 + 40) = *(_DWORD *)(a3 + 40);
    if (v21)
      CFRetain(v21);
    v18 += 48;
    v20 -= 48;
  }
  while (v20);
  *(_QWORD *)(a1 + 8) = v19;
}

void sub_2178F3008(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<TSWPLineRef>::__vdeallocate(CFTypeRef **a1)
{
  CFTypeRef *v1;
  CFTypeRef *v3;
  CFTypeRef *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 6;
        std::allocator<TSWPLineRef>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void TSWPCoreTextTypesetter::pApplyChangeTrackingToLineFragment(id *this, TSWPLineFragment *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _BOOL4 v11;
  _BOOL4 v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[7];
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _OWORD v21[2];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (objc_msgSend(this[2], "hasTrackedChanges"))
  {
    *(_DWORD *)((char *)v21 + 15) = 65793;
    v21[0] = xmmword_217C2B2E4;
    v20 = 0;
    v18 = 0u;
    v19 = 0u;
    memset(&v17[3], 0, 64);
    v5 = *(_QWORD *)a2;
    v4 = *((_QWORD *)a2 + 1);
    if (v4 <= 1)
      v4 = 1;
    v6 = v4 + v5;
    memset(v17, 0, 48);
    do
    {
      objc_msgSend(this[2], "attributesAtCharIndex:attributesOfInterest:attributesTable:effectiveRange:", v5, v21, v17, &v15);
      if (!v16 && v5 != *((_QWORD *)a2 + 1) + *(_QWORD *)a2)
      {
        v7 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
        v8 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSWPCoreTextTypesetter::pApplyChangeTrackingToLineFragment(TSWPLineFragment *) const");
        objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 4574, CFSTR("Empty effectiveRange"));
      }
      v10 = *((_QWORD *)&v18 + 1);
      v9 = v19;
      if (*((_QWORD *)&v18 + 1) && !objc_msgSend(*((id *)&v18 + 1), "showsMarkup"))
        v10 = 0;
      if (v9)
      {
        if (!objc_msgSend((id)v9, "isHidden") || (objc_msgSend((id)v9, "showsMarkup") & 1) != 0)
        {
          v11 = v10 != 0;
          v12 = 1;
LABEL_18:
          *((_DWORD *)a2 + 6) |= 0x80000u;
          if (v11 && v12)
          {
            if (!objc_msgSend((id)objc_msgSend((id)v10, "changeAdornmentsColor"), "isEqual:", objc_msgSend((id)v9, "changeAdornmentsColor")))
            {
              v13 = 0;
              goto LABEL_26;
            }
LABEL_23:
            v14 = (void *)v10;
          }
          else
          {
            if (v11)
              goto LABEL_23;
            v14 = (void *)v9;
          }
          v13 = (void *)objc_msgSend(v14, "changeAdornmentsColor");
LABEL_26:
          if (!TSWPLineFragment::markupColorIsDefault(a2)
            && !objc_msgSend(v13, "isEqual:", TSWPLineFragment::changeAdornmentMarkupColor(a2)))
          {
            v13 = 0;
          }
          TSWPLineFragment::setChangeAdornmentMarkupColor(a2, (TSUColor *)v13);
          if (v12 && (objc_msgSend((id)v9, "showsMarkup") & 1) == 0)
            TSWPCoreTextTypesetter::pAddHiddenDeletionForLineFragment(this, a2, (TSUColor *)objc_msgSend((id)v9, "changeAdornmentsColor"), v16 + v15);
          goto LABEL_32;
        }
        if (!objc_msgSend((id)v9, "showsHiddenDeletionMarkup"))
          v9 = 0;
      }
      v11 = v10 != 0;
      v12 = v9 != 0;
      if (v10 | v9)
        goto LABEL_18;
LABEL_32:
      if (v16)
        v5 = v16 + v15;
      else
        ++v5;
    }
    while (v5 < v6);
  }
}

double TSWPCoreTextTypesetter::pCalculateTrailingWhiteSpace(TSWPCoreTextTypesetter *this, double result, int a3, char a4, uint64_t a5, const CGPoint *a6, const CGSize *a7, uint64_t *a8)
{
  double v8;
  uint64_t v9;
  double *v10;
  double *v11;
  double v12;

  if ((a4 & 1) == 0 && a6 && !a3 && a7 && a8 && result > 0.0 && a5 && a5 - 1 >= 0)
  {
    v8 = a6[a5 - 1].x + a7[a5 - 1].width;
    v9 = 16 * a5 - 16;
    v10 = (double *)((char *)&a7->width + v9);
    v11 = (double *)((char *)&a6->x + v9);
    do
    {
      v12 = v8 - (*v11 + *v10);
      if (v12 >= result)
        break;
      if (*(_WORD *)(*((_QWORD *)this + 10) + 2 * a8[a5 - 1]) == 9)
      {
        if (v12 >= 0.0)
          return v8 - (*v11 + *v10);
        return result;
      }
      --a5;
      v10 -= 2;
      v11 -= 2;
    }
    while (a5 >= 1);
  }
  return result;
}

double TSWPLineFragment::getTypesetterPos(TSWPLineFragment *this, double *a2, double *a3)
{
  double result;

  *a2 = *((double *)this + 50);
  result = *((double *)this + 51);
  *a3 = result;
  return result;
}

BOOL TSWPLineFragment::getOikomiSquish(TSWPLineFragment *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 49);
  return v1 && *(_BYTE *)(v1 + 28) != 0;
}

TSWPLineFragment *TSWPLineFragment::clearTypesetterState(TSWPLineFragment *this)
{
  TSWPLineFragment *v1;
  uint64_t v2;
  const void *v3;

  v1 = this;
  v2 = *((_QWORD *)this + 49);
  if (v2)
  {
    v3 = *(const void **)(v2 + 16);
    if (v3)
      CFRelease(v3);
    this = (TSWPLineFragment *)MEMORY[0x219A153B8](v2, 0x1060C4051B6AA0BLL);
  }
  *((_QWORD *)v1 + 49) = 0;
  return this;
}

CGColor *TSWPLineFragment::setSingleColor(TSWPLineFragment *this, CGColor *a2)
{
  CGColor *result;

  result = (CGColor *)*((_QWORD *)this + 67);
  if (result != a2)
  {
    CGColorRelease(result);
    result = CGColorRetain(a2);
    *((_QWORD *)this + 67) = result;
  }
  return result;
}

uint64_t std::vector<TSWPAdornments>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<TSWPAdornments>,std::reverse_iterator<TSWPAdornments*>,std::reverse_iterator<TSWPAdornments*>,std::reverse_iterator<TSWPAdornments*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<TSWPAdornments>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 200;
    TSWPAdornments::~TSWPAdornments((CGColorRef *)(i - 200));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

double TSWPLineFragment::wpOffsetForCharIndex(TSWPLineFragment *this, unint64_t a2, BOOL a3, char a4, double *a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double MaxX;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  unint64_t v24;
  double v25;
  double v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  CFIndex v31;
  double v32;
  double v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  CFIndex v38;
  CGFloat OffsetForStringIndex;
  double v40;
  double v41;
  double v42;
  unsigned int v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v51;
  CGFloat secondaryOffset;

  v9 = *(_QWORD *)this;
  v10 = *((_QWORD *)this + 1);
  if (a5)
    *a5 = 0.0;
  if (*((_QWORD *)this + 54))
  {
    v11 = *((_QWORD *)this + 6);
    v12 = *((_QWORD *)this + 7);
    v13 = *((_QWORD *)this + 8);
    v14 = *((_QWORD *)this + 9);
    if ((*((_BYTE *)this + 25) & 0x10) != 0)
    {
      if (v9 == a2)
        goto LABEL_6;
    }
    else if (v9 != a2)
    {
LABEL_6:
      MaxX = CGRectGetMaxX(*(CGRect *)&v11);
      goto LABEL_20;
    }
    MaxX = CGRectGetMinX(*(CGRect *)&v11);
LABEL_20:
    v25 = MaxX;
    if (a5)
    {
      *a5 = MaxX;
      if ((a4 & 1) != 0)
        return v25;
      goto LABEL_56;
    }
LABEL_55:
    if ((a4 & 1) != 0)
      return v25;
    goto LABEL_56;
  }
  v16 = *((_QWORD *)this + 24);
  v17 = *((_QWORD *)this + 25) - v16;
  if (!v17)
  {
    v25 = 0.0;
    if ((a4 & 1) != 0)
      return v25;
    goto LABEL_56;
  }
  if (v10 + v9 != a2)
    goto LABEL_23;
  v18 = *((_DWORD *)this + 6);
  if ((v18 & 0x800) != 0)
  {
    v34 = (void *)*((_QWORD *)this + 23);
    if (!v34)
    {
      v35 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
      v36 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "CGFloat TSWPLineFragment::wpOffsetForCharIndex(TSWPCharIndex, BOOL, BOOL, CGFloat *) const");
      objc_msgSend(v35, "handleFailureInFunction:file:lineNumber:description:", v36, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 1089, CFSTR("invalid nil value for '%s'"), "_textSource");
      v34 = (void *)*((_QWORD *)this + 23);
    }
    v37 = objc_msgSend(v34, "charIndexMappedFromStorage:", a2 - 1);
    v38 = v37;
    secondaryOffset = 0.0;
    if ((*((_BYTE *)this + 25) & 0x40) != 0)
      v38 = v37 - *(_QWORD *)this + *((_QWORD *)this + 2);
    OffsetForStringIndex = CTLineGetOffsetForStringIndex(*(CTLineRef *)v16, v38, &secondaryOffset);
    v40 = *(double *)(v16 + 8);
    v41 = OffsetForStringIndex + v40;
    v42 = v40 + secondaryOffset;
    secondaryOffset = v40 + secondaryOffset;
    if (a5)
    {
      *a5 = v42;
    }
    else if ((v18 & 0x1000) == 0)
    {
      v41 = v42;
    }
    v43 = objc_msgSend(*((id *)this + 23), "characterAtIndex:", v38);
    if (v43 <= 0xC && ((1 << v43) & 0x1030) != 0)
    {
      v44 = 0.0;
      if ((v18 & 0x1000) == 0)
        v44 = *((double *)this + 8);
      v26 = v44;
      if (!a5)
        goto LABEL_52;
    }
    else
    {
      v45 = 7.0;
      if ((v18 & 0x1000) != 0)
        v45 = -7.0;
      v26 = v45 + v41;
      if (!a5)
        goto LABEL_52;
      v44 = v45 + *a5;
    }
    *a5 = v44;
LABEL_52:
    v46 = *((double *)this + 6);
    v25 = v26 + v46;
    if (!a5)
      goto LABEL_55;
    v47 = v46 + *a5;
    goto LABEL_54;
  }
  if ((*((_DWORD *)this + 6) & 0x1002) != 2)
  {
LABEL_23:
    v26 = 0.0;
    if (v9 <= a2)
    {
      v27 = (void *)*((_QWORD *)this + 23);
      if (!v27)
      {
        v28 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler", 0.0);
        v29 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "CGFloat TSWPLineFragment::wpOffsetForCharIndex(TSWPCharIndex, BOOL, BOOL, CGFloat *) const");
        objc_msgSend(v28, "handleFailureInFunction:file:lineNumber:description:", v29, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 1144, CFSTR("invalid nil value for '%s'"), "_textSource");
        v27 = (void *)*((_QWORD *)this + 23);
      }
      v30 = objc_msgSend(v27, "charIndexMappedFromStorage:", a2, v26);
      v31 = v30;
      if ((*((_BYTE *)this + 25) & 0x40) != 0)
        v31 = v30 - *(_QWORD *)this + *((_QWORD *)this + 2);
      secondaryOffset = 0.0;
      v32 = CTLineGetOffsetForStringIndex(*(CTLineRef *)v16, v31, &secondaryOffset);
      v33 = *(double *)(v16 + 8);
      if (a5)
        *a5 = v33 + secondaryOffset;
      v26 = v32 + v33;
    }
    goto LABEL_52;
  }
  v19 = 0xAAAAAAAAAAAAAAABLL * (v17 >> 4);
  if (v19 <= 1)
  {
    v20 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v21 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "CGFloat TSWPLineFragment::wpOffsetForCharIndex(TSWPCharIndex, BOOL, BOOL, CGFloat *) const");
    objc_msgSend(v20, "handleFailureInFunction:file:lineNumber:description:", v21, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 1129, CFSTR("Missing hyphen line ref"));
    v16 = *((_QWORD *)this + 24);
    v19 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 25) - v16) >> 4);
  }
  v22 = 0.0;
  if (v19 >= 2)
  {
    v23 = v16 + 48;
    v24 = v19 - 1;
    while ((*(_BYTE *)(v23 + 40) & 2) == 0)
    {
      v23 += 48;
      if (!--v24)
        goto LABEL_60;
    }
    v51 = *(double *)(v23 + 8);
    v22 = v51 + CTLineGetTypographicBounds(*(CTLineRef *)v23, 0, 0, 0);
  }
LABEL_60:
  if (a5)
  {
    *a5 = v22;
    v47 = v22 + *((double *)this + 6);
    v25 = v47;
LABEL_54:
    *a5 = v47;
    goto LABEL_55;
  }
  v25 = v22 + *((double *)this + 6);
  if ((a4 & 1) != 0)
    return v25;
LABEL_56:
  v48 = fmin(v25, CGRectGetMaxX(*(CGRect *)((char *)this + 48)) + -1.0);
  v25 = fmax(v48, CGRectGetMinX(*(CGRect *)((char *)this + 48)));
  if (a5)
  {
    v49 = fmin(*a5, CGRectGetMaxX(*(CGRect *)((char *)this + 48)) + -1.0);
    *a5 = fmax(v49, CGRectGetMinX(*(CGRect *)((char *)this + 48)));
  }
  return v25;
}

_QWORD *TSWPParagraphTypesetter::findTateChuYokoLineRefsForCharIndex(TSWPParagraphTypesetter *this, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  if (*((_QWORD *)this + 13) == *((_QWORD *)this + 14))
    return 0;
  v3 = objc_msgSend(*(id *)this, "charIndexMappedFromStorage:", a2);
  v5 = (_QWORD *)*((_QWORD *)this + 13);
  v4 = (_QWORD *)*((_QWORD *)this + 14);
  if (v4 != v5)
  {
    v6 = 0x6DB6DB6DB6DB6DB7 * (v4 - v5);
    do
    {
      v7 = v6 >> 1;
      v8 = &v5[7 * (v6 >> 1)];
      v10 = *v8;
      v9 = v8 + 7;
      v6 += ~(v6 >> 1);
      if (v10 < v3)
        v5 = v9;
      else
        v6 = v7;
    }
    while (v6);
  }
  if (v5 == v4 || *v5 != v3)
    return 0;
  v11 = v5 + 7;
  do
  {
    v12 = v11;
    if (v11 == v4)
      break;
    v11 += 7;
  }
  while (*v12 == v3);
  return v12 - 7;
}

double TSWPInvisibleFontSize(void)
{
  return 10.0;
}

void sub_2178F41B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TSWPParagraphEnumerator::~TSWPParagraphEnumerator((TSWPParagraphEnumerator *)&a9);
  _Unwind_Resume(a1);
}

double TSWPRunDelegateGetDescentCallback(TSWPTypesetterAttachmentMap *a1)
{
  TSWPAttachment *v2;
  double v3;
  TSWPAttachment *v4;
  double result;
  void *v6;
  double v7;
  double v8;

  v2 = -[TSWPTypesetterAttachmentMap attachment](a1, "attachment");
  v3 = 0.0;
  if (v2)
  {
    v4 = v2;
    if (!-[TSWPAttachment isPartitioned](v2, "isPartitioned"))
    {
      if (-[TSWPAttachment isDrawable](v4, "isDrawable"))
      {
        -[TSWPAttachment descent](v4, "descent");
        return result;
      }
      objc_opt_class();
      v6 = (void *)TSUDynamicCast();
      if (v6)
      {
        objc_msgSend(v6, "baselineOffset");
        v3 = -v7;
      }
      objc_opt_class();
      if (TSUDynamicCast())
      {
        TSWPMeasureTextualAttachment(a1);
        return v8;
      }
    }
  }
  return v3;
}

double TSWPRunDelegateGetAscentCallback(TSWPTypesetterAttachmentMap *a1)
{
  TSWPAttachment *v2;
  uint64_t v3;
  double v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;

  v2 = -[TSWPTypesetterAttachmentMap attachment](a1, "attachment");
  v3 = -[TSWPTypesetterAttachmentMap layout](a1, "layout");
  v4 = 0.0;
  if (v2)
  {
    v5 = (void *)v3;
    if (!-[TSWPAttachment isPartitioned](v2, "isPartitioned"))
    {
      if (-[TSWPAttachment isDrawable](v2, "isDrawable"))
      {
        objc_msgSend(v5, "alignmentFrame");
        v7 = v6;
        -[TSWPAttachment descent](v2, "descent");
        return v7 - v8;
      }
      else
      {
        objc_opt_class();
        v9 = (void *)TSUDynamicCast();
        if (v9)
        {
          v10 = v9;
          objc_msgSend(v9, "size");
          v12 = v11;
          objc_msgSend(v10, "baselineOffset");
          v4 = v12 + v13;
        }
        objc_opt_class();
        if (TSUDynamicCast())
        {
          TSWPMeasureTextualAttachment(a1);
          return v14;
        }
      }
    }
  }
  return v4;
}

double TSWPRunDelegateGetWidthCallback(TSWPTypesetterAttachmentMap *a1)
{
  TSWPAttachment *v2;
  double v3;
  TSWPAttachment *v4;
  void *v5;
  double v6;
  double v7;

  v2 = -[TSWPTypesetterAttachmentMap attachment](a1, "attachment");
  v3 = 0.0;
  if (v2)
  {
    v4 = v2;
    if (-[TSWPAttachment isDrawable](v2, "isDrawable"))
    {
      if (-[TSWPAttachment isPartitioned](v4, "isPartitioned"))
      {
        return 16000.0;
      }
      else if (!-[TSWPAttachment isAnchored](v4, "isAnchored"))
      {
        -[TSDAbstractLayout alignmentFrame](-[TSWPTypesetterAttachmentMap layout](a1, "layout"), "alignmentFrame");
        return v7;
      }
    }
    else
    {
      objc_opt_class();
      v5 = (void *)TSUDynamicCast();
      if (v5)
      {
        objc_msgSend(v5, "size");
        v3 = v6;
      }
      objc_opt_class();
      if (TSUDynamicCast())
        return TSWPMeasureTextualAttachment(a1);
    }
  }
  return v3;
}

double TSDRectWithSize()
{
  return 0.0;
}

double TSDTransformXYScale(double *a1)
{
  return sqrt(a1[1] * a1[1] + *a1 * *a1);
}

void sub_2178F4DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2178F50AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A153B8](v1, 0x10E1C405C8FB0CCLL);
  _Unwind_Resume(a1);
}

void TSWPTopicNumberHints::reset(TSWPTopicNumberHints *this)
{
  __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<const TSWPListStyle *, std::vector<TSWPTopicNumberEntry>>, void *>>> *p_pair1;

  *(int64x2_t *)&this->_charIndex = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  p_pair1 = &this->_numbersForListStyle.__tree_.__pair1_;
  std::__tree<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::__map_value_compare<TSWPListStyle const*,std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::less<TSWPListStyle const*>,true>,std::allocator<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>>>::destroy((uint64_t)this, (_QWORD *)this->_numbersForListStyle.__tree_.__pair1_.__value_.__left_);
  this->_numbersForListStyle.__tree_.__begin_node_ = p_pair1;
  this->_numbersForListStyle.__tree_.__pair3_.__value_ = 0;
  p_pair1->__value_.__left_ = 0;
}

void TSWPLayoutChore::protectedSetupLayoutState(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  void *v8;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  TSWPParagraphEnumerator v39;
  id v40[3];
  TSWPParagraphEnumerator v41[11];

  v8 = a2;
  *(_QWORD *)(a1 + 2056) = a2;
  v10 = a5;
  TSWPParagraphEnumerator::TSWPParagraphEnumerator(v41);
  bzero(v40, 0x2B0uLL);
  TSWPLayoutState::operator=((id *)(a1 + 80), v40);
  TSWPLayoutState::setPreviousPartHint((_QWORD *)(a1 + 80), a5);

  *(_QWORD *)(a1 + 80) = a4;
  v11 = (void *)objc_msgSend(v8, "columns");
  if (objc_msgSend(v11, "count"))
  {
    *(_QWORD *)(a1 + 184) = objc_msgSend(v11, "objectAtIndexedSubscript:", a3);
    v12 = *(void **)(a1 + 8);
    v13 = *(_QWORD *)(a1 + 80);
    v14 = objc_msgSend(*(id *)(a1 + 24), "styleProvider");
    if (v12)
      objc_msgSend(v12, "paragraphEnumeratorAtCharIndex:styleProvider:", v13, v14);
    else
      memset(&v39, 0, sizeof(v39));
    v15 = *(_OWORD *)&v39.var2;
    *(_OWORD *)(a1 + 104) = *(_OWORD *)&v39.var0;
    *(_OWORD *)(a1 + 120) = v15;
    *(_OWORD *)(a1 + 136) = *(_OWORD *)&v39.var4;
    *(_BYTE *)(a1 + 152) = v39.var6;
    TSWPParagraphEnumerator::~TSWPParagraphEnumerator(&v39);
  }
  *(_QWORD *)(a1 + 88) = a4;
  if (a3)
  {
    if (objc_msgSend(v11, "count"))
    {
      v16 = objc_msgSend((id)objc_msgSend(v11, "objectAtIndexedSubscript:", a3 - 1), "anchoredRange");
LABEL_11:
      *(_QWORD *)(a1 + 88) = v16 + v17;
    }
  }
  else
  {
    v18 = (void *)objc_msgSend(v8, "previousTargetLastColumn");
    if (v18)
    {
      v16 = objc_msgSend(v18, "anchoredRange");
      goto LABEL_11;
    }
  }
  *(_QWORD *)(a1 + 96) = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 680) = objc_msgSend(v8, "footnoteHeightMeasurer");
  *(_QWORD *)(a1 + 688) = objc_msgSend(v8, "footnoteMarkProvider");
  TSWPLayoutChore::pSetupStateForParagraphIndex((TSWPLayoutChore *)a1, 0);
  TSWPLayoutChore::pSetupStateForColumnMetrics((id *)a1);
  v19 = *(void **)(a1 + 184);
  if (v19)
  {
    v20 = objc_msgSend(v19, "columnIndex");
    *(_QWORD *)(a1 + 240) = v20;
    if (v20 != a3)
    {
      v21 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
      v22 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSWPLayoutChore::protectedSetupLayoutState(TSDLayout<TSWPLayoutTarget> *, NSUInteger, TSWPCharIndex, id<TSDHint>, uint)");
      objc_msgSend(v21, "handleFailureInFunction:file:lineNumber:description:", v22, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 706, CFSTR("Column index mismatch"));
    }
  }
  *(_QWORD *)(a1 + 712) = objc_msgSend(*(id *)(a1 + 16), "textWrapper");
  v23 = (void *)objc_msgSend(*(id *)(a1 + 16), "lineHintsForTarget:", v8);
  *(_QWORD *)(a1 + 720) = v23;
  if (v23)
  {
    if ((objc_msgSend(v23, "valid") & 1) == 0)
    {
      v24 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
      v25 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSWPLayoutChore::protectedSetupLayoutState(TSDLayout<TSWPLayoutTarget> *, NSUInteger, TSWPCharIndex, id<TSDHint>, uint)");
      objc_msgSend(v24, "handleFailureInFunction:file:lineNumber:description:", v25, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 714, CFSTR("lintHints %p invalid:\n%@"), *(_QWORD *)(a1 + 720), objc_msgSend(*(id *)(a1 + 720), "descriptionWithStorage:", *(_QWORD *)(a1 + 8)));
    }
    if ((objc_msgSend(*(id *)(a1 + 720), "valid") & 1) == 0)
      *(_QWORD *)(a1 + 720) = 0;
  }
  objc_opt_class();
  v26 = TSUDynamicCast();
  if (v26)
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
      v26 = objc_msgSend(*(id *)(a1 + 16), "textColorOverride");
    else
      v26 = 0;
  }
  *(_QWORD *)(a1 + 728) = v26;
  objc_msgSend(v8, "position");
  v28 = v27;
  v30 = v29;
  v31 = objc_msgSend(v8, "maxSize");
  *(double *)(a1 + 648) = TSDRectWithOriginAndSize(v31, v28, v30, v32, v33);
  *(_QWORD *)(a1 + 656) = v34;
  *(_QWORD *)(a1 + 664) = v35;
  *(_QWORD *)(a1 + 672) = v36;
  *(_BYTE *)(a1 + 414) = (*(_BYTE *)(a1 + 32) & 0x20) != 0;
  if ((objc_opt_respondsToSelector() & 1) == 0)
    v8 = (void *)objc_msgSend(*(id *)(a1 + 8), "documentRoot");
  *(_BYTE *)(a1 + 425) = objc_msgSend(v8, "shouldHyphenate");
  if (*(_DWORD *)(a1 + 56) >= 3u)
  {
    v38 = *(void **)(a1 + 184);
    if (v38)
      objc_msgSend(v38, "frameBounds");
    else
      v37 = 0;
  }
  else
  {
    v37 = 0xFFF0000000000000;
  }
  *(_QWORD *)(a1 + 400) = v37;
  TSWPLayoutState::~TSWPLayoutState((TSWPLayoutState *)v40);
}

void sub_2178F54D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  TSWPLayoutState::~TSWPLayoutState((TSWPLayoutState *)va);
  _Unwind_Resume(a1);
}

_QWORD *TSWPLayoutState::setPreviousPartHint(_QWORD *result, void *a2)
{
  void *v2;
  _QWORD *v4;

  v2 = (void *)result[85];
  if (v2 != a2)
  {
    v4 = result;

    result = a2;
    v4[85] = result;
  }
  return result;
}

uint64_t TSWPLayoutChore::layoutIntoTarget(NSUInteger a1, void *a2, int a3, char *a4)
{
  NSUInteger v8;
  const TSWPLayoutState *v9;
  NSUInteger v10;
  void *v11;
  uint64_t v12;
  int v13;
  double v14;
  double v15;
  double v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  uint64_t ColumnContainsOnlyOneAnchoredDrawable;
  double v25;
  double v26;
  int v27;
  int v28;
  unint64_t v29;
  int HasOverlaps;
  int v31;
  uint64_t v32;
  int v33;
  char v34;
  char v35;
  uint64_t v37;
  char *v38;
  void *v39;
  _BYTE v40[688];
  unsigned int v41;
  int v42;
  double v43;
  unint64_t v44;
  unsigned __int16 v45;
  uint64_t v46;
  id v47[87];

  v9 = (const TSWPLayoutState *)(a1 + 80);
  v8 = *(_QWORD *)(a1 + 80);
  v10 = *(_QWORD *)(a1 + 64);
  if (v8 > v10)
  {
    v11 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v12 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "BOOL TSWPLayoutChore::layoutIntoTarget(TSDLayout<TSWPLayoutTarget> *, TSWPLayoutFlags, BOOL *)");
    objc_msgSend(v11, "handleFailureInFunction:file:lineNumber:description:", v12, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 220, CFSTR("Attempt to lay out past end of storage"));
    v8 = *(_QWORD *)(a1 + 80);
    v10 = *(_QWORD *)(a1 + 64);
  }
  if (v8 > v10)
    return 0;
  if (*(_QWORD *)(a1 + 792) != 0x7FFFFFFFFFFFFFFFLL)
  {
    TSWPTopicNumberHints::operator=((TSWPTopicNumberHints *)(a1 + 816), (TSWPTopicNumberHints *)(a1 + 768));
    v8 = *(_QWORD *)(a1 + 80);
  }
  TSWPTopicNumberHints::advanceToCharIndex((TSWPTopicNumberHints *)(a1 + 816), v8, *(TSWPStorage **)(a1 + 8));
  TSWPTopicNumberHints::operator=((TSWPTopicNumberHints *)(a1 + 768), (TSWPTopicNumberHints *)(a1 + 816));
  v13 = *(_DWORD *)(a1 + 32);
  objc_msgSend(a2, "currentSize");
  if ((v13 & 0x10) != 0)
    v16 = v14;
  else
    v16 = v15;
  v17 = (void *)objc_msgSend(a2, "columns");
  if (!objc_msgSend(v17, "count"))
  {
    v38 = a4;
    v18 = *(_QWORD *)(a1 + 8);
    v19 = *(_QWORD *)(a1 + 80);
    v20 = objc_msgSend(*(id *)(a1 + 24), "styleProvider");
    LOBYTE(v37) = (*(_DWORD *)(a1 + 32) & 0x10) != 0;
    v21 = v18;
    a4 = v38;
    +[TSWPLayoutManager fixColumnBoundsForTarget:storage:charIndex:firstColumnIndex:precedingHeight:height:alreadyHasMargins:styleProvider:vertical:](TSWPLayoutManager, "fixColumnBoundsForTarget:storage:charIndex:firstColumnIndex:precedingHeight:height:alreadyHasMargins:styleProvider:vertical:", a2, v21, v19, 0, 0, v20, 0.0, v16, v37);
  }
  if (!objc_msgSend(v17, "count"))
  {
    v39 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v22 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "BOOL TSWPLayoutChore::layoutIntoTarget(TSDLayout<TSWPLayoutTarget> *, TSWPLayoutFlags, BOOL *)");
    objc_msgSend(v39, "handleFailureInFunction:file:lineNumber:description:", v22, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 239, CFSTR("No columns to lay out into"));
  }
  if ((objc_opt_respondsToSelector() & 1) != 0 && objc_msgSend(a2, "ignoresEquationAlignment"))
    a3 |= 0x20000u;
  if (!objc_msgSend(v17, "count"))
    return 0;
  TSWPLayoutChore::protectedSetupLayoutState(a1, a2, 0, *(_QWORD *)(a1 + 80), *(void **)(a1 + 760));
  TSWPLayoutState::TSWPLayoutState((TSWPLayoutState *)v47, v9);
  TSWPLayoutChore::pPushLayoutState((TSWPLayoutChore *)a1, (const TSWPLayoutState *)v47);
  objc_msgSend(*(id *)(a1 + 680), "removeAllFootnoteReferenceStorages");
  v46 = 0;
  v44 = 0;
  if (objc_msgSend(a2, "shouldPositionAttachmentsIteratively"))
    v23 = objc_msgSend(a2, "iterativeAttachmentPositioningMaxPassCount") != 0;
  else
    v23 = 0;
  v25 = rint(v16);
  while (1)
  {
    v43 = 0.0;
    v42 = 1;
    v41 = 0;
    v26 = v25;
    v45 = 0;
    do
    {
      v27 = TSWPLayoutChore::pLayoutPiece(a1, a2, a3, &v43, &v42, &v45, (int *)&v41, v16, v26);
      v26 = rint(v16 - v43);
      if (v26 <= 0.0)
        v28 = 1;
      else
        v28 = v27;
    }
    while (v28 != 1);
    v29 = objc_msgSend(v17, "count");
    if (v29 > v41)
      objc_msgSend(v17, "removeObjectsInRange:", v41, v29 - v41);
    TSWPLayoutChore::pSetTargetColumnsTransform((id *)a1);
    HasOverlaps = TSWPLayoutChore::targetHasOverlaps(a1, (unsigned int *)&v46, &v44, a2);
    v31 = v23 ? TSWPLayoutChore::pPerformIterativeAttachmentPositioning(a1, (_DWORD *)&v46 + 1, a2) : 1;
    if ((HasOverlaps | v31 ^ 1) != 1)
      break;
    v32 = *(_QWORD *)(a1 + 744);
    TSWPLayoutChore::pRestoreStateFromOldState((TSWPLayoutChore *)a1, v47);
    *(_QWORD *)(a1 + 744) = v32;
    TSWPTopicNumberHints::operator=((TSWPTopicNumberHints *)(a1 + 768), (TSWPTopicNumberHints *)(a1 + 816));
    objc_msgSend(*(id *)(a1 + 680), "removeAllFootnoteReferenceStorages");
  }
  TSWPLayoutChore::postProcessDrawableAttachments(a1, a2);
  TSWPLayoutChore::pPopLayoutState((TSWPLayoutChore *)a1, (uint64_t)v40);
  TSWPLayoutState::~TSWPLayoutState((TSWPLayoutState *)v40);
  TSWPLayoutChore::pHandleSync(a1, a2, a4);
  if (*(_QWORD *)(a1 + 80) < *(_QWORD *)(a1 + 64)
    || ((v33 = v45, v34 = IsParagraphBreakingCharacter(v45), v33 == 8232) ? (v35 = 1) : (v35 = v34),
        (v35 & 1) != 0 || *(_QWORD *)(a1 + 88) < *(_QWORD *)(a1 + 64)))
  {
    ColumnContainsOnlyOneAnchoredDrawable = 1;
  }
  else
  {
    ColumnContainsOnlyOneAnchoredDrawable = (uint64_t)TSWPLayoutChore::pLastColumnContainsOnlyOneAnchoredDrawable(a1, a2);
  }
  TSWPLayoutState::~TSWPLayoutState((TSWPLayoutState *)v47);
  return ColumnContainsOnlyOneAnchoredDrawable;
}

void sub_2178F5954(_Unwind_Exception *a1)
{
  TSWPLayoutState::~TSWPLayoutState((TSWPLayoutState *)&STACK[0x2F8]);
  _Unwind_Resume(a1);
}

TSWPTopicNumberHints *TSWPTopicNumberHints::operator=(TSWPTopicNumberHints *this, TSWPTopicNumberHints *a2)
{
  if (this != a2)
    std::__tree<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::__map_value_compare<TSWPListStyle const*,std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::less<TSWPListStyle const*>,true>,std::allocator<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::__tree_node<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,void *> *,long>>((uint64_t **)this, a2->_numbersForListStyle.__tree_.__begin_node_, &a2->_numbersForListStyle.__tree_.__pair1_.__value_.__left_);
  TSWPTopicNumberHints::setCharIndexAndValidCharIndex(this, a2->_charIndex, a2->_validThroughCharIndex);

  this->_styleProvider = a2->_styleProvider;
  return this;
}

void TSWPTopicNumberHints::TSWPTopicNumberHints(TSWPTopicNumberHints *this, const TSWPTopicNumberHints *a2)
{
  this->_numbersForListStyle.__tree_.__pair3_.__value_ = 0;
  this->_numbersForListStyle.__tree_.__pair1_.__value_.__left_ = 0;
  this->_numbersForListStyle.__tree_.__begin_node_ = &this->_numbersForListStyle.__tree_.__pair1_;
  if (this != a2)
    std::__tree<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::__map_value_compare<TSWPListStyle const*,std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::less<TSWPListStyle const*>,true>,std::allocator<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::__tree_node<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,void *> *,long>>((uint64_t **)this, a2->_numbersForListStyle.__tree_.__begin_node_, &a2->_numbersForListStyle.__tree_.__pair1_.__value_.__left_);
  TSWPTopicNumberHints::setCharIndexAndValidCharIndex(this, a2->_charIndex, a2->_validThroughCharIndex);
  this->_styleProvider = a2->_styleProvider;
}

void sub_2178F5A44(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::__map_value_compare<TSWPListStyle const*,std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::less<TSWPListStyle const*>,true>,std::allocator<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

TSWPTopicNumberHints *TSWPTopicNumberHints::setCharIndexAndValidCharIndex(TSWPTopicNumberHints *this, unint64_t a2, unint64_t a3)
{
  TSWPTopicNumberHints *v5;
  void *v7;
  uint64_t v8;

  v5 = this;
  if (a2 != 0x7FFFFFFFFFFFFFFFLL && a2 > a3)
  {
    v7 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v8 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSWPTopicNumberHints::setCharIndexAndValidCharIndex(TSWPCharIndex, TSWPCharIndex)");
    this = (TSWPTopicNumberHints *)objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPTopicNumberHints.mm"), 58, CFSTR("Bad charIndex compared to validThroughCharIndex."));
  }
  v5->_charIndex = a2;
  v5->_validThroughCharIndex = a3;
  return this;
}

uint64_t **std::__tree<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::__map_value_compare<TSWPListStyle const*,std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::less<TSWPListStyle const*>,true>,std::allocator<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::__tree_node<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;
  _QWORD v17[2];

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v17[0] = v8 + 4;
          v17[1] = v8 + 5;
          std::pair<TSWPListStyle const*&,std::vector<TSWPTopicNumberEntry> &>::operator=[abi:nn180100]<TSWPListStyle const* const,std::vector<TSWPTopicNumberEntry>,(void *)0>((uint64_t)v17, (uint64_t)(v9 + 4));
          std::__tree<unsigned long>::__node_insert_multi(v5, v16);
          v16 = v15;
          if (v15)
            v15 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          v10 = (_QWORD *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = (_QWORD *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v11 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          v8 = v16;
          if (v16)
            v11 = a2 == a3;
          else
            v11 = 1;
          v9 = a2;
        }
        while (!v11);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::__map_value_compare<TSWPListStyle const*,std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::less<TSWPListStyle const*>,true>,std::allocator<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:nn180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::__map_value_compare<TSWPListStyle const*,std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::less<TSWPListStyle const*>,true>,std::allocator<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>>>::__emplace_multi<std::pair<TSWPListStyle const* const,std::vector<TSWPTopicNumberEntry>> const&>((uint64_t)v5, (uint64_t)(a2 + 4));
      v12 = (_QWORD *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)a2[2];
          v11 = *v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_2178F5C54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::__map_value_compare<TSWPListStyle const*,std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>,std::less<TSWPListStyle const*>,true>,std::allocator<std::__value_type<TSWPListStyle const*,std::vector<TSWPTopicNumberEntry>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t TSWPLayoutChore::pContainsOnlyOneAnchoredDrawable(uint64_t a1, TSWPLineFragmentArray **a2)
{
  uint64_t result;

  if (TSWPLineFragmentArray::count(*a2) != 1)
    return 0;
  result = TSWPLineFragmentArray::objectAtIndex(*a2, 0);
  if (result)
    return (*(unsigned __int8 *)(result + 24) >> 6) & 1;
  return result;
}

uint64_t TSWPLineFragmentArray::count(TSWPLineFragmentArray *this)
{
  return (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4;
}

void *TSWPLayoutChore::pLastColumnContainsOnlyOneAnchoredDrawable(uint64_t a1, void *a2)
{
  void *result;
  TSWPLineFragmentArray **v3;

  result = (void *)objc_msgSend((id)objc_msgSend(a2, "columns"), "lastObject");
  if (result)
  {
    v3 = (TSWPLineFragmentArray **)objc_msgSend(result, "lineFragmentArray");
    return (void *)TSWPLayoutChore::pContainsOnlyOneAnchoredDrawable((uint64_t)v3, v3);
  }
  return result;
}

TSWPTopicNumberHints *TSWPTopicNumberHints::advanceToCharIndex(TSWPTopicNumberHints *this, NSUInteger a2, TSWPStorage *a3)
{
  unint64_t validThroughCharIndex;
  NSUInteger v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t charIndex;
  NSUInteger v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  TSWPListStyle *v15;
  void *v16;
  uint64_t TopicNumberForList;
  NSUInteger v18;
  TSWPParagraphEnumerator v20;

  if (this->_validThroughCharIndex == 0x7FFFFFFFFFFFFFFFLL)
    validThroughCharIndex = 0;
  else
    validThroughCharIndex = this->_validThroughCharIndex;
  if (a3 && validThroughCharIndex < a2)
  {
    if (-[TSWPStorage length](a3, "length") <= a2)
      v7 = a2;
    else
      v7 = a2 + 1;
    if (validThroughCharIndex <= v7)
      v8 = v7;
    else
      v8 = validThroughCharIndex;
    if (validThroughCharIndex >= v7)
      v9 = v7;
    else
      v9 = validThroughCharIndex;
    -[TSWPStorage paragraphEnumeratorForCharRange:styleProvider:](a3, "paragraphEnumeratorForCharRange:styleProvider:", v9, v8 - v9, this->_styleProvider);
    charIndex = this->_charIndex;
    if (charIndex == TSWPParagraphEnumerator::paragraphTextRange(&v20)
      && !TSWPParagraphEnumerator::isLastParagraph(&v20))
    {
      TSWPParagraphEnumerator::operator++(&v20);
    }
    v11 = TSWPParagraphEnumerator::paragraphTextRange(&v20);
    if (v11 + v12 < -[TSWPStorage length](a3, "length"))
    {
      while (1)
      {
        if (TSWPParagraphEnumerator::paragraphTextRange(&v20) >= a2)
        {
          TSWPParagraphEnumerator::paragraphTextRange(&v20);
          if (v13)
            break;
        }
        v14 = TSWPParagraphEnumerator::paragraphLevel(&v20);
        v15 = (TSWPListStyle *)TSWPParagraphEnumerator::paragraphListStyle(&v20);
        objc_opt_class();
        TSWPParagraphEnumerator::attachmentOrFootnoteAtCharIndex(&v20, 0);
        v16 = (void *)TSUDynamicCast();
        if (-[TSWPListStyle effectiveTypeForLevel:](v15, "effectiveTypeForLevel:", v14) == 3
          && (objc_msgSend(v16, "isPartitioned") & 1) == 0)
        {
          TopicNumberForList = TSWPParagraphEnumerator::paragraphListStart(&v20);
          if (!TopicNumberForList)
            TopicNumberForList = TSWPTopicNumberHints::nextTopicNumberForList(this, v15, v14);
          v18 = TSWPParagraphEnumerator::paragraphTextRange(&v20);
          TSWPTopicNumberHints::setTopicNumberForList(this, v15, v14, TopicNumberForList, v18);
        }
        if (TSWPParagraphEnumerator::isLastParagraph(&v20))
          break;
        TSWPParagraphEnumerator::operator++(&v20);
      }
    }
    TSWPParagraphEnumerator::~TSWPParagraphEnumerator(&v20);
  }
  return TSWPTopicNumberHints::setCharIndexAndValidCharIndex(this, this->_charIndex, a2);
}

void sub_2178F5EBC(_Unwind_Exception *a1, TSWPParagraphEnumerator *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  TSWPParagraphEnumerator::~TSWPParagraphEnumerator((TSWPParagraphEnumerator *)&a10);
  _Unwind_Resume(a1);
}

uint64_t TSWPLayoutChore::pSetTargetColumnsTransform(id *this)
{
  void *v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  CGAffineTransform v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  CGAffineTransform v19;
  CGAffineTransform v20;
  CGAffineTransform v21;
  _BYTE v22[128];
  uint64_t v23;
  CGRect v24;

  v23 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)objc_msgSend(this[257], "columns");
  if (((_BYTE)this[4] & 0x10) != 0)
  {
    if ((objc_msgSend(this[257], "autosizeFlags") & 3) != 0)
    {
      v5 = objc_msgSend(v2, "count");
      v6 = 0.0;
      if (v5 == 1)
      {
        objc_msgSend(this[24], "adjustedInsets", 0.0);
        v8 = v7;
        objc_msgSend((id)objc_msgSend(v2, "objectAtIndexedSubscript:", 0), "wpBounds");
        v6 = v8 + CGRectGetMaxY(v24);
      }
    }
    else
    {
      objc_msgSend(this[257], "currentSize");
    }
    CGAffineTransformMakeTranslation(&v21, v6, 0.0);
    v19 = v21;
    CGAffineTransformRotate(&v20, &v19, 1.57079633);
    *(_OWORD *)&v21.a = *(_OWORD *)&v20.a;
    *(_OWORD *)&v21.c = *(_OWORD *)&v20.c;
    v4 = *(_OWORD *)&v20.tx;
  }
  else
  {
    v3 = *(_OWORD *)(MEMORY[0x24BDBD8B8] + 16);
    *(_OWORD *)&v21.a = *MEMORY[0x24BDBD8B8];
    *(_OWORD *)&v21.c = v3;
    v4 = *(_OWORD *)(MEMORY[0x24BDBD8B8] + 32);
  }
  *(_OWORD *)&v21.tx = v4;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v15, v22, 16);
  if (result)
  {
    v10 = result;
    v11 = *(_QWORD *)v16;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v16 != v11)
          objc_enumerationMutation(v2);
        v13 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * v12);
        v14 = v21;
        objc_msgSend(v13, "setTransformFromWP:", &v14);
        ++v12;
      }
      while (v10 != v12);
      result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v15, v22, 16);
      v10 = result;
    }
    while (result);
  }
  return result;
}

void TSWPLayoutChore::pPostProcessAttachments(uint64_t a1, TSWPLineFragment ****a2)
{
  unint64_t v4;
  unint64_t v5;
  __int16 *v6;
  TSWPLineFragment ***v7;
  TSWPLineFragment **v8;
  TSWPLineFragment **v9;
  unint64_t v10;
  TSWPLineFragment *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  char v17;
  void *v18;
  uint64_t v19;
  void *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  TSWPLineFragment **v28;
  TSWPLineFragment *v29;
  unint64_t v30;
  unint64_t v31;
  TSWPLineFragment **v32;
  uint64_t v33;

  v4 = objc_msgSend(*(id *)(a1 + 184), "anchoredRange");
  v30 = v5;
  v6 = (__int16 *)malloc_type_malloc(0x190uLL, 0x1000040BDFB0063uLL);
  v7 = *a2;
  v8 = **a2;
  v9 = v7[1];
  if (v8 != v9)
  {
    v27 = -(uint64_t)v4;
    v28 = v7[1];
    v10 = 200;
    do
    {
      if (*(_BYTE *)(a1 + 700))
        break;
      v11 = *v8;
      if ((*((_BYTE *)*v8 + 24) & 0xC) != 0)
      {
        v12 = *(_QWORD *)v11;
        v13 = *((_QWORD *)v11 + 1);
        if (v10 < v13)
        {
          v6 = (__int16 *)malloc_type_realloc(v6, 2 * v13, 0x1000040BDFB0063uLL);
          objc_msgSend(*(id *)(a1 + 8), "getCharacters:range:", v6, v12, v13);
          v10 = v13;
LABEL_8:
          v29 = v11;
          v31 = v10;
          v32 = v8;
          v14 = 0;
          v33 = v27 + v12;
          do
          {
            if (v6[v14] == -4)
            {
              v15 = (void *)objc_msgSend(*(id *)(a1 + 8), "attachmentAtCharIndex:", v12 + v14);
              if (objc_msgSend(v15, "isDrawable"))
              {
                if ((objc_msgSend(v15, "isPartitioned") & 1) == 0
                  && (!objc_msgSend(v15, "isAnchored") || v4 <= v12 + v14 && v33 + v14 < v30)
                  && ((objc_opt_respondsToSelector() & 1) == 0
                   || (objc_msgSend(*(id *)(a1 + 2056), "siblingTargetIsManipulatingDrawable:", objc_msgSend(v15, "drawable")) & 1) == 0))
                {
                  v16 = v4;
                  v17 = objc_msgSend(v15, "isAnchored", v27);
                  v18 = *(void **)(a1 + 2056);
                  v19 = objc_msgSend(v15, "drawable");
                  if ((v17 & 1) != 0)
                  {
                    v20 = (void *)objc_msgSend(v18, "validatedLayoutForAnchoredDrawable:", v19);
                  }
                  else
                  {
                    v20 = (void *)objc_msgSend(v18, "layoutForInlineDrawable:", v19);
                    objc_msgSend((id)objc_msgSend(v20, "layoutController"), "validateLayoutWithDependencies:", v20);
                  }
                  v4 = v16;
                  if (v20 && (objc_msgSend(v15, "isAnchored") & 1) == 0)
                  {
                    v21 = TSWPLineFragment::baselineAtCharIndex(v29, (TSWPLineFragment *)(v12 + v14), *(TSWPStorage **)(a1 + 184), 0);
                    objc_msgSend(v20, "inlineVerticalOffset");
                    v23 = v21 + v22;
                    objc_msgSend(v20, "alignmentFrame");
                    v25 = v23 - v24;
                    objc_msgSend(v15, "descent");
                    objc_msgSend(v20, "setAdjustedInterimPositionY:", v26 + v25);
                    objc_msgSend(v20, "fixTransformFromInterimPosition");
                  }
                }
              }
            }
            ++v14;
          }
          while (v13 != v14);
          v10 = v31;
          v8 = v32;
          v9 = v28;
          goto LABEL_25;
        }
        objc_msgSend(*(id *)(a1 + 8), "getCharacters:range:", v6, *(_QWORD *)v11, *((_QWORD *)v11 + 1));
        if (v13)
          goto LABEL_8;
      }
LABEL_25:
      v8 += 2;
    }
    while (v8 != v9);
  }
  free(v6);
}

void TSWPLayoutChore::postProcessDrawableAttachments(uint64_t a1, void *a2)
{
  _QWORD *v2;
  NSUInteger v3;
  NSUInteger v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSUInteger v9;
  NSUInteger v10;
  uint64_t i;
  void *v12;
  uint64_t location;
  NSUInteger length;
  NSRange v15;
  NSRange v17;
  uint64_t v18;
  NSUInteger v19;
  NSRange v20;
  NSRange v22;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  uint64_t v30;
  NSRange v31;
  NSRange v32;

  v30 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)MEMORY[0x24BEB3BF0];
  v3 = *MEMORY[0x24BEB3BF0];
  v4 = *(_QWORD *)(MEMORY[0x24BEB3BF0] + 8);
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v5 = (void *)objc_msgSend(a2, "columns");
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v26;
    v9 = v3;
    v10 = v4;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v26 != v8)
          objc_enumerationMutation(v5);
        v12 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * i);
        location = objc_msgSend(v12, "range");
        v15.location = location;
        v15.length = length;
        if (v9 != *v2 || v10 != v2[1])
        {
          v31.location = v9;
          v31.length = v10;
          v17 = NSUnionRange(v31, v15);
          length = v17.length;
          location = v17.location;
        }
        v9 = location;
        v10 = length;
        v18 = objc_msgSend(v12, "anchoredRange");
        v20.location = v18;
        v20.length = v19;
        if (v3 != *v2 || v4 != v2[1])
        {
          v32.location = v3;
          v32.length = v4;
          v22 = NSUnionRange(v32, v20);
          v19 = v22.length;
          v18 = v22.location;
        }
        v3 = v18;
        v4 = v19;
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
    }
    while (v7);
  }
  else
  {
    v9 = v3;
    v10 = v4;
  }
  TSWPLayoutChore::p_postProcessDrawableAttachments_removeLeftovers(a1, v9, v10, *(void **)(a1 + 8), 0, a2);
  TSWPLayoutChore::p_postProcessDrawableAttachments_removeLeftovers(a1, v3, v4, *(void **)(a1 + 8), 1, a2);
}

void TSWPLayoutChore::p_postProcessDrawableAttachments_removeLeftovers(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5, void *a6)
{
  id v12;
  uint64_t v13;
  void *v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t j;
  void *v42;
  void *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t *v48;
  std::__shared_weak_count *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[128];
  _BYTE v55[128];
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v12 = objc_alloc(MEMORY[0x24BDBCEB8]);
  v43 = a6;
  if ((a5 & 1) != 0)
    v13 = objc_msgSend(a6, "currentAnchoredDrawableLayouts");
  else
    v13 = objc_msgSend(a6, "currentInlineDrawableLayouts");
  v14 = (void *)objc_msgSend(v12, "initWithArray:", v13);
  if (a2 != *MEMORY[0x24BEB3BF0] || a3 != *(_QWORD *)(MEMORY[0x24BEB3BF0] + 8))
  {
    v16 = objc_msgSend(a4, "attachmentIndexRangeForTextRange:", a2, a3);
    v18 = v16 + v17;
    if (v16 < v16 + v17)
    {
      v19 = v16;
      do
      {
        objc_opt_class();
        objc_msgSend(a4, "attachmentAtAttachmentIndex:outCharIndex:", v19, 0);
        v20 = (void *)TSUDynamicCast();
        if (v20)
        {
          v21 = v20;
          if (objc_msgSend(v20, "isAnchored") == a5)
          {
            v22 = objc_msgSend(v21, "drawable");
            v23 = objc_msgSend(v14, "count");
            if (v23)
            {
              v24 = v23;
              v25 = 0;
              while (objc_msgSend((id)objc_msgSend(v14, "objectAtIndexedSubscript:", v25), "info") != v22
                   || (objc_msgSend(v21, "isPartitioned") & 1) != 0)
              {
                if (v24 == ++v25)
                  goto LABEL_19;
              }
              objc_msgSend(v14, "removeObjectAtIndex:", v25);
            }
          }
        }
LABEL_19:
        ++v19;
      }
      while (v19 != v18);
    }
  }
  if ((a5 & 1) == 0)
  {
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v26 = (void *)objc_msgSend(v43, "columns");
    v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v50, v55, 16);
    if (v27)
    {
      v28 = *(_QWORD *)v51;
      do
      {
        for (i = 0; i != v27; ++i)
        {
          if (*(_QWORD *)v51 != v28)
            objc_enumerationMutation(v26);
          v30 = objc_msgSend(*(id *)(*((_QWORD *)&v50 + 1) + 8 * i), "lineFragmentArray");
          v31 = *(uint64_t **)v30;
          v32 = *(std::__shared_weak_count **)(v30 + 8);
          v48 = *(uint64_t **)v30;
          v49 = v32;
          if (v32)
          {
            p_shared_owners = (unint64_t *)&v32->__shared_owners_;
            do
              v34 = __ldxr(p_shared_owners);
            while (__stxr(v34 + 1, p_shared_owners));
          }
          v35 = *v31;
          v36 = v31[1];
          while (v35 != v36)
          {
            if ((*(_BYTE *)(*(_QWORD *)v35 + 24) & 1) != 0)
              objc_msgSend(v14, "removeObjectIdenticalTo:", *(_QWORD *)(*(_QWORD *)v35 + 432));
            v35 += 16;
          }
          if (v32)
          {
            v37 = (unint64_t *)&v32->__shared_owners_;
            do
              v38 = __ldaxr(v37);
            while (__stlxr(v38 - 1, v37));
            if (!v38)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
        }
        v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v50, v55, 16);
      }
      while (v27);
    }
  }
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v39 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v44, v54, 16);
  if (v39)
  {
    v40 = *(_QWORD *)v45;
    do
    {
      for (j = 0; j != v39; ++j)
      {
        if (*(_QWORD *)v45 != v40)
          objc_enumerationMutation(v14);
        v42 = *(void **)(*((_QWORD *)&v44 + 1) + 8 * j);
        if (!a5 || (pLayoutGeometryIsBeingManipulated(*(TSDLayout **)(*((_QWORD *)&v44 + 1) + 8 * j)) & 1) == 0)
        {
          objc_msgSend(*(id *)(a1 + 24), "willRemoveAttachmentLayout:", v42);
          objc_msgSend(v42, "removeFromParent");
        }
      }
      v39 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v44, v54, 16);
    }
    while (v39);
  }

}

void sub_2178F6860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  _Unwind_Resume(exception_object);
}

void sub_2178F6964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_2178F6A2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t TSWPLayoutChore::targetHasOverlaps(uint64_t a1, unsigned int *a2, unint64_t *a3, void *a4)
{
  unsigned int v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;

  v7 = *a2;
  v8 = *a2 + 1;
  *a2 = v8;
  if (v7)
  {
    if (v8 <= 1)
    {
      v9 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
      v10 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "BOOL TSWPLayoutChore::targetHasOverlaps(uint &, TSWPCharIndex &, TSDLayout<TSWPLayoutTarget> *, NSString *&)");
      objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v10, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 6386, CFSTR("Bad passCount"));
    }
    v11 = *(_QWORD *)(a1 + 88);
    if (v11 <= *a3)
      v11 = *a3;
    *(_QWORD *)(a1 + 88) = v11;
    v12 = (void *)objc_msgSend((id)objc_msgSend(a4, "columns"), "lastObject");
    objc_msgSend(v12, "setAnchoredCharCount:", *(_QWORD *)(a1 + 88) - objc_msgSend(v12, "anchoredRange"));
  }
  else
  {
    *a3 = *(_QWORD *)(a1 + 88);
    if ((objc_opt_respondsToSelector() & 1) != 0 && objc_msgSend(*(id *)(a1 + 16), "textWrapper"))
      return TSWPLayoutChore::pAnchoredGraphicAndTextCollisionsInTarget();
  }
  return 0;
}

uint64_t TSWPLayoutChore::pLayoutColumn(NSUInteger a1, char a2)
{
  unint64_t v4;
  void *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  double v10;
  double v11;
  int v12;
  _OWORD *v13;
  int v14;
  void *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v24;
  CGFloat x;
  CGFloat y;
  CGFloat v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  TSWPLineFragmentArray *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  __n128 v38;
  __n128 v39;
  double v40;
  BOOL v41;
  char v42;
  unint64_t *v43;
  unint64_t v44;
  char v45;
  double *Object;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double MaxY;
  double v54;
  double MinY;
  uint64_t v56;
  CGFloat height;
  uint64_t v58;
  CGFloat width;
  std::__shared_weak_count *v60;
  uint64_t v61;
  unsigned int v62;
  _BYTE v63[688];
  TSWPLineFragmentArray *v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  TSWPLineFragmentArray *v68;
  std::__shared_weak_count *v69;
  TSWPTopicNumberHints v70;
  id v71[87];
  CGRect v72;
  CGRect v73;
  CGRect v74;
  CGRect v75;
  CGRect v76;

  objc_msgSend(*(id *)(a1 + 2056), "autosizeFlags");
  if (*(_DWORD *)(a1 + 56) >= 3u)
  {
    v5 = *(void **)(a1 + 184);
    if (v5)
      objc_msgSend(v5, "frameBounds");
    else
      v4 = 0;
  }
  else
  {
    v4 = 0xFFF0000000000000;
  }
  *(_QWORD *)(a1 + 400) = v4;
  TSWPLayoutState::TSWPLayoutState((TSWPLayoutState *)v71, (const TSWPLayoutState *)(a1 + 80));
  TSWPLayoutChore::pPushLayoutState((TSWPLayoutChore *)a1, (const TSWPLayoutState *)v71);
  TSWPTopicNumberHints::TSWPTopicNumberHints(&v70, (const TSWPTopicNumberHints *)(a1 + 768));
  v6 = objc_msgSend(*(id *)(a1 + 184), "lineFragmentArray");
  v7 = *(std::__shared_weak_count **)(v6 + 8);
  v68 = *(TSWPLineFragmentArray **)v6;
  v69 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  objc_msgSend(*(id *)(a1 + 184), "contentBottom");
  v11 = v10;
  v12 = *(unsigned __int8 *)(a1 + 248);
  *(_BYTE *)(a1 + 249) = ((objc_msgSend(*(id *)(a1 + 184), "layoutResultFlags") >> 8) & 1) != v12;
  v13 = (_OWORD *)operator new();
  *v13 = 0u;
  v13[1] = 0u;
  std::shared_ptr<TSWPLineFragmentArray>::shared_ptr[abi:ne180100]<TSWPLineFragmentArray,void>(&v66, (uint64_t)v13);
  objc_msgSend(*(id *)(a1 + 184), "setLineFragmentArray:", &v66);
  objc_msgSend(*(id *)(a1 + 184), "clearAdornments");
  v62 = TSWPLayoutChore::pLayoutColumnWithOldLines();
  v61 = *(_QWORD *)(a1 + 80);
  v14 = objc_msgSend(*(id *)(a1 + 2056), "verticalAlignment");
  if ((v14 - 1) <= 1 && !*(_QWORD *)(a1 + 720))
  {
    if (*(_DWORD *)(a1 + 56) != 3 || !*(_QWORD *)(a1 + 712))
    {
      Object = (double *)TSWPLineFragmentArray::lastObject(*(TSWPLineFragmentArray **)objc_msgSend(*(id *)(a1 + 184), "lineFragmentArray"));
      if (Object)
        v47 = Object[4] + Object[5] + Object[17];
      else
        v47 = 0.0;
      objc_msgSend(*(id *)(a1 + 184), "wpBounds");
      v48 = CGRectGetMaxY(v76) - v47;
      if (v48 > 0.0)
      {
        if (*(int *)(a1 + 428) >= 2)
        {
          objc_msgSend(*(id *)(a1 + 432), "width");
          v50 = v48 - (v49 + *(double *)(a1 + 440) + 6.0);
          if (v50 >= 0.0)
            v48 = v50;
          else
            v48 = 0.0;
        }
        v51 = v48 * 0.5;
        if (v14 != 1)
          v51 = v48;
        objc_msgSend(*(id *)(a1 + 184), "offsetLineFragmentsByPoint:", 0.0, round(v51));
      }
      goto LABEL_11;
    }
    if (!objc_msgSend(*(id *)(a1 + 184), "countLines"))
      goto LABEL_11;
    v24 = *(_QWORD *)(a1 + 80);
    if (v24 != objc_msgSend(*(id *)(a1 + 8), "characterCount")
      && (unint64_t)(*(_QWORD *)(a1 + 240) + 1) >= *(_QWORD *)(a1 + 232) + *(_QWORD *)(a1 + 224))
    {
      goto LABEL_11;
    }
    objc_msgSend(*(id *)(a1 + 184), "wpBounds");
    x = v72.origin.x;
    y = v72.origin.y;
    height = v72.size.height;
    width = v72.size.width;
    v27 = CGRectGetHeight(v72);
    v73.origin.x = x;
    v73.origin.y = y;
    v73.size.height = height;
    v73.size.width = width;
    MinY = CGRectGetMinY(v73);
    v74.origin.x = x;
    v74.origin.y = y;
    v74.size.height = height;
    v74.size.width = width;
    MaxY = CGRectGetMaxY(v74);
    v75 = *(CGRect *)(TSWPLineFragmentArray::lastObject(*(TSWPLineFragmentArray **)objc_msgSend(*(id *)(a1 + 184), "lineFragmentArray"))+ 48);
    if (v27 - (CGRectGetMaxY(v75) - MinY) <= 0.0)
      goto LABEL_11;
    v28 = (uint64_t)rint(log2(v27));
    if (v28 >= 14)
      v28 = 14;
    v56 = v28;
    if (v28 < -1)
      goto LABEL_11;
    v58 = 0;
    v29 = *(double *)(a1 + 744);
    v54 = 0.0;
    v52 = 0.00999999978;
    while (1)
    {
      if (v29 > 0.0 && (*(_QWORD *)(a1 + 80) != v61 || !objc_msgSend(*(id *)(a1 + 184), "countLines")))
      {
        v41 = vabdd_f64(v54, v29) >= v52;
        v40 = (v29 + v54) * 0.5;
        goto LABEL_61;
      }
      v30 = objc_msgSend(*(id *)(a1 + 184), "lineFragmentArray", *(_QWORD *)&v52);
      v32 = *(TSWPLineFragmentArray **)v30;
      v31 = *(std::__shared_weak_count **)(v30 + 8);
      v64 = *(TSWPLineFragmentArray **)v30;
      v65 = v31;
      v60 = v31;
      if (v31)
      {
        v33 = (unint64_t *)&v31->__shared_owners_;
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      v35 = TSWPLineFragmentArray::objectAtIndex(v32, 0);
      v36 = TSWPLineFragmentArray::lastObject(v32);
      v37 = CGRectGetMinY(*(CGRect *)(v35 + 48));
      v39.n128_f64[0] = CGRectGetMaxY(*(CGRect *)(v36 + 48));
      v38.n128_f64[0] = v37 - MinY;
      v39.n128_f64[0] = MaxY - v39.n128_f64[0];
      if (v14 == 1)
        break;
      if (v14 != 2)
        goto LABEL_51;
      if (v39.n128_f64[0] < 0.0)
        goto LABEL_49;
      v40 = (v27 + v38.n128_f64[0]) * 0.5;
      if (v39.n128_f64[0] > 1.0)
      {
        v39.n128_f64[0] = vabdd_f64(v29, v40);
        if (v39.n128_f64[0] > 1.0)
          goto LABEL_68;
      }
      v42 = 0;
      v54 = v38.n128_f64[0];
LABEL_54:
      if (v60)
      {
        v43 = (unint64_t *)&v60->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *, __n128, __n128))v60->__on_zero_shared)(v60, v39, v38);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      if ((v42 & 1) == 0)
        goto LABEL_11;
      v41 = 0;
      v29 = v27;
LABEL_61:
      TSWPLayoutChore::pRestoreStateFromOldState((TSWPLayoutChore *)a1, v71);
      TSWPTopicNumberHints::operator=((TSWPTopicNumberHints *)(a1 + 768), &v70);
      TSWPLayoutChore::pLayoutColumnWithOldLines();
      v45 = v58++ <= v56 || v41;
      v27 = v29;
      v29 = v40;
      if ((v45 & 1) == 0)
        goto LABEL_11;
    }
    if (vabdd_f64(v27, v54) <= 1.0 || vabdd_f64(v38.n128_f64[0], v39.n128_f64[0]) <= 1.0)
    {
      v42 = 0;
      v40 = v37 - MinY;
      goto LABEL_54;
    }
    if (v38.n128_f64[0] > v39.n128_f64[0])
    {
LABEL_49:
      v39.n128_f64[0] = v54 + v38.n128_f64[0];
      v40 = (v54 + v38.n128_f64[0]) * 0.5;
    }
    else
    {
      if (v39.n128_f64[0] <= v38.n128_f64[0])
      {
LABEL_51:
        v40 = v37 - MinY;
      }
      else
      {
        v39.n128_f64[0] = v27 + v38.n128_f64[0];
        v40 = (v27 + v38.n128_f64[0]) * 0.5;
LABEL_68:
        v54 = v38.n128_f64[0];
      }
      v38.n128_f64[0] = v27;
    }
    v42 = 1;
    v27 = v38.n128_f64[0];
    goto LABEL_54;
  }
LABEL_11:
  TSWPLayoutChore::addParagraphAdornmentsToColumn(*(void **)(a1 + 184), *(void **)(a1 + 192), objc_msgSend(*(id *)(a1 + 24), "styleProvider", *(_QWORD *)&v52));
  v15 = *(void **)(a1 + 184);
  v16 = *(void **)(a1 + 192);
  objc_msgSend(*(id *)(a1 + 24), "styleProvider");
  TSWPLayoutChore::addChangeBarAdornmentsToColumn(v15, v16);
  if ((a2 & 1) != 0)
    TSWPLayoutChore::pCompareLineFragments(a1, &v68, (TSWPLineFragmentArray **)objc_msgSend(*(id *)(a1 + 184), "lineFragmentArray"), *(TSWPColumn **)(a1 + 184), a2, v11);
  TSWPLayoutChore::pPopLayoutState((TSWPLayoutChore *)a1, (uint64_t)v63);
  TSWPLayoutState::~TSWPLayoutState((TSWPLayoutState *)v63);
  v17 = v67;
  if (v67)
  {
    v18 = (unint64_t *)&v67->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v69;
  if (v69)
  {
    v21 = (unint64_t *)&v69->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  TSWPTopicNumberHints::~TSWPTopicNumberHints(&v70);
  TSWPLayoutState::~TSWPLayoutState((TSWPLayoutState *)v71);
  return v62;
}

void sub_2178F727C(_Unwind_Exception *a1)
{
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)&STACK[0x308]);
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)&STACK[0x318]);
  TSWPTopicNumberHints::~TSWPTopicNumberHints((TSWPTopicNumberHints *)&STACK[0x328]);
  TSWPLayoutState::~TSWPLayoutState((TSWPLayoutState *)&STACK[0x358]);
  _Unwind_Resume(a1);
}

uint64_t TSWPLayoutChore::pGetCharacterStyleAtCharIndex(id *this, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  v4 = objc_msgSend(this[1], "characterStyleAtCharIndex:effectiveRange:", a2, 0);
  if (v4 && (v5 = (void *)objc_msgSend(this[3], "styleProvider"), (objc_opt_respondsToSelector() & 1) != 0))
    return objc_msgSend(v5, "modifiedCharacterStyle:atCharIndex:", v4, a2);
  else
    return v4;
}

void TSWPLayoutChore::addParagraphAdornmentsToColumn(void *a1, void *a2, uint64_t a3)
{
  void *v5;
  TSWPLineFragmentArray **v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  CGFloat width;
  double v17;
  NSUInteger v18;
  int v19;
  double v20;
  double v21;
  double **v22;
  void *v23;
  int v24;
  NSUInteger v25;
  double height;
  double *v27;
  NSUInteger v28;
  NSUInteger v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  NSUInteger v34;
  NSUInteger v35;
  void *v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  int v40;
  _BOOL4 v42;
  void *v43;
  BOOL v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  CGFloat v52;
  CGFloat v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  id v69;
  double v70;
  NSUInteger v71;
  double v73;
  double v74;
  double v75;
  double v76;
  uint64_t v77;
  double v78;
  uint64_t v79;
  double v80;
  double v81;
  double v82;
  double v83;
  CGFloat v84;
  double v85;
  CGFloat v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  uint64_t v92;
  uint64_t v93;
  double v94;
  double MaxY;
  double v96;
  uint64_t v97;
  uint64_t v98;
  double v99;
  double v100;
  CGFloat v101;
  double v102;
  void *v103;
  uint64_t v104;
  CGFloat v105;
  double *Object;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  CGFloat v112;
  double v113;
  double v114;
  double v115;
  unint64_t v116;
  unint64_t v117;
  double v118;
  unsigned int v119;
  unint64_t v121;
  unint64_t v122;
  unsigned int v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  CGFloat v129;
  CGFloat v130;
  CGFloat v131;
  CGFloat v132;
  void *v133;
  TSWPLineFragmentArray **v134;
  CGFloat v135;
  CGFloat v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  double v141;
  double rect;
  void *v143;
  _BOOL4 v144;
  double v145;
  double **v146;
  double r1;
  CGFloat r1_8;
  CGFloat r1_16;
  double r1_24;
  NSUInteger v151;
  double v152;
  CGFloat v153;
  double v154;
  CGFloat v155;
  double v156;
  CGFloat v157;
  double v158;
  double v159;
  double v160;
  double v161;
  CGFloat x;
  double y;
  uint64_t r2;
  CGFloat r2a;
  double r2b;
  unint64_t r2_8;
  NSUInteger r2_16;
  double r2_16a;
  unint64_t r2_24;
  int v171;
  id v172;
  id v173;
  double v174;
  double v175;
  CGFloat v176;
  double v177;
  TSWPParagraphEnumerator v178;
  CGRect v179;
  CGRect v180;
  CGRect v181;
  CGRect v182;
  CGRect v183;
  CGRect v184;
  CGRect v185;
  CGRect v186;
  CGRect v187;
  CGRect v188;
  CGRect v189;
  CGRect v190;
  CGRect v191;
  CGRect v192;
  CGRect v193;
  CGRect v194;

  v5 = a1;
  v6 = (TSWPLineFragmentArray **)objc_msgSend(a1, "lineFragmentArray");
  v7 = (void *)objc_msgSend(v5, "storage");
  v151 = *MEMORY[0x24BEB3BF0];
  v8 = objc_msgSend(v5, "range");
  v139 = v9;
  v10 = objc_msgSend(v7, "selectionRangeForCharIndex:", v8);
  v137 = v11;
  v138 = v10;
  if (v7)
    objc_msgSend(v7, "paragraphEnumeratorAtCharIndex:styleProvider:", v8, a3);
  else
    memset(&v178, 0, sizeof(v178));
  objc_msgSend(v5, "wpBounds");
  r1 = v12;
  v135 = v14;
  v136 = v13;
  rect = v15;
  width = *(double *)(MEMORY[0x24BDBF090] + 16);
  x = *MEMORY[0x24BDBF090];
  y = *(double *)(MEMORY[0x24BDBF090] + 8);
  v17 = *(double *)(MEMORY[0x24BDBF090] + 24);
  v18 = *MEMORY[0x24BEB3BF0];
  r2_16 = *(_QWORD *)(MEMORY[0x24BEB3BF0] + 8);
  v19 = objc_msgSend(v7, "wpKind");
  v20 = 6.0;
  if (v19 == 5)
    v20 = 0.0;
  v158 = v20;
  v145 = *MEMORY[0x24BDBF148];
  v161 = *(double *)(MEMORY[0x24BDBF148] + 8);
  v141 = v161;
  if (a2)
  {
    objc_msgSend(a2, "adjustedInsets");
    v141 = v21;
  }
  v140 = v8;
  v133 = v7;
  v134 = v6;
  v22 = *(double ***)*v6;
  v146 = (double **)*((_QWORD *)*v6 + 1);
  if (v22 != v146)
  {
    v23 = 0;
    r2_8 = 0;
    r2_24 = 0;
    v24 = 0;
    v154 = 0.0;
    v156 = 0.0;
    v25 = v151;
    v152 = 0.0;
    v159 = 0.0;
    height = v17;
    r1_16 = width;
    r1_24 = y;
    r1_8 = x;
    v143 = v5;
    while (1)
    {
      v27 = *v22;
      v28 = *(_QWORD *)*v22;
      r2 = *((_QWORD *)*v22 + 1);
      if (v28 < v18 || v28 - v18 >= r2_16)
      {
        v30 = TSWPParagraphEnumerator::paragraphTextRange(&v178);
        if (v28 >= v30 + v31 && !TSWPParagraphEnumerator::isLastParagraph(&v178))
        {
          TSWPParagraphEnumerator::operator++(&v178);
          if (v28 != TSWPParagraphEnumerator::paragraphTextRange(&v178))
          {
            v32 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
            v33 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "static void TSWPLayoutChore::addParagraphAdornmentsToColumn(TSWPColumn *, id<TSWPColumnMetrics>, id<TSWPStyleProvider>)");
            objc_msgSend(v32, "handleFailureInFunction:file:lineNumber:description:", v33, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 1012, CFSTR("paragraph enumerator is out of sync with line fragments"));
          }
        }
        v34 = TSWPParagraphEnumerator::paragraphTextRange(&v178);
        r2_16 = v35;
        v18 = v34;
        v36 = (void *)TSWPParagraphEnumerator::paragraphStyle(&v178, 0);
        v37 = objc_msgSend(v36, "valueForProperty:", 98);
        if (r2_8 && (objc_msgSend((id)r2_8, "isEqual:", v37) & 1) == 0)
        {
          v171 = 1;
          v172 = 0;
          v173 = (id)r2_8;
          v174 = r1_8;
          v175 = r1_24;
          v176 = r1_16;
          v177 = height;
          objc_msgSend(v5, "addAdornmentRect:", &v171);
          v151 = *MEMORY[0x24BEB3BF0];

        }
        v38 = v37 == objc_msgSend(MEMORY[0x24BDBCEF8], "null", v133) ? 0 : v37;
        r2_8 = v38;
        if (v36 != v23)
          break;
      }
LABEL_57:
      if (v28 == v18 && (v24 & 0xFFFFFFFD) == 1)
      {
        v63 = height;
        v64 = v27[15];
        v65 = v27[16];
        v66 = v27[18];
        v67 = v27[4];
        v68 = v27[5];
        v171 = 2;
        v69 = (id)r2_24;
        v70 = v65 + v66;
        if (v65 + v66 < v64)
          v70 = v64;
        v172 = v69;
        v173 = 0;
        v174 = r1 + v154 + (v156 - v152) * 0.5;
        v175 = v67 + v68 - (v159 + v161 + v158 + v70);
        v176 = v152;
        v177 = 0.0;
        objc_msgSend(v5, "addAdornmentRect:", &v171, v133);

        height = v63;
      }
      v71 = r2 + v28;
      if (r2 + v28 == r2_16 + v18 && (v24 & 0xFFFFFFFE) == 2)
      {
        v73 = height;
        v74 = v27[17];
        v75 = v27[4];
        v76 = v27[5];
        v171 = 2;
        v172 = (id)r2_24;
        v173 = 0;
        v174 = r1 + v154 + (v156 - v152) * 0.5;
        v175 = v159 + v161 + v158 + v74 + v75 + v76;
        v176 = v152;
        v177 = 0.0;
        objc_msgSend(v5, "addAdornmentRect:", &v171);

        height = v73;
      }
      if (r2_8)
      {
        v78 = v27[7];
        v80 = v27[20] + v27[17] + v27[4] + v27[5];
        v81 = v80 - v78;
        if (v151 == 0x7FFFFFFFFFFFFFFFLL)
        {
          r1_8 = v27[6];
          r1_16 = v27[8];
          r1_24 = v27[7];
          height = v80 - v78;
          v151 = v28;
        }
        else
        {
          v181.origin.x = r1_8;
          v181.size.width = r1_16;
          v181.origin.y = r1_24;
          v181.size.height = height;
          v77 = *((_QWORD *)v27 + 6);
          v79 = *((_QWORD *)v27 + 8);
          v182 = CGRectUnion(v181, *(CGRect *)(&v78 - 1));
          r1_8 = v182.origin.x;
          r1_16 = v182.size.width;
          r1_24 = v182.origin.y;
          height = v182.size.height;
        }
      }
      if (v24 == 4 && r2_24)
      {
        v82 = height;
        v83 = v27[20];
        v84 = v27[6];
        v85 = v27[7];
        v86 = v27[8];
        v87 = v27[4] + v27[5];
        v88 = v83 + v27[17] + v87 - v85;
        r2a = v84;
        if (v25 == 0x7FFFFFFFFFFFFFFFLL)
        {
          v89 = v27[18];
          v90 = v27[15];
          v91 = v27[16];
          v92 = *((_QWORD *)v27 + 7);
          v93 = *((_QWORD *)v27 + 8);
          v94 = v88;
          MaxY = CGRectGetMaxY(*(CGRect *)&v84);
          v96 = v89 + v91;
          if (v89 + v91 < v90)
            v96 = v90;
          v85 = v87 - v96;
          v88 = MaxY - (v87 - v96);
          width = *(double *)(MEMORY[0x24BDBF070] + 16);
          x = *MEMORY[0x24BDBF070];
          y = *(double *)(MEMORY[0x24BDBF070] + 8);
          v17 = *(double *)(MEMORY[0x24BDBF070] + 24);
          height = v82;
LABEL_84:
          v84 = r2a;
        }
        else
        {
          if (v71 == r2_16 + v18)
          {
            v97 = *((_QWORD *)v27 + 7);
            v98 = *((_QWORD *)v27 + 8);
            v99 = v83 + v27[17] + v87 - v85;
            height = v82;
            v88 = CGRectGetMaxY(*(CGRect *)&v84) - v83 - v85;
            v28 = v25;
            goto LABEL_84;
          }
          v28 = v25;
          height = v82;
        }
        v100 = v85;
        v101 = v86;
        v102 = v88;
        if (CGRectIsEmpty(*(CGRect *)&v84))
        {
          v103 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
          v104 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "static void TSWPLayoutChore::addParagraphAdornmentsToColumn(TSWPColumn *, id<TSWPColumnMetrics>, id<TSWPStyleProvider>)");
          objc_msgSend(v103, "handleFailureInFunction:file:lineNumber:description:", v104, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 1136, CFSTR("Adding empty border stroke rect"));
        }
        v183.origin.x = x;
        v183.origin.y = y;
        v183.size.width = width;
        v183.size.height = v17;
        v194.origin.x = r2a;
        v194.origin.y = v85;
        v194.size.width = v86;
        v194.size.height = v88;
        v184 = CGRectUnion(v183, v194);
        x = v184.origin.x;
        y = v184.origin.y;
        width = v184.size.width;
        v17 = v184.size.height;
        goto LABEL_89;
      }
      v28 = v25;
LABEL_89:
      v22 += 2;
      v25 = v28;
      if (v22 == v146)
        goto LABEL_92;
    }
    v39 = objc_msgSend(v36, "intValueForProperty:", 102);
    v40 = v39;
    v42 = v24 == 4 && v39 != 4;
    v144 = v42;
    if (v39)
    {
      v43 = (void *)objc_msgSend(v36, "valueForProperty:", 103);
      if (v43)
      {
        v44 = v43 != (void *)objc_msgSend(MEMORY[0x24BDBCEF8], "null");
        if (!v44)
          v43 = 0;
      }
      else
      {
        v44 = 0;
      }
      objc_msgSend((id)objc_msgSend(v36, "valueForProperty:", 105), "sizeValue");
      v45 = v47;
      v46 = v48;
      v159 = 0.0;
      if (v44)
      {
        objc_msgSend(v43, "width");
        v159 = v49 * 0.5;
      }
      if (v24 == 4)
      {
        v5 = v143;
        if (r2_24)
        {
          if (v45 != v145)
            goto LABEL_49;
          if (v46 != v161)
            goto LABEL_49;
          v5 = v143;
          if ((objc_msgSend((id)r2_24, "isEqual:", v43) & 1) == 0)
            goto LABEL_49;
        }
      }
      else
      {
        v5 = v143;
      }
    }
    else
    {
      v43 = 0;
      v45 = *MEMORY[0x24BDBF148];
      v46 = *(double *)(MEMORY[0x24BDBF148] + 8);
    }
    if (!v144)
    {
LABEL_50:
      if ((v40 - 1) > 2)
      {
        v161 = v46;
      }
      else
      {
        objc_msgSend(v36, "floatValueForProperty:", 82);
        v55 = v54;
        objc_msgSend(v36, "floatValueForProperty:", 80);
        v57 = v56;
        objc_msgSend(v36, "floatValueForProperty:", 81);
        v59 = v58;
        objc_msgSend(v36, "floatValueForProperty:", 104);
        if (v57 >= v59)
          v61 = v59;
        else
          v61 = v57;
        v161 = v46;
        v154 = v61;
        v156 = rect - v61 - v55;
        v152 = v156 * v60;
      }
      v145 = v45;
      v24 = v40;
      r2_24 = (unint64_t)v43;
      v23 = v36;
      goto LABEL_57;
    }
LABEL_49:
    objc_msgSend((id)r2_24, "width");
    v51 = v50 * 0.5;
    v52 = -(v158 + v145 + v51);
    v53 = -(v158 + v161 + v51);
    v179.origin.x = x;
    v179.origin.y = y;
    v179.size.width = width;
    v179.size.height = v17;
    v180 = CGRectInset(v179, v52, v53);
    x = v180.origin.x;
    y = v180.origin.y;
    width = v180.size.width;
    v17 = v180.size.height;
    v171 = 2;
    v172 = (id)r2_24;
    v173 = 0;
    v174 = x;
    v175 = y;
    v176 = width;
    v177 = v17;
    objc_msgSend(v5, "addAdornmentRect:", &v171);
    v25 = *MEMORY[0x24BEB3BF0];

    goto LABEL_50;
  }
  v24 = 0;
  r2_24 = 0;
  r2_8 = 0;
  r1_8 = x;
  r1_16 = width;
  r1_24 = y;
  height = v17;
LABEL_92:
  if (r2_8 | r2_24)
  {
    v105 = height;
    Object = (double *)TSWPLineFragmentArray::lastObject(*v134);
    v107 = Object[16];
    r2b = Object[15];
    v108 = Object[17];
    r2_16a = Object[18];
    v109 = Object[20];
    v110 = Object[4];
    v111 = Object[5];
    v185.origin.x = r1;
    v185.size.height = v135;
    v185.origin.y = v136;
    v185.size.width = rect;
    v112 = CGRectGetMaxY(v185);
    v113 = v109 + v108 + v110 + v111;
    v114 = v141 + v112;
    v115 = v141 + v112 - v113;
    if (r2_8)
    {
      v116 = v140 + v139;
      v117 = v138 + v137;
      v118 = v105;
      if (v140 + v139 <= v138
        || v116 >= v117
        || (v119 = objc_msgSend(v133, "characterAtIndex:", v116 - 1), v119 <= 0xF) && ((1 << v119) & 0x9070) != 0)
      {
        if (v116 == v117 && v115 > 0.0 && v115 < v108 + v107 + r2_16a)
        {
          v186.origin.x = r1_8;
          v186.size.width = r1_16;
          v186.origin.y = r1_24;
          v186.size.height = v105;
          v118 = v114 - CGRectGetMinY(v186);
        }
      }
      else
      {
        v157 = *(double *)(MEMORY[0x24BDBF070] + 8);
        v125 = *(double *)(MEMORY[0x24BDBF070] + 24);
        v153 = *MEMORY[0x24BDBF070];
        v155 = *(double *)(MEMORY[0x24BDBF070] + 16);
        v188.origin.x = r1;
        v188.size.height = v135;
        v188.origin.y = v136;
        v188.size.width = rect;
        v160 = CGRectGetMaxY(v188);
        v189.origin.x = r1_8;
        v189.size.width = r1_16;
        v189.origin.y = r1_24;
        v189.size.height = v118;
        v126 = v141 + v160 - CGRectGetMinY(v189);
        if (v118 < v126)
          v118 = v126;
        if (v125 != 0.0)
        {
          v190.origin.x = v153;
          v190.size.width = v155;
          v190.origin.y = v157;
          v190.size.height = v125;
          v127 = CGRectGetMinY(v190) - r1_24;
          if (v127 < v118)
            v118 = v127;
        }
      }
      v171 = 1;
      v172 = 0;
      v173 = (id)r2_8;
      v174 = r1_8;
      v175 = r1_24;
      v176 = r1_16;
      v177 = v118;
      objc_msgSend(v5, "addAdornmentRect:", &v171);

    }
    if (v24 == 4 && r2_24)
    {
      v121 = v140 + v139;
      v122 = v138 + v137;
      if (v140 + v139 <= v138
        || v121 >= v122
        || (v123 = objc_msgSend(v133, "characterAtIndex:", v121 - 1), v123 <= 0xF) && ((1 << v123) & 0x9070) != 0)
      {
        if (v121 == v122 && v115 > 0.0)
        {
          v124 = r2b;
          if (v107 >= r2b)
            v124 = v107;
          if (v115 < v108 + r2_16a + v124)
          {
            v187.origin.x = x;
            v187.origin.y = y;
            v187.size.width = width;
            v187.size.height = v17;
            v17 = v114 - CGRectGetMinY(v187);
          }
        }
      }
      else
      {
        v191.origin.x = r1;
        v191.size.height = v135;
        v191.origin.y = v136;
        v191.size.width = rect;
        v128 = v141 + CGRectGetMaxY(v191) - y;
        if (v17 < v128)
          v17 = v128;
      }
      v192.origin.x = x;
      v192.origin.y = y;
      v192.size.width = width;
      v192.size.height = v17;
      v193 = CGRectInset(v192, -v158 - v145, -v158 - v161);
      v129 = v193.origin.x;
      v130 = v193.origin.y;
      v131 = v193.size.width;
      v132 = v193.size.height;
      v171 = 2;
      v172 = (id)r2_24;
      v173 = 0;
      v174 = v129;
      v175 = v130;
      v176 = v131;
      v177 = v132;
      objc_msgSend(v5, "addAdornmentRect:", &v171);

    }
  }
  TSWPParagraphEnumerator::~TSWPParagraphEnumerator(&v178);
}

void sub_2178F8108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,TSWPAdornmentRect *a32)
{
  uint64_t v32;

  TSWPParagraphEnumerator::~TSWPParagraphEnumerator((TSWPParagraphEnumerator *)(v32 - 208));
  _Unwind_Resume(a1);
}

void TSWPLayoutChore::addChangeBarAdornmentsToColumn(void *a1, void *a2)
{
  TSWPLineFragment ****v4;
  TSWPLineFragment **v5;
  TSWPLineFragment **v6;
  int v7;
  void *v8;
  double *v9;
  CGFloat height;
  CGFloat width;
  CGFloat y;
  double x;
  uint64_t v14;
  unsigned int v15;
  id v16;
  double v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  BOOL v24;
  CGRect v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;

  v4 = (TSWPLineFragment ****)objc_msgSend(a1, "lineFragmentArray");
  v5 = **v4;
  v6 = (*v4)[1];
  if (v5 != v6)
  {
    LOBYTE(v7) = 0;
    v8 = 0;
    v9 = (double *)MEMORY[0x24BDBF070];
    width = *(double *)(MEMORY[0x24BDBF070] + 16);
    height = *(double *)(MEMORY[0x24BDBF070] + 24);
    x = *MEMORY[0x24BDBF070];
    y = *(double *)(MEMORY[0x24BDBF070] + 8);
    while (1)
    {
      v14 = (uint64_t)*v5;
      v15 = *((_DWORD *)*v5 + 6);
      if ((v15 & 0x80000) == 0)
      {
        if ((v7 & 1) != 0)
        {
          pAddChangeBarAdornmentRect(a1, a2, v8, x, y, width, height);
          v8 = 0;
          x = *v9;
          y = v9[1];
          width = v9[2];
          height = v9[3];
        }
        goto LABEL_14;
      }
      v16 = +[TSDColorFill colorWithColor:](TSDColorFill, "colorWithColor:", TSWPLineFragment::changeAdornmentMarkupColor(*v5));
      v17 = pChangeBarRectForLineFragment(v14, a1, a2);
      v19 = v18;
      v21 = v20;
      v23 = v22;
      v27.origin.x = v17;
      v27.origin.y = v18;
      v27.size.width = v20;
      v27.size.height = v22;
      *(CGRect *)(v14 + 80) = CGRectUnion(*(CGRect *)(v14 + 80), v27);
      if ((v7 & 1) != 0)
      {
        if (objc_msgSend(v16, "isEqual:", v8))
          v24 = v17 == x;
        else
          v24 = 0;
        if (v24)
        {
          v25.origin.x = x;
          v25.origin.y = y;
          v25.size.width = width;
          v25.size.height = height;
          v28.origin.x = v17;
          v28.origin.y = v19;
          v28.size.width = v21;
          v28.size.height = v23;
          v26 = CGRectUnion(v25, v28);
          x = v26.origin.x;
          y = v26.origin.y;
          width = v26.size.width;
          height = v26.size.height;
          goto LABEL_14;
        }
        pAddChangeBarAdornmentRect(a1, a2, v8, x, y, width, height);
      }
      x = v17;
      y = v19;
      width = v21;
      height = v23;
      v8 = v16;
LABEL_14:
      v7 = (v15 >> 19) & 1;
      v5 += 2;
      if (v5 == v6)
      {
        if ((v15 & 0x80000) != 0)
          pAddChangeBarAdornmentRect(a1, a2, v8, x, y, width, height);
        return;
      }
    }
  }
}

uint64_t TSWPLayoutChore::pHandleSync(uint64_t result, void *a2, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  void *v9;
  void *v10;

  if (a3)
  {
    v5 = result;
    *a3 = 0;
    v6 = *(_QWORD *)(result + 2032);
    v7 = *(_QWORD *)(result + 80);
    if ((v6 == 0x7FFFFFFFFFFFFFFFLL || v7 >= *(_QWORD *)(result + 2040) + v6) && v7 < *(_QWORD *)(result + 64))
    {
      result = objc_msgSend(*(id *)(result + 2056), "nextTargetTopicNumbers");
      if (!result
        || (result = TSWPTopicNumberHints::equivalentState((TSWPTopicNumberHints *)result, (const TSWPTopicNumberHints *)(v5 + 768)), (_DWORD)result))
      {
        if (*(_QWORD *)(v5 + 536))
        {
          v8 = *(_BYTE *)(v5 + 641);
LABEL_9:
          *a3 = v8;
          return result;
        }
        result = objc_msgSend(a2, "nextTargetFirstColumn");
        if (result)
        {
          v9 = (void *)result;
          result = objc_msgSend((id)result, "startCharIndex");
          if (result == *(_QWORD *)(v5 + 80) - *(_QWORD *)(v5 + 2048))
          {
            result = objc_msgSend(v9, "startAnchoredCharIndex");
            if (result == *(_QWORD *)(v5 + 88) - *(_QWORD *)(v5 + 2048) && !*(_BYTE *)(v5 + 640))
            {
              v10 = (void *)objc_msgSend(*(id *)(v5 + 2056), "nextTargetFirstChildHint");
              result = objc_opt_respondsToSelector();
              if ((result & 1) == 0 || (result = objc_msgSend(v10, "isFirstHint"), (_DWORD)result))
              {
                v8 = 1;
                goto LABEL_9;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t TSWPLayoutChore::pIsLastColumn(id *this)
{
  void *v2;
  uint64_t v3;
  uint64_t result;

  if (!objc_msgSend(this[1], "wpKind"))
  {
    v2 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v3 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "BOOL TSWPLayoutChore::pIsLastColumn()");
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 5792, CFSTR("pIsLastColumn doesn't work on the body"));
  }
  result = objc_msgSend(this[257], "isLastTarget");
  if ((_DWORD)result)
    return objc_msgSend((id)objc_msgSend(this[257], "columns"), "lastObject") == (_QWORD)this[23];
  return result;
}

uint64_t TSWPLineFragment::singleColor(TSWPLineFragment *this)
{
  return *((_QWORD *)this + 67);
}

double TSWPLineFragment::baselineAtCharIndex(TSWPLineFragment *this, TSWPLineFragment *a2, TSWPStorage *a3, TSWPColumn *a4)
{
  double v4;

  v4 = *((double *)this + 4) + *((double *)this + 5);
  return v4
       + TSWPLineFragment::baselineAdjustAtCharIndex(a2, (void *)-[TSWPStorage storage](a3, "storage"), a3, a4, -[TSWPStorage scaleTextPercent](a3, "scaleTextPercent"));
}

double TSWPLineFragment::baselineAdjustAtCharIndex(TSWPLineFragment *this, void *a2, TSWPStorage *a3, TSWPColumn *a4, unint64_t a5)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  int v14;
  const __CTFont *FontForStyle;
  CGFloat Size;
  const __CTFont *CopyWithAttributes;
  const __CTFont *v18;
  double v19;
  double Ascent;
  double Descent;
  double v22;
  _QWORD v24[3];

  v24[2] = *MEMORY[0x24BDAC8D0];
  v9 = objc_msgSend(a2, "characterStyleAtCharIndex:left:effectiveRange:", this, a4, 0);
  if (!-[TSWPStorage styleProvider](a3, "styleProvider"))
  {
    v10 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v11 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "static CGFloat TSWPLineFragment::baselineAdjustAtCharIndex(TSWPCharIndex, TSWPStorage *, TSWPColumn *, BOOL, NSUInteger)");
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 98, CFSTR("No style provider."));
  }
  v12 = (void *)objc_msgSend((id)-[TSWPStorage styleProvider](a3, "styleProvider"), "paragraphStyleAtParIndex:effectiveRange:", objc_msgSend(a2, "paragraphIndexAtCharIndex:", this), 0);
  v24[0] = v9;
  v24[1] = v12;
  v13 = TSWPResolveIntPropertyForStyles((uint64_t)v24, 2uLL, 36, 0);
  if (v13)
  {
    v14 = v13;
    FontForStyle = TSWPFastCreateFontForStyle(v9, v12, a5);
    Size = CTFontGetSize(FontForStyle);
    CopyWithAttributes = CTFontCreateCopyWithAttributes(FontForStyle, Size * 1.5, 0, 0);
    v18 = CopyWithAttributes;
    if (v14 == 2)
    {
      Descent = CTFontGetDescent(CopyWithAttributes);
      v19 = Descent - CTFontGetDescent(FontForStyle);
    }
    else
    {
      v19 = 0.0;
      if (v14 == 1)
      {
        Ascent = CTFontGetAscent(CopyWithAttributes);
        v19 = CTFontGetAscent(FontForStyle) - Ascent;
      }
    }
    CFRelease(v18);
    CFRelease(FontForStyle);
  }
  else
  {
    v19 = 0.0;
  }
  TSWPResolveFloatPropertyForStyles(v24, 2uLL, 33);
  return v19 - v22;
}

_QWORD *TSWPResolveFloatPropertyForStyles(_QWORD *result, unint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  float v8;
  double v9;

  if (a2)
  {
    v5 = result;
    v6 = 0;
    v7 = 1;
    do
    {
      result = (_QWORD *)v5[v6];
      if (result)
      {
        result = (_QWORD *)objc_msgSend(result, "floatValueForProperty:", a3);
        v9 = v8;
      }
      else
      {
        v9 = INFINITY;
      }
      v6 = v7;
      if (v7 >= a2)
        break;
      ++v7;
    }
    while (v9 == INFINITY);
  }
  return result;
}

uint64_t TSWPResolveIntPropertyForStyles(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9;
  void *v10;
  unsigned int v11;

  if (a2)
  {
    v8 = 0;
    v9 = 1;
    do
    {
      v10 = *(void **)(a1 + 8 * v8);
      if (v10)
        v11 = objc_msgSend(v10, "intValueForProperty:", a3);
      else
        v11 = 0x80000000;
      v8 = v9;
      if (v9 >= a2)
        break;
      ++v9;
    }
    while (v11 == 0x80000000);
    if (v11 == 0x80000000)
      return a4;
    else
      return v11;
  }
  return a4;
}

double TSWPLineFragment::textRect(TSWPLineFragment *this, char a2)
{
  unint64_t v4;
  NSUInteger v5;
  _NSRange v6;
  double v7;
  double x;
  double v9;
  CGFloat y;
  double v11;
  CGFloat width;
  double v13;
  CGFloat height;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  CGFloat v24;
  CGFloat v25;
  void *__p[3];
  CGRect v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;

  v4 = *((_QWORD *)this + 1) + *(_QWORD *)this + ((int)(*((_DWORD *)this + 6) << 20) >> 31);
  if (*(_QWORD *)this <= v4)
    v5 = *((_QWORD *)this + 1) + *(_QWORD *)this + ((int)(*((_DWORD *)this + 6) << 20) >> 31);
  else
    v5 = *(_QWORD *)this;
  if (*(_QWORD *)this >= v4)
    v6.location = *((_QWORD *)this + 1) + *(_QWORD *)this + ((int)(*((_DWORD *)this + 6) << 20) >> 31);
  else
    v6.location = *(_QWORD *)this;
  v6.length = v5 - v6.location;
  TSWPLineFragment::rectsForLineRange(this, v6, 0, a2, 1, 1, (double **)__p);
  TSWPUnionRects((CGRect **)__p);
  x = v7;
  y = v9;
  width = v11;
  height = v13;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v15 = *((_DWORD *)this + 6);
  if ((v15 & 2) == 0
    || (v16 = *((_QWORD *)this + 24), v17 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 25) - v16) >> 4), v17 < 2))
  {
LABEL_14:
    if ((v15 & 0x800000) == 0)
      return x;
    goto LABEL_15;
  }
  v18 = v16 + 48;
  v19 = v17 - 1;
  while ((*(_BYTE *)(v18 + 40) & 2) == 0)
  {
    v18 += 48;
    if (!--v19)
      goto LABEL_14;
  }
  v24 = *(double *)(v18 + 8);
  v31.size.width = CTLineGetTypographicBounds(*(CTLineRef *)v18, 0, 0, 0);
  v28.origin.x = x;
  v28.origin.y = y;
  v28.size.width = width;
  v28.size.height = height;
  v31.origin.x = v24;
  v31.origin.y = y;
  v31.size.height = height;
  v29 = CGRectUnion(v28, v31);
  x = v29.origin.x;
  y = v29.origin.y;
  width = v29.size.width;
  height = v29.size.height;
  if ((*((_DWORD *)this + 6) & 0x800000) != 0)
  {
LABEL_15:
    v20 = *((_QWORD *)this + 24);
    v21 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 25) - v20) >> 4);
    if (v21 >= 2)
    {
      v22 = v20 + 48;
      v23 = v21 - 1;
      while ((*(_BYTE *)(v22 + 40) & 4) == 0)
      {
        v22 += 48;
        if (!--v23)
          return x;
      }
      v25 = *(double *)(v22 + 8);
      v32.size.width = CTLineGetTypographicBounds(*(CTLineRef *)v22, 0, 0, 0);
      v30.origin.x = x;
      v30.origin.y = y;
      v30.size.width = width;
      v30.size.height = height;
      v32.origin.x = v25;
      v32.origin.y = y;
      v32.size.height = height;
      *(_QWORD *)&x = (unint64_t)CGRectUnion(v30, v32);
    }
  }
  return x;
}

void sub_2178F9304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void TSWPUnionRects(CGRect **a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  CGRect *v5;
  CGRect *v6;

  v1 = *MEMORY[0x24BDBF070];
  v2 = *(_QWORD *)(MEMORY[0x24BDBF070] + 8);
  v3 = *(_QWORD *)(MEMORY[0x24BDBF070] + 16);
  v4 = *(_QWORD *)(MEMORY[0x24BDBF070] + 24);
  v5 = *a1;
  v6 = a1[1];
  while (v5 != v6)
    *(CGRect *)&v1 = CGRectUnion(*(CGRect *)&v1, *v5++);
}

uint64_t TSWPLineFragment::getCharIndexData(TSWPLineFragment *this)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  const __CTLine *v7;
  const __CFArray *GlyphRuns;
  const __CFArray *v9;
  CFIndex Count;
  CFIndex v11;
  const __CTRun *ValueAtIndex;
  const __CFDictionary *Attributes;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __n128 v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  int v32;
  const __CTLine *v33;
  void *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  void **v47;
  unint64_t v48;
  unint64_t v49;
  CGFloat v50;
  _OWORD *v51;
  unint64_t v52;
  _OWORD *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  __n128 *v60;
  __n128 *v61;
  char *v62;
  __n128 v63;
  __n128 v64;
  void *v65;
  uint64_t v66;
  __int128 *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  __int128 *v74;
  __int128 *v75;
  double *v76;
  double v77;
  int v78;
  uint64_t v79;
  __int128 *v80;
  uint64_t v82;
  BOOL v83;
  double v84;
  __int128 *v85;
  unint64_t v86;
  uint64_t v87;
  void *v89;
  unint64_t v90;
  __int128 **v91;
  unint64_t location;
  CGFloat v93[2];
  __int128 v94;
  __int128 v95;
  __n128 v96;
  CGFloat secondaryOffset;
  _QWORD *v98;
  _BYTE *v99;
  uint64_t v100;

  if (*((_QWORD *)this + 25) != *((_QWORD *)this + 24) && (*((_BYTE *)this + 25) & 0x40) == 0)
  {
    v2 = (void *)*((_QWORD *)this + 64);
    objc_sync_enter(v2);
    if (*((_QWORD *)this + 61) == *((_QWORD *)this + 62))
    {
      v89 = v2;
      if (!*((_QWORD *)this + 23))
      {
        v3 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
        v4 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "const std::vector<TSWPLFCharIndexData> &TSWPLineFragment::getCharIndexData() const");
        objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 2278, CFSTR("invalid nil value for '%s'"), "_textSource");
      }
      if (!*((_QWORD *)this + 64))
      {
        v5 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
        v6 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "const std::vector<TSWPLFCharIndexData> &TSWPLineFragment::getCharIndexData() const");
        objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 2279, CFSTR("invalid nil value for '%s'"), "_paragraphString");
      }
      v98 = 0;
      v99 = 0;
      v100 = 0;
      TSWPLineFragment::fillWritingDirectionRuns((uint64_t *)this, &v98);
      v7 = (const __CTLine *)**((_QWORD **)this + 24);
      if ((*((_BYTE *)this + 26) & 0x80) != 0
        && (GlyphRuns = CTLineGetGlyphRuns(**((CTLineRef **)this + 24)), (v9 = GlyphRuns) != 0)
        && (Count = CFArrayGetCount(GlyphRuns), Count >= 1))
      {
        v11 = 0;
        while (1)
        {
          ValueAtIndex = (const __CTRun *)CFArrayGetValueAtIndex(v9, v11);
          Attributes = CTRunGetAttributes(ValueAtIndex);
          if (CFDictionaryContainsKey(Attributes, CFSTR("__TSWPTruncationKey")))
            break;
          if (Count == ++v11)
            goto LABEL_14;
        }
        location = CTRunGetStringRange(ValueAtIndex).location;
      }
      else
      {
LABEL_14:
        location = 0x7FFFFFFFFFFFFFFFLL;
      }
      v14 = *(_QWORD *)this;
      v15 = *((_QWORD *)this + 1);
      v16 = objc_msgSend(*((id *)this + 23), "charIndexRemappedFromStorage:", *(_QWORD *)this);
      v90 = v15 + v14;
      v91 = (__int128 **)((char *)this + 488);
      if (v16 < v15 + v14)
      {
        v18 = 0x7FFFFFFFFFFFFFFFLL;
        while (1)
        {
          v19 = objc_msgSend(*((id *)this + 23), "charRangeMappedFromStorage:", v16, 1);
          v20 = v19;
          if (location != 0x7FFFFFFFFFFFFFFFLL && location <= v19)
            goto LABEL_84;
          secondaryOffset = 0.0;
          *(_QWORD *)&v94 = CTLineGetOffsetForStringIndex(v7, v19, &secondaryOffset);
          *((CGFloat *)&v94 + 1) = secondaryOffset;
          v96.n128_u8[0] = 1;
          v96.n128_u64[1] = 0x7FFFFFFFFFFFFFFFLL;
          v21 = 0xCCCCCCCCCCCCCCCDLL * ((v99 - (_BYTE *)v98) >> 3);
          if (v18 < v21)
          {
            v22 = (char *)&v98[5 * v18];
            v24 = *((_QWORD *)v22 + 2);
            v23 = *((_QWORD *)v22 + 3);
            v26 = v16 >= v24;
            v25 = v16 - v24;
            v26 = !v26 || v25 >= v23;
            if (!v26)
              goto LABEL_38;
          }
          if (v99 != (_BYTE *)v98)
            break;
          v18 = 0;
LABEL_39:
          if (v18 >= v21 || v98[5 * v18 + 2] != v16 || v18 >= v21 - 1)
          {
LABEL_42:
            if ((*((_DWORD *)this + 6) & 0x1000) != 0)
            {
              v32 = objc_msgSend(*((id *)this + 23), "characterAtIndex:", v20);
              if (v32 == 9 || v32 == 65532 || v32 == 14)
                *(_QWORD *)&v94 = TSWPLineFragment::getLocalRunOffsetForCharIndex(this, v20, (double *)&v94 + 1);
            }
          }
          v33 = v7;
          v34 = (void *)*((_QWORD *)this + 64);
          v35 = objc_msgSend(*((id *)this + 23), "charIndexMappedFromStorage:", v16);
          if (objc_msgSend(v34, "length") <= v35)
          {
            v42 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
            v43 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSUInteger countOfComposedCharacters(NSString *, NSUInteger)");
            objc_msgSend(v42, "handleFailureInFunction:file:lineNumber:description:", v43, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 1944, CFSTR("Index exceeds bounds. index: %ld string length: %ld"), v35, objc_msgSend(v34, "length"));
            v41 = 0;
          }
          else
          {
            v36 = objc_msgSend(v34, "rangeOfComposedCharacterSequenceAtIndex:", v35);
            v38 = v37;
            if (v36 == 0x7FFFFFFFFFFFFFFFLL || !v37)
            {
              v39 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
              v40 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSUInteger countOfComposedCharacters(NSString *, NSUInteger)");
              objc_msgSend(v39, "handleFailureInFunction:file:lineNumber:description:", v40, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 1951, CFSTR("Unexpected 0 length for composed sequence."));
            }
            if (v38)
              v41 = v38;
            else
              v41 = 1;
          }
          v44 = objc_msgSend(*((id *)this + 23), "charIndexMappedToStorage:", v41 + v20);
          v45 = v41 + v16;
          v46 = v20 + v41;
          v48 = v90;
          v47 = (void **)((char *)this + 488);
          do
          {
            if (v44 >= v45)
              break;
            v44 = objc_msgSend(*((id *)this + 23), "charIndexMappedToStorage:", ++v46);
          }
          while (v46 < objc_msgSend(*((id *)this + 23), "length"));
          if (v16 <= v44)
            v49 = v44;
          else
            v49 = v16;
          if (v16 >= v44)
            v50 = *(double *)&v44;
          else
            v50 = *(double *)&v16;
          v93[0] = v50;
          *(_QWORD *)&v93[1] = v49 - *(_QWORD *)&v50;
          v51 = (_OWORD *)*((_QWORD *)this + 62);
          v52 = *((_QWORD *)this + 63);
          if ((unint64_t)v51 >= v52)
          {
            v54 = ((char *)v51 - (char *)*v91) >> 6;
            v55 = v54 + 1;
            if ((unint64_t)(v54 + 1) >> 58)
              std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
            v56 = v52 - (_QWORD)*v91;
            if (v56 >> 5 > v55)
              v55 = v56 >> 5;
            if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFC0)
              v57 = 0x3FFFFFFFFFFFFFFLL;
            else
              v57 = v55;
            if (v57)
            {
              v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TSWPLFCharIndexData>>((uint64_t)this + 504, v57);
              v48 = v90;
              v47 = (void **)((char *)this + 488);
            }
            else
            {
              v58 = 0;
            }
            v59 = &v58[64 * v54];
            *(_OWORD *)v59 = *(_OWORD *)v93;
            *((_OWORD *)v59 + 1) = v94;
            *((_OWORD *)v59 + 2) = v95;
            v17 = v96;
            *((__n128 *)v59 + 3) = v96;
            v61 = (__n128 *)*((_QWORD *)this + 61);
            v60 = (__n128 *)*((_QWORD *)this + 62);
            v62 = v59;
            if (v60 != v61)
            {
              do
              {
                v17 = v60[-4];
                v63 = v60[-3];
                v64 = v60[-1];
                *((__n128 *)v62 - 2) = v60[-2];
                *((__n128 *)v62 - 1) = v64;
                *((__n128 *)v62 - 4) = v17;
                *((__n128 *)v62 - 3) = v63;
                v62 -= 64;
                v60 -= 4;
              }
              while (v60 != v61);
              v60 = (__n128 *)*v47;
            }
            v53 = v59 + 64;
            *((_QWORD *)this + 61) = v62;
            *((_QWORD *)this + 62) = v59 + 64;
            *((_QWORD *)this + 63) = &v58[64 * v57];
            if (v60)
              operator delete(v60);
          }
          else
          {
            *v51 = *(_OWORD *)v93;
            v51[1] = v94;
            v51[2] = v95;
            v17 = v96;
            v51[3] = v96;
            v53 = v51 + 4;
          }
          *((_QWORD *)this + 62) = v53;
          if (v16 >= v44)
          {
            v65 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
            v7 = v33;
            v66 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "const std::vector<TSWPLFCharIndexData> &TSWPLineFragment::getCharIndexData() const");
            objc_msgSend(v65, "handleFailureInFunction:file:lineNumber:description:", v66, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 2385, CFSTR("textSource failed to advance"));
            goto LABEL_84;
          }
          v16 = v49;
          v7 = v33;
          if (v49 >= v48)
            goto LABEL_84;
        }
        v27 = 0;
        if (v21 <= 1)
          v18 = 1;
        else
          v18 = 0xCCCCCCCCCCCCCCCDLL * ((v99 - (_BYTE *)v98) >> 3);
        v28 = v98 + 3;
        while (1)
        {
          v29 = *(v28 - 1);
          v26 = v16 >= v29;
          v30 = v16 - v29;
          if (v26 && v30 < *v28)
            break;
          v28 += 5;
          if (v18 == ++v27)
            goto LABEL_42;
        }
        v18 = v27;
LABEL_38:
        v96.n128_u8[0] = v98[5 * v18 + 4];
        v96.n128_u64[1] = v18;
        goto LABEL_39;
      }
LABEL_84:
      v67 = (__int128 *)*((_QWORD *)this + 62);
      v68 = (uint64_t)v67 - *((_QWORD *)this + 61);
      if (v68)
      {
        v69 = 0;
        v70 = v68 >> 6;
        v71 = v70 - 1;
        if (v70 <= 1)
          v72 = 1;
        else
          v72 = v70;
        v73 = *((_DWORD *)this + 6);
        do
        {
          v74 = *v91;
          v75 = &(*v91)[4 * v69];
          v76 = (double *)(v75 + 1);
          if ((v73 & 0x1000) == 0)
            v76 = (double *)v75 + 3;
          v77 = *v76;
          if (v69 == v71)
          {
            v93[0] = 0.0;
            v17.n128_f64[0] = CTLineGetOffsetForStringIndex(v7, objc_msgSend(*((id *)this + 23), "charIndexMappedFromStorage:", v90), v93);
            v73 = *((_DWORD *)this + 6);
            if ((v73 & 0x1000) != 0 && LOBYTE(v74[4 * v71 + 3]))
              v17.n128_f64[0] = v93[0];
            v78 = LOBYTE(v74[4 * v71 + 3]);
            v74 = *v91;
            v79 = v69 + 1;
          }
          else
          {
            v79 = v69 + 1;
            v78 = *((unsigned __int8 *)v75 + 48);
            v80 = &v74[4 * v69 + 4];
            if (v78 == *((unsigned __int8 *)v80 + 48) || (v73 & 0x1000) == 0)
              v82 = 16;
            else
              v82 = 24;
            v17.n128_u64[0] = *(_QWORD *)((char *)v80 + v82);
          }
          v83 = v78 == 0;
          if (v78)
            v84 = v77;
          else
            v84 = v17.n128_f64[0];
          v85 = &v74[4 * v69];
          if (v83)
            v17.n128_f64[0] = v77;
          *((double *)v85 + 4) = v84;
          *((_QWORD *)v85 + 5) = v17.n128_u64[0];
          v69 = v79;
        }
        while (v79 != v72);
        v67 = (__int128 *)*((_QWORD *)this + 62);
      }
      else
      {
        v74 = (__int128 *)*((_QWORD *)this + 62);
      }
      *(_QWORD *)&v93[0] = compareByGlyphPosition;
      v86 = 126 - 2 * __clz(((char *)v67 - (char *)v74) >> 6);
      if (v67 == v74)
        v87 = 0;
      else
        v87 = v86;
      v2 = v89;
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&),TSWPLFCharIndexData*,false>(v74, v67, (uint64_t (**)(__int128 *, __int128 *))v93, v87, 1, v17);
      if (v98)
      {
        v99 = v98;
        operator delete(v98);
      }
    }
    objc_sync_exit(v2);
  }
  return (uint64_t)this + 488;
}

void sub_2178F9B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
  uint64_t v12;
  void *v14;

  v14 = *(void **)(v12 - 128);
  if (v14)
  {
    *(_QWORD *)(v12 - 120) = v14;
    operator delete(v14);
  }
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&),TSWPLFCharIndexData*,false>(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5, __n128 a6)
{
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 *v21;
  char v22;
  BOOL v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

LABEL_1:
  v10 = a2 - 4;
  v11 = a1;
LABEL_2:
  v12 = 1 - a4;
  while (2)
  {
    a1 = v11;
    v13 = v12;
    v14 = (char *)a2 - (char *)v11;
    v15 = ((char *)a2 - (char *)v11) >> 6;
    switch(v15)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)(a2 - 4, v11))
        {
          v32 = v11[2];
          v34 = v11[3];
          v28 = *v11;
          v30 = v11[1];
          v24 = *v10;
          v25 = *(a2 - 3);
          v26 = *(a2 - 1);
          v11[2] = *(a2 - 2);
          v11[3] = v26;
          *v11 = v24;
          v11[1] = v25;
          *v10 = v28;
          *(a2 - 3) = v30;
          *(a2 - 2) = v32;
          *(a2 - 1) = v34;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&),TSWPLFCharIndexData*>(v11, v11 + 4, a2 - 4, a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&),TSWPLFCharIndexData*>((uint64_t)v11, v11 + 4, v11 + 8, a2 - 4, a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&),TSWPLFCharIndexData*>((uint64_t)v11, v11 + 4, v11 + 8, v11 + 12, a2 - 4, a3);
        return;
      default:
        if (v14 <= 1535)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&),TSWPLFCharIndexData*>((uint64_t)v11, a2, (uint64_t (**)(_OWORD *, _QWORD))a3);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&),TSWPLFCharIndexData*>((uint64_t)v11, a2, a3);
          return;
        }
        if (v13 != 1)
        {
          v16 = v15 >> 1;
          v17 = &v11[4 * (v15 >> 1)];
          if ((unint64_t)v14 <= 0x2000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&),TSWPLFCharIndexData*>(&v11[4 * (v15 >> 1)], v11, a2 - 4, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&),TSWPLFCharIndexData*>(v11, &v11[4 * (v15 >> 1)], a2 - 4, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&),TSWPLFCharIndexData*>(v11 + 4, v17 - 4, a2 - 8, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&),TSWPLFCharIndexData*>(v11 + 8, &v11[4 * v16 + 4], a2 - 12, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&),TSWPLFCharIndexData*>(v17 - 4, v17, &v11[4 * v16 + 4], a3);
            v31 = v11[2];
            v33 = v11[3];
            v27 = *v11;
            v29 = v11[1];
            v18 = *v17;
            v19 = v17[1];
            v20 = v17[3];
            v11[2] = v17[2];
            v11[3] = v20;
            *v11 = v18;
            v11[1] = v19;
            v17[2] = v31;
            v17[3] = v33;
            *v17 = v27;
            v17[1] = v29;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)(v11 - 4, v11) & 1) == 0)
          {
            v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TSWPLFCharIndexData *,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&)>(v11, a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v21 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TSWPLFCharIndexData *,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&)>(v11, a2, a3);
          if ((v22 & 1) == 0)
            goto LABEL_14;
          v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&),TSWPLFCharIndexData*>(v11, v21, a3);
          v11 = v21 + 4;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&),TSWPLFCharIndexData*>(v21 + 4, a2, a3))
          {
            v12 = v13 + 1;
            if (v23)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&),TSWPLFCharIndexData*,false>(a1, v21, a3, -v13, a5 & 1);
            v11 = v21 + 4;
LABEL_16:
            a5 = 0;
            a4 = -v13;
            goto LABEL_2;
          }
          a4 = -v13;
          a2 = v21;
          if (v23)
            return;
          goto LABEL_1;
        }
        if (v11 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TSWPLFCharIndexData const&,TSWPLFCharIndexData const&),TSWPLFCharIndexData*,TSWPLFCharIndexData*>((uint64_t)v11, (__n128 *)a2, (__n128 *)a2, (unsigned int (**)(__n128 *, __n128 *))a3, a6);
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = a2 - v9;
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - v9) >> 3);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)((const EQKit::StemStretch::Key *)((char *)a2 - 40), v9))
          std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:nn180100](v9, (uint64_t)a2 - 40);
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(v9, (EQKit::StemStretch::Key *)((char *)v9 + 40), (uint64_t)a2 - 40, a3);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(v9, (EQKit::StemStretch::Key *)((char *)v9 + 40), (EQKit::StemStretch::Key *)((char *)v9 + 80), (uint64_t)a2 - 40, a3);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(v9, (EQKit::StemStretch::Key *)((char *)v9 + 40), (EQKit::StemStretch::Key *)((char *)v9 + 80), (EQKit::StemStretch::Key *)((char *)v9 + 120), (uint64_t)a2 - 40, a3);
        return;
      default:
        if (v12 <= 959)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((uint64_t)v9, a2, (uint64_t (**)(const void **, uint64_t))a3);
          else
            std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((uint64_t)v9, a2, (uint64_t (**)(const void **, uint64_t))a3);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = (EQKit::StemStretch::Key *)((char *)v9 + 40 * (v13 >> 1));
          if ((unint64_t)v12 < 0x1401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(v15, v9, (uint64_t)a2 - 40, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(v9, v15, (uint64_t)a2 - 40, a3);
            v16 = 5 * v14;
            v17 = (EQKit::StemStretch::Key *)((char *)v9 + 40 * v14 - 40);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((EQKit::StemStretch::Key *)((char *)v9 + 40), v17, (uint64_t)a2 - 80, a3);
            v18 = (EQKit::StemStretch::Key *)((char *)v9 + 80);
            v19 = (EQKit::StemStretch::Key *)((char *)v9 + 8 * v16 + 40);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(v18, v19, (uint64_t)a2 - 120, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(v17, v15, (uint64_t)v19, a3);
            std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:nn180100](a1, (uint64_t)v15);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)((EQKit::StemStretch::Key *)((char *)a1 - 40), a1) & 1) == 0)
          {
            v9 = std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,std::pair<EQKit::StemStretch::Key,unsigned long> *,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&)>(a1, (unint64_t)a2, (uint64_t (**)(const void **, EQKit::StemStretch::Key *))a3);
            goto LABEL_16;
          }
LABEL_11:
          v20 = (EQKit::StemStretch::Key *)std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,std::pair<EQKit::StemStretch::Key,unsigned long> *,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&)>(a1, (unint64_t)a2, (uint64_t (**)(char *, const void **))a3);
          if ((v21 & 1) == 0)
            goto LABEL_14;
          v22 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((uint64_t)a1, v20, a3);
          v9 = (EQKit::StemStretch::Key *)((char *)v20 + 40);
          if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((uint64_t)v20 + 40, a2, a3))
          {
            v10 = v11 + 1;
            if ((v22 & 1) != 0)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*,false>(a1, v20, a3, -v11, a5 & 1);
            v9 = (EQKit::StemStretch::Key *)((char *)v20 + 40);
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v20;
          if ((v22 & 1) != 0)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*,std::pair<EQKit::StemStretch::Key,unsigned long>*>(v9, a2, a2, (uint64_t (**)(uint64_t, uint64_t))a3);
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = a2 - v9;
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - v9) >> 3);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)((const EQKit::OpticalKern::Glyph::Key *)((char *)a2 - 40), v9))
          std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:nn180100](v9, (uint64_t)a2 - 40);
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(v9, (EQKit::OpticalKern::Glyph::Key *)((char *)v9 + 40), (uint64_t)a2 - 40, a3);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(v9, (EQKit::OpticalKern::Glyph::Key *)((char *)v9 + 40), (EQKit::OpticalKern::Glyph::Key *)((char *)v9 + 80), (uint64_t)a2 - 40, a3);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(v9, (EQKit::OpticalKern::Glyph::Key *)((char *)v9 + 40), (EQKit::OpticalKern::Glyph::Key *)((char *)v9 + 80), (EQKit::OpticalKern::Glyph::Key *)((char *)v9 + 120), (uint64_t)a2 - 40, a3);
        return;
      default:
        if (v12 <= 959)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>((uint64_t)v9, a2, (uint64_t (**)(const void **, uint64_t))a3);
          else
            std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>((uint64_t)v9, a2, (uint64_t (**)(const void **, uint64_t))a3);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = (EQKit::OpticalKern::Glyph::Key *)((char *)v9 + 40 * (v13 >> 1));
          if ((unint64_t)v12 < 0x1401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(v15, v9, (uint64_t)a2 - 40, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(v9, v15, (uint64_t)a2 - 40, a3);
            v16 = 5 * v14;
            v17 = (EQKit::OpticalKern::Glyph::Key *)((char *)v9 + 40 * v14 - 40);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>((EQKit::OpticalKern::Glyph::Key *)((char *)v9 + 40), v17, (uint64_t)a2 - 80, a3);
            v18 = (EQKit::OpticalKern::Glyph::Key *)((char *)v9 + 80);
            v19 = (EQKit::OpticalKern::Glyph::Key *)((char *)v9 + 8 * v16 + 40);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(v18, v19, (uint64_t)a2 - 120, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(v17, v15, (uint64_t)v19, a3);
            std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:nn180100](a1, (uint64_t)v15);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)((EQKit::OpticalKern::Glyph::Key *)((char *)a1 - 40), a1) & 1) == 0)
          {
            v9 = std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> *,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&)>(a1, (unint64_t)a2, (uint64_t (**)(const void **, EQKit::OpticalKern::Glyph::Key *))a3);
            goto LABEL_16;
          }
LABEL_11:
          v20 = (EQKit::OpticalKern::Glyph::Key *)std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> *,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&)>(a1, (unint64_t)a2, (uint64_t (**)(char *, const void **))a3);
          if ((v21 & 1) == 0)
            goto LABEL_14;
          v22 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>((uint64_t)a1, v20, a3);
          v9 = (EQKit::OpticalKern::Glyph::Key *)((char *)v20 + 40);
          if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>((uint64_t)v20 + 40, a2, a3))
          {
            v10 = v11 + 1;
            if ((v22 & 1) != 0)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*,false>(a1, v20, a3, -v11, a5 & 1);
            v9 = (EQKit::OpticalKern::Glyph::Key *)((char *)v20 + 40);
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v20;
          if ((v22 & 1) != 0)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(v9, a2, a2, (uint64_t (**)(uint64_t, uint64_t))a3);
        return;
    }
  }
}

  v10 = (uint64_t *)a1;
  while (2)
  {
    a1 = (__int128 *)v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = ((char *)a2 - (char *)v10) >> 4;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v33 = *a3;
        v34 = (std::__shared_weak_count *)*(a2 - 1);
        v55 = *(a2 - 2);
        v56 = v34;
        if (v34)
        {
          p_shared_owners = (unint64_t *)&v34->__shared_owners_;
          do
            v36 = __ldxr(p_shared_owners);
          while (__stxr(v36 + 1, p_shared_owners));
        }
        v37 = v10[1];
        v53 = *v10;
        v54 = (std::__shared_weak_count *)v37;
        if (v37)
        {
          v38 = (unint64_t *)(v37 + 8);
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
        }
        v40 = v33(&v55, &v53);
        v41 = v54;
        if (v54)
        {
          v42 = (unint64_t *)&v54->__shared_owners_;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        v44 = v56;
        if (v56)
        {
          v45 = (unint64_t *)&v56->__shared_owners_;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        if (v40)
        {
          v47 = *v10;
          *v10 = *(a2 - 2);
          *(a2 - 2) = v47;
          v48 = v10[1];
          v10[1] = *(a2 - 1);
          *(a2 - 1) = v48;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(v10, v10 + 2, a2 - 2, a3);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(v10, v10 + 2, v10 + 4, a2 - 2, a3);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(v10, v10 + 2, v10 + 4, v10 + 6, a2 - 2, a3);
        return;
      default:
        if (v11 <= 383)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>((uint64_t)v10, a2, a3);
          else
            std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>((uint64_t)v10, (uint64_t)a2, a3);
          return;
        }
        if (!a4)
        {
          if (v10 != a2)
            std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(v10, a2, a2, (uint64_t (**)(uint64_t *, __int128 *))a3);
          return;
        }
        v13 = v12 >> 1;
        v14 = &v10[2 * (v12 >> 1)];
        if ((unint64_t)v11 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(&v10[2 * (v12 >> 1)], v10, a2 - 2, a3);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(v10, &v10[2 * (v12 >> 1)], a2 - 2, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(v10 + 2, v14 - 2, a2 - 4, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(v10 + 4, &v10[2 * v13 + 2], a2 - 6, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(v14 - 2, v14, &v10[2 * v13 + 2], a3);
          v15 = *(_OWORD *)v10;
          *(_OWORD *)v10 = *(_OWORD *)v14;
          *(_OWORD *)v14 = v15;
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          v16 = *a3;
          v17 = (std::__shared_weak_count *)*(v10 - 1);
          v51 = *(v10 - 2);
          v52 = v17;
          if (v17)
          {
            v18 = (unint64_t *)&v17->__shared_owners_;
            do
              v19 = __ldxr(v18);
            while (__stxr(v19 + 1, v18));
          }
          v20 = v10[1];
          v49 = *v10;
          v50 = (std::__shared_weak_count *)v20;
          if (v20)
          {
            v21 = (unint64_t *)(v20 + 8);
            do
              v22 = __ldxr(v21);
            while (__stxr(v22 + 1, v21));
          }
          v23 = v16(&v51, &v49);
          v24 = v50;
          if (v50)
          {
            v25 = (unint64_t *)&v50->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          v27 = v52;
          if (v52)
          {
            v28 = (unint64_t *)&v52->__shared_owners_;
            do
              v29 = __ldaxr(v28);
            while (__stlxr(v29 - 1, v28));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
          }
          if ((v23 & 1) == 0)
          {
            v10 = (uint64_t *)std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const> *,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>)>(a1, (__int128 *)a2, a3);
            a5 = 0;
            continue;
          }
        }
        v30 = (uint64_t *)std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const> *,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>)>((uint64_t)a1, (__int128 *)a2, (uint64_t (**)(uint64_t *, __int128 *))a3);
        if ((v31 & 1) == 0)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*,false>(a1, v30, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v30 + 2;
          continue;
        }
        v32 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>((uint64_t *)a1, v30, a3);
        v10 = v30 + 2;
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(v30 + 2, a2, a3))
        {
          if (v32)
            continue;
          goto LABEL_29;
        }
        a2 = v30;
        if (!v32)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = a2 - 10;
  v10 = (int *)a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)v10) >> 3);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, a2 - 10, v10))
        {
          v33 = *((_QWORD *)v10 + 4);
          v29 = *(_OWORD *)v10;
          v31 = *((_OWORD *)v10 + 1);
          v26 = *(_OWORD *)v9;
          v27 = *(_OWORD *)(a2 - 6);
          *((_QWORD *)v10 + 4) = *((_QWORD *)a2 - 1);
          *(_OWORD *)v10 = v26;
          *((_OWORD *)v10 + 1) = v27;
          *(_OWORD *)v9 = v29;
          *(_OWORD *)(a2 - 6) = v31;
          *((_QWORD *)a2 - 1) = v33;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(v10, v10 + 10, a2 - 10, a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>((uint64_t)v10, v10 + 10, v10 + 20, (__int128 *)(a2 - 10), a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>((uint64_t)v10, v10 + 10, v10 + 20, (__int128 *)(v10 + 30), (__int128 *)(a2 - 10), a3);
        return;
      default:
        if (v13 <= 959)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>((uint64_t)v10, (uint64_t)a2, a3);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>((uint64_t)v10, (uint64_t)a2, a3);
          return;
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = &v10[10 * (v14 >> 1)];
          if ((unint64_t)v13 < 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(v16, v10, a2 - 10, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(v10, v16, a2 - 10, a3);
            v17 = 5 * v15;
            v18 = &v10[10 * v15 - 10];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(v10 + 10, v18, a2 - 20, a3);
            v19 = v10 + 20;
            v20 = &v10[2 * v17 + 10];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(v19, v20, a2 - 30, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(v18, v16, v20, a3);
            v32 = *(_QWORD *)(a1 + 32);
            v28 = *(_OWORD *)a1;
            v30 = *(_OWORD *)(a1 + 16);
            v21 = *(_OWORD *)v16;
            v22 = *((_OWORD *)v16 + 1);
            *(_QWORD *)(a1 + 32) = *((_QWORD *)v16 + 4);
            *(_OWORD *)a1 = v21;
            *(_OWORD *)(a1 + 16) = v22;
            *((_QWORD *)v16 + 4) = v32;
            *(_OWORD *)v16 = v28;
            *((_OWORD *)v16 + 1) = v30;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if ((boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, (int *)(a1 - 40), (int *)a1) & 1) == 0)
          {
            v10 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::site_event<int> *,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &>((int *)a1, (unint64_t)a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v23 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::site_event<int> *,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &>((__int128 *)a1, a2, a3);
          if ((v24 & 1) == 0)
            goto LABEL_14;
          v25 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(a1, v23, a3);
          v10 = (int *)(v23 + 40);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(v23 + 40, (uint64_t)a2, a3))
          {
            v11 = v12 + 1;
            if (v25)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*,false>(a1, v23, a3, -v12, a5 & 1);
            v10 = (int *)(v23 + 40);
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = (int *)v23;
          if (v25)
            return;
          goto LABEL_1;
        }
        if (v10 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*,boost::polygon::detail::site_event<int>*>((uint64_t)v10, (__int128 *)a2, (__int128 *)a2, a3);
        return;
    }
  }
}

NSUInteger TSWPLineFragment::rectsForLineRange@<X0>(TSWPLineFragment *this@<X0>, _NSRange a2@<0:X1, 8:X2>, NSArray **a3@<X6>, char a4@<W3>, char a5@<W4>, int a6@<W5>, double **a7@<X8>)
{
  double y;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  void *v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  double TypographicBounds;
  CGFloat x;
  double v26;
  double height;
  double v28;
  char *v29;
  uint64_t v30;
  unsigned int v31;
  NSRange v32;
  uint64_t *CharIndexData;
  uint64_t v34;
  NSArray **v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  double v39;
  double v40;
  void *v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  int v45;
  double v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  double v59;
  double v60;
  double *v61;
  double *v62;
  double MaxX;
  double MinX;
  NSRange v65;
  double *v66;
  double *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  double *v73;
  char *v74;
  __int128 v75;
  char *v76;
  NSRange v77;
  int v78;
  double v79;
  unint64_t v80;
  double v81;
  double *v82;
  unint64_t v83;
  double *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  double *v88;
  double *v89;
  double *v90;
  uint64_t v91;
  double *v92;
  double *v93;
  __int128 v94;
  NSUInteger result;
  double **v96;
  double v97;
  _QWORD *v98;
  NSArray *v100;
  uint64_t v101;
  void *__p;
  _BYTE *v104;
  uint64_t v105;
  CGFloat descent;
  CGFloat ascent[2];
  NSRange v108;
  CGRect v109;
  CGRect v110;
  CGRect v111;
  CGRect v112;
  CGRect v113;
  CGRect v114;
  CGRect v115;
  CGRect v116;

  if (a2.location < *(_QWORD *)this || a2.location + a2.length > *((_QWORD *)this + 1) + *(_QWORD *)this)
  {
    v16 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v17 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "CGRectVector TSWPLineFragment::rectsForLineRange(NSRange, BOOL, BOOL, BOOL, NSArray **) const");
    objc_msgSend(v16, "handleFailureInFunction:file:lineNumber:description:", v17, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 237, CFSTR("Bad range"));
  }
  if (a3)
    v100 = (NSArray *)(id)objc_msgSend(objc_alloc(MEMORY[0x24BDBCEB8]), "initWithCapacity:", 1);
  else
    v100 = 0;
  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
  if ((a4 & 1) != 0)
    v18 = *((double *)this + 9);
  else
    v18 = *((double *)this + 14) + *((double *)this + 18) + *((double *)this + 16) + *((double *)this + 17);
  v19 = *((double *)this + 7);
  if ((a5 & 1) == 0)
  {
    v20 = *((double *)this + 14);
    v19 = v19 + v20;
    v18 = v18 - v20;
  }
  if (!a2.length)
  {
    v21 = TSWPLineFragment::wpOffsetForCharIndex(this, a2.location, 0, 1, 0);
    v22 = 0.0;
    goto LABEL_102;
  }
  v21 = *((double *)this + 6);
  v22 = *((double *)this + 8);
  v101 = *((_QWORD *)this + 24);
  if (*((_QWORD *)this + 25) == v101)
    goto LABEL_102;
  descent = 0.0;
  ascent[0] = 0.0;
  if (a6)
  {
    if (*((_QWORD *)this + 29) != *((_QWORD *)this + 28))
    {
      CTLineGetTypographicBounds(*(CTLineRef *)v101, ascent, &descent, 0);
      v23 = *((_QWORD *)this + 28);
      if (v23 != *((_QWORD *)this + 29))
      {
        v97 = *(double *)(v101 + 16) - ascent[0];
        do
        {
          TypographicBounds = CTLineGetTypographicBounds(*(CTLineRef *)v23, ascent, &descent, 0);
          x = *(double *)(v23 + 8);
          height = ascent[0] + descent;
          if (v23 == *((_QWORD *)this + 28))
          {
            y = *(double *)(v23 + 16) - ascent[0];
          }
          else
          {
            v109.origin.x = v10;
            v109.origin.y = y;
            v109.size.width = v9;
            v109.size.height = v8;
            v26 = *(double *)(v23 + 16) - ascent[0];
            v110 = CGRectUnion(v109, *(CGRect *)&x);
            x = v110.origin.x;
            y = v110.origin.y;
            TypographicBounds = v110.size.width;
            height = v110.size.height;
          }
          v23 += 48;
          v8 = height;
          v9 = TypographicBounds;
          v10 = x;
        }
        while (v23 != *((_QWORD *)this + 29));
        if (y < v97)
        {
          v28 = v97 - y - *((double *)this + 18);
          v19 = v19 - v28;
          v18 = v18 + v28;
        }
      }
    }
  }
  __p = 0;
  v104 = 0;
  v105 = 0;
  TSWPLineFragment::fillWritingDirectionRuns((uint64_t *)this, &__p);
  v29 = (char *)__p;
  if (__p != v104)
  {
    v30 = 0;
    v31 = 0;
    v96 = a7;
    v98 = a7 + 2;
    do
    {
      v32 = NSIntersectionRange(a2, *(NSRange *)&v29[40 * v30 + 16]);
      if (v32.length)
      {
        CharIndexData = (uint64_t *)TSWPLineFragment::getCharIndexData(this);
        v34 = *CharIndexData;
        if (CharIndexData[1] == *CharIndexData)
        {
          v39 = -INFINITY;
          v40 = -INFINITY;
LABEL_40:
          v41 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
          v42 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "CGRectVector TSWPLineFragment::rectsForLineRange(NSRange, BOOL, BOOL, BOOL, NSArray **) const");
          objc_msgSend(v41, "handleFailureInFunction:file:lineNumber:description:", v42, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 364, CFSTR("Failed to set start and end locations for sub-range %@"), NSStringFromRange(v32));
        }
        else
        {
          v35 = a3;
          v36 = 0;
          v37 = 0;
          v38 = 0;
          v39 = -INFINITY;
          v40 = -INFINITY;
          do
          {
            if (*(_QWORD *)(v34 + v36 + 56) == v30)
            {
              if (NSIntersectionRange(*(NSRange *)(v34 + v36), v32).length)
              {
                v34 = *CharIndexData;
                if ((v37 & 1) == 0)
                  v39 = *(double *)(v34 + v36 + 32);
                v40 = *(double *)(v34 + v36 + 40);
                v37 = 1;
              }
              else
              {
                if ((v37 & 1) != 0)
                {
                  a3 = v35;
                  a7 = v96;
                  goto LABEL_41;
                }
                v37 = 0;
                v34 = *CharIndexData;
              }
            }
            ++v38;
            v36 += 64;
          }
          while (v38 < (CharIndexData[1] - v34) >> 6);
          a3 = v35;
          a7 = v96;
          if ((v37 & 1) == 0)
            goto LABEL_40;
        }
LABEL_41:
        v43 = *((_DWORD *)this + 6);
        if ((v43 & 0x800) != 0)
        {
          v44 = v32.location + v32.length;
          if (v32.location + v32.length == *((_QWORD *)this + 1) + *(_QWORD *)this)
          {
            if ((v43 & 0x1000) != 0)
              v39 = TSWPLineFragment::wpOffsetForCharIndex(this, v44, 0, 1, 0)
                  - *(double *)(v101 + 8)
                  - *((double *)this + 6);
            else
              v40 = TSWPLineFragment::wpOffsetForCharIndex(this, v44, 0, 1, 0)
                  - *(double *)(v101 + 8)
                  - *((double *)this + 6);
          }
        }
        v45 = *((_DWORD *)this + 6);
        if ((v45 & 0x2000000) != 0)
        {
          v46 = *((double *)this + 6);
          v47 = *(double *)(v101 + 8) + v46;
          if (v32.location == *(_QWORD *)this)
          {
            v48 = *((_QWORD *)this + 7);
            v49 = *((_QWORD *)this + 8);
            v50 = *((_QWORD *)this + 9);
            if ((v45 & 0x1000) != 0)
              v40 = CGRectGetMaxX(*(CGRect *)&v46) - v47;
            else
              v39 = CGRectGetMinX(*(CGRect *)&v46) - v47;
          }
          if (v32.location + v32.length == *((_QWORD *)this + 1) + *(_QWORD *)this)
          {
            v51 = *((_QWORD *)this + 6);
            v52 = *((_QWORD *)this + 7);
            v53 = *((_QWORD *)this + 8);
            v54 = *((_QWORD *)this + 9);
            if ((*((_BYTE *)this + 25) & 0x10) != 0)
              v39 = CGRectGetMinX(*(CGRect *)&v51) - v47;
            else
              v40 = CGRectGetMaxX(*(CGRect *)&v51) - v47;
          }
        }
        v21 = v39 + *(double *)(v101 + 8) + *((double *)this + 6);
        v22 = v40 - v39;
        if (a6)
        {
          v55 = *((_QWORD *)this + 28);
          if (*((_QWORD *)this + 29) != v55)
          {
            v56 = v55 + 8;
            do
            {
              v57 = v56 - 8;
              v58 = CTLineGetTypographicBounds(*(CTLineRef *)(v56 - 8), 0, 0, 0);
              if (NSIntersectionRange(v32, *(NSRange *)(v56 + 16)).length)
              {
                v111.origin.x = v21;
                v111.origin.y = v19;
                v111.size.width = v22;
                v111.size.height = v18;
                v59 = *(double *)v56 + *((double *)this + 6);
                if (v59 < CGRectGetMinX(v111))
                {
                  v112.origin.x = v21;
                  v112.origin.y = v19;
                  v112.size.width = v22;
                  v112.size.height = v18;
                  v22 = CGRectGetMaxX(v112) - v59;
                  v21 = v59;
                }
                v113.origin.x = v21;
                v113.origin.y = v19;
                v113.size.width = v22;
                v113.size.height = v18;
                v60 = v58 + v59;
                if (v60 > CGRectGetMaxX(v113))
                {
                  v114.origin.x = v21;
                  v114.origin.y = v19;
                  v114.size.width = v22;
                  v114.size.height = v18;
                  v22 = v60 - CGRectGetMinX(v114);
                }
              }
              v56 += 48;
            }
            while (v57 + 48 != *((_QWORD *)this + 29));
          }
        }
        v62 = *a7;
        v61 = a7[1];
        if (*a7 == v61
          || (MaxX = CGRectGetMaxX(*(CGRect *)(v61 - 4)),
              v115.origin.x = v21,
              v115.origin.y = v19,
              v115.size.width = v22,
              v115.size.height = v18,
              MinX = CGRectGetMinX(v115),
              v62 = a7[1],
              vabdd_f64(MaxX, MinX) >= 0.00999999978))
        {
          if ((unint64_t)v62 >= *v98)
          {
            v67 = *a7;
            v68 = ((char *)v62 - (char *)*a7) >> 5;
            v69 = v68 + 1;
            if ((unint64_t)(v68 + 1) >> 59)
              std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
            v70 = *v98 - (_QWORD)v67;
            if (v70 >> 4 > v69)
              v69 = v70 >> 4;
            if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFE0)
              v71 = 0x7FFFFFFFFFFFFFFLL;
            else
              v71 = v69;
            if (v71)
            {
              v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::segment_data<double>>>((uint64_t)v98, v71);
              v67 = *a7;
              v62 = a7[1];
            }
            else
            {
              v72 = 0;
            }
            v73 = (double *)&v72[32 * v68];
            *v73 = v21;
            v73[1] = v19;
            v73[2] = v22;
            v73[3] = v18;
            if (v62 == v67)
            {
              v76 = &v72[32 * v68];
            }
            else
            {
              v74 = &v72[32 * v68];
              do
              {
                v75 = *((_OWORD *)v62 - 1);
                v76 = v74 - 32;
                *((_OWORD *)v74 - 2) = *((_OWORD *)v62 - 2);
                *((_OWORD *)v74 - 1) = v75;
                v62 -= 4;
                v74 -= 32;
              }
              while (v62 != v67);
            }
            v66 = v73 + 4;
            *a7 = (double *)v76;
            a7[1] = v73 + 4;
            a7[2] = (double *)&v72[32 * v71];
            if (v67)
              operator delete(v67);
          }
          else
          {
            *v62 = v21;
            v62[1] = v19;
            v66 = v62 + 4;
            v62[2] = v22;
            v62[3] = v18;
          }
          a7[1] = v66;
          if (a3)
            -[NSArray addObject:](v100, "addObject:", objc_msgSend(MEMORY[0x24BDD1968], "valueWithRange:", v32.location, v32.length));
        }
        else
        {
          v116.origin.x = v21;
          v116.origin.y = v19;
          v116.size.width = v22;
          v116.size.height = v18;
          *((CGRect *)v62 - 1) = CGRectUnion(*(CGRect *)(v62 - 4), v116);
          if (a3)
          {
            v108.location = objc_msgSend(-[NSArray lastObject](v100, "lastObject"), "rangeValue");
            v65 = NSUnionRange(v108, v32);
            -[NSArray setObject:atIndexedSubscript:](v100, "setObject:atIndexedSubscript:", objc_msgSend(MEMORY[0x24BDD1968], "valueWithRange:", v65.location, v65.length), -[NSArray count](v100, "count") - 1);
          }
        }
      }
      v29 = (char *)__p;
      v30 = ++v31;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v104 - (_BYTE *)__p) >> 3) > v31);
    goto LABEL_100;
  }
  v77 = NSIntersectionRange(a2, *(NSRange *)this);
  if (v77.length)
  {
    v78 = *((_DWORD *)this + 6);
    v79 = 0.0;
    if ((v78 & 0x800) != 0)
    {
      v80 = v77.location + v77.length;
      if (v77.location + v77.length == *((_QWORD *)this + 1) + *(_QWORD *)this)
      {
        if ((v78 & 0x1000) == 0)
        {
          v81 = TSWPLineFragment::wpOffsetForCharIndex(this, v80, 0, 1, 0)
              - *(double *)(v101 + 8)
              - *((double *)this + 6);
LABEL_99:
          v21 = v79 + *(double *)(v101 + 8) + *((double *)this + 6);
          v22 = v81 - v79;
          goto LABEL_100;
        }
        v79 = TSWPLineFragment::wpOffsetForCharIndex(this, v80, 0, 1, 0)
            - *(double *)(v101 + 8)
            - *((double *)this + 6);
      }
    }
    v81 = 0.0;
    goto LABEL_99;
  }
LABEL_100:
  if (__p)
  {
    v104 = __p;
    operator delete(__p);
  }
LABEL_102:
  v82 = *a7;
  if (*a7 == a7[1])
  {
    v83 = (unint64_t)a7[2];
    if ((unint64_t)v82 >= v83)
    {
      v85 = v83 - (_QWORD)v82;
      v86 = v85 >> 4;
      if ((unint64_t)(v85 >> 4) <= 1)
        v86 = 1;
      if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFE0)
        v87 = 0x7FFFFFFFFFFFFFFLL;
      else
        v87 = v86;
      v88 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::segment_data<double>>>((uint64_t)(a7 + 2), v87);
      v89 = *a7;
      v90 = a7[1];
      v92 = &v88[4 * v91];
      *v88 = v21;
      v88[1] = v19;
      v88[2] = v22;
      v88[3] = v18;
      v84 = v88 + 4;
      if (v90 != v89)
      {
        v93 = v88;
        do
        {
          v94 = *((_OWORD *)v90 - 1);
          v88 = v93 - 4;
          *((_OWORD *)v93 - 2) = *((_OWORD *)v90 - 2);
          *((_OWORD *)v93 - 1) = v94;
          v90 -= 4;
          v93 -= 4;
        }
        while (v90 != v89);
      }
      *a7 = v88;
      a7[1] = v84;
      a7[2] = v92;
      if (v89)
        operator delete(v89);
    }
    else
    {
      *v82 = v21;
      v82[1] = v19;
      v84 = v82 + 4;
      v82[2] = v22;
      v82[3] = v18;
    }
    a7[1] = v84;
  }
  result = -[NSArray count](v100, "count");
  if (!result)
    result = -[NSArray addObject:](v100, "addObject:", objc_msgSend(MEMORY[0x24BDD1968], "valueWithRange:", a2.location, a2.length));
  if (a3)
    *a3 = v100;
  return result;
}

void sub_2178FAB94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;
  void *v20;

  if (__p)
    operator delete(__p);
  v20 = *(void **)v18;
  if (*(_QWORD *)v18)
  {
    *(_QWORD *)(v18 + 8) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

void TSWPLineFragment::fillWritingDirectionRuns(uint64_t *a1, _QWORD *a2)
{
  const __CTLine **v3;
  const __CTLine *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  const __CTRun *v13;
  CFRange StringRange;
  const __CFDictionary *Attributes;
  const __CFDictionary *v17;
  CTRunStatus v18;
  int v19;
  int v20;
  BOOL v21;
  BOOL v23;
  const __CFString *v24;
  CFIndex location;
  CFIndex v26;
  BOOL v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  BOOL v44;
  CFIndex GlyphCount;
  uint64_t j;
  uint64_t v47;
  char v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  __int128 v63;
  __int128 v64;
  char **v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unsigned int v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  BOOL v87;
  char v88;
  uint64_t v89;
  void *v91;
  uint64_t v92;
  char **v93;
  char *v94;
  _QWORD *v95;
  unint64_t v96;
  unsigned int v97;
  unint64_t v98;
  char *v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  unint64_t v103;
  int64_t v104;
  char *v105;
  uint64_t v106;
  CFArrayRef obj;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  BOOL v114;
  BOOL v115;
  BOOL v116;
  CFIndex *buffer[3];
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  _BYTE v123[128];
  uint64_t v124;
  CFRange v125;

  v124 = *MEMORY[0x24BDAC8D0];
  v3 = (const __CTLine **)a1[24];
  if ((const __CTLine **)a1[25] != v3 && (*((_BYTE *)a1 + 25) & 0x40) == 0)
  {
    v4 = *v3;
    if (!a1[23])
    {
      v5 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
      v6 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSWPLineFragment::fillWritingDirectionRuns(vector<TSWPLFWritingDirectionRun> &) const");
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 1973, CFSTR("invalid nil value for '%s'"), "_textSource");
    }
    if (!a1[64])
    {
      v7 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
      v8 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSWPLineFragment::fillWritingDirectionRuns(vector<TSWPLFWritingDirectionRun> &) const");
      objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 1974, CFSTR("invalid nil value for '%s'"), "_paragraphString");
    }
    v111 = a1[28];
    v112 = a1[29];
    v108 = *((_DWORD *)a1 + 6);
    v119 = 0u;
    v120 = 0u;
    v121 = 0u;
    v122 = 0u;
    obj = CTLineGetGlyphRuns(v4);
    v113 = -[__CFArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v119, v123, 16);
    if (v113)
    {
      v109 = 0;
      v110 = *(_QWORD *)v120;
      v106 = (uint64_t)(a2 + 2);
      v9 = 1;
      v10 = -1;
      v11 = -1;
      v115 = 1;
      while (1)
      {
        for (i = 0; i != v113; ++i)
        {
          if (*(_QWORD *)v120 != v110)
            objc_enumerationMutation(obj);
          v13 = *(const __CTRun **)(*((_QWORD *)&v119 + 1) + 8 * i);
          StringRange = CTRunGetStringRange(v13);
          if (StringRange.length == 1 && v112 != v111)
          {
            Attributes = CTRunGetAttributes(v13);
            if (CFDictionaryContainsKey(Attributes, CFSTR("TSWPRubySpacingRunAttribute")))
              continue;
          }
          if ((v108 & 0x800000) != 0)
          {
            v17 = CTRunGetAttributes(v13);
            if (CFDictionaryContainsKey(v17, CFSTR("__TSWPTruncationKey")))
              goto LABEL_70;
          }
          v18 = CTRunGetStatus(v13) & 1;
          v114 = v18 == 0;
          if ((v9 & 1) != 0)
            v115 = (*((_BYTE *)a1 + 25) & 0x10) == 0;
          TSWPComposedCharacterAtIndexForTextSource(StringRange.location, (void *)a1[23]);
          v19 = TSWPGetBidiClass();
          v20 = v19;
          v21 = v19 == 3;
          if (v19 == 3 && StringRange.location != 0)
          {
            v23 = v19 == 3;
            v24 = (const __CFString *)a1[64];
            location = CTRunGetStringRange(v13).location;
            v26 = CFStringGetRangeOfComposedCharactersAtIndex(v24, location - 1).location;
            TSWPComposedCharacterAtIndexForTextSource(v26, (void *)a1[23]);
            v27 = TSWPGetBidiClass() != 0;
            v21 = v23;
            goto LABEL_29;
          }
          v27 = 0;
          if ((v18 ^ 1) != v115 || BYTE4(v109) & 1 | (v19 == 3))
          {
LABEL_29:
            if ((v9 & 1) == 0)
            {
              v28 = v115;
              v30 = a2[1];
              v29 = a2[2];
              if (v30 >= v29)
              {
                v116 = v21;
                v33 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v30 - *a2) >> 3);
                v34 = v33 + 1;
                if (v33 + 1 > 0x666666666666666)
                  std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
                v35 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v29 - *a2) >> 3);
                if (2 * v35 > v34)
                  v34 = 2 * v35;
                if (v35 >= 0x333333333333333)
                  v36 = 0x666666666666666;
                else
                  v36 = v34;
                if (v36)
                  v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::detail::site_event<int>>>(v106, v36);
                else
                  v37 = 0;
                v38 = &v37[40 * v33];
                *(_QWORD *)v38 = v11;
                *((_QWORD *)v38 + 1) = v10;
                v38[32] = v28;
                v38[33] = v109 & 1;
                v32 = a2;
                v40 = (char *)*a2;
                v39 = (char *)a2[1];
                v41 = v38;
                if (v39 != (char *)*a2)
                {
                  do
                  {
                    v42 = *(_OWORD *)(v39 - 40);
                    v43 = *(_OWORD *)(v39 - 24);
                    *((_QWORD *)v41 - 1) = *((_QWORD *)v39 - 1);
                    *(_OWORD *)(v41 - 24) = v43;
                    *(_OWORD *)(v41 - 40) = v42;
                    v41 -= 40;
                    v39 -= 40;
                  }
                  while (v39 != v40);
                  v39 = (char *)*a2;
                }
                v31 = v38 + 40;
                *a2 = v41;
                a2[1] = v38 + 40;
                a2[2] = &v37[40 * v36];
                if (v39)
                  operator delete(v39);
                v21 = v116;
              }
              else
              {
                *(_QWORD *)v30 = v11;
                *(_QWORD *)(v30 + 8) = v10;
                *(_BYTE *)(v30 + 32) = v115;
                v31 = (char *)(v30 + 40);
                *(_BYTE *)(v30 + 33) = v109 & 1;
                v32 = a2;
              }
              v32[1] = v31;
            }
            v44 = v20 == 3 && v27;
            LOBYTE(v109) = v44;
            BYTE4(v109) = v21;
            v10 = -1;
            v11 = -1;
            v115 = v114;
          }
          else
          {
            BYTE4(v109) = 0;
          }
          GlyphCount = CTRunGetGlyphCount(v13);
          std::vector<long>::vector(buffer, GlyphCount);
          v125.location = 0;
          v125.length = GlyphCount;
          CTRunGetStringIndices(v13, v125, buffer[0]);
          if (GlyphCount >= 1)
          {
            for (j = 0; j != GlyphCount; ++j)
            {
              v47 = objc_msgSend((id)a1[23], "charIndexMappedToStorage:", buffer[0][j]);
              if (v47 < v11 || v11 == -1)
                v11 = v47;
              if (v47 > v10 || v10 == -1)
                v10 = v47;
            }
          }
          if (buffer[0])
          {
            buffer[1] = buffer[0];
            operator delete(buffer[0]);
          }
          v9 = 0;
          continue;
        }
        v113 = -[__CFArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v119, v123, 16);
        if (!v113)
        {
LABEL_70:
          if (v11 != -1 && v10 != -1)
          {
            v50 = v109 & 1;
            v52 = a2[1];
            v51 = a2[2];
            if (v52 >= v51)
            {
              v54 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v52 - *a2) >> 3);
              v55 = v54 + 1;
              if (v54 + 1 > 0x666666666666666)
                std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
              v56 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v51 - *a2) >> 3);
              if (2 * v56 > v55)
                v55 = 2 * v56;
              if (v56 >= 0x333333333333333)
                v57 = 0x666666666666666;
              else
                v57 = v55;
              if (v57)
                v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::detail::site_event<int>>>(v106, v57);
              else
                v58 = 0;
              v59 = &v58[40 * v54];
              v60 = &v58[40 * v57];
              *(_QWORD *)v59 = v11;
              *((_QWORD *)v59 + 1) = v10;
              v59[32] = v115;
              v59[33] = v50;
              v53 = v59 + 40;
              v62 = (char *)*a2;
              v61 = (char *)a2[1];
              if (v61 == (char *)*a2)
              {
                v65 = (char **)a2;
              }
              else
              {
                do
                {
                  v63 = *(_OWORD *)(v61 - 40);
                  v64 = *(_OWORD *)(v61 - 24);
                  *((_QWORD *)v59 - 1) = *((_QWORD *)v61 - 1);
                  *(_OWORD *)(v59 - 24) = v64;
                  *(_OWORD *)(v59 - 40) = v63;
                  v59 -= 40;
                  v61 -= 40;
                }
                while (v61 != v62);
                v65 = (char **)a2;
                v61 = (char *)*a2;
              }
              *v65 = v59;
              v65[1] = v53;
              v65[2] = v60;
              if (v61)
                operator delete(v61);
            }
            else
            {
              *(_QWORD *)v52 = v11;
              *(_QWORD *)(v52 + 8) = v10;
              *(_BYTE *)(v52 + 32) = v115;
              v53 = (char *)(v52 + 40);
              *(_BYTE *)(v52 + 33) = v50;
            }
            a2[1] = v53;
          }
          break;
        }
      }
    }
  }
  v67 = (char *)*a2;
  v66 = (char *)a2[1];
  if (v66 != (char *)*a2)
  {
    v68 = 0;
    v69 = 0;
    v70 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v66[-*a2] >> 3);
    do
    {
      v71 = *a1;
      v72 = a1[1] + *a1;
      v73 = (uint64_t *)&v67[40 * v68];
      v74 = *v73;
      v75 = v73[1];
      v76 = (uint64_t *)(v67 + 8);
      v77 = 1;
      do
      {
        v79 = *(v76 - 1);
        v78 = *v76;
        v80 = *v76 > v71 && v78 <= v74;
        v81 = !v80;
        if (v79 <= v78)
          v82 = *v76;
        else
          v82 = *(v76 - 1);
        if (v79 >= v78)
          v83 = *v76;
        else
          v83 = *(v76 - 1);
        v84 = v81 == 0;
        if (v81)
          v85 = v71;
        else
          v85 = *v76;
        if (!v84)
          v82 = *(v76 - 1);
        if (v79 > v74 || v79 <= v71)
          v71 = v85;
        else
          v71 = v82;
        if (v75)
          v87 = v78 < v72;
        else
          v87 = 0;
        v88 = v87;
        if ((v88 & (v78 > v75)) != 0)
        {
          v89 = v83;
        }
        else
        {
          v78 = v72;
          v89 = *(v76 - 1);
        }
        if (v79 > v75 && v79 < v72)
          v72 = v89;
        else
          v72 = v78;
        v76 += 5;
        v80 = v70 > v77++;
      }
      while (v80);
      if (v72 >= v71)
      {
        v94 = &v67[40 * v68];
        *((_QWORD *)v94 + 2) = v71;
        *((_QWORD *)v94 + 3) = v72 - v71;
        v93 = (char **)a2;
      }
      else
      {
        v91 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
        v92 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSWPLineFragment::fillWritingDirectionRuns(vector<TSWPLFWritingDirectionRun> &) const");
        objc_msgSend(v91, "handleFailureInFunction:file:lineNumber:description:", v92, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 2113, CFSTR("Bad ranges in runs."));
        v93 = (char **)a2;
        *(_OWORD *)(*a2 + 40 * v68 + 16) = xmmword_217C27470;
        v66 = (char *)a2[1];
      }
      v67 = *v93;
      v70 = 0xCCCCCCCCCCCCCCCDLL * ((v66 - v67) >> 3);
      v68 = ++v69;
    }
    while (v70 > v69);
    v95 = a2;
    if (v66 != v67)
    {
      v96 = 0;
      v97 = 0;
      do
      {
        if (v70 - 1 > v96
          && (v98 = *(_QWORD *)&v67[40 * v97 + 56], v99 = &v67[40 * v96], v100 = *((_QWORD *)v99 + 2), v98 <= v100)
          && *(_QWORD *)&v67[40 * v97 + 64] + v98 >= *(_QWORD *)&v67[40 * v96 + 24] + v100)
        {
          v105 = (char *)(v66 - (v99 + 40));
          if (v66 != v99 + 40)
            memmove(&v67[40 * v96], v99 + 40, v66 - (v99 + 40));
          v66 = &v105[(_QWORD)v99];
          v95 = a2;
          a2[1] = &v105[(_QWORD)v99];
          --v97;
        }
        else if (v97)
        {
          v101 = *(_QWORD *)&v67[40 * v97 - 24];
          v102 = &v67[40 * v96];
          v103 = *((_QWORD *)v102 + 2);
          if (v101 <= v103 && *(_QWORD *)&v67[40 * v97 - 16] + v101 >= *(_QWORD *)&v67[40 * v96 + 24] + v103)
          {
            v104 = v66 - (v102 + 40);
            if (v66 != v102 + 40)
              memmove(v102, v102 + 40, v66 - (v102 + 40));
            v66 = &v102[v104];
            v95 = a2;
            a2[1] = &v102[v104];
            --v97;
          }
        }
        v67 = (char *)*v95;
        v70 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v66[-*v95] >> 3);
        v96 = ++v97;
      }
      while (v70 > v97);
    }
  }
}

void sub_2178FB500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t TSWPGetBidiClass()
{
  unsigned int v0;

  v0 = MEMORY[0x219A15E2C]();
  if (v0 > 0x12)
    return 0;
  else
    return dword_217C2BC50[v0];
}

uint64_t TSWPComposedCharacterAtIndexForTextSource(unint64_t a1, void *a2)
{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFString *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  int v19;
  uint64_t v20;
  uint64_t v21;

  if (!a2)
  {
    v4 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v5 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "UTF32Char TSWPComposedCharacterAtIndexForTextSource(TSWPCharIndex, id<TSWPTextSource>)");
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPUtilities.mm"), 1416, CFSTR("invalid nil value for '%s'"), "source");
  }
  v6 = objc_msgSend(a2, "length");
  if (v6 <= a1)
  {
    v16 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v17 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "UTF32Char TSWPComposedCharacterAtIndexForTextSource(TSWPCharIndex, id<TSWPTextSource>)");
    objc_msgSend(v16, "handleFailureInFunction:file:lineNumber:description:", v17, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPUtilities.mm"), 1418, CFSTR("index out of bounds"));
    return 0;
  }
  v7 = v6;
  v8 = objc_msgSend(a2, "characterAtIndex:", a1);
  if ((v8 & 0xFC00) == 0xDC00)
  {
    v9 = objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v10 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "UTF32Char TSWPComposedCharacterAtIndexForTextSource(TSWPCharIndex, id<TSWPTextSource>)");
    v11 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPUtilities.mm");
    v12 = CFSTR("index inside surrogate pair");
    v13 = (void *)v9;
    v14 = v10;
    v15 = 1423;
LABEL_6:
    objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, v11, v15, v12);
    return v8;
  }
  if (a1 + 1 < v7 && (v8 & 0xFC00) == 0xD800)
  {
    v19 = objc_msgSend(a2, "characterAtIndex:");
    if ((v19 & 0xFC00) == 0xDC00)
      return (v19 + ((_DWORD)v8 << 10) - 56613888);
    v20 = objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v21 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "UTF32Char TSWPComposedCharacterAtIndexForTextSource(TSWPCharIndex, id<TSWPTextSource>)");
    v11 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPUtilities.mm");
    v12 = CFSTR("invalid surrogate pair");
    v13 = (void *)v20;
    v14 = v21;
    v15 = 1428;
    goto LABEL_6;
  }
  return v8;
}

BOOL compareByGlyphPosition(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[7];
  v3 = a2[7];
  v4 = v2 >= v3;
  if (v2 == v3)
  {
    if (*((_BYTE *)a1 + 48))
    {
      v5 = *a1;
      v6 = *a2;
    }
    else
    {
      v5 = *a2;
      v6 = *a1;
    }
    v4 = v5 >= v6;
  }
  return !v4;
}

void TSWPLineFragment::topOfCap(TSWPLineFragment *this)
{
  CGRect v1;

  if ((*((_BYTE *)this + 27) & 2) != 0)
  {
    v1.origin.x = *((CGFloat *)this + 6);
    v1.origin.y = *((CGFloat *)this + 7);
    v1.size.width = *((CGFloat *)this + 8);
    v1.size.height = *((CGFloat *)this + 9);
    fmin(*((double *)this + 4) + *((double *)this + 5) - *((double *)this + 21), CGRectGetMinY(v1) + *((double *)this + 68));
  }
}

double TSWPLineFragmentArray::topOfCapForForLineFragmentRange(TSWPLineFragmentArray *this, _NSRange a2)
{
  NSUInteger length;
  NSUInteger v5;
  double v6;
  double v7;

  if (a2.location == 0x7FFFFFFFFFFFFFFFLL || a2.length == 0)
    return NAN;
  length = a2.length;
  v5 = 16 * a2.location;
  v6 = NAN;
  do
  {
    TSWPLineFragment::topOfCap(*(TSWPLineFragment **)(*(_QWORD *)this + v5));
    v6 = fmin(v6, v7);
    v5 += 16;
    --length;
  }
  while (length);
  return v6;
}

void TSWPParagraphAttributeArray::~TSWPParagraphAttributeArray(TSWPParagraphAttributeArray *this)
{
  TSWPParagraphAttributeArray::~TSWPParagraphAttributeArray(this);
  JUMPOUT(0x219A153B8);
}

{
  uint64_t v2;
  unint64_t v3;

  this->var0 = (void **)&off_24D82D510;
  if (this->var2)
  {
    v2 = 0;
    v3 = 0;
    do
    {
      (*((void (**)(TSWPParagraphAttributeArray *, char *))this->var0 + 24))(this, (char *)this->var4 + v2);
      ++v3;
      v2 += 16;
    }
    while (v3 < this->var2);
  }
  TSWPAttributeArray::~TSWPAttributeArray((TSWPAttributeArray *)this);
}

void sub_2178FBDF8(_Unwind_Exception *a1)
{
  TSWPAttributeArray *v1;

  TSWPAttributeArray::~TSWPAttributeArray(v1);
  _Unwind_Resume(a1);
}

void TSWPAttributeArray::~TSWPAttributeArray(TSWPAttributeArray *this)
{
  this->var0 = (void **)off_24D82DA48;
  free(this->var4);
}

void sub_2178FC5A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

TSWPAttributeArray *TSWPAttributeArray::didInsertAttribute(TSWPAttributeArray *this, const TSWPAttributeRecord *a2, TSKAddedToDocumentContext *a3, TSWPStorageTransaction *a4)
{
  unsigned int var1;
  BOOL v5;
  int v6;
  void *v8;
  TSWPAttributeArray *v10;

  var1 = this->var1;
  v5 = var1 > 0x11;
  v6 = (1 << var1) & 0x38100;
  if (!v5 && v6 != 0)
  {
    v8 = (void *)*((_QWORD *)a2 + 1);
    if (v8)
    {
      v10 = this;
      this = (TSWPAttributeArray *)-[TSKAddedToDocumentContext changeTrackingSubstorage](a3, "changeTrackingSubstorage");
      if ((this & 1) == 0)
      {
        if ((objc_opt_respondsToSelector() & 1) != 0)
          objc_msgSend(v8, "setParentStorage:", v10->var5);
        this = (TSWPAttributeArray *)objc_msgSend(v10->var5, "isDOLCSuppressed");
        if ((this & 1) == 0)
        {
          this = (TSWPAttributeArray *)objc_msgSend(v10->var5, "documentRoot");
          if (this)
            return (TSWPAttributeArray *)objc_msgSend(v8, "wasAddedToDocumentRoot:context:", this, a3);
        }
      }
    }
  }
  return this;
}

void sub_2178FD36C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void TSWPAttributeArray::replaceObjectForAttributeIndex(TSWPAttributeArray *this, objc_object *a2, uint64_t a3, TSKAddedToDocumentContext *a4, TSWPStorageTransaction *a5)
{
  char *v5;
  objc_object *v6;
  objc_object *v10;
  objc_object *v11;

  v5 = (char *)this->var4 + 16 * a3;
  v6 = (objc_object *)*((_QWORD *)v5 + 1);
  if (v6 != a2)
  {
    (*((void (**)(TSWPAttributeArray *))this->var0 + 30))(this);
    v10 = v6;
    v11 = a2;
    (*((void (**)(TSWPAttributeArray *, char *, TSWPStorageTransaction *))this->var0 + 32))(this, v5, a5);
    (*((void (**)(TSWPAttributeArray *, char *))this->var0 + 24))(this, v5);
    *((_QWORD *)v5 + 1) = a2;
    (*((void (**)(TSWPAttributeArray *, char *))this->var0 + 23))(this, v5);
    (*((void (**)(TSWPAttributeArray *, objc_object *, TSWPStorageTransaction *))this->var0 + 33))(this, v6, a5);
    (*((void (**)(TSWPAttributeArray *, char *, TSKAddedToDocumentContext *, TSWPStorageTransaction *))this->var0
     + 31))(this, v5, a4, a5);

  }
}

void TSWPParagraphAttributeArray::release(TSWPParagraphAttributeArray *this, id *a2)
{
  if ((*((unsigned int (**)(TSWPParagraphAttributeArray *))this->var0 + 3))(this))

}

uint64_t TSWPAttributeArray::insertAttribute(TSWPAttributeArray *this, const TSWPAttributeRecord *a2, unint64_t a3, TSKAddedToDocumentContext *a4, TSWPStorageTransaction *a5)
{
  void *v10;
  uint64_t v11;
  unint64_t var2;
  unint64_t v13;

  if (this->var2 < a3)
  {
    v10 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v11 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSWPAttributeArray::insertAttribute(const TSWPAttributeRecord &, TSWPAttributeIndex, TSKAddedToDocumentContext *, TSWPStorageTransaction *)");
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPAttributeArray.mm"), 327, CFSTR("insertAttribute: bad count."));
  }
  if ((*((unsigned int (**)(TSWPAttributeArray *))this->var0 + 3))(this))
    (*((void (**)(TSWPAttributeArray *, _QWORD, TSKAddedToDocumentContext *, TSWPStorageTransaction *))this->var0
     + 30))(this, *((_QWORD *)a2 + 1), a4, a5);
  (*((void (**)(TSWPAttributeArray *, const TSWPAttributeRecord *))this->var0 + 23))(this, a2);
  var2 = this->var2;
  v13 = 2 * var2 + 2;
  if (var2 + 1 > this->var3 && var2 < v13)
  {
    this->var3 = v13;
    this->var4 = (TSWPAttributeRecord *)malloc_type_realloc(this->var4, 16 * v13, 0x10820408DE112D3uLL);
    var2 = this->var2;
  }
  memmove((char *)this->var4 + 16 * a3 + 16, (char *)this->var4 + 16 * a3, 16 * (var2 - a3));
  *((_OWORD *)this->var4 + a3) = *(_OWORD *)a2;
  ++this->var2;
  return (*((uint64_t (**)(TSWPAttributeArray *, const TSWPAttributeRecord *, TSKAddedToDocumentContext *, TSWPStorageTransaction *))this->var0
          + 31))(this, a2, a4, a5);
}

id TSWPParagraphAttributeArray::retain(TSWPParagraphAttributeArray *this, id *a2)
{
  id result;

  result = (id)(*((uint64_t (**)(TSWPParagraphAttributeArray *))this->var0 + 3))(this);
  if ((_DWORD)result)
    return a2[1];
  return result;
}

uint64_t TSWPParagraphAttributeArray::hasObjects(TSWPParagraphAttributeArray *this)
{
  return (this->var1 > 0x12) | (0x3F3FDu >> this->var1) & 1;
}

TSWPAttributeArray *TSWPAttributeArray::willInsertAttributeObject(TSWPAttributeArray *this, objc_object *a2, TSKAddedToDocumentContext *a3, TSWPStorageTransaction *a4)
{
  unsigned int var1;
  BOOL v5;
  int v6;
  TSWPAttributeArray *v11;

  var1 = this->var1;
  v5 = var1 > 0x11;
  v6 = (1 << var1) & 0x38100;
  if (!v5 && v6 != 0 && a2 != 0)
  {
    v11 = this;
    this = (TSWPAttributeArray *)objc_msgSend(this->var5, "isDOLCSuppressed", a3, a4);
    if ((this & 1) == 0)
    {
      this = (TSWPAttributeArray *)objc_msgSend(v11->var5, "documentRoot");
      if (this)
        return (TSWPAttributeArray *)-[objc_object willBeAddedToDocumentRoot:context:](a2, "willBeAddedToDocumentRoot:context:", this, a3);
    }
  }
  return this;
}

TSWPAttributeArray *TSWPAttributeArray::didDeleteAttributeObject(TSWPAttributeArray *this, objc_object *a2, TSWPStorageTransaction *a3)
{
  unsigned int var1;
  BOOL v4;
  int v5;
  TSWPAttributeArray *v9;

  var1 = this->var1;
  v4 = var1 > 0x11;
  v5 = (1 << var1) & 0x38100;
  if (!v4 && v5 != 0 && a2 != 0)
  {
    v9 = this;
    if ((objc_opt_respondsToSelector() & 1) == 0
      || (this = (TSWPAttributeArray *)-[objc_object parentStorage](a2, "parentStorage")) == 0)
    {
      this = (TSWPAttributeArray *)objc_msgSend(v9->var5, "isDOLCSuppressed");
      if ((this & 1) == 0)
      {
        this = (TSWPAttributeArray *)objc_msgSend(v9->var5, "documentRoot");
        if (this)
          return (TSWPAttributeArray *)-[objc_object wasRemovedFromDocumentRoot:](a2, "wasRemovedFromDocumentRoot:", this);
      }
    }
  }
  return this;
}

TSWPAttributeArray *TSWPAttributeArray::willDeleteAttribute(TSWPAttributeArray *this, const TSWPAttributeRecord *a2, TSWPStorageTransaction *a3)
{
  unsigned int var1;
  BOOL v4;
  int v5;
  void *v7;
  TSWPAttributeArray *v8;

  var1 = this->var1;
  v4 = var1 > 0x11;
  v5 = (1 << var1) & 0x38100;
  if (!v4 && v5 != 0)
  {
    v7 = (void *)*((_QWORD *)a2 + 1);
    if (v7)
    {
      v8 = this;
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        this = (TSWPAttributeArray *)objc_msgSend(v7, "parentStorage");
        if (this != v8->var5)
          return this;
        objc_msgSend(v7, "setParentStorage:", 0);
      }
      this = (TSWPAttributeArray *)objc_msgSend(v8->var5, "isDOLCSuppressed");
      if ((this & 1) == 0)
      {
        this = (TSWPAttributeArray *)objc_msgSend(v8->var5, "documentRoot");
        if (this)
          return (TSWPAttributeArray *)objc_msgSend(v7, "willBeRemovedFromDocumentRoot:", this);
      }
    }
  }
  return this;
}

id TSWPStyleAttributeArray::retain(TSWPStyleAttributeArray *this, id *a2)
{
  return a2[1];
}

BOOL TSWPStyleAttributeArray::isEmpty(TSWPStyleAttributeArray *this)
{
  return *((_QWORD *)this + 2) == 0;
}

void TSWPStyleAttributeArray::applyObjectToCharRange(TSWPAttributeArray *this, objc_object *a2, _NSRange a3, TSKAddedToDocumentContext *a4, TSWPStorageTransaction *a5)
{
  NSUInteger length;
  NSUInteger location;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  objc_object *v19;
  objc_object *v20;
  int v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  TSKAddedToDocumentContext *v25;
  NSUInteger v26;
  objc_object *v27;
  NSRange v28;
  _NSRange v29;

  length = a3.length;
  location = a3.location;
  if (a3.location > TSWPAttributeArray::characterCount(this)
    || length > TSWPAttributeArray::characterCount(this) - location)
  {
    v11 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v12 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "virtual void TSWPStyleAttributeArray::applyObjectToCharRange(id, NSRange, TSKAddedToDocumentContext *, TSWPStorageTransaction *)");
    v13 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPStyleAttributeArray.mm");
    v28.location = location;
    v28.length = length;
    objc_msgSend(v11, "handleFailureInFunction:file:lineNumber:description:", v12, v13, 80, CFSTR("Bad input char range %@."), NSStringFromRange(v28));
  }
  v29.location = location;
  v29.length = length;
  v14 = TSWPAttributeArray::calculateAttributeRangeForCharacterRange(this, v29);
  v16 = v15;
  v17 = location + length;
  v18 = TSWPAttributeArray::effectiveAttributeIndexForCharIndex(this, v17);
  if (v18 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v19 = 0;
  }
  else
  {
    v19 = (objc_object *)*((_QWORD *)this->var4 + 2 * v18 + 1);
    v20 = v19;
  }
  v25 = a4;
  if (v14)
  {
    if (*((objc_object **)this->var4 + 2 * v14 - 1) == a2)
    {
      v21 = 0;
      ++v16;
      --v14;
      goto LABEL_22;
    }
    goto LABEL_16;
  }
  if (this->var2 && TSWPAttributeArray::charIndexForAttributeIndex(this, 0) == location)
  {
    if (!a2 && *((_QWORD *)this->var4 + 1))
      goto LABEL_14;
  }
  else if (!a2)
  {
LABEL_14:
    v14 = 0;
    v21 = 1;
    goto LABEL_22;
  }
LABEL_16:
  if (v14 < this->var2 && TSWPAttributeArray::charIndexForAttributeIndex(this, v14) == location)
  {
    if (*((objc_object **)this->var4 + 2 * v14 + 1) != a2)
      TSWPAttributeArray::replaceObjectForAttributeIndex(this, a2, v14, a4, a5);
    v21 = 0;
  }
  else
  {
    v26 = location;
    v27 = a2;
    TSWPAttributeArray::insertAttribute(this, (const TSWPAttributeRecord *)&v26, v14, a4, a5);
    v21 = 0;
    ++v16;
  }
LABEL_22:
  if (!v16)
  {
    v22 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v23 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "virtual void TSWPStyleAttributeArray::applyObjectToCharRange(id, NSRange, TSKAddedToDocumentContext *, TSWPStorageTransaction *)");
    objc_msgSend(v22, "handleFailureInFunction:file:lineNumber:description:", v23, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPStyleAttributeArray.mm"), 147, CFSTR("applyObjectToCharRange:: length should be greater than zero."));
  }
  if ((v16 + v14 >= this->var2 || TSWPAttributeArray::charIndexForAttributeIndex(this, v16 + v14) != v17)
    && v17 != TSWPAttributeArray::characterCount(this))
  {
    if (v16 < 2)
    {
      v26 = v17;
      v27 = v19;
      TSWPAttributeArray::insertAttribute(this, (const TSWPAttributeRecord *)&v26, v16 + v14, v25, a5);
      if (!v21)
        goto LABEL_33;
      goto LABEL_30;
    }
    TSWPAttributeArray::replaceCharIndexForAttributeIndex(this, v17, v16 + v14 - 1, a5);
    --v16;
  }
  if (!v21)
    goto LABEL_33;
LABEL_30:
  if (this->var2)
    TSWPAttributeArray::replaceObjectForAttributeIndex(this, 0, 0, 0, a5);
LABEL_33:
  if (v16 != 1 && v16 + v14 >= v14 + 1)
    (*((void (**)(TSWPAttributeArray *, unint64_t, unint64_t, TSWPStorageTransaction *))this->var0
     + 7))(this, v14 + 1, v16 - 1, a5);
  v24 = TSWPAttributeArray::effectiveAttributeIndexForCharIndex(this, v17);
  (*((void (**)(TSWPAttributeArray *, unint64_t, TSWPStorageTransaction *))this->var0 + 29))(this, v24, a5);

}

TSWPParagraphAttributeArray *TSWPParagraphAttributeArray::applyObjectToParagraphRange(TSWPParagraphAttributeArray *this, objc_object *a2, _NSRange a3, TSWPParagraphAttributeArray *a4, TSWPStorageTransaction *a5)
{
  NSUInteger length;
  NSUInteger location;
  TSWPParagraphAttributeArray *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  objc_object *v23;
  objc_object *v24;
  TSWPAttributeArray *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  objc_object *v31;
  unint64_t v32;
  unint64_t v33;
  objc_object *v34;
  _NSRange v35;

  length = a3.length;
  location = a3.location;
  v10 = this;
  if (!a3.length || !a4 || a3.location + a3.length > a4->var2)
  {
    v11 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v12 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSWPParagraphAttributeArray::applyObjectToParagraphRange(id, NSRange, TSWPParagraphAttributeArray *, TSWPStorageTransaction *)");
    this = (TSWPParagraphAttributeArray *)objc_msgSend(v11, "handleFailureInFunction:file:lineNumber:description:", v12, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPParagraphAttributeArray.mm"), 577, CFSTR("Bad par index range."));
  }
  if (!a2 && a4 == v10)
  {
    v13 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v14 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSWPParagraphAttributeArray::applyObjectToParagraphRange(id, NSRange, TSWPParagraphAttributeArray *, TSWPStorageTransaction *)");
    return (TSWPParagraphAttributeArray *)objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPParagraphAttributeArray.mm"), 578, CFSTR("Now allowed to delete paragraph styles.  Replace only!"));
  }
  if (v10 == a4 || !length)
  {
    if (!a4)
      return this;
    v15 = location + length;
  }
  else
  {
    v15 = location + length;
    if (location + length < a4->var2)
    {
      this = (TSWPParagraphAttributeArray *)TSWPParagraphAttributeArray::isParagraphBreakSparse(v10, location + length, (TSWPAttributeArray *)a4);
      if ((_DWORD)this)
      {
        v16 = TSWPAttributeArray::charIndexForAttributeIndex((TSWPAttributeArray *)a4, location + length);
        this = (TSWPParagraphAttributeArray *)TSWPAttributeArray::effectiveAttributeIndexForCharIndex((TSWPAttributeArray *)v10, v16);
        if (this == (TSWPParagraphAttributeArray *)0x7FFFFFFFFFFFFFFFLL)
        {
          v17 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
          v18 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSWPParagraphAttributeArray::applyObjectToParagraphRange(id, NSRange, TSWPParagraphAttributeArray *, TSWPStorageTransaction *)");
          this = (TSWPParagraphAttributeArray *)objc_msgSend(v17, "handleFailureInFunction:file:lineNumber:description:", v18, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPParagraphAttributeArray.mm"), 589, CFSTR("Bad attribute index."));
        }
        else
        {
          v31 = (objc_object *)*((_QWORD *)v10->var4 + 2 * (_QWORD)this + 1);
          if (v31 != a2)
          {
            v33 = v16;
            v34 = v31;
            this = (TSWPParagraphAttributeArray *)TSWPAttributeArray::insertAttribute((TSWPAttributeArray *)v10, (const TSWPAttributeRecord *)&v33, (unint64_t)&this->var0 + 1, 0, a5);
          }
        }
      }
    }
  }
  if (v15 <= a4->var2)
  {
    if (a2)
    {
      if (location < v15)
      {
        v19 = location;
        while (1)
        {
          v20 = TSWPAttributeArray::charIndexForAttributeIndex((TSWPAttributeArray *)a4, v19);
          v32 = 0x7FFFFFFFFFFFFFFFLL;
          v21 = TSWPParagraphAttributeArray::attributeIndexForParagraphIndex(v10, v19, (TSWPAttributeArray *)a4, &v32);
          v22 = v21;
          v23 = v21 == 0x7FFFFFFFFFFFFFFFLL ? 0 : (objc_object *)*((_QWORD *)v10->var4 + 2 * v21 + 1);
          if (a4 == v10)
            break;
          if (v32 != v20)
          {
            if (v23 != a2)
            {
              v33 = v20;
              v34 = a2;
              TSWPAttributeArray::insertAttribute((TSWPAttributeArray *)v10, (const TSWPAttributeRecord *)&v33, v21 + 1, 0, a5);
            }
            goto LABEL_35;
          }
          if (v23 != a2)
          {
            if (v21)
              v24 = (objc_object *)*((_QWORD *)v10->var4 + 2 * v21 - 1);
            else
              v24 = 0;
            if (v24 == a2)
            {
              (*((void (**)(TSWPParagraphAttributeArray *, unint64_t, uint64_t, TSWPStorageTransaction *))v10->var0
               + 7))(v10, v21, 1, a5);
              goto LABEL_35;
            }
            v25 = (TSWPAttributeArray *)v10;
            goto LABEL_34;
          }
LABEL_35:
          if (v15 == ++v19)
            goto LABEL_46;
        }
        v25 = (TSWPAttributeArray *)a4;
LABEL_34:
        TSWPAttributeArray::replaceObjectForAttributeIndex(v25, a2, v22, 0, a5);
        goto LABEL_35;
      }
    }
    else
    {
      v26 = TSWPAttributeArray::charIndexForAttributeIndex((TSWPAttributeArray *)a4, location);
      v27 = TSWPAttributeArray::charIndexForAttributeIndex((TSWPAttributeArray *)a4, v15 - 1);
      v28 = TSWPAttributeArray::effectiveAttributeIndexForCharIndex((TSWPAttributeArray *)v10, v26);
      if (v28 == 0x7FFFFFFFFFFFFFFFLL || (v29 = v28) == 0)
      {
        if (v10->var2 < 2
          || (v29 = 1, TSWPAttributeArray::charIndexForAttributeIndex((TSWPAttributeArray *)v10, 1uLL) > v27))
        {
          v29 = 0x7FFFFFFFFFFFFFFFLL;
        }
      }
      v30 = TSWPAttributeArray::effectiveAttributeIndexForCharIndex((TSWPAttributeArray *)v10, v27);
      if (v30 != 0x7FFFFFFFFFFFFFFFLL && v30 >= v29)
        (*((void (**)(TSWPParagraphAttributeArray *, unint64_t, unint64_t, TSWPStorageTransaction *))v10->var0
         + 7))(v10, v29, v30 - v29 + 1, a5);
    }
LABEL_46:
    v35.location = location;
    v35.length = length;
    return TSWPParagraphAttributeArray::didApplyAttributes(v10, v35, (TSWPAttributeArray *)a4, a5);
  }
  return this;
}

unint64_t TSWPParagraphAttributeArray::attributeIndexForParagraphIndex(TSWPParagraphAttributeArray *this, unint64_t a2, TSWPAttributeArray *a3, unint64_t *a4)
{
  unint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;

  v6 = TSWPAttributeArray::charIndexForAttributeIndex(a3, a2);
  v7 = TSWPAttributeArray::effectiveAttributeIndexForCharIndex((TSWPAttributeArray *)this, v6);
  if (v7 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v8 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v9 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "TSWPAttributeIndex TSWPParagraphAttributeArray::attributeIndexForParagraphIndex(TSWPAttributeIndex, TSWPParagraphAttributeArray *, TSWPCharIndex *)");
    objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPParagraphAttributeArray.mm"), 546, CFSTR("Bad attribute index."));
    v10 = 0x7FFFFFFFFFFFFFFFLL;
    if (!a4)
      return v7;
    goto LABEL_5;
  }
  v10 = TSWPAttributeArray::charIndexForAttributeIndex((TSWPAttributeArray *)this, v7);
  if (a4)
LABEL_5:
    *a4 = v10;
  return v7;
}

TSWPParagraphAttributeArray *TSWPParagraphAttributeArray::didApplyAttributes(TSWPParagraphAttributeArray *this, _NSRange a2, TSWPAttributeArray *a3, TSWPStorageTransaction *a4)
{
  NSUInteger v4;
  NSUInteger location;
  TSWPAttributeArray *v8;
  unint64_t v9;
  unint64_t v10;

  v4 = a2.location + a2.length;
  if (!__CFADD__(a2.location, a2.length))
  {
    location = a2.location;
    v8 = (TSWPAttributeArray *)this;
    do
    {
      if (location < a3->var2)
      {
        v9 = TSWPAttributeArray::charIndexForAttributeIndex(a3, location);
        v10 = TSWPAttributeArray::effectiveAttributeIndexForCharIndex(v8, v9);
        this = (TSWPParagraphAttributeArray *)(*((uint64_t (**)(TSWPAttributeArray *, unint64_t, TSWPStorageTransaction *))v8->var0
                                               + 29))(v8, v10, a4);
      }
      ++location;
    }
    while (location <= v4);
  }
  return this;
}

uint64_t TSWPAttributeArray::collapseAttributesAroundAttributeIndex(TSWPAttributeArray *this, unint64_t a2, TSWPStorageTransaction *a3)
{
  uint64_t result;
  unint64_t var2;

  result = (*((uint64_t (**)(TSWPAttributeArray *))this->var0 + 25))(this);
  if ((_DWORD)result)
  {
    var2 = this->var2;
    if (a2 + 1 < var2)
    {
      result = (*((uint64_t (**)(TSWPAttributeArray *))this->var0 + 28))(this);
      var2 = this->var2;
    }
    if (var2 > a2)
      return (*((uint64_t (**)(TSWPAttributeArray *, unint64_t, TSWPStorageTransaction *))this->var0
              + 28))(this, a2, a3);
  }
  return result;
}

BOOL TSWPParagraphAttributeArray::supportsAttributeCollapsing(TSWPParagraphAttributeArray *this)
{
  return (this->var1 & 0xFFFFFFF7) != 0;
}

uint64_t TSWPStyleAttributeArray::supportsAttributeCollapsing(TSWPStyleAttributeArray *this)
{
  return 1;
}

unint64_t TSWPAttributeArray::calculateAttributeRangeForCharacterRange(TSWPAttributeArray *this, _NSRange a2)
{
  NSUInteger length;
  NSUInteger location;
  unint64_t v5;

  length = a2.length;
  location = a2.location;
  v5 = TSWPAttributeArray::calculateAttributeIndexForCharacterIndex(this, a2.location);
  TSWPAttributeArray::calculateAttributeIndexForCharacterIndex(this, location + length);
  return v5;
}

unint64_t TSWPAttributeArray::calculateAttributeIndexForCharacterIndex(TSWPAttributeArray *this, unint64_t a2)
{
  unint64_t v4;
  unint64_t result;
  unint64_t v6;

  v4 = TSWPAttributeArray::effectiveAttributeIndexForCharIndex(this, a2);
  if (v4 == 0x7FFFFFFFFFFFFFFFLL)
    return 0;
  v6 = v4;
  result = this->var2;
  if (v6 < result)
  {
    if (TSWPAttributeArray::charIndexForAttributeIndex(this, v6) >= a2)
      return v6;
    else
      return v6 + 1;
  }
  return result;
}

TSWPAttributeArray *TSWPStyleAttributeArray::collapseAttributesAtAttributeIndex(TSWPAttributeArray *this, unint64_t a2, TSWPStorageTransaction *a3)
{
  TSWPAttributeArray *v5;
  unint64_t var2;
  TSWPAttributeArray *v7;

  v5 = this;
  if (a2)
  {
    if (this->var2 > a2)
    {
      this = (TSWPAttributeArray *)(*((uint64_t (**)(TSWPAttributeArray *, char *, char *))this->var0 + 26))(this, (char *)this->var4 + 16 * a2, (char *)this->var4 + 16 * a2 - 16);
      if ((this & 1) != 0)
        return (TSWPAttributeArray *)(*((uint64_t (**)(TSWPAttributeArray *, unint64_t, uint64_t, TSWPStorageTransaction *))v5->var0
                                      + 7))(v5, a2, 1, a3);
    }
  }
  var2 = v5->var2;
  if (var2 - 1 == a2)
  {
    v7 = (TSWPAttributeArray *)TSWPAttributeArray::charIndexForAttributeIndex(v5, a2);
    this = (TSWPAttributeArray *)TSWPAttributeArray::characterCount(v5);
    if (v7 == this)
      return (TSWPAttributeArray *)(*((uint64_t (**)(TSWPAttributeArray *, unint64_t, uint64_t, TSWPStorageTransaction *))v5->var0
                                    + 7))(v5, a2, 1, a3);
    var2 = v5->var2;
  }
  if (var2 > a2)
  {
    this = (TSWPAttributeArray *)(*((uint64_t (**)(TSWPAttributeArray *, unint64_t, unint64_t))v5->var0
                                  + 27))(v5, (unint64_t)v5->var4 + 16 * a2, a2);
    if ((_DWORD)this)
      return (TSWPAttributeArray *)(*((uint64_t (**)(TSWPAttributeArray *, unint64_t, uint64_t, TSWPStorageTransaction *))v5->var0
                                    + 7))(v5, a2, 1, a3);
  }
  return this;
}

uint64_t TSWPStyleAttributeArray::canCollapseEmptyAttribute(TSWPStyleAttributeArray *this, const TSWPAttributeRecord *a2)
{
  return 0;
}

_QWORD *TSWPStyleAttributeArray::compressLeadingNull(_QWORD *this, TSWPStorageTransaction *a2)
{
  if (this[2] == 1 && !*(_QWORD *)(this[4] + 8))
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, TSWPStorageTransaction *))(*this + 56))(this, 0, 1, a2);
  return this;
}

void sub_2178FEA54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

void sub_2178FEEA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t TSWPAttributeArray::hasObjects(TSWPAttributeArray *this)
{
  return 1;
}

void TSWPStyleAttributeArray::release(TSWPStyleAttributeArray *this, id *a2)
{

}

id TSWPAttachmentAttributeArray::retain(TSWPAttachmentAttributeArray *this, id *a2)
{
  return a2[1];
}

uint64_t TSWPAttachmentAttributeArray::willInsertAttributeObject(uint64_t this, objc_object *a2, TSKAddedToDocumentContext *a3, TSWPStorageTransaction *a4)
{
  uint64_t v6;

  if (a2)
  {
    v6 = this;
    this = objc_msgSend(*(id *)(this + 40), "isDOLCSuppressed", a3, a4);
    if ((this & 1) == 0)
    {
      this = objc_msgSend(*(id *)(v6 + 40), "documentRoot");
      if (this)
        return -[objc_object willBeAddedToDocumentRoot:context:](a2, "willBeAddedToDocumentRoot:context:", this, a3);
    }
  }
  return this;
}

uint64_t TSWPAttachmentAttributeArray::didInsertAttribute(uint64_t this, const TSWPAttributeRecord *a2, TSKAddedToDocumentContext *a3, TSWPStorageTransaction *a4)
{
  void *v4;
  uint64_t v6;

  v4 = (void *)*((_QWORD *)a2 + 1);
  if (v4)
  {
    v6 = this;
    objc_msgSend(*((id *)a2 + 1), "setParentStorage:", *(_QWORD *)(this + 40), a4);
    this = objc_msgSend(*(id *)(v6 + 40), "isDOLCSuppressed");
    if ((this & 1) == 0)
    {
      this = objc_msgSend(*(id *)(v6 + 40), "documentRoot");
      if (this)
        return objc_msgSend(v4, "wasAddedToDocumentRoot:context:", this, a3);
    }
  }
  return this;
}

void TSWPAttachmentAttributeArray::release(TSWPAttachmentAttributeArray *this, id *a2)
{

}

uint64_t TSWPAttachmentAttributeArray::didDeleteAttributeObject(uint64_t this, objc_object *a2, TSWPStorageTransaction *a3)
{
  uint64_t v4;

  if (a2)
  {
    v4 = this;
    this = -[objc_object parentStorage](a2, "parentStorage", a3);
    if (!this)
    {
      this = objc_msgSend(*(id *)(v4 + 40), "isDOLCSuppressed");
      if ((this & 1) == 0)
      {
        this = objc_msgSend(*(id *)(v4 + 40), "documentRoot");
        if (this)
          return -[objc_object wasRemovedFromDocumentRoot:](a2, "wasRemovedFromDocumentRoot:", this);
      }
    }
  }
  return this;
}

uint64_t TSWPAttachmentAttributeArray::willDeleteAttribute(uint64_t this, const TSWPAttributeRecord *a2, TSWPStorageTransaction *a3)
{
  void *v3;
  uint64_t v4;

  v3 = (void *)*((_QWORD *)a2 + 1);
  if (v3)
  {
    v4 = this;
    this = objc_msgSend(*((id *)a2 + 1), "parentStorage", a3);
    if (this == *(_QWORD *)(v4 + 40))
    {
      objc_msgSend(v3, "setParentStorage:", 0);
      this = objc_msgSend(*(id *)(v4 + 40), "isDOLCSuppressed");
      if ((this & 1) == 0)
      {
        this = objc_msgSend(*(id *)(v4 + 40), "documentRoot");
        if (this)
          return objc_msgSend(v3, "willBeRemovedFromDocumentRoot:", this);
      }
    }
  }
  return this;
}

const __CTFont *TSWPFastCreateFontForStyle(uint64_t a1, void *a2, unint64_t a3)
{
  const void *v6;
  const void *v7;
  _QWORD v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  v6 = (const void *)objc_msgSend(a2, "findCachedFontForCharacterStyle:scalePercent:", a1, a3);
  if (v6)
  {
    v7 = v6;
    CFRetain(v6);
  }
  else
  {
    v9[0] = a1;
    v9[1] = a2;
    return TSWPCreateFontForStylesWithScale((uint64_t)v9, 2uLL, a3);
  }
  return (const __CTFont *)v7;
}

uint64_t TSWPResolvePropertyForStyles(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD v5[3];

  v5[2] = *MEMORY[0x24BDAC8D0];
  v5[0] = a1;
  v5[1] = a2;
  return TSWPResolvePropertyForStyles((uint64_t)v5, 2uLL, a3, a4);
}

unint64_t TSWPCoreTextTypesetter::beginParagraphLayout(TSWPCoreTextTypesetter *this, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, double a6, double a7)
{
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  TSWPParagraphTypesetter *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  NSUInteger v36;
  double v37;
  BOOL v38;
  void *v39;
  uint64_t v40;
  TSWPLayoutState *v41;
  void *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  NSUInteger v46;
  NSUInteger v47;
  void *v48;
  void *v49;
  uint64_t v50;
  const __CFDictionary *v51;
  uint64_t v52;
  int v53;
  void *v54;
  const void *v55;
  TSWPLayoutState *v56;
  const void *v57;
  const void *v58;
  BOOL v59;
  int v60;
  __CFDictionary *MutableCopy;
  _BOOL4 v62;
  const __CTFont *v63;
  CGFloat Size;
  CTFontRef CopyWithAttributes;
  int v66;
  int v67;
  uint64_t v68;
  NSUInteger v69;
  NSUInteger v70;
  unint64_t v71;
  NSUInteger v72;
  int v73;
  TSWPDrawableAttachment *v74;
  unsigned int v75;
  uint64_t v76;
  int v77;
  int v79;
  void *v80;
  TSWPTypesetterAttachmentMap *v81;
  BOOL v82;
  __CFDictionary *v83;
  CTRunDelegateRef v84;
  void *v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  void *v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  void *v97;
  uint64_t v98;
  int v99;
  int v100;
  _NSRange v101;
  char v102;
  unsigned int v103;
  uint64_t v104;
  TSWPParagraphTypesetter *v105;
  void *v106;
  uint64_t v107;
  __CFAttributedString *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  void *v112;
  _BOOL4 v113;
  uint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  TSWPParagraphTypesetter *v121;
  TSWPParagraphTypesetter **v122;
  void *v123;
  void *v124;
  uint64_t v125;
  void *v126;
  void *value;
  char v128;
  const __CFAllocator *allocator;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  void *key;
  NSUInteger v135;
  __CFDictionary *theDict;
  CFTypeRef cf;
  NSUInteger v138;
  NSUInteger v139;
  unsigned int v140;
  TSWPLayoutState *v141;
  _QWORD v142[2];
  _OWORD v143[4];
  NSUInteger v144;
  NSUInteger v145;
  uint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  char v157;
  __int16 v158;
  char v159;
  uint64_t v160;
  char v161;
  char v162;
  int v163;
  char v164;
  uint64_t v165;
  CFRange v166;

  v165 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    v12 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v13 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "TSWPTypesetterParagraphSetupResult TSWPCoreTextTypesetter::beginParagraphLayout(const TSWPLayoutState *, CGSize, const TSWPTopicNumberHints &, const TSWPTypesetterAdditionalCTState &, TSWPAttributeIndex)");
    objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 282, CFSTR("invalid nil value for '%s'"), "state");
  }
  if (!*(_QWORD *)(a2 + 96))
  {
    v14 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v15 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "TSWPTypesetterParagraphSetupResult TSWPCoreTextTypesetter::beginParagraphLayout(const TSWPLayoutState *, CGSize, const TSWPTopicNumberHints &, const TSWPTypesetterAdditionalCTState &, TSWPAttributeIndex)");
    objc_msgSend(v14, "handleFailureInFunction:file:lineNumber:description:", v15, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 283, CFSTR("invalid nil value for '%s'"), "state->paragraphStyle");
  }
  if (*((_BYTE *)this + 34))
    TSWPCoreTextTypesetter::endParagraphLayout(this);
  TSWPDropCapCTState::operator=((uint64_t)this + 288, *a4);
  TSWPLineStylingCTState::operator=((uint64_t)this + 328, a4[1]);
  *((_BYTE *)this + 34) = 1;
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)(a2 + 80);
  v16 = *((_QWORD *)this + 5);
  if ((unint64_t)(*(_QWORD *)(a2 + 16) - v16) >= *((_QWORD *)this + 6))
    v17 = *((_QWORD *)this + 6);
  else
    v17 = *(_QWORD *)(a2 + 16) - v16;
  *((_QWORD *)this + 6) = v17;
  *((_QWORD *)this + 8) = (id)objc_msgSend(*((id *)this + 2), "textSourceForLayoutInRange:");
  *((_QWORD *)this + 9) = (id)TSWPParagraphEnumerator::coreTextPropertiesFilterDelegate((TSWPParagraphEnumerator *)(a2 + 24));
  *((_QWORD *)this + 7) = objc_msgSend(*((id *)this + 8), "length");
  v18 = *(_BYTE *)(a2 + 345);
  if (v18)
  {
    if (*(_BYTE *)(a2 + 333))
      v18 = 0;
    else
      v18 = *(_BYTE *)(a2 + 346) != 0;
  }
  *((_BYTE *)this + 88) = v18;
  *((double *)this + 17) = a6;
  *((double *)this + 18) = a7;
  *((_QWORD *)this + 12) = (id)TSWPParagraphEnumerator::paragraphLanguage((TSWPParagraphEnumerator *)(a2 + 24), 1, 0);
  *((_BYTE *)this + 104) = TSUHasCJKLanguage();
  v130 = objc_msgSend(*(id *)(a2 + 104), "scaleTextPercent");
  v147 = 0uLL;
  v122 = (TSWPParagraphTypesetter **)((char *)this + 232);
  std::shared_ptr<EQKit::OpticalKern::Edge::Path>::operator=[abi:nn180100]((uint64_t)this + 232, &v147);
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
  if (*((_QWORD *)&v147 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (void *)*((_QWORD *)this + 28);
  v141 = (TSWPLayoutState *)a2;
  if (v22
    && v130 == 100
    && (!*((_QWORD *)this + 40) || *((double *)this + 38) == 1.0 && (*((_BYTE *)this + 296) & 1) == 0)
    && (!*((_QWORD *)this + 44) || (*((_BYTE *)this + 336) & 1) == 0)
    && *((_DWORD *)this + 6) != 1
    && *(_QWORD *)(a2 + 16) == 0x7FFFFFFFFFFFFFFFLL)
  {
    objc_msgSend(v22, "cachedTypesetterForParagraphIdentifier:", a5);
    std::shared_ptr<EQKit::OpticalKern::Edge::Path>::operator=[abi:nn180100]((uint64_t)v122, &v147);
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
    if (*((_QWORD *)&v147 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
  v121 = *v122;
  if (*v122)
  {
    if (*((_QWORD *)this + 7) != (uint64_t)(*((_QWORD *)*v122 + 5) - *((_QWORD *)*v122 + 4)) >> 1)
    {
      v26 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
      v27 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "TSWPTypesetterParagraphSetupResult TSWPCoreTextTypesetter::beginParagraphLayout(const TSWPLayoutState *, CGSize, const TSWPTopicNumberHints &, const TSWPTypesetterAdditionalCTState &, TSWPAttributeIndex)");
      objc_msgSend(v26, "handleFailureInFunction:file:lineNumber:description:", v27, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 326, CFSTR("cached paragraph typesetter has wrong char count"));
    }
  }
  else
  {
    v28 = operator new();
    TSWPParagraphTypesetter::TSWPParagraphTypesetter(v28, *((_QWORD *)this + 8), v130, *((unsigned __int8 *)this + 30));
    std::shared_ptr<TSWPParagraphTypesetter>::shared_ptr[abi:ne180100]<TSWPParagraphTypesetter,void>(&v147, v28);
    std::shared_ptr<EQKit::OpticalKern::Edge::Path>::operator=[abi:nn180100]((uint64_t)v122, &v147);
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
    if (*((_QWORD *)&v147 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  v32 = *v122;
  if (!*v122)
  {
    v33 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v34 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "TSWPTypesetterParagraphSetupResult TSWPCoreTextTypesetter::beginParagraphLayout(const TSWPLayoutState *, CGSize, const TSWPTopicNumberHints &, const TSWPTypesetterAdditionalCTState &, TSWPAttributeIndex)");
    objc_msgSend(v33, "handleFailureInFunction:file:lineNumber:description:", v34, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 328, CFSTR("invalid nil value for '%s'"), "_paragraphTypesetter.get()");
    v32 = *v122;
  }
  v35 = *((_QWORD *)v32 + 4);
  *((_DWORD *)this + 28) = 100;
  *((_QWORD *)this + 10) = v35;
  v139 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 15) = malloc_type_malloc(0x28A0uLL, 0x10E0040261DCC7AuLL);
  v131 = 0;
  v132 = 0;
  v128 = 0;
  v125 = 0;
  v140 = 0;
  v36 = 0;
  *((_QWORD *)this + 16) = malloc_type_malloc(8 * *((unsigned int *)this + 28), 0x100004000313F17uLL);
  v157 = *((_BYTE *)this + 33);
  v158 = 0;
  v159 = v157 ^ 1;
  v160 = 0;
  v161 = 0;
  v162 = v157 ^ 1;
  v163 = 16843008;
  v164 = 0;
  v156 = 0;
  v154 = 0u;
  v155 = 0u;
  v152 = 0u;
  v153 = 0u;
  v150 = 0u;
  v151 = 0u;
  v149 = 0u;
  v147 = 0u;
  v148 = 0u;
  v37 = *((double *)this + 38);
  key = (void *)*MEMORY[0x24BDC4C28];
  allocator = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v126 = (void *)*MEMORY[0x24BDC4EE0];
  v123 = (void *)*MEMORY[0x24BDC5010];
  v124 = (void *)*MEMORY[0x24BDC4F28];
  v138 = *((_QWORD *)this + 40);
  v135 = *((_QWORD *)this + 45);
  do
  {
    objc_msgSend(*((id *)this + 8), "attributesAtCharIndex:attributesOfInterest:attributesTable:effectiveRange:", v36, &v157, &v147, &v144);
    if (v145)
      v38 = 1;
    else
      v38 = v36 == v139;
    if (!v38)
    {
      v39 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
      v40 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "TSWPTypesetterParagraphSetupResult TSWPCoreTextTypesetter::beginParagraphLayout(const TSWPLayoutState *, CGSize, const TSWPTopicNumberHints &, const TSWPTypesetterAdditionalCTState &, TSWPAttributeIndex)");
      objc_msgSend(v39, "handleFailureInFunction:file:lineNumber:description:", v40, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 360, CFSTR("Empty effectiveRange"));
    }
    if (v135 > v36 && *((_QWORD *)this + 44) && (*((_BYTE *)this + 336) & 1) != 0 && v145 + v144 > v135)
      v145 = v135 - v36;
    v41 = v141;
    if (v138 > v36
      && *((_QWORD *)this + 40)
      && (*((double *)this + 38) != 1.0 || (*((_BYTE *)this + 296) & 1) != 0)
      && v145 + v144 > v138)
    {
      v145 = v138 - v36;
    }
    v42 = (void *)*((_QWORD *)&v154 + 1);
    v43 = v155;
    v44 = *((_QWORD *)&v148 + 1);
    v45 = *((_QWORD *)&v153 + 1);
    if (v135 > v36 && *((_QWORD *)this + 44) && (*((_BYTE *)this + 336) & 1) != 0)
    {
      v44 = (uint64_t)TSWPLineStylingCTState::modifiedCharacterStyle((TSWPCoreTextTypesetter *)((char *)this + 328), (TSSStylesheet *)objc_msgSend(*((id *)this + 2), "stylesheet"), *((TSWPCharacterStyle **)&v148 + 1));
      v41 = v141;
    }
    if (v138 > v36 && *((_QWORD *)this + 40) && (*((_BYTE *)this + 296) & 1) != 0)
    {
      v44 = (uint64_t)TSWPDropCapCTState::modifiedCharacterStyle((TSWPCoreTextTypesetter *)((char *)this + 288), (TSSStylesheet *)objc_msgSend(*((id *)this + 2), "stylesheet"), (TSWPCharacterStyle *)v44);
      v41 = v141;
    }
    if (v44)
    {
      objc_msgSend(*((id *)v41 + 13), "styleProvider");
      if ((objc_opt_respondsToSelector() & 1) != 0)
        v44 = objc_msgSend((id)objc_msgSend(*((id *)v141 + 13), "styleProvider"), "modifiedCharacterStyle:atCharIndex:", v44, v36);
      v41 = v141;
    }
    v46 = v144;
    v47 = v145 + v144;
    if (v145 + v144 >= v139)
      v47 = v139;
    if (v144 <= v36)
      v46 = v36;
    v144 = v46;
    v145 = v47 - v46;
    v48 = (void *)*((_QWORD *)v41 + 12);
    if (!v48)
    {
      v49 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
      v50 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "TSWPTypesetterParagraphSetupResult TSWPCoreTextTypesetter::beginParagraphLayout(const TSWPLayoutState *, CGSize, const TSWPTopicNumberHints &, const TSWPTypesetterAdditionalCTState &, TSWPAttributeIndex)");
      objc_msgSend(v49, "handleFailureInFunction:file:lineNumber:description:", v50, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 413, CFSTR("invalid nil value for '%s'"), "state->paragraphStyle");
      v41 = v141;
      v48 = (void *)*((_QWORD *)v141 + 12);
    }
    v51 = (const __CFDictionary *)objc_msgSend(*((id *)this + 8), "createFilteredCoreTextAttributes:effectiveRange:filterDelegate:", objc_msgSend(v48, "getTypesetterAttributes:scalePercent:isRightToLeft:", v44, v130, *((unsigned __int8 *)v41 + 333)), &v144, *((_QWORD *)this + 9));
    cf = CFDictionaryGetValue(v51, key);
    if ((objc_msgSend((id)v43, "showsMarkup") & 1) != 0 || objc_msgSend(v42, "showsMarkup"))
    {
      if (objc_msgSend((id)v43, "showsMarkup"))
        v42 = (void *)v43;
      v52 = objc_msgSend((id)objc_msgSend(v42, "session"), "author");
      if (v132 != v52)
      {
        v131 = objc_msgSend(v42, "textMarkupColor");
        v132 = v52;
      }
      v53 = objc_msgSend(v42, "isDeletion");
      v54 = (void *)v131;
      if (v53)
        v55 = (const void *)v131;
      else
        v55 = 0;
    }
    else
    {
      v54 = 0;
      v55 = 0;
    }
    v56 = v141;
    if (v55)
      v57 = (const void *)*((_QWORD *)v141 + 81);
    else
      v57 = 0;
    if (*((_QWORD *)v141 + 81))
    {
      v54 = (void *)*((_QWORD *)v141 + 81);
      v58 = v57;
    }
    else
    {
      v58 = v55;
    }
    v59 = v37 != 1.0 && v138 > v36;
    v60 = v59;
    v133 = v54;
    if (v54 || v58 || *((_QWORD *)&v43 + 1) || v60)
    {
      v62 = v54 != 0;
      MutableCopy = CFDictionaryCreateMutableCopy(allocator, 0, v51);
      CFRelease(v51);
      if (v62)
        CFDictionarySetValue(MutableCopy, v126, (const void *)objc_msgSend(v133, "CGColor"));
      if (v58)
      {
        CFDictionarySetValue(MutableCopy, CFSTR("TSWPStrikethroughColor"), v58);
        CFDictionarySetValue(MutableCopy, CFSTR("TSWPStrikethrough"), &unk_24D8FB058);
      }
      if (*((_QWORD *)&v43 + 1))
        CFDictionarySetValue((CFMutableDictionaryRef)v43, CFSTR("TSWPTextHighlightAuthorAttribute"), (const void *)objc_msgSend(*((id *)&v43 + 1), "author"));
      if (v60)
      {
        v63 = (const __CTFont *)CFDictionaryGetValue(MutableCopy, key);
        Size = CTFontGetSize(v63);
        CopyWithAttributes = CTFontCreateCopyWithAttributes(v63, v37 * Size, 0, 0);
        CFDictionarySetValue(MutableCopy, key, CopyWithAttributes);
        CFRelease(CopyWithAttributes);
      }
      v56 = v141;
    }
    else
    {
      MutableCopy = v51;
    }
    if (!(v44 | v45))
      goto LABEL_129;
    v66 = *((unsigned __int8 *)v56 + 333);
    if (v44)
    {
      v67 = objc_msgSend((id)v44, "writingDirection");
      v56 = v141;
    }
    else
    {
      v67 = -1;
    }
    if (v67 == -1 && v45)
    {
      v67 = objc_msgSend(MEMORY[0x24BDBCEA0], "characterDirectionForLanguage:", v45) == 2;
      v56 = v141;
    }
    if (v67 == -1 || v67 == v66)
    {
LABEL_129:
      theDict = MutableCopy;
      goto LABEL_136;
    }
    if (!v145)
      goto LABEL_134;
    v68 = 0;
    v69 = 0;
    v70 = v144;
    do
    {
      if (!IsWhitespaceCharacter(*(unsigned __int16 *)(*((_QWORD *)this + 10) + 2 * (v68 + v70))))
        break;
      v68 = ++v69;
    }
    while (v145 > v69);
    if (!v69)
    {
      v71 = v145;
      if (v145 >= 2)
      {
        v72 = v70 - 1;
        do
        {
          if (!IsWhitespaceCharacter(*(unsigned __int16 *)(*((_QWORD *)this + 10) + 2 * (v72 + v71))))
            break;
          v71 = v145 - 1;
          v145 = v71;
        }
        while (v71 > 1);
      }
LABEL_134:
      theDict = CFDictionaryCreateMutableCopy(allocator, 0, MutableCopy);
      CFRelease(MutableCopy);
      v146 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", v67 == 1);
      CFDictionarySetValue(theDict, v123, (const void *)objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v146, 1));
      goto LABEL_135;
    }
    v145 = v69;
    theDict = MutableCopy;
LABEL_135:
    v56 = v141;
LABEL_136:
    if (v36 < *((_QWORD *)this + 7))
    {
      v73 = *(unsigned __int16 *)(*((_QWORD *)this + 10) + 2 * v36);
      if (v73 == 65532)
      {
        v74 = (TSWPDrawableAttachment *)objc_msgSend(*((id *)this + 8), "attachmentAtCharIndex:", v36);
        if (v74)
        {
          value = 0;
          ++HIDWORD(v125);
LABEL_154:
          if (!-[TSWPDrawableAttachment isDrawable](v74, "isDrawable")
            || -[TSWPDrawableAttachment isAnchored](v74, "isAnchored")
            || -[TSWPDrawableAttachment isPartitioned](v74, "isPartitioned"))
          {
            v80 = 0;
          }
          else
          {
            v80 = TSWPLayoutChore::validatedLayoutForInlineAttachment(*((id **)this + 1), v74, (id *)v141, theDict);
          }
          v81 = +[TSWPTypesetterAttachmentMap mapWithAttachment:layout:pageNumber:pageCount:footnoteMarkProvider:styleProvider:colorOverride:](TSWPTypesetterAttachmentMap, "mapWithAttachment:layout:pageNumber:pageCount:footnoteMarkProvider:styleProvider:colorOverride:", v74, v80, objc_msgSend(*((id *)v141 + 13), "pageNumber"), *((_QWORD *)v141 + 82), *((_QWORD *)v141 + 76), objc_msgSend(*((id *)v141 + 13), "styleProvider"), v133);
          v82 = -[TSWPDrawableAttachment isDrawable](v74, "isDrawable");
          v83 = CFDictionaryCreateMutableCopy(allocator, 0, theDict);
          CFRelease(theDict);
          v84 = CTRunDelegateCreate(&gRunDelegateCallBacks, v81);
          CFDictionarySetValue(v83, v124, v84);
          CFDictionarySetValue(v83, kTSWPAttachmentMap, v81);
          if (value)
            CFDictionarySetValue(v83, key, value);
          CFRelease(v84);
          v128 |= !v82;
          v79 = 1;
          v145 = 1;
          theDict = v83;
          goto LABEL_162;
        }
LABEL_161:
        v85 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
        v86 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "TSWPTypesetterParagraphSetupResult TSWPCoreTextTypesetter::beginParagraphLayout(const TSWPLayoutState *, CGSize, const TSWPTopicNumberHints &, const TSWPTypesetterAdditionalCTState &, TSWPAttributeIndex)");
        objc_msgSend(v85, "handleFailureInFunction:file:lineNumber:description:", v86, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 552, CFSTR("We have an attachment character, but no attachment"));
        v79 = 0;
LABEL_162:
        v56 = v141;
        goto LABEL_163;
      }
      if (v73 == 14)
      {
        v74 = (TSWPDrawableAttachment *)objc_msgSend(*((id *)this + 8), "footnoteReferenceAtCharIndex:", v36);
        if (v74)
        {
          *(_WORD *)(*((_QWORD *)this + 10) + 2 * v36) = 160;
          if (TSWPPlaceholderFont(void)::onceToken != -1)
            dispatch_once(&TSWPPlaceholderFont(void)::onceToken, &__block_literal_global_77);
          LODWORD(v125) = v125 + 1;
          value = (void *)TSWPPlaceholderFont(void)::placeholderFont;
          goto LABEL_154;
        }
        goto LABEL_161;
      }
    }
    if (v145 < 2)
    {
LABEL_150:
      v79 = 0;
    }
    else
    {
      v75 = 2;
      v76 = 1;
      while (1)
      {
        v77 = *(unsigned __int16 *)(*((_QWORD *)this + 10) + 2 * (v76 + v144));
        if (v77 == 65532 || v77 == 14)
          break;
        v76 = v75;
        v59 = v145 > v75++;
        if (!v59)
          goto LABEL_150;
      }
      v79 = 0;
      v145 = v76;
    }
LABEL_163:
    v87 = *((_DWORD *)this + 28);
    if (v140 >= v87)
    {
      v88 = 2 * v87;
      *((_DWORD *)this + 28) = v88;
      *((_QWORD *)this + 16) = malloc_type_realloc(*((void **)this + 16), 8 * v88, 0x100004000313F17uLL);
      *((_QWORD *)this + 15) = malloc_type_realloc(*((void **)this + 15), 104 * *((unsigned int *)this + 28), 0x10E0040261DCC7AuLL);
      v56 = v141;
    }
    v89 = (void *)TSWPResolvePropertyForStyles(v44, *((_QWORD *)v56 + 12), 40, 0);
    if (v89)
    {
      if (objc_msgSend(v89, "isEnabled"))
        v90 = v79 | 4;
      else
        v90 = v79;
    }
    else
    {
      v90 = v79;
    }
    CFRetain(cf);
    v91 = *((_QWORD *)this + 15);
    *(_QWORD *)(*((_QWORD *)this + 16) + 8 * v140) = v145;
    v92 = v91 + 104 * v140;
    *(_QWORD *)v92 = v36;
    *(_QWORD *)(v92 + 16) = v44;
    *(_QWORD *)(v92 + 24) = cf;
    *(_QWORD *)(v92 + 32) = theDict;
    *(_DWORD *)(v92 + 8) = v90;
    TSWPFontHeightInfoForFont((const __CTFont *)cf, v143);
    v93 = *((_QWORD *)this + 15) + 104 * v140;
    v94 = v143[0];
    v95 = v143[1];
    v96 = v143[2];
    *(_OWORD *)(v93 + 88) = v143[3];
    *(_OWORD *)(v93 + 72) = v96;
    *(_OWORD *)(v93 + 56) = v95;
    *(_OWORD *)(v93 + 40) = v94;
    ++v140;
    if (!*(_QWORD *)(*((_QWORD *)this + 29) + 64))
    {
      v99 = TSWPResolveIntPropertyForStyles(v44, *((_QWORD *)v141 + 12), 21, 0);
      v100 = TSWPResolveIntPropertyForStyles(v44, *((_QWORD *)v141 + 12), 48, 0);
      v101.length = v145;
      switch(v99)
      {
        case 3:
          v101.location = v36;
          TSWPCoreTextTypesetter::pChangeTextToTitledForRange(this, v101);
          break;
        case 2:
          if (v145)
            v102 = v79;
          else
            v102 = 1;
          if ((v102 & 1) == 0)
          {
            v101.location = v36;
            v140 = TSWPCoreTextTypesetter::pChangeToSmallCapsForRange(this, v101, v140, v100 != 0);
          }
          break;
        case 1:
          v101.location = v36;
          TSWPCoreTextTypesetter::pChangeTextToUppercaseForRange(this, v101);
          break;
      }
    }
    v36 = v145 + v144;
    if (v145 + v144 > v139)
    {
      v97 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
      v98 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "TSWPTypesetterParagraphSetupResult TSWPCoreTextTypesetter::beginParagraphLayout(const TSWPLayoutState *, CGSize, const TSWPTopicNumberHints &, const TSWPTypesetterAdditionalCTState &, TSWPAttributeIndex)");
      objc_msgSend(v97, "handleFailureInFunction:file:lineNumber:description:", v98, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 679, CFSTR("Bad curCharIndex"));
    }
  }
  while (v36 < v139);
  *((_DWORD *)this + 27) = v140;
  v103 = *((_DWORD *)v141 + 97);
  v104 = *((unsigned __int8 *)v141 + 333);
  if (!v121)
  {
    TSWPParagraphTypesetter::createAttributedString(*v122);
    v105 = *v122;
    if (*((_QWORD *)*v122 + 8))
    {
      v106 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
      v107 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "CFMutableAttributedStringRef TSWPParagraphTypesetter::mutableAttributedString() const");
      objc_msgSend(v106, "handleFailureInFunction:file:lineNumber:description:", v107, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPParagraphTypesetter.h"), 256, CFSTR("expected nil value for '%s'"), "_ctTypesetter");
    }
    v108 = (__CFAttributedString *)*((_QWORD *)v105 + 7);
    if (*((_DWORD *)this + 27))
    {
      v109 = 0;
      v110 = 0;
      do
      {
        v111 = *((_QWORD *)this + 15) + v109;
        v166.location = *(_QWORD *)v111;
        v166.length = *(_QWORD *)(*((_QWORD *)this + 16) + 8 * v110);
        CFAttributedStringSetAttributes(v108, v166, *(CFDictionaryRef *)(v111 + 32), 0);
        ++v110;
        v109 += 104;
      }
      while (v110 < *((unsigned int *)this + 27));
    }
    if (*((_BYTE *)this + 30))
      ApplyVerticalFormsToAttributedString(v108, *((UniChar **)this + 10));
    TSWPParagraphTypesetter::createCTTypesetter(*((TSWPParagraphTypesetter **)this + 29));
    v112 = (void *)*((_QWORD *)this + 28);
    if (v112)
      v113 = v130 == 100;
    else
      v113 = 0;
    if (v113
      && (!*((_QWORD *)this + 40) || *((double *)this + 38) == 1.0 && (*((_BYTE *)this + 296) & 1) == 0)
      && (!*((_QWORD *)this + 44) || (*((_BYTE *)this + 336) & 1) == 0)
      && !((*((_DWORD *)this + 6) != 0) | v128 & 1)
      && *((_QWORD *)*v122 + 11) == *((_QWORD *)*v122 + 10)
      && *((_QWORD *)v141 + 2) == 0x7FFFFFFFFFFFFFFFLL)
    {
      v114 = *((_QWORD *)this + 30);
      v142[0] = *v122;
      v142[1] = v114;
      if (v114)
      {
        v115 = (unint64_t *)(v114 + 8);
        do
          v116 = __ldxr(v115);
        while (__stxr(v116 + 1, v115));
      }
      objc_msgSend(v112, "addTypesetterForParagraphIdentifier:typesetter:", a5, v142);
      std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)v142);
    }
  }
  if (v103 == 4)
    v117 = v104;
  else
    v117 = v103;
  *((_QWORD *)this + 35) = a3;
  return ((unint64_t)((_DWORD)v125 != 0) << 48) | ((unint64_t)(HIDWORD(v125) != 0) << 40) | (v104 << 32) | v117;
}

void sub_217900BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)&a40);
  _Unwind_Resume(a1);
}

uint64_t TSWPCoreTextTypesetter::pAdjustMaxHeightInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __CTFont *a5, char a6)
{
  const __CTFont *v7;
  int v12;
  _BOOL4 v13;
  CGFloat Size;
  const __CTFont *CopyWithAttributes;
  double v16;
  double v17;
  double v18;
  double Ascent;
  double v20;
  double v21;
  double Descent;
  double v23;
  double v24;
  _OWORD v26[4];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v7 = a5;
  if (!a5)
    v7 = *(const __CTFont **)(a4 + 24);
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  TSWPFontHeightInfoForFont(v7, &v27);
  v12 = TSWPResolveIntPropertyForStyles(*(_QWORD *)(a4 + 16), *(_QWORD *)(a2 + 96), 36, 0);
  v13 = v12 != 0;
  if (v12)
  {
    Size = CTFontGetSize(v7);
    CopyWithAttributes = CTFontCreateCopyWithAttributes(v7, Size * 1.5, 0, 0);
    TSWPFontHeightInfoForFont(CopyWithAttributes, v26);
    v27 = v26[0];
    v28 = v26[1];
    v29 = v26[2];
    v30 = v26[3];
  }
  else
  {
    CopyWithAttributes = 0;
  }
  TSWPResolveFloatPropertyForStyles(*(_QWORD *)(a4 + 16), *(_QWORD *)(a2 + 96), 33);
  if (v16 != 0.0)
  {
    v17 = v16;
    if (v12 == 2)
    {
      if (v16 >= 0.0)
      {
        Descent = CTFontGetDescent(CopyWithAttributes);
        v23 = v17 - (Descent - CTFontGetDescent(v7));
        if (v23 <= 0.0)
          goto LABEL_21;
        v24 = v23 + *(double *)&v28;
LABEL_17:
        *(double *)&v28 = v24;
        goto LABEL_21;
      }
    }
    else
    {
      if (v12 == 1)
      {
        if (v16 <= 0.0)
        {
          v18 = -v16;
          Ascent = CTFontGetAscent(CopyWithAttributes);
          v20 = v18 - (Ascent - CTFontGetAscent(v7));
          if (v20 > 0.0)
          {
            v21 = v20 + *((double *)&v28 + 1);
LABEL_20:
            *((double *)&v28 + 1) = v21;
          }
LABEL_21:
          v13 = 1;
          goto LABEL_22;
        }
        goto LABEL_16;
      }
      if (v16 > 0.0)
      {
LABEL_16:
        v24 = v16 + *(double *)&v28;
        goto LABEL_17;
      }
      if (v16 >= 0.0)
        goto LABEL_21;
    }
    v21 = *((double *)&v28 + 1) - v16;
    goto LABEL_20;
  }
LABEL_22:
  if (CopyWithAttributes)
    CFRelease(CopyWithAttributes);
  if (v13)
    *(_DWORD *)(*(_QWORD *)(a3 + 200) + 24) |= 0x400u;
  return TSWPCoreTextTypesetter::pAdjustMaxHeightInfoForHeightInfo(a1, (uint64_t)&v27, a3, a6);
}

double TSWPFontHeightInfoForFont@<D0>(const __CTFont *a1@<X0>, _OWORD *a2@<X8>)
{
  id v4;
  double result;

  v4 = +[TSWPFontHeightCache sharedCache](TSWPFontHeightCache, "sharedCache");
  if (v4)
  {
    objc_msgSend(v4, "fontHeightInfoForFont:", a1);
  }
  else
  {
    result = 0.0;
    a2[2] = 0u;
    a2[3] = 0u;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

void sub_217900F3C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void *TSWPResolveFloatPropertyForStyles(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char v5;
  void *result;
  float v7;
  double v8;
  char v9;
  _QWORD v10[3];

  v4 = 0;
  v10[2] = *MEMORY[0x24BDAC8D0];
  v10[0] = a1;
  v10[1] = a2;
  v5 = 1;
  do
  {
    result = (void *)v10[v4];
    if (result)
    {
      result = (void *)objc_msgSend(result, "floatValueForProperty:", a3);
      v8 = v7;
    }
    else
    {
      v8 = INFINITY;
    }
    v9 = v5 & (v8 == INFINITY);
    v4 = 1;
    v5 = 0;
  }
  while ((v9 & 1) != 0);
  return result;
}

uint64_t TSWPCoreTextTypesetter::pAdjustMaxHeightInfoForHeightInfo(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  double v4;
  double v5;
  double v6;

  if (!*(_BYTE *)(result + 30) || (a4 & 1) != 0)
  {
    *(float64x2_t *)(result + 168) = vmaxnmq_f64(*(float64x2_t *)(result + 168), *(float64x2_t *)(a2 + 16));
    v4 = 0.0;
  }
  else
  {
    v4 = (*(double *)(a2 + 16) + *(double *)(a2 + 24)) * 0.5;
    v5 = (*(double *)(result + 168) + *(double *)(result + 176)) * 0.5;
    if (v5 < v4)
      v5 = (*(double *)(a2 + 16) + *(double *)(a2 + 24)) * 0.5;
    *(double *)(result + 168) = v5;
    *(double *)(result + 176) = v5;
  }
  *(double *)(result + 152) = fmax(*(double *)(result + 152), *(double *)a2);
  *(float64x2_t *)(result + 192) = vmaxnmq_f64(*(float64x2_t *)(result + 192), *(float64x2_t *)(a2 + 40));
  *(double *)(result + 208) = fmax(*(double *)(result + 208), *(double *)(a2 + 56));
  if (v4 == 0.0)
    v4 = *(double *)(a2 + 16);
  v6 = v4 + *(double *)(a2 + 32);
  if (*(double *)(a3 + 192) >= v6)
    v6 = *(double *)(a3 + 192);
  *(double *)(a3 + 192) = v6;
  return result;
}

void sub_21790173C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t TSWPParagraphEnumerator::coreTextPropertiesFilterDelegate(TSWPParagraphEnumerator *this)
{
  if (this->var1 && (objc_opt_respondsToSelector() & 1) != 0)
    return objc_msgSend(this->var1, "coreTextPropertiesFilterDelegateAtParIndex:", this->var2);
  else
    return 0;
}

uint64_t TSWPParagraphEnumerator::paragraphLanguage(TSWPParagraphEnumerator *this, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(this->var0, "languageAtParIndex:useStringTokenizer:useCreationLanguage:", this->var2, a2, a3);
}

uint64_t TSWPParagraphTypesetter::TSWPParagraphTypesetter(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  _WORD **v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  unint64_t v13;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v8 = (_WORD **)(a1 + 32);
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  v9 = objc_msgSend(a2, "length");
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v9;
  if (v9)
  {
    std::vector<unsigned short>::resize((uint64_t)v8, v9);
    objc_msgSend(*(id *)a1, "getCharacters:range:", *(_QWORD *)(a1 + 32), 0, v9);
    v10 = *(_QWORD *)(a1 + 32);
    if (v9 - 1 >= (*(_QWORD *)(a1 + 40) - v10) >> 1)
      v11 = 0;
    else
      v11 = *(unsigned __int16 *)(v10 + 2 * (v9 - 1));
  }
  else
  {
    std::vector<unsigned short>::resize((uint64_t)v8, 1uLL);
    v11 = 0;
    **v8 = 0;
  }
  if (IsParagraphBreakingCharacter(v11))
    v12 = v11;
  else
    v12 = 0;
  *(_WORD *)(a1 + 72) = v12;
  if (v9)
  {
    v13 = v9 - 1;
    if (objc_msgSend(*(id *)a1, "hasColumnBreakAtCharIndex:", v13))
      (*v8)[v13] = 8233;
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 74) = a4;
  return a1;
}

void sub_217901A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void *v13;

  a10 = v11 + 9;
  std::vector<_TSWPTateChuYokoRun>::__destroy_vector::operator()[abi:nn180100](&a10);
  std::vector<_TSWPRubyRun>::__destroy_vector::operator()[abi:nn180100](&a10);
  v13 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 40) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void std::vector<unsigned short>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int16 v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 1);
    if (v10 < 0)
      abort();
    v11 = v9 >> 1;
    v12 = v5 - v8;
    if (v12 > v10)
      v10 = v12;
    if (v12 >= 0x7FFFFFFFFFFFFFFELL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[2 * v11];
    v16 = &v14[2 * v13];
    bzero(v15, 2 * a2);
    v17 = &v15[2 * a2];
    while (v7 != v8)
    {
      v18 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v15 - 1) = v18;
      v15 -= 2;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void std::vector<unsigned short>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 2 * a2;
  }
  else
  {
    std::vector<unsigned short>::__append((char **)a1, a2 - v2);
  }
}

void TSWPParagraphTypesetter::createAttributedString(TSWPParagraphTypesetter *this)
{
  void *v2;
  uint64_t v3;
  const UniChar *v4;
  CFIndex v5;
  const __CFAllocator *v6;
  const __CFString *v7;
  __CFAttributedString *Mutable;
  CFRange v9;

  if (!*((_QWORD *)this + 7)
    || (v2 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler"),
        v3 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSWPParagraphTypesetter::createAttributedString()"), objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPParagraphTypesetter.mm"), 96, CFSTR("expected nil value for '%s'"), "_attributedString"), !*((_QWORD *)this + 7)))
  {
    v4 = (const UniChar *)*((_QWORD *)this + 4);
    v5 = (uint64_t)(*((_QWORD *)this + 5) - (_QWORD)v4) >> 1;
    v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v7 = CFStringCreateWithCharactersNoCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], v4, v5, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
    Mutable = CFAttributedStringCreateMutable(v6, v5);
    *((_QWORD *)this + 7) = Mutable;
    v9.location = 0;
    v9.length = 0;
    CFAttributedStringReplaceString(Mutable, v9, v7);
    CFRelease(v7);
  }
}

CTTypesetterRef TSWPParagraphTypesetter::createCTTypesetter(TSWPParagraphTypesetter *this)
{
  CTTypesetterRef result;

  TSWPParagraphTypesetter::pSetupRubyLinesForParagraph(this);
  TSWPParagraphTypesetter::pApplyRubyRunDelegatesToAttributedString(this);
  if (*((_BYTE *)this + 74))
    TSWPParagraphTypesetter::pSetupTateChuYokoForParagraph(this);
  result = CTTypesetterCreateWithAttributedString(*((CFAttributedStringRef *)this + 7));
  *((_QWORD *)this + 8) = result;
  return result;
}

void TSWPParagraphTypesetter::pApplyRubyRunDelegatesToAttributedString(TSWPParagraphTypesetter *this)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  CFIndex v7;
  uint64_t v8;

  v1 = *((_QWORD *)this + 11) - *((_QWORD *)this + 10);
  if (v1)
  {
    v3 = 0;
    v4 = v1 / 72;
    if (v4 <= 1)
      v5 = 1;
    else
      v5 = v4;
    do
    {
      v6 = *((_QWORD *)this + 10) + v3;
      v7 = *(_QWORD *)(v6 + 8);
      v8 = *(_QWORD *)(v6 + 16);
      TSWPParagraphTypesetter::pAddRubyRunDelegateAtIndexForRun((uint64_t)this, v7, v6);
      TSWPParagraphTypesetter::pAddRubyRunDelegateAtIndexForRun((uint64_t)this, v7 + v8 - 1, v6);
      v3 += 72;
      --v5;
    }
    while (v5);
  }
}

void TSWPParagraphTypesetter::pSetupRubyLinesForParagraph(TSWPParagraphTypesetter *this)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  CFIndex Length;
  const __CFString *v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  const __CFDictionary *v25;
  uint64_t v26;
  const __CTTypesetter *v27;
  uint64_t v28;
  uint64_t v29;
  CFIndex v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  CFIndex v34;
  const __CTLine *Line;
  double TypographicBounds;
  _QWORD *v37;
  char *v38;
  uint64_t *v39;
  const __CFAttributedString *aStr;
  void *v41;
  unint64_t v42;
  uint64_t v43;
  __int128 cf;
  _BYTE v45[25];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[128];
  uint64_t v51;
  CFRange v52;
  CFRange v53;
  CFRange v54;

  v51 = *MEMORY[0x24BDAC8D0];
  v38 = (char *)this + 80;
  if (*((_QWORD *)this + 11) != *((_QWORD *)this + 10))
  {
    v2 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v3 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSWPParagraphTypesetter::pSetupRubyLinesForParagraph()");
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPParagraphTypesetter.mm"), 395, CFSTR("expected zero ruby runs when setting up typesetter"));
  }
  v4 = (void *)objc_msgSend(*(id *)this, "smartFieldsWithAttributeKind:intersectingRange:", 7, *((_QWORD *)this + 2), *((_QWORD *)this + 3), v38);
  if (v4)
  {
    v5 = v4;
    if (objc_msgSend(v4, "count"))
    {
      aStr = CFAttributedStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
      v46 = 0u;
      v47 = 0u;
      v48 = 0u;
      v49 = 0u;
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v46, v50, 16);
      if (v6)
      {
        v7 = *(_QWORD *)v47;
        do
        {
          v8 = 0;
          do
          {
            if (*(_QWORD *)v47 != v7)
              objc_enumerationMutation(v5);
            v9 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * v8);
            v10 = *(id *)this;
            v11 = objc_msgSend(v9, "range");
            v13 = objc_msgSend(v10, "charRangeMappedFromStorage:", v11, v12);
            v15 = v13;
            v16 = *((_QWORD *)this + 2);
            if (v16 <= v13 && (v17 = v14, *((_QWORD *)this + 3) + v16 >= v13 + v14))
            {
              if (v14)
              {
                Length = CFAttributedStringGetLength(aStr);
                v21 = (const __CFString *)objc_msgSend(v9, "rubyText");
                v52.location = Length;
                v52.length = 0;
                CFAttributedStringReplaceString(aStr, v52, v21);
                cf = 0u;
                memset(v45, 0, sizeof(v45));
                v41 = v9;
                v42 = v15;
                v43 = v17;
                v22 = *((_QWORD *)this + 11);
                if (v22 >= *((_QWORD *)this + 12))
                {
                  v23 = std::vector<_TSWPRubyRun>::__push_back_slow_path<_TSWPRubyRun const&>(v39, (uint64_t)&v41);
                }
                else
                {
                  _TSWPRubyRun::_TSWPRubyRun(*((_QWORD *)this + 11), (uint64_t)&v41);
                  v23 = v22 + 72;
                  *((_QWORD *)this + 11) = v22 + 72;
                }
                *((_QWORD *)this + 11) = v23;
                v24 = (void *)objc_msgSend(*(id *)this, "paragraphStyleAtCharIndex:effectiveRange:", *((_QWORD *)this + 2), 0);
                v25 = (const __CFDictionary *)objc_msgSend(v24, "getTypesetterAttributes:scalePercent:isRightToLeft:", objc_msgSend(*(id *)this, "characterStyleAtCharIndex:effectiveRange:", v42, 0), *((_QWORD *)this + 1) >> 1, 0);
                v53.length = objc_msgSend((id)objc_msgSend(v9, "rubyText"), "length");
                v53.location = Length;
                CFAttributedStringSetAttributes(aStr, v53, v25, 1u);
                if ((_QWORD)cf)
                  CFRelease((CFTypeRef)cf);
              }
            }
            else
            {
              v18 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
              v19 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSWPParagraphTypesetter::pSetupRubyLinesForParagraph()");
              objc_msgSend(v18, "handleFailureInFunction:file:lineNumber:description:", v19, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPParagraphTypesetter.mm"), 428, CFSTR("ruby field crossed paragraph boundary"));
            }
            ++v8;
          }
          while (v6 != v8);
          v26 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v46, v50, 16);
          v6 = v26;
        }
        while (v26);
      }
      if (*((_BYTE *)this + 74))
        ApplyVerticalFormsToAttributedString(aStr, 0);
      v27 = CTTypesetterCreateWithAttributedString(aStr);
      v28 = *((_QWORD *)this + 11) - *((_QWORD *)this + 10);
      if (v28)
      {
        v29 = 0;
        v30 = 0;
        v31 = v28 / 72;
        if (v31 <= 1)
          v32 = 1;
        else
          v32 = v31;
        do
        {
          v33 = *v39;
          v34 = objc_msgSend((id)objc_msgSend(*(id *)(*v39 + v29), "rubyText"), "length");
          if (v34)
          {
            v54.location = v30;
            v54.length = v34;
            Line = CTTypesetterCreateLine(v27, v54);
            *(_QWORD *)(v33 + v29 + 24) = Line;
            TypographicBounds = CTLineGetTypographicBounds(Line, (CGFloat *)(v33 + v29 + 40), (CGFloat *)(v33 + v29 + 48), 0);
          }
          else
          {
            v37 = (_QWORD *)(v33 + v29);
            v37[3] = 0;
            v37[5] = 0;
            v37[6] = 0;
            TypographicBounds = 0.0;
          }
          *(double *)(v33 + v29 + 32) = TypographicBounds;
          v30 += v34;
          v29 += 72;
          --v32;
        }
        while (v32);
      }
      CFRelease(v27);
      CFRelease(aStr);
    }
  }
}

void sub_2179021B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_21790228C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *TSWPLayoutChore::validatedLayoutForInlineAttachment(id *this, TSWPDrawableAttachment *a2, id *a3, const __CFDictionary *a4)
{
  void *v7;
  double Width;
  double v9;
  CGRect v11;

  v7 = (void *)objc_msgSend(this[257], "layoutForInlineDrawable:", -[TSWPDrawableAttachment drawable](a2, "drawable"));
  if (a3 && a4)
  {
    objc_msgSend(a3[13], "wpBounds");
    Width = CGRectGetWidth(v11);
    if ((objc_msgSend(this[257], "autosizeFlags") & 0xC) != 0)
    {
      objc_msgSend(this[257], "maxSize");
      Width = v9;
    }
    objc_msgSend(v7, "willLayoutInlineWithTextAttributes:columnWidth:", a4, fmax(Width - *((double *)a3 + 31) - *((double *)a3 + 27), 18.0));
  }
  objc_msgSend((id)objc_msgSend(v7, "layoutController"), "validateLayoutWithDependencies:", v7);
  return v7;
}

uint64_t IsParagraphBreakingCharacter(uint64_t a1)
{
  if (TSWPParagraphBreakingCharacterSet::sTSWPParagraphBreakingCharacterSetOnceToken != -1)
    dispatch_once(&TSWPParagraphBreakingCharacterSet::sTSWPParagraphBreakingCharacterSetOnceToken, &__block_literal_global_21_0);
  return objc_msgSend((id)TSWPParagraphBreakingCharacterSet::sParagraphBreakingCharacterSet, "longCharacterIsMember:", a1);
}

double TSWPDefaultLineHeightForFont(const __CTFont *a1)
{
  double Ascent;
  double Descent;
  double Leading;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v9;
  double v10;
  CGFloat v11;
  _BOOL4 v12;
  double v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  double v19;
  UniChar characters;
  CGGlyph glyphs;
  CGRect BoundingBox;
  CGRect v23;
  CGRect BoundingRectsForGlyphs;
  CGRect v25;

  Ascent = CTFontGetAscent(a1);
  Descent = CTFontGetDescent(a1);
  Leading = CTFontGetLeading(a1);
  BoundingBox = CTFontGetBoundingBox(a1);
  x = BoundingBox.origin.x;
  y = BoundingBox.origin.y;
  width = BoundingBox.size.width;
  height = BoundingBox.size.height;
  v9 = floor(Leading + 0.5);
  if (Leading <= 0.0)
    v10 = 0.0;
  else
    v10 = v9;
  v19 = floor(Ascent + 0.5) + floor(Descent + 0.5);
  v11 = y;
  if (CGRectGetMaxY(BoundingBox) <= Ascent)
  {
    v23.origin.x = x;
    v23.origin.y = y;
    v23.size.width = width;
    v23.size.height = height;
    v12 = CGRectGetMinY(v23) < -(Descent + Leading);
  }
  else
  {
    v12 = 1;
  }
  v13 = v19 + v10;
  glyphs = 0;
  characters = 192;
  if (v12 && v10 == 0.0 && CTFontGetGlyphsForCharacters(a1, &characters, &glyphs, 1))
  {
    BoundingRectsForGlyphs = CTFontGetBoundingRectsForGlyphs(a1, kCTFontOrientationDefault, &glyphs, 0, 1);
    v14 = BoundingRectsForGlyphs.origin.x;
    v15 = BoundingRectsForGlyphs.origin.y;
    v16 = BoundingRectsForGlyphs.size.width;
    v17 = BoundingRectsForGlyphs.size.height;
    if (CGRectGetMaxY(BoundingRectsForGlyphs) > Ascent
      || (v25.origin.x = v14,
          v25.origin.y = v15,
          v25.size.width = v16,
          v25.size.height = v17,
          CGRectGetMinY(v25) < -Descent))
    {
      v13 = v13 + floor(v19 * 0.200000003 + 0.5);
    }
  }
  return fmax(v13, 1.0);
}

uint64_t TSWPCoreTextTypesetter::layoutLine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  __int128 v17;
  void *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  double MaxX;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  int v34;
  double v35;
  double v36;
  double v37;
  double v38;
  void *v39;
  _BOOL4 v40;
  int v41;
  void *v42;
  id v43;
  double v44;
  double v45;
  void *v46;
  const __CTFont *FontForStyle;
  CTFontRef CopyWithAttributes;
  const __CTFont *v49;
  void *v50;
  unint64_t v51;
  uint64_t v52;
  const __CFString *v53;
  void *v54;
  const __CFString *v55;
  TSDImageProvider *v56;
  TSDImageProvider *v57;
  uint64_t v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double Size;
  double v66;
  double v67;
  char v68;
  double v69;
  double v70;
  double v71;
  int v72;
  size_t v73;
  TSWPRubyField *v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  size_t v78;
  void *v79;
  uint64_t v80;
  _BOOL4 v81;
  int v82;
  char v83;
  char v84;
  size_t v85;
  size_t v86;
  BOOL v87;
  int v88;
  int v89;
  UniChar v90;
  const __CFCharacterSet *v91;
  BOOL v92;
  void *v93;
  int v94;
  uint64_t v95;
  unint64_t v96;
  size_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  TSWPRubyField *v101;
  BOOL IsDisabledForField;
  CFIndex location;
  TSWPListLabel *v104;
  void *v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  void *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  double v118;
  unint64_t v119;
  int v121;
  int v122;
  char v123;
  char v124;
  BOOL v125;
  unint64_t v126;
  char v127;
  unint64_t v128;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  char CanBreak;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  size_t v138;
  size_t v139;
  void *v140;
  uint64_t v141;
  unint64_t v142;
  double v143;
  void *v144;
  unint64_t v145;
  void *v146;
  void *v147;
  unint64_t v148;
  int v149;
  int v150;
  CTLineRef *v151;
  double v152;
  double v153;
  double v154;
  double v155;
  int v156;
  int v157;
  int v158;
  uint64_t v159;
  __int16 v160;
  double RubyLineRefsForLineFragment;
  uint64_t v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void *v177;
  uint64_t v178;
  void *v179;
  uint64_t v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  uint64_t v188;
  double v190;
  NSString *v191;
  NSString *v192;
  char v193;
  uint64_t v194;
  CFIndex v195;
  void *v196;
  void *v197;
  uint64_t v198;
  uint64_t v199;
  CTParagraphStyleRef v200;
  id v201;
  unsigned int FontRunIndexForLocalCharIndex;
  id v203;
  char v204;
  const __CTFont *v205;
  double v206;
  double v207;
  void *v208;
  uint64_t v209;
  unint64_t Length;
  CFIndex v211;
  const __CFAllocator *v212;
  unsigned int v213;
  uint64_t CharacterAtIndex;
  int v215;
  int v216;
  const __CFString *v217;
  unint64_t TopicNumberForList;
  uint64_t v219;
  size_t v220;
  void *v221;
  void *v222;
  uint64_t v223;
  id v224;
  double v225;
  double v226;
  double v227;
  double v228;
  double v229;
  double v230;
  void *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  const __CFDictionary *attributes;
  const __CFAttributedString *attrString;
  const __CTFont *cf;
  const __CFAllocator *v239;
  __CFAttributedString *aStr;
  CTLineRef line;
  TSWPParagraphEnumerator *v242;
  void *v243;
  int v244;
  double Descent;
  double alloc;
  const __CFString *alloca;
  const __CFAllocator *allocb;
  uint64_t v249;
  TSWPRubyField *v250;
  TSWPRubyField *v251;
  int v252;
  unsigned int v253;
  unint64_t v254;
  TSWPParagraphEnumerator v255;
  unint64_t v256;
  CTParagraphStyleSetting settings;
  CFRange v258;
  uint64_t v259;
  CFRange v260;
  CFRange v261;
  CFRange v262;
  CFRange v263;
  CFRange v264;

  v259 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 34)
    || ((v6 = *(_QWORD *)(a1 + 40), *(_QWORD *)a2 >= v6) ? (v7 = *(_QWORD *)a2 > *(_QWORD *)(a1 + 48) + v6) : (v7 = 1),
        v7))
  {
    v8 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v9 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "TSWPCharIndex TSWPCoreTextTypesetter::layoutLine(const TSWPLayoutState *, TSWPTypesetterParamBlock *)");
    objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 801, CFSTR("layoutLine called without paragraph being setup correctly"));
  }
  if ((*(_BYTE *)(a3 + 58) & 1) != 0
    && *(_QWORD *)(*(_QWORD *)(a1 + 232) + 88) != *(_QWORD *)(*(_QWORD *)(a1 + 232) + 80))
  {
    v10 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v11 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "TSWPCharIndex TSWPCoreTextTypesetter::layoutLine(const TSWPLayoutState *, TSWPTypesetterParamBlock *)");
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 802, CFSTR("Can't skip glyph vectors with ruby"));
  }
  v12 = *(uint64_t **)(a3 + 200);
  v13 = objc_msgSend(*(id *)(a1 + 64), "charIndexMappedFromStorage:", *(_QWORD *)a2);
  v249 = *(_QWORD *)(a3 + 184);
  v250 = *(TSWPRubyField **)(a3 + 176);
  if (v13 == 0x7FFFFFFFFFFFFFFFLL || (v14 = v13, v13 > *(_QWORD *)(a1 + 56)))
  {
    if (*(_QWORD *)a2 != *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 40))
    {
      v15 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
      v16 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "TSWPCharIndex TSWPCoreTextTypesetter::layoutLine(const TSWPLayoutState *, TSWPTypesetterParamBlock *)");
      objc_msgSend(v15, "handleFailureInFunction:file:lineNumber:description:", v16, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 814, CFSTR("bad start char index"));
    }
    v14 = *(_QWORD *)(a1 + 56);
  }
  v256 = v14;
  *v12 = *(_QWORD *)a2;
  v12[2] = *(_QWORD *)(a1 + 40);
  v17 = *(_OWORD *)(a2 + 536);
  *((_OWORD *)v12 + 3) = *(_OWORD *)(a2 + 520);
  *((_OWORD *)v12 + 4) = v17;
  if (*(_BYTE *)(a1 + 30))
    *((_DWORD *)v12 + 6) |= 0x2000u;
  if (v12[23])
  {
    v18 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v19 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "TSWPCharIndex TSWPCoreTextTypesetter::layoutLine(const TSWPLayoutState *, TSWPTypesetterParamBlock *)");
    objc_msgSend(v18, "handleFailureInFunction:file:lineNumber:description:", v19, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 825, CFSTR("expected nil value for '%s'"), "lineFragment->_textSource");
  }
  v12[23] = (uint64_t)*(id *)(a1 + 64);
  v20 = *(_OWORD *)(a3 + 112);
  v21 = *(_OWORD *)(a3 + 128);
  v22 = *(_OWORD *)(a3 + 96);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a1 + 200) = v21;
  *(_OWORD *)(a1 + 184) = v20;
  *(_OWORD *)(a1 + 168) = v22;
  v252 = *(_DWORD *)(a3 + 32) & 0x14;
  v23 = *((_DWORD *)v12 + 6);
  v24 = *(double *)(a3 + 16);
  v25 = *(double *)(a2 + 520);
  v26 = *(double *)a3;
  *(_QWORD *)&v21 = *(_QWORD *)(a2 + 528);
  *(_QWORD *)&v22 = *(_QWORD *)(a2 + 536);
  v27 = *(_QWORD *)(a2 + 544);
  *(double *)&v20 = v25;
  MaxX = CGRectGetMaxX(*(CGRect *)&v20);
  v30 = *(double *)(a2 + 208);
  v31 = *(double *)(a2 + 216);
  v32 = v24 - v31;
  v33 = *(double *)(a3 + 160);
  if ((v23 & 0x1000) != 0)
  {
    v32 = v32 + v33;
    if (!*(_BYTE *)(a2 + 332) && *(_BYTE *)(a2 + 512) && !*(_BYTE *)(a2 + 513) && v33 == 0.0)
      v32 = v24 - *(double *)(a2 + 224);
    if (!*(_BYTE *)(a3 + 146))
    {
      v30 = fmax(fmin(v30, v32 + -18.0), 0.0);
      if (v252 != 4)
        v32 = fmin(fmax(v32, v30 + 18.0), v24);
      goto LABEL_38;
    }
LABEL_27:
    v34 = 0;
    goto LABEL_39;
  }
  v30 = v30 + v33;
  if (!*(_BYTE *)(a2 + 332) && *(_BYTE *)(a2 + 512) && !*(_BYTE *)(a2 + 513) && v33 == 0.0)
    v30 = *(double *)(a2 + 224);
  if (*(_BYTE *)(a3 + 146))
    goto LABEL_27;
  v32 = fmin(fmax(v32, v30 + 18.0), v24);
  if (v252 != 4)
    v30 = fmax(fmin(v30, v32 + -18.0), 0.0);
LABEL_38:
  v34 = 1;
LABEL_39:
  v35 = v25 - v26;
  v29 = *(double *)a3;
  v36 = MaxX - *(double *)a3;
  if (*(_BYTE *)(a2 + 344))
  {
    if (v34)
    {
      if (v252 != 4)
      {
        v32 = fmin(fmax(v32 - *(double *)(a2 + 232), v30 + 18.0), v24);
LABEL_58:
        if (v35 >= v30)
          v37 = v25 - v26;
        else
          v37 = v30;
        if (v32 >= v36)
          v38 = MaxX - v29;
        else
          v38 = v32;
        goto LABEL_64;
      }
LABEL_45:
      if (v35 >= v30)
        v37 = v25 - v26;
      else
        v37 = v30;
LABEL_56:
      v38 = *(double *)(a3 + 40) - v31;
      goto LABEL_64;
    }
    v32 = v32 - *(double *)(a2 + 232);
  }
  else
  {
    v30 = v30 + *(double *)(a2 + 232);
    if (v34)
    {
      if (v252 != 4)
      {
        v30 = fmax(fmin(v30, v32 + -18.0), 0.0);
        goto LABEL_58;
      }
      goto LABEL_45;
    }
  }
  if (v35 >= v30)
    v37 = v25 - v26;
  else
    v37 = v30;
  if (v32 >= v36)
    v38 = MaxX - v29;
  else
    v38 = v32;
  if (v252 == 4)
    goto LABEL_56;
LABEL_64:
  if (!*(_BYTE *)(a2 + 512))
  {
LABEL_95:
    v40 = 1;
    goto LABEL_96;
  }
  v39 = *(void **)(a2 + 184);
  v40 = 1;
  if (v39 && *(_BYTE *)(a2 + 332))
  {
    v41 = objc_msgSend(v39, "labelTypeForLevel:", *(_QWORD *)(a2 + 192));
    v42 = (void *)objc_msgSend(*(id *)(a2 + 184), "valueForProperty:", 181);
    if (v42)
      v43 = (id)objc_msgSend(v42, "objectAtIndexedSubscript:", *(_QWORD *)(a2 + 192));
    else
      v43 = +[TSWPListLabelGeometry listLabelGeometry](TSWPListLabelGeometry, "listLabelGeometry");
    v243 = v43;
    v244 = v41;
    TSWPResolveFloatPropertyForStyles(objc_msgSend(*(id *)(a1 + 64), "characterStyleAtCharIndex:effectiveRange:", v14, 0), *(_QWORD *)(a2 + 96), 17);
    v45 = v44 * (float)((float)(unint64_t)objc_msgSend(*(id *)(a2 + 104), "scaleTextPercent") / 100.0);
    v242 = (TSWPParagraphEnumerator *)(a2 + 24);
    v46 = (void *)TSWPParagraphEnumerator::listLabelParagraphStyleOverride((TSWPParagraphEnumerator *)(a2 + 24));
    if (!v46)
      v46 = *(void **)(a2 + 96);
    FontForStyle = TSWPFastCreateFontForStyle(0, v46, objc_msgSend(*(id *)(a2 + 104), "scaleTextPercent"));
    if (v45 != CTFontGetSize(FontForStyle))
    {
      CopyWithAttributes = CTFontCreateCopyWithAttributes(FontForStyle, v45, 0, 0);
      CFRelease(FontForStyle);
      FontForStyle = CopyWithAttributes;
    }
    if (v244 == 3)
    {
      TSWPParagraphEnumerator::TSWPParagraphEnumerator(&v255, v242);
      v53 = TSWPCoreTextTypesetter::pNumberedListLabel((TSWPCoreTextTypesetter *)a1, (const TSWPLayoutState *)a2, &v255, *(_QWORD *)(a2 + 192), *(_BYTE *)(a1 + 30) == 0);
      TSWPParagraphEnumerator::~TSWPParagraphEnumerator(&v255);
      if (v53)
        goto LABEL_91;
    }
    else
    {
      if (v244 != 2)
      {
        if (v244 == 1)
        {
          v49 = FontForStyle;
          v50 = (void *)objc_msgSend(*(id *)(a2 + 184), "valueForProperty:", 182);
          v51 = *(_QWORD *)(a2 + 192);
          v52 = v51 >= objc_msgSend(v50, "count")
              ? 0
              : objc_msgSend(v50, "objectAtIndexedSubscript:", *(_QWORD *)(a2 + 192));
          objc_opt_class();
          FontForStyle = v49;
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v56 = (TSDImageProvider *)objc_msgSend(+[TSDImageProviderPool sharedPool](TSDImageProviderPool, "sharedPool"), "providerForData:shouldValidate:", v52, 1);
            if (v56)
            {
              v57 = v56;
              if (!-[TSDImageProvider isError](v56, "isError"))
              {
                v58 = operator new();
                TSWPListLabel::TSWPListLabel((TSWPListLabel *)v58, v57);
                *(_DWORD *)(v58 + 64) = 1;
                alloc = CTFontGetAscent(v49);
                Descent = CTFontGetDescent(v49);
                objc_msgSend(v243, "scale");
                v60 = v59;
                -[TSDImageProvider naturalSize](v57, "naturalSize");
                v63 = v61;
                v64 = v62;
                if (v62 <= 0.0)
                {
                  v231 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
                  v232 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "TSWPCharIndex TSWPCoreTextTypesetter::layoutLine(const TSWPLayoutState *, TSWPTypesetterParamBlock *)");
                  v233 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm");
                  v234 = v232;
                  FontForStyle = v49;
                  objc_msgSend(v231, "handleFailureInFunction:file:lineNumber:description:", v234, v233, 984, CFSTR("TSDImageProvider has an illegal height (zero or negative)"));
                }
                else
                {
                  v63 = v61 * ((alloc + Descent) * v60 / v62);
                  v64 = (alloc + Descent) * v60;
                }
                *(double *)v58 = v63;
                *(double *)(v58 + 8) = v64;
                objc_msgSend(v243, "baselineOffset");
                *(_QWORD *)(v58 + 56) = v235;
LABEL_393:
                CFRelease(FontForStyle);
                v220 = *(_QWORD *)(a2 + 96);
                *(_QWORD *)&settings.spec = *(_QWORD *)(a2 + 184);
                settings.valueSize = v220;
                v221 = (void *)TSWPResolvePropertyForStyles((uint64_t)&settings, 2uLL, 40, 1);
                if (v221 == (void *)objc_msgSend(MEMORY[0x24BDBCEF8], "null"))
                {
                  v222 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
                  v223 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "TSWPCharIndex TSWPCoreTextTypesetter::layoutLine(const TSWPLayoutState *, TSWPTypesetterParamBlock *)");
                  objc_msgSend(v222, "handleFailureInFunction:file:lineNumber:description:", v223, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 1172, CFSTR("TSWPResolvePropertyForStyles should not return NSNull."));
                }
                if (v221)
                {
                  v224 = v221;

                  *(_QWORD *)(v58 + 32) = v221;
                }
                v225 = *(double *)(a2 + 224);
                objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(a2 + 184), "valueForProperty:", 177), "objectAtIndexedSubscript:", *(_QWORD *)(a2 + 192)), "doubleValue");
                v227 = v225 + v226;
                v228 = *(double *)v58;
                if (*(_BYTE *)(a2 + 344))
                {
                  *(_BYTE *)(v58 + 80) = 1;
                  v229 = fmax(fmin(v227, v24 - v37 + -20.0), v24 - v36);
                  v30 = v229 - (v24 - v36);
                  v38 = v24 - fmax(*(double *)(a2 + 224) + *(double *)(a2 + 232), v228 + v229);
                }
                else
                {
                  v230 = fmax(fmin(v227, v38 + -20.0), v35);
                  v30 = v230 - v35;
                  v37 = fmax(*(double *)(a2 + 224) + *(double *)(a2 + 232), v228 + v230);
                }
                *(double *)(v58 + 72) = v30;
                v12[22] = v58;
                v40 = v37 <= v38 + -10.0;
                if (v37 > v38 + -10.0 && *(_BYTE *)(a3 + 146) && *(_QWORD *)(a1 + 56))
                {
                  v12[22] = 0;
                  TSWPListLabel::~TSWPListLabel((TSWPListLabel *)v58);
                  MEMORY[0x219A153B8]();
                }
                goto LABEL_96;
              }
            }
          }
        }
        goto LABEL_94;
      }
      v54 = (void *)objc_msgSend(*(id *)(a2 + 184), "valueForProperty:", 183);
      if (v54)
        v55 = (const __CFString *)objc_msgSend(v54, "objectAtIndexedSubscript:", *(_QWORD *)(a2 + 192));
      else
        v55 = +[TSWPListStyle defaultLabelString](TSWPListStyle, "defaultLabelString");
      v53 = v55;
      if (v55)
      {
LABEL_91:
        alloca = v53;
        cf = FontForStyle;
        Size = CTFontGetSize(FontForStyle);
        if (!objc_msgSend(v243, "scaleWithText") || (objc_msgSend(v243, "scale"), v66 == 1.0))
        {
          v68 = 0;
        }
        else
        {
          objc_msgSend(v243, "scale");
          Size = Size * v67;
          v68 = 1;
        }
        v191 = (NSString *)objc_msgSend(*(id *)(a2 + 184), "valueForProperty:", 16);
        if (-[NSString isEqual:](v191, "isEqual:", objc_msgSend(MEMORY[0x24BDBCEF8], "null")))
          v192 = 0;
        else
          v192 = v191;
        v193 = (v192 == 0) & ~v68;
        v194 = (uint64_t)cf;
        if ((v193 & 1) == 0)
          v194 = TSWPCoreTextTypesetter::pLabelFont((TSWPCoreTextTypesetter *)a1, v192, cf, Size);
        v195 = *(_QWORD *)(a2 + 96);
        v258.location = *(_QWORD *)(a2 + 184);
        v258.length = v195;
        v196 = (void *)TSWPResolvePropertyForStyles((uint64_t)&v258, 2uLL, 18, 0);
        if (!v196)
        {
          v197 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
          v198 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "TSWPCharIndex TSWPCoreTextTypesetter::layoutLine(const TSWPLayoutState *, TSWPTypesetterParamBlock *)");
          objc_msgSend(v197, "handleFailureInFunction:file:lineNumber:description:", v198, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 1069, CFSTR("Expect label color, or paragraph color as the default."));
        }
        v199 = objc_msgSend(v196, "CGColor");
        if (*(_BYTE *)(a2 + 344))
        {
          LOBYTE(v254) = 1;
          settings.spec = kCTParagraphStyleSpecifierBaseWritingDirection;
          settings.valueSize = 1;
          settings.value = &v254;
          v200 = CTParagraphStyleCreate(&settings, 1uLL);
          v201 = objc_alloc(MEMORY[0x24BDBCE70]);
          attributes = (const __CFDictionary *)objc_msgSend(v201, "initWithObjectsAndKeys:", v194, *MEMORY[0x24BDC4C28], v199, *MEMORY[0x24BDC4EE0], v200, *MEMORY[0x24BDC4F20], 0);
          CFRelease(v200);
        }
        else
        {
          v203 = objc_alloc(MEMORY[0x24BDBCE70]);
          attributes = (const __CFDictionary *)objc_msgSend(v203, "initWithObjectsAndKeys:", v194, *MEMORY[0x24BDC4C28], v199, *MEMORY[0x24BDC4EE0], 0);
        }
        v239 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        attrString = CFAttributedStringCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], alloca, attributes);
        line = CTLineCreateWithAttributedString(attrString);
        v204 = 0;
        if (*(_BYTE *)(a1 + 30) && v244 == 3)
        {
          v205 = TSWPFastCreateFontForStyle(0, *(void **)(a2 + 96), 0x64uLL);
          TSWPFontGetLineHeight();
          v207 = v206;
          CFRelease(v205);
          if (CTLineGetTypographicBounds(line, 0, 0, 0) >= v207)
          {
            Length = CFStringGetLength(alloca);
            aStr = CFAttributedStringCreateMutable(v239, 0);
            v262.location = 0;
            v262.length = 0;
            CFAttributedStringReplaceString(aStr, v262, alloca);
            v263.location = 0;
            v263.length = Length;
            CFAttributedStringSetAttributes(aStr, v263, attributes, 1u);
            if (Length)
            {
              v211 = 0;
              v212 = (const __CFAllocator *)*MEMORY[0x24BDBD258];
              v213 = 1;
              do
              {
                CharacterAtIndex = CFStringGetCharacterAtIndex(alloca, v211);
                v215 = CharacterAtIndex;
                LOWORD(settings.spec) = 0;
                v216 = TSWPFullWidthCharacterForCharacter(CharacterAtIndex);
                LOWORD(settings.spec) = v216;
                if (v215 != v216)
                {
                  v217 = CFStringCreateWithCharactersNoCopy(v239, (const UniChar *)&settings, 1, v212);
                  v264.location = v211;
                  v264.length = 1;
                  CFAttributedStringReplaceString(aStr, v264, v217);
                  CFRelease(v217);
                }
                v211 = v213;
                v7 = Length > v213++;
              }
              while (v7);
            }
            ApplyVerticalFormsToAttributedString(aStr, 0);
            CFRelease(attrString);
            CFRelease(line);
            line = CTLineCreateWithAttributedString(aStr);
            v204 = 0;
            attrString = aStr;
          }
          else
          {
            v204 = 1;
          }
        }
        TopicNumberForList = TSWPParagraphEnumerator::paragraphListNumber(v242, 0);
        if (TopicNumberForList == 0x7FFFFFFFFFFFFFFFLL)
        {
          TopicNumberForList = TSWPParagraphEnumerator::paragraphListStart(v242);
          if (!TopicNumberForList)
            TopicNumberForList = TSWPTopicNumberHints::nextTopicNumberForList(*(TSWPTopicNumberHints **)(a1 + 280), *(TSWPListStyle **)(a2 + 184), *(_QWORD *)(a2 + 192));
        }
        v58 = operator new();
        TSWPListLabel::TSWPListLabel((TSWPListLabel *)v58, line, TopicNumberForList);
        *(_DWORD *)(v58 + 64) = v244;
        *(_BYTE *)(v58 + 81) = v204;
        objc_msgSend(v243, "baselineOffset");
        *(_QWORD *)(v58 + 56) = v219;
        TSWPListLabel::setListLabelString((TSWPListLabel *)v58, alloca);
        CFRelease(attributes);
        CFRelease(attrString);
        CFRelease(line);
        FontForStyle = cf;
        goto LABEL_393;
      }
    }
LABEL_94:
    CFRelease(FontForStyle);
    goto LABEL_95;
  }
LABEL_96:
  if (v37 >= v38)
    v69 = v37;
  else
    v69 = v38;
  v70 = fmin(v69 - v37, 32000.0);
  v71 = v37;
  if ((*(_BYTE *)(a3 + 32) & 4) != 0)
    goto LABEL_106;
  v72 = *(_DWORD *)(a2 + 388);
  if (v72 == 1)
    goto LABEL_105;
  if (v72 == 2)
  {
    v71 = v37 + v70 * 0.5;
    goto LABEL_106;
  }
  v71 = v37;
  if (v72 == 3)
  {
    v71 = v37;
    if (*(_BYTE *)(a2 + 333))
LABEL_105:
      v71 = v69;
  }
LABEL_106:
  if (!v40 || (v73 = *(_QWORD *)(a1 + 56), v70 <= 1.0) && !*(_BYTE *)(a3 + 145) || v73 - 1 < v14)
  {
    TSWPCoreTextTypesetter::createLineRefForEmptyLineFragment((id *)a1, (id *)a2, (TSWPLineFragment *)v12, 0, v71, v30);
    v73 = v14;
    goto LABEL_331;
  }
  if (v14 >= v73 - (*(_WORD *)(*(_QWORD *)(a1 + 232) + 72) != 0))
  {
    v12[1] = objc_msgSend(*(id *)(a1 + 64), "charIndexMappedToStorage:", *(_QWORD *)(a1 + 56)) - *v12;
    TSWPCoreTextTypesetter::createLineRefForEmptyLineFragment((id *)a1, (id *)a2, (TSWPLineFragment *)v12, *(unsigned __int16 *)(*(_QWORD *)(a1 + 232) + 72), v71, v190);
    TSWPLineFragment::setTypesetterPos((TSWPLineFragment *)v12, v37, v69);
    goto LABEL_331;
  }
  if (v250 != (TSWPRubyField *)0x7FFFFFFFFFFFFFFFLL)
  {
    v14 = objc_msgSend(*(id *)(a1 + 64), "charIndexMappedFromStorage:");
    v12[1] = v249;
    TSWPLineFragment::setTypesetterPos((TSWPLineFragment *)v12, v37, v69);
    v73 = v14 + v249;
    if (!TSWPLineFragment::shareLineRefs((TSWPLineFragment *)v12, *(const TSWPLineFragment **)(a3 + 152))
      && (*(_BYTE *)(a3 + 58) & 1) == 0)
    {
      FontRunIndexForLocalCharIndex = TSWPCoreTextTypesetter::pFindFontRunIndexForLocalCharIndex((TSWPCoreTextTypesetter *)a1, v73 - 1);
      TSWPLineFragment::setHyphenInfo((TSWPLineFragment *)v12, *(CFTypeRef *)(*(_QWORD *)(a1 + 120) + 104 * FontRunIndexForLocalCharIndex + 32), 45);
      TSWPCoreTextTypesetter::createLineRefsForLineFragment(a1, (TSWPLineFragment *)v12, a2, v252 == 4, *(_DWORD *)(a3 + 56));
    }
    goto LABEL_331;
  }
  objc_opt_class();
  objc_msgSend(*(id *)(a1 + 64), "smartFieldAtCharIndex:attributeKind:effectiveRange:", v256, 7, &settings);
  v74 = (TSWPRubyField *)TSUDynamicCast();
  if (v74)
    TSWPParagraphTypesetter::enableRubyLayoutForField(*(TSWPParagraphTypesetter **)(a1 + 232), v74);
  TSWPLineFragment::saveLayoutState((TSWPLineFragment *)v12);
  v75 = 0;
  allocb = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  while (1)
  {
    v253 = v75;
    if (v75)
      TSWPLineFragment::restoreLayoutState((TSWPLineFragment *)v12);
    if (!*(_BYTE *)(a1 + 88))
    {
LABEL_154:
      if (!*(_BYTE *)(a1 + 31) || !*(_BYTE *)(a1 + 104))
      {
        v98 = TSWPCoreTextTypesetter::pCTTypesetter((TSWPCoreTextTypesetter *)a1);
        v73 = MEMORY[0x219A14C44](v98, v14, v70, v37) + v14;
        v256 = v73;
        if (v73 > *(_QWORD *)(a1 + 56))
        {
          v99 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
          v100 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "TSWPCharIndex TSWPCoreTextTypesetter::layoutLine(const TSWPLayoutState *, TSWPTypesetterParamBlock *)");
          objc_msgSend(v99, "handleFailureInFunction:file:lineNumber:description:", v100, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 1476, CFSTR("Bad endCharIndex"));
        }
        if (!v73
          || *(_BYTE *)(a3 + 145)
          || v73 >= *(_QWORD *)(a1 + 56)
          || (TSWPCoreTextTypesetter::pCanBreakLineInRange((TSWPCoreTextTypesetter *)a1, v14, v73) & 1) != 0)
        {
          if (v73 > v14)
          {
            v258 = (CFRange)*MEMORY[0x24BEB3BF0];
            objc_opt_class();
            objc_msgSend(*(id *)(a1 + 64), "smartFieldAtCharIndex:attributeKind:effectiveRange:", v73, 7, &v258);
            v101 = (TSWPRubyField *)TSUDynamicCast();
            if (v101)
            {
              if (v258.length + v258.location > v73)
              {
                IsDisabledForField = TSWPParagraphTypesetter::rubyLayoutIsDisabledForField(*(TSWPParagraphTypesetter **)(a1 + 232), v101);
                location = v258.location;
                if (!IsDisabledForField)
                {
                  if (v258.location <= v14 && *(_BYTE *)(a3 + 145))
                  {
                    TSWPParagraphTypesetter::disableRubyLayoutForField(*(TSWPParagraphTypesetter **)(a1 + 232), v101);
                    location = v258.location;
                  }
                  else
                  {
                    if (v258.location <= v14)
                      v73 = v14;
                    else
                      v73 = v258.location;
                    v256 = v73;
                  }
                }
                if (v73 == location + v258.length - 1)
                  v256 = ++v73;
              }
            }
          }
        }
        else
        {
          v256 = v14;
          v104 = (TSWPListLabel *)v12[22];
          v73 = v14;
          if (v104)
          {
            TSWPListLabel::~TSWPListLabel(v104);
            MEMORY[0x219A153B8]();
            v12[22] = 0;
            v73 = v14;
          }
        }
        goto LABEL_268;
      }
      v95 = TSWPCoreTextTypesetter::pCTTypesetter((TSWPCoreTextTypesetter *)a1);
      v73 = MEMORY[0x219A14C38](v95, v14, v70, v37) + v14;
      v256 = v73;
      v96 = objc_msgSend(*(id *)(a1 + 64), "length");
      objc_opt_class();
      objc_msgSend(*(id *)(a1 + 64), "smartFieldAtCharIndex:attributeKind:effectiveRange:", v73, 7, &settings);
      v251 = (TSWPRubyField *)TSUDynamicCast();
      v97 = v73;
      if (v251)
      {
        v97 = v73;
        if (*(_QWORD *)&settings.spec <= v14)
        {
          if (TSWPParagraphTypesetter::isZeroWidthTrailingSpace(*(TSWPParagraphTypesetter **)(a1 + 232), v73))
          {
            v97 = v73 + 1;
            v256 = v73 + 1;
          }
          else if (*(_BYTE *)(a3 + 145))
          {
            TSWPParagraphTypesetter::disableRubyLayoutForField(*(TSWPParagraphTypesetter **)(a1 + 232), v251);
            v97 = v73;
          }
          else
          {
            v97 = v73;
            if (*(_BYTE *)(a3 + 146))
            {
              v256 = v14;
              v97 = v14;
            }
          }
        }
      }
      if (v97 >= v96)
        goto LABEL_263;
      v105 = *(void **)(*(_QWORD *)(a1 + 232) + 56);
      v106 = objc_msgSend(v105, "length");
      v107 = v14;
      if (v106 > v14)
      {
        v108 = objc_msgSend((id)objc_msgSend(v105, "string"), "rangeOfComposedCharacterSequenceAtIndex:", v14);
        v107 = v108 + v109;
      }
      if (v97 <= v107)
      {
LABEL_263:
        v73 = v256;
        if (v251)
        {
LABEL_264:
          if (settings.valueSize + *(_QWORD *)&settings.spec > v73
            && v73 == settings.valueSize + *(_QWORD *)&settings.spec - 1)
          {
            v256 = ++v73;
LABEL_269:
            v135 = v73 - 1;
            if (*(_WORD *)(*(_QWORD *)(a1 + 80) + 2 * (v73 - 1)) == 173)
            {
              v260.length = v73 + ~v14;
              v260.location = v14;
              if (TSWPCoreTextTypesetter::pRoomForHyphen((TSWPCoreTextTypesetter *)a1, v260, v70, 45, (TSWPLineFragment *)v12))
              {
                TSWPLineFragment::setHyphenated((TSWPLineFragment *)v12, 1);
              }
              else
              {
                v136 = objc_msgSend(*(id *)(a1 + 64), "wordAtCharIndex:includePreviousWord:", v73, 0);
                if (v14 <= v136)
                  v137 = v136;
                else
                  v137 = v14;
                if (v135 <= v137)
                {
LABEL_281:
                  v256 = v135;
                  v73 = v135;
                }
                else
                {
                  v138 = v73 - 2;
                  while (1)
                  {
                    if (*(_WORD *)(*(_QWORD *)(a1 + 80) + 2 * v138) == 173)
                    {
                      v261.length = v138 - v14;
                      v261.location = v14;
                      if (TSWPCoreTextTypesetter::pRoomForHyphen((TSWPCoreTextTypesetter *)a1, v261, v70, 45, (TSWPLineFragment *)v12))
                      {
                        break;
                      }
                    }
                    v139 = v138 - 1;
                    v7 = v138-- > v137;
                    if (!v7)
                    {
                      v135 = v139 + 1;
                      goto LABEL_281;
                    }
                  }
                  v73 = v138 + 1;
                  v256 = v73;
                  TSWPLineFragment::setHyphenated((TSWPLineFragment *)v12, 1);
                }
              }
            }
            goto LABEL_282;
          }
        }
LABEL_268:
        if (!v73)
          goto LABEL_284;
        goto LABEL_269;
      }
      if ((TSWPCoreTextTypesetter::pKinsokuCanBreak((TSWPCoreTextTypesetter *)a1, &v256, (_NSRange *)&settings) & 1) != 0)
      {
        v110 = *(_QWORD *)(a1 + 80);
        v111 = v256;
        if (v256)
          v112 = objc_msgSend((id)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 232) + 56), "string"), "rangeOfComposedCharacterSequenceAtIndex:", v256 - 1);
        else
          v112 = 0;
        v122 = *(unsigned __int16 *)(v110 + 2 * v112);
        v123 = IsParagraphBreakingCharacter(*(unsigned __int16 *)(v110 + 2 * v112));
        if (v122 == 8232)
          v124 = 1;
        else
          v124 = v123;
        if ((v124 & 1) == 0)
        {
          if (v111 < v96)
          {
            while (IsWhitespaceCharacter(*(unsigned __int16 *)(*(_QWORD *)(a1 + 80) + 2 * v111)))
            {
              v125 = IsBreakingSpaceCharacter(*(unsigned __int16 *)(*(_QWORD *)(a1 + 80) + 2 * v111));
              v126 = v111 + 1;
              v127 = v111 + 1 >= v96 || v125;
              if ((v127 & 1) == 0
                && !IsBreakingSpaceCharacter(*(unsigned __int16 *)(*(_QWORD *)(a1 + 80) + 2 * v111 + 2)))
              {
                v256 = v111;
                v157 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 80) + 2 * v111 + 2);
                v158 = IsParagraphBreakingCharacter(*(unsigned __int16 *)(*(_QWORD *)(a1 + 80) + 2 * v111 + 2)) ^ 1;
                if (v157 == 8232)
                  LOBYTE(v158) = 0;
                if ((v158 & 1) == 0)
                {
                  v121 = 0;
                  ++v111;
                  goto LABEL_238;
                }
                while (1)
                {
LABEL_251:
                  while (v256)
                  {
                    v130 = objc_msgSend((id)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 232) + 56), "string"), "rangeOfComposedCharacterSequenceAtIndex:", v256 - 1);
                    if (v130 <= v14)
                      break;
                    v256 = v130;
                    if (TSWPCoreTextTypesetter::pKinsokuCanBreak((TSWPCoreTextTypesetter *)a1, &v256, 0))goto LABEL_263;
                  }
                  v256 = v73;
                  if (!*(_BYTE *)(a3 + 145))
                    goto LABEL_263;
                  objc_opt_class();
                  v131 = *(void **)(a1 + 64);
                  if (v73)
                    v132 = objc_msgSend((id)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 232) + 56), "string"), "rangeOfComposedCharacterSequenceAtIndex:", v73 - 1);
                  else
                    v132 = 0;
                  objc_msgSend(v131, "smartFieldAtCharIndex:attributeKind:effectiveRange:", v132, 7, &settings);
                  v251 = (TSWPRubyField *)TSUDynamicCast();
                  if (!v251)
                    goto LABEL_268;
                  if (TSWPParagraphTypesetter::rubyLayoutIsDisabledForField(*(TSWPParagraphTypesetter **)(a1 + 232), v251))
                  {
                    goto LABEL_264;
                  }
                  TSWPParagraphTypesetter::disableRubyLayoutForField(*(TSWPParagraphTypesetter **)(a1 + 232), v251);
                }
              }
              ++v111;
              if (v96 == v126)
              {
                v111 = v96;
                break;
              }
            }
          }
          v121 = 0;
LABEL_238:
          v256 = v111;
          goto LABEL_243;
        }
        goto LABEL_227;
      }
      v111 = v256;
      v113 = *(void **)(*(_QWORD *)(a1 + 232) + 56);
      v114 = v256;
      if (objc_msgSend(v113, "length") > v114)
      {
        v115 = objc_msgSend((id)objc_msgSend(v113, "string"), "rangeOfComposedCharacterSequenceAtIndex:", v111);
        v114 = v115 + v116;
      }
      v258.location = v114;
      if (v114 >= *(_QWORD *)&settings.spec
        && v114 - *(_QWORD *)&settings.spec < settings.valueSize
        && *(unsigned __int16 *)(*(_QWORD *)(a1 + 80) + 2 * v114) == (unsigned __int16)kRubyEndDummySpaceCharacter)
      {
        v258.location = ++v114;
      }
      if (v114 < v96)
      {
        if (!TSWPCoreTextTypesetter::pKinsokuCanBreak((TSWPCoreTextTypesetter *)a1, (unint64_t *)&v258, 0))
        {
LABEL_197:
          v117 = v111;
          if (v111 < v96)
          {
            v117 = v111;
            while (IsWhitespaceCharacter(*(unsigned __int16 *)(*(_QWORD *)(a1 + 80) + 2 * v117)))
            {
              if (v96 == ++v117)
                goto LABEL_242;
            }
          }
          v254 = v117;
          if (v117 != v96)
          {
            if (!TSWPCoreTextTypesetter::pKinsokuCanBreak((TSWPCoreTextTypesetter *)a1, &v254, 0))
            {
              v121 = 1;
              goto LABEL_243;
            }
            v96 = v254;
          }
LABEL_242:
          v121 = 0;
          v256 = v96;
          v111 = v96;
LABEL_243:
          if ((v121 & 1) == 0)
          {
            if (!v111)
              goto LABEL_263;
            v128 = objc_msgSend((id)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 232) + 56), "string"), "rangeOfComposedCharacterSequenceAtIndex:", v111 - 1);
            if (v128 && v128 < v111)
            {
              CanBreak = TSWPCoreTextTypesetter::pKinsokuCanBreak((TSWPCoreTextTypesetter *)a1, &v256, 0);
              if ((CanBreak & 1) == 0)
                goto LABEL_251;
              goto LABEL_263;
            }
          }
LABEL_250:
          if (v121)
            goto LABEL_251;
          goto LABEL_263;
        }
        v114 = v258.location;
      }
      if (v114 == v96 && IsWhitespaceCharacter(*(unsigned __int16 *)(*(_QWORD *)(a1 + 80) + 2 * v111)))
        goto LABEL_197;
      if (v253)
      {
LABEL_227:
        v121 = 0;
        goto LABEL_243;
      }
      v118 = 0.0;
      if (v14 < v111)
      {
        v119 = v14;
        do
          v118 = v118 + OikomiSquishAmountForCharacter(*(unsigned __int16 *)(*(_QWORD *)(a1 + 80) + 2 * v119++));
        while (v118 < 1.0 && v119 < v111);
      }
      if (v114 < v96)
      {
        while (IsWhitespaceCharacter(*(unsigned __int16 *)(*(_QWORD *)(a1 + 80) + 2 * v114)))
        {
          if (v96 == ++v114)
          {
            v114 = v96;
            break;
          }
        }
      }
      v254 = v114;
      if (v118 < 1.0)
      {
LABEL_221:
        v121 = 1;
        goto LABEL_243;
      }
      if (v114 != v96)
      {
        if (!TSWPCoreTextTypesetter::pKinsokuCanBreak((TSWPCoreTextTypesetter *)a1, &v254, 0))
          goto LABEL_221;
        v96 = v254;
      }
      v256 = v96;
      TSWPLineFragment::setOikomiSquish((TSWPLineFragment *)v12, 1);
      v121 = 0;
      goto LABEL_250;
    }
    v76 = TSWPCoreTextTypesetter::pCTTypesetter((TSWPCoreTextTypesetter *)a1);
    v77 = MEMORY[0x219A14C38](v76, v14, v70, v37);
    v73 = v77 + v14;
    v256 = v77 + v14;
    v78 = *(_QWORD *)(a1 + 56);
    if (v77 + v14 > v78)
    {
      v79 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
      v80 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "TSWPCharIndex TSWPCoreTextTypesetter::layoutLine(const TSWPLayoutState *, TSWPTypesetterParamBlock *)");
      objc_msgSend(v79, "handleFailureInFunction:file:lineNumber:description:", v80, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 1557, CFSTR("Bad endCharIndex"));
      v78 = *(_QWORD *)(a1 + 56);
    }
    v81 = v73 < v78;
    if (v73 && v73 < v78)
    {
      v82 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 80) + 2 * v73 - 2);
      v83 = IsParagraphBreakingCharacter(*(unsigned __int16 *)(*(_QWORD *)(a1 + 80) + 2 * v73 - 2));
      if (v82 == 8232)
        v84 = 1;
      else
        v84 = v83;
      if ((v84 & 1) != 0)
      {
        LOBYTE(v81) = 0;
        goto LABEL_140;
      }
    }
    else if (v73 >= v78)
    {
      goto LABEL_138;
    }
    if (!IsBreakingSpaceCharacter(*(unsigned __int16 *)(*(_QWORD *)(a1 + 80) + 2 * v73)))
      goto LABEL_139;
    v85 = v14 + 1 + v77;
    while (1)
    {
      v73 = v85;
      v86 = *(_QWORD *)(a1 + 56);
      if (v73 >= v86)
        break;
      v87 = IsBreakingSpaceCharacter(*(unsigned __int16 *)(*(_QWORD *)(a1 + 80) + 2 * v73));
      v85 = v73 + 1;
      if (!v87)
      {
        v86 = *(_QWORD *)(a1 + 56);
        break;
      }
    }
    v256 = v73;
    if (v73 < v86)
    {
      v88 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 80) + 2 * v73);
      v89 = IsParagraphBreakingCharacter(*(unsigned __int16 *)(*(_QWORD *)(a1 + 80) + 2 * v73)) ^ 1;
      if (v88 == 8232)
        LOBYTE(v89) = 0;
      if ((v89 & 1) == 0)
      {
        LOBYTE(v81) = 0;
        v256 = ++v73;
LABEL_140:
        v90 = *(_WORD *)(*(_QWORD *)(a1 + 80) + 2 * v73 - 2);
        v91 = (const __CFCharacterSet *)IsHyphenableCharacter(unsigned short)::sChars;
        if (!IsHyphenableCharacter(unsigned short)::sChars)
        {
          IsHyphenableCharacter(unsigned short)::sChars = (uint64_t)CFCharacterSetCreateWithCharactersInString(allocb, CFSTR("-—–‐‒−﹣－﹘"));

          v91 = (const __CFCharacterSet *)IsHyphenableCharacter(unsigned short)::sChars;
        }
        if (CFCharacterSetIsCharacterMember(v91, v90))
          v92 = 0;
        else
          v92 = v81;
        if (!v92)
          goto LABEL_282;
        goto LABEL_148;
      }
    }
LABEL_138:
    v81 = 0;
LABEL_139:
    if (v73)
      goto LABEL_140;
    if (!v81)
      goto LABEL_284;
LABEL_148:
    if (*(__int16 *)(*(_QWORD *)(a1 + 80) + 2 * v73) != -4
      || (v93 = (void *)objc_msgSend(*(id *)(a1 + 64), "attachmentAtCharIndex:", v73),
          !objc_msgSend(v93, "isDrawable"))
      || objc_msgSend(v93, "isAnchored"))
    {
      v258.location = v14;
      v258.length = v73 - v14;
      v94 = TSWPCoreTextTypesetter::pHyphenateLocalRange((id *)a1, &v258, (const TSWPLayoutState *)a2, v70, (TSWPLineFragment *)v12);
      if (v94 == 1)
      {
        TSWPLineFragment::setHyphenated((TSWPLineFragment *)v12, 1);
        v73 = v258.length + v258.location;
        v256 = v258.length + v258.location;
      }
      else if (v94 == -1)
      {
        goto LABEL_154;
      }
    }
LABEL_282:
    if (v73 > *(_QWORD *)(a1 + 56))
    {
      v140 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
      v141 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "TSWPCharIndex TSWPCoreTextTypesetter::layoutLine(const TSWPLayoutState *, TSWPTypesetterParamBlock *)");
      objc_msgSend(v140, "handleFailureInFunction:file:lineNumber:description:", v141, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 1617, CFSTR("Bad localEndCharIndex"));
    }
LABEL_284:
    v142 = objc_msgSend(*(id *)(a1 + 64), "charIndexMappedToStorage:", v73);
    if (v142 < objc_msgSend(*(id *)(a1 + 16), "length"))
    {
      objc_opt_class();
      objc_msgSend(*(id *)(a1 + 64), "attachmentAtCharIndex:", v73);
      v144 = (void *)TSUDynamicCast();
      if (!v144 || (objc_msgSend(v144, "isPartitioned") & 1) == 0)
      {
        if (v14 < v73)
        {
          while (1)
          {
            v145 = v73 - 1;
            if (objc_msgSend(*(id *)(a1 + 64), "characterAtIndex:", v73 - 1) != 65532)
              break;
            objc_opt_class();
            objc_msgSend(*(id *)(a1 + 64), "attachmentAtCharIndex:", v73 - 1);
            v146 = (void *)TSUDynamicCast();
            v147 = v146;
            if (!v146
              || !objc_msgSend(v146, "isAnchored")
              || objc_msgSend((id)objc_msgSend((id)objc_msgSend(v147, "drawable"), "exteriorTextWrap"), "isHTMLWrap"))
            {
              break;
            }
            --v73;
            if (v14 >= v145)
            {
              v73 = v14;
              break;
            }
          }
        }
        v256 = v73;
      }
    }
    if (v14 == v73)
    {
      if (!*(_QWORD *)(a1 + 56) || !*(_BYTE *)(a3 + 145))
      {
LABEL_304:
        TSWPCoreTextTypesetter::createLineRefForEmptyLineFragment((id *)a1, (id *)a2, (TSWPLineFragment *)v12, 0, v37, v143);
LABEL_305:
        v73 = v14;
        goto LABEL_311;
      }
      v148 = objc_msgSend(*(id *)(a1 + 64), "charIndexMappedFromStorage:", TSWPNextCharFromTextSource(objc_msgSend(*(id *)(a1 + 64), "charIndexMappedToStorage:", v14), *(void **)(a1 + 64)));
      v73 = v148;
      v256 = v148;
      if (*(_WORD *)(*(_QWORD *)(a1 + 232) + 72)
        && v148
        && v148 == *(_QWORD *)(a1 + 56) - 1
        && *(_WORD *)(*(_QWORD *)(a1 + 80) + 2 * v148 - 2) != 8232)
      {
        v73 = v148 + 1;
        v256 = v148 + 1;
      }
    }
    if (v14 == v73)
      goto LABEL_304;
    v12[1] = objc_msgSend(*(id *)(a1 + 64), "charIndexMappedToStorage:", v73) - *v12;
    v149 = *(_DWORD *)(a3 + 32);
    TSWPLineFragment::setTypesetterPos((TSWPLineFragment *)v12, v37, v69);
    if (!TSWPLineFragment::shareLineRefs((TSWPLineFragment *)v12, *(const TSWPLineFragment **)(a3 + 152)))
    {
      v150 = *(_DWORD *)(a3 + 56);
      if ((v150 & 0x10000) == 0)
      {
        TSWPCoreTextTypesetter::createLineRefsForLineFragment(a1, (TSWPLineFragment *)v12, a2, (v149 & 0xC) != 0, v150);
        if (!*(_BYTE *)(a3 + 145))
        {
          v151 = (CTLineRef *)v12[24];
          v152 = *((double *)v12 + 6);
          objc_msgSend(*(id *)(a2 + 104), "wpBounds");
          v154 = v153;
          v155 = *((double *)v12 + 27);
          if (v152 - v153 + v155 - CTLineGetTrailingWhitespaceWidth(*v151) > v69 + 0.25)
          {
            v256 = v14;
            v12[1] = 0;
            TSWPCoreTextTypesetter::createLineRefForEmptyLineFragment((id *)a1, (id *)a2, (TSWPLineFragment *)v12, 0, v37, v152 - v154);
            goto LABEL_305;
          }
        }
      }
    }
LABEL_311:
    if ((TSWPParagraphTypesetter::lineNeedsRecutting(*(TSWPParagraphTypesetter **)(a1 + 232), (TSWPLineFragment *)v12, v69 - v37) & 1) == 0)break;
    if (v253 >= 2)
      goto LABEL_382;
LABEL_318:
    v75 = v253 + 1;
  }
  v156 = *((unsigned __int8 *)v12 + 25) >> 7;
  if (!*(_BYTE *)(a1 + 104))
    v156 = 0;
  if (v253 <= 1 && v156)
    goto LABEL_318;
  if (!v156)
    goto LABEL_331;
LABEL_382:
  v208 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
  v209 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "TSWPCharIndex TSWPCoreTextTypesetter::layoutLine(const TSWPLayoutState *, TSWPTypesetterParamBlock *)");
  objc_msgSend(v208, "handleFailureInFunction:file:lineNumber:description:", v209, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 1705, CFSTR("Line not cut correctly, but maximum number of tries (%u) exceeded."), 3);
LABEL_331:
  v12[1] = objc_msgSend(*(id *)(a1 + 64), "charIndexMappedToStorage:", v73) - *v12;
  v159 = v73 - v14;
  if (v73 <= v14)
  {
    v160 = 0;
    *(_QWORD *)(a3 + 216) = 0;
  }
  else
  {
    *(_QWORD *)(a3 + 216) = objc_msgSend(*(id *)(a1 + 64), "charIndexMappedToStorage:", v73 - 1);
    v160 = objc_msgSend(*(id *)(a1 + 64), "characterAtIndex:", v73 - 1);
  }
  *(_WORD *)(a3 + 208) = v160;
  if (v73 >= *(_QWORD *)(a1 + 56))
    v159 -= *(_WORD *)(*(_QWORD *)(a1 + 232) + 72) != 0;
  TSWPCoreTextTypesetter::pCalcHeightInfo(a1, a2, a3, v14, v159);
  if ((*(_BYTE *)(a3 + 58) & 1) == 0)
    TSWPLineFragment::adjustBreakLine((TSWPLineFragment *)v12);
  RubyLineRefsForLineFragment = TSWPParagraphTypesetter::createRubyLineRefsForLineFragment(*(TSWPParagraphTypesetter **)(a1 + 232), (TSWPLineFragment *)v12);
  *(_QWORD *)&settings.spec = 0;
  v258.location = 0;
  TSWPCoreTextTypesetter::pAdjustEmphasisMarksForLineFragment(a1, a2, v162, *(_QWORD *)(a3 + 200), (double *)&settings, (double *)&v258.location);
  TSWPParagraphTypesetter::createTateChuYokoLineRefsForLineFragment(*(TSWPParagraphTypesetter **)(a1 + 232), (TSWPLineFragment *)v12);
  v163 = *(double *)&settings.spec;
  if (RubyLineRefsForLineFragment >= *(double *)&settings.spec)
    v163 = RubyLineRefsForLineFragment;
  if (v163 > 0.0)
  {
    v164 = *((double *)v12 + 18);
    v165 = v163 - (*(double *)(a3 + 168) + v164);
    if (v165 > 0.0)
    {
      *((double *)v12 + 18) = v164 + v165;
      *((double *)v12 + 13) = v165 + *((double *)v12 + 13);
      *((double *)v12 + 9) = v165 + *((double *)v12 + 9);
    }
  }
  v166 = *(double *)&v258.location;
  if (*(double *)&v258.location > 0.0)
  {
    v167 = *((double *)v12 + 17);
    v168 = *((double *)v12 + 19);
    v169 = v167 + v168;
    v170 = *(double *)&v258.location + v167;
    *((double *)v12 + 17) = v170;
    v171 = fmax(v168 - v166, 0.0);
    *((double *)v12 + 19) = v171;
    v172 = v170 + v171 - v169;
    if (v172 > 0.0)
    {
      *((double *)v12 + 13) = v172 + *((double *)v12 + 13);
      *((double *)v12 + 9) = v172 + *((double *)v12 + 9);
    }
  }
  TSWPCoreTextTypesetter::pAdjustErasableBounds((TSWPCoreTextTypesetter *)a1, (const TSWPLayoutState *)a2, (TSWPLineFragment *)v12);
  v173 = *v12;
  v174 = v12[1];
  v175 = objc_msgSend(*(id *)(a1 + 16), "range");
  if (v174 + v173 == v175 + v176)
    *((_DWORD *)v12 + 6) |= 0x200000u;
  if (*((double *)v12 + 18) == -3.40282347e38)
  {
    v177 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v178 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "TSWPCharIndex TSWPCoreTextTypesetter::layoutLine(const TSWPLayoutState *, TSWPTypesetterParamBlock *)");
    objc_msgSend(v177, "handleFailureInFunction:file:lineNumber:description:", v178, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 1772, CFSTR("Bad leading"));
  }
  if (v12[25] == v12[24] && (*(_BYTE *)(a3 + 58) & 1) == 0)
  {
    v179 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v180 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "TSWPCharIndex TSWPCoreTextTypesetter::layoutLine(const TSWPLayoutState *, TSWPTypesetterParamBlock *)");
    objc_msgSend(v179, "handleFailureInFunction:file:lineNumber:description:", v180, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 1773, CFSTR("Bad lineRef count"));
  }
  if (v73 > *(_QWORD *)(a1 + 56))
  {
    v181 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v182 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "TSWPCharIndex TSWPCoreTextTypesetter::layoutLine(const TSWPLayoutState *, TSWPTypesetterParamBlock *)");
    objc_msgSend(v181, "handleFailureInFunction:file:lineNumber:description:", v182, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 1774, CFSTR("Bad endCharIndex"));
  }
  v183 = *v12;
  if (!v14 && v183 != *(_QWORD *)(a1 + 40))
  {
    v184 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v185 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "TSWPCharIndex TSWPCoreTextTypesetter::layoutLine(const TSWPLayoutState *, TSWPTypesetterParamBlock *)");
    objc_msgSend(v184, "handleFailureInFunction:file:lineNumber:description:", v185, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 1775, CFSTR("First line should lie at the beginning of the paragraph"));
    v183 = *v12;
  }
  v186 = v12[1];
  if (v73 == *(_QWORD *)(a1 + 56) && v186 + v183 != *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 40))
  {
    v187 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v188 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "TSWPCharIndex TSWPCoreTextTypesetter::layoutLine(const TSWPLayoutState *, TSWPTypesetterParamBlock *)");
    objc_msgSend(v187, "handleFailureInFunction:file:lineNumber:description:", v188, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 1776, CFSTR("Last line should reach the end of the paragraph"));
    v183 = *v12;
    v186 = v12[1];
  }
  return v186 + v183;
}

void sub_217905210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,TSWPParagraphEnumerator *a22)
{
  uint64_t v22;

  MEMORY[0x219A153B8](v22, 0x10E0C40F5225EA9);
  _Unwind_Resume(a1);
}

uint64_t TSWPCoreTextTypesetter::pCTTypesetter(TSWPCoreTextTypesetter *this)
{
  void *v2;
  uint64_t v3;

  if (!*((_BYTE *)this + 34))
  {
    v2 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v3 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "CTTypesetterRef TSWPCoreTextTypesetter::pCTTypesetter() const");
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 240, CFSTR("paragraph must be set up before requesting typesetter"));
  }
  return *(_QWORD *)(*((_QWORD *)this + 29) + 64);
}

double TSWPCoreTextTypesetter::pAdditionalOffsetForLineFragment(uint64_t a1, uint64_t a2, _QWORD *a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  TSWPDrawableAttachment *v9;
  uint64_t v10;
  char v11;
  double result;

  if ((a4 & 0x20000) != 0)
    return 0.0;
  v6 = objc_msgSend(*(id *)(a1 + 64), "charRangeMappedFromStorage:", *a3, a3[1]);
  v8 = v7;
  v9 = (TSWPDrawableAttachment *)objc_msgSend(*(id *)(a1 + 64), "attachmentAtCharIndex:", v6);
  if (!-[TSWPDrawableAttachment isDrawable](v9, "isDrawable")
    || -[TSWPDrawableAttachment isAnchored](v9, "isAnchored")
    || -[TSWPDrawableAttachment isPartitioned](v9, "isPartitioned"))
  {
    return 0.0;
  }
  v10 = *(_QWORD *)(a1 + 48);
  if (v10 == 1)
  {
    v11 = 0;
  }
  else
  {
    if (v10 != 2)
      return 0.0;
    v11 = IsParagraphBreakingCharacter(*(unsigned __int16 *)(*(_QWORD *)(a1 + 80) + 2 * (v8 + v6) - 2)) ^ 1;
  }
  if (*(_DWORD *)(a2 + 388) == 2 && (v11 & 1) == 0)
  {
    objc_msgSend(TSWPLayoutChore::validatedLayoutForInlineAttachment(*(id **)(a1 + 8), v9, 0, 0), "inlineCenteredAlignmentOffset");
    return result;
  }
  return 0.0;
}

void TSWPParagraphTypesetter::createTateChuYokoLineRefsForLineFragment(TSWPParagraphTypesetter *this, TSWPLineFragment *a2)
{
  TSWPParagraphTypesetter *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  char *v13;
  __int128 *v14;
  double PositionForLocalCharIndex;
  const void *v16;
  double v17;
  double v18;
  unint64_t v19;
  uint64_t v20;
  CFTypeRef cf[3];
  __int128 v22;
  int v23;

  if (*((_QWORD *)this + 13) != *((_QWORD *)this + 14))
  {
    v4 = (TSWPParagraphTypesetter *)objc_msgSend(*(id *)this, "charRangeMappedFromStorage:", *(_QWORD *)a2, *((_QWORD *)a2 + 1));
    v6 = (unint64_t *)*((_QWORD *)this + 13);
    v7 = (unint64_t *)*((_QWORD *)this + 14);
    if (v7 != v6)
    {
      v8 = 0x6DB6DB6DB6DB6DB7 * (v7 - v6);
      do
      {
        v9 = v8 >> 1;
        v10 = &v6[7 * (v8 >> 1)];
        v12 = *v10;
        v11 = v10 + 7;
        v8 += ~(v8 >> 1);
        if (v12 < v4)
          v6 = v11;
        else
          v8 = v9;
      }
      while (v8);
    }
    if (v6 != v7)
    {
      v13 = (char *)v4 + v5;
      v14 = (__int128 *)MEMORY[0x24BEB3BF0];
      do
      {
        if (*v6 >= (unint64_t)v13)
          break;
        PositionForLocalCharIndex = TSWPParagraphTypesetter::getPositionForLocalCharIndex(v4, a2, *v6);
        v16 = (const void *)v6[2];
        v17 = PositionForLocalCharIndex + *((double *)v6 + 4);
        v18 = *((double *)v6 + 3) * 0.5;
        cf[0] = v16;
        cf[1] = *(CFTypeRef *)&v17;
        *(double *)&cf[2] = v18;
        v22 = *v14;
        v23 = 0;
        if (v16)
          CFRetain(v16);
        v22 = *(_OWORD *)v6;
        v19 = *((_QWORD *)a2 + 32);
        if (v19 >= *((_QWORD *)a2 + 33))
        {
          v20 = std::vector<TSWPLineRef>::__push_back_slow_path<TSWPLineRef const&>((uint64_t *)a2 + 31, (uint64_t)cf);
        }
        else
        {
          std::vector<TSWPLineRef>::__construct_one_at_end[abi:nn180100]<TSWPLineRef const&>((uint64_t)a2 + 248, (uint64_t)cf);
          v20 = v19 + 48;
        }
        *((_QWORD *)a2 + 32) = v20;
        v4 = (TSWPParagraphTypesetter *)cf[0];
        if (cf[0])
          CFRelease(cf[0]);
        v6 += 7;
      }
      while (v6 != v7);
    }
  }
}

void sub_217905754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

double TSWPParagraphTypesetter::createRubyLineRefsForLineFragment(TSWPParagraphTypesetter *this, TSWPLineFragment *a2)
{
  uint64_t v2;
  TSWPParagraphTypesetter *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v9;
  unint64_t v10;
  double *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v22;
  uint64_t v23;
  TSWPParagraphTypesetter *v24;
  uint64_t v26;
  const void *v27;
  double v28;
  double PositionForLocalCharIndex;
  TSWPParagraphTypesetter *v30;
  double v31;
  uint64_t v32;
  double *v33;
  double v34;
  double v35;
  double v36;
  double *v37;
  unint64_t GlyphCount;
  double v39;
  CTLineRef JustifiedLine;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  double v45;
  CFTypeRef v47;
  double *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v59;
  uint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  double v64;
  CFTypeRef cf;
  double v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  int v70;

  v2 = *((_QWORD *)this + 11) - *((_QWORD *)this + 10);
  if (v2)
  {
    v4 = this;
    v5 = v2 >> 3;
    v6 = *((_QWORD *)a2 + 34);
    v7 = 0.0;
    v8 = 0.0;
    v9 = *((_QWORD *)a2 + 35) - v6;
    if (v9)
    {
      v10 = v9 / 80;
      if (v10 <= 1)
        v10 = 1;
      v11 = (double *)(v6 + 56);
      do
      {
        if (*((_DWORD *)v11 - 2) == 1 && v8 < *v11)
          v8 = *v11;
        v11 += 10;
        --v10;
      }
      while (v10);
    }
    v12 = 0x8E38E38E38E38E39 * v5;
    v13 = objc_msgSend(*(id *)this, "charRangeMappedFromStorage:", *(_QWORD *)a2, *((_QWORD *)a2 + 1));
    v15 = v14;
    v16 = 0;
    v60 = (uint64_t *)((char *)a2 + 224);
    v17 = 1;
    v61 = v12;
    v62 = v14;
    v63 = (uint64_t)v4;
    while (1)
    {
      v18 = *((_QWORD *)v4 + 10);
      v19 = v18 + 72 * v16;
      v20 = *(_QWORD *)(v19 + 8);
      if (v20 < v13 || v20 - v13 >= v15)
        goto LABEL_47;
      v22 = v13;
      v23 = *(_QWORD *)(v19 + 16);
      v24 = (TSWPParagraphTypesetter *)objc_msgSend((id)objc_msgSend(*(id *)v19, "rubyText"), "length");
      if (v24 && *(_BYTE *)(v18 + 72 * v16 + 64) == 0)
        break;
      v13 = v22;
      v15 = v62;
      v4 = (TSWPParagraphTypesetter *)v63;
LABEL_47:
      v16 = v17;
      if (v12 <= v17++)
        return v7;
    }
    v26 = v18 + 72 * v16;
    v27 = *(const void **)(v26 + 24);
    if (!v27 || (v28 = *(double *)(v26 + 32), v28 <= 0.0))
    {
      v13 = v22;
      v12 = v61;
      v15 = v62;
      v4 = (TSWPParagraphTypesetter *)v63;
LABEL_46:
      *((_DWORD *)a2 + 6) |= 0x400u;
      goto LABEL_47;
    }
    PositionForLocalCharIndex = TSWPParagraphTypesetter::getPositionForLocalCharIndex(v24, a2, v20);
    v31 = TSWPParagraphTypesetter::getPositionForLocalCharIndex(v30, a2, v23 + v20) - PositionForLocalCharIndex;
    v32 = v18 + 72 * v16;
    v34 = *(double *)(v32 + 48);
    v33 = (double *)(v32 + 48);
    v35 = v8 + *((double *)a2 + 16) + v34;
    v36 = v31 - v28;
    if (v28 + 1.0 >= v31)
    {
      if (v31 + 1.0 < v28)
      {
        v64 = 0.0;
        *(double *)&cf = 0.0;
        TSWPParagraphTypesetter::pCalculateRubyOverlap(v63, (unint64_t *)a2, v19, &cf, &v64);
        v45 = v31 + *(double *)&cf + v64;
        if (v28 + 1.0 >= v45 && v45 + 1.0 < v28)
        {
          v59 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
          v48 = v33;
          v49 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "CGFloat TSWPParagraphTypesetter::createRubyLineRefsForLineFragment(TSWPLineFragment *)");
          v50 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPParagraphTypesetter.mm");
          v51 = v49;
          v33 = v48;
          objc_msgSend(v59, "handleFailureInFunction:file:lineNumber:description:", v51, v50, 269, CFSTR("could not properly position ruby text. fall back to centering over base text."));
        }
        else
        {
          PositionForLocalCharIndex = PositionForLocalCharIndex - *(double *)&cf;
          v36 = v45 - v28;
        }
      }
      v52 = objc_msgSend(*(id *)v19, "range");
      cf = v27;
      v66 = PositionForLocalCharIndex + v36 * 0.5;
      v67 = -v35;
      v68 = v52;
      v69 = v53;
      v70 = 0;
      CFRetain(v27);
      v54 = *((_QWORD *)a2 + 29);
      if (v54 >= *((_QWORD *)a2 + 30))
      {
        v55 = std::vector<TSWPLineRef>::__push_back_slow_path<TSWPLineRef const&>(v60, (uint64_t)&cf);
        v12 = v61;
      }
      else
      {
        std::vector<TSWPLineRef>::__construct_one_at_end[abi:nn180100]<TSWPLineRef const&>((uint64_t)v60, (uint64_t)&cf);
        v12 = v61;
        v55 = v54 + 48;
      }
      v13 = v22;
      *((_QWORD *)a2 + 29) = v55;
      v47 = cf;
      v15 = v62;
      if (*(double *)&cf == 0.0)
        goto LABEL_44;
    }
    else
    {
      v37 = v33;
      GlyphCount = CTLineGetGlyphCount((CTLineRef)v27);
      v39 = v36 / (double)GlyphCount * 0.5;
      if (GlyphCount < 2 || (JustifiedLine = CTLineCreateJustifiedLine((CTLineRef)v27, 1.0, v31 + v39 * -2.0)) == 0)
      {
        CFRetain(v27);
        JustifiedLine = (CTLineRef)v27;
      }
      v41 = objc_msgSend(*(id *)v19, "range");
      cf = JustifiedLine;
      v66 = PositionForLocalCharIndex + v39;
      v67 = -v35;
      v68 = v41;
      v69 = v42;
      v70 = 0;
      CFRetain(JustifiedLine);
      CFRelease(JustifiedLine);
      v12 = v61;
      v43 = *((_QWORD *)a2 + 29);
      if (v43 >= *((_QWORD *)a2 + 30))
      {
        v44 = std::vector<TSWPLineRef>::__push_back_slow_path<TSWPLineRef const&>(v60, (uint64_t)&cf);
      }
      else
      {
        std::vector<TSWPLineRef>::__construct_one_at_end[abi:nn180100]<TSWPLineRef const&>((uint64_t)v60, (uint64_t)&cf);
        v44 = v43 + 48;
      }
      v13 = v22;
      *((_QWORD *)a2 + 29) = v44;
      v47 = cf;
      v15 = v62;
      v33 = v37;
      if (*(double *)&cf == 0.0)
        goto LABEL_44;
    }
    CFRelease(v47);
LABEL_44:
    v4 = (TSWPParagraphTypesetter *)v63;
    v56 = v18 + 72 * v16;
    if (v7 < *(double *)(v56 + 40) + *v33)
      v7 = *(double *)(v56 + 40) + *v33;
    goto LABEL_46;
  }
  return 0.0;
}

void sub_217905B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t TSWPParagraphTypesetter::lineNeedsRecutting(TSWPParagraphTypesetter *this, TSWPLineFragment *a2, double a3)
{
  uint64_t v3;
  unint64_t v7;
  TSWPParagraphTypesetter *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  double PositionForLocalCharIndex;
  TSWPParagraphTypesetter *v19;
  double v20;
  double v21;
  double v23;
  double v24;
  double v26;
  TSWPParagraphTypesetter *v29;
  double v30;
  double v31;

  v3 = *((_QWORD *)this + 11) - *((_QWORD *)this + 10);
  if (!v3)
    return 0;
  v7 = v3 / 72;
  v8 = (TSWPParagraphTypesetter *)objc_msgSend(*(id *)this, "charRangeMappedFromStorage:", *(_QWORD *)a2, *((_QWORD *)a2 + 1));
  v29 = v8;
  v10 = v9;
  v11 = 0;
  v12 = 0;
  if (v7 <= 1)
    v13 = 1;
  else
    v13 = v7;
  do
  {
    v14 = *((_QWORD *)this + 10);
    v15 = v14 + v11;
    if (!*(_BYTE *)(v14 + v11 + 64))
    {
      v17 = *(_QWORD *)(v15 + 8);
      v16 = *(_QWORD *)(v15 + 16);
      PositionForLocalCharIndex = TSWPParagraphTypesetter::getPositionForLocalCharIndex(v8, a2, v17);
      v20 = TSWPParagraphTypesetter::getPositionForLocalCharIndex(v19, a2, v16 + v17) - PositionForLocalCharIndex;
      if (v20 <= 0.0)
        goto LABEL_19;
      v21 = *(double *)(v14 + v11 + 32);
      if (v20 >= v21)
        v21 = v20;
      if (v21 <= a3)
      {
LABEL_19:
        if (!*(_BYTE *)(v15 + 64) && v17 >= (unint64_t)v29 && v17 - (unint64_t)v29 < v10)
        {
          v23 = *(double *)(v14 + v11 + 32);
          v24 = v23 + 1.0;
          if (v20 + 1.0 < v23 && v24 >= v20)
          {
            v30 = 0.0;
            v31 = 0.0;
            v8 = (TSWPParagraphTypesetter *)TSWPParagraphTypesetter::pCalculateRubyOverlap((uint64_t)this, (unint64_t *)a2, v14 + v11, &v31, &v30);
            v26 = v20 + v31 + v30;
            if (v24 >= v26 && v26 + 1.0 < v23)
            {
              *(double *)(v14 + v11 + 56) = v23 - v26;
              v12 = 1;
            }
          }
        }
      }
      else
      {
        v12 = 1;
        *(_BYTE *)(v15 + 64) = 1;
      }
    }
    v11 += 72;
    --v13;
  }
  while (v13);
  return v12 & 1;
}

void TSWPCoreTextTypesetter::pAdjustEmphasisMarksForLineFragment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, double *a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  double *v16;
  double v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  double v41;
  double WavyLineHalfAmplitude;
  uint64_t v43;
  double v44;
  int v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double *v52;

  v10 = *(_QWORD *)(a4 + 440);
  v9 = *(_QWORD *)(a4 + 448);
  if (v9 != v10)
  {
    v11 = 0;
    v12 = 0x8F5C28F5C28F5C29 * ((v9 - v10) >> 3);
    v13 = 1;
    while (*(_DWORD *)(v10 + 200 * v11) != 4)
    {
      v11 = v13;
      v14 = v12 > v13++;
      if (!v14)
      {
        v15 = 0;
        goto LABEL_10;
      }
    }
    v15 = *(unsigned int *)(v10 + 200 * v11 + 4);
    if ((_DWORD)v15 == 1)
    {
      if (*(_QWORD *)(a4 + 232) != *(_QWORD *)(a4 + 224))
      {
        TSWPCoreTextTypesetter::pFilterEmphasisMarksForRuby(a1, a2, (_QWORD *)a4);
        v10 = *(_QWORD *)(a4 + 440);
        v9 = *(_QWORD *)(a4 + 448);
        v12 = 0x8F5C28F5C28F5C29 * ((v9 - v10) >> 3);
      }
      v15 = 1;
    }
LABEL_10:
    *a5 = 0.0;
    *a6 = 0.0;
    if (v9 != v10)
    {
      v16 = (double *)(v10 + 8);
      v17 = 0.0;
      v18 = 1;
      do
      {
        if (*((_DWORD *)v16 - 2) == 4 && v17 < *v16)
          v17 = *v16;
        v16 += 25;
        v14 = v12 > v18++;
      }
      while (v14);
      if (v9 != v10)
      {
        v19 = 0;
        v20 = 1;
        v52 = a5;
        do
        {
          if (*(_DWORD *)(v10 + 200 * v19) != 4)
            goto LABEL_34;
          v21 = v10 + 200 * v19;
          v23 = *(double *)(v21 + 176);
          v22 = v21 + 176;
          v24 = *(double *)(v22 + 8);
          *(double *)(v22 - 168) = v17;
          if (v23 != 0.0 || v24 != 0.0)
            goto LABEL_34;
          if ((*(_BYTE *)(a4 + 25) & 0x20) != 0)
          {
            v29 = *(double *)(a4 + 128);
            v27 = (v29 + *(double *)(a4 + 136)) * 0.5;
            if ((_DWORD)v15 != 2)
            {
              v27 = -v27 - v17;
              v35 = v29 + v27 - *(double *)(v10 + 200 * v19 + 152);
              goto LABEL_30;
            }
            v30 = a6;
            v31 = v15;
            v32 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
            v33 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSWPCoreTextTypesetter::pAdjustEmphasisMarksForLineFragment(const TSWPLayoutState *, TSWPTypesetterParamBlock *, TSWPLineFragment *, CGFloat &, CGFloat &)");
            objc_msgSend(v32, "handleFailureInFunction:file:lineNumber:description:", v33, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 4344, CFSTR("Vertical below is not currently supported."));
            v15 = v31;
            a6 = v30;
            a5 = v52;
            v10 = *(_QWORD *)(a4 + 440);
            v9 = *(_QWORD *)(a4 + 448);
          }
          else
          {
            v25 = *(double *)(v10 + 200 * v19 + 152);
            if ((_DWORD)v15 != 2)
            {
              v34 = *(double *)(a4 + 128);
              v27 = 0.0 - v34 - v17;
              v35 = v34 + v27 - v25;
LABEL_30:
              v36 = -v35;
              if (*a5 >= v36)
                v36 = *a5;
              *a5 = v36;
              goto LABEL_33;
            }
            v26 = *(double *)(a4 + 136);
            v27 = v25 + v17 + v26 + 0.0;
            v28 = *(double *)(v10 + 200 * v19 + 160) + v27 - v26;
            if (*a6 >= v28)
              v28 = *a6;
            *a6 = v28;
          }
LABEL_33:
          *(_QWORD *)v22 = 0;
          *(double *)(v22 + 8) = v27;
LABEL_34:
          v19 = v20;
          v14 = 0x8F5C28F5C28F5C29 * ((v9 - v10) >> 3) > v20++;
        }
        while (v14);
      }
    }
  }
  v37 = *(_QWORD *)(a4 + 272);
  if (*(_QWORD *)(a4 + 280) != v37)
  {
    v38 = 0;
    v39 = 1;
    do
    {
      v40 = *(_DWORD *)(v37 + 80 * v38 + 44);
      if (v40)
      {
        v41 = *(double *)(v37 + 80 * v38 + 32);
        if (v40 == 3)
        {
          if ((*(_BYTE *)(a4 + 25) & 0x20) == 0)
          {
            WavyLineHalfAmplitude = GetWavyLineHalfAmplitude(v41);
            v41 = WavyLineHalfAmplitude + WavyLineHalfAmplitude;
          }
        }
        else if (v40 == 2)
        {
          v41 = v41 * 3.0;
        }
        v43 = v37 + 80 * v38;
        v44 = *(double *)(v43 + 8);
        v45 = *(_DWORD *)(v43 + 48);
        if (v45 == 1)
        {
          v49 = v44 + v41 * -0.5;
          v50 = *(double *)(a4 + 128);
          if (v49 < v50)
          {
            v51 = -(v49 + v50);
            if (*a5 >= v51)
              v51 = *a5;
            *a5 = v51;
          }
        }
        else if (v45 == 2)
        {
          v46 = v44 + v41 * 0.5;
          v47 = *(double *)(a4 + 136);
          if (v46 > v47)
          {
            v48 = v46 - v47;
            if (*a6 >= v48)
              v48 = *a6;
            *a6 = v48;
          }
        }
      }
      v38 = v39;
      v37 = *(_QWORD *)(a4 + 272);
      v14 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a4 + 280) - v37) >> 4) > v39++;
    }
    while (v14);
  }
}

void TSWPCoreTextTypesetter::pAdjustErasableBounds(TSWPCoreTextTypesetter *this, const TSWPLayoutState *a2, TSWPLineFragment *a3)
{
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  double v13;
  double v14;
  unint64_t v15;
  unint64_t v16;
  double *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  double *v23;
  unint64_t v24;
  double *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  double *v31;
  char *v32;
  __int128 v33;
  char *v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  double *v40;
  double v41;
  unsigned int v42;
  double v43;
  double v44;
  int v45;
  double v46;
  double v47;
  double v48;
  double v49;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  double *v56;
  char *v57;
  double *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  double *v64;
  char *v65;
  __int128 v66;
  char *v67;
  double *i;
  double v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  CGFloat v74;
  double *__p;
  double *v76;
  char *v77;
  uint64_t v78;
  CGRect v79;
  CGRect v80;
  CGRect v81;

  x = *((double *)a3 + 10);
  y = *((double *)a3 + 11);
  width = *((double *)a3 + 12);
  height = *((double *)a3 + 13);
  __p = 0;
  v76 = 0;
  v78 = 0;
  if (*((_QWORD *)a3 + 29) != *((_QWORD *)a3 + 28))
  {
    v9 = TSWPCoreTextTypesetter::pMaxRubyHeightAboveLineFragment((uint64_t)this, (uint64_t)a2, (uint64_t)a3);
    v10 = *((_QWORD *)a3 + 6);
    v12 = *((_QWORD *)a3 + 8);
    v11 = *((double *)a3 + 9);
    v13 = v9 + v11;
    v14 = *((double *)a3 + 7) + v11 - (v9 + v11);
    v15 = 1;
    if ((unint64_t)(v78 >> 4) > 1)
      v15 = v78 >> 4;
    v16 = v15;
    if (v15)
      v17 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::segment_data<double>>>((uint64_t)&v78, v15);
    else
      v17 = 0;
    *(_QWORD *)v17 = v10;
    v17[1] = v14;
    *((_QWORD *)v17 + 2) = v12;
    v17[3] = v13;
    __p = v17;
    v78 = (uint64_t)&v17[4 * v16];
    v76 = v17 + 4;
  }
  v18 = *((_QWORD *)a3 + 6);
  v19 = *((double *)a3 + 7);
  v20 = *((_QWORD *)a3 + 8);
  v21 = TSWPLayoutChore::calculateBaselineOffsetWithHeightInfo((double *)a3 + 14, (uint64_t)a2) + v19;
  if ((*((_BYTE *)a3 + 25) & 0x20) != 0)
  {
    v22 = *(double *)&gSpellDotHeight;
    v19 = floor(v21 - *((double *)a3 + 16)) + *(double *)&gSpellDotHeight * -0.5;
  }
  else
  {
    v22 = floor(v21) + *(double *)&gSpellDotHeight + *(double *)&gSpellDotHeight * 0.5 - v19;
  }
  v23 = v76;
  if ((unint64_t)v76 >= v78)
  {
    v25 = __p;
    v26 = ((char *)v76 - (char *)__p) >> 5;
    v27 = v26 + 1;
    if ((unint64_t)(v26 + 1) >> 59)
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    v28 = v78 - (_QWORD)__p;
    if ((v78 - (uint64_t)__p) >> 4 > v27)
      v27 = v28 >> 4;
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFE0)
      v29 = 0x7FFFFFFFFFFFFFFLL;
    else
      v29 = v27;
    if (v29)
    {
      v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::segment_data<double>>>((uint64_t)&v78, v29);
      v25 = __p;
      v23 = v76;
    }
    else
    {
      v30 = 0;
    }
    v31 = (double *)&v30[32 * v26];
    *(_QWORD *)v31 = v18;
    v31[1] = v19;
    v32 = &v30[32 * v29];
    *((_QWORD *)v31 + 2) = v20;
    v31[3] = v22;
    v24 = (unint64_t)(v31 + 4);
    if (v23 == v25)
    {
      v34 = (char *)v31;
    }
    else
    {
      do
      {
        v33 = *((_OWORD *)v23 - 1);
        v34 = (char *)(v31 - 4);
        *((_OWORD *)v31 - 2) = *((_OWORD *)v23 - 2);
        *((_OWORD *)v31 - 1) = v33;
        v23 -= 4;
        v31 -= 4;
      }
      while (v23 != v25);
    }
    __p = (double *)v34;
    v78 = (uint64_t)v32;
    if (v25)
      operator delete(v25);
  }
  else
  {
    *(_QWORD *)v76 = v18;
    v76[1] = v19;
    v24 = (unint64_t)(v76 + 4);
    *((_QWORD *)v76 + 2) = v20;
    v76[3] = v22;
  }
  v35 = TSWPLayoutChore::calculateBaselineOffsetWithHeightInfo((double *)a3 + 14, (uint64_t)a2);
  v36 = *((double *)a3 + 9);
  v37 = *((_QWORD *)a3 + 55);
  v38 = *((_QWORD *)a3 + 56) - v37;
  if (v38)
  {
    v39 = 0x8F5C28F5C28F5C29 * (v38 >> 3);
    v40 = (double *)(v37 + 184);
    v41 = 0.0;
    v42 = 1;
    v43 = 0.0;
    v44 = 0.0;
    do
    {
      v45 = *((_DWORD *)v40 - 46);
      if (v45 == 6)
      {
        v48 = *(double *)(*((_QWORD *)v40 - 13) + 24) * 0.5;
        if (v41 < *v40 - v35 + *(v40 - 3) + v48)
          v41 = *v40 - v35 + *(v40 - 3) + v48;
      }
      else if (v45 == 4)
      {
        v46 = *v40;
        if (*((_DWORD *)v40 - 45) == 1)
        {
          v47 = -(v35 + v46 - *(v40 - 4));
          if (v44 < v47)
            v44 = v47;
        }
        else
        {
          v49 = v46 - v35 + *(v40 - 3);
          if (v43 < v49)
            v43 = v49;
        }
      }
      v40 += 25;
    }
    while (v39 > v42++);
  }
  else
  {
    v44 = 0.0;
    v43 = 0.0;
    v41 = 0.0;
  }
  v51 = *((_QWORD *)a3 + 6);
  v52 = *((_QWORD *)a3 + 8);
  v53 = *((double *)a3 + 7) + v36 - (v36 + v44);
  if (v41 >= v43)
    v54 = v41;
  else
    v54 = v43;
  v55 = v36 + v44 + v54;
  v56 = (double *)v24;
  if (v24 >= v78)
  {
    v58 = __p;
    v59 = (uint64_t)(v24 - (_QWORD)__p) >> 5;
    v60 = v59 + 1;
    if ((unint64_t)(v59 + 1) >> 59)
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    v61 = v78 - (_QWORD)__p;
    if ((v78 - (uint64_t)__p) >> 4 > v60)
      v60 = v61 >> 4;
    if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFE0)
      v62 = 0x7FFFFFFFFFFFFFFLL;
    else
      v62 = v60;
    if (v62)
    {
      v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::segment_data<double>>>((uint64_t)&v78, v62);
      v58 = __p;
      v56 = (double *)v24;
    }
    else
    {
      v63 = 0;
    }
    v64 = (double *)&v63[32 * v59];
    *(_QWORD *)v64 = v51;
    v64[1] = v53;
    v65 = &v63[32 * v62];
    *((_QWORD *)v64 + 2) = v52;
    v64[3] = v55;
    v57 = (char *)(v64 + 4);
    if (v56 == v58)
    {
      v67 = (char *)v64;
    }
    else
    {
      do
      {
        v66 = *((_OWORD *)v56 - 1);
        v67 = (char *)(v64 - 4);
        *((_OWORD *)v64 - 2) = *((_OWORD *)v56 - 2);
        *((_OWORD *)v64 - 1) = v66;
        v56 -= 4;
        v64 -= 4;
      }
      while (v56 != v58);
    }
    __p = (double *)v67;
    v78 = (uint64_t)v65;
    if (v58)
      operator delete(v58);
  }
  else
  {
    *(_QWORD *)v24 = v51;
    *(double *)(v24 + 8) = v53;
    v57 = (char *)(v24 + 32);
    *(_QWORD *)(v24 + 16) = v52;
    *(double *)(v24 + 24) = v55;
  }
  v77 = v57;
  for (i = __p; i != (double *)v57; i += 4)
  {
    v69 = i[3];
    if (v69 != INFINITY)
    {
      v70 = *i;
      v71 = *((_QWORD *)i + 1);
      v72 = *((_QWORD *)i + 2);
      v79.origin.x = x;
      v79.origin.y = y;
      v79.size.width = width;
      v79.size.height = height;
      v80 = CGRectUnion(v79, *(CGRect *)(&v69 - 3));
      x = v80.origin.x;
      y = v80.origin.y;
      width = v80.size.width;
      height = v80.size.height;
      v57 = v77;
    }
  }
  v73 = (*((double *)a3 + 16) + *((double *)a3 + 17)) * 0.25;
  if ((*((_DWORD *)a3 + 6) & 0x40000) != 0)
    v73 = v73 + 50.0;
  v74 = -v73;
  v81.origin.x = x;
  v81.origin.y = y;
  v81.size.width = width;
  v81.size.height = height;
  *(CGRect *)((char *)a3 + 80) = CGRectInset(v81, v74, v74);
  if (__p)
    operator delete(__p);
}

void sub_217906690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double TSWPLayoutChore::calculateBaselineOffsetWithHeightInfo(double *a1, uint64_t a2)
{
  double v2;

  v2 = *a1;
  if (*(_DWORD *)(a2 + 256) == 2)
    return v2 + *(double *)(a2 + 296) * *(double *)(a2 + 264);
  else
    return v2 + a1[4] + fmax(a1[2], a1[1]);
}

void TSWPCoreTextTypesetter::pCalcHeightInfo(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  CGRect v31;
  CGRect v32;

  v10 = *(_QWORD *)(a3 + 200);
  v11 = *(unsigned int *)(a1 + 108);
  if (v11 > 1)
  {
    v12 = (unint64_t *)(*(_QWORD *)(a1 + 120) + 104);
    v13 = 1;
    while (1)
    {
      v14 = *v12;
      v12 += 13;
      if (v14 > a4)
        break;
      if (v11 == ++v13)
        goto LABEL_7;
    }
    LODWORD(v11) = v13;
  }
LABEL_7:
  v15 = v11 - 1;
  v16 = *(double *)(a2 + 520);
  v17 = *(double *)(a2 + 528);
  v18 = *(double *)(a2 + 544);
  if (*(double *)(a2 + 536) == 0.0)
    v19 = 1.0;
  else
    v19 = *(double *)(a2 + 536);
  v20 = TSWPCoreTextTypesetter::pCalcStyleRunsHeightInfo(a1, a2, a3, (int)v11 - 1, a4, a5, *(double *)(a2 + 520), *(double *)(a2 + 528), v19, *(double *)(a2 + 544));
  if ((*(_BYTE *)(v10 + 24) & 0x20) != 0)
    v20 = TSWPCoreTextTypesetter::pCalcStyleRunsHeightInfo(a1, a2, a3, v15, a4, a5, v16, v17, v19, v18);
  v24 = v20;
  v25 = v21;
  v26 = v22;
  v27 = v23;
  *(double *)(a1 + 184) = *(double *)(a3 + 192) - fmax(*(double *)(a1 + 168), *(double *)(a1 + 160));
  v28 = *(_OWORD *)(a1 + 152);
  v29 = *(_OWORD *)(a1 + 168);
  v30 = *(_OWORD *)(a1 + 200);
  *(_OWORD *)(v10 + 144) = *(_OWORD *)(a1 + 184);
  *(_OWORD *)(v10 + 160) = v30;
  *(_OWORD *)(v10 + 112) = v28;
  *(_OWORD *)(v10 + 128) = v29;
  v32.size.height = TSWPLineFragment::heightForHeightInfo((double *)v10, *(_DWORD *)(a2 + 256), 0, *(double *)(a2 + 296));
  *(CGFloat *)(v10 + 72) = v32.size.height;
  v32.origin.x = *(CGFloat *)(v10 + 48);
  v32.origin.y = *(CGFloat *)(v10 + 56);
  v32.size.width = *(CGFloat *)(v10 + 64);
  v31.origin.x = v24;
  v31.origin.y = v25;
  v31.size.width = v26;
  v31.size.height = v27;
  *(CGRect *)(v10 + 80) = CGRectUnion(v31, v32);
}

double TSWPLineFragment::heightForHeightInfo(double *a1, int a2, char a3, double a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  void *v10;
  uint64_t v11;

  v4 = a1[14];
  v5 = a1[20];
  if (a2 == 2)
  {
    v9 = v4 + a4 + v5;
  }
  else
  {
    v7 = a1[17];
    v6 = a1[18];
    v8 = a1[16];
    v9 = v5 + v4 + a1[19] + v7 + v6 + fmax(a1[15], v8);
    if (a2 == 1)
    {
      v9 = fmax(v9, a4);
    }
    else if (!a2 && a4 > 1.0 && (a3 & 1) == 0)
    {
      v9 = v9 + (a4 + -1.0) * (v6 + v8 + v7);
    }
  }
  if (v9 <= 0.0)
  {
    v10 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v11 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "CGFloat TSWPLineFragment::heightForHeightInfo(TSWPLineSpacingMode, CGFloat, BOOL) const");
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 3039, CFSTR("bad lineheight"));
  }
  return v9;
}

double TSWPCoreTextTypesetter::pCalcStyleRunsHeightInfo(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unint64_t a5, uint64_t a6, double a7, double a8, double a9, double a10)
{
  void *v16;
  uint64_t v17;
  CTLineRef *v18;
  CFArrayRef GlyphRuns;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  double x;
  double y;
  double width;
  double height;
  const __CTRun *v27;
  const __CFDictionary *Attributes;
  unint64_t location;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  __CTFont *v36;
  uint64_t v37;
  BOOL v38;
  int v39;
  BOOL v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  BOOL v45;
  unsigned int v46;
  char v47;
  uint64_t v48;
  _BYTE *v49;
  char v50;
  TSWPDrawableAttachment *v51;
  TSWPDrawableAttachment *v52;
  int v53;
  CFIndex GlyphCount;
  CFIndex v55;
  CFIndex i;
  double v57;
  double v58;
  double v59;
  void *v60;
  double v61;
  double v62;
  double v63;
  double v64;
  uint64_t v65;
  double v66;
  BOOL v67;
  __CTFont *v68;
  void *v69;
  void *v70;
  CGFloat v71;
  CGFloat v72;
  CGFloat v73;
  CGFloat v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  void *v84;
  double v85;
  double v86;
  void *key;
  CFArrayRef v88;
  uint64_t v91;
  unint64_t v92;
  void *v94;
  uint64_t v95;
  int v96;
  unint64_t v97;
  __CTFont *v98;
  unsigned int v100;
  CFBooleanRef BOOLean[3];
  void *value;
  CFRange v103;
  CGRect v104;
  CGRect v105;
  CGRect v106;

  v95 = *(_QWORD *)(a3 + 200);
  if (*(_DWORD *)(a1 + 108) <= a4)
  {
    v16 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v17 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "CGRect TSWPCoreTextTypesetter::pCalcStyleRunsHeightInfo(const TSWPLayoutState *, TSWPTypesetterParamBlock *, CGRect, uint, NSRange)");
    objc_msgSend(v16, "handleFailureInFunction:file:lineNumber:description:", v17, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPCoreTextTypesetter.mm"), 1998, CFSTR("Bad run index"));
  }
  v18 = *(CTLineRef **)(v95 + 192);
  if (*(CTLineRef **)(v95 + 200) == v18)
    GlyphRuns = 0;
  else
    GlyphRuns = CTLineGetGlyphRuns(*v18);
  v88 = GlyphRuns;
  v20 = -[__CFArray count](GlyphRuns, "count");
  v21 = 0;
  key = (void *)*MEMORY[0x24BDC4C28];
  v94 = (void *)*MEMORY[0x24BDC5008];
  v97 = a5 + a6;
  v22 = a4;
  x = a7;
  y = a8;
  width = a9;
  height = a10;
  v91 = a6;
  v92 = v20;
  do
  {
    while (1)
    {
      v100 = v21;
      if (v20 <= v21 || (*(_BYTE *)(v95 + 25) & 0x40) != 0)
      {
        v38 = 0;
        v98 = 0;
        Attributes = 0;
        v37 = *(_QWORD *)(a1 + 120);
        LODWORD(v32) = v22;
        v30 = *(_QWORD *)(v37 + 104 * v22);
        v39 = 1;
      }
      else
      {
        v27 = (const __CTRun *)-[__CFArray objectAtIndexedSubscript:](v88, "objectAtIndexedSubscript:", v21);
        Attributes = CTRunGetAttributes(v27);
        location = CTRunGetStringRange(v27).location;
        v30 = location;
        v31 = *(_DWORD *)(a1 + 108) - 1;
        if (a4 <= v31)
          v32 = v31;
        else
          v32 = a4;
        v22 = v32;
        v34 = 104 * a4 + 104;
        v33 = a4 - 1;
        while (v33 - v32 != -1)
        {
          v35 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + v34);
          ++v33;
          v34 += 104;
          if (v35 > location)
          {
            LODWORD(v32) = v33;
            v22 = v33;
            break;
          }
        }
        v36 = (__CTFont *)CFDictionaryGetValue(Attributes, key);
        v37 = *(_QWORD *)(a1 + 120);
        if (v36 == *(__CTFont **)(v37 + 104 * v32 + 24))
        {
          v38 = 0;
          v98 = 0;
          v39 = 0;
        }
        else
        {
          value = 0;
          v98 = v36;
          if (CFDictionaryGetValueIfPresent(Attributes, v94, (const void **)&value)
            && CFBooleanGetValue((CFBooleanRef)value))
          {
            v38 = 0;
          }
          else
          {
            GlyphCount = CTRunGetGlyphCount(v27);
            if (GlyphCount < 1)
            {
              v38 = 0;
            }
            else
            {
              v55 = GlyphCount;
              std::vector<long>::vector(BOOLean, GlyphCount);
              v103.location = 0;
              v103.length = 0;
              CTRunGetStringIndices(v27, v103, (CFIndex *)BOOLean[0]);
              v38 = 0;
              for (i = 0; i != v55; v38 = i >= v55)
              {
                if ((IsWhitespaceCharacter(*(unsigned __int16 *)(*(_QWORD *)(a1 + 80)
                                                                + 2 * *((_QWORD *)BOOLean[0] + i))) & 1) == 0)
                  break;
                ++i;
              }
              if (BOOLean[0])
              {
                BOOLean[1] = BOOLean[0];
                operator delete(BOOLean[0]);
              }
            }
            v20 = v92;
          }
          v39 = 0;
          v37 = *(_QWORD *)(a1 + 120);
        }
      }
      v40 = 0;
      BOOLean[0] = 0;
      if (*(_BYTE *)(a1 + 30) && Attributes)
      {
        v41 = a6;
        v42 = v39;
        if (CFDictionaryGetValueIfPresent(Attributes, v94, (const void **)BOOLean))
          v40 = CFBooleanGetValue(BOOLean[0]) != 0;
        else
          v40 = 0;
        v39 = v42;
        a6 = v41;
      }
      v43 = *(_QWORD *)(v37 + 104 * v32);
      v45 = v43 != a5 || a6 != 0;
      if (v43 >= v97 && v45)
      {
        v46 = v100;
        goto LABEL_72;
      }
      v47 = v40;
      v96 = v39;
      v48 = v37 + 104 * v32;
      v50 = *(_BYTE *)(v48 + 8);
      v49 = (_BYTE *)(v48 + 8);
      if ((v50 & 1) != 0 && v43 >= a5)
      {
        v51 = (TSWPDrawableAttachment *)objc_msgSend(*(id *)(a1 + 64), "attachmentAtCharIndex:");
        if (v51)
        {
          v52 = v51;
          if (!-[TSWPDrawableAttachment isDrawable](v51, "isDrawable"))
          {
            objc_opt_class();
            if (!TSUDynamicCast())
              goto LABEL_56;
            v86 = height;
            v57 = width;
            v58 = y;
            v59 = x;
            objc_opt_class();
            v60 = (void *)TSUDynamicCast();
            objc_msgSend(v60, "baselineOffset");
            v62 = v61;
            objc_msgSend(v60, "size");
            v64 = fmax(*(double *)(a1 + 160), v62 + fmax(v63, 1.0));
            *(double *)(a1 + 160) = v64;
            v65 = a3;
            if (v64 > *(double *)(a3 + 192))
            {
              *(double *)(a3 + 192) = v64;
              *(_QWORD *)(a1 + 184) = 0;
            }
            v66 = fmax(*(double *)(a1 + 176), -v62);
            *(double *)(a1 + 176) = v66;
            if (v66 > *(double *)(a3 + 104))
              goto LABEL_53;
LABEL_54:
            v53 = 4;
            x = v59;
            y = v58;
            width = v57;
            height = v86;
LABEL_55:
            *(_DWORD *)(v95 + 24) |= v53;
            goto LABEL_56;
          }
          if (-[TSWPDrawableAttachment isAnchored](v52, "isAnchored"))
          {
            v53 = 8;
            goto LABEL_55;
          }
          if (!-[TSWPDrawableAttachment isPartitioned](v52, "isPartitioned"))
          {
            v85 = a7;
            v86 = height;
            v57 = width;
            v58 = y;
            v59 = x;
            v84 = TSWPLayoutChore::validatedLayoutForInlineAttachment(*(id **)(a1 + 8), v52, 0, 0);
            -[TSWPDrawableAttachment descent](v52, "descent");
            v76 = v75;
            TSWPResolveFloatPropertyForStyles(*(_QWORD *)(v37 + 104 * v32 + 16), *(_QWORD *)(a2 + 96), 33);
            v78 = v77;
            objc_msgSend(v84, "inlineVerticalOffset");
            v80 = v76 + v79;
            objc_msgSend(TSWPLayoutChore::validatedLayoutForInlineAttachment(*(id **)(a1 + 8), v52, 0, 0), "alignmentFrame");
            v82 = fmax(*(double *)(a1 + 160), v78 + fmax(v81, 1.0) - v80);
            *(double *)(a1 + 160) = v82;
            v65 = a3;
            if (v82 > *(double *)(a3 + 192))
            {
              *(double *)(a3 + 192) = v82;
              *(_QWORD *)(a1 + 184) = 0;
            }
            v66 = fmax(*(double *)(a1 + 176), v80 - v78);
            *(double *)(a1 + 176) = v66;
            a7 = v85;
            if (v66 <= *(double *)(a3 + 104))
              goto LABEL_54;
LABEL_53:
            *(double *)(v65 + 104) = v66;
            goto LABEL_54;
          }
        }
      }
LABEL_56:
      v67 = v30 < *(_QWORD *)(a1 + 56) - 1 || v30 == a5;
      if (v67 || (IsParagraphBreakingCharacter(*(unsigned __int16 *)(*(_QWORD *)(a1 + 80) + 2 * v30)) & 1) == 0)
      {
        if (v38)
          v68 = 0;
        else
          v68 = v98;
        TSWPCoreTextTypesetter::pAdjustMaxHeightInfo(a1, a2, a3, v37 + 104 * v32, v68, v47);
      }
      v20 = v92;
      if ((*v49 & 4) != 0)
      {
        v69 = (void *)TSWPResolvePropertyForStyles(*(_QWORD *)(v37 + 104 * v32 + 16), *(_QWORD *)(a2 + 96), 40, 0);
        a6 = v91;
        if (v69)
        {
          v70 = v69;
          v46 = v100;
          if (objc_msgSend(v69, "isEnabled"))
          {
            objc_msgSend(v70, "shadowBoundsForRect:", a7, a8, a9, a10);
            v106.origin.x = v71;
            v106.origin.y = v72;
            v106.size.width = v73;
            v106.size.height = v74;
            v104.origin.x = x;
            v104.origin.y = y;
            v104.size.width = width;
            v104.size.height = height;
            v105 = CGRectUnion(v104, v106);
            x = v105.origin.x;
            y = v105.origin.y;
            width = v105.size.width;
            height = v105.size.height;
            *(_DWORD *)(v95 + 24) |= 0x20u;
          }
          goto LABEL_71;
        }
      }
      else
      {
        a6 = v91;
      }
      v46 = v100;
LABEL_71:
      v39 = v96;
LABEL_72:
      v21 = v46 + 1;
      v22 += v39;
      if (!v20)
        break;
      if (v20 <= v21)
        return x;
    }
  }
  while (v22 < *(_DWORD *)(a1 + 108));
  return x;
}

void sub_217907084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

TSWPLineFragment *TSWPLineFragment::setTypesetterPos(TSWPLineFragment *this, double a2, double a3)
{
  *((double *)this + 50) = a2;
  *((double *)this + 51) = a3;
  return this;
}

TSWPLineFragment *TSWPLineFragment::saveLayoutState(TSWPLineFragment *this)
{
  TSWPLineFragment *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;

  v1 = this;
  *((_DWORD *)this + 120) = *((_DWORD *)this + 6);
  if (*((_QWORD *)this + 24) != *((_QWORD *)this + 25))
  {
    v2 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v3 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSWPLineFragment::saveLayoutState()");
    this = (TSWPLineFragment *)objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 3148, CFSTR("bad starting line fragment state: line vector"));
  }
  if (*((_QWORD *)v1 + 55) != *((_QWORD *)v1 + 56))
  {
    v4 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v5 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSWPLineFragment::saveLayoutState()");
    this = (TSWPLineFragment *)objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 3149, CFSTR("bad starting line fragment state: adornments"));
  }
  if (*((_QWORD *)v1 + 34) != *((_QWORD *)v1 + 35))
  {
    v6 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v7 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSWPLineFragment::saveLayoutState()");
    this = (TSWPLineFragment *)objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 3150, CFSTR("bad starting line fragment state: _underlines positions"));
  }
  if (*((_QWORD *)v1 + 37) != *((_QWORD *)v1 + 38))
  {
    v8 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v9 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSWPLineFragment::saveLayoutState()");
    this = (TSWPLineFragment *)objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 3151, CFSTR("bad starting line fragment state: _strikesthrough positions"));
  }
  if (*((_QWORD *)v1 + 40) != *((_QWORD *)v1 + 41))
  {
    v10 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v11 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSWPLineFragment::saveLayoutState()");
    this = (TSWPLineFragment *)objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 3152, CFSTR("bad starting line fragment state: _textBackgrounds positions"));
  }
  if (*((_QWORD *)v1 + 43) != *((_QWORD *)v1 + 44))
  {
    v12 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v13 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSWPLineFragment::saveLayoutState()");
    this = (TSWPLineFragment *)objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 3153, CFSTR("bad starting line fragment state: _textHighlights positions"));
  }
  if (*((_QWORD *)v1 + 58))
  {
    v14 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v15 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSWPLineFragment::saveLayoutState()");
    this = (TSWPLineFragment *)objc_msgSend(v14, "handleFailureInFunction:file:lineNumber:description:", v15, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 3154, CFSTR("expected nil value for '%s'"), "_breakLine");
  }
  if (*((_QWORD *)v1 + 64))
  {
    v16 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v17 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSWPLineFragment::saveLayoutState()");
    return (TSWPLineFragment *)objc_msgSend(v16, "handleFailureInFunction:file:lineNumber:description:", v17, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 3155, CFSTR("expected nil value for '%s'"), "_paragraphString");
  }
  return this;
}

void TSWPLineFragment::adjustBreakLine(TSWPLineFragment *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  double v16;
  __int16 *v17;
  int v18;
  void *v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  unsigned int v26;
  double v27;
  double v28;
  double v29;

  v2 = *((_QWORD *)this + 58);
  if (v2)
    *(double *)(v2 + 8) = (*((double *)this + 17) - *((double *)this + 16)) * 0.5;
  v3 = *((_QWORD *)this + 56) - *((_QWORD *)this + 55);
  if (v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0x8F5C28F5C28F5C29 * (v3 >> 3);
    do
    {
      v7 = *((_QWORD *)this + 55);
      if (*(_DWORD *)(v7 + 200 * v4) == 2)
      {
        v8 = v7 + 200 * v4;
        v10 = *(_QWORD *)(v8 + 104);
        v9 = (_QWORD *)(v8 + 104);
        v11 = v9 + 1;
        if ((v9[1] - v10) >> 4 != (uint64_t)(*(v9 - 5) - *(v9 - 6)) >> 1)
        {
          v12 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
          v13 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSWPLineFragment::adjustBreakLine()");
          objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 3191, CFSTR("invisibles count mismatch"));
        }
        v14 = *((_DWORD *)this + 6);
        if ((v14 & 0x800) != 0 && *v11 != *v9)
        {
          v15 = 0;
          v16 = *(double *)(*v11 - 16);
          v17 = &word_253DE0B48;
          while (1)
          {
            v18 = (unsigned __int16)*v17;
            v17 += 20;
            if (v18 == *(unsigned __int16 *)(*(v9 - 5) - 2))
              break;
            if (++v15 == 10)
            {
              v19 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
              v20 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSWPLineFragment::adjustBreakLine()");
              objc_msgSend(v19, "handleFailureInFunction:file:lineNumber:description:", v20, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineFragment.mm"), 3207, CFSTR("Failed to find glyph index"));
              v14 = *((_DWORD *)this + 6);
              LODWORD(v15) = 10;
              break;
            }
          }
          v21 = v16 + *(double *)(*((_QWORD *)this + 24) + 8);
          v22 = *((double *)this + 6);
          v24 = *((double *)this + 8);
          if ((v14 & 0x1000) != 0)
          {
            v29 = fmin(v21, 0.0);
            v28 = v24 - v29;
            v22 = v22 + v29;
          }
          else
          {
            if (v15 <= 9)
              v26 = v15;
            else
              v26 = 3;
            v27 = v21 + *((double *)&gInvisibles + 5 * v26 + 1);
            if (v24 >= v27)
              v28 = *((double *)this + 8);
            else
              v28 = v27;
          }
          v23 = *((_QWORD *)this + 7);
          v25 = *((_QWORD *)this + 9);
          *(CGRect *)((char *)this + 80) = CGRectUnion(*(CGRect *)((char *)this + 80), *(CGRect *)&v22);
        }
      }
      v4 = ++v5;
    }
    while (v6 > v5);
  }
}

BOOL TSWPLineFragment::shareLineRefs(TSWPLineFragment *this, const TSWPLineFragment *a2)
{
  _BOOL8 result;
  CGRect v5;

  if (!a2)
    return 0;
  if (*(_QWORD *)this != *(_QWORD *)a2
    || *((_QWORD *)this + 1) != *((_QWORD *)a2 + 1)
    || *((_QWORD *)a2 + 25) == *((_QWORD *)a2 + 24))
  {
    return 0;
  }
  result = 0;
  if ((*((_DWORD *)a2 + 6) & 4) == 0
    && ((*((_DWORD *)a2 + 6) & 0x2000) == 0) != (*((_BYTE *)this + 25) & 0x20) >> 5)
  {
    v5.origin.x = *((CGFloat *)a2 + 6);
    v5.origin.y = *((CGFloat *)a2 + 7);
    v5.size.width = *((CGFloat *)a2 + 8);
    v5.size.height = *((CGFloat *)a2 + 9);
    result = CGRectEqualToRect(v5, *(CGRect *)((char *)this + 48));
    if (result)
    {
      if (this != a2)
        std::vector<TSWPLineRef>::__assign_with_size[abi:ne180100]<TSWPLineRef*,TSWPLineRef*>((uint64_t)this + 192, *((_QWORD *)a2 + 24), *((_QWORD *)a2 + 25), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 25) - *((_QWORD *)a2 + 24)) >> 4));
      *((_QWORD *)this + 27) = *((_QWORD *)a2 + 27);
      return 1;
    }
  }
  return result;
}

void TSWPParagraphTypesetter::~TSWPParagraphTypesetter(TSWPParagraphTypesetter *this)
{
  const void *v2;
  const void *v3;
  void *v4;
  void **v5;

  *(_QWORD *)this = 0;
  v2 = (const void *)*((_QWORD *)this + 8);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)this + 8) = 0;
  }
  v3 = (const void *)*((_QWORD *)this + 7);
  if (v3)
  {
    CFRelease(v3);
    *((_QWORD *)this + 7) = 0;
  }
  v5 = (void **)((char *)this + 104);
  std::vector<_TSWPTateChuYokoRun>::__destroy_vector::operator()[abi:nn180100](&v5);
  v5 = (void **)((char *)this + 80);
  std::vector<_TSWPRubyRun>::__destroy_vector::operator()[abi:nn180100](&v5);
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
}

void sub_21790775C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void *v12;

  a10 = (void **)(v10 + 104);
  std::vector<_TSWPTateChuYokoRun>::__destroy_vector::operator()[abi:nn180100](&a10);
  a10 = (void **)(v10 + 80);
  std::vector<_TSWPRubyRun>::__destroy_vector::operator()[abi:nn180100](&a10);
  v12 = *(void **)(v10 + 32);
  if (v12)
  {
    *(_QWORD *)(v10 + 40) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

uint64_t TSWPLayoutChore::pAdjustTrailingSpaceAfter(uint64_t a1, TSWPLineFragmentArray **a2)
{
  uint64_t result;
  double *v5;
  double v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  float v10;
  double v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGRect v28;
  CGRect v29;

  result = TSWPLineFragmentArray::lastObject(*a2);
  if (result)
  {
    v5 = (double *)result;
    v6 = *(double *)(result + 160);
    if (v6 != 0.0)
    {
      v7 = *(_QWORD *)(a1 + 160);
      v9 = *(_QWORD *)result >= v7;
      v8 = *(_QWORD *)result - v7;
      v9 = !v9 || v8 >= *(_QWORD *)(a1 + 168);
      if (v9)
      {
        objc_msgSend((id)TSWPLayoutChore::pGetParagraphStyleAtCharIndex((TSWPLayoutChore *)a1, *(_QWORD *)result), "floatValueForProperty:", 88);
        v11 = (float)((float)(v10 * (float)(unint64_t)objc_msgSend(*(id *)(a1 + 184), "scaleTextPercent")) / 100.0);
        v6 = v5[20];
      }
      else
      {
        v11 = *(double *)(a1 + 392);
      }
      if (v6 >= v11)
        v12 = v11;
      else
        v12 = v6;
      v13 = TSWPLineFragmentArray::count(*a2);
      if (v13)
      {
        v14 = v6 - v12;
        v15 = v5[4] + v5[5];
        v16 = v13 - 1;
        do
        {
          v17 = TSWPLineFragmentArray::objectAtIndex(*a2, v16);
          if (*(double *)(v17 + 32) + *(double *)(v17 + 40) != v15)
            break;
          v18 = v17;
          v19 = v12 + *(double *)(a1 + 704);
          *(double *)(v17 + 72) = *(double *)(v17 + 72) - v19;
          v20 = *(double *)(v17 + 104) - v19;
          *(double *)(v17 + 104) = v20;
          if (*(_QWORD *)(v17 + 176))
          {
            v21 = *(double *)(v17 + 80);
            v22 = *(double *)(v17 + 88);
            v23 = *(double *)(v17 + 96);
            TSWPLineFragment::labelRect((TSWPLineFragment *)v17);
            v29.origin.x = v24;
            v29.origin.y = v25;
            v29.size.width = v26;
            v29.size.height = v27;
            v28.origin.x = v21;
            v28.origin.y = v22;
            v28.size.width = v23;
            v28.size.height = v20;
            *(CGRect *)(v18 + 80) = CGRectUnion(v28, v29);
          }
          *(double *)(v18 + 160) = v14;
          --v16;
        }
        while (v16 != -1);
      }
      return TSWPLineFragmentArray::lastObject(*a2);
    }
  }
  return result;
}

uint64_t TSWPLineFragmentArray::lastObject(TSWPLineFragmentArray *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1 == *(_QWORD *)this)
    return 0;
  else
    return *(_QWORD *)(v1 - 16);
}

void TSWPAdornments::TSWPAdornments(TSWPAdornments *this, const TSWPAdornments *a2)
{
  const void *v4;

  *(_QWORD *)this = *(_QWORD *)a2;
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)this + 4, *((const void **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3);
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((_QWORD *)this + 7, *((const void **)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 1);
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  std::vector<CGRect>::__init_with_size[abi:ne180100]<CGRect*,CGRect*>((_QWORD *)this + 10, *((const void **)a2 + 10), *((_QWORD *)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 5);
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  std::vector<CGPoint>::__init_with_size[abi:ne180100]<CGPoint*,CGPoint*>((_QWORD *)this + 13, *((const void **)a2 + 13), *((_QWORD *)a2 + 14), (uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 4);
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  std::vector<TSWPAttachmentPosition>::__init_with_size[abi:ne180100]<TSWPAttachmentPosition*,TSWPAttachmentPosition*>((_QWORD *)this + 16, *((const void **)a2 + 16), *((_QWORD *)a2 + 17), (uint64_t)(*((_QWORD *)a2 + 17) - *((_QWORD *)a2 + 16)) >> 4);
  *(_OWORD *)((char *)this + 152) = *(_OWORD *)((char *)a2 + 152);
  *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
  *((_OWORD *)this + 11) = *((_OWORD *)a2 + 11);
  *((_BYTE *)this + 192) = *((_BYTE *)a2 + 192);
  CGColorRetain(*((CGColorRef *)this + 2));
  v4 = (const void *)*((_QWORD *)this + 3);
  if (v4)
    CFRetain(v4);
}

void sub_217907A60(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v7 = *v5;
  if (*v5)
  {
    v1[14] = v7;
    operator delete(v7);
  }
  v8 = *v4;
  if (*v4)
  {
    v1[11] = v8;
    operator delete(v8);
  }
  v9 = *v3;
  if (*v3)
  {
    v1[8] = v9;
    operator delete(v9);
  }
  v10 = *v2;
  if (*v2)
  {
    v1[5] = v10;
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TSWPLayoutChore::pLayoutColumnWithOldLines()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t **v2;
  _BYTE *v3;
  _BYTE *v4;
  _WORD *v5;
  NSMutableArray *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  int v15;
  uint64_t v16;
  _OWORD *v17;
  double v18;
  double v19;
  double v20;
  double x;
  double v22;
  double width;
  __n128 v24;
  int v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  char v30;
  _BOOL4 v31;
  void *v32;
  double v33;
  double MinY;
  double Height;
  int v36;
  const __CTFont *FontForStyle;
  void *v38;
  uint64_t v39;
  NSMutableArray *v40;
  void *v41;
  uint64_t v42;
  uint64_t *v43;
  void *v44;
  uint64_t v45;
  double MaxY;
  double v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  char *v51;
  double v52;
  double v53;
  double v54;
  BOOL v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  BOOL v61;
  void *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  _BOOL4 v66;
  BOOL v67;
  double v68;
  unsigned __int16 v69;
  char v70;
  double v71;
  double v72;
  unint64_t v73;
  unint64_t v74;
  void *v75;
  void *v76;
  uint64_t v77;
  void *v78;
  _BOOL4 v79;
  uint64_t v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  double *v90;
  double v91;
  double v92;
  double v93;
  double v94;
  uint64_t AttachmentPartitionLineFragment;
  uint64_t v96;
  uint64_t v97;
  double Line;
  uint64_t v99;
  _QWORD *v100;
  void *v101;
  unint64_t v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unsigned int v114;
  int v115;
  unint64_t v116;
  _BOOL4 v117;
  double v118;
  _BOOL4 isConflictingWithEndOfColumn;
  unint64_t v120;
  double v121;
  int v122;
  _BOOL4 isSatifyingRequirements;
  uint64_t v124;
  uint64_t v125;
  int v126;
  double v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  _BOOL4 v131;
  uint64_t v132;
  int v133;
  id v134;
  int v135;
  double v136;
  double v137;
  char v138;
  size_t v139;
  double v140;
  _OWORD *v141;
  double *v142;
  char v143;
  double v144;
  uint64_t v145;
  double v146;
  double v147;
  double v148;
  unsigned int v149;
  int v150;
  uint64_t v151;
  NSUInteger v152;
  NSUInteger v153;
  uint64_t v154;
  double *v155;
  CGFloat v156;
  double v157;
  double v158;
  double v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  char v165;
  unint64_t v166;
  uint64_t v167;
  double *v168;
  double *v169;
  double *v170;
  double v171;
  uint64_t *v172;
  double v173;
  double v174;
  BOOL v176;
  char v177;
  char v178;
  unint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  char v183;
  double v184;
  double v185;
  double v186;
  double v187;
  int v188;
  char v189;
  char v190;
  BOOL v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  _BYTE *v199;
  _BYTE *v200;
  double v201;
  double v202;
  double v203;
  double v204;
  double v205;
  double v206;
  _BOOL4 v207;
  unint64_t IsLastColumn;
  double v209;
  int v210;
  int location;
  double v212;
  double v213;
  double v214;
  double v215;
  unint64_t v216;
  double v217;
  double v218;
  double v219;
  int v220;
  int v221;
  BOOL v222;
  char v223;
  int v224;
  int v225;
  unsigned int v226;
  _BOOL4 v227;
  _BOOL4 v229;
  double v230;
  double v231;
  uint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *p_shared_owners;
  unint64_t v235;
  unint64_t v236;
  unint64_t i;
  void *v238;
  double v239;
  int v240;
  unint64_t v241;
  _BYTE *v242;
  BOOL v243;
  BOOL v244;
  BOOL v245;
  _BOOL4 v246;
  int v247;
  uint64_t v248;
  int v249;
  uint64_t Object;
  int v251;
  uint64_t v252;
  int v253;
  unint64_t v254;
  BOOL v255;
  int v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  double v260;
  double v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  int v265;
  void *v266;
  BOOL v267;
  char v268;
  unsigned int v269;
  void *v270;
  uint64_t v271;
  unint64_t v272;
  NSUInteger v273;
  _QWORD *v274;
  uint64_t v275;
  NSUInteger v276;
  NSUInteger v277;
  uint64_t v278;
  double v279;
  uint64_t v280;
  int v281;
  id v282;
  char v283;
  void *v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  TSWPListStyle *v289;
  unint64_t v290;
  uint64_t v291;
  NSUInteger v292;
  double v293;
  unint64_t v294;
  double v295;
  double v296;
  double v297;
  uint64_t v298;
  uint64_t v299;
  BOOL v300;
  double v301;
  CGFloat v302;
  CGFloat v303;
  CGFloat v304;
  CGFloat v305;
  CGFloat v306;
  CGFloat v307;
  CGFloat v308;
  CGFloat v309;
  int v310;
  uint64_t location_high;
  double v312;
  double v313;
  double v314;
  double v315;
  double v316;
  unint64_t *v317;
  unint64_t v318;
  std::__shared_weak_count *v319;
  unint64_t *v320;
  unint64_t v321;
  double v322;
  double v323;
  uint64_t v324;
  void *v325;
  const __CTFont *v326;
  void *v327;
  uint64_t v328;
  double v329;
  double v330;
  uint64_t v331;
  char v332;
  char *v333;
  uint64_t v334;
  unint64_t v335;
  unint64_t v336;
  unint64_t v337;
  void *v338;
  uint64_t v339;
  CGFloat v340;
  CGFloat v341;
  CGFloat v342;
  CGFloat v343;
  _QWORD *v344;
  unint64_t v345;
  uint64_t v346;
  uint64_t v347;
  void *v348;
  uint64_t v349;
  uint64_t v350;
  double v351;
  uint64_t v352;
  void *v353;
  uint64_t v354;
  TSWPCoreTextTypesetter *v355;
  double v356;
  double v357;
  unint64_t v358;
  double v359;
  double v360;
  double v361;
  NSUInteger **v362;
  NSUInteger **v363;
  double v364;
  NSUInteger *v365;
  NSUInteger **j;
  double v367;
  double v368;
  double v369;
  double v370;
  double v371;
  double v372;
  double v373;
  double v374;
  double v375;
  double v376;
  void *v377;
  double v378;
  double v379;
  double v380;
  double v381;
  int v382;
  double v383;
  double v384;
  double v385;
  double v386;
  _BOOL4 v387;
  uint64_t v388;
  int v389;
  double v390;
  char v391;
  uint64_t *v392;
  NSUInteger **v393;
  NSUInteger **v394;
  NSUInteger *v395;
  int v396;
  void *v397;
  BOOL v398;
  void *v399;
  uint64_t v400;
  int v401;
  int v402;
  int v403;
  char v404;
  BOOL v405;
  __int16 v406;
  double v407;
  void *v408;
  uint64_t v409;
  std::__shared_weak_count *v410;
  unint64_t *v411;
  unint64_t v412;
  double v414;
  double v415;
  int v416;
  double v417;
  void *v418;
  _BYTE *v419;
  double v420;
  char v421;
  double v422;
  double v423;
  _WORD *v424;
  double v425;
  double v426;
  double v427;
  int v428;
  uint64_t CharacterStyleAtCharIndex;
  char v430;
  uint64_t v431;
  double v432;
  uint64_t v433;
  _BOOL4 v434;
  double v435;
  double v436;
  double v437;
  _QWORD *v438;
  TSWPLineBalancingLayoutState *v439;
  double v440;
  unsigned int v441;
  double v442;
  double v443;
  TSWPLineStylingLayoutState *v444;
  int v445;
  double v446;
  unsigned int v447;
  uint64_t v448;
  void *v449;
  id v450;
  double v451;
  _BOOL4 v452;
  unsigned int v453;
  double y;
  char v455;
  unsigned __int16 v456;
  BOOL v457;
  double v458;
  int v459;
  double v460;
  double rect;
  unint64_t v462;
  int v463;
  NSMutableArray *v464;
  double v465;
  uint64_t v466;
  _BOOL4 v467;
  double v468;
  CGFloat v469;
  int v470;
  int v471;
  unint64_t v472;
  double v473;
  TSWPDropCapLayoutState *v474;
  uint64_t v475;
  char v476;
  double v477;
  double v478;
  double v479;
  double v480;
  double v481;
  id *v482;
  TSWPLineFragmentArray *v483;
  std::__shared_weak_count *v484;
  double v485;
  double v486;
  _BYTE v487[657];
  __int128 v488;
  __int128 v489;
  __int128 v490;
  __int128 v491;
  double v492;
  double v493;
  double v494;
  double v495;
  double v496;
  double v497;
  void *v498;
  uint64_t v499;
  NSMutableArray *v500;
  __int128 v501;
  _BYTE v502[688];
  __int128 v503;
  double v504;
  double v505;
  __int128 v506;
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  _OWORD v511[2];
  __int128 v512;
  __int128 v513;
  __int128 v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  unint64_t v518;
  unint64_t v519;
  TSWPParagraphEnumerator v520;
  NSUInteger v521;
  TSWPListStyle *v522;
  unint64_t v523;
  int v524;
  double v525;
  double v526;
  char v527;
  char v528;
  char v529;
  char v530;
  __int128 v531;
  uint64_t v532;
  char v533;
  unsigned int v534;
  CGFloat v535;
  uint64_t *v536;
  uint64_t *v537;
  id v538[3];
  TSWPParagraphEnumerator v539[11];
  double v540;
  id v541;
  char v542;
  char v543;
  char v544;
  unsigned __int16 v545;
  _NSRange v546;
  unint64_t v547;
  uint64_t v548;
  uint64_t v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  double v554;
  TSWPLineFragmentArray *v555;
  std::__shared_weak_count *v556;
  _BYTE v557[128];
  _OWORD v558[128];
  double v559[2];
  double v560;
  TSWPParagraphEnumerator v561[72];
  uint64_t v562;
  _NSRange v563;
  _NSRange v564;
  _NSRange v565;
  _NSRange v566;
  _NSRange v567;
  _NSRange v568;
  _NSRange v569;
  CGSize v570;
  CGSize v571;
  CGSize v572;
  CGSize v573;
  CGSize v574;
  CGRect v575;
  CGRect v576;
  CGRect v577;
  CGRect v578;
  CGRect v579;
  CGRect v580;
  CGRect v581;
  CGRect v582;
  CGRect v583;
  CGRect v584;
  CGRect v585;
  CGRect v586;
  CGRect v587;
  CGRect v588;
  CGRect v589;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v424 = v5;
  v464 = v6;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v435 = v13;
  v425 = v14;
  v470 = v15;
  v16 = v0;
  v562 = *MEMORY[0x24BDAC8D0];
  v17 = (_OWORD *)operator new();
  *v17 = 0u;
  v17[1] = 0u;
  std::shared_ptr<TSWPLineFragmentArray>::shared_ptr[abi:ne180100]<TSWPLineFragmentArray,void>(&v555, (uint64_t)v17);
  v469 = v10;
  v473 = v8;
  objc_msgSend(*(id *)(v16 + 184), "setLayoutResultFlags:", 0x80000000);
  v450 = *(id *)(v16 + 64);
  objc_msgSend(*(id *)(v16 + 184), "wpBounds");
  y = v18;
  rect = v19;
  x = v20;
  width = v22;
  v463 = objc_msgSend(*(id *)(v16 + 2056), "autosizeFlags");
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v476 = objc_msgSend(*(id *)(v16 + 2056), "alwaysAllowWordSplit");
  else
    v476 = 0;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v25 = objc_msgSend(*(id *)(v16 + 2056), "maxLineCount");
  else
    v25 = 0;
  if (!*(_QWORD *)(v16 + 184))
  {
    v26 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v27 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "BOOL TSWPLayoutChore::pLayoutColumnWithOldLines(TSWPLayoutFlags, CGFloat, CGSize, CGSize, NSMutableArray *, unichar *, BOOL *, TSWPLineFragmentArray *)");
    objc_msgSend(v26, "handleFailureInFunction:file:lineNumber:description:", v27, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 1863, CFSTR("Bad _state.column in layoutColumn"));
  }
  if (rect < 0.0 || width < 0.0)
  {
    v28 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler", rect);
    v29 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "BOOL TSWPLayoutChore::pLayoutColumnWithOldLines(TSWPLayoutFlags, CGFloat, CGSize, CGSize, NSMutableArray *, unichar *, BOOL *, TSWPLineFragmentArray *)");
    objc_msgSend(v28, "handleFailureInFunction:file:lineNumber:description:", v29, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 1864, CFSTR("Bad column size"));
  }
  v30 = 0;
  v24.n128_f64[0] = rect;
  if (rect < 0.0 || width < 0.0)
    goto LABEL_765;
  v31 = (*(_BYTE *)(v16 + 32) & 4) != 0 || *(_QWORD *)(v16 + 232) > 1uLL;
  if (*(_BYTE *)(v16 + 248))
    v31 = 1;
  v434 = v31;
  if ((v463 & 4) != 0)
    v32 = 0;
  else
    v32 = *(void **)(v16 + 712);
  v33 = fmin(v12, 50000.0);
  if (*(_DWORD *)(v16 + 56) != 5)
    v33 = v12;
  v437 = v33;
  v575.origin.x = x;
  v575.origin.y = y;
  v575.size.width = width;
  v575.size.height = rect;
  MinY = CGRectGetMinY(v575);
  Height = v437;
  if ((v463 & 1) == 0)
  {
    v576.origin.x = x;
    v576.origin.y = y;
    v576.size.width = width;
    v576.size.height = rect;
    Height = CGRectGetHeight(v576);
  }
  v419 = v4;
  v577.origin.x = x;
  v577.origin.y = y;
  v577.size.width = width;
  v577.size.height = rect;
  v432 = CGRectGetMinY(v577) + v425;
  v554 = v432;
  v36 = *(unsigned __int8 *)(v16 + 248);
  objc_msgSend(*(id *)(v16 + 184), "setStartCharIndex:", *(_QWORD *)(v16 + 80));
  objc_msgSend(*(id *)(v16 + 184), "setStartAnchoredCharIndex:", *(_QWORD *)(v16 + 88));
  objc_msgSend(*(id *)(v16 + 184), "setColumnIndex:", *(_QWORD *)(v16 + 240));
  if (*(_DWORD *)(v16 + 56))
    *(_BYTE *)(v16 + 640) = 0;
  *(_BYTE *)(v16 + 593) = 0;
  *(_QWORD *)(v16 + 632) = 0;
  *(_QWORD *)(v16 + 736) = objc_msgSend(*(id *)(v16 + 2056), "pageCount");
  CharacterStyleAtCharIndex = TSWPLayoutChore::pGetCharacterStyleAtCharIndex((id *)v16, *(_QWORD *)(v16 + 80));
  FontForStyle = TSWPFastCreateFontForStyle(CharacterStyleAtCharIndex, *(void **)(v16 + 176), objc_msgSend(*(id *)(v16 + 184), "scaleTextPercent"));
  v449 = v32;
  v418 = *(void **)(v16 + 176);
  v553 = 0u;
  v552 = 0u;
  v551 = 0u;
  v550 = 0u;
  TSWPFontHeightInfoForFont(FontForStyle, &v550);
  v422 = *(double *)&v552 + *(double *)&v551 + *((double *)&v551 + 1);
  if (v422 <= 0.0)
  {
    v38 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v39 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "BOOL TSWPLayoutChore::pLayoutColumnWithOldLines(TSWPLayoutFlags, CGFloat, CGSize, CGSize, NSMutableArray *, unichar *, BOOL *, TSWPLineFragmentArray *)");
    objc_msgSend(v38, "handleFailureInFunction:file:lineNumber:description:", v39, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 1912, CFSTR("Bad lineHeightGuess"));
  }
  CFRelease(FontForStyle);
  v482 = (id *)(v16 + 80);
  TSWPLayoutState::TSWPLayoutState((TSWPLayoutState *)&v546.length, (const TSWPLayoutState *)(v16 + 80));
  v546.location = 0;
  v545 = 0;
  v544 = 0;
  v543 = 0;
  v431 = *(_QWORD *)(v16 + 40);
  v542 = 0;
  TSWPParagraphEnumerator::TSWPParagraphEnumerator(v539);
  bzero(v538, 0x2B0uLL);
  TSWPLayoutState::operator=(v538, (id *)(v16 + 80));
  v540 = v554;
  v541 = (id)-[NSMutableArray copy](v464, "copy");
  v40 = v464;
  v41 = *(void **)(v16 + 720);
  if (v41)
  {
    v475 = objc_msgSend(v41, "hintRangeForColumnIndex:frameBounds:charIndex:", *(_QWORD *)(v16 + 240), *(_QWORD *)(v16 + 80), x, y, width, rect);
    v448 = v42;
    if (v2)
      goto LABEL_32;
LABEL_39:
    v44 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v45 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "BOOL TSWPLayoutChore::pLayoutColumnWithOldLines(TSWPLayoutFlags, CGFloat, CGSize, CGSize, NSMutableArray *, unichar *, BOOL *, TSWPLineFragmentArray *)");
    objc_msgSend(v44, "handleFailureInFunction:file:lineNumber:description:", v45, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 1952, CFSTR("Layout failure, No old lines."));
    v537 = 0;
    v536 = 0;
    goto LABEL_40;
  }
  v448 = 0;
  v475 = 0x7FFFFFFFFFFFFFFFLL;
  if (!v2)
    goto LABEL_39;
LABEL_32:
  if (*(_QWORD *)(v16 + 2032) != 0x7FFFFFFFFFFFFFFFLL
    || *(_QWORD *)(v16 + 2048)
    || *(_BYTE *)(v16 + 248)
    || *(_BYTE *)(v16 + 249)
    || *(double *)(v16 + 256) != 0.0)
  {
    v43 = v2[1];
    v537 = v43;
  }
  else
  {
    v392 = v2[1];
    v537 = *v2;
    v536 = v392;
    if (v537 == v392)
      goto LABEL_40;
    v43 = v392 - 2;
  }
  v536 = v43;
LABEL_40:
  if (v449)
    v433 = objc_msgSend(v449, "beginWrappingToColumn:target:hasWrapables:", *(_QWORD *)(v16 + 184), *(_QWORD *)(v16 + 2056), &v542);
  else
    v433 = 0;
  objc_msgSend(*(id *)(v16 + 2056), "maxAnchorY");
  v47 = MaxY;
  if ((v463 & 1) == 0)
  {
    objc_msgSend(*(id *)(v16 + 184), "frameBounds");
    MaxY = CGRectGetMaxY(v578);
  }
  v414 = MaxY;
  v415 = v47;
  v474 = (TSWPDropCapLayoutState *)(v16 + 864);
  TSWPLayoutChore::pSetupStateForDropCap((id *)v16, (id *)(v16 + 864));
  v439 = (TSWPLineBalancingLayoutState *)(v16 + 1128);
  TSWPLineBalancingLayoutState::prepareForRestore((id *)(v16 + 1128), v482, (objc_msgSend(*(id *)(v16 + 2056), "autosizeFlags") & 0xC) != 0, width, SHIDWORD(v546.location), v546.location, v554);
  v444 = (TSWPLineStylingLayoutState *)(v16 + 1928);
  TSWPLayoutChore::pSetupStateForLineStyling((id *)v16, (id *)(v16 + 1928));
  v441 = v36 << 8;
  v48 = *v2;
  v49 = v2[1];
  while (v48 != v49)
  {
    v50 = *v48;
    v48 += 2;
    *(_QWORD *)(v50 + 432) = 0;
  }
  v51 = 0;
  v457 = 0;
  v445 = 0;
  v453 = 0;
  v459 = 0;
  v416 = 0;
  v428 = 0;
  LOBYTE(v471) = 0;
  v421 = 0;
  v462 = v475 + v448;
  v438 = (_QWORD *)(v16 + 536);
  v52 = 4000.0;
  if ((v463 & 4) == 0)
    v52 = v469;
  v443 = v52;
  v423 = width * 0.8;
  v447 = v25 - 1;
  v420 = NAN;
  v426 = 0.0;
  v427 = 0.0;
  v442 = v432;
  v477 = 0.0;
  v451 = v422;
  v417 = 0.0;
  v436 = MinY + Height;
  v465 = MinY + Height;
  v446 = width;
  v472 = v475;
  v440 = x;
  do
  {
    v53 = round(v554);
    v54 = round(v465);
    v56 = v475 != 0x7FFFFFFFFFFFFFFFLL && v472 < v462;
    if (v53 > v54 && !v56)
    {
      v57 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
      v58 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "BOOL TSWPLayoutChore::pLayoutColumnWithOldLines(TSWPLayoutFlags, CGFloat, CGSize, CGSize, NSMutableArray *, unichar *, BOOL *, TSWPLineFragmentArray *)");
      objc_msgSend(v57, "handleFailureInFunction:file:lineNumber:description:", v58, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 2010, CFSTR("bad curLineBlockStart"));
    }
    v59 = *(_QWORD *)(v16 + 80);
    v60 = *(_QWORD *)(v16 + 160);
    v61 = v59 < v60 || v59 > *(_QWORD *)(v16 + 168) + v60;
    if (v61)
    {
      v62 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
      v63 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "BOOL TSWPLayoutChore::pLayoutColumnWithOldLines(TSWPLayoutFlags, CGFloat, CGSize, CGSize, NSMutableArray *, unichar *, BOOL *, TSWPLineFragmentArray *)");
      objc_msgSend(v62, "handleFailureInFunction:file:lineNumber:description:", v63, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 2011, CFSTR("Bad _state.charIndex"));
    }
    v573.width = 0.0;
    v570.width = v469;
    v570.height = v473;
    v573.height = v477;
    TSWPLayoutChore::pSetupTypesetterIfNeeded((TSWPLayoutChore *)v16, v570, v573);
    if (!*(_QWORD *)(v16 + 280))
    {
      v64 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
      v65 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "BOOL TSWPLayoutChore::pLayoutColumnWithOldLines(TSWPLayoutFlags, CGFloat, CGSize, CGSize, NSMutableArray *, unichar *, BOOL *, TSWPLineFragmentArray *)");
      objc_msgSend(v64, "handleFailureInFunction:file:lineNumber:description:", v65, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 2017, CFSTR("Layout chore expects to have a text source by now"));
    }
    if (v542)
      v66 = 1;
    else
      v66 = -[NSMutableArray count](v464, "count") != 0;
    v467 = v66;
    v67 = (v470 & 0x2000) == 0 && v66;
    v535 = 0.0;
    v68 = TSWPLayoutChore::pCalculateSpaceBefore((TSWPLayoutChore *)v16, v546.location);
    v534 = 0;
    v533 = 0;
    v69 = v545;
    v70 = v544;
    v481 = 0.0;
    v479 = 0.0;
    v71 = 0.0;
    v480 = 0.0;
    v72 = 0.0;
    v531 = *(__int128 *)((char *)&xmmword_217C2B398 + 8);
    v532 = 0;
    TSWPLayoutState::TSWPLayoutState((TSWPLayoutState *)&v518, (const TSWPLayoutState *)v482);
    v517 = 0uLL;
    v73 = objc_msgSend(*(id *)(v16 + 280), "charIndexMappedFromStorage:", *(_QWORD *)(v16 + 80));
    if (*(_BYTE *)(v16 + 568)
      && (v74 = v73, v73 < objc_msgSend(*(id *)(v16 + 280), "length"))
      && objc_msgSend(*(id *)(v16 + 280), "characterAtIndex:", v74) == 65532
      && (objc_opt_class(),
          objc_msgSend(*(id *)(v16 + 280), "attachmentAtCharIndex:", v74),
          v75 = (void *)TSUDynamicCast(),
          v76 = (void *)objc_msgSend(v75, "drawable"),
          objc_msgSend(v75, "isPartitioned")))
    {
      v77 = objc_msgSend(v76, "partitioner");
      *(_QWORD *)(v16 + 544) = v77;
      if (v77)
      {
        *(_QWORD *)(v16 + 552) = objc_msgSend(*(id *)(v16 + 280), "charIndexMappedToStorage:", v74);
        *(_QWORD *)(v16 + 536) = v75;
      }
    }
    else
    {
      *(_QWORD *)(v16 + 544) = 0;
    }
    v455 = v70;
    v456 = v69;
    v78 = *(void **)(v16 + 720);
    if (v475 == 0x7FFFFFFFFFFFFFFFLL)
    {
      v79 = 0;
      if (v78)
        goto LABEL_99;
LABEL_95:
      if (TSWPDropCapLayoutState::impactsFragments(v474, v554)
        && *(_QWORD *)(v16 + 80) == *(_QWORD *)(v16 + 160)
        && *(_QWORD *)(v16 + 904))
      {
        v91 = TSWPLayoutChore::pDropCapElevationHeight((id *)v16);
        *(double *)(v16 + 1056) = v91;
        v554 = v554 + v91 + *(double *)(v16 + 1064);
      }
      goto LABEL_99;
    }
    if (!v448)
      goto LABEL_498;
    v81 = objc_msgSend(*(id *)(v16 + 720), "hintRangeForLineStartingAtHintIndex:", v472);
    if (v81 == 0x7FFFFFFFFFFFFFFFLL)
    {
      v82 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
      v83 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "BOOL TSWPLayoutChore::pLayoutColumnWithOldLines(TSWPLayoutFlags, CGFloat, CGSize, CGSize, NSMutableArray *, unichar *, BOOL *, TSWPLineFragmentArray *)");
      objc_msgSend(v82, "handleFailureInFunction:file:lineNumber:description:", v83, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 2085, CFSTR("line hint range for line not found starting at hint index %lu"), v472);
LABEL_498:
      v115 = 17;
      goto LABEL_499;
    }
    v84 = v80;
    v85 = objc_msgSend(v78, "hints") + 56 * v81;
    v86 = *(id *)(v85 + 32);
    if (v86 != *v482)
    {
      v87 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
      v88 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "BOOL TSWPLayoutChore::pLayoutColumnWithOldLines(TSWPLayoutFlags, CGFloat, CGSize, CGSize, NSMutableArray *, unichar *, BOOL *, TSWPLineFragmentArray *)");
      objc_msgSend(v87, "handleFailureInFunction:file:lineNumber:description:", v88, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 2095, CFSTR("unexpected start char index for hinted line fragment"));
      v86 = *(id *)(v85 + 32);
    }
    *v482 = v86;
    v472 = v81 + v84;
    if (v81 >= v81 + v84)
    {
      LODWORD(v89) = 0;
    }
    else
    {
      v89 = 0;
      do
      {
        v579 = *(CGRect *)v85;
        v90 = &v559[4 * v89];
        *v90 = *(double *)v85;
        v90[1] = v579.origin.y;
        v90[2] = v579.size.width;
        v90[3] = v579.size.height;
        v558[v89] = *(_OWORD *)(v85 + 32);
        v557[v89] = (*(_BYTE *)(v85 + 48) & 0x10) != 0;
        v554 = CGRectGetMinY(v579) - v68;
        ++v89;
        v85 += 56;
      }
      while (v84 != v89);
    }
    v467 = 0;
    v534 = v89;
    v79 = v462 == v472;
    if (!v78)
      goto LABEL_95;
LABEL_99:
    v452 = v79;
    if (*(_QWORD *)(v16 + 544))
    {
      v92 = v554;
      if ((v463 & 1) != 0)
        v93 = 16000.0;
      else
        v93 = v473 - v477;
      v94 = v443;
      AttachmentPartitionLineFragment = TSWPLayoutChore::pCreateAttachmentPartitionLineFragment((TSWPLayoutChore *)v16, v554, *(CGSize *)(&v93 - 1), v546.location, (BOOL *)&v543);
      std::shared_ptr<TSWPLineFragment>::reset[abi:ne180100]<TSWPLineFragment,void>(&v517, AttachmentPartitionLineFragment);
      if ((_QWORD)v517)
      {
        v554 = v92;
        if (!v78)
        {
          v103 = *(double *)(v517 + 112) + *(double *)(v517 + 120);
          v104 = *(double *)(v517 + 56);
          v105 = *(double *)(v517 + 64);
          v106 = *(double *)(v517 + 48);
          v580.origin.x = v106;
          v580.origin.y = v104;
          v580.size.width = v105;
          v580.size.height = v103;
          if (v92 + CGRectGetHeight(v580) > v465 && (LODWORD(v546.location) || v542))
          {
            objc_msgSend(*(id *)(v517 + 432), "removeFromParent");
            v233 = (std::__shared_weak_count *)*((_QWORD *)&v517 + 1);
            v517 = 0uLL;
            if (v233)
            {
              p_shared_owners = (unint64_t *)&v233->__shared_owners_;
              do
                v235 = __ldaxr(p_shared_owners);
              while (__stlxr(v235 - 1, p_shared_owners));
              if (!v235)
              {
                ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
                std::__shared_weak_count::__release_weak(v233);
              }
            }
            TSWPLayoutChore::pRestoreStateFromOldState((TSWPLayoutChore *)v16, (id *)&v518);
            *(_BYTE *)(v16 + 640) = 1;
            goto LABEL_498;
          }
          if (v449)
          {
            objc_msgSend(v449, "nextUnobstructedSpanStartingAt:wrappableAttachments:userInfo:", v464, v433, v106, v104, v105, v103);
            if (v92 < v107 && vabdd_f64(v92, v107) >= 0.00999999978)
            {
              v554 = ceil(v107);
              objc_msgSend(*(id *)(v517 + 432), "removeFromParent");
              v108 = (std::__shared_weak_count *)*((_QWORD *)&v517 + 1);
              v517 = 0uLL;
              if (v108)
              {
                v109 = (unint64_t *)&v108->__shared_owners_;
                do
                  v110 = __ldaxr(v109);
                while (__stlxr(v110 - 1, v109));
                if (!v110)
                {
                  ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                  std::__shared_weak_count::__release_weak(v108);
                }
              }
              TSWPLayoutChore::pRestoreStateFromOldState((TSWPLayoutChore *)v16, (id *)&v518);
              if (v554 >= v465 + -1.0)
                goto LABEL_498;
              v543 = 0;
              goto LABEL_426;
            }
          }
        }
        TSWPLineFragmentArray::appendObject((int64x2_t *)v555, &v517);
        v96 = v517;
        *(double *)(v16 + 632) = fmax(*(double *)(v16 + 632), *(double *)(v517 + 64));
        *(CGFloat *)(v16 + 400) = CGRectGetMaxY(*(CGRect *)(v96 + 48));
        v97 = v517;
        v481 = *(double *)(v517 + 112);
        v479 = *(double *)(v517 + 120);
        v71 = *(double *)(v517 + 136);
        v480 = *(double *)(v517 + 128);
        v72 = *(double *)(v517 + 144);
        v531 = *(_OWORD *)(v517 + 152);
        v532 = *(_QWORD *)(v517 + 168);
        v478 = *(double *)(v517 + 72);
        *(double *)(v517 + 128) = *(double *)&v551 + *((double *)&v551 + 1) + *(double *)&v552;
        Line = TSWPLineFragment::calculateOffsetForNextLine(v97, v524, v526);
        v99 = 0;
        v442 = Line + v554;
        v554 = Line + v554;
        v100 = (_QWORD *)v517;
        *(_QWORD *)(v517 + 128) = 0;
        ++HIDWORD(v546.location);
        ++LODWORD(v546.location);
        v545 = 0;
        if (!*v438)
        {
          v111 = v100[1];
          if (v111)
          {
            v112 = v111 + *v100 - 1;
            v99 = objc_msgSend(*(id *)(v16 + 8), "characterAtIndex:", v112);
            v545 = v99;
            if (IsParagraphBreakingCharacter(v99))
              v544 = objc_msgSend(*(id *)(v16 + 8), "hasColumnStyleForParagraphBreakAtCharIndex:", v112);
          }
          else
          {
            v99 = 0;
          }
        }
        *(_BYTE *)(v16 + 592) = IsParagraphBreakingCharacter(v99);
        if (v543)
        {
          v101 = (void *)objc_msgSend(*(id *)(v16 + 544), "hintForLayout:", *(_QWORD *)(v517 + 432));
          TSWPLayoutState::setPreviousPartHint(v482, v101);
          *(_BYTE *)(v16 + 641) = objc_msgSend(*(id *)(v16 + 544), "didHint:syncWithNextHint:horizontally:delta:", v101, objc_msgSend(*(id *)(v16 + 2056), "nextTargetFirstChildHint"), 0, 0);
        }
        else
        {
          *(_QWORD *)(v16 + 560) = 0;
          *(_BYTE *)(v16 + 641) = 0;
          *v438 = 0;
          *(_QWORD *)(v16 + 544) = 0;
          TSWPLayoutState::setPreviousPartHint(v482, 0);
        }
        v102 = 1;
      }
      else
      {
        v102 = 0;
        v478 = 0.0;
      }
      v113 = *(_QWORD *)(v16 + 80);
      if (*(_QWORD *)(v16 + 88) > v113)
        v113 = *(_QWORD *)(v16 + 88);
      *(_QWORD *)(v16 + 88) = v113;
    }
    else
    {
      v102 = 0;
      v478 = 0.0;
    }
    if (!(_QWORD)v517)
    {
      v120 = *(_QWORD *)(v16 + 80);
      if (v120 >= *(_QWORD *)(v16 + 40)
        && v120 < *(_QWORD *)(v16 + 64)
        && *(_QWORD *)(v16 + 88) >= *(_QWORD *)(v16 + 48))
      {
        goto LABEL_498;
      }
      v121 = 0.0;
      if (*(_DWORD *)(v16 + 1856))
      {
        v446 = *(double *)(v16 + 1896);
        v122 = objc_msgSend(*(id *)(v16 + 176), "intValueForProperty:", 86);
        if (*(_QWORD *)(v16 + 2056) && v122 == 4)
          v122 = objc_msgSend(*(id *)(v16 + 2056), "naturalAlignment");
        if (v122 == 1)
          goto LABEL_156;
        if (v122 == 2)
        {
          v121 = (*(double *)(v16 + 1832) - *(double *)(v16 + 1896)) * 0.5;
        }
        else if (v122 == 4 && *(_BYTE *)(v16 + 413))
        {
LABEL_156:
          v121 = *(double *)(v16 + 1832) - *(double *)(v16 + 1896);
        }
      }
      v136 = x + v121;
      v137 = v68 + v554;
      if (v78)
        goto LABEL_220;
      v138 = !v67;
      if (!v449)
        v138 = 1;
      if ((v138 & 1) != 0 || v446 <= 0.0)
      {
        v559[0] = x + v121;
        v559[1] = v68 + v554;
        v560 = v446;
        *(double *)&v561[0].var0 = v451;
        v139 = 1;
        v534 = 1;
      }
      else
      {
        v534 = objc_msgSend(v449, "splitLine:lineSegmentRects:wrappableAttachments:ignoreFloatingGraphics:floatingCausedWrap:skipHint:userInfo:", v559, v464, (*(_DWORD *)(v16 + 56) & 0xFFFFFFFB) == 1, &v533, &v535, v433, x + v121, v68 + v554, v446, v451);
        if (v533 || -[NSMutableArray count](v464, "count"))
          v441 |= 0x40u;
        v139 = v534;
        if (!v534)
        {
LABEL_220:
          v143 = 0;
          if (v449 && v446 > 0.0)
          {
            *(double *)&v488 = x;
            *((double *)&v488 + 1) = y;
            *(double *)&v489 = width;
            *((double *)&v489 + 1) = rect;
            *(double *)&v490 = v68;
            *((double *)&v490 + 1) = v451;
            *(double *)&v491 = v136;
            *((double *)&v491 + 1) = v137;
            v492 = v446;
            v493 = v451;
            v494 = v432;
            v495 = v554;
            v496 = v435;
            v497 = v437;
            v498 = v449;
            v499 = v433;
            v500 = v464;
            v143 = TSWPLayoutChore::pCreateFullContainerAnchoredDrawableLineFragment(v16, (uint64_t)&v488, (uint64_t)&v518, (uint64_t)&v537, (uint64_t)&v536, (uint64_t)&v555, (uint64_t)&v546.location + 4, (uint64_t)&v534, &v535, &v533);
          }
          v515 = 0u;
          v516 = 0u;
          v513 = 0u;
          v514 = 0u;
          v512 = 0u;
          v510 = 0u;
          memset(v511, 0, sizeof(v511));
          v508 = 0u;
          v509 = 0u;
          v506 = 0u;
          v507 = 0u;
          *(double *)&v503 = x;
          *((double *)&v503 + 1) = y;
          v504 = width;
          v505 = rect;
          LODWORD(v506) = v463;
          objc_msgSend(*(id *)(v16 + 2056), "maxSize");
          v430 = v143;
          v144 = *(double *)(v16 + 216);
          *(_QWORD *)&v507 = v145;
          *((double *)&v506 + 1) = v146 + v144 * -2.0;
          DWORD2(v507) = v470;
          *(CGFloat *)&v508 = v469;
          *((double *)&v508 + 1) = v473 - v477;
          *((_QWORD *)&v509 + 1) = *((_QWORD *)&gZeroHeightInfo + 1);
          v510 = *(_OWORD *)&qword_217C2B388;
          v511[1] = unk_217C2B3A8;
          *(double *)&v509 = v68;
          v511[0] = 0xC7EFFFFFE0000000;
          *(_QWORD *)&v515 = 0;
          LOBYTE(v512) = 0;
          v147 = 0.0;
          v148 = v71;
          if (!v78)
            v147 = v554 - *(double *)(v16 + 400);
          *((double *)&v513 + 1) = v147;
          *(_QWORD *)&v513 = 0;
          TSWPLayoutState::operator=((id *)&v518, v482);
          TSWPLayoutChore::pPushLayoutState((TSWPLayoutChore *)v16, (const TSWPLayoutState *)&v518);
          v149 = v534;
          if (!v534)
          {
            v466 = 0;
            v51 = 0;
            *(_QWORD *)&v513 = 0;
            goto LABEL_297;
          }
          v150 = TSWPDropCapLayoutState::impactsFragments(v474, v554);
          v151 = 0;
          if (!v150)
            goto LABEL_245;
          v152 = *(_QWORD *)(v16 + 80);
          if (v152 != *(_QWORD *)(v16 + 160) || (v153 = *(_QWORD *)(v16 + 904)) == 0)
          {
            v151 = *(_QWORD *)(v16 + 1048);
LABEL_245:
            v466 = 0;
            *(_QWORD *)&v513 = v151;
LABEL_246:
            v166 = 0;
            v51 = 0;
            while (2)
            {
              LODWORD(v167) = v149 + ~(_DWORD)v166;
              if (*(_BYTE *)(v16 + 413))
                v167 = v167;
              else
                v167 = v166;
              v168 = &v559[4 * v167];
              if (v78)
              {
                v169 = v168 + 1;
                v170 = v168 + 2;
                v171 = v168[3];
              }
              else
              {
                v170 = v168 + 2;
                v169 = &v554;
                v171 = v451 + v68;
              }
              v172 = (uint64_t *)&v558[v167];
              v173 = *v170;
              v174 = *v168;
              v176 = v149 == 1 && v533 == 0;
              if (v173 < v423)
                v176 = 0;
              v177 = v176 | v476;
              v178 = *(_BYTE *)(v16 + 592);
              v179 = *(_QWORD *)(v16 + 64);
              v180 = *(_QWORD *)(v16 + 80);
              TSWPLayoutChore::pFillSingleLineFragment(v16, *v172, v172[1], v176 | v476, (uint64_t)&v503, &v537, &v536, (TSWPLineFragment **)&v488, v174, *v169, v173, v171, &v545, &v544, v557[v166]);
              v181 = (char *)*v482;
              v182 = v488;
              if ((!*(_QWORD *)(v488 + 176)
                 || (CGRectGetWidth(*(CGRect *)(v488 + 48)) >= 20.0 ? (v183 = 1) : (v183 = v177),
                     (v182 = v488, (v183 & 1) != 0) || *(_QWORD *)(v488 + 8)))
                && (*(_QWORD *)(v182 + 8) || *(_QWORD *)(v182 + 176) || *(_QWORD *)v182 == v179))
              {
                v184 = *(double *)(v182 + 112);
                v185 = *(double *)(v182 + 120);
                v187 = *(double *)(v182 + 128);
                v186 = *(double *)(v182 + 136);
                v72 = *(double *)(v182 + 144);
                v531 = *(_OWORD *)(v182 + 152);
                v532 = *(_QWORD *)(v182 + 168);
                v481 = v184;
                *(double *)&v509 = v184;
                v479 = v185;
                *((double *)&v509 + 1) = v185;
                v480 = v187;
                *(double *)&v510 = v187;
                v71 = v186;
                *((double *)&v510 + 1) = v186;
                *(double *)v511 = v72;
                *(_OWORD *)((char *)v511 + 8) = v531;
                *((_QWORD *)&v511[1] + 1) = v532;
                v478 = *(double *)(v182 + 72);
                TSWPLineFragmentArray::appendObject((int64x2_t *)v555, &v488);
                ++v102;
              }
              else
              {
                if (!v166)
                {
                  v481 = *(double *)(v182 + 112);
                  v479 = *(double *)(v182 + 120);
                  v71 = *(double *)(v182 + 136);
                  v480 = *(double *)(v182 + 128);
                  v72 = *(double *)(v182 + 144);
                  v531 = *(_OWORD *)(v182 + 152);
                  v532 = *(_QWORD *)(v182 + 168);
                  v478 = *(double *)(v182 + 72);
                }
                v196 = (std::__shared_weak_count *)*((_QWORD *)&v488 + 1);
                v488 = 0uLL;
                if (v196)
                {
                  v197 = (unint64_t *)&v196->__shared_owners_;
                  do
                    v198 = __ldaxr(v197);
                  while (__stlxr(v198 - 1, v197));
                  if (!v198)
                  {
                    ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
                    std::__shared_weak_count::__release_weak(v196);
                  }
                }
                *(_BYTE *)(v16 + 592) = v178;
              }
              if (*(_QWORD *)(v16 + 720))
              {
                v574.width = 0.0;
                v571.width = v469;
                v571.height = v473;
                v574.height = v477;
                TSWPLayoutChore::pSetupTypesetterIfNeeded((TSWPLayoutChore *)v16, v571, v574);
                goto LABEL_278;
              }
              v188 = v545;
              v189 = IsParagraphBreakingCharacter(v545);
              if (v188 == 8232)
                v190 = 1;
              else
                v190 = v189;
              if ((v190 & 1) != 0)
                v191 = 0;
              else
LABEL_278:
                v191 = (unint64_t)*v482 < v179;
              v192 = (std::__shared_weak_count *)*((_QWORD *)&v488 + 1);
              if (*((_QWORD *)&v488 + 1))
              {
                v193 = (unint64_t *)(*((_QWORD *)&v488 + 1) + 8);
                do
                  v194 = __ldaxr(v193);
                while (__stlxr(v194 - 1, v193));
                if (!v194)
                {
                  ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
                  std::__shared_weak_count::__release_weak(v192);
                }
              }
              v51 = &v51[(_QWORD)v181 - v180];
              ++v166;
              v149 = v534;
              if (v166 >= v534 || !v191)
              {
                v148 = v71;
                goto LABEL_297;
              }
              continue;
            }
          }
          if (*(_BYTE *)(v16 + 413))
            v154 = v149 - 1;
          else
            v154 = 0;
          v155 = &v559[4 * v154];
          v156 = *v155;
          v157 = v554;
          v158 = v155[2];
          v159 = *(double *)(v16 + 1064);
          *(double *)(v16 + 976) = v554;
          TSWPLayoutChore::pLayoutDropCap(v16, v152, v153, &v503, (float64x2_t **)&v488, v156, v157, v158, v451 + v68);
          if (vabdd_f64(v159, *(double *)(v16 + 1064)) < 0.00999999978)
          {
            if ((v463 & 0xC) != 0
              || (TSWPDropCapLayoutState::maxWidthFactor(v474), v260 == 0.0)
              || (TSWPDropCapLayoutState::maxWidthFactor(v474), width * v261 >= *(double *)(v16 + 1072)))
            {
              v501 = v488;
              if (*((_QWORD *)&v488 + 1))
              {
                v160 = (unint64_t *)(*((_QWORD *)&v488 + 1) + 8);
                do
                  v161 = __ldxr(v160);
                while (__stxr(v161 + 1, v160));
              }
              std::shared_ptr<EQKit::StemStretch::Glyph>::operator=[abi:nn180100]((_QWORD *)(v16 + 1112), (uint64_t *)&v501);
              v162 = (std::__shared_weak_count *)*((_QWORD *)&v501 + 1);
              if (*((_QWORD *)&v501 + 1))
              {
                v163 = (unint64_t *)(*((_QWORD *)&v501 + 1) + 8);
                do
                  v164 = __ldaxr(v163);
                while (__stlxr(v164 - 1, v163));
                if (!v164)
                {
                  ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
                  std::__shared_weak_count::__release_weak(v162);
                }
              }
              *(_QWORD *)(v16 + 1080) = TSWPLineFragmentArray::count(v555);
              TSWPLineFragmentArray::appendObject((int64x2_t *)v555, &v488);
              v165 = 0;
              v115 = 0;
              ++v102;
              v466 = 1;
LABEL_518:
              v262 = (std::__shared_weak_count *)*((_QWORD *)&v488 + 1);
              if (!*((_QWORD *)&v488 + 1))
                goto LABEL_522;
              v263 = (unint64_t *)(*((_QWORD *)&v488 + 1) + 8);
              do
                v264 = __ldaxr(v263);
              while (__stlxr(v264 - 1, v263));
              if (!v264)
              {
                ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
                std::__shared_weak_count::__release_weak(v262);
                if ((v165 & 1) != 0)
                {
LABEL_628:
                  if (v115)
                    goto LABEL_499;
                  goto LABEL_132;
                }
              }
              else
              {
LABEL_522:
                if ((v165 & 1) != 0)
                  goto LABEL_628;
              }
              v149 = v534;
              *(_QWORD *)&v513 = *(_QWORD *)(v16 + 1048);
              if (v534)
                goto LABEL_246;
              v51 = 0;
LABEL_297:
              v199 = (_BYTE *)v518;
              v200 = *(_BYTE **)(v16 + 80);
              v458 = v148;
              if (v434)
                v201 = 0.0;
              else
                v201 = v148;
              v202 = CGRectGetHeight(*(CGRect *)(v16 + 648));
              v203 = fmax(v480, v479) + v481 + v72;
              v204 = v458 + v203;
              v205 = fmin(v458 + v203 - v201, v478);
              if (*(_DWORD *)(v16 + 56) || !v529 || v200 == v199)
              {
                if (objc_msgSend(*(id *)(v16 + 8), "wpKind") != 2)
                {
                  objc_msgSend(*(id *)(v16 + 680), "footnoteHeight");
                  v477 = v206;
                }
                v207 = 0;
              }
              else
              {
                location = v546.location;
                v212 = CGRectGetHeight(*(CGRect *)(v16 + 648));
                v213 = 0.0;
                if (!location)
                  v213 = v205;
                v214 = v212 - v213;
                if (v214 >= v202 * 0.899999976)
                  v215 = v202 * 0.899999976;
                else
                  v215 = v214;
                v564.location = (NSUInteger)v199;
                v564.length = v200 - v199;
                x = v440;
                v216 = TSWPLayoutChore::pAddFootnotesForLineRange((id *)v16, v564, v215, HIDWORD(v546.location) == 0);
                if (v216 <= 0x7FFFFFFFFFFFFFFELL)
                {
                  (*(void (**)(_QWORD))(**(_QWORD **)(v16 + 2024) + 24))(*(_QWORD *)(v16 + 2024));
                  v236 = v102 + 1;
                  while (--v236)
                    TSWPLineFragmentArray::removeLastObject(v555);
                  TSWPLayoutChore::pPopLayoutState((TSWPLayoutChore *)v16, (uint64_t)&v488);
                  TSWPLayoutState::operator=(v482, (id *)&v488);
                  TSWPLayoutState::~TSWPLayoutState((TSWPLayoutState *)&v488);
                  *(_QWORD *)(v16 + 96) = v216;
                  goto LABEL_426;
                }
                if (!LODWORD(v546.location) && v102 > TSWPLineFragmentArray::count(v555))
                  v102 = TSWPLineFragmentArray::count(v555);
                if (objc_msgSend(*(id *)(v16 + 8), "wpKind") != 2)
                {
                  objc_msgSend(*(id *)(v16 + 680), "footnoteHeight");
                  v477 = v217;
                }
                v207 = v477 > v215;
              }
              TSWPLayoutChore::pPopLayoutState((TSWPLayoutChore *)v16, (uint64_t)v487);
              TSWPLayoutState::~TSWPLayoutState((TSWPLayoutState *)v487);
              *(_QWORD *)(v16 + 96) = 0x7FFFFFFFFFFFFFFFLL;
              v209 = v436 - v554;
              v210 = *(_DWORD *)(v16 + 56);
              if (v210)
              {
                v460 = v436;
              }
              else
              {
                v218 = *(double *)(v16 + 672) - v477;
                v61 = v436 <= v218;
                v460 = v218;
                v219 = v209 - (v436 - v218);
                if (!v61)
                  v209 = v219;
              }
              x = v440;
              v220 = v205 > v209 || v207;
              v221 = v467;
              if (HIDWORD(v546.location))
                v221 = 1;
              if (v210 == 5 || !v221)
              {
                if ((v220 & 1) != 0)
                  goto LABEL_345;
              }
              else
              {
                v222 = (*(_BYTE *)(v16 + 32) & 8) == 0 && v78 == 0;
                v223 = v222;
                if (v222)
                  v224 = v220;
                else
                  v224 = 0;
                if ((v220 & 1) != 0)
                {
                  if ((v223 & 1) != 0)
                  {
                    if (v210)
                    {
                      IsLastColumn = TSWPLayoutChore::pIsLastColumn((id *)v16);
                      v225 = v441;
                      if ((_DWORD)IsLastColumn)
                        v225 = v441 | 2;
                      v441 = v225;
                    }
LABEL_347:
                    v226 = v453;
                    v227 = v467;
                    if (v453 >= 6)
                      v227 = 0;
                    if (v227)
                    {
                      if (v451 + v481 < fmin(v204, v209))
                      {
LABEL_380:
                        v471 = 1;
                        goto LABEL_381;
                      }
                      v229 = v451 + v481 <= v204 + 1.0 || v102 == 0;
                      v226 = v453;
                      if (((v229 | v428) & 1) == 0)
                      {
                        if (v453)
                        {
                          IsLastColumn = TSWPLayoutChore::pFindCharIndexOfRunThatMadeUsGrowToLineHeightGuess((TSWPLayoutChore *)v16, v451, v458, *(_QWORD *)(v16 + 80));
                          *(_QWORD *)(v16 + 40) = IsLastColumn;
                        }
                        v451 = v204 - v481;
                        v428 = 1;
                        goto LABEL_380;
                      }
                    }
                    v471 = 0;
                    if (v226 <= 5)
                    {
                      if (v102)
                      {
                        v471 = 0;
                        if ((*(_BYTE *)(v16 + 32) & 0x40) != 0 && !LODWORD(v546.location))
                        {
                          if (v524 == 2)
                            v230 = v481 + v526 * v525;
                          else
                            v230 = v203;
                          v231 = v68 + v554 + v230 - v480;
                          if (v231 < 0.0)
                          {
                            v554 = v554 + fabs(v231);
                            goto LABEL_380;
                          }
                          v471 = 0;
                        }
                      }
                    }
LABEL_381:
                    if (v445)
                    {
                      v445 = 0;
                    }
                    else if ((v224 & 1) != 0)
                    {
                      v445 = 0;
                      v224 = 1;
                    }
                    else if ((v430 & 1) != 0)
                    {
                      v445 = 0;
                      v224 = 0;
                    }
                    else
                    {
                      IsLastColumn = objc_msgSend(*(id *)(v16 + 2056), "shouldPositionAttachmentsIteratively");
                      if ((_DWORD)IsLastColumn)
                      {
                        for (i = 0; ; ++i)
                        {
                          IsLastColumn = objc_msgSend(*(id *)(v16 + 8), "attachmentCount");
                          if (i >= IsLastColumn)
                            break;
                          *(_QWORD *)&v488 = 0;
                          objc_msgSend(*(id *)(v16 + 8), "attachmentAtAttachmentIndex:outCharIndex:", i, &v488);
                          objc_opt_class();
                          v238 = (void *)TSUDynamicCast();
                          if (v238)
                          {
                            if ((unint64_t)v488 > v518)
                            {
                              IsLastColumn = objc_msgSend(v238, "attachmentAnchorY");
                              if (v239 > 0.0)
                              {
                                v240 = 1;
                                goto LABEL_401;
                              }
                            }
                          }
                        }
                      }
                      v240 = 0;
LABEL_401:
                      v241 = *(_QWORD *)(v16 + 88);
                      if (v241 >= *(_QWORD *)(v16 + 48)
                        || (!v528 || (unint64_t)v200 <= v241) && ((v519 >= v518) & ~v240) != 0)
                      {
                        v445 = 0;
                        v224 = 0;
                        if (v241 <= (unint64_t)v200)
                          v242 = v200;
                        else
                          v242 = *(_BYTE **)(v16 + 88);
                        *(_QWORD *)(v16 + 88) = v242;
                      }
                      else
                      {
                        *(_QWORD *)&v488 = 0;
                        v486 = 0.0;
                        v485 = 0.0;
                        v569.location = (NSUInteger)v199;
                        v569.length = v200 - v199;
                        v572.width = v435;
                        v572.height = v437;
                        IsLastColumn = TSWPLayoutChore::pSetupAnchoredGraphics((TSWPLayoutChore *)v16, v464, v569, v554, (TSWPLayoutState *)&v518, v572, LODWORD(v546.location) == 0, (double *)&v488, &v486, &v485);
                        v445 = IsLastColumn;
                        if ((*(double *)&v488 > v415 || v486 > v414) && LODWORD(v546.location))
                        {
                          v471 = 0;
                          v224 = 1;
                          v530 = 1;
                        }
                        else
                        {
                          v224 = 0;
                          if ((_DWORD)IsLastColumn)
                          {
                            v426 = fmax(v486, v426);
                            v427 = fmax(*(double *)&v488, v427);
                            v417 = fmax(v485, v417);
                            v471 = 1;
                            v420 = v554;
                          }
                          else
                          {
                            v420 = NAN;
                          }
                        }
                        v149 = v534;
                      }
                    }
                    if (v102)
                      v267 = 1;
                    else
                      v267 = v149 == 0;
                    v268 = !v267;
                    *(_BYTE *)(v16 + 593) = v268;
                    v269 = v453 + 1;
                    if ((v224 & 1) == 0 && !v471)
                    {
                      if (v453 >= 6)
                      {
                        v270 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
                        v271 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "BOOL TSWPLayoutChore::pLayoutColumnWithOldLines(TSWPLayoutFlags, CGFloat, CGSize, CGSize, NSMutableArray *, unichar *, BOOL *, TSWPLineFragmentArray *)");
                        objc_msgSend(v270, "handleFailureInFunction:file:lineNumber:description:", v271, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 2796, CFSTR("Bad redoLineFragmentsCount count"));
                      }
                      *(_QWORD *)(v16 + 40) = v431;
                      if (v466)
                      {
                        if (v102 == 1)
                        {
                          (*(void (**)(_QWORD))(**(_QWORD **)(v16 + 2024) + 24))(*(_QWORD *)(v16 + 2024));
                          TSWPLineFragmentArray::removeLastObject(v555);
                          TSWPDropCapLayoutState::prepareForRelayout((void **)v474, (void *)objc_msgSend(*(id *)(v16 + 8), "textSourceForLayoutInRange:", *(_QWORD *)(v16 + 160), *(_QWORD *)(v16 + 168)));
                          *(_QWORD *)(v16 + 80) = *(_QWORD *)(v16 + 160);
LABEL_609:
                          v102 = 0;
                          v323 = v535;
                          if (v535 < 1.0)
                            v323 = 1.0;
                          v535 = v323;
                          v442 = floor(v554 + v323);
                          v554 = v442;
                          *(double *)(v16 + 400) = v323 + *(double *)(v16 + 400);
LABEL_612:
                          v324 = TSWPLayoutChore::pGetCharacterStyleAtCharIndex((id *)v16, *(_QWORD *)(v16 + 80));
                          v325 = *(void **)(v16 + 176);
                          if (v324 == CharacterStyleAtCharIndex && v325 == v418)
                          {
                            v445 = 0;
                            v269 = 0;
                            v428 = 0;
                            v115 = 0;
                            v451 = v422;
                          }
                          else
                          {
                            v326 = TSWPFastCreateFontForStyle(v324, v325, objc_msgSend(*(id *)(v16 + 184), "scaleTextPercent"));
                            TSWPFontHeightInfoForFont(v326, &v488);
                            v551 = v489;
                            v550 = v488;
                            v552 = v490;
                            v553 = v491;
                            v451 = *(double *)&v490 + *(double *)&v489 + *((double *)&v489 + 1);
                            if (v451 <= 0.0)
                            {
                              v327 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
                              v328 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "BOOL TSWPLayoutChore::pLayoutColumnWithOldLines(TSWPLayoutFlags, CGFloat, CGSize, CGSize, NSMutableArray *, unichar *, BOOL *, TSWPLineFragmentArray *)");
                              objc_msgSend(v327, "handleFailureInFunction:file:lineNumber:description:", v328, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 2924, CFSTR("Bad lineHeightGuess"));
                            }
                            CFRelease(v326);
                            v445 = 0;
                            v269 = 0;
                            v428 = 0;
                            v115 = 0;
                          }
                          goto LABEL_627;
                        }
                        v286 = 1;
                        if (!v102)
                          goto LABEL_609;
                      }
                      else
                      {
                        v286 = 0;
                        if (!v102)
                          goto LABEL_609;
                      }
                      v287 = TSWPLineFragmentArray::objectAtIndex(v555, HIDWORD(v546.location));
                      v288 = *(_QWORD *)(v287 + 176);
                      if (v288)
                      {
                        v289 = v522;
                        v290 = v523;
                        v291 = *(_QWORD *)(v288 + 88);
                        v292 = TSWPParagraphEnumerator::paragraphTextRange(&v520);
                        TSWPTopicNumberHints::setTopicNumberForList((TSWPTopicNumberHints *)(v16 + 768), v289, v290, v291, v292);
                      }
                      v468 = width;
                      if (v524 == 2)
                        v293 = v481 + v526 * v525;
                      else
                        v293 = v203;
                      TSWPDropCapLayoutState::updateWithBaselineOffset((uint64_t)v474, v293);
                      v294 = 0;
                      v295 = v554 - v420;
                      v296 = -INFINITY;
                      v297 = v458;
                      do
                      {
                        v298 = TSWPLineFragmentArray::objectAtIndex(v555, v294 + HIDWORD(v546.location));
                        v299 = v298;
                        v300 = v286 != v294 || v466 == 0;
                        *(double *)(v298 + 112) = v481;
                        *(double *)(v298 + 120) = v479;
                        *(double *)(v298 + 128) = v480;
                        *(double *)(v298 + 136) = v297;
                        *(double *)(v298 + 144) = v72;
                        *(_OWORD *)(v298 + 152) = v531;
                        *(_QWORD *)(v298 + 168) = v532;
                        if (v300)
                          v298 = v287;
                        *(double *)(v299 + 32) = v293 + *(double *)(v298 + 56);
                        if (v294 >= v286)
                        {
                          *(double *)(v299 + 104) = *(double *)(v299 + 104) + v478 - *(double *)(v298 + 72);
                          *(double *)(v299 + 72) = v478;
                          v301 = *(double *)(v298 + 136);
                          if (v296 < *(double *)(v298 + 32) + *(double *)(v298 + 40) + v301)
                            v296 = *(double *)(v298 + 32) + *(double *)(v298 + 40) + v301;
                        }
                        if (*(_QWORD *)(v298 + 176))
                        {
                          v302 = *(double *)(v299 + 80);
                          v303 = *(double *)(v299 + 88);
                          v304 = *(double *)(v299 + 96);
                          v305 = *(double *)(v299 + 104);
                          TSWPLineFragment::labelRect((TSWPLineFragment *)v298);
                          v589.origin.x = v306;
                          v589.origin.y = v307;
                          v589.size.width = v308;
                          v589.size.height = v309;
                          v581.origin.x = v302;
                          v581.origin.y = v303;
                          v581.size.width = v304;
                          v581.size.height = v305;
                          *(CGRect *)(v299 + 80) = CGRectUnion(v581, v589);
                          v297 = v458;
                        }
                        *(double *)(v299 + 416) = v295;
                        ++v294;
                        v287 = v299;
                      }
                      while (v102 != v294);
                      v310 = *(_DWORD *)(v16 + 336);
                      width = v468;
                      if (v310)
                      {
                        if (v310 == 2 || v310 == 4)
                          goto LABEL_597;
                      }
                      else if (*(double *)(v16 + 376) < 1.0)
                      {
                        goto LABEL_597;
                      }
                      *(double *)(v16 + 400) = v296;
LABEL_597:
                      location_high = HIDWORD(v546.location);
                      HIDWORD(v546.location) += v102;
                      ++LODWORD(v546.location);
                      v312 = *(double *)(v299 + 32);
                      v313 = *(double *)(v299 + 40);
                      x = v440;
                      v314 = TSWPLineFragment::calculateOffsetForNextLine(v299, v524, v526);
                      v315 = v554;
                      v316 = *(double *)(v299 + 160);
                      v483 = v555;
                      v484 = v556;
                      if (v556)
                      {
                        v317 = (unint64_t *)&v556->__shared_owners_;
                        do
                          v318 = __ldxr(v317);
                        while (__stxr(v318 + 1, v317));
                      }
                      TSWPDropCapLayoutState::updateWithNewLineAdded((uint64_t)v474, &v483, v286 + location_high, v102 - v286, v315, v314 + v315 - v316);
                      v319 = v484;
                      if (v484)
                      {
                        v320 = (unint64_t *)&v484->__shared_owners_;
                        do
                          v321 = __ldaxr(v320);
                        while (__stlxr(v321 - 1, v320));
                        if (!v321)
                        {
                          ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
                          std::__shared_weak_count::__release_weak(v319);
                        }
                      }
                      TSWPLineStylingLayoutState::updateWithNewLineAdded(v444, (uint64_t)*v482);
                      TSWPLineBalancingLayoutState::updateWithNewLineAdded((uint64_t)v439, &v555);
                      v554 = v314 + v554;
                      v322 = v436;
                      if (v460 < v436)
                        v322 = v460;
                      v465 = v322;
                      TSWPLineFragmentArray::incrementLogicalLineCount(v555);
                      v442 = v297 + v312 + v313;
                      v420 = NAN;
                      goto LABEL_612;
                    }
                    v272 = HIDWORD(v546.location);
                    if (v224
                      && TSWPLayoutChore::pAnchoredGraphicInLineRange(IsLastColumn, HIDWORD(v546.location), v102, &v555))
                    {
                      *(_BYTE *)(v16 + 640) = 1;
                    }
                    if (v102)
                    {
                      v273 = *(_QWORD *)TSWPLineFragmentArray::objectAtIndex(v555, v272);
                      v274 = (_QWORD *)TSWPLineFragmentArray::objectAtIndex(v555, v102 + v272 - 1);
                      v275 = v274[1];
                      v276 = v275 + *v274;
                      if (v273 <= v276)
                        v277 = v275 + *v274;
                      else
                        v277 = v273;
                      if (v273 >= v276)
                        v273 = v276;
                      v566.length = v277 - v273;
                      v566.location = v273;
                      TSWPLayoutChore::removeFootnotesInRange((id *)v16, v566);
                      if (v471 && v273 == *(_QWORD *)(v16 + 160) && !*(_QWORD *)(v16 + 1088))
                        TSWPDropCapLayoutState::prepareForRelayout((void **)v474, (void *)objc_msgSend(*(id *)(v16 + 8), "textSourceForLayoutInRange:", v273, *(_QWORD *)(v16 + 168)));
                    }
                    v567.location = v272;
                    v567.length = v102;
                    TSWPLineFragmentArray::removeObjectsInRange(v555, v567);
                    v545 = v456;
                    v544 = v455;
                    v278 = *(_QWORD *)(v16 + 88);
                    TSWPLayoutChore::pRestoreStateFromOldState((TSWPLayoutChore *)v16, (id *)&v518);
                    if (v471)
                    {
                      *(_QWORD *)(v16 + 88) = v278;
                      v451 = fmax(v451, v204 - v481);
                      if (v451 <= 0.0)
                      {
                        v284 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
                        v285 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "BOOL TSWPLayoutChore::pLayoutColumnWithOldLines(TSWPLayoutFlags, CGFloat, CGSize, CGSize, NSMutableArray *, unichar *, BOOL *, TSWPLineFragmentArray *)");
                        objc_msgSend(v284, "handleFailureInFunction:file:lineNumber:description:", v285, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 2732, CFSTR("Bad lineHeightGuess"));
                      }
                      v115 = 18;
                      goto LABEL_627;
                    }
                    TSWPDropCapLayoutState::updateWithEndOfColumn((uint64_t)v474);
                    if (!TSWPDropCapLayoutState::isConflictingWithEndOfColumn(v474))
                      goto LABEL_622;
                    v280 = TSWPLineFragmentArray::count(v555);
                    v568.location = *(_QWORD *)(v16 + 1080);
                    v281 = v280 - LODWORD(v568.location);
                    v568.length = v280 - v568.location;
                    TSWPLineFragmentArray::removeObjectsInRange(v555, v568);
                    HIDWORD(v546.location) -= v281;
                    LODWORD(v546.location) -= *(_DWORD *)(v16 + 1088);
                    v554 = v540;
                    if ((TSWPDropCapLayoutState::shouldReduceRequirementsToKeepInCurrentColumn(v474) & 1) != 0
                      || (v282 = (id)objc_msgSend(*(id *)(v16 + 184), "startCharIndex"), v282 == v538[0]))
                    {
                      TSWPDropCapLayoutState::reduceRequirements(v474);
                      v283 = 1;
                    }
                    else
                    {
                      v283 = 0;
                    }
                    TSWPLayoutChore::pRestoreStateFromOldState((TSWPLayoutChore *)v16, v538);
                    TSWPDropCapLayoutState::prepareForRelayout((void **)v474, (void *)objc_msgSend(*(id *)(v16 + 8), "textSourceForLayoutInRange:", *(_QWORD *)(v16 + 160), *(_QWORD *)(v16 + 168)));

                    v464 = (NSMutableArray *)objc_msgSend(v541, "mutableCopy");
                    if ((v283 & 1) == 0)
                    {
LABEL_622:
                      TSWPLineBalancingLayoutState::updateWithEndOfColumn(v439, (uint64_t)*v482, v279);
                      if (!*(_DWORD *)(v16 + 1856))
                      {
                        *(_QWORD *)(v16 + 40) = v431;
                        v115 = 17;
                        goto LABEL_626;
                      }
                      TSWPLineBalancingLayoutState::restoreLocalState((uint64_t)v439, &v555, (_DWORD *)&v546.location + 1, &v546, &v554);
                      TSWPLayoutChore::pRestoreStateFromOldState((TSWPLayoutChore *)v16, (id *)v439);
                    }
                    v115 = 18;
LABEL_626:
                    v269 = v453;
LABEL_627:
                    v459 = 0;
                    v453 = v269;
                    goto LABEL_628;
                  }
LABEL_345:
                  v224 = 0;
                  v441 |= 1u;
                  goto LABEL_347;
                }
              }
              v224 = 0;
              goto LABEL_347;
            }
            TSWPDropCapLayoutState::reduceRequirements(v474);
          }
          TSWPLayoutChore::pPopLayoutState((TSWPLayoutChore *)v16, (uint64_t)v502);
          TSWPLayoutState::~TSWPLayoutState((TSWPLayoutState *)v502);
          v554 = v540;
          TSWPLayoutChore::pRestoreStateFromOldState((TSWPLayoutChore *)v16, v538);
          TSWPDropCapLayoutState::prepareForRelayout((void **)v474, (void *)objc_msgSend(*(id *)(v16 + 8), "textSourceForLayoutInRange:", *(_QWORD *)(v16 + 160), *(_QWORD *)(v16 + 168)));

          v464 = (NSMutableArray *)objc_msgSend(v541, "mutableCopy");
          v466 = 0;
          v115 = 18;
          v165 = 1;
          goto LABEL_518;
        }
      }
      v140 = v554;
      bzero(v557, v139);
      v141 = v558;
      v142 = &v560;
      do
      {
        *(v142 - 1) = v140;
        v142[1] = v451 + v68;
        *v141++ = xmmword_217C27470;
        v142 += 4;
        --v139;
      }
      while (v139);
      x = v440;
      goto LABEL_220;
    }
LABEL_132:
    v114 = v546.location;
    v457 = v447 < LODWORD(v546.location);
    if (v447 < LODWORD(v546.location) && (!*(_DWORD *)(v16 + 1856) || *(_QWORD *)(v16 + 920)))
    {
      v115 = 17;
      v457 = 1;
      goto LABEL_499;
    }
    if (v475 == 0x7FFFFFFFFFFFFFFFLL)
    {
      if (*(_QWORD *)(v16 + 920))
      {
        if (v554 >= v465 + -1.0
          || (v116 = *(_QWORD *)(v16 + 80), v116 >= *(_QWORD *)(v16 + 40))
          && v116 < *(_QWORD *)(v16 + 64)
          && *(_QWORD *)(v16 + 88) >= *(_QWORD *)(v16 + 48))
        {
          TSWPDropCapLayoutState::updateWithEndOfColumn((uint64_t)v474);
        }
      }
    }
    v117 = TSWPDropCapLayoutState::needsLayoutIteration(v474);
    if (v117)
    {
      isConflictingWithEndOfColumn = 0;
    }
    else
    {
      if (!TSWPDropCapLayoutState::isSatifyingRequirements(v474))
      {
        isSatifyingRequirements = 0;
        isConflictingWithEndOfColumn = 0;
        goto LABEL_161;
      }
      isConflictingWithEndOfColumn = TSWPDropCapLayoutState::isConflictingWithEndOfColumn(v474);
    }
    isSatifyingRequirements = 1;
LABEL_161:
    v124 = *(_QWORD *)(v16 + 80);
    v125 = *(_QWORD *)(v16 + 160);
    if (v124 == v125 || v124 == *(_QWORD *)(v16 + 64) && v124 == *(_QWORD *)(v16 + 168) + v125)
    {
      TSWPDropCapLayoutState::TSWPDropCapLayoutState(&v488, 0, 0);
      TSWPLayoutChore::pSetupStateForDropCap((id *)v16, (id *)&v488);
      TSWPLineStylingLayoutState::TSWPLineStylingLayoutState(&v503, 0, 0);
      TSWPLayoutChore::pSetupStateForLineStyling((id *)v16, (id *)&v503);
      if (*((_QWORD *)&v491 + 1)
        || objc_msgSend(*(id *)(v16 + 264), "effectiveTypeForLevel:", *(_QWORD *)(v16 + 272)))
      {
        v126 = 0;
      }
      else
      {
        v232 = *(_QWORD *)(v16 + 80);
        v126 = v232 != *(_QWORD *)(v16 + 64) || v232 != *(_QWORD *)(v16 + 168) + *(_QWORD *)(v16 + 160);
      }
      if (*(_QWORD *)(v16 + 920))
      {
        TSWPDropCapLayoutState::updateWithEndOfParagraph(v474, v554, v126);
        v554 = v127;
        if (!v117)
        {
          isSatifyingRequirements = TSWPDropCapLayoutState::isSatifyingRequirements(v474);
          if (isSatifyingRequirements)
          {
            if (v554 >= v465 + -1.0
              || (v128 = *(_QWORD *)(v16 + 80), v128 >= *(_QWORD *)(v16 + 40))
              && v128 < *(_QWORD *)(v16 + 64)
              && *(_QWORD *)(v16 + 88) >= *(_QWORD *)(v16 + 48))
            {
              TSWPDropCapLayoutState::updateWithEndOfColumn((uint64_t)v474);
            }
          }
          isConflictingWithEndOfColumn = TSWPDropCapLayoutState::isConflictingWithEndOfColumn(v474);
        }
      }
      if (*(_QWORD *)(v16 + 1984))
        *(_BYTE *)(v16 + 1992) |= 1u;
      if (!v117 && !isConflictingWithEndOfColumn && isSatifyingRequirements)
      {
        TSWPDropCapCTState::clear((TSWPDropCapCTState *)(v16 + 872));
        TSWPLineStylingCTState::clear((id *)(v16 + 1936));
        if (!v126 || TSWPDropCapLayoutState::canFinalize(v474))
        {
          *(double *)(v16 + 752) = ceil(TSWPDropCapLayoutState::dropCapBottom(v474));
          TSWPDropCapLayoutState::operator=((uint64_t)v474, (uint64_t)&v488);
          TSWPLayoutState::operator=(v538, v482);
          v540 = v554;

          v541 = 0;
          v541 = (id)-[NSMutableArray copy](v464, "copy");
        }
        if (TSWPLineStylingLayoutState::canFinalize(v444))
          TSWPLineStylingLayoutState::operator=((uint64_t)v444, (uint64_t)&v503);
      }
      TSWPLineStylingLayoutState::~TSWPLineStylingLayoutState((TSWPLineStylingLayoutState *)&v503);
      TSWPDropCapLayoutState::~TSWPDropCapLayoutState((TSWPDropCapLayoutState *)&v488);
    }
    if (v117 || !isSatifyingRequirements || isConflictingWithEndOfColumn)
    {
      v132 = TSWPLineFragmentArray::count(v555);
      v563.location = *(_QWORD *)(v16 + 1080);
      v133 = v132 - LODWORD(v563.location);
      v563.length = v132 - v563.location;
      TSWPLineFragmentArray::removeObjectsInRange(v555, v563);
      HIDWORD(v546.location) -= v133;
      LODWORD(v546.location) -= *(_DWORD *)(v16 + 1088);
      v554 = v540;
      if (v117)
      {
        TSWPDropCapLayoutState::prepareForLayoutIteration((uint64_t)v474);
        TSWPLineStylingLayoutState::prepareForLayoutIteration((uint64_t)v444);
        goto LABEL_201;
      }
      if (isSatifyingRequirements)
      {
        if (isConflictingWithEndOfColumn)
        {
          if ((TSWPDropCapLayoutState::shouldReduceRequirementsToKeepInCurrentColumn(v474) & 1) != 0)
            goto LABEL_200;
          v134 = (id)objc_msgSend(*(id *)(v16 + 184), "startCharIndex");
          if (v134 == v538[0])
            goto LABEL_200;
          v135 = 1;
LABEL_202:
          TSWPLayoutChore::pRestoreStateFromOldState((TSWPLayoutChore *)v16, v538);
          TSWPDropCapLayoutState::prepareForRelayout((void **)v474, (void *)objc_msgSend(*(id *)(v16 + 8), "textSourceForLayoutInRange:", *(_QWORD *)(v16 + 160), *(_QWORD *)(v16 + 168)));
          TSWPLineStylingLayoutState::prepareForRelayout((void **)v444, (void *)objc_msgSend(*(id *)(v16 + 8), "textSourceForLayoutInRange:", *(_QWORD *)(v16 + 160), *(_QWORD *)(v16 + 168)));

          v464 = (NSMutableArray *)objc_msgSend(v541, "mutableCopy");
          if (v135)
          {
            *(_QWORD *)(v16 + 40) = v431;
            goto LABEL_498;
          }
          goto LABEL_426;
        }
      }
      else
      {
LABEL_200:
        TSWPDropCapLayoutState::reduceRequirements(v474);
      }
LABEL_201:
      v135 = 0;
      goto LABEL_202;
    }
    v129 = *(_QWORD *)(v16 + 80);
    if (*(_DWORD *)(v16 + 1856))
    {
      v118 = v554;
      if (v554 >= v465 + -1.0
        || v129 >= *(_QWORD *)(v16 + 40)
        && v129 < *(_QWORD *)(v16 + 64)
        && *(_QWORD *)(v16 + 88) >= *(_QWORD *)(v16 + 48))
      {
        TSWPLineBalancingLayoutState::updateWithEndOfColumn(v439, v129, v554);
      }
      else
      {
        v130 = *(_QWORD *)(v16 + 160);
        if (v129 == v130)
        {
          LOBYTE(v131) = 1;
        }
        else
        {
          v131 = v129 == *(_QWORD *)(v16 + 64) && v129 == *(_QWORD *)(v16 + 168) + v130;
          if (v447 >= v114 && !v131)
          {
            if (v51)
              goto LABEL_428;
            TSWPLineBalancingLayoutState::forceCompletion((uint64_t)v439);
            goto LABEL_424;
          }
        }
        v243 = !v131;
        v244 = v447 < v114 && v243;
        TSWPLineBalancingLayoutState::updateWithEndOfParagraph(v439, v129, v244);
      }
LABEL_424:
      if (*(_DWORD *)(v16 + 1856))
      {
        TSWPLineBalancingLayoutState::restoreLocalState((uint64_t)v439, &v555, (_DWORD *)&v546.location + 1, &v546, &v554);
        TSWPLayoutChore::pRestoreStateFromOldState((TSWPLayoutChore *)v16, (id *)v439);
        TSWPLayoutChore::pSetupStateForDropCap((id *)v16, (id *)v474);
        TSWPLayoutChore::pSetupStateForLineStyling((id *)v16, (id *)v444);
LABEL_426:
        v115 = 18;
        goto LABEL_499;
      }
      v118 = *(double *)(v16 + 1832);
      v446 = v118;
      v129 = *(_QWORD *)(v16 + 80);
    }
LABEL_428:
    if (v129 == v549 + v548 && v527 && LODWORD(v546.location) == 1)
    {
      if ((v470 & 0x8000) != 0)
        v245 = *(_QWORD *)(v16 + 224) == *(_QWORD *)(v16 + 240) || v521 >= v546.length;
      else
        v245 = v521 >= v546.length;
      v246 = v245;
      if (((v246 | v416) & 1) == 0)
      {
        v247 = *(_DWORD *)(v16 + 56);
        if (v78 || v247 == 2)
          goto LABEL_441;
        if (TSWPLayoutChore::pPullDownWidowsFromPreviousColumn((TSWPLayoutChore *)v16, (TSWPLayoutState *)&v546.length))
        {
          v565 = *(_NSRange *)TSWPLineFragmentArray::objectAtIndex(v555, 0);
          TSWPLayoutChore::removeFootnotesInRange((id *)v16, v565);
          TSWPLineFragmentArray::removeAllObjects(v555);
          if (*(_DWORD *)(v16 + 56) >= 3u)
          {
            v266 = *(void **)(v16 + 184);
            if (v266)
              objc_msgSend(v266, "frameBounds");
            else
              v254 = 0;
          }
          else
          {
            v254 = 0xFFF0000000000000;
          }
          *(_QWORD *)(v16 + 400) = v254;
          v582.origin.x = x;
          v582.origin.y = y;
          v582.size.width = width;
          v582.size.height = rect;
          v442 = CGRectGetMinY(v582) + v425;
          v554 = v442;
          v583.origin.x = x;
          v583.origin.y = y;
          v583.size.width = width;
          v583.size.height = rect;
          v329 = CGRectGetMinY(v583);
          v330 = v437;
          if ((v463 & 1) == 0)
          {
            v584.origin.x = x;
            v584.origin.y = y;
            v584.size.width = width;
            v584.size.height = rect;
            v330 = CGRectGetHeight(v584);
          }
          v546.location = 0;
          TSWPLayoutState::operator=((id *)&v546.length, v482);
          TSWPDropCapLayoutState::clear((id *)v474);
          TSWPLayoutState::operator=(v538, v482);
          v540 = v554;

          v541 = 0;
          v541 = (id)-[NSMutableArray copy](v464, "copy");
          TSWPLayoutChore::pSetupStateForDropCap((id *)v16, (id *)v474);
          v465 = v329 + v330;
          v115 = 18;
          v416 = 1;
          v426 = 0.0;
          v427 = 0.0;
          goto LABEL_499;
        }
        v416 = 0;
      }
    }
    v247 = *(_DWORD *)(v16 + 56);
LABEL_441:
    if (v247)
    {
      if (v247 != 3)
        goto LABEL_445;
      if (TSWPLayoutChore::pIsLastColumn((id *)v16))
      {
        v247 = *(_DWORD *)(v16 + 56);
LABEL_445:
        v248 = v545;
        if (v247 != 2 || v545 != 6)
          goto LABEL_458;
        goto LABEL_457;
      }
    }
    if (*(_QWORD *)(v16 + 80) != *(_QWORD *)(v16 + 160))
    {
      v248 = v545;
LABEL_452:
      if ((_DWORD)v248 != 4)
        goto LABEL_454;
      goto LABEL_453;
    }
    v248 = v545;
    if (!*(_BYTE *)(v16 + 464))
      goto LABEL_452;
LABEL_453:
    v421 = 1;
    v543 = 1;
LABEL_454:
    if (!v544 && (v248 > 0xF || ((1 << v248) & 0x9070) == 0))
    {
      if ((*(_BYTE *)(v16 + 32) & 1) == 0)
        goto LABEL_458;
      v265 = IsParagraphBreakingCharacter(v248) ^ 1;
      if ((_DWORD)v248 == 11)
        LOBYTE(v265) = 1;
      if ((v265 & 1) != 0)
        goto LABEL_458;
    }
LABEL_457:
    v543 = 1;
LABEL_458:
    v249 = v459;
    if ((v459 & (v102 != 0)) != 0)
      v249 = 0;
    v459 = v249;
    if (*v482 == v450)
    {
      v115 = v452;
      if ((_DWORD)v248 == 65532 && (Object = TSWPLineFragmentArray::lastObject(v555)) != 0)
        v251 = *(_BYTE *)(Object + 25) & 1;
      else
        v251 = 0;
      if (v543)
      {
        v459 = 0;
      }
      else
      {
        v252 = IsParagraphBreakingCharacter(v248);
        if ((_DWORD)v248 == 8232)
          v253 = 1;
        else
          v253 = v252;
        if (((v251 | v253) & 1) != 0)
          v459 = 1;
        else
          v459 = TSWPLayoutChore::pContainsOnlyOneAnchoredDrawable(v252, &v555);
      }
    }
    else
    {
      v115 = v452;
    }
    if (v475 != 0x7FFFFFFFFFFFFFFFLL)
    {
      if (!v115)
        goto LABEL_499;
      if (!*(_DWORD *)(v16 + 56))
        goto LABEL_498;
LABEL_491:
      if (TSWPLayoutChore::pIsLastColumn((id *)v16))
      {
        v255 = (v459 & 1) == 0 && *(_QWORD *)(v16 + 80) >= *(_QWORD *)(v16 + 64);
        v256 = v441;
        if (!v255)
          v256 = v441 | 2;
        v441 = v256;
      }
      goto LABEL_498;
    }
    if ((v115 & 1) != 0 || (v118 = v554, v554 >= v465 + -1.0))
    {
      if (!HIDWORD(v546.location) && !v542 && -[NSMutableArray count](v464, "count", v118))
      {
        v115 = 0;
        v554 = v465 + -1.0;
        v470 |= 0x2000u;
        goto LABEL_499;
      }
      if (!*(_DWORD *)(v16 + 56))
        goto LABEL_498;
      goto LABEL_491;
    }
    v115 = 0;
LABEL_499:
    v257 = (std::__shared_weak_count *)*((_QWORD *)&v517 + 1);
    if (*((_QWORD *)&v517 + 1))
    {
      v258 = (unint64_t *)(*((_QWORD *)&v517 + 1) + 8);
      do
        v259 = __ldaxr(v258);
      while (__stlxr(v259 - 1, v258));
      if (!v259)
      {
        ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
        std::__shared_weak_count::__release_weak(v257);
      }
    }
    TSWPLayoutState::~TSWPLayoutState((TSWPLayoutState *)&v518);
  }
  while (v115 != 17
       && ((v471 & 1) != 0
        || !HIDWORD(v546.location)
        || (v459 & 1) != 0
        || !v543 && (!v457 || *(_DWORD *)(v16 + 1856)) && *v482 < v450));
  v331 = v441;
  if (*(_QWORD *)(v16 + 720)
    || (!*(_DWORD *)(v16 + 56) ? (v332 = 0) : (v332 = TSWPLayoutChore::pIsLastColumn((id *)v16)),
        v544
     || v545 <= 0xFu && ((1 << v545) & 0x9070) != 0
     || !HIDWORD(v546.location)
     || (*(_DWORD *)(v16 + 56) == 2 ? (v391 = 1) : (v391 = v332),
         (v391 & 1) != 0
      || (v334 = TSWPLayoutChore::pHandleOrphanAndKeepTogether(v16, &v555, &v545, &v544, v546.length, x, y, width, rect),
          v334 == 0x7FFFFFFFFFFFFFFFLL))))
  {
    v333 = (char *)*v482;
    v334 = (uint64_t)*v482;
  }
  else
  {
    v333 = (char *)*v482;
  }
  objc_msgSend(*(id *)(v16 + 184), "setCharacterCount:", &v333[-objc_msgSend(*(id *)(v16 + 184), "startCharIndex")]);
  objc_msgSend(*(id *)(v16 + 184), "setNextWidowPullsDownFromCharIndex:", v334);
  TSWPLayoutChore::pAdjustTrailingSpaceAfter(v16, &v555);
  v335 = *(_QWORD *)(v16 + 88);
  v336 = v335;
  if ((v470 & 0x8000) != 0)
  {
    if (v335 >= *(_QWORD *)(v16 + 48))
      v336 = *(_QWORD *)(v16 + 48);
    else
      v336 = *(_QWORD *)(v16 + 88);
  }
  v337 = v547;
  if (v335 < v547)
  {
    v338 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v339 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "BOOL TSWPLayoutChore::pLayoutColumnWithOldLines(TSWPLayoutFlags, CGFloat, CGSize, CGSize, NSMutableArray *, unichar *, BOOL *, TSWPLineFragmentArray *)");
    objc_msgSend(v338, "handleFailureInFunction:file:lineNumber:description:", v339, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 3275, CFSTR("about to set an unsigned integer to a very large number"));
    v337 = v547;
  }
  objc_msgSend(*(id *)(v16 + 184), "setAnchoredCharCount:", v336 - v337);
  TSWPLayoutChore::pPostProcessAttachments(v16, (TSWPLineFragment ****)&v555);
  objc_msgSend(*(id *)(v16 + 184), "frameBounds");
  fixSpaceAfterForParagraphBorder((uint64_t)v482, &v555, v340, v341, v342, v343);
  v344 = (_QWORD *)TSWPLineFragmentArray::lastObject(v555);
  if (*(_BYTE *)(v16 + 414))
  {
    v345 = *(_QWORD *)(v16 + 80);
    v346 = objc_msgSend(*(id *)(v16 + 8), "selectionRangeForCharIndex:", v345);
    if (v345 < v346 + v347)
    {
      if (objc_msgSend((id)objc_msgSend(*(id *)(v16 + 2056), "columns"), "count") != 1)
      {
        v348 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
        v349 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "BOOL TSWPLayoutChore::pLayoutColumnWithOldLines(TSWPLayoutFlags, CGFloat, CGSize, CGSize, NSMutableArray *, unichar *, BOOL *, TSWPLineFragmentArray *)");
        objc_msgSend(v348, "handleFailureInFunction:file:lineNumber:description:", v349, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 3286, CFSTR("Truncation is only supported for exactly one column."));
      }
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        objc_msgSend(*(id *)(v16 + 2056), "reservedWidthWhenTruncating");
        *(_QWORD *)(v16 + 416) = v350;
      }
      if (LODWORD(v546.location))
      {
        TSWPCoreTextTypesetter::endParagraphLayout(*(TSWPCoreTextTypesetter **)(v16 + 2024));
        TSWPLayoutState::TSWPLayoutState((TSWPLayoutState *)v559, (const TSWPLayoutState *)v482);
        v518 = v16 + 872;
        v519 = v16 + 1936;
        v351 = *(double *)v344;
        v352 = objc_msgSend(*(id *)(v16 + 8), "paragraphIndexAtCharIndex:", *v344);
        v559[0] = v351;
        v353 = *(void **)(v16 + 8);
        v354 = objc_msgSend(*(id *)(v16 + 24), "styleProvider");
        if (v353)
          objc_msgSend(v353, "paragraphEnumeratorAtParIndex:styleProvider:", v352, v354);
        else
          memset(v558, 0, 56);
        v561[0] = *(TSWPParagraphEnumerator *)v558;
        TSWPParagraphEnumerator::~TSWPParagraphEnumerator((TSWPParagraphEnumerator *)v558);
        TSWPLayoutChore::pSetupStateForParagraphIndex((TSWPLayoutChore *)v16, (TSWPLayoutState *)v559);
        v355 = *(TSWPCoreTextTypesetter **)(v16 + 2024);
        v356 = *MEMORY[0x24BDBF148];
        v357 = *(double *)(MEMORY[0x24BDBF148] + 8);
        TSWPTopicNumberHints::TSWPTopicNumberHints(v558, objc_msgSend(*(id *)(v16 + 24), "styleProvider"));
        v358 = TSWPParagraphEnumerator::relevantParagraphIndex(v561);
        TSWPCoreTextTypesetter::beginParagraphLayout(v355, (uint64_t)v559, (uint64_t)v558, (uint64_t *)&v518, v358, v356, v357);
        TSWPTopicNumberHints::~TSWPTopicNumberHints((TSWPTopicNumberHints *)v558);
        TSWPCoreTextTypesetter::truncateLineFragment(*(_QWORD *)(v16 + 2024), (uint64_t)v559, (TSWPLineFragment *)v344, objc_msgSend(*(id *)(v16 + 2056), "autosizeFlags"), v470);
        v359 = *(double *)(v16 + 632);
        if (v359 < *((double *)v344 + 27))
          v359 = *((double *)v344 + 27);
        *(double *)(v16 + 632) = v359;
        TSWPLayoutState::~TSWPLayoutState((TSWPLayoutState *)v559);
      }
      v331 = v441 | 2;
    }
  }
  if (v344)
    v360 = *((double *)v344 + 4) + *((double *)v344 + 5) + *((double *)v344 + 17);
  else
    v360 = 0.0;
  v361 = fmax(v360, fmax(v427, v426));
  v362 = *(NSUInteger ***)v555;
  v363 = (NSUInteger **)*((_QWORD *)v555 + 1);
  if (*(NSUInteger ***)v555 != v363)
  {
    v364 = fmax(v361, v417);
    do
    {
      v365 = *v362;
      if (*((double *)*v362 + 4) + *((double *)*v362 + 5) != *((double *)v344 + 4) + *((double *)v344 + 5))
        break;
      if (CGRectGetMaxY(*(CGRect *)(v365 + 10)) < v364)
        *((double *)v365 + 13) = v364 - CGRectGetMinY(*(CGRect *)(v365 + 10));
      v362 += 2;
    }
    while (v362 != v363);
    for (j = *(NSUInteger ***)v555; j != *((NSUInteger ***)v555 + 1); j += 2)
    {
      if ((*((_BYTE *)*j + 26) & 0x10) != 0)
      {
        v331 = v331 | 0x80;
        break;
      }
    }
  }
  objc_msgSend(*(id *)(v16 + 184), "setContentBottom:", v361);
  objc_msgSend(*(id *)(v16 + 184), "setLayoutResultFlags:", v331);
  if (v442 >= *(double *)(v16 + 752))
    v367 = v442;
  else
    v367 = *(double *)(v16 + 752);
  if (*(_QWORD *)(v16 + 920))
  {
    v368 = ceil(TSWPDropCapLayoutState::dropCapBottom(v474));
    if (v367 < v368)
      v367 = v368;
  }
  v585.origin.x = x;
  v585.origin.y = y;
  v585.size.width = width;
  v585.size.height = rect;
  v369 = CGRectGetMinY(v585);
  v370 = v427;
  if (v427 < v426)
    v370 = v426;
  if (v367 >= v370)
    v370 = v367;
  v371 = v370 - v369;
  if (v437 >= v371)
    v372 = v371;
  else
    v372 = v437;
  objc_msgSend(*(id *)(v16 + 2056), "minSize");
  v374 = v373;
  v376 = v375;
  v377 = *(void **)(v16 + 192);
  if (v377)
  {
    objc_msgSend(v377, "adjustedInsets");
  }
  else
  {
    v378 = *MEMORY[0x24BDBF148];
    v379 = *(double *)(MEMORY[0x24BDBF148] + 8);
  }
  v380 = v378 + v378;
  if (v374 < v380)
    v380 = v374;
  v381 = v379 + v379;
  if (v376 < v381)
    v381 = v376;
  if ((v463 & 1) != 0 && rect < v372 || (v382 = 0, (v463 & 2) != 0) && rect > v372)
  {
    rect = fmax(v376 - v381, v372);
    v382 = 1;
  }
  if ((v463 & 4) == 0)
  {
    v387 = 0;
    goto LABEL_733;
  }
  v383 = v374 - v380;
  v384 = fmin(*(double *)(v16 + 632) + 1.0, v435);
  if (width < v384)
    goto LABEL_705;
  if ((v463 & 8) != 0)
  {
    v385 = width;
    if (width > v384)
LABEL_705:
      v385 = v384;
  }
  else
  {
    v385 = width;
  }
  v386 = fmax(v383, v385);
  v387 = v386 != width;
  v586.origin.x = x;
  v586.origin.y = y;
  v586.size.width = v386;
  v586.size.height = rect;
  if (CGRectGetWidth(v586) <= v383
    || (objc_opt_respondsToSelector() & 1) == 0
    || !objc_msgSend(*(id *)(v16 + 2056), "adjustColumnOriginForAlignment"))
  {
    goto LABEL_732;
  }
  v388 = TSWPLineFragmentArray::objectAtIndex(v555, 0);
  v389 = objc_msgSend((id)TSWPLayoutChore::pGetParagraphStyleAtCharIndex((TSWPLayoutChore *)v16, *(_QWORD *)v388), "intValueForProperty:", 86);
  if (*(_QWORD *)(v16 + 2056) && v389 == 4)
    v389 = objc_msgSend(*(id *)(v16 + 2056), "naturalAlignment");
  if (v389 == 1)
  {
LABEL_716:
    v390 = v383 - v384;
LABEL_730:
    if (v390 == 0.0)
      goto LABEL_732;
    v587.origin.x = x;
    v587.origin.y = y;
    v587.size.width = v386;
    v587.size.height = rect;
    v588 = CGRectOffset(v587, v390, 0.0);
    y = v588.origin.y;
    rect = v588.size.height;
    x = v588.origin.x;
    width = v588.size.width;
    *(CGRect *)(v388 + 48) = CGRectOffset(*(CGRect *)(v388 + 48), v390, 0.0);
    *(CGRect *)(v388 + 80) = CGRectOffset(*(CGRect *)(v388 + 80), v390, 0.0);
    goto LABEL_734;
  }
  if (v389 == 2)
  {
    v390 = (v383 - v384) * 0.5;
    goto LABEL_730;
  }
  if (v389 == 4
    && TSWPLayoutChore::pParagraphRunsRightToLeftAtCharIndex((TSWPLayoutChore *)v16, *(_QWORD *)v388))
  {
    goto LABEL_716;
  }
LABEL_732:
  width = v386;
LABEL_733:
  if ((v382 | v387) == 1)
LABEL_734:
    objc_msgSend(*(id *)(v16 + 184), "setWpBounds:", x, y, width, rect);
  else
    v387 = 0;
  if ((v470 & 0x10000) == 0)
  {
    if (v387 | ((v463 & 4) >> 2))
    {
      v393 = *(NSUInteger ***)v555;
      v394 = (NSUInteger **)*((_QWORD *)v555 + 1);
      if (*(NSUInteger ***)v555 != v394)
      {
        do
        {
          v395 = *v393;
          v396 = objc_msgSend((id)TSWPLayoutChore::pGetParagraphStyleAtCharIndex((TSWPLayoutChore *)v16, **v393), "intValueForProperty:", 86);
          v397 = *(void **)(v16 + 2056);
          if (v397)
            v398 = v396 == 4;
          else
            v398 = 0;
          if (v398)
            v396 = objc_msgSend(v397, "naturalAlignment");
          if (v396 == 4)
            v396 = TSWPLayoutChore::pParagraphRunsRightToLeftAtCharIndex((TSWPLayoutChore *)v16, *v395);
          if ((*((_BYTE *)v395 + 26) & 0x40) != 0)
          {
            if (v387)
            {
              v399 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
              v400 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "BOOL TSWPLayoutChore::pLayoutColumnWithOldLines(TSWPLayoutFlags, CGFloat, CGSize, CGSize, NSMutableArray *, unichar *, BOOL *, TSWPLineFragmentArray *)");
              objc_msgSend(v399, "handleFailureInFunction:file:lineNumber:description:", v400, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 3478, CFSTR("Should not be reusing line fragments when the width changes."));
            }
          }
          else
          {
            TSWPLineFragment::adjustGlyphsForAlignment((uint64_t)v395, v396, width);
          }
          v393 += 2;
        }
        while (v393 != v394);
      }
    }
  }
  objc_msgSend(*(id *)(v16 + 184), "setLineFragmentArray:", &v555);
  v30 = v421;
  v401 = v545;
  v402 = IsParagraphBreakingCharacter(v545);
  if (v401 == 8232)
    v403 = 1;
  else
    v403 = v402;
  v404 = v544;
  v405 = v403 == 0;
  if (v403)
    v406 = v401;
  else
    v406 = 0;
  if (v405)
    v404 = 0;
  *v424 = v406;
  *v419 = v404;
  if (*(_DWORD *)(v16 + 56) == 5)
  {
    objc_msgSend(*(id *)(v16 + 184), "wpBounds");
    if (v407 >= 50000.0)
    {
      v408 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
      v409 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "BOOL TSWPLayoutChore::pLayoutColumnWithOldLines(TSWPLayoutFlags, CGFloat, CGSize, CGSize, NSMutableArray *, unichar *, BOOL *, TSWPLineFragmentArray *)");
      objc_msgSend(v408, "handleFailureInFunction:file:lineNumber:description:", v409, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 3505, CFSTR("Cell height exceeds reasonable bounds."));
    }
  }

  v541 = 0;
  TSWPLayoutState::~TSWPLayoutState((TSWPLayoutState *)v538);
  TSWPLayoutState::~TSWPLayoutState((TSWPLayoutState *)&v546.length);
LABEL_765:
  v410 = v556;
  if (v556)
  {
    v411 = (unint64_t *)&v556->__shared_owners_;
    do
      v412 = __ldaxr(v411);
    while (__stlxr(v412 - 1, v411));
    if (!v412)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v410->__on_zero_shared)(v410, v24);
      std::__shared_weak_count::__release_weak(v410);
    }
  }
  return v30 & 1;
}

void sub_21790B3C4(_Unwind_Exception *a1)
{
  TSWPLayoutState::~TSWPLayoutState((TSWPLayoutState *)&STACK[0xE90]);
  TSWPLayoutState::~TSWPLayoutState((TSWPLayoutState *)&STACK[0x1160]);
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)&STACK[0x1460]);
  _Unwind_Resume(a1);
}

uint64_t TSWPLineFragmentArray::objectAtIndex(TSWPLineFragmentArray *this, unint64_t a2)
{
  if (a2 >= (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)this + 16 * a2);
}

uint64_t TSWPLayoutChore::pPushLayoutState(TSWPLayoutChore *this, const TSWPLayoutState *a2)
{
  TSWPLayoutState *v4;
  void *v5;
  uint64_t v6;
  uint64_t result;

  v4 = (TSWPLayoutState *)*((_QWORD *)this + 251);
  if (0x82FA0BE82FA0BE83 * (((uint64_t)v4 - *((_QWORD *)this + 250)) >> 4) < 6
    || (v5 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler"),
        v6 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSWPLayoutChore::pPushLayoutState(const TSWPLayoutState &)"), result = objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 743, CFSTR("Too many layoutStates pushed")), v4 = (TSWPLayoutState *)*((_QWORD *)this + 251), 0x82FA0BE82FA0BE83 * (((uint64_t)v4 - *((_QWORD *)this + 250)) >> 4) <= 5))
  {
    if ((unint64_t)v4 >= *((_QWORD *)this + 252))
    {
      result = std::vector<TSWPLayoutState>::__push_back_slow_path<TSWPLayoutState const&>((uint64_t *)this + 250, a2);
    }
    else
    {
      TSWPLayoutState::TSWPLayoutState(v4, a2);
      result = (uint64_t)v4 + 688;
      *((_QWORD *)this + 251) = (char *)v4 + 688;
    }
    *((_QWORD *)this + 251) = result;
  }
  return result;
}

void sub_21790B75C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 2008) = v2;
  _Unwind_Resume(a1);
}

void TSWPLayoutChore::pPopLayoutState(TSWPLayoutChore *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  uint64_t v11;

  TSWPParagraphEnumerator::TSWPParagraphEnumerator((TSWPParagraphEnumerator *)(a2 + 24));
  bzero((void *)a2, 0x2B0uLL);
  v4 = *((_QWORD *)this + 250);
  v5 = *((_QWORD *)this + 251) - v4;
  if (v5)
  {
    v6 = 0x82FA0BE82FA0BE83 * (v5 >> 4);
    TSWPLayoutState::operator=((id *)a2, (id *)(v4 + 16 * (v5 >> 4) - 688));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,TSWPLayoutState *,TSWPLayoutState *,TSWPLayoutState *,0>((id *)(*((_QWORD *)this + 250) + 688 * v6), *((id **)this + 251), (id *)(*((_QWORD *)this + 250) + 688 * v6 - 688));
    v8 = v7;
    for (i = *((_QWORD *)this + 251); i != v8; TSWPLayoutState::~TSWPLayoutState((TSWPLayoutState *)(i - 688)))
      ;
    *((_QWORD *)this + 251) = v8;
  }
  else
  {
    v10 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v11 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "const TSWPLayoutState TSWPLayoutChore::pPopLayoutState()");
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLayoutChore.mm"), 754, CFSTR("Too many layoutStates popped"));
    TSWPLayoutState::operator=((id *)a2, (id *)this + 10);
  }
}

void sub_21790B880(_Unwind_Exception *a1)
{
  TSWPLayoutState *v1;

  TSWPLayoutState::~TSWPLayoutState(v1);
  _Unwind_Resume(a1);
}

id *TSWPLayoutState::operator=(id *a1, id *a2)
{
  id v4;
  id v5;

  if (a2 != a1)
  {
    v4 = a2[85];

    memcpy(a1, a2, 0x2B0uLL);
    v5 = a1[85];

  }
  return a1;
}

uint64_t TSWPDropCapLayoutState::impactsFragments(TSWPDropCapLayoutState *this, CGFloat a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 7);
  if (v2)
  {
    if ((*((_BYTE *)this + 240) & 1) != 0)
      goto LABEL_5;
    if (*((_QWORD *)this + 28) < (unint64_t)(v2 - *((_QWORD *)this + 8)))
      return 1;
    if ((*((_BYTE *)this + 96) & 8) == 0)
    {
LABEL_5:
      v3 = *((_QWORD *)this + 31);
      if (v3 && CGRectGetMaxY(*(CGRect *)(v3 + 48)) > a2)
        return 1;
    }
  }
  return 0;
}

uint64_t std::vector<TSWPLayoutState>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<TSWPLayoutState>,std::reverse_iterator<TSWPLayoutState*>,std::reverse_iterator<TSWPLayoutState*>,std::reverse_iterator<TSWPLayoutState*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__shared_ptr_pointer<TSWPLineFragmentArray *,std::shared_ptr<TSWPLineFragmentArray>::__shared_ptr_default_delete<TSWPLineFragmentArray,TSWPLineFragmentArray>,std::allocator<TSWPLineFragmentArray>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<TSWPLineFragmentArray>::operator()[abi:ne180100](a1 + 24, *(void ***)(a1 + 24));
}

double TSWPLineFragment::calculateOffsetForNextLine(uint64_t a1, int a2, double a3)
{
  return TSWPLineFragmentCalculateOffsetForNextLine((double *)(a1 + 112), *(_DWORD *)(a1 + 24), a2, a3);
}

void TSWPLineBalancingLayoutState::updateWithNewLineAdded(uint64_t a1, TSWPLineFragmentArray **a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  _QWORD *v8;
  double v9;
  char v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  const __CTLine *v16;
  double v17;
  double v18;
  double v19;
  double *v20;
  unint64_t v21;
  double *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  double *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  double *v38;
  char *v39;
  uint64_t v40;

  if (*(_DWORD *)(a1 + 728))
  {
    v4 = TSWPLineFragmentArray::count(*a2);
    v5 = *(unsigned int *)(a1 + 732);
    if (v4 == v5)
    {
      v6 = *(char **)(a1 + 744);
      v7 = *(_QWORD *)(a1 + 752);
      if ((unint64_t)v6 < v7)
      {
        *(_QWORD *)v6 = 0;
        v8 = v6 + 8;
LABEL_48:
        *(_QWORD *)(a1 + 744) = v8;
        return;
      }
      v23 = *(char **)(a1 + 736);
      v24 = (v6 - v23) >> 3;
      v25 = v24 + 1;
      if (!((unint64_t)(v24 + 1) >> 61))
      {
        v26 = v7 - (_QWORD)v23;
        if (v26 >> 2 > v25)
          v25 = v26 >> 2;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
          v27 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        if (v27)
        {
          v28 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>(a1 + 752, v27);
          v6 = *(char **)(a1 + 744);
          v23 = *(char **)(a1 + 736);
        }
        else
        {
          v28 = 0;
        }
        v35 = &v28[8 * v24];
        v36 = &v28[8 * v27];
        *(_QWORD *)v35 = 0;
        v8 = v35 + 8;
        while (v6 != v23)
        {
          v37 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v35 - 1) = v37;
          v35 -= 8;
        }
        *(_QWORD *)(a1 + 736) = v35;
        *(_QWORD *)(a1 + 744) = v8;
        *(_QWORD *)(a1 + 752) = v36;
        if (v23)
          operator delete(v23);
        goto LABEL_48;
      }
LABEL_57:
      abort();
    }
    v9 = 0.0;
    if (TSWPLineFragmentArray::count(*a2) > v5)
    {
      v10 = 0;
      v11 = 0.0;
      do
      {
        v12 = TSWPLineFragmentArray::objectAtIndex(*a2, v5);
        v13 = *(_QWORD *)(v12 + 192);
        v14 = *(_QWORD *)(v12 + 200);
        while (v13 != v14)
        {
          v15 = *(double *)(v13 + 8);
          v16 = *(const __CTLine **)v13;
          v13 += 48;
          v17 = v15 + CTLineGetTypographicBounds(v16, 0, 0, 0);
          if (v15 >= v11)
            v18 = v11;
          else
            v18 = v15;
          if (v9 >= v17)
            v19 = v9;
          else
            v19 = v17;
          if ((v10 & 1) != 0)
            v11 = v18;
          else
            v11 = v15;
          if ((v10 & 1) != 0)
            v9 = v19;
          else
            v9 = v17;
          v10 = 1;
        }
        v5 = (v5 + 1);
      }
      while (TSWPLineFragmentArray::count(*a2) > v5);
      v9 = v9 - v11;
    }
    v20 = *(double **)(a1 + 744);
    v21 = *(_QWORD *)(a1 + 752);
    if ((unint64_t)v20 >= v21)
    {
      v29 = *(double **)(a1 + 736);
      v30 = v20 - v29;
      v31 = v30 + 1;
      if ((unint64_t)(v30 + 1) >> 61)
        goto LABEL_57;
      v32 = v21 - (_QWORD)v29;
      if (v32 >> 2 > v31)
        v31 = v32 >> 2;
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
        v33 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v33 = v31;
      if (v33)
      {
        v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>(a1 + 752, v33);
        v20 = *(double **)(a1 + 744);
        v29 = *(double **)(a1 + 736);
      }
      else
      {
        v34 = 0;
      }
      v38 = (double *)&v34[8 * v30];
      v39 = &v34[8 * v33];
      *v38 = v9;
      v22 = v38 + 1;
      while (v20 != v29)
      {
        v40 = *((_QWORD *)v20-- - 1);
        *((_QWORD *)v38-- - 1) = v40;
      }
      *(_QWORD *)(a1 + 736) = v38;
      *(_QWORD *)(a1 + 744) = v22;
      *(_QWORD *)(a1 + 752) = v39;
      if (v29)
        operator delete(v29);
    }
    else
    {
      *v20 = v9;
      v22 = v20 + 1;
    }
    *(_QWORD *)(a1 + 744) = v22;
    *(_DWORD *)(a1 + 732) = TSWPLineFragmentArray::count(*a2);
  }
}

_QWORD *TSWPLineStylingLayoutState::updateWithNewLineAdded(_QWORD *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = this[7];
  v3 = this[6] + 1;
  this[6] = v3;
  if (v3 == v2)
  {
    v4 = this[3];
    if (v4 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v5 = a2 - v4;
      if (v5 < this[5])
        this[5] = v5;
    }
  }
  return this;
}

uint64_t TSWPDropCapLayoutState::updateWithBaselineOffset(uint64_t this, double a2)
{
  double v2;
  uint64_t v3;

  if (*(_QWORD *)(this + 56) >= 2uLL && (*(_BYTE *)(this + 240) & 1) == 0 && !*(_QWORD *)(this + 224))
  {
    v2 = *(double *)(this + 176);
    if (v2 != a2)
    {
      v3 = *(_QWORD *)(this + 248);
      if (v3)
      {
        *(double *)(v3 + 40) = *(double *)(v3 + 40) - (a2 - v2);
        *(double *)(this + 176) = a2;
      }
    }
  }
  return this;
}

void TSWPDropCapLayoutState::updateWithNewLineAdded(uint64_t a1, TSWPLineFragmentArray **a2, unint64_t a3, unint64_t a4, CGFloat a5, CGFloat a6)
{
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double MaxX;
  unint64_t v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  ++*(_QWORD *)(a1 + 224);
  if (!*(_QWORD *)(a1 + 248))
    return;
  v12 = TSWPLineFragmentArray::objectAtIndex(*a2, a3);
  v13 = *(double *)(v12 + 32);
  v14 = *(double *)(v12 + 40);
  v15 = *(_QWORD *)(v12 + 48);
  v16 = *(_QWORD *)(v12 + 56);
  v17 = *(_QWORD *)(v12 + 64);
  v18 = *(_QWORD *)(v12 + 72);
  if ((*(_BYTE *)(v12 + 25) & 0x10) != 0)
    MaxX = CGRectGetMaxX(*(CGRect *)&v15);
  else
    MaxX = CGRectGetMinX(*(CGRect *)&v15);
  v20 = *(_QWORD *)(a1 + 224);
  if (v20 == 1)
  {
    *(double *)(a1 + 168) = MaxX;
    *(_BYTE *)(a1 + 240) &= ~8u;
    v21 = *(double *)(v12 + 168);
    if (a4 >= 2)
    {
      v22 = a3 + a4;
      v23 = a3 + 1;
      if (v23 < v22)
      {
        v24 = a4 - 1;
        do
        {
          v21 = fmax(v21, *(double *)(TSWPLineFragmentArray::objectAtIndex(*a2, v23++) + 168));
          --v24;
        }
        while (v24);
      }
    }
    *(double *)(a1 + 160) = v21;
  }
  else if (v20 <= *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 64)
         && vabdd_f64(MaxX, *(double *)(a1 + 168)) >= 0.00999999978)
  {
    *(_BYTE *)(a1 + 240) |= 8u;
  }
  if ((*(_BYTE *)(a1 + 240) & 1) == 0)
  {
    v25 = *(_QWORD *)(a1 + 224);
    v26 = *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 64);
    if (v25 == v26 || v25 >= v26 && CGRectGetMaxY(*(CGRect *)(*(_QWORD *)(a1 + 248) + 48)) > a5)
    {
      v27 = a6 - CGRectGetMinY(*(CGRect *)(*(_QWORD *)(a1 + 248) + 48));
      if (v27 <= 0.0 || v27 <= CGRectGetHeight(*(CGRect *)(*(_QWORD *)(a1 + 248) + 48)))
      {
        if (v25 != v26)
          goto LABEL_26;
        v28 = *(_QWORD *)(a1 + 248);
      }
      else
      {
        v28 = *(_QWORD *)(a1 + 248);
        *(double *)(v28 + 104) = *(double *)(v28 + 104) + v27 - *(double *)(v28 + 72);
        *(double *)(v28 + 72) = v27;
        if (v25 != v26)
          goto LABEL_26;
      }
      *(double *)(a1 + 128) = v13 + v14 - (*(double *)(a1 + 112) - *(double *)(a1 + 192));
      *(double *)(a1 + 144) = ceil(CGRectGetMaxY(*(CGRect *)(v28 + 48)));
    }
  }
LABEL_26:
  if (CGRectGetMaxY(*(CGRect *)(*(_QWORD *)(a1 + 248) + 48)) <= a6 && *(_QWORD *)(a1 + 232) == 0x7FFFFFFFFFFFFFFFLL)
    *(_QWORD *)(a1 + 232) = 0;
  if (CGRectGetMaxY(*(CGRect *)(*(_QWORD *)(a1 + 248) + 48)) <= a5)
  {
    v29 = *(_QWORD *)(a1 + 232);
    if (v29 == 0x7FFFFFFFFFFFFFFFLL)
      v30 = 1;
    else
      v30 = v29 + 1;
    *(_QWORD *)(a1 + 232) = v30;
  }
}

TSWPLineFragmentArray *TSWPLineFragmentArray::incrementLogicalLineCount(TSWPLineFragmentArray *this)
{
  ++*((_WORD *)this + 12);
  return this;
}

uint64_t TSWPLineFragmentArray::appendObject(int64x2_t *a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  _QWORD *v19;
  char *v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  int64x2_t v26;
  uint64_t v27;
  int64x2_t *v28;

  v3 = *a2;
  v4 = *(_QWORD *)a2;
  *(_WORD *)(*(_QWORD *)a2 + 552) = a1[1].i16[4];
  if (*((_QWORD *)&v3 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v3 + 1) + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = (uint64_t)a1[1].i64;
  v8 = a1[1].u64[0];
  v9 = (_QWORD *)a1->i64[1];
  if ((unint64_t)v9 >= v8)
  {
    v24 = v3;
    v11 = ((uint64_t)v9 - a1->i64[0]) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    v13 = v8 - a1->i64[0];
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    v28 = a1 + 1;
    v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>(result, v14);
    v17 = &v15[16 * v11];
    *(_OWORD *)v17 = v24;
    v19 = (_QWORD *)a1->i64[0];
    v18 = (_QWORD *)a1->i64[1];
    if (v18 == (_QWORD *)a1->i64[0])
    {
      v22 = vdupq_n_s64((unint64_t)v18);
      v20 = &v15[16 * v11];
    }
    else
    {
      v20 = &v15[16 * v11];
      do
      {
        v21 = *((_OWORD *)v18 - 1);
        v18 -= 2;
        *((_OWORD *)v20 - 1) = v21;
        v20 -= 16;
        *v18 = 0;
        v18[1] = 0;
      }
      while (v18 != v19);
      v22 = *a1;
    }
    v10 = v17 + 16;
    a1->i64[0] = (uint64_t)v20;
    a1->i64[1] = (uint64_t)(v17 + 16);
    v26 = v22;
    v23 = a1[1].i64[0];
    a1[1].i64[0] = (uint64_t)&v15[16 * v16];
    v27 = v23;
    v25 = v22.i64[0];
    result = std::__split_buffer<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::~__split_buffer((uint64_t)&v25);
  }
  else
  {
    *v9 = v4;
    v9[1] = *((_QWORD *)&v3 + 1);
    v10 = v9 + 2;
  }
  a1->i64[1] = (uint64_t)v10;
  return result;
}

void sub_21790C0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

double TSWPLayoutChore::pCalculateSpaceBefore(TSWPLayoutChore *this, int a2)
{
  double v4;
  double v5;
  void *v6;
  float v7;
  double v8;
  int v9;
  uint64_t v10;
  double v11;
  int v12;
  double v13;
  double v14;
  TSWPParagraphEnumerator v16;

  v4 = *((double *)this + 48);
  v5 = 0.0;
  v6 = 0;
  if (v4 != 0.0 && a2 && *((_BYTE *)this + 592))
  {
    if (TSWPParagraphEnumerator::isFirstParagraph((TSWPParagraphEnumerator *)((char *)this + 104)))
    {
      v6 = 0;
      v5 = v4;
    }
    else
    {
      TSWPParagraphEnumerator::previous((TSWPParagraphEnumerator *)((char *)this + 104), (uint64_t)&v16);
      v6 = (void *)TSWPParagraphEnumerator::paragraphStyle(&v16, 0);
      TSWPParagraphEnumerator::~TSWPParagraphEnumerator(&v16);
      objc_msgSend(v6, "floatValueForProperty:", 88);
      v8 = (float)((float)(v7 * (float)(unint64_t)objc_msgSend(*((id *)this + 23), "scaleTextPercent")) / 100.0);
      if (v4 <= v8)
        v5 = 0.0;
      else
        v5 = v4 - v8;
    }
  }
  if (*((double *)this + 57) != 0.0 && (!a2 || *((_BYTE *)this + 592)))
  {
    v9 = *((_DWORD *)this + 107);
    if ((v9 | 2) != 2)
    {
      if (a2)
      {
        if (TSWPParagraphEnumerator::isFirstParagraph((TSWPParagraphEnumerator *)((char *)this + 104)))
          goto LABEL_19;
        if (!v6)
        {
          TSWPParagraphEnumerator::previous((TSWPParagraphEnumerator *)((char *)this + 104), (uint64_t)&v16);
          v6 = (void *)TSWPParagraphEnumerator::paragraphStyle(&v16, 0);
          TSWPParagraphEnumerator::~TSWPParagraphEnumerator(&v16);
        }
        if (objc_msgSend(v6, "intValueForProperty:", 102) != 4)
LABEL_19:
          v10 = 0;
        else
          v10 = objc_msgSend(v6, "valueForProperty:", 103);
        v9 = *((_DWORD *)this + 107);
      }
      else
      {
        v10 = 0;
      }
      if ((v9 | 2) == 3 || (objc_msgSend(*((id *)this + 54), "isEqual:", v10) & 1) == 0)
      {
        v11 = *((double *)this + 57);
        v12 = objc_msgSend(*((id *)this + 1), "wpKind");
        v13 = 6.0;
        if (v12 == 5)
          v13 = 0.0;
        v14 = *((double *)this + 55) + v11 + v13;
        if (v14 <= 0.0)
          v14 = -0.0;
        return v5 + v14;
      }
    }
  }
  return v5;
}

void sub_21790C290(_Unwind_Exception *a1, TSWPParagraphEnumerator *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  TSWPParagraphEnumerator::~TSWPParagraphEnumerator((TSWPParagraphEnumerator *)&a10);
  _Unwind_Resume(a1);
}

double TSWPLineFragmentCalculateOffsetForNextLine(double *a1, char a2, int a3, double a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;

  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[1];
  v7 = a1[2];
  v8 = v4 + v5 + fmax(v6, v7);
  switch(a3)
  {
    case 0:
      if ((a2 & 0x10) != 0)
      {
        v9 = v4 + v6;
      }
      else if (a4 <= 1.0)
      {
        v9 = v8 * a4;
        if (v9 < v6)
          v9 = a1[1];
      }
      else
      {
        v9 = v8 + (a4 + -1.0) * (v5 + v7 + v4);
      }
      a4 = v9 + a1[5];
      break;
    case 1:
      v10 = v8 + a1[5];
      if (v10 >= a4)
        a4 = v10;
      break;
    case 2:
      return a4 + *a1 + a1[6];
    case 3:
      a4 = fmin(v8 + a1[5], a4);
      break;
    case 4:
      a4 = fmax(v8 + a1[5] + a4, 0.0);
      break;
    default:
      a4 = v8;
      break;
  }
  return a4 + *a1 + a1[6];
}

BOOL TSWPDropCapLayoutState::isConflictingWithEndOfColumn(TSWPDropCapLayoutState *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 7);
  return v1
      && (*((_BYTE *)this + 240) & 2) != 0
      && (unint64_t)(v1 - *((_QWORD *)this + 8)) > *((_QWORD *)this + 28);
}

BOOL TSWPDropCapLayoutState::isSatifyingRequirements(TSWPDropCapLayoutState *this)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v4;

  if (!*((_QWORD *)this + 7))
    return 1;
  if ((*((_BYTE *)this + 240) & 1) == 0)
    return (*((_BYTE *)this + 240) & 8) == 0;
  v1 = *((_QWORD *)this + 9);
  if (v1 == 0x7FFFFFFFFFFFFFFFLL)
    return (*((_BYTE *)this + 240) & 8) == 0;
  v2 = *((_QWORD *)this + 29);
  if (v2 != 0x7FFFFFFFFFFFFFFFLL && v2 >= v1)
    return (*((_BYTE *)this + 240) & 8) == 0;
  v4 = 0;
  if ((*((_BYTE *)this + 240) & 4) != 0)
  {
    if (*((_BYTE *)this + 80))
      return (*((_BYTE *)this + 240) & 8) == 0;
  }
  return v4;
}

BOOL TSWPDropCapLayoutState::needsLayoutIteration(TSWPDropCapLayoutState *this)
{
  if ((*((_BYTE *)this + 240) & 1) != 0
    || *((_QWORD *)this + 28) != *((_QWORD *)this + 7) - *((_QWORD *)this + 8)
    || *((_DWORD *)this + 26))
  {
    return 0;
  }
  if (vabdd_f64(*((double *)this + 15), *((double *)this + 16)) >= 0.00999999978
    || vabdd_f64(*((double *)this + 19), *((double *)this + 20)) >= 0.00999999978)
  {
    return 1;
  }
  if ((*((_BYTE *)this + 240) & 0x10) == 0)
    return 0;
  return vabdd_f64(*((double *)this + 17), *((double *)this + 18)) >= 0.00999999978;
}

TSWPLineFragment *std::__shared_ptr_pointer<TSWPLineFragment *,std::shared_ptr<TSWPLineFragment>::__shared_ptr_default_delete<TSWPLineFragment,TSWPLineFragment>,std::allocator<TSWPLineFragment>>::__on_zero_shared(uint64_t a1)
{
  TSWPLineFragment *result;

  result = *(TSWPLineFragment **)(a1 + 24);
  if (result)
  {
    TSWPLineFragment::~TSWPLineFragment(result);
    JUMPOUT(0x219A153B8);
  }
  return result;
}

uint64_t std::__split_buffer<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

TSWPParagraphTypesetter *std::__shared_ptr_pointer<TSWPParagraphTypesetter *,std::shared_ptr<TSWPParagraphTypesetter>::__shared_ptr_default_delete<TSWPParagraphTypesetter,TSWPParagraphTypesetter>,std::allocator<TSWPParagraphTypesetter>>::__on_zero_shared(uint64_t a1)
{
  TSWPParagraphTypesetter *result;

  result = *(TSWPParagraphTypesetter **)(a1 + 24);
  if (result)
  {
    TSWPParagraphTypesetter::~TSWPParagraphTypesetter(result);
    JUMPOUT(0x219A153B8);
  }
  return result;
}

id *TSWPLineBalancingLayoutState::prepareForRestore(id *this, id *a2, char a3, double a4, int a5, int a6, double a7)
{
  uint64_t v13;
  void *v14;
  uint64_t v15;

  v13 = (uint64_t)this;
  if (*((_DWORD *)this + 182))
  {
    v14 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v15 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSWPLineBalancingLayoutState::prepareForRestore(const TSWPLayoutState &, const BOOL, const CGFloat, const uint, const uint, const CGFloat)");
    this = (id *)objc_msgSend(v14, "handleFailureInFunction:file:lineNumber:description:", v15, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPLineBalancingLayoutState.mm"), 64, CFSTR("Prepare for rendering line balancing in wrong state: %d"), *(unsigned int *)(v13 + 728));
  }
  *(double *)(v13 + 704) = a4;
  *(double *)(v13 + 768) = a4;
  *(_BYTE *)(v13 + 792) = 0;
  if ((a3 & 1) != 0 || (this = (id *)objc_msgSend(a2[12], "intValueForProperty:", 51), (int)this < 1))
  {
    *(_DWORD *)(v13 + 728) = 0;
  }
  else
  {
    *(_DWORD *)(v13 + 732) = a5;
    *(_DWORD *)(v13 + 728) = 1;
    this = TSWPLayoutState::operator=((id *)v13, a2);
    *(_DWORD *)(v13 + 688) = a5;
    *(_DWORD *)(v13 + 692) = a6;
    *(double *)(v13 + 696) = a7;
  }
  return this;
}

void fixSpaceAfterForParagraphBorder(uint64_t a1, TSWPLineFragmentArray **a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  uint64_t Object;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  double MaxY;
  double v18;
  double v19;
  double v20;
  int v21;
  double v22;
  double v23;
  double v24;
  CGFloat MinY;
  CGFloat rect;
  CGRect v27;
  CGRect v28;
  CGRect v29;

  if (TSWPLineFragmentArray::count(*a2))
  {
    if (*(_QWORD *)(a1 + 352) || *(_BYTE *)(a1 + 368) != 0)
    {
      Object = TSWPLineFragmentArray::lastObject(*a2);
      v14 = *(double *)(Object + 80);
      v15 = *(double *)(Object + 88);
      v16 = *(double *)(Object + 96);
      v27.size.height = *(CGFloat *)(Object + 104);
      rect = v27.size.height;
      v27.origin.x = v14;
      v27.origin.y = v15;
      v27.size.width = v16;
      MaxY = CGRectGetMaxY(v27);
      v28.origin.x = a3;
      v28.origin.y = a4;
      v28.size.width = a5;
      v28.size.height = a6;
      v18 = CGRectGetMaxY(v28);
      objc_msgSend(*(id *)(a1 + 352), "width");
      v20 = v18 + v19 + *(double *)(a1 + 376);
      v21 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 104), "storage"), "wpKind");
      v22 = 6.0;
      if (v21 == 5)
        v22 = 0.0;
      v23 = v20 + v22;
      if (MaxY >= v23)
        v24 = MaxY;
      else
        v24 = v23;
      v29.origin.x = v14;
      v29.origin.y = v15;
      v29.size.width = v16;
      v29.size.height = rect;
      MinY = CGRectGetMinY(v29);
      *(CGFloat *)(Object + 80) = v14;
      *(CGFloat *)(Object + 88) = v15;
      *(CGFloat *)(Object + 96) = v16;
      *(double *)(Object + 104) = v24 - MinY;
    }
  }
}

BOOL TSWPLineStylingLayoutState::canFinalize(TSWPLineStylingLayoutState *this)
{
  unint64_t v1;

  v1 = *((_QWORD *)this + 7);
  if (!v1)
    return 0;
  if ((*((_BYTE *)this + 64) & 1) != 0)
    return 1;
  return *((_QWORD *)this + 6) >= v1;
}

CGFloat TSWPDropCapLayoutState::dropCapBottom(TSWPDropCapLayoutState *this)
{
  int v1;
  CGFloat result;
  uint64_t v3;

  v1 = *((_DWORD *)this + 26);
  if (v1 == 1)
    return *((double *)this + 18);
  result = 0.0;
  if (!v1)
  {
    v3 = *((_QWORD *)this + 31);
    if (v3)
      return CGRectGetMaxY(*(CGRect *)(v3 + 48));
  }
  return result;
}

void TSWPLineStylingCTState::clear(id *this)
{

  *this = 0;
  *((_BYTE *)this + 8) &= ~1u;
  this[3] = 0;
  this[4] = 0;
  this[2] = (id)0x7FFFFFFFFFFFFFFFLL;
}

double TSWPDropCapCTState::clear(TSWPDropCapCTState *this)
{
  double result;

  *(_QWORD *)this = 0;
  *((_BYTE *)this + 8) &= ~1u;
  result = NAN;
  *(_OWORD *)((char *)this + 24) = xmmword_217C27470;
  *((_QWORD *)this + 2) = 0x3FF0000000000000;
  return result;
}

double TSWPLineFragment::adjustGlyphsForAlignment(uint64_t a1, int a2, double a3)
{
  CTLineRef *v6;
  double v7;
  CTLineRef *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double *v16;
  double *v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  BOOL v21;
  double *v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  double *v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  double *v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  double v34;
  double result;

  if ((a2 - 1) <= 1)
  {
    v6 = *(CTLineRef **)(a1 + 192);
    if (*(CTLineRef **)(a1 + 200) == v6 || CTLineGetGlyphCount(*v6) != 1 || (v7 = a3, (*(_BYTE *)(a1 + 25) & 8) == 0))
    {
      v8 = *(CTLineRef **)(a1 + 192);
      if (*(CTLineRef **)(a1 + 200) == v8)
        v7 = 0.0;
      else
        v7 = CTLineGetTrailingWhitespaceWidth(*v8) + a3 - *(double *)(a1 + 216);
    }
    if (a2 == 2)
      v7 = v7 * 0.5;
    v9 = *(_QWORD *)(a1 + 192);
    v10 = *(_QWORD *)(a1 + 200) - v9;
    if (v10)
    {
      v11 = v10 / 48;
      if (v11 <= 1)
        v11 = 1;
      v12 = (double *)(v9 + 8);
      do
      {
        *v12 = v7 + *v12;
        v12 += 6;
        --v11;
      }
      while (v11);
    }
    v13 = *(_QWORD *)(a1 + 224);
    v14 = *(_QWORD *)(a1 + 232) - v13;
    if (v14)
    {
      v15 = v14 / 48;
      if (v15 <= 1)
        v15 = 1;
      v16 = (double *)(v13 + 8);
      do
      {
        *v16 = v7 + *v16;
        v16 += 6;
        --v15;
      }
      while (v15);
    }
    v17 = *(double **)(a1 + 272);
    v18 = *(_QWORD *)(a1 + 280) - (_QWORD)v17;
    if (v18)
    {
      v19 = 0xCCCCCCCCCCCCCCCDLL * (v18 >> 4);
      v20 = 1;
      do
      {
        *v17 = v7 + *v17;
        v17 += 10;
        v21 = v19 > v20++;
      }
      while (v21);
    }
    v22 = *(double **)(a1 + 296);
    v23 = *(_QWORD *)(a1 + 304) - (_QWORD)v22;
    if (v23)
    {
      v24 = 0xCCCCCCCCCCCCCCCDLL * (v23 >> 4);
      v25 = 1;
      do
      {
        *v22 = v7 + *v22;
        v22 += 10;
        v21 = v24 > v25++;
      }
      while (v21);
    }
    v26 = *(double **)(a1 + 320);
    v27 = *(_QWORD *)(a1 + 328) - (_QWORD)v26;
    if (v27)
    {
      v28 = 0xCCCCCCCCCCCCCCCDLL * (v27 >> 4);
      v29 = 1;
      do
      {
        *v26 = v7 + *v26;
        v26 += 10;
        v21 = v28 > v29++;
      }
      while (v21);
    }
    v30 = *(double **)(a1 + 344);
    v31 = *(_QWORD *)(a1 + 352) - (_QWORD)v30;
    if (v31)
    {
      v32 = 0xCCCCCCCCCCCCCCCDLL * (v31 >> 4);
      v33 = 1;
      do
      {
        *v30 = v7 + *v30;
        v30 += 10;
        v21 = v32 > v33++;
      }
      while (v21);
    }
    *(double *)(a1 + 216) = v7 + *(double *)(a1 + 216);
  }
  v34 = *(double *)(a1 + 64);
  if (v34 == 4294967300.0)
    v34 = 0.0;
  result = *(double *)(a1 + 96) - (v34 - a3);
  *(double *)(a1 + 96) = result;
  *(double *)(a1 + 64) = a3;
  return result;
}

uint64_t TSWPLayoutChore::pGetParagraphStyleAtCharIndex(TSWPLayoutChore *this, NSUInteger a2)
{
  TSWPParagraphEnumerator *v4;
  NSUInteger v5;
  NSUInteger v6;
  void *v8;
  uint64_t v9;
  uint64_t v11;
  TSWPParagraphEnumerator v12;

  v4 = (TSWPParagraphEnumerator *)((char *)this + 104);
  v5 = TSWPParagraphEnumerator::paragraphTextRange((TSWPParagraphEnumerator *)((char *)this + 104));
  if (a2 >= v5 && a2 - v5 < v6)
    return TSWPParagraphEnumerator::paragraphStyle(v4, 0);
  v8 = (void *)*((_QWORD *)this + 1);
  v9 = objc_msgSend(*((id *)this + 3), "styleProvider");
  if (v8)
    objc_msgSend(v8, "paragraphEnumeratorAtCharIndex:styleProvider:", a2, v9);
  else
    memset(&v12, 0, sizeof(v12));
  v11 = TSWPParagraphEnumerator::paragraphStyle(&v12, 0);
  TSWPParagraphEnumerator::~TSWPParagraphEnumerator(&v12);
  return v11;
}

void sub_21790CB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TSWPParagraphEnumerator::~TSWPParagraphEnumerator((TSWPParagraphEnumerator *)&a9);
  _Unwind_Resume(a1);
}

uint64_t TSWPLayoutChore::pSetupAnchoredGraphics(TSWPLayoutChore *this, NSMutableArray *a2, _NSRange a3, double a4, TSWPLayoutState *a5, CGSize a6, char a7, double *a8, double *a9, double *a10)
{
  uint64_t result;
  CGFloat height;
  CGFloat width;
  NSUInteger length;
  NSUInteger location;
  unint64_t v22;
  CGFloat x;
  CGFloat y;
  CGFloat v25;
  CGFloat v26;
  unint64_t v27;
  double v28;
  void *v29;
  uint64_t v30;
  TSWPDrawableAttachment *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL4 v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  double v44;
  unsigned int v45;
  BOOL v46;
  uint64_t v47;
  double v48;
  unsigned int v49;
  TSDLayout *v50;
  char v51;
  double v52;
  double v53;
  double *v54;
  uint64_t *v55;
  double *v56;
  char *v57;
  int v58;
  double v59;
  __int128 v60;
  __int128 v61;
  unint64_t v62;
  double v63;
  double v64;
  double v65;
  id v66;
  uint64_t v67;
  _DWORD v68[3];
  CGRect v69;
  CGRect v70;

  v68[0] = 0;
  if (*((_DWORD *)this + 14))
  {
    result = 0;
    *((_QWORD *)this + 11) = *((_QWORD *)this + 10);
    return result;
  }
  height = a6.height;
  width = a6.width;
  length = a3.length;
  location = a3.location;
  v57 = (char *)this + 80;
  v22 = objc_msgSend(*((id *)this + 1), "attachmentIndexForInsertionAtCharIndex:", *((_QWORD *)this + 11));
  v67 = *((_QWORD *)this + 11);
  objc_msgSend(*((id *)this + 23), "wpBounds");
  x = v69.origin.x;
  y = v69.origin.y;
  v25 = v69.size.width;
  v26 = v69.size.height;
  v63 = CGRectGetMinX(v69) + *((double *)a5 + 31);
  v70.origin.x = x;
  v70.origin.y = y;
  v70.size.width = v25;
  v70.size.height = v26;
  v64 = CGRectGetMaxX(v70) - *((double *)a5 + 27);
  v65 = (v64 - v63) * 0.5;
  v66 = 0;
  if (v22 >= *((_QWORD *)this + 9))
  {
    v53 = a4;
    v28 = a4;
    v54 = a10;
    goto LABEL_36;
  }
  v56 = a9;
  v58 = 0;
  v27 = location + length;
  v28 = a4;
  v59 = a4;
  do
  {
    v62 = 0;
    v29 = (void *)objc_msgSend(*((id *)this + 1), "attachmentAtAttachmentIndex:outCharIndex:", v22, &v62);
    objc_opt_class();
    v30 = TSUDynamicCast();
    v31 = (TSWPDrawableAttachment *)v30;
    if (v30)
    {
      LODWORD(v30) = objc_msgSend((id)v30, "isAnchored");
      if ((_DWORD)v30)
      {
        v32 = (void *)objc_msgSend(*((id *)this + 257), "validatedLayoutForAnchoredDrawable:", -[TSWPDrawableAttachment drawable](v31, "drawable"));
        v33 = (void *)objc_msgSend(v32, "iterativePositioningState");
        if (v33 && objc_msgSend(v33, "passCount"))
          goto LABEL_12;
        LOBYTE(v30) = objc_msgSend(v32, "hasFinishedIterativePositioning");
      }
    }
    if (v62 >= v27 && (v30 & 1) == 0)
      break;
LABEL_12:
    if (objc_msgSend(v29, "isDrawable"))
    {
      if (objc_msgSend(v29, "isAnchored"))
      {
        if (v62 >= *((_QWORD *)this + 11))
        {
          v34 = -[TSWPDrawableAttachment drawable](v31, "drawable");
          if ((-[NSMutableArray containsObject:](a2, "containsObject:", v34) & 1) == 0
            && ((objc_opt_respondsToSelector() & 1) == 0
             || (objc_msgSend(*((id *)this + 257), "siblingTargetIsManipulatingDrawable:", v34) & 1) == 0))
          {
            v61 = *MEMORY[0x24BDBEFB0];
            v60 = *MEMORY[0x24BDBF148];
            v58 |= TSWPLayoutChore::pPositionAnchoredAttachment((uint64_t)this, x, y, v25, v26, a4, width, height, v35, v36, v31, v62, a5, a7, &v67, a2, v68, (double *)&v61, (uint64_t)&v60,
                     (uint64_t)&v63) ^ 1;
            v37 = -[TSWPDrawableAttachment isHTMLWrap](v31, "isHTMLWrap");
            v38 = v59;
            v39 = fmax(v59, *((double *)&v61 + 1) + *((double *)&v60 + 1));
            v40 = fmax(v28, *((double *)&v61 + 1) + *((double *)&v60 + 1));
            if (v37)
              v38 = v39;
            v59 = v38;
            if (!v37)
              v28 = v40;
          }
        }
      }
    }
    ++v22;
  }
  while (v22 < *((_QWORD *)this + 9));
  if (v66)
  {
    v41 = objc_msgSend(v66, "count");
    if (v41)
    {
      v42 = v41;
      v43 = 0;
      v44 = 0.0;
      v45 = 1;
      do
      {
        v44 = v44
            + adjustedLayoutSize((TSDLayout *)objc_msgSend(*((id *)this + 257), "validatedLayoutForAnchoredDrawable:", objc_msgSend((id)objc_msgSend(v66, "objectAtIndexedSubscript:", v43), "drawable")));
        v43 = v45;
        v46 = v42 > v45++;
      }
      while (v46);
      v47 = 0;
      v48 = v63 + fmax(v65 + v44 * -0.5, 0.0);
      v49 = 1;
      do
      {
        v50 = (TSDLayout *)objc_msgSend(*((id *)this + 257), "validatedLayoutForAnchoredDrawable:", objc_msgSend((id)objc_msgSend(v66, "objectAtIndexedSubscript:", v47), "drawable"));
        v51 = objc_opt_respondsToSelector();
        v52 = v48;
        if ((v51 & 1) != 0)
          objc_msgSend(*((id *)this + 257), "layoutPositionFromAnchoredAttachmentPosition:", v48, a4);
        -[TSDLayout setAdjustedInterimPositionX:](v50, "setAdjustedInterimPositionX:", v52);
        -[TSDAbstractLayout fixTransformFromInterimPosition](v50, "fixTransformFromInterimPosition");
        v48 = v48 + adjustedLayoutSize(v50);
        v47 = v49;
        v46 = v42 > v49++;
      }
      while (v46);
    }
    objc_msgSend(v66, "removeAllObjects");

    a9 = v56;
  }
  else
  {
    a9 = v56;
  }
  v54 = a10;
  v53 = v59;
  if ((v58 & 1) != 0)
  {
    v55 = &v67;
    goto LABEL_37;
  }
LABEL_36:
  v55 = (uint64_t *)v57;
LABEL_37:
  *((_QWORD *)this + 11) = *v55;
  *a8 = v28;
  *a9 = v53;
  *v54 = 0.0;
  return v68[0];
}

uint64_t TSWPBundle()
{
  if (TSWPBundle::onceToken != -1)
    dispatch_once(&TSWPBundle::onceToken, &__block_literal_global_72);
  return TSWPBundle::bundle;
}

void String(unint64_t *a1, int a2)
{
  int v2;

  v2 = a2;
  String(a1, (uint64_t)&v2, 1uLL);
}

void String(size_t *a1, uint64_t a2, float a3)
{
  void *v6;
  uint64_t v7;
  size_t *v8;
  _QWORD v9[2];

  if (!a1)
  {
    v6 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v7 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSSPropertyStoreSetFloatValueForProperty(TSSPropertyStoreRef, TSSProperty, float)");
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyStore.m"), 301, CFSTR("nil map reference"));
  }
  v8 = p_TSSPropertyStoreSearch(a1, a2);
  if (v8)
  {
    String((uint64_t)v8, a2, a3);
  }
  else
  {
    v9[0] = 0;
    v9[1] = 0;
    String((uint64_t)v9, a2, a3);
    p_TSSPropertyStoreAddNewEntries((uint64_t *)a1, v9, 1);
  }
}

void String(size_t *a1, uint64_t a2, void *a3)
{
  void *v6;
  uint64_t v7;
  size_t *v8;
  uint64_t v9;
  _QWORD v10[2];

  if (!a1)
  {
    v6 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v7 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSSPropertyStoreSetBoxedObjectForProperty(TSSPropertyStoreRef, TSSProperty, id)");
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyStore.m"), 377, CFSTR("nil map reference"));
  }
  v8 = p_TSSPropertyStoreSearch(a1, a2);
  if (v8)
  {
    v9 = (uint64_t)v8;
    if (!*((_BYTE *)v8 + 10))

    String(v9, a2, a3);
  }
  else
  {
    v10[0] = 0;
    v10[1] = 0;
    String((uint64_t)v10, a2, a3);
    p_TSSPropertyStoreAddNewEntries((uint64_t *)a1, v10, 1);
  }
}

{
  void *v6;
  uint64_t v7;
  size_t *v8;
  uint64_t v9;
  _QWORD v10[2];

  if (!a1)
  {
    v6 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v7 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSSPropertyStoreSetObjectForProperty(TSSPropertyStoreRef, TSSProperty, id)");
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyStore.m"), 360, CFSTR("nil map reference"));
  }
  v8 = p_TSSPropertyStoreSearch(a1, a2);
  if (v8)
  {
    v9 = (uint64_t)v8;
    if (!*((_BYTE *)v8 + 10))

    String(v9, a2, a3);
  }
  else
  {
    v10[0] = 0;
    v10[1] = 0;
    String((uint64_t)v10, a2, a3);
    p_TSSPropertyStoreAddNewEntries((uint64_t *)a1, v10, 1);
  }
}

void *i_TSSPropertyStoreCreateWithFirstPropertyAndArgumentList(uint64_t a1, void **a2)
{
  uint64_t v2;
  unsigned int v3;
  void **v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  void **v12;
  int *v13;
  double *v14;
  float v15;
  double *v16;
  void **v18;
  void **v19;

  v2 = a1;
  v18 = a2;
  v19 = a2;
  v3 = 0;
  if ((_DWORD)a1)
  {
    do
    {
      v5 = String(a1);
      if (v5 - 2 < 2 || v5 <= 1)
        ++v19;
      ++v3;
      v4 = v19++;
      LODWORD(a1) = *(_DWORD *)v4;
    }
    while (*(_DWORD *)v4);
  }
  v6 = v3;
  v7 = p_TSSPropertyStoreAllocateWithCapacity(v3);
  v8 = v7;
  if (v7)
  {
    *v7 = v6;
    if ((_DWORD)v6)
    {
      v9 = v7[1];
      while (1)
      {
        v10 = v2;
        if (!(_DWORD)v2)
        {
          v11 = v18++;
          v10 = *(unsigned int *)v11;
          if (!(_DWORD)v10)
            break;
        }
        v2 = 0;
        switch(String(v10))
        {
          case 0u:
            v12 = v18++;
            String(v9, v10, *v12);
            goto LABEL_18;
          case 1u:
            v13 = (int *)v18++;
            String(v9, v10, *v13);
            goto LABEL_18;
          case 2u:
            v14 = (double *)v18++;
            v15 = *v14;
            String(v9, v10, v15);
            goto LABEL_18;
          case 3u:
            v16 = (double *)v18++;
            String(v9, v10, *v16);
LABEL_18:
            v2 = 0;
            v9 += 16;
            break;
          default:
            continue;
        }
      }
      if ((p_TSSPropertyStoreSort((uint64_t)v8) & 1) == 0)
      {
        String(v8);
        return 0;
      }
    }
  }
  return v8;
}

id String(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  __CFString *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;

  if (a2 >> 4 >= 0x121)
  {
    v5 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v6 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSSPropertyEntryInitWithRetainedObject(TSSPropertyEntry *, TSSProperty, id)");
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h"), 108, CFSTR("Property ID <%d> out of range."), a2);
  }
  if (String(a2))
  {
    v7 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v8 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSSPropertyEntryInitWithRetainedObject(TSSPropertyEntry *, TSSProperty, id)");
    v9 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h");
    v10 = String(a2);
    v11 = String(v10);
    v12 = String(a2);
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, v9, 109, CFSTR("Unexpected property type of '%@' for property '%@'. Expected '%@'."), v11, v12, String(0));
  }
  v13 = a3;
  if (!a3)
  {
    v14 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v15 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSSPropertyEntryInitWithRetainedObject(TSSPropertyEntry *, TSSProperty, id)");
    objc_msgSend(v14, "handleFailureInFunction:file:lineNumber:description:", v15, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h"), 110, CFSTR("Illegal to set undefined value for property %d %@"), a2, String(a2));
    v13 = 0;
  }
  *(_WORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 10) = 0;
  *(_QWORD *)a1 = v13;
  return v13;
}

{
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  __CFString *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id result;
  void *v17;
  uint64_t v18;
  unsigned int v19;
  float v20;
  float v21;
  double v22;
  double v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  __CFString *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  __CFString *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  __CFString *v50;
  void *v51;
  void *v52;
  uint64_t v53;

  if (!TSSPropertyEntryInit_nullValue)
    TSSPropertyEntryInit_nullValue = objc_msgSend(MEMORY[0x24BDBCEF8], "null");
  switch(String(a2))
  {
    case 0u:
      if (a2 >> 4 >= 0x121)
      {
        v5 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
        v6 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSSPropertyEntryInitWithRetainedObject(TSSPropertyEntry *, TSSProperty, id)");
        objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h"), 108, CFSTR("Property ID <%d> out of range."), a2);
      }
      if (String(a2))
      {
        v7 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
        v8 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSSPropertyEntryInitWithRetainedObject(TSSPropertyEntry *, TSSProperty, id)");
        v9 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h");
        v10 = String(a2);
        v11 = String(v10);
        v12 = String(a2);
        objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, v9, 109, CFSTR("Unexpected property type of '%@' for property '%@'. Expected '%@'."), v11, v12, String(0));
      }
      v13 = a3;
      if (!a3)
      {
        v14 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
        v15 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSSPropertyEntryInitWithRetainedObject(TSSPropertyEntry *, TSSProperty, id)");
        objc_msgSend(v14, "handleFailureInFunction:file:lineNumber:description:", v15, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h"), 110, CFSTR("Illegal to set undefined value for property %d %@"), a2, String(a2));
        v13 = 0;
      }
      *(_WORD *)(a1 + 8) = a2;
      *(_BYTE *)(a1 + 10) = 0;
      *(_QWORD *)a1 = v13;
      result = v13;
      break;
    case 1u:
      if (a3)
        v19 = objc_msgSend(a3, "intValue");
      else
        v19 = 0x80000000;
      if (a2 >> 4 >= 0x121)
      {
        v24 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
        v25 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSSPropertyEntryInitWithInt(TSSPropertyEntry *, TSSProperty, int)");
        objc_msgSend(v24, "handleFailureInFunction:file:lineNumber:description:", v25, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h"), 53, CFSTR("Property ID <%d> out of range."), a2);
      }
      result = (id)String(a2);
      if ((_DWORD)result != 1)
      {
        v26 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
        v27 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSSPropertyEntryInitWithInt(TSSPropertyEntry *, TSSProperty, int)");
        v28 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h");
        v29 = String(a2);
        v30 = String(v29);
        v31 = String(a2);
        result = (id)objc_msgSend(v26, "handleFailureInFunction:file:lineNumber:description:", v27, v28, 54, CFSTR("Unexpected property type of '%@' for property '%@'. Expected '%@'."), v30, v31, String(1u));
      }
      if (v19 == 0x80000000)
      {
        v32 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
        v33 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSSPropertyEntryInitWithInt(TSSPropertyEntry *, TSSProperty, int)");
        result = (id)objc_msgSend(v32, "handleFailureInFunction:file:lineNumber:description:", v33, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h"), 55, CFSTR("Illegal to set undefined value for property %d %@"), a2, String(a2));
      }
      *(_WORD *)(a1 + 8) = a2;
      *(_BYTE *)(a1 + 10) = 1;
      *(_DWORD *)a1 = v19;
      break;
    case 2u:
      if (a3)
      {
        objc_msgSend(a3, "floatValue");
        v21 = v20;
      }
      else
      {
        v21 = INFINITY;
      }
      if (a2 >> 4 >= 0x121)
      {
        v34 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
        v35 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSSPropertyEntryInitWithFloat(TSSPropertyEntry *, TSSProperty, float)");
        objc_msgSend(v34, "handleFailureInFunction:file:lineNumber:description:", v35, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h"), 64, CFSTR("Property ID <%d> out of range."), a2);
      }
      result = (id)String(a2);
      if ((_DWORD)result != 2)
      {
        v36 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
        v37 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSSPropertyEntryInitWithFloat(TSSPropertyEntry *, TSSProperty, float)");
        v38 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h");
        v39 = String(a2);
        v40 = String(v39);
        v41 = String(a2);
        result = (id)objc_msgSend(v36, "handleFailureInFunction:file:lineNumber:description:", v37, v38, 65, CFSTR("Unexpected property type of '%@' for property '%@'. Expected '%@'."), v40, v41, String(2u));
      }
      if (v21 == INFINITY)
      {
        v42 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
        v43 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSSPropertyEntryInitWithFloat(TSSPropertyEntry *, TSSProperty, float)");
        result = (id)objc_msgSend(v42, "handleFailureInFunction:file:lineNumber:description:", v43, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h"), 66, CFSTR("Illegal to set undefined value for property %d %@"), a2, String(a2));
      }
      *(_WORD *)(a1 + 8) = a2;
      *(_BYTE *)(a1 + 10) = 2;
      *(float *)a1 = v21;
      break;
    case 3u:
      if (a3)
      {
        objc_msgSend(a3, "doubleValue");
        v23 = v22;
      }
      else
      {
        v23 = INFINITY;
      }
      if (a2 >> 4 >= 0x121)
      {
        v44 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
        v45 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSSPropertyEntryInitWithDouble(TSSPropertyEntry *, TSSProperty, double)");
        objc_msgSend(v44, "handleFailureInFunction:file:lineNumber:description:", v45, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h"), 94, CFSTR("Property ID <%d> out of range."), a2);
      }
      result = (id)String(a2);
      if ((_DWORD)result != 3)
      {
        v46 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
        v47 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSSPropertyEntryInitWithDouble(TSSPropertyEntry *, TSSProperty, double)");
        v48 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h");
        v49 = String(a2);
        v50 = String(v49);
        v51 = String(a2);
        result = (id)objc_msgSend(v46, "handleFailureInFunction:file:lineNumber:description:", v47, v48, 95, CFSTR("Unexpected property type of '%@' for property '%@'. Expected '%@'."), v50, v51, String(3u));
      }
      if (v23 == INFINITY)
      {
        v52 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
        v53 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSSPropertyEntryInitWithDouble(TSSPropertyEntry *, TSSProperty, double)");
        result = (id)objc_msgSend(v52, "handleFailureInFunction:file:lineNumber:description:", v53, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h"), 96, CFSTR("Illegal to set undefined value for property %d %@"), a2, String(a2));
      }
      *(_WORD *)(a1 + 8) = a2;
      *(_BYTE *)(a1 + 10) = 3;
      *(double *)a1 = v23;
      break;
    default:
      v17 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
      v18 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSSPropertyEntryInit(TSSPropertyEntry *, TSSProperty, NSObject *)");
      result = (id)objc_msgSend(v17, "handleFailureInFunction:file:lineNumber:description:", v18, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.m"), 49, CFSTR("Unexpected entry type"));
      break;
  }
  return result;
}

void String(size_t *a1, uint64_t a2, int a3)
{
  void *v6;
  uint64_t v7;
  size_t *v8;
  _QWORD v9[2];

  if (!a1)
  {
    v6 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v7 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSSPropertyStoreSetIntValueForProperty(TSSPropertyStoreRef, TSSProperty, int)");
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyStore.m"), 285, CFSTR("nil map reference"));
  }
  v8 = p_TSSPropertyStoreSearch(a1, a2);
  if (v8)
  {
    String((uint64_t)v8, a2, a3);
  }
  else
  {
    v9[0] = 0;
    v9[1] = 0;
    String((uint64_t)v9, a2, a3);
    p_TSSPropertyStoreAddNewEntries((uint64_t *)a1, v9, 1);
  }
}

void p_TSSPropertyStoreAddNewEntries(uint64_t *a1, const void *a2, uint64_t a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  const void *v9;

  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        v6 = (char *)malloc_type_calloc(*a1 + a3, 0x10uLL, 0x10820400B94AB5FuLL);
        if (v6)
        {
          v7 = v6;
          v8 = *a1;
          if (*a1)
          {
            v9 = (const void *)a1[1];
            if (v9)
            {
              memcpy(v6, v9, 16 * v8);
              v8 = *a1;
            }
          }
          memcpy(&v7[16 * v8], a2, 16 * a3);
          if (mergesort(v7, *a1 + a3, 0x10uLL, (int (__cdecl *)(const void *, const void *))p_TSSPropertyEntryCompare))
          {
            free(v7);
          }
          else
          {
            free((void *)a1[1]);
            *a1 += a3;
            a1[1] = (uint64_t)v7;
          }
        }
      }
    }
  }
}

uint64_t String(uint64_t a1, uint64_t a2, int a3)
{
  void *v6;
  uint64_t v7;
  uint64_t result;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  __CFString *v13;
  void *v14;
  void *v15;
  uint64_t v16;

  if (a2 >> 4 >= 0x121)
  {
    v6 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v7 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSSPropertyEntryInitWithInt(TSSPropertyEntry *, TSSProperty, int)");
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h"), 53, CFSTR("Property ID <%d> out of range."), a2);
  }
  result = String(a2);
  if ((_DWORD)result != 1)
  {
    v9 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v10 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSSPropertyEntryInitWithInt(TSSPropertyEntry *, TSSProperty, int)");
    v11 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h");
    v12 = String(a2);
    v13 = String(v12);
    v14 = String(a2);
    result = objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v10, v11, 54, CFSTR("Unexpected property type of '%@' for property '%@'. Expected '%@'."), v13, v14, String(1u));
  }
  if (a3 == 0x80000000)
  {
    v15 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v16 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSSPropertyEntryInitWithInt(TSSPropertyEntry *, TSSProperty, int)");
    result = objc_msgSend(v15, "handleFailureInFunction:file:lineNumber:description:", v16, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h"), 55, CFSTR("Illegal to set undefined value for property %d %@"), a2, String(a2));
  }
  *(_WORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 10) = 1;
  *(_DWORD *)a1 = a3;
  return result;
}

uint64_t p_TSSPropertyStoreSort(uint64_t a1)
{
  uint64_t v1;

  if (*(_QWORD *)a1 < 2uLL)
    return 1;
  v1 = mergesort(*(void **)(a1 + 8), *(_QWORD *)a1, 0x10uLL, (int (__cdecl *)(const void *, const void *))p_TSSPropertyEntryCompare);
  if (!(_DWORD)v1)
    return 1;
  NSLog((NSString *)CFSTR("p_TSSPropertyStoreSort mergesort failed with error %d"), v1);
  return 0;
}

uint64_t String(uint64_t a1, uint64_t a2, float a3)
{
  void *v6;
  uint64_t v7;
  uint64_t result;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  __CFString *v13;
  void *v14;
  void *v15;
  uint64_t v16;

  if (a2 >> 4 >= 0x121)
  {
    v6 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v7 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSSPropertyEntryInitWithFloat(TSSPropertyEntry *, TSSProperty, float)");
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h"), 64, CFSTR("Property ID <%d> out of range."), a2);
  }
  result = String(a2);
  if ((_DWORD)result != 2)
  {
    v9 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v10 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSSPropertyEntryInitWithFloat(TSSPropertyEntry *, TSSProperty, float)");
    v11 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h");
    v12 = String(a2);
    v13 = String(v12);
    v14 = String(a2);
    result = objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v10, v11, 65, CFSTR("Unexpected property type of '%@' for property '%@'. Expected '%@'."), v13, v14, String(2u));
  }
  if (a3 == INFINITY)
  {
    v15 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v16 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSSPropertyEntryInitWithFloat(TSSPropertyEntry *, TSSProperty, float)");
    result = objc_msgSend(v15, "handleFailureInFunction:file:lineNumber:description:", v16, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/styles/TSSPropertyEntry_Internal.h"), 66, CFSTR("Illegal to set undefined value for property %d %@"), a2, String(a2));
  }
  *(_WORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 10) = 2;
  *(float *)a1 = a3;
  return result;
}

void String(unint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  BOOL v4;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  unint64_t v14;
  void *v16;
  void *v17;

  v3 = a1[1];
  if (v3)
    v4 = a3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v8 = 0;
    v9 = 0;
    v10 = *a1;
    do
    {
      if (v10)
      {
        v11 = 0;
        v12 = *(_DWORD *)(a2 + 4 * v8);
        v13 = 1;
        while (1)
        {
          v14 = v3 + 16 * v11;
          if (v12 == *(unsigned __int16 *)(v14 + 8))
            break;
          v11 = v13;
          if (v10 <= v13++)
            goto LABEL_15;
        }
        if (!*(_BYTE *)(v14 + 10))

        if (--v10 > v11)
          *(_OWORD *)v14 = *(_OWORD *)(v3 + 16 * v10);
      }
LABEL_15:
      v8 = ++v9;
    }
    while (v9 < a3);
    if (v10 != *a1)
    {
      v16 = (void *)a1[1];
      if (v10)
      {
        v17 = malloc_type_realloc(v16, 16 * v10, 0x10820400B94AB5FuLL);
        if (!v17)
          goto LABEL_23;
      }
      else
      {
        free(v16);
        v17 = 0;
      }
      a1[1] = (unint64_t)v17;
LABEL_23:
      *a1 = v10;
      p_TSSPropertyStoreSort((uint64_t)a1);
    }
  }
}

_QWORD *String()
{
  _QWORD *result;

  result = malloc_type_malloc(0x10uLL, 0x10200405730B0C9uLL);
  if (result)
  {
    *result = 0;
    result[1] = 0;
  }
  return result;
}

void sub_21790F940(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_21790FBF0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_21790FD0C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_21790FDC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_21790FF38(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_21790FF94(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_21791008C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

const __CTFont *TSWPCreateFontForStylesWithScale(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  unsigned int v11;
  void *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  void *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  void *v21;
  float v22;
  double v23;
  uint64_t v24;
  double v25;
  unsigned int v26;
  void *v27;
  float v28;
  double v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  void *v33;
  unsigned int v34;
  double v35;
  unsigned int v36;
  void *v37;
  id v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  void *v44;
  unsigned int v45;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  double v53;
  const __CFString *v54;
  uint64_t v56;
  const __CFString *v57;
  _QWORD v58[2];
  _QWORD v59[3];

  v59[2] = *MEMORY[0x24BDAC8D0];
  v6 = TSWPResolvePropertyForStyles(a1, a2, 16, 0);
  if (!v6)
  {
    v7 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v8 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "CTFontRef TSWPCreateFontForStylesWithScale(TSSStyle **, NSUInteger, NSUInteger)");
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPUtilities.mm"), 1687, CFSTR("Failed to resolve font name"));
  }
  v9 = (double)a3;
  v56 = v6;
  if (a2)
  {
    v10 = 0;
    v11 = 1;
    do
    {
      v12 = *(void **)(a1 + 8 * v10);
      if (v12)
        v13 = objc_msgSend(v12, "intValueForProperty:", 19);
      else
        v13 = 0x80000000;
      v10 = v11;
      if (v11 >= a2)
        break;
      ++v11;
    }
    while (v13 == 0x80000000);
    v14 = 0;
    v15 = 1;
    do
    {
      v16 = *(void **)(a1 + 8 * v14);
      if (v16)
        v17 = objc_msgSend(v16, "intValueForProperty:", 20);
      else
        v17 = 0x80000000;
      v14 = v15;
      if (v15 >= a2)
        break;
      ++v15;
    }
    while (v17 == 0x80000000);
    v18 = 0;
    if (v13 == 0x80000000)
      v19 = 0;
    else
      v19 = v13;
    v20 = 1;
    do
    {
      v21 = *(void **)(a1 + 8 * v18);
      if (v21)
      {
        objc_msgSend(v21, "floatValueForProperty:", 17);
        v23 = v22;
      }
      else
      {
        v23 = INFINITY;
      }
      v18 = v20;
      if (v20 >= a2)
        break;
      ++v20;
    }
    while (v23 == INFINITY);
    v24 = 0;
    if (v23 == INFINITY)
      v23 = 12.0;
    v25 = v23 * v9;
    v26 = 1;
    do
    {
      v27 = *(void **)(a1 + 8 * v24);
      if (v27)
      {
        objc_msgSend(v27, "floatValueForProperty:", 50);
        v29 = v28;
      }
      else
      {
        v29 = INFINITY;
      }
      v24 = v26;
      if (v26 >= a2)
        break;
      ++v26;
    }
    while (v29 == INFINITY);
    v30 = 0;
    if (v17 == 0x80000000)
      v31 = 0;
    else
      v31 = v17;
    v32 = 1;
    do
    {
      v33 = *(void **)(a1 + 8 * v30);
      if (v33)
        v34 = objc_msgSend(v33, "intValueForProperty:", 36);
      else
        v34 = 0x80000000;
      v30 = v32;
      if (v32 >= a2)
        break;
      ++v32;
    }
    while (v34 == 0x80000000);
    if (v29 == INFINITY)
      v29 = -1000.0;
    v35 = v25 / 100.0;
    if ((v34 | 0x80000000) != 0x80000000)
    {
      v36 = v19;
      v35 = v35 * 0.666666687;
      goto LABEL_48;
    }
  }
  else
  {
    v19 = 0;
    v31 = 0;
    v29 = -1000.0;
    v35 = v9 * 12.0 / 100.0;
  }
  v36 = v19;
LABEL_48:
  v37 = (void *)TSWPResolvePropertyForStyles(a1, a2, 43, 0);
  v38 = (id)TSWPResolvePropertyForStyles(a1, a2, 53, 0);
  v39 = 1;
  v40 = TSWPResolvePropertyForStyles(a1, a2, 54, 1);
  v41 = TSWPResolvePropertyForStyles(a1, a2, 55, 1);
  if (a2)
  {
    v42 = 0;
    v43 = 1;
    do
    {
      v44 = *(void **)(a1 + 8 * v42);
      if (v44)
        v45 = objc_msgSend(v44, "intValueForProperty:", 56);
      else
        v45 = 0x80000000;
      v42 = v43;
      if (v43 >= a2)
        break;
      ++v43;
    }
    while (v45 == 0x80000000);
    v39 = v45 == 0x80000000 || v45 == 0;
  }
  v47 = *MEMORY[0x24BDC4DE0];
  v48 = objc_msgSend((id)objc_msgSend(v38, "objectForKeyedSubscript:", *MEMORY[0x24BDC4DE0], v56), "mutableCopy");
  v49 = (void *)v48;
  if (v40)
  {
    if (!v48)
      v49 = (void *)objc_opt_new();
    objc_msgSend(v49, "setObject:forKeyedSubscript:", v40, *MEMORY[0x24BDC4E28]);
LABEL_65:
    v50 = 0;
    if (!v49)
      goto LABEL_66;
    goto LABEL_84;
  }
  if (!v41)
    goto LABEL_65;
  v50 = (void *)objc_msgSend(v38, "mutableCopy");
  if (!v50)
    v50 = (void *)objc_opt_new();
  objc_msgSend(v50, "setObject:forKeyedSubscript:", v41, *MEMORY[0x24BDC4D08]);
  if (!v49)
  {
LABEL_66:
    if (v39)
      goto LABEL_71;
    goto LABEL_67;
  }
LABEL_84:
  if (!v50)
  {
    v50 = (void *)objc_msgSend(v38, "mutableCopy");
    if (!v50)
      v50 = (void *)objc_opt_new();
  }
  objc_msgSend(v50, "setObject:forKeyedSubscript:", v49, v47);

  if (!v39)
  {
LABEL_67:
    if (v37)
      v51 = v37;
    else
      v51 = (void *)MEMORY[0x24BDBD1A8];
    v52 = *MEMORY[0x24BDC4D18];
    v58[0] = *MEMORY[0x24BDC4D28];
    v58[1] = v52;
    v59[0] = &unk_24D8FB0A0;
    v59[1] = &unk_24D8FB0B8;
    v37 = (void *)objc_msgSend(v51, "arrayByAddingObject:", objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v59, v58, 2));
  }
LABEL_71:
  if (v50)
    v38 = v50;
  if (v29 == -1000.0)
    v53 = *MEMORY[0x24BDF7888];
  else
    v53 = v29;
  if (v57)
    v54 = v57;
  else
    v54 = CFSTR("Helvetica");
  return TSWPCreateFontWithNameAttributesTraitsAndWeight((uint64_t)v54, v36 != 0, v31 != 0, (uint64_t)v38, v37, v29 != -1000.0, v35, v53);
}

const __CTFont *TSWPCreateFontWithNameAttributesTraitsAndWeight(uint64_t a1, int a2, int a3, uint64_t a4, void *a5, char a6, double a7, double a8)
{
  const __CTFont *UIFontForLanguage;
  id v17;
  CTFontSymbolicTraits SymbolicTraits;
  CTFontSymbolicTraits v19;
  int v20;
  CTFontRef CopyWithSymbolicTraits;
  const __CTFont *v22;
  CTFontRef v23;
  const __CTFont *v24;
  CTFontDescriptorRef v25;
  const __CTFontDescriptor *v26;
  id v27;
  const __CFDictionary *v28;
  const __CTFontDescriptor *CopyWithAttributes;
  const __CTFontDescriptor *v30;
  CTFontRef v31;
  const __CTFont *v32;

  if (!TSWPCreateFontWithNameAttributesTraitsAndWeight::gMissingFontNameCache
    || (objc_msgSend((id)TSWPCreateFontWithNameAttributesTraitsAndWeight::gMissingFontNameCache, "containsObject:", a1) & 1) == 0)
  {
    UIFontForLanguage = (const __CTFont *)TSWPCreateFontWithNameAttributesAndWeight(a1, a4, a7, a8);
    if (UIFontForLanguage)
      goto LABEL_8;
    v17 = (id)TSWPCreateFontWithNameAttributesTraitsAndWeight::gMissingFontNameCache;
    if (!TSWPCreateFontWithNameAttributesTraitsAndWeight::gMissingFontNameCache)
    {
      v17 = objc_alloc_init(MEMORY[0x24BDBCEF0]);
      TSWPCreateFontWithNameAttributesTraitsAndWeight::gMissingFontNameCache = (uint64_t)v17;
    }
    objc_msgSend(v17, "addObject:", a1);
  }
  UIFontForLanguage = CTFontCreateUIFontForLanguage(kCTFontUIFontSystem, a7, 0);
LABEL_8:
  SymbolicTraits = CTFontGetSymbolicTraits(UIFontForLanguage);
  v19 = SymbolicTraits;
  if ((a6 & 1) == 0 && ((((SymbolicTraits & 2) == 0) ^ a2) & 1) == 0)
  {
    v20 = a2 ? 2 : 0;
    CopyWithSymbolicTraits = CTFontCreateCopyWithSymbolicTraits(UIFontForLanguage, a7, 0, SymbolicTraits & 0xFFFFFFFD | v20, 2u);
    if (CopyWithSymbolicTraits)
    {
      v22 = CopyWithSymbolicTraits;
      if (UIFontForLanguage == CopyWithSymbolicTraits)
      {
        CFRelease(UIFontForLanguage);
      }
      else
      {
        CFRelease(UIFontForLanguage);
        UIFontForLanguage = v22;
      }
    }
  }
  if (((((v19 & 1) == 0) ^ a3) & 1) == 0)
  {
    v23 = CTFontCreateCopyWithSymbolicTraits(UIFontForLanguage, a7, 0, v19 & 0xFFFFFFFE | a3, 1u);
    if (v23)
    {
      v24 = v23;
      if (UIFontForLanguage == v23)
      {
        CFRelease(UIFontForLanguage);
      }
      else
      {
        CFRelease(UIFontForLanguage);
        UIFontForLanguage = v24;
      }
    }
  }
  if (objc_msgSend(a5, "count"))
  {
    v25 = CTFontCopyFontDescriptor(UIFontForLanguage);
    if (v25)
    {
      v26 = v25;
      v27 = objc_alloc(MEMORY[0x24BDBCE70]);
      v28 = (const __CFDictionary *)objc_msgSend(v27, "initWithObjectsAndKeys:", a5, *MEMORY[0x24BDC4D20], 0);
      CopyWithAttributes = CTFontDescriptorCreateCopyWithAttributes(v26, v28);
      if (CopyWithAttributes)
      {
        v30 = CopyWithAttributes;
        v31 = CTFontCreateWithFontDescriptor(CopyWithAttributes, a7, 0);
        if (v31)
        {
          v32 = v31;
          CFRelease(UIFontForLanguage);
          UIFontForLanguage = v32;
        }
        CFRelease(v30);
      }
      CFRelease(v26);

    }
  }
  return UIFontForLanguage;
}

uint64_t TSWPCreateFontWithNameAttributesAndWeight(uint64_t result, uint64_t a2, double a3, double a4)
{
  uint64_t v7;

  if (result)
  {
    v7 = result;
    -[TSWPLoadableFonts loadFontWithName:](+[TSWPLoadableFonts sharedInstance](TSWPLoadableFonts, "sharedInstance"), "loadFontWithName:", result);
    return objc_msgSend(+[TSWPFontCache sharedCache](TSWPFontCache, "sharedCache"), "createFontWithName:size:weight:attributes:", v7, a2, a3, a4);
  }
  return result;
}

void sub_217910BB4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_217910CA0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_217910D80(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

_QWORD *String(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;

  if (result && *result)
  {
    v2 = 0;
    v3 = 1;
    do
    {
      *(_DWORD *)(a2 + 4 * v2) = *(unsigned __int16 *)(result[1] + 16 * v2 + 8);
      v2 = v3;
    }
    while (*result > (unint64_t)v3++);
  }
  return result;
}

uint64_t TSWPLineFragment::truncatedCharIndex(TSWPLineFragment *this)
{
  const __CFArray *GlyphRuns;
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  const __CTRun *ValueAtIndex;
  const __CFDictionary *Attributes;
  CFIndex location;

  if ((*((_BYTE *)this + 26) & 0x80) == 0)
    return 0x7FFFFFFFFFFFFFFFLL;
  GlyphRuns = CTLineGetGlyphRuns(**((CTLineRef **)this + 24));
  if (!GlyphRuns)
    return 0x7FFFFFFFFFFFFFFFLL;
  v3 = GlyphRuns;
  Count = CFArrayGetCount(GlyphRuns);
  if (Count < 1)
    return 0x7FFFFFFFFFFFFFFFLL;
  v5 = Count;
  v6 = 0;
  while (1)
  {
    ValueAtIndex = (const __CTRun *)CFArrayGetValueAtIndex(v3, v6);
    Attributes = CTRunGetAttributes(ValueAtIndex);
    if (CFDictionaryContainsKey(Attributes, CFSTR("__TSWPTruncationKey")))
      break;
    if (v5 == ++v6)
      return 0x7FFFFFFFFFFFFFFFLL;
  }
  location = CTRunGetStringRange(ValueAtIndex).location;
  if (location != 0x7FFFFFFFFFFFFFFFLL)
    return objc_msgSend(*((id *)this + 23), "charIndexMappedToStorage:", location);
  else
    return 0x7FFFFFFFFFFFFFFFLL;
}

TSWPAttributeArray *TSWPAttributeArray::enumerateObjectAttributesInCharacterRange(TSWPAttributeArray *result, unint64_t a2, NSUInteger a3, uint64_t a4)
{
  TSWPAttributeArray *v7;
  unint64_t v8;
  TSWPAttributeArray *v9;
  uint64_t v10;
  NSUInteger v11;
  NSUInteger v12;
  NSUInteger v13;
  NSRange v14;
  char v15;
  NSRange v16;
  NSRange v17;

  if (a3)
  {
    v7 = result;
    v8 = TSWPAttributeArray::effectiveAttributeIndexForCharIndex(result, a2);
    result = (TSWPAttributeArray *)TSWPAttributeArray::effectiveAttributeIndexForCharIndex(v7, a3 + a2 - 1);
    v15 = 0;
    if (result != (TSWPAttributeArray *)0x7FFFFFFFFFFFFFFFLL)
    {
      v9 = result;
      if (v8 == 0x7FFFFFFFFFFFFFFFLL)
        v8 = 0;
      if (v8 <= (unint64_t)result)
      {
        v10 = (16 * v8) | 8;
        do
        {
          v11 = TSWPAttributeArray::rangeForAttributeIndex(v7, v8);
          v13 = v12;
          if (!(*((unsigned int (**)(TSWPAttributeArray *))v7->var0 + 2))(v7))
            v13 = 1;
          v16.location = a2;
          v16.length = a3;
          v17.location = v11;
          v17.length = v13;
          v14 = NSIntersectionRange(v16, v17);
          result = (TSWPAttributeArray *)v14.location;
          if (v14.length)
            result = (TSWPAttributeArray *)(*(uint64_t (**)(uint64_t, _QWORD, unint64_t, NSUInteger, NSUInteger, char *))(a4 + 16))(a4, *(_QWORD *)((char *)v7->var4 + v10), v8, v11, v13, &v15);
          if (v15)
            break;
          ++v8;
          v10 += 16;
        }
        while (v8 <= (unint64_t)v9);
      }
    }
  }
  return result;
}

uint64_t TSWPAttachmentAttributeArray::appliesToRange(TSWPAttachmentAttributeArray *this)
{
  return 0;
}

uint64_t TSKMainThreadRunLoopHash()
{
  objc_opt_class();
  return objc_msgSend((id)TSUDynamicCast(), "hash");
}

void sub_217911910(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 104);
  if (v3)
  {
    *(_QWORD *)(v1 - 96) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TSDCGContextHasBackgroundsSuppressed(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[6];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = 0;
  v3[0] = MEMORY[0x24BDAC760];
  v3[1] = 3221225472;
  v3[2] = __TSDCGContextHasBackgroundsSuppressed_block_invoke;
  v3[3] = &unk_24D82B7F0;
  v3[4] = &v4;
  v3[5] = a1;
  TSDAccessCGContextInfoDictionaryWithBlock(0, 0, (uint64_t)v3);
  v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2179119BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t TSDAccessCGContextInfoDictionaryWithBlock(uint64_t result, int a2, uint64_t a3)
{
  int v5;
  id v6;

  if (a3)
  {
    v5 = result;
    if (TSDAccessCGContextInfoDictionaryWithBlock_onceToken != -1)
      dispatch_once(&TSDAccessCGContextInfoDictionaryWithBlock_onceToken, &__block_literal_global_25);
    if (v5)
    {
      pthread_rwlock_wrlock(&TSDAccessCGContextInfoDictionaryWithBlock_rwlock);
      v6 = (id)TSDAccessCGContextInfoDictionaryWithBlock_sTSDCGContextInfoMap;
      if (!TSDAccessCGContextInfoDictionaryWithBlock_sTSDCGContextInfoMap && a2)
      {
        v6 = objc_alloc_init(MEMORY[0x24BEB3CE0]);
        TSDAccessCGContextInfoDictionaryWithBlock_sTSDCGContextInfoMap = (uint64_t)v6;
      }
    }
    else
    {
      pthread_rwlock_rdlock(&TSDAccessCGContextInfoDictionaryWithBlock_rwlock);
      v6 = (id)TSDAccessCGContextInfoDictionaryWithBlock_sTSDCGContextInfoMap;
    }
    if (v6)
      (*(void (**)(uint64_t))(a3 + 16))(a3);
    return pthread_rwlock_unlock(&TSDAccessCGContextInfoDictionaryWithBlock_rwlock);
  }
  return result;
}

void sub_2179125E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void **a38)
{
  a38 = (void **)&a22;
  std::vector<TSWPAdornmentLine>::__destroy_vector::operator()[abi:nn180100](&a38);
  _Unwind_Resume(a1);
}

CFIndex TSWPLineFragment::glyphCount(TSWPLineFragment *this)
{
  CTLineRef *v1;

  v1 = (CTLineRef *)*((_QWORD *)this + 24);
  if (*((CTLineRef **)this + 25) == v1)
    return 0;
  else
    return CTLineGetGlyphCount(*v1);
}

void sub_217913020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<unsigned long,TSWPFontHeightCacheEntry>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,TSWPFontHeightCacheEntry>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,TSWPFontHeightCacheEntry>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  char *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (char *)operator new(0x70uLL);
    *((_QWORD *)v11 + 4) = **a4;
    *((_QWORD *)v11 + 13) = 0;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t *std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<long long const,TSPData * {__weak}>,std::__unordered_map_hasher<long long const,std::__hash_value_type<long long const,TSPData * {__weak}>,TSP::ObjectIdentifierHash,std::equal_to<long long const>,true>,std::__unordered_map_equal<long long const,std::__hash_value_type<long long const,TSPData * {__weak}>,std::equal_to<long long const>,TSP::ObjectIdentifierHash,true>,std::allocator<std::__hash_value_type<long long const,TSPData * {__weak}>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<long long const,TSPData * {__weak}>,std::__unordered_map_hasher<long long const,std::__hash_value_type<long long const,TSPData * {__weak}>,TSP::ObjectIdentifierHash,std::equal_to<long long const>,true>,std::__unordered_map_equal<long long const,std::__hash_value_type<long long const,TSPData * {__weak}>,std::equal_to<long long const>,TSP::ObjectIdentifierHash,true>,std::allocator<std::__hash_value_type<long long const,TSPData * {__weak}>>>::__deallocate_node(a1, *(id **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<long long const,TSPData * {__weak}>,std::__unordered_map_hasher<long long const,std::__hash_value_type<long long const,TSPData * {__weak}>,TSP::ObjectIdentifierHash,std::equal_to<long long const>,true>,std::__unordered_map_equal<long long const,std::__hash_value_type<long long const,TSPData * {__weak}>,std::equal_to<long long const>,TSP::ObjectIdentifierHash,true>,std::allocator<std::__hash_value_type<long long const,TSPData * {__weak}>>>::__deallocate_node(uint64_t a1, id *a2)
{
  id *v2;
  id *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (id *)*v2;
      objc_destroyWeak(v2 + 3);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>,std::__unordered_map_hasher<std::array<unsigned char,20ul> const,std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>,TSP::DataDigestHash,TSP::DataDigestEqualTo,true>,std::__unordered_map_equal<std::array<unsigned char,20ul> const,std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>,TSP::DataDigestEqualTo,TSP::DataDigestHash,true>,std::allocator<std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>,std::__unordered_map_hasher<std::array<unsigned char,20ul> const,std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>,TSP::DataDigestHash,TSP::DataDigestEqualTo,true>,std::__unordered_map_equal<std::array<unsigned char,20ul> const,std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>,TSP::DataDigestEqualTo,TSP::DataDigestHash,true>,std::allocator<std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>>>::__deallocate_node(a1, *(id **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>,std::__unordered_map_hasher<std::array<unsigned char,20ul> const,std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>,TSP::DataDigestHash,TSP::DataDigestEqualTo,true>,std::__unordered_map_equal<std::array<unsigned char,20ul> const,std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>,TSP::DataDigestEqualTo,TSP::DataDigestHash,true>,std::allocator<std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>>>::__deallocate_node(uint64_t a1, id *a2)
{
  id *v2;
  id *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (id *)*v2;
      objc_destroyWeak(v2 + 5);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_217913B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)TSPObjectContext;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_217913C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)TSPDataManager;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_217913DC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t TSWPForegroundInit()
{
  uint64_t result;
  void *v1;
  uint64_t v2;

  result = objc_msgSend(MEMORY[0x24BDD17F0], "isMainThread");
  if ((result & 1) == 0)
  {
    v1 = (void *)objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v2 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void TSWPForegroundInit()");
    return objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/text/TSWPUtilities.mm"), 427, CFSTR("TSWPForegroundInit should be called on the main thread"));
  }
  return result;
}

void sub_217914304(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_217914408(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2179144B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<long long const,NSMutableArray * {__strong}>,std::__unordered_map_hasher<long long const,std::__hash_value_type<long long const,NSMutableArray * {__strong}>,TSP::IdentifierHash,std::equal_to<long long const>,true>,std::__unordered_map_equal<long long const,std::__hash_value_type<long long const,NSMutableArray * {__strong}>,std::equal_to<long long const>,TSP::IdentifierHash,true>,std::allocator<std::__hash_value_type<long long const,NSMutableArray * {__strong}>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<long long const,NSMutableArray * {__strong}>,std::__unordered_map_hasher<long long const,std::__hash_value_type<long long const,NSMutableArray * {__strong}>,TSP::IdentifierHash,std::equal_to<long long const>,true>,std::__unordered_map_equal<long long const,std::__hash_value_type<long long const,NSMutableArray * {__strong}>,std::equal_to<long long const>,TSP::IdentifierHash,true>,std::allocator<std::__hash_value_type<long long const,NSMutableArray * {__strong}>>>::__deallocate_node(a1, *(id **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<long long const,NSMutableArray * {__strong}>,std::__unordered_map_hasher<long long const,std::__hash_value_type<long long const,NSMutableArray * {__strong}>,TSP::IdentifierHash,std::equal_to<long long const>,true>,std::__unordered_map_equal<long long const,std::__hash_value_type<long long const,NSMutableArray * {__strong}>,std::equal_to<long long const>,TSP::IdentifierHash,true>,std::allocator<std::__hash_value_type<long long const,NSMutableArray * {__strong}>>>::__deallocate_node(uint64_t a1, id *a2)
{
  id *v2;
  id *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (id *)*v2;

      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_21791472C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t EQKit::Config::Operator::Dictionary::IdentifierMap::IdentifierMap(uint64_t this)
{
  *(_WORD *)this = 1;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 8) = this + 16;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  return this;
}

{
  *(_WORD *)this = 1;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 8) = this + 16;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  return this;
}

EQKit::Config::Operator::Dictionary::IdentifierMap *EQKit::Config::Operator::Dictionary::IdentifierMap::IdentifierMap(EQKit::Config::Operator::Dictionary::IdentifierMap *this, const EQKit::Config::Operator::Dictionary::IdentifierMap *a2)
{
  *(_WORD *)this = *(_WORD *)a2;
  std::map<std::string,unsigned short>::map[abi:nn180100]((uint64_t *)this + 1, (const void ***)a2 + 1);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  std::vector<std::string>::__init_with_size[abi:nn180100]<std::string*,std::string*>((std::string *)((char *)this + 32), *((__int128 **)a2 + 4), *((__int128 **)a2 + 5), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3));
  return this;
}

void sub_2179147E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(v2, *(char **)(v1 + 16));
  _Unwind_Resume(a1);
}

uint64_t EQKit::Config::Operator::Dictionary::IdentifierMap::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,unsigned short>,std::__tree_node<std::__value_type<std::string,unsigned short>,void *> *,long>>((uint64_t **)(a1 + 8), *(_QWORD **)(a2 + 8), (_QWORD *)(a2 + 16));
    std::vector<std::string>::__assign_with_size[abi:nn180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 32), *(std::string **)(a2 + 32), *(__int128 **)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
  }
  return a1;
}

uint64_t EQKit::Config::Operator::Dictionary::IdentifierMap::operator[](uint64_t a1, const void **a2)
{
  uint64_t v3;

  v3 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(a1 + 8, a2);
  if (a1 + 16 == v3)
    return 0;
  else
    return *(unsigned __int16 *)(v3 + 56);
}

uint64_t *EQKit::Config::Operator::Dictionary::IdentifierMap::operator[](uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  unsigned __int8 v3;

  if (a2)
  {
    v2 = *(_QWORD *)(a1 + 32);
    if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 40) - v2) >> 3) >= a2)
      return (uint64_t *)(v2 + 24 * a2 - 24);
  }
  if ((v3 & 1) != 0)
    return &EQKit::Config::Operator::Dictionary::IdentifierMap::operator[](unsigned short)const::sEmpty;
  {
    EQKit::Config::Operator::Dictionary::IdentifierMap::operator[](unsigned short)const::sEmpty = 0;
    *(_QWORD *)algn_254F21528 = 0;
    qword_254F21530 = 0;
  }
  return &EQKit::Config::Operator::Dictionary::IdentifierMap::operator[](unsigned short)const::sEmpty;
}

uint64_t EQKit::Config::Operator::Dictionary::IdentifierMap::add(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  std::__split_buffer<std::string>::pointer *v7;
  std::string *v8;
  std::__split_buffer<std::string>::pointer v9;
  std::string __p;
  __int16 v12;

  v4 = (uint64_t **)(a1 + 4);
  v5 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>((uint64_t)(a1 + 4), (const void **)a2);
  if (a1 + 8 != (unsigned __int16 *)v5)
    return *(unsigned __int16 *)(v5 + 56);
  v6 = *a1;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v12 = v6;
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned short>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = (std::__split_buffer<std::string>::pointer *)(a1 + 16);
  v8 = (std::string *)*((_QWORD *)a1 + 5);
  if ((unint64_t)v8 >= *((_QWORD *)a1 + 6))
  {
    v9 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v7, (__int128 *)a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:nn180100]<std::string const&>((uint64_t)v7, (__int128 *)a2);
    v9 = v8 + 1;
  }
  *((_QWORD *)a1 + 5) = v9;
  ++*a1;
  return v6;
}

void sub_217914A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

EQKit::Config::Operator::Dictionary::Entry *EQKit::Config::Operator::Dictionary::Entry::Entry(EQKit::Config::Operator::Dictionary::Entry *this)
{
  *(_DWORD *)this = 1;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 1;
  *((_QWORD *)this + 3) = 0;
  bzero((char *)this + 48, 1uLL);
  return this;
}

{
  *(_DWORD *)this = 1;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 1;
  *((_QWORD *)this + 3) = 0;
  bzero((char *)this + 48, 1uLL);
  return this;
}

double EQKit::Config::Operator::Dictionary::Entry::Entry(EQKit::Config::Operator::Dictionary::Entry *this, const EQKit::Config::Operator::Dictionary::Entry *a2)
{
  double result;

  *(_OWORD *)this = *(_OWORD *)a2;
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((_WORD *)this + 16) = *((_WORD *)a2 + 16);
  result = *((double *)a2 + 5);
  *((double *)this + 5) = result;
  *((_BYTE *)this + 48) = *((_BYTE *)a2 + 48);
  return result;
}

{
  double result;

  *(_OWORD *)this = *(_OWORD *)a2;
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((_WORD *)this + 16) = *((_WORD *)a2 + 16);
  result = *((double *)a2 + 5);
  *((double *)this + 5) = result;
  *((_BYTE *)this + 48) = *((_BYTE *)a2 + 48);
  return result;
}

double EQKit::Config::Operator::Dictionary::Entry::operator=(uint64_t a1, uint64_t a2)
{
  double result;

  if (a2 != a1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
    result = *(double *)(a2 + 40);
    *(double *)(a1 + 40) = result;
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  }
  return result;
}

uint64_t EQKit::Config::Operator::Dictionary::Dictionary(uint64_t this)
{
  *(_WORD *)this = 1;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 8) = this + 16;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 64) = 0;
  *(_QWORD *)(this + 56) = this + 64;
  *(_QWORD *)(this + 88) = 0;
  *(_QWORD *)(this + 72) = 0;
  *(_QWORD *)(this + 80) = this + 88;
  *(_QWORD *)(this + 120) = 0;
  *(_QWORD *)(this + 112) = 0;
  *(_QWORD *)(this + 96) = 0;
  *(_QWORD *)(this + 104) = this + 112;
  return this;
}

{
  *(_WORD *)this = 1;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 8) = this + 16;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 64) = 0;
  *(_QWORD *)(this + 56) = this + 64;
  *(_QWORD *)(this + 88) = 0;
  *(_QWORD *)(this + 72) = 0;
  *(_QWORD *)(this + 80) = this + 88;
  *(_QWORD *)(this + 120) = 0;
  *(_QWORD *)(this + 112) = 0;
  *(_QWORD *)(this + 96) = 0;
  *(_QWORD *)(this + 104) = this + 112;
  return this;
}

void EQKit::Config::Operator::Dictionary::~Dictionary(EQKit::Config::Operator::Dictionary *this)
{
  void **v2;

  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 104, *((_QWORD **)this + 14));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 80, *((_QWORD **)this + 11));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 56, *((_QWORD **)this + 8));
  v2 = (void **)((char *)this + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v2);
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy((uint64_t)this + 8, *((char **)this + 2));
}

unsigned __int16 *EQKit::Config::Operator::Dictionary::dictionaryFromURL(EQKit::Config::Operator::Dictionary *this, NSURL *a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  unsigned __int16 v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  __int16 v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  double v20;
  uint64_t i;
  void *v22;
  int v23;
  void *v24;
  int v25;
  int v26;
  _QWORD *v27;
  uint64_t **v28;
  char v29;
  uint64_t *v30;
  EQKit::Config::Operator::Dictionary *v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  uint64_t *v35;
  uint64_t *v36;
  BOOL v37;
  uint64_t **v39;
  uint64_t v40;
  uint64_t **v41;
  id obj;
  uint64_t v43;
  uint64_t **v44;
  __int16 v45;
  uint64_t v46;
  uint64_t *v47;
  unsigned __int16 *v48;
  int v49;
  unsigned __int16 v50[2];
  int v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  void *__p[2];
  char v57;
  unsigned __int16 v58;
  __int128 v59;
  __int128 v60;
  __int16 v61;
  double v62;
  char v63[8];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _BYTE v68[128];
  _BYTE v69[128];
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  obj = (id)objc_msgSend(objc_alloc(MEMORY[0x24BDBCE30]), "initWithContentsOfURL:", this);
  if (!objc_msgSend(obj, "count") || (v2 = (char *)operator new(0x80uLL, MEMORY[0x24BEDB6B8])) == 0)
  {
LABEL_82:
    v48 = 0;
    goto LABEL_83;
  }
  *(_WORD *)v2 = 1;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = 0;
  *((_QWORD *)v2 + 4) = 0;
  *((_QWORD *)v2 + 1) = v2 + 16;
  *((_QWORD *)v2 + 8) = 0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 6) = 0;
  *((_QWORD *)v2 + 7) = v2 + 64;
  v39 = (uint64_t **)(v2 + 56);
  *((_QWORD *)v2 + 9) = 0;
  *((_QWORD *)v2 + 11) = 0;
  *((_QWORD *)v2 + 10) = v2 + 88;
  v44 = (uint64_t **)(v2 + 80);
  *((_QWORD *)v2 + 12) = 0;
  *((_QWORD *)v2 + 14) = 0;
  v47 = (uint64_t *)(v2 + 112);
  v48 = (unsigned __int16 *)v2;
  *((_QWORD *)v2 + 13) = v2 + 112;
  v41 = (uint64_t **)(v2 + 104);
  *((_QWORD *)v2 + 15) = 0;
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v43 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v64, v69, 16);
  if (!v43)
  {
    v29 = 0;
    goto LABEL_68;
  }
  v40 = *(_QWORD *)v65;
  while (2)
  {
    v3 = 0;
    do
    {
      if (*(_QWORD *)v65 != v40)
      {
        v4 = v3;
        objc_enumerationMutation(obj);
        v3 = v4;
      }
      v46 = v3;
      v5 = *(void **)(*((_QWORD *)&v64 + 1) + 8 * v3);
      LODWORD(v59) = 1;
      *((_QWORD *)&v59 + 1) = 0;
      LODWORD(v60) = 1;
      *((_QWORD *)&v60 + 1) = 0;
      bzero(v63, 1uLL);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        NSLog((NSString *)CFSTR("invalid item class: %@"), v5);
LABEL_67:
        v29 = 1;
        goto LABEL_68;
      }
      v6 = (void *)objc_msgSend(v5, "objectForKey:", CFSTR("char"));
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        NSLog((NSString *)CFSTR("missing/invalid '%@': %@"), CFSTR("char"), v5);
        goto LABEL_67;
      }
      v58 = 0;
      std::string::basic_string[abi:nn180100]<0>(__p, (char *)objc_msgSend(v6, "UTF8String"));
      v7 = EQKit::Config::Operator::Dictionary::IdentifierMap::add(v48, (uint64_t)__p);
      if (v57 < 0)
        operator delete(__p[0]);
      v58 = v7;
      v8 = (void *)objc_msgSend(v5, "objectForKey:", CFSTR("form"));
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        std::string::basic_string[abi:nn180100]<0>(__p, (char *)objc_msgSend(v8, "UTF8String"));
        v49 = EQKit::Config::Operator::formFromMathMLString((const void **)__p, 0);
        if (v57 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v49 = 0;
      }
      v9 = (void *)objc_msgSend(v5, "objectForKey:", CFSTR("lspace"));
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v10 = objc_msgSend(v9, "integerValue");
      else
        v10 = 0;
      LODWORD(v59) = 3;
      *((double *)&v59 + 1) = (double)v10 / 18.0;
      v11 = (void *)objc_msgSend(v5, "objectForKey:", CFSTR("rspace"));
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v12 = objc_msgSend(v11, "integerValue");
      else
        v12 = 0;
      LODWORD(v60) = 3;
      *((double *)&v60 + 1) = (double)v12 / 18.0;
      v13 = (void *)objc_msgSend(v5, "objectForKey:", CFSTR("prio"));
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v14 = objc_msgSend(v13, "unsignedIntegerValue");
      else
        v14 = 0;
      v45 = v14;
      v61 = v14;
      v15 = (void *)objc_msgSend(v5, "objectForKey:", CFSTR("flags"));
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        if (objc_msgSend(v15, "length"))
        {
          v16 = (void *)objc_msgSend(v15, "componentsSeparatedByCharactersInSet:", objc_msgSend(MEMORY[0x24BDD14A8], "characterSetWithCharactersInString:", CFSTR(",")));
          v54 = 0u;
          v55 = 0u;
          v52 = 0u;
          v53 = 0u;
          v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v52, v68, 16);
          if (v17)
          {
            v18 = *(_QWORD *)v53;
            v19 = v63[0];
            v20 = v62;
            do
            {
              for (i = 0; i != v17; ++i)
              {
                if (*(_QWORD *)v53 != v18)
                  objc_enumerationMutation(v16);
                v22 = *(void **)(*((_QWORD *)&v52 + 1) + 8 * i);
                if (objc_msgSend(v22, "isEqualToString:", CFSTR("stretchy")))
                {
                  v19 |= 1u;
                }
                else if (objc_msgSend(v22, "isEqualToString:", CFSTR("symmetric")))
                {
                  v19 |= 2u;
                }
                else if (objc_msgSend(v22, "isEqualToString:", CFSTR("largeop")))
                {
                  if ((v19 & 0x80u) != 0)
                  {
                    v23 = 4;
                  }
                  else
                  {
                    v20 = 1.0;
                    v23 = -124;
                  }
                  v19 |= v23;
                }
                else if (objc_msgSend(v22, "isEqualToString:", CFSTR("fence")))
                {
                  v19 |= 0x10u;
                }
                else if (objc_msgSend(v22, "isEqualToString:", CFSTR("accent")))
                {
                  v19 |= 8u;
                }
                else if (objc_msgSend(v22, "isEqualToString:", CFSTR("movablelimits")))
                {
                  v19 |= 0x20u;
                }
                else if (objc_msgSend(v22, "isEqualToString:", CFSTR("relational")))
                {
                  v19 |= 0x40u;
                }
                else if (objc_msgSend(v22, "hasPrefix:", CFSTR("cramped=")))
                {
                  v24 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD17A8]), "initWithString:", v22);
                  LODWORD(__p[0]) = 0;
                  if (objc_msgSend(v24, "scanString:intoString:", CFSTR("cramped="), 0)
                    && objc_msgSend(v24, "scanFloat:", __p))
                  {
                    v25 = objc_msgSend(v24, "isAtEnd");
                    v26 = *(float *)__p == 0.0 ? 0 : v25;
                    if (v26 == 1)
                    {
                      v19 |= 0xFFFFFF80;
                      v20 = *(float *)__p;
                    }
                  }

                }
              }
              v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v52, v68, 16);
            }
            while (v17);
            v63[0] = v19;
            v62 = v20;
          }
        }
      }
      v50[0] = v58;
      v51 = v49;
      __p[0] = v50;
      v27 = std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::__emplace_unique_key_args<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned short,EQKit::Config::Operator::Form>&&>,std::tuple<>>(v39, v50, (uint64_t)&std::piecewise_construct, (_QWORD **)__p);
      *(_OWORD *)(v27 + 5) = v59;
      *(_OWORD *)(v27 + 7) = v60;
      *((_WORD *)v27 + 36) = v45;
      *((double *)v27 + 10) = v62;
      *((_BYTE *)v27 + 88) = v63[0];
      __p[0] = &v58;
      *((_DWORD *)std::__tree<std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,EQKit::Config::Operator::Form>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v44, &v58, (uint64_t)&std::piecewise_construct, (_WORD **)__p)+ 8) = v49;
      __p[0] = &v58;
      v28 = std::__tree<std::__value_type<unsigned short,unsigned long>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,unsigned long>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,unsigned long>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v41, &v58, (uint64_t)&std::piecewise_construct, (_WORD **)__p);
      v28[5] = (uint64_t *)((unint64_t)v28[5] | (1 << v49));
      v3 = v46 + 1;
    }
    while (v46 + 1 != v43);
    v43 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v64, v69, 16);
    v29 = 0;
    if (v43)
      continue;
    break;
  }
LABEL_68:
  v30 = *v41;
  v31 = (EQKit::Config::Operator::Dictionary *)v48;
  if (*v41 != v47)
  {
    do
    {
      v32 = v30[5];
      if (v32)
      {
        v33 = 0;
        do
        {
          v33 += v32 & 1;
          v34 = v32 > 1;
          v32 >>= 1;
        }
        while (v34);
        if (v33 >= 2)
        {
          std::__tree<std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,EQKit::Config::Operator::Form>>>::__erase_unique<unsigned short>((uint64_t)v44, (unsigned __int16 *)v30 + 16);
          v31 = (EQKit::Config::Operator::Dictionary *)v48;
        }
      }
      v35 = (uint64_t *)v30[1];
      if (v35)
      {
        do
        {
          v36 = v35;
          v35 = (uint64_t *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          v36 = (uint64_t *)v30[2];
          v37 = *v36 == (_QWORD)v30;
          v30 = v36;
        }
        while (!v37);
      }
      v30 = v36;
    }
    while (v36 != v47);
  }
  if ((v29 & 1) != 0)
  {
    EQKit::Config::Operator::Dictionary::~Dictionary(v31);
    MEMORY[0x219A153B8]();
    goto LABEL_82;
  }
LABEL_83:

  return v48;
}

void sub_217915444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a39 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *EQKit::Config::Operator::Dictionary::lookup(uint64_t a1, unsigned __int16 a2, int a3)
{
  int v4;
  uint64_t *v5;
  unsigned __int16 v7[2];
  int v8;

  if (a3)
    v4 = a3;
  else
    v4 = 2;
  v7[0] = a2;
  v8 = v4;
  v5 = std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::find<std::pair<unsigned short,EQKit::Config::Operator::Form>>(a1 + 56, v7);
  if ((uint64_t *)(a1 + 64) == v5)
    return 0;
  else
    return v5 + 5;
}

uint64_t EQKit::Config::Operator::Dictionary::operatorId(uint64_t a1, const void **a2)
{
  uint64_t v3;

  v3 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(a1 + 8, a2);
  if (a1 + 16 == v3)
    return 0;
  else
    return *(unsigned __int16 *)(v3 + 56);
}

uint64_t EQKit::Config::Operator::Dictionary::formForOperatorId(EQKit::Config::Operator::Dictionary *this, unsigned int a2)
{
  char *v2;
  char **v3;
  char *v4;
  char *v5;
  unsigned int v6;
  BOOL v7;
  char **v8;

  v4 = (char *)*((_QWORD *)this + 11);
  v2 = (char *)this + 88;
  v3 = (char **)v4;
  if (!v4)
    return 0;
  v5 = v2;
  do
  {
    v6 = *((unsigned __int16 *)v3 + 14);
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = (char *)v3;
    v3 = (char **)*v8;
  }
  while (*v8);
  if (v5 != v2 && *((unsigned __int16 *)v5 + 14) <= a2)
    return *((unsigned int *)v5 + 8);
  else
    return 0;
}

uint64_t EQKit::Config::Operator::Dictionary::formMaskForOperatorId(EQKit::Config::Operator::Dictionary *this, unsigned int a2)
{
  char *v2;
  char **v3;
  char *v4;
  char *v5;
  unsigned int v6;
  BOOL v7;
  char **v8;

  v4 = (char *)*((_QWORD *)this + 14);
  v2 = (char *)this + 112;
  v3 = (char **)v4;
  if (!v4)
    return 0;
  v5 = v2;
  do
  {
    v6 = *((unsigned __int16 *)v3 + 16);
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = (char *)v3;
    v3 = (char **)*v8;
  }
  while (*v8);
  if (v5 != v2 && *((unsigned __int16 *)v5 + 16) <= a2)
    return *((_QWORD *)v5 + 5);
  else
    return 0;
}

uint64_t EQKit::Config::Operator::Dictionary::enumerateEntries(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;

  v2 = *(_QWORD **)(result + 56);
  v3 = (_QWORD *)(result + 64);
  if (v2 != (_QWORD *)(result + 64))
  {
    v5 = result;
    do
    {
      v6 = *((unsigned int *)v2 + 9);
      v7 = EQKit::Config::Operator::Dictionary::IdentifierMap::operator[](v5, *((unsigned __int16 *)v2 + 16));
      result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, _QWORD *))(a2 + 16))(a2, v7, v6, v2 + 5);
      v8 = (_QWORD *)v2[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v2[2];
          v10 = *v9 == (_QWORD)v2;
          v2 = v9;
        }
        while (!v10);
      }
      v2 = v9;
    }
    while (v9 != v3);
  }
  return result;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
  abort();
}

void std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:nn180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t *std::map<std::string,unsigned short>::map[abi:nn180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,unsigned short>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,unsigned short>,std::__tree_node<std::__value_type<std::string,unsigned short>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_2179157E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,unsigned short>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,unsigned short>,std::__tree_node<std::__value_type<std::string,unsigned short>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,unsigned short> const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,unsigned short> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__construct_node<std::pair<std::string const,unsigned short> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

const void **std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__find_equal<std::string>(_QWORD *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  const void **v9;
  const void **v11;
  const void **v12;
  uint64_t v13;
  const void **v14;
  const void **v15;
  uint64_t *v16;
  BOOL v17;
  const void **v18;

  v9 = (const void **)(a1 + 1);
  if (a1 + 1 == a2 || std::less<std::string>::operator()[abi:nn180100]((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if ((uint64_t *)*a1 == a2)
    {
      v12 = (const void **)a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = (const void **)a2;
        return (const void **)a2;
      }
    }
    v11 = (const void **)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (const void **)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (const void **)v16[2];
        v17 = *v12 == v16;
        v16 = (uint64_t *)v12;
      }
      while (v17);
    }
    if (std::less<std::string>::operator()[abi:nn180100]((uint64_t)(a1 + 2), v12 + 4, a5))
      goto LABEL_16;
    return (const void **)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
  }
  if (std::less<std::string>::operator()[abi:nn180100]((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (const void **)a2[1];
      do
      {
        v15 = v14;
        v14 = (const void **)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = (const void **)a2;
      do
      {
        v15 = (const void **)v18[2];
        v17 = *v15 == v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::string>::operator()[abi:nn180100]((uint64_t)(a1 + 2), a5, v15 + 4))
        return (const void **)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const void **)a2;
    }
    return (const void **)a4;
  }
  *a3 = (const void **)a2;
  *a4 = (uint64_t)a2;
  return (const void **)a4;
}

void std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__construct_node<std::pair<std::string const,unsigned short> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  *((_WORD *)v6 + 28) = *(_WORD *)(a2 + 24);
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_217915B20(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,unsigned short>,void *>>>::operator()[abi:nn180100](v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  const void **v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = (_QWORD *)v4;
        v9 = (const void **)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:nn180100](v7, a3, (const void **)(v4 + 32)))
          break;
        v4 = *v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<std::string>::operator()[abi:nn180100](v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

BOOL std::less<std::string>::operator()[abi:nn180100](uint64_t a1, const void **a2, const void **a3)
{
  int v3;
  int v4;
  size_t v5;
  const void *v6;
  size_t v7;
  const void *v8;
  size_t v9;
  int v10;

  v3 = *((char *)a3 + 23);
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  if (v4 >= 0)
    v6 = a2;
  else
    v6 = *a2;
  if (v3 >= 0)
    v7 = *((unsigned __int8 *)a3 + 23);
  else
    v7 = (size_t)a3[1];
  if (v3 >= 0)
    v8 = a3;
  else
    v8 = *a3;
  if (v7 >= v5)
    v9 = v5;
  else
    v9 = v7;
  v10 = memcmp(v6, v8, v9);
  if (v10)
    return v10 < 0;
  else
    return v5 < v7;
}

uint64_t *std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,unsigned short>,void *>>>::operator()[abi:nn180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

std::string *std::vector<std::string>::__init_with_size[abi:nn180100]<std::string*,std::string*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:nn180100](result, a4);
    result = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((int)v6 + 16, a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_217915E78(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(24 * a2);
}

std::string *std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(int a1, __int128 *a2, __int128 *a3, std::string *this)
{
  __int128 *v6;
  __int128 v7;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
      }
      else
      {
        v7 = *v6;
        this->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      ++this;
    }
    while (v6 != a3);
  }
  return this;
}

uint64_t **std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,unsigned short>,std::__tree_node<std::__value_type<std::string,unsigned short>,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t **leaf_high;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t **v15;
  uint64_t *v16;
  const void **v17;
  uint64_t v18;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = (const void **)v8;
    if (v8)
    {
      v16 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          *((_WORD *)v8 + 28) = *((_WORD *)v9 + 28);
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(v5, v18, leaf_high, (uint64_t *)v17);
          v17 = (const void **)v16;
          if (v16)
            v16 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (_QWORD *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v12 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = (uint64_t *)v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:nn180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__emplace_multi<std::pair<std::string const,unsigned short> const&>(v5, (uint64_t)(a2 + 4));
      v13 = (_QWORD *)a2[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)a2[2];
          v12 = *v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_2179160F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:nn180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__find_leaf_high(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *result;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v5 = (_QWORD *)v4;
        if (!std::less<std::string>::operator()[abi:nn180100](v7, a3, (const void **)(v4 + 32)))
          break;
        v4 = *v5;
        result = v5;
        if (!*v5)
          goto LABEL_9;
      }
      v4 = v5[1];
    }
    while (v4);
    result = v5 + 1;
  }
  else
  {
    result = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

_QWORD *std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:nn180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(*(_QWORD *)a1, *(char **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = *(_QWORD *)(v3 + 16);
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(*(_QWORD *)a1, (char *)v2);
  }
  return a1;
}

const void **std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__emplace_multi<std::pair<std::string const,unsigned short> const&>(uint64_t **a1, uint64_t a2)
{
  uint64_t **leaf_high;
  uint64_t v5;
  const void **v6;

  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__construct_node<std::pair<std::string const,unsigned short> const&>((uint64_t)a1, a2, (uint64_t)&v6);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__find_leaf_high((uint64_t)a1, &v5, v6 + 4);
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v5, leaf_high, (uint64_t *)v6);
  return v6;
}

void sub_21791627C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,unsigned short>,void *>>>::operator()[abi:nn180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

void std::vector<std::string>::__assign_with_size[abi:nn180100]<std::string*,std::string*>(std::vector<std::string> *this, std::string *__str, __int128 *a3, unint64_t a4)
{
  int v8;
  std::string *begin;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::vector<std::string>::pointer end;

  v8 = (_DWORD)this + 16;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:nn180100](this, v11);
    v12 = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(v8, (__int128 *)__str, a3, this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, v13, begin);
    v12 = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(v8, (__int128 *)v13, a3, this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, (std::string *)a3, begin);
  v15 = v14;
  end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(end[-1].__r_.__value_.__l.__data_);
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_217916400(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_217916408(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:nn180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

std::string *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(std::string *__str, std::string *a2, std::string *this)
{
  const std::string *v4;

  v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

uint64_t std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t *v8;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = a1 + 8;
  do
  {
    v7 = std::less<std::string>::operator()[abi:nn180100](v5, (const void **)(v3 + 32), a2);
    v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:nn180100](v5, a2, (const void **)(v6 + 32)))
    return v2;
  return v6;
}

uint64_t *std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned short>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__construct_node<std::pair<std::string const,unsigned short> const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

void std::vector<std::string>::__construct_one_at_end[abi:nn180100]<std::string const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3 + 24;
}

void sub_217916600(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::__split_buffer<std::string>::pointer std::vector<std::string>::__push_back_slow_path<std::string const&>(std::__split_buffer<std::string>::pointer *a1, __int128 *a2)
{
  std::__split_buffer<std::string>::pointer v2;
  unint64_t v3;
  unint64_t v4;
  std::allocator<std::string> *v7;
  std::__split_buffer<std::string>::pointer v8;
  unint64_t v9;
  unint64_t v10;
  std::string *v11;
  std::__split_buffer<std::string>::pointer begin;
  __int128 v13;
  std::__split_buffer<std::string>::pointer end;
  unint64_t v15;
  std::__split_buffer<std::string>::pointer v16;
  __int128 v17;
  int64x2_t v18;
  std::__split_buffer<std::string>::pointer v19;
  std::string *v20;
  std::__split_buffer<std::string> v22;

  v2 = *a1;
  v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  v8 = a1[2];
  v7 = (std::allocator<std::string> *)(a1 + 2);
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v2) >> 3);
  if (2 * v9 > v4)
    v4 = 2 * v9;
  if (v9 >= 0x555555555555555)
    v10 = 0xAAAAAAAAAAAAAAALL;
  else
    v10 = v4;
  v22.__end_cap_.__value_ = v7;
  if (v10)
    v11 = (std::string *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)v7, v10);
  else
    v11 = 0;
  begin = v11 + v3;
  v22.__first_ = v11;
  v22.__begin_ = begin;
  v22.__end_ = begin;
  v22.__end_cap_.__value_ = &v11[v10];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(begin, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    begin = v22.__begin_;
    end = v22.__end_;
  }
  else
  {
    v13 = *a2;
    begin->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&begin->__r_.__value_.__l.__data_ = v13;
    end = v11 + v3;
  }
  v16 = *a1;
  v15 = (unint64_t)a1[1];
  if ((std::__split_buffer<std::string>::pointer)v15 == *a1)
  {
    v18 = vdupq_n_s64(v15);
  }
  else
  {
    do
    {
      v17 = *(_OWORD *)(v15 - 24);
      begin[-1].__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 - 8);
      *(_OWORD *)&begin[-1].__r_.__value_.__l.__data_ = v17;
      --begin;
      *(_QWORD *)(v15 - 16) = 0;
      *(_QWORD *)(v15 - 8) = 0;
      *(_QWORD *)(v15 - 24) = 0;
      v15 -= 24;
    }
    while ((std::__split_buffer<std::string>::pointer)v15 != v16);
    v18 = *(int64x2_t *)a1;
  }
  v19 = end + 1;
  *a1 = begin;
  a1[1] = end + 1;
  *(int64x2_t *)&v22.__begin_ = v18;
  v20 = a1[2];
  a1[2] = v22.__end_cap_.__value_;
  v22.__end_cap_.__value_ = v20;
  v22.__first_ = (std::__split_buffer<std::string>::pointer)v18.i64[0];
  std::__split_buffer<std::string>::~__split_buffer(&v22);
  return v19;
}

void sub_21791675C(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::__destruct_at_end[abi:nn180100]((uint64_t)this, (void **)&this->__begin_->__r_.__value_.__l.__data_);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:nn180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

_QWORD *std::string::basic_string[abi:nn180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

_QWORD *std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::__emplace_unique_key_args<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned short,EQKit::Config::Operator::Form>&&>,std::tuple<>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::__find_equal<std::pair<unsigned short,EQKit::Config::Operator::Form>>((uint64_t)a1, &v10, a2);
  v7 = (_QWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x60uLL);
    v7[4] = **a4;
    *((_DWORD *)v7 + 10) = 1;
    v7[6] = 0;
    *((_DWORD *)v7 + 14) = 1;
    v7[8] = 0;
    bzero(v7 + 11, 1uLL);
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v10, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::__find_equal<std::pair<unsigned short,EQKit::Config::Operator::Form>>(uint64_t a1, _QWORD *a2, unsigned __int16 *a3)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  unsigned int v6;
  int v7;
  uint64_t *v8;
  unsigned int v9;
  int v10;

  v5 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *a3;
    v7 = *((_DWORD *)a3 + 1);
    while (1)
    {
      while (1)
      {
        v8 = v4;
        v9 = *((unsigned __int16 *)v4 + 16);
        if (v6 >= v9)
          break;
LABEL_4:
        v4 = (uint64_t *)*v8;
        result = v8;
        if (!*v8)
          goto LABEL_12;
      }
      if (v9 >= v6)
      {
        v10 = *((_DWORD *)v8 + 9);
        if (v7 < v10)
          goto LABEL_4;
        if (v10 >= v7)
          goto LABEL_12;
      }
      result = v8 + 1;
      v4 = (uint64_t *)v8[1];
      if (!v4)
        goto LABEL_12;
    }
  }
  v8 = result;
LABEL_12:
  *a2 = v8;
  return result;
}

uint64_t **std::__tree<std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,EQKit::Config::Operator::Form>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _WORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((unsigned __int16 *)v6 + 14);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x28uLL);
    v11[14] = **a4;
    *((_DWORD *)v11 + 8) = 0;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **std::__tree<std::__value_type<unsigned short,unsigned long>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,unsigned long>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,unsigned long>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _WORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((unsigned __int16 *)v6 + 16);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[16] = **a4;
    *((_QWORD *)v11 + 5) = 0;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t std::__tree<std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,EQKit::Config::Operator::Form>>>::__erase_unique<unsigned short>(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = *(unsigned __int16 *)(v2 + 28);
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(unsigned __int16 *)(v4 + 28))
    return 0;
  std::__tree<std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,EQKit::Config::Operator::Form>>>::__remove_node_pointer((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

uint64_t *std::__tree<std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,EQKit::Config::Operator::Form>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

uint64_t *std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::find<std::pair<unsigned short,EQKit::Config::Operator::Form>>(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  unsigned int v5;
  int v6;
  uint64_t *v7;
  unsigned int v8;
  unsigned int v9;

  v4 = *(uint64_t **)(a1 + 8);
  v2 = (uint64_t *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v2;
  v5 = *a2;
  v6 = *((_DWORD *)a2 + 1);
  v7 = v2;
  do
  {
    v8 = *((unsigned __int16 *)v3 + 16);
    if (v8 >= v5)
    {
      if (v5 >= v8)
      {
        if (*((_DWORD *)v3 + 9) < v6)
          ++v3;
        else
          v7 = v3;
      }
      else
      {
        v7 = v3;
      }
    }
    else
    {
      ++v3;
    }
    v3 = (uint64_t *)*v3;
  }
  while (v3);
  if (v7 == v2)
    return v2;
  v9 = *((unsigned __int16 *)v7 + 16);
  if (v5 < v9 || v9 >= v5 && v6 < *((_DWORD *)v7 + 9))
    return v2;
  return v7;
}

uint64_t NoExternalEntityLoader(const char *a1, const char *a2, _xmlParserCtxt *a3)
{
  return 0;
}

BOOL EQKitLength::isNamedspaceString(uint64_t a1, const void **a2)
{
  uint64_t v3;

  if (_map(void)::onceToken != -1)
    dispatch_once(&_map(void)::onceToken, &__block_literal_global);
  v3 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(_map(void)::map, a2);
  if (_map(void)::onceToken != -1)
    dispatch_once(&_map(void)::onceToken, &__block_literal_global);
  return _map(void)::map + 8 != v3;
}

uint64_t EQKitLength::EQKitLengthFromMathMLString(uint64_t a1, const void **a2)
{
  uint64_t v3;

  if (_map(void)::onceToken != -1)
    dispatch_once(&_map(void)::onceToken, &__block_literal_global);
  v3 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(_map(void)::map, a2);
  if (_map(void)::onceToken != -1)
    dispatch_once(&_map(void)::onceToken, &__block_literal_global);
  if (_map(void)::map + 8 == v3)
    return 1;
  else
    return 3;
}

uint64_t EQKitLength::EQKitLength(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  _WORD *p_p;
  uint64_t v10;
  int v11;
  double v12;
  double v13;
  double v14;
  double v15;
  _BOOL8 v17;
  _BOOL8 isNamedspaceString;
  uint64_t v19;
  void *__p;
  uint64_t v21;
  char v22;
  float v23;

  *(_DWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  if (*((char *)a2 + 23) >= 0)
    v4 = a2;
  else
    v4 = (uint64_t *)*a2;
  v5 = (void *)objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v4);
  v6 = objc_msgSend(v5, "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x24BDD14A8], "whitespaceCharacterSet"));
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD17A8]), "initWithString:", v6);
  v23 = 0.0;
  objc_msgSend(v7, "scanFloat:", &v23);
  *(double *)(a1 + 8) = v23;
  v8 = (void *)objc_msgSend((id)objc_msgSend(v7, "string"), "substringFromIndex:", objc_msgSend(v7, "scanLocation"));
  std::string::basic_string[abi:nn180100]<0>(&__p, (char *)objc_msgSend((id)objc_msgSend(v8, "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x24BDD14A8], "whitespaceCharacterSet")), "UTF8String"));

  if ((v22 & 0x80000000) == 0)
  {
    if (v22 != 1)
    {
      if (v22 != 2)
      {
        if (v22 != 4)
          goto LABEL_35;
        if ((_DWORD)__p != 1701606770)
          goto LABEL_9;
LABEL_50:
        v11 = 5;
        goto LABEL_44;
      }
      if ((unsigned __int16)__p != 29808)
      {
        if ((unsigned __int16)__p != 30821)
          goto LABEL_20;
        goto LABEL_26;
      }
LABEL_43:
      v11 = 1;
      goto LABEL_44;
    }
    if (__p != 37)
      goto LABEL_35;
LABEL_25:
    v11 = 4;
LABEL_44:
    *(_DWORD *)a1 = v11;
    goto LABEL_45;
  }
  v10 = v21;
  if (v21 == 1 && *(_BYTE *)__p == 37)
    goto LABEL_25;
  if (v21 != 2)
  {
LABEL_29:
    if (v10 == 4)
    {
      if (*(_DWORD *)__p == 1701606770)
        goto LABEL_50;
      v10 = v21;
    }
    if (v10 != 2)
      goto LABEL_35;
    p_p = __p;
    goto LABEL_34;
  }
  if (*(_WORD *)__p == 29808)
    goto LABEL_43;
  if (*(_WORD *)__p == 30821)
  {
LABEL_26:
    v11 = 2;
    goto LABEL_44;
  }
  if (v22 < 0)
  {
    if (*(_WORD *)__p == 28005)
      goto LABEL_61;
    v10 = v21;
    goto LABEL_29;
  }
  if (v22 != 2)
    goto LABEL_35;
LABEL_20:
  if ((unsigned __int16)__p == 28005)
  {
LABEL_61:
    v11 = 3;
    goto LABEL_44;
  }
LABEL_9:
  if (v22 != 2)
    goto LABEL_35;
  p_p = &__p;
LABEL_34:
  if (*p_p == 28003)
  {
    v12 = *(double *)(a1 + 8);
    goto LABEL_37;
  }
LABEL_35:
  if (std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "mm"))
  {
    v12 = *(double *)(a1 + 8) / 10.0;
LABEL_37:
    v13 = 2.54;
LABEL_38:
    v14 = v12 / v13;
LABEL_41:
    v15 = 72.0;
LABEL_42:
    *(double *)(a1 + 8) = v14 * v15;
    goto LABEL_43;
  }
  if (std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "in"))
  {
    v14 = *(double *)(a1 + 8);
    goto LABEL_41;
  }
  if (std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "px"))
  {
    v12 = *(double *)(a1 + 8);
    v13 = 96.0;
    goto LABEL_38;
  }
  if (std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "pc"))
  {
    v14 = *(double *)(a1 + 8);
    v15 = 12.0;
    goto LABEL_42;
  }
  if (!std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "ch")
    && !std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "rem")
    && !std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "vw")
    && !std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "vh"))
  {
    v17 = std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "vmin");
    if (!v17)
    {
      isNamedspaceString = EQKitLength::isNamedspaceString(v17, (const void **)&__p);
      if (isNamedspaceString)
      {
        *(_QWORD *)a1 = EQKitLength::EQKitLengthFromMathMLString(isNamedspaceString, (const void **)&__p);
        *(_QWORD *)(a1 + 8) = v19;
      }
      else
      {
        if (std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, ""))
        {
          v11 = 6;
          goto LABEL_44;
        }
        *(_DWORD *)a1 = 0;
      }
    }
  }
LABEL_45:
  if (v22 < 0)
    operator delete(__p);
  return a1;
}

void sub_217917C00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1)
        goto LABEL_10;
      a1 = (_QWORD *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1)
LABEL_10:
      abort();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

double EQKitLength::resolveToAbsoluteWithUnitProviderAndDefault(double *a1, uint64_t a2, double a3)
{
  double v3;
  uint64_t v4;

  v3 = a1[1];
  v4 = *(unsigned int *)a1;
  switch((int)v4)
  {
    case 2:
    case 3:
    case 5:
      a3 = (*(double (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v4);
      goto LABEL_3;
    case 4:
      v3 = v3 * a3 / 100.0;
      break;
    case 6:
LABEL_3:
      v3 = v3 * a3;
      break;
    default:
      return v3;
  }
  return v3;
}

double EQKitLength::resolveToAbsoluteWithUnitProviderAndDefault(double *a1, uint64_t a2, uint64_t a3)
{
  double v3;
  uint64_t v4;
  double v5;

  v3 = a1[1];
  v4 = *(unsigned int *)a1;
  switch((int)v4)
  {
    case 2:
    case 3:
    case 5:
      v5 = (*(double (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v4);
      goto LABEL_3;
    case 4:
      if (a3)
        v3 = v3 * (*(double (**)(uint64_t))(a3 + 16))(a3) / 100.0;
      break;
    case 6:
      if (a3)
      {
        (*(void (**)(uint64_t))(a3 + 16))(a3);
LABEL_3:
        v3 = v3 * v5;
      }
      break;
    default:
      return v3;
  }
  return v3;
}

double EQKitLength::resolveToAbsoluteWithSize(EQKitLength *this, double a2)
{
  double result;

  result = *((double *)this + 1);
  switch(*(_DWORD *)this)
  {
    case 1:
      return result;
    case 3:
    case 6:
      goto LABEL_5;
    case 4:
      result = result * a2 / 100.0;
      break;
    case 5:
      a2 = 0.0;
LABEL_5:
      result = result * a2;
      break;
    default:
      result = 0.0;
      break;
  }
  return result;
}

double EQKitLength::resolveToAbsoluteWithSizeAndRule(EQKitLength *this, double a2, double a3)
{
  double result;

  result = *((double *)this + 1);
  switch(*(_DWORD *)this)
  {
    case 1:
      return result;
    case 3:
    case 6:
      result = result * a2;
      break;
    case 4:
      result = result * a2 / 100.0;
      break;
    case 5:
      result = result * a3;
      break;
    default:
      result = 0.0;
      break;
  }
  return result;
}

uint64_t EQKitLength::asString(EQKitLength *this)
{
  int v2;
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v5);
  std::ostream::operator<<();
  v2 = *(_DWORD *)this - 1;
  if (v2 < 5)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)off_24D8289B8[v2], qword_217C27438[v2]);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v6[0] = v3;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A1537C](&v8);
}

void sub_217917F54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x24BEDB858];
  v3 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_21791806C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x219A1537C](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x219A1537C](a1 + 128);
  return a1;
}

uint64_t EQKitLength::lengthVectorFromString(std::string *__str, uint64_t a2)
{
  std::string::size_type v3;
  std::string::size_type size;
  char v5;
  int v6;
  BOOL v7;
  std::string *v8;
  std::string::size_type v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  std::string::size_type v13;
  int v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  int v26;
  std::string *v27;
  std::string::size_type v28;
  char *v29;
  char *v30;
  void *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  __int128 v37;
  std::string v38;
  void *__p;
  char *v40;
  char *v41;

  v3 = 0;
  __p = 0;
  v40 = 0;
  v41 = 0;
  if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  else
    size = __str->__r_.__value_.__l.__size_;
  v5 = 1;
  while (v3 < size)
  {
    v6 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
    v7 = v6 < 0;
    if (v6 >= 0)
      v8 = __str;
    else
      v8 = (std::string *)__str->__r_.__value_.__r.__words[0];
    if (v7)
      v9 = __str->__r_.__value_.__l.__size_;
    else
      v9 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (v9 > v3)
    {
      v10 = (unsigned __int8 *)v8 + v3;
      v11 = (unsigned __int8 *)v8 + v9;
LABEL_14:
      v12 = 0;
      while (*v10 != asc_217C39177[v12])
      {
        if (++v12 == 3)
        {
          if (++v10 != v11)
            goto LABEL_14;
          goto LABEL_21;
        }
      }
      if (v10 != v11)
      {
        v13 = v10 - (unsigned __int8 *)v8;
        if (v10 - (unsigned __int8 *)v8 != -1)
          goto LABEL_22;
      }
    }
LABEL_21:
    v13 = size;
LABEL_22:
    std::string::basic_string(&v38, __str, v3, v13 - v3, (std::allocator<char> *)&v37);
    EQKitLength::EQKitLength((uint64_t)&v37, (uint64_t *)&v38, 0);
    v14 = v37;
    if ((_DWORD)v37)
    {
      v15 = v40;
      if (v40 >= v41)
      {
        v17 = (v40 - (_BYTE *)__p) >> 4;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 60)
          abort();
        v19 = v41 - (_BYTE *)__p;
        if ((v41 - (_BYTE *)__p) >> 3 > v18)
          v18 = v19 >> 3;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
          v20 = 0xFFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
          v21 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLength>>((uint64_t)&v41, v20);
        else
          v21 = 0;
        v22 = &v21[16 * v17];
        *(_OWORD *)v22 = v37;
        v24 = (char *)__p;
        v23 = v40;
        v25 = v22;
        if (v40 != __p)
        {
          do
          {
            *((_OWORD *)v25 - 1) = *((_OWORD *)v23 - 1);
            v25 -= 16;
            v23 -= 16;
          }
          while (v23 != v24);
          v23 = (char *)__p;
        }
        v16 = v22 + 16;
        __p = v25;
        v40 = v22 + 16;
        v41 = &v21[16 * v20];
        if (v23)
          operator delete(v23);
      }
      else
      {
        *(_OWORD *)v40 = v37;
        v16 = v15 + 16;
      }
      v40 = v16;
      if (v13 >= size)
        goto LABEL_52;
      v26 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
      v27 = v26 >= 0 ? __str : (std::string *)__str->__r_.__value_.__r.__words[0];
      v28 = v26 >= 0 ? HIBYTE(__str->__r_.__value_.__r.__words[2]) : __str->__r_.__value_.__l.__size_;
      if (v28 <= v13)
        goto LABEL_53;
      while (memchr(" \t\n", v27->__r_.__value_.__s.__data_[v13], 3uLL))
      {
        if (v28 == ++v13)
          goto LABEL_53;
      }
      if (v13 == -1)
LABEL_53:
        v3 = size;
      else
LABEL_52:
        v3 = v13;
    }
    else
    {
      v5 = 0;
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v38.__r_.__value_.__l.__data_);
      if (!v14)
        break;
    }
    else if (!v14)
    {
      break;
    }
  }
  v29 = (char *)__p;
  if ((v5 & 1) != 0)
  {
    v30 = v40;
    if (__p != v40)
    {
      v31 = *(void **)a2;
      *(_QWORD *)a2 = __p;
      *(_QWORD *)(a2 + 8) = v30;
      v32 = v41;
      v33 = *(char **)(a2 + 16);
      __p = v31;
      v41 = v33;
      *(_QWORD *)(a2 + 16) = v32;
      v34 = 1;
      v29 = (char *)v31;
      if (!v31)
        return v34;
      goto LABEL_63;
    }
  }
  v34 = 0;
  if (__p)
  {
LABEL_63:
    v40 = v29;
    operator delete(v29);
  }
  return v34;
}

void sub_2179183E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  if (a18 < 0)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

void ___ZL4_mapv_block_invoke()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2[3];
  int v3;
  _QWORD v4[3];
  int v5;
  _QWORD v6[3];
  int v7;
  _QWORD v8[3];
  int v9;
  _QWORD v10[3];
  int v11;
  _QWORD v12[3];
  int v13;
  _QWORD v14[3];
  int v15;
  _QWORD v16[3];
  int v17;
  _QWORD v18[3];
  int v19;
  _QWORD v20[3];
  int v21;
  _QWORD v22[3];
  int v23;
  _QWORD v24[3];
  int v25;
  _QWORD v26[3];
  int v27;
  _QWORD v28[3];
  int v29;
  const void *v30;

  v30 = (const void *)*MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:nn180100]<0>(v2, "veryverythinmathspace");
  v3 = 1029934649;
  std::string::basic_string[abi:nn180100]<0>(v4, "verythinmathspace");
  v5 = 1038323257;
  std::string::basic_string[abi:nn180100]<0>(v6, "thinmathspace");
  v7 = 1042983595;
  std::string::basic_string[abi:nn180100]<0>(v8, "mediummathspace");
  v9 = 1046711865;
  std::string::basic_string[abi:nn180100]<0>(v10, "thickmathspace");
  v11 = 1049508068;
  std::string::basic_string[abi:nn180100]<0>(v12, "verythickmathspace");
  v13 = 1051372203;
  std::string::basic_string[abi:nn180100]<0>(v14, "veryverythickmathspace");
  v15 = 1053236338;
  std::string::basic_string[abi:nn180100]<0>(v16, "negativeveryverythinmathspace");
  v17 = -1117548999;
  std::string::basic_string[abi:nn180100]<0>(v18, "negativeverythinmathspace");
  v19 = -1109160391;
  std::string::basic_string[abi:nn180100]<0>(v20, "negativethinmathspace");
  v21 = -1104500053;
  std::string::basic_string[abi:nn180100]<0>(v22, "negativemediummathspace");
  v23 = -1100771783;
  std::string::basic_string[abi:nn180100]<0>(v24, "negativethickmathspace");
  v25 = -1097975580;
  std::string::basic_string[abi:nn180100]<0>(v26, "negativeverythickmathspace");
  v27 = -1096111445;
  std::string::basic_string[abi:nn180100]<0>(v28, "negativeveryverythickmathspace");
  v29 = -1094247310;
  v0 = operator new();
  std::map<std::string const,float>::map[abi:nn180100]<std::pair<std::string const,float> const*>(v0, v2, &v30);
  _map(void)::map = v0;
  v1 = 56;
  do
  {
    if (*((char *)&v2[v1 - 1] - 1) < 0)
      operator delete((void *)v2[v1 - 4]);
    v1 -= 4;
  }
  while (v1 * 8);
}

void sub_2179186A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v12;

  MEMORY[0x219A153B8](v10, 0x1020C4062D53EE8);
  v12 = 448;
  while (1)
  {
    if (*(&a10 + v12 - 9) < 0)
      operator delete(*(void **)(&a10 + v12 - 32));
    v12 -= 32;
    if (!v12)
      _Unwind_Resume(a1);
  }
}

void sub_217918750()
{
  JUMPOUT(0x217918748);
}

uint64_t std::map<std::string const,float>::map[abi:nn180100]<std::pair<std::string const,float> const*>(uint64_t a1, const void **a2, const void **a3)
{
  uint64_t *v4;
  const void **v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string const,float>,std::__map_value_compare<std::string const,std::__value_type<std::string const,float>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,float>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,float> const&>((uint64_t **)a1, v4, v6, (uint64_t)v6);
      v6 += 4;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_2179187C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string const,float>,std::__map_value_compare<std::string const,std::__value_type<std::string const,float>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,float>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,float> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string const,float>,std::__map_value_compare<std::string const,std::__value_type<std::string const,float>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,float>>>::__construct_node<std::pair<std::string const,float> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

float std::__tree<std::__value_type<std::string const,float>,std::__map_value_compare<std::string const,std::__value_type<std::string const,float>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,float>>>::__construct_node<std::pair<std::string const,float> const&>@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  float result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  result = *(float *)(a2 + 24);
  *((float *)v6 + 14) = result;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_2179188E0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,unsigned short>,void *>>>::operator()[abi:nn180100](v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x219A152EC](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x219A152F8](v13);
  return a1;
}

void sub_217918A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x219A152F8](&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:nn180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_217918B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:nn180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLength>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(16 * a2);
}

double EQKitPath::QuantizationConfig::QuantizationConfig(EQKitPath::QuantizationConfig *this)
{
  double result;

  *(_QWORD *)this = 4;
  result = 0.25;
  *(_OWORD *)((char *)this + 8) = xmmword_217C27460;
  *((_QWORD *)this + 3) = 0x3FD0000000000000;
  return result;
}

{
  double result;

  *(_QWORD *)this = 4;
  result = 0.25;
  *(_OWORD *)((char *)this + 8) = xmmword_217C27460;
  *((_QWORD *)this + 3) = 0x3FD0000000000000;
  return result;
}

EQKitPath::QuantizationConfig *EQKitPath::QuantizationConfig::QuantizationConfig(EQKitPath::QuantizationConfig *this, NSDictionary *a2)
{
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  float v10;
  uint64_t v11;
  void *v12;
  float v13;

  *(_QWORD *)this = 4;
  *(_OWORD *)((char *)this + 8) = xmmword_217C27460;
  *((_QWORD *)this + 3) = 0x3FD0000000000000;
  v4 = objc_opt_class();
  v5 = (void *)EQKitUtilDynamicCast(v4, (uint64_t)-[NSDictionary objectForKey:](a2, "objectForKey:", CFSTR("bucketsPerUnit")));
  if (v5)
  {
    v6 = objc_msgSend(v5, "unsignedIntegerValue");
    if (v6 <= 1)
      v7 = 1;
    else
      v7 = v6;
    *(_QWORD *)this = v7;
    *((double *)this + 1) = 1.0 / (double)v7;
  }
  v8 = objc_opt_class();
  v9 = (void *)EQKitUtilDynamicCast(v8, (uint64_t)-[NSDictionary objectForKey:](a2, "objectForKey:", CFSTR("thresholdCurveBoundsMinMax")));
  if (v9)
  {
    objc_msgSend(v9, "floatValue");
    *((double *)this + 2) = v10;
  }
  v11 = objc_opt_class();
  v12 = (void *)EQKitUtilDynamicCast(v11, (uint64_t)-[NSDictionary objectForKey:](a2, "objectForKey:", CFSTR("thresholdCurveControlPointDistance")));
  if (v12)
  {
    objc_msgSend(v12, "floatValue");
    *((double *)this + 3) = v13;
  }
  return this;
}

double EQKitPath::QuantizationConfig::setBucketsPerUnit(EQKitPath::QuantizationConfig *this, unint64_t a2)
{
  unint64_t v2;
  double result;

  if (a2 <= 1)
    v2 = 1;
  else
    v2 = a2;
  *(_QWORD *)this = v2;
  result = 1.0 / (double)v2;
  *((double *)this + 1) = result;
  return result;
}

uint64_t EQKitPath::QuantizationConfig::setThresholdCurveBoundsMinMax(uint64_t this, double a2)
{
  *(double *)(this + 16) = a2;
  return this;
}

uint64_t EQKitPath::QuantizationConfig::setThresholdCurveControlPointDistance(uint64_t this, double a2)
{
  *(double *)(this + 24) = a2;
  return this;
}

double EQKitPath::Stem::Stem(EQKitPath::Stem *this)
{
  double result;

  *(_BYTE *)this = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  return result;
}

{
  double result;

  *(_BYTE *)this = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  return result;
}

uint64_t EQKitPath::Stem::Stem(uint64_t a1, int a2, uint64_t a3, _OWORD *a4)
{
  _OWORD *v6;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double *v12;
  double v13;
  double v14;
  double *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  unint64_t v20;
  unint64_t v21;
  double *v22;
  double v23;
  double v24;
  double *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;

  *(_DWORD *)(a1 + 56) = a2;
  v6 = (_OWORD *)(a1 + 8);
  if (a4)
  {
    v7 = a4[1];
    *v6 = *a4;
    v6[1] = v7;
  }
  else
  {
    bzero(v6, 0x20uLL);
    a2 = *(_DWORD *)(a1 + 56);
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a3 + 8);
  v11 = (*(_QWORD *)(a3 + 16) - v10) >> 4;
  if (v11 <= v8)
    v12 = (double *)MEMORY[0x24BDBEFB0];
  else
    v12 = (double *)(v10 + 16 * v8);
  v13 = *v12;
  v14 = v12[1];
  v15 = (double *)(v10 + 16 * v9);
  if (v11 <= v9)
    v15 = (double *)MEMORY[0x24BDBEFB0];
  v16 = *v15;
  v17 = v15[1];
  v18 = *v15 - v13;
  v19 = v17 - v14;
  v20 = *(_QWORD *)(a1 + 24);
  v21 = *(_QWORD *)(a1 + 32);
  if (v11 <= v20)
    v22 = (double *)MEMORY[0x24BDBEFB0];
  else
    v22 = (double *)(v10 + 16 * v20);
  v23 = *v22;
  v24 = v22[1];
  v25 = (double *)(v10 + 16 * v21);
  if (v11 <= v21)
    v25 = (double *)MEMORY[0x24BDBEFB0];
  v26 = v25[1];
  v27 = *v25 - v23;
  v28 = v26 - v24;
  if ((a2 | 2) == 3)
  {
    v29 = fabs(v19);
    v30 = fabs(v28);
    if (v29 >= v30)
      v29 = v30;
    v31 = vabdd_f64(*v25, v13);
    v32 = vabdd_f64(v23, v16);
    if (v31 <= v32)
      v31 = v32;
    *(double *)(a1 + 40) = v29;
    *(double *)(a1 + 48) = v31;
    if (v19 != 0.0 && v28 != 0.0)
    {
      v33 = v18 / v19;
      v34 = v27 / v28;
      goto LABEL_29;
    }
  }
  else
  {
    v35 = fabs(v18);
    v36 = fabs(v27);
    if (v35 >= v36)
      v35 = v36;
    v37 = vabdd_f64(v26, v14);
    v38 = vabdd_f64(v24, v17);
    if (v37 <= v38)
      v37 = v38;
    *(double *)(a1 + 40) = v35;
    *(double *)(a1 + 48) = v37;
    if (v18 != 0.0 && v27 != 0.0)
    {
      v33 = v19 / v18;
      v34 = v28 / v27;
LABEL_29:
      if (vabdd_f64(v33, v34) < 0.00100000005)
        *(_BYTE *)a1 = 1;
    }
  }
  return a1;
}

double EQKitPath::vector(EQKitPath *this, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  double *v5;
  double *v6;
  double *v7;

  v3 = *((_QWORD *)this + 1);
  v4 = (*((_QWORD *)this + 2) - v3) >> 4;
  v5 = (double *)(v3 + 16 * a2);
  if (v4 <= a2)
    v5 = (double *)MEMORY[0x24BDBEFB0];
  v6 = (double *)(v3 + 16 * a3);
  if (v4 <= a3)
    v7 = (double *)MEMORY[0x24BDBEFB0];
  else
    v7 = v6;
  return *v7 - *v5;
}

__n128 EQKitPath::Stem::Stem(EQKitPath::Stem *this, const EQKitPath::Stem *a2)
{
  __n128 result;

  *(_BYTE *)this = *(_BYTE *)a2;
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)((char *)a2 + 40);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  result = *(__n128 *)((char *)a2 + 8);
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)((char *)a2 + 24);
  *(__n128 *)((char *)this + 8) = result;
  return result;
}

{
  __n128 result;

  *(_BYTE *)this = *(_BYTE *)a2;
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)((char *)a2 + 40);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  result = *(__n128 *)((char *)a2 + 8);
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)((char *)a2 + 24);
  *(__n128 *)((char *)this + 8) = result;
  return result;
}

__n128 EQKitPath::Stem::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;

  if (a1 != a2)
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v2 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v2;
    result = *(__n128 *)(a2 + 40);
    *(__n128 *)(a1 + 40) = result;
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  }
  return result;
}

uint64_t EQKitPath::Stem::adjustStemPoints(uint64_t result, uint64_t a2, _QWORD *a3, double a4)
{
  unint64_t v4;
  unint64_t v5;
  double *v6;
  double v7;
  double v8;
  double *v9;
  double v10;
  double v11;
  uint64_t v12;
  unint64_t v13;
  double *v14;
  double *v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  double v20;

  v5 = *(_QWORD *)(result + 8);
  v4 = *(_QWORD *)(result + 16);
  v6 = (double *)(*a3 + 16 * v4);
  v8 = *v6;
  v7 = v6[1];
  v9 = (double *)(*a3 + 16 * *(_QWORD *)(result + 24));
  v11 = *v9;
  v10 = v9[1];
  v12 = *(_QWORD *)(a2 + 8);
  v13 = (*(_QWORD *)(a2 + 16) - v12) >> 4;
  if (v13 <= v5)
    v14 = (double *)MEMORY[0x24BDBEFB0];
  else
    v14 = (double *)(v12 + 16 * v5);
  v15 = (double *)(v12 + 16 * v4);
  if (v13 <= v4)
    v16 = (double *)MEMORY[0x24BDBEFB0];
  else
    v16 = v15;
  v17 = *v16 - *v14;
  v18 = v16[1] - v14[1];
  switch(*(_DWORD *)(result + 56))
  {
    case 0:
      v8 = v8 - a4;
      v11 = v11 - a4;
      goto LABEL_11;
    case 1:
      v7 = v7 - a4;
      v10 = v10 - a4;
      goto LABEL_13;
    case 2:
      v8 = v8 + a4;
      v11 = v11 + a4;
LABEL_11:
      v19 = v18 * a4 / v17;
      v7 = v7 + v19;
      v10 = v10 + v19;
      break;
    case 3:
      v7 = v7 + a4;
      v10 = v10 + a4;
LABEL_13:
      v20 = v17 * a4 / v18;
      v8 = v8 + v20;
      v11 = v11 + v20;
      break;
    default:
      break;
  }
  *v6 = v8;
  v6[1] = v7;
  *v9 = v11;
  v9[1] = v10;
  return result;
}

uint64_t EQKitPath::Subpath::nextElementSkipClose(EQKitPath::Subpath *this, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)this;
  v3 = *((_QWORD *)this + 1) + *(_QWORD *)this;
  if (a2 + 1 < v3)
    v4 = a2 + 1;
  else
    v4 = *(_QWORD *)this;
  if (v4 + 1 < v3)
    v2 = v4 + 1;
  if (v4 != v3 - 1 || *((_BYTE *)this + 16) == 0)
    return v4;
  else
    return v2;
}

unint64_t EQKitPath::Subpath::prevElementSkipClose(EQKitPath::Subpath *this, unint64_t a2)
{
  unint64_t v3;
  unint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)this;
  if (*(_QWORD *)this >= a2)
    a2 = *((_QWORD *)this + 1) + v3;
  result = a2 - 1;
  if (*((_BYTE *)this + 16))
  {
    v5 = *((_QWORD *)this + 1) + v3;
    if (v3 >= result)
      v6 = a2;
    else
      v6 = a2 - 1;
    v7 = v6 - 1;
    if (a2 == v5)
      return v7;
  }
  return result;
}

void EQKitPath::extractorFunction(EQKitPath *this, _QWORD *a2, const CGPathElement *a3)
{
  _QWORD *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  unint64_t v9;
  char **v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  unint64_t v27;
  EQKitPath *v29;
  double *v30;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  _BOOL4 v44;
  __int128 *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  unint64_t *v61;
  char *v62;
  unint64_t v63;
  unint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v68;
  unint64_t v69;
  _BOOL4 v70;
  __int128 v71;

  if (this)
  {
    if (a2)
    {
      v4 = (_QWORD *)*((_QWORD *)this + 1);
      if (v4)
      {
        v5 = *(_DWORD *)a2;
        v6 = 2;
        v7 = 3;
        if (*(_DWORD *)a2 != 3)
          v7 = 0;
        v65 = *(_DWORD *)a2;
        v8 = v5 == 2 || *(_DWORD *)a2 == 3;
        if (v5 != 2)
          v6 = v7;
        if (v5 < 2)
          v8 = 1;
        v70 = v8;
        if (v5 >= 2)
          v9 = v6;
        else
          v9 = 1;
        v10 = (char **)(v4 + 1);
        v66 = v4[1];
        v68 = v4[2];
        v69 = v9;
        if (a2[1] && v70)
        {
          v11 = 0;
          v12 = v4 + 3;
          v13 = (char *)v4[2];
          if (v9 <= 1)
            v14 = 1;
          else
            v14 = v9;
          do
          {
            v15 = (_OWORD *)(a2[1] + 16 * v11);
            if ((unint64_t)v13 >= *v12)
            {
              v16 = (v13 - *v10) >> 4;
              if ((unint64_t)(v16 + 1) >> 60)
                std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
              v17 = *v12 - (_QWORD)*v10;
              v18 = v17 >> 3;
              if (v17 >> 3 <= (unint64_t)(v16 + 1))
                v18 = v16 + 1;
              if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
                v19 = 0xFFFFFFFFFFFFFFFLL;
              else
                v19 = v18;
              if (v19)
                v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)(v4 + 3), v19);
              else
                v20 = 0;
              v21 = &v20[16 * v16];
              *(_OWORD *)v21 = *v15;
              v23 = (char *)v4[1];
              v22 = (char *)v4[2];
              v24 = v21;
              if (v22 != v23)
              {
                do
                {
                  *((_OWORD *)v24 - 1) = *((_OWORD *)v22 - 1);
                  v24 -= 16;
                  v22 -= 16;
                }
                while (v22 != v23);
                v22 = *v10;
              }
              v13 = v21 + 16;
              v4[1] = v24;
              v4[2] = v21 + 16;
              v4[3] = &v20[16 * v19];
              if (v22)
                operator delete(v22);
            }
            else
            {
              *(_OWORD *)v13 = *v15;
              v13 += 16;
            }
            v4[2] = v13;
            ++v11;
          }
          while (v11 != v14);
        }
        v25 = (char *)v4[4];
        v26 = (char *)v4[5];
        v27 = (v26 - v25) >> 4;
        if (*(_DWORD *)a2 != 4 || v26 == v25)
        {
          v29 = this;
        }
        else
        {
          v29 = this;
          if (v27 > *(_QWORD *)(v4[8] - 8) && *(_DWORD *)&v25[16 * v27 - 16] == 1)
          {
            v30 = (double *)&(*v10)[16 * *(_QWORD *)&v25[16 * v27 - 8]];
            if (*((double *)this + 3) == *v30 && *((double *)this + 4) == v30[1])
            {
              v4[2] -= 16;
              v26 -= 16;
              v4[5] = v26;
              v27 = (v26 - v25) >> 4;
            }
          }
        }
        v32 = (v68 - v66) >> 4;
        v33 = v4[6];
        if ((unint64_t)v26 >= v33)
        {
          v36 = (v26 - v25) >> 4;
          v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 60)
            std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
          v38 = v33 - (_QWORD)v25;
          if (v38 >> 3 > v37)
            v37 = v38 >> 3;
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0)
            v39 = 0xFFFFFFFFFFFFFFFLL;
          else
            v39 = v37;
          if (v39)
          {
            v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)(v4 + 6), v39);
            v25 = (char *)v4[4];
            v26 = (char *)v4[5];
          }
          else
          {
            v40 = 0;
          }
          v41 = &v40[16 * v36];
          v42 = &v40[16 * v39];
          *(_DWORD *)v41 = v65;
          *((_QWORD *)v41 + 1) = v32;
          v34 = v41 + 16;
          if (v26 != v25)
          {
            do
            {
              *((_OWORD *)v41 - 1) = *((_OWORD *)v26 - 1);
              v41 -= 16;
              v26 -= 16;
            }
            while (v26 != v25);
            v25 = (char *)v4[4];
          }
          v4[4] = v41;
          v4[5] = v34;
          v4[6] = v42;
          v35 = v69;
          if (v25)
            operator delete(v25);
        }
        else
        {
          *(_DWORD *)v26 = v65;
          *((_QWORD *)v26 + 1) = v32;
          v34 = v26 + 16;
          v35 = v69;
        }
        v4[5] = v34;
        v43 = a2[1];
        v44 = v43 != 0;
        v45 = (__int128 *)(v43 + 16 * v35 - 16);
        if (!v70 || !v44)
          v45 = (__int128 *)MEMORY[0x24BDBEFB0];
        v71 = *v45;
        if (*(_DWORD *)a2)
        {
          if (*(_DWORD *)a2 == 4)
          {
            *((_BYTE *)v29 + 16) = 0;
LABEL_104:
            *(_QWORD *)v29 += v35;
            return;
          }
          if (*((_BYTE *)v29 + 16))
            goto LABEL_104;
          v54 = v4[9];
          v47 = (unint64_t *)v4[8];
          if ((unint64_t)v47 < v54)
            goto LABEL_84;
          v48 = (unint64_t *)v4[7];
          v56 = v47 - v48;
          if (!((unint64_t)(v56 + 1) >> 61))
          {
            v57 = v54 - (_QWORD)v48;
            v58 = (uint64_t)(v54 - (_QWORD)v48) >> 2;
            if (v58 <= v56 + 1)
              v58 = v56 + 1;
            if (v57 >= 0x7FFFFFFFFFFFFFF8)
              v59 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v59 = v58;
            if (v59)
            {
              v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v4 + 9), v59);
              v48 = (unint64_t *)v4[7];
              v47 = (unint64_t *)v4[8];
            }
            else
            {
              v60 = 0;
            }
            v61 = (unint64_t *)&v60[8 * v56];
            v62 = &v60[8 * v59];
            *v61 = v27;
            v55 = v61 + 1;
            while (v47 != v48)
            {
              v64 = *--v47;
              *--v61 = v64;
            }
LABEL_101:
            v4[7] = v61;
            v4[8] = v55;
            v4[9] = v62;
            if (v48)
              operator delete(v48);
            goto LABEL_103;
          }
        }
        else
        {
          v46 = v4[9];
          v47 = (unint64_t *)v4[8];
          if ((unint64_t)v47 < v46)
          {
LABEL_84:
            *v47 = v27;
            v55 = v47 + 1;
LABEL_103:
            v4[8] = v55;
            *((_BYTE *)v29 + 16) = 1;
            *(_OWORD *)((char *)v29 + 24) = v71;
            goto LABEL_104;
          }
          v48 = (unint64_t *)v4[7];
          v49 = v47 - v48;
          if (!((unint64_t)(v49 + 1) >> 61))
          {
            v50 = v46 - (_QWORD)v48;
            v51 = (uint64_t)(v46 - (_QWORD)v48) >> 2;
            if (v51 <= v49 + 1)
              v51 = v49 + 1;
            if (v50 >= 0x7FFFFFFFFFFFFFF8)
              v52 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v52 = v51;
            if (v52)
            {
              v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v4 + 9), v52);
              v48 = (unint64_t *)v4[7];
              v47 = (unint64_t *)v4[8];
            }
            else
            {
              v53 = 0;
            }
            v61 = (unint64_t *)&v53[8 * v49];
            v62 = &v53[8 * v52];
            *v61 = v27;
            v55 = v61 + 1;
            while (v47 != v48)
            {
              v63 = *--v47;
              *--v61 = v63;
            }
            goto LABEL_101;
          }
        }
        std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
      }
    }
  }
}

void sub_217919648(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x21791945CLL);
}

void sub_217919658(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x2179192ECLL);
}

void EQKitPath::EQKitPath(EQKitPath *this, CGPathRef path)
{
  CGMutablePathRef MutableCopy;
  int64x2_t v4;

  *(_OWORD *)((char *)this + 8) = 0u;
  *((_BYTE *)this + 120) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 65) = 0u;
  if (path)
    MutableCopy = CGPathCreateMutableCopy(path);
  else
    MutableCopy = 0;
  *(_QWORD *)this = MutableCopy;
  v4 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *((int64x2_t *)this + 8) = v4;
  *((int64x2_t *)this + 9) = v4;
}

void sub_2179196D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v5 = *(void **)(v1 + 56);
  if (v5)
  {
    *(_QWORD *)(v1 + 64) = v5;
    operator delete(v5);
  }
  EQKitPath::EQKitPath(v3, v2, v1);
  _Unwind_Resume(a1);
}

int64x2_t EQKitPath::resetCache(int64x2_t *this)
{
  int64x2_t result;

  result = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  this[8] = result;
  this[9] = result;
  return result;
}

void EQKitPath::EQKitPath(EQKitPath *this, const __CTFont *a2, int a3)
{
  unsigned int v6;
  CFIndex v7;
  const __CFString *v8;
  const __CFString *v9;
  const __CTFont *v10;
  const __CTFont *v11;
  int64x2_t v12;
  CGAffineTransform v13;
  CGGlyph glyphs[2];
  UniChar characters[2];
  CFRange v16;

  *((_BYTE *)this + 120) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_BYTE *)this + 80) = 0;
  if (a2)
  {
    *(_DWORD *)glyphs = -1;
    memset(&v13, 0, sizeof(v13));
    CGAffineTransformMakeScale(&v13, 1.0, -1.0);
    if ((a3 - 0x10000) >> 20)
    {
      v7 = 1;
      LOWORD(v6) = a3;
    }
    else
    {
      v6 = ((a3 + 67043328) >> 10) - 10240;
      characters[1] = a3 & 0x3FF | 0xDC00;
      v7 = 2;
    }
    characters[0] = v6;
    if (CTFontGetGlyphsForCharacters(a2, characters, glyphs, v7))
    {
      *(_QWORD *)this = CTFontCreatePathForGlyph(a2, glyphs[0], &v13);
    }
    else
    {
      v8 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x24BDBD240], characters, v7);
      v9 = v8;
      if (v8)
      {
        v16.length = CFStringGetLength(v8);
        v16.location = 0;
        v10 = CTFontCreateForString(a2, v9, v16);
        v11 = v10;
        if (v10)
        {
          CTFontGetGlyphsForCharacters(v10, characters, glyphs, v7);
          *(_QWORD *)this = CTFontCreatePathForGlyph(v11, glyphs[0], &v13);
          CFRelease(v11);
        }
        CFRelease(v9);
      }
    }
  }
  v12 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *((int64x2_t *)this + 8) = v12;
  *((int64x2_t *)this + 9) = v12;
}

void sub_21791987C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;
  void *v4;
  void *v5;

  v3 = (void *)v1[7];
  if (v3)
  {
    v1[8] = v3;
    operator delete(v3);
  }
  v4 = (void *)v1[4];
  if (v4)
  {
    v1[5] = v4;
    operator delete(v4);
  }
  v5 = (void *)v1[1];
  if (v5)
  {
    v1[2] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void EQKitPath::EQKitPath(EQKitPath *this, const EQKitPath *a2)
{
  __int128 v4;
  __int128 v5;
  const CGPath *MutableCopy;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  std::vector<CGPoint>::__init_with_size[abi:ne180100]<CGPoint*,CGPoint*>((_QWORD *)this + 1, *((const void **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 4);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  std::vector<EQKitPath::PathElement>::__init_with_size[abi:ne180100]<EQKitPath::PathElement*,EQKitPath::PathElement*>((_QWORD *)this + 4, *((const void **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 4);
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)this + 7, *((const void **)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3);
  *((_BYTE *)this + 80) = *((_BYTE *)a2 + 80);
  v4 = *(_OWORD *)((char *)a2 + 88);
  *(_OWORD *)((char *)this + 104) = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)this + 88) = v4;
  *((_BYTE *)this + 120) = *((_BYTE *)a2 + 120);
  v5 = *((_OWORD *)a2 + 9);
  *((_OWORD *)this + 8) = *((_OWORD *)a2 + 8);
  *((_OWORD *)this + 9) = v5;
  MutableCopy = *(const CGPath **)a2;
  if (*(_QWORD *)a2)
    MutableCopy = CGPathCreateMutableCopy(MutableCopy);
  *(_QWORD *)this = MutableCopy;
}

void sub_217919994(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;
  void *v8;

  v6 = *v4;
  if (*v4)
  {
    v1[8] = v6;
    operator delete(v6);
  }
  v7 = *v3;
  if (*v3)
  {
    v1[5] = v7;
    operator delete(v7);
  }
  v8 = *v2;
  if (*v2)
  {
    v1[2] = v8;
    operator delete(v8);
  }
  _Unwind_Resume(exception_object);
}

void EQKitPath::~EQKitPath(CGPathRef *this)
{
  const CGPath *v2;
  const CGPath *v3;
  const CGPath *v4;

  CGPathRelease(*this);
  v2 = this[7];
  if (v2)
  {
    this[8] = v2;
    operator delete(v2);
  }
  v3 = this[4];
  if (v3)
  {
    this[5] = v3;
    operator delete(v3);
  }
  v4 = this[1];
  if (v4)
  {
    this[2] = v4;
    operator delete(v4);
  }
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t EQKitPath::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const CGPath *MutableCopy;
  __int128 v6;
  __int128 v7;

  if (a1 != a2)
  {
    v4 = *(const void **)a1;
    if (*(_QWORD *)a1)
      CFRelease(v4);
    MutableCopy = *(const CGPath **)a2;
    if (*(_QWORD *)a2)
      MutableCopy = CGPathCreateMutableCopy(MutableCopy);
    *(_QWORD *)a1 = MutableCopy;
    std::vector<CGPoint>::__assign_with_size[abi:ne180100]<CGPoint*,CGPoint*>((char *)(a1 + 8), *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 4);
    std::vector<CGPoint>::__assign_with_size[abi:ne180100]<CGPoint*,CGPoint*>((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 4);
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)(a1 + 56), *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    v6 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = v6;
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    v7 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v7;
  }
  return a1;
}

EQKitPath *EQKitPath::newPathFromCharacterWithFont(EQKitPath *this, CTFontRef font, const __CTFont *a3)
{
  EQKitPath *v3;
  CGPathRef v4;
  const CGPath *v5;
  CGAffineTransform v7;
  CGGlyph glyphs;
  UniChar characters;

  v3 = font;
  characters = (unsigned __int16)this;
  glyphs = -1;
  if (font)
  {
    if (CTFontGetGlyphsForCharacters(font, &characters, &glyphs, 1)
      && (memset(&v7, 0, sizeof(v7)),
          CGAffineTransformMakeScale(&v7, 1.0, -1.0),
          (v4 = CTFontCreatePathForGlyph(v3, glyphs, &v7)) != 0))
    {
      v5 = v4;
      v3 = (EQKitPath *)operator new();
      EQKitPath::EQKitPath(v3, v5);
      CGPathRelease(v5);
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void sub_217919BB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A153B8](v1, 0x1070C40036CD406);
  _Unwind_Resume(a1);
}

EQKitPath *EQKitPath::newPathFromGlyphWithFont(EQKitPath *this, const __CTFont *a2, const __CTFont *a3)
{
  CGGlyph v4;
  CGPathRef v5;
  const CGPath *v6;
  EQKitPath *v7;
  CGAffineTransform v9;

  v4 = (unsigned __int16)this;
  memset(&v9, 0, sizeof(v9));
  CGAffineTransformMakeScale(&v9, 1.0, -1.0);
  v5 = CTFontCreatePathForGlyph(a2, v4, &v9);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = (EQKitPath *)operator new();
  EQKitPath::EQKitPath(v7, v6);
  CGPathRelease(v6);
  return v7;
}

void sub_217919C70(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A153B8](v1, 0x1070C40036CD406);
  _Unwind_Resume(a1);
}

void EQKitPath::extractPath(EQKitPath *this)
{
  _QWORD info[2];
  char v2;

  if (!*((_BYTE *)this + 80))
  {
    *((_BYTE *)this + 80) = 1;
    info[0] = 0;
    info[1] = this;
    v2 = 0;
    CGPathApply(*(CGPathRef *)this, info, (CGPathApplierFunction)EQKitPath::extractorFunction);
  }
}

CGFloat *EQKitPath::computePathBounds(CGFloat *this)
{
  CGFloat *v1;
  CGRect PathBoundingBox;

  v1 = this;
  *((_BYTE *)this + 120) = 1;
  PathBoundingBox = CGPathGetPathBoundingBox((CGPathRef)*(_QWORD *)this);
  v1[11] = PathBoundingBox.origin.x;
  v1[12] = PathBoundingBox.origin.y;
  v1 += 11;
  v1[2] = PathBoundingBox.size.width;
  v1[3] = PathBoundingBox.size.height;
  return v1;
}

BOOL EQKitPath::elementMinMax(EQKitPath *this, unint64_t a2, CGPoint *a3, CGPoint *a4)
{
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double *v20;
  unint64_t v21;
  double *v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  _BOOL8 result;
  unint64_t v30;
  uint64_t v31;
  char v32;

  EQKitPath::extractPath(this);
  v8 = *MEMORY[0x24BDBEFB0];
  v9 = *(double *)(MEMORY[0x24BDBEFB0] + 8);
  v10 = *((_QWORD *)this + 4);
  if (a2 >= (*((_QWORD *)this + 5) - v10) >> 4)
    goto LABEL_35;
  v11 = *(int *)(v10 + 16 * a2);
  v12 = v11 > 3 ? 0 : qword_217C27500[v11];
  EQKitPath::subpathContainingElement((unint64_t **)this, a2, (uint64_t)&v30);
  v13 = v30 >= a2 ? v31 + v30 : a2;
  v14 = v30 >= v13 - 1 ? v31 + v30 : v13 - 1;
  v15 = v14 - 1;
  v16 = v13 != v31 + v30 || v32 == 0;
  v17 = v16 ? v13 - 1 : v15;
  if (v17 == 0x7FFFFFFFFFFFFFFFLL || (v18 = EQKitPath::endPointIndexForElement(this, v17), v18 == 0x7FFFFFFFFFFFFFFFLL))
  {
    v19 = 0;
  }
  else
  {
    v20 = (double *)(*((_QWORD *)this + 1) + 16 * v18);
    v8 = *v20;
    v9 = v20[1];
    v19 = 1;
  }
  v21 = *(_QWORD *)(v10 + 16 * a2 + 8);
  if (v21 >= v21 + v12)
  {
LABEL_35:
    result = 0;
    v25 = v8;
    v24 = v9;
  }
  else
  {
    v22 = (double *)(*((_QWORD *)this + 1) + 16 * v21 + 8);
    v23 = v12;
    v24 = v9;
    v25 = v8;
    v26 = v19;
    do
    {
      v28 = *(v22 - 1);
      v27 = *v22;
      if (v26)
      {
        if (v28 < v25)
          v25 = *(v22 - 1);
        if (v27 < v24)
          v24 = *v22;
        if (v28 > v8)
          v8 = *(v22 - 1);
        if (v27 > v9)
          v9 = *v22;
      }
      else
      {
        v9 = *v22;
        v8 = *(v22 - 1);
        v25 = v8;
        v24 = *v22;
      }
      ++v26;
      v22 += 2;
      --v23;
    }
    while (v23);
    result = (unint64_t)(v12 + v19) > 1;
  }
  a3->x = v25;
  a3->y = v24;
  a4->x = v8;
  a4->y = v9;
  return result;
}

void EQKitPath::subpathContainingElement(unint64_t **this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  int v17;

  EQKitPath::extractPath((EQKitPath *)this);
  *(_OWORD *)a3 = xmmword_217C27470;
  *(_BYTE *)(a3 + 16) = 0;
  v6 = this[4];
  v7 = ((char *)this[5] - (char *)v6) >> 4;
  if (v7 > a2)
  {
    v9 = this[7];
    v8 = this[8];
    if (v8 != v9)
    {
      v10 = v8 - v9;
      v11 = this[7];
      do
      {
        v12 = v10 >> 1;
        v13 = &v11[v10 >> 1];
        v15 = *v13;
        v14 = v13 + 1;
        v10 += ~(v10 >> 1);
        if (v15 > a2)
          v10 = v12;
        else
          v11 = v14;
      }
      while (v10);
      if (v11 != v9)
      {
        v16 = *(v11 - 1);
        if (v11 != v8)
          v7 = *v11;
        v17 = v6[2 * v7 - 2];
        *(_QWORD *)a3 = v16;
        *(_QWORD *)(a3 + 8) = v7 - v16;
        *(_BYTE *)(a3 + 16) = v17 == 4;
      }
    }
  }
}

uint64_t EQKitPath::endPointIndexForElement(EQKitPath *this, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  EQKitPath::extractPath(this);
  v4 = *((_QWORD *)this + 4);
  if (a2 >= (*((_QWORD *)this + 5) - v4) >> 4)
    return 0x7FFFFFFFFFFFFFFFLL;
  v5 = *(int *)(v4 + 16 * a2);
  if (v5 > 3)
    return 0x7FFFFFFFFFFFFFFFLL;
  else
    return qword_217C274E0[v5] + *(_QWORD *)(v4 + 16 * a2 + 8);
}

void EQKitPath::quantizeElementEdge(EQKitPath *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  int *v11;
  int v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26[9];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  EQKitPath::extractPath(a1);
  v10 = *((_QWORD *)a1 + 4);
  if (a2 < (*((_QWORD *)a1 + 5) - v10) >> 4)
  {
    v11 = (int *)(v10 + 16 * a2);
    v12 = *v11;
    if ((*v11 - 2) < 2)
    {
      EQKitPath::subpathContainingElement((unint64_t **)a1, a2, (uint64_t)&v23);
      if (v23 >= a2)
        v14 = v24 + v23;
      else
        v14 = a2;
      if (v23 >= v14 - 1)
        v15 = v24 + v23;
      else
        v15 = v14 - 1;
      v16 = v15 - 1;
      if (v14 != v24 + v23 || v25 == 0)
        v18 = v14 - 1;
      else
        v18 = v16;
      if (v18 == 0x7FFFFFFFFFFFFFFFLL
        || (v19 = EQKitPath::endPointIndexForElement(a1, v18), v19 == 0x7FFFFFFFFFFFFFFFLL))
      {
        v20 = 0;
      }
      else
      {
        *(_OWORD *)v26 = *(_OWORD *)(*((_QWORD *)a1 + 1) + 16 * v19);
        v20 = 1;
      }
      v21 = *v11;
      if (v21 > 3)
      {
        v22 = 0;
      }
      else
      {
        v22 = qword_217C27500[v21];
        memcpy(&v26[2 * v20], (const void *)(*((_QWORD *)a1 + 1) + 16 * *(_QWORD *)(v10 + 16 * a2 + 8)), 16 * v22);
      }
      _quantizeCurve((uint64_t)v26, v22 + v20, a3, a4, a5);
    }
    else if (v12 == 4 || v12 == 1)
    {
      v26[0] = 0x7FFFFFFFFFFFFFFFLL;
      v23 = 0x7FFFFFFFFFFFFFFFLL;
      if (EQKitPath::isLineTo((unint64_t **)a1, a2, v26, &v23, 0))
        _quantizeLine(a3, a4, a5, *(double *)(*((_QWORD *)a1 + 1) + 16 * v26[0]), *(double *)(*((_QWORD *)a1 + 1) + 16 * v26[0] + 8), *(double *)(*((_QWORD *)a1 + 1) + 16 * v23), *(double *)(*((_QWORD *)a1 + 1) + 16 * v23 + 8));
    }
  }
}

BOOL EQKitPath::isLineTo(unint64_t **this, unint64_t a2, unint64_t *a3, unint64_t *a4, const EQKitPath::Subpath *a5)
{
  unint64_t v9;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  int v15;
  int v16;
  BOOL v17;
  unint64_t v18;
  EQKitPath *v19;
  unint64_t v20;
  __int128 v22;
  uint64_t v23;

  if (a5)
  {
    v22 = *(_OWORD *)a5;
    v23 = *((_QWORD *)a5 + 2);
  }
  else
  {
    EQKitPath::subpathContainingElement(this, a2, (uint64_t)&v22);
  }
  *a3 = 0x7FFFFFFFFFFFFFFFLL;
  *a4 = 0x7FFFFFFFFFFFFFFFLL;
  v9 = v22;
  if (a2 < (unint64_t)v22 || a2 - (unint64_t)v22 >= *((_QWORD *)&v22 + 1))
    return 0;
  if (a2 <= (unint64_t)v22)
    v12 = *((_QWORD *)&v22 + 1) + v22;
  else
    v12 = a2;
  v13 = v12 - 1;
  v14 = this[4];
  v15 = v14[2 * a2];
  if (a2 == (_QWORD)v22 && ((v16 = v14[2 * v13], !v15) ? (v17 = v16 == 4) : (v17 = 0), v17))
  {
    v18 = *((_QWORD *)&v22 + 1) + a2;
    if (v13 > a2)
      v18 = v13;
    v13 = v18 - 1;
  }
  else
  {
    if (a2 + 1 == *((_QWORD *)&v22 + 1) + (_QWORD)v22 && v15 == 4)
    {
      v19 = (EQKitPath *)this;
      goto LABEL_26;
    }
    if (v15 != 1)
    {
      v20 = *a3;
      return *a4 != 0x7FFFFFFFFFFFFFFFLL && v20 != 0x7FFFFFFFFFFFFFFFLL;
    }
  }
  v19 = (EQKitPath *)this;
  v9 = a2;
LABEL_26:
  *a4 = EQKitPath::endPointIndexForElement(v19, v9);
  v20 = EQKitPath::endPointIndexForElement((EQKitPath *)this, v13);
  *a3 = v20;
  return *a4 != 0x7FFFFFFFFFFFFFFFLL && v20 != 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t _quantizeLine(uint64_t result, uint64_t a2, uint64_t *a3, double a4, double a5, double a6, double a7)
{
  int v7;
  uint64_t v8;
  unint64_t v9;
  float v10;
  uint64_t v11;
  double v12;
  BOOL v13;
  double v14;
  float v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  double v23;
  double v24;
  double v25;
  double v27;
  double v28;
  unint64_t v29;
  double v30;
  double v31;
  unint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;

  if ((result & 0xFFFFFFFD) != 0)
    return result;
  v7 = result & 0xFFFFFFFE;
  v8 = *a3;
  v9 = (a3[1] - *a3) >> 3;
  if (a5 == a7)
  {
    v10 = a5 * (double)*(unint64_t *)(a2 + 8);
    v11 = (uint64_t)(float)(floorf(v10) - (float)*(uint64_t *)a2);
    goto LABEL_5;
  }
  v14 = (double)*(unint64_t *)(a2 + 8);
  v15 = a5 * v14;
  v16 = (float)*(uint64_t *)a2;
  v11 = (uint64_t)(float)(floorf(v15) - v16);
  v17 = a7 * v14;
  v18 = floorf(v17);
  v19 = (uint64_t)(float)(v18 - v16);
  if (a4 == a6)
  {
    if (v11 <= v19)
      v20 = (uint64_t)(float)(v18 - v16);
    else
      v20 = v11;
    if (v11 >= v19)
      v11 = (uint64_t)(float)(v18 - v16);
    v21 = v11 & ~(v11 >> 63);
    v22 = v9 - 1;
    if (v20 < v22)
      v22 = v20;
    if (v21 <= v22)
    {
      if (a6 >= a4)
        v23 = a4;
      else
        v23 = a6;
      if (a4 < a6)
        a4 = a6;
      do
      {
        v24 = *(double *)(v8 + 8 * v21);
        if (v7 == 2)
        {
          if (v24 >= a4)
            v25 = *(double *)(v8 + 8 * v21);
          else
            v25 = a4;
        }
        else if (v23 >= v24)
        {
          v25 = *(double *)(v8 + 8 * v21);
        }
        else
        {
          v25 = v23;
        }
        *(double *)(v8 + 8 * v21) = v25;
      }
      while (v21++ < v22);
    }
  }
  else
  {
    if (v11 == v19)
    {
LABEL_5:
      if (v11 < 0 || v9 <= v11)
        return result;
      v12 = *(double *)(v8 + 8 * v11);
      if (v7 == 2)
      {
        if (a4 < a6)
          a4 = a6;
        v13 = v12 < a4;
      }
      else
      {
        if (a6 < a4)
          a4 = a6;
        v13 = a4 < v12;
      }
      if (!v13)
        a4 = *(double *)(v8 + 8 * v11);
LABEL_39:
      *(double *)(v8 + 8 * v11) = a4;
      return result;
    }
    if (v11 > v19)
      v27 = a4;
    else
      v27 = a6;
    if (v11 > v19)
      v28 = a5;
    else
      v28 = a7;
    if (v11 > v19)
    {
      v29 = v19;
    }
    else
    {
      a6 = a4;
      v29 = v11;
    }
    if (v11 > v19)
    {
      v30 = a7;
    }
    else
    {
      v11 = v19;
      v30 = a5;
    }
    v31 = (v27 - a6) / (v28 - v30);
    v32 = v29 + 1;
    a4 = a6 + ((double)(uint64_t)(v29 + 1 + *(_QWORD *)a2) / v14 - v30) * v31;
    if ((v29 & 0x8000000000000000) == 0 && v29 < v9)
    {
      v33 = *(double *)(v8 + 8 * v29);
      if (a4 >= a6)
        v34 = a6;
      else
        v34 = a4;
      if (v34 >= v33)
        v34 = *(double *)(v8 + 8 * v29);
      if (a6 < a4)
        a6 = a4;
      if (v33 >= a6)
        a6 = *(double *)(v8 + 8 * v29);
      if (v7 != 2)
        a6 = v34;
      *(double *)(v8 + 8 * v29) = a6;
    }
    if ((uint64_t)v32 < v11)
    {
      v35 = *(double *)(a2 + 16);
      do
      {
        v36 = a4;
        a4 = a4 + v31 * v35;
        if ((v32 & 0x8000000000000000) == 0 && v32 < v9)
        {
          v37 = *(double *)(v8 + 8 * v32);
          if (a4 >= v36)
            v38 = v36;
          else
            v38 = a4;
          if (v38 >= v37)
            v38 = *(double *)(v8 + 8 * v32);
          if (v36 < a4)
            v36 = a4;
          if (v37 >= v36)
            v36 = *(double *)(v8 + 8 * v32);
          if (v7 != 2)
            v36 = v38;
          *(double *)(v8 + 8 * v32) = v36;
        }
        ++v32;
      }
      while (v11 != v32);
    }
    if ((v11 & 0x8000000000000000) == 0 && v11 < v9)
    {
      v39 = *(double *)(v8 + 8 * v11);
      if (v27 >= a4)
        v40 = a4;
      else
        v40 = v27;
      if (v40 >= v39)
        v40 = *(double *)(v8 + 8 * v11);
      if (a4 < v27)
        a4 = v27;
      if (v39 >= a4)
        a4 = *(double *)(v8 + 8 * v11);
      if (v7 != 2)
        a4 = v40;
      goto LABEL_39;
    }
  }
  return result;
}

uint64_t _quantizeCurve(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  float64x2_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  unint64_t v14;
  double *v15;
  double v16;
  double v17;
  double v18;
  float v19;
  float v20;
  unint64_t v21;
  float v22;
  uint64_t v23;
  double v24;
  double v25;
  double *v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  float64x2_t v39;
  float64x2_t *v40;
  const double *v41;
  int8x16_t v42;
  int8x16_t v43;
  int64x2_t v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  double v48;
  double v49;
  const double *v50;
  int64x2_t v52;
  int64x2_t v53;
  float64x2_t v54[2];
  float64x2_t v55[2];
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  __int128 v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  uint64_t v64;
  float64x2x2_t v65;
  float64x2x2_t v66;

  v64 = *MEMORY[0x24BDAC8D0];
  v8 = *(float64x2_t *)result;
  v9 = *(double *)(result + 8);
  v10 = v9;
  v11 = *(double *)result;
  v12 = *(double *)result;
  v13 = v9;
  if (a2 >= 2)
  {
    v14 = a2 - 1;
    v15 = (double *)(result + 24);
    v13 = *(double *)(result + 8);
    v12 = *(double *)result;
    v11 = *(double *)result;
    v10 = v13;
    do
    {
      v16 = *(v15 - 1);
      v17 = *v15;
      if (v16 < v12)
        v12 = *(v15 - 1);
      if (v17 < v13)
        v13 = *v15;
      if (v11 < v16)
        v11 = *(v15 - 1);
      if (v10 < v17)
        v10 = *v15;
      v15 += 2;
      --v14;
    }
    while (v14);
  }
  if ((a3 & 0xFFFFFFFD) == 0)
  {
    v18 = (double)*(unint64_t *)(a4 + 8);
    v19 = v13 * v18;
    v20 = (float)*(uint64_t *)a4;
    v21 = (uint64_t)(float)(floorf(v19) - v20);
    v22 = v10 * v18;
    if (v21 == (uint64_t)(float)(floorf(v22) - v20))
    {
      if ((v21 & 0x8000000000000000) == 0)
      {
        v23 = *a5;
        if ((a5[1] - *a5) >> 3 > v21)
        {
          v24 = *(double *)(v23 + 8 * v21);
          if ((a3 & 0xFFFFFFFE) == 2)
          {
            if (v12 >= v11)
              v25 = v12;
            else
              v25 = v11;
            _NF = v24 < v25;
          }
          else
          {
            if (v11 >= v12)
              v25 = v12;
            else
              v25 = v11;
            _NF = v25 < v24;
          }
          if (_NF)
            v24 = v25;
          *(double *)(v23 + 8 * v21) = v24;
        }
      }
    }
    else if (v11 - v12 <= *(double *)(a4 + 24))
    {
      v47 = result + 16 * a2;
      v48 = *(double *)(v47 - 16);
      v49 = *(double *)(v47 - 8);
      return _quantizeLine(a3, a4, a5, v8.f64[0], v9, v48, v49);
    }
    else
    {
      v27 = (double *)(result + 16 * a2 - 16);
      v28 = 2;
      if (a2 <= 2)
        v29 = 2;
      else
        v29 = a2;
      v30 = (double *)(result + 24);
      do
      {
        if (v29 == v28)
          goto LABEL_36;
        v31 = *v27 - v8.f64[0];
        v32 = *(double *)(result + 16 * a2 - 8) - v9;
        v33 = fabs(v31 * (v9 - *v30) - (v8.f64[0] - *(v30 - 1)) * v32);
        *(float *)&v31 = v32 * v32 + v31 * v31;
        v30 += 2;
        ++v28;
      }
      while (v33 / sqrtf(*(float *)&v31) <= *(double *)(a4 + 32));
      if (v28 - 1 >= a2)
      {
LABEL_36:
        v48 = *v27;
        v49 = *(double *)(result + 16 * a2 - 8);
        return _quantizeLine(a3, a4, a5, v8.f64[0], v9, v48, v49);
      }
      if (a2 == 3)
      {
        v50 = (const double *)(result + 16);
        v65 = vld2q_f64(v50);
        __asm { FMOV            V4.2D, #0.5 }
        v52 = (int64x2_t)vmulq_f64(vaddq_f64((float64x2_t)vextq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v8.f64[0], 0), (int8x16_t)v65.val[0], 8uLL), v65.val[0]), _Q4);
        v53 = (int64x2_t)vmulq_f64(vaddq_f64((float64x2_t)vextq_s8((int8x16_t)v8, (int8x16_t)v65.val[1], 8uLL), v65.val[1]), _Q4);
        v65.val[0] = (float64x2_t)vzip2q_s64(v52, v53);
        v60 = *(float64x2_t *)result;
        v61 = (float64x2_t)vzip1q_s64(v52, v53);
        v62 = vmulq_f64(vaddq_f64(v61, v65.val[0]), _Q4);
        v56 = v62;
        v57 = v65.val[0];
        v58 = *(float64x2_t *)(result + 32);
        _quantizeCurve(&v60, 3, a3, a4, a5);
        v46 = 3;
      }
      else
      {
        if (a2 != 4)
          return result;
        v34 = 0;
        __asm { FMOV            V1.2D, #0.5 }
        do
        {
          v39 = *(float64x2_t *)(result + v34 * 16 + 16);
          v54[v34++] = vmulq_f64(vaddq_f64(v8, v39), _Q1);
          v8 = v39;
        }
        while (v34 != 3);
        v40 = v54;
        v41 = (const double *)v55;
        v42 = (int8x16_t)vld1q_dup_f64(v40->f64);
        v40 = (float64x2_t *)((char *)v40 + 8);
        v66 = vld2q_f64(v41);
        v43 = (int8x16_t)vld1q_dup_f64(v40->f64);
        v44 = (int64x2_t)vmulq_f64(vaddq_f64((float64x2_t)vextq_s8(v42, (int8x16_t)v66.val[0], 8uLL), v66.val[0]), _Q1);
        v66.val[0] = vmulq_f64(vaddq_f64((float64x2_t)vextq_s8(v43, (int8x16_t)v66.val[1], 8uLL), v66.val[1]), _Q1);
        v66.val[1] = (float64x2_t)vzip2q_s64(v44, (int64x2_t)v66.val[0]);
        v60 = *(float64x2_t *)result;
        v61 = v54[0];
        v62 = (float64x2_t)vzip1q_s64(v44, (int64x2_t)v66.val[0]);
        v63 = vmulq_f64(vaddq_f64(v62, v66.val[1]), _Q1);
        v56 = v63;
        v57 = v66.val[1];
        v45 = *(_OWORD *)(result + 48);
        v58 = v55[1];
        v59 = v45;
        _quantizeCurve(&v60, 4, a3, a4, a5);
        v46 = 4;
      }
      return _quantizeCurve(&v56, v46, a3, a4, a5);
    }
  }
  return result;
}

void EQKitPath::describeElement(EQKitPath *this@<X0>, unint64_t a2@<X1>, std::string *a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  _OWORD v26[5];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  EQKitPath::extractPath(this);
  if (a2 < (uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 4)
  {
    EQKitPath::subpathContainingElement((unint64_t **)this, a2, (uint64_t)&v23);
    if (v23 >= a2)
      v6 = v24 + v23;
    else
      v6 = a2;
    if (v23 >= v6 - 1)
      v7 = v24 + v23;
    else
      v7 = v6 - 1;
    v8 = v7 - 1;
    if (v6 != v24 + v23 || v25 == 0)
      v10 = v6 - 1;
    else
      v10 = v8;
    v11 = v10 != 0x7FFFFFFFFFFFFFFFLL && EQKitPath::endPointForElement(this, v10, v26, 0);
    v12 = *((_QWORD *)this + 4);
    v13 = *(int *)(v12 + 16 * a2);
    if (v13 <= 3)
    {
      v14 = qword_217C27500[v13];
      memcpy(&v26[v11], (const void *)(*((_QWORD *)this + 1) + 16 * *(_QWORD *)(v12 + 16 * a2 + 8)), 16 * v14);
      v11 += v14;
    }
    if (v13 > 4)
      v15 = "unknown";
    else
      v15 = off_24D828A50[v13];
    MEMORY[0x219A15268](a3, v15);
    std::string::append(a3, " ");
    if (v11)
    {
      v22 = (char *)v26 + 8;
      do
      {
        _appendFormat(a3, "(%f, %f), ", v16, v17, v18, v19, v20, v21, *((_QWORD *)v22 - 1));
        v22 += 16;
        --v11;
      }
      while (v11);
    }
  }
}

void sub_21791AB00(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

BOOL EQKitPath::endPointForElement(EQKitPath *a1, unint64_t a2, _OWORD *a3, _QWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;

  EQKitPath::extractPath(a1);
  v8 = EQKitPath::endPointIndexForElement(a1, a2);
  v9 = *((_QWORD *)a1 + 1);
  v10 = *((_QWORD *)a1 + 2);
  v11 = (_QWORD *)((char *)a1 + 8);
  v12 = (v10 - v9) >> 4;
  if (v8 < v12)
  {
    if (a4)
      v13 = a4;
    else
      v13 = v11;
    *a3 = *(_OWORD *)(*v13 + 16 * v8);
  }
  return v8 < v12;
}

void _appendFormat(std::string *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  std::string::value_type *__s[2];

  __s[0] = 0;
  __s[1] = &a9;
  vasprintf(__s, a2, &a9);
  std::string::append(a1, __s[0]);
  free(__s[0]);
}

void EQKitPath::describe(EQKitPath *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;

  EQKitPath::extractPath(this);
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if (*((_QWORD *)this + 5) != *((_QWORD *)this + 4))
  {
    v10 = 0;
    do
    {
      _appendFormat(a2, "[%2lu] ", v4, v5, v6, v7, v8, v9, v10);
      EQKitPath::describeElement(this, v10, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::string::append(a2, (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      std::string::append(a2, "\n");
      ++v10;
    }
    while (v10 < (uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 4);
  }
}

void sub_21791ACC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

unint64_t EQKitPath::findJoinForEdge(_QWORD *a1, int a2, _OWORD *a3, _QWORD *a4)
{
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 *v13;
  unint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  unint64_t *v22;
  _QWORD *v23;
  __int128 v25;

  EQKitPath::extractPath((EQKitPath *)a1);
  switch(a2)
  {
    case 0:
      v8 = a1 + 16;
      goto LABEL_6;
    case 1:
      v8 = a1 + 18;
      goto LABEL_6;
    case 2:
      v8 = a1 + 17;
      goto LABEL_6;
    case 3:
      v8 = a1 + 19;
LABEL_6:
      v9 = *v8;
      if (*v8 == 0x7FFFFFFFFFFFFFFFLL)
        goto LABEL_7;
      goto LABEL_48;
    default:
LABEL_7:
      v10 = 0x7FFFFFFFFFFFFFFFLL;
      v11 = a1[5] - a1[4];
      if (!v11)
        return v10;
      v12 = 0;
      v13 = (__int128 *)MEMORY[0x24BDBEFB0];
      v14 = v11 >> 4;
      v16 = *MEMORY[0x24BDBEFB0];
      v15 = *(double *)(MEMORY[0x24BDBEFB0] + 8);
      if (v14 <= 1)
        v17 = 1;
      else
        v17 = v14;
      v9 = 0x7FFFFFFFFFFFFFFFLL;
      break;
  }
  do
  {
    v25 = *v13;
    if (!EQKitPath::endPointForElement((EQKitPath *)a1, v12, &v25, 0))
      goto LABEL_16;
    if (v9 == 0x7FFFFFFFFFFFFFFFLL)
    {
      v19 = *((double *)&v25 + 1);
      v18 = *(double *)&v25;
LABEL_15:
      v9 = v12;
      v15 = v19;
      v16 = v18;
      goto LABEL_16;
    }
    if (a2 == 2)
    {
      v19 = *((double *)&v25 + 1);
      v18 = *(double *)&v25;
      if (*(double *)&v25 > v16)
        goto LABEL_15;
      if (*(double *)&v25 == v16 && *((double *)&v25 + 1) < v15)
        goto LABEL_15;
    }
    else if (a2 == 1)
    {
      v19 = *((double *)&v25 + 1);
      v18 = *(double *)&v25;
      if (*((double *)&v25 + 1) < v15)
        goto LABEL_15;
      if (*((double *)&v25 + 1) == v15 && *(double *)&v25 < v16)
        goto LABEL_15;
    }
    else if (a2)
    {
      v19 = *((double *)&v25 + 1);
      v18 = *(double *)&v25;
      if (*((double *)&v25 + 1) > v15 || *((double *)&v25 + 1) == v15 && *(double *)&v25 < v16)
        goto LABEL_15;
    }
    else
    {
      v19 = *((double *)&v25 + 1);
      v18 = *(double *)&v25;
      if (*(double *)&v25 < v16 || *(double *)&v25 == v16 && *((double *)&v25 + 1) < v15)
        goto LABEL_15;
    }
LABEL_16:
    ++v12;
  }
  while (v17 != v12);
  v10 = 0x7FFFFFFFFFFFFFFFLL;
  if (v9 != 0x7FFFFFFFFFFFFFFFLL)
  {
    switch(a2)
    {
      case 0:
        v22 = a1 + 16;
        goto LABEL_47;
      case 1:
        v22 = a1 + 18;
        goto LABEL_47;
      case 2:
        v22 = a1 + 17;
        goto LABEL_47;
      case 3:
        v22 = a1 + 19;
LABEL_47:
        *v22 = v9;
        break;
      default:
        break;
    }
LABEL_48:
    if (a4)
      v23 = a4;
    else
      v23 = a1 + 1;
    EQKitPath::endPointForElement((EQKitPath *)a1, v9, a3, v23);
    return v9;
  }
  return v10;
}

void EQKitPath::appendToCGPath(uint64_t *a1, CGPath *a2, const CGAffineTransform *a3, uint64_t *a4)
{
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  CGFloat *v11;

  EQKitPath::extractPath((EQKitPath *)a1);
  if (!a4)
    a4 = a1 + 1;
  if (a4[1] - *a4 == a1[2] - a1[1])
  {
    for (i = a1[4]; i != a1[5]; i += 16)
    {
      v9 = *(_QWORD *)(i + 8);
      v10 = *a4;
      v11 = (CGFloat *)(*a4 + 16 * v9);
      switch(*(_DWORD *)i)
      {
        case 0:
          CGPathMoveToPoint(a2, a3, *v11, *(CGFloat *)(v10 + 16 * v9 + 8));
          break;
        case 1:
          CGPathAddLineToPoint(a2, a3, *v11, *(CGFloat *)(v10 + 16 * v9 + 8));
          break;
        case 2:
          CGPathAddQuadCurveToPoint(a2, a3, *v11, *(CGFloat *)(v10 + 16 * v9 + 8), v11[2], v11[3]);
          break;
        case 3:
          CGPathAddCurveToPoint(a2, a3, *v11, *(CGFloat *)(v10 + 16 * v9 + 8), v11[2], v11[3], v11[4], v11[5]);
          break;
        case 4:
          CGPathCloseSubpath(a2);
          break;
        default:
          continue;
      }
    }
  }
}

uint64_t EQKitPath::oppositeEdge(EQKitPath *this, CGRectEdge a2)
{
  if (this > 2)
    return 1;
  else
    return dword_217C27520[(int)this];
}

uint64_t EQKitPath::findCurveMirrorParallelWithAxis(EQKitPath *a1, int a2, double *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  double *v17;
  double v18;
  double v19;
  double *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  double *v30;
  double v31;
  double *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v38;
  _QWORD v39[3];

  *a3 = 0.0;
  EQKitPath::extractPath(a1);
  v6 = *((_QWORD *)a1 + 4);
  v7 = *((_QWORD *)a1 + 5);
  if (v7 == v6)
    return 0x7FFFFFFFFFFFFFFFLL;
  v8 = 0;
  v9 = 0;
  v10 = MEMORY[0x24BDBEFB0];
  while (1)
  {
    if (*(_DWORD *)(v6 + v8) != 3)
      goto LABEL_36;
    v11 = v6 + v8;
    v12 = *(_QWORD *)(v6 + v8 + 8);
    v13 = v12 + 1;
    v14 = v12 + 2;
    v15 = *((_QWORD *)a1 + 1);
    v16 = (*((_QWORD *)a1 + 2) - v15) >> 4;
    v17 = (double *)(v16 <= v13 ? v10 : v15 + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    v20 = (double *)(v16 <= v14 ? v10 : v15 + 16 * v14);
    v21 = v20[1];
    v22 = *v20 - v18;
    v23 = v21 - v19;
    v24 = a2 == 1 ? v21 - v19 : *v20 - v18;
    if (v24 != 0.0)
      goto LABEL_36;
    EQKitPath::subpathContainingElement((unint64_t **)a1, v9, (uint64_t)v39);
    v25 = v39[0];
    if (v9 + 1 < v39[1] + v39[0])
      v25 = v9 + 1;
    v6 = *((_QWORD *)a1 + 4);
    if (*(_DWORD *)(v6 + 16 * v25) == 3)
    {
      v26 = *(_QWORD *)(v11 + 8) + 2;
      v27 = *(_QWORD *)(v6 + 16 * v25 + 8);
      v28 = *((_QWORD *)a1 + 1);
      v29 = (*((_QWORD *)a1 + 2) - v28) >> 4;
      v30 = (double *)(v29 <= v26 ? v10 : v28 + 16 * v26);
      v31 = v30[1];
      v32 = (double *)(v29 <= v27 ? v10 : v28 + 16 * v27);
      v33 = v32[1];
      v34 = *v32 - *v30;
      v35 = v33 - v31;
      v36 = a2 == 1 ? v33 - v31 : *v32 - *v30;
      if (v36 == 0.0)
      {
        if (v22 > 0.0 && v34 > 0.0)
          goto LABEL_40;
        if (v22 < 0.0 && v34 < 0.0)
        {
          v38 = -1.0;
          if (v22 <= 0.0)
            goto LABEL_41;
          goto LABEL_40;
        }
        if (v23 > 0.0 && v35 > 0.0)
          goto LABEL_40;
        if (v23 < 0.0 && v35 < 0.0)
          break;
      }
    }
    v7 = *((_QWORD *)a1 + 5);
LABEL_36:
    ++v9;
    v8 += 16;
    if (v9 >= (v7 - v6) >> 4)
      return 0x7FFFFFFFFFFFFFFFLL;
  }
  v38 = -1.0;
  if (v23 > 0.0)
LABEL_40:
    v38 = 1.0;
LABEL_41:
  *a3 = v38;
  return v9;
}

uint64_t EQKitPath::addLineToAfterElement(EQKitPath *this, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char **v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v35;
  __int128 v36;

  v4 = EQKitPath::endPointIndexForElement(this, a2);
  v5 = 0x7FFFFFFFFFFFFFFFLL;
  if (v4 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v7 = (char **)((char *)this + 8);
    v6 = *((_QWORD *)this + 1);
    v8 = *((_QWORD *)this + 4);
    v36 = *(_OWORD *)(v6 + 16 * v4);
    *((_QWORD *)&v35 + 1) = (*((_QWORD *)this + 2) - v6) >> 4;
    *(_QWORD *)&v35 = 1;
    v9 = (_OWORD *)*((_QWORD *)this + 5);
    v10 = (uint64_t)v9 - v8;
    if (a2 + 1 >= ((uint64_t)v9 - v8) >> 4)
    {
      v11 = *((_QWORD *)this + 6);
      if ((unint64_t)v9 >= v11)
      {
        v13 = v10 >> 4;
        v14 = (v10 >> 4) + 1;
        if (v14 >> 60)
          std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
        v15 = v11 - v8;
        if (v15 >> 3 > v14)
          v14 = v15 >> 3;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
          v16 = 0xFFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)this + 48, v16);
        else
          v17 = 0;
        v18 = &v17[16 * v13];
        v19 = &v17[16 * v16];
        *(_OWORD *)v18 = v35;
        v12 = v18 + 16;
        v21 = (char *)*((_QWORD *)this + 4);
        v20 = (char *)*((_QWORD *)this + 5);
        if (v20 != v21)
        {
          do
          {
            *((_OWORD *)v18 - 1) = *((_OWORD *)v20 - 1);
            v18 -= 16;
            v20 -= 16;
          }
          while (v20 != v21);
          v20 = (char *)*((_QWORD *)this + 4);
        }
        *((_QWORD *)this + 4) = v18;
        *((_QWORD *)this + 5) = v12;
        *((_QWORD *)this + 6) = v19;
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v9 = v35;
        v12 = v9 + 1;
      }
      *((_QWORD *)this + 5) = v12;
    }
    else
    {
      std::vector<EQKitPath::PathElement>::insert((uint64_t)this + 32, (char *)(v8 + 16 * (a2 + 1)), (char *)&v35);
    }
    v22 = *((_QWORD *)this + 3);
    v23 = (_OWORD *)*((_QWORD *)this + 2);
    if ((unint64_t)v23 >= v22)
    {
      v25 = ((char *)v23 - *v7) >> 4;
      v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 60)
        std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
      v27 = v22 - (_QWORD)*v7;
      if (v27 >> 3 > v26)
        v26 = v27 >> 3;
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0)
        v28 = 0xFFFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28)
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)this + 24, v28);
      else
        v29 = 0;
      v30 = &v29[16 * v25];
      v31 = &v29[16 * v28];
      *(_OWORD *)v30 = v36;
      v24 = v30 + 16;
      v33 = (char *)*((_QWORD *)this + 1);
      v32 = (char *)*((_QWORD *)this + 2);
      if (v32 != v33)
      {
        do
        {
          *((_OWORD *)v30 - 1) = *((_OWORD *)v32 - 1);
          v30 -= 16;
          v32 -= 16;
        }
        while (v32 != v33);
        v32 = *v7;
      }
      *((_QWORD *)this + 1) = v30;
      *((_QWORD *)this + 2) = v24;
      *((_QWORD *)this + 3) = v31;
      if (v32)
        operator delete(v32);
    }
    else
    {
      *v23 = v36;
      v24 = v23 + 1;
    }
    *((_QWORD *)this + 2) = v24;
    return *((_QWORD *)&v35 + 1);
  }
  return v5;
}

char *std::vector<EQKitPath::PathElement>::insert(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _OWORD *v11;
  __int128 v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 4) + 1;
    if (v14 >> 60)
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    v15 = __src - v13;
    v16 = (__src - v13) >> 4;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 3 > v14)
      v14 = v17 >> 3;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
      v18 = 0xFFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[16 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[16 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 3;
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>(v8, v22);
        v20 = &v23[16 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[16 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 16 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_OWORD *)v20 = *(_OWORD *)v3;
    v28 = v20 + 16;
    v4 = (char *)std::vector<EQKitPath::PathElement>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_OWORD *)__src = *(_OWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 16;
  }
  else
  {
    v9 = __src + 16;
    v10 = v6 - 16;
    v11 = *(_OWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_OWORD *)v10;
      v10 += 16;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-16 * ((v6 - v9) >> 4)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 16 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_OWORD *)v4 = *(_OWORD *)v3;
  }
  return v4;
}

void sub_21791B670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void EQKitPath::appendSubpathRect(EQKitPath *this, CGRect a2)
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  CGFloat v7;
  CGFloat v8;
  CGFloat MaxY;
  CGFloat v10;
  double v11;
  double v12;
  char *v13;
  char **v14;
  CGFloat *v15;
  void **v16;
  CGFloat *v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  CGFloat *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  CGFloat *v41;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  CGFloat *v49;
  char *v50;
  unint64_t v51;
  char **v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  _OWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  unint64_t v99;
  _OWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  CGFloat MinY;
  CGFloat MinX;
  CGFloat MaxX;
  CGRect v113;
  CGRect v114;
  CGRect v115;
  CGRect v116;
  CGRect v117;
  CGRect v118;
  CGRect v119;

  height = a2.size.height;
  width = a2.size.width;
  y = a2.origin.y;
  x = a2.origin.x;
  MinX = CGRectGetMinX(a2);
  v113.origin.x = x;
  v113.origin.y = y;
  v113.size.width = width;
  v113.size.height = height;
  MinY = CGRectGetMinY(v113);
  v114.origin.x = x;
  v114.origin.y = y;
  v114.size.width = width;
  v114.size.height = height;
  MaxX = CGRectGetMaxX(v114);
  v115.origin.x = x;
  v115.origin.y = y;
  v115.size.width = width;
  v115.size.height = height;
  v7 = CGRectGetMinY(v115);
  v116.origin.x = x;
  v116.origin.y = y;
  v116.size.width = width;
  v116.size.height = height;
  v8 = CGRectGetMaxX(v116);
  v117.origin.x = x;
  v117.origin.y = y;
  v117.size.width = width;
  v117.size.height = height;
  MaxY = CGRectGetMaxY(v117);
  v118.origin.x = x;
  v118.origin.y = y;
  v118.size.width = width;
  v118.size.height = height;
  v10 = CGRectGetMinX(v118);
  v119.origin.x = x;
  v119.origin.y = y;
  v119.size.width = width;
  v119.size.height = height;
  v11 = CGRectGetMaxY(v119);
  v12 = v11;
  v14 = (char **)((char *)this + 24);
  v13 = (char *)*((_QWORD *)this + 3);
  v16 = (void **)((char *)this + 8);
  v15 = (CGFloat *)*((_QWORD *)this + 1);
  v17 = (CGFloat *)*((_QWORD *)this + 2);
  v18 = ((char *)v17 - (char *)v15) >> 4;
  v19 = v18 + 1;
  if (v17 >= (CGFloat *)v13)
  {
    if (v19 >> 60)
      goto LABEL_147;
    v21 = v13 - (char *)v15;
    v22 = v21 >> 3;
    if (v21 >> 3 <= v19)
      v22 = v18 + 1;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
      v23 = 0xFFFFFFFFFFFFFFFLL;
    else
      v23 = v22;
    if (v23)
    {
      v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)this + 24, v23);
      v15 = (CGFloat *)*((_QWORD *)this + 1);
      v17 = (CGFloat *)*((_QWORD *)this + 2);
    }
    else
    {
      v24 = 0;
    }
    v25 = &v24[16 * v18];
    v13 = &v24[16 * v23];
    *(CGFloat *)v25 = v10;
    *((double *)v25 + 1) = v12;
    v20 = v25 + 16;
    if (v17 != v15)
    {
      do
      {
        *((_OWORD *)v25 - 1) = *((_OWORD *)v17 - 1);
        v25 -= 16;
        v17 -= 2;
      }
      while (v17 != v15);
      v15 = (CGFloat *)*v16;
    }
    *((_QWORD *)this + 1) = v25;
    *((_QWORD *)this + 2) = v20;
    *((_QWORD *)this + 3) = v13;
    if (v15)
    {
      operator delete(v15);
      v13 = *v14;
    }
  }
  else
  {
    *v17 = v10;
    v17[1] = v11;
    v20 = (char *)(v17 + 2);
  }
  *((_QWORD *)this + 2) = v20;
  if (v20 >= v13)
  {
    v27 = (char *)*v16;
    v28 = (v20 - (_BYTE *)*v16) >> 4;
    v29 = v28 + 1;
    if ((unint64_t)(v28 + 1) >> 60)
      goto LABEL_147;
    v30 = v13 - v27;
    if (v30 >> 3 > v29)
      v29 = v30 >> 3;
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
      v31 = 0xFFFFFFFFFFFFFFFLL;
    else
      v31 = v29;
    if (v31)
    {
      v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)this + 24, v31);
      v27 = (char *)*((_QWORD *)this + 1);
      v20 = (char *)*((_QWORD *)this + 2);
    }
    else
    {
      v32 = 0;
    }
    v33 = &v32[16 * v28];
    v13 = &v32[16 * v31];
    *(CGFloat *)v33 = v8;
    *((CGFloat *)v33 + 1) = MaxY;
    v26 = v33 + 16;
    if (v20 != v27)
    {
      do
      {
        *((_OWORD *)v33 - 1) = *((_OWORD *)v20 - 1);
        v33 -= 16;
        v20 -= 16;
      }
      while (v20 != v27);
      v27 = (char *)*v16;
    }
    *((_QWORD *)this + 1) = v33;
    *((_QWORD *)this + 2) = v26;
    *((_QWORD *)this + 3) = v13;
    if (v27)
    {
      operator delete(v27);
      v13 = *v14;
    }
  }
  else
  {
    *(CGFloat *)v20 = v8;
    *((CGFloat *)v20 + 1) = MaxY;
    v26 = v20 + 16;
  }
  *((_QWORD *)this + 2) = v26;
  if (v26 >= v13)
  {
    v35 = (char *)*v16;
    v36 = (v26 - (_BYTE *)*v16) >> 4;
    v37 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 60)
      goto LABEL_147;
    v38 = v13 - v35;
    if (v38 >> 3 > v37)
      v37 = v38 >> 3;
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0)
      v39 = 0xFFFFFFFFFFFFFFFLL;
    else
      v39 = v37;
    if (v39)
    {
      v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)this + 24, v39);
      v35 = (char *)*((_QWORD *)this + 1);
      v26 = (char *)*((_QWORD *)this + 2);
    }
    else
    {
      v40 = 0;
    }
    v41 = (CGFloat *)&v40[16 * v36];
    v13 = &v40[16 * v39];
    *v41 = MaxX;
    v41[1] = v7;
    v34 = v41 + 2;
    if (v26 != v35)
    {
      do
      {
        *((_OWORD *)v41 - 1) = *((_OWORD *)v26 - 1);
        v41 -= 2;
        v26 -= 16;
      }
      while (v26 != v35);
      v35 = (char *)*v16;
    }
    *((_QWORD *)this + 1) = v41;
    *((_QWORD *)this + 2) = v34;
    *((_QWORD *)this + 3) = v13;
    if (v35)
    {
      operator delete(v35);
      v13 = *v14;
    }
  }
  else
  {
    *(CGFloat *)v26 = MaxX;
    *((CGFloat *)v26 + 1) = v7;
    v34 = (CGFloat *)(v26 + 16);
  }
  *((_QWORD *)this + 2) = v34;
  if (v34 < (CGFloat *)v13)
  {
    *v34 = MinX;
    v34[1] = MinY;
    v42 = v34 + 2;
    goto LABEL_65;
  }
  v43 = (char *)*v16;
  v44 = ((char *)v34 - (_BYTE *)*v16) >> 4;
  v45 = v44 + 1;
  if ((unint64_t)(v44 + 1) >> 60)
LABEL_147:
    std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
  v46 = v13 - v43;
  if (v46 >> 3 > v45)
    v45 = v46 >> 3;
  if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0)
    v47 = 0xFFFFFFFFFFFFFFFLL;
  else
    v47 = v45;
  if (v47)
  {
    v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)this + 24, v47);
    v43 = (char *)*((_QWORD *)this + 1);
    v34 = (CGFloat *)*((_QWORD *)this + 2);
  }
  else
  {
    v48 = 0;
  }
  v49 = (CGFloat *)&v48[16 * v44];
  v50 = &v48[16 * v47];
  *v49 = MinX;
  v49[1] = MinY;
  v42 = v49 + 2;
  if (v34 != (CGFloat *)v43)
  {
    do
    {
      *((_OWORD *)v49 - 1) = *((_OWORD *)v34 - 1);
      v49 -= 2;
      v34 -= 2;
    }
    while (v34 != (CGFloat *)v43);
    v43 = (char *)*v16;
  }
  *((_QWORD *)this + 1) = v49;
  *((_QWORD *)this + 2) = v42;
  *((_QWORD *)this + 3) = v50;
  if (v43)
    operator delete(v43);
LABEL_65:
  v51 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 2) = v42;
  v52 = (char **)((char *)this + 32);
  v53 = (_QWORD *)*((_QWORD *)this + 5);
  if ((unint64_t)v53 >= v51)
  {
    v55 = ((char *)v53 - *v52) >> 4;
    v56 = v55 + 1;
    if ((unint64_t)(v55 + 1) >> 60)
      goto LABEL_146;
    v57 = v51 - (_QWORD)*v52;
    if (v57 >> 3 > v56)
      v56 = v57 >> 3;
    if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF0)
      v58 = 0xFFFFFFFFFFFFFFFLL;
    else
      v58 = v56;
    if (v58)
      v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)this + 48, v58);
    else
      v59 = 0;
    v60 = &v59[16 * v55];
    v61 = &v59[16 * v58];
    *(_QWORD *)v60 = 0;
    *((_QWORD *)v60 + 1) = v18;
    v54 = v60 + 16;
    v63 = (char *)*((_QWORD *)this + 4);
    v62 = (char *)*((_QWORD *)this + 5);
    if (v62 != v63)
    {
      do
      {
        *((_OWORD *)v60 - 1) = *((_OWORD *)v62 - 1);
        v60 -= 16;
        v62 -= 16;
      }
      while (v62 != v63);
      v62 = *v52;
    }
    *((_QWORD *)this + 4) = v60;
    *((_QWORD *)this + 5) = v54;
    *((_QWORD *)this + 6) = v61;
    if (v62)
      operator delete(v62);
  }
  else
  {
    *v53 = 0;
    v53[1] = v18;
    v54 = v53 + 2;
  }
  *((_QWORD *)this + 5) = v54;
  v64 = *((_QWORD *)this + 6);
  if ((unint64_t)v54 >= v64)
  {
    v66 = ((char *)v54 - *v52) >> 4;
    if ((unint64_t)(v66 + 1) >> 60)
      goto LABEL_146;
    v67 = v64 - (_QWORD)*v52;
    v68 = v67 >> 3;
    if (v67 >> 3 <= (unint64_t)(v66 + 1))
      v68 = v66 + 1;
    if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF0)
      v69 = 0xFFFFFFFFFFFFFFFLL;
    else
      v69 = v68;
    if (v69)
      v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)this + 48, v69);
    else
      v70 = 0;
    v71 = &v70[16 * v66];
    v72 = &v70[16 * v69];
    *(_QWORD *)v71 = 1;
    *((_QWORD *)v71 + 1) = v19;
    v65 = v71 + 16;
    v74 = (char *)*((_QWORD *)this + 4);
    v73 = (char *)*((_QWORD *)this + 5);
    if (v73 != v74)
    {
      do
      {
        *((_OWORD *)v71 - 1) = *((_OWORD *)v73 - 1);
        v71 -= 16;
        v73 -= 16;
      }
      while (v73 != v74);
      v73 = *v52;
    }
    *((_QWORD *)this + 4) = v71;
    *((_QWORD *)this + 5) = v65;
    *((_QWORD *)this + 6) = v72;
    if (v73)
      operator delete(v73);
  }
  else
  {
    *v54 = 1;
    v54[1] = v19;
    v65 = v54 + 2;
  }
  v75 = v18 + 2;
  *((_QWORD *)this + 5) = v65;
  v76 = *((_QWORD *)this + 6);
  if ((unint64_t)v65 >= v76)
  {
    v78 = ((char *)v65 - *v52) >> 4;
    if ((unint64_t)(v78 + 1) >> 60)
      goto LABEL_146;
    v79 = v76 - (_QWORD)*v52;
    v80 = v79 >> 3;
    if (v79 >> 3 <= (unint64_t)(v78 + 1))
      v80 = v78 + 1;
    if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF0)
      v81 = 0xFFFFFFFFFFFFFFFLL;
    else
      v81 = v80;
    if (v81)
      v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)this + 48, v81);
    else
      v82 = 0;
    v83 = &v82[16 * v78];
    v84 = &v82[16 * v81];
    *(_QWORD *)v83 = 1;
    *((_QWORD *)v83 + 1) = v75;
    v77 = v83 + 16;
    v86 = (char *)*((_QWORD *)this + 4);
    v85 = (char *)*((_QWORD *)this + 5);
    if (v85 != v86)
    {
      do
      {
        *((_OWORD *)v83 - 1) = *((_OWORD *)v85 - 1);
        v83 -= 16;
        v85 -= 16;
      }
      while (v85 != v86);
      v85 = *v52;
    }
    *((_QWORD *)this + 4) = v83;
    *((_QWORD *)this + 5) = v77;
    *((_QWORD *)this + 6) = v84;
    if (v85)
      operator delete(v85);
  }
  else
  {
    *v65 = 1;
    v65[1] = v75;
    v77 = v65 + 2;
  }
  v87 = v18 + 3;
  *((_QWORD *)this + 5) = v77;
  v88 = *((_QWORD *)this + 6);
  if ((unint64_t)v77 >= v88)
  {
    v90 = ((char *)v77 - *v52) >> 4;
    if ((unint64_t)(v90 + 1) >> 60)
      goto LABEL_146;
    v91 = v88 - (_QWORD)*v52;
    v92 = v91 >> 3;
    if (v91 >> 3 <= (unint64_t)(v90 + 1))
      v92 = v90 + 1;
    if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF0)
      v93 = 0xFFFFFFFFFFFFFFFLL;
    else
      v93 = v92;
    if (v93)
      v94 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)this + 48, v93);
    else
      v94 = 0;
    v95 = &v94[16 * v90];
    v96 = &v94[16 * v93];
    *(_QWORD *)v95 = 1;
    *((_QWORD *)v95 + 1) = v87;
    v89 = v95 + 16;
    v98 = (char *)*((_QWORD *)this + 4);
    v97 = (char *)*((_QWORD *)this + 5);
    if (v97 != v98)
    {
      do
      {
        *((_OWORD *)v95 - 1) = *((_OWORD *)v97 - 1);
        v95 -= 16;
        v97 -= 16;
      }
      while (v97 != v98);
      v97 = *v52;
    }
    *((_QWORD *)this + 4) = v95;
    *((_QWORD *)this + 5) = v89;
    *((_QWORD *)this + 6) = v96;
    if (v97)
      operator delete(v97);
  }
  else
  {
    *v77 = 1;
    v77[1] = v87;
    v89 = v77 + 2;
  }
  *((_QWORD *)this + 5) = v89;
  v99 = *((_QWORD *)this + 6);
  if ((unint64_t)v89 < v99)
  {
    *v89 = xmmword_217C27480;
    v100 = v89 + 1;
    goto LABEL_145;
  }
  v101 = ((char *)v89 - *v52) >> 4;
  if ((unint64_t)(v101 + 1) >> 60)
LABEL_146:
    std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
  v102 = v99 - (_QWORD)*v52;
  v103 = v102 >> 3;
  if (v102 >> 3 <= (unint64_t)(v101 + 1))
    v103 = v101 + 1;
  if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF0)
    v104 = 0xFFFFFFFFFFFFFFFLL;
  else
    v104 = v103;
  if (v104)
    v105 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)this + 48, v104);
  else
    v105 = 0;
  v106 = &v105[16 * v101];
  v107 = &v105[16 * v104];
  *(_OWORD *)v106 = xmmword_217C27480;
  v100 = v106 + 16;
  v109 = (char *)*((_QWORD *)this + 4);
  v108 = (char *)*((_QWORD *)this + 5);
  if (v108 != v109)
  {
    do
    {
      *((_OWORD *)v106 - 1) = *((_OWORD *)v108 - 1);
      v106 -= 16;
      v108 -= 16;
    }
    while (v108 != v109);
    v108 = *v52;
  }
  *((_QWORD *)this + 4) = v106;
  *((_QWORD *)this + 5) = v100;
  *((_QWORD *)this + 6) = v107;
  if (v108)
    operator delete(v108);
LABEL_145:
  *((_QWORD *)this + 5) = v100;
}

uint64_t EQKitPath::findStemForEdge@<X0>(unint64_t **this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  double *v11;
  double *v12;
  unsigned __int32 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  unint64_t v35;
  unint64_t *v36;
  double *v37;
  double *v38;
  char v39[8];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  __int128 v50;
  __int128 v51;
  unint64_t v52;
  unint64_t v53[2];

  v53[1] = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a3 = 0;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_DWORD *)(a3 + 56) = 0;
  result = EQKitPath::findJoinForEdge(this, a2, &v50, 0);
  if (result != 0x7FFFFFFFFFFFFFFFLL)
  {
    v7 = result;
    EQKitPath::subpathContainingElement(this, result, (uint64_t)&v47);
    v45 = 0;
    v46 = 0;
    v44 = 0;
    result = EQKitPath::isLineTo(this, v7, &v46, &v45, (const EQKitPath::Subpath *)&v47);
    if ((_DWORD)result)
    {
      v8 = v45;
      v9 = v46;
      v10 = this[1];
      v11 = (double *)&v10[2 * v46];
      v12 = (double *)&v10[2 * v45];
      v13 = a2 & 0xFFFFFFFD;
      if ((a2 & 0xFFFFFFFD) == 1)
        ++v11;
      if (v13 == 1)
        ++v12;
      if (vabdd_f64(*v11, *v12) >= 0.00100000005)
      {
        *(_QWORD *)&v51 = v46;
        *((_QWORD *)&v51 + 1) = v45;
        v26 = v47;
        v27 = v48 + v47;
        if (v7 + 1 < v48 + v47)
          v28 = v7 + 1;
        else
          v28 = v47;
        if (v28 + 1 < v27)
          v26 = v28 + 1;
        if (v28 != v27 - 1 || v49 == 0)
          v30 = v28;
        else
          v30 = v26;
        result = EQKitPath::isLineTo(this, v30, &v44, &v52, (const EQKitPath::Subpath *)&v47);
        if ((_DWORD)result && v44 == *((_QWORD *)&v51 + 1))
        {
          v31 = v47;
          v32 = v48 + v47;
          if (v30 + 1 < v48 + v47)
            v33 = v30 + 1;
          else
            v33 = v47;
          if (v33 + 1 < v32)
            v31 = v33 + 1;
          v34 = v33 != v32 - 1 || v49 == 0;
          v35 = v34 ? v33 : v31;
          result = EQKitPath::isLineTo(this, v35, &v44, v53, (const EQKitPath::Subpath *)&v47);
          if ((_DWORD)result)
          {
            if (v44 == v52)
            {
              v36 = this[1];
              v37 = (double *)&v36[2 * *((_QWORD *)&v51 + 1)];
              v38 = (double *)&v36[2 * v44];
              if (v13 == 1)
              {
                ++v37;
                ++v38;
              }
              if (vabdd_f64(*v37, *v38) < 0.00100000005)
                goto LABEL_38;
            }
          }
        }
      }
      else
      {
        *((_QWORD *)&v51 + 1) = v46;
        v52 = v45;
        if (v47 >= v7)
          v14 = v48 + v47;
        else
          v14 = v7;
        if (v47 >= v14 - 1)
          v15 = v48 + v47;
        else
          v15 = v14 - 1;
        v16 = v15 - 1;
        if (v14 != v48 + v47 || v49 == 0)
          v18 = v14 - 1;
        else
          v18 = v16;
        result = EQKitPath::isLineTo(this, v18, (unint64_t *)&v51, &v44, (const EQKitPath::Subpath *)&v47);
        if ((_DWORD)result)
          v19 = v44 == v9;
        else
          v19 = 0;
        if (v19)
        {
          v20 = v47;
          v21 = v48 + v47;
          if (v7 + 1 < v48 + v47)
            v22 = v7 + 1;
          else
            v22 = v47;
          if (v22 + 1 < v21)
            v20 = v22 + 1;
          v23 = v22 != v21 - 1 || v49 == 0;
          v24 = v23 ? v22 : v20;
          result = EQKitPath::isLineTo(this, v24, &v44, v53, (const EQKitPath::Subpath *)&v47);
          if ((_DWORD)result)
          {
            if (v44 == v8)
            {
LABEL_38:
              result = EQKitPath::Stem::Stem((uint64_t)v39, a2, (uint64_t)this, &v51);
              if (v39 != (char *)a3)
              {
                *(_BYTE *)a3 = v39[0];
                v25 = v41;
                *(_OWORD *)(a3 + 8) = v40;
                *(_OWORD *)(a3 + 24) = v25;
                *(_OWORD *)(a3 + 40) = v42;
                *(_DWORD *)(a3 + 56) = v43;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void EQKitPath::appendToCGPathWithModifiedStem(EQKitPath *this, CGPath *a2, float64x2_t *a3, unsigned int a4, const EQKitPath::Stem *a5, double a6)
{
  int v12;
  int v13;
  CGAffineTransform v14;
  __int128 v15;
  void *__p[2];
  uint64_t v17;

  if (a2)
  {
    if (!a5 || a6 == 0.0)
    {
      *(_OWORD *)__p = *MEMORY[0x24BDBEFB0];
      if (EQKitPath::findJoinForEdge(this, a4, __p, 0) != 0x7FFFFFFFFFFFFFFFLL)
      {
        memset(&v14, 0, sizeof(v14));
        CGAffineTransformMakeTranslation(&v14, a3->f64[0] - *(double *)__p, a3->f64[1] - *(double *)&__p[1]);
        EQKitPath::appendToCGPath((uint64_t *)this, a2, &v14, 0);
        v13 = a4 > 2 ? 1 : dword_217C27520[a4];
        if (EQKitPath::findJoinForEdge(this, v13, __p, 0))
          *a3 = vaddq_f64(*(float64x2_t *)&v14.tx, vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v14.c, *(double *)&__p[1]), *(float64x2_t *)&v14.a, *(double *)__p));
      }
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
      v17 = 0;
      std::vector<CGPoint>::__init_with_size[abi:ne180100]<CGPoint*,CGPoint*>(__p, *((const void **)this + 1), *((_QWORD *)this + 2), (uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 4);
      EQKitPath::Stem::adjustStemPoints((uint64_t)a5, (uint64_t)this, __p, a6);
      v15 = *MEMORY[0x24BDBEFB0];
      if (EQKitPath::findJoinForEdge(this, a4, &v15, __p) != 0x7FFFFFFFFFFFFFFFLL)
      {
        memset(&v14, 0, sizeof(v14));
        CGAffineTransformMakeTranslation(&v14, a3->f64[0] - *(double *)&v15, a3->f64[1] - *((double *)&v15 + 1));
        EQKitPath::appendToCGPath((uint64_t *)this, a2, &v14, (uint64_t *)__p);
        if (a4 > 2)
          v12 = 1;
        else
          v12 = dword_217C27520[a4];
        if (EQKitPath::findJoinForEdge(this, v12, &v15, __p))
          *a3 = vaddq_f64(*(float64x2_t *)&v14.tx, vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v14.c, *((double *)&v15 + 1)), *(float64x2_t *)&v14.a, *(double *)&v15));
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }
}

void sub_21791C408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t EQKitPath::applyModifiedStemToPoints(uint64_t result, uint64_t a2, _QWORD *a3, double a4)
{
  if (a2)
  {
    if (a4 != 0.0)
      return EQKitPath::Stem::adjustStemPoints(a2, result, a3, a4);
  }
  return result;
}

void std::vector<CGPoint>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
}

void sub_21791C498(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

_QWORD *std::vector<CGPoint>::__init_with_size[abi:ne180100]<CGPoint*,CGPoint*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<CGPoint>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_21791C5BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<CGPoint>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

_QWORD *std::vector<EQKitPath::PathElement>::__init_with_size[abi:ne180100]<EQKitPath::PathElement*,EQKitPath::PathElement*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<CGPoint>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_21791C674(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_21791C6EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

char *std::vector<CGPoint>::__assign_with_size[abi:ne180100]<CGPoint*,CGPoint*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60)
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<CGPoint>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 4;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

char *std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void *std::vector<EQKitPath::PathElement>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  void *v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(void **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v9 = *(_QWORD *)(a2 + 8);
    do
    {
      v7 = (void *)(v9 - 16);
      *(_OWORD *)(v9 - 16) = *((_OWORD *)v8 - 1);
      v8 -= 16;
      v9 -= 16;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(void **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

void EQKitPath::EQKitPath(void **a1, void **a2, uint64_t a3)
{
  void *v5;
  void *v6;

  v5 = *a1;
  if (v5)
  {
    *(_QWORD *)(a3 + 40) = v5;
    operator delete(v5);
  }
  v6 = *a2;
  if (*a2)
  {
    *(_QWORD *)(a3 + 16) = v6;
    operator delete(v6);
  }
}

uint64_t EQKitCompositeGlyph::EQKitCompositeGlyph(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  const __CTFontDescriptor *v7;

  *(_QWORD *)a1 = &off_24D828A88;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = a3;
  bzero((void *)(a1 + 32), 0x50uLL);
  *(_QWORD *)(a1 + 20) = *(_QWORD *)(a4 + 8);
  if (*(_QWORD *)a4)
  {
    v7 = CTFontDescriptorCreateWithNameAndSize(*(CFStringRef *)a4, *(CGFloat *)(a2 + 16));
    *(_QWORD *)(a1 + 8) = CTFontCreateWithFontDescriptor(v7, *(CGFloat *)(a2 + 16), 0);
    CFRelease(v7);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
  }
  return a1;
}

void EQKitCompositeGlyph::EQKitCompositeGlyph(EQKitCompositeGlyph *this, const EQKitCompositeGlyph *a2)
{
  CFTypeRef v4;

  *(_QWORD *)this = &off_24D828A88;
  v4 = (CFTypeRef)*((_QWORD *)a2 + 1);
  if (v4)
    v4 = CFRetain(v4);
  *((_QWORD *)this + 1) = v4;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *(_QWORD *)((char *)this + 20) = *(_QWORD *)((char *)a2 + 20);
  bzero((char *)this + 32, 0x50uLL);
  EQKitCompositeGlyph::copyCache(this, (const EQKitPath **)a2);
}

void EQKitCompositeGlyph::copyCache(EQKitCompositeGlyph *this, const EQKitPath **a2)
{
  EQKitPath *v4;
  EQKitPath *v5;
  EQKitPath *v6;
  EQKitPath *v7;
  EQKitPath::Stem *v8;
  EQKitPath::Stem *v9;
  EQKitPath::Stem *v10;
  EQKitPath::Stem *v11;
  EQKitPath::Stem *v12;

  EQKitCompositeGlyph::clearCache(this);
  if (a2[4])
  {
    v4 = (EQKitPath *)operator new();
    EQKitPath::EQKitPath(v4, a2[4]);
  }
  else
  {
    v4 = 0;
  }
  *((_QWORD *)this + 4) = v4;
  if (a2[5])
  {
    v5 = (EQKitPath *)operator new();
    EQKitPath::EQKitPath(v5, a2[5]);
  }
  else
  {
    v5 = 0;
  }
  *((_QWORD *)this + 5) = v5;
  if (a2[6])
  {
    v6 = (EQKitPath *)operator new();
    EQKitPath::EQKitPath(v6, a2[6]);
  }
  else
  {
    v6 = 0;
  }
  *((_QWORD *)this + 6) = v6;
  if (a2[7])
  {
    v7 = (EQKitPath *)operator new();
    EQKitPath::EQKitPath(v7, a2[7]);
  }
  else
  {
    v7 = 0;
  }
  *((_QWORD *)this + 7) = v7;
  if (a2[8])
  {
    v8 = (EQKitPath::Stem *)operator new();
    EQKitPath::Stem::Stem(v8, a2[8]);
  }
  else
  {
    v8 = 0;
  }
  *((_QWORD *)this + 8) = v8;
  if (a2[9])
  {
    v9 = (EQKitPath::Stem *)operator new();
    EQKitPath::Stem::Stem(v9, a2[9]);
  }
  else
  {
    v9 = 0;
  }
  *((_QWORD *)this + 9) = v9;
  if (a2[10])
  {
    v10 = (EQKitPath::Stem *)operator new();
    EQKitPath::Stem::Stem(v10, a2[10]);
  }
  else
  {
    v10 = 0;
  }
  *((_QWORD *)this + 10) = v10;
  if (a2[11])
  {
    v11 = (EQKitPath::Stem *)operator new();
    EQKitPath::Stem::Stem(v11, a2[11]);
  }
  else
  {
    v11 = 0;
  }
  *((_QWORD *)this + 11) = v11;
  if (a2[12])
  {
    v12 = (EQKitPath::Stem *)operator new();
    EQKitPath::Stem::Stem(v12, a2[12]);
  }
  else
  {
    v12 = 0;
  }
  *((_QWORD *)this + 12) = v12;
}

void sub_21791CD8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A153B8](v1, 0x1000C401B087D88);
  _Unwind_Resume(a1);
}

EQKitCompositeGlyph *EQKitCompositeGlyph::operator=(EQKitCompositeGlyph *this, EQKitCompositeGlyph *a2)
{
  const void *v4;
  CFTypeRef v5;

  if (this != a2)
  {
    v4 = (const void *)*((_QWORD *)this + 1);
    if (v4)
      CFRelease(v4);
    v5 = (CFTypeRef)*((_QWORD *)a2 + 1);
    if (v5)
      v5 = CFRetain(v5);
    *((_QWORD *)this + 1) = v5;
    *(_QWORD *)((char *)this + 20) = *(_QWORD *)((char *)a2 + 20);
    EQKitCompositeGlyph::copyCache(this, (const EQKitPath **)a2);
  }
  return this;
}

void EQKitCompositeGlyph::~EQKitCompositeGlyph(EQKitCompositeGlyph *this)
{
  const void *v2;

  *(_QWORD *)this = &off_24D828A88;
  EQKitCompositeGlyph::clearCache(this);
  v2 = (const void *)*((_QWORD *)this + 1);
  if (v2)
    CFRelease(v2);
}

{
  EQKitCompositeGlyph::~EQKitCompositeGlyph(this);
  JUMPOUT(0x219A153B8);
}

uint64_t EQKitCompositeGlyph::clearCache(EQKitCompositeGlyph *this)
{
  EQKitPath *v2;
  EQKitPath *v3;
  EQKitPath *v4;
  EQKitPath *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v2 = (EQKitPath *)*((_QWORD *)this + 4);
  if (v2)
  {
    EQKitPath::~EQKitPath(v2);
    MEMORY[0x219A153B8]();
    *((_QWORD *)this + 4) = 0;
  }
  v3 = (EQKitPath *)*((_QWORD *)this + 5);
  if (v3)
  {
    EQKitPath::~EQKitPath(v3);
    MEMORY[0x219A153B8]();
    *((_QWORD *)this + 5) = 0;
  }
  v4 = (EQKitPath *)*((_QWORD *)this + 6);
  if (v4)
  {
    EQKitPath::~EQKitPath(v4);
    MEMORY[0x219A153B8]();
    *((_QWORD *)this + 6) = 0;
  }
  v5 = (EQKitPath *)*((_QWORD *)this + 7);
  if (v5)
  {
    EQKitPath::~EQKitPath(v5);
    MEMORY[0x219A153B8]();
    *((_QWORD *)this + 7) = 0;
  }
  v6 = *((_QWORD *)this + 8);
  if (v6)
  {
    MEMORY[0x219A153B8](v6, 0x1000C401B087D88);
    *((_QWORD *)this + 8) = 0;
  }
  v7 = *((_QWORD *)this + 9);
  if (v7)
  {
    MEMORY[0x219A153B8](v7, 0x1000C401B087D88);
    *((_QWORD *)this + 9) = 0;
  }
  v8 = *((_QWORD *)this + 10);
  if (v8)
  {
    MEMORY[0x219A153B8](v8, 0x1000C401B087D88);
    *((_QWORD *)this + 10) = 0;
  }
  v9 = *((_QWORD *)this + 11);
  if (v9)
  {
    MEMORY[0x219A153B8](v9, 0x1000C401B087D88);
    *((_QWORD *)this + 11) = 0;
  }
  result = *((_QWORD *)this + 12);
  if (result)
  {
    result = MEMORY[0x219A153B8](result, 0x1000C401B087D88);
    *((_QWORD *)this + 12) = 0;
  }
  return result;
}

uint64_t EQKitCompositeGlyph::upperPath(EQKitCompositeGlyph *this)
{
  const __CTFont *v2;
  uint64_t result;
  int v4;
  BOOL v5;
  const CGPath *v7;
  EQKitPath *v8;
  CGAffineTransform v9;

  v2 = (const __CTFont *)*((_QWORD *)this + 1);
  result = *((_QWORD *)this + 4);
  v4 = *((unsigned __int16 *)this + 10);
  if (v2)
    v5 = result == 0;
  else
    v5 = 0;
  if (v5 && v4 != 0xFFFF)
  {
    memset(&v9, 0, sizeof(v9));
    CGAffineTransformMakeScale(&v9, 1.0, -1.0);
    v7 = CTFontCreatePathForGlyph(v2, v4, &v9);
    v8 = (EQKitPath *)operator new();
    EQKitPath::EQKitPath(v8, v7);
    *((_QWORD *)this + 4) = v8;
    CGPathRelease(v7);
    return *((_QWORD *)this + 4);
  }
  return result;
}

void sub_21791D0A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A153B8](v1, 0x1070C40036CD406);
  _Unwind_Resume(a1);
}

uint64_t EQKitCompositeGlyph::lowerPath(EQKitCompositeGlyph *this)
{
  const __CTFont *v2;
  uint64_t result;
  int v4;
  BOOL v5;
  const CGPath *v7;
  EQKitPath *v8;
  CGAffineTransform v9;

  v2 = (const __CTFont *)*((_QWORD *)this + 1);
  result = *((_QWORD *)this + 5);
  v4 = *((unsigned __int16 *)this + 11);
  if (v2)
    v5 = result == 0;
  else
    v5 = 0;
  if (v5 && v4 != 0xFFFF)
  {
    memset(&v9, 0, sizeof(v9));
    CGAffineTransformMakeScale(&v9, 1.0, -1.0);
    v7 = CTFontCreatePathForGlyph(v2, v4, &v9);
    v8 = (EQKitPath *)operator new();
    EQKitPath::EQKitPath(v8, v7);
    *((_QWORD *)this + 5) = v8;
    CGPathRelease(v7);
    return *((_QWORD *)this + 5);
  }
  return result;
}

void sub_21791D17C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A153B8](v1, 0x1070C40036CD406);
  _Unwind_Resume(a1);
}

uint64_t EQKitCompositeGlyph::middlePath(EQKitCompositeGlyph *this)
{
  const __CTFont *v2;
  uint64_t result;
  int v4;
  BOOL v5;
  const CGPath *v7;
  EQKitPath *v8;
  CGAffineTransform v9;

  v2 = (const __CTFont *)*((_QWORD *)this + 1);
  result = *((_QWORD *)this + 6);
  v4 = *((unsigned __int16 *)this + 12);
  if (v2)
    v5 = result == 0;
  else
    v5 = 0;
  if (v5 && v4 != 0xFFFF)
  {
    memset(&v9, 0, sizeof(v9));
    CGAffineTransformMakeScale(&v9, 1.0, -1.0);
    v7 = CTFontCreatePathForGlyph(v2, v4, &v9);
    v8 = (EQKitPath *)operator new();
    EQKitPath::EQKitPath(v8, v7);
    *((_QWORD *)this + 6) = v8;
    CGPathRelease(v7);
    return *((_QWORD *)this + 6);
  }
  return result;
}

void sub_21791D250(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A153B8](v1, 0x1070C40036CD406);
  _Unwind_Resume(a1);
}

uint64_t EQKitCompositeGlyph::extenderPath(EQKitCompositeGlyph *this)
{
  const __CTFont *v2;
  uint64_t result;
  int v4;
  BOOL v5;
  const CGPath *v7;
  EQKitPath *v8;
  CGAffineTransform v9;

  v2 = (const __CTFont *)*((_QWORD *)this + 1);
  result = *((_QWORD *)this + 7);
  v4 = *((unsigned __int16 *)this + 13);
  if (v2)
    v5 = result == 0;
  else
    v5 = 0;
  if (v5 && v4 != 0xFFFF)
  {
    memset(&v9, 0, sizeof(v9));
    CGAffineTransformMakeScale(&v9, 1.0, -1.0);
    v7 = CTFontCreatePathForGlyph(v2, v4, &v9);
    v8 = (EQKitPath *)operator new();
    EQKitPath::EQKitPath(v8, v7);
    *((_QWORD *)this + 7) = v8;
    CGPathRelease(v7);
    return *((_QWORD *)this + 7);
  }
  return result;
}

void sub_21791D324(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A153B8](v1, 0x1070C40036CD406);
  _Unwind_Resume(a1);
}

EQKitPath::Stem *EQKitCompositeGlyph::upperPathLowerStem(EQKitCompositeGlyph *this)
{
  unint64_t **v2;
  int v3;
  EQKitPath::Stem *result;

  if ((*((_BYTE *)this + 104) & 1) != 0)
    return (EQKitPath::Stem *)*((_QWORD *)this + 8);
  v2 = (unint64_t **)EQKitCompositeGlyph::upperPath(this);
  if (*((_DWORD *)this + 4) == 2)
    v3 = 3;
  else
    v3 = 2;
  result = _createStem(v2, v3);
  *((_QWORD *)this + 8) = result;
  *((_BYTE *)this + 104) |= 1u;
  return result;
}

EQKitPath::Stem *_createStem(unint64_t **a1, int a2)
{
  EQKitPath::Stem *v2;
  _BYTE v4[64];

  if (!a1)
    return 0;
  EQKitPath::findStemForEdge(a1, a2, (uint64_t)v4);
  if (!v4[0])
    return 0;
  v2 = (EQKitPath::Stem *)operator new();
  EQKitPath::Stem::Stem(v2, (const EQKitPath::Stem *)v4);
  return v2;
}

void sub_21791D404(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A153B8](v1, 0x1000C401B087D88);
  _Unwind_Resume(a1);
}

EQKitPath::Stem *EQKitCompositeGlyph::lowerPathUpperStem(EQKitCompositeGlyph *this)
{
  unint64_t **v2;
  EQKitPath::Stem *result;

  if ((*((_BYTE *)this + 104) & 2) != 0)
    return (EQKitPath::Stem *)*((_QWORD *)this + 9);
  v2 = (unint64_t **)EQKitCompositeGlyph::lowerPath(this);
  result = _createStem(v2, *((_DWORD *)this + 4) == 2);
  *((_QWORD *)this + 9) = result;
  *((_BYTE *)this + 104) |= 2u;
  return result;
}

EQKitPath::Stem *EQKitCompositeGlyph::middlePathUpperStem(EQKitCompositeGlyph *this)
{
  unint64_t **v2;
  EQKitPath::Stem *result;

  if ((*((_BYTE *)this + 104) & 4) != 0)
    return (EQKitPath::Stem *)*((_QWORD *)this + 10);
  v2 = (unint64_t **)EQKitCompositeGlyph::middlePath(this);
  result = _createStem(v2, *((_DWORD *)this + 4) == 2);
  *((_QWORD *)this + 10) = result;
  *((_BYTE *)this + 104) |= 4u;
  return result;
}

EQKitPath::Stem *EQKitCompositeGlyph::middlePathLowerStem(EQKitCompositeGlyph *this)
{
  unint64_t **v2;
  int v3;
  EQKitPath::Stem *result;

  if ((*((_BYTE *)this + 104) & 8) != 0)
    return (EQKitPath::Stem *)*((_QWORD *)this + 11);
  v2 = (unint64_t **)EQKitCompositeGlyph::middlePath(this);
  if (*((_DWORD *)this + 4) == 2)
    v3 = 3;
  else
    v3 = 2;
  result = _createStem(v2, v3);
  *((_QWORD *)this + 11) = result;
  *((_BYTE *)this + 104) |= 8u;
  return result;
}

EQKitPath::Stem *EQKitCompositeGlyph::extenderPathStem(EQKitCompositeGlyph *this)
{
  unint64_t **v2;
  int v3;
  EQKitPath::Stem *result;

  if ((*((_BYTE *)this + 104) & 0x10) != 0)
    return (EQKitPath::Stem *)*((_QWORD *)this + 12);
  v2 = (unint64_t **)EQKitCompositeGlyph::extenderPath(this);
  if (*((_DWORD *)this + 4) == 2)
    v3 = 3;
  else
    v3 = 2;
  result = _createStem(v2, v3);
  *((_QWORD *)this + 12) = result;
  *((_BYTE *)this + 104) |= 0x10u;
  return result;
}

CGPath *EQKitCompositeGlyph::createPathWithLength(EQKitCompositeGlyph *this, double a2, CGSize *a3)
{
  CGPath *Mutable;
  CGSize *v7;
  double width;
  double height;
  CGAffineTransform v11;
  CGFloat v12[11];
  _BYTE v13[72];

  Mutable = CGPathCreateMutable();
  EQKitCompositeGlyph::compose(this, a2, Mutable);
  EQKitPath::EQKitPath((EQKitPath *)v12, Mutable);
  if (v13[32])
    v7 = (CGSize *)v13;
  else
    v7 = (CGSize *)EQKitPath::computePathBounds(v12);
  width = v7->width;
  height = v7->height;
  *a3 = v7[1];
  if (width != 0.0 || height != 0.0)
  {
    CGPathRelease(Mutable);
    memset(&v11, 0, sizeof(v11));
    CGAffineTransformMakeTranslation(&v11, -width, -height);
    Mutable = CGPathCreateMutable();
    EQKitPath::appendToCGPath((uint64_t *)v12, Mutable, &v11, 0);
  }
  EQKitPath::~EQKitPath((EQKitPath *)v12);
  return Mutable;
}

void sub_21791D664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  EQKitPath::~EQKitPath((EQKitPath *)va);
  _Unwind_Resume(a1);
}

double EQKitCompositeGlyph::compose(EQKitCompositeGlyph *this, double a2, CGPath *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  EQKitPath::Stem *v11;
  EQKitPath::Stem *v12;
  EQKitPath::Stem *v13;
  double v14;
  double *v15;
  double v16;
  double v17;
  CGRect *v18;
  CGRect *v19;
  double Height;
  CGRect *v21;
  CGRect *v22;
  double Width;
  CGRect *v24;
  CGRect *v25;
  double v26;
  EQKitPath::Stem *v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  _OWORD *v48;
  _BOOL4 v51;
  CGRect *v52;
  _DWORD *v53;
  const EQKitPath::Stem *v54;
  CGRect *v55;
  CGRect *v56;
  CGRect *v57;
  double v58;
  double v59;
  CGRect *v60;
  CGRect *v61;
  double v62;
  double v63;
  int v64;
  CGRect *v65;
  double v66;
  CGRect *v67;
  CGRect *v68;
  double v69;
  int v70;
  CGRect *v71;
  CGRect *v72;
  double v73;
  double v74;
  CGRect *v75;
  CGRect *v76;
  CGRect *v77;
  double v78;
  EQKitPath::Stem *v80;
  EQKitPath::Stem *v81;
  CGAffineTransform v82;
  double v83[3];
  void *__p[3];
  CGPoint v85;

  v6 = EQKitCompositeGlyph::upperPath(this);
  v7 = EQKitCompositeGlyph::lowerPath(this);
  v8 = EQKitCompositeGlyph::middlePath(this);
  v9 = EQKitCompositeGlyph::extenderPath(this);
  v10 = (double *)EQKitCompositeGlyph::upperPathLowerStem(this);
  v11 = EQKitCompositeGlyph::lowerPathUpperStem(this);
  v12 = EQKitCompositeGlyph::middlePathUpperStem(this);
  v81 = EQKitCompositeGlyph::middlePathLowerStem(this);
  v13 = EQKitCompositeGlyph::extenderPathStem(this);
  v14 = a2;
  if (!(v6 | v7))
    return a2 - v14;
  v15 = (double *)v13;
  v16 = 0.0;
  v17 = 0.0;
  if (v6)
  {
    if (*((_DWORD *)this + 4) == 2)
    {
      if (*(_BYTE *)(v6 + 120))
        v18 = (CGRect *)(v6 + 88);
      else
        v18 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v6);
      Height = CGRectGetHeight(*v18);
    }
    else
    {
      if (*(_BYTE *)(v6 + 120))
        v19 = (CGRect *)(v6 + 88);
      else
        v19 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v6);
      Height = CGRectGetWidth(*v19);
    }
    v17 = Height;
  }
  if (v7)
  {
    if (*((_DWORD *)this + 4) == 2)
    {
      if (*(_BYTE *)(v7 + 120))
        v21 = (CGRect *)(v7 + 88);
      else
        v21 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v7);
      Width = CGRectGetHeight(*v21);
    }
    else
    {
      if (*(_BYTE *)(v7 + 120))
        v22 = (CGRect *)(v7 + 88);
      else
        v22 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v7);
      Width = CGRectGetWidth(*v22);
    }
    v16 = Width;
  }
  v14 = a2 - (v17 + v16);
  if (v8)
  {
    if (*((_DWORD *)this + 4) == 2)
    {
      if (*(_BYTE *)(v8 + 120))
        v24 = (CGRect *)(v8 + 88);
      else
        v24 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v8);
      v26 = CGRectGetHeight(*v24);
    }
    else
    {
      if (*(_BYTE *)(v8 + 120))
        v25 = (CGRect *)(v8 + 88);
      else
        v25 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v8);
      v26 = CGRectGetWidth(*v25);
    }
    v14 = v14 - v26;
  }
  v27 = v81;
  v28 = 0.0;
  v29 = 0.0;
  v30 = 0.0;
  v31 = 0.0;
  if (v14 >= 0.0)
    goto LABEL_80;
  v32 = 0.0;
  if (v10)
    v32 = v10[5];
  if (v12)
    v31 = *((double *)v12 + 5);
  v33 = 0.0;
  v34 = 0.0;
  if (v11)
    v34 = *((double *)v11 + 5);
  v35 = v32 + v31;
  if (v81)
    v33 = *((double *)v81 + 5);
  v36 = v34 + v33;
  v37 = fabs(v14);
  if (v37 >= v35)
    v38 = v35;
  else
    v38 = v37;
  v39 = v37 - v38;
  if (v39 >= v36)
    v40 = v36;
  else
    v40 = v39;
  if (v35 >= v36)
    v35 = v36;
  v41 = fabs(v14 * 0.5);
  if (v41 < v35)
    v35 = v41;
  if (v8)
    v42 = v35;
  else
    v42 = v38;
  if (v8)
    v43 = v35;
  else
    v43 = v40;
  if (v10)
  {
    v31 = v42;
    if (v10[5] < v42)
      v31 = v10[5];
    if (v11)
    {
LABEL_64:
      v30 = v43;
      if (*((double *)v11 + 5) < v43)
        v30 = *((double *)v11 + 5);
      goto LABEL_72;
    }
  }
  else
  {
    v31 = 0.0;
    if (v42 <= 0.0)
      v31 = v42;
    if (v11)
      goto LABEL_64;
  }
  if (v43 <= 0.0)
    v30 = v43;
  else
    v30 = 0.0;
LABEL_72:
  v29 = v42 - v31;
  if (v12)
  {
    if (*((double *)v12 + 5) < v29)
      v29 = *((double *)v12 + 5);
  }
  else if (v29 > 0.0)
  {
    v29 = 0.0;
  }
  v44 = v43 - v30;
  if (v81)
  {
    v28 = *((double *)v81 + 5);
    if (v28 < v44)
      goto LABEL_80;
    goto LABEL_79;
  }
  if (v44 <= 0.0)
LABEL_79:
    v28 = v44;
LABEL_80:
  v80 = v11;
  if (v9)
  {
    if (v14 >= 0.0)
      v45 = v14;
    else
      v45 = 0.0;
  }
  else
  {
    v45 = 0.0;
    if (v14 > 0.0)
    {
      if (v10 && v11)
      {
        v31 = v31 - v14 * 0.5;
        v30 = v30 - v14 * 0.5;
      }
      else
      {
        if (v11)
          v46 = v14;
        else
          v46 = 0.0;
        v47 = v30 - v46;
        if (v10)
          v31 = v31 - v14;
        else
          v30 = v47;
      }
    }
  }
  v48 = (_OWORD *)MEMORY[0x24BDBEFB0];
  v85 = (CGPoint)*MEMORY[0x24BDBEFB0];
  if (v6)
  {
    v14 = v14 + v31;
    if (a3)
    {
      EQKitPath::appendToCGPathWithModifiedStem((EQKitPath *)v6, a3, (float64x2_t *)&v85, *((_DWORD *)this + 4) == 2, (const EQKitPath::Stem *)v10, -v31);
      v27 = v81;
    }
  }
  v51 = v45 > 0.0 && v9 != 0 && v15 != 0;
  if (v8)
  {
    if (v51)
    {
      if (*((_DWORD *)this + 4) == 2)
      {
        if (*(_BYTE *)(v9 + 120))
          v52 = (CGRect *)(v9 + 88);
        else
          v52 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
        v58 = CGRectGetHeight(*v52);
      }
      else
      {
        if (*(_BYTE *)(v9 + 120))
          v56 = (CGRect *)(v9 + 88);
        else
          v56 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
        v58 = CGRectGetWidth(*v56);
      }
      v59 = v15[5];
      if (v58 - v45 * 0.5 < v59)
      {
        if (*((_DWORD *)this + 4) == 2)
        {
          if (*(_BYTE *)(v9 + 120))
            v60 = (CGRect *)(v9 + 88);
          else
            v60 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
          v66 = CGRectGetHeight(*v60);
        }
        else
        {
          if (*(_BYTE *)(v9 + 120))
            v61 = (CGRect *)(v9 + 88);
          else
            v61 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
          v66 = CGRectGetWidth(*v61);
        }
        v59 = v66 - v45 * 0.5;
      }
      if (*((_DWORD *)this + 4) == 2)
      {
        if (*(_BYTE *)(v9 + 120))
          v67 = (CGRect *)(v9 + 88);
        else
          v67 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
        v69 = CGRectGetHeight(*v67);
      }
      else
      {
        if (*(_BYTE *)(v9 + 120))
          v68 = (CGRect *)(v9 + 88);
        else
          v68 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
        v69 = CGRectGetWidth(*v68);
      }
      v14 = v59 + v14 - v69;
      if (a3)
        EQKitPath::appendToCGPathWithModifiedStem((EQKitPath *)v9, a3, (float64x2_t *)&v85, *((_DWORD *)this + 4) == 2, (const EQKitPath::Stem *)v15, -v59);
      v27 = v81;
    }
    if ((v29 == 0.0 || !v12) && (v28 == 0.0 || !v27))
    {
      v54 = v80;
      if (a3)
        EQKitPath::appendToCGPathWithModifiedStem((EQKitPath *)v8, a3, (float64x2_t *)&v85, *((_DWORD *)this + 4) == 2, 0, 0.0);
    }
    else
    {
      if (a3)
      {
        EQKitPath::extractPath((EQKitPath *)v8);
        std::vector<CGPoint>::vector(__p, v8 + 8);
        EQKitPath::applyModifiedStemToPoints(v8, (uint64_t)v12, __p, -v29);
        EQKitPath::applyModifiedStemToPoints(v8, (uint64_t)v81, __p, -v28);
        *(_OWORD *)v83 = *v48;
        EQKitPath::findJoinForEdge((_QWORD *)v8, *((_DWORD *)this + 4) == 2, v83, __p);
        memset(&v82, 0, sizeof(v82));
        CGAffineTransformMakeTranslation(&v82, v85.x - v83[0], v85.y - v83[1]);
        EQKitPath::appendToCGPath((uint64_t *)v8, a3, &v82, (uint64_t *)__p);
        v70 = *((_DWORD *)this + 4) == 2 ? 3 : 2;
        EQKitPath::findJoinForEdge((_QWORD *)v8, v70, &v85, __p);
        v85 = (CGPoint)vaddq_f64(*(float64x2_t *)&v82.tx, vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v82.c, v85.y), *(float64x2_t *)&v82.a, v85.x));
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      v14 = v28 + v29 + v14;
      v54 = v80;
    }
    if (!v51)
      goto LABEL_201;
    v53 = (_DWORD *)((char *)this + 16);
    if (*((_DWORD *)this + 4) == 2)
    {
      if (*(_BYTE *)(v9 + 120))
        v71 = (CGRect *)(v9 + 88);
      else
        v71 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
      v73 = CGRectGetHeight(*v71);
    }
    else
    {
      if (*(_BYTE *)(v9 + 120))
        v72 = (CGRect *)(v9 + 88);
      else
        v72 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
      v73 = CGRectGetWidth(*v72);
    }
    v45 = v45 * 0.5;
    v63 = v15[5];
    if (v73 - v45 >= v63)
      goto LABEL_190;
    v64 = *(unsigned __int8 *)(v9 + 120);
    if (*v53 == 2)
    {
      if (*(_BYTE *)(v9 + 120))
        goto LABEL_183;
      goto LABEL_139;
    }
    goto LABEL_185;
  }
  if (v51)
  {
    v53 = (_DWORD *)((char *)this + 16);
    v54 = v80;
    if (*((_DWORD *)this + 4) == 2)
    {
      if (*(_BYTE *)(v9 + 120))
        v55 = (CGRect *)(v9 + 88);
      else
        v55 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
      v62 = CGRectGetHeight(*v55);
    }
    else
    {
      if (*(_BYTE *)(v9 + 120))
        v57 = (CGRect *)(v9 + 88);
      else
        v57 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
      v62 = CGRectGetWidth(*v57);
    }
    v63 = v15[5];
    if (v62 - v45 >= v63)
      goto LABEL_190;
    v64 = *(unsigned __int8 *)(v9 + 120);
    if (*v53 == 2)
    {
      if (*(_BYTE *)(v9 + 120))
      {
LABEL_183:
        v65 = (CGRect *)(v9 + 88);
        goto LABEL_184;
      }
LABEL_139:
      v65 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
LABEL_184:
      v74 = CGRectGetHeight(*v65);
LABEL_189:
      v63 = v74 - v45;
LABEL_190:
      if (*v53 == 2)
      {
        if (*(_BYTE *)(v9 + 120))
          v76 = (CGRect *)(v9 + 88);
        else
          v76 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
        v78 = CGRectGetHeight(*v76);
      }
      else
      {
        if (*(_BYTE *)(v9 + 120))
          v77 = (CGRect *)(v9 + 88);
        else
          v77 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
        v78 = CGRectGetWidth(*v77);
      }
      v14 = v63 + v14 - v78;
      if (a3)
        EQKitPath::appendToCGPathWithModifiedStem((EQKitPath *)v9, a3, (float64x2_t *)&v85, *v53 == 2, (const EQKitPath::Stem *)v15, -v63);
      goto LABEL_201;
    }
LABEL_185:
    if (v64)
      v75 = (CGRect *)(v9 + 88);
    else
      v75 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v9);
    v74 = CGRectGetWidth(*v75);
    goto LABEL_189;
  }
  v54 = v80;
LABEL_201:
  if (v7)
  {
    v14 = v30 + v14;
    if (a3)
      EQKitPath::appendToCGPathWithModifiedStem((EQKitPath *)v7, a3, (float64x2_t *)&v85, *((_DWORD *)this + 4) == 2, v54, -v30);
  }
  return a2 - v14;
}

void sub_21791DF00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double EQKitCompositeGlyph::estimatePathWithLength(EQKitCompositeGlyph *this, double a2)
{
  return EQKitCompositeGlyph::compose(this, a2, 0);
}

_QWORD *std::vector<CGPoint>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    std::vector<CGPoint>::__vallocate[abi:nn180100](a1, v5 >> 4);
    v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

char *std::vector<CGPoint>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLength>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void sub_2179227E0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x2179227D8);
}

uint64_t EQKitLayoutManager::EQKitLayoutManager(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  double v8;
  double v9;
  const Collection *v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  double v14;
  const Collection *v15;
  void *v17;
  _BYTE v18[136];

  *(_QWORD *)(a1 + 32) = objc_msgSend(a3, "kerningManager");
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "layoutConfig");
  objc_msgSend(a2, "baseFontSize");
  v9 = v8;
  v10 = (const Collection *)EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)objc_msgSend(a3, "fontManager"));
  EQKitLayoutContext::EQKitLayoutContext((EQKitLayoutContext *)(a1 + 48), v9, v10, (const __CFString *)objc_msgSend(a2, "baseFontName"), 1);
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_QWORD *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_QWORD *)(a1 + 592) = a3;
  *(_QWORD *)(a1 + 600) = a4;
  if (!a2)
  {
    v17 = (void *)objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    objc_msgSend(v17, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "EQKitLayoutManager::EQKitLayoutManager(id<EQKitLayoutContext>, EQKitEnvironmentInstance *, const EQKit::AttributeCollection &)"), CFSTR("EQKitLayoutManager.mm"), 53, CFSTR("invalid layoutContext"));
  }
  *(_QWORD *)a1 = a2;
  objc_msgSend(a2, "baseFontSize");
  *(_QWORD *)(a1 + 8) = v11;
  objc_msgSend(a2, "containerWidth");
  *(_QWORD *)(a1 + 16) = v12;
  v13 = (const void *)objc_msgSend(a2, "baseFontName");
  *(_QWORD *)(a1 + 24) = v13;
  if (v13)
    CFRetain(v13);
  v14 = *(double *)(a1 + 8);
  v15 = (const Collection *)EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)objc_msgSend(a3, "fontManager"));
  EQKitLayoutContext::EQKitLayoutContext((EQKitLayoutContext *)v18, v14, v15, (const __CFString *)objc_msgSend(a2, "baseFontName"), 1);
  std::deque<EQKitLayoutContext>::push_back((_QWORD *)(a1 + 232), (EQKitLayoutContext *)v18);
  EQKitLayoutContext::~EQKitLayoutContext((EQKitLayoutContext *)v18);
  return a1;
}

void sub_217922CD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  EQKitLayoutContext *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v7;
  va_list va;

  va_start(va, a2);
  EQKitLayoutContext::~EQKitLayoutContext((EQKitLayoutContext *)va);
  std::deque<EQKitLayoutTable>::~deque[abi:nn180100](v4 + 45);
  std::deque<EQKitLayoutElementaryStack>::~deque[abi:nn180100](v4 + 39);
  std::deque<EQKitLayoutStretchedOperator>::~deque[abi:nn180100](v4 + 33);
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:nn180100](v4 + 27);
  v7 = (void *)v2[47];
  if (v7)
  {
    v2[48] = v7;
    operator delete(v7);
  }
  std::deque<EQKitLayoutRow>::~deque[abi:nn180100](v2 + 41);
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:nn180100](v2 + 35);
  std::deque<EQKitLayoutContext>::~deque[abi:nn180100](v5);
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:nn180100](v4);
  EQKitLayoutContext::~EQKitLayoutContext(v3);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::~EQKitLayoutManager(id *this)
{
  id v2;
  id v3;

  v2 = this[3];
  if (v2)
    CFRelease(v2);
  std::deque<EQKitLayoutTable>::~deque[abi:nn180100](this + 68);
  std::deque<EQKitLayoutElementaryStack>::~deque[abi:nn180100](this + 62);
  std::deque<EQKitLayoutStretchedOperator>::~deque[abi:nn180100](this + 56);
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:nn180100](this + 50);
  v3 = this[47];
  if (v3)
  {
    this[48] = v3;
    operator delete(v3);
  }
  std::deque<EQKitLayoutRow>::~deque[abi:nn180100](this + 41);
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:nn180100](this + 35);
  std::deque<EQKitLayoutContext>::~deque[abi:nn180100](this + 29);
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:nn180100](this + 23);
  EQKitLayoutContext::~EQKitLayoutContext((EQKitLayoutContext *)(this + 6));
}

void sub_217922DE8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v3;

  std::deque<EQKitLayoutTable>::~deque[abi:nn180100](v1 + 68);
  std::deque<EQKitLayoutElementaryStack>::~deque[abi:nn180100](v1 + 62);
  std::deque<EQKitLayoutStretchedOperator>::~deque[abi:nn180100](v1 + 56);
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:nn180100](v1 + 50);
  v3 = (void *)v1[47];
  if (v3)
  {
    v1[48] = v3;
    operator delete(v3);
  }
  std::deque<EQKitLayoutRow>::~deque[abi:nn180100](v1 + 41);
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:nn180100](v1 + 35);
  std::deque<EQKitLayoutContext>::~deque[abi:nn180100](v1 + 29);
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:nn180100](v1 + 23);
  EQKitLayoutContext::~EQKitLayoutContext((EQKitLayoutContext *)(v1 + 6));
  _Unwind_Resume(a1);
}

uint64_t EQKitLayoutManager::popContext(EQKitLayoutManager *this)
{
  uint64_t result;
  void *v3;

  if (*((_QWORD *)this + 34))
    return std::deque<EQKitLayoutContext>::pop_back((_QWORD *)this + 29);
  v3 = (void *)objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
  result = objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void EQKitLayoutManager::popContext()"), CFSTR("EQKitLayoutManager.mm"), 77, CFSTR("contextStack needs to contain an element"));
  if (*((_QWORD *)this + 34))
    return std::deque<EQKitLayoutContext>::pop_back((_QWORD *)this + 29);
  return result;
}

unint64_t EQKitLayoutManager::layoutContext(EQKitLayoutManager *this)
{
  uint64_t v2;
  void *v4;

  v2 = *((_QWORD *)this + 34);
  if (v2)
    return *(_QWORD *)(*((_QWORD *)this + 30) + 8 * ((v2 + *((_QWORD *)this + 33) - 1) / 0x1EuLL))
         + 136 * ((v2 + *((_QWORD *)this + 33) - 1) % 0x1EuLL);
  v4 = (void *)objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
  objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "const EQKitLayoutContext &EQKitLayoutManager::layoutContext() const"), CFSTR("EQKitLayoutManager.mm"), 86, CFSTR("contextStack needs to contain an element"));
  v2 = *((_QWORD *)this + 34);
  if (v2)
    return *(_QWORD *)(*((_QWORD *)this + 30) + 8 * ((v2 + *((_QWORD *)this + 33) - 1) / 0x1EuLL))
         + 136 * ((v2 + *((_QWORD *)this + 33) - 1) % 0x1EuLL);
  else
    return (unint64_t)this + 48;
}

double EQKitLayoutManager::leftSpaceForOperator(uint64_t a1, void *a2)
{
  unint64_t v4;
  uint64_t v5;
  unsigned __int16 v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  double v10;
  unint64_t v11;
  uint64_t v12;
  double v13;

  v4 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1);
  v5 = objc_msgSend(*(id *)(a1 + 592), "operatorDictionary");
  v6 = objc_msgSend(a2, "operatorId");
  v7 = EQKitLayoutManager::operatorForm(a1, a2);
  v8 = EQKit::Config::Operator::Dictionary::lookup(v5, v6, v7);
  if (v8)
  {
    v9 = v8;
    v10 = EQKitLength::resolveToAbsoluteWithSize((EQKitLength *)v8, *(double *)(v4 + 24));
    if (v10 != 0.0)
    {
      v11 = *(_QWORD *)(a1 + 368) + *(_QWORD *)(a1 + 360) - 1;
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 336) + 8 * (v11 / 0x19)) + 160 * (v11 % 0x19) + 152) == 2)
      {
        if ((char)v9[6] < 0)
        {
          v13 = *((double *)v9 + 5);
        }
        else
        {
          v12 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)objc_msgSend(*(id *)(a1 + 592), "fontManager"));
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 48))(v12, 1);
        }
        v10 = v10 * v13;
      }
    }
  }
  else
  {
    v10 = 0.0;
  }
  return EQKitLayoutManager::lengthForAttribute((EQKitLayoutManager *)a1, 10, (uint64_t)a2, v10);
}

uint64_t EQKitLayoutManager::operatorForm(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t result;
  unsigned int v6;
  char v7;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  void *v15;
  int v16;

  v14 = 0;
  v4 = *(_QWORD *)(a1 + 600);
  v15 = a2;
  v16 = 15;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v4, v4 + 344, (uint64_t)&v15, &v14);
  result = v14;
  if (!v14)
  {
    v6 = objc_msgSend(a2, "operatorId");
    result = EQKit::Config::Operator::Dictionary::formForOperatorId((EQKit::Config::Operator::Dictionary *)objc_msgSend(*(id *)(a1 + 592), "operatorDictionary"), v6);
    v14 = result;
    if (!(_DWORD)result)
    {
      v7 = EQKit::Config::Operator::Dictionary::formMaskForOperatorId((EQKit::Config::Operator::Dictionary *)objc_msgSend(*(id *)(a1 + 592), "operatorDictionary"), v6);
      v8 = *(_QWORD *)(a1 + 224);
      if (v8)
        v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 192)
                                   + (((unint64_t)(v8 + *(_QWORD *)(a1 + 216) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v8 + *(_QWORD *)(a1 + 216) - 1) & 0x1FF));
      v9 = v8 & v7;
      if ((v7 & 8) != 0)
        v10 = 3;
      else
        v10 = 2;
      if ((v7 & 2) != 0)
        v11 = 1;
      else
        v11 = v10;
      if ((v9 & 4) != 0)
        v12 = 2;
      else
        v12 = v11;
      if ((v9 & 8) != 0)
        v13 = 3;
      else
        v13 = v12;
      if ((v9 & 2) != 0)
        return 1;
      else
        return v13;
    }
  }
  return result;
}

uint64_t EQKitLayoutManager::fontCollection(id *this)
{
  return EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)objc_msgSend(this[74], "fontManager"));
}

double EQKitLayoutManager::lengthForAttribute(EQKitLayoutManager *a1, int a2, uint64_t a3, double a4)
{
  uint64_t v6;
  unint64_t v7;
  __int128 v9;
  uint64_t v10;
  int v11;

  LODWORD(v9) = 1;
  *((_QWORD *)&v9 + 1) = 0;
  v10 = a3;
  v6 = *((_QWORD *)a1 + 75);
  v11 = a2;
  if (EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitLength>>(v6, v6 + 32, (uint64_t)&v10, &v9))
  {
    v7 = EQKitLayoutManager::layoutContext(a1);
    return EQKitLength::resolveToAbsoluteWithUnitProviderAndDefault((double *)&v9, v7, a4);
  }
  return a4;
}

double EQKitLayoutManager::rightSpaceForOperator(uint64_t a1, void *a2)
{
  unint64_t v4;
  uint64_t v5;
  unsigned __int16 v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  double v10;
  unint64_t v11;
  uint64_t v12;
  double v13;

  v4 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1);
  v5 = objc_msgSend(*(id *)(a1 + 592), "operatorDictionary");
  v6 = objc_msgSend(a2, "operatorId");
  v7 = EQKitLayoutManager::operatorForm(a1, a2);
  v8 = EQKit::Config::Operator::Dictionary::lookup(v5, v6, v7);
  if (v8)
  {
    v9 = v8;
    v10 = EQKitLength::resolveToAbsoluteWithSize((EQKitLength *)(v8 + 2), *(double *)(v4 + 24));
    if (v10 != 0.0)
    {
      v11 = *(_QWORD *)(a1 + 368) + *(_QWORD *)(a1 + 360) - 1;
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 336) + 8 * (v11 / 0x19)) + 160 * (v11 % 0x19) + 152) == 2)
      {
        if ((char)v9[6] < 0)
        {
          v13 = *((double *)v9 + 5);
        }
        else
        {
          v12 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)objc_msgSend(*(id *)(a1 + 592), "fontManager"));
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 48))(v12, 1);
        }
        v10 = v10 * v13;
      }
    }
  }
  else
  {
    v10 = 0.0;
  }
  return EQKitLayoutManager::lengthForAttribute((EQKitLayoutManager *)a1, 11, (uint64_t)a2, v10);
}

CGPath *EQKitLayoutManager::createPathForNotation(EQKitLayoutManager *a1, void *a2, int a3)
{
  CGPath *Mutable;
  double v7;
  double v8;
  double v9;
  double v10;
  unint64_t v11;
  __n128 v12;
  unint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  CGPath *v19;
  double v20;
  double v21;

  Mutable = CGPathCreateMutable();
  objc_msgSend(a2, "width");
  v8 = v7;
  objc_msgSend(a2, "vsize");
  v10 = v9;
  v11 = EQKitLayoutManager::layoutContext(a1);
  v13 = v11;
  v14 = *(_QWORD *)(v11 + 80);
  if ((*(_BYTE *)(v11 + 104) & 1) != 0)
    v12.n128_u64[0] = *(_QWORD *)(v11 + 112);
  else
    v12.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
  v15 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v14 + 40))(v14, 24, v13 + 8, v12);
  v16 = v15;
  switch(a3)
  {
    case 1:
      v17 = -v15;
      v18 = v10 + v15;
      v19 = Mutable;
      v20 = -v15;
      goto LABEL_10;
    case 2:
      CGPathMoveToPoint(Mutable, 0, -v15, -v15);
      v21 = v8 + v16;
      goto LABEL_8;
    case 3:
      v21 = v8 * 0.5;
      CGPathMoveToPoint(Mutable, 0, v21, -v15);
LABEL_8:
      v17 = v10 + v16;
      goto LABEL_11;
    case 4:
      v20 = -v15;
      v17 = v10 * 0.5;
      v19 = Mutable;
      v18 = v10 * 0.5;
LABEL_10:
      CGPathMoveToPoint(v19, 0, v20, v18);
      v21 = v8 + v16;
LABEL_11:
      CGPathAddLineToPoint(Mutable, 0, v21, v17);
      break;
    default:
      return Mutable;
  }
  return Mutable;
}

EQKitBox *EQKitLayoutManager::layoutExpression(EQKitLayoutManager *a1, void *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, double *a6, BOOL *a7)
{
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  EQKitBox *v14;
  char v15;
  BOOL v16;
  id v18[2];
  id v19;
  int v20;
  __int16 v21;
  _QWORD v22[10];
  _QWORD v23[4];
  _QWORD v24[4];
  _QWORD v25[4];
  _QWORD v26[4];

  v26[0] = 0;
  v26[1] = v26;
  v26[2] = 0x2020000000;
  *a3 = 0;
  v26[3] = a3;
  v25[0] = 0;
  v25[1] = v25;
  v25[2] = 0x2020000000;
  *a4 = 0;
  v25[3] = a4;
  v24[0] = 0;
  v24[1] = v24;
  v24[2] = 0x2020000000;
  *a5 = 0;
  v24[3] = a5;
  *a6 = 1.79769313e308;
  v23[0] = 0;
  v23[1] = v23;
  v23[2] = 0x2020000000;
  v23[3] = 0;
  LODWORD(v18[0]) = 0;
  v11 = *((_QWORD *)a1 + 75);
  v19 = a2;
  v20 = 7;
  v12 = EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v11, v11 + 320, (uint64_t)&v19, v18) ^ 1;
  if (!LODWORD(v18[0]))
    v12 = 1;
  if (LODWORD(v18[0]) == 2)
    v13 = 1;
  else
    v13 = v12;
  EQKitLayoutManager::beginRow(a1, 1, 0);
  v22[0] = MEMORY[0x24BDAC760];
  v22[1] = 3221225472;
  v22[2] = ___ZN18EQKitLayoutManager16layoutExpressionEPU26objcproto15EQKitLayoutNode11objc_objectRdS2_S2_S2_Rb_block_invoke;
  v22[3] = &unk_24D828AA0;
  v22[4] = a2;
  v22[5] = v23;
  v22[6] = v26;
  v22[7] = v25;
  v22[8] = v24;
  v22[9] = a1;
  EQKitLayoutManager::layout(a1, a2, 0, v13, 0, (uint64_t)v22);
  EQKitLayoutManager::endRow(a1, (EQKit::ILayout *)&v19);
  v14 = (EQKitBox *)v19;
  if (*(_BYTE *)(*((_QWORD *)a1 + 5) + 5))
    v15 = v13;
  else
    v15 = 1;
  v16 = (v15 & 1) == 0 && (v21 & 0x1C00u) > 0x800;
  *a7 = v16;
  EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)v18, 0, 0.0);
  if (EQKit::ILayout::getOffsetOfKind((uint64_t)&v19, 1, v18))
    *a6 = EQKit::ILayoutOffset::offsetInBox((EQKit::ILayoutOffset *)v18, v14);
  EQKit::ILayoutOffset::~ILayoutOffset(v18);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&v19);
  _Block_object_dispose(v23, 8);
  _Block_object_dispose(v24, 8);
  _Block_object_dispose(v25, 8);
  _Block_object_dispose(v26, 8);
  return v14;
}

void sub_2179236B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a12);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 144), 8);
  _Block_object_dispose((const void *)(v29 - 112), 8);
  _Block_object_dispose((const void *)(v29 - 80), 8);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::beginRow(EQKitLayoutManager *this, char a2, BOOL a3)
{
  uint64_t v3;
  _QWORD *v4;
  _BYTE v5[160];

  if ((a2 & 1) != 0 || (v3 = *((_QWORD *)this + 46)) == 0)
  {
    v4 = (_QWORD *)((char *)this + 328);
    EQKitLayoutRow::EQKitLayoutRow((EQKitLayoutRow *)v5, a3);
    std::deque<EQKitLayoutRow>::push_back(v4, (EQKitLayoutRow *)v5);
    EQKitLayoutRow::~EQKitLayoutRow((EQKitLayoutRow *)v5);
  }
  else
  {
    EQKitLayoutRow::beginNestedRow(*(_QWORD *)(*((_QWORD *)this + 42) + 8 * ((v3 + *((_QWORD *)this + 45) - 1) / 0x19uLL))+ 160 * ((v3 + *((_QWORD *)this + 45) - 1) % 0x19uLL));
  }
}

void sub_2179237C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  EQKitLayoutRow::~EQKitLayoutRow((EQKitLayoutRow *)&a9);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layout(EQKitLayoutManager *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  EQKitLayoutManager::layout(a1, a2, a3, a4, 0, a5);
}

void ___ZN18EQKitLayoutManager16layoutExpressionEPU26objcproto15EQKitLayoutNode11objc_objectRdS2_S2_S2_Rb_block_invoke(_QWORD *a1, uint64_t a2)
{
  EQKitLayoutManager *v3;
  int v4;
  unint64_t v5;
  CTFontRef v6;
  const __CTFont *v7;

  if (a1[4] == a2)
  {
    v3 = (EQKitLayoutManager *)a1[9];
    v4 = *(unsigned __int8 *)(*((_QWORD *)v3 + 5) + 4);
    v5 = EQKitLayoutManager::layoutContext(v3);
    if (v4)
      v6 = EQKitLayoutManager::newBaseFontWithScript(v3, (const Info *)(v5 + 8));
    else
      v6 = (CTFontRef)EQKitLayoutContext::newFont((EQKitLayoutContext *)v5);
    *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = v6;
    v7 = *(const __CTFont **)(*(_QWORD *)(a1[5] + 8) + 24);
    if (v7)
    {
      **(CGFloat **)(*(_QWORD *)(a1[6] + 8) + 24) = CTFontGetAscent(v7);
      **(CGFloat **)(*(_QWORD *)(a1[7] + 8) + 24) = CTFontGetDescent(*(CTFontRef *)(*(_QWORD *)(a1[5] + 8) + 24));
      **(CGFloat **)(*(_QWORD *)(a1[8] + 8) + 24) = CTFontGetLeading(*(CTFontRef *)(*(_QWORD *)(a1[5] + 8) + 24));
      CFRelease(*(CFTypeRef *)(*(_QWORD *)(a1[5] + 8) + 24));
    }
  }
}

CTFontRef EQKitLayoutManager::newBaseFontWithScript(EQKitLayoutManager *this, const Info *a2)
{
  const __CFString *v3;
  const __CTFontDescriptor *v4;
  CTFontRef v5;

  if (*((_QWORD *)this + 3))
    v3 = (const __CFString *)*((_QWORD *)this + 3);
  else
    v3 = CFSTR("Times New Roman");
  v4 = CTFontDescriptorCreateWithNameAndSize(v3, *((CGFloat *)a2 + 2));
  v5 = CTFontCreateWithFontDescriptor(v4, *((CGFloat *)a2 + 2), 0);
  CFRelease(v4);
  return v5;
}

void EQKitLayoutManager::endRow(EQKitLayoutManager *this@<X0>, EQKit::ILayout *a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  EQKitLayoutRow *v8;
  unint64_t v9;
  void *v10;
  uint64_t *v11[20];

  EQKit::ILayout::ILayout(a2, 0);
  v4 = *((_QWORD *)this + 46);
  if (v4
    || (v10 = (void *)objc_msgSend(MEMORY[0x24BDD1448], "currentHandler"),
        objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "EQKit::ILayout EQKitLayoutManager::endRow()"), CFSTR("EQKitLayoutManager.mm"), 2890, CFSTR("invalid state")), (v4 = *((_QWORD *)this + 46)) != 0))
  {
    v5 = v4 + *((_QWORD *)this + 45) - 1;
    v6 = *(_QWORD *)(*((_QWORD *)this + 42) + 8 * (v5 / 0x19));
    v7 = v5 % 0x19;
    v8 = (EQKitLayoutRow *)(v6 + 160 * v7);
    if (*((_QWORD *)v8 + 8))
    {
      EQKitLayoutRow::endNestedRow(v6 + 160 * v7);
    }
    else if (v4 >= 2 && *(_BYTE *)(v6 + 160 * v7 + 156))
    {
      EQKitLayoutRow::EQKitLayoutRow((EQKitLayoutRow *)v11, (const EQKitLayoutRow *)(v6 + 160 * v7));
      std::deque<EQKitLayoutRow>::pop_back((_QWORD *)this + 41);
      v9 = *((_QWORD *)this + 46) + *((_QWORD *)this + 45) - 1;
      EQKitLayoutRow::addChild((EQKitLayoutRow *)(*(_QWORD *)(*((_QWORD *)this + 42) + 8 * (v9 / 0x19)) + 160 * (v9 % 0x19)), (const EQKitLayoutRow *)v11);
      EQKitLayoutRow::~EQKitLayoutRow((EQKitLayoutRow *)v11);
    }
    else
    {
      EQKitLayoutRow::resolveKerning((EQKitLayoutRow *)(v6 + 160 * v7), *((const EQKit::Kerning::Manager **)this + 4));
      EQKitLayoutRow::overallLayout(v8, v11);
      EQKit::ILayout::operator=((uint64_t)a2, (uint64_t)v11);
      EQKit::ILayout::~ILayout((EQKit::ILayout *)v11);
      std::deque<EQKitLayoutRow>::pop_back((_QWORD *)this + 41);
    }
  }
}

void sub_217923AC8(_Unwind_Exception *a1)
{
  EQKit::ILayout *v1;

  EQKit::ILayout::~ILayout(v1);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutBox(EQKitLayoutManager *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, EQKit::ILayout *a4@<X8>)
{
  uint64_t v8;

  v8 = *(unsigned __int8 *)(EQKitLayoutManager::layoutContext(a1) + 16);
  EQKitLayoutManager::layoutBox(a1, a2, 0, v8, 0, 0, a3, a4);
}

void EQKitLayoutManager::layoutBox(EQKitLayoutManager *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, EQKit::ILayout *a8@<X8>)
{
  unint64_t v16;

  EQKitLayoutManager::beginRow(a1, 1, 0);
  v16 = *((_QWORD *)a1 + 46) + *((_QWORD *)a1 + 45) - 1;
  *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 42) + 8 * (v16 / 0x19)) + 160 * (v16 % 0x19) + 152) = a5;
  EQKitLayoutManager::layout(a1, a2, a3, a4, a6, a7);
  EQKitLayoutManager::endRow(a1, a8);
}

void EQKitLayoutManager::layout(EQKitLayoutManager *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 isOperatorPaddingRequired;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  int isEmbellishedOperatorRoot;
  uint64_t v32;
  const EQKitLayoutStretchedOperator *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  _OWORD v37[9];
  int v38;
  uint64_t v39;
  void *v40;

  v39 = a6;
  v40 = a2;
  v11 = *((_QWORD *)a1 + 34) + *((_QWORD *)a1 + 33) - 1;
  v12 = *(_QWORD *)(*((_QWORD *)a1 + 30) + 8 * (v11 / 0x1E));
  if (a6)
    std::deque<void({block_pointer})(objc_object  {objcproto15EQKitLayoutNode}*,EQKit::Layout::Schemata const&),std::allocator<void ()(objc_object  {objcproto15EQKitLayoutNode}*,EQKit::Layout::Schemata const&)>>::push_back((_QWORD *)a1 + 35, &v39);
  v38 = 0;
  v13 = *((_QWORD *)a1 + 75);
  *(_QWORD *)&v37[0] = a2;
  DWORD2(v37[0]) = 8;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v13, v13 + 8, (uint64_t)v37, &v38);
  if (v38 == 2)
  {
    a4 = 1;
  }
  else if (v38 == 1)
  {
    a4 = 0;
  }
  isOperatorPaddingRequired = EQKitLayoutManager::isOperatorPaddingRequired(a1);
  v16 = (_QWORD *)*((_QWORD *)a1 + 48);
  v15 = *((_QWORD *)a1 + 49);
  if ((unint64_t)v16 >= v15)
  {
    v18 = *((_QWORD *)a1 + 47);
    v19 = ((uint64_t)v16 - v18) >> 3;
    if ((unint64_t)(v19 + 1) >> 61)
      abort();
    v20 = v15 - v18;
    v21 = v20 >> 2;
    if (v20 >> 2 <= (unint64_t)(v19 + 1))
      v21 = v19 + 1;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v21;
    if (v22)
      v23 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)a1 + 392, v22);
    else
      v23 = 0;
    v24 = &v23[8 * v19];
    v25 = &v23[8 * v22];
    *(_QWORD *)v24 = a2;
    v17 = v24 + 8;
    v27 = (char *)*((_QWORD *)a1 + 47);
    v26 = (char *)*((_QWORD *)a1 + 48);
    if (v26 != v27)
    {
      do
      {
        v28 = *((_QWORD *)v26 - 1);
        v26 -= 8;
        *((_QWORD *)v24 - 1) = v28;
        v24 -= 8;
      }
      while (v26 != v27);
      v26 = (char *)*((_QWORD *)a1 + 47);
    }
    *((_QWORD *)a1 + 47) = v24;
    *((_QWORD *)a1 + 48) = v17;
    *((_QWORD *)a1 + 49) = v25;
    if (v26)
      operator delete(v26);
  }
  else
  {
    *v16 = a2;
    v17 = v16 + 1;
  }
  v29 = v12 + 136 * (v11 % 0x1E);
  *((_QWORD *)a1 + 48) = v17;
  v30 = v40;
  EQKitLayoutContext::EQKitLayoutContext(v37, a1, v29, v40, a3, a4, a5);
  std::deque<EQKitLayoutContext>::push_back((_QWORD *)a1 + 29, (EQKitLayoutContext *)v37);
  EQKitLayoutContext::~EQKitLayoutContext((EQKitLayoutContext *)v37);
  isEmbellishedOperatorRoot = EQKitLayoutManager::isEmbellishedOperatorRoot(a1, v30);
  if (isEmbellishedOperatorRoot)
    std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::push_back((_QWORD *)a1 + 50, &v40);
  v32 = *((_QWORD *)a1 + 61);
  if (!v32)
  {
    v34 = v40;
    if (v40)
      goto LABEL_28;
LABEL_30:
    memset(v37, 0, 32);
    goto LABEL_32;
  }
  v33 = (const EQKitLayoutStretchedOperator *)(*(_QWORD *)(*((_QWORD *)a1 + 57)
                                                         + 8 * ((v32 + *((_QWORD *)a1 + 60) - 1) / 0x66uLL))
                                             + 40 * ((v32 + *((_QWORD *)a1 + 60) - 1) % 0x66uLL));
  v34 = v40;
  if (*(void **)v33 != v40)
  {
    if (v40)
    {
LABEL_28:
      objc_msgSend(v34, "layoutSchemata");
      goto LABEL_32;
    }
    goto LABEL_30;
  }
  EQKitLayoutManager::schemataForStretchedOperator((id *)a1, v33, (uint64_t)v37);
LABEL_32:
  if (isEmbellishedOperatorRoot)
    v35 = v40;
  else
    v35 = 0;
  EQKitLayoutManager::layoutSchemata((uint64_t)a1, (EQKit::Layout::Schemata *)v37, isOperatorPaddingRequired, v35);
  v36 = *((_QWORD *)a1 + 40);
  if (v36)
    (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 36)
                                              + (((unint64_t)(v36 + *((_QWORD *)a1 + 39) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                  + 8 * ((v36 + *((_QWORD *)a1 + 39) - 1) & 0x1FF))
                      + 16))();
  if (isEmbellishedOperatorRoot)
  {
    --*((_QWORD *)a1 + 55);
    std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::__maybe_remove_back_spare[abi:nn180100]((_QWORD *)a1 + 50, 1);
  }
  std::deque<EQKitLayoutContext>::pop_back((_QWORD *)a1 + 29);
  *((_QWORD *)a1 + 48) -= 8;
  if (v39)
  {
    --*((_QWORD *)a1 + 40);
    std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::__maybe_remove_back_spare[abi:nn180100]((_QWORD *)a1 + 35, 1);
  }
  EQKit::Layout::Schemata::~Schemata((id *)v37);
}

void sub_217923F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  EQKit::Layout::Schemata::~Schemata(&a9);
  _Unwind_Resume(a1);
}

uint64_t EQKitLayoutManager::layout(EQKitLayoutManager *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *(unsigned __int8 *)(EQKitLayoutManager::layoutContext(a1) + 16);
  return EQKitLayoutManager::layout(a1, a2, 0, v6, 0, a3);
}

void EQKitLayoutManager::layoutIntoRow(uint64_t a1, EQKitLayoutRow *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  void *v13;
  _BYTE v14[56];
  _BYTE v15[160];

  EQKitLayoutManager::beginRow((EQKitLayoutManager *)a1, 1, 0);
  EQKitLayoutManager::layout(a1, a3, a4, a5, 0, a6);
  v12 = *(_QWORD *)(a1 + 368);
  if (v12
    || (v13 = (void *)objc_msgSend(MEMORY[0x24BDD1448], "currentHandler"),
        objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void EQKitLayoutManager::layoutIntoRow(EQKitLayoutRow &, id<EQKitLayoutNode>, NSInteger, BOOL, LayoutCallback)"), CFSTR("EQKitLayoutManager.mm"), 263, CFSTR("invalid state")), (v12 = *(_QWORD *)(a1 + 368)) != 0))
  {
    EQKitLayoutRow::EQKitLayoutRow((EQKitLayoutRow *)v15, (const EQKitLayoutRow *)(*(_QWORD *)(*(_QWORD *)(a1 + 336) + 8 * ((v12 + *(_QWORD *)(a1 + 360) - 1) / 0x19uLL))+ 160 * ((v12 + *(_QWORD *)(a1 + 360) - 1) % 0x19uLL)));
    EQKitLayoutRow::operator=(a2, (EQKitLayoutRow *)v15);
    EQKitLayoutRow::~EQKitLayoutRow((EQKitLayoutRow *)v15);
    EQKitLayoutRow::resolveKerning(a2, *(const EQKit::Kerning::Manager **)(a1 + 32));
    EQKitLayoutRow::buildAlignmentGroups(a2);
  }
  EQKitLayoutManager::endRow((EQKitLayoutManager *)a1, (EQKit::ILayout *)v14);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v14);
}

void sub_21792410C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  EQKitLayoutRow::~EQKitLayoutRow((EQKitLayoutRow *)va);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::addHSpace(EQKitLayoutManager *this, double a2)
{
  EQKitHSpace *v3;
  _BYTE v4[56];
  _BYTE v5[56];

  if (a2 != 0.0)
  {
    v3 = -[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", a2);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v5, &v3->super);
    EQKit::ILayout::setIsUserSpace((uint64_t)v5, 1);
    EQKit::ILayout::setVerticalContentClassification((uint64_t)v5, 6);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v4, (const EQKit::ILayout *)v5);
    EQKitLayoutManager::addRowChild((uint64_t)this, (uint64_t)v4, 0);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v4);

    EQKit::ILayout::~ILayout((EQKit::ILayout *)v5);
  }
}

void sub_2179241C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a9);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a16);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::addRowChild(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;

  if (*(_QWORD *)(a1 + 368)
    || (v14 = (void *)objc_msgSend(MEMORY[0x24BDD1448], "currentHandler"),
        objc_msgSend(v14, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void EQKitLayoutManager::addRowChild(EQKit::ILayout, id<EQKitLayoutNode>)"), CFSTR("EQKitLayoutManager.mm"), 3132, CFSTR("invalid state")), *(_QWORD *)(a1 + 368)))
  {
    v6 = *(unsigned __int16 *)(a2 + 32);
    v7 = (v6 >> 4) & 3;
    v8 = 0;
    v9 = 0;
    if (v7 != 3)
    {
      EQKitLayoutManager::lengthForMetric((id *)a1, (v7 + 30));
      v9 = v10;
      LOWORD(v6) = *(_WORD *)(a2 + 32);
    }
    v11 = v6 >> 6;
    if (v11 != 3)
    {
      EQKitLayoutManager::lengthForMetric((id *)a1, (v11 + 30));
      v8 = v12;
    }
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 48) = v8;
    v13 = *(_QWORD *)(a1 + 368) + *(_QWORD *)(a1 + 360) - 1;
    EQKitLayoutRow::addChild(*(_QWORD *)(*(_QWORD *)(a1 + 336) + 8 * (v13 / 0x19)) + 160 * (v13 % 0x19), a3, (const EQKit::ILayout *)a2);
  }
}

void EQKitLayoutManager::addOperatorLeftSpace(EQKitLayoutManager *this, double a2)
{
  uint64_t v4;
  unint64_t v5;
  double v6;
  double v7;
  EQKitHSpace *v8;
  void *v9;
  _BYTE v10[56];
  _BYTE v11[56];

  v4 = *((_QWORD *)this + 46);
  if (v4
    || (v9 = (void *)objc_msgSend(MEMORY[0x24BDD1448], "currentHandler"),
        objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void EQKitLayoutManager::addOperatorLeftSpace(CGFloat)"), CFSTR("EQKitLayoutManager.mm"), 289, CFSTR("invalid state")), (v4 = *((_QWORD *)this + 46)) != 0))
  {
    v5 = *(_QWORD *)(*((_QWORD *)this + 42) + 8 * ((v4 + *((_QWORD *)this + 45) - 1) / 0x19uLL))
       + 160 * ((v4 + *((_QWORD *)this + 45) - 1) % 0x19uLL);
    v6 = *(double *)(v5 + 144);
    v7 = fmax(a2 - v6, 0.0);
    if (v6 > 0.0)
      a2 = v7;
    *(_QWORD *)(v5 + 144) = 0;
  }
  if (a2 != 0.0)
  {
    v8 = -[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", a2);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v11, &v8->super);
    EQKit::ILayout::setIsUserSpace((uint64_t)v11, 1);
    EQKit::ILayout::setVerticalContentClassification((uint64_t)v11, 6);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v10, (const EQKit::ILayout *)v11);
    EQKitLayoutManager::addRowChild((uint64_t)this, (uint64_t)v10, 0);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v10);

    EQKit::ILayout::~ILayout((EQKit::ILayout *)v11);
  }
}

void sub_217924478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a9);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a16);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::addOperatorRightSpace(EQKitLayoutManager *this, double a2)
{
  uint64_t v4;
  EQKitHSpace *v5;
  void *v6;
  _BYTE v7[56];
  _BYTE v8[56];

  v4 = *((_QWORD *)this + 46);
  if (v4
    || (v6 = (void *)objc_msgSend(MEMORY[0x24BDD1448], "currentHandler"),
        objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void EQKitLayoutManager::addOperatorRightSpace(CGFloat)"), CFSTR("EQKitLayoutManager.mm"), 318, CFSTR("invalid state")), (v4 = *((_QWORD *)this + 46)) != 0))
  {
    *(double *)(*(_QWORD *)(*((_QWORD *)this + 42) + 8 * ((v4 + *((_QWORD *)this + 45) - 1) / 0x19uLL))
              + 160 * ((v4 + *((_QWORD *)this + 45) - 1) % 0x19uLL)
              + 144) = a2;
  }
  if (a2 != 0.0)
  {
    v5 = -[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", a2);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v8, &v5->super);
    EQKit::ILayout::setIsUserSpace((uint64_t)v8, 1);
    EQKit::ILayout::setVerticalContentClassification((uint64_t)v8, 6);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v7, (const EQKit::ILayout *)v8);
    EQKitLayoutManager::addRowChild((uint64_t)this, (uint64_t)v7, 0);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v7);

    EQKit::ILayout::~ILayout((EQKit::ILayout *)v8);
  }
}

void sub_2179245E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a9);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a16);
  _Unwind_Resume(a1);
}

_QWORD *EQKitLayoutManager::clearOperatorSpace(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;

  v1 = this;
  v2 = this[46];
  if (v2
    || (v3 = (void *)objc_msgSend(MEMORY[0x24BDD1448], "currentHandler"),
        this = (_QWORD *)objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void EQKitLayoutManager::clearOperatorSpace()"), CFSTR("EQKitLayoutManager.mm"), 337, CFSTR("invalid state")), (v2 = v1[46]) != 0))
  {
    *(_QWORD *)(*(_QWORD *)(v1[42] + 8 * ((v2 + v1[45] - 1) / 0x19uLL)) + 160 * ((v2 + v1[45] - 1) % 0x19uLL) + 144) = 0;
  }
  return this;
}

void EQKitLayoutManager::alignBoxHorizontally(const EQKit::ILayout *a1@<X1>, int a2@<W2>, int a3@<W3>, EQKit::ILayout *a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  double v12;
  double v13;
  id v14;
  double v15;
  double v16;
  double v17;
  id v18;
  EQKitHSpace *v19;
  EQKitHSpace *v20;
  EQKitHBox *v21;
  EQKitHSpace *v22;
  _BYTE v23[56];
  CGRect v24;

  EQKit::ILayout::ILayout(a4, a1);
  if (a2 == 2)
  {
    v14 = *(id *)a1;
    if (a3)
    {
      objc_msgSend(v14, "erasableBounds");
      v12 = 0.0 - CGRectGetMidX(v24) + a6;
    }
    else
    {
      objc_msgSend(v14, "width");
      v12 = (a5 - v15) * 0.5;
    }
  }
  else
  {
    v12 = 0.0;
    if (a2 == 3)
    {
      objc_msgSend(*(id *)a1, "width");
      v12 = a5 - v13;
    }
  }
  objc_msgSend(*(id *)a1, "width");
  v17 = a5 - (v12 + v16);
  if (v12 != 0.0 || v17 != 0.0)
  {
    if (*(_QWORD *)a1)
    {
      v18 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
      if (v12 != 0.0)
      {
        v19 = -[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", v12);
        objc_msgSend(v18, "addObject:", v19);

      }
      objc_msgSend(v18, "addObject:", *(_QWORD *)a1);
      if (v17 != 0.0)
      {
        v20 = -[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", v17);
        objc_msgSend(v18, "addObject:", v20);

      }
      v21 = -[EQKitCompoundBox initWithChildBoxes:]([EQKitHBox alloc], "initWithChildBoxes:", v18);
      EQKit::ILayout::setBox((EQKitBox *)a4, &v21->super.super);

    }
    else
    {
      v22 = -[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", v12 + v17);
      EQKit::ILayout::ILayout((EQKit::ILayout *)v23, &v22->super);
      EQKit::ILayout::operator=((uint64_t)a4, (uint64_t)v23);
      EQKit::ILayout::~ILayout((EQKit::ILayout *)v23);

    }
  }
}

void sub_217924878(_Unwind_Exception *a1, uint64_t a2, ...)
{
  EQKit::ILayout *v2;
  va_list va;

  va_start(va, a2);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)va);
  EQKit::ILayout::~ILayout(v2);
  _Unwind_Resume(a1);
}

BOOL EQKitLayoutManager::isOperatorPaddingRequired(EQKitLayoutManager *this)
{
  unint64_t v1;
  uint64_t i;
  void *v5;
  int v6;

  v1 = *((_QWORD *)this + 46) + *((_QWORD *)this + 45) - 1;
  if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 42) + 8 * (v1 / 0x19)) + 160 * (v1 % 0x19) + 152) != 1)
  {
    for (i = *((_QWORD *)this + 48); i != *((_QWORD *)this + 47); i -= 8)
    {
      v5 = *(void **)(i - 8);
      v6 = objc_msgSend(v5, "isOperatorPaddingRequired");
      if (v6)
        return v6 == 2;
    }
  }
  return 0;
}

uint64_t EQKitLayoutManager::isEmbellishedOperatorRoot(_QWORD *a1, void *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = objc_msgSend(a2, "isEmbellishedOperator");
  if ((_DWORD)result)
  {
    v5 = a1[55];
    if (v5)
    {
      v6 = objc_msgSend(*(id *)(*(_QWORD *)(a1[51] + (((unint64_t)(v5 + a1[54] - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((v5 + a1[54] - 1) & 0x1FF)), "operatorCore");
      return v6 != objc_msgSend(a2, "operatorCore");
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void EQKitLayoutManager::schemataForStretchedOperator(id *this@<X0>, const EQKitLayoutStretchedOperator *a2@<X1>, uint64_t a3@<X8>)
{
  void *v6;
  int v7;
  unsigned __int16 v8;
  uint64_t v9;
  unint64_t v10;
  id v11[4];

  EQKit::Layout::Schemata::Schemata(a3);
  v6 = *(void **)a2;
  v7 = *((_DWORD *)a2 + 2);
  if (v7 == 1)
  {
    v8 = objc_msgSend(*(id *)a2, "operatorUnicharOrNul");
    v9 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)objc_msgSend(this[74], "fontManager"));
    v10 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)this);
    if ((*(unsigned int (**)(uint64_t, _QWORD, uint64_t, unint64_t))(*(_QWORD *)v9 + 104))(v9, v8, 1, v10 + 8))
    {
      EQKit::Layout::Schemata::operFontStretch((uint64_t)v11);
      EQKit::Layout::Schemata::operator=(a3, (uint64_t)v11);
    }
    else
    {
      if (!v6)
        return;
      objc_msgSend(v6, "layoutSchemata");
      EQKit::Layout::Schemata::operator=(a3, (uint64_t)v11);
    }
    goto LABEL_10;
  }
  if (v7 == 2)
  {
    EQKitLayoutManager::schemataForOperatorWhenStretchedVertically(this, *(void **)a2, a3);
    return;
  }
  if (v6)
  {
    objc_msgSend(*(id *)a2, "layoutSchemata");
    EQKit::Layout::Schemata::operator=(a3, (uint64_t)v11);
LABEL_10:
    EQKit::Layout::Schemata::~Schemata(v11);
  }
}

void sub_217924AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  id *v9;

  EQKit::Layout::Schemata::~Schemata(&a9);
  EQKit::Layout::Schemata::~Schemata(v9);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutSchemata(uint64_t a1, EQKit::Layout::Schemata *a2, int a3, void *a4)
{
  const EQKit::Layout::Schemata *v8;
  int v9;
  int v10;
  int v11;
  double v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  EQKitHVSpace *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  EQKitBox *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  int v30;
  double *v31;
  double v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  const void *v38;
  uint64_t v39;
  void *v40;
  EQKitStringBox *v41;
  EQKitStringBox *v42;
  int v43;
  BOOL v44;
  double v45;
  double v46;
  double v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  double *v51;
  double v52;
  unint64_t v53;
  const CGPath *v54;
  uint64_t v55;
  double v56;
  double v57;
  double v58;
  EQKitPathBox *v59;
  EQKitPathBox *v60;
  unsigned int v61;
  _BYTE v62[56];
  _BYTE v63[60];
  unsigned int v64;
  __int128 v65;
  double v66;
  double v67;
  id v68[7];
  _QWORD v69[8];

  EQKit::ILayout::ILayout((EQKit::ILayout *)v69, 0);
  v9 = *((_DWORD *)a2 + 2);
  if (a4)
    v10 = a3;
  else
    v10 = 0;
  if (((v9 - 5) & 0xFFFFFFFD) != 0)
    v11 = v10;
  else
    v11 = 0;
  if (v11 == 1)
  {
    v12 = EQKitLayoutManager::leftSpaceForOperator(a1, (void *)objc_msgSend(a4, "operatorCore"));
    EQKitLayoutManager::addOperatorLeftSpace((EQKitLayoutManager *)a1, v12);
    v9 = *((_DWORD *)a2 + 2);
  }
  switch(v9)
  {
    case 1:
      v13 = EQKit::Layout::Schemata::nodeSchemata(a2);
      v14 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1);
      EQKitLayoutManager::layout(a1, v13, 0, *(unsigned __int8 *)(v14 + 16), 0, 0);
      goto LABEL_41;
    case 2:
      EQKitLayoutManager::layoutRow((EQKitLayoutManager *)a1, a2, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 3:
      v15 = objc_msgSend((id)EQKit::Layout::Schemata::phantomSchemata(a2), "schemataChild");
      v16 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1);
      EQKitLayoutManager::layoutBox((EQKitLayoutManager *)a1, v15, 0, *(unsigned __int8 *)(v16 + 16), 0, 0, 0, (EQKit::ILayout *)v68);
      v17 = [EQKitHVSpace alloc];
      objc_msgSend(v68[0], "width");
      v19 = v18;
      objc_msgSend(v68[0], "height");
      v21 = v20;
      objc_msgSend(v68[0], "depth");
      v23 = -[EQKitHVSpace initWithWidth:height:depth:](v17, "initWithWidth:height:depth:", v19, v21, v22);
      EQKit::ILayout::ILayout((EQKit::ILayout *)&v65, v23);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)&v65);
      EQKit::ILayout::~ILayout((EQKit::ILayout *)&v65);

      goto LABEL_40;
    case 4:
      EQKitLayoutManager::layoutSubsuperscript((EQKitLayoutManager *)a1, a2, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 5:
      EQKitLayoutManager::layoutUnderover(a2, a1, a3, a4, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 6:
      EQKitLayoutManager::layoutRadical((id *)a1, a2, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 7:
      EQKitLayoutManager::layoutFraction(a1, a2, a3, a4, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 8:
      EQKitLayoutManager::layoutIdentifier((EQKitLayoutManager *)a1, a2, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 9:
      EQKitLayoutManager::layoutNumber((EQKitLayoutManager *)a1, a2, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 10:
      EQKitLayoutManager::layoutOperator((id *)a1, a2, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 11:
      v24 = *(_QWORD *)(a1 + 488);
      if (!v24)
        goto LABEL_41;
      v25 = v24 + *(_QWORD *)(a1 + 480) - 1;
      v26 = *(_QWORD *)(*(_QWORD *)(a1 + 456) + 8 * (v25 / 0x66));
      v27 = v25 % 0x66;
      v64 = objc_msgSend(*(id *)(v26 + 40 * (v25 % 0x66)), "operatorUnicharOrNul");
      v28 = v26 + 40 * v27;
      v30 = *(_DWORD *)(v28 + 8);
      v29 = (unsigned int *)(v28 + 8);
      v61 = v64;
      v31 = (double *)(v26 + 40 * v27);
      if (v30 == 2)
        v32 = v31[3] + v31[2];
      else
        v32 = v31[4];
      v35 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)objc_msgSend(*(id *)(a1 + 592), "fontManager"));
      v36 = *v29;
      v37 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1);
      v38 = (const void *)(*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, unint64_t, double))(*(_QWORD *)v35 + 80))(v35, &v64, v36, v37 + 8, v32);
      if (!v38)
        goto LABEL_65;
      v39 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)objc_msgSend(*(id *)(a1 + 592), "fontManager"));
      v40 = (void *)(*(uint64_t (**)(uint64_t, _QWORD, const void *))(*(_QWORD *)v39 + 152))(v39, v64, v38);
      if (!v40)
        goto LABEL_64;
      v41 = -[EQKitStringBox initWithAttributedString:cgColor:]([EQKitStringBox alloc], "initWithAttributedString:cgColor:", v40, *(_QWORD *)(EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1) + 96));
      v42 = v41;
      v43 = *v29;
      if (v41)
        v44 = v43 == 2;
      else
        v44 = 0;
      if (v44)
      {
        -[EQKitStringBox height](v41, "height");
        v46 = v45;
        -[EQKitStringBox depth](v42, "depth");
        v48 = (v32 - (v46 + v47)) * 0.5 + v47 - *(double *)(v26 + 40 * v27 + 24);
        if (v48 == 0.0)
          EQKit::ILayout::ILayout((EQKit::ILayout *)v68, (EQKitBox *)v42);
        else
          EQKit::ILayout::ILayout((EQKit::ILayout *)v68, (EQKitBox *)-[EQKitVShift initWithBox:offset:]([EQKitVShift alloc], "initWithBox:offset:", v42, v48));
        EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      }
      else
      {
        if (v43 != 1)
          goto LABEL_63;
        EQKit::ILayout::ILayout((EQKit::ILayout *)v68, (EQKitBox *)v41);
        EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      }
      EQKit::ILayout::~ILayout((EQKit::ILayout *)v68);
LABEL_63:

LABEL_64:
      CFRelease(v38);
LABEL_65:
      if (!v69[0])
      {
        v65 = *MEMORY[0x24BDBF148];
        v66 = 0.0;
        v67 = 0.0;
        v49 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)objc_msgSend(*(id *)(a1 + 592), "fontManager"));
        v50 = *v29;
        v51 = (double *)(v26 + 40 * v27);
        v52 = (_DWORD)v50 == 2 ? v51[3] + v51[2] : v51[4];
        v53 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1);
        v54 = (const CGPath *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, unint64_t, __int128 *, double))(*(_QWORD *)v49 + 88))(v49, v61, v50, v53 + 8, &v65, v52);
        if (v54)
        {
          if (*v29 == 2)
          {
            v55 = v26 + 40 * v27;
            v56 = *(double *)(v55 + 16);
            v57 = *(double *)(v55 + 24);
            v58 = *((double *)&v65 + 1);
            v59 = [EQKitPathBox alloc];
            v60 = -[EQKitPathBox initWithCGPath:height:paddingLeft:paddingRight:cgColor:](v59, "initWithCGPath:height:paddingLeft:paddingRight:cgColor:", v54, *(_QWORD *)(EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1) + 96), v56 + (v58 - (v56 + v57)) * 0.5, v66, v67);
          }
          else
          {
            v60 = -[EQKitPathBox initWithCGPath:height:cgColor:]([EQKitPathBox alloc], "initWithCGPath:height:cgColor:", v54, *(_QWORD *)(EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1) + 96), *((double *)&v65 + 1));
          }
          EQKit::ILayout::ILayout((EQKit::ILayout *)v68, &v60->super);
          EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
          EQKit::ILayout::~ILayout((EQKit::ILayout *)v68);
          CGPathRelease(v54);
        }
      }
      EQKit::ILayout::setVerticalContentClassification((uint64_t)v69, 5);
LABEL_41:
      if (v69[0])
      {
        EQKitLayoutManager::beginRow((EQKitLayoutManager *)a1, 0, 1);
        EQKit::ILayout::ILayout((EQKit::ILayout *)v63, (const EQKit::ILayout *)v69);
        v33 = EQKitLayoutManager::currentNode((EQKitLayoutManager *)a1);
        EQKitLayoutManager::addRowChild(a1, (uint64_t)v63, v33);
        EQKit::ILayout::~ILayout((EQKit::ILayout *)v63);
        EQKitLayoutManager::endRow((EQKitLayoutManager *)a1, (EQKit::ILayout *)v62);
        EQKit::ILayout::~ILayout((EQKit::ILayout *)v62);
      }
      if (v11)
      {
        v34 = EQKitLayoutManager::rightSpaceForOperator(a1, (void *)objc_msgSend(a4, "operatorCore"));
        EQKitLayoutManager::addOperatorRightSpace((EQKitLayoutManager *)a1, v34);
      }
      else if (!a4 && a3)
      {
        EQKitLayoutManager::clearOperatorSpace((_QWORD *)a1);
      }
      EQKit::ILayout::~ILayout((EQKit::ILayout *)v69);
      return;
    case 12:
      EQKitLayoutManager::layoutStack((EQKitLayoutManager *)a1, a2, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 13:
      EQKitLayoutManager::layoutStackGroup((EQKitLayoutManager *)a1, a2, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 14:
      EQKitLayoutManager::layoutStackRow((EQKitLayoutManager *)a1, a2, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 15:
      EQKitLayoutManager::layoutStackLine((EQKitLayoutManager *)a1, a2, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 16:
      EQKitLayoutManager::layoutStackCarries((EQKitLayoutManager *)a1, a2, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 17:
      EQKitLayoutManager::layoutStackCarry((EQKitLayoutManager *)a1, a2, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 18:
      EQKitLayoutManager::layoutLongDivision((EQKitLayoutManager *)a1, a2, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 19:
      EQKitLayoutManager::layoutTable((EQKitLayoutManager *)a1, a2, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 20:
      EQKitLayoutManager::layoutTableRow((EQKitLayoutManager *)a1, a2, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 21:
      EQKitLayoutManager::layoutNone((EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 22:
      EQKitLayoutManager::layoutText((id *)a1, a2, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 23:
      EQKitLayoutManager::layoutPadded((EQKitLayoutManager *)a1, a2, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 24:
      EQKitLayoutManager::layoutSpace((EQKitLayoutManager *)a1, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 25:
      EQKitLayoutManager::layoutFenced((EQKitLayoutManager *)a1, a2, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 26:
      EQKitLayoutManager::layoutAlignGroup((EQKitLayoutManager *)a1, v8);
      goto LABEL_41;
    case 27:
      EQKitLayoutManager::layoutAlignMark((EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
      goto LABEL_40;
    case 28:
      EQKitLayoutManager::layoutEnclose((EQKitLayoutManager *)a1, a2, (EQKit::ILayout *)v68);
      EQKit::ILayout::operator=((uint64_t)v69, (uint64_t)v68);
LABEL_40:
      EQKit::ILayout::~ILayout((EQKit::ILayout *)v68);
      goto LABEL_41;
    default:
      goto LABEL_41;
  }
}

void sub_2179253F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;

  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a32);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)(v32 - 192));
  _Unwind_Resume(a1);
}

uint64_t EQKitLayoutManager::schemataForOperatorWhenStretchedVertically(id *a1, void *a2, uint64_t a3)
{
  unsigned __int16 v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _OWORD v11[2];

  v6 = objc_msgSend(a2, "operatorUnicharOrNul");
  v7 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)objc_msgSend(a1[74], "fontManager"));
  v8 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1);
  v9 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, unint64_t))(*(_QWORD *)v7 + 104))(v7, v6, 2, v8 + 8);
  if ((_DWORD)v9)
  {
    EQKit::Layout::Schemata::operFontStretch((uint64_t)v11);
    EQKit::Layout::Schemata::operator=(a3, (uint64_t)v11);
  }
  else
  {
    if (a2)
      objc_msgSend(a2, "layoutSchemata");
    else
      memset(v11, 0, sizeof(v11));
    EQKit::Layout::Schemata::operator=(a3, (uint64_t)v11);
  }
  EQKit::Layout::Schemata::~Schemata((id *)v11);
  return v9;
}

void sub_217925618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  EQKit::Layout::Schemata::~Schemata(&a9);
  _Unwind_Resume(a1);
}

EQKit::ILayout *EQKitLayoutManager::layoutText@<X0>(id *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v4;
  void *v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  id v9;
  std::string *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  uint64_t v17;
  void *v18;
  EQKitStringBox *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  std::string *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  EQKitStringBox *v28;
  uint64_t v29;
  CTFontRef cf;
  _BYTE v33[56];
  _BYTE v34[56];
  _BYTE v35[56];
  std::string __p[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  int v42;
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v4 = EQKit::Layout::Schemata::textSchemata(a2);
  if (!v4)
    return EQKit::ILayout::ILayout(a3, 0);
  v5 = (void *)v4;
  v6 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)this);
  cf = EQKitLayoutManager::newBaseFontWithScript((EQKitLayoutManager *)this, (const Info *)(v6 + 8));
  v7 = objc_msgSend(v5, "schemataIsQuoted");
  EQKitLayoutManager::beginRow((EQKitLayoutManager *)this, 0, 1);
  if (v7)
  {
    std::string::basic_string[abi:nn180100]<0>(__p, "\"");
    v8 = (uint64_t)this[75];
    v41 = EQKitLayoutManager::currentNode((EQKitLayoutManager *)this);
    v42 = 12;
    EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::string,std::less<EQKitTypes::Attributes::Enum>,std::char_traits<char><std::pair<EQKitTypes::Attributes::Enum const>>>>(v8, v8 + 80, (uint64_t)&v41, __p);
    v9 = objc_alloc(MEMORY[0x24BDD16A8]);
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = __p;
    else
      v10 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    v11 = (id)objc_msgSend(v9, "initWithUTF8String:", v10);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  else
  {
    v11 = 0;
  }
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v12 = (void *)objc_msgSend(v5, "schemataChildren");
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v37, v43, 16);
  if (v13)
  {
    v14 = *(_QWORD *)v38;
    do
    {
      for (i = 0; i != v13; ++i)
      {
        if (*(_QWORD *)v38 != v14)
          objc_enumerationMutation(v12);
        v16 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          if (v11)
            objc_msgSend(v11, "appendString:", v16);
          else
            v11 = (id)objc_msgSend(v16, "mutableCopy");
        }
        else if (objc_msgSend(v16, "conformsToProtocol:", &unk_254F27378))
        {
          if (v11)
          {
            v17 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)objc_msgSend(this[74], "fontManager"));
            v18 = (void *)(*(uint64_t (**)(uint64_t, id, CTFontRef))(*(_QWORD *)v17 + 144))(v17, v11, cf);
            v19 = -[EQKitStringBox initWithAttributedString:cgColor:]([EQKitStringBox alloc], "initWithAttributedString:cgColor:", v18, *(_QWORD *)(EQKitLayoutManager::layoutContext((EQKitLayoutManager *)this) + 96));
            EQKit::ILayout::ILayout((EQKit::ILayout *)__p, &v19->super);
            EQKit::ILayout::setVerticalContentClassification((uint64_t)__p, 5);
            EQKit::ILayout::ILayout((EQKit::ILayout *)v35, (const EQKit::ILayout *)__p);
            v20 = EQKitLayoutManager::currentNode((EQKitLayoutManager *)this);
            EQKitLayoutManager::addRowChild((uint64_t)this, (uint64_t)v35, v20);
            EQKit::ILayout::~ILayout((EQKit::ILayout *)v35);

            EQKit::ILayout::~ILayout((EQKit::ILayout *)__p);
          }
          v21 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)this);
          EQKitLayoutManager::layout(this, v16, 0, *(unsigned __int8 *)(v21 + 16), 0, 0);
          v11 = 0;
        }
      }
      v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v37, v43, 16);
    }
    while (v13);
  }
  if (!v7)
    goto LABEL_31;
  if (!v11)
    v11 = objc_alloc_init(MEMORY[0x24BDD16A8]);
  std::string::basic_string[abi:nn180100]<0>(__p, "\"");
  v22 = (uint64_t)this[75];
  v41 = EQKitLayoutManager::currentNode((EQKitLayoutManager *)this);
  v42 = 13;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::string,std::less<EQKitTypes::Attributes::Enum>,std::char_traits<char><std::pair<EQKitTypes::Attributes::Enum const>>>>(v22, v22 + 80, (uint64_t)&v41, __p);
  v23 = objc_alloc(MEMORY[0x24BDD16A8]);
  v24 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? __p
      : (std::string *)__p[0].__r_.__value_.__r.__words[0];
  v25 = (void *)objc_msgSend(v23, "initWithUTF8String:", v24);
  objc_msgSend(v11, "appendString:", v25);

  if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_31:
    if (!v11)
      goto LABEL_33;
    goto LABEL_32;
  }
  operator delete(__p[0].__r_.__value_.__l.__data_);
  if (v11)
  {
LABEL_32:
    v26 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)objc_msgSend(this[74], "fontManager"));
    v27 = (void *)(*(uint64_t (**)(uint64_t, id, CTFontRef))(*(_QWORD *)v26 + 144))(v26, v11, cf);
    v28 = -[EQKitStringBox initWithAttributedString:cgColor:]([EQKitStringBox alloc], "initWithAttributedString:cgColor:", v27, *(_QWORD *)(EQKitLayoutManager::layoutContext((EQKitLayoutManager *)this) + 96));
    EQKit::ILayout::ILayout((EQKit::ILayout *)v34, &v28->super);
    v29 = EQKitLayoutManager::currentNode((EQKitLayoutManager *)this);
    EQKitLayoutManager::addRowChild((uint64_t)this, (uint64_t)v34, v29);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v34);

  }
LABEL_33:
  EQKitLayoutManager::endRow((EQKitLayoutManager *)this, (EQKit::ILayout *)v33);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v33);
  if (cf)
    CFRelease(cf);
  return EQKit::ILayout::ILayout(a3, 0);
}

void sub_217925A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a39 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t EQKitLayoutManager::currentNode(EQKitLayoutManager *this)
{
  uint64_t v1;
  uint64_t v2;
  void *v5;

  v2 = *((_QWORD *)this + 47);
  v1 = *((_QWORD *)this + 48);
  if (v2 == v1)
  {
    v5 = (void *)objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "id<EQKitLayoutNode> EQKitLayoutManager::currentNode() const"), CFSTR("EQKitLayoutManager.mm"), 3144, CFSTR("invalid state"));
    v2 = *((_QWORD *)this + 47);
    v1 = *((_QWORD *)this + 48);
  }
  if (v2 == v1)
    return 0;
  else
    return *(_QWORD *)(v1 - 8);
}

BOOL EQKitLayoutManager::isSchemataResponsibleForOperatorPadding(EQKitLayoutManager *this, const Schemata *a2)
{
  return ((a2->var1 - 5) & 0xFFFFFFFD) == 0;
}

void EQKitLayoutManager::layoutRow(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  int v11;
  int v12;
  unint64_t v13;
  NSArray *v14;
  NSArray *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  void *v19;
  unint64_t v20;
  _BYTE v21[56];
  _BYTE v22[56];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v6 = (void *)EQKit::Layout::Schemata::children(a2);
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v28;
    while (2)
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v28 != v8)
          objc_enumerationMutation(v6);
        v10 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * i);
        if (objc_msgSend(v10, "isEmbellishedOperator")
          && (EQKitLayoutManager::doesOperatorRequireVerticalStretch((uint64_t)this, (void *)objc_msgSend(v10, "operatorCore")) & 1) != 0)
        {
          v13 = *((_QWORD *)this + 46) + *((_QWORD *)this + 45) - 1;
          if (EQKitLayoutRow::isNewRowRequiredForStretching((EQKitLayoutRow *)(*(_QWORD *)(*((_QWORD *)this + 42)
                                                                                          + 8 * (v13 / 0x19))
                                                                              + 160 * (v13 % 0x19))))
          {
            EQKitLayoutManager::beginRow(this, 1, 1);
            v11 = 1;
          }
          else
          {
            v11 = 0;
          }
          v12 = 1;
          goto LABEL_15;
        }
      }
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
      if (v7)
        continue;
      break;
    }
  }
  v11 = 0;
  v12 = 0;
LABEL_15:
  v14 = (NSArray *)EQKit::Layout::Schemata::children(a2);
  v15 = EQKitLayoutFilterOutSpaceLike(v14);
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v16 = -[NSArray countByEnumeratingWithState:objects:count:](v14, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
  if (v16)
  {
    v17 = *(_QWORD *)v24;
    do
    {
      for (j = 0; j != v16; ++j)
      {
        if (*(_QWORD *)v24 != v17)
          objc_enumerationMutation(v14);
        v19 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * j);
        if (v12
          && objc_msgSend(*(id *)(*((_QWORD *)&v23 + 1) + 8 * j), "isEmbellishedOperator")
          && EQKitLayoutManager::doesOperatorRequireVerticalStretch((uint64_t)this, (void *)objc_msgSend(v19, "operatorCore")))
        {
          EQKit::ILayout::ILayout((EQKit::ILayout *)v22, 0);
          EQKitLayoutManager::addRowChild((uint64_t)this, (uint64_t)v22, (uint64_t)v19);
          EQKit::ILayout::~ILayout((EQKit::ILayout *)v22);
        }
        else
        {
          EQKitLayoutManager::pushImplicitFormIfRequired(this, v19, v15);
          v20 = EQKitLayoutManager::layoutContext(this);
          EQKitLayoutManager::layout(this, v19, 0, *(unsigned __int8 *)(v20 + 16), 0, 0);
          EQKitLayoutManager::popImplicitFormIfRequired(this, v19);
        }
      }
      v16 = -[NSArray countByEnumeratingWithState:objects:count:](v14, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
    }
    while (v16);
  }
  EQKit::ILayout::ILayout(a3, 0);
  if (v12)
  {
    EQKitLayoutManager::resolveRow(this, v15);
    if (v11)
    {
      EQKitLayoutManager::endRow(this, (EQKit::ILayout *)v21);
      EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)v21);
      EQKit::ILayout::~ILayout((EQKit::ILayout *)v21);
    }
  }
}

void sub_217925E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  EQKit::ILayout *v16;

  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a9);
  EQKit::ILayout::~ILayout(v16);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutFraction(uint64_t a1@<X0>, EQKit::Layout::Schemata *a2@<X1>, int a3@<W2>, void *a4@<X3>, EQKit::ILayout *a5@<X8>)
{
  unint64_t v10;
  void *v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  unint64_t v18;
  EQKitBox *v19;
  EQKitBox *v20;
  double v21;
  double v22;
  __n128 v23;
  double v24;
  uint64_t v25;
  __n128 v26;
  double v27;
  uint64_t v28;
  __n128 v29;
  double v30;
  char v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  double v47;
  double v48;
  EQKitVSpace *v49;
  EQKitRule *v50;
  EQKitVSpace *v51;
  EQKitOffsetVBox *v52;
  char v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  __n128 v57;
  double v58;
  void *v59;
  double v60;
  double v61;
  double v62;
  double v63;
  uint64_t v64;
  double v65;
  double v66;
  _BYTE v67[56];
  _BYTE v68[56];
  uint64_t v69;
  int v70;
  _BYTE v71[56];
  int v72;
  int v73;
  _QWORD v74[4];
  __int16 v75;
  id v76[4];
  __int16 v77;

  v10 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1);
  v11 = (void *)EQKit::Layout::Schemata::fractionSchemata(a2);
  EQKitLayoutManager::layoutBox((EQKitLayoutManager *)a1, objc_msgSend(v11, "schemataNumerator"), *(_BYTE *)(v10 + 16) == 0, 0, 0, 0, 0, (EQKit::ILayout *)v76);
  EQKitLayoutManager::layoutBox((EQKitLayoutManager *)a1, objc_msgSend(v11, "schemataDenominator"), *(_BYTE *)(v10 + 16) == 0, 0, 0, 1, 0, (EQKit::ILayout *)v74);
  if ((*(_BYTE *)(v10 + 104) & 1) != 0)
    v12 = *(double *)(v10 + 112);
  else
    v12 = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v10);
  v13 = EQKitLayoutManager::currentNode((EQKitLayoutManager *)a1);
  v14 = EQKitLayoutManager::lengthForAttribute((EQKitLayoutManager *)a1, 36, v13, v12);
  v15 = 0.0;
  if (v14 >= 0.0)
    v16 = v14;
  else
    v16 = 0.0;
  if (v16 > 0.0)
  {
    v17 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)objc_msgSend(*(id *)(a1 + 592), "fontManager"));
    v18 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1);
    v15 = (*(double (**)(uint64_t, uint64_t, unint64_t, double))(*(_QWORD *)v17 + 40))(v17, 25, v18 + 8, v12);
  }
  v19 = (EQKitBox *)v76[0];
  v20 = (EQKitBox *)v74[0];
  objc_msgSend(v76[0], "width");
  v22 = v21;
  -[EQKitBox width](v20, "width");
  v24 = v23.n128_f64[0];
  if (v22 > v23.n128_f64[0])
    v23.n128_f64[0] = v22;
  v65 = v23.n128_f64[0];
  v25 = *(_QWORD *)(v10 + 80);
  if ((*(_BYTE *)(v10 + 104) & 1) != 0)
    v23.n128_u64[0] = *(_QWORD *)(v10 + 112);
  else
    v23.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v10);
  v27 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v25 + 40))(v25, 3, v10 + 8, v23);
  v28 = *(_QWORD *)(v10 + 80);
  if ((*(_BYTE *)(v10 + 104) & 1) != 0)
    v26.n128_u64[0] = *(_QWORD *)(v10 + 112);
  else
    v26.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v10);
  v30 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v28 + 40))(v28, 4, v10 + 8, v26);
  v31 = *(_BYTE *)(v10 + 104);
  if ((v31 & 2) != 0)
  {
    v66 = *(double *)(v10 + 120);
  }
  else
  {
    v66 = EQKitLayoutContext::pComputeMathAxis((EQKitLayoutContext *)v10);
    v31 = *(_BYTE *)(v10 + 104);
  }
  v32 = *(_QWORD *)(v10 + 80);
  if ((v31 & 1) != 0)
    v29.n128_u64[0] = *(_QWORD *)(v10 + 112);
  else
    v29.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v10);
  v33 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v32 + 40))(v32, 2, v10 + 8, v29);
  -[EQKitBox depth](v19, "depth");
  v34 = v27 - v66;
  v35 = v16 * 0.5;
  v36 = v34 - v16 * 0.5;
  v38 = v33;
  if (v33 <= v36 - v37)
  {
    -[EQKitBox depth](v19, "depth");
    v38 = v36 - v39;
  }
  -[EQKitBox height](v20, "height");
  v40 = v30 + v66 - v35;
  if (v33 <= v40 - v41)
  {
    -[EQKitBox height](v20, "height");
    v33 = v40 - v42;
  }
  v43 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  v73 = 2;
  v44 = *(_QWORD *)(a1 + 600);
  v69 = EQKitLayoutManager::currentNode((EQKitLayoutManager *)a1);
  v70 = 24;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v44, v44 + 128, (uint64_t)&v69, &v73);
  v72 = 2;
  v45 = *(_QWORD *)(a1 + 600);
  v69 = EQKitLayoutManager::currentNode((EQKitLayoutManager *)a1);
  v70 = 25;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v45, v45 + 128, (uint64_t)&v69, &v72);
  v46 = v65 + v15 * 2.0;
  if (v73 == 3)
  {
    v47 = v46 - v22;
  }
  else
  {
    v47 = 0.0;
    if (v73 == 2)
      v47 = (v46 - v22) * 0.5;
  }
  if (v72 == 3)
  {
    v48 = v46 - v24;
  }
  else
  {
    v48 = 0.0;
    if (v72 == 2)
      v48 = (v46 - v24) * 0.5;
  }
  if (v47 == 0.0)
  {
    objc_msgSend(v43, "addObject:", v19);
  }
  else
  {
    EQKitLayoutManager::beginRow((EQKitLayoutManager *)a1, 1, 0);
    EQKitLayoutManager::addHSpace((EQKitLayoutManager *)a1, v47);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v71, v19);
    EQKitLayoutManager::addRowChild(a1, (uint64_t)v71, 0);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v71);
    EQKitLayoutManager::endRow((EQKitLayoutManager *)a1, (EQKit::ILayout *)&v69);
    if (v69)
      objc_msgSend(v43, "addObject:");
    EQKit::ILayout::~ILayout((EQKit::ILayout *)&v69);
  }
  v49 = -[EQKitVSpace initWithHeight:depth:]([EQKitVSpace alloc], "initWithHeight:depth:", v38, 0.0);
  objc_msgSend(v43, "addObject:", v49);

  v50 = -[EQKitRule initWithHeight:depth:width:cgColor:]([EQKitRule alloc], "initWithHeight:depth:width:cgColor:", *(_QWORD *)(EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1) + 96), v35, v35, v46);
  objc_msgSend(v43, "addObject:", v50);

  v51 = -[EQKitVSpace initWithHeight:depth:]([EQKitVSpace alloc], "initWithHeight:depth:", v33, 0.0);
  objc_msgSend(v43, "addObject:", v51);

  if (v48 == 0.0)
  {
    objc_msgSend(v43, "addObject:", v20);
  }
  else
  {
    EQKitLayoutManager::beginRow((EQKitLayoutManager *)a1, 1, 0);
    EQKitLayoutManager::addHSpace((EQKitLayoutManager *)a1, v48);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v68, v20);
    EQKitLayoutManager::addRowChild(a1, (uint64_t)v68, 0);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v68);
    EQKitLayoutManager::endRow((EQKitLayoutManager *)a1, (EQKit::ILayout *)&v69);
    if (v69)
      objc_msgSend(v43, "addObject:");
    EQKit::ILayout::~ILayout((EQKit::ILayout *)&v69);
  }
  v52 = -[EQKitOffsetVBox initWithChildBoxes:pivotIndex:offset:]([EQKitOffsetVBox alloc], "initWithChildBoxes:pivotIndex:offset:", v43, 2, v66);
  EQKit::ILayout::ILayout(a5, &v52->super.super.super);

  *((_WORD *)a5 + 16) = *((_WORD *)a5 + 16) & 0xFFF0 | 0xA;
  EQKit::ILayout::takeMissingOffsetsFromLayout(a5, (const EQKit::ILayout *)v76);
  EQKit::ILayout::takeMissingOffsetsFromLayout(a5, (const EQKit::ILayout *)v74);
  EQKit::ILayout::removeOffsetOfKind((uint64_t *)a5, 1);

  if (*(_BYTE *)(EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1) + 16))
    goto LABEL_46;
  if ((v77 & 0x1C00u) <= 0x1000 || (v75 & 0x1C00u) <= 0x1000)
  {
    if ((v77 & 0x1000) == 0)
    {
LABEL_46:
      v53 = 1;
      goto LABEL_47;
    }
    if ((v75 & 0x1000) != 0)
      v53 = 3;
    else
      v53 = 1;
  }
  else if (*(uint64_t *)(EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1) + 8) <= 0)
  {
    v53 = 3;
  }
  else
  {
    v53 = 4;
  }
LABEL_47:
  EQKit::ILayout::setVerticalContentClassification((uint64_t)a5, v53);
  if (a3)
  {
    v54 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)objc_msgSend(*(id *)(a1 + 592), "fontManager"));
    v55 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1);
    v56 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1);
    if ((*(_BYTE *)(v56 + 104) & 1) != 0)
      v57.n128_u64[0] = *(_QWORD *)(v56 + 112);
    else
      v57.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v56);
    v58 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v54 + 40))(v54, 26, v55 + 8, v57);
    v59 = (void *)objc_msgSend(a4, "operatorCore");
    if (v59)
    {
      v60 = EQKitLayoutManager::leftSpaceForOperator(a1, v59);
      v61 = EQKitLayoutManager::rightSpaceForOperator(a1, v59);
      if (v58 <= v60)
        v62 = v60;
      else
        v62 = v58;
      if (v58 <= v61)
        v63 = v61;
      else
        v63 = v58;
      v58 = v62;
    }
    else
    {
      v63 = v58;
    }
    EQKitLayoutManager::addOperatorLeftSpace((EQKitLayoutManager *)a1, v58);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v67, a5);
    v64 = EQKitLayoutManager::currentNode((EQKitLayoutManager *)a1);
    EQKitLayoutManager::addRowChild(a1, (uint64_t)v67, v64);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v67);
    EQKitLayoutManager::addOperatorRightSpace((EQKitLayoutManager *)a1, v63);
    EQKit::ILayout::ILayout((EQKit::ILayout *)&v69, 0);
    EQKit::ILayout::operator=((uint64_t)a5, (uint64_t)&v69);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)&v69);
  }
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v74);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v76);
}

void sub_2179265C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  EQKit::ILayout *v41;
  uint64_t v42;

  EQKit::ILayout::~ILayout(v41);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a41);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)(v42 - 200));
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutSubsuperscript(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  void *v5;

  v5 = (void *)EQKit::Layout::Schemata::subsuperscriptSchemata(a2);
  EQKitLayoutManager::layoutSubsuperscript((uint64_t)this, objc_msgSend(v5, "schemataKernel"), objc_msgSend(v5, "schemataSubscript"), (void *)objc_msgSend(v5, "schemataSuperscript"), a3);
}

uint64_t EQKitLayoutManager::layoutOperator@<X0>(id *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  unint64_t v6;
  void *v7;
  void *v8;
  EQKitStringBox *v9;
  uint64_t v10;
  double v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  EQKitVShift *v21;
  void *v22;
  uint64_t v23;
  unsigned __int16 v24;
  int v25;
  uint64_t *v26;
  double v27;
  char v28;
  id v30[2];

  v6 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)this);
  v7 = (void *)EQKit::Layout::Schemata::tokenSchemata(a2);
  v8 = (void *)(*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(**(_QWORD **)(v6 + 80) + 72))(*(_QWORD *)(v6 + 80), objc_msgSend(v7, "schemataTokenString"), v6 + 8);
  v9 = -[EQKitStringBox initWithAttributedString:cgColor:]([EQKitStringBox alloc], "initWithAttributedString:cgColor:", v8, *(_QWORD *)(v6 + 96));
  v10 = objc_msgSend(v7, "schemataUnicharOrNul");
  v11 = 0.0;
  if ((_DWORD)v10)
  {
    v12 = (void *)objc_msgSend((id)EQKitLayoutManager::currentNode((EQKitLayoutManager *)this), "operatorCore");
    if (EQKitLayoutManager::isOperatorSymmetric((uint64_t)this, v12))
    {
      if (((*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(**(_QWORD **)(v6 + 80) + 128))(*(_QWORD *)(v6 + 80), v10, v6 + 8) & 1) == 0)
      {
        -[EQKitStringBox depth](v9, "depth");
        v14 = v13;
        -[EQKitStringBox height](v9, "height");
        v16 = v15;
        -[EQKitStringBox depth](v9, "depth");
        v18 = v14 + (v16 + v17) * -0.5;
        if ((*(_BYTE *)(v6 + 104) & 2) != 0)
          v19 = *(double *)(v6 + 120);
        else
          v19 = EQKitLayoutContext::pComputeMathAxis((EQKitLayoutContext *)v6);
        v11 = v18 + v19;
      }
    }
  }
  v20 = v11 + EQKitLayoutManager::lengthForCharacterProperty(this, 3, v10, 0.0);
  if (v20 == 0.0)
  {
    v21 = v9;
  }
  else
  {
    v21 = -[EQKitVShift initWithBox:offset:]([EQKitVShift alloc], "initWithBox:offset:", v9, v20);

  }
  EQKit::ILayout::ILayout(a3, &v21->super);
  v22 = (void *)objc_msgSend((id)EQKitLayoutManager::currentNode((EQKitLayoutManager *)this), "operatorCore");
  v23 = objc_msgSend(this[74], "operatorDictionary");
  v24 = objc_msgSend(v22, "operatorId");
  v25 = EQKitLayoutManager::operatorForm((uint64_t)this, v22);
  v26 = EQKit::Config::Operator::Dictionary::lookup(v23, v24, v25);
  if (v26 && (v26[6] & 0x40) != 0)
  {
    -[EQKitVShift width](v21, "width");
    EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)v30, &v21->super, v27 * 0.5);
    EQKit::ILayout::setOffsetOfKind((uint64_t)a3, 1, (uint64_t)v30);
    EQKit::ILayoutOffset::~ILayoutOffset(v30);
  }
  if ((*(unsigned int (**)(_QWORD, uint64_t, unint64_t))(**(_QWORD **)(v6 + 80) + 112))(*(_QWORD *)(v6 + 80), v10, v6 + 8))
  {
    v28 = 5;
  }
  else
  {
    v28 = 2;
  }
  return EQKit::ILayout::setVerticalContentClassification((uint64_t)a3, v28);
}

void sub_21792696C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  EQKit::ILayout *v9;

  EQKit::ILayoutOffset::~ILayoutOffset(&a9);
  EQKit::ILayout::~ILayout(v9);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutIdentifier(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  EQKitStringBox *v9;
  EQKit::ILayout *v10;
  unsigned int v11;

  v5 = EQKitLayoutManager::layoutContext(this);
  v6 = *(_QWORD *)(v5 + 80);
  v7 = objc_msgSend((id)EQKit::Layout::Schemata::tokenSchemata(a2), "schemataTokenString");
  v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v6 + 72))(v6, v7, v5 + 8);
  v9 = -[EQKitStringBox initWithAttributedString:cgColor:]([EQKitStringBox alloc], "initWithAttributedString:cgColor:", v8, *(_QWORD *)(v5 + 96));
  v10 = EQKit::ILayout::ILayout(a3, &v9->super);
  EQKit::ILayout::setVerticalContentClassification((uint64_t)v10, 5);
  v11 = *(_DWORD *)(v5 + 20);
  if (v11 <= 0xD && ((1 << v11) & 0x3018) != 0)
    *((_WORD *)a3 + 16) = *((_WORD *)a3 + 16) & 0xFF3F | 0x80;

}

void sub_217926A5C(_Unwind_Exception *a1)
{
  EQKit::ILayout *v1;

  EQKit::ILayout::~ILayout(v1);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutNumber(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  EQKitStringBox *v10;
  EQKit::ILayout *v11;
  double v12;
  id v13[2];

  v6 = EQKitLayoutManager::layoutContext(this);
  v7 = *(_QWORD *)(v6 + 80);
  v8 = objc_msgSend((id)EQKit::Layout::Schemata::tokenSchemata(a2), "schemataTokenString");
  v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v7 + 72))(v7, v8, v6 + 8);
  v10 = -[EQKitStringBox initWithAttributedString:cgColor:]([EQKitStringBox alloc], "initWithAttributedString:cgColor:", v9, *(_QWORD *)(v6 + 96));
  v11 = EQKit::ILayout::ILayout(a3, &v10->super);
  EQKit::ILayout::setVerticalContentClassification((uint64_t)v11, 5);
  EQKitLayoutManager::decimalPointOffsetInStringBox(this, v10);
  EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)v13, &v10->super, v12);
  EQKit::ILayout::setOffsetOfKind((uint64_t)a3, 2, (uint64_t)v13);
  EQKit::ILayoutOffset::~ILayoutOffset(v13);

}

void sub_217926B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  EQKit::ILayout *v9;

  EQKit::ILayoutOffset::~ILayoutOffset(&a9);
  EQKit::ILayout::~ILayout(v9);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutUnderover(EQKit::Layout::Schemata *this@<X1>, uint64_t a2@<X0>, int a3@<W2>, void *a4@<X3>, EQKit::ILayout *a5@<X8>)
{
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  unint64_t v11;
  const EQKit::ILayout *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  _BOOL4 v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  double v29;
  unint64_t v30;
  double v31;
  double v32;
  char v33;
  double v34;
  double v35;
  char v36;
  double v37;
  double v38;
  uint64_t v39;
  double v40;
  unint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  __n128 v55;
  id v56;
  id v57;
  double MidX;
  double v59;
  __n128 v60;
  double v61;
  double v62;
  __n128 v63;
  double v64;
  __n128 v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  __n128 v69;
  double v70;
  uint64_t v71;
  double v72;
  __n128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  int v78;
  double v79;
  double v80;
  __n128 v81;
  double v82;
  uint64_t v83;
  double v84;
  double v85;
  uint64_t v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  __n128 v90;
  double v91;
  uint64_t v92;
  double v93;
  __n128 v94;
  uint64_t v95;
  __n128 v96;
  double v97;
  uint64_t v98;
  double v99;
  int v100;
  double v101;
  uint64_t v102;
  id v103;
  void *v104;
  EQKitVSpace *v105;
  uint64_t v106;
  id v107;
  EQKitVSpace *v108;
  EQKitVBox *v109;
  char v110;
  char v111;
  int v112;
  void *v113;
  double v114;
  double v115;
  double v116;
  uint64_t v117;
  EQKitBox *v120;
  unsigned int v121;
  _BYTE v122[56];
  _BYTE v123[56];
  _BYTE v124[56];
  _BYTE v125[56];
  _QWORD v126[8];
  char v127;
  _QWORD v128[6];
  char v129;
  _QWORD v130[9];
  _QWORD v131[8];
  char v132;
  _BYTE v133[56];
  uint64_t v134;
  double *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  char v141;
  _QWORD v142[6];
  char v143;
  id v144[7];
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  char v148;
  _QWORD v149[9];
  id v150[7];
  id v151[4];
  __int16 v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  EQKit::Script::Info *(*v156)(uint64_t, uint64_t);
  void (*v157)(uint64_t);
  void *v158;
  uint64_t v159;
  __int16 v160;
  char v161;
  int v162;
  uint64_t v163;
  int v164;
  CFTypeRef cf;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  char v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  int v173;
  int v174[3];
  CGRect v175;

  v7 = (void *)EQKit::Layout::Schemata::underoverSchemata(this);
  v8 = (void *)objc_msgSend(v7, "schemataBase");
  v9 = (void *)objc_msgSend(v7, "schemataUnder");
  v10 = (void *)objc_msgSend(v7, "schemataOver");
  v11 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a2);
  v120 = (EQKitBox *)a5;
  EQKit::ILayout::ILayout(a5, 0);
  if (!*(_BYTE *)(v11 + 16) && EQKitLayoutManager::isEmbellishedOperatorWithMovableLimts(a2, v8))
  {
    EQKitLayoutManager::layoutSubsuperscript(a2, (uint64_t)v8, (uint64_t)v9, v10, (EQKit::ILayout *)&v153);
    v12 = a5;
    EQKit::ILayout::operator=((uint64_t)a5, (uint64_t)&v153);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)&v153);
    v13 = 0.0;
    goto LABEL_181;
  }
  LODWORD(v151[0]) = 0;
  LODWORD(v150[0]) = 0;
  if (v9)
  {
    v14 = *(_QWORD *)(a2 + 600);
    v153 = (uint64_t)v9;
    LODWORD(v154) = 5;
    if ((EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v14, v14 + 8, (uint64_t)&v153, v151) & 1) == 0)
    {
      v15 = *(_QWORD *)(a2 + 600);
      v153 = EQKitLayoutManager::currentNode((EQKitLayoutManager *)a2);
      LODWORD(v154) = 6;
      EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v15, v15 + 8, (uint64_t)&v153, v151);
    }
  }
  if (v10)
  {
    v16 = *(_QWORD *)(a2 + 600);
    v153 = (uint64_t)v10;
    LODWORD(v154) = 5;
    if ((EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v16, v16 + 8, (uint64_t)&v153, v150) & 1) == 0)
    {
      v17 = *(_QWORD *)(a2 + 600);
      v153 = EQKitLayoutManager::currentNode((EQKitLayoutManager *)a2);
      LODWORD(v154) = 5;
      EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v17, v17 + 8, (uint64_t)&v153, v150);
    }
  }
  if (LODWORD(v151[0]))
    v121 = LODWORD(v151[0]) == 2;
  else
    v121 = EQKitLayoutManager::isEmbellishedOperatorWithAccent(a2, v9);
  if (LODWORD(v150[0]))
    v18 = LODWORD(v150[0]) == 2;
  else
    v18 = EQKitLayoutManager::isEmbellishedOperatorWithAccent(a2, v10);
  v174[0] = 2;
  v19 = *(_QWORD *)(a2 + 600);
  v153 = EQKitLayoutManager::currentNode((EQKitLayoutManager *)a2);
  LODWORD(v154) = 1;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v19, v19 + 128, (uint64_t)&v153, v174);
  if (objc_msgSend(v8, "isEmbellishedOperator"))
    v20 = EQKitLayoutManager::isOperatorStretchy(a2, (void *)objc_msgSend(v8, "operatorCore"));
  else
    v20 = 0;
  if (objc_msgSend(v9, "isEmbellishedOperator"))
    v21 = EQKitLayoutManager::isOperatorStretchy(a2, (void *)objc_msgSend(v9, "operatorCore"));
  else
    v21 = 0;
  if (objc_msgSend(v10, "isEmbellishedOperator"))
  {
    v22 = EQKitLayoutManager::isOperatorStretchy(a2, (void *)objc_msgSend(v10, "operatorCore"));
    if (!v20)
    {
LABEL_24:
      v23 = 0;
      goto LABEL_30;
    }
  }
  else
  {
    v22 = 0;
    if (!v20)
      goto LABEL_24;
  }
  v24 = *(_QWORD *)(a2 + 488);
  v23 = !v24
     || (v25 = v24 + *(_QWORD *)(a2 + 480) - 1,
         v26 = *(_QWORD *)(*(_QWORD *)(a2 + 456) + 8 * (v25 / 0x66)),
         v27 = v25 % 0x66,
         *(void **)(v26 + 40 * v27) != v8)
     || *(_DWORD *)(v26 + 40 * v27 + 8) != 2;
LABEL_30:
  v170 = 0;
  v171 = &v170;
  v172 = 0x2020000000;
  v173 = 0;
  v166 = 0;
  v167 = &v166;
  v168 = 0x2020000000;
  v169 = 0;
  v153 = 0;
  v154 = &v153;
  v155 = 0x5812000000;
  v156 = __Block_byref_object_copy_;
  v157 = __Block_byref_object_dispose_;
  v158 = &unk_217C8B239;
  v159 = 0;
  v160 = 1;
  v161 = 0;
  v162 = 1;
  v163 = 0x4028000000000000;
  v164 = 0;
  cf = 0;
  EQKit::ILayout::ILayout((EQKit::ILayout *)v151, 0);
  if (v8)
    v28 = v23;
  else
    v28 = 1;
  v29 = 0.0;
  if ((v28 & 1) == 0)
  {
    v149[0] = MEMORY[0x24BDAC760];
    v149[1] = 3221225472;
    v149[2] = ___ZN18EQKitLayoutManager15layoutUnderoverERKN5EQKit6Layout8SchemataEbPU26objcproto15EQKitLayoutNode11objc_object_block_invoke;
    v149[3] = &unk_24D828B40;
    v149[8] = a2;
    v149[4] = v8;
    v149[5] = &v170;
    v149[6] = &v153;
    v149[7] = &v166;
    v30 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a2);
    EQKitLayoutManager::layoutBox((EQKitLayoutManager *)a2, (uint64_t)v8, 0, *(unsigned __int8 *)(v30 + 16), 0, 0, (uint64_t)v149, (EQKit::ILayout *)v150);
    EQKit::ILayout::operator=((uint64_t)v151, (uint64_t)v150);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v150);
    objc_msgSend(v151[0], "width");
    if (v31 >= 0.0)
    {
      objc_msgSend(v151[0], "width");
      v29 = v32;
    }
  }
  v145 = 0;
  v146 = &v145;
  v147 = 0x2020000000;
  v148 = 0;
  EQKit::ILayout::ILayout((EQKit::ILayout *)v150, 0);
  if (v9)
    v33 = v21;
  else
    v33 = 1;
  if ((v33 & 1) == 0)
  {
    v142[0] = MEMORY[0x24BDAC760];
    v142[1] = 3221225472;
    v142[2] = ___ZN18EQKitLayoutManager15layoutUnderoverERKN5EQKit6Layout8SchemataEbPU26objcproto15EQKitLayoutNode11objc_object_block_invoke_2;
    v142[3] = &unk_24D828B68;
    v143 = v121;
    v142[4] = v9;
    v142[5] = &v145;
    EQKitLayoutManager::layoutBox((EQKitLayoutManager *)a2, (uint64_t)v9, v121 ^ 1, 0, 2, 0, (uint64_t)v142, (EQKit::ILayout *)v144);
    EQKit::ILayout::operator=((uint64_t)v150, (uint64_t)v144);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v144);
    objc_msgSend(v150[0], "width");
    if (v29 <= v34)
    {
      objc_msgSend(v150[0], "width");
      v29 = v35;
    }
  }
  v138 = 0;
  v139 = &v138;
  v140 = 0x2020000000;
  v141 = 0;
  v134 = 0;
  v135 = (double *)&v134;
  v136 = 0x2020000000;
  v137 = 0;
  EQKit::ILayout::ILayout((EQKit::ILayout *)v144, 0);
  if (v10)
    v36 = v22;
  else
    v36 = 1;
  if ((v36 & 1) == 0)
  {
    v131[0] = MEMORY[0x24BDAC760];
    v131[1] = 3221225472;
    v131[2] = ___ZN18EQKitLayoutManager15layoutUnderoverERKN5EQKit6Layout8SchemataEbPU26objcproto15EQKitLayoutNode11objc_object_block_invoke_3;
    v131[3] = &unk_24D828B90;
    v132 = v18;
    v131[4] = v10;
    v131[5] = &v138;
    v131[7] = a2;
    v131[6] = &v134;
    EQKitLayoutManager::layoutBox((EQKitLayoutManager *)a2, (uint64_t)v10, v18 ^ 1, 0, 2, 0, (uint64_t)v131, (EQKit::ILayout *)v133);
    EQKit::ILayout::operator=((uint64_t)v144, (uint64_t)v133);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v133);
    objc_msgSend(v144[0], "width");
    if (v29 <= v37)
    {
      objc_msgSend(v144[0], "width");
      v29 = v38;
    }
  }
  if (v23)
  {
    v39 = objc_msgSend(v8, "operatorCore");
    v40 = EQKitLayoutManager::adjustStretchyWidth((EQKitLayoutManager *)a2, (void *)objc_msgSend(v8, "operatorCore"), v29);
    EQKitLayoutStretchedOperator::EQKitLayoutStretchedOperator((uint64_t)v133, v39, 1, 0.0, 0.0, v40);
    std::deque<EQKitLayoutStretchedOperator>::push_back((_QWORD *)(a2 + 448), (uint64_t)v133);
    v130[0] = MEMORY[0x24BDAC760];
    v130[1] = 3221225472;
    v130[2] = ___ZN18EQKitLayoutManager15layoutUnderoverERKN5EQKit6Layout8SchemataEbPU26objcproto15EQKitLayoutNode11objc_object_block_invoke_4;
    v130[3] = &unk_24D828B40;
    v130[4] = v8;
    v130[5] = &v170;
    v130[6] = &v153;
    v130[7] = &v166;
    v130[8] = a2;
    v41 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a2);
    EQKitLayoutManager::layoutBox((EQKitLayoutManager *)a2, (uint64_t)v8, 0, *(unsigned __int8 *)(v41 + 16), 0, 0, (uint64_t)v130, (EQKit::ILayout *)v133);
    EQKit::ILayout::operator=((uint64_t)v151, (uint64_t)v133);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v133);
    --*(_QWORD *)(a2 + 488);
    std::deque<EQKitLayoutStretchedOperator>::__maybe_remove_back_spare[abi:nn180100]((_QWORD *)(a2 + 448), 1);
  }
  if (v21)
  {
    v42 = objc_msgSend(v9, "operatorCore");
    v43 = EQKitLayoutManager::adjustStretchyWidth((EQKitLayoutManager *)a2, (void *)objc_msgSend(v9, "operatorCore"), v29);
    EQKitLayoutStretchedOperator::EQKitLayoutStretchedOperator((uint64_t)v133, v42, 1, 0.0, 0.0, v43);
    std::deque<EQKitLayoutStretchedOperator>::push_back((_QWORD *)(a2 + 448), (uint64_t)v133);
    v128[0] = MEMORY[0x24BDAC760];
    v128[1] = 3221225472;
    v128[2] = ___ZN18EQKitLayoutManager15layoutUnderoverERKN5EQKit6Layout8SchemataEbPU26objcproto15EQKitLayoutNode11objc_object_block_invoke_5;
    v128[3] = &unk_24D828B68;
    v129 = v121;
    v128[4] = v9;
    v128[5] = &v145;
    EQKitLayoutManager::layoutBox((EQKitLayoutManager *)a2, (uint64_t)v9, v121 ^ 1, 0, 2, 0, (uint64_t)v128, (EQKit::ILayout *)v133);
    EQKit::ILayout::operator=((uint64_t)v150, (uint64_t)v133);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v133);
    --*(_QWORD *)(a2 + 488);
    std::deque<EQKitLayoutStretchedOperator>::__maybe_remove_back_spare[abi:nn180100]((_QWORD *)(a2 + 448), 1);
  }
  if (v22)
  {
    v44 = objc_msgSend(v10, "operatorCore");
    v45 = EQKitLayoutManager::adjustStretchyWidth((EQKitLayoutManager *)a2, (void *)objc_msgSend(v10, "operatorCore"), v29);
    EQKitLayoutStretchedOperator::EQKitLayoutStretchedOperator((uint64_t)v133, v44, 1, 0.0, 0.0, v45);
    std::deque<EQKitLayoutStretchedOperator>::push_back((_QWORD *)(a2 + 448), (uint64_t)v133);
    v126[0] = MEMORY[0x24BDAC760];
    v126[1] = 3221225472;
    v126[2] = ___ZN18EQKitLayoutManager15layoutUnderoverERKN5EQKit6Layout8SchemataEbPU26objcproto15EQKitLayoutNode11objc_object_block_invoke_6;
    v126[3] = &unk_24D828B90;
    v127 = v18;
    v126[4] = v10;
    v126[5] = &v138;
    v126[6] = &v134;
    v126[7] = a2;
    EQKitLayoutManager::layoutBox((EQKitLayoutManager *)a2, (uint64_t)v10, v18 ^ 1, 0, 2, 0, (uint64_t)v126, (EQKit::ILayout *)v133);
    EQKit::ILayout::operator=((uint64_t)v144, (uint64_t)v133);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v133);
    --*(_QWORD *)(a2 + 488);
    std::deque<EQKitLayoutStretchedOperator>::__maybe_remove_back_spare[abi:nn180100]((_QWORD *)(a2 + 448), 1);
  }
  objc_msgSend(v151[0], "width");
  v47 = v46;
  if (v144[0])
  {
    objc_msgSend(v144[0], "width");
    if (v48 <= v47)
      v49 = v47;
    else
      v49 = v48;
    if (v18)
      v50 = v47;
    else
      v50 = v49;
  }
  else
  {
    v49 = v46;
    v50 = v46;
  }
  if (v150[0])
  {
    objc_msgSend(v150[0], "width");
    if (v51 > v49)
      v49 = v51;
    if (v51 <= v50)
      v51 = v50;
    if (!v121)
      v50 = v51;
  }
  v13 = 0.0;
  if (v47 < v50)
  {
    v52 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)objc_msgSend(*(id *)(a2 + 592), "fontManager"));
    v53 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a2);
    v54 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a2);
    if ((*(_BYTE *)(v54 + 104) & 1) != 0)
      v55.n128_u64[0] = *(_QWORD *)(v54 + 112);
    else
      v55.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v54);
    v13 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v52 + 40))(v52, 27, v53 + 8, v55);
  }
  v56 = v144[0];
  v57 = v150[0];
  objc_msgSend(v151[0], "erasableBounds");
  MidX = CGRectGetMidX(v175);
  EQKit::ILayout::ILayout((EQKit::ILayout *)v125, (const EQKit::ILayout *)v151);
  EQKitLayoutManager::alignBoxHorizontally((const EQKit::ILayout *)v125, v174[0], 0, (EQKit::ILayout *)v133, v49, 0.0);
  EQKit::ILayout::operator=((uint64_t)v151, (uint64_t)v133);
  v59 = (v49 - v47) * 0.5 + MidX;
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v133);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v125);
  v61 = 0.0;
  v62 = 0.0;
  if (v56)
  {
    if (v18)
    {
      if (*((_BYTE *)v139 + 24))
      {
        objc_msgSend(v56, "depth");
        if (v63.n128_f64[0] >= 0.0)
        {
          v76 = *(_QWORD *)(v11 + 80);
          if ((*(_BYTE *)(v11 + 104) & 1) != 0)
            v63.n128_u64[0] = *(_QWORD *)(v11 + 112);
          else
            v63.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
          v80 = -(*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v76 + 40))(v76, 11, v11 + 8, v63);
        }
        else
        {
          v64 = v135[3];
          objc_msgSend(v56, "depth");
          v66 = v65.n128_f64[0];
          v67 = *(_QWORD *)(v11 + 80);
          if ((*(_BYTE *)(v11 + 104) & 1) != 0)
            v65.n128_u64[0] = *(_QWORD *)(v11 + 112);
          else
            v65.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
          if (v64 >= -v66
                    - (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v67 + 40))(v67, 11, v11 + 8, v65))
          {
            objc_msgSend(v56, "depth");
            v82 = v81.n128_f64[0];
            v83 = *(_QWORD *)(v11 + 80);
            if ((*(_BYTE *)(v11 + 104) & 1) != 0)
              v81.n128_u64[0] = *(_QWORD *)(v11 + 112);
            else
              v81.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
            v80 = -v82
                - (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v83 + 40))(v83, 11, v11 + 8, v81);
          }
          else
          {
            v80 = v135[3];
          }
        }
        objc_msgSend(v151[0], "height");
        if (v80 >= v84)
        {
          objc_msgSend(v151[0], "height");
          v80 = v85;
        }
        v62 = -v80;
      }
      else
      {
        v75 = *(_QWORD *)(v11 + 80);
        if ((*(_BYTE *)(v11 + 104) & 1) != 0)
          v60.n128_u64[0] = *(_QWORD *)(v11 + 112);
        else
          v60.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
        v62 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v75 + 40))(v75, 11, v11 + 8, v60);
      }
      if (*((_BYTE *)v167 + 24))
      {
        v86 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)objc_msgSend(*(id *)(a2 + 592), "fontManager"));
        v87 = v59
            + (*(double (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)v86 + 176))(v86, *((unsigned int *)v171 + 6), v154 + 6);
        v78 = 1;
LABEL_117:
        EQKit::ILayout::ILayout((EQKit::ILayout *)v124, (const EQKit::ILayout *)v144);
        EQKitLayoutManager::alignBoxHorizontally((const EQKit::ILayout *)v124, v174[0], v78, (EQKit::ILayout *)v133, v49, v87);
        EQKit::ILayout::operator=((uint64_t)v144, (uint64_t)v133);
        EQKit::ILayout::~ILayout((EQKit::ILayout *)v133);
        EQKit::ILayout::~ILayout((EQKit::ILayout *)v124);
        goto LABEL_118;
      }
    }
    else
    {
      v68 = *(_QWORD *)(v11 + 80);
      if ((*(_BYTE *)(v11 + 104) & 1) != 0)
        v60.n128_u64[0] = *(_QWORD *)(v11 + 112);
      else
        v60.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
      v70 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v68 + 40))(v68, 11, v11 + 8, v60);
      v71 = *(_QWORD *)(v11 + 80);
      if ((*(_BYTE *)(v11 + 104) & 1) != 0)
        v69.n128_u64[0] = *(_QWORD *)(v11 + 112);
      else
        v69.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
      v72 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v71 + 40))(v71, 12, v11 + 8, v69);
      objc_msgSend(v56, "layoutDepth");
      v74 = *(_QWORD *)(v11 + 80);
      if (v70 <= v72 - v73.n128_f64[0])
      {
        if ((*(_BYTE *)(v11 + 104) & 1) != 0)
          v73.n128_u64[0] = *(_QWORD *)(v11 + 112);
        else
          v73.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
        v77 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v74 + 40))(v74, 12, v11 + 8, v73);
        objc_msgSend(v56, "layoutDepth");
        v78 = 0;
        v62 = v77 - v79;
        goto LABEL_116;
      }
      if ((*(_BYTE *)(v11 + 104) & 1) != 0)
        v73.n128_u64[0] = *(_QWORD *)(v11 + 112);
      else
        v73.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
      v62 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v74 + 40))(v74, 11, v11 + 8, v73);
    }
    v78 = 0;
LABEL_116:
    v87 = v59;
    goto LABEL_117;
  }
LABEL_118:
  if (v57)
  {
    if (!v121)
    {
      v89 = *(_QWORD *)(v11 + 80);
      if ((*(_BYTE *)(v11 + 104) & 1) != 0)
        v60.n128_u64[0] = *(_QWORD *)(v11 + 112);
      else
        v60.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
      v91 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v89 + 40))(v89, 13, v11 + 8, v60);
      v92 = *(_QWORD *)(v11 + 80);
      if ((*(_BYTE *)(v11 + 104) & 1) != 0)
        v90.n128_u64[0] = *(_QWORD *)(v11 + 112);
      else
        v90.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
      v93 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v92 + 40))(v92, 14, v11 + 8, v90);
      objc_msgSend(v57, "layoutHeight");
      v95 = *(_QWORD *)(v11 + 80);
      if (v91 <= v93 - v94.n128_f64[0])
      {
        if ((*(_BYTE *)(v11 + 104) & 1) != 0)
          v94.n128_u64[0] = *(_QWORD *)(v11 + 112);
        else
          v94.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
        v99 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v95 + 40))(v95, 14, v11 + 8, v94);
        objc_msgSend(v57, "layoutHeight");
        v100 = 0;
        v61 = v99 - v101;
        goto LABEL_149;
      }
      if ((*(_BYTE *)(v11 + 104) & 1) != 0)
        v94.n128_u64[0] = *(_QWORD *)(v11 + 112);
      else
        v94.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
      v61 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v95 + 40))(v95, 13, v11 + 8, v94);
      goto LABEL_148;
    }
    if (*((_BYTE *)v146 + 24))
    {
      objc_msgSend(v57, "height");
      if (v60.n128_f64[0] <= 0.0)
      {
        objc_msgSend(v57, "height");
        v97 = v96.n128_f64[0];
        v98 = *(_QWORD *)(v11 + 80);
        if ((*(_BYTE *)(v11 + 104) & 1) != 0)
          v96.n128_u64[0] = *(_QWORD *)(v11 + 112);
        else
          v96.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
        v61 = v97
            + (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v98 + 40))(v98, 13, v11 + 8, v96);
LABEL_146:
        if (*((_BYTE *)v167 + 24))
        {
          v102 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)objc_msgSend(*(id *)(a2 + 592), "fontManager"));
          v59 = v59
              + (*(double (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)v102 + 184))(v102, *((unsigned int *)v171 + 6), v154 + 6);
          v100 = 1;
LABEL_149:
          EQKit::ILayout::ILayout((EQKit::ILayout *)v123, (const EQKit::ILayout *)v150);
          EQKitLayoutManager::alignBoxHorizontally((const EQKit::ILayout *)v123, v174[0], v100, (EQKit::ILayout *)v133, v49, v59);
          EQKit::ILayout::operator=((uint64_t)v150, (uint64_t)v133);
          EQKit::ILayout::~ILayout((EQKit::ILayout *)v133);
          EQKit::ILayout::~ILayout((EQKit::ILayout *)v123);
          goto LABEL_150;
        }
LABEL_148:
        v100 = 0;
        goto LABEL_149;
      }
      v88 = *(_QWORD *)(v11 + 80);
      if ((*(_BYTE *)(v11 + 104) & 1) == 0)
        goto LABEL_123;
    }
    else
    {
      v88 = *(_QWORD *)(v11 + 80);
      if ((*(_BYTE *)(v11 + 104) & 1) == 0)
      {
LABEL_123:
        v60.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v11);
LABEL_137:
        v61 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v88 + 40))(v88, 13, v11 + 8, v60);
        goto LABEL_146;
      }
    }
    v60.n128_u64[0] = *(_QWORD *)(v11 + 112);
    goto LABEL_137;
  }
LABEL_150:
  v12 = (const EQKit::ILayout *)v120;
  v103 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  v104 = v103;
  if (v144[0])
  {
    objc_msgSend(v103, "addObject:");
    if (v62 != 0.0)
    {
      v105 = -[EQKitVSpace initWithHeight:depth:]([EQKitVSpace alloc], "initWithHeight:depth:", v62, 0.0);
      objc_msgSend(v104, "addObject:", v105);

    }
  }
  v106 = objc_msgSend(v104, "count");
  if (v151[0])
    objc_msgSend(v104, "addObject:");
  v107 = v150[0];
  if (v150[0])
  {
    if (v61 != 0.0)
    {
      v108 = -[EQKitVSpace initWithHeight:depth:]([EQKitVSpace alloc], "initWithHeight:depth:", v61, 0.0);
      objc_msgSend(v104, "addObject:", v108);

      v107 = v150[0];
    }
    objc_msgSend(v104, "addObject:", v107);
  }
  v109 = -[EQKitVBox initWithChildBoxes:pivotIndex:]([EQKitVBox alloc], "initWithChildBoxes:pivotIndex:", v104, v106);
  EQKit::ILayout::operator=((uint64_t)v120, (uint64_t)v151);
  if (v8)
  {
    v110 = v121;
    if (!v9)
      v110 = 1;
    v111 = 1;
    if ((v152 & 0x1C00u) <= 0x1000 || (v110 & 1) == 0)
      goto LABEL_174;
    goto LABEL_168;
  }
  if (!v9 || v121)
  {
LABEL_168:
    if (v10)
      v112 = v18;
    else
      v112 = 1;
    if (v112)
      v111 = 4;
    else
      v111 = 1;
    goto LABEL_174;
  }
  v111 = 1;
LABEL_174:
  EQKit::ILayout::setVerticalContentClassification((uint64_t)v120, v111);
  EQKit::ILayout::setBox(v120, &v109->super.super);

  if (v10 && *((_BYTE *)v167 + 24) && v18)
    EQKit::ILayout::setIsOverAccentTokenWithBaseToken((uint64_t)v120, 1);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v144);
  _Block_object_dispose(&v134, 8);
  _Block_object_dispose(&v138, 8);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v150);
  _Block_object_dispose(&v145, 8);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v151);
  _Block_object_dispose(&v153, 8);
  if (cf)
    CFRelease(cf);
  _Block_object_dispose(&v166, 8);
  _Block_object_dispose(&v170, 8);
LABEL_181:
  if (a3)
  {
    v113 = (void *)objc_msgSend(a4, "operatorCore");
    if (v113)
    {
      v114 = EQKitLayoutManager::leftSpaceForOperator(a2, v113);
      v115 = EQKitLayoutManager::rightSpaceForOperator(a2, v113);
      if (v13 <= v114)
        v116 = v114;
      else
        v116 = v13;
      if (v13 <= v115)
        v13 = v115;
    }
    else
    {
      v116 = v13;
    }
    EQKitLayoutManager::addOperatorLeftSpace((EQKitLayoutManager *)a2, v116);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v122, v12);
    v117 = EQKitLayoutManager::currentNode((EQKitLayoutManager *)a2);
    EQKitLayoutManager::addRowChild(a2, (uint64_t)v122, v117);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v122);
    EQKitLayoutManager::addOperatorRightSpace((EQKitLayoutManager *)a2, v13);
    EQKit::ILayout::ILayout((EQKit::ILayout *)&v153, 0);
    EQKit::ILayout::operator=((uint64_t)v12, (uint64_t)&v153);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)&v153);
  }
}

void sub_217927D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, EQKit::ILayout *a12)
{
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&STACK[0x3D8]);
  EQKit::ILayout::~ILayout(a12);
  _Unwind_Resume(a1);
}

uint64_t EQKitLayoutManager::layoutTable@<X0>(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  void *v6;
  uint64_t v7;
  void *v9;
  void *v10;
  _QWORD v11[2];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[25];

  EQKit::ILayout::ILayout(a3, 0);
  v11[0] = &unk_24D828BE0;
  v11[1] = this;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  memset(v15, 0, sizeof(v15));
  std::deque<EQKitLayoutTable>::push_back((_QWORD *)this + 68, (uint64_t)v11);
  EQKitLayoutTable::~EQKitLayoutTable((EQKitLayoutTable *)v11);
  v6 = (void *)EQKit::Layout::Schemata::tableSchemata(a2);
  if (!v6)
  {
    v9 = (void *)objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "EQKit::ILayout EQKitLayoutManager::layoutTable(const EQKit::Layout::Schemata &)"), CFSTR("EQKitLayoutManager.mm"), 2600, CFSTR("can't layout a table without a table schemata"));
  }
  if (!*((_QWORD *)this + 73))
  {
    v10 = (void *)objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "EQKit::ILayout EQKitLayoutManager::layoutTable(const EQKit::Layout::Schemata &)"), CFSTR("EQKitLayoutManager.mm"), 2601, CFSTR("can't layout a table without a table stack"));
  }
  if (v6)
  {
    v7 = *((_QWORD *)this + 73);
    if (v7)
    {
      EQKitLayoutTable::layoutTable(*(_QWORD *)(*((_QWORD *)this + 69) + 8 * ((v7 + *((_QWORD *)this + 72) - 1) / 0x2AuLL))+ 96 * ((v7 + *((_QWORD *)this + 72) - 1) % 0x2AuLL), v6, (EQKit::ILayout *)v11);
      EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)v11);
      EQKit::ILayout::~ILayout((EQKit::ILayout *)v11);
    }
  }
  return std::deque<EQKitLayoutTable>::pop_back((_QWORD *)this + 68);
}

void sub_2179280D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  EQKit::ILayout *v9;

  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a9);
  EQKit::ILayout::~ILayout(v9);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutTableRow(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  _BYTE v10[56];

  EQKit::ILayout::ILayout(a3, 0);
  v6 = (void *)EQKit::Layout::Schemata::tableRowSchemata(a2);
  if (!v6)
  {
    v8 = (void *)objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "EQKit::ILayout EQKitLayoutManager::layoutTableRow(const EQKit::Layout::Schemata &)"), CFSTR("EQKitLayoutManager.mm"), 2614, CFSTR("can't layout a table without a tr schemata"));
  }
  if (!*((_QWORD *)this + 73))
  {
    v9 = (void *)objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "EQKit::ILayout EQKitLayoutManager::layoutTableRow(const EQKit::Layout::Schemata &)"), CFSTR("EQKitLayoutManager.mm"), 2615, CFSTR("can't layout a table without a table stack"));
  }
  if (v6)
  {
    v7 = *((_QWORD *)this + 73);
    if (v7)
    {
      EQKitLayoutTable::layoutTr(*(_QWORD *)(*((_QWORD *)this + 69) + 8 * ((v7 + *((_QWORD *)this + 72) - 1) / 0x2AuLL))+ 96 * ((v7 + *((_QWORD *)this + 72) - 1) % 0x2AuLL), v6, (EQKit::ILayout *)v10);
      EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)v10);
      EQKit::ILayout::~ILayout((EQKit::ILayout *)v10);
    }
  }
}

void sub_217928264(_Unwind_Exception *a1, uint64_t a2, ...)
{
  EQKit::ILayout *v2;
  va_list va;

  va_start(va, a2);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)va);
  EQKit::ILayout::~ILayout(v2);
  _Unwind_Resume(a1);
}

uint64_t EQKitLayoutManager::layoutStack@<X0>(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE v9[168];

  v5 = (_QWORD *)((char *)this + 496);
  v6 = EQKit::Layout::Schemata::stackSchemata(a2);
  EQKitLayoutElementaryStack::EQKitLayoutElementaryStack((uint64_t)v9, (uint64_t)this, v6, 0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFFFFLL, 0.0);
  std::deque<EQKitLayoutElementaryStack>::push_back(v5, (const EQKitLayoutElementaryStack *)v9);
  EQKitLayoutElementaryStack::~EQKitLayoutElementaryStack((EQKitLayoutElementaryStack *)v9);
  v7 = *((_QWORD *)this + 67) + *((_QWORD *)this + 66) - 1;
  EQKitLayoutElementaryStack::layout((id *)(*(_QWORD *)(*((_QWORD *)this + 63) + 8 * (v7 / 0x18)) + 168 * (v7 % 0x18)), a3);
  return std::deque<EQKitLayoutElementaryStack>::pop_back(v5);
}

void sub_217928340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  EQKit::ILayout *v10;

  EQKit::ILayout::~ILayout(v10);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutStackGroup(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  _BYTE v11[56];

  EQKit::ILayout::ILayout(a3, 0);
  v6 = *((_QWORD *)this + 67);
  if (v6
    || (v10 = (void *)objc_msgSend(MEMORY[0x24BDD1448], "currentHandler"),
        objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "EQKit::ILayout EQKitLayoutManager::layoutStackGroup(const EQKit::Layout::Schemata &)"), CFSTR("EQKitLayoutManager.mm"), 2482, CFSTR("can't layout a stack group without an elementary stack")), (v6 = *((_QWORD *)this + 67)) != 0))
  {
    v7 = v6 + *((_QWORD *)this + 66) - 1;
    v8 = *(_QWORD *)(*((_QWORD *)this + 63) + 8 * (v7 / 0x18));
    v9 = (void *)EQKit::Layout::Schemata::stackGroupSchemata(a2);
    EQKitLayoutElementaryStack::layoutStackGroup((_QWORD *)(v8 + 168 * (v7 % 0x18)), v9, (EQKit::ILayout *)v11);
    EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)v11);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v11);
  }
}

void sub_217928460(_Unwind_Exception *a1)
{
  EQKit::ILayout *v1;

  EQKit::ILayout::~ILayout(v1);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutStackRow(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  _BYTE v11[56];

  EQKit::ILayout::ILayout(a3, 0);
  v6 = *((_QWORD *)this + 67);
  if (v6
    || (v10 = (void *)objc_msgSend(MEMORY[0x24BDD1448], "currentHandler"),
        objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "EQKit::ILayout EQKitLayoutManager::layoutStackRow(const EQKit::Layout::Schemata &)"), CFSTR("EQKitLayoutManager.mm"), 2495, CFSTR("can't layout a stack row without an elementary stack")), (v6 = *((_QWORD *)this + 67)) != 0))
  {
    v7 = v6 + *((_QWORD *)this + 66) - 1;
    v8 = *(_QWORD *)(*((_QWORD *)this + 63) + 8 * (v7 / 0x18));
    v9 = (void *)EQKit::Layout::Schemata::stackRowSchemata(a2);
    EQKitLayoutElementaryStack::layoutStackRow((EQKitLayoutManager **)(v8 + 168 * (v7 % 0x18)), v9, (EQKit::ILayout *)v11);
    EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)v11);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v11);
  }
}

void sub_217928584(_Unwind_Exception *a1)
{
  EQKit::ILayout *v1;

  EQKit::ILayout::~ILayout(v1);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutStackLine(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  _BYTE v10[56];

  EQKit::ILayout::ILayout(a3, 0);
  v6 = *((_QWORD *)this + 67);
  if (v6
    || (v9 = (void *)objc_msgSend(MEMORY[0x24BDD1448], "currentHandler"),
        objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "EQKit::ILayout EQKitLayoutManager::layoutStackLine(const EQKit::Layout::Schemata &)"), CFSTR("EQKitLayoutManager.mm"), 2508, CFSTR("can't layout a stack group without an elementary stack")), (v6 = *((_QWORD *)this + 67)) != 0))
  {
    v7 = v6 + *((_QWORD *)this + 66) - 1;
    v8 = *(_QWORD *)(*((_QWORD *)this + 63) + 8 * (v7 / 0x18));
    EQKit::Layout::Schemata::stackLineSchemata(a2);
    EQKitLayoutElementaryStack::layoutStackLine(v8 + 168 * (v7 % 0x18), (EQKit::ILayout *)v10);
    EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)v10);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v10);
  }
}

void sub_2179286A8(_Unwind_Exception *a1)
{
  EQKit::ILayout *v1;

  EQKit::ILayout::~ILayout(v1);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutStackCarries(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  _BYTE v11[56];

  EQKit::ILayout::ILayout(a3, 0);
  v6 = *((_QWORD *)this + 67);
  if (v6
    || (v10 = (void *)objc_msgSend(MEMORY[0x24BDD1448], "currentHandler"),
        objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "EQKit::ILayout EQKitLayoutManager::layoutStackCarries(const EQKit::Layout::Schemata &)"), CFSTR("EQKitLayoutManager.mm"), 2521, CFSTR("can't layout a stack group without an elementary stack")), (v6 = *((_QWORD *)this + 67)) != 0))
  {
    v7 = v6 + *((_QWORD *)this + 66) - 1;
    v8 = *(_QWORD *)(*((_QWORD *)this + 63) + 8 * (v7 / 0x18));
    v9 = (void *)EQKit::Layout::Schemata::stackCarriesSchemata(a2);
    EQKitLayoutElementaryStack::layoutStackCarries((EQKitLayoutManager **)(v8 + 168 * (v7 % 0x18)), v9, (EQKit::ILayout *)v11);
    EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)v11);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v11);
  }
}

void sub_2179287CC(_Unwind_Exception *a1)
{
  EQKit::ILayout *v1;

  EQKit::ILayout::~ILayout(v1);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutStackCarry(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  _BYTE v11[56];

  EQKit::ILayout::ILayout(a3, 0);
  v6 = *((_QWORD *)this + 67);
  if (v6
    || (v10 = (void *)objc_msgSend(MEMORY[0x24BDD1448], "currentHandler"),
        objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "EQKit::ILayout EQKitLayoutManager::layoutStackCarry(const EQKit::Layout::Schemata &)"), CFSTR("EQKitLayoutManager.mm"), 2534, CFSTR("can't layout a stack group without an elementary stack")), (v6 = *((_QWORD *)this + 67)) != 0))
  {
    v7 = v6 + *((_QWORD *)this + 66) - 1;
    v8 = *(_QWORD *)(*((_QWORD *)this + 63) + 8 * (v7 / 0x18));
    v9 = (void *)EQKit::Layout::Schemata::stackCarrySchemata(a2);
    EQKitLayoutElementaryStack::layoutStackCarry((EQKitLayoutManager **)(v8 + 168 * (v7 % 0x18)), v9, (EQKit::ILayout *)v11);
    EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)v11);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v11);
  }
}

void sub_2179288F0(_Unwind_Exception *a1)
{
  EQKit::ILayout *v1;

  EQKit::ILayout::~ILayout(v1);
  _Unwind_Resume(a1);
}

EQKit::ILayout *EQKitLayoutManager::layoutLongDivision@<X0>(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  void *v5;
  unint64_t v6;
  const __CTFontDescriptor *v7;
  const __CTFont *v8;
  id v9;
  void *v10;
  EQKitHBox *v11;
  uint64_t v12;
  unint64_t v13;
  double v14;
  double v15;
  const CGPath *v16;
  EQKitPathBox *v17;
  double v18;
  double v19;
  EQKitPaddedBox *v20;
  double v21;
  double v22;
  CGRect *v23;
  double Width;
  double v25;
  EQKitPaddedBox *v26;
  id v27;
  void *v28;
  uint64_t v29;
  EQKitVShift *v30;
  _OWORD v32[2];
  double v33;
  id v34[8];
  unint64_t *v35;
  int v36;
  _BYTE v37[72];
  _QWORD v38[7];

  v5 = (void *)EQKit::Layout::Schemata::longDivisionSchemata(a2);
  v6 = EQKitLayoutManager::layoutContext(this);
  v7 = CTFontDescriptorCreateWithNameAndSize(CFSTR("STIXGeneral-Regular"), *(CGFloat *)(v6 + 24));
  v8 = CTFontCreateWithFontDescriptor(v7, *(CGFloat *)(v6 + 24), 0);
  CFRelease(v7);
  if (v8)
  {
    EQKitLayoutManager::layoutBox(this, objc_msgSend(v5, "schemataDivisor"), 0, 0, 0, 0, 0, (EQKit::ILayout *)v38);
    EQKitPath::EQKitPath((EQKitPath *)&v35, v8, 0x27CCu);
    EQKitPath::findStemForEdge(&v35, 2, (uint64_t)v34);
    v9 = v34[6];
    v33 = 0.0;
    v10 = (void *)objc_msgSend(v5, "schemataStack");
    if (v10)
      objc_msgSend(v10, "layoutSchemata");
    else
      memset(v32, 0, sizeof(v32));
    EQKitLayoutManager::layoutStack(this, (const EQKit::Layout::Schemata *)v32, *(double *)&v9, &v33, 2, 1, (EQKit::ILayout *)v34);
    EQKit::Layout::Schemata::~Schemata((id *)v32);
    *(_QWORD *)&v32[0] = 0;
    v12 = *(_QWORD *)(EQKitLayoutManager::layoutContext(this) + 80);
    v13 = EQKitLayoutManager::layoutContext(this);
    v14 = v33;
    objc_msgSend(v34[0], "width");
    v16 = (const CGPath *)(*(uint64_t (**)(uint64_t, unint64_t, _OWORD *, double, double))(*(_QWORD *)v12 + 168))(v12, v13 + 8, v32, v14, v15);
    if (v16)
    {
      v17 = -[EQKitPathBox initWithCGPath:height:cgColor:]([EQKitPathBox alloc], "initWithCGPath:height:cgColor:", v16, *(_QWORD *)(EQKitLayoutManager::layoutContext(this) + 96), *(double *)&v9);
      CGPathRelease(v16);
    }
    else
    {
      v17 = 0;
    }
    -[EQKitPathBox height](v17, "height");
    v19 = v18;
    v20 = [EQKitPaddedBox alloc];
    -[EQKitPathBox height](v17, "height");
    v22 = v21;
    if (v37[32])
      v23 = (CGRect *)v37;
    else
      v23 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)&v35);
    Width = CGRectGetWidth(*v23);
    -[EQKitPathBox depth](v17, "depth");
    v26 = -[EQKitPaddedBox initWithBox:height:width:depth:lspace:voffset:](v20, "initWithBox:height:width:depth:lspace:voffset:", v17, v22, Width, v25, 0.0, v14 - v19);
    v27 = objc_alloc(MEMORY[0x24BDBCEB8]);
    v28 = (void *)objc_msgSend(v27, "initWithObjects:", v38[0], v26, v34[0], 0);
    v11 = -[EQKitCompoundBox initWithChildBoxes:]([EQKitHBox alloc], "initWithChildBoxes:", v28);

    CFRelease(v8);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v34);
    EQKitPath::~EQKitPath((EQKitPath *)&v35);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v38);
  }
  else
  {
    v11 = 0;
  }
  LODWORD(v34[0]) = 0;
  v29 = *((_QWORD *)this + 75);
  v35 = (unint64_t *)EQKitLayoutManager::currentNode(this);
  v36 = 2;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v29, v29 + 152, (uint64_t)&v35, v34);
  v30 = EQKitLayoutManager::baselineAlignBox(this, v11, (int)v34[0]);
  return EQKit::ILayout::ILayout(a3, &v30->super);
}

void sub_217928C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a18);
  EQKitPath::~EQKitPath((EQKitPath *)&a26);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)(v26 - 152));
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutRadical(id *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  unint64_t v6;
  void *v7;
  double v8;
  void *v9;
  __n128 v10;
  void *v11;
  uint64_t v12;
  __n128 v13;
  double v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  unint64_t v22;
  double v23;
  uint64_t v24;
  unint64_t v25;
  const void *v26;
  __n128 v27;
  EQKitPathBox *v28;
  EQKitPathBox *v29;
  EQKitPaddedBox *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  EQKitPaddedBox *v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  id v50;
  EQKitVSpace *v51;
  EQKitVSpace *v52;
  double v53;
  EQKitVBox *v54;
  id v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  uint64_t v67;
  unint64_t v68;
  double v69;
  uint64_t v70;
  unint64_t v71;
  double v72;
  double v73;
  double v74;
  id v75;
  double v76;
  double v77;
  EQKitVSpace *v78;
  double v79;
  double v80;
  double v81;
  double v82;
  void *v83;
  EQKitHSpace *v84;
  double v85;
  double v86;
  double v87;
  double v88;
  EQKitOffsetVBox *v89;
  id v90;
  EQKitHSpace *v91;
  EQKitHBox *v92;
  char v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  double v99;
  _QWORD v100[4];
  __int16 v101;
  _QWORD v102[4];
  __int16 v103;

  v6 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)this);
  v7 = (void *)EQKit::Layout::Schemata::radicalSchemata(a2);
  if ((*(_BYTE *)(v6 + 104) & 1) != 0)
    v8 = *(double *)(v6 + 112);
  else
    v8 = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v6);
  EQKit::ILayout::ILayout((EQKit::ILayout *)v102, 0);
  if (objc_msgSend(v7, "schemataIndex"))
  {
    EQKitLayoutManager::layoutBox((EQKitLayoutManager *)this, objc_msgSend(v7, "schemataIndex"), 2, 0, 0, 0, 0, (EQKit::ILayout *)v100);
    EQKit::ILayout::operator=((uint64_t)v102, (uint64_t)v100);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v100);
  }
  v9 = (void *)v102[0];
  EQKitLayoutManager::layoutBox((EQKitLayoutManager *)this, objc_msgSend(v7, "schemataRadicand"), 0, *(unsigned __int8 *)(v6 + 16), 0, 0, 0, (EQKit::ILayout *)v100);
  v11 = (void *)v100[0];
  v12 = *(_QWORD *)(v6 + 80);
  if ((*(_BYTE *)(v6 + 104) & 1) != 0)
    v10.n128_u64[0] = *(_QWORD *)(v6 + 112);
  else
    v10.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v6);
  v14 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v12 + 40))(v12, 17, v6 + 8, v10);
  v15 = *(_QWORD *)(v6 + 80);
  if ((*(_BYTE *)(v6 + 104) & 1) != 0)
    v13.n128_u64[0] = *(_QWORD *)(v6 + 112);
  else
    v13.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v6);
  v16 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v15 + 40))(v15, 18, v6 + 8, v13);
  objc_msgSend(v11, "layoutVSize");
  v18 = v17;
  objc_msgSend(v11, "width");
  v20 = v19;
  v21 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)objc_msgSend(this[74], "fontManager"));
  v22 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)this);
  v23 = (*(double (**)(uint64_t, uint64_t, unint64_t, double))(*(_QWORD *)v21 + 40))(v21, 22, v22 + 8, v8);
  if (v20 < v23)
    v20 = v23;
  v99 = 0.0;
  v97 = 0u;
  v98 = 0u;
  v94 = *MEMORY[0x24BDBF148];
  v95 = 0;
  v96 = 0;
  v24 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)objc_msgSend(this[74], "fontManager"));
  v25 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)this);
  v26 = (const void *)(*(uint64_t (**)(uint64_t, unint64_t, __int128 *, __int128 *, double, double, double))(*(_QWORD *)v24 + 160))(v24, v25 + 8, &v97, &v94, v16 + v8 + v18 + v8 * 2.0, v20, v8);
  if (v26)
  {
    v28 = [EQKitPathBox alloc];
    v29 = -[EQKitPathBox initWithCGPath:height:cgColor:](v28, "initWithCGPath:height:cgColor:", v26, *(_QWORD *)(EQKitLayoutManager::layoutContext((EQKitLayoutManager *)this) + 96), *((double *)&v94 + 1));
    v30 = [EQKitPaddedBox alloc];
    -[EQKitPathBox height](v29, "height");
    v32 = v31;
    -[EQKitPathBox width](v29, "width");
    v34 = v33;
    v35 = v99;
    -[EQKitPathBox depth](v29, "depth");
    v37 = -[EQKitPaddedBox initWithBox:height:width:depth:lspace:voffset:](v30, "initWithBox:height:width:depth:lspace:voffset:", v29, v32, v34 - v20 - v35, v36, 0.0, 0.0);

    CFRelease(v26);
  }
  else
  {
    v37 = 0;
  }
  v38 = *(_QWORD *)(v6 + 80);
  if ((*(_BYTE *)(v6 + 104) & 1) != 0)
    v27.n128_u64[0] = *(_QWORD *)(v6 + 112);
  else
    v27.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v6);
  v39 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v38 + 40))(v38, 19, v6 + 8, v27);
  -[EQKitBox layoutHeight](v37, "layoutHeight");
  v41 = v40;
  objc_msgSend(v11, "layoutVSize");
  v43 = v41 - v8 - v16;
  if (v43 >= v39)
    v43 = v39;
  if (v42 >= v43)
    v44 = v42;
  else
    v44 = v43;
  -[EQKitBox layoutHeight](v37, "layoutHeight");
  v46 = v45;
  objc_msgSend(v11, "layoutVSize");
  v48 = v47;
  v49 = v46 - v8 - (v16 + v44);
  if (v49 > 0.0)
    v16 = v16 + v49 * 0.5;
  v50 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  v51 = -[EQKitVSpace initWithHeight:depth:]([EQKitVSpace alloc], "initWithHeight:depth:", v8, 0.0);
  objc_msgSend(v50, "addObject:", v51);

  v52 = -[EQKitVSpace initWithHeight:depth:]([EQKitVSpace alloc], "initWithHeight:depth:", v16 + v44 - v48, 0.0);
  objc_msgSend(v50, "addObject:", v52);

  objc_msgSend(v11, "width");
  objc_msgSend(v50, "addObject:", objc_autorelease(-[EQKitCompoundBox initWithChildBoxes:]([EQKitHBox alloc], "initWithChildBoxes:", objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:", objc_autorelease(-[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", v14 + (v20 - v53) * 0.5)), v11, objc_autorelease(-[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:",
              v14 + (v20 - v53) * 0.5)),
          0))));
  v54 = -[EQKitVBox initWithChildBoxes:pivotIndex:]([EQKitVBox alloc], "initWithChildBoxes:pivotIndex:", v50, objc_msgSend(v50, "count") - 1);
  v55 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  -[EQKitPaddedBox width](v37, "width");
  v57 = v56;
  if (v9)
  {
    if (*(_DWORD *)this[5] == 3
      || (v58 = *((double *)&v97 + 1),
          objc_msgSend(v9, "width"),
          v60 = v59,
          v61 = *(double *)&v98,
          objc_msgSend(v9, "width"),
          v62 = v58 + v60 * -0.5,
          v62 >= v61 - v63))
    {
      v64 = *(double *)&v98;
      objc_msgSend(v9, "width");
      v62 = v64 - v65;
    }
    v66 = *(double *)&v97;
    v67 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)objc_msgSend(this[74], "fontManager"));
    v68 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)this);
    v69 = (*(double (**)(uint64_t, uint64_t, unint64_t, double))(*(_QWORD *)v67 + 40))(v67, 20, v68 + 8, v8);
    v70 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)objc_msgSend(this[74], "fontManager"));
    v71 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)this);
    v72 = (*(double (**)(uint64_t, uint64_t, unint64_t, double))(*(_QWORD *)v70 + 40))(v70, 21, v71 + 8, v8);
    objc_msgSend(v9, "layoutDepth");
    if (v69 <= v72 + v73)
    {
      objc_msgSend(v9, "layoutDepth");
      v69 = v72 + v74;
    }
    v75 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
    objc_msgSend(v9, "width");
    if (v57 <= v62 + v76)
    {
      objc_msgSend(v9, "width");
      v57 = v62 + v77;
    }
    if (v62 > 0.0)
      objc_msgSend(v75, "addObject:", -[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", v62));
    objc_msgSend(v75, "addObject:", v9);
    objc_msgSend(v55, "addObject:", -[EQKitCompoundBox initWithChildBoxes:]([EQKitHBox alloc], "initWithChildBoxes:", v75));
    v78 = [EQKitVSpace alloc];
    objc_msgSend(v9, "layoutDepth");
    v80 = v79;
    -[EQKitBox layoutHeight](v37, "layoutHeight");
    objc_msgSend(v55, "addObject:", -[EQKitVSpace initWithHeight:depth:](v78, "initWithHeight:depth:", v66 + v69 - v80 - v81, 0.0));
    v57 = v57 - fmin(v62, 0.0);
  }
  -[EQKitPaddedBox width](v37, "width");
  if (v82 >= v57)
  {
    if (v37)
      objc_msgSend(v55, "addObject:", v37);
  }
  else
  {
    v83 = (void *)MEMORY[0x24BDBCE30];
    v84 = [EQKitHSpace alloc];
    -[EQKitPaddedBox width](v37, "width");
    objc_msgSend(v55, "addObject:", -[EQKitCompoundBox initWithChildBoxes:]([EQKitHBox alloc], "initWithChildBoxes:", objc_msgSend(v83, "arrayWithObjects:", -[EQKitHSpace initWithWidth:](v84, "initWithWidth:", v57 - v85), v37, 0)));
  }
  -[EQKitCompoundBox height](v54, "height");
  v87 = v86;
  -[EQKitPaddedBox height](v37, "height");
  v89 = -[EQKitOffsetVBox initWithChildBoxes:pivotIndex:offset:]([EQKitOffsetVBox alloc], "initWithChildBoxes:pivotIndex:offset:", v55, objc_msgSend(v55, "count") - 1, v87 - v8 - v88);
  v90 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  objc_msgSend(v90, "addObject:", v89);
  objc_msgSend(v90, "addObject:", -[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", -v14));
  objc_msgSend(v90, "addObject:", v54);
  if (v99 != 0.0)
  {
    v91 = [EQKitHSpace alloc];
    objc_msgSend(v90, "addObject:", -[EQKitHSpace initWithWidth:](v91, "initWithWidth:", v99));
  }

  EQKit::ILayout::ILayout(a3, (const EQKit::ILayout *)v100);
  v92 = -[EQKitCompoundBox initWithChildBoxes:]([EQKitHBox alloc], "initWithChildBoxes:", v90);
  EQKit::ILayout::setBox((EQKitBox *)a3, &v92->super.super);

  EQKit::ILayout::removeOffsetOfKind((uint64_t *)a3, 1);
  if (!objc_msgSend(v7, "schemataIndex") || (v103 & 0x1000) != 0)
  {
    if ((v101 & 0x1C00u) <= 0x1000)
      v93 = 0;
    else
      v93 = 3;
  }
  else
  {
    v93 = 0;
  }
  EQKit::ILayout::setVerticalContentClassification((uint64_t)a3, v93);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v100);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v102);
}

void sub_217929508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a24);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a31);
  _Unwind_Resume(a1);
}

EQKit::ILayout *EQKitLayoutManager::layoutNone@<X0>(EQKit::ILayout *a1@<X8>)
{
  return EQKit::ILayout::ILayout(a1, (EQKitBox *)-[EQKitHVSpace initWithWidth:height:depth:]([EQKitHVSpace alloc], "initWithWidth:height:depth:", 0.0, 0.0, 0.0));
}

void EQKitLayoutManager::layoutPadded(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  unint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  EQKitPaddedBox *v24;
  double v25;
  double v26;
  EQKitBox *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  id v44[4];
  unsigned __int16 v45;
  uint64_t v46;
  int v47;

  v5 = objc_msgSend((id)EQKit::Layout::Schemata::paddedSchemata(a2), "schemataNode");
  v6 = EQKitLayoutManager::layoutContext(this);
  EQKitLayoutManager::layoutBox(this, v5, 0, *(unsigned __int8 *)(v6 + 16), 0, 0, 0, (EQKit::ILayout *)v44);
  objc_msgSend(v44[0], "layoutHeight");
  v8 = v7;
  objc_msgSend(v44[0], "layoutDepth");
  v10 = v9;
  objc_msgSend(v44[0], "width");
  v12 = v11;
  v13 = EQKitLayoutManager::layoutContext(this);
  v41 = 1;
  v42 = 0;
  v43 = 0;
  v14 = *((_QWORD *)this + 75);
  v38 = EQKitLayoutManager::currentNode(this);
  LODWORD(v39) = 29;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitPseudoUnitLength>>(v14, v14 + 464, (uint64_t)&v38, (uint64_t)&v41);
  v15 = EQKitPseudoUnitLength::resolveToAbsoluteLength((uint64_t)&v41, v13, v8, v8, v10, v12);
  LODWORD(v38) = 1;
  v39 = 0;
  v40 = 0;
  v16 = *((_QWORD *)this + 75);
  v35 = EQKitLayoutManager::currentNode(this);
  LODWORD(v36) = 30;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitPseudoUnitLength>>(v16, v16 + 464, (uint64_t)&v35, (uint64_t)&v38);
  v17 = EQKitPseudoUnitLength::resolveToAbsoluteLength((uint64_t)&v38, v13, v10, v8, v10, v12);
  LODWORD(v35) = 1;
  v36 = 0;
  v37 = 0;
  v18 = *((_QWORD *)this + 75);
  v32 = EQKitLayoutManager::currentNode(this);
  LODWORD(v33) = 31;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitPseudoUnitLength>>(v18, v18 + 464, (uint64_t)&v32, (uint64_t)&v35);
  v19 = EQKitPseudoUnitLength::resolveToAbsoluteLength((uint64_t)&v35, v13, v12, v8, v10, v12);
  LODWORD(v32) = 1;
  v33 = 0;
  v34 = 0;
  v20 = *((_QWORD *)this + 75);
  v29 = EQKitLayoutManager::currentNode(this);
  LODWORD(v30) = 32;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitPseudoUnitLength>>(v20, v20 + 464, (uint64_t)&v29, (uint64_t)&v32);
  v21 = EQKitPseudoUnitLength::resolveToAbsoluteLength((uint64_t)&v32, v13, 0.0, v8, v10, v12);
  LODWORD(v29) = 1;
  v30 = 0;
  v31 = 0;
  v22 = *((_QWORD *)this + 75);
  v46 = EQKitLayoutManager::currentNode(this);
  v47 = 33;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitPseudoUnitLength>>(v22, v22 + 464, (uint64_t)&v46, (uint64_t)&v29);
  v23 = EQKitPseudoUnitLength::resolveToAbsoluteLength((uint64_t)&v29, v13, 0.0, v8, v10, v12);
  v24 = [EQKitPaddedBox alloc];
  v25 = fmax(v15, 0.0);
  v26 = fmax(v17, 0.0);
  v27 = -[EQKitPaddedBox initWithBox:height:width:depth:lspace:voffset:](v24, "initWithBox:height:width:depth:lspace:voffset:", v44[0], v25, fmax(v19, 0.0), v26, v21, v23);
  EQKit::ILayout::ILayout(a3, (const EQKit::ILayout *)v44);
  EQKit::ILayout::setBox((EQKitBox *)a3, v27);
  if (v25 == v8 && v26 == v10 && v23 == 0.0)
    v28 = (v45 >> 10) & 7;
  else
    LOBYTE(v28) = 0;
  EQKit::ILayout::setVerticalContentClassification((uint64_t)a3, v28);

  EQKit::ILayout::~ILayout((EQKit::ILayout *)v44);
}

void sub_217929908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  EQKit::ILayout *v24;

  EQKit::ILayout::~ILayout(v24);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a24);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutSpace(EQKitLayoutManager *this@<X0>, EQKit::ILayout *a2@<X8>)
{
  uint64_t v5;
  double v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  EQKitHVSpace *v10;
  EQKit::ILayout *v11;
  char v13;

  v5 = EQKitLayoutManager::currentNode(this);
  v6 = EQKitLayoutManager::lengthForAttribute(this, 26, v5, 0.0);
  v7 = EQKitLayoutManager::currentNode(this);
  v8 = EQKitLayoutManager::lengthForAttribute(this, 27, v7, 0.0);
  v9 = EQKitLayoutManager::currentNode(this);
  v10 = -[EQKitHVSpace initWithWidth:height:depth:]([EQKitHVSpace alloc], "initWithWidth:height:depth:", EQKitLayoutManager::lengthForAttribute(this, 28, v9, 0.0), v6, v8);
  v11 = EQKit::ILayout::ILayout(a2, &v10->super);
  EQKit::ILayout::setIsUserSpace((uint64_t)v11, 1);
  if (v8 == 0.0 && v6 == 0.0)
    v13 = 6;
  else
    v13 = 0;
  EQKit::ILayout::setVerticalContentClassification((uint64_t)a2, v13);

}

void sub_217929A48(_Unwind_Exception *a1)
{
  EQKit::ILayout *v1;

  EQKit::ILayout::~ILayout(v1);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutFenced(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  unint64_t v4;
  id v5;
  std::vector<std::string>::pointer end;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  std::string *v12;
  __int128 v13;
  std::vector<std::string>::pointer v14;
  std::vector<std::string>::pointer begin;
  std::string *v16;
  __int128 v17;
  int64x2_t v18;
  std::string *v19;
  std::string *value;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  std::string::size_type size;
  id v26;
  std::string *v27;
  void *v28;
  EQKitMathMLMOperator *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t i;
  unint64_t v35;
  std::string *v36;
  id v37;
  void *v38;
  EQKitMathMLMOperator *v39;
  std::string::size_type v40;
  id v41;
  std::string *v42;
  void *v43;
  EQKitMathMLMOperator *v44;
  EQKit::ILayout *v45;
  id obj;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  void *__p[2];
  std::string::size_type v53;
  std::vector<std::string> v54;
  std::string v55;
  std::string v56;
  std::__split_buffer<std::string> v57;
  _BYTE v58[128];
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  obj = (id)objc_msgSend((id)EQKit::Layout::Schemata::fencedSchemata(a2), "schemataChildren");
  v4 = objc_msgSend(obj, "count");
  v5 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  std::string::basic_string[abi:nn180100]<0>(&v56, "(");
  std::string::basic_string[abi:nn180100]<0>(&v55, ")");
  memset(&v54, 0, sizeof(v54));
  std::string::basic_string[abi:nn180100]<0>(__p, ",");
  end = v54.__end_;
  if (v54.__end_ >= v54.__end_cap_.__value_)
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v54.__end_ - (char *)v54.__begin_) >> 3);
    v9 = v8 + 1;
    if (v8 + 1 > 0xAAAAAAAAAAAAAAALL)
      abort();
    if (0x5555555555555556 * (((char *)v54.__end_cap_.__value_ - (char *)v54.__begin_) >> 3) > v9)
      v9 = 0x5555555555555556 * (((char *)v54.__end_cap_.__value_ - (char *)v54.__begin_) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v54.__end_cap_.__value_ - (char *)v54.__begin_) >> 3) >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    v57.__end_cap_.__value_ = (std::allocator<std::string> *)&v54.__end_cap_;
    if (v10)
      v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v54.__end_cap_, v10);
    else
      v11 = 0;
    v12 = (std::string *)&v11[24 * v8];
    v13 = *(_OWORD *)__p;
    v12->__r_.__value_.__r.__words[2] = v53;
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    __p[1] = 0;
    v53 = 0;
    __p[0] = 0;
    v14 = v54.__end_;
    begin = v54.__begin_;
    if (v54.__end_ == v54.__begin_)
    {
      v18 = vdupq_n_s64((unint64_t)v54.__end_);
      v16 = (std::string *)&v11[24 * v8];
    }
    else
    {
      v16 = (std::string *)&v11[24 * v8];
      do
      {
        v17 = *(_OWORD *)&v14[-1].__r_.__value_.__l.__data_;
        v16[-1].__r_.__value_.__r.__words[2] = v14[-1].__r_.__value_.__r.__words[2];
        *(_OWORD *)&v16[-1].__r_.__value_.__l.__data_ = v17;
        --v16;
        v14[-1].__r_.__value_.__l.__size_ = 0;
        v14[-1].__r_.__value_.__r.__words[2] = 0;
        v14[-1].__r_.__value_.__r.__words[0] = 0;
        --v14;
      }
      while (v14 != begin);
      v18 = *(int64x2_t *)&v54.__begin_;
    }
    v19 = v12 + 1;
    v54.__begin_ = v16;
    v54.__end_ = v12 + 1;
    *(int64x2_t *)&v57.__begin_ = v18;
    value = v54.__end_cap_.__value_;
    v54.__end_cap_.__value_ = (std::string *)&v11[24 * v10];
    v57.__end_cap_.__value_ = value;
    v57.__first_ = (std::__split_buffer<std::string>::pointer)v18.i64[0];
    std::__split_buffer<std::string>::~__split_buffer(&v57);
    v54.__end_ = v19;
    if (SHIBYTE(v53) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v7 = *(_OWORD *)__p;
    v54.__end_->__r_.__value_.__r.__words[2] = v53;
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v7;
    v54.__end_ = end + 1;
  }
  v21 = *((_QWORD *)this + 75);
  v57.__first_ = (std::__split_buffer<std::string>::pointer)EQKitLayoutManager::currentNode(this);
  LODWORD(v57.__begin_) = 18;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::string,std::less<EQKitTypes::Attributes::Enum>,std::char_traits<char><std::pair<EQKitTypes::Attributes::Enum const>>>>(v21, v21 + 80, (uint64_t)&v57, &v56);
  v22 = *((_QWORD *)this + 75);
  v57.__first_ = (std::__split_buffer<std::string>::pointer)EQKitLayoutManager::currentNode(this);
  LODWORD(v57.__begin_) = 19;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::string,std::less<EQKitTypes::Attributes::Enum>,std::char_traits<char><std::pair<EQKitTypes::Attributes::Enum const>>>>(v22, v22 + 80, (uint64_t)&v57, &v55);
  v23 = *((_QWORD *)this + 75);
  v57.__first_ = (std::__split_buffer<std::string>::pointer)EQKitLayoutManager::currentNode(this);
  LODWORD(v57.__begin_) = 20;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<std::string,std::char_traits<char><std::allocator<char>>>,std::less<EQKitTypes::Attributes::Enum>,std::char_traits<char><std::pair<EQKitTypes::Attributes::Enum const,std::char_traits<char><std::allocator<char>>>>>>(v23, v23 + 104, (uint64_t)&v57, &v54);
  v45 = a3;
  v24 = *(_OWORD *)&v54.__begin_;
  size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
  if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v56.__r_.__value_.__l.__size_;
  if (size)
  {
    v26 = objc_alloc(MEMORY[0x24BDD17C8]);
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = &v56;
    else
      v27 = (std::string *)v56.__r_.__value_.__r.__words[0];
    v28 = (void *)objc_msgSend(v26, "initWithUTF8String:", v27);
    v29 = -[EQKitMathMLMOperator initWithString:environment:]([EQKitMathMLMOperator alloc], "initWithString:environment:", v28, *((_QWORD *)this + 74));
    -[EQKitMathMLNode setParent:](v29, "setParent:", EQKitLayoutManager::currentNode(this));
    objc_msgSend(v5, "addObject:", v29);

  }
  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  v30 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v48, v58, 16);
  if (v30)
  {
    v31 = 0;
    v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v24 + 1) - v24) >> 3);
    v33 = *(_QWORD *)v49;
    do
    {
      for (i = 0; i != v30; ++i)
      {
        if (*(_QWORD *)v49 != v33)
          objc_enumerationMutation(obj);
        objc_msgSend(v5, "addObject:", *(_QWORD *)(*((_QWORD *)&v48 + 1) + 8 * i));
        if (v31 + i + 1 < v4 && v54.__end_ != v54.__begin_)
        {
          v35 = v31 + i;
          if (v31 + i >= v32)
            v35 = v32 - 1;
          v36 = &v54.__begin_[v35];
          if (SHIBYTE(v36->__r_.__value_.__r.__words[2]) < 0)
          {
            if (!v36->__r_.__value_.__l.__size_)
              continue;
          }
          else if (!*((_BYTE *)&v36->__r_.__value_.__s + 23))
          {
            continue;
          }
          v37 = objc_alloc(MEMORY[0x24BDD17C8]);
          if (SHIBYTE(v36->__r_.__value_.__r.__words[2]) < 0)
            v36 = (std::string *)v36->__r_.__value_.__r.__words[0];
          v38 = (void *)objc_msgSend(v37, "initWithUTF8String:", v36);
          v39 = -[EQKitMathMLMOperator initWithString:environment:]([EQKitMathMLMOperator alloc], "initWithString:environment:", v38, *((_QWORD *)this + 74));
          -[EQKitMathMLNode setParent:](v39, "setParent:", EQKitLayoutManager::currentNode(this));
          objc_msgSend(v5, "addObject:", v39);

        }
      }
      v30 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v48, v58, 16);
      v31 += i;
    }
    while (v30);
  }
  v40 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v40 = v55.__r_.__value_.__l.__size_;
  if (v40)
  {
    v41 = objc_alloc(MEMORY[0x24BDD17C8]);
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v42 = &v55;
    else
      v42 = (std::string *)v55.__r_.__value_.__r.__words[0];
    v43 = (void *)objc_msgSend(v41, "initWithUTF8String:", v42);
    v44 = -[EQKitMathMLMOperator initWithString:environment:]([EQKitMathMLMOperator alloc], "initWithString:environment:", v43, *((_QWORD *)this + 74));
    -[EQKitMathMLNode setParent:](v44, "setParent:", EQKitLayoutManager::currentNode(this));
    objc_msgSend(v5, "addObject:", v44);

  }
  EQKit::Layout::Schemata::row((EQKit::Layout::Schemata *)v5, (uint64_t)&v57);

  EQKitLayoutManager::layoutRow(this, (const EQKit::Layout::Schemata *)&v57, v45);
  EQKit::Layout::Schemata::~Schemata((id *)&v57.__first_);
  v57.__first_ = (std::__split_buffer<std::string>::pointer)&v54;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v57);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
}

void sub_217929FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43)
{
  if (a27 < 0)
    operator delete(__p);
  __p = &a28;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);
  if (a36 < 0)
    operator delete(a31);
  if (a42 < 0)
    operator delete(a37);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutEnclose(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  CGPath *Mutable;
  int *v9;
  int *v10;
  CGPath *PathForNotation;
  EQKitPathBox *v12;
  double v13;
  double v14;
  uint64_t v15;
  unint64_t v16;
  __n128 v17;
  unint64_t v18;
  uint64_t v19;
  EQKitPathBox *v20;
  EQKitOverlayBox *v21;
  EQKitBox *v22;
  void *__p;
  int *v24;
  uint64_t v25;
  void *v26[7];
  uint64_t v27;
  int v28;

  v5 = objc_msgSend((id)EQKit::Layout::Schemata::encloseSchemata(a2), "schemataRow");
  v6 = EQKitLayoutManager::layoutContext(this);
  EQKitLayoutManager::layoutBox(this, v5, 0, *(unsigned __int8 *)(v6 + 16), 0, 0, 0, (EQKit::ILayout *)v26);
  __p = 0;
  v24 = 0;
  v25 = 0;
  v7 = *((_QWORD *)this + 75);
  v27 = EQKitLayoutManager::currentNode(this);
  v28 = 47;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum>,std::less<EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum<std::pair<EQKitTypes::Attributes::Enum const>>>>(v7, v7 + 224, (uint64_t)&v27, (char *)&__p);
  Mutable = CGPathCreateMutable();
  v9 = (int *)__p;
  v10 = v24;
  while (v9 != v10)
  {
    PathForNotation = EQKitLayoutManager::createPathForNotation(this, v26[0], *v9);
    CGPathAddPath(Mutable, 0, PathForNotation);
    CGPathRelease(PathForNotation);
    ++v9;
  }
  v12 = [EQKitPathBox alloc];
  objc_msgSend(v26[0], "height");
  v14 = v13;
  v15 = *(_QWORD *)(EQKitLayoutManager::layoutContext(this) + 96);
  v16 = EQKitLayoutManager::layoutContext(this);
  v18 = v16;
  v19 = *(_QWORD *)(v16 + 80);
  if ((*(_BYTE *)(v16 + 104) & 1) != 0)
    v17.n128_u64[0] = *(_QWORD *)(v16 + 112);
  else
    v17.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v16);
  v20 = -[EQKitPathBox initWithCGPath:height:cgColor:drawingMode:lineWidth:](v12, "initWithCGPath:height:cgColor:drawingMode:lineWidth:", Mutable, v15, 2, v14, (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v19 + 40))(v19, 23, v18 + 8, v17));
  v21 = [EQKitOverlayBox alloc];
  v22 = -[EQKitOverlayBox initWithBox:overlayBox:](v21, "initWithBox:overlayBox:", v26[0], v20);
  EQKit::ILayout::ILayout(a3, (const EQKit::ILayout *)v26);
  EQKit::ILayout::setBox((EQKitBox *)a3, v22);

  CGPathRelease(Mutable);
  if (__p)
  {
    v24 = (int *)__p;
    operator delete(__p);
  }
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v26);
}

void sub_21792A24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  if (__p)
    operator delete(__p);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a12);
  _Unwind_Resume(a1);
}

void EQKitLayoutManager::layoutAlignGroup(EQKitLayoutManager *this, const EQKit::Layout::Schemata *a2)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  int v7;

  if (*((_QWORD *)this + 46))
  {
    v5 = 0;
    v3 = *((_QWORD *)this + 75);
    v6 = EQKitLayoutManager::currentNode(this);
    v7 = 37;
    EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v3, v3 + 176, (uint64_t)&v6, &v5);
    v4 = *((_QWORD *)this + 46) + *((_QWORD *)this + 45) - 1;
    EQKitLayoutRow::beginAlignmentGroup((_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 42) + 8 * (v4 / 0x19)) + 160 * (v4 % 0x19)), v5);
  }
}

void EQKitLayoutManager::layoutAlignMark(EQKit::ILayout *a1@<X8>)
{
  EQKitHSpace *v4;
  id v5[2];

  v4 = objc_alloc_init(EQKitHSpace);
  EQKit::ILayout::ILayout(a1, &v4->super);
  EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)v5, &v4->super, 0.0);
  EQKit::ILayout::setOffsetOfKind((uint64_t)a1, 3, (uint64_t)v5);
  EQKit::ILayoutOffset::~ILayoutOffset(v5);

}

void sub_21792A3A0(_Unwind_Exception *a1)
{
  EQKit::ILayout *v1;

  EQKit::ILayout::~ILayout(v1);
  _Unwind_Resume(a1);
}

uint64_t *EQKitLayoutManager::isOperatorSymmetric(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t *result;
  uint64_t v6;
  unsigned __int16 v7;
  int v8;
  int v9;
  void *v10;
  int v11;

  v9 = 0;
  v4 = *(_QWORD *)(a1 + 600);
  v10 = a2;
  v11 = 14;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v4, v4 + 8, (uint64_t)&v10, &v9);
  if (v9 == 1)
    return 0;
  if (v9 == 2)
    return (uint64_t *)1;
  v6 = objc_msgSend(*(id *)(a1 + 592), "operatorDictionary");
  v7 = objc_msgSend(a2, "operatorId");
  v8 = EQKitLayoutManager::operatorForm(a1, a2);
  result = EQKit::Config::Operator::Dictionary::lookup(v6, v7, v8);
  if (result)
    return (uint64_t *)((*((unsigned __int8 *)result + 48) >> 1) & 1);
  return result;
}

double EQKitLayoutManager::lengthForCharacterProperty(id *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  EQKitLength *v14;
  unint64_t v15;
  std::string __p;

  v8 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)objc_msgSend(a1[74], "fontManager"));
  v9 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v8 + 64))(v8, a3, v9 + 8);
  if (v10)
  {
    v11 = v10;
    v12 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)objc_msgSend(a1[74], "fontManager"));
    if (*(char *)(v11 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v11, *(_QWORD *)(v11 + 8));
    }
    else
    {
      v13 = *(_OWORD *)v11;
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v11 + 16);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v13;
    }
    v14 = (EQKitLength *)(*(uint64_t (**)(uint64_t, uint64_t, std::string *, uint64_t))(*(_QWORD *)v12 + 24))(v12, a2, &__p, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v14)
    {
      v15 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1);
      return EQKitLength::resolveToAbsoluteWithSize(v14, *(double *)(v15 + 24));
    }
  }
  return a4;
}

void sub_21792A588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t EQKitLayoutManager::decimalPointOffsetInStringBox(EQKitLayoutManager *this, EQKitStringBox *a2)
{
  void *v3;
  uint64_t v4;
  __int16 v6;

  v6 = EQKitLayoutManager::decimalPointCharacter(this);
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithCharacters:length:", &v6, 1);
  v4 = -[NSString rangeOfString:](-[NSAttributedString string](-[EQKitStringBox attributedString](a2, "attributedString"), "string"), "rangeOfString:", v3);
  if (v4 == 0x7FFFFFFFFFFFFFFFLL)
    v4 = -[NSAttributedString length](-[EQKitStringBox attributedString](a2, "attributedString"), "length");

  return -[EQKitStringBox positionOfCharacterAtIndex:](a2, "positionOfCharacterAtIndex:", v4);
}

void *EQKitLayoutManager::layoutNumberDigits(EQKitLayoutManager *this, const EQKit::Layout::Schemata *a2, unint64_t *a3)
{
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD v17[9];
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;

  v6 = (void *)objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v7 = EQKitLayoutManager::layoutContext(this);
  v8 = *(_QWORD *)(v7 + 80);
  v9 = objc_msgSend((id)EQKit::Layout::Schemata::tokenSchemata(a2), "schemataTokenString");
  v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v8 + 72))(v8, v9, v7 + 8);
  v22 = EQKitLayoutManager::decimalPointCharacter(this);
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithCharacters:length:", &v22, 1);
  v18 = 0;
  v19 = &v18;
  v20 = 0x2020000000;
  v21 = 0x7FFFFFFFFFFFFFFFLL;
  v12 = (void *)objc_msgSend(v10, "string");
  v13 = objc_msgSend(v10, "length");
  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 3221225472;
  v17[2] = ___ZN18EQKitLayoutManager18layoutNumberDigitsERKN5EQKit6Layout8SchemataERm_block_invoke;
  v17[3] = &unk_24D828AC8;
  v17[4] = v10;
  v17[5] = v11;
  v17[6] = v6;
  v17[7] = &v18;
  v17[8] = v7;
  objc_msgSend(v12, "enumerateSubstringsInRange:options:usingBlock:", 0, v13, 2, v17);

  v14 = objc_msgSend(v6, "count");
  *a3 = v14;
  v15 = v19[3];
  if (v15 == 0x7FFFFFFFFFFFFFFFLL)
    v15 = v14;
  *a3 = v15;

  _Block_object_dispose(&v18, 8);
  return v6;
}

void sub_21792A7A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t EQKitLayoutManager::decimalPointCharacter(EQKitLayoutManager *this)
{
  uint64_t v1;
  unsigned __int16 v3;
  uint64_t v4;
  int v5;

  v3 = 46;
  v1 = *((_QWORD *)this + 75);
  v4 = EQKitLayoutManager::currentNode(this);
  v5 = 35;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,unsigned short>>(v1, v1 + 488, (uint64_t)&v4, &v3);
  return v3;
}

void ___ZN18EQKitLayoutManager18layoutNumberDigitsERKN5EQKit6Layout8SchemataERm_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v4;
  EQKitStringBox *v5;

  v4 = objc_msgSend(*(id *)(a1 + 32), "attributedSubstringFromRange:");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) == 0x7FFFFFFFFFFFFFFFLL
    && objc_msgSend(a2, "isEqualToString:", *(_QWORD *)(a1 + 40)))
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend(*(id *)(a1 + 48), "count");
  }
  v5 = -[EQKitStringBox initWithAttributedString:cgColor:]([EQKitStringBox alloc], "initWithAttributedString:cgColor:", v4, *(_QWORD *)(*(_QWORD *)(a1 + 64) + 96));
  objc_msgSend(*(id *)(a1 + 48), "addObject:", v5);

}

uint64_t *EQKitLayoutManager::isEmbellishedOperatorWithMovableLimts(uint64_t a1, void *a2)
{
  uint64_t *result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 v8;
  int v9;
  int v10;
  void *v11;
  int v12;

  result = (uint64_t *)objc_msgSend(a2, "isEmbellishedOperator");
  if ((_DWORD)result)
  {
    v5 = (void *)objc_msgSend(a2, "operatorCore");
    v10 = 0;
    v6 = *(_QWORD *)(a1 + 600);
    v11 = v5;
    v12 = 45;
    EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v6, v6 + 8, (uint64_t)&v11, &v10);
    if (v10)
    {
      return (uint64_t *)(v10 == 2);
    }
    else
    {
      v7 = objc_msgSend(*(id *)(a1 + 592), "operatorDictionary");
      v8 = objc_msgSend(v5, "operatorId");
      v9 = EQKitLayoutManager::operatorForm(a1, v5);
      result = EQKit::Config::Operator::Dictionary::lookup(v7, v8, v9);
      if (result)
        return (uint64_t *)((*((unsigned __int8 *)result + 48) >> 5) & 1);
    }
  }
  return result;
}

uint64_t *EQKitLayoutManager::isEmbellishedOperatorWithAccent(uint64_t a1, void *a2)
{
  uint64_t *result;
  void *v5;
  uint64_t v6;
  unsigned __int16 v7;
  int v8;

  result = (uint64_t *)objc_msgSend(a2, "isEmbellishedOperator");
  if ((_DWORD)result)
  {
    v5 = (void *)objc_msgSend(a2, "operatorCore");
    v6 = objc_msgSend(*(id *)(a1 + 592), "operatorDictionary");
    v7 = objc_msgSend(v5, "operatorId");
    v8 = EQKitLayoutManager::operatorForm(a1, v5);
    result = EQKit::Config::Operator::Dictionary::lookup(v6, v7, v8);
    if (result)
      return (uint64_t *)((*((unsigned __int8 *)result + 48) >> 3) & 1);
  }
  return result;
}

uint64_t *EQKitLayoutManager::isEmbellishedOperatorWithStretch(uint64_t a1, void *a2)
{
  uint64_t *result;

  result = (uint64_t *)objc_msgSend(a2, "isEmbellishedOperator");
  if ((_DWORD)result)
    return EQKitLayoutManager::isOperatorStretchy(a1, (void *)objc_msgSend(a2, "operatorCore"));
  return result;
}

uint64_t *EQKitLayoutManager::isOperatorStretchy(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t *result;
  uint64_t v6;
  unsigned __int16 v7;
  int v8;
  int v9;
  void *v10;
  int v11;

  v9 = 0;
  v4 = *(_QWORD *)(a1 + 600);
  v10 = a2;
  v11 = 16;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v4, v4 + 8, (uint64_t)&v10, &v9);
  if (v9 == 1)
    return 0;
  if (v9 == 2)
    return (uint64_t *)1;
  v6 = objc_msgSend(*(id *)(a1 + 592), "operatorDictionary");
  v7 = objc_msgSend(a2, "operatorId");
  v8 = EQKitLayoutManager::operatorForm(a1, a2);
  result = EQKit::Config::Operator::Dictionary::lookup(v6, v7, v8);
  if (result)
    return (uint64_t *)(result[6] & 1);
  return result;
}

uint64_t EQKitLayoutManager::doesOperatorRequireVerticalStretch(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  id v7[4];

  v4 = *(_QWORD *)(a1 + 488);
  if (v4
    && *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 456) + 8 * ((v4 + *(_QWORD *)(a1 + 480) - 1) / 0x66uLL))
                + 40 * ((v4 + *(_QWORD *)(a1 + 480) - 1) % 0x66uLL)) == a2
    || !EQKitLayoutManager::isOperatorStretchy(a1, a2))
  {
    return 0;
  }
  EQKit::Layout::Schemata::Schemata((uint64_t)v7);
  v5 = EQKitLayoutManager::schemataForOperatorWhenStretchedVertically((id *)a1, a2, (uint64_t)v7);
  EQKit::Layout::Schemata::~Schemata(v7);
  return v5;
}

void sub_21792ABB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  EQKit::Layout::Schemata::~Schemata(&a9);
  _Unwind_Resume(a1);
}

uint64_t *EQKitLayoutManager::isOperatorLargeOp(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t *result;
  uint64_t v6;
  unsigned __int16 v7;
  int v8;
  int v9;
  void *v10;
  int v11;

  v9 = 0;
  v4 = *(_QWORD *)(a1 + 600);
  v10 = a2;
  v11 = 39;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v4, v4 + 8, (uint64_t)&v10, &v9);
  if (v9 == 1)
    return 0;
  if (v9 == 2)
    return (uint64_t *)1;
  v6 = objc_msgSend(*(id *)(a1 + 592), "operatorDictionary");
  v7 = objc_msgSend(a2, "operatorId");
  v8 = EQKitLayoutManager::operatorForm(a1, a2);
  result = EQKit::Config::Operator::Dictionary::lookup(v6, v7, v8);
  if (result)
    return (uint64_t *)((*((unsigned __int8 *)result + 48) >> 2) & 1);
  return result;
}

void EQKitLayoutManager::pushImplicitFormIfRequired(_QWORD *a1, void *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (EQKitLayoutManager::isEmbellishedOperatorRoot(a1, a2))
  {
    v6 = objc_msgSend(a3, "count");
    if (v6)
    {
      v7 = v6;
      v8 = objc_msgSend(a3, "objectAtIndex:", 0);
      v6 = objc_msgSend(a3, "objectAtIndex:", v7 - 1);
    }
    else
    {
      v8 = 0;
    }
    if ((void *)v6 == a2)
      v9 = (2 * (v8 == (_QWORD)a2)) | 8;
    else
      v9 = 2 * (v8 == (_QWORD)a2);
    if (!v9)
      v9 = 4;
    v10 = v9;
    std::deque<unsigned long>::push_back(a1 + 23, &v10);
  }
}

uint64_t EQKitLayoutManager::popImplicitFormIfRequired(_QWORD *a1, void *a2)
{
  uint64_t result;
  uint64_t v4;

  result = EQKitLayoutManager::isEmbellishedOperatorRoot(a1, a2);
  if ((_DWORD)result)
  {
    v4 = a1[28];
    if (v4)
    {
      a1[28] = v4 - 1;
      return std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::__maybe_remove_back_spare[abi:nn180100](a1 + 23, 1);
    }
  }
  return result;
}

void EQKitLayoutManager::resolveRow(EQKitLayoutManager *this, NSArray *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  EQKitLayoutRow *v7;
  unint64_t v8;
  double v9;
  void *v10;
  unint64_t i;
  void *v12;
  void *v13;
  void *v14;
  unsigned int v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  unint64_t v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  double v31;
  CGFloat v32;
  double MinY;
  double MaxY;
  double v35;
  uint64_t v36;
  unint64_t v37;
  double v38;
  double v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  CGFloat v44;
  double v45;
  CGFloat v46;
  double v47;
  CGFloat v48;
  double v49;
  CGFloat v50;
  double v51;
  double v52;
  double v53;
  void *v54;
  void *v55;
  void *v56;
  NSArray *v57;
  void *v58;
  void **v59;
  int v60;
  _QWORD v61[5];
  int v62;
  __int128 v63;
  _QWORD v64[5];
  int v65;
  __int128 v66;
  double v67;
  double v68;
  _QWORD v69[4];
  CGRect v70;
  CGRect v71;
  CGRect v72;
  CGRect v73;

  v57 = a2;
  v3 = *((_QWORD *)this + 46);
  if (v3
    || (v54 = (void *)objc_msgSend(MEMORY[0x24BDD1448], "currentHandler", a2),
        objc_msgSend(v54, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void EQKitLayoutManager::resolveRow(NSArray *)"), CFSTR("EQKitLayoutManager.mm"), 2957, CFSTR("invalid state")), (v3 = *((_QWORD *)this + 46)) != 0))
  {
    v4 = v3 + *((_QWORD *)this + 45) - 1;
    v5 = *(_QWORD *)(*((_QWORD *)this + 42) + 8 * (v4 / 0x19));
    v6 = v4 % 0x19;
    v7 = (EQKitLayoutRow *)(v5 + 160 * (v4 % 0x19));
    if (!*((_QWORD *)v7 + 8)
      || (v55 = (void *)objc_msgSend(MEMORY[0x24BDD1448], "currentHandler"),
          objc_msgSend(v55, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void EQKitLayoutManager::resolveRow(NSArray *)"), CFSTR("EQKitLayoutManager.mm"), 2961, CFSTR("invalid state")), !*((_QWORD *)v7 + 8)))
    {
      memset(v69, 0, 24);
      std::vector<EQKit::ILayout>::__init_with_size[abi:nn180100]<EQKit::ILayout*,EQKit::ILayout*>((EQKit::ILayout *)v69, *(_QWORD *)(v5 + 160 * v6 + 8), *(_QWORD *)(v5 + 160 * v6 + 16), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v5 + 160 * v6 + 16) - *(_QWORD *)(v5 + 160 * v6 + 8)) >> 3));
      v68 = 0.0;
      v67 = 0.0;
      EQKitLayoutRow::determineVSize(v7, &v68, &v67);
      v8 = EQKitLayoutManager::layoutContext(this);
      if ((*(_BYTE *)(v8 + 104) & 2) != 0)
        v9 = *(double *)(v8 + 120);
      else
        v9 = EQKitLayoutContext::pComputeMathAxis((EQKitLayoutContext *)v8);
      v10 = *(void **)(v5 + 160 * v6 + 56);
      if (!v10)
      {
        v56 = (void *)objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
        objc_msgSend(v56, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void EQKitLayoutManager::resolveRow(NSArray *)"), CFSTR("EQKitLayoutManager.mm"), 2974, CFSTR("invalid state; there should be something to resolve"));
      }
      for (i = objc_msgSend(v10, "firstIndex", v57);
            i != 0x7FFFFFFFFFFFFFFFLL;
            i = objc_msgSend(v10, "indexGreaterThanIndex:", i))
      {
        v12 = EQKitLayoutRow::childNodeAtIndex((id *)v7, i);
        v13 = v12;
        if (v12)
        {
          v14 = (void *)objc_msgSend(v12, "operatorCore");
          v15 = EQKitLayoutManager::isOperatorSymmetric((uint64_t)this, v14);
          v16 = v68;
          if (v15)
          {
            v17 = v68 - v9;
            if (v68 - v9 <= v9 + v67)
              v17 = v9 + v67;
            v16 = v9 + v17;
            v18 = v17 - v9;
          }
          else
          {
            v18 = v67;
          }
          v19 = objc_msgSend(v14, "operatorUnicharOrNul");
          LODWORD(v66) = 1;
          *((_QWORD *)&v66 + 1) = 0;
          v20 = *((_QWORD *)this + 75);
          v59 = (void **)v14;
          v60 = 41;
          if (EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitLength>>(v20, v20 + 32, (uint64_t)&v59, &v66))
          {
            v21 = EQKitLayoutManager::layoutContext(this);
            v64[0] = MEMORY[0x24BDAC760];
            v64[1] = 3221225472;
            v64[2] = ___ZN18EQKitLayoutManager10resolveRowEP7NSArray_block_invoke;
            v64[3] = &__block_descriptor_44_e5_d8__0l;
            v64[4] = this;
            v65 = v19;
            v22 = EQKitLength::resolveToAbsoluteWithUnitProviderAndDefault((double *)&v66, v21, (uint64_t)v64);
            v23 = v16 + v18;
            if (v22 < v16 + v18)
            {
              if (v15)
              {
                v16 = v9 + v22 * 0.5;
                v18 = v22 * 0.5 - v9;
              }
              else if (v23 == 0.0)
              {
                if ((_DWORD)v19)
                {
                  v24 = *(_QWORD *)(EQKitLayoutManager::layoutContext(this) + 80);
                  v25 = EQKitLayoutManager::layoutContext(this);
                  v26 = (*(double (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v24 + 136))(v24, v19, v25 + 8);
                  v28 = v27;
                  v30 = v29;
                  v32 = v31;
                }
                else
                {
                  v30 = 1.0;
                  v26 = 0.0;
                  v28 = 0.0;
                  v32 = 1.0;
                }
                v70.origin.x = v26;
                v70.origin.y = v28;
                v70.size.width = v30;
                v70.size.height = v32;
                MinY = CGRectGetMinY(v70);
                v71.origin.x = v26;
                v71.origin.y = v28;
                v71.size.width = v30;
                v71.size.height = v32;
                MaxY = CGRectGetMaxY(v71);
                v35 = MaxY - MinY;
                if (MaxY - MinY == 0.0)
                {
                  v18 = v22 * 0.5;
                  v16 = v22 * 0.5;
                }
                else
                {
                  v16 = v22 * -MinY / v35;
                  v18 = v22 * MaxY / v35;
                }
              }
              else
              {
                v16 = v16 * v22 / v23;
                v18 = v18 * v22 / v23;
              }
            }
          }
          LODWORD(v63) = 1;
          *((_QWORD *)&v63 + 1) = 0;
          v36 = *((_QWORD *)this + 75);
          v59 = (void **)v14;
          v60 = 40;
          if (!EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitLength>>(v36, v36 + 32, (uint64_t)&v59, &v63))goto LABEL_32;
          v37 = EQKitLayoutManager::layoutContext(this);
          v61[0] = MEMORY[0x24BDAC760];
          v61[1] = 3221225472;
          v61[2] = ___ZN18EQKitLayoutManager10resolveRowEP7NSArray_block_invoke_2;
          v61[3] = &__block_descriptor_44_e5_d8__0l;
          v61[4] = this;
          v62 = v19;
          v38 = EQKitLength::resolveToAbsoluteWithUnitProviderAndDefault((double *)&v63, v37, (uint64_t)v61);
          v39 = v18 + v16;
          if (v38 > v18 + v16)
          {
            if (v15)
            {
              v16 = v9 + v38 * 0.5;
              v18 = v38 * 0.5 - v9;
              v40 = 1;
            }
            else if (v39 == 0.0)
            {
              if ((_DWORD)v19)
              {
                v42 = *(_QWORD *)(EQKitLayoutManager::layoutContext(this) + 80);
                v43 = EQKitLayoutManager::layoutContext(this);
                v44 = (*(double (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v42 + 136))(v42, v19, v43 + 8);
                v46 = v45;
                v48 = v47;
                v50 = v49;
              }
              else
              {
                v48 = 1.0;
                v44 = 0.0;
                v46 = 0.0;
                v50 = 1.0;
              }
              v72.origin.x = v44;
              v72.origin.y = v46;
              v72.size.width = v48;
              v72.size.height = v50;
              v51 = CGRectGetMinY(v72);
              v73.origin.x = v44;
              v73.origin.y = v46;
              v73.size.width = v48;
              v73.size.height = v50;
              v52 = CGRectGetMaxY(v73);
              v53 = v52 - v51;
              if (v52 - v51 == 0.0)
              {
                v18 = v38 * 0.5;
                v40 = 1;
                v16 = v38 * 0.5;
              }
              else
              {
                v16 = v38 * -v51 / v53;
                v40 = 1;
                v18 = v38 * v52 / v53;
              }
            }
            else
            {
              v16 = v16 * v38 / v39;
              v40 = 1;
              v18 = v18 * v38 / v39;
            }
          }
          else
          {
LABEL_32:
            v40 = 0;
          }
          EQKitLayoutManager::pushImplicitFormIfRequired(this, v13, v58);
          EQKitLayoutStretchedOperator::EQKitLayoutStretchedOperator((uint64_t)&v59, (uint64_t)v14, 2, v16, v18, 0.0);
          std::deque<EQKitLayoutStretchedOperator>::push_back((_QWORD *)this + 56, (uint64_t)&v59);
          v41 = EQKitLayoutManager::layoutContext(this);
          EQKitLayoutManager::layoutBox(this, (uint64_t)v13, 0, *(unsigned __int8 *)(v41 + 16), 0, 0, 0, (EQKit::ILayout *)&v59);
          if (v40)
            EQKit::ILayout::setVerticalContentClassification((uint64_t)&v59, 0);
          EQKit::ILayout::operator=(v69[0] + 56 * i, (uint64_t)&v59);
          --*((_QWORD *)this + 61);
          std::deque<EQKitLayoutStretchedOperator>::__maybe_remove_back_spare[abi:nn180100]((_QWORD *)this + 56, 1);
          EQKitLayoutManager::popImplicitFormIfRequired(this, v13);
          EQKit::ILayout::~ILayout((EQKit::ILayout *)&v59);
        }
      }
      EQKitLayoutRow::resolveLayouts(v7, v69);
      v59 = (void **)v69;
      std::vector<EQKit::ILayout>::__destroy_vector::operator()[abi:nn180100](&v59);
    }
  }
}

void sub_21792B3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void **a31)
{
  uint64_t v31;

  a31 = (void **)(v31 - 176);
  std::vector<EQKit::ILayout>::__destroy_vector::operator()[abi:nn180100](&a31);
  _Unwind_Resume(a1);
}

void sub_21792B454(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)va);
  JUMPOUT(0x21792B43CLL);
}

uint64_t EQKitLayoutManager::lengthForMetric(id *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __n128 v7;

  v4 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)objc_msgSend(a1[74], "fontManager"));
  v5 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1);
  v6 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1);
  if ((*(_BYTE *)(v6 + 104) & 1) != 0)
    v7.n128_u64[0] = *(_QWORD *)(v6 + 112);
  else
    v7.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v4 + 40))(v4, a2, v5 + 8, v7);
}

void EQKitLayoutManager::layoutSubsuperscript(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, EQKit::ILayout *a5@<X8>)
{
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  double v15;
  _BOOL4 v16;
  __n128 v17;
  void *v18;
  id v19;
  uint64_t v20;
  id v21;
  double v22;
  double v23;
  double v24;
  __n128 v25;
  double v26;
  double v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  double v32;
  uint64_t v33;
  double v34;
  double v35;
  double v36;
  __n128 v37;
  _BOOL4 v38;
  BOOL v39;
  int v40;
  uint64_t v41;
  double v42;
  double v43;
  double v44;
  __n128 v45;
  double v46;
  double v47;
  uint64_t v48;
  double v49;
  double v50;
  double v51;
  double v52;
  BOOL v53;
  unsigned int v54;
  unsigned __int8 v55;
  int v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  double v61;
  unsigned __int8 v62;
  int v63;
  uint64_t v64;
  double v65;
  double v66;
  int v67;
  uint64_t v68;
  unsigned __int8 v69;
  int v70;
  uint64_t v71;
  double v72;
  double v73;
  int v74;
  uint64_t v75;
  double v76;
  double v77;
  double v78;
  double *v79;
  int v80;
  double v81;
  double v82;
  double v83;
  _QWORD *v84;
  unsigned int v85;
  double v86;
  double v87;
  id v88;
  char v89;
  double v90;
  double v91;
  double v92;
  int v93;
  double v94;
  double v95;
  double v96;
  double v97;
  _QWORD *v98;
  unsigned int v99;
  double v100;
  double v101;
  id v102;
  char v103;
  double v104;
  double v105;
  void *v106;
  EQKitHSpace *v107;
  EQKitHSpace *v108;
  void *v109;
  EQKitHBox *v110;
  EQKitHBox *v111;
  EQKitHBox *v112;
  double v113;
  double v114;
  double v115;
  EQKitVSpace *v116;
  void *v117;
  EQKitVBox *v118;
  EQKitVShift *v119;
  EQKitVShift *v120;
  uint64_t v121;
  char v122;
  unint64_t v123;
  int v124;
  uint64_t v125;
  unint64_t v126;
  int v127;
  unint64_t v128;
  int v129;
  double v130;
  int v131;
  _BYTE v134[56];
  _BYTE v135[56];
  _BYTE v136[56];
  _BYTE v137[32];
  __int16 v138;
  _QWORD v139[8];
  id v140[4];
  unsigned __int16 v141;
  double v142;
  uint64_t v143;
  uint64_t v144;
  double *v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD v148[8];
  void *v149[4];
  unsigned __int16 v150;
  double v151;
  uint64_t v152;
  uint64_t v153;
  double *v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD v157[11];
  id v158;
  int v159;
  unsigned __int16 v160;
  uint64_t v161;
  double v162;
  uint64_t v163;
  double *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  double *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  char v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;

  v8 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1);
  v175 = 0;
  v176 = &v175;
  v177 = 0x2020000000;
  v178 = 0;
  v171 = 0;
  v172 = &v171;
  v173 = 0x2020000000;
  v174 = 0;
  v167 = 0;
  v168 = (double *)&v167;
  v169 = 0x2020000000;
  v170 = 0;
  v163 = 0;
  v164 = (double *)&v163;
  v165 = 0x2020000000;
  v166 = 0;
  if (a2)
  {
    v9 = (void *)a2;
    while (1)
    {
      v10 = v9;
      objc_msgSend(v9, "layoutSchemata");
      if (v159 != 2)
        break;
      v11 = (void *)EQKit::Layout::Schemata::children((EQKit::Layout::Schemata *)&v158);
      if (objc_msgSend(v11, "count") != 1)
        break;
      v9 = (void *)objc_msgSend(v11, "objectAtIndex:", 0);
      EQKit::Layout::Schemata::~Schemata(&v158);
      if (!v9)
        goto LABEL_9;
    }
    EQKit::Layout::Schemata::~Schemata(&v158);
  }
  else
  {
    v10 = 0;
  }
LABEL_9:
  v12 = MEMORY[0x24BDAC760];
  v157[0] = MEMORY[0x24BDAC760];
  v157[1] = 3221225472;
  v157[2] = ___ZN18EQKitLayoutManager20layoutSubsuperscriptEPU26objcproto15EQKitLayoutNode11objc_objectS1_S1__block_invoke;
  v157[3] = &unk_24D828AF0;
  v157[10] = a1;
  v157[6] = &v175;
  v157[7] = &v171;
  v157[8] = &v167;
  v157[9] = &v163;
  v157[4] = v10;
  v157[5] = a2;
  v13 = EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1);
  EQKitLayoutManager::layoutBox((EQKitLayoutManager *)a1, a2, 0, *(unsigned __int8 *)(v13 + 16), 0, 0, (uint64_t)v157, (EQKit::ILayout *)&v158);
  if ((v160 & 0x100) != 0)
    *((_BYTE *)v172 + 24) = 1;
  v153 = 0;
  v154 = (double *)&v153;
  v155 = 0x2020000000;
  v156 = 0;
  if (a3)
  {
    v148[0] = v12;
    v148[1] = 3221225472;
    v148[2] = ___ZN18EQKitLayoutManager20layoutSubsuperscriptEPU26objcproto15EQKitLayoutNode11objc_objectS1_S1__block_invoke_2;
    v148[3] = &unk_24D828B18;
    v148[4] = a3;
    v148[5] = &v171;
    v148[6] = &v153;
    v148[7] = a1;
    EQKitLayoutManager::layoutBox((EQKitLayoutManager *)a1, a3, 1, 0, 2, 1, (uint64_t)v148, (EQKit::ILayout *)v149);
  }
  else
  {
    EQKit::ILayout::ILayout((EQKit::ILayout *)v149, 0);
  }
  v144 = 0;
  v145 = (double *)&v144;
  v146 = 0x2020000000;
  v147 = 0;
  if (*((double *)v176 + 3) != 0.0)
  {
    v14 = EQKit::Font::Manager::defaultCollection((EQKit::Font::Manager *)objc_msgSend(*(id *)(a1 + 592), "fontManager"));
    v15 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 48))(v14, 0);
    *((double *)v176 + 3) = v15 * *((double *)v176 + 3);
  }
  if (a4)
  {
    objc_msgSend(a4, "layoutSchemata");
    v16 = (!*(_BYTE *)(*(_QWORD *)(a1 + 40) + 6) || *((_BYTE *)v172 + 24))
       && _isLayoutSchemataOnlyPseudoSuperscripts((const EQKit::Layout::Schemata *)v140);
    EQKit::Layout::Schemata::~Schemata(v140);
    v139[0] = v12;
    v139[1] = 3221225472;
    v139[2] = ___ZN18EQKitLayoutManager20layoutSubsuperscriptEPU26objcproto15EQKitLayoutNode11objc_objectS1_S1__block_invoke_3;
    v139[3] = &unk_24D828B18;
    v139[4] = a4;
    v139[5] = &v171;
    v139[6] = &v144;
    v139[7] = a1;
    EQKitLayoutManager::layoutBox((EQKitLayoutManager *)a1, (uint64_t)a4, !v16, 0, 2, 0, (uint64_t)v139, (EQKit::ILayout *)v140);
  }
  else
  {
    EQKit::ILayout::ILayout((EQKit::ILayout *)v140, 0);
    v16 = 0;
  }
  v18 = v149[0];
  v19 = v140[0];
  if (*((_BYTE *)v172 + 24))
  {
    v20 = *(_QWORD *)(v8 + 80);
    if ((*(_BYTE *)(v8 + 104) & 1) != 0)
      v17.n128_u64[0] = *(_QWORD *)(v8 + 112);
    else
      v17.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v8);
    v26 = (*(double (**)(uint64_t, _QWORD, unint64_t, __n128))(*(_QWORD *)v20 + 40))(v20, 0, v8 + 8, v17);
    v29 = *(_QWORD *)(v8 + 80);
    if ((*(_BYTE *)(v8 + 104) & 1) != 0)
      v28.n128_u64[0] = *(_QWORD *)(v8 + 112);
    else
      v28.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v8);
    v27 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v29 + 40))(v29, 1, v8 + 8, v28);
  }
  else
  {
    v21 = v158;
    objc_msgSend(v158, "depth");
    v23 = v22;
    v24 = v154[3];
    objc_msgSend(v21, "height");
    v26 = v23 + v24;
    v27 = v25.n128_f64[0] - v145[3];
  }
  v30 = *(_QWORD *)(v8 + 80);
  if ((*(_BYTE *)(v8 + 104) & 1) != 0)
    v25.n128_u64[0] = *(_QWORD *)(v8 + 112);
  else
    v25.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v8);
  v32 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v30 + 40))(v30, 8, v8 + 8, v25);
  v33 = *(_QWORD *)(v8 + 80);
  if ((*(_BYTE *)(v8 + 104) & 1) != 0)
    v31.n128_u64[0] = *(_QWORD *)(v8 + 112);
  else
    v31.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v8);
  v34 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v33 + 40))(v33, 7, v8 + 8, v31);
  objc_msgSend(v18, "height");
  if (v26 <= v35 - v32)
  {
    objc_msgSend(v18, "height");
    v26 = v36 - v32;
  }
  objc_msgSend(v19, "depth");
  if (v27 <= v34 + v37.n128_f64[0])
  {
    objc_msgSend(v19, "depth");
    v27 = v34 + v37.n128_f64[0];
  }
  if (v19)
    v38 = v16;
  else
    v38 = 0;
  if (v38)
  {
    v27 = 0.0;
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 32) + 16))
    {
      EQKitLayoutManager::lengthForMetric((id *)a1, 29);
      v164[3] = v37.n128_f64[0] + v164[3];
    }
  }
  if (v18)
    v39 = v19 == 0;
  else
    v39 = 1;
  v40 = !v39;
  v131 = v40;
  if (!v39)
  {
    v41 = *(_QWORD *)(v8 + 80);
    if ((*(_BYTE *)(v8 + 104) & 1) != 0)
      v37.n128_u64[0] = *(_QWORD *)(v8 + 112);
    else
      v37.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v8);
    v42 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v41 + 40))(v41, 9, v8 + 8, v37);
    objc_msgSend(v19, "depth");
    v44 = v43;
    objc_msgSend(v18, "height");
    v46 = v27 - v44;
    v47 = v46 - (v45.n128_f64[0] - v26);
    if (v47 < v42)
    {
      v48 = *(_QWORD *)(v8 + 80);
      if ((*(_BYTE *)(v8 + 104) & 1) != 0)
        v45.n128_u64[0] = *(_QWORD *)(v8 + 112);
      else
        v45.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v8);
      v49 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v48 + 40))(v48, 10, v8 + 8, v45);
      v50 = v42 - v47;
      if (v46 < v49)
      {
        v51 = v49 - v46;
        v52 = v50 - v51;
        v53 = v51 <= v50;
        v50 = 0.0;
        if (v53)
          v50 = v52;
        v27 = v27 + v51;
      }
      v26 = v26 + v50;
    }
  }
  v54 = v160;
  v55 = v160 & 0x3F | 0x40;
  v160 = v160 & 0xFF3F | 0x40;
  v150 = v150 & 0xFFCF | 0x10;
  v141 = v141 & 0xFFCF | 0x10;
  v56 = (v54 >> 4) & 3;
  v57 = 0.0;
  v58 = 0;
  if (v56 != 3)
  {
    EQKitLayoutManager::lengthForMetric((id *)a1, (v56 + 30));
    v58 = v59;
    v55 = v160;
  }
  v60 = v55 >> 6;
  if (v60 != 3)
  {
    EQKitLayoutManager::lengthForMetric((id *)a1, (v60 + 30));
    v57 = v61;
  }
  v161 = v58;
  v162 = v57;
  v62 = v150;
  v63 = (v150 >> 4) & 3;
  v64 = 0;
  v65 = 0.0;
  if (v63 != 3)
  {
    EQKitLayoutManager::lengthForMetric((id *)a1, (v63 + 30));
    v65 = v66;
    v62 = v150;
  }
  v67 = v62 >> 6;
  if (v67 != 3)
  {
    EQKitLayoutManager::lengthForMetric((id *)a1, (v67 + 30));
    v64 = v68;
  }
  v151 = v65;
  v152 = v64;
  v69 = v141;
  v70 = (v141 >> 4) & 3;
  v71 = 0;
  v72 = 0.0;
  if (v70 != 3)
  {
    EQKitLayoutManager::lengthForMetric((id *)a1, (v70 + 30));
    v72 = v73;
    v69 = v141;
  }
  v74 = v69 >> 6;
  if (v74 != 3)
  {
    EQKitLayoutManager::lengthForMetric((id *)a1, (v74 + 30));
    v71 = v75;
  }
  v142 = v72;
  v143 = v71;
  v76 = 0.0;
  v77 = 0.0;
  v78 = 0.0;
  v79 = (double *)MEMORY[0x24BDBEFB0];
  if (v18)
  {
    if (*((double *)v176 + 3) != 0.0 && v26 != 0.0 || v168[3] != 0.0)
    {
      v80 = _startsWithToken(a3, *(_QWORD *)(a1 + 40));
      v81 = 0.0;
      if (v80)
        v81 = v26 * tan(*((long double *)v176 + 3));
      v78 = v81 - v168[3];
    }
    v82 = v162;
    v83 = v151;
    v84 = *(_QWORD **)(a1 + 32);
    v85 = v160;
    v86 = *v79;
    v87 = v79[1];
    v88 = v158;
    v89 = v150;
    objc_msgSend(v158, "opticalAlignWidth");
    if (v82 >= v83)
      v91 = v82;
    else
      v91 = v83;
    v77 = EQKit::Kerning::Manager::kerningDistanceRequiredToSatisfyMinClearance(v84, (v85 >> 2) & 3, v88, v89 & 3, v149[0], v86, v87, v78 + v90, v26, v91);
  }
  v92 = 0.0;
  if (v19)
  {
    v130 = v78;
    if ((*((double *)v176 + 3) == 0.0 || v27 == 0.0) && v164[3] == 0.0)
    {
      v95 = v26;
    }
    else
    {
      v93 = _startsWithToken((uint64_t)a4, *(_QWORD *)(a1 + 40));
      v94 = 0.0;
      if (v93)
        v94 = v27 * tan(*((long double *)v176 + 3));
      v95 = v26;
      v92 = v164[3] - v94;
    }
    v96 = v162;
    v97 = v142;
    v98 = *(_QWORD **)(a1 + 32);
    v99 = v160;
    v100 = *v79;
    v101 = v79[1];
    v102 = v158;
    v103 = v141;
    objc_msgSend(v158, "opticalAlignWidth");
    if (v96 >= v97)
      v105 = v96;
    else
      v105 = v97;
    v76 = EQKit::Kerning::Manager::kerningDistanceRequiredToSatisfyMinClearance(v98, (v99 >> 2) & 3, v102, v103 & 3, v140[0], v100, v101, v92 + v104, -v27, v105);
    v26 = v95;
    v78 = v130;
  }
  v106 = 0;
  if (v77 < v76)
    v77 = v76;
  if (v18 && v78 + v77 != 0.0)
  {
    v107 = -[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", v78 + v77);
    v106 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCE30]), "initWithObjects:", v107, v18, 0);

  }
  if (v19
    && v92 + v77 != 0.0
    && (v108 = -[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", v92 + v77),
        v109 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCE30]), "initWithObjects:", v108, v19, 0),
        v108,
        v109))
  {
    v110 = -[EQKitCompoundBox initWithChildBoxes:]([EQKitHBox alloc], "initWithChildBoxes:", v109);
    if (!v106)
    {
LABEL_111:
      v111 = v18;
      goto LABEL_114;
    }
  }
  else
  {
    v110 = (EQKitHBox *)v19;
    v109 = 0;
    if (!v106)
      goto LABEL_111;
  }
  v111 = -[EQKitCompoundBox initWithChildBoxes:]([EQKitHBox alloc], "initWithChildBoxes:", v106);
LABEL_114:
  v112 = v111;
  EQKit::ILayout::ILayout((EQKit::ILayout *)v137, 0);
  if (v131)
  {
    objc_msgSend(v19, "layoutDepth");
    v114 = v113;
    objc_msgSend(v18, "layoutHeight");
    v116 = -[EQKitVSpace initWithHeight:depth:]([EQKitVSpace alloc], "initWithHeight:depth:", v27 - v114, v26 - v115);
    v117 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCE30]), "initWithObjects:", v110, v116, v112, 0);
    v118 = -[EQKitVBox initWithChildBoxes:pivotIndex:]([EQKitVBox alloc], "initWithChildBoxes:pivotIndex:", v117, 1);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v136, &v118->super.super);
    EQKit::ILayout::operator=((uint64_t)v137, (uint64_t)v136);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v136);

  }
  else if (v18)
  {
    v119 = -[EQKitVShift initWithBox:offset:]([EQKitVShift alloc], "initWithBox:offset:", v112, -v26);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v136, &v119->super);
    EQKit::ILayout::operator=((uint64_t)v137, (uint64_t)v136);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v136);

  }
  else if (v19)
  {
    v120 = -[EQKitVShift initWithBox:offset:]([EQKitVShift alloc], "initWithBox:offset:", v110, v27);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v136, &v120->super);
    EQKit::ILayout::operator=((uint64_t)v137, (uint64_t)v136);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v136);

  }
  EQKitLayoutManager::beginRow((EQKitLayoutManager *)a1, 1, 0);
  v160 = v160 & 0xFFF3 | 4;
  v138 = v138 & 0xFFFC | 1;
  EQKit::ILayout::ILayout((EQKit::ILayout *)v135, (const EQKit::ILayout *)&v158);
  EQKitLayoutManager::addRowChild(a1, (uint64_t)v135, a2);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v135);
  EQKit::ILayout::ILayout((EQKit::ILayout *)v134, (const EQKit::ILayout *)v137);
  v121 = EQKitLayoutManager::currentNode((EQKitLayoutManager *)a1);
  EQKitLayoutManager::addRowChild(a1, (uint64_t)v134, v121);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v134);
  EQKitLayoutManager::endRow((EQKitLayoutManager *)a1, a5);
  if (!*(_BYTE *)(EQKitLayoutManager::layoutContext((EQKitLayoutManager *)a1) + 16) && (v160 & 0x1000) != 0)
  {
    if (a4)
      v123 = ((unint64_t)v141 >> 12) & 1;
    else
      v123 = 0;
    v124 = a3 != 0;
    if (a3)
      v125 = (a4 != 0) + 1;
    else
      v125 = a4 != 0;
    v126 = ((unint64_t)v150 >> 12) & 1;
    if (!a3)
      v126 = 0;
    if ((v150 & 0x1C00u) <= 0x1000)
      v124 = 0;
    v127 = (v141 & 0x1C00u) > 0x1000 && a4 != 0;
    v128 = v123 + v126;
    if (v125 == 1 && v128 == 1
      || (v125 == 2 ? (v129 = v127) : (v129 = 0),
          (v129 & v124 & 1) != 0 || (v122 = 0, v125 == 2) && v124 != v127 && v128 == 2))
    {
      v122 = 3;
    }
  }
  else
  {
    v122 = 0;
  }
  EQKit::ILayout::setVerticalContentClassification((uint64_t)a5, v122);
  *((_WORD *)a5 + 16) = *((_WORD *)a5 + 16) & 0xFFF3 | 8;
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v137);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v140);
  _Block_object_dispose(&v144, 8);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v149);
  _Block_object_dispose(&v153, 8);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&v158);
  _Block_object_dispose(&v163, 8);
  _Block_object_dispose(&v167, 8);
  _Block_object_dispose(&v171, 8);
  _Block_object_dispose(&v175, 8);
}

void sub_21792C114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;
  uint64_t v71;

  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a30);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a37);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a52);
  _Block_object_dispose(&a59, 8);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&a71);
  _Block_object_dispose(&STACK[0x228], 8);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)&STACK[0x2A0]);
  _Block_object_dispose(&STACK[0x2D8], 8);
  _Block_object_dispose((const void *)(v71 - 248), 8);
  _Block_object_dispose((const void *)(v71 - 216), 8);
  _Block_object_dispose((const void *)(v71 - 184), 8);
  _Unwind_Resume(a1);
}

void ___ZN18EQKitLayoutManager20layoutSubsuperscriptEPU26objcproto15EQKitLayoutNode11objc_objectS1_S1__block_invoke(_QWORD *a1, uint64_t a2, EQKit::Layout::Schemata *this)
{
  EQKitLayoutManager *v6;
  unint64_t v7;
  double v8;
  BOOL v9;
  void *v10;
  unsigned __int16 v11;
  uint64_t v12;
  unint64_t v13;

  if (a1[4] == a2 && (v6 = (EQKitLayoutManager *)a1[10], EQKit::Layout::Schemata::isToken(this)))
  {
    v7 = EQKitLayoutManager::layoutContext(v6);
    if ((*(_BYTE *)(v7 + 104) & 4) != 0)
      v8 = *(double *)(v7 + 128);
    else
      v8 = EQKitLayoutContext::pComputeSlantAngle((EQKitLayoutContext *)v7);
    *(double *)(*(_QWORD *)(a1[6] + 8) + 24) = v8;
    v10 = (void *)EQKit::Layout::Schemata::tokenSchemata(this);
    if (v10)
    {
      v11 = objc_msgSend(v10, "schemataUnicharOrNul");
      v12 = *(_QWORD *)(EQKitLayoutManager::layoutContext(v6) + 80);
      v13 = EQKitLayoutManager::layoutContext(v6);
      if ((*(unsigned int (**)(uint64_t, _QWORD, unint64_t))(*(_QWORD *)v12 + 120))(v12, v11, v13 + 8))
      {
        *(_BYTE *)(*(_QWORD *)(a1[7] + 8) + 24) = 1;
      }
      if (v11)
      {
        *(double *)(*(_QWORD *)(a1[8] + 8) + 24) = EQKitLayoutManager::lengthForCharacterProperty((id *)v6, 10, v11, 0.0);
        *(double *)(*(_QWORD *)(a1[9] + 8) + 24) = EQKitLayoutManager::lengthForCharacterProperty((id *)v6, 9, v11, 0.0);
      }
    }
  }
  else
  {
    v9 = a1[5] == a2 && *((_DWORD *)this + 2) == 2;
    if (v9 && !objc_msgSend((id)EQKit::Layout::Schemata::children(this), "count"))
      *(_BYTE *)(*(_QWORD *)(a1[7] + 8) + 24) = 1;
  }
}

void ___ZN18EQKitLayoutManager20layoutSubsuperscriptEPU26objcproto15EQKitLayoutNode11objc_objectS1_S1__block_invoke_2(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  __n128 v4;
  unint64_t v5;
  uint64_t v6;

  if (*(_QWORD *)(a1 + 32) == a2 && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
  {
    v3 = EQKitLayoutManager::layoutContext(*(EQKitLayoutManager **)(a1 + 56));
    v5 = v3;
    v6 = *(_QWORD *)(v3 + 80);
    if ((*(_BYTE *)(v3 + 104) & 1) != 0)
      v4.n128_u64[0] = *(_QWORD *)(v3 + 112);
    else
      v4.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v3);
    *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v6 + 40))(v6, 6, v5 + 8, v4);
  }
}

BOOL _isLayoutSchemataOnlyPseudoSuperscripts(const EQKit::Layout::Schemata *a1)
{
  EQKit::Unicode *v2;
  _BOOL8 result;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char isLayoutSchemataOnlyPseudoSuperscripts;
  _OWORD v10[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (EQKit::Layout::Schemata::isToken(a1))
  {
    v2 = (EQKit::Unicode *)objc_msgSend((id)EQKit::Layout::Schemata::tokenSchemata(a1), "schemataUnicharOrNul");
    return EQKit::Unicode::isPseudoScript(v2);
  }
  if (*((_DWORD *)a1 + 2) != 2)
    return 0;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v4 = (void *)EQKit::Layout::Schemata::children(a1);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v12;
LABEL_6:
    v7 = 0;
    while (1)
    {
      if (*(_QWORD *)v12 != v6)
        objc_enumerationMutation(v4);
      v8 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * v7);
      if (v8)
        objc_msgSend(v8, "layoutSchemata");
      else
        memset(v10, 0, sizeof(v10));
      isLayoutSchemataOnlyPseudoSuperscripts = _isLayoutSchemataOnlyPseudoSuperscripts((const EQKit::Layout::Schemata *)v10);
      EQKit::Layout::Schemata::~Schemata((id *)v10);
      if ((isLayoutSchemataOnlyPseudoSuperscripts & 1) == 0)
        return 0;
      if (v5 == ++v7)
      {
        v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
        result = 1;
        if (v5)
          goto LABEL_6;
        return result;
      }
    }
  }
  return 1;
}

void sub_21792C5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  EQKit::Layout::Schemata::~Schemata(&a9);
  _Unwind_Resume(a1);
}

void ___ZN18EQKitLayoutManager20layoutSubsuperscriptEPU26objcproto15EQKitLayoutNode11objc_objectS1_S1__block_invoke_3(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  __n128 v4;
  unint64_t v5;
  uint64_t v6;

  if (*(_QWORD *)(a1 + 32) == a2 && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
  {
    v3 = EQKitLayoutManager::layoutContext(*(EQKitLayoutManager **)(a1 + 56));
    v5 = v3;
    v6 = *(_QWORD *)(v3 + 80);
    if ((*(_BYTE *)(v3 + 104) & 1) != 0)
      v4.n128_u64[0] = *(_QWORD *)(v3 + 112);
    else
      v4.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v3);
    *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v6 + 40))(v6, 5, v5 + 8, v4);
  }
}

double EQKitLayoutManager::kerningDistance(id *a1, unsigned int a2)
{
  double result;

  if (a2 > 2)
    return 0.0;
  EQKitLayoutManager::lengthForMetric(a1, a2 + 30);
  return result;
}

uint64_t _startsWithToken(uint64_t result, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  int v7;

  if (result)
  {
    v3 = (void *)result;
    while (1)
    {
      objc_msgSend(v3, "layoutSchemata");
      if (EQKit::Layout::Schemata::isToken((EQKit::Layout::Schemata *)&v6))
        break;
      if (v7 == 4)
      {
        if (!*(_BYTE *)(a2 + 7))
          goto LABEL_12;
        v5 = objc_msgSend((id)EQKit::Layout::Schemata::subsuperscriptSchemata((EQKit::Layout::Schemata *)&v6), "schemataKernel");
      }
      else
      {
        if (v7 != 2
          || (v4 = (void *)EQKit::Layout::Schemata::children((EQKit::Layout::Schemata *)&v6), !objc_msgSend(v4, "count")))
        {
LABEL_12:
          EQKit::Layout::Schemata::~Schemata(&v6);
          return 0;
        }
        v5 = objc_msgSend(v4, "objectAtIndex:", 0);
      }
      v3 = (void *)v5;
      EQKit::Layout::Schemata::~Schemata(&v6);
      if (!v3)
        return 0;
    }
    EQKit::Layout::Schemata::~Schemata(&v6);
    return 1;
  }
  return result;
}

void sub_21792C740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  EQKit::Layout::Schemata::~Schemata(&a9);
  _Unwind_Resume(a1);
}

EQKit::Script::Info *__Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  return EQKit::Script::Info::Info((EQKit::Script::Info *)(a1 + 48), (const Info *)(a2 + 48));
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 80);
  if (v1)
    CFRelease(v1);
}

uint64_t ___ZN18EQKitLayoutManager15layoutUnderoverERKN5EQKit6Layout8SchemataEbPU26objcproto15EQKitLayoutNode11objc_object_block_invoke(uint64_t result, uint64_t a2, EQKit::Layout::Schemata *this)
{
  _QWORD *v4;
  EQKitLayoutManager *v5;
  unint64_t v6;

  if (*(_QWORD *)(result + 32) == a2)
  {
    v4 = (_QWORD *)result;
    v5 = *(EQKitLayoutManager **)(result + 64);
    result = EQKit::Layout::Schemata::isToken(this);
    if ((_DWORD)result)
    {
      *(_DWORD *)(*(_QWORD *)(v4[5] + 8) + 24) = objc_msgSend((id)EQKit::Layout::Schemata::tokenSchemata(this), "schemataUnicharOrNul");
      v6 = EQKitLayoutManager::layoutContext(v5);
      result = EQKit::Script::Info::operator=(*(_QWORD *)(v4[6] + 8) + 48, v6 + 8);
      *(_BYTE *)(*(_QWORD *)(v4[7] + 8) + 24) = 1;
    }
  }
  return result;
}

uint64_t EQKit::Script::Info::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;

  if (a1 != a2)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    *(_WORD *)(a1 + 9) = *(_WORD *)(a2 + 9);
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    v4 = *(const void **)(a1 + 32);
    if (v4)
      CFRelease(v4);
    v5 = *(const void **)(a2 + 32);
    *(_QWORD *)(a1 + 32) = v5;
    if (v5)
      CFRetain(v5);
  }
  return a1;
}

uint64_t ___ZN18EQKitLayoutManager15layoutUnderoverERKN5EQKit6Layout8SchemataEbPU26objcproto15EQKitLayoutNode11objc_object_block_invoke_2(uint64_t result, uint64_t a2, EQKit::Layout::Schemata *this)
{
  uint64_t v3;

  if (*(_BYTE *)(result + 48))
  {
    v3 = result;
    if (*(_QWORD *)(result + 32) == a2)
    {
      result = EQKit::Layout::Schemata::isToken(this);
      if ((_DWORD)result)
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 24) = 1;
    }
  }
  return result;
}

void ___ZN18EQKitLayoutManager15layoutUnderoverERKN5EQKit6Layout8SchemataEbPU26objcproto15EQKitLayoutNode11objc_object_block_invoke_3(uint64_t a1, uint64_t a2, EQKit::Layout::Schemata *this)
{
  EQKitLayoutManager *v4;
  EQKitLayoutContext *v5;
  const __CTFont *v6;

  if (*(_BYTE *)(a1 + 64) && *(_QWORD *)(a1 + 32) == a2)
  {
    v4 = *(EQKitLayoutManager **)(a1 + 56);
    if (EQKit::Layout::Schemata::isToken(this))
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
      v5 = (EQKitLayoutContext *)EQKitLayoutManager::layoutContext(v4);
      v6 = (const __CTFont *)EQKitLayoutContext::font(v5);
      *(CGFloat *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = CTFontGetXHeight(v6);
    }
  }
}

double EQKitLayoutManager::adjustStretchyWidth(EQKitLayoutManager *a1, void *a2, double a3)
{
  unint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  double v13;
  _QWORD v15[5];
  int v16;
  __int128 v17;
  _QWORD v18[5];
  int v19;
  __int128 v20;
  void *v21;
  int v22;

  LODWORD(v20) = 1;
  *((_QWORD *)&v20 + 1) = 0;
  v6 = EQKitLayoutManager::layoutContext(a1);
  v7 = objc_msgSend(a2, "operatorUnicharOrNul");
  v8 = *((_QWORD *)a1 + 75);
  v21 = a2;
  v22 = 41;
  v9 = EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitLength>>(v8, v8 + 32, (uint64_t)&v21, &v20);
  v10 = MEMORY[0x24BDAC760];
  if (v9)
  {
    v18[0] = MEMORY[0x24BDAC760];
    v18[1] = 3221225472;
    v18[2] = ___ZNK18EQKitLayoutManager19adjustStretchyWidthEPU41objcproto15EQKitLayoutNode13EQKitOperator11objc_objectd_block_invoke;
    v18[3] = &__block_descriptor_44_e5_d8__0l;
    v18[4] = a1;
    v19 = v7;
    v11 = EQKitLength::resolveToAbsoluteWithUnitProviderAndDefault((double *)&v20, v6, (uint64_t)v18);
    if (v11 < a3)
      a3 = v11;
  }
  LODWORD(v17) = 1;
  *((_QWORD *)&v17 + 1) = 0;
  v12 = *((_QWORD *)a1 + 75);
  v21 = a2;
  v22 = 40;
  if (EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitLength>>(v12, v12 + 32, (uint64_t)&v21, &v17))
  {
    v15[0] = v10;
    v15[1] = 3221225472;
    v15[2] = ___ZNK18EQKitLayoutManager19adjustStretchyWidthEPU41objcproto15EQKitLayoutNode13EQKitOperator11objc_objectd_block_invoke_2;
    v15[3] = &__block_descriptor_44_e5_d8__0l;
    v15[4] = a1;
    v16 = v7;
    v13 = EQKitLength::resolveToAbsoluteWithUnitProviderAndDefault((double *)&v17, v6, (uint64_t)v15);
    if (v13 > a3)
      return v13;
  }
  return a3;
}

uint64_t ___ZN18EQKitLayoutManager15layoutUnderoverERKN5EQKit6Layout8SchemataEbPU26objcproto15EQKitLayoutNode11objc_object_block_invoke_4(uint64_t result, uint64_t a2, EQKit::Layout::Schemata *this)
{
  _QWORD *v4;
  EQKitLayoutManager *v5;
  unint64_t v6;

  if (*(_QWORD *)(result + 32) == a2)
  {
    v4 = (_QWORD *)result;
    v5 = *(EQKitLayoutManager **)(result + 64);
    result = EQKit::Layout::Schemata::isToken(this);
    if ((_DWORD)result)
    {
      *(_DWORD *)(*(_QWORD *)(v4[5] + 8) + 24) = objc_msgSend((id)EQKit::Layout::Schemata::tokenSchemata(this), "schemataUnicharOrNul");
      v6 = EQKitLayoutManager::layoutContext(v5);
      result = EQKit::Script::Info::operator=(*(_QWORD *)(v4[6] + 8) + 48, v6 + 8);
      *(_BYTE *)(*(_QWORD *)(v4[7] + 8) + 24) = 1;
    }
  }
  return result;
}

uint64_t ___ZN18EQKitLayoutManager15layoutUnderoverERKN5EQKit6Layout8SchemataEbPU26objcproto15EQKitLayoutNode11objc_object_block_invoke_5(uint64_t result, uint64_t a2, EQKit::Layout::Schemata *this)
{
  uint64_t v3;

  if (*(_BYTE *)(result + 48))
  {
    v3 = result;
    if (*(_QWORD *)(result + 32) == a2)
    {
      result = EQKit::Layout::Schemata::isToken(this);
      if ((_DWORD)result)
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 24) = 1;
    }
  }
  return result;
}

void ___ZN18EQKitLayoutManager15layoutUnderoverERKN5EQKit6Layout8SchemataEbPU26objcproto15EQKitLayoutNode11objc_object_block_invoke_6(uint64_t a1, uint64_t a2, EQKit::Layout::Schemata *this)
{
  EQKitLayoutManager *v4;
  EQKitLayoutContext *v5;
  const __CTFont *v6;

  if (*(_BYTE *)(a1 + 64) && *(_QWORD *)(a1 + 32) == a2)
  {
    v4 = *(EQKitLayoutManager **)(a1 + 56);
    if (EQKit::Layout::Schemata::isToken(this))
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
      v5 = (EQKitLayoutContext *)EQKitLayoutManager::layoutContext(v4);
      v6 = (const __CTFont *)EQKitLayoutContext::font(v5);
      *(CGFloat *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = CTFontGetXHeight(v6);
    }
  }
}

EQKitVShift *EQKitLayoutManager::baselineAlignBox(EQKitLayoutManager *a1, void *a2, int a3)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v11;
  double v12;
  double v13;
  double v14;
  unint64_t v15;
  double v16;

  switch(a3)
  {
    case 0:
    case 3:
    case 4:
      objc_msgSend(a2, "vsize");
      v5 = v4 * 0.5;
      objc_msgSend(a2, "height");
      v7 = v5 - v6;
      break;
    case 1:
      objc_msgSend(a2, "height");
      v7 = -v8;
      break;
    case 2:
      objc_msgSend(a2, "vsize");
      v12 = v11 * 0.5;
      objc_msgSend(a2, "height");
      v14 = v12 - v13;
      v15 = EQKitLayoutManager::layoutContext(a1);
      if ((*(_BYTE *)(v15 + 104) & 2) != 0)
        v16 = *(double *)(v15 + 120);
      else
        v16 = EQKitLayoutContext::pComputeMathAxis((EQKitLayoutContext *)v15);
      v7 = v14 + v16;
      break;
    case 5:
      objc_msgSend(a2, "depth");
      v7 = v9;
      break;
    default:
      v7 = 0.0;
      break;
  }
  return -[EQKitVShift initWithBox:offset:]([EQKitVShift alloc], "initWithBox:offset:", a2, v7);
}

uint64_t EQKitLayoutManager::layoutStack@<X0>(EQKitLayoutManager *this@<X0>, const EQKit::Layout::Schemata *a2@<X1>, double a3@<D0>, double *a4@<X4>, uint64_t a5@<X2>, uint64_t a6@<X3>, EQKit::ILayout *a7@<X8>)
{
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  id *v16;
  double v17;
  _BYTE v19[168];

  v13 = (_QWORD *)((char *)this + 496);
  v14 = EQKit::Layout::Schemata::stackSchemata(a2);
  EQKitLayoutElementaryStack::EQKitLayoutElementaryStack((uint64_t)v19, (uint64_t)this, v14, a5, a6, a3);
  std::deque<EQKitLayoutElementaryStack>::push_back(v13, (const EQKitLayoutElementaryStack *)v19);
  EQKitLayoutElementaryStack::~EQKitLayoutElementaryStack((EQKitLayoutElementaryStack *)v19);
  v15 = *((_QWORD *)this + 67) + *((_QWORD *)this + 66) - 1;
  v16 = (id *)(*(_QWORD *)(*((_QWORD *)this + 63) + 8 * (v15 / 0x18)) + 168 * (v15 % 0x18));
  EQKitLayoutElementaryStack::layout(v16, a7);
  v17 = EQKitLayoutElementaryStack::baselineForRowAtIndex(v16, 2uLL);
  *a4 = v17 - EQKitLayoutElementaryStack::baselineForRowAtIndex(v16, 1uLL);
  return std::deque<EQKitLayoutElementaryStack>::pop_back(v13);
}

void sub_21792CD9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKitLayoutElementaryStack::~EQKitLayoutElementaryStack((EQKitLayoutElementaryStack *)va);
  _Unwind_Resume(a1);
}

double ___ZNK18EQKitLayoutManager19adjustStretchyWidthEPU41objcproto15EQKitLayoutNode13EQKitOperator11objc_objectd_block_invoke(uint64_t a1)
{
  EQKitLayoutManager *v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  double v8;

  v2 = *(EQKitLayoutManager **)(a1 + 32);
  v3 = *(_DWORD *)(a1 + 40);
  v4 = EQKitLayoutManager::layoutContext(v2);
  if (!v3)
    return *(double *)(v4 + 24);
  v5 = *(_QWORD *)(v4 + 80);
  v6 = *(unsigned int *)(a1 + 40);
  v7 = EQKitLayoutManager::layoutContext(v2);
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v5 + 136))(v5, v6, v7 + 8);
  return v8;
}

double ___ZNK18EQKitLayoutManager19adjustStretchyWidthEPU41objcproto15EQKitLayoutNode13EQKitOperator11objc_objectd_block_invoke_2(uint64_t a1)
{
  EQKitLayoutManager *v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  double v8;

  v2 = *(EQKitLayoutManager **)(a1 + 32);
  v3 = *(_DWORD *)(a1 + 40);
  v4 = EQKitLayoutManager::layoutContext(v2);
  if (!v3)
    return *(double *)(v4 + 24);
  v5 = *(_QWORD *)(v4 + 80);
  v6 = *(unsigned int *)(a1 + 40);
  v7 = EQKitLayoutManager::layoutContext(v2);
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v5 + 136))(v5, v6, v7 + 8);
  return v8;
}

double ___ZN18EQKitLayoutManager10resolveRowEP7NSArray_block_invoke(uint64_t a1)
{
  EQKitLayoutManager *v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  double v8;

  v2 = *(EQKitLayoutManager **)(a1 + 32);
  v3 = *(_DWORD *)(a1 + 40);
  v4 = EQKitLayoutManager::layoutContext(v2);
  if (!v3)
    return *(double *)(v4 + 24);
  v5 = *(_QWORD *)(v4 + 80);
  v6 = *(unsigned int *)(a1 + 40);
  v7 = EQKitLayoutManager::layoutContext(v2);
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v5 + 136))(v5, v6, v7 + 8);
  return v8;
}

double ___ZN18EQKitLayoutManager10resolveRowEP7NSArray_block_invoke_2(uint64_t a1)
{
  EQKitLayoutManager *v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  double v8;

  v2 = *(EQKitLayoutManager **)(a1 + 32);
  v3 = *(_DWORD *)(a1 + 40);
  v4 = EQKitLayoutManager::layoutContext(v2);
  if (!v3)
    return *(double *)(v4 + 24);
  v5 = *(_QWORD *)(v4 + 80);
  v6 = *(unsigned int *)(a1 + 40);
  v7 = EQKitLayoutManager::layoutContext(v2);
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v5 + 136))(v5, v6, v7 + 8);
  return v8;
}

uint64_t std::deque<EQKitLayoutTable>::~deque[abi:nn180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  void (***v8)(void);
  void (**v9)(void);
  void (***v10)(void);
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0x2A];
    v7 = (unint64_t)v2[(a1[5] + v5) / 0x2A] + 96 * ((a1[5] + v5) % 0x2A);
    if ((char *)*v6 + 96 * (v5 % 0x2A) != (void *)v7)
    {
      v8 = (void (***)(void))((char *)*v6 + 96 * (v5 % 0x2A));
      do
      {
        v9 = *v8;
        v8 += 12;
        (*v9)();
        if ((char *)v8 - (_BYTE *)*v6 == 4032)
        {
          v10 = (void (***)(void))v6[1];
          ++v6;
          v8 = v10;
        }
      }
      while (v8 != (void (***)(void))v7);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 21;
  }
  else
  {
    if (v12 != 2)
      goto LABEL_17;
    v13 = 42;
  }
  a1[4] = v13;
LABEL_17:
  while (v2 != v3)
  {
    v14 = *v2++;
    operator delete(v14);
  }
  return std::__split_buffer<EQKitLayoutTable *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<EQKitLayoutTable *>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

uint64_t std::deque<EQKitLayoutElementaryStack>::~deque[abi:nn180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  EQKitLayoutElementaryStack *v7;
  unint64_t v8;
  uint64_t v9;
  EQKitLayoutElementaryStack *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0x18];
    v7 = (EQKitLayoutElementaryStack *)((char *)*v6 + 168 * (v5 % 0x18));
    v8 = (unint64_t)v2[(a1[5] + v5) / 0x18] + 168 * ((a1[5] + v5) % 0x18);
    if (v7 != (EQKitLayoutElementaryStack *)v8)
    {
      do
      {
        EQKitLayoutElementaryStack::~EQKitLayoutElementaryStack(v7);
        v7 = (EQKitLayoutElementaryStack *)(v9 + 168);
        if (v7 - (EQKitLayoutElementaryStack *)*v6 == 4032)
        {
          v10 = (EQKitLayoutElementaryStack *)v6[1];
          ++v6;
          v7 = v10;
        }
      }
      while (v7 != (EQKitLayoutElementaryStack *)v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 12;
  }
  else
  {
    if (v12 != 2)
      goto LABEL_16;
    v13 = 24;
  }
  a1[4] = v13;
LABEL_16:
  while (v2 != v3)
  {
    v14 = *v2++;
    operator delete(v14);
  }
  return std::__split_buffer<EQKitLayoutTable *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::deque<EQKitLayoutStretchedOperator>::~deque[abi:nn180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 51;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 102;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<EQKitLayoutTable *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:nn180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<EQKitLayoutTable *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::deque<EQKitLayoutRow>::~deque[abi:nn180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  EQKitLayoutRow *v7;
  unint64_t v8;
  uint64_t v9;
  EQKitLayoutRow *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0x19];
    v7 = (EQKitLayoutRow *)((char *)*v6 + 160 * (v5 % 0x19));
    v8 = (unint64_t)v2[(a1[5] + v5) / 0x19] + 160 * ((a1[5] + v5) % 0x19);
    if (v7 != (EQKitLayoutRow *)v8)
    {
      do
      {
        EQKitLayoutRow::~EQKitLayoutRow(v7);
        v7 = (EQKitLayoutRow *)(v9 + 160);
        if (v7 - (EQKitLayoutRow *)*v6 == 4000)
        {
          v10 = (EQKitLayoutRow *)v6[1];
          ++v6;
          v7 = v10;
        }
      }
      while (v7 != (EQKitLayoutRow *)v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 12;
  }
  else
  {
    if (v12 != 2)
      goto LABEL_16;
    v13 = 25;
  }
  a1[4] = v13;
LABEL_16:
  while (v2 != v3)
  {
    v14 = *v2++;
    operator delete(v14);
  }
  return std::__split_buffer<EQKitLayoutTable *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::deque<EQKitLayoutContext>::~deque[abi:nn180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  void (***v8)(void);
  void (**v9)(void);
  void (***v10)(void);
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0x1E];
    v7 = (unint64_t)v2[(a1[5] + v5) / 0x1E] + 136 * ((a1[5] + v5) % 0x1E);
    if ((char *)*v6 + 136 * (v5 % 0x1E) != (void *)v7)
    {
      v8 = (void (***)(void))((char *)*v6 + 136 * (v5 % 0x1E));
      do
      {
        v9 = *v8;
        v8 += 17;
        (*v9)();
        if ((char *)v8 - (_BYTE *)*v6 == 4080)
        {
          v10 = (void (***)(void))v6[1];
          ++v6;
          v8 = v10;
        }
      }
      while (v8 != (void (***)(void))v7);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 15;
  }
  else
  {
    if (v12 != 2)
      goto LABEL_17;
    v13 = 30;
  }
  a1[4] = v13;
LABEL_17:
  while (v2 != v3)
  {
    v14 = *v2++;
    operator delete(v14);
  }
  return std::__split_buffer<EQKitLayoutTable *>::~__split_buffer((uint64_t)a1);
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t *v7;
  uint64_t *v8;
  int v9;
  uint64_t result;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;

  v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)a3);
  v8 = v7;
  if ((uint64_t *)(a2 + 8) != v7)
  {
    v9 = *((_DWORD *)v7 + 12);
LABEL_3:
    *a4 = v9;
    return 1;
  }
  result = objc_msgSend(*(id *)a3, "isAttributeDefaultInheritableFromStyle:", *(unsigned int *)(a3 + 8));
  if ((_DWORD)result)
  {
    result = objc_msgSend(*(id *)a3, "parent");
    if (result)
    {
      v11 = (void *)result;
      while (1)
      {
        v12 = objc_msgSend(v11, "layoutStyleNode");
        if (v12)
        {
          v14 = v12;
          v15 = *(_DWORD *)(a3 + 8);
          v13 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)&v14);
          if (v8 != v13)
            break;
        }
        result = objc_msgSend(v11, "parent");
        v11 = (void *)result;
        if (!result)
          return result;
      }
      v9 = *((_DWORD *)v13 + 12);
      goto LABEL_3;
    }
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(uint64_t a1, unint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v5;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;

  v4 = *(uint64_t **)(a1 + 8);
  v2 = (uint64_t *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v2;
  v5 = *a2;
  v6 = *((_DWORD *)a2 + 2);
  v7 = v2;
  do
  {
    v8 = v3[4];
    if (v8 >= v5)
    {
      if (v5 >= v8)
      {
        if (*((_DWORD *)v3 + 10) < v6)
          ++v3;
        else
          v7 = v3;
      }
      else
      {
        v7 = v3;
      }
    }
    else
    {
      ++v3;
    }
    v3 = (uint64_t *)*v3;
  }
  while (v3);
  if (v7 == v2)
    return v2;
  v9 = v7[4];
  if (v5 < v9 || v9 >= v5 && v6 < *((_DWORD *)v7 + 10))
    return v2;
  return v7;
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::string,std::less<EQKitTypes::Attributes::Enum>,std::char_traits<char><std::pair<EQKitTypes::Attributes::Enum const>>>>(uint64_t a1, uint64_t a2, uint64_t a3, std::string *a4)
{
  uint64_t *v7;
  uint64_t *v8;
  const std::string *v9;
  uint64_t result;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;

  v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)a3);
  v8 = v7;
  if ((uint64_t *)(a2 + 8) != v7)
  {
    v9 = (const std::string *)(v7 + 6);
LABEL_3:
    std::string::operator=(a4, v9);
    return 1;
  }
  result = objc_msgSend(*(id *)a3, "isAttributeDefaultInheritableFromStyle:", *(unsigned int *)(a3 + 8));
  if ((_DWORD)result)
  {
    result = objc_msgSend(*(id *)a3, "parent");
    if (result)
    {
      v11 = (void *)result;
      while (1)
      {
        v12 = objc_msgSend(v11, "layoutStyleNode");
        if (v12)
        {
          v14 = v12;
          v15 = *(_DWORD *)(a3 + 8);
          v13 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)&v14);
          if (v8 != v13)
            break;
        }
        result = objc_msgSend(v11, "parent");
        v11 = (void *)result;
        if (!result)
          return result;
      }
      v9 = (const std::string *)(v13 + 6);
      goto LABEL_3;
    }
  }
  return result;
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,unsigned short>>(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4)
{
  uint64_t *v7;
  uint64_t *v8;
  __int16 v9;
  uint64_t result;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;

  v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)a3);
  v8 = v7;
  if ((uint64_t *)(a2 + 8) != v7)
  {
    v9 = *((_WORD *)v7 + 24);
LABEL_3:
    *a4 = v9;
    return 1;
  }
  result = objc_msgSend(*(id *)a3, "isAttributeDefaultInheritableFromStyle:", *(unsigned int *)(a3 + 8));
  if ((_DWORD)result)
  {
    result = objc_msgSend(*(id *)a3, "parent");
    if (result)
    {
      v11 = (void *)result;
      while (1)
      {
        v12 = objc_msgSend(v11, "layoutStyleNode");
        if (v12)
        {
          v14 = v12;
          v15 = *(_DWORD *)(a3 + 8);
          v13 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)&v14);
          if (v8 != v13)
            break;
        }
        result = objc_msgSend(v11, "parent");
        v11 = (void *)result;
        if (!result)
          return result;
      }
      v9 = *((_WORD *)v13 + 24);
      goto LABEL_3;
    }
  }
  return result;
}

EQKit::Script::Info *EQKit::Script::Info::Info(EQKit::Script::Info *this, const Info *a2)
{
  const void *v3;

  *(_QWORD *)this = *(_QWORD *)a2;
  *((_BYTE *)this + 8) = *((_BYTE *)a2 + 8);
  *(_WORD *)((char *)this + 9) = *(_WORD *)((char *)a2 + 9);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  v3 = (const void *)*((_QWORD *)a2 + 4);
  *((_QWORD *)this + 4) = v3;
  if (v3)
    CFRetain(v3);
  return this;
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitPseudoUnitLength>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t result;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;

  v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)a3);
  v8 = v7;
  if ((uint64_t *)(a2 + 8) != v7)
  {
    v9 = *((_OWORD *)v7 + 3);
    v10 = v7[8];
LABEL_3:
    *(_QWORD *)(a4 + 16) = v10;
    *(_OWORD *)a4 = v9;
    return 1;
  }
  result = objc_msgSend(*(id *)a3, "isAttributeDefaultInheritableFromStyle:", *(unsigned int *)(a3 + 8));
  if ((_DWORD)result)
  {
    result = objc_msgSend(*(id *)a3, "parent");
    if (result)
    {
      v12 = (void *)result;
      while (1)
      {
        v13 = objc_msgSend(v12, "layoutStyleNode");
        if (v13)
        {
          v15 = v13;
          v16 = *(_DWORD *)(a3 + 8);
          v14 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)&v15);
          if (v8 != v14)
            break;
        }
        result = objc_msgSend(v12, "parent");
        v12 = (void *)result;
        if (!result)
          return result;
      }
      v9 = *((_OWORD *)v14 + 3);
      v10 = v14[8];
      goto LABEL_3;
    }
  }
  return result;
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum>,std::less<EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum<std::pair<EQKitTypes::Attributes::Enum const>>>>(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t *v7;
  uint64_t *v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;

  v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)a3);
  v8 = v7;
  if ((uint64_t *)(a2 + 8) != v7)
  {
    if (v7 + 6 == (uint64_t *)a4)
      return 1;
    v9 = (char *)v7[6];
    v10 = v7[7];
LABEL_4:
    std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:nn180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>(a4, v9, v10, (v10 - (uint64_t)v9) >> 2);
    return 1;
  }
  result = objc_msgSend(*(id *)a3, "isAttributeDefaultInheritableFromStyle:", *(unsigned int *)(a3 + 8));
  if ((_DWORD)result)
  {
    result = objc_msgSend(*(id *)a3, "parent");
    if (result)
    {
      v12 = (void *)result;
      while (1)
      {
        v13 = objc_msgSend(v12, "layoutStyleNode");
        if (v13)
        {
          v15 = v13;
          v16 = *(_DWORD *)(a3 + 8);
          v14 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)&v15);
          if (v8 != v14)
            break;
        }
        result = objc_msgSend(v12, "parent");
        v12 = (void *)result;
        if (!result)
          return result;
      }
      if (v14 + 6 == (uint64_t *)a4)
        return 1;
      v9 = (char *)v14[6];
      v10 = v14[7];
      goto LABEL_4;
    }
  }
  return result;
}

char *std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:nn180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      abort();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<EQKitTypes::Notation::Enum>::__vallocate[abi:nn180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

char *std::vector<EQKitTypes::Notation::Enum>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitTypes::Notation::Enum>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitTypes::Notation::Enum>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(4 * a2);
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<std::string,std::char_traits<char><std::allocator<char>>>,std::less<EQKitTypes::Attributes::Enum>,std::char_traits<char><std::pair<EQKitTypes::Attributes::Enum const,std::char_traits<char><std::allocator<char>>>>>>(uint64_t a1, uint64_t a2, uint64_t a3, std::vector<std::string> *a4)
{
  uint64_t *v7;
  uint64_t *v8;
  std::string *v9;
  __int128 *v10;
  uint64_t result;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;

  v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)a3);
  v8 = v7;
  if ((uint64_t *)(a2 + 8) != v7)
  {
    if (v7 + 6 == (uint64_t *)a4)
      return 1;
    v9 = (std::string *)v7[6];
    v10 = (__int128 *)v7[7];
LABEL_4:
    std::vector<std::string>::__assign_with_size[abi:nn180100]<std::string*,std::string*>(a4, v9, v10, 0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)v9) >> 3));
    return 1;
  }
  result = objc_msgSend(*(id *)a3, "isAttributeDefaultInheritableFromStyle:", *(unsigned int *)(a3 + 8));
  if ((_DWORD)result)
  {
    result = objc_msgSend(*(id *)a3, "parent");
    if (result)
    {
      v12 = (void *)result;
      while (1)
      {
        v13 = objc_msgSend(v12, "layoutStyleNode");
        if (v13)
        {
          v15 = v13;
          v16 = *(_DWORD *)(a3 + 8);
          v14 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)&v15);
          if (v8 != v14)
            break;
        }
        result = objc_msgSend(v12, "parent");
        v12 = (void *)result;
        if (!result)
          return result;
      }
      if (v14 + 6 == (uint64_t *)a4)
        return 1;
      v9 = (std::string *)v14[6];
      v10 = (__int128 *)v14[7];
      goto LABEL_4;
    }
  }
  return result;
}

void EQKitLayoutTable::~EQKitLayoutTable(EQKitLayoutTable *this)
{
  EQKitLayoutTable::~EQKitLayoutTable(this);
  JUMPOUT(0x219A153B8);
}

{
  void *v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = &unk_24D828BE0;
  v4 = (void **)((char *)this + 64);
  std::vector<EQKitLayoutTable::LayoutRow>::__destroy_vector::operator()[abi:nn180100](&v4);
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 3) = v3;
    operator delete(v3);
  }
}

void std::vector<EQKitLayoutTable::LayoutRow>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::allocator<EQKitLayoutTable::LayoutRow>::destroy[abi:nn180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<EQKitLayoutTable::LayoutRow>::destroy[abi:nn180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void **v5;

  v5 = (void **)(a2 + 56);
  std::vector<EQKitLayoutTable::LayoutCell>::__destroy_vector::operator()[abi:nn180100](&v5);
  v3 = *(void **)(a2 + 24);
  if (v3)
  {
    *(_QWORD *)(a2 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v4;
    operator delete(v4);
  }
}

void std::vector<EQKitLayoutTable::LayoutCell>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 280;
        std::allocator<EQKitLayoutTable::LayoutCell>::destroy[abi:nn180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<EQKitLayoutTable::LayoutCell>::destroy[abi:nn180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;

  EQKit::ILayout::~ILayout((EQKit::ILayout *)(a2 + 224));
  EQKitLayoutRow::~EQKitLayoutRow((EQKitLayoutRow *)(a2 + 64));
  v3 = *(void **)(a2 + 24);
  if (v3)
  {
    *(_QWORD *)(a2 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v4;
    operator delete(v4);
  }
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitLength>>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t *v7;
  uint64_t *v8;
  __int128 v9;
  uint64_t result;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;

  v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)a3);
  v8 = v7;
  if ((uint64_t *)(a2 + 8) != v7)
  {
    v9 = *((_OWORD *)v7 + 3);
LABEL_3:
    *a4 = v9;
    return 1;
  }
  result = objc_msgSend(*(id *)a3, "isAttributeDefaultInheritableFromStyle:", *(unsigned int *)(a3 + 8));
  if ((_DWORD)result)
  {
    result = objc_msgSend(*(id *)a3, "parent");
    if (result)
    {
      v11 = (void *)result;
      while (1)
      {
        v12 = objc_msgSend(v11, "layoutStyleNode");
        if (v12)
        {
          v14 = v12;
          v15 = *(_DWORD *)(a3 + 8);
          v13 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)&v14);
          if (v8 != v13)
            break;
        }
        result = objc_msgSend(v11, "parent");
        v11 = (void *)result;
        if (!result)
          return result;
      }
      v9 = *((_OWORD *)v13 + 3);
      goto LABEL_3;
    }
  }
  return result;
}

EQKit::ILayout *std::vector<EQKit::ILayout>::__init_with_size[abi:nn180100]<EQKit::ILayout*,EQKit::ILayout*>(EQKit::ILayout *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  EQKit::ILayout *v6;

  if (a4)
  {
    v6 = result;
    std::vector<EQKit::ILayout>::__vallocate[abi:nn180100](result, a4);
    return std::vector<EQKit::ILayout>::__construct_at_end<EQKit::ILayout*,EQKit::ILayout*>(v6, a2, a3);
  }
  return result;
}

char *std::vector<EQKit::ILayout>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x492492492492493)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKit::ILayout>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[56 * v4];
  return result;
}

EQKit::ILayout *std::vector<EQKit::ILayout>::__construct_at_end<EQKit::ILayout*,EQKit::ILayout*>(EQKit::ILayout *result, uint64_t a2, uint64_t a3)
{
  EQKit::ILayout *v3;
  uint64_t v4;
  uint64_t v7;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      result = EQKit::ILayout::ILayout((EQKit::ILayout *)(v4 + v7), (const EQKit::ILayout *)(a2 + v7));
      v7 += 56;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *((_QWORD *)v3 + 1) = v4;
  return result;
}

void sub_21792E178(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<EQKit::ILayout>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(56 * a2);
}

EQKitLayoutContext *std::deque<EQKitLayoutContext>::push_back(_QWORD *a1, EQKitLayoutContext *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  EQKitLayoutContext *v8;
  EQKitLayoutContext *result;

  v4 = a1[1];
  v5 = a1[2];
  v6 = 30 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    std::deque<EQKitLayoutContext>::__add_back_capacity(a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 == v4)
  {
    v8 = 0;
  }
  else
  {
    v7 = a1[5] + a1[4];
    v8 = (EQKitLayoutContext *)(*(_QWORD *)(v4 + 8 * (v7 / 0x1E)) + 136 * (v7 % 0x1E));
  }
  result = EQKitLayoutContext::EQKitLayoutContext(v8, a2);
  ++a1[5];
  return result;
}

void std::deque<EQKitLayoutContext>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x1E;
  v4 = v2 - 30;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      std::__split_buffer<EQKitLayoutContext *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  std::__split_buffer<EQKitLayoutContext *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_21792E53C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<EQKitLayoutContext *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<EQKitLayoutContext *>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(8 * a2);
}

uint64_t std::deque<EQKitLayoutContext>::pop_back(_QWORD *a1)
{
  unint64_t v2;
  void (***v3)(_QWORD);

  v2 = a1[5] + a1[4] - 1;
  v3 = (void (***)(_QWORD))(*(_QWORD *)(a1[1] + 8 * (v2 / 0x1E)) + 136 * (v2 % 0x1E));
  (**v3)(v3);
  --a1[5];
  return std::deque<EQKitLayoutContext>::__maybe_remove_back_spare[abi:nn180100](a1, 1);
}

uint64_t std::deque<EQKitLayoutContext>::__maybe_remove_back_spare[abi:nn180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 30 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x1E)
    a2 = 1;
  if (v5 < 0x3C)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::deque<void({block_pointer})(objc_object  {objcproto15EQKitLayoutNode}*,EQKit::Layout::Schemata const&),std::allocator<void ()(objc_object  {objcproto15EQKitLayoutNode}*,EQKit::Layout::Schemata const&)>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = a1[2];
  v5 = a1[1];
  v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<void({block_pointer})(objc_object  {objcproto15EQKitLayoutNode}*,EQKit::Layout::Schemata const&),std::allocator<void ()(objc_object  {objcproto15EQKitLayoutNode}*,EQKit::Layout::Schemata const&)>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

void std::deque<void({block_pointer})(objc_object  {objcproto15EQKitLayoutNode}*,EQKit::Layout::Schemata const&),std::allocator<void ()(objc_object  {objcproto15EQKitLayoutNode}*,EQKit::Layout::Schemata const&)>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<EQKitLayoutContext *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<EQKitLayoutContext *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_21792EE4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = a1[2];
  v5 = a1[1];
  v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

void std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<EQKitLayoutContext *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<EQKitLayoutContext *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_21792F1E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::__maybe_remove_back_spare[abi:nn180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = ((v2 - v3) << 6) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200)
    a2 = 1;
  if (v5 < 0x400)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

__n128 std::deque<EQKitLayoutStretchedOperator>::push_back(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __n128 result;
  __int128 v10;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 102 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<EQKitLayoutStretchedOperator>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x66)) + 40 * (v7 % 0x66);
  result = *(__n128 *)a2;
  v10 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)v8 = result;
  *(_OWORD *)(v8 + 16) = v10;
  ++a1[5];
  return result;
}

void std::deque<EQKitLayoutStretchedOperator>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x66;
  v4 = v2 - 102;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      std::__split_buffer<EQKitLayoutContext *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  std::__split_buffer<EQKitLayoutContext *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_21792F61C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<EQKitLayoutStretchedOperator>::__maybe_remove_back_spare[abi:nn180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 102 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x66)
    a2 = 1;
  if (v5 < 0xCC)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

EQKitLayoutElementaryStack *std::deque<EQKitLayoutElementaryStack>::push_back(_QWORD *a1, const EQKitLayoutElementaryStack *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  EQKitLayoutElementaryStack *v8;
  EQKitLayoutElementaryStack *result;

  v4 = a1[1];
  v5 = a1[2];
  v6 = 24 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    std::deque<EQKitLayoutElementaryStack>::__add_back_capacity(a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 == v4)
  {
    v8 = 0;
  }
  else
  {
    v7 = a1[5] + a1[4];
    v8 = (EQKitLayoutElementaryStack *)(*(_QWORD *)(v4 + 8 * (v7 / 0x18)) + 168 * (v7 % 0x18));
  }
  result = EQKitLayoutElementaryStack::EQKitLayoutElementaryStack(v8, a2);
  ++a1[5];
  return result;
}

void std::deque<EQKitLayoutElementaryStack>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x18;
  v4 = v2 - 24;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFC0uLL);
      std::__split_buffer<EQKitLayoutContext *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFC0uLL);
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFC0uLL);
  std::__split_buffer<EQKitLayoutContext *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_21792FA50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<EQKitLayoutElementaryStack>::pop_back(_QWORD *a1)
{
  unint64_t v2;

  v2 = a1[5] + a1[4] - 1;
  EQKitLayoutElementaryStack::~EQKitLayoutElementaryStack((EQKitLayoutElementaryStack *)(*(_QWORD *)(a1[1] + 8 * (v2 / 0x18))
                                                                                       + 168 * (v2 % 0x18)));
  --a1[5];
  return std::deque<EQKitLayoutElementaryStack>::__maybe_remove_back_spare[abi:nn180100](a1, 1);
}

uint64_t std::deque<EQKitLayoutElementaryStack>::__maybe_remove_back_spare[abi:nn180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 24 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x18)
    a2 = 1;
  if (v5 < 0x30)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

double std::deque<EQKitLayoutTable>::push_back(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  double result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 42 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<EQKitLayoutTable>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x2A)) + 96 * (v7 % 0x2A);
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)v8 = &unk_24D828BE0;
  *(_QWORD *)(v8 + 8) = v9;
  *(_QWORD *)(v8 + 80) = 0;
  result = 0.0;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_BYTE *)(v8 + 88) = *(_BYTE *)(a2 + 88);
  ++a1[5];
  return result;
}

void std::deque<EQKitLayoutTable>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x2A;
  v4 = v2 - 42;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFC0uLL);
      std::__split_buffer<EQKitLayoutContext *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFC0uLL);
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFC0uLL);
  std::__split_buffer<EQKitLayoutContext *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_21792FF14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<EQKitLayoutTable>::pop_back(_QWORD *a1)
{
  unint64_t v2;
  void (***v3)(_QWORD);

  v2 = a1[5] + a1[4] - 1;
  v3 = (void (***)(_QWORD))(*(_QWORD *)(a1[1] + 8 * (v2 / 0x2A)) + 96 * (v2 % 0x2A));
  (**v3)(v3);
  --a1[5];
  return std::deque<EQKitLayoutTable>::__maybe_remove_back_spare[abi:nn180100](a1, 1);
}

uint64_t std::deque<EQKitLayoutTable>::__maybe_remove_back_spare[abi:nn180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 42 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x2A)
    a2 = 1;
  if (v5 < 0x54)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::deque<unsigned long>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = a1[2];
  v5 = a1[1];
  v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<unsigned long>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

void std::deque<unsigned long>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<EQKitLayoutContext *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<EQKitLayoutContext *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_2179303A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

EQKitLayoutRow *std::deque<EQKitLayoutRow>::push_back(_QWORD *a1, EQKitLayoutRow *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  EQKitLayoutRow *v8;
  EQKitLayoutRow *result;

  v4 = a1[1];
  v5 = a1[2];
  v6 = 25 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    std::deque<EQKitLayoutRow>::__add_back_capacity(a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 == v4)
  {
    v8 = 0;
  }
  else
  {
    v7 = a1[5] + a1[4];
    v8 = (EQKitLayoutRow *)(*(_QWORD *)(v4 + 8 * (v7 / 0x19)) + 160 * (v7 % 0x19));
  }
  result = EQKitLayoutRow::EQKitLayoutRow(v8, a2);
  ++a1[5];
  return result;
}

void std::deque<EQKitLayoutRow>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x19;
  v4 = v2 - 25;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFA0uLL);
      std::__split_buffer<EQKitLayoutContext *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFA0uLL);
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFA0uLL);
  std::__split_buffer<EQKitLayoutContext *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_217930770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<EQKitLayoutRow>::pop_back(_QWORD *a1)
{
  unint64_t v2;

  v2 = a1[5] + a1[4] - 1;
  EQKitLayoutRow::~EQKitLayoutRow((EQKitLayoutRow *)(*(_QWORD *)(a1[1] + 8 * (v2 / 0x19)) + 160 * (v2 % 0x19)));
  --a1[5];
  return std::deque<EQKitLayoutRow>::__maybe_remove_back_spare[abi:nn180100](a1, 1);
}

uint64_t std::deque<EQKitLayoutRow>::__maybe_remove_back_spare[abi:nn180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 25 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x19)
    a2 = 1;
  if (v5 < 0x32)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::vector<EQKit::ILayout>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        EQKit::ILayout::~ILayout((EQKit::ILayout *)(v4 - 56));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void EQKitLayoutContext::EQKitLayoutContext(EQKitLayoutContext *this, double a2, const Collection *a3, const __CFString *a4, char a5)
{
  *(_QWORD *)this = &off_24D828C00;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = a5;
  *(_WORD *)((char *)this + 17) = 0;
  *((_DWORD *)this + 5) = 1;
  *((double *)this + 3) = a2;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 5) = a4;
  if (a4)
    CFRetain(a4);
  *((double *)this + 6) = a2;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = a3;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 7) = 0x3FE6B851EB851EB8;
  *((double *)this + 8) = fmin(a2, 8.0);
  bzero((char *)this + 104, 1uLL);
  bzero((char *)this + 112, 0x18uLL);
}

void EQKitLayoutContext::EQKitLayoutContext(EQKitLayoutContext *this, const EQKitLayoutContext *a2)
{
  const void *v4;
  const void *v5;
  __int128 v6;

  *(_QWORD *)this = &off_24D828C00;
  EQKit::Script::Info::Info((EQKitLayoutContext *)((char *)this + 8), (const Info *)((char *)a2 + 8));
  *((_OWORD *)this + 3) = *((_OWORD *)a2 + 3);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
  v5 = (const void *)*((_QWORD *)a2 + 11);
  v4 = (const void *)*((_QWORD *)a2 + 12);
  *((_QWORD *)this + 11) = v5;
  *((_QWORD *)this + 12) = v4;
  *((_BYTE *)this + 104) = *((_BYTE *)a2 + 104);
  v6 = *((_OWORD *)a2 + 7);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_OWORD *)this + 7) = v6;
  if (v5)
  {
    CFRetain(v5);
    v4 = (const void *)*((_QWORD *)this + 12);
  }
  if (v4)
    CFRetain(v4);
}

void sub_217930A4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 40);
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

void EQKitLayoutContext::EQKitLayoutContext(uint64_t a1, EQKitLayoutContext *this, uint64_t a3, void *a4, uint64_t a5, char a6, int a7)
{
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  char v27;
  char v28;
  double v29;
  double v30;
  double v31;
  unsigned __int8 v32;
  BOOL v33;
  const void *v34;
  const void *v35;
  uint64_t v37;
  int v38;
  int v39;
  double v40;
  int v41;
  CFTypeRef v42;
  __int128 cf;
  uint64_t v44;
  char v45;

  *(_QWORD *)a1 = &off_24D828C00;
  *(_QWORD *)(a1 + 8) = 0;
  v13 = a1 + 8;
  *(_WORD *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 18) = 0;
  *(_DWORD *)(a1 + 20) = 1;
  *(_QWORD *)(a1 + 24) = 0x4028000000000000;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a3 + 24);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a3 + 56);
  v14 = (uint64_t *)(a1 + 56);
  v15 = EQKitLayoutManager::fontCollection((id *)this);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = a4;
  *(_QWORD *)(a1 + 80) = v15;
  v44 = 0;
  v45 = 1;
  v16 = *((_QWORD *)this + 75);
  v37 = (uint64_t)a4;
  v38 = 9;
  v17 = EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKit::ScriptLevel>>(v16, v16 + 296, (uint64_t)&v37, (uint64_t)&v44);
  v18 = *(_QWORD *)(a3 + 8);
  if (v17)
  {
    v19 = EQKit::ScriptLevel::resolveWithBase((EQKit::ScriptLevel *)&v44, *(_QWORD *)(a3 + 8));
    v18 = *(_QWORD *)(a3 + 8);
  }
  else
  {
    v19 = v18 + a5;
  }
  v20 = *((_QWORD *)this + 75);
  v37 = (uint64_t)a4;
  v38 = 42;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,double>>(v20, v20 + 440, (uint64_t)&v37, v14);
  LODWORD(cf) = 1;
  *((_QWORD *)&cf + 1) = 0;
  v21 = *((_QWORD *)this + 75);
  v37 = (uint64_t)a4;
  v38 = 43;
  if (EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitLength>>(v21, v21 + 32, (uint64_t)&v37, &cf))*(double *)(a1 + 64) = EQKitLength::resolveToAbsoluteWithUnitProviderAndDefault((double *)&cf, a3, fmin(*(double *)(a1 + 48), 8.0));
  *(_QWORD *)&cf = 0;
  v22 = *((_QWORD *)this + 75);
  v37 = (uint64_t)a4;
  v38 = 44;
  if (!EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>>(v22, v22 + 536, (uint64_t)&v37, (const void **)&cf))
  {
    v23 = *(const void **)(a3 + 96);
    *(_QWORD *)(a1 + 96) = v23;
    if (!v23)
      goto LABEL_12;
    goto LABEL_11;
  }
  v23 = (const void *)cf;
  *(_QWORD *)(a1 + 96) = cf;
  if (v23
    || (v24 = (void *)objc_msgSend(MEMORY[0x24BDD1448], "currentHandler"),
        objc_msgSend(v24, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "EQKitLayoutContext::EQKitLayoutContext(EQKitLayoutManager &, const EQKitLayoutContext &, id<EQKitLayoutNode>, NSInteger, BOOL, EQKit::Script::Cramped::Style)"), CFSTR("EQKitLayoutContext.mm"), 104, CFSTR("CGColor not retrieved by attribute collection.")), (v23 = *(const void **)(a1 + 96)) != 0))
  {
LABEL_11:
    CFRetain(v23);
  }
LABEL_12:
  if ((_QWORD)cf)
    CFRelease((CFTypeRef)cf);
  LODWORD(cf) = 0;
  if (objc_msgSend(*(id *)(a1 + 72), "conformsToProtocol:", &unk_254F27758))
    v25 = *(void **)(a1 + 72);
  else
    v25 = 0;
  v26 = *((_QWORD *)this + 75);
  v37 = (uint64_t)a4;
  v38 = 17;
  v27 = EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v26, v26 + 368, (uint64_t)&v37, &cf);
  if (v25)
    v28 = v27;
  else
    v28 = 1;
  if ((v28 & 1) == 0)
  {
    LODWORD(cf) = objc_msgSend(v25, "scriptVariant");
    goto LABEL_24;
  }
  if (v25)
LABEL_24:
    LODWORD(v25) = objc_msgSend(v25, "scriptContext");
  v29 = *(double *)(a1 + 48);
  v30 = v29 * pow(*(long double *)(a1 + 56), (double)(v19 - v18));
  if (v30 <= *(double *)(a1 + 64))
    v31 = *(double *)(a1 + 64);
  else
    v31 = v30;
  if ((void *)objc_msgSend(a4, "operatorCore") == a4)
    v32 = EQKitLayoutManager::isOperatorLargeOp((uint64_t)this, a4);
  else
    v32 = 0;
  v33 = *(_BYTE *)(a3 + 17) != 0;
  if (a7 == 2)
  {
    v33 = 0;
  }
  else if (a7 == 1)
  {
    v33 = 1;
  }
  v34 = *(const void **)(a3 + 40);
  v37 = v19;
  LOBYTE(v38) = a6;
  BYTE1(v38) = v33;
  BYTE2(v38) = v32;
  v39 = cf;
  v40 = v31;
  v41 = (int)v25;
  v42 = v34;
  if (v34)
    CFRetain(v34);
  EQKit::Script::Info::operator=(v13, (uint64_t)&v37);
  if (v42)
    CFRelease(v42);
  if (*(double *)(a1 + 24) == *(double *)(a3 + 24) && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a3 + 20))
  {
    v35 = *(const void **)(a3 + 88);
    *(_QWORD *)(a1 + 88) = v35;
    if (v35)
      CFRetain(v35);
  }
  bzero((void *)(a1 + 104), 1uLL);
}

void sub_217930DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf, uint64_t a15)
{
  uint64_t v15;
  const void *v17;

  v17 = *(const void **)(v15 + 40);
  if (v17)
    CFRelease(v17);
  _Unwind_Resume(exception_object);
}

void EQKitLayoutContext::~EQKitLayoutContext(EQKitLayoutContext *this)
{
  const void *v2;
  const void *v3;

  *(_QWORD *)this = &off_24D828C00;
  v2 = (const void *)*((_QWORD *)this + 11);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)this + 11) = 0;
  }
  CGColorRelease(*((CGColorRef *)this + 12));
  v3 = (const void *)*((_QWORD *)this + 5);
  if (v3)
    CFRelease(v3);
}

{
  EQKitLayoutContext::~EQKitLayoutContext(this);
  JUMPOUT(0x219A153B8);
}

void sub_217930E90(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 40);
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

void EQKitLayoutContext::pInvalidateFonts(EQKitLayoutContext *this)
{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 11);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)this + 11) = 0;
  }
}

uint64_t EQKitLayoutContext::font(EQKitLayoutContext *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 11);
  if (!result)
  {
    result = (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 10) + 56))(*((_QWORD *)this + 10), (char *)this + 8);
    *((_QWORD *)this + 11) = result;
  }
  return result;
}

uint64_t EQKitLayoutContext::newFont(EQKitLayoutContext *this)
{
  return (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 10) + 56))(*((_QWORD *)this + 10), (char *)this + 8);
}

double EQKitLayoutContext::pComputeRuleThickness(EQKitLayoutContext *this)
{
  EQKitLayoutContext::pComputeMathAxis(this);
  return *((double *)this + 14);
}

double EQKitLayoutContext::pComputeMathAxis(EQKitLayoutContext *this)
{
  void *v2;
  id v3;
  const __CFAttributedString *v4;
  const __CTLine *v5;
  CGContext *FakeContext;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGRect ImageBounds;
  CGRect v13;
  CGRect v14;

  v2 = (void *)*((_QWORD *)this + 11);
  if (v2
    || (v2 = (void *)(*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 10) + 56))(*((_QWORD *)this + 10), (char *)this + 8), (*((_QWORD *)this + 11) = v2) != 0))
  {
    v3 = objc_alloc(MEMORY[0x24BDBCE70]);
    v2 = (void *)objc_msgSend(v3, "initWithObjectsAndKeys:", v2, *MEMORY[0x24BDC4C28], 0);
  }
  v4 = (const __CFAttributedString *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1458]), "initWithString:attributes:", CFSTR("−"), v2);
  v5 = CTLineCreateWithAttributedString(v4);
  FakeContext = (CGContext *)EQKitUtilGetFakeContext();
  ImageBounds = CTLineGetImageBounds(v5, FakeContext);
  x = ImageBounds.origin.x;
  y = ImageBounds.origin.y;
  width = ImageBounds.size.width;
  height = ImageBounds.size.height;
  CFRelease(v5);

  v13.origin.x = x;
  v13.origin.y = y;
  v13.size.width = width;
  v13.size.height = height;
  *((CGFloat *)this + 15) = CGRectGetMidY(v13);
  v14.origin.x = x;
  v14.origin.y = y;
  v14.size.width = width;
  v14.size.height = height;
  *((CGFloat *)this + 14) = CGRectGetHeight(v14);
  *((_BYTE *)this + 104) |= 3u;
  return *((double *)this + 15);
}

CGFloat EQKitLayoutContext::pComputeSlantAngle(EQKitLayoutContext *this)
{
  const __CTFont *v2;
  CGFloat SlantAngle;
  CGFloat result;

  *((_BYTE *)this + 104) |= 4u;
  v2 = (const __CTFont *)*((_QWORD *)this + 11);
  if (!v2)
  {
    v2 = (const __CTFont *)(*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 10) + 56))(*((_QWORD *)this + 10), (char *)this + 8);
    *((_QWORD *)this + 11) = v2;
  }
  SlantAngle = CTFontGetSlantAngle(v2);
  result = (SlantAngle + SlantAngle) * 3.14159265 / 360.0;
  *((CGFloat *)this + 16) = result;
  return result;
}

CGFloat EQKitLayoutContext::unitValue(EQKitLayoutContext *this, int a2)
{
  double v2;
  void *v4;
  const __CTFont *v5;
  CGFloat result;

  v2 = 1.0;
  switch(a2)
  {
    case 0:
    case 4:
    case 6:
      v4 = (void *)objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
      objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "virtual CGFloat EQKitLayoutContext::unitValue(EQKitLength::Unit) const"), CFSTR("EQKitLayoutContext.mm"), 283, CFSTR("invalid unit"));
      goto LABEL_10;
    case 2:
      v5 = (const __CTFont *)*((_QWORD *)this + 11);
      if (!v5)
      {
        v5 = (const __CTFont *)(*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 10) + 56))(*((_QWORD *)this + 10), (char *)this + 8);
        *((_QWORD *)this + 11) = v5;
        if (!v5)
          goto LABEL_10;
      }
      result = CTFontGetXHeight(v5);
      break;
    case 3:
      v2 = *((double *)this + 3);
      goto LABEL_10;
    case 5:
      if ((*((_BYTE *)this + 104) & 1) == 0)
        EQKitLayoutContext::pComputeMathAxis(this);
      v2 = *((double *)this + 14);
      goto LABEL_10;
    default:
LABEL_10:
      result = v2;
      break;
  }
  return result;
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKit::ScriptLevel>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  uint64_t result;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;

  v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)a3);
  v8 = v7;
  if ((uint64_t *)(a2 + 8) != v7)
  {
    v9 = v7[6];
    v10 = *((_BYTE *)v7 + 56);
LABEL_3:
    *(_BYTE *)(a4 + 8) = v10;
    *(_QWORD *)a4 = v9;
    return 1;
  }
  result = objc_msgSend(*(id *)a3, "isAttributeDefaultInheritableFromStyle:", *(unsigned int *)(a3 + 8));
  if ((_DWORD)result)
  {
    result = objc_msgSend(*(id *)a3, "parent");
    if (result)
    {
      v12 = (void *)result;
      while (1)
      {
        v13 = objc_msgSend(v12, "layoutStyleNode");
        if (v13)
        {
          v15 = v13;
          v16 = *(_DWORD *)(a3 + 8);
          v14 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)&v15);
          if (v8 != v14)
            break;
        }
        result = objc_msgSend(v12, "parent");
        v12 = (void *)result;
        if (!result)
          return result;
      }
      v9 = v14[6];
      v10 = *((_BYTE *)v14 + 56);
      goto LABEL_3;
    }
  }
  return result;
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,double>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t result;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;

  v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)a3);
  v8 = v7;
  if ((uint64_t *)(a2 + 8) != v7)
  {
    v9 = v7[6];
LABEL_3:
    *a4 = v9;
    return 1;
  }
  result = objc_msgSend(*(id *)a3, "isAttributeDefaultInheritableFromStyle:", *(unsigned int *)(a3 + 8));
  if ((_DWORD)result)
  {
    result = objc_msgSend(*(id *)a3, "parent");
    if (result)
    {
      v11 = (void *)result;
      while (1)
      {
        v12 = objc_msgSend(v11, "layoutStyleNode");
        if (v12)
        {
          v14 = v12;
          v15 = *(_DWORD *)(a3 + 8);
          v13 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)&v14);
          if (v8 != v13)
            break;
        }
        result = objc_msgSend(v11, "parent");
        v11 = (void *)result;
        if (!result)
          return result;
      }
      v9 = v13[6];
      goto LABEL_3;
    }
  }
  return result;
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>>(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4)
{
  uint64_t *v7;
  uint64_t *v8;
  CFTypeRef *v9;
  uint64_t result;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;

  v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)a3);
  v8 = v7;
  if ((uint64_t *)(a2 + 8) != v7)
  {
    v9 = (CFTypeRef *)(v7 + 6);
LABEL_3:
    EQKitTypes::CFRetainRelease::operator=(a4, v9);
    return 1;
  }
  result = objc_msgSend(*(id *)a3, "isAttributeDefaultInheritableFromStyle:", *(unsigned int *)(a3 + 8));
  if ((_DWORD)result)
  {
    result = objc_msgSend(*(id *)a3, "parent");
    if (result)
    {
      v11 = (void *)result;
      while (1)
      {
        v12 = objc_msgSend(v11, "layoutStyleNode");
        if (v12)
        {
          v14 = v12;
          v15 = *(_DWORD *)(a3 + 8);
          v13 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)&v14);
          if (v8 != v13)
            break;
        }
        result = objc_msgSend(v11, "parent");
        v11 = (void *)result;
        if (!result)
          return result;
      }
      v9 = (CFTypeRef *)(v13 + 6);
      goto LABEL_3;
    }
  }
  return result;
}

const void **EQKitTypes::CFRetainRelease::operator=(const void **a1, CFTypeRef *a2)
{
  const void *v4;
  CFTypeRef v5;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  v5 = *a2;
  if (*a2)
    v5 = CFRetain(v5);
  *a1 = v5;
  return a1;
}

void EQKit::Layout::Schemata::~Schemata(id *this)
{
  *this = &off_24D828C28;

}

{
  *this = &off_24D828C28;

}

{
  *this = &off_24D828C28;

  JUMPOUT(0x219A153B8);
}

uint64_t EQKit::Layout::Schemata::Schemata(uint64_t this)
{
  *(_QWORD *)this = &off_24D828C28;
  *(_DWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_24D828C28;
  *(_DWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

EQKit::Layout::Schemata *EQKit::Layout::Schemata::Schemata(EQKit::Layout::Schemata *this, const EQKit::Layout::Schemata *a2)
{
  *(_QWORD *)this = &off_24D828C28;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_QWORD *)this + 2) = *((id *)a2 + 2);
  *((_QWORD *)this + 3) = objc_msgSend(*((id *)a2 + 3), "copy");
  return this;
}

{
  *(_QWORD *)this = &off_24D828C28;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_QWORD *)this + 2) = *((id *)a2 + 2);
  *((_QWORD *)this + 3) = objc_msgSend(*((id *)a2 + 3), "copy");
  return this;
}

uint64_t EQKit::Layout::Schemata::Schemata(uint64_t result, int a2)
{
  *(_QWORD *)result = &off_24D828C28;
  *(_DWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

{
  *(_QWORD *)result = &off_24D828C28;
  *(_DWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t EQKit::Layout::Schemata::Schemata(uint64_t a1, int a2, void *a3)
{
  *(_QWORD *)a1 = &off_24D828C28;
  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = 0;
  return a1;
}

{
  *(_QWORD *)a1 = &off_24D828C28;
  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = 0;
  return a1;
}

{
  *(_QWORD *)a1 = &off_24D828C28;
  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = objc_msgSend(a3, "copy");
  return a1;
}

{
  *(_QWORD *)a1 = &off_24D828C28;
  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = objc_msgSend(a3, "copy");
  return a1;
}

uint64_t EQKit::Layout::Schemata::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {

    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(id *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = objc_msgSend(*(id *)(a2 + 24), "copy");
  }
  return a1;
}

id EQKit::Layout::Schemata::phantom@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_24D828C28;
  *(_DWORD *)(a2 + 8) = 3;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::ident@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_24D828C28;
  *(_DWORD *)(a2 + 8) = 8;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::oper@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_24D828C28;
  *(_DWORD *)(a2 + 8) = 10;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

void EQKit::Layout::Schemata::operFontStretch(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = &off_24D828C28;
  *(_DWORD *)(a1 + 8) = 11;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
}

id EQKit::Layout::Schemata::text@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_24D828C28;
  *(_DWORD *)(a2 + 8) = 22;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::num@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_24D828C28;
  *(_DWORD *)(a2 + 8) = 9;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::fraction@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_24D828C28;
  *(_DWORD *)(a2 + 8) = 7;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::subsuperscript@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_24D828C28;
  *(_DWORD *)(a2 + 8) = 4;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::underover@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_24D828C28;
  *(_DWORD *)(a2 + 8) = 5;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::radical@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_24D828C28;
  *(_DWORD *)(a2 + 8) = 6;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::stack@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_24D828C28;
  *(_DWORD *)(a2 + 8) = 12;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::stackGroup@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_24D828C28;
  *(_DWORD *)(a2 + 8) = 13;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::stackRow@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_24D828C28;
  *(_DWORD *)(a2 + 8) = 14;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::stackLine@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_24D828C28;
  *(_DWORD *)(a2 + 8) = 15;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::stackCarries@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_24D828C28;
  *(_DWORD *)(a2 + 8) = 16;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::stackCarry@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_24D828C28;
  *(_DWORD *)(a2 + 8) = 17;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::longDivision@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_24D828C28;
  *(_DWORD *)(a2 + 8) = 18;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::table@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_24D828C28;
  *(_DWORD *)(a2 + 8) = 19;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::tableRow@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_24D828C28;
  *(_DWORD *)(a2 + 8) = 20;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::padded@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_24D828C28;
  *(_DWORD *)(a2 + 8) = 23;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::space@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_24D828C28;
  *(_DWORD *)(a2 + 8) = 24;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::fenced@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_24D828C28;
  *(_DWORD *)(a2 + 8) = 25;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

id EQKit::Layout::Schemata::enclose@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_24D828C28;
  *(_DWORD *)(a2 + 8) = 28;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

void EQKit::Layout::Schemata::alignGroup(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = &off_24D828C28;
  *(_DWORD *)(a1 + 8) = 26;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
}

void EQKit::Layout::Schemata::alignMark(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = &off_24D828C28;
  *(_DWORD *)(a1 + 8) = 27;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
}

void EQKit::Layout::Schemata::none(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = &off_24D828C28;
  *(_DWORD *)(a1 + 8) = 21;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
}

uint64_t EQKit::Layout::Schemata::subsuperscriptSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 4)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t EQKit::Layout::Schemata::underoverSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 5)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t EQKit::Layout::Schemata::tableSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 19)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t EQKit::Layout::Schemata::tableRowSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 20)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t EQKit::Layout::Schemata::stackSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 12)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t EQKit::Layout::Schemata::stackGroupSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 13)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t EQKit::Layout::Schemata::stackRowSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 14)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t EQKit::Layout::Schemata::radicalSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 6)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t EQKit::Layout::Schemata::textSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 22)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t EQKit::Layout::Schemata::stackLineSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 15)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t EQKit::Layout::Schemata::stackCarriesSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 16)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t EQKit::Layout::Schemata::stackCarrySchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 17)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t EQKit::Layout::Schemata::tokenSchemata(EQKit::Layout::Schemata *this)
{
  if ((*((_DWORD *)this + 2) & 0xFFFFFFFC) == 8)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

BOOL EQKit::Layout::Schemata::isToken(EQKit::Layout::Schemata *this)
{
  return (*((_DWORD *)this + 2) & 0xFFFFFFFC) == 8;
}

uint64_t EQKit::Layout::Schemata::phantomSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 3)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t EQKit::Layout::Schemata::operatorSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 10)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t EQKit::Layout::Schemata::fractionSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 7)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t EQKit::Layout::Schemata::longDivisionSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 18)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t EQKit::Layout::Schemata::rowSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 2)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t EQKit::Layout::Schemata::paddedSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 23)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t EQKit::Layout::Schemata::spaceSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 24)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t EQKit::Layout::Schemata::fencedSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 25)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t EQKit::Layout::Schemata::encloseSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 28)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

id EQKit::Layout::Schemata::node@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result;

  *(_QWORD *)a2 = &off_24D828C28;
  *(_DWORD *)(a2 + 8) = 1;
  result = a1;
  *(_QWORD *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

uint64_t EQKit::Layout::Schemata::nodeSchemata(EQKit::Layout::Schemata *this)
{
  if (*((_DWORD *)this + 2) == 1)
    return *((_QWORD *)this + 2);
  else
    return 0;
}

uint64_t EQKit::Layout::Schemata::row@<X0>(EQKit::Layout::Schemata *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  *(_QWORD *)a2 = &off_24D828C28;
  *(_DWORD *)(a2 + 8) = 2;
  *(_QWORD *)(a2 + 16) = 0;
  result = -[EQKit::Layout::Schemata copy](this, "copy");
  *(_QWORD *)(a2 + 24) = result;
  return result;
}

uint64_t EQKit::Layout::Schemata::children(EQKit::Layout::Schemata *this)
{
  uint64_t v1;

  if (*((_DWORD *)this + 2) != 2)
    return 0;
  v1 = *((_QWORD *)this + 3);
  if (!v1)
    return objc_msgSend(*((id *)this + 2), "schemataChildren");
  return v1;
}

id EQKit::Layout::Schemata::attributedStringWithFont(EQKit::Layout::Schemata *this, const __CTFont *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  if ((*((_DWORD *)this + 2) & 0xFFFFFFFC) == 8)
    v3 = (void *)*((_QWORD *)this + 2);
  else
    v3 = 0;
  v4 = objc_msgSend(v3, "schemataTokenString");
  if (!a2)
    return 0;
  v5 = v4;
  if (!v4)
    return 0;
  v6 = objc_alloc(MEMORY[0x24BDD1458]);
  return (id)objc_msgSend(v6, "initWithString:attributes:", v5, objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjectsAndKeys:", a2, *MEMORY[0x24BDC4C28], *MEMORY[0x24BDBD270], *MEMORY[0x24BDC4EE8], 0));
}

BOOL EQKit::Layout::Schemata::isUnstretchedToken(EQKit::Layout::Schemata *this)
{
  return (*((_DWORD *)this + 2) - 8) < 3;
}

double swap(EQKitLayoutRow *a1, EQKitLayoutRow *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double result;

  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)a2 = v4;
  v5 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v8;
  v9 = *((_QWORD *)a1 + 5);
  *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v9;
  v10 = *((_QWORD *)a1 + 6);
  *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v10;
  v11 = *((_QWORD *)a1 + 7);
  *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v11;
  v12 = *((_QWORD *)a1 + 8);
  *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v12;
  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::swap((uint64_t *)a1 + 9, (uint64_t)a2 + 72);
  v13 = *((_QWORD *)a1 + 12);
  *((_QWORD *)a1 + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v13;
  v14 = *((_QWORD *)a1 + 13);
  *((_QWORD *)a1 + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v14;
  v15 = *((_QWORD *)a1 + 14);
  *((_QWORD *)a1 + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v15;
  v16 = *((_QWORD *)a1 + 15);
  *((_QWORD *)a1 + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v16;
  v17 = *((_QWORD *)a1 + 16);
  *((_QWORD *)a1 + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v17;
  v18 = *((_QWORD *)a1 + 17);
  *((_QWORD *)a1 + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v18;
  result = *((double *)a1 + 18);
  *((_QWORD *)a1 + 18) = *((_QWORD *)a2 + 18);
  *((double *)a2 + 18) = result;
  LODWORD(v18) = *((_DWORD *)a1 + 38);
  *((_DWORD *)a1 + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v18;
  LOBYTE(v18) = *((_BYTE *)a1 + 156);
  *((_BYTE *)a1 + 156) = *((_BYTE *)a2 + 156);
  *((_BYTE *)a2 + 156) = v18;
  return result;
}

void EQKitLayoutRow::EQKitLayoutRow(EQKitLayoutRow *this, char a2)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 9) = (char *)this + 80;
  *((_QWORD *)this + 11) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *(_QWORD *)this = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  *((_QWORD *)this + 18) = 0;
  *((_DWORD *)this + 38) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_BYTE *)this + 156) = a2;
}

void sub_2179322E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  void *v6;
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a2);
  v6 = *(void **)(v2 + 120);
  if (v6)
  {
    *(_QWORD *)(v2 + 128) = v6;
    operator delete(v6);
  }
  v7 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v2 + 104) = v7;
    operator delete(v7);
  }
  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy(v3, *(id **)(v2 + 80));
  v8 = *(void **)(v2 + 32);
  if (v8)
  {
    *(_QWORD *)(v2 + 40) = v8;
    operator delete(v8);
  }
  std::vector<EQKit::ILayout>::__destroy_vector::operator()[abi:nn180100]((void ***)va);
  _Unwind_Resume(a1);
}

void EQKitLayoutRow::EQKitLayoutRow(EQKitLayoutRow *this, const EQKitLayoutRow *a2)
{
  char *v4;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v4 = (char *)this + 8;
  *((_QWORD *)this + 3) = 0;
  std::vector<EQKit::ILayout>::__init_with_size[abi:nn180100]<EQKit::ILayout*,EQKit::ILayout*>((EQKitLayoutRow *)((char *)this + 8), *((_QWORD *)a2 + 1), *((_QWORD *)a2 + 2), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3));
  std::vector<CGPoint>::vector((_QWORD *)v4 + 3, (uint64_t)a2 + 32);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  std::map<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>::map[abi:nn180100]((uint64_t *)this + 9, (uint64_t)a2 + 72);
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  std::vector<EQKitAlignmentGroup>::__init_with_size[abi:nn180100]<EQKitAlignmentGroup*,EQKitAlignmentGroup*>((_QWORD *)this + 12, *((_QWORD *)a2 + 12), *((_QWORD *)a2 + 13), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 13) - *((_QWORD *)a2 + 12)) >> 3));
  std::vector<unsigned long>::vector((_QWORD *)this + 15, (uint64_t)a2 + 120);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_BYTE *)this + 156) = *((_BYTE *)a2 + 156);
  *(_QWORD *)this = objc_msgSend(*(id *)a2, "mutableCopy");
  *((_QWORD *)this + 7) = objc_msgSend(*((id *)a2 + 7), "mutableCopy");
}

void sub_21793244C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  void **v5;
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a2);
  v7 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v2 + 104) = v7;
    operator delete(v7);
  }
  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy(v4, *(id **)(v2 + 80));
  v8 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 40) = v8;
    operator delete(v8);
  }
  std::vector<EQKit::ILayout>::__destroy_vector::operator()[abi:nn180100]((void ***)va);
  _Unwind_Resume(a1);
}

void EQKitLayoutRow::~EQKitLayoutRow(EQKitLayoutRow *this)
{
  void *v2;
  void *v3;
  void *v4;
  void **v5;

  v2 = (void *)*((_QWORD *)this + 15);
  if (v2)
  {
    *((_QWORD *)this + 16) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 12);
  if (v3)
  {
    *((_QWORD *)this + 13) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy((uint64_t)this + 72, *((id **)this + 10));
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  v5 = (void **)((char *)this + 8);
  std::vector<EQKit::ILayout>::__destroy_vector::operator()[abi:nn180100](&v5);
}

void sub_217932548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void *v12;

  v12 = *(void **)(v10 + 120);
  if (v12)
  {
    *(_QWORD *)(v10 + 128) = v12;
    operator delete(v12);
  }
  EQKitLayoutRow::~EQKitLayoutRow(v10);
  a10 = (void **)(v10 + 8);
  std::vector<EQKit::ILayout>::__destroy_vector::operator()[abi:nn180100](&a10);
  _Unwind_Resume(a1);
}

EQKitLayoutRow *EQKitLayoutRow::operator=(EQKitLayoutRow *a1, EQKitLayoutRow *a2)
{
  swap(a1, a2);
  return a1;
}

void EQKitLayoutRow::addChild(uint64_t a1, uint64_t a2, const EQKit::ILayout *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  int v23;
  id v24[2];

  v6 = objc_msgSend(*(id *)a1, "count");
  v7 = *(_QWORD *)a3;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8 >= *(_QWORD *)(a1 + 24))
  {
    v9 = std::vector<EQKit::ILayout>::__push_back_slow_path<EQKit::ILayout const&>(a1 + 8, a3);
  }
  else
  {
    EQKit::ILayout::ILayout(*(EQKit::ILayout **)(a1 + 16), a3);
    v9 = v8 + 56;
    *(_QWORD *)(a1 + 16) = v8 + 56;
  }
  *(_QWORD *)(a1 + 16) = v9;
  if (!(a2 | v7))
    goto LABEL_8;
  v10 = *(id *)a1;
  if (!a2)
    a2 = objc_msgSend(MEMORY[0x24BDBCEF8], "null");
  objc_msgSend(v10, "addObject:", a2);
  if (!v7)
  {
LABEL_8:
    v11 = *(id *)(a1 + 56);
    if (!v11)
    {
      v11 = objc_alloc_init(MEMORY[0x24BDD1698]);
      *(_QWORD *)(a1 + 56) = v11;
    }
    objc_msgSend(v11, "addIndex:", v6);
  }
  v12 = (_QWORD *)*((_QWORD *)a3 + 1);
  if (v12 != (_QWORD *)((char *)a3 + 16))
  {
    v13 = (uint64_t *)(a1 + 80);
    do
    {
      v14 = *v13;
      v15 = *((_DWORD *)v12 + 8);
      if (!*v13)
        goto LABEL_23;
      v16 = a1 + 80;
      do
      {
        v17 = *(_DWORD *)(v14 + 32);
        v18 = v17 < v15;
        if (v17 >= v15)
          v19 = (uint64_t *)v14;
        else
          v19 = (uint64_t *)(v14 + 8);
        if (!v18)
          v16 = v14;
        v14 = *v19;
      }
      while (*v19);
      if ((uint64_t *)v16 == v13 || v15 < *(_DWORD *)(v16 + 32))
      {
LABEL_23:
        v23 = *((_DWORD *)v12 + 8);
        EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)v24, (id *)v12 + 5);
        std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__emplace_unique_key_args<EQKit::ILayoutOffset::Kind,std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset>>(a1 + 72, &v23, (uint64_t)&v23);
        EQKit::ILayoutOffset::~ILayoutOffset(v24);
      }
      v20 = (_QWORD *)v12[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v12[2];
          v22 = *v21 == (_QWORD)v12;
          v12 = v21;
        }
        while (!v22);
      }
      v12 = v21;
    }
    while (v21 != (_QWORD *)((char *)a3 + 16));
  }
}

void sub_217932734(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(exception_object);
}

double EQKitLayoutRow::addChild(EQKitLayoutRow *this, const EQKitLayoutRow *a2)
{
  EQKit::ILayout *v4;
  uint64_t v5;
  const EQKitLayoutRow *v6;
  char **v7;
  char *v8;
  int v9;
  char **v10;
  int v11;
  BOOL v12;
  char **v13;
  const EQKitLayoutRow *v14;
  const EQKitLayoutRow *v15;
  BOOL v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  double result;
  void *v33;
  void *v34;
  int v35;
  id v36[2];

  if (*((_QWORD *)a2 + 7))
  {
    v33 = (void *)objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    objc_msgSend(v33, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void EQKitLayoutRow::addChild(const EQKitLayoutRow &)"), CFSTR("EQKitLayoutRow.mm"), 106, CFSTR("shouldn't add a row with unresolved children"));
  }
  if (*((_QWORD *)a2 + 4) != *((_QWORD *)a2 + 5))
  {
    v34 = (void *)objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    objc_msgSend(v34, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void EQKitLayoutRow::addChild(const EQKitLayoutRow &)"), CFSTR("EQKitLayoutRow.mm"), 107, CFSTR("shouldn't add a row that has performed kerning"));
  }
  v4 = (EQKit::ILayout *)*((_QWORD *)this + 2);
  v5 = *((_QWORD *)this + 1);
  std::vector<EQKit::ILayout>::__insert_with_size[abi:nn180100]<std::__wrap_iter<EQKit::ILayout const*>,std::__wrap_iter<EQKit::ILayout const*>>((EQKitLayoutRow *)((char *)this + 8), v4, *((const EQKit::ILayout **)a2 + 1), *((_QWORD *)a2 + 2), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3));
  objc_msgSend(*(id *)this, "addObjectsFromArray:", *(_QWORD *)a2);
  v6 = (const EQKitLayoutRow *)*((_QWORD *)a2 + 9);
  if (v6 != (const EQKitLayoutRow *)((char *)a2 + 80))
  {
    v7 = (char **)((char *)this + 80);
    do
    {
      v8 = *v7;
      v9 = *((_DWORD *)v6 + 8);
      if (!*v7)
        goto LABEL_17;
      v10 = (char **)((char *)this + 80);
      do
      {
        v11 = *((_DWORD *)v8 + 8);
        v12 = v11 < v9;
        if (v11 >= v9)
          v13 = (char **)v8;
        else
          v13 = (char **)(v8 + 8);
        if (!v12)
          v10 = (char **)v8;
        v8 = *v13;
      }
      while (*v13);
      if (v10 == v7 || v9 < *((_DWORD *)v10 + 8))
      {
LABEL_17:
        v35 = *((_DWORD *)v6 + 8);
        EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)v36, (id *)v6 + 5);
        std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__emplace_unique_key_args<EQKit::ILayoutOffset::Kind,std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset>>((uint64_t)this + 72, &v35, (uint64_t)&v35);
        EQKit::ILayoutOffset::~ILayoutOffset(v36);
      }
      v14 = (const EQKitLayoutRow *)*((_QWORD *)v6 + 1);
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = *(const EQKitLayoutRow **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (const EQKitLayoutRow *)*((_QWORD *)v6 + 2);
          v16 = *(_QWORD *)v15 == (_QWORD)v6;
          v6 = v15;
        }
        while (!v16);
      }
      v6 = v15;
    }
    while (v15 != (const EQKitLayoutRow *)((char *)a2 + 80));
  }
  std::vector<EQKitAlignmentGroup>::__insert_with_size[abi:nn180100]<std::__wrap_iter<EQKitAlignmentGroup const*>,std::__wrap_iter<EQKitAlignmentGroup const*>>((uint64_t *)this + 12, *((_QWORD *)this + 13), *((_QWORD *)a2 + 12), *((_QWORD *)a2 + 13), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 13) - *((_QWORD *)a2 + 12)) >> 3));
  v17 = (_QWORD *)*((_QWORD *)a2 + 15);
  v18 = (_QWORD *)*((_QWORD *)a2 + 16);
  if (v17 != v18)
  {
    v19 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v4 - v5) >> 3);
    v20 = (_QWORD *)((char *)this + 136);
    v21 = (char *)*((_QWORD *)this + 16);
    do
    {
      v22 = *v17 + v19;
      if ((unint64_t)v21 >= *v20)
      {
        v24 = (char *)*((_QWORD *)this + 15);
        v25 = (v21 - v24) >> 3;
        v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 61)
          abort();
        v27 = *v20 - (_QWORD)v24;
        if (v27 >> 2 > v26)
          v26 = v27 >> 2;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
          v28 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
        {
          v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)this + 136, v28);
          v24 = (char *)*((_QWORD *)this + 15);
          v21 = (char *)*((_QWORD *)this + 16);
        }
        else
        {
          v29 = 0;
        }
        v30 = (uint64_t *)&v29[8 * v25];
        *v30 = v22;
        v23 = (char *)(v30 + 1);
        while (v21 != v24)
        {
          v31 = *((_QWORD *)v21 - 1);
          v21 -= 8;
          *--v30 = v31;
        }
        *((_QWORD *)this + 15) = v30;
        *((_QWORD *)this + 16) = v23;
        *((_QWORD *)this + 17) = &v29[8 * v28];
        if (v24)
          operator delete(v24);
      }
      else
      {
        *(_QWORD *)v21 = v22;
        v23 = v21 + 8;
      }
      *((_QWORD *)this + 16) = v23;
      ++v17;
      v21 = v23;
    }
    while (v17 != v18);
  }
  result = *((double *)a2 + 18);
  *((double *)this + 18) = result;
  return result;
}

void sub_217932A4C(_Unwind_Exception *a1)
{
  id *v1;

  EQKit::ILayoutOffset::~ILayoutOffset(v1);
  _Unwind_Resume(a1);
}

uint64_t EQKitLayoutRow::beginNestedRow(uint64_t this)
{
  ++*(_QWORD *)(this + 64);
  return this;
}

uint64_t EQKitLayoutRow::endNestedRow(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = this;
  v2 = *(_QWORD *)(this + 64);
  if (v2
    || (v3 = (void *)objc_msgSend(MEMORY[0x24BDD1448], "currentHandler"),
        this = objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void EQKitLayoutRow::endNestedRow()"), CFSTR("EQKitLayoutRow.mm"), 141, CFSTR("invalid state")), (v2 = *(_QWORD *)(v1 + 64)) != 0))
  {
    *(_QWORD *)(v1 + 64) = v2 - 1;
  }
  return this;
}

void *EQKitLayoutRow::childNodeAtIndex(id *this, unint64_t a2)
{
  void *v4;

  if (objc_msgSend(*this, "count") <= a2)
    v4 = 0;
  else
    v4 = (void *)objc_msgSend(*this, "objectAtIndex:", a2);
  if (objc_msgSend(v4, "conformsToProtocol:", &unk_254F27378))
    return v4;
  else
    return 0;
}

uint64_t EQKitLayoutRow::overallLayout@<X0>(EQKitLayoutRow *this@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v4;
  void *v6;
  EQKitHBox *v7;
  uint64_t v8;
  int v9;
  void *v10;
  _BYTE v11[56];

  EQKit::ILayout::ILayout((EQKit::ILayout *)a2, 0);
  if (*((_QWORD *)this + 7))
  {
    v10 = (void *)objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "EQKit::ILayout EQKitLayoutRow::overallLayout() const"), CFSTR("EQKitLayoutRow.mm"), 159, CFSTR("can't call overallLayout() with unresolved children"));
  }
  v4 = *((_QWORD *)this + 1);
  if (*((_QWORD *)this + 2) - v4 == 56)
    return EQKit::ILayout::operator=((uint64_t)a2, v4);
  v6 = EQKitLayoutRow::newArrayOfChildBoxes(this);
  v7 = -[EQKitCompoundBox initWithChildBoxes:]([EQKitHBox alloc], "initWithChildBoxes:", v6);
  EQKit::ILayout::ILayout((EQKit::ILayout *)v11, &v7->super.super);
  EQKit::ILayout::operator=((uint64_t)a2, (uint64_t)v11);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)v11);
  if (a2 + 1 != (uint64_t **)((char *)this + 72))
    std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *> *,long>>(a2 + 1, *((_QWORD **)this + 9), (_QWORD *)this + 10);

  v8 = *((_QWORD *)this + 1);
  v9 = 6;
  while (v8 != *((_QWORD *)this + 2))
  {
    if (v9 >= ((*(unsigned __int16 *)(v8 + 32) >> 10) & 7))
      v9 = (*(unsigned __int16 *)(v8 + 32) >> 10) & 7;
    v8 += 56;
  }
  return EQKit::ILayout::setVerticalContentClassification((uint64_t)a2, v9);
}

void sub_217932C8C(_Unwind_Exception *a1)
{
  EQKit::ILayout *v1;

  EQKit::ILayout::~ILayout(v1);
  _Unwind_Resume(a1);
}

void *EQKitLayoutRow::newArrayOfChildBoxes(EQKitLayoutRow *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  double v13;
  EQKitHSpace *v14;

  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v4 = (v2 - v3) / 56;
  v6 = *((_QWORD *)this + 4);
  v5 = *((_QWORD *)this + 5);
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCEB8]), "initWithCapacity:", v4);
  if (v2 != v3)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = (v5 - v6) >> 4;
    if (v4 <= 1)
      v12 = 1;
    else
      v12 = v4;
    do
    {
      if (*(_QWORD *)(*((_QWORD *)this + 1) + v9))
        objc_msgSend(v7, "addObject:");
      if (v10 < v11)
      {
        v13 = *(double *)(*((_QWORD *)this + 4) + v8);
        if (v13 != 0.0)
        {
          v14 = -[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", v13);
          objc_msgSend(v7, "addObject:", v14);

        }
      }
      ++v10;
      v9 += 56;
      v8 += 16;
    }
    while (v12 != v10);
  }
  return v7;
}

BOOL EQKitLayoutRow::isNewRowRequiredForStretching(EQKitLayoutRow *this)
{
  return *((_QWORD *)this + 1) != *((_QWORD *)this + 2) || *((_QWORD *)this + 12) != *((_QWORD *)this + 13);
}

void EQKitLayoutRow::determineVSize(EQKitLayoutRow *this, double *a2, double *a3)
{
  EQKitHBox *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v8 = EQKitLayoutRow::newArrayOfChildBoxes(this);
  v5 = -[EQKitCompoundBox initWithChildBoxes:]([EQKitHBox alloc], "initWithChildBoxes:", v8);
  -[EQKitCompoundBox height](v5, "height");
  *(_QWORD *)a2 = v6;
  -[EQKitCompoundBox depth](v5, "depth");
  *(_QWORD *)a3 = v7;

}

void EQKitLayoutRow::resolveKerning(EQKitLayoutRow *this, const EQKit::Kerning::Manager *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t i;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  __int16 v9;
  uint64_t v10;
  void *v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  _QWORD *v21;

  v21 = (_QWORD *)((char *)this + 32);
  if (*((_QWORD *)this + 4) == *((_QWORD *)this + 5))
  {
    v3 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3);
    std::vector<EQKitLayoutRow::Kerning>::resize((uint64_t)v21, v3);
    if (v3 >= 2)
    {
      v4 = 0;
      for (i = 1; i < v3; ++i)
      {
        v6 = *((_QWORD *)this + 1);
        v7 = v6 + 56 * v4;
        v9 = *(_WORD *)(v7 + 32);
        v8 = (unsigned __int16 *)(v7 + 32);
        if ((v9 & 0x200) == 0 && i < v3)
        {
          v10 = v6 + 56 * i + 32;
          while ((*(_WORD *)v10 & 0x200) != 0)
          {
            ++i;
            v10 += 56;
            if (v3 == i)
            {
              i = v3;
              goto LABEL_14;
            }
          }
          v11 = *(void **)(v6 + 56 * v4);
          v12 = *(void **)(v10 - 32);
          v13 = *MEMORY[0x24BDBEFB0];
          v14 = *(double *)(MEMORY[0x24BDBEFB0] + 8);
          objc_msgSend(v11, "opticalAlignWidth");
          v16 = v6 + 56 * v4;
          if (*(double *)(v16 + 48) >= *(double *)(v10 + 8))
            v17 = *(double *)(v16 + 48);
          else
            v17 = *(double *)(v10 + 8);
          v18 = EQKit::Kerning::Manager::kerningDistanceRequiredToSatisfyMinClearance(a2, (*v8 >> 2) & 3, v11, *(_WORD *)v10 & 3, v12, v13, v14, v15, 0.0, v17);
          v19 = *v21 + 16 * v4;
          *(double *)v19 = v18;
          *(_QWORD *)(v19 + 8) = i;
        }
LABEL_14:
        v4 = i;
      }
    }
  }
}

void std::vector<EQKitLayoutRow::Kerning>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<EQKitLayoutRow::Kerning>::__append((void **)a1, a2 - v2);
  }
}

void EQKitLayoutRow::resolveLayouts(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v4 = (void *)a1[7];
  if (!v4)
  {
    v8 = (void *)objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void EQKitLayoutRow::resolveLayouts(EQKit::ILayoutVector &)"), CFSTR("EQKitLayoutRow.mm"), 275, CFSTR("invalid state"));
    v4 = (void *)a1[7];
  }

  a1[7] = 0;
  v5 = a1[1];
  a1[1] = *a2;
  *a2 = v5;
  v6 = a1[2];
  a1[2] = a2[1];
  a2[1] = v6;
  v7 = a1[3];
  a1[3] = a2[2];
  a2[2] = v7;
}

void EQKitLayoutRow::beginAlignmentGroup(_QWORD *a1, int a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  _BYTE v18[24];

  if (a1[1] == a1[2] || a1[15] != a1[16])
  {
    EQKitAlignmentGroup::EQKitAlignmentGroup((uint64_t)v18, a2);
    v3 = a1[13];
    if (v3 >= a1[14])
    {
      v4 = std::vector<EQKitAlignmentGroup>::__push_back_slow_path<EQKitAlignmentGroup>(a1 + 12, (uint64_t)v18);
    }
    else
    {
      EQKitAlignmentGroup::EQKitAlignmentGroup(a1[13], (uint64_t)v18);
      v4 = v3 + 24;
      a1[13] = v3 + 24;
    }
    a1[13] = v4;
    v5 = a1[17];
    v6 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[2] - a1[1]) >> 3);
    v7 = (uint64_t *)a1[16];
    if ((unint64_t)v7 >= v5)
    {
      v9 = (uint64_t *)a1[15];
      v10 = v7 - v9;
      v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 61)
        abort();
      v12 = v5 - (_QWORD)v9;
      if (v12 >> 2 > v11)
        v11 = v12 >> 2;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v11;
      if (v13)
      {
        v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 17), v13);
        v9 = (uint64_t *)a1[15];
        v7 = (uint64_t *)a1[16];
      }
      else
      {
        v14 = 0;
      }
      v15 = (uint64_t *)&v14[8 * v10];
      v16 = &v14[8 * v13];
      *v15 = v6;
      v8 = v15 + 1;
      while (v7 != v9)
      {
        v17 = *--v7;
        *--v15 = v17;
      }
      a1[15] = v15;
      a1[16] = v8;
      a1[17] = v16;
      if (v9)
        operator delete(v9);
    }
    else
    {
      *v7 = v6;
      v8 = v7 + 1;
    }
    a1[16] = v8;
  }
}

void sub_217933204(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 104) = v2;
  _Unwind_Resume(a1);
}

void EQKitLayoutRow::buildAlignmentGroups(EQKitLayoutRow *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  EQKitAlignmentGroup *v11;
  uint64_t v12;
  uint64_t v13;
  EQKitBox **v14;
  EQKitBox *v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  id v23[2];
  id v24[2];

  v3 = *((_QWORD *)this + 12);
  v2 = *((_QWORD *)this + 13);
  v4 = (v2 - v3) / 24;
  if (v4 != (uint64_t)(*((_QWORD *)this + 16) - *((_QWORD *)this + 15)) >> 3)
  {
    v20 = (void *)objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    objc_msgSend(v20, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void EQKitLayoutRow::buildAlignmentGroups()"), CFSTR("EQKitLayoutRow.mm"), 293, CFSTR("should have a start index for each alignment group"));
    v3 = *((_QWORD *)this + 12);
    v2 = *((_QWORD *)this + 13);
    v4 = (v2 - v3) / 24;
  }
  if (v2 != v3)
  {
    v5 = 0;
    if (v4 <= 1)
      v6 = 1;
    else
      v6 = v4;
    v22 = v6;
    do
    {
      v7 = v5;
      v8 = *((_QWORD *)this + 15);
      if (++v5 >= v4)
        v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3);
      else
        v9 = *(_QWORD *)(v8 + 8 * v5);
      v10 = *(_QWORD *)(v8 + 8 * v7);
      if (v10 < v9)
      {
        v11 = (EQKitAlignmentGroup *)(*((_QWORD *)this + 12) + 24 * v7);
        v12 = 56 * v10;
        v13 = 16 * v10;
        do
        {
          v14 = (EQKitBox **)(*((_QWORD *)this + 1) + v12);
          v15 = *v14;
          if (!*v14)
          {
            v21 = (void *)objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
            objc_msgSend(v21, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void EQKitLayoutRow::buildAlignmentGroups()"), CFSTR("EQKitLayoutRow.mm"), 308, CFSTR("children should have been resolved by now"));
          }
          EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)v24, 0, 0.0);
          if (EQKit::ILayout::getOffsetOfKind((uint64_t)v14, 3, v24))
          {
            v16 = EQKit::ILayoutOffset::offsetInBox((EQKit::ILayoutOffset *)v24, v15);
            EQKitAlignmentGroup::saveAlignmentPoint(v11, v16);
          }
          if (EQKitAlignmentGroup::needsDecimalAlignmentPoint(v11))
          {
            EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)v23, 0, 0.0);
            if (EQKit::ILayout::getOffsetOfKind((uint64_t)v14, 2, v23))
            {
              v17 = EQKit::ILayoutOffset::offsetInBox((EQKit::ILayoutOffset *)v23, v15);
              EQKitAlignmentGroup::saveAlignmentPoint(v11, v17);
            }
            EQKit::ILayoutOffset::~ILayoutOffset(v23);
          }
          -[EQKitBox width](v15, "width");
          EQKitAlignmentGroup::increaseWidth(v11, v18);
          v19 = *((_QWORD *)this + 4);
          if (*(_QWORD *)(v19 + v13 + 8) < v9)
            EQKitAlignmentGroup::increaseWidth(v11, *(double *)(v19 + v13));
          EQKit::ILayoutOffset::~ILayoutOffset(v24);
          ++v10;
          v12 += 56;
          v13 += 16;
        }
        while (v9 != v10);
      }
    }
    while (v5 != v22);
  }
}

void sub_21793348C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  EQKit::ILayoutOffset::~ILayoutOffset((id *)va);
  _Unwind_Resume(a1);
}

void EQKitLayoutRow::addToAlignmentContext(EQKitLayoutRow *this, EQKitGroupAlignmentContext *a2)
{
  uint64_t *v3;
  void *v4;

  v3 = (uint64_t *)((char *)this + 96);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3) != (uint64_t)(*((_QWORD *)this + 16) - *((_QWORD *)this + 15)) >> 3)
  {
    v4 = (void *)objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void EQKitLayoutRow::addToAlignmentContext(EQKitGroupAlignmentContext &) const"), CFSTR("EQKitLayoutRow.mm"), 337, CFSTR("should have a start index for each alignment group"));
  }
  EQKitGroupAlignmentContext::addRow((uint64_t *)a2, v3);
}

void EQKitLayoutRow::overallLayoutWithAlignmentContext(EQKitLayoutRow *this@<X0>, const EQKitGroupAlignmentContext *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  id v6;
  unint64_t i;
  uint64_t v8;
  id v9;
  EQKitHSpace *v10;
  const EQKitAlignmentGroup *v11;
  EQKitHSpace *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  EQKitHSpace *v19;
  EQKitHSpace *v20;
  EQKitHBox *v21;
  EQKitHSpace *v22;
  EQKitHBox *v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26[7];

  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3) != (uint64_t)(*((_QWORD *)this + 16) - *((_QWORD *)this + 15)) >> 3)
  {
    v24 = (void *)objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    objc_msgSend(v24, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "EQKit::ILayout EQKitLayoutRow::overallLayoutWithAlignmentContext(const EQKitGroupAlignmentContext &) const"), CFSTR("EQKitLayoutRow.mm"), 344, CFSTR("should have a start index for each alignment group"));
  }
  EQKit::ILayout::ILayout(a3, 0);
  if (*((_QWORD *)this + 12) == *((_QWORD *)this + 13))
  {
    EQKitLayoutRow::overallLayout(this, v26);
    EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)v26);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v26);
  }
  else
  {
    v25 = (uint64_t)a3;
    v6 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
    for (i = 0; ; i = v13)
    {
      v8 = *((_QWORD *)this + 12);
      if (i >= 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 13) - v8) >> 3))
        break;
      v9 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
      v10 = [EQKitHSpace alloc];
      v11 = (const EQKitAlignmentGroup *)(v8 + 24 * i);
      EQKitGroupAlignmentContext::leftSpaceRequiredForGroup(a2, v11, i);
      v12 = -[EQKitHSpace initWithWidth:](v10, "initWithWidth:");
      objc_msgSend(v9, "addObject:", v12);

      v13 = i + 1;
      v14 = *((_QWORD *)this + 15);
      if (i + 1 >= (*((_QWORD *)this + 16) - v14) >> 3)
        v15 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3);
      else
        v15 = *(_QWORD *)(v14 + 8 * v13);
      v16 = *(_QWORD *)(v14 + 8 * i);
      v17 = v15 - v16;
      if (v15 > v16)
      {
        v18 = 56 * v16;
        do
        {
          objc_msgSend(v9, "addObject:", *(_QWORD *)(*((_QWORD *)this + 1) + v18), v25);
          v18 += 56;
          --v17;
        }
        while (v17);
      }
      v19 = [EQKitHSpace alloc];
      EQKitGroupAlignmentContext::rightSpaceRequiredForGroup(a2, v11, i);
      v20 = -[EQKitHSpace initWithWidth:](v19, "initWithWidth:");
      objc_msgSend(v9, "addObject:", v20);

      v21 = -[EQKitCompoundBox initWithChildBoxes:]([EQKitHBox alloc], "initWithChildBoxes:", v9);
      objc_msgSend(v6, "addObject:", v21);

    }
    v22 = -[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", EQKitGroupAlignmentContext::widthOfGroupsAfterIndex(a2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 3) - 1));
    objc_msgSend(v6, "addObject:", v22);

    v23 = -[EQKitCompoundBox initWithChildBoxes:]([EQKitHBox alloc], "initWithChildBoxes:", v6);
    EQKit::ILayout::ILayout((EQKit::ILayout *)v26, &v23->super.super);
    EQKit::ILayout::operator=(v25, (uint64_t)v26);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)v26);
    if ((EQKitLayoutRow *)(v25 + 8) != (EQKitLayoutRow *)((char *)this + 72))
      std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *> *,long>>((uint64_t **)(v25 + 8), *((_QWORD **)this + 9), (_QWORD *)this + 10);

  }
}

void sub_21793385C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  EQKit::ILayout *v2;
  va_list va;

  va_start(va, a2);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)va);
  EQKit::ILayout::~ILayout(v2);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          *((_DWORD *)v8 + 8) = *((_DWORD *)v9 + 8);
          EQKit::ILayoutOffset::operator=((uint64_t)(v8 + 5), (uint64_t)(v9 + 5));
          std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__node_insert_multi(v5, (uint64_t)v16);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          v10 = (_QWORD *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = (_QWORD *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v11 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:nn180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__emplace_multi<std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset> const&>((uint64_t)v5, (uint64_t)(a2 + 4));
      v12 = (_QWORD *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)a2[2];
          v11 = *v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_217933A08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__node_insert_multi(uint64_t **a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;

  v3 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 32) >= *((_DWORD *)v4 + 8))
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

uint64_t std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:nn180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy(*(_QWORD *)a1, *(id **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = *(_QWORD *)(v3 + 16);
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy(*(_QWORD *)a1, (id *)v2);
  }
  return a1;
}

void std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy(uint64_t a1, id *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy(a1, a2[1]);
    EQKit::ILayoutOffset::~ILayoutOffset(a2 + 5);
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__emplace_multi<std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v8[3];

  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__construct_node<std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset> const&>(a1, a2, (uint64_t)v8);
  v3 = (uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (*((_DWORD *)v8[0] + 8) >= *((_DWORD *)v4 + 8))
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v3, v5, v8[0]);
  v6 = v8[0];
  v8[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>>>>::reset[abi:nn180100]((uint64_t)v8, 0);
  return v6;
}

EQKit::ILayoutOffset *std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__construct_node<std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  EQKit::ILayoutOffset *result;

  v5 = a1 + 8;
  v6 = operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v6[8] = *(_DWORD *)a2;
  result = EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)(v6 + 10), (id *)(a2 + 8));
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_217933C10(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>>>>::reset[abi:nn180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>>>>::reset[abi:nn180100](uint64_t a1, uint64_t a2)
{
  id *v2;

  v2 = *(id **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      EQKit::ILayoutOffset::~ILayoutOffset(v2 + 5);
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::swap(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *result;
  *result = *(_QWORD *)a2;
  *(_QWORD *)a2 = v2;
  v5 = result[1];
  v4 = result[2];
  v3 = result + 1;
  *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v4;
  if (result[2])
    result = (uint64_t *)(*v3 + 16);
  *result = (uint64_t)v3;
  v6 = (_QWORD *)(*(_QWORD *)(a2 + 8) + 16);
  if (!v4)
    v6 = (_QWORD *)a2;
  *v6 = a2 + 8;
  return result;
}

uint64_t *std::map<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>::map[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *> *,long>>>(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_217933D00(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy(v1, *(id **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *> *,long>>>(uint64_t *result, int *a2, int *a3)
{
  int *v4;
  uint64_t **v5;
  uint64_t *v6;
  int *v7;
  int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__emplace_hint_unique_key_args<EQKit::ILayoutOffset::Kind,std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset> const&>(v5, v6, v4 + 8, (uint64_t)(v4 + 8));
      v7 = (int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__emplace_hint_unique_key_args<EQKit::ILayoutOffset::Kind,std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset> const&>(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  uint64_t *v12;

  v6 = std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__find_equal<EQKit::ILayoutOffset::Kind>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__construct_node<std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>>>>::reset[abi:nn180100]((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__find_equal<EQKit::ILayoutOffset::Kind>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void std::vector<EQKitAlignmentGroup>::__init_with_size[abi:nn180100]<EQKitAlignmentGroup*,EQKitAlignmentGroup*>(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    std::vector<std::string>::__vallocate[abi:nn180100](a1, a4);
    std::vector<EQKitAlignmentGroup>::__construct_at_end<EQKitAlignmentGroup*,EQKitAlignmentGroup*>((uint64_t)a1, a2, a3);
  }
}

void std::vector<EQKitAlignmentGroup>::__construct_at_end<EQKitAlignmentGroup*,EQKitAlignmentGroup*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 8);
  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      EQKitAlignmentGroup::EQKitAlignmentGroup(v4 + v7, a2 + v7);
      v7 += 24;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_217934090(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    std::vector<unsigned long>::__vallocate[abi:nn180100](a1, v5 >> 3);
    v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

char *std::vector<unsigned long>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t std::vector<EQKit::ILayout>::__push_back_slow_path<EQKit::ILayout const&>(uint64_t a1, const EQKit::ILayout *a2)
{
  EQKit::ILayout *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v14;
  EQKit::ILayout *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v2 = *(EQKit::ILayout **)a1;
  v3 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492)
    abort();
  v8 = *(_QWORD *)(a1 + 16);
  v7 = a1 + 16;
  v9 = 0x6DB6DB6DB6DB6DB7 * ((v8 - (uint64_t)v2) >> 3);
  if (2 * v9 > v4)
    v4 = 2 * v9;
  if (v9 >= 0x249249249249249)
    v10 = 0x492492492492492;
  else
    v10 = v4;
  v18 = v7;
  if (v10)
    v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKit::ILayout>>(v7, v10);
  else
    v11 = 0;
  v14 = v11;
  v15 = (EQKit::ILayout *)&v11[56 * v3];
  v17 = &v11[56 * v10];
  EQKit::ILayout::ILayout(v15, a2);
  v16 = (char *)v15 + 56;
  std::vector<EQKit::ILayout>::__swap_out_circular_buffer((EQKit::ILayout **)a1, &v14);
  v12 = *(_QWORD *)(a1 + 8);
  std::__split_buffer<EQKit::ILayout>::~__split_buffer((uint64_t)&v14);
  return v12;
}

void sub_217934238(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<EQKit::ILayout>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

EQKit::ILayout *std::vector<EQKit::ILayout>::__swap_out_circular_buffer(EQKit::ILayout **a1, _QWORD *a2)
{
  const EQKit::ILayout *v4;
  const EQKit::ILayout *v5;
  EQKit::ILayout *result;
  EQKit::ILayout *v7;
  EQKit::ILayout *v8;
  EQKit::ILayout *v9;

  v5 = *a1;
  v4 = a1[1];
  result = (EQKit::ILayout *)a2[1];
  while (v4 != v5)
  {
    v4 = (const EQKit::ILayout *)((char *)v4 - 56);
    result = EQKit::ILayout::ILayout((EQKit::ILayout *)((char *)result - 56), v4);
  }
  a2[1] = result;
  v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = (EQKit::ILayout *)a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = (EQKit::ILayout *)a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<EQKit::ILayout>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    EQKit::ILayout::~ILayout((EQKit::ILayout *)(i - 56));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__emplace_unique_key_args<EQKit::ILayoutOffset::Kind,std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset>>(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t **v5;
  int v6;
  uint64_t *v7;
  int v8;
  uint64_t *v10[3];

  v5 = (uint64_t **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v6 = *a2;
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t *)v4;
        v8 = *(_DWORD *)(v4 + 32);
        if (v6 >= v8)
          break;
        v4 = *v7;
        v5 = (uint64_t **)v7;
        if (!*v7)
          goto LABEL_10;
      }
      if (v8 >= v6)
        break;
      v4 = v7[1];
      if (!v4)
      {
        v5 = (uint64_t **)(v7 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
    v7 = (uint64_t *)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__construct_node<std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset> const&>(a1, a3, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v7, v5, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>>>>::reset[abi:nn180100]((uint64_t)v10, 0);
  }
  return v7;
}

EQKit::ILayout *std::vector<EQKit::ILayout>::__insert_with_size[abi:nn180100]<std::__wrap_iter<EQKit::ILayout const*>,std::__wrap_iter<EQKit::ILayout const*>>(EQKit::ILayout *a1, EQKit::ILayout *a2, const EQKit::ILayout *a3, uint64_t a4, uint64_t a5)
{
  EQKit::ILayout *v5;
  const EQKit::ILayout *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  EQKit::ILayout *v22;
  uint64_t v23;
  EQKit::ILayout *v24;
  _QWORD v26[2];
  EQKit::ILayout *v27;
  char *v28;
  uint64_t v29;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = *((_QWORD *)a1 + 2);
    v9 = (uint64_t)a1 + 16;
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - v12) >> 3) >= a5)
    {
      v20 = v12 - (_QWORD)a2;
      if (a5 <= 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - (_QWORD)a2) >> 3))
      {
        v21 = (uint64_t)a3 + 56 * a5;
      }
      else
      {
        v21 = (uint64_t)a3 + 8 * ((uint64_t)(v12 - (_QWORD)a2) >> 3);
        std::vector<EQKit::ILayout>::__construct_at_end<EQKit::ILayout*,EQKit::ILayout*>(a1, v21, a4);
        if (v20 < 1)
          return v5;
      }
      std::vector<EQKit::ILayout>::__move_range((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)v5 + 56 * a5);
      std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<EQKit::ILayout const*>,std::__wrap_iter<EQKit::ILayout const*>,EQKit::ILayout*,0>((uint64_t)v7, v21, (uint64_t)v5);
    }
    else
    {
      v13 = *(_QWORD *)a1;
      v14 = a5 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
      if (v14 > 0x492492492492492)
        abort();
      v15 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a2 - v13) >> 3);
      v16 = 0x6DB6DB6DB6DB6DB7 * ((v10 - v13) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x249249249249249)
        v18 = 0x492492492492492;
      else
        v18 = v17;
      v29 = v9;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKit::ILayout>>(v9, v18);
      else
        v19 = 0;
      v22 = (EQKit::ILayout *)&v19[56 * v15];
      v26[0] = v19;
      v26[1] = v22;
      v27 = v22;
      v28 = &v19[56 * v18];
      v23 = 56 * a5;
      v24 = (EQKit::ILayout *)((char *)v22 + 56 * a5);
      do
      {
        EQKit::ILayout::ILayout(v22, v7);
        v22 = (EQKit::ILayout *)((char *)v22 + 56);
        v7 = (const EQKit::ILayout *)((char *)v7 + 56);
        v23 -= 56;
      }
      while (v23);
      v27 = v24;
      v5 = std::vector<EQKit::ILayout>::__swap_out_circular_buffer((uint64_t)a1, v26, v5);
      std::__split_buffer<EQKit::ILayout>::~__split_buffer((uint64_t)v26);
    }
  }
  return v5;
}

void sub_2179345C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<EQKit::ILayout>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<EQKit::ILayout>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  EQKit::ILayout *v8;
  const EQKit::ILayout *v10;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = (EQKit::ILayout *)v6;
  if (v7 < a3)
  {
    v10 = (const EQKit::ILayout *)(a2 + v6 - a4);
    v8 = *(EQKit::ILayout **)(a1 + 8);
    do
    {
      EQKit::ILayout::ILayout(v8, v10);
      v10 = (const EQKit::ILayout *)((char *)v10 + 56);
      v8 = (EQKit::ILayout *)((char *)v8 + 56);
    }
    while ((unint64_t)v10 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,EQKit::ILayout *,EQKit::ILayout *,EQKit::ILayout *,0>(a2, v7, v6);
}

void sub_21793466C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

EQKit::ILayout *std::vector<EQKit::ILayout>::__swap_out_circular_buffer(uint64_t a1, _QWORD *a2, EQKit::ILayout *a3)
{
  const EQKit::ILayout *v3;
  EQKit::ILayout *v6;
  EQKit::ILayout *v7;
  EQKit::ILayout *v8;
  const EQKit::ILayout *v9;
  const EQKit::ILayout *v10;
  EQKit::ILayout *v11;
  EQKit::ILayout *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a3;
  v6 = (EQKit::ILayout *)a2[1];
  v7 = *(EQKit::ILayout **)a1;
  v8 = v6;
  if (v7 != a3)
  {
    v9 = a3;
    v8 = (EQKit::ILayout *)a2[1];
    do
    {
      v9 = (const EQKit::ILayout *)((char *)v9 - 56);
      v8 = EQKit::ILayout::ILayout((EQKit::ILayout *)((char *)v8 - 56), v9);
    }
    while (v9 != v7);
  }
  a2[1] = v8;
  v10 = *(const EQKit::ILayout **)(a1 + 8);
  v11 = (EQKit::ILayout *)a2[2];
  if (v10 != v3)
  {
    do
    {
      EQKit::ILayout::ILayout(v11, v3);
      v3 = (const EQKit::ILayout *)((char *)v3 + 56);
      v11 = (EQKit::ILayout *)((char *)v11 + 56);
    }
    while (v3 != v10);
    v8 = (EQKit::ILayout *)a2[1];
  }
  a2[2] = v11;
  v12 = *(EQKit::ILayout **)a1;
  *(_QWORD *)a1 = v8;
  a2[1] = v12;
  v13 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2[2];
  a2[2] = v13;
  v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,EQKit::ILayout *,EQKit::ILayout *,EQKit::ILayout *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a2 != a1)
  {
    v6 = a2;
    do
    {
      v6 -= 56;
      a3 -= 56;
      EQKit::ILayout::operator=(a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<EQKit::ILayout const*>,std::__wrap_iter<EQKit::ILayout const*>,EQKit::ILayout*,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      EQKit::ILayout::operator=(a3, v4);
      v4 += 56;
      a3 += 56;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t std::vector<EQKitAlignmentGroup>::__insert_with_size[abi:nn180100]<std::__wrap_iter<EQKitAlignmentGroup const*>,std::__wrap_iter<EQKitAlignmentGroup const*>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *__p;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      v20 = v12 - a2;
      if (a5 <= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - a2) >> 3)))
      {
        v21 = a3 + 24 * a5;
      }
      else
      {
        v21 = a3 + 8 * ((uint64_t)(v12 - a2) >> 3);
        std::vector<EQKitAlignmentGroup>::__construct_at_end<EQKitAlignmentGroup*,EQKitAlignmentGroup*>((uint64_t)a1, v21, a4);
        if (v20 < 1)
          return v5;
      }
      std::vector<EQKitAlignmentGroup>::__move_range((uint64_t)a1, v5, v12, v5 + 24 * a5);
      if (v21 != v7)
      {
        v22 = v5;
        do
        {
          v23 = *(_OWORD *)v7;
          *(_QWORD *)(v22 + 16) = *(_QWORD *)(v7 + 16);
          *(_OWORD *)v22 = v23;
          v22 += 24;
          v7 += 24;
        }
        while (v7 != v21);
      }
    }
    else
    {
      v13 = *a1;
      v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL)
        abort();
      v15 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v13) >> 3);
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 3);
      if (v16 >= 0x555555555555555)
        v18 = 0xAAAAAAAAAAAAAAALL;
      else
        v18 = v17;
      v33 = v9;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v9, v18);
      else
        v19 = 0;
      v24 = (uint64_t)&v19[24 * v15];
      __p = v19;
      v30 = v24;
      v31 = v24;
      v32 = &v19[24 * v18];
      v25 = 3 * a5;
      v26 = v24 + 24 * a5;
      v27 = 8 * v25;
      do
      {
        EQKitAlignmentGroup::EQKitAlignmentGroup(v24, v7);
        v24 += 24;
        v7 += 24;
        v27 -= 24;
      }
      while (v27);
      v31 = v26;
      v5 = std::vector<EQKitAlignmentGroup>::__swap_out_circular_buffer(a1, &__p, v5);
      if (v31 != v30)
        v31 = (v31 - v30 - 24) % 0x18uLL + v30;
      if (__p)
        operator delete(__p);
    }
  }
  return v5;
}

void sub_217934A14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 std::vector<EQKitAlignmentGroup>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  __n128 result;
  __n128 *v13;
  uint64_t v14;
  uint64_t v15;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = v7 - a4;
  v9 = a2 + v7 - a4;
  if (v9 >= a3)
  {
    v11 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 8);
    do
    {
      result.n128_f64[0] = EQKitAlignmentGroup::EQKitAlignmentGroup(v11, v9);
      v9 += 24;
      v11 += 24;
    }
    while (v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v11;
  if (v7 != a4)
  {
    v13 = (__n128 *)(v7 - 24);
    v14 = 8 * (v8 >> 3);
    v15 = a2 - 24;
    do
    {
      result = *(__n128 *)(v15 + v14);
      v13[1].n128_u64[0] = *(_QWORD *)(v15 + v14 + 16);
      *v13 = result;
      v13 = (__n128 *)((char *)v13 - 24);
      v14 -= 24;
    }
    while (v14);
  }
  return result;
}

void sub_217934B34(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<EQKitAlignmentGroup>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a3;
  v6 = a2[1];
  v7 = *a1;
  v8 = v6;
  if (v7 != a3)
  {
    v9 = a3;
    v8 = a2[1];
    do
    {
      v9 -= 24;
      EQKitAlignmentGroup::EQKitAlignmentGroup(v8 - 24, v9);
    }
    while (v9 != v7);
  }
  a2[1] = v8;
  v10 = a1[1];
  v11 = a2[2];
  if (v10 != v3)
  {
    do
    {
      EQKitAlignmentGroup::EQKitAlignmentGroup(v11, v3);
      v3 += 24;
      v11 += 24;
    }
    while (v3 != v10);
    v8 = a2[1];
  }
  a2[2] = v11;
  v12 = *a1;
  *a1 = v8;
  a2[1] = v12;
  v13 = a1[1];
  a1[1] = a2[2];
  a2[2] = v13;
  v14 = a1[2];
  a1[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return v6;
}

void std::vector<EQKitLayoutRow::Kerning>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if (a2 <= (v6 - (_BYTE *)v7) >> 4)
  {
    if (a2)
    {
      v14 = &v7[2 * a2];
      do
      {
        *v7 = 0;
        v7[1] = 0x7FFFFFFFFFFFFFFFLL;
        v7 += 2;
      }
      while (v7 != v14);
      v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = (char *)v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      abort();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLength>>(v4, v12);
    else
      v13 = 0;
    v15 = &v13[16 * v10];
    v16 = &v15[16 * a2];
    v17 = v15;
    do
    {
      *(_QWORD *)v17 = 0;
      *((_QWORD *)v17 + 1) = 0x7FFFFFFFFFFFFFFFLL;
      v17 += 16;
    }
    while (v17 != v16);
    v18 = &v13[16 * v12];
    v20 = (char *)*a1;
    v19 = (char *)a1[1];
    if (v19 != *a1)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v19 - 1);
        v15 -= 16;
        v19 -= 16;
      }
      while (v19 != v20);
      v19 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v16;
    a1[2] = v18;
    if (v19)
      operator delete(v19);
  }
}

uint64_t std::vector<EQKitAlignmentGroup>::__push_back_slow_path<EQKitAlignmentGroup>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  void *__p;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v2 = *a1;
  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  v8 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v2) >> 3);
  if (2 * v9 > v4)
    v4 = 2 * v9;
  if (v9 >= 0x555555555555555)
    v10 = 0xAAAAAAAAAAAAAAALL;
  else
    v10 = v4;
  v18 = v7;
  if (v10)
    v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v7, v10);
  else
    v11 = 0;
  __p = v11;
  v15 = &v11[24 * v3];
  v17 = &v11[24 * v10];
  EQKitAlignmentGroup::EQKitAlignmentGroup((uint64_t)v15, a2);
  v16 = v15 + 24;
  std::vector<EQKitAlignmentGroup>::__swap_out_circular_buffer(a1, &__p);
  v12 = a1[1];
  if (v16 != v15)
    v16 = &v15[(v16 - v15 - 24) % 0x18uLL];
  if (__p)
    operator delete(__p);
  return v12;
}

void sub_217934E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<EQKitAlignmentGroup>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v4 -= 24;
    EQKitAlignmentGroup::EQKitAlignmentGroup(v6 - 24, v4);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void EQKitLayoutRow::~EQKitLayoutRow(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(_QWORD *)(a1 + 104) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy(a1 + 72, *(id **)(a1 + 80));
  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(_QWORD *)(a1 + 40) = v3;
    operator delete(v3);
  }
}

void EQKitLayoutStretchedOperator::EQKitLayoutStretchedOperator(EQKitLayoutStretchedOperator *this)
{
  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
}

{
  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
}

uint64_t EQKitLayoutStretchedOperator::EQKitLayoutStretchedOperator(uint64_t result, uint64_t a2, int a3, double a4, double a5, double a6)
{
  *(_QWORD *)result = a2;
  *(_DWORD *)(result + 8) = a3;
  *(double *)(result + 16) = a4;
  *(double *)(result + 24) = a5;
  *(double *)(result + 32) = a6;
  return result;
}

{
  *(_QWORD *)result = a2;
  *(_DWORD *)(result + 8) = a3;
  *(double *)(result + 16) = a4;
  *(double *)(result + 24) = a5;
  *(double *)(result + 32) = a6;
  return result;
}

uint64_t EQKitXMLIsTextContentOnly(uint64_t result)
{
  uint64_t v1;
  int v2;
  int v3;

  if (result)
  {
    v1 = *(_QWORD *)(result + 24);
    if (v1)
    {
      v2 = 0;
      while (xmlNodeIsText((const xmlNode *)v1) || *(_DWORD *)(v1 + 8) == 8)
      {
        v1 = *(_QWORD *)(v1 + 48);
        v2 = 1;
        v3 = 1;
        if (!v1)
          return v3 & v2;
      }
      v3 = 0;
      return v3 & v2;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

const char *EQKitXMLIsNamedElement(_xmlNode *a1, _xmlNs *a2, const char *__s2)
{
  const char *result;

  result = 0;
  if (a1 && __s2)
  {
    if (a1->type == XML_ELEMENT_NODE && a1->ns == a2)
    {
      result = (const char *)a1->name;
      if (result)
        return (const char *)(strcmp(result, __s2) == 0);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL EQKitXMLIsNsElement(_BOOL8 result, _xmlNs *a2)
{
  if (result)
    return *(_DWORD *)(result + 8) == 1 && *(_QWORD *)(result + 72) == (_QWORD)a2;
  return result;
}

BOOL EQKitXMLIsElement(_BOOL8 result)
{
  if (result)
    return *(_DWORD *)(result + 8) == 1;
  return result;
}

void EQKitXMLTextContentAsString(_xmlNode *a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  xmlBufferPtr v6;
  char *v7;
  std::string *p_str;
  std::string::size_type size;
  void **v10;
  size_t v11;
  std::string *v12;
  std::string::size_type v13;
  char *v14;
  std::string::size_type v15;
  std::string::size_type v16;
  std::string::size_type v17;
  void *v18;
  void *__p[2];
  unsigned __int8 v20;
  std::string __str;
  char v22;

  v6 = xmlBufferCreate();
  xmlNodeBufGetContent(v6, a1);
  if (a2)
  {
    v7 = (char *)xmlBufferContent(v6);
    std::string::basic_string[abi:nn180100]<0>(&__str, v7);
    std::string::basic_string[abi:nn180100]<0>(__p, " \t\n");
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_str = &__str;
    else
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      size = __str.__r_.__value_.__l.__size_;
    if ((v20 & 0x80u) == 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    if ((v20 & 0x80u) == 0)
      v11 = v20;
    else
      v11 = (size_t)__p[1];
    if (!size)
      goto LABEL_27;
    v12 = p_str;
    if (v11)
    {
      v13 = size;
      v12 = p_str;
      while (memchr(v10, v12->__r_.__value_.__s.__data_[0], v11))
      {
        v12 = (std::string *)((char *)v12 + 1);
        if (!--v13)
          goto LABEL_27;
      }
    }
    v15 = (char *)v12 - (char *)p_str;
    if (v15 == -1)
    {
LABEL_27:
      std::string::basic_string[abi:nn180100]<0>(a3, "");
    }
    else
    {
      v16 = size - 1;
      do
      {
        v17 = v16;
        if (v16 == -1)
          break;
        if (!v11)
          break;
        v18 = memchr(v10, p_str->__r_.__value_.__s.__data_[v16], v11);
        v16 = v17 - 1;
      }
      while (v18);
      std::string::basic_string(a3, &__str, v15, v17 - v15 + 1, (std::allocator<char> *)&v22);
    }
    if ((char)v20 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  else
  {
    v14 = (char *)xmlBufferContent(v6);
    std::string::basic_string[abi:nn180100]<0>(a3, v14);
  }
  xmlBufferFree(v6);
}

void EQKitXMLAttributeValueAsString(_xmlNode *a1@<X0>, _xmlAttr *a2@<X1>, _QWORD *a3@<X8>)
{
  xmlChar *String;
  xmlChar *v5;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (a1 && a2)
  {
    String = xmlNodeListGetString(a1->doc, a2->children, 1);
    if (String)
    {
      v5 = String;
      MEMORY[0x219A15268](a3, String);
      free(v5);
    }
  }
}

void EQKitXMLAttributeValueAsString(_xmlNode *a1@<X0>, _xmlNs *a2@<X1>, xmlChar *name@<X2>, BOOL *a4@<X3>, uint64_t a5@<X8>)
{
  xmlAttrPtr v10;
  _xmlAttr *v11;
  void **v12;
  int v13;
  char *v14;
  uint64_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *__p[2];
  unsigned __int8 v24;
  std::string v25;
  char v26;

  v10 = xmlHasProp(a1, name);
  v11 = v10;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)a5 = 0;
  if (a2 && !v10)
    v11 = xmlHasNsProp(a1, name, a2->href);
  if (v11)
  {
    EQKitXMLAttributeValueAsString(a1, v11, &v25);
    *(std::string *)a5 = v25;
  }
  if (a4)
    *a4 = v11 != 0;
  v12 = __p;
  std::string::basic_string[abi:nn180100]<0>(__p, " \t\n");
  v13 = *(char *)(a5 + 23);
  if (v13 >= 0)
    v14 = (char *)a5;
  else
    v14 = *(char **)a5;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a5 + 23);
  else
    v15 = *(_QWORD *)(a5 + 8);
  if ((v24 & 0x80u) == 0)
  {
    v16 = v24;
  }
  else
  {
    v12 = (void **)__p[0];
    v16 = (size_t)__p[1];
  }
  if (!v15)
    goto LABEL_33;
  v17 = v14;
  if (v16)
  {
    v18 = v15;
    v17 = v14;
    while (memchr(v12, *v17, v16))
    {
      ++v17;
      if (!--v18)
        goto LABEL_33;
    }
  }
  if (v17 - v14 == -1)
  {
LABEL_33:
    MEMORY[0x219A15268](a5, "");
  }
  else
  {
    v19 = v15 - 1;
    v20 = v19;
    do
    {
      v21 = v20;
      if (v20 == -1)
        break;
      if (!v16)
        break;
      v22 = memchr(v12, v14[v20], v16);
      v20 = v21 - 1;
    }
    while (v22);
    if (v17 != v14 || v21 != v19)
    {
      std::string::basic_string(&v25, (const std::string *)a5, v17 - v14, v21 - (v17 - v14) + 1, (std::allocator<char> *)&v26);
      if (*(char *)(a5 + 23) < 0)
        operator delete(*(void **)a5);
      *(std::string *)a5 = v25;
    }
  }
  if ((char)v24 < 0)
    operator delete(__p[0]);
}

uint64_t EQKitXMLAttributeValueAsInt32(_xmlNode *a1, _xmlNs *a2, xmlChar *a3, BOOL *a4)
{
  uint64_t v5;
  _QWORD v7[12];
  char v8;
  uint64_t v9;
  std::string v10;
  unsigned int v11;

  v11 = 0;
  EQKitXMLAttributeValueAsString(a1, a2, a3, a4, (uint64_t)&v10);
  std::istringstream::basic_istringstream[abi:nn180100](v7, &v10, 8);
  MEMORY[0x219A152C8](v7, &v11);
  if (a4)
    *a4 = *(_DWORD *)((char *)&v7[4] + *(_QWORD *)(v7[0] - 24)) == 0;
  v5 = v11;
  v7[0] = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v7[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  v7[2] = MEMORY[0x24BEDB848] + 16;
  if (v8 < 0)
    operator delete((void *)v7[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x219A1537C](&v9);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  return v5;
}

_QWORD *std::istringstream::basic_istringstream[abi:nn180100](_QWORD *a1, const std::string *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;

  v6 = MEMORY[0x24BEDB868];
  v7 = MEMORY[0x24BEDB868] + 64;
  a1[15] = MEMORY[0x24BEDB868] + 64;
  v8 = (uint64_t)(a1 + 2);
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 8);
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 16);
  *a1 = v10;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v10 - 24)) = v9;
  a1[1] = 0;
  v11 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v11, a1 + 2);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  *a1 = v6 + 24;
  a1[15] = v7;
  std::stringbuf::basic_stringbuf[abi:nn180100](v8, a2, a3 | 8);
  return a1;
}

uint64_t std::stringbuf::basic_stringbuf[abi:nn180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6;

  v6 = std::streambuf::basic_streambuf();
  *(_QWORD *)v6 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_DWORD *)(a1 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:nn180100](a1);
  return a1;
}

void std::stringbuf::__init_buf_ptrs[abi:nn180100](uint64_t a1)
{
  std::string *v2;
  char v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  v2 = (std::string *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    v4 = *(std::string **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v4 = v2;
    v5 = *(unsigned __int8 *)(a1 + 87);
  }
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    v7 = v3 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    v8 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        v5 = v5 - v10 - 0x7FFFFFFF;
        *(_QWORD *)(a1 + 48) = v4;
      }
      if (v5)
        *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
    }
  }
}

void sub_217936A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  uint64_t v25;

  if (*(char *)(v25 - 145) < 0)
    operator delete(*(void **)(v24 + 24));
  _Unwind_Resume(exception_object);
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7F8];
  v3 = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 16) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x219A1537C](a1 + 120);
  return a1;
}

std::string *EQKit::AttributeCollection::setValueForKey(uint64_t a1, const std::string *a2, int a3, unint64_t a4)
{
  std::string *v5;
  unint64_t v7;
  int v8;
  unint64_t *v9;

  v7 = a4;
  v8 = a3;
  v9 = &v7;
  v5 = (std::string *)std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<EQKitLength>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<EQKitLength>,std::less<EQKitTypes::Attributes::Enum>,true>,EQKitLength<std::vector<EQKitLength>>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>((uint64_t **)(a1 + 80), &v7, (uint64_t)&std::piecewise_construct, (_OWORD **)&v9);
  return std::string::operator=(v5 + 2, a2);
}

CGColorRef EQKitMathMLParserCreateCGColorFromString(uint64_t a1)
{
  unsigned int v1;
  std::string::size_type v2;
  CGColorRef v3;
  std::string::size_type v4;
  std::string::size_type size;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *p_p;
  int v9;
  std::string *v10;
  std::string::size_type v11;
  int v12;
  CGColorSpace *DeviceRGB;
  std::string __p;
  CGFloat components[2];
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)components = xmmword_217C27638;
  v17 = unk_217C27648;
  v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80) != 0)
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2 <= 1)
      return 0;
    if (**(_BYTE **)a1 != 35)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, v2);
      goto LABEL_10;
    }
LABEL_7:
    if ((EQKitMathMLParserConvertHexColorStringToRGBFloatValues((std::string *)a1, components, &components[1], (double *)&v17) & 1) != 0)goto LABEL_31;
    return 0;
  }
  if (v1 < 2)
    return 0;
  if (*(_BYTE *)a1 == 35)
    goto LABEL_7;
  __p = *(std::string *)a1;
LABEL_10:
  v4 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  size = __p.__r_.__value_.__l.__size_;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v6 = __p.__r_.__value_.__l.__size_;
  if (!v6)
  {
LABEL_28:
    v12 = EQKitMathMLParserConvertNamedColorStringToRGBFloatValues((const void **)&__p.__r_.__value_.__l.__data_, components, &components[1], (double *)&v17);
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_29;
    goto LABEL_30;
  }
  v7 = __p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  while (1)
  {
    v9 = p_p->__r_.__value_.__s.__data_[0];
    if (p_p->__r_.__value_.__s.__data_[0] > 90)
      break;
    if ((char)v9 < 65)
      goto LABEL_33;
    p_p->__r_.__value_.__s.__data_[0] = v9 + 32;
    v4 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    size = __p.__r_.__value_.__l.__size_;
    v7 = __p.__r_.__value_.__r.__words[0];
LABEL_21:
    p_p = (std::string *)((char *)p_p + 1);
    if ((v4 & 0x80u) == 0)
      v10 = &__p;
    else
      v10 = (std::string *)v7;
    if ((v4 & 0x80u) == 0)
      v11 = v4;
    else
      v11 = size;
    if (p_p == (std::string *)((char *)v10 + v11))
      goto LABEL_28;
  }
  if ((v9 - 97) <= 0x19)
    goto LABEL_21;
LABEL_33:
  v12 = 0;
  if ((v4 & 0x80) != 0)
LABEL_29:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_30:
  if (v12)
  {
LABEL_31:
    DeviceRGB = CGColorSpaceCreateDeviceRGB();
    v3 = CGColorCreate(DeviceRGB, components);
    CGColorSpaceRelease(DeviceRGB);
    return v3;
  }
  return 0;
}

void sub_217936DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const void **EQKit::AttributeCollection::setValueForKey(uint64_t a1, CFTypeRef *a2, int a3, unint64_t a4)
{
  const void **v5;
  unint64_t v7;
  int v8;
  unint64_t *v9;

  v7 = a4;
  v8 = a3;
  v9 = &v7;
  v5 = (const void **)std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,double>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>((uint64_t **)(a1 + 536), &v7, (uint64_t)&std::piecewise_construct, (_OWORD **)&v9);
  return EQKitTypes::CFRetainRelease::operator=(v5 + 6, a2);
}

void sub_217936FEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _contentAppendStringIfNeeded(uint64_t result, std::string *a2, _BYTE *a3, _BYTE *a4, int a5)
{
  id *v9;
  int v10;
  std::string *v11;
  std::string::size_type size;
  std::string::size_type v13;
  std::string::size_type v14;
  std::string::size_type v15;
  std::string *v16;
  uint64_t v17;
  uint64_t v18;
  std::string::size_type v20;
  std::string::size_type v21;
  id v22;
  uint64_t *v23;
  uint64_t v24;
  void *v25;
  id v26;
  std::string v27;
  char v28;

  if (!*a3)
    return result;
  v9 = (id *)result;
  if (*a4)
  {
    v10 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (v10 >= 0)
      v11 = a2;
    else
      v11 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if (v10 >= 0)
      size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    else
      size = a2->__r_.__value_.__l.__size_;
    if (!size)
      goto LABEL_41;
    v13 = 0;
    while (memchr(" \t\n", v11->__r_.__value_.__s.__data_[v13], 3uLL))
    {
      if (size == ++v13)
        goto LABEL_41;
    }
    if (v13 == -1)
      goto LABEL_41;
  }
  else
  {
    v13 = 0;
  }
  v14 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (a5)
  {
    v15 = a2->__r_.__value_.__l.__size_;
    if ((v14 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if ((v14 & 0x80u) == 0)
      v17 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    else
      v17 = a2->__r_.__value_.__l.__size_;
    v18 = (uint64_t)&v16[-1].__r_.__value_.__r.__words[2] + 7;
    while (v17)
    {
      if (!memchr(" \t\n", *(char *)(v18 + v17--), 3uLL))
        goto LABEL_31;
    }
    v17 = -1;
    if (v13)
      goto LABEL_38;
  }
  else
  {
    v15 = a2->__r_.__value_.__l.__size_;
    if ((v14 & 0x80u) == 0)
      v20 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    else
      v20 = a2->__r_.__value_.__l.__size_;
    v17 = v20 - 1;
LABEL_31:
    if (v13)
      goto LABEL_38;
  }
  if ((v14 & 0x80u) == 0)
    v21 = v14;
  else
    v21 = v15;
  if (v17 != v21 - 1)
  {
LABEL_38:
    std::string::basic_string(&v27, a2, v13, v17 - v13 + 1, (std::allocator<char> *)&v28);
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
      operator delete(a2->__r_.__value_.__l.__data_);
    *a2 = v27;
  }
LABEL_41:
  v22 = objc_alloc(MEMORY[0x24BDD17C8]);
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = (uint64_t *)a2;
  else
    v23 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
  v24 = objc_msgSend(v22, "initWithUTF8String:", v23);
  if (v24)
  {
    v25 = (void *)v24;
    v26 = *v9;
    if (!*v9)
    {
      v26 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
      *v9 = v26;
    }
    objc_msgSend(v26, "addObject:", v25);

  }
  result = MEMORY[0x219A15268](a2, "");
  *a3 = 0;
  *a4 = 0;
  return result;
}

void sub_2179374F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t EQKitMathMLParserConvertNamedColorStringToRGBFloatValues(const void **a1, double *a2, double *a3, double *a4)
{
  uint64_t v8;

  if (EQKitMathMLParserConvertNamedColorStringToRGBFloatValues(std::string const&,double &,double &,double &)::onceToken != -1)
    dispatch_once(&EQKitMathMLParserConvertNamedColorStringToRGBFloatValues(std::string const&,double &,double &,double &)::onceToken, &__block_literal_global_0);
  if (!EQKitMathMLParserConvertNamedColorStringToRGBFloatValues(std::string const&,double &,double &,double &)::sMap)
    return 1;
  v8 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(EQKitMathMLParserConvertNamedColorStringToRGBFloatValues(std::string const&,double &,double &,double &)::sMap, a1);
  if (EQKitMathMLParserConvertNamedColorStringToRGBFloatValues(std::string const&,double &,double &,double &)::sMap + 8 == v8)
    return 0;
  else
    return EQKitMathMLParserConvertHexColorStringToRGBFloatValues((std::string *)(v8 + 56), a2, a3, a4);
}

void sub_2179390F4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;

  if (*((char *)v2 + 23) < 0)
  {
    ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_1();
    v2 = qword_254F230C0;
  }
  do
  {
    v2 -= 6;
    HTMLColor::~HTMLColor((void **)v2);
  }
  while (v2 != v1);
  __cxa_guard_abort(&_ZGVZZ56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8_EUb_E11_HTMLColors);
  _Unwind_Resume(a1);
}

void HTMLColor::~HTMLColor(void **this)
{
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t EQKitMathMLParserConvertHexColorStringToRGBFloatValues(std::string *__str, double *a2, double *a3, double *a4)
{
  unsigned __int8 v8;
  int v9;
  std::string::size_type size;
  std::string *v11;
  int v12;
  std::string::size_type v13;
  double *v15;
  uint64_t *v16;
  size_t v17;
  std::string::size_type v18;
  std::string *v19;
  unint64_t v21;
  char v22;
  std::string::size_type v23;
  double v24;
  double *v25;
  std::string v26;
  std::string v27;
  std::string v28;
  char v29;

  if ((v8 & 1) == 0
  {
    std::string::basic_string[abi:nn180100]<0>(&EQKitMathMLParserIsValidHexColorString(std::string const&)::allowedChars, "#0123456789abcdefABCDEF");
  }
  v9 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (v9 >= 0)
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  else
    size = __str->__r_.__value_.__l.__size_;
  if (v9 >= 0)
    v11 = __str;
  else
    v11 = (std::string *)__str->__r_.__value_.__r.__words[0];
  v12 = v11->__r_.__value_.__s.__data_[0];
  v13 = size - (v12 == 35);
  if (v13 != 3 && v13 != 6)
    return 0;
  v25 = a3;
  v15 = a4;
  v16 = byte_254F2310F >= 0
      ? &EQKitMathMLParserIsValidHexColorString(std::string const&)::allowedChars
      : (uint64_t *)EQKitMathMLParserIsValidHexColorString(std::string const&)::allowedChars;
  v17 = byte_254F2310F >= 0 ? byte_254F2310F : unk_254F23100;
  if (size)
  {
    if (v17)
    {
      v18 = size;
      v19 = v11;
      while (memchr(v16, v19->__r_.__value_.__s.__data_[0], v17))
      {
        v19 = (std::string *)((char *)v19 + 1);
        if (!--v18)
          goto LABEL_28;
      }
    }
    else
    {
      v19 = v11;
    }
    if ((char *)v19 - (char *)v11 != -1)
      return 0;
  }
LABEL_28:
  v21 = 3;
  if (v12 == 35)
    v21 = 4;
  v22 = size > v21;
  if (v22)
    v23 = 2;
  else
    v23 = 1;
  if (v22)
    v24 = 255.0;
  else
    v24 = 15.0;
  std::string::basic_string(&v28, __str, (-3 << v22) + size, v23, (std::allocator<char> *)&v27);
  std::string::basic_string(&v27, __str, size - 2 * v23, v23, (std::allocator<char> *)&v26);
  std::string::basic_string(&v26, __str, size - v23, v23, (std::allocator<char> *)&v29);
  *a2 = (double)(unint64_t)EQKitMathMLParserHexToDec(&v28) / v24;
  *v25 = (double)(unint64_t)EQKitMathMLParserHexToDec(&v27) / v24;
  *v15 = (double)(unint64_t)EQKitMathMLParserHexToDec(&v26) / v24;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  return 1;
}

void sub_21793A3AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  _Unwind_Resume(a1);
}

uint64_t EQKitMathMLParserHexToDec(const std::string *a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD v4[12];
  char v5;
  uint64_t v6;

  std::istringstream::basic_istringstream[abi:nn180100](v4, a1, 8);
  v3 = 0;
  *(_DWORD *)((char *)&v4[1] + *(_QWORD *)(v4[0] - 24)) = *(_DWORD *)((_BYTE *)&v4[1] + *(_QWORD *)(v4[0] - 24)) & 0xFFFFFFB5 | 8;
  MEMORY[0x219A152E0](v4, &v3);
  v1 = v3;
  v4[0] = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  v4[2] = MEMORY[0x24BEDB848] + 16;
  if (v5 < 0)
    operator delete((void *)v4[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x219A1537C](&v6);
  return v1;
}

void sub_21793A4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::istringstream::~istringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>::__find_equal<EQKitTypes::Attributes::Enum>((uint64_t)a1, &v10, a2);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x38uLL);
    v7[2] = **a4;
    *((_DWORD *)v7 + 12) = 0;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>::__find_equal<EQKitTypes::Attributes::Enum>(uint64_t a1, _QWORD *a2, unint64_t *a3)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  int v7;
  uint64_t *v8;
  unint64_t v9;
  int v10;

  v5 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *a3;
    v7 = *((_DWORD *)a3 + 2);
    while (1)
    {
      while (1)
      {
        v8 = v4;
        v9 = v4[4];
        if (v6 >= v9)
          break;
LABEL_4:
        v4 = (uint64_t *)*v8;
        result = v8;
        if (!*v8)
          goto LABEL_12;
      }
      if (v9 >= v6)
      {
        v10 = *((_DWORD *)v8 + 10);
        if (v7 < v10)
          goto LABEL_4;
        if (v10 >= v7)
          goto LABEL_12;
      }
      result = v8 + 1;
      v4 = (uint64_t *)v8[1];
      if (!v4)
        goto LABEL_12;
    }
  }
  v8 = result;
LABEL_12:
  *a2 = v8;
  return result;
}

_OWORD *std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKit::ScriptLevel>,std::__map_value_compare<EQKitTypes::Attributes::Enum,EQKit::ScriptLevel,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<EQKit::ScriptLevel>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>::__find_equal<EQKitTypes::Attributes::Enum>((uint64_t)a1, &v10, a2);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = 0;
    *((_BYTE *)v7 + 56) = 1;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

_OWORD *std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitLength>,std::__map_value_compare<EQKitTypes::Attributes::Enum,EQKitLength,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<EQKitLength>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>::__find_equal<EQKitTypes::Attributes::Enum>((uint64_t)a1, &v10, a2);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v7[2] = **a4;
    *((_DWORD *)v7 + 12) = 1;
    *((_QWORD *)v7 + 7) = 0;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

char *EQKit::AttributeCollection::setValueForKey<std::vector<EQKitLength>>(uint64_t a1, uint64_t **a2, uint64_t a3, _OWORD *a4)
{
  char *result;
  _OWORD *v6;

  v6 = a4;
  result = (char *)(std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<EQKitLength>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<EQKitLength>,std::less<EQKitTypes::Attributes::Enum>,true>,EQKitLength<std::vector<EQKitLength>>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>(a2, (unint64_t *)a4, (uint64_t)&std::piecewise_construct, &v6)+ 3);
  if (result != (char *)a3)
    return std::vector<EQKitLength>::__assign_with_size[abi:nn180100]<EQKitLength*,EQKitLength*>(result, *(char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4);
  return result;
}

_OWORD *std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<EQKitLength>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<EQKitLength>,std::less<EQKitTypes::Attributes::Enum>,true>,EQKitLength<std::vector<EQKitLength>>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>::__find_equal<EQKitTypes::Attributes::Enum>((uint64_t)a1, &v10, a2);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x48uLL);
    v7[2] = **a4;
    *((_QWORD *)v7 + 7) = 0;
    *((_QWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 6) = 0;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

char *std::vector<EQKitLength>::__assign_with_size[abi:nn180100]<EQKitLength*,EQKitLength*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60)
      abort();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<CGPoint>::__vallocate[abi:nn180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 4;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

_OWORD *std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,double>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>::__find_equal<EQKitTypes::Attributes::Enum>((uint64_t)a1, &v10, a2);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x38uLL);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = 0;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

char *EQKit::AttributeCollection::setValueForKey<std::vector<EQKitTypes::VAlign::Enum>>(uint64_t a1, uint64_t **a2, uint64_t a3, _OWORD *a4)
{
  char *result;
  _OWORD *v6;

  v6 = a4;
  result = (char *)(std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<EQKitLength>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<EQKitLength>,std::less<EQKitTypes::Attributes::Enum>,true>,EQKitLength<std::vector<EQKitLength>>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>(a2, (unint64_t *)a4, (uint64_t)&std::piecewise_construct, &v6)+ 3);
  if (result != (char *)a3)
    return std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:nn180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>(result, *(char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  return result;
}

void EQKit::AttributeCollection::setValueForKey<std::vector<std::string>>(uint64_t a1, uint64_t **a2, uint64_t a3, _OWORD *a4)
{
  std::vector<std::string> *v5;
  _OWORD *v6;

  v6 = a4;
  v5 = (std::vector<std::string> *)(std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<EQKitLength>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<EQKitLength>,std::less<EQKitTypes::Attributes::Enum>,true>,EQKitLength<std::vector<EQKitLength>>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>(a2, (unint64_t *)a4, (uint64_t)&std::piecewise_construct, &v6)+ 3);
  if (v5 != (std::vector<std::string> *)a3)
    std::vector<std::string>::__assign_with_size[abi:nn180100]<std::string*,std::string*>(v5, *(std::string **)a3, *(__int128 **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
}

_OWORD *std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,EQKitPseudoUnitLength>,std::__map_value_compare<EQKitTypes::Attributes::Enum,EQKitPseudoUnitLength,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<EQKitPseudoUnitLength>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>::__find_equal<EQKitTypes::Attributes::Enum>((uint64_t)a1, &v10, a2);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x48uLL);
    v7[2] = **a4;
    *((_DWORD *)v7 + 12) = 1;
    *((_QWORD *)v7 + 7) = 0;
    *((_QWORD *)v7 + 8) = 0;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

_OWORD *std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,unsigned short>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>>>::__emplace_unique_key_args<EQKitTypes::Attributes::Enum,std::piecewise_construct_t const&,std::tuple<EQKitTypes::Attributes::Enum const&>,std::piecewise_construct_t const&<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>::__find_equal<EQKitTypes::Attributes::Enum>((uint64_t)a1, &v10, a2);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x38uLL);
    v7[2] = **a4;
    *((_WORD *)v7 + 24) = 0;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t std::deque<EQKitMathMLParserState>::~deque[abi:nn180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 512;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 1024;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<EQKitLayoutTable *>::~__split_buffer((uint64_t)a1);
}

void std::deque<EQKitMathMLParserState>::push_back(_QWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 7) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<EQKitMathMLParserState>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_DWORD *)(*(_QWORD *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<EQKitMathMLParserState>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x400;
  v4 = v2 - 1024;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<EQKitLayoutContext *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<EQKitLayoutContext *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_21793AF4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<EQKitMathMLParserState>::__maybe_remove_back_spare[abi:nn180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = ((v2 - v3) << 7) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x400)
    a2 = 1;
  if (v5 < 0x800)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:nn180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_21793B128(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:nn180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:nn180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_1()
{
  operator delete((void *)qword_254F230C0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_2()
{
  operator delete((void *)qword_254F23090[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_3()
{
  operator delete((void *)qword_254F23060[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_4()
{
  operator delete((void *)qword_254F23030[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_5()
{
  operator delete((void *)qword_254F23000[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_6()
{
  operator delete((void *)qword_254F22FD0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_7()
{
  operator delete((void *)qword_254F22FA0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_8()
{
  operator delete((void *)qword_254F22F70[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_9()
{
  operator delete((void *)qword_254F22F40[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_10()
{
  operator delete((void *)qword_254F22F10[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_11()
{
  operator delete((void *)qword_254F22EE0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_12()
{
  operator delete((void *)qword_254F22EB0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_13()
{
  operator delete((void *)qword_254F22E80[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_14()
{
  operator delete((void *)qword_254F22E50[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_15()
{
  operator delete((void *)qword_254F22E20[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_16()
{
  operator delete((void *)qword_254F22DF0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_17()
{
  operator delete((void *)qword_254F22DC0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_18()
{
  operator delete((void *)qword_254F22D90[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_19()
{
  operator delete((void *)qword_254F22D60[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_20()
{
  operator delete((void *)qword_254F22D30[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_21()
{
  operator delete((void *)qword_254F22D00[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_22()
{
  operator delete((void *)qword_254F22CD0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_23()
{
  operator delete((void *)qword_254F22CA0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_24()
{
  operator delete((void *)qword_254F22C70[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_25()
{
  operator delete((void *)qword_254F22C40[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_26()
{
  operator delete((void *)qword_254F22C10[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_27()
{
  operator delete((void *)qword_254F22BE0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_28()
{
  operator delete((void *)qword_254F22BB0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_29()
{
  operator delete((void *)qword_254F22B80[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_30()
{
  operator delete((void *)qword_254F22B50[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_31()
{
  operator delete((void *)qword_254F22B20[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_32()
{
  operator delete((void *)qword_254F22AF0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_33()
{
  operator delete((void *)qword_254F22AC0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_34()
{
  operator delete((void *)qword_254F22A90[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_35()
{
  operator delete((void *)qword_254F22A60[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_36()
{
  operator delete((void *)qword_254F22A30[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_37()
{
  operator delete((void *)qword_254F22A00[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_38()
{
  operator delete((void *)qword_254F229D0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_39()
{
  operator delete((void *)qword_254F229A0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_40()
{
  operator delete((void *)qword_254F22970[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_41()
{
  operator delete((void *)qword_254F22940[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_42()
{
  operator delete((void *)qword_254F22910[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_43()
{
  operator delete((void *)qword_254F228E0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_44()
{
  operator delete((void *)qword_254F228B0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_45()
{
  operator delete((void *)qword_254F22880[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_46()
{
  operator delete((void *)qword_254F22850[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_47()
{
  operator delete((void *)qword_254F22820[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_48()
{
  operator delete((void *)qword_254F227F0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_49()
{
  operator delete((void *)qword_254F227C0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_50()
{
  operator delete((void *)qword_254F22790[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_51()
{
  operator delete((void *)qword_254F22760[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_52()
{
  operator delete((void *)qword_254F22730[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_53()
{
  operator delete((void *)qword_254F22700[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_54()
{
  operator delete((void *)qword_254F226D0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_55()
{
  operator delete((void *)qword_254F226A0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_56()
{
  operator delete((void *)qword_254F22670[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_57()
{
  operator delete((void *)qword_254F22640[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_58()
{
  operator delete((void *)qword_254F22610[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_59()
{
  operator delete((void *)qword_254F225E0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_60()
{
  operator delete((void *)qword_254F225B0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_61()
{
  operator delete((void *)qword_254F22580[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_62()
{
  operator delete((void *)qword_254F22550[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_63()
{
  operator delete((void *)qword_254F22520[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_64()
{
  operator delete((void *)qword_254F224F0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_65()
{
  operator delete((void *)qword_254F224C0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_66()
{
  operator delete((void *)qword_254F22490[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_67()
{
  operator delete((void *)qword_254F22460[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_68()
{
  operator delete((void *)qword_254F22430[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_69()
{
  operator delete((void *)qword_254F22400[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_70()
{
  operator delete((void *)qword_254F223D0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_71()
{
  operator delete((void *)qword_254F223A0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_72()
{
  operator delete((void *)qword_254F22370[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_73()
{
  operator delete((void *)qword_254F22340[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_74()
{
  operator delete((void *)qword_254F22310[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_75()
{
  operator delete((void *)qword_254F222E0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_76()
{
  operator delete((void *)qword_254F222B0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_77()
{
  operator delete((void *)qword_254F22280[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_78()
{
  operator delete((void *)qword_254F22250[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_79()
{
  operator delete((void *)qword_254F22220[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_80()
{
  operator delete((void *)qword_254F221F0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_81()
{
  operator delete((void *)qword_254F221C0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_82()
{
  operator delete((void *)qword_254F22190[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_83()
{
  operator delete((void *)qword_254F22160[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_84()
{
  operator delete((void *)qword_254F22130[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_85()
{
  operator delete((void *)qword_254F22100[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_86()
{
  operator delete((void *)qword_254F220D0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_87()
{
  operator delete((void *)qword_254F220A0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_88()
{
  operator delete((void *)qword_254F22070[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_89()
{
  operator delete((void *)qword_254F22040[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_90()
{
  operator delete((void *)qword_254F22010[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_91()
{
  operator delete((void *)qword_254F21FE0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_92()
{
  operator delete((void *)qword_254F21FB0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_93()
{
  operator delete((void *)qword_254F21F80[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_94()
{
  operator delete((void *)qword_254F21F50[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_95()
{
  operator delete((void *)qword_254F21F20[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_96()
{
  operator delete((void *)qword_254F21EF0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_97()
{
  operator delete((void *)qword_254F21EC0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_98()
{
  operator delete((void *)qword_254F21E90[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_99()
{
  operator delete((void *)qword_254F21E60[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_100()
{
  operator delete((void *)qword_254F21E30[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_101()
{
  operator delete((void *)qword_254F21E00[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_102()
{
  operator delete((void *)qword_254F21DD0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_103()
{
  operator delete((void *)qword_254F21DA0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_104()
{
  operator delete((void *)qword_254F21D70[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_105()
{
  operator delete((void *)qword_254F21D40[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_106()
{
  operator delete((void *)qword_254F21D10[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_107()
{
  operator delete((void *)qword_254F21CE0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_108()
{
  operator delete((void *)qword_254F21CB0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_109()
{
  operator delete((void *)qword_254F21C80[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_110()
{
  operator delete((void *)qword_254F21C50[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_111()
{
  operator delete((void *)qword_254F21C20[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_112()
{
  operator delete((void *)qword_254F21BF0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_113()
{
  operator delete((void *)qword_254F21BC0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_114()
{
  operator delete((void *)qword_254F21B90[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_115()
{
  operator delete((void *)qword_254F21B60[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_116()
{
  operator delete((void *)qword_254F21B30[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_117()
{
  operator delete((void *)qword_254F21B00[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_118()
{
  operator delete((void *)qword_254F21AD0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_119()
{
  operator delete((void *)qword_254F21AA0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_120()
{
  operator delete((void *)qword_254F21A70[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_121()
{
  operator delete((void *)qword_254F21A40[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_122()
{
  operator delete((void *)qword_254F21A10[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_123()
{
  operator delete((void *)qword_254F219E0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_124()
{
  operator delete((void *)qword_254F219B0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_125()
{
  operator delete((void *)qword_254F21980[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_126()
{
  operator delete((void *)qword_254F21950[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_127()
{
  operator delete((void *)qword_254F21920[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_128()
{
  operator delete((void *)qword_254F218F0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_129()
{
  operator delete((void *)qword_254F218C0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_130()
{
  operator delete((void *)qword_254F21890[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_131()
{
  operator delete((void *)qword_254F21860[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_132()
{
  operator delete((void *)qword_254F21830[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_133()
{
  operator delete((void *)qword_254F21800[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_134()
{
  operator delete((void *)qword_254F217D0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_135()
{
  operator delete((void *)qword_254F217A0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_136()
{
  operator delete((void *)qword_254F21770[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_137()
{
  operator delete((void *)qword_254F21740[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_138()
{
  operator delete((void *)qword_254F21710[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_139()
{
  operator delete((void *)qword_254F216E0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_140()
{
  operator delete((void *)qword_254F216B0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_141()
{
  operator delete((void *)qword_254F21680[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_142()
{
  operator delete((void *)qword_254F21650[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_143()
{
  operator delete((void *)qword_254F21620[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_144()
{
  operator delete((void *)qword_254F215F0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_145()
{
  operator delete((void *)qword_254F215C0[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_146()
{
  operator delete((void *)qword_254F21590[0]);
}

void ___Z56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8__block_invoke_cold_147()
{
  operator delete((void *)_ZZZ56EQKitMathMLParserConvertNamedColorStringToRGBFloatValuesRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERdS8_S8_EUb_E11_HTMLColors);
}

void sub_21793BC98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *EQKit::AttributeCollection::AttributeCollection(_QWORD *this)
{
  this[2] = 0;
  *this = &unk_24D828CA0;
  this[1] = this + 2;
  this[5] = 0;
  this[3] = 0;
  this[4] = this + 5;
  this[8] = 0;
  this[6] = 0;
  this[7] = this + 8;
  this[11] = 0;
  this[9] = 0;
  this[10] = this + 11;
  this[14] = 0;
  this[12] = 0;
  this[13] = this + 14;
  this[17] = 0;
  this[20] = 0;
  this[15] = 0;
  this[16] = this + 17;
  this[18] = 0;
  this[19] = this + 20;
  this[23] = 0;
  this[21] = 0;
  this[22] = this + 23;
  this[26] = 0;
  this[24] = 0;
  this[25] = this + 26;
  this[29] = 0;
  this[27] = 0;
  this[28] = this + 29;
  this[32] = 0;
  this[33] = 0;
  this[30] = 0;
  this[31] = this + 32;
  this[34] = this + 35;
  this[35] = 0;
  this[38] = 0;
  this[39] = 0;
  this[36] = 0;
  this[37] = this + 38;
  this[40] = this + 41;
  this[41] = 0;
  this[44] = 0;
  this[45] = 0;
  this[42] = 0;
  this[43] = this + 44;
  this[46] = this + 47;
  this[47] = 0;
  this[50] = 0;
  this[51] = 0;
  this[48] = 0;
  this[49] = this + 50;
  this[52] = this + 53;
  this[53] = 0;
  this[56] = 0;
  this[57] = 0;
  this[54] = 0;
  this[55] = this + 56;
  this[58] = this + 59;
  this[59] = 0;
  this[62] = 0;
  this[63] = 0;
  this[60] = 0;
  this[61] = this + 62;
  this[66] = 0;
  this[65] = 0;
  this[64] = this + 65;
  this[69] = 0;
  this[68] = 0;
  this[67] = this + 68;
  return this;
}

void EQKit::AttributeCollection::~AttributeCollection(EQKit::AttributeCollection *this)
{
  EQKit::AttributeCollection::~AttributeCollection(this);
  JUMPOUT(0x219A153B8);
}

{
  *(_QWORD *)this = &unk_24D828CA0;
  std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>>::destroy((uint64_t)this + 536, *((_QWORD **)this + 68));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 512, *((_QWORD **)this + 65));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 488, *((_QWORD **)this + 62));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 464, *((_QWORD **)this + 59));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 440, *((_QWORD **)this + 56));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 416, *((_QWORD **)this + 53));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 392, *((_QWORD **)this + 50));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 368, *((_QWORD **)this + 47));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 344, *((_QWORD **)this + 44));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 320, *((_QWORD **)this + 41));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 296, *((_QWORD **)this + 38));
  std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::less<EQKitTypes::Attributes::Enum>,true>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum<std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>>::destroy((uint64_t)this + 272, *((_QWORD **)this + 35));
  std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::less<EQKitTypes::Attributes::Enum>,true>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum<std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>>::destroy((uint64_t)this + 248, *((_QWORD **)this + 32));
  std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::less<EQKitTypes::Attributes::Enum>,true>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum<std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>>::destroy((uint64_t)this + 224, *((_QWORD **)this + 29));
  std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::less<EQKitTypes::Attributes::Enum>,true>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum<std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>>::destroy((uint64_t)this + 200, *((_QWORD **)this + 26));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 176, *((_QWORD **)this + 23));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 152, *((_QWORD **)this + 20));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 128, *((_QWORD **)this + 17));
  std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<std::string,std::char_traits<char><std::allocator<char>>>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<std::string,std::char_traits<char><std::allocator<char>>>,std::less<EQKitTypes::Attributes::Enum>,true>,std::char_traits<char><std::vector<std::string,std::char_traits<char><std::allocator<char>>>>>::destroy((uint64_t)this + 104, *((char **)this + 14));
  std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::string>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::string,std::less<EQKitTypes::Attributes::Enum>,true>,std::char_traits<char><std::string>>::destroy((uint64_t)this + 80, *((char **)this + 11));
  std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::less<EQKitTypes::Attributes::Enum>,true>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum<std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>>::destroy((uint64_t)this + 56, *((_QWORD **)this + 8));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this + 8, *((_QWORD **)this + 2));
}

void std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>>::destroy(uint64_t a1, _QWORD *a2)
{
  const void *v4;

  if (a2)
  {
    std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::CFRetainRelease>>::destroy(a1, a2[1]);
    v4 = (const void *)a2[6];
    if (v4)
      CFRelease(v4);
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::less<EQKitTypes::Attributes::Enum>,true>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum<std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>>::destroy(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::less<EQKitTypes::Attributes::Enum>,true>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum<std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>,std::less<EQKitTypes::Attributes::Enum>,true>,objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum<std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Align::Enum>>>::destroy(a1, a2[1]);
    v4 = (void *)a2[6];
    if (v4)
    {
      a2[7] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<std::string,std::char_traits<char><std::allocator<char>>>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<std::string,std::char_traits<char><std::allocator<char>>>,std::less<EQKitTypes::Attributes::Enum>,true>,std::char_traits<char><std::vector<std::string,std::char_traits<char><std::allocator<char>>>>>::destroy(uint64_t a1, char *a2)
{
  void **v4;

  if (a2)
  {
    std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<std::string,std::char_traits<char><std::allocator<char>>>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<std::string,std::char_traits<char><std::allocator<char>>>,std::less<EQKitTypes::Attributes::Enum>,true>,std::char_traits<char><std::vector<std::string,std::char_traits<char><std::allocator<char>>>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<std::string,std::char_traits<char><std::allocator<char>>>>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::vector<std::string,std::char_traits<char><std::allocator<char>>>,std::less<EQKitTypes::Attributes::Enum>,true>,std::char_traits<char><std::vector<std::string,std::char_traits<char><std::allocator<char>>>>>::destroy(a1, *((_QWORD *)a2 + 1));
    v4 = (void **)(a2 + 48);
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v4);
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::string>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::string,std::less<EQKitTypes::Attributes::Enum>,true>,std::char_traits<char><std::string>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::string>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::string,std::less<EQKitTypes::Attributes::Enum>,true>,std::char_traits<char><std::string>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::string>,std::__map_value_compare<EQKitTypes::Attributes::Enum,std::string,std::less<EQKitTypes::Attributes::Enum>,true>,std::char_traits<char><std::string>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[71] < 0)
      operator delete(*((void **)a2 + 6));
    operator delete(a2);
  }
}

uint64_t std::set<EQKitTypes::Attributes::Enum>::set[abi:nn180100]<EQKitTypes::Attributes::Enum const*>(uint64_t a1, int *a2, int *a3)
{
  uint64_t *v4;
  int *v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<EQKitTypes::Attributes::Enum>::__emplace_hint_unique_key_args<EQKitTypes::Attributes::Enum,EQKitTypes::Attributes::Enum const&>((uint64_t **)a1, v4, v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_21793C258(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<EQKitTypes::Attributes::Enum>::__emplace_hint_unique_key_args<EQKitTypes::Attributes::Enum,EQKitTypes::Attributes::Enum const&>(uint64_t **a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<EQKitTypes::Attributes::Enum>::__find_equal<EQKitTypes::Attributes::Enum>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<EQKitTypes::Attributes::Enum>::__find_equal<EQKitTypes::Attributes::Enum>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void sub_21793C698(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21793C8B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21793C9F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_21793CAB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21793D294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_21793D324(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EQKitMathMLElement::fromString(const void **a1)
{
  uint64_t v2;

  if (EQKitMathMLElement::map(void)::onceToken != -1)
    dispatch_once(&EQKitMathMLElement::map(void)::onceToken, &__block_literal_global_1);
  v2 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(EQKitMathMLElement::map(void)::map, a1);
  if (EQKitMathMLElement::map(void)::onceToken != -1)
    dispatch_once(&EQKitMathMLElement::map(void)::onceToken, &__block_literal_global_1);
  if (EQKitMathMLElement::map(void)::map + 8 == v2)
    return 0;
  else
    return *(unsigned int *)(v2 + 56);
}

uint64_t EQKitTypes::Display::displayFromMathMLString(const void **a1, uint64_t a2)
{
  uint64_t v4;

  if (EQKitTypes::Display::map(void)::onceToken != -1)
    dispatch_once(&EQKitTypes::Display::map(void)::onceToken, &__block_literal_global_184);
  v4 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(EQKitTypes::Display::map(void)::map, a1);
  if (EQKitTypes::Display::map(void)::onceToken != -1)
    dispatch_once(&EQKitTypes::Display::map(void)::onceToken, &__block_literal_global_184);
  if (EQKitTypes::Display::map(void)::map + 8 != v4)
    return *(unsigned int *)(v4 + 56);
  return a2;
}

uint64_t EQKit::Script::variantFromMathMLString(const void **a1, uint64_t a2)
{
  uint64_t v4;

  if (EQKit::Script::map(void)::onceToken != -1)
    dispatch_once(&EQKit::Script::map(void)::onceToken, &__block_literal_global_187);
  v4 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(EQKit::Script::map(void)::map, a1);
  if (EQKit::Script::map(void)::onceToken != -1)
    dispatch_once(&EQKit::Script::map(void)::onceToken, &__block_literal_global_187);
  if (EQKit::Script::map(void)::map + 8 != v4)
    return *(unsigned int *)(v4 + 56);
  return a2;
}

uint64_t EQKit::Config::Operator::formFromMathMLString(const void **a1, uint64_t a2)
{
  uint64_t v4;

  if (EQKit::Config::Operator::map(void)::onceToken != -1)
    dispatch_once(&EQKit::Config::Operator::map(void)::onceToken, &__block_literal_global_206);
  v4 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(EQKit::Config::Operator::map(void)::map, a1);
  if (EQKit::Config::Operator::map(void)::onceToken != -1)
    dispatch_once(&EQKit::Config::Operator::map(void)::onceToken, &__block_literal_global_206);
  if (EQKit::Config::Operator::map(void)::map + 8 != v4)
    return *(unsigned int *)(v4 + 56);
  return a2;
}

uint64_t EQKitTypes::Align::alignFromMathMLString(const void **a1, uint64_t a2)
{
  uint64_t v4;

  if (EQKitTypes::Align::map(void)::onceToken != -1)
    dispatch_once(&EQKitTypes::Align::map(void)::onceToken, &__block_literal_global_210);
  v4 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(EQKitTypes::Align::map(void)::map, a1);
  if (EQKitTypes::Align::map(void)::onceToken != -1)
    dispatch_once(&EQKitTypes::Align::map(void)::onceToken, &__block_literal_global_210);
  if (EQKitTypes::Align::map(void)::map + 8 != v4)
    return *(unsigned int *)(v4 + 56);
  return a2;
}

uint64_t EQKitTypes::VAlign::vAlignFromMathMLString(const void **a1, uint64_t a2)
{
  uint64_t v4;

  if (EQKitTypes::VAlign::map(void)::onceToken != -1)
    dispatch_once(&EQKitTypes::VAlign::map(void)::onceToken, &__block_literal_global_214);
  v4 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(EQKitTypes::VAlign::map(void)::map, a1);
  if (EQKitTypes::VAlign::map(void)::onceToken != -1)
    dispatch_once(&EQKitTypes::VAlign::map(void)::onceToken, &__block_literal_global_214);
  if (EQKitTypes::VAlign::map(void)::map + 8 != v4)
    return *(unsigned int *)(v4 + 56);
  return a2;
}

uint64_t EQKitTypes::Boolean::BOOLeanFromMathMLString(const void **a1, uint64_t a2)
{
  uint64_t v4;

  if (EQKitTypes::Boolean::map(void)::onceToken != -1)
    dispatch_once(&EQKitTypes::Boolean::map(void)::onceToken, &__block_literal_global_219);
  v4 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(EQKitTypes::Boolean::map(void)::map, a1);
  if (EQKitTypes::Boolean::map(void)::onceToken != -1)
    dispatch_once(&EQKitTypes::Boolean::map(void)::onceToken, &__block_literal_global_219);
  if (EQKitTypes::Boolean::map(void)::map + 8 != v4)
    return *(unsigned int *)(v4 + 56);
  return a2;
}

uint64_t EQKitTypes::Attributes::attributeFromMathMLString(const void **a1, uint64_t a2)
{
  uint64_t v4;

  if (EQKitTypes::Attributes::map(void)::onceToken != -1)
    dispatch_once(&EQKitTypes::Attributes::map(void)::onceToken, &__block_literal_global_220);
  v4 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(EQKitTypes::Attributes::map(void)::map, a1);
  if (EQKitTypes::Attributes::map(void)::onceToken != -1)
    dispatch_once(&EQKitTypes::Attributes::map(void)::onceToken, &__block_literal_global_220);
  if (EQKitTypes::Attributes::map(void)::map + 8 != v4)
    return *(unsigned int *)(v4 + 56);
  return a2;
}

void EQKitTypes::Align::alignVectorFromMathMLString(std::string *__str@<X0>, char **a2@<X8>)
{
  std::string::size_type v4;
  uint64_t v5;
  std::string::size_type size;
  std::string *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  std::string::size_type v11;
  int v12;
  int v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  int v24;
  int v25;
  std::string *v26;
  std::string::size_type v27;
  std::string __p;
  char v29;

  v4 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v5 = (uint64_t)(a2 + 2);
  do
  {
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0)
      v7 = __str;
    else
      v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
    if ((size & 0x80u) != 0)
      size = __str->__r_.__value_.__l.__size_;
    if (size > v4)
    {
      v8 = (unsigned __int8 *)v7 + v4;
      v9 = (unsigned __int8 *)v7 + size;
LABEL_9:
      v10 = 0;
      while (*v8 != asc_217C39177[v10])
      {
        if (++v10 == 3)
        {
          if (++v8 != v9)
            goto LABEL_9;
          goto LABEL_16;
        }
      }
      if (v8 != v9)
      {
        v11 = v8 - (unsigned __int8 *)v7;
        if (v8 - (unsigned __int8 *)v7 != -1)
          goto LABEL_17;
      }
    }
LABEL_16:
    v11 = size;
LABEL_17:
    std::string::basic_string(&__p, __str, v4, v11 - v4, (std::allocator<char> *)&v29);
    v12 = EQKitTypes::Align::alignFromMathMLString((const void **)&__p.__r_.__value_.__l.__data_, 0);
    v13 = v12;
    if (v12)
    {
      v15 = a2[1];
      v14 = (unint64_t)a2[2];
      if ((unint64_t)v15 >= v14)
      {
        v17 = *a2;
        v18 = (v15 - *a2) >> 2;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 62)
          abort();
        v20 = v14 - (_QWORD)v17;
        if (v20 >> 1 > v19)
          v19 = v20 >> 1;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
          v21 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v22 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitTypes::Notation::Enum>>(v5, v21);
          v17 = *a2;
          v15 = a2[1];
        }
        else
        {
          v22 = 0;
        }
        v23 = &v22[4 * v18];
        *(_DWORD *)v23 = v13;
        v16 = v23 + 4;
        while (v15 != v17)
        {
          v24 = *((_DWORD *)v15 - 1);
          v15 -= 4;
          *((_DWORD *)v23 - 1) = v24;
          v23 -= 4;
        }
        *a2 = v23;
        a2[1] = v16;
        a2[2] = &v22[4 * v21];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *(_DWORD *)v15 = v12;
        v16 = v15 + 4;
      }
      a2[1] = v16;
    }
    v4 = v11 + 1;
    v25 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (v25 >= 0)
      v26 = __str;
    else
      v26 = (std::string *)__str->__r_.__value_.__r.__words[0];
    if (v25 >= 0)
      v27 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    else
      v27 = __str->__r_.__value_.__l.__size_;
    if (v27 <= v4)
    {
LABEL_44:
      v4 = -1;
    }
    else
    {
      while (memchr(" \t\n", v26->__r_.__value_.__s.__data_[v4], 3uLL))
      {
        if (v27 == ++v4)
          goto LABEL_44;
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  while (v4 != -1);
}

void sub_21793DFCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void *v16;

  if (a14 < 0)
    operator delete(__p);
  v16 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void EQKitTypes::VAlign::vAlignVectorFromMathMLString(std::string *__str@<X0>, char **a2@<X8>)
{
  std::string::size_type v4;
  uint64_t v5;
  std::string::size_type size;
  std::string *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  std::string::size_type v11;
  int v12;
  int v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  int v24;
  int v25;
  std::string *v26;
  std::string::size_type v27;
  std::string __p;
  char v29;

  v4 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v5 = (uint64_t)(a2 + 2);
  do
  {
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0)
      v7 = __str;
    else
      v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
    if ((size & 0x80u) != 0)
      size = __str->__r_.__value_.__l.__size_;
    if (size > v4)
    {
      v8 = (unsigned __int8 *)v7 + v4;
      v9 = (unsigned __int8 *)v7 + size;
LABEL_9:
      v10 = 0;
      while (*v8 != asc_217C39177[v10])
      {
        if (++v10 == 3)
        {
          if (++v8 != v9)
            goto LABEL_9;
          goto LABEL_16;
        }
      }
      if (v8 != v9)
      {
        v11 = v8 - (unsigned __int8 *)v7;
        if (v8 - (unsigned __int8 *)v7 != -1)
          goto LABEL_17;
      }
    }
LABEL_16:
    v11 = size;
LABEL_17:
    std::string::basic_string(&__p, __str, v4, v11 - v4, (std::allocator<char> *)&v29);
    v12 = EQKitTypes::VAlign::vAlignFromMathMLString((const void **)&__p.__r_.__value_.__l.__data_, 0);
    v13 = v12;
    if (v12)
    {
      v15 = a2[1];
      v14 = (unint64_t)a2[2];
      if ((unint64_t)v15 >= v14)
      {
        v17 = *a2;
        v18 = (v15 - *a2) >> 2;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 62)
          abort();
        v20 = v14 - (_QWORD)v17;
        if (v20 >> 1 > v19)
          v19 = v20 >> 1;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
          v21 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v22 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitTypes::Notation::Enum>>(v5, v21);
          v17 = *a2;
          v15 = a2[1];
        }
        else
        {
          v22 = 0;
        }
        v23 = &v22[4 * v18];
        *(_DWORD *)v23 = v13;
        v16 = v23 + 4;
        while (v15 != v17)
        {
          v24 = *((_DWORD *)v15 - 1);
          v15 -= 4;
          *((_DWORD *)v23 - 1) = v24;
          v23 -= 4;
        }
        *a2 = v23;
        a2[1] = v16;
        a2[2] = &v22[4 * v21];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *(_DWORD *)v15 = v12;
        v16 = v15 + 4;
      }
      a2[1] = v16;
    }
    v4 = v11 + 1;
    v25 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (v25 >= 0)
      v26 = __str;
    else
      v26 = (std::string *)__str->__r_.__value_.__r.__words[0];
    if (v25 >= 0)
      v27 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    else
      v27 = __str->__r_.__value_.__l.__size_;
    if (v27 <= v4)
    {
LABEL_44:
      v4 = -1;
    }
    else
    {
      while (memchr(" \t\n", v26->__r_.__value_.__s.__data_[v4], 3uLL))
      {
        if (v27 == ++v4)
          goto LABEL_44;
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  while (v4 != -1);
}

void sub_21793E20C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void *v16;

  if (a14 < 0)
    operator delete(__p);
  v16 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void EQKitTypes::Strings::separatorsFromString(uint64_t *a1@<X0>, char **a2@<X8>)
{
  id v4;
  uint64_t *v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  unint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  int64x2_t v27;
  char *v28;
  std::string *v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  void *__p[2];
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  std::__split_buffer<std::string> v46;
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = objc_alloc(MEMORY[0x24BDD17C8]);
  if (*((char *)a1 + 23) >= 0)
    v5 = a1;
  else
    v5 = (uint64_t *)*a1;
  v6 = (void *)objc_msgSend(v4, "initWithUTF8String:", v5);
  if (v6)
  {
    objc_msgSend(v6, "rangeOfCharacterFromSet:", objc_msgSend(MEMORY[0x24BDD14A8], "whitespaceAndNewlineCharacterSet"));
    v38 = v6;
    if (v7)
    {
      v8 = (id)objc_msgSend(v6, "componentsSeparatedByCharactersInSet:", objc_msgSend(MEMORY[0x24BDD14A8], "whitespaceAndNewlineCharacterSet", v6));
    }
    else
    {
      v31 = objc_msgSend(v6, "length");
      if (v31)
      {
        v32 = 0;
        v8 = 0;
        do
        {
          v33 = objc_msgSend(v6, "rangeOfComposedCharacterSequenceAtIndex:", v32, v38);
          v35 = v34;
          if (v34)
          {
            v36 = objc_msgSend(v6, "substringWithRange:", v33, v34);
            if (!v8)
              v8 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
            objc_msgSend(v8, "addObject:", v36);
          }
          else
          {
            v37 = (void *)objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
            objc_msgSend(v37, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "StringVector EQKitTypes::Strings::separatorsFromString(const std::string &)"), CFSTR("EQKitMathMLUtil.mm"), 656, CFSTR("Bad length in separatorArrayFromString"));
            v35 = 1;
          }
          v32 += v35;
          v6 = v38;
        }
        while (v32 < v31);
      }
      else
      {
        v8 = 0;
      }
    }
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v42, v47, 16, v38);
    if (v9)
    {
      v10 = *(_QWORD *)v43;
      do
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v43 != v10)
            objc_enumerationMutation(v8);
          v12 = (char *)objc_msgSend(*(id *)(*((_QWORD *)&v42 + 1) + 8 * i), "UTF8String");
          if (v12)
          {
            std::string::basic_string[abi:nn180100]<0>(__p, v12);
            v14 = (unint64_t)a2[1];
            v13 = (unint64_t)a2[2];
            if (v14 >= v13)
            {
              v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (_QWORD)*a2) >> 3);
              v17 = v16 + 1;
              if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
                abort();
              v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)*a2) >> 3);
              if (2 * v18 > v17)
                v17 = 2 * v18;
              if (v18 >= 0x555555555555555)
                v19 = 0xAAAAAAAAAAAAAAALL;
              else
                v19 = v17;
              v46.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 2);
              if (v19)
                v20 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)(a2 + 2), v19);
              else
                v20 = 0;
              v21 = &v20[24 * v16];
              v22 = *(_OWORD *)__p;
              *((_QWORD *)v21 + 2) = v41;
              *(_OWORD *)v21 = v22;
              __p[1] = 0;
              v41 = 0;
              __p[0] = 0;
              v24 = *a2;
              v23 = (unint64_t)a2[1];
              if ((char *)v23 == *a2)
              {
                v27 = vdupq_n_s64(v23);
                v25 = &v20[24 * v16];
              }
              else
              {
                v25 = &v20[24 * v16];
                do
                {
                  v26 = *(_OWORD *)(v23 - 24);
                  *((_QWORD *)v25 - 1) = *(_QWORD *)(v23 - 8);
                  *(_OWORD *)(v25 - 24) = v26;
                  v25 -= 24;
                  *(_QWORD *)(v23 - 16) = 0;
                  *(_QWORD *)(v23 - 8) = 0;
                  *(_QWORD *)(v23 - 24) = 0;
                  v23 -= 24;
                }
                while ((char *)v23 != v24);
                v27 = *(int64x2_t *)a2;
              }
              v28 = v21 + 24;
              *a2 = v25;
              a2[1] = v21 + 24;
              *(int64x2_t *)&v46.__begin_ = v27;
              v29 = (std::string *)a2[2];
              a2[2] = &v20[24 * v19];
              v46.__end_cap_.__value_ = v29;
              v46.__first_ = (std::__split_buffer<std::string>::pointer)v27.i64[0];
              std::__split_buffer<std::string>::~__split_buffer(&v46);
              v30 = SHIBYTE(v41);
              a2[1] = v28;
              if (v30 < 0)
                operator delete(__p[0]);
            }
            else
            {
              v15 = *(_OWORD *)__p;
              *(_QWORD *)(v14 + 16) = v41;
              *(_OWORD *)v14 = v15;
              a2[1] = (char *)(v14 + 24);
            }
          }
        }
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v42, v47, 16);
      }
      while (v9);
    }

  }
}

void sub_21793E5D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t EQKitTypes::Integer::integerFromMathMLString(const std::string *a1, BOOL *a2)
{
  uint64_t v3;
  _QWORD v5[12];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = 0;
  std::istringstream::basic_istringstream[abi:nn180100](v5, a1, 8);
  MEMORY[0x219A152D4](v5, &v8);
  *a2 = (*(_DWORD *)((_BYTE *)&v5[4] + *(_QWORD *)(v5[0] - 24)) & 7) == 2;
  v3 = v8;
  v5[0] = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  v5[2] = MEMORY[0x24BEDB848] + 16;
  if (v6 < 0)
    operator delete((void *)v5[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x219A1537C](&v7);
  return v3;
}

void sub_21793E708(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::istringstream::~istringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t EQKitTypes::UInteger::uIntegerFromMathMLString(const std::string *a1, BOOL *a2)
{
  uint64_t v3;
  _QWORD v5[12];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v8 = 0;
  std::istringstream::basic_istringstream[abi:nn180100](v5, a1, 8);
  MEMORY[0x219A152E0](v5, &v8);
  *a2 = (*(_DWORD *)((_BYTE *)&v5[4] + *(_QWORD *)(v5[0] - 24)) & 7) == 2;
  v3 = v8;
  v5[0] = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  v5[2] = MEMORY[0x24BEDB848] + 16;
  if (v6 < 0)
    operator delete((void *)v5[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x219A1537C](&v7);
  return v3;
}

void sub_21793E7F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::istringstream::~istringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t EQKitTypes::Crossout::crossoutFromMathMLString(const void **a1, uint64_t a2)
{
  uint64_t v4;

  if (EQKitTypes::Crossout::map(void)::onceToken != -1)
    dispatch_once(&EQKitTypes::Crossout::map(void)::onceToken, &__block_literal_global_263);
  v4 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(EQKitTypes::Crossout::map(void)::map, a1);
  if (EQKitTypes::Crossout::map(void)::onceToken != -1)
    dispatch_once(&EQKitTypes::Crossout::map(void)::onceToken, &__block_literal_global_263);
  if (EQKitTypes::Crossout::map(void)::map + 8 != v4)
    return *(unsigned int *)(v4 + 56);
  return a2;
}

void EQKitTypes::Crossout::crossoutVectorFromMathMLString(std::string *__str@<X0>, char **a2@<X8>)
{
  std::string::size_type v4;
  uint64_t v5;
  std::string::size_type size;
  std::string *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  std::string::size_type v11;
  int v12;
  int v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  int v24;
  int v25;
  std::string *v26;
  std::string::size_type v27;
  std::string __p;
  char v29;

  v4 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v5 = (uint64_t)(a2 + 2);
  do
  {
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0)
      v7 = __str;
    else
      v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
    if ((size & 0x80u) != 0)
      size = __str->__r_.__value_.__l.__size_;
    if (size > v4)
    {
      v8 = (unsigned __int8 *)v7 + v4;
      v9 = (unsigned __int8 *)v7 + size;
LABEL_9:
      v10 = 0;
      while (*v8 != asc_217C39177[v10])
      {
        if (++v10 == 3)
        {
          if (++v8 != v9)
            goto LABEL_9;
          goto LABEL_16;
        }
      }
      if (v8 != v9)
      {
        v11 = v8 - (unsigned __int8 *)v7;
        if (v8 - (unsigned __int8 *)v7 != -1)
          goto LABEL_17;
      }
    }
LABEL_16:
    v11 = size;
LABEL_17:
    std::string::basic_string(&__p, __str, v4, v11 - v4, (std::allocator<char> *)&v29);
    v12 = EQKitTypes::Crossout::crossoutFromMathMLString((const void **)&__p.__r_.__value_.__l.__data_, 0);
    v13 = v12;
    v15 = a2[1];
    v14 = (unint64_t)a2[2];
    if ((unint64_t)v15 >= v14)
    {
      v17 = *a2;
      v18 = (v15 - *a2) >> 2;
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 62)
        abort();
      v20 = v14 - (_QWORD)v17;
      if (v20 >> 1 > v19)
        v19 = v20 >> 1;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
        v21 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v21 = v19;
      if (v21)
      {
        v22 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitTypes::Notation::Enum>>(v5, v21);
        v17 = *a2;
        v15 = a2[1];
      }
      else
      {
        v22 = 0;
      }
      v23 = &v22[4 * v18];
      *(_DWORD *)v23 = v13;
      v16 = v23 + 4;
      while (v15 != v17)
      {
        v24 = *((_DWORD *)v15 - 1);
        v15 -= 4;
        *((_DWORD *)v23 - 1) = v24;
        v23 -= 4;
      }
      *a2 = v23;
      a2[1] = v16;
      a2[2] = &v22[4 * v21];
      if (v17)
        operator delete(v17);
    }
    else
    {
      *(_DWORD *)v15 = v12;
      v16 = v15 + 4;
    }
    a2[1] = v16;
    v4 = v11 + 1;
    v25 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (v25 >= 0)
      v26 = __str;
    else
      v26 = (std::string *)__str->__r_.__value_.__r.__words[0];
    if (v25 >= 0)
      v27 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    else
      v27 = __str->__r_.__value_.__l.__size_;
    if (v27 <= v4)
    {
LABEL_42:
      v4 = -1;
    }
    else
    {
      while (memchr(" \t\n", v26->__r_.__value_.__s.__data_[v4], 3uLL))
      {
        if (v27 == ++v4)
          goto LABEL_42;
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  while (v4 != -1);
}

void sub_21793EAAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void *v16;

  if (a14 < 0)
    operator delete(__p);
  v16 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EQKitTypes::Notation::notationFromMathMLString(const void **a1, uint64_t a2)
{
  uint64_t v4;

  if (EQKitTypes::Notation::map(void)::onceToken != -1)
    dispatch_once(&EQKitTypes::Notation::map(void)::onceToken, &__block_literal_global_268);
  v4 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(EQKitTypes::Notation::map(void)::map, a1);
  if (EQKitTypes::Notation::map(void)::onceToken != -1)
    dispatch_once(&EQKitTypes::Notation::map(void)::onceToken, &__block_literal_global_268);
  if (EQKitTypes::Notation::map(void)::map + 8 != v4)
    return *(unsigned int *)(v4 + 56);
  return a2;
}

void EQKitTypes::Notation::notationVectorFromMathMLString(std::string *__str@<X0>, char **a2@<X8>)
{
  std::string::size_type v4;
  uint64_t v5;
  std::string::size_type size;
  std::string *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  std::string::size_type v11;
  int v12;
  int v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  int v24;
  int v25;
  std::string *v26;
  std::string::size_type v27;
  std::string __p;
  char v29;

  v4 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v5 = (uint64_t)(a2 + 2);
  do
  {
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0)
      v7 = __str;
    else
      v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
    if ((size & 0x80u) != 0)
      size = __str->__r_.__value_.__l.__size_;
    if (size > v4)
    {
      v8 = (unsigned __int8 *)v7 + v4;
      v9 = (unsigned __int8 *)v7 + size;
LABEL_9:
      v10 = 0;
      while (*v8 != asc_217C39177[v10])
      {
        if (++v10 == 3)
        {
          if (++v8 != v9)
            goto LABEL_9;
          goto LABEL_16;
        }
      }
      if (v8 != v9)
      {
        v11 = v8 - (unsigned __int8 *)v7;
        if (v8 - (unsigned __int8 *)v7 != -1)
          goto LABEL_17;
      }
    }
LABEL_16:
    v11 = size;
LABEL_17:
    std::string::basic_string(&__p, __str, v4, v11 - v4, (std::allocator<char> *)&v29);
    v12 = EQKitTypes::Notation::notationFromMathMLString((const void **)&__p.__r_.__value_.__l.__data_, 0);
    v13 = v12;
    v15 = a2[1];
    v14 = (unint64_t)a2[2];
    if ((unint64_t)v15 >= v14)
    {
      v17 = *a2;
      v18 = (v15 - *a2) >> 2;
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 62)
        abort();
      v20 = v14 - (_QWORD)v17;
      if (v20 >> 1 > v19)
        v19 = v20 >> 1;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
        v21 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v21 = v19;
      if (v21)
      {
        v22 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitTypes::Notation::Enum>>(v5, v21);
        v17 = *a2;
        v15 = a2[1];
      }
      else
      {
        v22 = 0;
      }
      v23 = &v22[4 * v18];
      *(_DWORD *)v23 = v13;
      v16 = v23 + 4;
      while (v15 != v17)
      {
        v24 = *((_DWORD *)v15 - 1);
        v15 -= 4;
        *((_DWORD *)v23 - 1) = v24;
        v23 -= 4;
      }
      *a2 = v23;
      a2[1] = v16;
      a2[2] = &v22[4 * v21];
      if (v17)
        operator delete(v17);
    }
    else
    {
      *(_DWORD *)v15 = v12;
      v16 = v15 + 4;
    }
    a2[1] = v16;
    v4 = v11 + 1;
    v25 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (v25 >= 0)
      v26 = __str;
    else
      v26 = (std::string *)__str->__r_.__value_.__r.__words[0];
    if (v25 >= 0)
      v27 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    else
      v27 = __str->__r_.__value_.__l.__size_;
    if (v27 <= v4)
    {
LABEL_42:
      v4 = -1;
    }
    else
    {
      while (memchr(" \t\n", v26->__r_.__value_.__s.__data_[v4], 3uLL))
      {
        if (v27 == ++v4)
          goto LABEL_42;
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  while (v4 != -1);
}

void sub_21793ED88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void *v16;

  if (a14 < 0)
    operator delete(__p);
  v16 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EQKitTypes::GroupAlign::groupAlignFromMathMLString(const void **a1, uint64_t a2)
{
  uint64_t v4;

  if (EQKitTypes::GroupAlign::map(void)::onceToken != -1)
    dispatch_once(&EQKitTypes::GroupAlign::map(void)::onceToken, &__block_literal_global_270);
  v4 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(EQKitTypes::GroupAlign::map(void)::map, a1);
  if (EQKitTypes::GroupAlign::map(void)::onceToken != -1)
    dispatch_once(&EQKitTypes::GroupAlign::map(void)::onceToken, &__block_literal_global_270);
  if (EQKitTypes::GroupAlign::map(void)::map + 8 != v4)
    return *(unsigned int *)(v4 + 56);
  return a2;
}

uint64_t EQKitTypes::Edge::edgeFromMathMLString(const void **a1, uint64_t a2)
{
  uint64_t v4;

  if (EQKitTypes::Edge::map(void)::onceToken != -1)
    dispatch_once(&EQKitTypes::Edge::map(void)::onceToken, &__block_literal_global_271);
  v4 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(EQKitTypes::Edge::map(void)::map, a1);
  if (EQKitTypes::Edge::map(void)::onceToken != -1)
    dispatch_once(&EQKitTypes::Edge::map(void)::onceToken, &__block_literal_global_271);
  if (EQKitTypes::Edge::map(void)::map + 8 != v4)
    return *(unsigned int *)(v4 + 56);
  return a2;
}

void ___ZN18EQKitMathMLElementL3mapEv_block_invoke()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2[3];
  int v3;
  _QWORD v4[3];
  int v5;
  _QWORD v6[3];
  int v7;
  _QWORD v8[3];
  int v9;
  _QWORD v10[3];
  int v11;
  _QWORD v12[3];
  int v13;
  _QWORD v14[3];
  int v15;
  _QWORD v16[3];
  int v17;
  _QWORD v18[3];
  int v19;
  _QWORD v20[3];
  int v21;
  _QWORD v22[3];
  int v23;
  _QWORD v24[3];
  int v25;
  _QWORD v26[3];
  int v27;
  _QWORD v28[3];
  int v29;
  _QWORD v30[3];
  int v31;
  _QWORD v32[3];
  int v33;
  _QWORD v34[3];
  int v35;
  _QWORD v36[3];
  int v37;
  _QWORD v38[3];
  int v39;
  _QWORD v40[3];
  int v41;
  _QWORD v42[3];
  int v43;
  _QWORD v44[3];
  int v45;
  _QWORD v46[3];
  int v47;
  _QWORD v48[3];
  int v49;
  _QWORD v50[3];
  int v51;
  _QWORD v52[3];
  int v53;
  _QWORD v54[3];
  int v55;
  _QWORD v56[3];
  int v57;
  _QWORD v58[3];
  int v59;
  _QWORD v60[3];
  int v61;
  _QWORD v62[3];
  int v63;
  _QWORD v64[3];
  int v65;
  _QWORD v66[3];
  int v67;
  _QWORD v68[3];
  int v69;
  _QWORD v70[3];
  int v71;
  _QWORD v72[3];
  int v73;
  _QWORD v74[3];
  int v75;
  _QWORD v76[3];
  int v77;
  _QWORD v78[3];
  int v79;
  _QWORD v80[3];
  int v81;
  _QWORD v82[3];
  int v83;
  _QWORD v84[3];
  int v85;
  _QWORD v86[3];
  int v87;
  _QWORD v88[3];
  int v89;
  _QWORD v90[3];
  int v91;
  _QWORD v92[3];
  int v93;
  _QWORD v94[3];
  int v95;
  _QWORD v96[3];
  int v97;
  _QWORD v98[3];
  int v99;
  _QWORD v100[3];
  int v101;
  _QWORD v102[3];
  int v103;
  _QWORD v104[3];
  int v105;
  _QWORD v106[3];
  int v107;
  _QWORD v108[3];
  int v109;
  _QWORD v110[3];
  int v111;
  _QWORD v112[3];
  int v113;
  _QWORD v114[3];
  int v115;
  _QWORD v116[3];
  int v117;
  _QWORD v118[3];
  int v119;
  _QWORD v120[3];
  int v121;
  _QWORD v122[3];
  int v123;
  _QWORD v124[3];
  int v125;
  _QWORD v126[3];
  int v127;
  _QWORD v128[3];
  int v129;
  _QWORD v130[3];
  int v131;
  _QWORD v132[3];
  int v133;
  _QWORD v134[3];
  int v135;
  _QWORD v136[3];
  int v137;
  _QWORD v138[3];
  int v139;
  _QWORD v140[3];
  int v141;
  _QWORD v142[3];
  int v143;
  _QWORD v144[3];
  int v145;
  _QWORD v146[3];
  int v147;
  _QWORD v148[3];
  int v149;
  _QWORD v150[3];
  int v151;
  _QWORD v152[3];
  int v153;
  _QWORD v154[3];
  int v155;
  _QWORD v156[3];
  int v157;
  _QWORD v158[3];
  int v159;
  _QWORD v160[3];
  int v161;
  _QWORD v162[3];
  int v163;
  _QWORD v164[3];
  int v165;
  _QWORD v166[3];
  int v167;
  _QWORD v168[3];
  int v169;
  _QWORD v170[3];
  int v171;
  _QWORD v172[3];
  int v173;
  _QWORD v174[3];
  int v175;
  _QWORD v176[3];
  int v177;
  _QWORD v178[3];
  int v179;
  _QWORD v180[3];
  int v181;
  _QWORD v182[3];
  int v183;
  _QWORD v184[3];
  int v185;
  _QWORD v186[3];
  int v187;
  _QWORD v188[3];
  int v189;
  _QWORD v190[3];
  int v191;
  _QWORD v192[3];
  int v193;
  _QWORD v194[3];
  int v195;
  _QWORD v196[3];
  int v197;
  _QWORD v198[3];
  int v199;
  _QWORD v200[3];
  int v201;
  _QWORD v202[3];
  int v203;
  _QWORD v204[3];
  int v205;
  _QWORD v206[3];
  int v207;
  _QWORD v208[3];
  int v209;
  _QWORD v210[3];
  int v211;
  _QWORD v212[3];
  int v213;
  _QWORD v214[3];
  int v215;
  _QWORD v216[3];
  int v217;
  _QWORD v218[3];
  int v219;
  _QWORD v220[3];
  int v221;
  _QWORD v222[3];
  int v223;
  _QWORD v224[3];
  int v225;
  _QWORD v226[3];
  int v227;
  _QWORD v228[3];
  int v229;
  _QWORD v230[3];
  int v231;
  _QWORD v232[3];
  int v233;
  _QWORD v234[3];
  int v235;
  _QWORD v236[3];
  int v237;
  _QWORD v238[3];
  int v239;
  _QWORD v240[3];
  int v241;
  _QWORD v242[3];
  int v243;
  _QWORD v244[3];
  int v245;
  _QWORD v246[3];
  int v247;
  _QWORD v248[3];
  int v249;
  _QWORD v250[3];
  int v251;
  _QWORD v252[3];
  int v253;
  _QWORD v254[3];
  int v255;
  _QWORD v256[3];
  int v257;
  _QWORD v258[3];
  int v259;
  _QWORD v260[3];
  int v261;
  _QWORD v262[3];
  int v263;
  _QWORD v264[3];
  int v265;
  _QWORD v266[3];
  int v267;
  _QWORD v268[3];
  int v269;
  _QWORD v270[3];
  int v271;
  _QWORD v272[3];
  int v273;
  _QWORD v274[3];
  int v275;
  _QWORD v276[3];
  int v277;
  _QWORD v278[3];
  int v279;
  _QWORD v280[3];
  int v281;
  _QWORD v282[3];
  int v283;
  _QWORD v284[3];
  int v285;
  _QWORD v286[3];
  int v287;
  _QWORD v288[3];
  int v289;
  _QWORD v290[3];
  int v291;
  _QWORD v292[3];
  int v293;
  _QWORD v294[3];
  int v295;
  _QWORD v296[3];
  int v297;
  _QWORD v298[3];
  int v299;
  _QWORD v300[3];
  int v301;
  _QWORD v302[3];
  int v303;
  _QWORD v304[3];
  int v305;
  _QWORD v306[3];
  int v307;
  _QWORD v308[3];
  int v309;
  _QWORD v310[3];
  int v311;
  _QWORD v312[3];
  int v313;
  _QWORD v314[3];
  int v315;
  _QWORD v316[3];
  int v317;
  _QWORD v318[3];
  int v319;
  _QWORD v320[3];
  int v321;
  _QWORD v322[3];
  int v323;
  _QWORD v324[3];
  int v325;
  _QWORD v326[3];
  int v327;
  _QWORD v328[3];
  int v329;
  _QWORD v330[3];
  int v331;
  _QWORD v332[3];
  int v333;
  _QWORD v334[3];
  int v335;
  _QWORD v336[3];
  int v337;
  _QWORD v338[3];
  int v339;
  _QWORD v340[3];
  int v341;
  _QWORD v342[3];
  int v343;
  _QWORD v344[3];
  int v345;
  _QWORD v346[3];
  int v347;
  _QWORD v348[3];
  int v349;
  _QWORD v350[3];
  int v351;
  const void *v352;

  MEMORY[0x24BDAC7A8]();
  v352 = (const void *)*MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:nn180100]<0>(v2, "mi");
  v3 = 1;
  std::string::basic_string[abi:nn180100]<0>(v4, "mn");
  v5 = 2;
  std::string::basic_string[abi:nn180100]<0>(v6, "mo");
  v7 = 3;
  std::string::basic_string[abi:nn180100]<0>(v8, "mrow");
  v9 = 4;
  std::string::basic_string[abi:nn180100]<0>(v10, "semantics");
  v11 = 5;
  std::string::basic_string[abi:nn180100]<0>(v12, "annotation");
  v13 = 6;
  std::string::basic_string[abi:nn180100]<0>(v14, "mfrac");
  v15 = 7;
  std::string::basic_string[abi:nn180100]<0>(v16, "mphantom");
  v17 = 8;
  std::string::basic_string[abi:nn180100]<0>(v18, "msub");
  v19 = 9;
  std::string::basic_string[abi:nn180100]<0>(v20, "msup");
  v21 = 10;
  std::string::basic_string[abi:nn180100]<0>(v22, "msubsup");
  v23 = 11;
  std::string::basic_string[abi:nn180100]<0>(v24, "mfenced");
  v25 = 12;
  std::string::basic_string[abi:nn180100]<0>(v26, "mstyle");
  v27 = 13;
  std::string::basic_string[abi:nn180100]<0>(v28, "munder");
  v29 = 14;
  std::string::basic_string[abi:nn180100]<0>(v30, "mover");
  v31 = 15;
  std::string::basic_string[abi:nn180100]<0>(v32, "munderover");
  v33 = 16;
  std::string::basic_string[abi:nn180100]<0>(v34, "mstack");
  v35 = 17;
  std::string::basic_string[abi:nn180100]<0>(v36, "msgroup");
  v37 = 18;
  std::string::basic_string[abi:nn180100]<0>(v38, "msrow");
  v39 = 19;
  std::string::basic_string[abi:nn180100]<0>(v40, "msline");
  v41 = 20;
  std::string::basic_string[abi:nn180100]<0>(v42, "mscarries");
  v43 = 21;
  std::string::basic_string[abi:nn180100]<0>(v44, "mscarry");
  v45 = 22;
  std::string::basic_string[abi:nn180100]<0>(v46, "mlongdiv");
  v47 = 23;
  std::string::basic_string[abi:nn180100]<0>(v48, "mtable");
  v49 = 24;
  std::string::basic_string[abi:nn180100]<0>(v50, "mtr");
  v51 = 25;
  std::string::basic_string[abi:nn180100]<0>(v52, "mlabeledtr");
  v53 = 26;
  std::string::basic_string[abi:nn180100]<0>(v54, "mtd");
  v55 = 27;
  std::string::basic_string[abi:nn180100]<0>(v56, "none");
  v57 = 30;
  std::string::basic_string[abi:nn180100]<0>(v58, "mroot");
  v59 = 28;
  std::string::basic_string[abi:nn180100]<0>(v60, "msqrt");
  v61 = 29;
  std::string::basic_string[abi:nn180100]<0>(v62, "mglyph");
  v63 = 31;
  std::string::basic_string[abi:nn180100]<0>(v64, "ms");
  v65 = 32;
  std::string::basic_string[abi:nn180100]<0>(v66, "mtext");
  v67 = 33;
  std::string::basic_string[abi:nn180100]<0>(v68, "maction");
  v69 = 34;
  std::string::basic_string[abi:nn180100]<0>(v70, "mspace");
  v71 = 35;
  std::string::basic_string[abi:nn180100]<0>(v72, "menclose");
  v73 = 36;
  std::string::basic_string[abi:nn180100]<0>(v74, "mpadded");
  v75 = 37;
  std::string::basic_string[abi:nn180100]<0>(v76, "maligngroup");
  v77 = 38;
  std::string::basic_string[abi:nn180100]<0>(v78, "malignmark");
  v79 = 39;
  std::string::basic_string[abi:nn180100]<0>(v80, "cn");
  v81 = 40;
  std::string::basic_string[abi:nn180100]<0>(v82, "ci");
  v83 = 41;
  std::string::basic_string[abi:nn180100]<0>(v84, "csymbol");
  v85 = 42;
  std::string::basic_string[abi:nn180100]<0>(v86, "apply");
  v87 = 43;
  std::string::basic_string[abi:nn180100]<0>(v88, "bind");
  v89 = 44;
  std::string::basic_string[abi:nn180100]<0>(v90, "share");
  v91 = 45;
  std::string::basic_string[abi:nn180100]<0>(v92, "cerror");
  v93 = 46;
  std::string::basic_string[abi:nn180100]<0>(v94, "cbytes");
  v95 = 47;
  std::string::basic_string[abi:nn180100]<0>(v96, "cs");
  v97 = 48;
  std::string::basic_string[abi:nn180100]<0>(v98, "vector");
  v99 = 49;
  std::string::basic_string[abi:nn180100]<0>(v100, "matrix");
  v101 = 50;
  std::string::basic_string[abi:nn180100]<0>(v102, "matrixrow");
  v103 = 51;
  std::string::basic_string[abi:nn180100]<0>(v104, "reln");
  v105 = 52;
  std::string::basic_string[abi:nn180100]<0>(v106, "fn");
  v107 = 53;
  std::string::basic_string[abi:nn180100]<0>(v108, "declare");
  v109 = 54;
  std::string::basic_string[abi:nn180100]<0>(v110, "interval");
  v111 = 55;
  std::string::basic_string[abi:nn180100]<0>(v112, "inverse");
  v113 = 56;
  std::string::basic_string[abi:nn180100]<0>(v114, "ident");
  v115 = 57;
  std::string::basic_string[abi:nn180100]<0>(v116, "domain");
  v117 = 58;
  std::string::basic_string[abi:nn180100]<0>(v118, "codomain");
  v119 = 59;
  std::string::basic_string[abi:nn180100]<0>(v120, "image");
  v121 = 60;
  std::string::basic_string[abi:nn180100]<0>(v122, "ln");
  v123 = 61;
  std::string::basic_string[abi:nn180100]<0>(v124, "log");
  v125 = 62;
  std::string::basic_string[abi:nn180100]<0>(v126, "moment");
  v127 = 63;
  std::string::basic_string[abi:nn180100]<0>(v128, "lambda");
  v129 = 64;
  std::string::basic_string[abi:nn180100]<0>(v130, "compose");
  v131 = 65;
  std::string::basic_string[abi:nn180100]<0>(v132, "quotient");
  v133 = 66;
  std::string::basic_string[abi:nn180100]<0>(v134, "divide");
  v135 = 67;
  std::string::basic_string[abi:nn180100]<0>(v136, "minus");
  v137 = 68;
  std::string::basic_string[abi:nn180100]<0>(v138, "power");
  v139 = 69;
  std::string::basic_string[abi:nn180100]<0>(v140, "rem");
  v141 = 70;
  std::string::basic_string[abi:nn180100]<0>(v142, "root");
  v143 = 71;
  std::string::basic_string[abi:nn180100]<0>(v144, "factorial");
  v145 = 72;
  std::string::basic_string[abi:nn180100]<0>(v146, "abs");
  v147 = 73;
  std::string::basic_string[abi:nn180100]<0>(v148, "conjugate");
  v149 = 74;
  std::string::basic_string[abi:nn180100]<0>(v150, "arg");
  v151 = 75;
  std::string::basic_string[abi:nn180100]<0>(v152, "real");
  v153 = 76;
  std::string::basic_string[abi:nn180100]<0>(v154, "imaginary");
  v155 = 77;
  std::string::basic_string[abi:nn180100]<0>(v156, "floor");
  v157 = 78;
  std::string::basic_string[abi:nn180100]<0>(v158, "ceiling");
  v159 = 79;
  std::string::basic_string[abi:nn180100]<0>(v160, "exp");
  v161 = 80;
  std::string::basic_string[abi:nn180100]<0>(v162, "max");
  v163 = 81;
  std::string::basic_string[abi:nn180100]<0>(v164, "min");
  v165 = 82;
  std::string::basic_string[abi:nn180100]<0>(v166, "plus");
  v167 = 83;
  std::string::basic_string[abi:nn180100]<0>(v168, "times");
  v169 = 84;
  std::string::basic_string[abi:nn180100]<0>(v170, "gcd");
  v171 = 85;
  std::string::basic_string[abi:nn180100]<0>(v172, "lcm");
  v173 = 86;
  std::string::basic_string[abi:nn180100]<0>(v174, "and");
  v175 = 87;
  std::string::basic_string[abi:nn180100]<0>(v176, "or");
  v177 = 88;
  std::string::basic_string[abi:nn180100]<0>(v178, "xor");
  v179 = 89;
  std::string::basic_string[abi:nn180100]<0>(v180, "not");
  v181 = 90;
  std::string::basic_string[abi:nn180100]<0>(v182, "implies");
  v183 = 91;
  std::string::basic_string[abi:nn180100]<0>(v184, "equivalent");
  v185 = 92;
  std::string::basic_string[abi:nn180100]<0>(v186, "forall");
  v187 = 93;
  std::string::basic_string[abi:nn180100]<0>(v188, "exists");
  v189 = 94;
  std::string::basic_string[abi:nn180100]<0>(v190, "eq");
  v191 = 95;
  std::string::basic_string[abi:nn180100]<0>(v192, "gt");
  v193 = 96;
  std::string::basic_string[abi:nn180100]<0>(v194, "lt");
  v195 = 97;
  std::string::basic_string[abi:nn180100]<0>(v196, "geq");
  v197 = 98;
  std::string::basic_string[abi:nn180100]<0>(v198, "leq");
  v199 = 99;
  std::string::basic_string[abi:nn180100]<0>(v200, "neq");
  v201 = 100;
  std::string::basic_string[abi:nn180100]<0>(v202, "approx");
  v203 = 101;
  std::string::basic_string[abi:nn180100]<0>(v204, "factorof");
  v205 = 102;
  std::string::basic_string[abi:nn180100]<0>(v206, "tendsto");
  v207 = 103;
  std::string::basic_string[abi:nn180100]<0>(v208, "int");
  v209 = 104;
  std::string::basic_string[abi:nn180100]<0>(v210, "partialdiff");
  v211 = 105;
  std::string::basic_string[abi:nn180100]<0>(v212, "divergence");
  v213 = 106;
  std::string::basic_string[abi:nn180100]<0>(v214, "grad");
  v215 = 107;
  std::string::basic_string[abi:nn180100]<0>(v216, "curl");
  v217 = 108;
  std::string::basic_string[abi:nn180100]<0>(v218, "laplacian");
  v219 = 109;
  std::string::basic_string[abi:nn180100]<0>(v220, "set");
  v221 = 110;
  std::string::basic_string[abi:nn180100]<0>(v222, "list");
  v223 = 111;
  std::string::basic_string[abi:nn180100]<0>(v224, "union");
  v225 = 112;
  std::string::basic_string[abi:nn180100]<0>(v226, "intersect");
  v227 = 113;
  std::string::basic_string[abi:nn180100]<0>(v228, "cartesianproduct");
  v229 = 114;
  std::string::basic_string[abi:nn180100]<0>(v230, "in");
  v231 = 115;
  std::string::basic_string[abi:nn180100]<0>(v232, "notin");
  v233 = 116;
  std::string::basic_string[abi:nn180100]<0>(v234, "notsubset");
  v235 = 117;
  std::string::basic_string[abi:nn180100]<0>(v236, "notprsubset");
  v237 = 118;
  std::string::basic_string[abi:nn180100]<0>(v238, "setdiff");
  v239 = 119;
  std::string::basic_string[abi:nn180100]<0>(v240, "subset");
  v241 = 120;
  std::string::basic_string[abi:nn180100]<0>(v242, "prsubset");
  v243 = 121;
  std::string::basic_string[abi:nn180100]<0>(v244, "card");
  v245 = 122;
  std::string::basic_string[abi:nn180100]<0>(v246, "sum");
  v247 = 123;
  std::string::basic_string[abi:nn180100]<0>(v248, "product");
  v249 = 124;
  std::string::basic_string[abi:nn180100]<0>(v250, "limit");
  v251 = 125;
  std::string::basic_string[abi:nn180100]<0>(v252, "sin");
  v253 = 126;
  std::string::basic_string[abi:nn180100]<0>(v254, "cos");
  v255 = 127;
  std::string::basic_string[abi:nn180100]<0>(v256, "tan");
  v257 = 128;
  std::string::basic_string[abi:nn180100]<0>(v258, "sec");
  v259 = 129;
  std::string::basic_string[abi:nn180100]<0>(v260, "csc");
  v261 = 130;
  std::string::basic_string[abi:nn180100]<0>(v262, "cot");
  v263 = 131;
  std::string::basic_string[abi:nn180100]<0>(v264, "sinh");
  v265 = 132;
  std::string::basic_string[abi:nn180100]<0>(v266, "cosh");
  v267 = 133;
  std::string::basic_string[abi:nn180100]<0>(v268, "tanh");
  v269 = 134;
  std::string::basic_string[abi:nn180100]<0>(v270, "sech");
  v271 = 135;
  std::string::basic_string[abi:nn180100]<0>(v272, "csch");
  v273 = 136;
  std::string::basic_string[abi:nn180100]<0>(v274, "coth");
  v275 = 137;
  std::string::basic_string[abi:nn180100]<0>(v276, "arcsin");
  v277 = 138;
  std::string::basic_string[abi:nn180100]<0>(v278, "arccos");
  v279 = 139;
  std::string::basic_string[abi:nn180100]<0>(v280, "arctan");
  v281 = 140;
  std::string::basic_string[abi:nn180100]<0>(v282, "arccosh");
  v283 = 141;
  std::string::basic_string[abi:nn180100]<0>(v284, "arccot");
  v285 = 142;
  std::string::basic_string[abi:nn180100]<0>(v286, "arccoth");
  v287 = 143;
  std::string::basic_string[abi:nn180100]<0>(v288, "arccsc");
  v289 = 144;
  std::string::basic_string[abi:nn180100]<0>(v290, "arccsch");
  v291 = 145;
  std::string::basic_string[abi:nn180100]<0>(v292, "arcsec");
  v293 = 146;
  std::string::basic_string[abi:nn180100]<0>(v294, "arcsech");
  v295 = 147;
  std::string::basic_string[abi:nn180100]<0>(v296, "arcsinh");
  v297 = 148;
  std::string::basic_string[abi:nn180100]<0>(v298, "arctanh");
  v299 = 149;
  std::string::basic_string[abi:nn180100]<0>(v300, "mean");
  v301 = 150;
  std::string::basic_string[abi:nn180100]<0>(v302, "sdev");
  v303 = 151;
  std::string::basic_string[abi:nn180100]<0>(v304, "variance");
  v305 = 152;
  std::string::basic_string[abi:nn180100]<0>(v306, "median");
  v307 = 153;
  std::string::basic_string[abi:nn180100]<0>(v308, "mode");
  v309 = 154;
  std::string::basic_string[abi:nn180100]<0>(v310, "determinant");
  v311 = 155;
  std::string::basic_string[abi:nn180100]<0>(v312, "transpose");
  v313 = 156;
  std::string::basic_string[abi:nn180100]<0>(v314, "selector");
  v315 = 157;
  std::string::basic_string[abi:nn180100]<0>(v316, "vectorproduct");
  v317 = 158;
  std::string::basic_string[abi:nn180100]<0>(v318, "scalarproduct");
  v319 = 159;
  std::string::basic_string[abi:nn180100]<0>(v320, "outerproduct");
  v321 = 160;
  std::string::basic_string[abi:nn180100]<0>(v322, "integers");
  v323 = 161;
  std::string::basic_string[abi:nn180100]<0>(v324, "reals");
  v325 = 162;
  std::string::basic_string[abi:nn180100]<0>(v326, "rationals");
  v327 = 163;
  std::string::basic_string[abi:nn180100]<0>(v328, "naturalnumbers");
  v329 = 164;
  std::string::basic_string[abi:nn180100]<0>(v330, "complexes");
  v331 = 165;
  std::string::basic_string[abi:nn180100]<0>(v332, "primes");
  v333 = 166;
  std::string::basic_string[abi:nn180100]<0>(v334, "emptyset");
  v335 = 167;
  std::string::basic_string[abi:nn180100]<0>(v336, "exponentiale");
  v337 = 168;
  std::string::basic_string[abi:nn180100]<0>(v338, "imaginaryi");
  v339 = 169;
  std::string::basic_string[abi:nn180100]<0>(v340, "notanumber");
  v341 = 170;
  std::string::basic_string[abi:nn180100]<0>(v342, "true");
  v343 = 171;
  std::string::basic_string[abi:nn180100]<0>(v344, "false");
  v345 = 172;
  std::string::basic_string[abi:nn180100]<0>(v346, "pi");
  v347 = 173;
  std::string::basic_string[abi:nn180100]<0>(v348, "eulergamma");
  v349 = 174;
  std::string::basic_string[abi:nn180100]<0>(v350, "infinity");
  v351 = 175;
  v0 = operator new();
  std::map<std::string const,EQKitMathMLElement::Enum>::map[abi:nn180100]<std::pair<std::string const,EQKitMathMLElement::Enum> const*>(v0, v2, &v352);
  v1 = 0;
  EQKitMathMLElement::map(void)::map = v0;
  do
  {
    if (SHIBYTE(v350[v1 + 2]) < 0)
      operator delete((void *)v350[v1]);
    v1 -= 4;
  }
  while (v1 != -700);
}

void sub_217940520(_Unwind_Exception *a1)
{
  uint64_t v1;
  unint64_t *v3;
  uint64_t v4;
  unint64_t *v5;
  int v6;

  MEMORY[0x219A153B8](v1, 0x1020C4062D53EE8);
  v3 = &STACK[0x15DF];
  v4 = -5600;
  v5 = &STACK[0x15DF];
  while (1)
  {
    v6 = *(char *)v5;
    v5 -= 4;
    if (v6 < 0)
      operator delete(*(void **)((char *)v3 - 23));
    v3 = v5;
    v4 += 32;
    if (!v4)
      _Unwind_Resume(a1);
  }
}

void sub_217940858()
{
  JUMPOUT(0x217940850);
}

uint64_t std::map<std::string const,EQKitMathMLElement::Enum>::map[abi:nn180100]<std::pair<std::string const,EQKitMathMLElement::Enum> const*>(uint64_t a1, const void **a2, const void **a3)
{
  uint64_t *v4;
  const void **v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::__map_value_compare<std::string const,std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,EQKitMathMLElement::Enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,EQKitMathMLElement::Enum> const&>((uint64_t **)a1, v4, v6, (uint64_t)v6);
      v6 += 4;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_2179408C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::__map_value_compare<std::string const,std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,EQKitMathMLElement::Enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,EQKitMathMLElement::Enum> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::__map_value_compare<std::string const,std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,EQKitMathMLElement::Enum>>>::__construct_node<std::pair<std::string const,EQKitMathMLElement::Enum> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::__map_value_compare<std::string const,std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,EQKitMathMLElement::Enum>>>::__construct_node<std::pair<std::string const,EQKitMathMLElement::Enum> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  *((_DWORD *)v6 + 14) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_2179409E8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,unsigned short>,void *>>>::operator()[abi:nn180100](v3, v2);
  _Unwind_Resume(a1);
}

void ___ZN10EQKitTypes7DisplayL3mapEv_block_invoke()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2[3];
  int v3;
  _QWORD v4[3];
  int v5;
  const void *v6;

  v6 = (const void *)*MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:nn180100]<0>(v2, "inline");
  v3 = 1;
  std::string::basic_string[abi:nn180100]<0>(v4, "block");
  v5 = 2;
  v0 = operator new();
  std::map<std::string const,EQKitTypes::Display::Enum>::map[abi:nn180100]<std::pair<std::string const,EQKitTypes::Display::Enum> const*>(v0, v2, &v6);
  v1 = 0;
  EQKitTypes::Display::map(void)::map = v0;
  do
  {
    if (SHIBYTE(v4[v1 + 2]) < 0)
      operator delete((void *)v4[v1]);
    v1 -= 4;
  }
  while (v1 != -8);
}

void sub_217940AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v23 = v22;
  MEMORY[0x219A153B8](v23, 0x1020C4062D53EE8);
  v25 = 0;
  while (1)
  {
    if (*(&a22 + v25) < 0)
      operator delete(*(void **)((char *)&a17 + v25));
    v25 -= 32;
    if (v25 == -64)
      _Unwind_Resume(a1);
  }
}

uint64_t std::map<std::string const,EQKitTypes::Display::Enum>::map[abi:nn180100]<std::pair<std::string const,EQKitTypes::Display::Enum> const*>(uint64_t a1, const void **a2, const void **a3)
{
  uint64_t *v4;
  const void **v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::__map_value_compare<std::string const,std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,EQKitMathMLElement::Enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,EQKitMathMLElement::Enum> const&>((uint64_t **)a1, v4, v6, (uint64_t)v6);
      v6 += 4;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_217940BC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void ___ZN5EQKit6ScriptL3mapEv_block_invoke()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2[3];
  int v3;
  _QWORD v4[3];
  int v5;
  _QWORD v6[3];
  int v7;
  _QWORD v8[3];
  int v9;
  _QWORD v10[3];
  int v11;
  _QWORD v12[3];
  int v13;
  _QWORD v14[3];
  int v15;
  _QWORD v16[3];
  int v17;
  _QWORD v18[3];
  int v19;
  _QWORD v20[3];
  int v21;
  _QWORD v22[3];
  int v23;
  _QWORD v24[3];
  int v25;
  _QWORD v26[3];
  int v27;
  _QWORD v28[3];
  int v29;
  _QWORD v30[3];
  int v31;
  _QWORD v32[3];
  int v33;
  _QWORD v34[3];
  int v35;
  _QWORD v36[3];
  int v37;
  const void *v38;

  v38 = (const void *)*MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:nn180100]<0>(v2, "normal");
  v3 = 1;
  std::string::basic_string[abi:nn180100]<0>(v4, "bold");
  v5 = 2;
  std::string::basic_string[abi:nn180100]<0>(v6, "italic");
  v7 = 3;
  std::string::basic_string[abi:nn180100]<0>(v8, "bold-italic");
  v9 = 4;
  std::string::basic_string[abi:nn180100]<0>(v10, "double-struck");
  v11 = 5;
  std::string::basic_string[abi:nn180100]<0>(v12, "bold-fraktur");
  v13 = 6;
  std::string::basic_string[abi:nn180100]<0>(v14, "script");
  v15 = 7;
  std::string::basic_string[abi:nn180100]<0>(v16, "bold-script");
  v17 = 8;
  std::string::basic_string[abi:nn180100]<0>(v18, "fraktur");
  v19 = 9;
  std::string::basic_string[abi:nn180100]<0>(v20, "sans-serif");
  v21 = 10;
  std::string::basic_string[abi:nn180100]<0>(v22, "bold-sans-serif");
  v23 = 11;
  std::string::basic_string[abi:nn180100]<0>(v24, "italic-sans-serif");
  v25 = 12;
  std::string::basic_string[abi:nn180100]<0>(v26, "sans-serif-bold-italic");
  v27 = 13;
  std::string::basic_string[abi:nn180100]<0>(v28, "monospace");
  v29 = 14;
  std::string::basic_string[abi:nn180100]<0>(v30, "initial");
  v31 = 15;
  std::string::basic_string[abi:nn180100]<0>(v32, "tailed");
  v33 = 16;
  std::string::basic_string[abi:nn180100]<0>(v34, "looped");
  v35 = 17;
  std::string::basic_string[abi:nn180100]<0>(v36, "stretched");
  v37 = 18;
  v0 = operator new();
  std::map<std::string const,EQKit::Script::Variant>::map[abi:nn180100]<std::pair<std::string const,EQKit::Script::Variant> const*>(v0, v2, &v38);
  EQKit::Script::map(void)::map = v0;
  v1 = 72;
  do
  {
    if (*((char *)&v2[v1 - 1] - 1) < 0)
      operator delete((void *)v2[v1 - 4]);
    v1 -= 4;
  }
  while (v1 * 8);
}

void sub_217940EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v12;

  MEMORY[0x219A153B8](v10, 0x1020C4062D53EE8);
  v12 = 576;
  while (1)
  {
    if (*(&a10 + v12 - 9) < 0)
      operator delete(*(void **)(&a10 + v12 - 32));
    v12 -= 32;
    if (!v12)
      _Unwind_Resume(a1);
  }
}

void sub_217940F60()
{
  JUMPOUT(0x217940F58);
}

uint64_t std::map<std::string const,EQKit::Script::Variant>::map[abi:nn180100]<std::pair<std::string const,EQKit::Script::Variant> const*>(uint64_t a1, const void **a2, const void **a3)
{
  uint64_t *v4;
  const void **v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::__map_value_compare<std::string const,std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,EQKitMathMLElement::Enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,EQKitMathMLElement::Enum> const&>((uint64_t **)a1, v4, v6, (uint64_t)v6);
      v6 += 4;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_217940FD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void ___ZN5EQKit6Config8OperatorL3mapEv_block_invoke()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2[3];
  int v3;
  _QWORD v4[3];
  int v5;
  _QWORD v6[3];
  int v7;
  const void *v8;

  v8 = (const void *)*MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:nn180100]<0>(v2, "infix");
  v3 = 2;
  std::string::basic_string[abi:nn180100]<0>(v4, "prefix");
  v5 = 1;
  std::string::basic_string[abi:nn180100]<0>(v6, "postfix");
  v7 = 3;
  v0 = operator new();
  std::map<std::string const,EQKit::Config::Operator::Form>::map[abi:nn180100]<std::pair<std::string const,EQKit::Config::Operator::Form> const*>(v0, v2, &v8);
  v1 = 0;
  EQKit::Config::Operator::map(void)::map = v0;
  do
  {
    if (SHIBYTE(v6[v1 + 2]) < 0)
      operator delete((void *)v6[v1]);
    v1 -= 4;
  }
  while (v1 != -12);
}

void sub_2179410F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v12;

  MEMORY[0x219A153B8](v10, 0x1020C4062D53EE8);
  v12 = 0;
  while (1)
  {
    if (*(&a10 + v12 + 87) < 0)
      operator delete(*(void **)(&a10 + v12 + 64));
    v12 -= 32;
    if (v12 == -96)
      _Unwind_Resume(a1);
  }
}

uint64_t std::map<std::string const,EQKit::Config::Operator::Form>::map[abi:nn180100]<std::pair<std::string const,EQKit::Config::Operator::Form> const*>(uint64_t a1, const void **a2, const void **a3)
{
  uint64_t *v4;
  const void **v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::__map_value_compare<std::string const,std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,EQKitMathMLElement::Enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,EQKitMathMLElement::Enum> const&>((uint64_t **)a1, v4, v6, (uint64_t)v6);
      v6 += 4;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_2179411E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void ___ZN10EQKitTypes5AlignL3mapEv_block_invoke()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2[3];
  int v3;
  _QWORD v4[3];
  int v5;
  _QWORD v6[3];
  int v7;
  const void *v8;

  v8 = (const void *)*MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:nn180100]<0>(v2, "left");
  v3 = 1;
  std::string::basic_string[abi:nn180100]<0>(v4, "center");
  v5 = 2;
  std::string::basic_string[abi:nn180100]<0>(v6, "right");
  v7 = 3;
  v0 = operator new();
  std::map<std::string const,EQKitTypes::Align::Enum>::map[abi:nn180100]<std::pair<std::string const,EQKitTypes::Align::Enum> const*>(v0, v2, &v8);
  v1 = 0;
  EQKitTypes::Align::map(void)::map = v0;
  do
  {
    if (SHIBYTE(v6[v1 + 2]) < 0)
      operator delete((void *)v6[v1]);
    v1 -= 4;
  }
  while (v1 != -12);
}

void sub_217941300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v12;

  MEMORY[0x219A153B8](v10, 0x1020C4062D53EE8);
  v12 = 0;
  while (1)
  {
    if (*(&a10 + v12 + 87) < 0)
      operator delete(*(void **)(&a10 + v12 + 64));
    v12 -= 32;
    if (v12 == -96)
      _Unwind_Resume(a1);
  }
}

uint64_t std::map<std::string const,EQKitTypes::Align::Enum>::map[abi:nn180100]<std::pair<std::string const,EQKitTypes::Align::Enum> const*>(uint64_t a1, const void **a2, const void **a3)
{
  uint64_t *v4;
  const void **v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::__map_value_compare<std::string const,std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,EQKitMathMLElement::Enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,EQKitMathMLElement::Enum> const&>((uint64_t **)a1, v4, v6, (uint64_t)v6);
      v6 += 4;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_2179413F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void ___ZN10EQKitTypes6VAlignL3mapEv_block_invoke()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2[3];
  int v3;
  _QWORD v4[3];
  int v5;
  _QWORD v6[3];
  int v7;
  _QWORD v8[3];
  int v9;
  _QWORD v10[3];
  int v11;
  const void *v12;

  v12 = (const void *)*MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:nn180100]<0>(v2, "top");
  v3 = 1;
  std::string::basic_string[abi:nn180100]<0>(v4, "bottom");
  v5 = 5;
  std::string::basic_string[abi:nn180100]<0>(v6, "center");
  v7 = 3;
  std::string::basic_string[abi:nn180100]<0>(v8, "baseline");
  v9 = 4;
  std::string::basic_string[abi:nn180100]<0>(v10, "axis");
  v11 = 2;
  v0 = operator new();
  std::map<std::string const,EQKitTypes::VAlign::Enum>::map[abi:nn180100]<std::pair<std::string const,EQKitTypes::VAlign::Enum> const*>(v0, v2, &v12);
  v1 = 0;
  EQKitTypes::VAlign::map(void)::map = v0;
  do
  {
    if (SHIBYTE(v10[v1 + 2]) < 0)
      operator delete((void *)v10[v1]);
    v1 -= 4;
  }
  while (v1 != -20);
}

void sub_217941550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v12;

  MEMORY[0x219A153B8](v10, 0x1020C4062D53EE8);
  v12 = 0;
  while (1)
  {
    if (*(&a10 + v12 + 151) < 0)
      operator delete(*(void **)(&a10 + v12 + 128));
    v12 -= 32;
    if (v12 == -160)
      _Unwind_Resume(a1);
  }
}

uint64_t std::map<std::string const,EQKitTypes::VAlign::Enum>::map[abi:nn180100]<std::pair<std::string const,EQKitTypes::VAlign::Enum> const*>(uint64_t a1, const void **a2, const void **a3)
{
  uint64_t *v4;
  const void **v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::__map_value_compare<std::string const,std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,EQKitMathMLElement::Enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,EQKitMathMLElement::Enum> const&>((uint64_t **)a1, v4, v6, (uint64_t)v6);
      v6 += 4;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_217941648(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void ___ZN10EQKitTypes7BooleanL3mapEv_block_invoke()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2[3];
  int v3;
  _QWORD v4[3];
  int v5;
  const void *v6;

  v6 = (const void *)*MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:nn180100]<0>(v2, "true");
  v3 = 2;
  std::string::basic_string[abi:nn180100]<0>(v4, "false");
  v5 = 1;
  v0 = operator new();
  std::map<std::string const,EQKitTypes::Boolean::Enum>::map[abi:nn180100]<std::pair<std::string const,EQKitTypes::Boolean::Enum> const*>(v0, v2, &v6);
  v1 = 0;
  EQKitTypes::Boolean::map(void)::map = v0;
  do
  {
    if (SHIBYTE(v4[v1 + 2]) < 0)
      operator delete((void *)v4[v1]);
    v1 -= 4;
  }
  while (v1 != -8);
}

void sub_217941744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v23 = v22;
  MEMORY[0x219A153B8](v23, 0x1020C4062D53EE8);
  v25 = 0;
  while (1)
  {
    if (*(&a22 + v25) < 0)
      operator delete(*(void **)((char *)&a17 + v25));
    v25 -= 32;
    if (v25 == -64)
      _Unwind_Resume(a1);
  }
}

uint64_t std::map<std::string const,EQKitTypes::Boolean::Enum>::map[abi:nn180100]<std::pair<std::string const,EQKitTypes::Boolean::Enum> const*>(uint64_t a1, const void **a2, const void **a3)
{
  uint64_t *v4;
  const void **v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::__map_value_compare<std::string const,std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,EQKitMathMLElement::Enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,EQKitMathMLElement::Enum> const&>((uint64_t **)a1, v4, v6, (uint64_t)v6);
      v6 += 4;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_217941824(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void ___ZN10EQKitTypes10AttributesL3mapEv_block_invoke()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2[3];
  int v3;
  _QWORD v4[3];
  int v5;
  _QWORD v6[3];
  int v7;
  _QWORD v8[3];
  int v9;
  _QWORD v10[3];
  int v11;
  _QWORD v12[3];
  int v13;
  _QWORD v14[3];
  int v15;
  _QWORD v16[3];
  int v17;
  _QWORD v18[3];
  int v19;
  _QWORD v20[3];
  int v21;
  _QWORD v22[3];
  int v23;
  _QWORD v24[3];
  int v25;
  _QWORD v26[3];
  int v27;
  _QWORD v28[3];
  int v29;
  _QWORD v30[3];
  int v31;
  _QWORD v32[3];
  int v33;
  _QWORD v34[3];
  int v35;
  _QWORD v36[3];
  int v37;
  _QWORD v38[3];
  int v39;
  _QWORD v40[3];
  int v41;
  _QWORD v42[3];
  int v43;
  _QWORD v44[3];
  int v45;
  _QWORD v46[3];
  int v47;
  _QWORD v48[3];
  int v49;
  _QWORD v50[3];
  int v51;
  _QWORD v52[3];
  int v53;
  _QWORD v54[3];
  int v55;
  _QWORD v56[3];
  int v57;
  _QWORD v58[3];
  int v59;
  _QWORD v60[3];
  int v61;
  _QWORD v62[3];
  int v63;
  _QWORD v64[3];
  int v65;
  _QWORD v66[3];
  int v67;
  _QWORD v68[3];
  int v69;
  _QWORD v70[3];
  int v71;
  _QWORD v72[3];
  int v73;
  _QWORD v74[3];
  int v75;
  _QWORD v76[3];
  int v77;
  _QWORD v78[3];
  int v79;
  _QWORD v80[3];
  int v81;
  _QWORD v82[3];
  int v83;
  _QWORD v84[3];
  int v85;
  const void *v86;

  v86 = (const void *)*MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:nn180100]<0>(v2, "align");
  v3 = 1;
  std::string::basic_string[abi:nn180100]<0>(v4, "rowalign");
  v5 = 3;
  std::string::basic_string[abi:nn180100]<0>(v6, "columnalign");
  v7 = 4;
  std::string::basic_string[abi:nn180100]<0>(v8, "accent");
  v9 = 5;
  std::string::basic_string[abi:nn180100]<0>(v10, "underaccent");
  v11 = 6;
  std::string::basic_string[abi:nn180100]<0>(v12, "display");
  v13 = 7;
  std::string::basic_string[abi:nn180100]<0>(v14, "displaystyle");
  v15 = 8;
  std::string::basic_string[abi:nn180100]<0>(v16, "scriptlevel");
  v17 = 9;
  std::string::basic_string[abi:nn180100]<0>(v18, "lspace");
  v19 = 10;
  std::string::basic_string[abi:nn180100]<0>(v20, "rspace");
  v21 = 11;
  std::string::basic_string[abi:nn180100]<0>(v22, "lquote");
  v23 = 12;
  std::string::basic_string[abi:nn180100]<0>(v24, "rquote");
  v25 = 13;
  std::string::basic_string[abi:nn180100]<0>(v26, "symmetric");
  v27 = 14;
  std::string::basic_string[abi:nn180100]<0>(v28, "form");
  v29 = 15;
  std::string::basic_string[abi:nn180100]<0>(v30, "stretchy");
  v31 = 16;
  std::string::basic_string[abi:nn180100]<0>(v32, "mathvariant");
  v33 = 17;
  std::string::basic_string[abi:nn180100]<0>(v34, "open");
  v35 = 18;
  std::string::basic_string[abi:nn180100]<0>(v36, "close");
  v37 = 19;
  std::string::basic_string[abi:nn180100]<0>(v38, "separators");
  v39 = 20;
  std::string::basic_string[abi:nn180100]<0>(v40, "position");
  v41 = 21;
  std::string::basic_string[abi:nn180100]<0>(v42, "crossout");
  v43 = 34;
  std::string::basic_string[abi:nn180100]<0>(v44, "shift");
  v45 = 22;
  std::string::basic_string[abi:nn180100]<0>(v46, "length");
  v47 = 23;
  std::string::basic_string[abi:nn180100]<0>(v48, "numalign");
  v49 = 24;
  std::string::basic_string[abi:nn180100]<0>(v50, "denomalign");
  v51 = 25;
  std::string::basic_string[abi:nn180100]<0>(v52, "height");
  v53 = 26;
  std::string::basic_string[abi:nn180100]<0>(v54, "depth");
  v55 = 27;
  std::string::basic_string[abi:nn180100]<0>(v56, "width");
  v57 = 28;
  std::string::basic_string[abi:nn180100]<0>(v58, "voffset");
  v59 = 33;
  std::string::basic_string[abi:nn180100]<0>(v60, "decimalpoint");
  v61 = 35;
  std::string::basic_string[abi:nn180100]<0>(v62, "linethickness");
  v63 = 36;
  std::string::basic_string[abi:nn180100]<0>(v64, "groupalign");
  v65 = 37;
  std::string::basic_string[abi:nn180100]<0>(v66, "edge");
  v67 = 38;
  std::string::basic_string[abi:nn180100]<0>(v68, "largeop");
  v69 = 39;
  std::string::basic_string[abi:nn180100]<0>(v70, "minsize");
  v71 = 40;
  std::string::basic_string[abi:nn180100]<0>(v72, "maxsize");
  v73 = 41;
  std::string::basic_string[abi:nn180100]<0>(v74, "scriptsizemultiplier");
  v75 = 42;
  std::string::basic_string[abi:nn180100]<0>(v76, "scriptminsize");
  v77 = 43;
  std::string::basic_string[abi:nn180100]<0>(v78, "movablelimits");
  v79 = 45;
  std::string::basic_string[abi:nn180100]<0>(v80, "mathcolor");
  v81 = 44;
  std::string::basic_string[abi:nn180100]<0>(v82, "columnspacing");
  v83 = 46;
  std::string::basic_string[abi:nn180100]<0>(v84, "notation");
  v85 = 47;
  v0 = operator new();
  std::map<std::string const,EQKitTypes::Attributes::Enum>::map[abi:nn180100]<std::pair<std::string const,EQKitTypes::Attributes::Enum> const*>(v0, v2, &v86);
  EQKitTypes::Attributes::map(void)::map = v0;
  v1 = 168;
  do
  {
    if (*((char *)&v2[v1 - 1] - 1) < 0)
      operator delete((void *)v2[v1 - 4]);
    v1 -= 4;
  }
  while (v1 * 8);
}

void sub_217941DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v12;

  MEMORY[0x219A153B8](v10, 0x1020C4062D53EE8);
  v12 = 1344;
  while (1)
  {
    if (*(&a10 + v12 - 9) < 0)
      operator delete(*(void **)(&a10 + v12 - 32));
    v12 -= 32;
    if (!v12)
      _Unwind_Resume(a1);
  }
}

void sub_217941EEC()
{
  JUMPOUT(0x217941EE4);
}

uint64_t std::map<std::string const,EQKitTypes::Attributes::Enum>::map[abi:nn180100]<std::pair<std::string const,EQKitTypes::Attributes::Enum> const*>(uint64_t a1, const void **a2, const void **a3)
{
  uint64_t *v4;
  const void **v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::__map_value_compare<std::string const,std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,EQKitMathMLElement::Enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,EQKitMathMLElement::Enum> const&>((uint64_t **)a1, v4, v6, (uint64_t)v6);
      v6 += 4;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_217941F5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void ___ZN10EQKitTypes8CrossoutL3mapEv_block_invoke()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2[3];
  int v3;
  _QWORD v4[3];
  int v5;
  _QWORD v6[3];
  int v7;
  _QWORD v8[3];
  int v9;
  _QWORD v10[3];
  int v11;
  const void *v12;

  v12 = (const void *)*MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:nn180100]<0>(v2, "none");
  v3 = 0;
  std::string::basic_string[abi:nn180100]<0>(v4, "updiagonalstrike");
  v5 = 1;
  std::string::basic_string[abi:nn180100]<0>(v6, "downdiagonalstrike");
  v7 = 2;
  std::string::basic_string[abi:nn180100]<0>(v8, "verticalstrike");
  v9 = 3;
  std::string::basic_string[abi:nn180100]<0>(v10, "horizontalstrike");
  v11 = 4;
  v0 = operator new();
  std::map<std::string const,EQKitTypes::Crossout::Enum>::map[abi:nn180100]<std::pair<std::string const,EQKitTypes::Crossout::Enum> const*>(v0, v2, &v12);
  v1 = 0;
  EQKitTypes::Crossout::map(void)::map = v0;
  do
  {
    if (SHIBYTE(v10[v1 + 2]) < 0)
      operator delete((void *)v10[v1]);
    v1 -= 4;
  }
  while (v1 != -20);
}

void sub_2179420B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v12;

  MEMORY[0x219A153B8](v10, 0x1020C4062D53EE8);
  v12 = 0;
  while (1)
  {
    if (*(&a10 + v12 + 151) < 0)
      operator delete(*(void **)(&a10 + v12 + 128));
    v12 -= 32;
    if (v12 == -160)
      _Unwind_Resume(a1);
  }
}

uint64_t std::map<std::string const,EQKitTypes::Crossout::Enum>::map[abi:nn180100]<std::pair<std::string const,EQKitTypes::Crossout::Enum> const*>(uint64_t a1, const void **a2, const void **a3)
{
  uint64_t *v4;
  const void **v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::__map_value_compare<std::string const,std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,EQKitMathMLElement::Enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,EQKitMathMLElement::Enum> const&>((uint64_t **)a1, v4, v6, (uint64_t)v6);
      v6 += 4;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_2179421B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void ___ZN10EQKitTypes8NotationL3mapEv_block_invoke()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2[3];
  int v3;
  _QWORD v4[3];
  int v5;
  _QWORD v6[3];
  int v7;
  _QWORD v8[3];
  int v9;
  _QWORD v10[3];
  int v11;
  const void *v12;

  v12 = (const void *)*MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:nn180100]<0>(v2, "longdiv");
  v3 = 0;
  std::string::basic_string[abi:nn180100]<0>(v4, "updiagonalstrike");
  v5 = 1;
  std::string::basic_string[abi:nn180100]<0>(v6, "downdiagonalstrike");
  v7 = 2;
  std::string::basic_string[abi:nn180100]<0>(v8, "verticalstrike");
  v9 = 3;
  std::string::basic_string[abi:nn180100]<0>(v10, "horizontalstrike");
  v11 = 4;
  v0 = operator new();
  std::map<std::string const,EQKitTypes::Notation::Enum>::map[abi:nn180100]<std::pair<std::string const,EQKitTypes::Notation::Enum> const*>(v0, v2, &v12);
  v1 = 0;
  EQKitTypes::Notation::map(void)::map = v0;
  do
  {
    if (SHIBYTE(v10[v1 + 2]) < 0)
      operator delete((void *)v10[v1]);
    v1 -= 4;
  }
  while (v1 != -20);
}

void sub_21794230C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v12;

  MEMORY[0x219A153B8](v10, 0x1020C4062D53EE8);
  v12 = 0;
  while (1)
  {
    if (*(&a10 + v12 + 151) < 0)
      operator delete(*(void **)(&a10 + v12 + 128));
    v12 -= 32;
    if (v12 == -160)
      _Unwind_Resume(a1);
  }
}

uint64_t std::map<std::string const,EQKitTypes::Notation::Enum>::map[abi:nn180100]<std::pair<std::string const,EQKitTypes::Notation::Enum> const*>(uint64_t a1, const void **a2, const void **a3)
{
  uint64_t *v4;
  const void **v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::__map_value_compare<std::string const,std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,EQKitMathMLElement::Enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,EQKitMathMLElement::Enum> const&>((uint64_t **)a1, v4, v6, (uint64_t)v6);
      v6 += 4;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_217942404(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void ___ZN10EQKitTypes10GroupAlignL3mapEv_block_invoke()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2[3];
  int v3;
  _QWORD v4[3];
  int v5;
  _QWORD v6[3];
  int v7;
  _QWORD v8[3];
  int v9;
  const void *v10;

  v10 = (const void *)*MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:nn180100]<0>(v2, "left");
  v3 = 1;
  std::string::basic_string[abi:nn180100]<0>(v4, "center");
  v5 = 2;
  std::string::basic_string[abi:nn180100]<0>(v6, "right");
  v7 = 3;
  std::string::basic_string[abi:nn180100]<0>(v8, "decimalpoint");
  v9 = 4;
  v0 = operator new();
  std::map<std::string const,EQKitTypes::GroupAlign::Enum>::map[abi:nn180100]<std::pair<std::string const,EQKitTypes::GroupAlign::Enum> const*>(v0, v2, &v10);
  v1 = 0;
  EQKitTypes::GroupAlign::map(void)::map = v0;
  do
  {
    if (SHIBYTE(v8[v1 + 2]) < 0)
      operator delete((void *)v8[v1]);
    v1 -= 4;
  }
  while (v1 != -16);
}

void sub_217942540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v12;

  MEMORY[0x219A153B8](v10, 0x1020C4062D53EE8);
  v12 = 0;
  while (1)
  {
    if (*(&a10 + v12 + 119) < 0)
      operator delete(*(void **)(&a10 + v12 + 96));
    v12 -= 32;
    if (v12 == -128)
      _Unwind_Resume(a1);
  }
}

uint64_t std::map<std::string const,EQKitTypes::GroupAlign::Enum>::map[abi:nn180100]<std::pair<std::string const,EQKitTypes::GroupAlign::Enum> const*>(uint64_t a1, const void **a2, const void **a3)
{
  uint64_t *v4;
  const void **v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::__map_value_compare<std::string const,std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,EQKitMathMLElement::Enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,EQKitMathMLElement::Enum> const&>((uint64_t **)a1, v4, v6, (uint64_t)v6);
      v6 += 4;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_217942634(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void ___ZN10EQKitTypes4EdgeL3mapEv_block_invoke()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2[3];
  int v3;
  _QWORD v4[3];
  int v5;
  const void *v6;

  v6 = (const void *)*MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:nn180100]<0>(v2, "left");
  v3 = 1;
  std::string::basic_string[abi:nn180100]<0>(v4, "right");
  v5 = 2;
  v0 = operator new();
  std::map<std::string const,EQKitTypes::Edge::Enum>::map[abi:nn180100]<std::pair<std::string const,EQKitTypes::Edge::Enum> const*>(v0, v2, &v6);
  v1 = 0;
  EQKitTypes::Edge::map(void)::map = v0;
  do
  {
    if (SHIBYTE(v4[v1 + 2]) < 0)
      operator delete((void *)v4[v1]);
    v1 -= 4;
  }
  while (v1 != -8);
}

void sub_217942730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v23 = v22;
  MEMORY[0x219A153B8](v23, 0x1020C4062D53EE8);
  v25 = 0;
  while (1)
  {
    if (*(&a22 + v25) < 0)
      operator delete(*(void **)((char *)&a17 + v25));
    v25 -= 32;
    if (v25 == -64)
      _Unwind_Resume(a1);
  }
}

uint64_t std::map<std::string const,EQKitTypes::Edge::Enum>::map[abi:nn180100]<std::pair<std::string const,EQKitTypes::Edge::Enum> const*>(uint64_t a1, const void **a2, const void **a3)
{
  uint64_t *v4;
  const void **v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::__map_value_compare<std::string const,std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,EQKitMathMLElement::Enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,EQKitMathMLElement::Enum> const&>((uint64_t **)a1, v4, v6, (uint64_t)v6);
      v6 += 4;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_217942810(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

NSArray *EQKitLayoutFilterOutSpaceLike(NSArray *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSArray *v5;
  uint64_t v6;
  NSArray *v7;
  uint64_t i;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v2 = -[NSArray countByEnumeratingWithState:objects:count:](a1, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (!v2)
    return a1;
  v3 = v2;
  v4 = 0;
  v5 = 0;
  v6 = *(_QWORD *)v12;
  v7 = a1;
  do
  {
    for (i = 0; i != v3; ++i)
    {
      if (*(_QWORD *)v12 != v6)
        objc_enumerationMutation(a1);
      v9 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * i);
      if (objc_msgSend(v9, "isSpaceLike"))
      {
        if (!v5)
        {
          v5 = (NSArray *)objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithArray:", -[NSArray subarrayWithRange:](a1, "subarrayWithRange:", 0, v4 + i));
          v7 = v5;
        }
      }
      else if (v5)
      {
        -[NSArray addObject:](v5, "addObject:", v9);
      }
    }
    v3 = -[NSArray countByEnumeratingWithState:objects:count:](a1, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    v4 += i;
  }
  while (v3);
  return v7;
}

void sub_217942A24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_217942B40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_217942C5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void EQKitStretchedGlyph::EQKitStretchedGlyph(EQKitStretchedGlyph *this, CTFontRef font, UniChar a3)
{
  CFTypeRef v5;
  const __CFString *v6;
  const __CFString *v7;
  const __CTFont *v8;
  const __CTFont *v9;
  CGGlyph glyphs;
  UniChar characters;
  CFRange v12;

  characters = a3;
  *(_QWORD *)this = &off_24D828E40;
  *((_QWORD *)this + 1) = 0;
  *((_WORD *)this + 8) = -1;
  *((_QWORD *)this + 3) = 0;
  if (font)
  {
    glyphs = 0;
    if (CTFontGetGlyphsForCharacters(font, &characters, &glyphs, 1))
    {
      v5 = CFRetain(font);
      *((_QWORD *)this + 1) = v5;
      if (!v5)
        return;
LABEL_12:
      *((_WORD *)this + 8) = glyphs;
      return;
    }
    v6 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x24BDBD240], &characters, 1);
    if (v6)
    {
      v7 = v6;
      v12.length = CFStringGetLength(v6);
      v12.location = 0;
      v8 = CTFontCreateForString(font, v7, v12);
      if (v8)
      {
        v9 = v8;
        if (CTFontGetGlyphsForCharacters(v8, &characters, &glyphs, 1))
          *((_QWORD *)this + 1) = v9;
        else
          CFRelease(v9);
      }
      CFRelease(v7);
    }
    if (*((_QWORD *)this + 1))
      goto LABEL_12;
  }
}

void EQKitStretchedGlyph::~EQKitStretchedGlyph(EQKitStretchedGlyph *this)
{
  const void *v2;
  EQKitPath *v3;

  *(_QWORD *)this = &off_24D828E40;
  v2 = (const void *)*((_QWORD *)this + 1);
  if (v2)
    CFRelease(v2);
  v3 = (EQKitPath *)*((_QWORD *)this + 3);
  if (v3)
  {
    EQKitPath::~EQKitPath(v3);
    MEMORY[0x219A153B8]();
  }
}

{
  EQKitStretchedGlyph::~EQKitStretchedGlyph(this);
  JUMPOUT(0x219A153B8);
}

uint64_t EQKitStretchedGlyph::path(EQKitStretchedGlyph *this)
{
  uint64_t result;
  int v3;
  BOOL v4;
  const __CTFont *v5;
  const CGPath *v6;
  EQKitPath *v7;
  CGAffineTransform v8;

  result = *((_QWORD *)this + 3);
  v3 = *((unsigned __int16 *)this + 8);
  if (result)
    v4 = 1;
  else
    v4 = v3 == 0xFFFF;
  if (!v4)
  {
    v5 = (const __CTFont *)*((_QWORD *)this + 1);
    memset(&v8, 0, sizeof(v8));
    CGAffineTransformMakeScale(&v8, 1.0, -1.0);
    v6 = CTFontCreatePathForGlyph(v5, v3, &v8);
    v7 = (EQKitPath *)operator new();
    EQKitPath::EQKitPath(v7, v6);
    *((_QWORD *)this + 3) = v7;
    CGPathRelease(v6);
    return *((_QWORD *)this + 3);
  }
  return result;
}

void sub_217942F0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A153B8](v1, 0x1070C40036CD406);
  _Unwind_Resume(a1);
}

CGPath *EQKitStretchedGlyph::createScaledPathWithWidth(EQKitStretchedGlyph *this, double a2, double *a3)
{
  uint64_t v5;
  uint64_t v6;
  CGRect *v7;
  CGRect *v8;
  CGPath *Mutable;
  CGFloat v10;
  CGRect *v11;
  CGFloat *v12;
  double v13;
  double v14;
  CGAffineTransform v16;
  CGFloat v17[11];
  _BYTE v18[72];
  CGAffineTransform v19;
  CGRect v20;

  v5 = EQKitStretchedGlyph::path(this);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = *(_BYTE *)(v5 + 120) ? (CGRect *)(v5 + 88) : (CGRect *)EQKitPath::computePathBounds((CGFloat *)v5);
  if (CGRectGetWidth(*v7) == 0.0)
    return 0;
  if (*(_BYTE *)(v6 + 120))
    v8 = (CGRect *)(v6 + 88);
  else
    v8 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v6);
  v10 = a2 / CGRectGetWidth(*v8);
  Mutable = CGPathCreateMutable();
  memset(&v19, 0, sizeof(v19));
  CGAffineTransformMakeScale(&v19, v10, 1.0);
  EQKitPath::appendToCGPath((uint64_t *)v6, Mutable, &v19, 0);
  if (*(_BYTE *)(v6 + 120))
    v11 = (CGRect *)(v6 + 88);
  else
    v11 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v6);
  *a3 = CGRectGetMaxY(*v11);
  EQKitPath::EQKitPath((EQKitPath *)v17, Mutable);
  if (v18[32])
    v12 = (CGFloat *)v18;
  else
    v12 = EQKitPath::computePathBounds(v17);
  v13 = *v12;
  v14 = v12[1];
  v20.size.width = v12[2];
  v20.size.height = v12[3];
  v20.origin.x = *v12;
  v20.origin.y = v14;
  *a3 = -CGRectGetMinY(v20);
  if (v13 != 0.0 || v14 != 0.0)
  {
    CGPathRelease(Mutable);
    memset(&v16, 0, sizeof(v16));
    CGAffineTransformMakeTranslation(&v16, -v13, -v14);
    Mutable = CGPathCreateMutable();
    EQKitPath::appendToCGPath((uint64_t *)v17, Mutable, &v16, 0);
  }
  EQKitPath::~EQKitPath((EQKitPath *)v17);
  return Mutable;
}

void sub_2179430D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  EQKitPath::~EQKitPath((EQKitPath *)va);
  _Unwind_Resume(a1);
}

CGPath *EQKitStretchedGlyph::createScaledPathWithHeight(EQKitStretchedGlyph *this, double *a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  CGRect *v7;
  CGRect *v8;
  CGPath *Mutable;
  CGFloat v10;
  CGFloat *v11;
  double v12;
  double v13;
  CGAffineTransform v15;
  CGFloat v16[11];
  _BYTE v17[72];
  CGAffineTransform v18;
  CGRect v19;

  v5 = EQKitStretchedGlyph::path(this);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = *(_BYTE *)(v5 + 120) ? (CGRect *)(v5 + 88) : (CGRect *)EQKitPath::computePathBounds((CGFloat *)v5);
  if (CGRectGetHeight(*v7) == 0.0)
    return 0;
  if (*(_BYTE *)(v6 + 120))
    v8 = (CGRect *)(v6 + 88);
  else
    v8 = (CGRect *)EQKitPath::computePathBounds((CGFloat *)v6);
  v10 = a3 / CGRectGetHeight(*v8);
  Mutable = CGPathCreateMutable();
  memset(&v18, 0, sizeof(v18));
  CGAffineTransformMakeScale(&v18, 1.0, v10);
  EQKitPath::appendToCGPath((uint64_t *)v6, Mutable, &v18, 0);
  EQKitPath::EQKitPath((EQKitPath *)v16, Mutable);
  if (v17[32])
    v11 = (CGFloat *)v17;
  else
    v11 = EQKitPath::computePathBounds(v16);
  v12 = *v11;
  v13 = v11[1];
  v19.size.width = v11[2];
  v19.size.height = v11[3];
  v19.origin.x = *v11;
  v19.origin.y = v13;
  *a2 = -CGRectGetMinX(v19);
  if (v12 != 0.0 || v13 != 0.0)
  {
    CGPathRelease(Mutable);
    memset(&v15, 0, sizeof(v15));
    CGAffineTransformMakeTranslation(&v15, -v12, -v13);
    Mutable = CGPathCreateMutable();
    EQKitPath::appendToCGPath((uint64_t *)v16, Mutable, &v15, 0);
  }
  EQKitPath::~EQKitPath((EQKitPath *)v16);
  return Mutable;
}

void sub_217943260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  EQKitPath::~EQKitPath((EQKitPath *)va);
  _Unwind_Resume(a1);
}

void sub_217943444(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_217943580(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_217943990(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_217943DB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_217943E7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2179442D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2179446C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_217944B74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double EQKitLayoutElementaryStack::EQKitLayoutElementaryStack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  double result;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  *(double *)(a1 + 32) = a6;
  result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  *(double *)(a1 + 32) = a6;
  result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  return result;
}

uint64_t EQKitLayoutElementaryStack::EQKitLayoutElementaryStack(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = objc_msgSend(*(id *)(a2 + 40), "mutableCopy");
  *(_QWORD *)(a1 + 48) = objc_msgSend(*(id *)(a2 + 48), "mutableCopy");
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  return a1;
}

void EQKitLayoutElementaryStack::~EQKitLayoutElementaryStack(id *this)
{

  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:nn180100](this + 15);
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:nn180100](this + 9);
}

void sub_2179450AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:nn180100]((_QWORD *)(v1 + 120));
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::~deque[abi:nn180100]((_QWORD *)(v1 + 72));
  _Unwind_Resume(a1);
}

EQKit::ILayout *EQKitLayoutElementaryStack::layout@<X0>(id *this@<X0>, EQKit::ILayout *a2@<X8>)
{
  char *v4;
  id v5;
  char *v6;
  double *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  double *v13;
  float v14;
  double v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  EQKitHVSpace *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  EQKitBox *v31;
  EQKitVSpace *v32;
  EQKitVSpace *v33;
  EQKitVBox *v34;
  uint64_t v35;
  EQKitVBox *v36;
  EQKit::ILayout *v38;
  uint64_t v39;
  int v40[14];
  id v41;
  int v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  void *__p;
  double *v52;
  uint64_t v53;
  _BYTE v54[128];
  _BYTE v55[128];
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  EQKitLayoutElementaryStack::collectRows(this);
  if (objc_msgSend(this[5], "count"))
  {
    if (!this[6])
      this[6] = objc_alloc_init(MEMORY[0x24BDBCEB8]);
    v4 = (char *)this[7];
    v5 = this[8];
    v52 = 0;
    v53 = 0;
    __p = 0;
    v6 = &v4[(_QWORD)v5];
    if (&v4[(_QWORD)v5])
    {
      std::vector<unsigned long>::__vallocate[abi:nn180100](&__p, (unint64_t)&v4[(_QWORD)v5]);
      v7 = v52;
      bzero(v52, 8 * (_QWORD)v6);
      v52 = &v7[(_QWORD)v6];
    }
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v8 = this[5];
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v47, v55, 16);
    if (v9)
    {
      v10 = *(_QWORD *)v48;
      do
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v48 != v10)
            objc_enumerationMutation(v8);
          v12 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * i);
          objc_msgSend(v12, "setFirstColumnIndex:", (char *)this[7] + objc_msgSend(v12, "alignmentShift"));
          objc_msgSend(v12, "populateMaxColumnWidths:", (char *)__p + 8 * objc_msgSend(v12, "firstColumnIndex"));
        }
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v47, v55, 16);
      }
      while (v9);
    }
    v13 = (double *)__p;
    v14 = 0.0;
    while (v13 != v52)
    {
      v15 = *v13++;
      v14 = v15 + v14;
    }
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v16 = this[5];
    v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v43, v54, 16);
    v38 = a2;
    v18 = 0;
    if (v17)
    {
      v19 = 0;
      v20 = 0;
      v21 = v14;
      v22 = *(_QWORD *)v44;
      do
      {
        v23 = 0;
        v39 = v19 + v17;
        v24 = (uint64_t)v20;
        do
        {
          if (*(_QWORD *)v44 != v22)
            objc_enumerationMutation(v16);
          v20 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * v23);
          if ((id)(v19 + v23) == this[2])
            v18 = objc_msgSend(this[6], "count");
          EQKitLayoutElementaryStack::layoutForRow(this, v20, v24, (uint64_t)&__p, (EQKit::ILayout *)&v41, v21);
          if ((id)(v19 + v23) == this[3])
          {
            v25 = [EQKitHVSpace alloc];
            objc_msgSend(v41, "width");
            v27 = v26;
            objc_msgSend(v41, "height");
            v29 = v28;
            objc_msgSend(v41, "depth");
            v31 = -[EQKitHVSpace initWithWidth:height:depth:](v25, "initWithWidth:height:depth:", v27, v29, v30);
            EQKit::ILayout::ILayout((EQKit::ILayout *)v40, v31);
            EQKit::ILayout::operator=((uint64_t)&v41, (uint64_t)v40);
            EQKit::ILayout::~ILayout((EQKit::ILayout *)v40);

          }
          objc_msgSend(this[6], "addObject:", v41, v38);
          if (v19 + v23 + 1 < (unint64_t)objc_msgSend(this[5], "count"))
          {
            v32 = [EQKitVSpace alloc];
            objc_msgSend(v20, "followingSpace");
            v33 = -[EQKitVSpace initWithHeight:depth:](v32, "initWithHeight:depth:");
            objc_msgSend(this[6], "addObject:", v33);

          }
          EQKit::ILayout::~ILayout((EQKit::ILayout *)&v41);
          ++v23;
          v24 = (uint64_t)v20;
        }
        while (v17 != v23);
        v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v43, v54, 16);
        v19 = v39;
      }
      while (v17);
    }
    a2 = v38;
    if (this[2] == (id)0x7FFFFFFFFFFFFFFFLL)
    {
      v34 = -[EQKitVBox initWithChildBoxes:]([EQKitVBox alloc], "initWithChildBoxes:", this[6]);
      v40[0] = 0;
      v35 = *((_QWORD *)*this + 75);
      v41 = (id)EQKitLayoutManager::currentNode((EQKitLayoutManager *)*this);
      v42 = 2;
      EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v35, v35 + 152, (uint64_t)&v41, v40);
      v36 = (EQKitVBox *)EQKitLayoutManager::baselineAlignBox((EQKitLayoutManager *)*this, v34, v40[0]);

    }
    else
    {
      v36 = -[EQKitVBox initWithChildBoxes:pivotIndex:]([EQKitVBox alloc], "initWithChildBoxes:pivotIndex:", this[6], v18);
    }
    if (__p)
    {
      v52 = (double *)__p;
      operator delete(__p);
    }
  }
  else
  {
    v36 = 0;
  }
  return EQKit::ILayout::ILayout(a2, &v36->super.super);
}

void sub_2179454FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t EQKitLayoutElementaryStack::collectRows(id *this)
{
  void *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[56];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = (void *)objc_msgSend(this[1], "schemataChildren");
  result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)v9;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        EQKitLayoutManager::layoutBox((EQKitLayoutManager *)*this, *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * v6), 0, (EQKit::ILayout *)v7);
        EQKit::ILayout::~ILayout((EQKit::ILayout *)v7);
        ++v6;
      }
      while (v4 != v6);
      result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      v4 = result;
    }
    while (result);
  }
  return result;
}

void EQKitLayoutElementaryStack::layoutForRow(_QWORD *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, EQKit::ILayout *a5@<X8>, double a6@<D0>)
{
  id v12;
  double *v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  double v17;
  double v18;
  EQKitHSpace *v19;
  void *v20;
  EQKitHBox *v21;

  v12 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  if ((objc_msgSend(a2, "spansStack") & 1) == 0)
  {
    v13 = *(double **)a4;
    v14 = objc_msgSend(a2, "firstColumnIndex");
    if (v14)
    {
      v15 = 8 * v14;
      v16 = 0.0;
      do
      {
        v17 = *v13++;
        v16 = v17 + v16;
        v15 -= 8;
      }
      while (v15);
      v18 = v16;
    }
    else
    {
      v18 = 0.0;
    }
    v19 = -[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", v18);
    objc_msgSend(v12, "addObject:", v19);

  }
  v20 = (void *)objc_msgSend(a2, "newBoxWithStackWidth:columnWidthIter:iterMax:previousRow:layoutManager:", *(_QWORD *)a4 + 8 * objc_msgSend(a2, "firstColumnIndex"), *(_QWORD *)(a4 + 8), a3, *a1, a6);
  objc_msgSend(v12, "addObject:", v20);

  v21 = -[EQKitCompoundBox initWithChildBoxes:]([EQKitHBox alloc], "initWithChildBoxes:", v12);
  EQKit::ILayout::ILayout(a5, &v21->super.super);

}

void sub_2179457A8(_Unwind_Exception *a1)
{
  EQKit::ILayout *v1;

  EQKit::ILayout::~ILayout(v1);
  _Unwind_Resume(a1);
}

EQKit::ILayout *EQKitLayoutElementaryStack::layoutStackGroup@<X0>(_QWORD *a1@<X0>, void *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  EQKitLayoutManager *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[56];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v23 = 0;
  v7 = a1 + 9;
  v6 = (EQKitLayoutManager *)*a1;
  v8 = *((_QWORD *)v6 + 75);
  v24 = EQKitLayoutManager::currentNode(v6);
  v25 = 21;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,long>>(v8, v8 + 392, (uint64_t)&v24, &v23);
  v9 = EQKitLayoutElementaryStack::shiftPosition((EQKitLayoutElementaryStack *)a1);
  v24 = v23 + v9;
  std::deque<long>::push_back(v7, &v24);
  v22 = 0;
  v10 = *(_QWORD *)(*a1 + 600);
  v24 = EQKitLayoutManager::currentNode((EQKitLayoutManager *)*a1);
  v25 = 22;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,long>>(v10, v10 + 392, (uint64_t)&v24, &v22);
  std::deque<long>::push_back(a1 + 15, &v22);
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v11 = (void *)objc_msgSend(a2, "schemataChildren");
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v19;
    do
    {
      v15 = 0;
      do
      {
        if (*(_QWORD *)v19 != v14)
          objc_enumerationMutation(v11);
        EQKitLayoutManager::layoutBox((EQKitLayoutManager *)*a1, *(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * v15), 0, (EQKit::ILayout *)v17);
        EQKit::ILayout::~ILayout((EQKit::ILayout *)v17);
        ++v15;
      }
      while (v13 != v15);
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
    }
    while (v13);
  }
  --a1[14];
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::__maybe_remove_back_spare[abi:nn180100](v7, 1);
  --a1[20];
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::__maybe_remove_back_spare[abi:nn180100](a1 + 15, 1);
  return EQKit::ILayout::ILayout(a3, 0);
}

uint64_t EQKitLayoutElementaryStack::shiftPosition(EQKitLayoutElementaryStack *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *((_QWORD *)this + 14);
  if (!v1)
    return 0;
  v2 = *((_QWORD *)this + 20);
  if (!v2)
    return 0;
  v3 = v1 - 1;
  v4 = (_QWORD *)((char *)this + 72);
  v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 10)
                             + (((unint64_t)(*((_QWORD *)this + 13) + v3) >> 6) & 0x3FFFFFFFFFFFFF8))
                 + 8 * ((*((_QWORD *)this + 13) + v3) & 0x1FF));
  v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 16)
                             + (((unint64_t)(v2 + *((_QWORD *)this + 19) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                 + 8 * ((v2 + *((_QWORD *)this + 19) - 1) & 0x1FF))
     + v5;
  *((_QWORD *)this + 14) = v3;
  std::deque<objc_object  {objcproto15EQKitLayoutNode}*>::__maybe_remove_back_spare[abi:nn180100]((_QWORD *)this + 9, 1);
  std::deque<long>::push_back(v4, &v7);
  return v5;
}

EQKit::ILayout *EQKitLayoutElementaryStack::layoutStackRow@<X0>(EQKitLayoutManager **a1@<X0>, void *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  EQKitLayoutManager *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  EQKitLayoutElementaryStackDigitRow *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __n128 v20;
  unint64_t v21;
  uint64_t v22;
  EQKitLayoutElementaryStackDigitRow *v23;
  _OWORD v26[3];
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v5 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v6 = (void *)objc_msgSend(a2, "schemataChildren");
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
  if (!v7)
    goto LABEL_17;
  v8 = *(_QWORD *)v29;
  v9 = 0x7FFFFFFFLL;
  do
  {
    for (i = 0; i != v7; ++i)
    {
      if (*(_QWORD *)v29 != v8)
        objc_enumerationMutation(v6);
      v11 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * i);
      if (objc_msgSend(v11, "isNumber"))
      {
        v27 = 0;
        v12 = *a1;
        if (v11)
          objc_msgSend(v11, "layoutSchemata");
        else
          memset(v26, 0, 32);
        v13 = EQKitLayoutManager::layoutNumberDigits(v12, (const EQKit::Layout::Schemata *)v26, &v27);
        EQKit::Layout::Schemata::~Schemata((id *)v26);
        if (v9 == 0x7FFFFFFF)
        {
          v14 = objc_msgSend(v5, "count");
          v9 = v27 + v14;
        }
        objc_msgSend(v5, "addObjectsFromArray:", v13);
      }
      else
      {
        EQKitLayoutManager::layoutBox(*a1, (uint64_t)v11, 0, (EQKit::ILayout *)v26);
        objc_msgSend(v5, "addObject:", *(_QWORD *)&v26[0]);
        EQKit::ILayout::~ILayout((EQKit::ILayout *)v26);
      }
    }
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
  }
  while (v7);
  if (v9 == 0x7FFFFFFF)
LABEL_17:
    v9 = objc_msgSend(v5, "count");
  v27 = 0;
  v15 = *((_QWORD *)*a1 + 75);
  *(_QWORD *)&v26[0] = EQKitLayoutManager::currentNode(*a1);
  DWORD2(v26[0]) = 21;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,long>>(v15, v15 + 392, (uint64_t)v26, (uint64_t *)&v27);
  v16 = [EQKitLayoutElementaryStackDigitRow alloc];
  v17 = EQKitLayoutElementaryStack::shiftPosition((EQKitLayoutElementaryStack *)a1);
  v18 = v27;
  v19 = EQKitLayoutManager::layoutContext(*a1);
  v21 = v19;
  v22 = *(_QWORD *)(v19 + 80);
  if ((*(_BYTE *)(v19 + 104) & 1) != 0)
    v20.n128_u64[0] = *(_QWORD *)(v19 + 112);
  else
    v20.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v19);
  (*(void (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v22 + 40))(v22, 16, v21 + 8, v20);
  v23 = -[EQKitLayoutElementaryStackDigitRow initWithChildren:decimalPoint:position:followingSpace:](v16, "initWithChildren:decimalPoint:position:followingSpace:", v5, v9, v18 + v17);
  EQKitLayoutElementaryStack::addRow(a1, v23);

  return EQKit::ILayout::ILayout(a3, 0);
}

void sub_217945CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  EQKit::Layout::Schemata::~Schemata((id *)va);
  _Unwind_Resume(a1);
}

uint64_t EQKitLayoutElementaryStack::addRow(_QWORD *a1, void *a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v4 = (id)a1[5];
  if (!v4)
  {
    v4 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
    a1[5] = v4;
  }
  objc_msgSend(v4, "addObject:", a2);
  v5 = objc_msgSend(a2, "alignmentShift");
  if (a1[7] <= -v5)
    v6 = -v5;
  else
    v6 = a1[7];
  a1[7] = v6;
  v7 = objc_msgSend(a2, "alignmentShift");
  result = objc_msgSend(a2, "columnCount");
  v9 = result + v7;
  if (a1[8] > result + v7)
    v9 = a1[8];
  a1[8] = v9;
  return result;
}

EQKit::ILayout *EQKitLayoutElementaryStack::layoutStackLine@<X0>(uint64_t a1@<X0>, EQKit::ILayout *a2@<X8>)
{
  double v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  EQKitLayoutElementaryStackLineRow *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __n128 v13;
  unint64_t v14;
  uint64_t v15;
  EQKitLayoutElementaryStackLineRow *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  v4 = *(double *)(a1 + 32);
  if (v4 <= 0.0)
  {
    v5 = EQKitLayoutManager::layoutContext(*(EQKitLayoutManager **)a1);
    if ((*(_BYTE *)(v5 + 104) & 1) != 0)
      v4 = *(double *)(v5 + 112);
    else
      v4 = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v5);
  }
  v19 = 0;
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 600);
  v20 = EQKitLayoutManager::currentNode(*(EQKitLayoutManager **)a1);
  v21 = 21;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,long>>(v6, v6 + 392, (uint64_t)&v20, &v19);
  v18 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 600);
  v20 = EQKitLayoutManager::currentNode(*(EQKitLayoutManager **)a1);
  v21 = 23;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,long>>(v7, v7 + 416, (uint64_t)&v20, &v18);
  v8 = [EQKitLayoutElementaryStackLineRow alloc];
  v9 = v18;
  v10 = EQKitLayoutElementaryStack::shiftPosition((EQKitLayoutElementaryStack *)a1);
  v11 = v19;
  v12 = EQKitLayoutManager::layoutContext(*(EQKitLayoutManager **)a1);
  v14 = v12;
  v15 = *(_QWORD *)(v12 + 80);
  if ((*(_BYTE *)(v12 + 104) & 1) != 0)
    v13.n128_u64[0] = *(_QWORD *)(v12 + 112);
  else
    v13.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v12);
  v16 = -[EQKitLayoutElementaryStackLineRow initWithLength:thickness:position:followingSpace:](v8, "initWithLength:thickness:position:followingSpace:", v9, v11 + v10, v4, (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v15 + 40))(v15, 16, v14 + 8, v13));
  EQKitLayoutElementaryStack::addRow((_QWORD *)a1, v16);

  return EQKit::ILayout::ILayout(a2, 0);
}

void EQKitLayoutElementaryStack::layoutStackCarries(EQKitLayoutManager **a1@<X0>, void *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  EQKitLayoutManager *v11;
  void *v12;
  int64_t v13;
  char *v14;
  uint64_t v15;
  EQKitLayoutElementaryStackCarryRow *v16;
  uint64_t v17;
  uint64_t v18;
  EQKitLayoutElementaryStackCarryRow *v19;
  id v21;
  EQKitLayoutManager **v22;
  uint64_t v23;
  _QWORD v24[8];
  void *__p;
  void *__dst;
  uint64_t v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  void *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  double *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  __n128 (*v44)(__n128 *, __n128 *);
  void (*v45)(uint64_t);
  void *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  _BYTE v50[128];
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v21 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  v41 = 0;
  v42 = &v41;
  v43 = 0x4812000000;
  v44 = __Block_byref_object_copy__0;
  v45 = __Block_byref_object_dispose__0;
  v46 = &unk_217C8B239;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v37 = 0;
  v38 = (double *)&v37;
  v39 = 0x2020000000;
  v40 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v22 = a1;
  v5 = *((_QWORD *)*a1 + 75);
  v28 = EQKitLayoutManager::currentNode(*a1);
  v29 = 34;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum>,std::less<EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum<std::pair<EQKitTypes::Attributes::Enum const>>>>(v5, v5 + 200, (uint64_t)&v28, (char *)&v34);
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v6 = (void *)objc_msgSend(a2, "schemataChildren");
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v30, v50, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v31;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v31 != v8)
          objc_enumerationMutation(v6);
        v10 = *(_QWORD *)(*((_QWORD *)&v30 + 1) + 8 * i);
        v11 = *v22;
        v24[0] = MEMORY[0x24BDAC760];
        v24[1] = 3321888768;
        v24[2] = ___ZN26EQKitLayoutElementaryStack18layoutStackCarriesEPU42objcproto31EQKitLayoutSchemataStackCarries11objc_object_block_invoke;
        v24[3] = &unk_24D828E58;
        v24[7] = v22;
        v24[4] = v10;
        v24[5] = &v41;
        __dst = 0;
        v27 = 0;
        __p = 0;
        v12 = v34;
        v13 = v35 - (_BYTE *)v34;
        if (v35 != v34)
        {
          std::vector<EQKitTypes::Notation::Enum>::__vallocate[abi:nn180100](&__p, v13 >> 2);
          v14 = (char *)__dst;
          memmove(__dst, v12, v13);
          __dst = &v14[4 * (v13 >> 2)];
        }
        v24[6] = &v37;
        EQKitLayoutManager::layoutBox(v11, v10, 1, 0, 0, 0, (uint64_t)v24, (EQKit::ILayout *)&v28);
        objc_msgSend(v21, "addObject:", v28);
        EQKit::ILayout::~ILayout((EQKit::ILayout *)&v28);
        if (__p)
        {
          __dst = __p;
          operator delete(__p);
        }
      }
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v30, v50, 16);
    }
    while (v7);
  }
  v23 = 0;
  v15 = *((_QWORD *)*v22 + 75);
  v28 = EQKitLayoutManager::currentNode(*v22);
  v29 = 21;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,long>>(v15, v15 + 392, (uint64_t)&v28, &v23);
  v16 = [EQKitLayoutElementaryStackCarryRow alloc];
  v17 = objc_msgSend(v21, "count");
  v18 = EQKitLayoutElementaryStack::shiftPosition((EQKitLayoutElementaryStack *)v22);
  v19 = -[EQKitLayoutElementaryStackCarryRow initWithChildren:decimalPoint:position:followingSpace:crossouts:](v16, "initWithChildren:decimalPoint:position:followingSpace:crossouts:", v21, v17, v23 + v18, v42 + 6, v38[3]);
  EQKitLayoutElementaryStack::addRow(v22, v19);

  EQKit::ILayout::ILayout(a3, 0);
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  _Block_object_dispose(&v37, 8);
  _Block_object_dispose(&v41, 8);
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
}

void sub_217946264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56)
{
  if (__p)
    operator delete(__p);
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose(&a49, 8);
  if (a55)
  {
    a56 = (uint64_t)a55;
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void ___ZN26EQKitLayoutElementaryStack18layoutStackCarriesEPU42objcproto31EQKitLayoutSchemataStackCarries11objc_object_block_invoke(_QWORD *a1, uint64_t a2)
{
  EQKitLayoutManager **v3;
  uint64_t v4;
  _DWORD *v5;
  _QWORD *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  int v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  __n128 v36;
  unint64_t v37;
  uint64_t v38;
  double v39;
  void *__p;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;

  if (a1[4] != a2)
    return;
  v3 = (EQKitLayoutManager **)a1[7];
  __p = 0;
  v41 = 0;
  v42 = 0;
  v4 = *((_QWORD *)*v3 + 75);
  v43 = a2;
  v44 = 34;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum>,std::less<EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum<std::pair<EQKitTypes::Attributes::Enum const>>>>(v4, v4 + 200, (uint64_t)&v43, (char *)&__p);
  v5 = __p;
  if (__p != v41)
  {
    v6 = *(_QWORD **)(a1[5] + 8);
    v7 = (char *)v6[7];
    v8 = v6[8];
    if ((unint64_t)v7 >= v8)
    {
      v9 = (char *)v6[6];
      v10 = (v7 - v9) >> 2;
      v11 = v10 + 1;
      if (!((unint64_t)(v10 + 1) >> 62))
      {
        v12 = v8 - (_QWORD)v9;
        if (v12 >> 1 > v11)
          v11 = v12 >> 1;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
          v13 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
        {
          v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitTypes::Notation::Enum>>((uint64_t)(v6 + 8), v13);
          v9 = (char *)v6[6];
          v7 = (char *)v6[7];
        }
        else
        {
          v14 = 0;
        }
        v24 = &v14[4 * v10];
        v25 = &v14[4 * v13];
        *(_DWORD *)v24 = *v5;
        v18 = v24 + 4;
        while (v7 != v9)
        {
          v26 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v24 - 1) = v26;
          v24 -= 4;
        }
LABEL_46:
        v6[6] = v24;
        v6[7] = v18;
        v6[8] = v25;
        if (v9)
          operator delete(v9);
        goto LABEL_48;
      }
      goto LABEL_56;
    }
LABEL_14:
    *(_DWORD *)v7 = *v5;
    v17 = v7 + 4;
    goto LABEL_15;
  }
  v5 = (_DWORD *)a1[8];
  v6 = *(_QWORD **)(a1[5] + 8);
  v7 = (char *)v6[7];
  v15 = (uint64_t)(v6 + 8);
  v16 = v6[8];
  if (v5 != (_DWORD *)a1[9])
  {
    if ((unint64_t)v7 >= v16)
    {
      v9 = (char *)v6[6];
      v19 = (v7 - v9) >> 2;
      v20 = v19 + 1;
      if (!((unint64_t)(v19 + 1) >> 62))
      {
        v21 = v16 - (_QWORD)v9;
        if (v21 >> 1 > v20)
          v20 = v21 >> 1;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
          v22 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        if (v22)
        {
          v23 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitTypes::Notation::Enum>>(v15, v22);
          v9 = (char *)v6[6];
          v7 = (char *)v6[7];
        }
        else
        {
          v23 = 0;
        }
        v24 = &v23[4 * v19];
        v25 = &v23[4 * v22];
        *(_DWORD *)v24 = *v5;
        v18 = v24 + 4;
        while (v7 != v9)
        {
          v32 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v24 - 1) = v32;
          v24 -= 4;
        }
        goto LABEL_46;
      }
LABEL_56:
      abort();
    }
    goto LABEL_14;
  }
  if ((unint64_t)v7 >= v16)
  {
    v9 = (char *)v6[6];
    v27 = (v7 - v9) >> 2;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 62)
      abort();
    v29 = v16 - (_QWORD)v9;
    if (v29 >> 1 > v28)
      v28 = v29 >> 1;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
      v30 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    if (v30)
    {
      v31 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitTypes::Notation::Enum>>(v15, v30);
      v9 = (char *)v6[6];
      v7 = (char *)v6[7];
    }
    else
    {
      v31 = 0;
    }
    v24 = &v31[4 * v27];
    v25 = &v31[4 * v30];
    *(_DWORD *)v24 = 0;
    v18 = v24 + 4;
    while (v7 != v9)
    {
      v33 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v24 - 1) = v33;
      v24 -= 4;
    }
    goto LABEL_46;
  }
  *(_DWORD *)v7 = 0;
  v17 = v7 + 4;
LABEL_15:
  v18 = v17;
LABEL_48:
  v6[7] = v18;
  v34 = *(_QWORD *)(a1[6] + 8);
  v35 = EQKitLayoutManager::layoutContext(*v3);
  v37 = v35;
  v38 = *(_QWORD *)(v35 + 80);
  if ((*(_BYTE *)(v35 + 104) & 1) != 0)
    v36.n128_u64[0] = *(_QWORD *)(v35 + 112);
  else
    v36.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v35);
  v39 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v38 + 40))(v38, 16, v37 + 8, v36);
  if (*(double *)(v34 + 24) >= v39)
    v39 = *(double *)(v34 + 24);
  *(double *)(*(_QWORD *)(a1[6] + 8) + 24) = v39;
  if (__p)
  {
    v41 = __p;
    operator delete(__p);
  }
}

void sub_217946608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *__copy_helper_block_e8_64c68_ZTSNSt3__16vectorIN10EQKitTypes8Crossout4EnumENS_9allocatorIS3_EEEE(uint64_t a1, uint64_t a2)
{
  return std::vector<EQKitTypes::Crossout::Enum>::vector((_QWORD *)(a1 + 64), a2 + 64);
}

void __destroy_helper_block_e8_64c68_ZTSNSt3__16vectorIN10EQKitTypes8Crossout4EnumENS_9allocatorIS3_EEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
}

void EQKitLayoutElementaryStack::layoutStackCarry(EQKitLayoutManager **a1@<X0>, void *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  EQKitLayoutManager::beginRow(*a1, 0, 1);
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v6 = (void *)objc_msgSend(a2, "schemataChildren", 0);
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v12;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v12 != v9)
          objc_enumerationMutation(v6);
        EQKitLayoutManager::layout(*a1, *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * v10++), 0);
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v8);
  }
  EQKitLayoutManager::endRow(*a1, a3);
}

double EQKitLayoutElementaryStack::baselineForRowAtIndex(id *this, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  double v6;
  void *v7;
  double v8;

  if (!objc_msgSend(this[6], "count"))
    return 0.0;
  v4 = 0;
  v5 = 0;
  v6 = 0.0;
  do
  {
    v7 = (void *)objc_msgSend(this[6], "objectAtIndex:", v4);
    if (v5 >= a2)
      objc_msgSend(v7, "height");
    else
      objc_msgSend(v7, "vsize");
    v6 = v6 + v8;
    if ((v4 & 1) == 0 && v5 == a2)
      break;
    if ((v4 & 1) == 0 && v5 != a2)
      ++v5;
    ++v4;
  }
  while (v4 < objc_msgSend(this[6], "count"));
  return v6;
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,long>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t result;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;

  v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)a3);
  v8 = v7;
  if ((uint64_t *)(a2 + 8) != v7)
  {
    v9 = v7[6];
LABEL_3:
    *a4 = v9;
    return 1;
  }
  result = objc_msgSend(*(id *)a3, "isAttributeDefaultInheritableFromStyle:", *(unsigned int *)(a3 + 8));
  if ((_DWORD)result)
  {
    result = objc_msgSend(*(id *)a3, "parent");
    if (result)
    {
      v11 = (void *)result;
      while (1)
      {
        v12 = objc_msgSend(v11, "layoutStyleNode");
        if (v12)
        {
          v14 = v12;
          v15 = *(_DWORD *)(a3 + 8);
          v13 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)&v14);
          if (v8 != v13)
            break;
        }
        result = objc_msgSend(v11, "parent");
        v11 = (void *)result;
        if (!result)
          return result;
      }
      v9 = v13[6];
      goto LABEL_3;
    }
  }
  return result;
}

void std::deque<long>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = a1[2];
  v5 = a1[1];
  v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<long>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

void std::deque<long>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<EQKitLayoutContext *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<EQKitLayoutContext *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<EQKitLayoutContext *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_21794739C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<EQKitTypes::Crossout::Enum>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    std::vector<EQKitTypes::Notation::Enum>::__vallocate[abi:nn180100](a1, v5 >> 2);
    v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

uint64_t EQKitLayoutTable::resolveColumnAlignment(uint64_t a1, uint64_t *a2, uint64_t *a3, char **a4, unint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  if (a4[1] - *a4 != 4 || (result = *(unsigned int *)*a4, !(_DWORD)result))
  {
    v6 = *a3;
    v7 = a3[1];
    if (*a3 == v7)
      goto LABEL_8;
    v8 = ((v7 - v6) >> 2) - 1;
    if (v8 >= a5)
      v8 = a5;
    result = *(unsigned int *)(v6 + 4 * v8);
    if (!(_DWORD)result)
    {
LABEL_8:
      v9 = *a2;
      v10 = a2[1];
      if (*a2 == v10)
        return 2;
      v11 = ((v10 - v9) >> 2) - 1;
      if (v11 >= a5)
        v11 = a5;
      result = *(unsigned int *)(v9 + 4 * v11);
      if (!(_DWORD)result)
        return 2;
    }
  }
  return result;
}

uint64_t EQKitLayoutTable::resolveRowAlignment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unsigned int *v5;
  uint64_t result;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v5 = *(unsigned int **)(a4 + 24);
  if (*(_QWORD *)(a4 + 32) - (_QWORD)v5 != 4 || (result = *v5, !(_DWORD)result))
  {
    v7 = *(unsigned int **)(a3 + 24);
    if (*(_QWORD *)(a3 + 32) - (_QWORD)v7 != 4 || (result = *v7, !(_DWORD)result))
    {
      v8 = *(_QWORD *)(a2 + 24);
      v9 = *(_QWORD *)(a2 + 32);
      if (v8 == v9)
        return 4;
      v10 = ((v9 - v8) >> 2) - 1;
      if (v10 >= a5)
        v10 = a5;
      result = *(unsigned int *)(v8 + 4 * v10);
      if (!(_DWORD)result)
        return 4;
    }
  }
  return result;
}

void EQKitLayoutTable::resolveAlignmentGroups(EQKitLayoutTable *this, uint64_t a2, uint64_t a3)
{
  unint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[56];
  _OWORD v15[3];

  if (a3)
  {
    for (i = 0; i != a3; ++i)
    {
      memset(v15, 0, sizeof(v15));
      if (a2)
      {
        v7 = 0;
        v8 = a2;
        do
        {
          v9 = *(_QWORD *)(*((_QWORD *)this + 8) + v7 + 56);
          if (i < 0xAF8AF8AF8AF8AF8BLL * ((*(_QWORD *)(*((_QWORD *)this + 8) + v7 + 64) - v9) >> 3))
            EQKitLayoutRow::addToAlignmentContext((EQKitLayoutRow *)(v9 + 280 * i + 64), (EQKitGroupAlignmentContext *)v15);
          v7 += 80;
          --v8;
        }
        while (v8);
        v10 = 0;
        v11 = a2;
        do
        {
          v12 = *((_QWORD *)this + 8) + v10;
          v13 = *(_QWORD *)(v12 + 56);
          if (i < 0xAF8AF8AF8AF8AF8BLL * ((*(_QWORD *)(v12 + 64) - v13) >> 3))
          {
            EQKitLayoutRow::overallLayoutWithAlignmentContext((EQKitLayoutRow *)(v13 + 280 * i + 64), (const EQKitGroupAlignmentContext *)v15, (EQKit::ILayout *)v14);
            EQKit::ILayout::operator=(v13 + 280 * i + 224, (uint64_t)v14);
            EQKit::ILayout::~ILayout((EQKit::ILayout *)v14);
          }
          v10 += 80;
          --v11;
        }
        while (v11);
      }
      EQKitLayoutTable::Properties::~Properties((EQKitLayoutTable::Properties *)v15);
    }
  }
}

void sub_217947658(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)va);
  EQKitLayoutTable::Properties::~Properties((EQKitLayoutTable::Properties *)va1);
  _Unwind_Resume(a1);
}

void EQKitLayoutTable::relationalOperatorOffset(EQKitLayoutTable *this@<X0>, EQKitBox **a2@<X1>, EQKit::ILayoutOffset *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  double v9;
  int v10;
  unint64_t v11;
  uint64_t i;
  unint64_t v13;
  uint64_t v14;
  double v15;
  EQKit::ILayoutOffset *v16;
  id v17[2];

  v6 = *((_QWORD *)this + 8);
  v5 = *((_QWORD *)this + 9);
  if (v5 == v6)
  {
    EQKit::ILayoutOffset::ILayoutOffset(a3, 0, 0.0);
  }
  else
  {
    v16 = a3;
    v8 = 0;
    v9 = 1.79769313e308;
    do
    {
      v10 = 0;
      v11 = 0;
      for (i = 224; ; i += 280)
      {
        v13 = v5 == v6 ? 0 : 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56)) >> 3);
        if (((v11 < v13) & (v10 ^ 1)) == 0)
          break;
        v14 = *(_QWORD *)(v6 + 80 * v8 + 56) + i;
        EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)v17, 0, 0.0);
        if (EQKit::ILayout::getOffsetOfKind(v14, 1, v17))
        {
          v15 = EQKit::ILayoutOffset::offsetInBox((EQKit::ILayoutOffset *)v17, *a2);
          if (v9 == 1.79769313e308 || vabdd_f64(v15, v9) < 0.00100000005)
          {
            v10 = 0;
            v9 = v15;
          }
          else
          {
            v10 = 1;
            v9 = 1.79769313e308;
          }
        }
        else
        {
          v10 = 0;
        }
        EQKit::ILayoutOffset::~ILayoutOffset(v17);
        ++v11;
        v6 = *((_QWORD *)this + 8);
        v5 = *((_QWORD *)this + 9);
      }
      ++v8;
    }
    while (!((v8 >= 0xCCCCCCCCCCCCCCCDLL * ((v5 - v6) >> 4)) | v10 & 1));
    EQKit::ILayoutOffset::ILayoutOffset(v16, 0, 0.0);
    if (v9 != 1.79769313e308)
    {
      EQKit::ILayoutOffset::ILayoutOffset((EQKit::ILayoutOffset *)v17, *a2, v9);
      EQKit::ILayoutOffset::operator=((uint64_t)v16, (uint64_t)v17);
      EQKit::ILayoutOffset::~ILayoutOffset(v17);
    }
  }
}

void sub_217947870(_Unwind_Exception *a1, uint64_t a2, id *a3, ...)
{
  va_list va;

  va_start(va, a3);
  EQKit::ILayoutOffset::~ILayoutOffset((id *)va);
  EQKit::ILayoutOffset::~ILayoutOffset(a3);
  _Unwind_Resume(a1);
}

EQKit::ILayout *EQKitLayoutTable::layoutTr@<X0>(uint64_t a1@<X0>, void *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  EQKit::ILayout *result;
  void *v6;
  EQKit::ILayout *v7;
  EQKit::ILayout *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id obj;
  uint64_t v20;
  _QWORD v21[7];
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26[2];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  _BYTE v37[128];
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  result = EQKit::ILayout::ILayout(a3, 0);
  if (a2)
  {
    v6 = (void *)objc_msgSend(a2, "schemataChildren", a3);
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    result = (EQKit::ILayout *)objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v31, v37, 16);
    v7 = result;
    if (result)
    {
      v20 = *(_QWORD *)v32;
      obj = v6;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v32 != v20)
            objc_enumerationMutation(obj);
          v9 = *(_QWORD *)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)v8);
          v10 = *(_QWORD *)(a1 + 72);
          EQKitLayoutTable::LayoutCell::LayoutCell((EQKitLayoutTable::LayoutCell *)v26);
          v11 = *(_QWORD *)(v10 - 16);
          if (v11 >= *(_QWORD *)(v10 - 8))
          {
            v12 = std::vector<EQKitLayoutTable::LayoutCell>::__push_back_slow_path<EQKitLayoutTable::LayoutCell>(v10 - 24, (const EQKitLayoutTable::LayoutCell *)v26);
          }
          else
          {
            EQKitLayoutTable::LayoutCell::LayoutCell(*(EQKitLayoutTable::LayoutCell **)(v10 - 16), (const EQKitLayoutTable::LayoutCell *)v26);
            v12 = v11 + 280;
            *(_QWORD *)(v10 - 16) = v11 + 280;
          }
          *(_QWORD *)(v10 - 16) = v12;
          EQKit::ILayout::~ILayout((EQKit::ILayout *)&v30);
          EQKitLayoutRow::~EQKitLayoutRow((EQKitLayoutRow *)&v29);
          if (*((_QWORD *)&v27 + 1))
          {
            *(_QWORD *)&v28 = *((_QWORD *)&v27 + 1);
            operator delete(*((void **)&v27 + 1));
          }
          if (v26[0])
          {
            v26[1] = v26[0];
            operator delete(v26[0]);
          }
          v13 = *(_QWORD *)(*(_QWORD *)(a1 + 72) - 16);
          v22 = 0;
          v23 = &v22;
          v24 = 0x2020000000;
          v25 = 0;
          v14 = *(_QWORD *)(a1 + 8);
          v15 = *(unsigned __int8 *)(a1 + 88);
          v21[0] = MEMORY[0x24BDAC760];
          v21[1] = 3221225472;
          v21[2] = ___ZN16EQKitLayoutTable8layoutTrEPU32objcproto21EQKitLayoutSchemataTr11objc_object_block_invoke;
          v21[3] = &unk_24D828E90;
          v21[5] = &v22;
          v21[6] = a1;
          v21[4] = v9;
          EQKitLayoutManager::layoutIntoRow(v14, (EQKitLayoutRow *)(v13 - 216), v9, 0, v15, (uint64_t)v21);
          v27 = 0u;
          v28 = 0u;
          *(_OWORD *)v26 = 0u;
          v16 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 600);
          v35 = v9;
          v36 = 3;
          EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum>,std::less<EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum<std::pair<EQKitTypes::Attributes::Enum const>>>>(v16, v16 + 248, (uint64_t)&v35, (char *)&v27 + 8);
          v17 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 600);
          v35 = v9;
          v36 = 4;
          EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum>,std::less<EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum<std::pair<EQKitTypes::Attributes::Enum const>>>>(v17, v17 + 272, (uint64_t)&v35, (char *)v26);
          if ((void **)(v13 - 280) != v26)
          {
            std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:nn180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>((char *)(v13 - 280), (char *)v26[0], (uint64_t)v26[1], ((char *)v26[1] - (char *)v26[0]) >> 2);
            std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:nn180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>((char *)(v13 - 256), *((char **)&v27 + 1), v28, (uint64_t)(v28 - *((_QWORD *)&v27 + 1)) >> 2);
          }
          *(_QWORD *)(v13 - 224) = v23[3];
          if (*((_QWORD *)&v27 + 1))
          {
            *(_QWORD *)&v28 = *((_QWORD *)&v27 + 1);
            operator delete(*((void **)&v27 + 1));
          }
          if (v26[0])
          {
            v26[1] = v26[0];
            operator delete(v26[0]);
          }
          _Block_object_dispose(&v22, 8);
          v8 = (EQKit::ILayout *)((char *)v8 + 1);
        }
        while (v7 != v8);
        result = (EQKit::ILayout *)objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v37, 16);
        v7 = result;
      }
      while (result);
    }
  }
  return result;
}

void sub_217947B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, EQKit::ILayout *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  EQKit::ILayout::~ILayout(a9);
  _Unwind_Resume(a1);
}

void EQKitLayoutTable::LayoutCell::~LayoutCell(EQKitLayoutTable::LayoutCell *this)
{
  void *v2;
  void *v3;

  EQKit::ILayout::~ILayout((EQKitLayoutTable::LayoutCell *)((char *)this + 224));
  EQKitLayoutRow::~EQKitLayoutRow((EQKitLayoutTable::LayoutCell *)((char *)this + 64));
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  v3 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v3;
    operator delete(v3);
  }
}

void ___ZN16EQKitLayoutTable8layoutTrEPU32objcproto21EQKitLayoutSchemataTr11objc_object_block_invoke(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  double v4;

  if (a1[4] == a2)
  {
    v3 = EQKitLayoutManager::layoutContext(*(EQKitLayoutManager **)(a1[6] + 8));
    if ((*(_BYTE *)(v3 + 104) & 2) != 0)
      v4 = *(double *)(v3 + 120);
    else
      v4 = EQKitLayoutContext::pComputeMathAxis((EQKitLayoutContext *)v3);
    *(double *)(*(_QWORD *)(a1[5] + 8) + 24) = v4;
  }
}

void EQKitLayoutTable::Properties::~Properties(EQKitLayoutTable::Properties *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  v3 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v3;
    operator delete(v3);
  }
}

void EQKitLayoutTable::generateTableLayout(EQKitLayoutTable *this, NSArray *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  double v30;
  double v31;
  double *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t *v38;
  _QWORD *v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  void *v45[2];
  void *__p[2];
  __int128 v47;
  _BYTE v48[56];
  void *v49[2];
  void *v50[2];
  __int128 v51;
  _OWORD v52[2];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  int v58;
  _BYTE v59[128];
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v3 = -[NSArray countByEnumeratingWithState:objects:count:](a2, "countByEnumeratingWithState:objects:count:", &v53, v59, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v54;
    v43 = (char *)this + 80;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v54 != v4)
          objc_enumerationMutation(a2);
        v6 = *(_QWORD *)(*((_QWORD *)&v53 + 1) + 8 * i);
        memset(v52, 0, sizeof(v52));
        *(_OWORD *)v50 = 0u;
        v51 = 0u;
        *(_OWORD *)v49 = 0u;
        v7 = *((_QWORD *)this + 9);
        if (v7 >= *((_QWORD *)this + 10))
        {
          v8 = std::vector<EQKitLayoutTable::LayoutRow>::__push_back_slow_path<EQKitLayoutTable::LayoutRow const&>((uint64_t *)this + 8, v49);
        }
        else
        {
          std::allocator<EQKitLayoutTable::LayoutRow>::construct[abi:nn180100]<EQKitLayoutTable::LayoutRow,EQKitLayoutTable::LayoutRow const&>((uint64_t)v43, *((_QWORD **)this + 9), v49);
          v8 = v7 + 80;
          *((_QWORD *)this + 9) = v7 + 80;
        }
        *((_QWORD *)this + 9) = v8;
        EQKitLayoutManager::layoutBox(*((EQKitLayoutManager **)this + 1), v6, 0, (EQKit::ILayout *)v48);
        EQKit::ILayout::~ILayout((EQKit::ILayout *)v48);
        *(_OWORD *)__p = 0u;
        v47 = 0u;
        *(_OWORD *)v45 = 0u;
        v9 = *(_QWORD *)(*((_QWORD *)this + 1) + 600);
        v57 = v6;
        v58 = 3;
        EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum>,std::less<EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum<std::pair<EQKitTypes::Attributes::Enum const>>>>(v9, v9 + 248, (uint64_t)&v57, (char *)&__p[1]);
        v10 = *(_QWORD *)(*((_QWORD *)this + 1) + 600);
        v57 = v6;
        v58 = 4;
        EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum>,std::less<EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum<std::pair<EQKitTypes::Attributes::Enum const>>>>(v10, v10 + 272, (uint64_t)&v57, (char *)v45);
        if ((void **)((char *)this + 16) != v45)
        {
          std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:nn180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>((char *)this + 16, (char *)v45[0], (uint64_t)v45[1], ((char *)v45[1] - (char *)v45[0]) >> 2);
          std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:nn180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>((char *)this + 40, (char *)__p[1], v47, (uint64_t)(v47 - (unint64_t)__p[1]) >> 2);
        }
        v11 = (char *)(*((_QWORD *)this + 9) - 80);
        if (v11 != (char *)v45)
        {
          std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:nn180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>(v11, (char *)v45[0], (uint64_t)v45[1], ((char *)v45[1] - (char *)v45[0]) >> 2);
          std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:nn180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>(v11 + 24, (char *)__p[1], v47, (uint64_t)(v47 - (unint64_t)__p[1]) >> 2);
        }
        if (__p[1])
        {
          *(void **)&v47 = __p[1];
          operator delete(__p[1]);
        }
        if (v45[0])
        {
          v45[1] = v45[0];
          operator delete(v45[0]);
        }
        v45[0] = (char *)v52 + 8;
        std::vector<EQKitLayoutTable::LayoutCell>::__destroy_vector::operator()[abi:nn180100]((void ***)v45);
        if (v50[1])
        {
          *(void **)&v51 = v50[1];
          operator delete(v50[1]);
        }
        if (v49[0])
        {
          v49[1] = v49[0];
          operator delete(v49[0]);
        }
      }
      v3 = -[NSArray countByEnumeratingWithState:objects:count:](a2, "countByEnumeratingWithState:objects:count:", &v53, v59, 16);
    }
    while (v3);
  }
  v13 = *((_QWORD *)this + 8);
  v12 = *((_QWORD *)this + 9);
  v14 = (v12 - v13) / 80;
  v15 = 0;
  if (v12 != v13)
  {
    if (v14 <= 1)
      v16 = 1;
    else
      v16 = (v12 - v13) / 80;
    v17 = (_QWORD *)(v13 + 64);
    do
    {
      if (v15 <= 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*v17 - *(v17 - 1)) >> 3))
        v15 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*v17 - *(v17 - 1)) >> 3);
      v17 += 10;
      --v16;
    }
    while (v16);
  }
  EQKitLayoutTable::resolveAlignmentGroups(this, (v12 - v13) / 80, v15);
  v49[0] = 0;
  v49[1] = 0;
  v50[0] = 0;
  v45[0] = 0;
  std::vector<double>::resize((uint64_t)v49, v15, v45);
  if (v12 != v13)
  {
    v18 = 0;
    if (v14 <= 1)
      v19 = 1;
    else
      v19 = v14;
    v20 = *((_QWORD *)this + 8);
    do
    {
      v21 = v20 + 80 * v18;
      v22 = *(_QWORD *)(v21 + 56);
      v23 = *(_QWORD *)(v21 + 64);
      std::vector<EQKitLayoutTable::LayoutCell>::resize((_QWORD *)(v21 + 56), v15);
      v20 = *((_QWORD *)this + 8);
      v24 = v20 + 80 * v18;
      *(_QWORD *)(v24 + 48) = 0;
      if (v15)
      {
        v25 = 0;
        v26 = 0;
        v27 = 0xAF8AF8AF8AF8AF8BLL * ((v23 - v22) >> 3);
        do
        {
          if (v26 >= v27)
          {
            v28 = *(_QWORD *)(v20 + 80 * v18 + 56);
            if (v28 + v25 != v24)
            {
              std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:nn180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>((char *)(v28 + v25), *(char **)v24, *(_QWORD *)(v24 + 8), (uint64_t)(*(_QWORD *)(v24 + 8) - *(_QWORD *)v24) >> 2);
              std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:nn180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>((char *)(v28 + v25 + 24), *(char **)(v24 + 24), *(_QWORD *)(v24 + 32), (uint64_t)(*(_QWORD *)(v24 + 32) - *(_QWORD *)(v24 + 24)) >> 2);
              v20 = *((_QWORD *)this + 8);
            }
          }
          v29 = *(void **)(*(_QWORD *)(v20 + 80 * v18 + 56) + v25 + 224);
          objc_msgSend(v29, "width", v43);
          v31 = v30;
          v32 = (double *)v49[0];
          v33 = *((double *)v49[0] + v26);
          if (v31 > v33)
          {
            objc_msgSend(v29, "width");
            v32 = (double *)v49[0];
          }
          v32[v26] = v33;
          objc_msgSend(v29, "layoutVSize");
          v35 = v34;
          v20 = *((_QWORD *)this + 8);
          v36 = *(double *)(v20 + 80 * v18 + 48);
          if (v35 > v36)
          {
            objc_msgSend(v29, "layoutVSize");
            v20 = *((_QWORD *)this + 8);
          }
          *(double *)(v20 + 80 * v18 + 48) = v36;
          ++v26;
          v25 += 280;
        }
        while (v15 != v26);
      }
      ++v18;
    }
    while (v18 != v19);
    v37 = 0;
    v38 = (uint64_t *)v49[0];
    do
    {
      if (v15)
      {
        v39 = (_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 8) + 80 * v37 + 56) + 48);
        v40 = v38;
        v41 = v15;
        do
        {
          v42 = *v40++;
          *v39 = v42;
          v39 += 35;
          --v41;
        }
        while (v41);
      }
      ++v37;
    }
    while (v37 != v19);
  }
  if (v49[0])
  {
    v49[1] = v49[0];
    operator delete(v49[0]);
  }
}

void sub_217948160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void EQKitLayoutTable::LayoutRow::~LayoutRow(EQKitLayoutTable::LayoutRow *this)
{
  void *v2;
  void *v3;
  void **v4;

  v4 = (void **)((char *)this + 56);
  std::vector<EQKitLayoutTable::LayoutCell>::__destroy_vector::operator()[abi:nn180100](&v4);
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  v3 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v3;
    operator delete(v3);
  }
}

void std::vector<double>::resize(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<double>::__append((void **)a1, a2 - v3, a3);
  }
}

void std::vector<EQKitLayoutTable::LayoutCell>::resize(_QWORD *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0xAF8AF8AF8AF8AF8BLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<EQKitLayoutTable::LayoutCell>::__append((uint64_t)a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 280 * a2;
    while (v3 != v7)
    {
      v3 -= 280;
      std::allocator<EQKitLayoutTable::LayoutCell>::destroy[abi:nn180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void EQKitLayoutTable::generateRowBox(uint64_t a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, EQKit::ILayout *a5@<X8>)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  unsigned int v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  double v35;
  uint64_t i;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  int v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  id v47;
  void *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  void *v53;
  id v54;
  double v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  double *v60;
  EQKitHSpace *v61;
  EQKitHBox *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v67;
  _BYTE v68[56];

  v65 = (uint64_t)a5;
  EQKit::ILayout::ILayout(a5, 0);
  if (!objc_msgSend(a2, "count"))
  {
    v63 = (void *)objc_msgSend(MEMORY[0x24BDD1448], "currentHandler", v65);
    objc_msgSend(v63, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "EQKit::ILayout EQKitLayoutTable::generateRowBox(NSArray *, NSUInteger, const EQKitLength::Vector &)"), CFSTR("EQKitLayoutTable.mm"), 236, CFSTR("No cell boxes."));
  }
  v8 = 0;
  v9 = 0;
  v10 = a1 + 16;
  v11 = 0.0;
  v12 = 56;
  v13 = 0.0;
  v14 = 0.0;
  v15 = 0.0;
  v16 = 0.0;
  while (1)
  {
    v17 = *(_QWORD *)(a1 + 64);
    v18 = *(_QWORD *)(a1 + 72) == v17
        ? 0
        : 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(v17 + 64) - *(_QWORD *)(v17 + 56)) >> 3);
    if (v9 >= v18)
      break;
    v19 = (void *)objc_msgSend(a2, "objectAtIndex:", v9);
    v20 = EQKitLayoutTable::resolveRowAlignment((uint64_t)v19, a1 + 16, *(_QWORD *)(a1 + 64) + 80 * a3, *(_QWORD *)(*(_QWORD *)(a1 + 64) + 80 * a3 + 56) + v12 - 56, a3);
    if (v20 <= 5)
    {
      if (((1 << v20) & 0x2A) != 0)
      {
        objc_msgSend(v19, "layoutVSize");
        if (v11 <= v21)
        {
          objc_msgSend(v19, "layoutVSize");
          v11 = v22;
        }
      }
      else if (((1 << v20) & 0x14) != 0)
      {
        objc_msgSend(v19, "layoutHeight");
        if (v13 <= v23)
        {
          objc_msgSend(v19, "layoutHeight");
          v13 = v24;
        }
        objc_msgSend(v19, "layoutDepth", v65);
        if (v14 <= v25)
        {
          objc_msgSend(v19, "layoutDepth");
          v14 = v26;
        }
        v27 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 80 * a3 + 56);
        v28 = *(double *)(v27 + v12);
        v29 = v28;
        if ((v8 & 1) != 0)
        {
          v29 = v16;
          if (v16 >= v28)
            v29 = *(double *)(v27 + v12);
        }
        v8 = 1;
        if (v15 <= v28)
          v15 = *(double *)(v27 + v12);
        v16 = v29;
      }
    }
    ++v9;
    v12 += 280;
  }
  if (v11 > 0.0 || v13 > 0.0 || v14 > 0.0)
  {
    if (v11 == 0.0)
    {
      v11 = v13 + v14;
    }
    else if (v13 == 0.0 && v14 == 0.0)
    {
      v13 = v11 * 0.5;
      v14 = v11 * 0.5;
    }
    else if (v13 + v14 <= v11)
    {
      if (v13 + v14 < v11)
      {
        v30 = (v11 - (v13 + v14)) * 0.5;
        v13 = v13 + v30;
        v14 = v14 + v30;
      }
    }
    else
    {
      v11 = v13 + v14;
    }
    v31 = v13 + v14;
    if (v11 != v31)
    {
      v64 = (void *)objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
      objc_msgSend(v64, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "EQKit::ILayout EQKitLayoutTable::generateRowBox(NSArray *, NSUInteger, const EQKitLength::Vector &)"), CFSTR("EQKitLayoutTable.mm"), 299, CFSTR("vSize should be sum of vHeight and vDepth."));
      v11 = v31;
    }
    v32 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
    v33 = 0;
    v34 = 0;
    v35 = v16 + (v15 - v16) * 0.5;
    for (i = 56; ; i += 280)
    {
      v37 = *(_QWORD *)(a1 + 64);
      if (*(_QWORD *)(a1 + 72) == v37)
        v38 = 0;
      else
        v38 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(v37 + 64) - *(_QWORD *)(v37 + 56)) >> 3);
      if (v34 >= v38)
      {
        if (objc_msgSend(v32, "count"))
        {
          v62 = -[EQKitCompoundBox initWithChildBoxes:]([EQKitHBox alloc], "initWithChildBoxes:", v32);
          EQKit::ILayout::ILayout((EQKit::ILayout *)v68, &v62->super.super);
          EQKit::ILayout::operator=(v65, (uint64_t)v68);
          EQKit::ILayout::~ILayout((EQKit::ILayout *)v68);

        }
        return;
      }
      v39 = (void *)objc_msgSend(a2, "objectAtIndex:", v34);
      v40 = EQKitLayoutTable::resolveRowAlignment((uint64_t)v39, v10, *(_QWORD *)(a1 + 64) + 80 * a3, *(_QWORD *)(*(_QWORD *)(a1 + 64) + 80 * a3 + 56) + i - 56, a3);
      objc_msgSend(v39, "layoutDepth");
      v42 = v41;
      objc_msgSend(v39, "layoutVSize");
      v44 = v13 + v42 + 0.0;
      switch(v40)
      {
        case 1:
          v44 = v44 - v43;
          break;
        case 2:
          v46 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 80 * a3 + 56) + i);
          v45 = v35 + v44 - v13 - v42;
          goto LABEL_49;
        case 3:
          v45 = v44 - v11 * 0.5;
          v46 = v43 * -0.5;
LABEL_49:
          v44 = v45 + v46;
          break;
        case 4:
          v44 = v44 - v13 - v42;
          break;
        case 5:
          v44 = v44 - v11;
          break;
        default:
          break;
      }
      v47 = v44 == 0.0
          ? v39
          : -[EQKitVShift initWithBox:offset:]([EQKitVShift alloc], "initWithBox:offset:", v39, v44);
      v48 = v47;
      objc_msgSend(v32, "addObject:", v47, v65);

      v49 = v34 + 1;
      v50 = *(_QWORD *)(a1 + 64);
      if (*(_QWORD *)(a1 + 72) != v50
        && v49 < 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(v50 + 64) - *(_QWORD *)(v50 + 56)) >> 3))
      {
        break;
      }
LABEL_61:
      v33 += 16;
      v34 = v49;
    }
    v67 = i;
    v51 = a3;
    v52 = v10;
    v53 = a2;
    v54 = v32;
    EQKitLayoutManager::lengthForMetric(*(id **)(a1 + 8), 15);
    v56 = v55;
    v57 = *a4;
    v58 = a4[1];
    if (v34 >= (v58 - *a4) >> 4)
    {
      if (v58 == v57)
      {
LABEL_60:
        v32 = v54;
        a2 = v53;
        v10 = v52;
        a3 = v51;
        i = v67;
        v61 = -[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", v56);
        objc_msgSend(v32, "addObject:", v61);

        goto LABEL_61;
      }
      v59 = EQKitLayoutManager::layoutContext(*(EQKitLayoutManager **)(a1 + 8));
      v60 = (double *)(v58 - 16);
    }
    else
    {
      v59 = EQKitLayoutManager::layoutContext(*(EQKitLayoutManager **)(a1 + 8));
      v60 = (double *)(v57 + v33);
    }
    v56 = EQKitLength::resolveToAbsoluteWithUnitProviderAndDefault(v60, v59, v56);
    goto LABEL_60;
  }
}

void sub_217948894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, EQKit::ILayout *a9, uint64_t a10, uint64_t a11, char a12)
{
  EQKit::ILayout::~ILayout(a9);
  _Unwind_Resume(a1);
}

void EQKitLayoutTable::generateTableBox(EQKitLayoutTable *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  double v5;
  unint64_t v6;
  __n128 v7;
  unint64_t v8;
  uint64_t v9;
  double v10;
  _QWORD *v11;
  uint64_t v12;
  EQKitLayoutManager *v13;
  uint64_t v14;
  unint64_t v15;
  EQKitHSpace *v16;
  EQKitHSpace *v17;
  uint64_t v18;
  unint64_t i;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  EQKitBox *p_super;
  uint64_t v24;
  int v25;
  double v26;
  EQKitVSpace *v27;
  EQKitOffsetVBox *v28;
  EQKitLayoutManager *v29;
  uint64_t v30;
  EQKitVBox *v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  EQKit::ILayout *v38;
  id v39;
  id v40;
  int v41;
  _BYTE v42[56];
  id v43;
  int v44;
  void *__p;
  void *v46;
  char *v47;

  v40 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  v39 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  v4 = EQKitLayoutManager::layoutContext(*((EQKitLayoutManager **)this + 1));
  if ((*(_BYTE *)(v4 + 104) & 2) != 0)
    v5 = *(double *)(v4 + 120);
  else
    v5 = EQKitLayoutContext::pComputeMathAxis((EQKitLayoutContext *)v4);
  v6 = EQKitLayoutManager::layoutContext(*((EQKitLayoutManager **)this + 1));
  v8 = v6;
  v9 = *(_QWORD *)(v6 + 80);
  if ((*(_BYTE *)(v6 + 104) & 1) != 0)
    v7.n128_u64[0] = *(_QWORD *)(v6 + 112);
  else
    v7.n128_f64[0] = EQKitLayoutContext::pComputeRuleThickness((EQKitLayoutContext *)v6);
  v10 = (*(double (**)(uint64_t, uint64_t, unint64_t, __n128))(*(_QWORD *)v9 + 40))(v9, 15, v8 + 8, v7);
  v47 = 0;
  v11 = std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLength>>((uint64_t)&v47, 1uLL);
  *(_DWORD *)v11 = 3;
  v11[1] = 0x3FE999999999999ALL;
  __p = v11;
  v47 = (char *)&v11[2 * v12];
  v37 = a2;
  v46 = v11 + 2;
  v13 = (EQKitLayoutManager *)*((_QWORD *)this + 1);
  v14 = *((_QWORD *)v13 + 75);
  v43 = (id)EQKitLayoutManager::currentNode(v13);
  v44 = 46;
  EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<EQKitLength>,std::less<EQKitTypes::Attributes::Enum>,EQKitLength<std::pair<EQKitTypes::Attributes::Enum const>>>>(v14, v14 + 56, (uint64_t)&v43, (char *)&__p);
  if (*((_QWORD *)this + 9) != *((_QWORD *)this + 8))
  {
    v15 = 0;
    do
    {
      v16 = (EQKitHSpace *)objc_alloc_init(MEMORY[0x24BDBCEB8]);
      v17 = v16;
      v18 = 0;
      for (i = 0; ; ++i)
      {
        v20 = *((_QWORD *)this + 8);
        v21 = *((_QWORD *)this + 9) == v20
            ? 0
            : 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(v20 + 64) - *(_QWORD *)(v20 + 56)) >> 3);
        if (i >= v21)
          break;
        v22 = *(_QWORD *)(v20 + 80 * v15 + 56);
        p_super = *(EQKitBox **)(v22 + v18 + 224);
        if (!p_super)
        {
          v16 = -[EQKitHSpace initWithWidth:]([EQKitHSpace alloc], "initWithWidth:", 0.0, v37);
          p_super = &v16->super;
          v20 = *((_QWORD *)this + 8);
          v22 = *(_QWORD *)(v20 + 80 * v15 + 56);
        }
        v24 = v22 + v18;
        v25 = EQKitLayoutTable::resolveColumnAlignment((uint64_t)v16, (uint64_t *)this + 2, (uint64_t *)(v20 + 80 * v15), (char **)(v22 + v18), i);
        v26 = *(double *)(v24 + 48);
        EQKit::ILayout::ILayout((EQKit::ILayout *)v42, p_super);
        EQKitLayoutManager::alignBoxHorizontally((const EQKit::ILayout *)v42, v25, 0, (EQKit::ILayout *)&v43, v26, 0.0);
        EQKit::ILayout::~ILayout((EQKit::ILayout *)v42);
        -[EQKitHSpace addObject:](v17, "addObject:", v43);
        EQKit::ILayout::~ILayout((EQKit::ILayout *)&v43);
        v18 += 280;
      }
      if (-[EQKitHSpace count](v17, "count"))
      {
        EQKitLayoutTable::generateRowBox((uint64_t)this, v17, v15, (uint64_t *)&__p, (EQKit::ILayout *)&v43);
        if (v43)
        {
          objc_msgSend(v40, "addObject:");
          objc_msgSend(v39, "addObject:", v43);
          if (v15 + 1 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 4))
          {
            v27 = -[EQKitVSpace initWithHeight:depth:]([EQKitVSpace alloc], "initWithHeight:depth:", v10, 0.0);
            objc_msgSend(v40, "addObject:", v27);

          }
        }
        EQKit::ILayout::~ILayout((EQKit::ILayout *)&v43);
      }

      ++v15;
    }
    while (v15 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 4));
  }
  v28 = (EQKitOffsetVBox *)objc_msgSend(v40, "count", v37);
  v29 = (EQKitLayoutManager *)*((_QWORD *)this + 1);
  v30 = *((_QWORD *)v29 + 75);
  v41 = 0;
  v43 = (id)EQKitLayoutManager::currentNode(v29);
  v44 = 2;
  if ((EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v30, v30 + 152, (uint64_t)&v43, &v41) & 1) == 0)v41 = 2;
  if (v28)
  {
    v31 = -[EQKitVBox initWithChildBoxes:]([EQKitVBox alloc], "initWithChildBoxes:", v40);
    -[EQKitBox layoutVSize](v31, "layoutVSize");
    v33 = v32;
    -[EQKitBox layoutDepth](v31, "layoutDepth");
    v35 = v34;

    if (v41 == 2)
    {
      v36 = v5 + v35 + v33 * -0.5;
    }
    else if (v41 == 1)
    {
      v36 = v35 - v33;
    }
    else if ((v41 - 3) > 1)
    {
      if (v41 == 5)
        v36 = v35;
      else
        v36 = 0.0;
    }
    else
    {
      v36 = v35 + v33 * -0.5;
    }
    v28 = -[EQKitOffsetVBox initWithChildBoxes:pivotIndex:offset:]([EQKitOffsetVBox alloc], "initWithChildBoxes:pivotIndex:offset:", v40, 0, v36);
  }
  EQKit::ILayout::ILayout(v38, &v28->super.super.super);
  EQKitLayoutTable::relationalOperatorOffset(this, (EQKitBox **)v38, (EQKit::ILayoutOffset *)&v43);
  if (v43)
    EQKit::ILayout::setOffsetOfKind((uint64_t)v38, 1, (uint64_t)&v43);

  EQKit::ILayoutOffset::~ILayoutOffset(&v43);
  if (__p)
  {
    v46 = __p;
    operator delete(__p);
  }
}

void sub_217948DAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void EQKitLayoutTable::layoutTable(uint64_t a1@<X0>, void *a2@<X1>, EQKit::ILayout *a3@<X8>)
{
  NSArray *v6;
  EQKitLayoutManager *v7;
  uint64_t v8;
  EQKitLayoutManager *v9;
  uint64_t v10;
  EQKitLayoutManager *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void *v15[2];
  void *__p[2];
  __int128 v17;

  EQKit::ILayout::ILayout(a3, 0);
  if (a2)
  {
    v6 = (NSArray *)objc_msgSend(a2, "schemataChildren");
    *(_BYTE *)(a1 + 88) = 0;
    LODWORD(v15[0]) = 0;
    v7 = *(EQKitLayoutManager **)(a1 + 8);
    v8 = *((_QWORD *)v7 + 75);
    v13 = EQKitLayoutManager::currentNode(v7);
    v14 = 8;
    if (EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>(v8, v8 + 8, (uint64_t)&v13, v15))*(_BYTE *)(a1 + 88) = LODWORD(v15[0]) == 2;
    EQKitLayoutTable::generateTableLayout((EQKitLayoutTable *)a1, v6);
    *(_OWORD *)__p = 0u;
    v17 = 0u;
    *(_OWORD *)v15 = 0u;
    v9 = *(EQKitLayoutManager **)(a1 + 8);
    v10 = *((_QWORD *)v9 + 75);
    v13 = EQKitLayoutManager::currentNode(v9);
    v14 = 3;
    EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum>,std::less<EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum<std::pair<EQKitTypes::Attributes::Enum const>>>>(v10, v10 + 248, (uint64_t)&v13, (char *)&__p[1]);
    v11 = *(EQKitLayoutManager **)(a1 + 8);
    v12 = *((_QWORD *)v11 + 75);
    v13 = EQKitLayoutManager::currentNode(v11);
    v14 = 4;
    EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum>,std::less<EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Notation::Enum<std::pair<EQKitTypes::Attributes::Enum const>>>>(v12, v12 + 272, (uint64_t)&v13, (char *)v15);
    if ((void **)(a1 + 16) != v15)
    {
      std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:nn180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>((char *)(a1 + 16), (char *)v15[0], (uint64_t)v15[1], ((char *)v15[1] - (char *)v15[0]) >> 2);
      std::vector<EQKitTypes::Notation::Enum>::__assign_with_size[abi:nn180100]<EQKitTypes::Notation::Enum*,EQKitTypes::Notation::Enum*>((char *)(a1 + 40), (char *)__p[1], v17, (uint64_t)(v17 - (unint64_t)__p[1]) >> 2);
    }
    EQKitLayoutTable::generateTableBox((EQKitLayoutTable *)a1, (uint64_t)&v13);
    EQKit::ILayout::operator=((uint64_t)a3, (uint64_t)&v13);
    EQKit::ILayout::~ILayout((EQKit::ILayout *)&v13);
    if (__p[1])
    {
      *(void **)&v17 = __p[1];
      operator delete(__p[1]);
    }
    if (v15[0])
    {
      v15[1] = v15[0];
      operator delete(v15[0]);
    }
  }
}

void sub_217948FB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  EQKit::ILayout *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  EQKit::ILayout::~ILayout((EQKit::ILayout *)va);
  EQKitLayoutTable::Properties::~Properties((EQKitLayoutTable::Properties *)va1);
  EQKit::ILayout::~ILayout(v2);
  _Unwind_Resume(a1);
}

void *EQKitLayoutTable::layoutPropertiesDescription(EQKitLayoutTable *this, unsigned int **a2)
{
  void *v3;
  unsigned int *i;
  unsigned int v5;
  unsigned int *j;
  unsigned int v7;

  v3 = (void *)objc_msgSend(MEMORY[0x24BDD16A8], "stringWithFormat:", CFSTR("Properties col align"));
  for (i = *a2; i != a2[1]; ++i)
  {
    v5 = *i;
    objc_msgSend(v3, "appendFormat:", CFSTR(" %d"), v5);
  }
  objc_msgSend(v3, "appendString:", CFSTR(", row align"));
  for (j = a2[3]; j != a2[4]; ++j)
  {
    v7 = *j;
    objc_msgSend(v3, "appendFormat:", CFSTR(" %d"), v7);
  }
  return v3;
}

EQKitLayoutTable *EQKitLayoutTable::description(EQKitLayoutTable *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  EQKitLayoutTable *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  float v9;
  EQKitLayoutTable *v10;
  EQKitLayoutTable *v11;
  unint64_t v12;
  uint64_t i;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  float v17;
  EQKitLayoutTable *v19;

  v2 = *((_QWORD *)this + 8);
  v3 = *((_QWORD *)this + 9) - v2;
  if (v3)
    v4 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(v2 + 64) - *(_QWORD *)(v2 + 56)) >> 3);
  else
    v4 = 0;
  v5 = (EQKitLayoutTable *)objc_msgSend(MEMORY[0x24BDD16A8], "stringWithFormat:", CFSTR("Table rows %lu, columns %lu %@\n"), 0xCCCCCCCCCCCCCCCDLL * (v3 >> 4), v4, EQKitLayoutTable::layoutPropertiesDescription(this, (unsigned int **)this + 2));
  v19 = v5;
  v6 = *((_QWORD *)this + 8);
  if (*((_QWORD *)this + 9) != v6)
  {
    v7 = 0;
    do
    {
      v8 = v6 + 80 * v7;
      v9 = *(double *)(v8 + 48);
      v10 = (EQKitLayoutTable *)objc_msgSend(MEMORY[0x24BDD16A8], "stringWithFormat:", CFSTR("  Row %lu height %f %@\n"), v7, v9, EQKitLayoutTable::layoutPropertiesDescription(v5, (unsigned int **)v8));
      v11 = v10;
      v12 = 0;
      for (i = 48; ; i += 280)
      {
        v14 = *((_QWORD *)this + 8);
        v15 = *((_QWORD *)this + 9) == v14
            ? 0
            : 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(v14 + 64) - *(_QWORD *)(v14 + 56)) >> 3);
        if (v12 >= v15)
          break;
        v16 = *(_QWORD *)(v14 + 80 * v7 + 56);
        v17 = *(double *)(v16 + i);
        v10 = (EQKitLayoutTable *)-[EQKitLayoutTable appendString:](v11, "appendString:", objc_msgSend(MEMORY[0x24BDD16A8], "stringWithFormat:", CFSTR("    Cell %lu width %f %@\n"), v12++, v17, EQKitLayoutTable::layoutPropertiesDescription(v10, (unsigned int **)(v16 + i - 48))));
      }
      v5 = (EQKitLayoutTable *)-[EQKitLayoutTable appendString:](v19, "appendString:", v11);
      ++v7;
      v6 = *((_QWORD *)this + 8);
    }
    while (v7 < 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 9) - v6) >> 4));
  }
  return v19;
}

EQKitLayoutTable::LayoutCell *EQKitLayoutTable::LayoutCell::LayoutCell(EQKitLayoutTable::LayoutCell *this)
{
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  EQKitLayoutRow::EQKitLayoutRow((EQKitLayoutTable::LayoutCell *)((char *)this + 64), 0);
  EQKit::ILayout::ILayout((EQKitLayoutTable::LayoutCell *)((char *)this + 224), 0);
  return this;
}

void sub_2179492D4(_Unwind_Exception *a1)
{
  EQKitLayoutTable::Properties *v1;
  EQKitLayoutRow *v2;

  EQKitLayoutRow::~EQKitLayoutRow(v2);
  EQKitLayoutTable::Properties::~Properties(v1);
  _Unwind_Resume(a1);
}

uint64_t EQKit::AttributeCollection::getValueForKey<std::map<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,std::vector<EQKitLength>,std::less<EQKitTypes::Attributes::Enum>,EQKitLength<std::pair<EQKitTypes::Attributes::Enum const>>>>(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t *v7;
  uint64_t *v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;

  v7 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)a3);
  v8 = v7;
  if ((uint64_t *)(a2 + 8) != v7)
  {
    if (v7 + 6 == (uint64_t *)a4)
      return 1;
    v9 = (char *)v7[6];
    v10 = v7[7];
LABEL_4:
    std::vector<EQKitLength>::__assign_with_size[abi:nn180100]<EQKitLength*,EQKitLength*>(a4, v9, v10, (v10 - (uint64_t)v9) >> 4);
    return 1;
  }
  result = objc_msgSend(*(id *)a3, "isAttributeDefaultInheritableFromStyle:", *(unsigned int *)(a3 + 8));
  if ((_DWORD)result)
  {
    result = objc_msgSend(*(id *)a3, "parent");
    if (result)
    {
      v12 = (void *)result;
      while (1)
      {
        v13 = objc_msgSend(v12, "layoutStyleNode");
        if (v13)
        {
          v15 = v13;
          v16 = *(_DWORD *)(a3 + 8);
          v14 = std::__tree<std::__value_type<std::pair<objc_object  {objcproto15EQKitLayoutNode}*,EQKitTypes::Attributes::Enum>,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>,std::__map_value_compare<EQKitTypes::Attributes::Enum,objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum,std::less<EQKitTypes::Attributes::Enum>,true>,std::allocator<objc_object  {objcproto15EQKitLayoutNode}*::Display::Enum>>::find<EQKitTypes::Attributes::Enum>(a2, (unint64_t *)&v15);
          if (v8 != v14)
            break;
        }
        result = objc_msgSend(v12, "parent");
        v12 = (void *)result;
        if (!result)
          return result;
      }
      if (v14 + 6 == (uint64_t *)a4)
        return 1;
      v9 = (char *)v14[6];
      v10 = v14[7];
      goto LABEL_4;
    }
  }
  return result;
}

uint64_t std::vector<EQKitLayoutTable::LayoutCell>::__push_back_slow_path<EQKitLayoutTable::LayoutCell>(uint64_t a1, const EQKitLayoutTable::LayoutCell *a2)
{
  EQKitLayoutTable::LayoutCell *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  void *v14;
  EQKitLayoutTable::LayoutCell *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v2 = *(EQKitLayoutTable::LayoutCell **)a1;
  v3 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xEA0EA0EA0EA0EALL)
    abort();
  v8 = *(_QWORD *)(a1 + 16);
  v7 = a1 + 16;
  v9 = 0xAF8AF8AF8AF8AF8BLL * ((v8 - (uint64_t)v2) >> 3);
  if (2 * v9 > v4)
    v4 = 2 * v9;
  if (v9 >= 0x75075075075075)
    v10 = 0xEA0EA0EA0EA0EALL;
  else
    v10 = v4;
  v18 = v7;
  if (v10)
    v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutTable::LayoutCell>>(v7, v10);
  else
    v11 = 0;
  v14 = v11;
  v15 = (EQKitLayoutTable::LayoutCell *)&v11[280 * v3];
  v17 = &v11[280 * v10];
  EQKitLayoutTable::LayoutCell::LayoutCell(v15, a2);
  v16 = (char *)v15 + 280;
  std::vector<EQKitLayoutTable::LayoutCell>::__swap_out_circular_buffer((EQKitLayoutTable::LayoutCell **)a1, &v14);
  v12 = *(_QWORD *)(a1 + 8);
  std::__split_buffer<EQKitLayoutTable::LayoutCell>::~__split_buffer(&v14);
  return v12;
}

void sub_2179494E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<EQKitLayoutTable::LayoutCell>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

EQKitLayoutTable::LayoutCell *EQKitLayoutTable::LayoutCell::LayoutCell(EQKitLayoutTable::LayoutCell *this, const EQKitLayoutTable::LayoutCell *a2)
{
  _QWORD *v4;

  v4 = std::vector<EQKitTypes::Crossout::Enum>::vector(this, (uint64_t)a2);
  std::vector<EQKitTypes::Crossout::Enum>::vector(v4 + 3, (uint64_t)a2 + 24);
  *((_OWORD *)this + 3) = *((_OWORD *)a2 + 3);
  EQKitLayoutRow::EQKitLayoutRow((EQKitLayoutTable::LayoutCell *)((char *)this + 64), (const EQKitLayoutTable::LayoutCell *)((char *)a2 + 64));
  EQKit::ILayout::ILayout((EQKitLayoutTable::LayoutCell *)((char *)this + 224), (const EQKitLayoutTable::LayoutCell *)((char *)a2 + 224));
  return this;
}

void sub_21794955C(_Unwind_Exception *a1)
{
  EQKitLayoutTable::Properties *v1;
  EQKitLayoutRow *v2;

  EQKitLayoutRow::~EQKitLayoutRow(v2);
  EQKitLayoutTable::Properties::~Properties(v1);
  _Unwind_Resume(a1);
}

EQKitLayoutTable::LayoutCell *std::vector<EQKitLayoutTable::LayoutCell>::__swap_out_circular_buffer(EQKitLayoutTable::LayoutCell **a1, _QWORD *a2)
{
  const EQKitLayoutTable::LayoutCell *v4;
  const EQKitLayoutTable::LayoutCell *v5;
  EQKitLayoutTable::LayoutCell *result;
  EQKitLayoutTable::LayoutCell *v7;
  EQKitLayoutTable::LayoutCell *v8;
  EQKitLayoutTable::LayoutCell *v9;

  v5 = *a1;
  v4 = a1[1];
  result = (EQKitLayoutTable::LayoutCell *)a2[1];
  while (v4 != v5)
  {
    v4 = (const EQKitLayoutTable::LayoutCell *)((char *)v4 - 280);
    result = EQKitLayoutTable::LayoutCell::LayoutCell((EQKitLayoutTable::LayoutCell *)((char *)result - 280), v4);
  }
  a2[1] = result;
  v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = (EQKitLayoutTable::LayoutCell *)a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = (EQKitLayoutTable::LayoutCell *)a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutTable::LayoutCell>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xEA0EA0EA0EA0EBLL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(280 * a2);
}

void **std::__split_buffer<EQKitLayoutTable::LayoutCell>::~__split_buffer(void **a1)
{
  std::__split_buffer<EQKitLayoutTable::LayoutCell>::clear[abi:nn180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<EQKitLayoutTable::LayoutCell>::clear[abi:nn180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 280;
    std::allocator<EQKitLayoutTable::LayoutCell>::destroy[abi:nn180100](v4, i - 280);
  }
}

uint64_t std::vector<EQKitLayoutTable::LayoutRow>::__push_back_slow_path<EQKitLayoutTable::LayoutRow const&>(uint64_t *a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  void *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  uint64_t *v15;

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0x333333333333333)
    abort();
  v6 = (uint64_t)(a1 + 2);
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v3)
    v3 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v7 = 0x333333333333333;
  else
    v7 = v3;
  v15 = a1 + 2;
  if (v7)
    v8 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutTable::LayoutRow>>((uint64_t)(a1 + 2), v7);
  else
    v8 = 0;
  v11 = v8;
  v12 = &v8[80 * v2];
  v14 = &v8[80 * v7];
  std::allocator<EQKitLayoutTable::LayoutRow>::construct[abi:nn180100]<EQKitLayoutTable::LayoutRow,EQKitLayoutTable::LayoutRow const&>(v6, v12, a2);
  v13 = v12 + 80;
  std::vector<EQKitLayoutTable::LayoutRow>::__swap_out_circular_buffer(a1, &v11);
  v9 = a1[1];
  std::__split_buffer<EQKitLayoutTable::LayoutRow>::~__split_buffer(&v11);
  return v9;
}

void sub_2179497CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<EQKitLayoutTable::LayoutRow>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

EQKitLayoutTable::LayoutCell *std::allocator<EQKitLayoutTable::LayoutRow>::construct[abi:nn180100]<EQKitLayoutTable::LayoutRow,EQKitLayoutTable::LayoutRow const&>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;

  std::vector<EQKitTypes::Crossout::Enum>::vector(a2, (uint64_t)a3);
  std::vector<EQKitTypes::Crossout::Enum>::vector(a2 + 3, (uint64_t)(a3 + 3));
  v5 = a3[6];
  a2[7] = 0;
  a2[6] = v5;
  a2[8] = 0;
  a2[9] = 0;
  return std::vector<EQKitLayoutTable::LayoutCell>::__init_with_size[abi:nn180100]<EQKitLayoutTable::LayoutCell*,EQKitLayoutTable::LayoutCell*>((EQKitLayoutTable::LayoutCell *)(a2 + 7), a3[7], a3[8], 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(a3[8] - a3[7]) >> 3));
}

void sub_21794985C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 32) = v5;
    operator delete(v5);
  }
  v6 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

EQKitLayoutTable::LayoutCell *std::vector<EQKitLayoutTable::LayoutCell>::__init_with_size[abi:nn180100]<EQKitLayoutTable::LayoutCell*,EQKitLayoutTable::LayoutCell*>(EQKitLayoutTable::LayoutCell *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  EQKitLayoutTable::LayoutCell *v6;

  if (a4)
  {
    v6 = result;
    std::vector<EQKitLayoutTable::LayoutCell>::__vallocate[abi:nn180100](result, a4);
    return std::vector<EQKitLayoutTable::LayoutCell>::__construct_at_end<EQKitLayoutTable::LayoutCell*,EQKitLayoutTable::LayoutCell*>(v6, a2, a3);
  }
  return result;
}

char *std::vector<EQKitLayoutTable::LayoutCell>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xEA0EA0EA0EA0EBLL)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutTable::LayoutCell>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[280 * v4];
  return result;
}

EQKitLayoutTable::LayoutCell *std::vector<EQKitLayoutTable::LayoutCell>::__construct_at_end<EQKitLayoutTable::LayoutCell*,EQKitLayoutTable::LayoutCell*>(EQKitLayoutTable::LayoutCell *result, uint64_t a2, uint64_t a3)
{
  EQKitLayoutTable::LayoutCell *v3;
  uint64_t v4;
  uint64_t v7;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      result = EQKitLayoutTable::LayoutCell::LayoutCell((EQKitLayoutTable::LayoutCell *)(v4 + v7), (const EQKitLayoutTable::LayoutCell *)(a2 + v7));
      v7 += 280;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *((_QWORD *)v3 + 1) = v4;
  return result;
}

void sub_21794999C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<EQKitLayoutTable::LayoutRow>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  v6 = (_QWORD *)a2[1];
  if (v4 != *a1)
  {
    do
    {
      v6 -= 10;
      v4 -= 80;
      std::allocator<EQKitLayoutTable::LayoutRow>::construct[abi:nn180100]<EQKitLayoutTable::LayoutRow,EQKitLayoutTable::LayoutRow>((uint64_t)(a1 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = (uint64_t)v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutTable::LayoutRow>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(80 * a2);
}

__n128 std::allocator<EQKitLayoutTable::LayoutRow>::construct[abi:nn180100]<EQKitLayoutTable::LayoutRow,EQKitLayoutTable::LayoutRow>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  __n128 result;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  *(_OWORD *)(a2 + 3) = *(_OWORD *)(a3 + 24);
  a2[5] = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  a2[6] = *(_QWORD *)(a3 + 48);
  a2[8] = 0;
  a2[9] = 0;
  a2[7] = 0;
  result = *(__n128 *)(a3 + 56);
  *(__n128 *)(a2 + 7) = result;
  a2[9] = *(_QWORD *)(a3 + 72);
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  return result;
}

void **std::__split_buffer<EQKitLayoutTable::LayoutRow>::~__split_buffer(void **a1)
{
  std::__split_buffer<EQKitLayoutTable::LayoutRow>::clear[abi:nn180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<EQKitLayoutTable::LayoutRow>::clear[abi:nn180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 80;
    std::allocator<EQKitLayoutTable::LayoutRow>::destroy[abi:nn180100](v4, i - 80);
  }
}

void std::vector<double>::__append(void **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  uint64_t v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 3)
  {
    if (a2)
    {
      v16 = 8 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 3);
    if (v11 >> 61)
      abort();
    v12 = v10 >> 3;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 2 > v11)
      v11 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[8 * v12];
    v19 = &v18[8 * a2];
    v20 = 8 * a2;
    v21 = v18;
    do
    {
      *(_QWORD *)v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    v22 = &v15[8 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 8)
    {
      v25 = *((_QWORD *)i - 1);
      *((_QWORD *)v18 - 1) = v25;
      v18 -= 8;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

void **std::vector<EQKitLayoutTable::LayoutCell>::__append(uint64_t a1, unint64_t a2)
{
  void **result;
  uint64_t v5;
  uint64_t v6;
  EQKitLayoutTable::LayoutCell *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  EQKitLayoutTable::LayoutCell *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void *v18[2];
  char *v19;
  char *v20;
  void **v21;

  v6 = *(_QWORD *)(a1 + 16);
  result = (void **)(a1 + 16);
  v5 = v6;
  v7 = (EQKitLayoutTable::LayoutCell *)*(result - 1);
  if (0xAF8AF8AF8AF8AF8BLL * ((v6 - (uint64_t)v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = (EQKitLayoutTable::LayoutCell *)((char *)v7 + 280 * a2);
      v14 = 280 * a2;
      do
      {
        result = (void **)EQKitLayoutTable::LayoutCell::LayoutCell(v7);
        v7 = (EQKitLayoutTable::LayoutCell *)((char *)v7 + 280);
        v14 -= 280;
      }
      while (v14);
      v7 = v13;
    }
    *(_QWORD *)(a1 + 8) = v7;
  }
  else
  {
    v8 = 0xAF8AF8AF8AF8AF8BLL * (((uint64_t)v7 - *(_QWORD *)a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xEA0EA0EA0EA0EALL)
      abort();
    v10 = 0xAF8AF8AF8AF8AF8BLL * ((v5 - *(_QWORD *)a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x75075075075075)
      v11 = 0xEA0EA0EA0EA0EALL;
    else
      v11 = v9;
    v21 = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutTable::LayoutCell>>((uint64_t)result, v11);
    else
      v12 = 0;
    v15 = &v12[280 * v8];
    v18[0] = v12;
    v18[1] = v15;
    v19 = v15;
    v20 = &v12[280 * v11];
    v16 = 280 * a2;
    v17 = &v15[280 * a2];
    do
    {
      EQKitLayoutTable::LayoutCell::LayoutCell((EQKitLayoutTable::LayoutCell *)v15);
      v15 += 280;
      v16 -= 280;
    }
    while (v16);
    v19 = v17;
    std::vector<EQKitLayoutTable::LayoutCell>::__swap_out_circular_buffer((EQKitLayoutTable::LayoutCell **)a1, v18);
    return std::__split_buffer<EQKitLayoutTable::LayoutCell>::~__split_buffer(v18);
  }
  return result;
}

void sub_217949DCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<EQKitLayoutTable::LayoutCell>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void sub_21794A05C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_21794A26C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EQKit::Font::Collection::newAttributedStringWithFont(EQKit::Font::Collection *this, NSString *a2, const __CTFont *a3)
{
  id v5;
  void *v6;
  uint64_t v7;

  if (!a2 || !a3)
    return 0;
  v5 = objc_alloc(MEMORY[0x24BDBCE70]);
  v6 = (void *)objc_msgSend(v5, "initWithObjectsAndKeys:", a3, *MEMORY[0x24BDC4C28], *MEMORY[0x24BDBD270], *MEMORY[0x24BDC4EE8], 0);
  v7 = objc_msgSend(objc_alloc(MEMORY[0x24BDD1458]), "initWithString:attributes:", a2, v6);

  return v7;
}

uint64_t EQKit::Font::Collection::newAttributedStringWithFont(EQKit::Font::Collection *this, int a2, const __CTFont *a3)
{
  unsigned int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _WORD v10[2];

  if ((a2 - 0x10000) >> 20)
  {
    v6 = 1;
    LOWORD(v5) = a2;
  }
  else
  {
    v5 = ((a2 + 67043328) >> 10) - 10240;
    v10[1] = a2 & 0x3FF | 0xDC00;
    v6 = 2;
  }
  v10[0] = v5;
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithCharacters:length:", v10, v6);
  v8 = (*(uint64_t (**)(EQKit::Font::Collection *, void *, const __CTFont *))(*(_QWORD *)this + 144))(this, v7, a3);

  return v8;
}

EQKit::Font::CompositeStretch *EQKit::Font::CompositeStretch::CompositeStretch(EQKit::Font::CompositeStretch *this, CFTypeRef cf, __int16 a3, __int16 a4, __int16 a5, __int16 a6)
{
  *((_WORD *)this + 4) = a3;
  *((_WORD *)this + 5) = a4;
  *((_WORD *)this + 6) = a5;
  *((_WORD *)this + 7) = a6;
  *(_QWORD *)this = cf;
  if (cf)
    CFRetain(cf);
  return this;
}

{
  *((_WORD *)this + 4) = a3;
  *((_WORD *)this + 5) = a4;
  *((_WORD *)this + 6) = a5;
  *((_WORD *)this + 7) = a6;
  *(_QWORD *)this = cf;
  if (cf)
    CFRetain(cf);
  return this;
}

_QWORD *EQKit::Font::CompositeStretch::CompositeStretch(_QWORD *this)
{
  *this = 0;
  this[1] = -1;
  return this;
}

{
  *this = 0;
  this[1] = -1;
  return this;
}

EQKit::Font::CompositeStretch *EQKit::Font::CompositeStretch::CompositeStretch(EQKit::Font::CompositeStretch *this, const EQKit::Font::CompositeStretch *a2)
{
  const void *v4;

  v4 = *(const void **)a2;
  *(_QWORD *)this = *(_QWORD *)a2;
  if (v4)
    CFRetain(v4);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  return this;
}

uint64_t EQKit::Font::CompositeStretch::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;

  if (a1 != a2)
  {
    v4 = *(const void **)a1;
    if (*(_QWORD *)a1)
      CFRelease(v4);
    v5 = *(const void **)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    if (v5)
      CFRetain(v5);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  }
  return a1;
}

void EQKit::Font::CompositeStretch::~CompositeStretch(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

void EQKit::Font::CompositeStretch::defineCompositeStretch(const __CFString *this@<X0>, const __CFString *a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, _QWORD *a6@<X8>)
{
  int v9;
  UniChar *v12;
  uint64_t v13;
  UniChar *v14;
  UniChar *v15;
  UniChar *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  UniChar *v22;
  char *v23;
  UniChar v24;
  UniChar *v25;
  UniChar *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  UniChar *v32;
  char *v33;
  UniChar v34;
  UniChar *v35;
  UniChar *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  UniChar *v42;
  char *v43;
  UniChar v44;
  const __CTFontDescriptor *v45;
  const __CTFont *v46;
  uint64_t v47;
  CGGlyph *v48;
  CFIndex v49;
  CGGlyph v50;
  uint64_t v51;
  __int16 v52;
  __int16 v53;
  __int16 v54;
  const __CFString *v55;
  CGGlyph v56;
  __int16 v57;
  __int16 v58;
  __int16 v59;
  UniChar *v60;
  UniChar *v61;
  _QWORD v62[2];

  v9 = (int)a2;
  v62[1] = *MEMORY[0x24BDAC8D0];
  *a6 = 0;
  a6[1] = -1;
  v60 = 0;
  v61 = 0;
  v62[0] = 0;
  if ((_DWORD)a2)
  {
    v12 = (UniChar *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>((uint64_t)v62, 1);
    *v12 = v9;
    v14 = v12 + 1;
    v60 = v12;
    v62[0] = &v12[v13];
    v61 = v12 + 1;
    if (!a3)
      goto LABEL_3;
  }
  else
  {
    v14 = 0;
    if (!a3)
    {
LABEL_3:
      if (!a4)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  if ((unint64_t)v14 >= v62[0])
  {
    v16 = v60;
    v17 = (char *)v14 - (char *)v60;
    if ((char *)v14 - (char *)v60 <= -3)
      abort();
    v18 = v17 >> 1;
    if (v62[0] - (_QWORD)v60 <= (unint64_t)((v17 >> 1) + 1))
      v19 = v18 + 1;
    else
      v19 = v62[0] - (_QWORD)v60;
    if (v62[0] - (_QWORD)v60 >= 0x7FFFFFFFFFFFFFFEuLL)
      v20 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    if (v20)
    {
      v21 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>((uint64_t)v62, v20);
      v16 = v60;
      v14 = v61;
    }
    else
    {
      v21 = 0;
    }
    v22 = (UniChar *)&v21[2 * v18];
    v23 = &v21[2 * v20];
    *v22 = a3;
    v15 = v22 + 1;
    while (v14 != v16)
    {
      v24 = *--v14;
      *--v22 = v24;
    }
    v60 = v22;
    v61 = v15;
    v62[0] = v23;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v14 = a3;
    v15 = v14 + 1;
  }
  v61 = v15;
  v14 = v15;
  if (!a4)
  {
LABEL_4:
    if (!a5)
      goto LABEL_61;
    goto LABEL_43;
  }
LABEL_25:
  if ((unint64_t)v14 >= v62[0])
  {
    v26 = v60;
    v27 = (char *)v14 - (char *)v60;
    if ((char *)v14 - (char *)v60 <= -3)
      abort();
    v28 = v27 >> 1;
    if (v62[0] - (_QWORD)v60 <= (unint64_t)((v27 >> 1) + 1))
      v29 = v28 + 1;
    else
      v29 = v62[0] - (_QWORD)v60;
    if (v62[0] - (_QWORD)v60 >= 0x7FFFFFFFFFFFFFFEuLL)
      v30 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v30 = v29;
    if (v30)
    {
      v31 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>((uint64_t)v62, v30);
      v26 = v60;
      v14 = v61;
    }
    else
    {
      v31 = 0;
    }
    v32 = (UniChar *)&v31[2 * v28];
    v33 = &v31[2 * v30];
    *v32 = a4;
    v25 = v32 + 1;
    while (v14 != v26)
    {
      v34 = *--v14;
      *--v32 = v34;
    }
    v60 = v32;
    v61 = v25;
    v62[0] = v33;
    if (v26)
      operator delete(v26);
  }
  else
  {
    *v14 = a4;
    v25 = v14 + 1;
  }
  v61 = v25;
  v14 = v25;
  if (a5)
  {
LABEL_43:
    if ((unint64_t)v14 >= v62[0])
    {
      v36 = v60;
      v37 = (char *)v14 - (char *)v60;
      if ((char *)v14 - (char *)v60 <= -3)
        abort();
      v38 = v37 >> 1;
      if (v62[0] - (_QWORD)v60 <= (unint64_t)((v37 >> 1) + 1))
        v39 = v38 + 1;
      else
        v39 = v62[0] - (_QWORD)v60;
      if (v62[0] - (_QWORD)v60 >= 0x7FFFFFFFFFFFFFFEuLL)
        v40 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v40 = v39;
      if (v40)
      {
        v41 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>((uint64_t)v62, v40);
        v36 = v60;
        v14 = v61;
      }
      else
      {
        v41 = 0;
      }
      v42 = (UniChar *)&v41[2 * v38];
      v43 = &v41[2 * v40];
      *v42 = a5;
      v35 = v42 + 1;
      while (v14 != v36)
      {
        v44 = *--v14;
        *--v42 = v44;
      }
      v60 = v42;
      v61 = v35;
      v62[0] = v43;
      if (v36)
        operator delete(v36);
    }
    else
    {
      *v14 = a5;
      v35 = v14 + 1;
    }
    v61 = v35;
    v14 = v35;
  }
LABEL_61:
  if (!this)
    goto LABEL_77;
  if (v14 == v60)
    goto LABEL_77;
  v45 = CTFontDescriptorCreateWithNameAndSize(this, 12.0);
  v46 = CTFontCreateWithFontDescriptor(v45, 12.0, 0);
  CFRelease(v45);
  if (!v46)
    goto LABEL_77;
  MEMORY[0x24BDAC7A8]();
  v48 = (CGGlyph *)((char *)&v55 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (CTFontGetGlyphsForCharacters(v46, v60, v48, v49))
  {
    if (v9)
    {
      v50 = *v48;
      v51 = 1;
      if (a3)
        goto LABEL_67;
    }
    else
    {
      v51 = 0;
      v50 = -1;
      if (a3)
      {
LABEL_67:
        v52 = v48[v51++];
        if (a4)
          goto LABEL_68;
        goto LABEL_72;
      }
    }
    v52 = -1;
    if (a4)
    {
LABEL_68:
      v53 = v48[v51++];
      if (a5)
      {
LABEL_69:
        v54 = v48[v51];
        goto LABEL_74;
      }
LABEL_73:
      v54 = -1;
LABEL_74:
      v56 = v50;
      v57 = v52;
      v58 = v53;
      v59 = v54;
      v55 = this;
      CFRetain(this);
      EQKit::Font::CompositeStretch::operator=((uint64_t)a6, (uint64_t)&v55);
      if (v55)
        CFRelease(v55);
      goto LABEL_76;
    }
LABEL_72:
    v53 = -1;
    if (a5)
      goto LABEL_69;
    goto LABEL_73;
  }
LABEL_76:
  CFRelease(v46);
LABEL_77:
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
}

void sub_21794AB60(_Unwind_Exception *exception_object)
{
  CFTypeRef *v1;
  uint64_t v2;
  const void *v4;
  void *v5;

  v4 = *(const void **)(v2 - 128);
  if (v4)
    CFRelease(v4);
  v5 = *(void **)(v2 - 112);
  if (v5)
  {
    *(_QWORD *)(v2 - 104) = v5;
    operator delete(v5);
  }
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(2 * a2);
}

EQKit::Font::Manager *EQKit::Font::Manager::Manager(EQKit::Font::Manager *this, NSDictionary *a2, NSDictionary *a3)
{
  const EQKitCacheLRUCounter *v6;
  uint64_t v7;
  NSDictionary *v8;
  EQKit::Font::STIXCollection *v9;

  *(_QWORD *)this = &off_24D828F98;
  *((_QWORD *)this + 2) = 0;
  v6 = (const EQKitCacheLRUCounter *)((char *)this + 16);
  v7 = objc_opt_class();
  v8 = (NSDictionary *)EQKitUtilDynamicCast(v7, (uint64_t)-[NSDictionary objectForKey:](a2, "objectForKey:", CFSTR("STIX")));
  v9 = (EQKit::Font::STIXCollection *)operator new();
  EQKit::Font::STIXCollection::STIXCollection(v9, v8, a3, v6);
  *((_QWORD *)this + 1) = (char *)v9 + *(_QWORD *)(*(_QWORD *)v9 - 216);
  return this;
}

void sub_21794AC9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A153B8](v1, 0x10A1C40A7C5945DLL);
  _Unwind_Resume(a1);
}

void EQKit::Font::Manager::~Manager(EQKit::Font::Manager *this)
{
  uint64_t v1;

  *(_QWORD *)this = &off_24D828F98;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

{
  uint64_t v1;

  *(_QWORD *)this = &off_24D828F98;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

{
  uint64_t v1;

  *(_QWORD *)this = &off_24D828F98;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x219A153B8);
}

uint64_t EQKit::Font::Manager::defaultCollection(EQKit::Font::Manager *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t EQKit::Font::Manager::beginLayout(uint64_t this)
{
  ++*(_QWORD *)(this + 16);
  return this;
}

uint64_t EQKit::Font::Manager::endLayout(EQKit::Font::Manager *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
}

EQKit::Font::STIXCollection *EQKit::Font::STIXCollection::STIXCollection(EQKit::Font::STIXCollection *this, NSDictionary *a2, const EQKit::Environment::Version *a3, NSDictionary *a4, const EQKitCacheLRUCounter *a5)
{
  Class isa;
  uint64_t v10;
  EQKit::Font::CharacterProperty::Map *v11;
  const EQKit::Environment::Version *v12;
  uint64_t v13;
  EQKit::Font::Metric::Map *v14;
  NSDictionary *v15;
  uint64_t v16;
  EQKit::Font::CharacterMapping *v17;
  NSDictionary *v18;
  uint64_t v19;
  EQKit::Font::CharacterMapping *v20;
  NSDictionary *v21;
  uint64_t v22;
  EQKit::Font::CharacterArray *v23;
  NSArray *v24;
  uint64_t v25;
  EQKit::Font::CharacterArray *v26;
  NSArray *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  char *v40;
  unsigned int v41;
  const void *v42[2];
  _QWORD v43[5];
  _QWORD v44[5];
  _QWORD v45[5];
  _DWORD *v46[2];

  isa = a2->super.isa;
  *(NSDictionary *)this = (NSDictionary)a2->super.isa;
  *(NSDictionary *)((char *)this + *((_QWORD *)isa - 27)) = a2[1];
  v40 = (char *)this + 168;
  EQKit::Font::STIXCollection::SizeVariant::SizeVariant((EQKit::Font::STIXCollection *)((char *)this + 168), a5);
  EQKit::Font::STIXCollection::SizeVariant::SizeVariant((EQKit::Font::STIXCollection *)((char *)this + 224), a5);
  *((_QWORD *)this + 35) = (char *)this + 288;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 38) = (char *)this + 312;
  v10 = objc_opt_class();
  v11 = (EQKit::Font::CharacterProperty::Map *)EQKitUtilDynamicCast(v10, -[EQKit::Environment::Version objectForKey:](a3, "objectForKey:", CFSTR("charProps"), v40));
  *((_QWORD *)this + 41) = EQKit::Font::CharacterProperty::Map::newMapFromDictionary(v11, a4, v12);
  v13 = objc_opt_class();
  v14 = (EQKit::Font::Metric::Map *)EQKitUtilDynamicCast(v13, -[EQKit::Environment::Version objectForKey:](a3, "objectForKey:", CFSTR("metrics")));
  *((_QWORD *)this + 42) = EQKit::Font::Metric::Map::newMapFromDictionary(v14, v15);
  v16 = objc_opt_class();
  v17 = (EQKit::Font::CharacterMapping *)EQKitUtilDynamicCast(v16, -[EQKit::Environment::Version objectForKey:](a3, "objectForKey:", CFSTR("charMap")));
  *((_QWORD *)this + 43) = EQKit::Font::CharacterMapping::newMapFromDictionary(v17, v18);
  v19 = objc_opt_class();
  v20 = (EQKit::Font::CharacterMapping *)EQKitUtilDynamicCast(v19, -[EQKit::Environment::Version objectForKey:](a3, "objectForKey:", CFSTR("stretchCharMap")));
  *((_QWORD *)this + 44) = EQKit::Font::CharacterMapping::newMapFromDictionary(v20, v21);
  v22 = objc_opt_class();
  v23 = (EQKit::Font::CharacterArray *)EQKitUtilDynamicCast(v22, -[EQKit::Environment::Version objectForKey:](a3, "objectForKey:", CFSTR("specialVariantsCharacterArray")));
  *((_QWORD *)this + 45) = EQKit::Font::CharacterArray::newArrayFromArray(v23, v24);
  v25 = objc_opt_class();
  v26 = (EQKit::Font::CharacterArray *)EQKitUtilDynamicCast(v25, -[EQKit::Environment::Version objectForKey:](a3, "objectForKey:", CFSTR("largeScriptChars")));
  *((_QWORD *)this + 46) = EQKit::Font::CharacterArray::newArrayFromArray(v26, v27);
  bzero((char *)this + 8, 0x20uLL);
  bzero((char *)this + 56, 0x20uLL);
  bzero((char *)this + 88, 0x50uLL);
  bzero((char *)this + 40, 0x10uLL);
  EQKit::Font::STIXCollection::setupRequiredFontInfos(this);
  v28 = operator new();
  v29 = MEMORY[0x24BDAC760];
  v45[0] = MEMORY[0x24BDAC760];
  v45[1] = 3221225472;
  v45[2] = ___ZN5EQKit4Font14STIXCollectionC2EP12NSDictionaryRKNS_11Environment7VersionERK20EQKitCacheLRUCounter_block_invoke;
  v45[3] = &__block_descriptor_40_e36_B24__0r__Key_____CFString_dSId_8_v16l;
  v45[4] = this;
  EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::EQKitCache(v28, (uint64_t)a5, v45);
  *((_QWORD *)this + 49) = v28;
  v30 = operator new();
  v44[0] = v29;
  v44[1] = 3221225472;
  v44[2] = ___ZN5EQKit4Font14STIXCollectionC2EP12NSDictionaryRKNS_11Environment7VersionERK20EQKitCacheLRUCounter_block_invoke_2;
  v44[3] = &__block_descriptor_40_e36_B24__0r__Key_____CFString_dSId_8_i16l;
  v44[4] = this;
  EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::EQKitCache(v30, (uint64_t)a5, v44);
  *((_QWORD *)this + 48) = v30;
  v31 = operator new();
  v43[0] = v29;
  v43[1] = 3221225472;
  v43[2] = ___ZN5EQKit4Font14STIXCollectionC2EP12NSDictionaryRKNS_11Environment7VersionERK20EQKitCacheLRUCounter_block_invoke_3;
  v43[3] = &__block_descriptor_40_e53_B24__0r__SlantKey_____CFString_dSI_8__SlantInfo_dd_16l;
  v43[4] = this;
  EQKitCache<EQKit::Font::SlantKey,EQKit::Font::SlantInfo,EQKit::Font::SlantInfo>::EQKitCache(v31, (uint64_t)a5, v43);
  *((_QWORD *)this + 50) = v31;
  EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::setThreshold(*((_QWORD *)this + 49), 0xC8uLL, 0x96uLL);
  EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::setThreshold(*((_QWORD *)this + 48), 0x7D0uLL, 0x5DCuLL);
  EQKit::Font::CompositeStretch::defineCompositeStretch(CFSTR("STIXSizeOneSym-Regular"), (const __CFString *)0x23A7, 9129, 9128, 9130, v42);
  v41 = 123;
  v46[0] = &v41;
  v32 = std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)this + 280, &v41, (uint64_t)&std::piecewise_construct, v46);
  EQKit::Font::CompositeStretch::operator=((uint64_t)(v32 + 5), (uint64_t)v42);
  EQKit::Font::CompositeStretch::~CompositeStretch(v42);
  EQKit::Font::CompositeStretch::defineCompositeStretch(CFSTR("STIXSizeOneSym-Regular"), (const __CFString *)0x23AB, 9133, 9132, 9130, v42);
  v41 = 125;
  v46[0] = &v41;
  v33 = std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)this + 280, &v41, (uint64_t)&std::piecewise_construct, v46);
  EQKit::Font::CompositeStretch::operator=((uint64_t)(v33 + 5), (uint64_t)v42);
  EQKit::Font::CompositeStretch::~CompositeStretch(v42);
  EQKit::Font::CompositeStretch::defineCompositeStretch(CFSTR("STIXSizeOneSym-Regular"), (const __CFString *)0x239B, 9117, 0, 9116, v42);
  v41 = 40;
  v46[0] = &v41;
  v34 = std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)this + 280, &v41, (uint64_t)&std::piecewise_construct, v46);
  EQKit::Font::CompositeStretch::operator=((uint64_t)(v34 + 5), (uint64_t)v42);
  EQKit::Font::CompositeStretch::~CompositeStretch(v42);
  EQKit::Font::CompositeStretch::defineCompositeStretch(CFSTR("STIXSizeOneSym-Regular"), (const __CFString *)0x239E, 9120, 0, 9119, v42);
  v41 = 41;
  v46[0] = &v41;
  v35 = std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)this + 280, &v41, (uint64_t)&std::piecewise_construct, v46);
  EQKit::Font::CompositeStretch::operator=((uint64_t)(v35 + 5), (uint64_t)v42);
  EQKit::Font::CompositeStretch::~CompositeStretch(v42);
  EQKit::Font::CompositeStretch::defineCompositeStretch(CFSTR("STIXSizeOneSym-Regular"), (const __CFString *)0x23A1, 9123, 0, 9122, v42);
  v41 = 91;
  v46[0] = &v41;
  v36 = std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)this + 280, &v41, (uint64_t)&std::piecewise_construct, v46);
  EQKit::Font::CompositeStretch::operator=((uint64_t)(v36 + 5), (uint64_t)v42);
  EQKit::Font::CompositeStretch::~CompositeStretch(v42);
  EQKit::Font::CompositeStretch::defineCompositeStretch(CFSTR("STIXSizeOneSym-Regular"), (const __CFString *)0x23A4, 9126, 0, 9125, v42);
  v41 = 93;
  v46[0] = &v41;
  v37 = std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)this + 280, &v41, (uint64_t)&std::piecewise_construct, v46);
  EQKit::Font::CompositeStretch::operator=((uint64_t)(v37 + 5), (uint64_t)v42);
  EQKit::Font::CompositeStretch::~CompositeStretch(v42);
  EQKit::Font::CompositeStretch::defineCompositeStretch(CFSTR("STIXSizeOneSym-Regular"), 0, 9143, 0, 0, v42);
  v46[0] = &EQKit::Unicode::SQUARE_ROOT;
  v38 = std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)this + 280, &EQKit::Unicode::SQUARE_ROOT, (uint64_t)&std::piecewise_construct, v46);
  EQKit::Font::CompositeStretch::operator=((uint64_t)(v38 + 5), (uint64_t)v42);
  EQKit::Font::CompositeStretch::~CompositeStretch(v42);
  return this;
}

void sub_21794B378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, EQKit::Font::STIXCollection::SizeVariant *a9, uint64_t a10, char a11)
{
  uint64_t v11;
  EQKit::Font::STIXCollection::SizeVariant *v12;
  uint64_t v13;
  const void ***v14;
  const void ***v15;

  std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::destroy(v11 + 304, *v15);
  std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::destroy(v13, *v14);
  EQKit::Font::STIXCollection::SizeVariant::~SizeVariant(v12);
  EQKit::Font::STIXCollection::SizeVariant::~SizeVariant(a9);
  _Unwind_Resume(a1);
}

EQKit::Font::STIXCollection::FontInfo *EQKit::Font::STIXCollection::setupRequiredFontInfos(EQKit::Font::STIXCollection *this)
{
  NSObject *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFArray *v8;
  dispatch_time_t v9;
  _QWORD progressBlock[8];
  uint8_t v13[8];
  uint8_t *v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  CTFontDescriptorRef v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t buf[4];
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v1 = dispatch_group_create();
  v2 = (void *)objc_opt_new();
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138543362;
    v25 = &unk_24D8FA230;
    _os_log_impl(&dword_2178E2000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "#STIX downloading fonts: %{public}@", buf, 0xCu);
  }
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v3 = objc_msgSend(&unk_24D8FA230, "countByEnumeratingWithState:objects:count:", &v17, buf, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v18;
    v5 = *MEMORY[0x24BDC4D70];
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v18 != v4)
          objc_enumerationMutation(&unk_24D8FA230);
        v7 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * v6);
        v22 = v5;
        v23 = v7;
        v21 = CTFontDescriptorCreateWithAttributes((CFDictionaryRef)objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v23, &v22, 1));
        v8 = (const __CFArray *)objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v21, 1);
        dispatch_group_enter(v1);
        *(_QWORD *)v13 = 0;
        v14 = v13;
        v15 = 0x2020000000;
        v16 = 0;
        progressBlock[0] = MEMORY[0x24BDAC760];
        progressBlock[1] = 3221225472;
        progressBlock[2] = ___ZL22_ensureFontsDownloadedP7NSArrayIP8NSStringE_block_invoke;
        progressBlock[3] = &unk_24D8291E0;
        progressBlock[4] = v7;
        progressBlock[5] = v2;
        progressBlock[6] = v1;
        progressBlock[7] = v13;
        CTFontDescriptorMatchFontDescriptorsWithProgressHandler(v8, 0, progressBlock);
        _Block_object_dispose(v13, 8);
        ++v6;
      }
      while (v3 != v6);
      v3 = objc_msgSend(&unk_24D8FA230, "countByEnumeratingWithState:objects:count:", &v17, buf, 16);
    }
    while (v3);
  }
  v9 = dispatch_time(0, 60000000000);
  if (dispatch_group_wait(v1, v9))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      EQKit::Font::STIXCollection::setupRequiredFontInfos();
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_2178E2000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "#STIX font Download completed.", v13, 2u);
    }
    if (objc_msgSend(v2, "count") && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      EQKit::Font::STIXCollection::setupRequiredFontInfos((uint64_t)v2);
  }
  *((_BYTE *)this + 376) = 1;
  _fontInfoWithName((EQKit::Font::STIXCollection *)((char *)this + 16), CFSTR("STIXGeneral-Italic"));
  _fontInfoWithName((EQKit::Font::STIXCollection *)((char *)this + 24), CFSTR("STIXGeneral-Bold"));
  _fontInfoWithName((EQKit::Font::STIXCollection *)((char *)this + 32), CFSTR("STIXGeneral-BoldItalic"));
  _fontInfoWithName((EQKit::Font::STIXCollection *)((char *)this + 8), CFSTR("STIXGeneral-Regular"));
  _fontInfoWithName((EQKit::Font::STIXCollection *)((char *)this + 48), CFSTR("STIXVariants-Bold"));
  _fontInfoWithName((EQKit::Font::STIXCollection *)((char *)this + 40), CFSTR("STIXVariants-Regular"));
  _fontInfoWithName((EQKit::Font::STIXCollection *)((char *)this + 136), CFSTR("STIXIntegralsUp-Regular"));
  _fontInfoWithName((EQKit::Font::STIXCollection *)((char *)this + 144), CFSTR("STIXIntegralsUp-Bold"));
  _fontInfoWithName((EQKit::Font::STIXCollection *)((char *)this + 120), CFSTR("STIXIntegralsUpD-Regular"));
  _fontInfoWithName((EQKit::Font::STIXCollection *)((char *)this + 128), CFSTR("STIXIntegralsUpD-Bold"));
  _fontInfoWithName((EQKit::Font::STIXCollection *)((char *)this + 152), CFSTR("STIXIntegralsUpSm-Regular"));
  _fontInfoWithName((EQKit::Font::STIXCollection *)((char *)this + 160), CFSTR("STIXIntegralsUpSm-Bold"));
  _fontInfoWithName((EQKit::Font::STIXCollection *)((char *)this + 88), CFSTR("STIXIntegralsD-Regular"));
  _fontInfoWithName((EQKit::Font::STIXCollection *)((char *)this + 96), CFSTR("STIXIntegralsD-Bold"));
  _fontInfoWithName((EQKit::Font::STIXCollection *)((char *)this + 104), CFSTR("STIXIntegralsSm-Regular"));
  _fontInfoWithName((EQKit::Font::STIXCollection *)((char *)this + 112), CFSTR("STIXIntegralsSm-Bold"));
  _fontInfoWithName((EQKit::Font::STIXCollection *)((char *)this + 64), CFSTR("STIXNonUnicode-Italic"));
  _fontInfoWithName((EQKit::Font::STIXCollection *)((char *)this + 72), CFSTR("STIXNonUnicode-Bold"));
  _fontInfoWithName((EQKit::Font::STIXCollection *)((char *)this + 80), CFSTR("STIXNonUnicode-BoldItalic"));
  _fontInfoWithName((EQKit::Font::STIXCollection *)((char *)this + 56), CFSTR("STIXNonUnicode-Regular"));
  _fontInfoWithName((EQKit::Font::STIXCollection *)((char *)this + 168), CFSTR("STIXGeneral-Regular"));
  _fontInfoWithName((EQKit::Font::STIXCollection *)((char *)this + 176), CFSTR("STIXSizeOneSym-Regular"));
  _fontInfoWithName((EQKit::Font::STIXCollection *)((char *)this + 184), CFSTR("STIXSizeTwoSym-Regular"));
  _fontInfoWithName((EQKit::Font::STIXCollection *)((char *)this + 192), CFSTR("STIXSizeThreeSym-Regular"));
  _fontInfoWithName((EQKit::Font::STIXCollection *)((char *)this + 200), CFSTR("STIXSizeFourSym-Regular"));
  _fontInfoWithName((EQKit::Font::STIXCollection *)((char *)this + 208), CFSTR("STIXSizeFiveSym-Regular"));
  _fontInfoWithName((EQKit::Font::STIXCollection *)((char *)this + 224), CFSTR("STIXGeneral-Bold"));
  _fontInfoWithName((EQKit::Font::STIXCollection *)((char *)this + 232), CFSTR("STIXSizeOneSym-Bold"));
  _fontInfoWithName((EQKit::Font::STIXCollection *)((char *)this + 240), CFSTR("STIXSizeTwoSym-Bold"));
  _fontInfoWithName((EQKit::Font::STIXCollection *)((char *)this + 248), CFSTR("STIXSizeThreeSym-Bold"));
  return _fontInfoWithName((EQKit::Font::STIXCollection *)((char *)this + 256), CFSTR("STIXSizeFourSym-Bold"));
}

void sub_21794B978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL ___ZN5EQKit4Font14STIXCollectionC2EP12NSDictionaryRKNS_11Environment7VersionERK20EQKitCacheLRUCounter_block_invoke(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  const EQKit::StemStretch::Config::Entry *v5;
  unsigned int v6;
  char *v7;
  _QWORD *v8;
  EQKit::StemStretch::Glyph *v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::string v15;
  int *v16;
  std::string __p;

  v5 = *(const EQKit::StemStretch::Config::Entry **)(*(_QWORD *)(a1 + 32) + 328);
  if (v5)
  {
    v6 = *(_DWORD *)(a2 + 20);
    if (*(_QWORD *)a2)
      v7 = (char *)objc_msgSend(*(id *)a2, "UTF8String");
    else
      v7 = "";
    std::string::basic_string[abi:nn180100]<0>(&v15, v7);
    v16 = (int *)(v6 | 0xD00000000);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    else
      __p = v15;
    v8 = std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::find<EQKit::Font::CharacterProperty::Map::Key>((uint64_t)v5 + 48, (uint64_t)&v16);
    if ((_QWORD *)((char *)v5 + 56) == v8)
      v5 = 0;
    else
      v5 = (const EQKit::StemStretch::Config::Entry *)(v8 + 8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  v9 = (EQKit::StemStretch::Glyph *)operator new();
  EQKit::StemStretch::Glyph::Glyph(v9, (const EQKit::StemStretch::Key *)a2, v5);
  std::shared_ptr<EQKit::StemStretch::Glyph>::shared_ptr[abi:nn180100]<EQKit::StemStretch::Glyph,void>(&v16, (uint64_t)v9);
  v10 = *v16;
  if (*v16)
    std::shared_ptr<EQKit::StemStretch::Glyph>::operator=[abi:nn180100](a3, (uint64_t *)&v16);
  v11 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    v12 = (unint64_t *)(__p.__r_.__value_.__r.__words[0] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v10 != 0;
}

void sub_21794BAF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::shared_ptr<EQKit::StemStretch::Glyph>::operator=[abi:nn180100](_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

uint64_t ___ZN5EQKit4Font14STIXCollectionC2EP12NSDictionaryRKNS_11Environment7VersionERK20EQKitCacheLRUCounter_block_invoke_2(uint64_t a1, const EQKit::StemStretch::Key *a2, _DWORD *a3)
{
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  int *v9;
  std::__shared_weak_count *v10;

  EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::lookup(*(uint64_t ***)(*(_QWORD *)(a1 + 32) + 392), a2, &v9);
  v4 = (int)v9;
  if (v9)
    v4 = *v9;
  *a3 = v4;
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return 1;
}

void EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::lookup(uint64_t **a1@<X0>, const EQKit::StemStretch::Key *a2@<X1>, _QWORD *a3@<X8>)
{
  pthread_rwlock_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  const EQKit::StemStretch::Key *v18;

  v6 = (pthread_rwlock_t *)(a1 + 9);
  *a3 = 0;
  a3[1] = 0;
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 9));
  v7 = std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::find<EQKit::StemStretch::Key>(a1 + 1, (uint64_t)a2);
  v8 = v7;
  if (v7)
  {
    v7[8] = **a1;
    std::shared_ptr<EQKit::StemStretch::Glyph>::operator=[abi:nn180100](a3, v7 + 6);
  }
  pthread_rwlock_unlock(v6);
  if (!v8)
  {
    v16 = 0;
    v17 = 0;
    v15 = 0;
    if (((unsigned int (*)(void))a1[34][2])())
    {
      pthread_rwlock_wrlock(v6);
      v9 = std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::find<EQKit::StemStretch::Key>(a1 + 1, (uint64_t)a2);
      if (v9)
      {
        v10 = v9 + 6;
        v9[8] = **a1;
      }
      else
      {
        v17 = **a1;
        v18 = a2;
        v11 = std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__emplace_unique_key_args<EQKit::StemStretch::Key,std::piecewise_construct_t const&,std::tuple<EQKit::StemStretch::Key const&>,std::tuple<>>((uint64_t)(a1 + 1), (uint64_t)a2, (uint64_t)&std::piecewise_construct, &v18);
        v10 = &v15;
        std::shared_ptr<EQKit::StemStretch::Glyph>::operator=[abi:nn180100](v11 + 6, &v15);
        v11[8] = v17;
        if (a1[4] > a1[7])
        {
          *((_BYTE *)a1 + 48) = 1;
          v10 = &v15;
        }
      }
      std::shared_ptr<EQKit::StemStretch::Glyph>::operator=[abi:nn180100](a3, v10);
      pthread_rwlock_unlock(v6);
    }
    v12 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
}

void sub_21794BDCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100](v2);
  _Unwind_Resume(a1);
}

uint64_t ___ZN5EQKit4Font14STIXCollectionC2EP12NSDictionaryRKNS_11Environment7VersionERK20EQKitCacheLRUCounter_block_invoke_3(int a1, EQKit::Font::SlantKey *this, double *a3)
{
  __CTFont *v5;
  __CTFont *v6;
  _BOOL4 v7;
  double v8;
  double v9;
  unsigned __int16 v11;
  double v12;
  double v13;
  __CTFont *v14;

  v5 = (__CTFont *)EQKit::Font::SlantKey::newFont((CGFloat *)this);
  v14 = v5;
  if (v5)
  {
    v6 = v5;
    v12 = 0.0;
    v13 = 0.0;
    v11 = *((_WORD *)this + 8);
    v7 = EQKit::Font::STIXCollection::analyzeGlyphForSlantCorrection(v5, &v11, &v14, &v13, &v12);
    v9 = v12;
    v8 = v13;
    if (!v7)
    {
      v9 = 0.0;
      v8 = 0.0;
    }
    *a3 = v8;
    a3[1] = v9;
    CFRelease(v6);
  }
  return 1;
}

const __CFString *EQKit::Font::SlantKey::newFont(CGFloat *this)
{
  const __CFString *result;
  const __CTFontDescriptor *v3;
  CTFontRef v4;

  result = *(const __CFString **)this;
  if (result)
  {
    v3 = CTFontDescriptorCreateWithNameAndSize(result, this[1]);
    v4 = CTFontCreateWithFontDescriptor(v3, this[1], 0);
    CFRelease(v3);
    return (const __CFString *)v4;
  }
  return result;
}

BOOL EQKit::Font::STIXCollection::analyzeGlyphForSlantCorrection(EQKit::Font::STIXCollection *this, const unsigned __int16 *a2, const __CTFont **a3, double *a4, double *a5)
{
  EQKitPath *v8;
  CGFloat SlantAngle;
  double v10;
  _BOOL8 v11;
  double *v12;
  double *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double *v20;
  double v21;
  double v22;
  BOOL v23;
  BOOL v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;

  if (!*a3)
    return 0;
  v8 = EQKitPath::newPathFromGlyphWithFont((EQKitPath *)*a2, *a3, (const __CTFont *)a3);
  if (!*a3)
  {
    v10 = 0.0;
    if (v8)
      goto LABEL_4;
    return 0;
  }
  SlantAngle = CTFontGetSlantAngle(*a3);
  v10 = fabs(tan(SlantAngle * 3.14159265 / 180.0));
  if (!v8)
    return 0;
LABEL_4:
  v11 = *(_QWORD *)v8 != 0;
  if (*(_QWORD *)v8)
  {
    if (v10 == 0.0)
    {
      *a4 = 0.0;
      *a5 = 0.0;
    }
    else
    {
      EQKitPath::extractPath(v8);
      v12 = (double *)*((_QWORD *)v8 + 1);
      v13 = (double *)*((_QWORD *)v8 + 2);
      v14 = 0.0;
      if (v12 == v13)
      {
        v15 = 2.22507386e-308;
        v16 = 1.79769313e308;
        v17 = 1.79769313e308;
        v19 = 2.22507386e-308;
        v25 = 1.79769313e308;
      }
      else
      {
        v15 = 2.22507386e-308;
        v16 = 1.79769313e308;
        v17 = 1.79769313e308;
        v18 = 0.0;
        v19 = 2.22507386e-308;
        v20 = (double *)*((_QWORD *)v8 + 1);
        do
        {
          v22 = *v20;
          v21 = v20[1];
          if (v21 > v19)
            v19 = v20[1];
          if (v21 < v16)
            v16 = v20[1];
          if (v22 < v17 || (v22 == v17 ? (v23 = v21 < v18) : (v23 = 0), v23))
          {
            v18 = v20[1];
            v17 = *v20;
          }
          if (v22 > v15 || (v22 == v15 ? (v24 = v21 < v14) : (v24 = 0), v24))
          {
            v14 = v20[1];
            v15 = *v20;
          }
          v20 += 2;
        }
        while (v20 != v13);
        if (v12 == v13)
        {
          v25 = 1.79769313e308;
        }
        else
        {
          v25 = 1.79769313e308;
          do
          {
            v26 = v12[1];
            if (v26 <= v18)
            {
              v27 = *v12 + (v26 - v16) * v10;
              if (v27 < v25)
                v25 = v27;
            }
            v12 += 2;
          }
          while (v12 != v13);
        }
      }
      v28 = v15 + (v14 - v16) * v10;
      v29 = (v17 + v15) * 0.5;
      *a5 = (v28 + v25) * 0.5 - v29;
      *a4 = (v28 - (v19 - v16) * v10 + v25 - (v19 - v16) * v10) * 0.5 - v29;
    }
  }
  EQKitPath::~EQKitPath(v8);
  MEMORY[0x219A153B8]();
  return v11;
}

uint64_t EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::setThreshold(uint64_t a1, unint64_t a2, unint64_t a3)
{
  pthread_rwlock_t *v6;
  unint64_t v7;

  v6 = (pthread_rwlock_t *)(a1 + 72);
  pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 72));
  if (a2 >= a3)
    v7 = a3;
  else
    v7 = a2;
  *(_QWORD *)(a1 + 56) = a2;
  *(_QWORD *)(a1 + 64) = v7;
  if (*(_QWORD *)(a1 + 32) > a2)
    *(_BYTE *)(a1 + 48) = 1;
  pthread_rwlock_unlock(v6);
  return EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::prune((uint64_t **)a1);
}

uint64_t EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::setThreshold(uint64_t a1, unint64_t a2, unint64_t a3)
{
  pthread_rwlock_t *v6;
  unint64_t v7;

  v6 = (pthread_rwlock_t *)(a1 + 72);
  pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 72));
  if (a2 >= a3)
    v7 = a3;
  else
    v7 = a2;
  *(_QWORD *)(a1 + 56) = a2;
  *(_QWORD *)(a1 + 64) = v7;
  if (*(_QWORD *)(a1 + 32) > a2)
    *(_BYTE *)(a1 + 48) = 1;
  pthread_rwlock_unlock(v6);
  return EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::prune((uint64_t **)a1);
}

EQKit::Font::STIXCollection *EQKit::Font::STIXCollection::STIXCollection(EQKit::Font::STIXCollection *this, NSDictionary *a2, NSDictionary *a3, const EQKitCacheLRUCounter *a4)
{
  EQKit::Font::STIXCollection::SizeVariant *v8;
  uint64_t v9;
  EQKit::Font::CharacterProperty::Map *v10;
  const EQKit::Environment::Version *v11;
  uint64_t v12;
  EQKit::Font::Metric::Map *v13;
  NSDictionary *v14;
  uint64_t v15;
  EQKit::Font::CharacterMapping *v16;
  NSDictionary *v17;
  uint64_t v18;
  EQKit::Font::CharacterMapping *v19;
  NSDictionary *v20;
  uint64_t v21;
  EQKit::Font::CharacterArray *v22;
  NSArray *v23;
  uint64_t v24;
  EQKit::Font::CharacterArray *v25;
  NSArray *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  char *v39;
  unsigned int v40;
  const void *v41[2];
  _QWORD v42[5];
  _QWORD v43[5];
  _QWORD v44[5];
  _DWORD *v45[2];

  *(_QWORD *)this = &off_24D8290E0;
  v8 = (EQKit::Font::STIXCollection *)((char *)this + 224);
  v39 = (char *)this + 168;
  EQKit::Font::STIXCollection::SizeVariant::SizeVariant((EQKit::Font::STIXCollection *)((char *)this + 168), a4);
  EQKit::Font::STIXCollection::SizeVariant::SizeVariant(v8, a4);
  *((_QWORD *)this + 35) = (char *)this + 288;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 38) = (char *)this + 312;
  v9 = objc_opt_class();
  v10 = (EQKit::Font::CharacterProperty::Map *)EQKitUtilDynamicCast(v9, (uint64_t)-[NSDictionary objectForKey:](a2, "objectForKey:", CFSTR("charProps"), v39));
  *((_QWORD *)this + 41) = EQKit::Font::CharacterProperty::Map::newMapFromDictionary(v10, a3, v11);
  v12 = objc_opt_class();
  v13 = (EQKit::Font::Metric::Map *)EQKitUtilDynamicCast(v12, (uint64_t)-[NSDictionary objectForKey:](a2, "objectForKey:", CFSTR("metrics")));
  *((_QWORD *)this + 42) = EQKit::Font::Metric::Map::newMapFromDictionary(v13, v14);
  v15 = objc_opt_class();
  v16 = (EQKit::Font::CharacterMapping *)EQKitUtilDynamicCast(v15, (uint64_t)-[NSDictionary objectForKey:](a2, "objectForKey:", CFSTR("charMap")));
  *((_QWORD *)this + 43) = EQKit::Font::CharacterMapping::newMapFromDictionary(v16, v17);
  v18 = objc_opt_class();
  v19 = (EQKit::Font::CharacterMapping *)EQKitUtilDynamicCast(v18, (uint64_t)-[NSDictionary objectForKey:](a2, "objectForKey:", CFSTR("stretchCharMap")));
  *((_QWORD *)this + 44) = EQKit::Font::CharacterMapping::newMapFromDictionary(v19, v20);
  v21 = objc_opt_class();
  v22 = (EQKit::Font::CharacterArray *)EQKitUtilDynamicCast(v21, (uint64_t)-[NSDictionary objectForKey:](a2, "objectForKey:", CFSTR("specialVariantsCharacterArray")));
  *((_QWORD *)this + 45) = EQKit::Font::CharacterArray::newArrayFromArray(v22, v23);
  v24 = objc_opt_class();
  v25 = (EQKit::Font::CharacterArray *)EQKitUtilDynamicCast(v24, (uint64_t)-[NSDictionary objectForKey:](a2, "objectForKey:", CFSTR("largeScriptChars")));
  *((_QWORD *)this + 46) = EQKit::Font::CharacterArray::newArrayFromArray(v25, v26);
  bzero((char *)this + 8, 0x20uLL);
  bzero((char *)this + 56, 0x20uLL);
  bzero((char *)this + 88, 0x50uLL);
  bzero((char *)this + 40, 0x10uLL);
  EQKit::Font::STIXCollection::setupRequiredFontInfos(this);
  v27 = operator new();
  v28 = MEMORY[0x24BDAC760];
  v44[0] = MEMORY[0x24BDAC760];
  v44[1] = 3221225472;
  v44[2] = ___ZN5EQKit4Font14STIXCollectionC1EP12NSDictionaryRKNS_11Environment7VersionERK20EQKitCacheLRUCounter_block_invoke;
  v44[3] = &__block_descriptor_40_e36_B24__0r__Key_____CFString_dSId_8_v16l;
  v44[4] = this;
  EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::EQKitCache(v27, (uint64_t)a4, v44);
  *((_QWORD *)this + 49) = v27;
  v29 = operator new();
  v43[0] = v28;
  v43[1] = 3221225472;
  v43[2] = ___ZN5EQKit4Font14STIXCollectionC1EP12NSDictionaryRKNS_11Environment7VersionERK20EQKitCacheLRUCounter_block_invoke_2;
  v43[3] = &__block_descriptor_40_e36_B24__0r__Key_____CFString_dSId_8_i16l;
  v43[4] = this;
  EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::EQKitCache(v29, (uint64_t)a4, v43);
  *((_QWORD *)this + 48) = v29;
  v30 = operator new();
  v42[0] = v28;
  v42[1] = 3221225472;
  v42[2] = ___ZN5EQKit4Font14STIXCollectionC1EP12NSDictionaryRKNS_11Environment7VersionERK20EQKitCacheLRUCounter_block_invoke_3;
  v42[3] = &__block_descriptor_40_e53_B24__0r__SlantKey_____CFString_dSI_8__SlantInfo_dd_16l;
  v42[4] = this;
  EQKitCache<EQKit::Font::SlantKey,EQKit::Font::SlantInfo,EQKit::Font::SlantInfo>::EQKitCache(v30, (uint64_t)a4, v42);
  *((_QWORD *)this + 50) = v30;
  EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::setThreshold(*((_QWORD *)this + 49), 0xC8uLL, 0x96uLL);
  EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::setThreshold(*((_QWORD *)this + 48), 0x7D0uLL, 0x5DCuLL);
  EQKit::Font::CompositeStretch::defineCompositeStretch(CFSTR("STIXSizeOneSym-Regular"), (const __CFString *)0x23A7, 9129, 9128, 9130, v41);
  v40 = 123;
  v45[0] = &v40;
  v31 = std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)this + 280, &v40, (uint64_t)&std::piecewise_construct, v45);
  EQKit::Font::CompositeStretch::operator=((uint64_t)(v31 + 5), (uint64_t)v41);
  EQKit::Font::CompositeStretch::~CompositeStretch(v41);
  EQKit::Font::CompositeStretch::defineCompositeStretch(CFSTR("STIXSizeOneSym-Regular"), (const __CFString *)0x23AB, 9133, 9132, 9130, v41);
  v40 = 125;
  v45[0] = &v40;
  v32 = std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)this + 280, &v40, (uint64_t)&std::piecewise_construct, v45);
  EQKit::Font::CompositeStretch::operator=((uint64_t)(v32 + 5), (uint64_t)v41);
  EQKit::Font::CompositeStretch::~CompositeStretch(v41);
  EQKit::Font::CompositeStretch::defineCompositeStretch(CFSTR("STIXSizeOneSym-Regular"), (const __CFString *)0x239B, 9117, 0, 9116, v41);
  v40 = 40;
  v45[0] = &v40;
  v33 = std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)this + 280, &v40, (uint64_t)&std::piecewise_construct, v45);
  EQKit::Font::CompositeStretch::operator=((uint64_t)(v33 + 5), (uint64_t)v41);
  EQKit::Font::CompositeStretch::~CompositeStretch(v41);
  EQKit::Font::CompositeStretch::defineCompositeStretch(CFSTR("STIXSizeOneSym-Regular"), (const __CFString *)0x239E, 9120, 0, 9119, v41);
  v40 = 41;
  v45[0] = &v40;
  v34 = std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)this + 280, &v40, (uint64_t)&std::piecewise_construct, v45);
  EQKit::Font::CompositeStretch::operator=((uint64_t)(v34 + 5), (uint64_t)v41);
  EQKit::Font::CompositeStretch::~CompositeStretch(v41);
  EQKit::Font::CompositeStretch::defineCompositeStretch(CFSTR("STIXSizeOneSym-Regular"), (const __CFString *)0x23A1, 9123, 0, 9122, v41);
  v40 = 91;
  v45[0] = &v40;
  v35 = std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)this + 280, &v40, (uint64_t)&std::piecewise_construct, v45);
  EQKit::Font::CompositeStretch::operator=((uint64_t)(v35 + 5), (uint64_t)v41);
  EQKit::Font::CompositeStretch::~CompositeStretch(v41);
  EQKit::Font::CompositeStretch::defineCompositeStretch(CFSTR("STIXSizeOneSym-Regular"), (const __CFString *)0x23A4, 9126, 0, 9125, v41);
  v40 = 93;
  v45[0] = &v40;
  v36 = std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)this + 280, &v40, (uint64_t)&std::piecewise_construct, v45);
  EQKit::Font::CompositeStretch::operator=((uint64_t)(v36 + 5), (uint64_t)v41);
  EQKit::Font::CompositeStretch::~CompositeStretch(v41);
  EQKit::Font::CompositeStretch::defineCompositeStretch(CFSTR("STIXSizeOneSym-Regular"), 0, 9143, 0, 0, v41);
  v45[0] = &EQKit::Unicode::SQUARE_ROOT;
  v37 = std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)this + 280, &EQKit::Unicode::SQUARE_ROOT, (uint64_t)&std::piecewise_construct, v45);
  EQKit::Font::CompositeStretch::operator=((uint64_t)(v37 + 5), (uint64_t)v41);
  EQKit::Font::CompositeStretch::~CompositeStretch(v41);
  return this;
}

void sub_21794C74C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, EQKit::Font::STIXCollection::SizeVariant *a9, uint64_t a10, char a11)
{
  EQKit::Font::STIXCollection::SizeVariant *v11;
  uint64_t v12;
  uint64_t v13;
  const void ***v14;
  const void ***v15;

  std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::destroy(v12 + 304, *v15);
  std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::destroy(v13, *v14);
  EQKit::Font::STIXCollection::SizeVariant::~SizeVariant(v11);
  EQKit::Font::STIXCollection::SizeVariant::~SizeVariant(a9);
  _Unwind_Resume(a1);
}

BOOL ___ZN5EQKit4Font14STIXCollectionC1EP12NSDictionaryRKNS_11Environment7VersionERK20EQKitCacheLRUCounter_block_invoke(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  const EQKit::StemStretch::Config::Entry *v5;
  unsigned int v6;
  char *v7;
  _QWORD *v8;
  EQKit::StemStretch::Glyph *v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::string v15;
  int *v16;
  std::string __p;

  v5 = *(const EQKit::StemStretch::Config::Entry **)(*(_QWORD *)(a1 + 32) + 328);
  if (v5)
  {
    v6 = *(_DWORD *)(a2 + 20);
    if (*(_QWORD *)a2)
      v7 = (char *)objc_msgSend(*(id *)a2, "UTF8String");
    else
      v7 = "";
    std::string::basic_string[abi:nn180100]<0>(&v15, v7);
    v16 = (int *)(v6 | 0xD00000000);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    else
      __p = v15;
    v8 = std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::find<EQKit::Font::CharacterProperty::Map::Key>((uint64_t)v5 + 48, (uint64_t)&v16);
    if ((_QWORD *)((char *)v5 + 56) == v8)
      v5 = 0;
    else
      v5 = (const EQKit::StemStretch::Config::Entry *)(v8 + 8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  v9 = (EQKit::StemStretch::Glyph *)operator new();
  EQKit::StemStretch::Glyph::Glyph(v9, (const EQKit::StemStretch::Key *)a2, v5);
  std::shared_ptr<EQKit::StemStretch::Glyph>::shared_ptr[abi:nn180100]<EQKit::StemStretch::Glyph,void>(&v16, (uint64_t)v9);
  v10 = *v16;
  if (*v16)
    std::shared_ptr<EQKit::StemStretch::Glyph>::operator=[abi:nn180100](a3, (uint64_t *)&v16);
  v11 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    v12 = (unint64_t *)(__p.__r_.__value_.__r.__words[0] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v10 != 0;
}

void sub_21794C968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN5EQKit4Font14STIXCollectionC1EP12NSDictionaryRKNS_11Environment7VersionERK20EQKitCacheLRUCounter_block_invoke_2(uint64_t a1, const EQKit::StemStretch::Key *a2, _DWORD *a3)
{
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  int *v9;
  std::__shared_weak_count *v10;

  EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::lookup(*(uint64_t ***)(*(_QWORD *)(a1 + 32) + 392), a2, &v9);
  v4 = (int)v9;
  if (v9)
    v4 = *v9;
  *a3 = v4;
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return 1;
}

uint64_t ___ZN5EQKit4Font14STIXCollectionC1EP12NSDictionaryRKNS_11Environment7VersionERK20EQKitCacheLRUCounter_block_invoke_3(int a1, EQKit::Font::SlantKey *this, double *a3)
{
  __CTFont *v5;
  __CTFont *v6;
  _BOOL4 v7;
  double v8;
  double v9;
  unsigned __int16 v11;
  double v12;
  double v13;
  __CTFont *v14;

  v5 = (__CTFont *)EQKit::Font::SlantKey::newFont((CGFloat *)this);
  v14 = v5;
  if (v5)
  {
    v6 = v5;
    v12 = 0.0;
    v13 = 0.0;
    v11 = *((_WORD *)this + 8);
    v7 = EQKit::Font::STIXCollection::analyzeGlyphForSlantCorrection(v5, &v11, &v14, &v13, &v12);
    v9 = v12;
    v8 = v13;
    if (!v7)
    {
      v9 = 0.0;
      v8 = 0.0;
    }
    *a3 = v8;
    a3[1] = v9;
    CFRelease(v6);
  }
  return 1;
}

void EQKit::Font::STIXCollection::~STIXCollection(EQKit::Font::STIXCollection *this, uint64_t *a2)
{
  uint64_t v3;
  EQKit::Font::STIXCollection::FontInfo *v4;
  EQKit::Font::STIXCollection::FontInfo *v5;
  EQKit::Font::STIXCollection::FontInfo *v6;
  EQKit::Font::STIXCollection::FontInfo *v7;
  EQKit::Font::STIXCollection::FontInfo *v8;
  EQKit::Font::STIXCollection::FontInfo *v9;
  EQKit::Font::STIXCollection::FontInfo *v10;
  EQKit::Font::STIXCollection::FontInfo *v11;
  EQKit::Font::STIXCollection::FontInfo *v12;
  EQKit::Font::STIXCollection::FontInfo *v13;
  EQKit::Font::STIXCollection::FontInfo *v14;
  EQKit::Font::STIXCollection::FontInfo *v15;
  EQKit::Font::STIXCollection::FontInfo *v16;
  EQKit::Font::STIXCollection::FontInfo *v17;
  EQKit::Font::STIXCollection::FontInfo *v18;
  EQKit::Font::STIXCollection::FontInfo *v19;
  EQKit::Font::STIXCollection::FontInfo *v20;
  EQKit::Font::STIXCollection::FontInfo *v21;
  EQKit::Font::STIXCollection::FontInfo *v22;
  EQKit::Font::STIXCollection::FontInfo *v23;
  char **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v3 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 216)) = a2[1];
  v4 = (EQKit::Font::STIXCollection::FontInfo *)*((_QWORD *)this + 1);
  if (v4)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v4);
    MEMORY[0x219A153B8]();
    *((_QWORD *)this + 1) = 0;
  }
  v5 = (EQKit::Font::STIXCollection::FontInfo *)*((_QWORD *)this + 3);
  if (v5)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v5);
    MEMORY[0x219A153B8]();
    *((_QWORD *)this + 3) = 0;
  }
  v6 = (EQKit::Font::STIXCollection::FontInfo *)*((_QWORD *)this + 2);
  if (v6)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v6);
    MEMORY[0x219A153B8]();
    *((_QWORD *)this + 2) = 0;
  }
  v7 = (EQKit::Font::STIXCollection::FontInfo *)*((_QWORD *)this + 4);
  if (v7)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v7);
    MEMORY[0x219A153B8]();
    *((_QWORD *)this + 4) = 0;
  }
  v8 = (EQKit::Font::STIXCollection::FontInfo *)*((_QWORD *)this + 7);
  if (v8)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v8);
    MEMORY[0x219A153B8]();
    *((_QWORD *)this + 7) = 0;
  }
  v9 = (EQKit::Font::STIXCollection::FontInfo *)*((_QWORD *)this + 9);
  if (v9)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v9);
    MEMORY[0x219A153B8]();
    *((_QWORD *)this + 9) = 0;
  }
  v10 = (EQKit::Font::STIXCollection::FontInfo *)*((_QWORD *)this + 8);
  if (v10)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v10);
    MEMORY[0x219A153B8]();
    *((_QWORD *)this + 8) = 0;
  }
  v11 = (EQKit::Font::STIXCollection::FontInfo *)*((_QWORD *)this + 10);
  if (v11)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v11);
    MEMORY[0x219A153B8]();
    *((_QWORD *)this + 10) = 0;
  }
  v12 = (EQKit::Font::STIXCollection::FontInfo *)*((_QWORD *)this + 11);
  if (v12)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v12);
    MEMORY[0x219A153B8]();
    *((_QWORD *)this + 11) = 0;
  }
  v13 = (EQKit::Font::STIXCollection::FontInfo *)*((_QWORD *)this + 12);
  if (v13)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v13);
    MEMORY[0x219A153B8]();
    *((_QWORD *)this + 12) = 0;
  }
  v14 = (EQKit::Font::STIXCollection::FontInfo *)*((_QWORD *)this + 13);
  if (v14)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v14);
    MEMORY[0x219A153B8]();
    *((_QWORD *)this + 13) = 0;
  }
  v15 = (EQKit::Font::STIXCollection::FontInfo *)*((_QWORD *)this + 14);
  if (v15)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v15);
    MEMORY[0x219A153B8]();
    *((_QWORD *)this + 14) = 0;
  }
  v16 = (EQKit::Font::STIXCollection::FontInfo *)*((_QWORD *)this + 15);
  if (v16)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v16);
    MEMORY[0x219A153B8]();
    *((_QWORD *)this + 15) = 0;
  }
  v17 = (EQKit::Font::STIXCollection::FontInfo *)*((_QWORD *)this + 16);
  if (v17)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v17);
    MEMORY[0x219A153B8]();
    *((_QWORD *)this + 16) = 0;
  }
  v18 = (EQKit::Font::STIXCollection::FontInfo *)*((_QWORD *)this + 17);
  if (v18)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v18);
    MEMORY[0x219A153B8]();
    *((_QWORD *)this + 17) = 0;
  }
  v19 = (EQKit::Font::STIXCollection::FontInfo *)*((_QWORD *)this + 18);
  if (v19)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v19);
    MEMORY[0x219A153B8]();
    *((_QWORD *)this + 18) = 0;
  }
  v20 = (EQKit::Font::STIXCollection::FontInfo *)*((_QWORD *)this + 19);
  if (v20)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v20);
    MEMORY[0x219A153B8]();
    *((_QWORD *)this + 19) = 0;
  }
  v21 = (EQKit::Font::STIXCollection::FontInfo *)*((_QWORD *)this + 20);
  if (v21)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v21);
    MEMORY[0x219A153B8]();
    *((_QWORD *)this + 20) = 0;
  }
  v22 = (EQKit::Font::STIXCollection::FontInfo *)*((_QWORD *)this + 5);
  if (v22)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v22);
    MEMORY[0x219A153B8]();
    *((_QWORD *)this + 5) = 0;
  }
  v23 = (EQKit::Font::STIXCollection::FontInfo *)*((_QWORD *)this + 6);
  if (v23)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v23);
    MEMORY[0x219A153B8]();
    *((_QWORD *)this + 6) = 0;
  }
  v24 = (char **)*((_QWORD *)this + 41);
  if (v24)
  {
    EQKit::Font::CharacterProperty::Map::~Map(v24);
    MEMORY[0x219A153B8]();
  }
  v25 = *((_QWORD *)this + 42);
  if (v25)
    MEMORY[0x219A153B8](v25, 0x1000C404B66DB26);
  v26 = *((_QWORD *)this + 43);
  if (v26)
  {
    std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(*((_QWORD *)this + 43), *(_QWORD **)(v26 + 8));
    MEMORY[0x219A153B8](v26, 0x1020C4062D53EE8);
  }
  v27 = *((_QWORD *)this + 44);
  if (v27)
  {
    std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(*((_QWORD *)this + 44), *(_QWORD **)(v27 + 8));
    MEMORY[0x219A153B8](v27, 0x1020C4062D53EE8);
  }
  v28 = *((_QWORD *)this + 45);
  if (v28)
  {
    v29 = *(void **)v28;
    if (*(_QWORD *)v28)
    {
      *(_QWORD *)(v28 + 8) = v29;
      operator delete(v29);
    }
    MEMORY[0x219A153B8](v28, 0x10C402FEFCB83);
  }
  v30 = *((_QWORD *)this + 46);
  if (v30)
  {
    v31 = *(void **)v30;
    if (*(_QWORD *)v30)
    {
      *(_QWORD *)(v30 + 8) = v31;
      operator delete(v31);
    }
    MEMORY[0x219A153B8](v30, 0x10C402FEFCB83);
  }
  v32 = *((_QWORD *)this + 49);
  if (v32)
  {
    v33 = EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::~EQKitCache(v32);
    MEMORY[0x219A153B8](v33, 0x10E0C40B27302BALL);
  }
  v34 = *((_QWORD *)this + 48);
  if (v34)
  {
    v35 = EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::~EQKitCache(v34);
    MEMORY[0x219A153B8](v35, 0x10E0C40B27302BALL);
  }
  v36 = *((_QWORD *)this + 50);
  if (v36)
  {
    v37 = EQKitCache<EQKit::Font::SlantKey,EQKit::Font::SlantInfo,EQKit::Font::SlantInfo>::~EQKitCache(v36);
    MEMORY[0x219A153B8](v37, 0x10E0C40B27302BALL);
  }
  std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::destroy((uint64_t)this + 304, *((const void ***)this + 39));
  std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::destroy((uint64_t)this + 280, *((const void ***)this + 36));
  EQKit::Font::STIXCollection::SizeVariant::~SizeVariant((EQKit::Font::STIXCollection *)((char *)this + 224));
  EQKit::Font::STIXCollection::SizeVariant::~SizeVariant((EQKit::Font::STIXCollection *)((char *)this + 168));
}

void EQKit::Font::STIXCollection::~STIXCollection(EQKit::Font::STIXCollection *this)
{
}

{
  JUMPOUT(0x219A153B8);
}

void `virtual thunk to'EQKit::Font::STIXCollection::~STIXCollection(EQKit::Font::STIXCollection *this)
{
}

{
  JUMPOUT(0x219A153B8);
}

uint64_t EQKit::Font::STIXCollection::pruneCaches(uint64_t ***this)
{
  EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::prune(this[49]);
  EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::prune(this[48]);
  EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::prune(this[27]);
  return EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::prune(this[34]);
}

uint64_t EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::prune(uint64_t **a1)
{
  pthread_rwlock_t *v2;
  int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  EQKit::StemStretch::Key *v8;
  EQKit::StemStretch::Key *v9;
  EQKit::StemStretch::Key *v10;
  const EQKit::StemStretch::Key *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  void **v18[4];
  uint64_t v19;
  EQKit::StemStretch::Key *v20;
  EQKit::StemStretch::Key *v21;
  unint64_t v22;
  BOOL (*v23)(uint64_t, uint64_t);

  v2 = (pthread_rwlock_t *)(a1 + 9);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 9));
  v3 = *((unsigned __int8 *)a1 + 48);
  result = pthread_rwlock_unlock(v2);
  if (v3)
  {
    pthread_rwlock_wrlock(v2);
    if (*((_BYTE *)a1 + 48))
    {
      v5 = **a1;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v6 = a1[3];
      if (v6)
      {
        do
        {
          v7 = v6[8];
          EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v18, (const EQKit::StemStretch::Key *)(v6 + 2));
          v19 = v5 - v7;
          v8 = v21;
          if ((unint64_t)v21 >= v22)
          {
            v9 = (EQKit::StemStretch::Key *)std::vector<std::pair<EQKit::StemStretch::Key,unsigned long>>::__push_back_slow_path<std::pair<EQKit::StemStretch::Key,unsigned long>>((uint64_t *)&v20, (const EQKit::StemStretch::Key *)v18);
          }
          else
          {
            EQKit::StemStretch::Key::Key(v21, (const EQKit::StemStretch::Key *)v18);
            *((_QWORD *)v8 + 4) = v19;
            v9 = (EQKit::StemStretch::Key *)((char *)v8 + 40);
          }
          v21 = v9;
          EQKit::StemStretch::Key::~Key((const void **)v18);
          v6 = (uint64_t *)*v6;
        }
        while (v6);
        v10 = v20;
        v11 = v21;
      }
      else
      {
        v11 = 0;
        v10 = 0;
      }
      v12 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((v11 - v10) >> 3));
      v23 = EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::compareKeyLRU;
      if (v11 == v10)
        v13 = 0;
      else
        v13 = v12;
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*,false>(v10, v11, (uint64_t (**)(EQKit::StemStretch::Key *, EQKit::StemStretch::Key *))&v23, v13, 1);
      v14 = 0xCCCCCCCCCCCCCCCDLL * ((v21 - v20) >> 3);
      v15 = a1[8];
      v16 = v14 - (_QWORD)v15;
      if (v14 > (unint64_t)v15)
      {
        v17 = 40 * (_QWORD)v15;
        do
        {
          if (std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::find<EQKit::StemStretch::Key>(a1 + 1, (uint64_t)v20 + v17))
          {
            std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__erase_unique<EQKit::StemStretch::Key>(a1 + 1, (uint64_t)v20 + v17);
          }
          v17 += 40;
          --v16;
        }
        while (v16);
      }
      *((_BYTE *)a1 + 48) = 0;
      v18[0] = (void **)&v20;
      std::vector<std::pair<EQKit::StemStretch::Key,unsigned long>>::__destroy_vector::operator()[abi:nn180100](v18);
    }
    return pthread_rwlock_unlock(v2);
  }
  return result;
}

void sub_21794D1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  a10 = (void **)&a15;
  std::vector<std::pair<EQKit::StemStretch::Key,unsigned long>>::__destroy_vector::operator()[abi:nn180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::prune(uint64_t **a1)
{
  pthread_rwlock_t *v2;
  int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  EQKit::StemStretch::Key *v8;
  EQKit::StemStretch::Key *v9;
  EQKit::StemStretch::Key *v10;
  const EQKit::StemStretch::Key *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  void **v18[4];
  uint64_t v19;
  EQKit::StemStretch::Key *v20;
  EQKit::StemStretch::Key *v21;
  unint64_t v22;
  BOOL (*v23)(uint64_t, uint64_t);

  v2 = (pthread_rwlock_t *)(a1 + 9);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 9));
  v3 = *((unsigned __int8 *)a1 + 48);
  result = pthread_rwlock_unlock(v2);
  if (v3)
  {
    pthread_rwlock_wrlock(v2);
    if (*((_BYTE *)a1 + 48))
    {
      v5 = **a1;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v6 = a1[3];
      if (v6)
      {
        do
        {
          v7 = v6[7];
          EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v18, (const EQKit::StemStretch::Key *)(v6 + 2));
          v19 = v5 - v7;
          v8 = v21;
          if ((unint64_t)v21 >= v22)
          {
            v9 = (EQKit::StemStretch::Key *)std::vector<std::pair<EQKit::StemStretch::Key,unsigned long>>::__push_back_slow_path<std::pair<EQKit::StemStretch::Key,unsigned long>>((uint64_t *)&v20, (const EQKit::StemStretch::Key *)v18);
          }
          else
          {
            EQKit::StemStretch::Key::Key(v21, (const EQKit::StemStretch::Key *)v18);
            *((_QWORD *)v8 + 4) = v19;
            v9 = (EQKit::StemStretch::Key *)((char *)v8 + 40);
          }
          v21 = v9;
          EQKit::StemStretch::Key::~Key((const void **)v18);
          v6 = (uint64_t *)*v6;
        }
        while (v6);
        v10 = v20;
        v11 = v21;
      }
      else
      {
        v11 = 0;
        v10 = 0;
      }
      v12 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((v11 - v10) >> 3));
      v23 = EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::compareKeyLRU;
      if (v11 == v10)
        v13 = 0;
      else
        v13 = v12;
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*,false>(v10, v11, (uint64_t (**)(EQKit::StemStretch::Key *, EQKit::StemStretch::Key *))&v23, v13, 1);
      v14 = 0xCCCCCCCCCCCCCCCDLL * ((v21 - v20) >> 3);
      v15 = a1[8];
      v16 = v14 - (_QWORD)v15;
      if (v14 > (unint64_t)v15)
      {
        v17 = 40 * (_QWORD)v15;
        do
        {
          if (std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::find<EQKit::StemStretch::Key>(a1 + 1, (uint64_t)v20 + v17))
          {
            std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::__erase_unique<EQKit::StemStretch::Key>(a1 + 1, (uint64_t)v20 + v17);
          }
          v17 += 40;
          --v16;
        }
        while (v16);
      }
      *((_BYTE *)a1 + 48) = 0;
      v18[0] = (void **)&v20;
      std::vector<std::pair<EQKit::StemStretch::Key,unsigned long>>::__destroy_vector::operator()[abi:nn180100](v18);
    }
    return pthread_rwlock_unlock(v2);
  }
  return result;
}

void sub_21794D37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  a10 = (void **)&a15;
  std::vector<std::pair<EQKit::StemStretch::Key,unsigned long>>::__destroy_vector::operator()[abi:nn180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t EQKit::Font::STIXCollection::SizeVariant::pruneCache(uint64_t ***this)
{
  return EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::prune(this[6]);
}

uint64_t `virtual thunk to'EQKit::Font::STIXCollection::pruneCaches(EQKit::Font::STIXCollection *this)
{
  return EQKit::Font::STIXCollection::pruneCaches((uint64_t ***)((char *)this + *(_QWORD *)(*(_QWORD *)this - 32)));
}

EQKit::Font::STIXCollection::FontInfo *_fontInfoWithName(EQKit::Font::STIXCollection::FontInfo *result, const __CFString *a2)
{
  EQKit::Font::STIXCollection::FontInfo *v3;
  EQKit::Font::STIXCollection::FontInfo *v4;

  if (!*(_QWORD *)result)
  {
    v3 = result;
    v4 = (EQKit::Font::STIXCollection::FontInfo *)operator new();
    result = EQKit::Font::STIXCollection::FontInfo::FontInfo(v4, a2);
    *(_QWORD *)v3 = v4;
  }
  return result;
}

void sub_21794D42C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A153B8](v1, 0x1072C402C72566ELL);
  _Unwind_Resume(a1);
}

_QWORD *EQKit::Font::STIXCollection::characterPropertyLengthForFont(uint64_t a1, int a2, uint64_t a3, int a4)
{
  _QWORD *v4;
  _QWORD *v5;
  _DWORD v7[2];
  std::string __p;

  v4 = *(_QWORD **)(a1 + 328);
  if (v4)
  {
    v7[0] = a4;
    v7[1] = a2;
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      __p = *(std::string *)a3;
    v5 = std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::find<EQKit::Font::CharacterProperty::Map::Key>((uint64_t)(v4 + 3), (uint64_t)v7);
    if (v4 + 4 == v5)
      v4 = 0;
    else
      v4 = v5 + 8;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v4;
}

void sub_21794D4D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *`virtual thunk to'EQKit::Font::STIXCollection::characterPropertyLengthForFont(_QWORD *a1, int a2, uint64_t a3, int a4)
{
  return EQKit::Font::STIXCollection::characterPropertyLengthForFont((uint64_t)a1 + *(_QWORD *)(*a1 - 40), a2, a3, a4);
}

BOOL EQKit::Font::STIXCollection::characterPropertyBoolForFont(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _DWORD v10[2];
  std::string __p;

  v6 = *(_QWORD *)(a1 + 328);
  if (v6)
  {
    v10[0] = a4;
    v10[1] = a2;
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      __p = *(std::string *)a3;
    v7 = std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::find<EQKit::Font::CharacterProperty::Map::Key>(v6, (uint64_t)v10);
    v8 = (_QWORD *)(v6 + 8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v8 != v7)
      return *((_BYTE *)v7 + 64) != 0;
  }
  return a5;
}

void sub_21794D5A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL `virtual thunk to'EQKit::Font::STIXCollection::characterPropertyBoolForFont(_QWORD *a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  return EQKit::Font::STIXCollection::characterPropertyBoolForFont((uint64_t)a1 + *(_QWORD *)(*a1 - 48), a2, a3, a4, a5);
}

double EQKit::Font::STIXCollection::lengthMetricWithScriptAndRule(uint64_t a1, unsigned int a2, EQKit::Script::Info *a3, double a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 336);
  if (v4)
    return EQKit::Font::Metric::LengthEntry::resolveWithScriptAndRule((EQKit::Font::Metric::LengthEntry *)(v4 + 384 * a2), a3, a4);
  else
    return 0.0;
}

double `virtual thunk to'EQKit::Font::STIXCollection::lengthMetricWithScriptAndRule(_QWORD *a1, unsigned int a2, EQKit::Script::Info *a3, double a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 56) + 336);
  if (v4)
    return EQKit::Font::Metric::LengthEntry::resolveWithScriptAndRule((EQKit::Font::Metric::LengthEntry *)(v4 + 384 * a2), a3, a4);
  else
    return 0.0;
}

double EQKit::Font::STIXCollection::floatMetric(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 336);
  if (v2)
    return *(double *)(v2 + 8 * a2 + 12672);
  else
    return 0.0;
}

double `virtual thunk to'EQKit::Font::STIXCollection::floatMetric(_QWORD *a1, unsigned int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 64) + 336);
  if (v2)
    return *(double *)(v2 + 8 * a2 + 12672);
  else
    return 0.0;
}

CTFontRef EQKit::Font::STIXCollection::newFontWithScript(EQKit::Font::STIXCollection *this, const EQKit::Script::Info *a2)
{
  int v2;
  CTFontRef **v3;
  CTFontRef **v4;
  CTFontRef **v5;
  CTFontRef *v6;

  v2 = *((_DWORD *)a2 + 3);
  v3 = (CTFontRef **)((char *)this + 32);
  v4 = (CTFontRef **)((char *)this + 8);
  if (v2 == 3)
    v4 = (CTFontRef **)((char *)this + 16);
  if (v2 != 4)
    v3 = v4;
  if (v2 == 2)
    v5 = (CTFontRef **)((char *)this + 24);
  else
    v5 = v3;
  v6 = *v5;
  if (v6 && *v6)
    return CTFontCreateCopyWithAttributes(*v6, *((CGFloat *)a2 + 2), 0, 0);
  else
    return 0;
}

uint64_t EQKit::Font::STIXCollection::fontInfoGenericWithScript(EQKit::Font::STIXCollection *this, const EQKit::Script::Info *a2)
{
  int v2;
  char *v3;
  char *v4;
  char *v5;

  v2 = *((_DWORD *)a2 + 3);
  v3 = (char *)this + 32;
  v4 = (char *)this + 8;
  if (v2 == 3)
    v4 = (char *)this + 16;
  if (v2 != 4)
    v3 = v4;
  if (v2 == 2)
    v5 = (char *)this + 24;
  else
    v5 = v3;
  return *(_QWORD *)v5;
}

CTFontRef `virtual thunk to'EQKit::Font::STIXCollection::newFontWithScript(EQKit::Font::STIXCollection *this, const EQKit::Script::Info *a2)
{
  return EQKit::Font::STIXCollection::newFontWithScript((EQKit::Font::STIXCollection *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 72)), a2);
}

uint64_t EQKit::Font::STIXCollection::fontInfoGenericWithTrait(EQKit::Font::STIXCollection *this, char a2)
{
  int v2;
  char *v3;
  char *v4;
  char *v5;

  v2 = a2 & 3;
  v3 = (char *)this + 24;
  v4 = (char *)this + 8;
  if (v2 == 1)
    v4 = (char *)this + 16;
  if (v2 != 2)
    v3 = v4;
  if (v2 == 3)
    v5 = (char *)this + 32;
  else
    v5 = v3;
  return *(_QWORD *)v5;
}

uint64_t EQKit::Font::STIXCollection::fontInfoNonUnicodeWithTrait(EQKit::Font::STIXCollection *this, char a2)
{
  int v2;
  char *v3;
  char *v4;
  char *v5;

  v2 = a2 & 3;
  v3 = (char *)this + 72;
  v4 = (char *)this + 56;
  if (v2 == 1)
    v4 = (char *)this + 64;
  if (v2 != 2)
    v3 = v4;
  if (v2 == 3)
    v5 = (char *)this + 80;
  else
    v5 = v3;
  return *(_QWORD *)v5;
}

const __CFCharacterSet *EQKit::Font::STIXCollection::fontInfoGenericForCharacterWithScript(EQKit::Font::STIXCollection *this, UTF32Char theChar, const EQKit::Script::Info *a3)
{
  int v5;
  const __CFCharacterSet **v6;
  uint64_t v7;
  const __CFCharacterSet **v8;
  uint64_t v9;
  _BOOL4 v10;
  int v11;
  uint64_t v12;
  const __CFCharacterSet **v13;
  const __CFCharacterSet *v14;
  const __CFCharacterSet *v15;
  int IsLongCharacterMember;
  const __CFCharacterSet *result;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  const __CFCharacterSet **v21;
  const __CFCharacterSet **v22;
  const __CFCharacterSet **v23;
  const __CFCharacterSet **v24;
  int v25;
  const __CFCharacterSet **v26;
  const __CFCharacterSet *v27;

  v5 = *((_DWORD *)a3 + 3);
  v6 = (const __CFCharacterSet **)((char *)this + 32);
  v7 = 2;
  v8 = (const __CFCharacterSet **)((char *)this + 8);
  v9 = -1;
  if (v5 == 3)
  {
    v9 = 0;
    v8 = (const __CFCharacterSet **)((char *)this + 16);
  }
  v10 = v5 == 4 || v5 == 3;
  if (v5 != 4)
  {
    v7 = v9;
    v6 = v8;
  }
  v11 = v5 == 2 || v10;
  if (v5 == 2)
    v12 = 1;
  else
    v12 = v7;
  if (v5 == 2)
    v13 = (const __CFCharacterSet **)((char *)this + 24);
  else
    v13 = v6;
  v14 = *v13;
  if (!*v13 || (v15 = (const __CFCharacterSet *)*((_QWORD *)v14 + 1)) == 0)
  {
    if (!v11)
      return 0;
LABEL_26:
    v18 = 0;
    v19 = qword_217C277E0[v12];
    v20 = (uint64_t)*(&off_24D829238 + v12);
    v21 = (const __CFCharacterSet **)((char *)this + 32);
    v22 = (const __CFCharacterSet **)((char *)this + 8);
    v23 = (const __CFCharacterSet **)((char *)this + 24);
    v24 = (const __CFCharacterSet **)((char *)this + 16);
    while (1)
    {
      v25 = *(_DWORD *)(v20 + 4 * v18) & 3;
      v26 = v24;
      if (v25 != 1)
      {
        v26 = v21;
        if (v25 != 3)
        {
          if (v25 == 2)
            v26 = v23;
          else
            v26 = v22;
        }
      }
      v27 = *v26;
      if (*v26)
      {
        result = (const __CFCharacterSet *)*((_QWORD *)v27 + 1);
        if (result)
        {
          if (CFCharacterSetIsLongCharacterMember(result, theChar))
            result = v27;
          else
            result = 0;
        }
        if (result)
          return result;
      }
      else
      {
        result = 0;
      }
      if (++v18 >= v19)
        return result;
    }
  }
  IsLongCharacterMember = CFCharacterSetIsLongCharacterMember(v15, theChar);
  if (IsLongCharacterMember)
    result = v14;
  else
    result = 0;
  if (!IsLongCharacterMember && ((v11 ^ 1) & 1) == 0)
    goto LABEL_26;
  return result;
}

const __CFCharacterSet *EQKit::Font::STIXCollection::fontInfoNonUnicodeForCharacterWithScript(EQKit::Font::STIXCollection *this, UTF32Char theChar, const EQKit::Script::Info *a3)
{
  int v5;
  const __CFCharacterSet **v6;
  uint64_t v7;
  const __CFCharacterSet **v8;
  uint64_t v9;
  _BOOL4 v10;
  int v11;
  uint64_t v12;
  const __CFCharacterSet **v13;
  const __CFCharacterSet *v14;
  const __CFCharacterSet *v15;
  int IsLongCharacterMember;
  const __CFCharacterSet *result;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  const __CFCharacterSet **v21;
  const __CFCharacterSet **v22;
  const __CFCharacterSet **v23;
  const __CFCharacterSet **v24;
  int v25;
  const __CFCharacterSet **v26;
  const __CFCharacterSet *v27;

  v5 = *((_DWORD *)a3 + 3);
  v6 = (const __CFCharacterSet **)((char *)this + 80);
  v7 = 2;
  v8 = (const __CFCharacterSet **)((char *)this + 56);
  v9 = -1;
  if (v5 == 3)
  {
    v9 = 0;
    v8 = (const __CFCharacterSet **)((char *)this + 64);
  }
  v10 = v5 == 4 || v5 == 3;
  if (v5 != 4)
  {
    v7 = v9;
    v6 = v8;
  }
  v11 = v5 == 2 || v10;
  if (v5 == 2)
    v12 = 1;
  else
    v12 = v7;
  if (v5 == 2)
    v13 = (const __CFCharacterSet **)((char *)this + 72);
  else
    v13 = v6;
  v14 = *v13;
  if (!*v13 || (v15 = (const __CFCharacterSet *)*((_QWORD *)v14 + 1)) == 0)
  {
    if (!v11)
      return 0;
LABEL_26:
    v18 = 0;
    v19 = qword_217C277E0[v12];
    v20 = (uint64_t)*(&off_24D829238 + v12);
    v21 = (const __CFCharacterSet **)((char *)this + 80);
    v22 = (const __CFCharacterSet **)((char *)this + 56);
    v23 = (const __CFCharacterSet **)((char *)this + 72);
    v24 = (const __CFCharacterSet **)((char *)this + 64);
    while (1)
    {
      v25 = *(_DWORD *)(v20 + 4 * v18) & 3;
      v26 = v24;
      if (v25 != 1)
      {
        v26 = v21;
        if (v25 != 3)
        {
          if (v25 == 2)
            v26 = v23;
          else
            v26 = v22;
        }
      }
      v27 = *v26;
      if (*v26)
      {
        result = (const __CFCharacterSet *)*((_QWORD *)v27 + 1);
        if (result)
        {
          if (CFCharacterSetIsLongCharacterMember(result, theChar))
            result = v27;
          else
            result = 0;
        }
        if (result)
          return result;
      }
      else
      {
        result = 0;
      }
      if (++v18 >= v19)
        return result;
    }
  }
  IsLongCharacterMember = CFCharacterSetIsLongCharacterMember(v15, theChar);
  if (IsLongCharacterMember)
    result = v14;
  else
    result = 0;
  if (!IsLongCharacterMember && ((v11 ^ 1) & 1) == 0)
    goto LABEL_26;
  return result;
}

const __CFCharacterSet *EQKit::Font::STIXCollection::fontInfoIntegralForCharacterWithScript(EQKit::Font::STIXCollection *this, UTF32Char a2, const EQKit::Script::Info *a3)
{
  uint64_t v3;
  char *v4;
  const __CFCharacterSet *result;
  unsigned int v9;
  _BOOL4 v10;
  unsigned int v11;
  unsigned int v12;
  char v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = (char *)this + 136;
  v3 = *((_QWORD *)this + 17);
  if (!v3)
    return 0;
  result = *(const __CFCharacterSet **)(v3 + 8);
  if (!result)
    return result;
  if (!CFCharacterSetIsLongCharacterMember(result, a2))
    return 0;
  v9 = *((_DWORD *)a3 + 3);
  v10 = v9 > 4;
  v11 = 7u >> v9;
  v12 = v10 | (0xBu >> v9);
  v13 = v10 | v11;
  if (!*(_QWORD *)a3)
  {
    if (*((_BYTE *)a3 + 8) && *((_BYTE *)a3 + 10))
    {
      if ((v13 & 1) != 0)
      {
        v16 = (char *)this + 120;
        v17 = (char *)this + 128;
      }
      else
      {
        v16 = v4 - 48;
        v17 = (char *)this + 96;
      }
    }
    else
    {
      if ((v13 & 1) != 0)
      {
        if ((v12 & 1) != 0)
          v15 = v4;
        else
          v15 = (char *)this + 144;
        goto LABEL_24;
      }
      v16 = (char *)this + 8;
      v17 = (char *)this + 24;
    }
    if ((v12 & 1) != 0)
      v15 = v16;
    else
      v15 = v17;
    goto LABEL_24;
  }
  v14 = (char *)this + 152;
  if ((v12 & 1) != 0)
  {
    v15 = (char *)this + 104;
  }
  else
  {
    v14 = (char *)this + 160;
    v15 = (char *)this + 112;
  }
  if ((v13 & 1) != 0)
    v15 = v14;
LABEL_24:
  v18 = *(_QWORD *)v15;
  if (!*(_QWORD *)v15)
    return 0;
  result = *(const __CFCharacterSet **)(v18 + 8);
  if (result)
  {
    if (CFCharacterSetIsLongCharacterMember(result, a2))
      return (const __CFCharacterSet *)v18;
    else
      return 0;
  }
  return result;
}

const __CFCharacterSet *EQKit::Font::STIXCollection::fontInfoForSpecialVariantWithScript(EQKit::Font::STIXCollection *this, UTF32Char theChar, uint64_t a3, const EQKit::Script::Info *a4)
{
  int v6;
  uint64_t v8;
  char *v9;
  const __CFCharacterSet *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  const __CFCharacterSet *result;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  unint64_t v18;
  unint64_t v19;
  UTF32Char *v20;
  _DWORD *v21;
  UTF32Char v22;

  if (a3 == 1)
    goto LABEL_29;
  if (!*((_DWORD *)a4 + 6))
  {
    v15 = *((_QWORD *)this + 45);
    if (v15)
    {
      v16 = *(_DWORD **)v15;
      v17 = *(_DWORD **)(v15 + 8);
      if (v17 != v16)
      {
        v18 = v17 - v16;
        do
        {
          v19 = v18 >> 1;
          v20 = &v16[v18 >> 1];
          v22 = *v20;
          v21 = v20 + 1;
          v18 += ~(v18 >> 1);
          if (v22 < theChar)
            v16 = v21;
          else
            v18 = v19;
        }
        while (v18);
      }
      if (v16 != v17 && *v16 == theChar)
      {
LABEL_29:
        v6 = *((_DWORD *)a4 + 3);
        if (v6 == 4 || v6 == 2)
        {
          v9 = (char *)this + 48;
          v8 = *((_QWORD *)this + 6);
          if (v8)
          {
            v10 = *(const __CFCharacterSet **)(v8 + 8);
            if (v10)
            {
              if (CFCharacterSetIsLongCharacterMember(v10, theChar))
                return *(const __CFCharacterSet **)v9;
            }
          }
        }
        v13 = *((_QWORD *)this + 5);
        v12 = (char *)this + 40;
        v11 = v13;
        if (v13)
        {
          result = *(const __CFCharacterSet **)(v11 + 8);
          if (!result)
            return result;
          v9 = v12;
          if (CFCharacterSetIsLongCharacterMember(result, theChar))
            return *(const __CFCharacterSet **)v9;
        }
      }
    }
  }
  return 0;
}

const __CFCharacterSet *EQKit::Font::STIXCollection::fontInfoForLargeOpWithScript(EQKit::Font::STIXCollection *this, UTF32Char theChar, const EQKit::Script::Info *a3)
{
  BOOL v3;
  unsigned int v5;
  char *v6;
  char *v7;
  const __CFCharacterSet *v8;
  const __CFCharacterSet *v9;
  int IsLongCharacterMember;
  const __CFCharacterSet *result;
  BOOL v12;
  uint64_t v13;

  if (*((_BYTE *)a3 + 10))
    v3 = *((_BYTE *)a3 + 8) == 0;
  else
    v3 = 1;
  if (v3)
    return 0;
  v5 = (*((_DWORD *)a3 + 3) - 2) & 0xFFFFFFFD;
  v6 = (char *)this + 224;
  if (v5)
  {
    v6 = (char *)this + 168;
    v7 = 0;
  }
  else
  {
    v7 = (char *)this + 168;
  }
  v8 = (const __CFCharacterSet *)*((_QWORD *)v6 + 1);
  if (!v8 || (v9 = (const __CFCharacterSet *)*((_QWORD *)v8 + 1)) == 0)
  {
    if (v5)
      return 0;
    goto LABEL_19;
  }
  IsLongCharacterMember = CFCharacterSetIsLongCharacterMember(v9, theChar);
  if (IsLongCharacterMember)
    result = v8;
  else
    result = 0;
  if (v5)
    v12 = 0;
  else
    v12 = IsLongCharacterMember == 0;
  if (v12)
  {
LABEL_19:
    v13 = *((_QWORD *)v7 + 1);
    if (v13)
    {
      result = *(const __CFCharacterSet **)(v13 + 8);
      if (result)
      {
        if (CFCharacterSetIsLongCharacterMember(result, theChar))
          return (const __CFCharacterSet *)v13;
        else
          return 0;
      }
      return result;
    }
    return 0;
  }
  return result;
}

uint64_t EQKit::Font::STIXCollection::setupSizeVariantForScript(uint64_t result, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(a4 + 12) - 2;
  v5 = (v4 & 0xFFFFFFFD) == 0;
  if ((v4 & 0xFFFFFFFD) != 0)
    v6 = result + 168;
  else
    v6 = result + 224;
  *a2 = v6;
  if (v5)
    v7 = result + 168;
  else
    v7 = 0;
  *a3 = v7;
  return result;
}

uint64_t EQKit::Font::STIXCollection::fixOutOfSequenceUnicodeChar(EQKit::Font::STIXCollection *this, uint64_t a2)
{
  uint64_t result;

  if ((int)a2 > 120075)
  {
    if ((int)a2 <= 120121)
    {
      switch((_DWORD)a2)
      {
        case 0x1D50C:
          return 8465;
        case 0x1D515:
          return 8476;
        case 0x1D51D:
          return 8488;
        default:
          return a2;
      }
    }
    else
    {
      switch((int)a2)
      {
        case 120127:
          return 8461;
        case 120128:
        case 120129:
        case 120130:
        case 120131:
        case 120132:
        case 120134:
          return a2;
        case 120133:
          return 8469;
        case 120135:
          return 8473;
        case 120136:
          return 8474;
        case 120137:
          return 8477;
        default:
          if ((_DWORD)a2 == 120122)
          {
            result = 8450;
          }
          else
          {
            if ((_DWORD)a2 != 120145)
              return a2;
            result = 8484;
          }
          break;
      }
    }
  }
  else
  {
    result = 8492;
    switch((int)a2)
    {
      case 119965:
        return result;
      case 119966:
      case 119967:
      case 119970:
      case 119973:
      case 119974:
      case 119977:
      case 119978:
      case 119979:
      case 119980:
        return a2;
      case 119968:
        return 8496;
      case 119969:
        return 8497;
      case 119971:
        return 8459;
      case 119972:
        return 8464;
      case 119975:
        return 8466;
      case 119976:
        return 8499;
      case 119981:
        return 8475;
      default:
        if ((_DWORD)a2 == 120070)
        {
          result = 8493;
        }
        else
        {
          if ((_DWORD)a2 != 120075)
            return a2;
          result = 8460;
        }
        break;
    }
  }
  return result;
}

uint64_t EQKit::Font::STIXCollection::lookupChar(EQKit::Font::STIXCollection *this, uint64_t a2, const EQKit::Script::Info *a3, int a4)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  uint64_t *v23;
  int v25;

  if ((_DWORD)a2 == 39)
  {
    if (!*((_DWORD *)a3 + 6))
      return 8242;
  }
  else if ((_DWORD)a2 == 45)
  {
    if (*((_DWORD *)a3 + 6) == 1)
      return 8208;
    else
      return 8722;
  }
  if ((a2 - 65) >= 0x1A && (a2 - 97) > 0x19)
  {
    if ((a2 - 48) <= 9)
    {
      v5 = *((_DWORD *)a3 + 3) - 5;
      if (v5 <= 9)
      {
        v4 = a2;
        if (((0x3E1u >> v5) & 1) != 0)
          return (dword_217C277F8[v5] + a2 - 48);
        return v4;
      }
      return a2;
    }
    v8 = *((_QWORD *)this + 43);
    if (v8)
    {
      v11 = *(_QWORD *)(v8 + 8);
      v9 = v8 + 8;
      v10 = v11;
      v4 = a2;
      if (v11)
      {
        v12 = v9;
        do
        {
          v13 = *(_DWORD *)(v10 + 28);
          v14 = v13 >= a2;
          if (v13 >= a2)
            v15 = (uint64_t *)v10;
          else
            v15 = (uint64_t *)(v10 + 8);
          if (v14)
            v12 = v10;
          v10 = *v15;
        }
        while (*v15);
        v4 = a2;
        if (v12 != v9)
        {
          v4 = a2;
          if (*(_DWORD *)(v12 + 28) <= a2)
            v4 = *(unsigned int *)(v12 + 32);
        }
      }
    }
    else
    {
      v4 = a2;
      if (!*((_QWORD *)this + 44))
        return a2;
    }
    if (!a4)
      return v4;
    v16 = *((_QWORD *)this + 44);
    if (!v16 || (_DWORD)v4 != (_DWORD)a2)
      return v4;
    v19 = *(_QWORD *)(v16 + 8);
    v18 = v16 + 8;
    v17 = v19;
    if (v19)
    {
      v20 = v18;
      do
      {
        v21 = *(_DWORD *)(v17 + 28);
        v22 = v21 >= a2;
        if (v21 >= a2)
          v23 = (uint64_t *)v17;
        else
          v23 = (uint64_t *)(v17 + 8);
        if (v22)
          v20 = v17;
        v17 = *v23;
      }
      while (*v23);
      if (v20 != v18)
      {
        v4 = a2;
        if (*(_DWORD *)(v20 + 28) <= a2)
          return *(unsigned int *)(v20 + 32);
        return v4;
      }
    }
    return a2;
  }
  switch(*((_DWORD *)a3 + 3))
  {
    case 5:
      v6 = 120120;
      v7 = 120146;
      break;
    case 6:
      v6 = 120172;
      v7 = 120198;
      break;
    case 7:
      v6 = 119964;
      v7 = 119990;
      break;
    case 8:
      v6 = 120016;
      v7 = 120042;
      break;
    case 9:
      v6 = 120068;
      v7 = 120094;
      break;
    case 0xA:
      v7 = 120250;
      v6 = 120224;
      break;
    case 0xB:
      v7 = 120250;
      v6 = 120276;
      break;
    case 0xC:
      v6 = 120328;
      v7 = 120354;
      break;
    case 0xD:
      v6 = 120380;
      v7 = 120406;
      break;
    case 0xE:
      v6 = 120432;
      v7 = 120458;
      break;
    default:
      return a2;
  }
  if ((a2 - 65) >= 0x1A)
  {
    v25 = -97;
  }
  else
  {
    v7 = v6;
    v25 = -65;
  }
  return EQKit::Font::STIXCollection::fixOutOfSequenceUnicodeChar(this, (v25 + a2 + v7));
}

const __CFCharacterSet *EQKit::Font::STIXCollection::lookupFontForCh(const __CFCharacterSet **this, UTF32Char a2, const EQKit::Script::Info *a3, FontInfo *a4)
{
  return EQKit::Font::STIXCollection::lookupFontForCh(this, a2, 0, a3, a4);
}

const __CFCharacterSet *EQKit::Font::STIXCollection::lookupFontForCh(const __CFCharacterSet **this, UTF32Char a2, uint64_t a3, const EQKit::Script::Info *a4, const FontInfo *a5)
{
  const __CFCharacterSet *result;
  const __CFCharacterSet *v11;
  int IsLongCharacterMember;
  const __CFCharacterSet *v13;

  result = EQKit::Font::STIXCollection::fontInfoIntegralForCharacterWithScript((EQKit::Font::STIXCollection *)this, a2, a4);
  if (result)
    return result;
  result = EQKit::Font::STIXCollection::fontInfoForLargeOpWithScript((EQKit::Font::STIXCollection *)this, a2, a4);
  if (result)
    return result;
  result = EQKit::Font::STIXCollection::fontInfoForSpecialVariantWithScript((EQKit::Font::STIXCollection *)this, a2, a3, a4);
  if (!a5 || result)
  {
    if (result)
      return result;
  }
  else
  {
    v11 = (const __CFCharacterSet *)a5[1];
    if (v11)
    {
      IsLongCharacterMember = CFCharacterSetIsLongCharacterMember(v11, a2);
      result = (const __CFCharacterSet *)a5;
      if (IsLongCharacterMember)
        return result;
    }
  }
  result = EQKit::Font::STIXCollection::fontInfoGenericForCharacterWithScript((EQKit::Font::STIXCollection *)this, a2, a4);
  if (result)
    return result;
  v13 = this[22];
  if (!v13)
    goto LABEL_15;
  result = (const __CFCharacterSet *)*((_QWORD *)v13 + 1);
  if (!result)
    goto LABEL_16;
  if (CFCharacterSetIsLongCharacterMember(result, a2))
    result = this[22];
  else
LABEL_15:
    result = 0;
LABEL_16:
  if ((a2 - 57344) >> 11 <= 2 && !result)
    return EQKit::Font::STIXCollection::fontInfoNonUnicodeForCharacterWithScript((EQKit::Font::STIXCollection *)this, a2, a4);
  return result;
}

const __CFCharacterSet *EQKit::Font::STIXCollection::fontNameForCharacterWithScript(EQKit::Font::STIXCollection *this, uint64_t a2, const EQKit::Script::Info *a3)
{
  UTF32Char v4;
  UTF32Char v6;
  const __CFCharacterSet *result;

  v4 = a2;
  v6 = EQKit::Font::STIXCollection::lookupChar(this, a2, a3, 0);
  result = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, v6, 0, a3, 0);
  if (result)
    return (const __CFCharacterSet *)((char *)result + 16);
  if (v6 == v4)
    return 0;
  result = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, v4, 0, a3, 0);
  if (result)
    return (const __CFCharacterSet *)((char *)result + 16);
  return result;
}

const __CFCharacterSet *`virtual thunk to'EQKit::Font::STIXCollection::fontNameForCharacterWithScript(EQKit::Font::STIXCollection *this, uint64_t a2, const EQKit::Script::Info *a3)
{
  return EQKit::Font::STIXCollection::fontNameForCharacterWithScript((EQKit::Font::STIXCollection *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 80)), a2, a3);
}

BOOL EQKit::Font::STIXCollection::characterNeedsSpecialSpacing(EQKit::Font::STIXCollection *this, int a2, const EQKit::Script::Info *a3, const FontInfo *a4, double *a5, double *a6)
{
  if (a2 == 8242)
  {
    *a5 = *((double *)a3 + 2) * 0.0;
    *a6 = *((double *)a3 + 2) * -0.111111111;
  }
  return a2 == 8242;
}

uint64_t EQKit::Font::STIXCollection::newAttributedStringWithScript(EQKit::Font::STIXCollection *this, NSString *a2, const EQKit::Script::Info *a3)
{
  NSUInteger v4;
  NSUInteger v5;
  uint64_t v6;
  unsigned int *v7;
  unint64_t v8;
  int v9;
  FontInfo **v10;
  FontInfo **v11;
  FontInfo **v12;
  CTFontRef *v13;
  NSUInteger v14;
  CTFontRef CopyWithAttributes;
  id v16;
  void *v17;
  uint64_t v18;
  CTFontRef *v19;
  NSUInteger v20;
  NSUInteger v21;
  uint64_t v22;
  NSUInteger v23;
  uint64_t v24;
  UTF32Char v25;
  const __CFCharacterSet *v26;
  double v28;
  double v29;
  NSUInteger v30;
  NSMutableAttributedString *v31;
  unint64_t v33;
  EQKit::Font::STIXCollection::FontInfo *v34;
  char v36;
  unint64_t v37;
  FontInfo *v38;
  NSMutableAttributedString *v40;
  unint64_t v41;
  _BYTE v42[256];
  uint64_t v43;
  _NSRange v44;
  _NSRange v45;
  _NSRange v46;
  _NSRange v47;
  _NSRange v48;

  v43 = *MEMORY[0x24BDAC8D0];
  v4 = -[NSString length](a2, "length");
  v5 = v4;
  v6 = 4 * v4;
  if (v4 >= 0x40)
  {
    v7 = (unsigned int *)malloc_type_malloc(4 * v4, 0x100004052888210uLL);
    if (!v7)
      return 0;
  }
  else
  {
    v7 = (unsigned int *)v42;
  }
  v41 = 0;
  if (-[NSString getBytes:maxLength:usedLength:encoding:options:range:remainingRange:](a2, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", v7, v6, &v41, 2617245952, 0, 0, v5, 0))
  {
    v8 = v41 >> 2;
    v40 = 0;
    v9 = *((_DWORD *)a3 + 3);
    v10 = (FontInfo **)((char *)this + 32);
    v11 = (FontInfo **)((char *)this + 8);
    if (v9 == 3)
      v11 = (FontInfo **)((char *)this + 16);
    if (v9 != 4)
      v10 = v11;
    if (v9 == 2)
      v12 = (FontInfo **)((char *)this + 24);
    else
      v12 = v10;
    v33 = v41;
    if (v41 < 4)
    {
      v13 = 0;
      v34 = 0;
      v36 = 0;
      v14 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_14:
      if (v14 || v33 < 4 || !v13 || (v36 & 1) != 0)
      {
        v18 = 0;
        if (v14 == 0x7FFFFFFFFFFFFFFFLL || v8 <= v14 || !v13)
          goto LABEL_87;
        v48.location = v14;
        v48.length = v8 - v14;
        _updateAttributedString((id *)&v40, v7, v48, v13, *((CGFloat *)a3 + 2));
      }
      else if (*v13)
      {
        CopyWithAttributes = CTFontCreateCopyWithAttributes(*v13, *((CGFloat *)a3 + 2), 0, 0);
        if (CopyWithAttributes)
        {
          v16 = objc_alloc(MEMORY[0x24BDBCE70]);
          v17 = (void *)objc_msgSend(v16, "initWithObjectsAndKeys:", CopyWithAttributes, *MEMORY[0x24BDC4C28], *MEMORY[0x24BDBD270], *MEMORY[0x24BDC4EE8], 0);
          v18 = objc_msgSend(objc_alloc(MEMORY[0x24BDD1458]), "initWithString:attributes:", a2, v17);
          CFRelease(CopyWithAttributes);

          goto LABEL_87;
        }
      }
      v18 = 0;
LABEL_87:
      v31 = v40;
      if (!v18 && v40)
        v18 = -[NSMutableAttributedString copy](v40, "copy");

      goto LABEL_91;
    }
    v36 = 0;
    v34 = 0;
    v19 = 0;
    v20 = 0;
    v38 = *v12;
    v21 = 0x7FFFFFFFFFFFFFFFLL;
    v37 = v41 >> 2;
    while (1)
    {
      v22 = v7[v20];
      v23 = v20 + 1;
      v24 = v20 + 1 >= v8 ? 0 : EQKit::Unicode::variationSelector((EQKit::Unicode *)v7[v23]);
      v25 = EQKit::Font::STIXCollection::lookupChar(this, v22, a3, 0);
      v26 = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, v25, v24, a3, v38);
      v13 = (CTFontRef *)v26;
      if (!v26 || (_DWORD)v22 == v25)
      {
        if (!v26)
        {
          v13 = (CTFontRef *)EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, v22, 0, a3, v38);
          if (!v13)
          {
            v28 = 1.0;
            switch((int)v22)
            {
              case 8192:
              case 8194:
                goto LABEL_73;
              case 8193:
              case 8195:
              case 8199:
              case 8200:
                goto LABEL_67;
              case 8196:
                v28 = 0.333333343;
                goto LABEL_73;
              case 8197:
                v28 = 0.25;
                goto LABEL_73;
              case 8198:
              case 8201:
                v28 = 0.166666657;
                goto LABEL_73;
              case 8202:
                v28 = 0.0833333284;
                goto LABEL_73;
              default:
                if ((_DWORD)v22 == 8287)
                {
                  v28 = 0.222222224;
LABEL_73:
                  if (!v40)
                    v40 = (NSMutableAttributedString *)objc_alloc_init(MEMORY[0x24BDD1688]);
                  +[EQKitAdjustableSpace appendSpaceToAttributedString:ascent:descent:width:](EQKitAdjustableSpace, "appendSpaceToAttributedString:ascent:descent:width:", 0.0, 0.0, v28 * *((double *)a3 + 2));
                  if (!v20)
                    goto LABEL_79;
                }
                else
                {
LABEL_67:
                  v13 = (CTFontRef *)v34;
                  if (v34)
                    goto LABEL_35;
                  if (*((_QWORD *)a3 + 4))
                  {
                    v13 = (CTFontRef *)operator new();
                    EQKit::Font::STIXCollection::FontInfo::FontInfo((EQKit::Font::STIXCollection::FontInfo *)v13, *((CFStringRef *)a3 + 4));
                    v34 = (EQKit::Font::STIXCollection::FontInfo *)v13;
                    goto LABEL_35;
                  }
                  v34 = 0;
                  if (!v20)
                    goto LABEL_79;
                }
                if (v21 != 0x7FFFFFFFFFFFFFFFLL)
                {
                  v13 = 0;
                  v30 = v20 - v21;
                  goto LABEL_51;
                }
LABEL_79:
                v13 = 0;
                if (!v24)
                  v23 = v20;
                break;
            }
            goto LABEL_60;
          }
        }
      }
      else
      {
        v7[v20] = v25;
        v36 = 1;
      }
LABEL_35:
      if (v25 == 8242)
        break;
      if (v21 == 0x7FFFFFFFFFFFFFFFLL)
      {
        v14 = v20;
        if (!v24)
          goto LABEL_62;
      }
      else
      {
        if (v19 != v13)
        {
          v30 = v20 - v21;
          v14 = v20;
          goto LABEL_54;
        }
        v14 = v21;
        v13 = v19;
        if (!v24)
          goto LABEL_62;
      }
LABEL_58:
      if (v14 != 0x7FFFFFFFFFFFFFFFLL)
      {
        v47.length = v23 - v14;
        v47.location = v14;
        _updateAttributedString((id *)&v40, v7, v47, v13, *((CGFloat *)a3 + 2));
        v13 = 0;
      }
LABEL_60:
      v14 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_63:
      v20 = v23 + 1;
      v21 = v14;
      v19 = v13;
      v8 = v37;
      if (v23 + 1 >= v37)
        goto LABEL_14;
    }
    v29 = *((double *)a3 + 2);
    if (v21 == 0x7FFFFFFFFFFFFFFFLL)
    {
      v19 = 0;
    }
    else
    {
      v30 = v20 - v21;
      if (!v19)
        goto LABEL_44;
      v44.location = v21;
      v44.length = v20 - v21;
      _updateAttributedString((id *)&v40, v7, v44, v19, *((CGFloat *)a3 + 2));
    }
    v30 = 0;
    v21 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_44:
    if (!v40)
      v40 = (NSMutableAttributedString *)objc_alloc_init(MEMORY[0x24BDD1688]);
    if (v29 * 0.0 != 0.0)
      +[EQKitAdjustableSpace appendSpaceToAttributedString:ascent:descent:width:](EQKitAdjustableSpace, "appendSpaceToAttributedString:ascent:descent:width:", 0.0, 0.0, v29 * 0.0);
    v45.location = v20;
    v45.length = 1;
    _updateAttributedString((id *)&v40, v7, v45, v13, *((CGFloat *)a3 + 2));
    if (v29 * -0.111111111 != 0.0)
      +[EQKitAdjustableSpace appendSpaceToAttributedString:ascent:descent:width:](EQKitAdjustableSpace, "appendSpaceToAttributedString:ascent:descent:width:", v40, 0.0, 0.0, v29 * -0.111111111);
    v13 = 0;
LABEL_51:
    v14 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_54:
    if (v21 != 0x7FFFFFFFFFFFFFFFLL && v19)
    {
      v46.location = v21;
      v46.length = v30;
      _updateAttributedString((id *)&v40, v7, v46, v19, *((CGFloat *)a3 + 2));
    }
    if (!v24)
    {
LABEL_62:
      v23 = v20;
      goto LABEL_63;
    }
    goto LABEL_58;
  }
  v34 = 0;
  v18 = 0;
LABEL_91:
  if (v7 != (unsigned int *)v42)
    free(v7);
  if (v34)
  {
    EQKit::Font::STIXCollection::FontInfo::~FontInfo(v34);
    MEMORY[0x219A153B8]();
  }
  return v18;
}

void sub_21794E904(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A153B8](v1, 0x1072C402C72566ELL);
  _Unwind_Resume(a1);
}

void _updateAttributedString(id *a1, const unsigned int *a2, _NSRange a3, CTFontRef *a4, CGFloat a5)
{
  NSUInteger length;
  NSUInteger location;
  CTFontRef CopyWithAttributes;
  CTFontRef v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;

  if (a3.length)
  {
    length = a3.length;
    location = a3.location;
    if (!*a1)
      *a1 = objc_alloc_init(MEMORY[0x24BDD1688]);
    if (*a4)
    {
      CopyWithAttributes = CTFontCreateCopyWithAttributes(*a4, a5, 0, 0);
      if (CopyWithAttributes)
      {
        v12 = CopyWithAttributes;
        v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithBytes:length:encoding:", &a2[location], 4 * length, 2617245952);
        v14 = objc_alloc(MEMORY[0x24BDBCE70]);
        v15 = (void *)objc_msgSend(v14, "initWithObjectsAndKeys:", v12, *MEMORY[0x24BDC4C28], *MEMORY[0x24BDBD270], *MEMORY[0x24BDC4EE8], 0);
        v16 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1458]), "initWithString:attributes:", v13, v15);
        objc_msgSend(*a1, "appendAttributedString:", v16);

        CFRelease(v12);
      }
    }
  }
}

uint64_t `virtual thunk to'EQKit::Font::STIXCollection::newAttributedStringWithScript(EQKit::Font::STIXCollection *this, NSString *a2, const EQKit::Script::Info *a3)
{
  return EQKit::Font::STIXCollection::newAttributedStringWithScript((EQKit::Font::STIXCollection *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 88)), a2, a3);
}

CTFontRef EQKit::Font::STIXCollection::newFontForStretchedCharacterWithScript(EQKit::Font::STIXCollection *a1, unsigned int *a2, int a3, EQKit::Script::Info *a4, double a5)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  const __CTFont *v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unsigned int v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t **v25;
  _BOOL4 v26;
  CTFontRef result;
  const void *v28[4];

  v10 = (*((_DWORD *)a4 + 3) - 2) & 0xFFFFFFFD;
  if (v10)
    v11 = (uint64_t)a1 + 168;
  else
    v11 = (uint64_t)a1 + 224;
  if (((*((_DWORD *)a4 + 3) - 2) & 0xFFFFFFFD) != 0)
    v12 = 0;
  else
    v12 = (uint64_t)a1 + 168;
  v13 = (const __CTFont *)EQKit::Font::STIXCollection::lookupChar(a1, *a2, a4, 1);
  v14 = v13;
  *a2 = v13;
  if (a3 == 1)
  {
    v21 = *((_QWORD *)a1 + 39);
    if (!v21)
    {
LABEL_30:
      v25 = (uint64_t **)*((_QWORD *)a1 + 48);
      EQKit::Font::STIXCollection::stemStretchKey((const __CFCharacterSet **)a1, v13, (uint64_t)a4, a3, (uint64_t)v28);
      v26 = EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::lookup(v25, (const EQKit::StemStretch::Key *)v28) != a3;
      EQKit::StemStretch::Key::~Key(v28);
      v14 = *a2;
      goto LABEL_31;
    }
    v16 = (_QWORD *)((char *)a1 + 312);
    v17 = (_QWORD *)((char *)a1 + 312);
    do
    {
      v22 = *(_DWORD *)(v21 + 32);
      v23 = v22 >= v13;
      if (v22 >= v13)
        v24 = (uint64_t *)v21;
      else
        v24 = (uint64_t *)(v21 + 8);
      if (v23)
        v17 = (_QWORD *)v21;
      v21 = *v24;
    }
    while (*v24);
  }
  else
  {
    if (a3 != 2)
      goto LABEL_30;
    v15 = *((_QWORD *)a1 + 36);
    if (!v15)
      goto LABEL_30;
    v16 = (_QWORD *)((char *)a1 + 288);
    v17 = (_QWORD *)((char *)a1 + 288);
    do
    {
      v18 = *(_DWORD *)(v15 + 32);
      v19 = v18 >= v13;
      if (v18 >= v13)
        v20 = (uint64_t *)v15;
      else
        v20 = (uint64_t *)(v15 + 8);
      if (v19)
        v17 = (_QWORD *)v15;
      v15 = *v20;
    }
    while (*v20);
  }
  if (v17 == v16 || v13 < *((_DWORD *)v17 + 8))
    goto LABEL_30;
  v26 = 0;
LABEL_31:
  result = EQKit::Font::STIXCollection::SizeVariant::newFontForCharacterWithScript(v11, v14, a3, (uint64_t)a4, v26, a5);
  if (!result && !v10)
    return EQKit::Font::STIXCollection::SizeVariant::newFontForCharacterWithScript(v12, *a2, a3, (uint64_t)a4, v26, a5);
  return result;
}

void sub_21794EC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  EQKit::StemStretch::Key::~Key(&a9);
  _Unwind_Resume(a1);
}

uint64_t EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::lookup(uint64_t **a1, const EQKit::StemStretch::Key *a2)
{
  pthread_rwlock_t *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  const EQKit::StemStretch::Key *v11;

  v4 = (pthread_rwlock_t *)(a1 + 9);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 9));
  v5 = std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::find<EQKit::StemStretch::Key>(a1 + 1, (uint64_t)a2);
  if (v5)
    goto LABEL_2;
  pthread_rwlock_unlock(v4);
  v9 = 0;
  v10 = 0;
  v6 = 0;
  if (!((unsigned int (*)(void))a1[34][2])())
    return v6;
  pthread_rwlock_wrlock(v4);
  v5 = std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::find<EQKit::StemStretch::Key>(a1 + 1, (uint64_t)a2);
  if (v5)
  {
LABEL_2:
    v5[7] = **a1;
    v6 = *((unsigned int *)v5 + 12);
  }
  else
  {
    v10 = **a1;
    v11 = a2;
    v8 = std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::__emplace_unique_key_args<EQKit::StemStretch::Key,std::piecewise_construct_t const&,std::tuple<EQKit::StemStretch::Key const&>,std::tuple<>>((uint64_t)(a1 + 1), (uint64_t)a2, (uint64_t)&std::piecewise_construct, &v11);
    v6 = v9;
    *((_DWORD *)v8 + 12) = v9;
    v8[7] = v10;
    if (a1[4] > a1[7])
      *((_BYTE *)a1 + 48) = 1;
  }
  pthread_rwlock_unlock(v4);
  return v6;
}

void EQKit::Font::STIXCollection::stemStretchKey(const __CFCharacterSet **a1@<X0>, const __CTFont *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  CTFontRef *v13;
  BOOL v14;
  EQKit::StemStretch::Key *CopyWithAttributes;
  double v16;
  const void *v17[4];

  v10 = (uint64_t)(a1 + 21);
  v11 = (*(_DWORD *)(a3 + 12) - 2) & 0xFFFFFFFD;
  if (v11)
    v12 = (uint64_t)(a1 + 21);
  else
    v12 = (uint64_t)(a1 + 28);
  v13 = (CTFontRef *)EQKit::Font::STIXCollection::SizeVariant::fontInfoForCharacterWithScript(v12, a2, a4, a3, 1, 1.79769313e308);
  if (v13)
    v14 = 0;
  else
    v14 = v11 == 0;
  if (v14)
    v13 = (CTFontRef *)EQKit::Font::STIXCollection::SizeVariant::fontInfoForCharacterWithScript(v10, a2, a4, a3, 1, 1.79769313e308);
  if (v13)
  {
    EQKit::StemStretch::Key::Key(a5);
  }
  else
  {
    v13 = (CTFontRef *)EQKit::Font::STIXCollection::lookupFontForCh(a1, (UTF32Char)a2, 0, (const EQKit::Script::Info *)a3, 0);
    EQKit::StemStretch::Key::Key(a5);
    if (!v13)
      return;
  }
  if (*v13)
  {
    CopyWithAttributes = CTFontCreateCopyWithAttributes(*v13, *(CGFloat *)(a3 + 16), 0, 0);
    if (CopyWithAttributes)
    {
      v16 = EQKit::Font::STIXCollection::ruleThicknessWithScript(a1, (CGFloat *)a3);
      EQKit::StemStretch::Key::keyForFontAndCharacter(CopyWithAttributes, a2, v16, (uint64_t)v17);
      EQKit::StemStretch::Key::operator=(a5, (uint64_t)v17);
      EQKit::StemStretch::Key::~Key(v17);
      CFRelease(CopyWithAttributes);
    }
  }
}

void sub_21794EE70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  const void **v9;

  EQKit::StemStretch::Key::~Key(&a9);
  EQKit::StemStretch::Key::~Key(v9);
  _Unwind_Resume(a1);
}

CTFontRef EQKit::Font::STIXCollection::SizeVariant::newFontForCharacterWithScript(uint64_t a1, unsigned int a2, int a3, uint64_t a4, int a5, double a6)
{
  const __CTFont **v7;
  const __CTFont *v8;

  v7 = (const __CTFont **)EQKit::Font::STIXCollection::SizeVariant::fontInfoForCharacterWithScript(a1, a2, a3, a4, a5, a6);
  if (v7 && (v8 = *v7) != 0)
    return CTFontCreateCopyWithAttributes(v8, *(CGFloat *)(a4 + 16), 0, 0);
  else
    return 0;
}

CTFontRef `virtual thunk to'EQKit::Font::STIXCollection::newFontForStretchedCharacterWithScript(_QWORD *a1, unsigned int *a2, int a3, EQKit::Script::Info *a4, double a5)
{
  return EQKit::Font::STIXCollection::newFontForStretchedCharacterWithScript((EQKit::Font::STIXCollection *)((char *)a1 + *(_QWORD *)(*a1 - 96)), a2, a3, a4, a5);
}

uint64_t EQKit::Font::STIXCollection::compositeStretchForCharacter(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;

  if (a3 == 1)
  {
    v9 = *(_QWORD *)(a1 + 312);
    if (!v9)
      return 0;
    v4 = a1 + 312;
    v5 = a1 + 312;
    do
    {
      v10 = *(_DWORD *)(v9 + 32);
      v11 = v10 >= a2;
      if (v10 >= a2)
        v12 = (uint64_t *)v9;
      else
        v12 = (uint64_t *)(v9 + 8);
      if (v11)
        v5 = v9;
      v9 = *v12;
    }
    while (*v12);
  }
  else
  {
    if (a3 != 2)
      return 0;
    v3 = *(_QWORD *)(a1 + 288);
    if (!v3)
      return 0;
    v4 = a1 + 288;
    v5 = a1 + 288;
    do
    {
      v6 = *(_DWORD *)(v3 + 32);
      v7 = v6 >= a2;
      if (v6 >= a2)
        v8 = (uint64_t *)v3;
      else
        v8 = (uint64_t *)(v3 + 8);
      if (v7)
        v5 = v3;
      v3 = *v8;
    }
    while (*v8);
  }
  if (v5 == v4)
    return 0;
  v13 = *(_DWORD *)(v5 + 32);
  v14 = v5 + 40;
  if (v13 <= a2)
    return v14;
  else
    return 0;
}

uint64_t `virtual thunk to'EQKit::Font::STIXCollection::compositeStretchForCharacter(_QWORD *a1, unsigned int a2, int a3)
{
  return EQKit::Font::STIXCollection::compositeStretchForCharacter((uint64_t)a1 + *(_QWORD *)(*a1 - 112), a2, a3);
}

double EQKit::Font::STIXCollection::accentUnderHAdjustment(EQKit::Font::STIXCollection *this, uint64_t a2, const EQKit::Script::Info *a3)
{
  int v3;
  double result;
  double v5;
  double v6;

  v6 = 0.0;
  v3 = EQKit::Font::STIXCollection::accentHAdjustment(this, a2, a3, &v6, &v5);
  result = v6;
  if (!v3)
    return 0.0;
  return result;
}

uint64_t EQKit::Font::STIXCollection::accentHAdjustment(EQKit::Font::STIXCollection *this, uint64_t a2, const EQKit::Script::Info *a3, double *a4, double *a5)
{
  __int16 v10;
  char v11;
  int v12;
  int v13;
  const void *v14;
  const __CFCharacterSet *v15;
  const __CTFont *v16;
  const __CTFont *CopyWithAttributes;
  double v18;
  double v19;
  double v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;
  EQKitLength *v25;
  double Size;
  char *v27;
  uint64_t v28;
  EQKitLength *v29;
  double v30;
  void *v31[2];
  char v32;
  void *__p[2];
  char v34;
  CFTypeRef cf[3];
  uint64_t v36;
  __int16 v37;
  char v38;
  int v39;
  uint64_t v40;
  int v41;
  const void *v42;

  v10 = *((_WORD *)a3 + 4);
  v11 = *((_BYTE *)a3 + 10);
  v12 = *((_DWORD *)a3 + 3);
  v13 = *((_DWORD *)a3 + 6);
  v14 = (const void *)*((_QWORD *)a3 + 4);
  v36 = *(_QWORD *)a3;
  v37 = v10;
  v38 = v11;
  v39 = v12;
  v40 = 0x4028000000000000;
  v41 = v13;
  v42 = v14;
  if (v14)
    CFRetain(v14);
  v15 = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, a2, 0, (const EQKit::Script::Info *)&v36, 0);
  if (!v15
    || (v16 = *(const __CTFont **)v15) == 0
    || (CopyWithAttributes = CTFontCreateCopyWithAttributes(v16, 12.0, 0, 0)) == 0)
  {
    v22 = 0;
    if (!v14)
      return v22;
LABEL_9:
    CFRelease(v14);
    return v22;
  }
  EQKit::Font::SlantKey::SlantKey((EQKit::Font::SlantKey *)cf, CopyWithAttributes, a2);
  v18 = EQKitCache<EQKit::Font::SlantKey,EQKit::Font::SlantInfo,EQKit::Font::SlantInfo>::lookup(*((uint64_t ***)this + 50), (uint64_t)cf);
  v20 = v19;
  if (cf[0])
    v21 = (char *)objc_msgSend((id)cf[0], "UTF8String");
  else
    v21 = "";
  std::string::basic_string[abi:nn180100]<0>(__p, v21);
  v24 = (*(uint64_t (**)(EQKit::Font::STIXCollection *, uint64_t, void **, uint64_t))(*(_QWORD *)this + 24))(this, 2, __p, a2);
  v25 = (EQKitLength *)v24;
  if (v34 < 0)
  {
    operator delete(__p[0]);
    if (!v25)
      goto LABEL_17;
    goto LABEL_16;
  }
  if (v24)
  {
LABEL_16:
    Size = CTFontGetSize(CopyWithAttributes);
    v18 = EQKitLength::resolveToAbsoluteWithSize(v25, Size);
  }
LABEL_17:
  *a4 = v18;
  *a4 = v18 * (*((double *)a3 + 2) / 12.0);
  if (cf[0])
    v27 = (char *)objc_msgSend((id)cf[0], "UTF8String");
  else
    v27 = "";
  std::string::basic_string[abi:nn180100]<0>(v31, v27);
  v28 = (*(uint64_t (**)(EQKit::Font::STIXCollection *, uint64_t, void **, uint64_t))(*(_QWORD *)this + 24))(this, 1, v31, a2);
  v29 = (EQKitLength *)v28;
  if (v32 < 0)
  {
    operator delete(v31[0]);
    if (!v29)
      goto LABEL_25;
    goto LABEL_24;
  }
  if (v28)
  {
LABEL_24:
    v30 = CTFontGetSize(CopyWithAttributes);
    v20 = EQKitLength::resolveToAbsoluteWithSize(v29, v30);
  }
LABEL_25:
  *a5 = v20;
  *a5 = v20 * (*((double *)a3 + 2) / 12.0);
  CFRelease(CopyWithAttributes);
  if (cf[0])
    CFRelease(cf[0]);
  v22 = 1;
  if (v14)
    goto LABEL_9;
  return v22;
}

void sub_21794F20C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,CFTypeRef cf)
{
  const void *v21;

  if (a14 < 0)
    operator delete(__p);
  if (cf)
    CFRelease(cf);
  if (v21)
    CFRelease(v21);
  _Unwind_Resume(exception_object);
}

double `virtual thunk to'EQKit::Font::STIXCollection::accentUnderHAdjustment(EQKit::Font::STIXCollection *this, uint64_t a2, const EQKit::Script::Info *a3)
{
  EQKit::Font::STIXCollection *v3;
  int v4;
  double result;
  double v6;
  double v7;

  v3 = (EQKit::Font::STIXCollection *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 200));
  v7 = 0.0;
  v4 = EQKit::Font::STIXCollection::accentHAdjustment(v3, a2, a3, &v7, &v6);
  result = v7;
  if (!v4)
    return 0.0;
  return result;
}

double EQKit::Font::STIXCollection::accentOverHAdjustment(EQKit::Font::STIXCollection *this, uint64_t a2, const EQKit::Script::Info *a3)
{
  int v3;
  double result;
  double v5;
  double v6;

  v5 = 0.0;
  v3 = EQKit::Font::STIXCollection::accentHAdjustment(this, a2, a3, &v6, &v5);
  result = v5;
  if (!v3)
    return 0.0;
  return result;
}

double `virtual thunk to'EQKit::Font::STIXCollection::accentOverHAdjustment(EQKit::Font::STIXCollection *this, uint64_t a2, const EQKit::Script::Info *a3)
{
  EQKit::Font::STIXCollection *v3;
  int v4;
  double result;
  double v6;
  double v7;

  v3 = (EQKit::Font::STIXCollection *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 192));
  v6 = 0.0;
  v4 = EQKit::Font::STIXCollection::accentHAdjustment(v3, a2, a3, &v7, &v6);
  result = v6;
  if (!v4)
    return 0.0;
  return result;
}

double EQKitCache<EQKit::Font::SlantKey,EQKit::Font::SlantInfo,EQKit::Font::SlantInfo>::lookup(uint64_t **a1, uint64_t a2)
{
  pthread_rwlock_t *v4;
  double *v5;
  double v6;
  _QWORD *v7;
  double *v8;
  _QWORD *v9;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v4 = (pthread_rwlock_t *)(a1 + 9);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 9));
  v5 = (double *)std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::find<EQKit::Font::SlantKey>(a1 + 1, a2);
  if (v5)
  {
    *((_QWORD *)v5 + 7) = **a1;
    v6 = v5[5];
LABEL_10:
    pthread_rwlock_unlock(v4);
    return v6;
  }
  pthread_rwlock_unlock(v4);
  v12 = 0;
  v11 = 0uLL;
  v6 = 0.0;
  if (((unsigned int (*)(void))a1[34][2])())
  {
    pthread_rwlock_wrlock(v4);
    v7 = std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::find<EQKit::Font::SlantKey>(a1 + 1, a2);
    if (v7)
    {
      v8 = (double *)(v7 + 5);
      v7[7] = **a1;
    }
    else
    {
      v12 = **a1;
      v13 = a2;
      v9 = std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::__emplace_unique_key_args<EQKit::Font::SlantKey,std::piecewise_construct_t const&,std::tuple<EQKit::Font::SlantKey const&>,std::tuple<>>((uint64_t)(a1 + 1), a2, (uint64_t)&std::piecewise_construct, &v13);
      *(_OWORD *)(v9 + 5) = v11;
      v9[7] = v12;
      if (a1[4] > a1[7])
        *((_BYTE *)a1 + 48) = 1;
      v8 = (double *)&v11;
    }
    v6 = *v8;
    goto LABEL_10;
  }
  return v6;
}

double _resolveLength(const EQKitLength *a1, CTFontRef font, double a3)
{
  double Size;

  if (!a1 || !font)
    return 0.0;
  Size = CTFontGetSize(font);
  return EQKitLength::resolveToAbsoluteWithSize(a1, Size);
}

void EQKit::Font::SlantKey::~SlantKey(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

uint64_t EQKit::Font::STIXCollection::isCharacterStretchableInAxis(uint64_t ***this, uint64_t a2, int a3, uint64_t *a4)
{
  __int16 v7;
  char v8;
  int v9;
  int v10;
  const void *v11;
  const __CTFont *v12;
  unsigned int v13;
  uint64_t **v14;
  uint64_t **v15;
  uint64_t **v16;
  unsigned int v17;
  BOOL v18;
  uint64_t ***v19;
  uint64_t **v20;
  unsigned int v21;
  BOOL v22;
  uint64_t ***v23;
  uint64_t **v24;
  uint64_t v25;
  BOOL v27;
  unsigned int v28[13];
  unsigned __int8 v29;
  const void *v30[6];
  int v31;
  unsigned __int8 v32;
  uint64_t v33;
  __int16 v34;
  char v35;
  int v36;
  uint64_t v37;
  int v38;
  const void *v39;
  unsigned int v40;

  v7 = *((_WORD *)a4 + 4);
  v8 = *((_BYTE *)a4 + 10);
  v9 = *((_DWORD *)a4 + 3);
  v10 = *((_DWORD *)a4 + 6);
  v11 = (const void *)a4[4];
  v33 = *a4;
  v34 = v7;
  v35 = v8;
  v36 = v9;
  v37 = 0x4028000000000000;
  v38 = v10;
  v39 = v11;
  if (v11)
    CFRetain(v11);
  v12 = (const __CTFont *)EQKit::Font::STIXCollection::lookupChar((EQKit::Font::STIXCollection *)this, a2, (const EQKit::Script::Info *)&v33, 1);
  v13 = v12;
  if (a3 == 1)
  {
    v20 = this[39];
    if (v20)
    {
      v15 = (uint64_t **)(this + 39);
      v16 = (uint64_t **)(this + 39);
      do
      {
        v21 = *((_DWORD *)v20 + 8);
        v22 = v21 >= v12;
        if (v21 >= v12)
          v23 = (uint64_t ***)v20;
        else
          v23 = (uint64_t ***)(v20 + 1);
        if (v22)
          v16 = v20;
        v20 = *v23;
      }
      while (*v23);
LABEL_24:
      if (v16 != v15 && v12 >= *((_DWORD *)v16 + 8))
        goto LABEL_27;
    }
  }
  else if (a3 == 2)
  {
    v14 = this[36];
    if (v14)
    {
      v15 = (uint64_t **)(this + 36);
      v16 = (uint64_t **)(this + 36);
      do
      {
        v17 = *((_DWORD *)v14 + 8);
        v18 = v17 >= v12;
        if (v17 >= v12)
          v19 = (uint64_t ***)v14;
        else
          v19 = (uint64_t ***)(v14 + 1);
        if (v18)
          v16 = v14;
        v14 = *v19;
      }
      while (*v19);
      goto LABEL_24;
    }
  }
  v24 = this[48];
  EQKit::Font::STIXCollection::stemStretchKey((const __CFCharacterSet **)this, v12, (uint64_t)&v33, a3, (uint64_t)v30);
  LODWORD(v24) = EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::lookup(v24, (const EQKit::StemStretch::Key *)v30);
  EQKit::StemStretch::Key::~Key(v30);
  if ((_DWORD)v24 != a3)
  {
    v28[0] = v13;
    EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::lookup(this[27], v28, (uint64_t)v30);
    if (v32 - 1 > 0xFD)
    {
      v40 = v13;
      EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::lookup(this[34], &v40, (uint64_t)v28);
      v27 = v29 - 1 < 0xFE && v28[12] == a3;
    }
    else
    {
      v27 = v31 == a3;
    }
    v25 = v27;
    if (v11)
      goto LABEL_28;
    return v25;
  }
LABEL_27:
  v25 = 1;
  if (v11)
LABEL_28:
    CFRelease(v11);
  return v25;
}

void sub_21794F6A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  const void *v16;

  if (v16)
    CFRelease(v16);
  _Unwind_Resume(exception_object);
}

uint64_t EQKit::Font::STIXCollection::SizeVariant::stretchInfoForCharacter@<X0>(uint64_t ***this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v4;

  v4 = a2;
  return EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::lookup(this[6], &v4, a3);
}

uint64_t `virtual thunk to'EQKit::Font::STIXCollection::isCharacterStretchableInAxis(_QWORD *a1, uint64_t a2, int a3, uint64_t *a4)
{
  return EQKit::Font::STIXCollection::isCharacterStretchableInAxis((uint64_t ***)((char *)a1 + *(_QWORD *)(*a1 - 120)), a2, a3, a4);
}

BOOL EQKit::Font::STIXCollection::isCharacterNaturalSizeWithScript(EQKit::Font::STIXCollection *this, uint64_t a2, const EQKit::Script::Info *a3)
{
  const FontInfo *v6;
  UTF32Char v7;
  const __CFCharacterSet *v8;

  v6 = (const FontInfo *)EQKit::Font::STIXCollection::fontInfoGenericForCharacterWithScript(this, a2, a3);
  v7 = EQKit::Font::STIXCollection::lookupChar(this, a2, a3, 0);
  v8 = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, v7, 0, a3, v6);
  if (!v8)
  {
    if (v7 == (_DWORD)a2)
      v8 = 0;
    else
      v8 = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, a2, 0, a3, 0);
  }
  if (v8 == *((const __CFCharacterSet **)this + 14)
    || v8 == *((const __CFCharacterSet **)this + 13)
    || v8 == *((const __CFCharacterSet **)this + 18)
    || v8 == *((const __CFCharacterSet **)this + 17)
    || v8 == *((const __CFCharacterSet **)this + 20)
    || v8 == *((const __CFCharacterSet **)this + 19))
  {
    v6 = (const FontInfo *)v8;
  }
  return v6 == (const FontInfo *)v8;
}

BOOL `virtual thunk to'EQKit::Font::STIXCollection::isCharacterNaturalSizeWithScript(EQKit::Font::STIXCollection *this, uint64_t a2, const EQKit::Script::Info *a3)
{
  return EQKit::Font::STIXCollection::isCharacterNaturalSizeWithScript((EQKit::Font::STIXCollection *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 128)), a2, a3);
}

BOOL EQKit::Font::STIXCollection::isCharacterScriptingOffsetsNaturalWithScript(EQKit::Font::STIXCollection *this, uint64_t a2, const EQKit::Script::Info *a3)
{
  const FontInfo *v6;
  UTF32Char v7;
  const __CFCharacterSet *v8;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  _DWORD *v16;
  unsigned int v17;

  v6 = (const FontInfo *)EQKit::Font::STIXCollection::fontInfoGenericForCharacterWithScript(this, a2, a3);
  v7 = EQKit::Font::STIXCollection::lookupChar(this, a2, a3, 0);
  v8 = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, v7, 0, a3, v6);
  if (!v8)
  {
    if (v7 == (_DWORD)a2)
      v8 = 0;
    else
      v8 = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, a2, 0, a3, 0);
  }
  if (v6 != (const FontInfo *)v8)
    return 0;
  v10 = *((_QWORD *)this + 46);
  if (!v10)
    return 1;
  v11 = *(_DWORD **)v10;
  v12 = *(_DWORD **)(v10 + 8);
  if (v12 != v11)
  {
    v13 = v12 - v11;
    do
    {
      v14 = v13 >> 1;
      v15 = &v11[v13 >> 1];
      v17 = *v15;
      v16 = v15 + 1;
      v13 += ~(v13 >> 1);
      if (v17 < a2)
        v11 = v16;
      else
        v13 = v14;
    }
    while (v13);
  }
  return v11 == v12 || *v11 != (_DWORD)a2;
}

BOOL `virtual thunk to'EQKit::Font::STIXCollection::isCharacterScriptingOffsetsNaturalWithScript(EQKit::Font::STIXCollection *this, uint64_t a2, const EQKit::Script::Info *a3)
{
  return EQKit::Font::STIXCollection::isCharacterScriptingOffsetsNaturalWithScript((EQKit::Font::STIXCollection *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 136)), a2, a3);
}

BOOL EQKit::Font::STIXCollection::isCharacterSymmetricWithScript(EQKit::Font::STIXCollection *this, uint64_t a2, const EQKit::Script::Info *a3)
{
  const FontInfo *v6;
  UTF32Char v7;
  const __CFCharacterSet *v8;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  _DWORD *v16;
  unsigned int v17;

  v6 = (const FontInfo *)EQKit::Font::STIXCollection::fontInfoGenericForCharacterWithScript(this, a2, a3);
  v7 = EQKit::Font::STIXCollection::lookupChar(this, a2, a3, 0);
  v8 = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, v7, 0, a3, v6);
  if (!v8)
  {
    if (v7 == (_DWORD)a2)
      v8 = 0;
    else
      v8 = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, a2, 0, a3, 0);
  }
  if (v6 != (const FontInfo *)v8)
    return 0;
  v10 = *((_QWORD *)this + 46);
  if (!v10)
    return 1;
  v11 = *(_DWORD **)v10;
  v12 = *(_DWORD **)(v10 + 8);
  if (v12 != v11)
  {
    v13 = v12 - v11;
    do
    {
      v14 = v13 >> 1;
      v15 = &v11[v13 >> 1];
      v17 = *v15;
      v16 = v15 + 1;
      v13 += ~(v13 >> 1);
      if (v17 < a2)
        v11 = v16;
      else
        v13 = v14;
    }
    while (v13);
  }
  return v11 == v12 || *v11 != (_DWORD)a2;
}

BOOL `virtual thunk to'EQKit::Font::STIXCollection::isCharacterSymmetricWithScript(EQKit::Font::STIXCollection *this, uint64_t a2, const EQKit::Script::Info *a3)
{
  return EQKit::Font::STIXCollection::isCharacterSymmetricWithScript((EQKit::Font::STIXCollection *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 144)), a2, a3);
}

CGFloat EQKit::Font::STIXCollection::naturalBoundsOfCharacterWithScript(EQKit::Font::STIXCollection *this, uint64_t a2, CGFloat *a3)
{
  int v4;
  UTF32Char v6;
  const __CFCharacterSet *v7;
  CGSize v8;
  const __CTFont *v9;
  const __CTFont *CopyWithAttributes;
  const __CTFont *v11;
  unsigned int v12;
  CFIndex v13;
  CGGlyph glyphs[2];
  UniChar characters[2];
  CGGlyph v17;
  CGRect boundingRects;

  v4 = a2;
  v6 = EQKit::Font::STIXCollection::lookupChar(this, a2, (const EQKit::Script::Info *)a3, 0);
  v7 = EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, v6, 0, (const EQKit::Script::Info *)a3, 0);
  v8 = *(CGSize *)(MEMORY[0x24BDBF090] + 16);
  boundingRects.origin = (CGPoint)*MEMORY[0x24BDBF090];
  boundingRects.size = v8;
  if (v7)
  {
    v9 = *(const __CTFont **)v7;
    if (v9)
    {
      CopyWithAttributes = CTFontCreateCopyWithAttributes(v9, a3[2], 0, 0);
      v17 = -1;
      if (CopyWithAttributes)
      {
        v11 = CopyWithAttributes;
        if ((v4 - 0x10000) >> 20)
        {
          v13 = 1;
          LOWORD(v12) = v4;
        }
        else
        {
          v12 = ((v4 + 67043328) >> 10) - 10240;
          characters[1] = v4 & 0x3FF | 0xDC00;
          v13 = 2;
        }
        characters[0] = v12;
        if (CTFontGetGlyphsForCharacters(CopyWithAttributes, characters, glyphs, v13))
        {
          v17 = glyphs[0];
          if (glyphs[0] != 0xFFFF)
          {
            CTFontGetBoundingRectsForGlyphs(v11, kCTFontOrientationHorizontal, &v17, &boundingRects, 1);
            boundingRects.origin.y = -CGRectGetMaxY(boundingRects);
          }
        }
        CFRelease(v11);
      }
    }
  }
  return boundingRects.origin.x;
}

CGFloat `virtual thunk to'EQKit::Font::STIXCollection::naturalBoundsOfCharacterWithScript(EQKit::Font::STIXCollection *this, uint64_t a2, CGFloat *a3)
{
  return EQKit::Font::STIXCollection::naturalBoundsOfCharacterWithScript((EQKit::Font::STIXCollection *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 152)), a2, a3);
}

double EQKit::Font::STIXCollection::ruleThicknessWithScript(const __CFCharacterSet **this, CGFloat *a2)
{
  const __CFCharacterSet *v3;
  double v4;
  const __CTFont *v5;
  const __CTFont *CopyWithAttributes;
  const __CTFont *v7;
  const __CTFont *v8;
  EQKitPath *v9;
  EQKitPath *v10;
  CGFloat *v11;

  v3 = EQKit::Font::STIXCollection::lookupFontForCh(this, 0x2212u, 0, (const EQKit::Script::Info *)a2, 0);
  v4 = 0.0;
  if (v3)
  {
    v5 = *(const __CTFont **)v3;
    if (v5)
    {
      CopyWithAttributes = CTFontCreateCopyWithAttributes(v5, a2[2], 0, 0);
      if (CopyWithAttributes)
      {
        v8 = CopyWithAttributes;
        v9 = EQKitPath::newPathFromCharacterWithFont((EQKitPath *)0x2212, CopyWithAttributes, v7);
        if (v9)
        {
          v10 = v9;
          if (*((_BYTE *)v9 + 120))
            v11 = (CGFloat *)((char *)v9 + 88);
          else
            v11 = EQKitPath::computePathBounds((CGFloat *)v9);
          v4 = v11[3];
          EQKitPath::~EQKitPath(v10);
          MEMORY[0x219A153B8]();
        }
        CFRelease(v8);
      }
    }
  }
  return v4;
}

uint64_t EQKit::Font::STIXCollection::SizeVariant::fontInfoForCharacterWithScript(uint64_t a1, unsigned int a2, int a3, uint64_t a4, int a5, double a6)
{
  double v11;
  unint64_t v12;
  _QWORD *v13;
  _DWORD v15[15];
  unsigned int v16;

  v16 = a2;
  EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::lookup(*(uint64_t ***)(a1 + 48), &v16, (uint64_t)v15);
  if (v15[12] != a3)
    return 0;
  v11 = *(double *)(a4 + 16);
  if (v11 == 0.0)
    return 0;
  v12 = EQKit::Font::STIXCollection::StretchInfo::sizeIndexMatchingLength((EQKit::Font::STIXCollection::StretchInfo *)v15, a6 * 12.0 / v11, 0.0, a5);
  if (v12 > 5)
    return 0;
  v13 = *(_QWORD **)(a1 + 8 * v12);
  if (!v13)
    return 0;
  if (*v13)
    return *(_QWORD *)(a1 + 8 * v12);
  return 0;
}

_QWORD *EQKit::Font::STIXCollection::lookupStemStretchConfig(EQKit::Font::STIXCollection *this, int a2, CTFontRef font)
{
  _QWORD *v3;
  __CFString *v6;
  __CFString *v7;
  uint64_t v8;
  _QWORD *v9;
  _DWORD v11[2];
  std::string __p;
  std::string v13;

  v3 = 0;
  if (font && *((_QWORD *)this + 41))
  {
    v6 = (__CFString *)CTFontCopyPostScriptName(font);
    if (v6)
    {
      v7 = v6;
      std::string::basic_string[abi:nn180100]<0>(&v13, (char *)-[__CFString UTF8String](v6, "UTF8String"));
      v8 = *((_QWORD *)this + 41);
      v11[0] = a2;
      v11[1] = 13;
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
      else
        __p = v13;
      v9 = std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::find<EQKit::Font::CharacterProperty::Map::Key>(v8 + 48, (uint64_t)v11);
      if ((_QWORD *)(v8 + 56) == v9)
        v3 = 0;
      else
        v3 = v9 + 8;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      CFRelease(v7);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v13.__r_.__value_.__l.__data_);
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void sub_21794FDC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CGPath *EQKit::Font::STIXCollection::newCGPathForStretchedCharacterWithScript(EQKit::Font::STIXCollection *this, uint64_t a2, uint64_t a3, EQKit::Script::Info *a4, CGSize *a5, double a6)
{
  unsigned int v12;
  char *v13;
  char *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  CGPath *v20;
  double v21;
  const __CTFont *CopyWithAttributes;
  const __CTFont *v23;
  unsigned int v24;
  CFIndex v25;
  double v26;
  double MinX;
  double width;
  char v29;
  uint64_t **v30;
  CGFloat height;
  unint64_t *v32;
  unint64_t v33;
  CGRect characters[3];
  CGSize glyphs;
  CGGlyph width_low;
  CGSize v38;

  v12 = (*((_DWORD *)a4 + 3) - 2) & 0xFFFFFFFD;
  if (v12)
    v13 = (char *)this + 168;
  else
    v13 = (char *)this + 224;
  if (((*((_DWORD *)a4 + 3) - 2) & 0xFFFFFFFD) != 0)
    v14 = 0;
  else
    v14 = (char *)this + 168;
  v38 = (CGSize)*MEMORY[0x24BDBF148];
  if ((_DWORD)a3 == 2)
  {
    v15 = *((_QWORD *)this + 42);
    if (v15)
      v16 = EQKit::Font::Metric::LengthEntry::resolveWithScriptAndRule((EQKit::Font::Metric::LengthEntry *)(v15 + 10752), a4, 0.0);
    else
      v16 = 0.0;
    a6 = v16 + a6;
  }
  v17 = EQKit::Font::STIXCollection::lookupChar(this, a2, a4, 1);
  v18 = EQKit::Font::STIXCollection::SizeVariant::fontInfoForCharacterWithScript((uint64_t)v13, v17, a3, (uint64_t)a4, 1, a6);
  if (v18)
    v19 = 0;
  else
    v19 = v12 == 0;
  if (v19)
    v18 = EQKit::Font::STIXCollection::SizeVariant::fontInfoForCharacterWithScript((uint64_t)v14, v17, a3, (uint64_t)a4, 1, a6);
  if (!v18)
    v18 = (uint64_t)EQKit::Font::STIXCollection::lookupFontForCh((const __CFCharacterSet **)this, v17, 0, a4, 0);
  v20 = (CGPath *)(*(uint64_t (**)(EQKit::Font::STIXCollection *, uint64_t, uint64_t))(*(_QWORD *)this + 96))(this, v17, a3);
  width_low = -1;
  v21 = 0.0;
  if (!v18)
    goto LABEL_25;
  if (!*(_QWORD *)v18)
  {
    LODWORD(v18) = 0;
LABEL_25:
    v23 = 0;
    goto LABEL_39;
  }
  CopyWithAttributes = CTFontCreateCopyWithAttributes(*(CTFontRef *)v18, *((CGFloat *)a4 + 2), 0, 0);
  v23 = CopyWithAttributes;
  if ((v17 - 1114112) >= 0xFFF00000)
  {
    v24 = ((v17 + 67043328) >> 10) - 10240;
    WORD1(characters[0].origin.x) = v17 & 0x3FF | 0xDC00;
  }
  else
  {
    LOWORD(v24) = v17;
  }
  LOWORD(characters[0].origin.x) = v24;
  if (!CopyWithAttributes)
  {
    LODWORD(v18) = 0;
LABEL_39:
    v26 = 0.0;
    MinX = 0.0;
    if (!v20)
      goto LABEL_41;
    goto LABEL_40;
  }
  if ((v17 - 1114112) < 0xFFF00000)
    v25 = 1;
  else
    v25 = 2;
  if (!CTFontGetGlyphsForCharacters(CopyWithAttributes, (const UniChar *)characters, (CGGlyph *)&glyphs, v25)
    || (width_low = LOWORD(glyphs.width), LOWORD(glyphs.width) == 0xFFFF))
  {
    LODWORD(v18) = 1;
    goto LABEL_39;
  }
  CTFontGetBoundingRectsForGlyphs(v23, kCTFontOrientationHorizontal, &width_low, characters, 1);
  CTFontGetAdvancesForGlyphs(v23, kCTFontOrientationHorizontal, &width_low, &glyphs, 1);
  v26 = 0.0;
  MinX = 0.0;
  if ((_DWORD)a3 == 2)
  {
    MinX = CGRectGetMinX(characters[0]);
    width = glyphs.width;
    v26 = width - CGRectGetWidth(characters[0]) - MinX;
    v21 = -CGRectGetMinY(characters[0]);
  }
  LODWORD(v18) = 1;
  if (v20)
  {
LABEL_40:
    EQKitCompositeGlyph::EQKitCompositeGlyph(characters, a4, a3, v20);
    v20 = EQKitCompositeGlyph::createPathWithLength((EQKitCompositeGlyph *)characters, a6, &v38);
    EQKitCompositeGlyph::~EQKitCompositeGlyph((EQKitCompositeGlyph *)characters);
  }
LABEL_41:
  v29 = v18 ^ 1;
  if (v20)
    v29 = 1;
  if ((v29 & 1) == 0)
  {
    v30 = (uint64_t **)*((_QWORD *)this + 49);
    EQKit::Font::STIXCollection::stemStretchKey((const __CFCharacterSet **)this, (const __CTFont *)v17, (uint64_t)a4, a3, (uint64_t)characters);
    EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::lookup(v30, (const EQKit::StemStretch::Key *)characters, &glyphs);
    EQKit::StemStretch::Key::~Key((const void **)characters);
    if (*(_QWORD *)&glyphs.width && **(_DWORD **)&glyphs.width == (_DWORD)a3)
      v20 = EQKit::StemStretch::Glyph::newPathWithLength(*(EQKit::StemStretch::Glyph **)&glyphs.width, a6, &v38);
    else
      v20 = 0;
    height = glyphs.height;
    if (*(_QWORD *)&glyphs.height)
    {
      v32 = (unint64_t *)(*(_QWORD *)&glyphs.height + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        (*(void (**)(CGFloat))(**(_QWORD **)&height + 16))(COERCE_CGFLOAT(*(_QWORD *)&height));
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&height);
      }
    }
  }
  if (v20)
  {
    *a5 = v38;
    a5[1].width = MinX;
    a5[1].height = v26;
    a5[2].width = v21;
  }
  if ((_DWORD)v18)
    CFRelease(v23);
  return v20;
}

void sub_21795019C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

CGPath *`virtual thunk to'EQKit::Font::STIXCollection::newCGPathForStretchedCharacterWithScript(_QWORD *a1, uint64_t a2, uint64_t a3, EQKit::Script::Info *a4, CGSize *a5, double a6)
{
  return EQKit::Font::STIXCollection::newCGPathForStretchedCharacterWithScript((EQKit::Font::STIXCollection *)((char *)a1 + *(_QWORD *)(*a1 - 104)), a2, a3, a4, a5, a6);
}

EQKit::Font::STIXCollection::SizeVariant *EQKit::Font::STIXCollection::SizeVariant::SizeVariant(EQKit::Font::STIXCollection::SizeVariant *this, const EQKitCacheLRUCounter *a2)
{
  uint64_t v4;
  _QWORD v6[5];

  v4 = operator new();
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3221225472;
  v6[2] = ___ZN5EQKit4Font14STIXCollection11SizeVariantC2ERK20EQKitCacheLRUCounter_block_invoke;
  v6[3] = &__block_descriptor_40_e33_B24__0r_I8__StretchInfo__6d_iC_16l;
  v6[4] = this;
  EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::EQKitCache(v4, (uint64_t)a2, v6);
  *((_QWORD *)this + 6) = v4;
  EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::setThreshold(v4, 0x3E8uLL, 0x2EEuLL);
  bzero(this, 0x30uLL);
  return this;
}

void sub_21795028C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A153B8](v1, 0x10E0C40B27302BALL);
  _Unwind_Resume(a1);
}

uint64_t ___ZN5EQKit4Font14STIXCollection11SizeVariantC2ERK20EQKitCacheLRUCounter_block_invoke(uint64_t a1, UTF32Char *a2, uint64_t a3)
{
  EQKit::Font::STIXCollection::StretchInfo::setupForCharacterWithVariant(a3, *a2, *(_QWORD *)(a1 + 32));
  return 1;
}

double EQKit::Font::STIXCollection::StretchInfo::setupForCharacterWithVariant(uint64_t a1, UTF32Char theChar, uint64_t a3)
{
  uint64_t v6;
  int v7;
  unint64_t v8;
  char *v9;
  double *v10;
  __int128 v11;
  CTFontRef *v12;
  const __CFCharacterSet *v13;
  const __CTFont *v14;
  EQKitPath *v15;
  EQKitPath *v16;
  CGFloat *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double *v24;
  char v25;
  double v26;
  double v27;
  double v28;
  _BOOL4 v29;
  int v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char v35;
  _QWORD v36[12];

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v36[11] = *MEMORY[0x24BDAC8D0];
  v9 = &v35;
  v10 = (double *)MEMORY[0x24BDBF148];
  do
  {
    v11 = *(_OWORD *)v10;
    *(_OWORD *)v9 = *(_OWORD *)v10;
    v12 = *(CTFontRef **)(a3 + 8 * v6);
    if (v12)
    {
      v13 = v12[1];
      if (v13)
      {
        if (CFCharacterSetIsLongCharacterMember(v13, theChar))
        {
          if (*v12)
          {
            v15 = EQKitPath::newPathFromCharacterWithFont((EQKitPath *)(unsigned __int16)theChar, *v12, v14);
            if (v15)
            {
              v16 = v15;
              if (*((_BYTE *)v15 + 120))
                v17 = (CGFloat *)((char *)v15 + 88);
              else
                v17 = EQKitPath::computePathBounds((CGFloat *)v15);
              *(_OWORD *)v9 = *((_OWORD *)v17 + 1);
              v7 |= 1 << v6;
              ++v8;
              EQKitPath::~EQKitPath(v16);
              MEMORY[0x219A153B8](v18, 0x1070C40036CD406, v19, v20);
            }
          }
        }
      }
    }
    ++v6;
    v9 += 16;
  }
  while (v6 != 6);
  *(_BYTE *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  if (v8 > 1)
  {
    v21 = 0;
    v22 = *v10;
    v23 = v10[1];
    v24 = (double *)v36;
    v25 = 1;
    v26 = *v10;
    v27 = v23;
    do
    {
      if (((v7 >> v21) & 1) != 0)
      {
        v22 = *(v24 - 1);
        v23 = *v24;
        if ((v25 & 1) != 0)
        {
          v27 = *v24;
          v26 = *(v24 - 1);
        }
        v25 = 0;
      }
      ++v21;
      v24 += 2;
    }
    while (v21 != 6);
    *(double *)&v11 = v22 - v26;
    v28 = v23 - v27;
    if (*(double *)&v11 <= 0.0 || v28 <= 0.0)
    {
      if (*(double *)&v11 <= 0.0 && v28 > 0.0)
        v30 = 2;
      else
        v30 = *(double *)&v11 > 0.0;
      v29 = *(double *)&v11 > 0.0 && (*(double *)&v11 > 0.0 || v28 <= 0.0);
      if (*(double *)&v11 <= 0.0 && (*(double *)&v11 > 0.0 || v28 <= 0.0))
        return *(double *)&v11;
    }
    else
    {
      v29 = *(double *)&v11 > v28;
      if (*(double *)&v11 > v28)
        v30 = 1;
      else
        v30 = 2;
    }
    v31 = 0;
    *(_DWORD *)(a1 + 48) = v30;
    *(_BYTE *)(a1 + 52) = v7;
    v32 = &v35;
    do
    {
      v33 = v32 + 8;
      if (v29)
        v33 = v32;
      *(_QWORD *)&v11 = *(_QWORD *)v33;
      *(_QWORD *)(a1 + v31) = *(_QWORD *)v33;
      v31 += 8;
      v32 += 16;
    }
    while (v31 != 48);
  }
  return *(double *)&v11;
}

uint64_t EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::setThreshold(uint64_t a1, unint64_t a2, unint64_t a3)
{
  pthread_rwlock_t *v6;
  unint64_t v7;

  v6 = (pthread_rwlock_t *)(a1 + 72);
  pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 72));
  if (a2 >= a3)
    v7 = a3;
  else
    v7 = a2;
  *(_QWORD *)(a1 + 56) = a2;
  *(_QWORD *)(a1 + 64) = v7;
  if (*(_QWORD *)(a1 + 32) > a2)
    *(_BYTE *)(a1 + 48) = 1;
  pthread_rwlock_unlock(v6);
  return EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::prune((uint64_t **)a1);
}

void EQKit::Font::STIXCollection::SizeVariant::~SizeVariant(EQKit::Font::STIXCollection::SizeVariant *this)
{
  uint64_t i;
  EQKit::Font::STIXCollection::FontInfo *v3;

  for (i = 0; i != 48; i += 8)
  {
    v3 = *(EQKit::Font::STIXCollection::FontInfo **)((char *)this + i);
    if (v3)
    {
      EQKit::Font::STIXCollection::FontInfo::~FontInfo(v3);
      MEMORY[0x219A153B8]();
      *(_QWORD *)((char *)this + i) = 0;
    }
  }
}

uint64_t EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::prune(uint64_t **a1)
{
  pthread_rwlock_t *v2;
  int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t *v6;
  char *v7;
  uint64_t v8;
  int v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  char *__p;
  char *v27;
  char *v28;
  BOOL (*v29)(uint64_t, uint64_t);

  v2 = (pthread_rwlock_t *)(a1 + 9);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 9));
  v3 = *((unsigned __int8 *)a1 + 48);
  result = pthread_rwlock_unlock(v2);
  if (v3)
  {
    pthread_rwlock_wrlock(v2);
    if (*((_BYTE *)a1 + 48))
    {
      v5 = **a1;
      __p = 0;
      v27 = 0;
      v28 = 0;
      v6 = a1[3];
      if (v6)
      {
        v7 = 0;
        do
        {
          v8 = v5 - v6[10];
          v9 = *((_DWORD *)v6 + 4);
          if (v7 >= v28)
          {
            v10 = __p;
            v11 = (v7 - __p) >> 4;
            v12 = v11 + 1;
            if ((unint64_t)(v11 + 1) >> 60)
              abort();
            v13 = v28 - __p;
            if ((v28 - __p) >> 3 > v12)
              v12 = v13 >> 3;
            if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
              v14 = 0xFFFFFFFFFFFFFFFLL;
            else
              v14 = v12;
            if (v14)
            {
              v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLength>>((uint64_t)&v28, v14);
              v10 = __p;
              v7 = v27;
            }
            else
            {
              v15 = 0;
            }
            v16 = &v15[16 * v11];
            *(_DWORD *)v16 = v9;
            *((_QWORD *)v16 + 1) = v8;
            v17 = v16;
            if (v7 != v10)
            {
              do
              {
                *((_OWORD *)v17 - 1) = *((_OWORD *)v7 - 1);
                v17 -= 16;
                v7 -= 16;
              }
              while (v7 != v10);
              v10 = __p;
            }
            v7 = v16 + 16;
            __p = v17;
            v28 = &v15[16 * v14];
            if (v10)
              operator delete(v10);
          }
          else
          {
            *(_DWORD *)v7 = v9;
            *((_QWORD *)v7 + 1) = v8;
            v7 += 16;
          }
          v27 = v7;
          v6 = (uint64_t *)*v6;
        }
        while (v6);
        v18 = (uint64_t)__p;
      }
      else
      {
        v7 = 0;
        v18 = 0;
      }
      v19 = 126 - 2 * __clz((uint64_t)&v7[-v18] >> 4);
      v29 = EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::compareKeyLRU;
      if (v7 == (char *)v18)
        v20 = 0;
      else
        v20 = v19;
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*,false>(v18, (int *)v7, (uint64_t (**)(int *, int *))&v29, v20, 1);
      v21 = __p;
      v22 = (v27 - __p) >> 4;
      v23 = a1[8];
      v24 = v22 - (_QWORD)v23;
      if (v22 > (unint64_t)v23)
      {
        v25 = 16 * (_QWORD)v23;
        do
        {
          if (std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::find<unsigned int>(a1 + 1, (unsigned int *)&__p[v25]))
          {
            std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::__erase_unique<unsigned int>(a1 + 1, (unsigned int *)&__p[v25]);
          }
          v25 += 16;
          --v24;
        }
        while (v24);
        v21 = __p;
      }
      *((_BYTE *)a1 + 48) = 0;
      if (v21)
        operator delete(v21);
    }
    return pthread_rwlock_unlock(v2);
  }
  return result;
}

void sub_2179507E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t EQKit::Font::STIXCollection::StretchInfo::sizeIndexMatchingLength(EQKit::Font::STIXCollection::StretchInfo *this, double a2, double a3, int a4)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;

  v4 = 0;
  v5 = 0.0;
  v6 = 0x7FFFFFFFFFFFFFFFLL;
  v7 = 0x7FFFFFFFFFFFFFFFLL;
  while (((*((unsigned __int8 *)this + 52) >> v4) & 1) == 0)
  {
    v9 = v7;
    v8 = v5;
LABEL_10:
    ++v4;
    v5 = v8;
    v7 = v9;
    if (v4 == 6)
      goto LABEL_11;
  }
  v8 = *((double *)this + v4);
  if (v8 + a3 <= a2)
  {
    v9 = v7;
    v8 = v5;
    goto LABEL_8;
  }
  if (v7 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v9 = v4;
LABEL_8:
    v6 = v4;
    goto LABEL_10;
  }
  v9 = v4;
  v6 = v4;
  if (vabdd_f64(v5, a2) >= vabdd_f64(v8, a2))
    goto LABEL_10;
  v9 = v7;
  v6 = v4;
LABEL_11:
  if (a4)
    v10 = v6;
  else
    v10 = 0x7FFFFFFFFFFFFFFFLL;
  if (v9 == 0x7FFFFFFFFFFFFFFFLL)
    return v10;
  else
    return v9;
}

uint64_t EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::lookup@<X0>(uint64_t **a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  pthread_rwlock_t *v6;
  uint64_t *v7;
  __int128 v8;
  __int128 v9;
  uint64_t result;
  uint64_t *v11;
  __int128 *v12;
  char *v13;
  _QWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[3];
  int v20;
  char v21;
  uint64_t v22;
  unsigned int *v23;

  *(_DWORD *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 52) = -1;
  v6 = (pthread_rwlock_t *)(a1 + 9);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 9));
  v7 = std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::find<unsigned int>(a1 + 1, a2);
  if (!v7)
  {
    pthread_rwlock_unlock(v6);
    v20 = 0;
    v21 = -1;
    v22 = 0;
    result = ((uint64_t (*)(void))a1[34][2])();
    if (!(_DWORD)result)
      return result;
    pthread_rwlock_wrlock(v6);
    v11 = std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::find<unsigned int>(a1 + 1, a2);
    if (v11)
    {
      v12 = (__int128 *)(v11 + 3);
      v11[10] = **a1;
      if (v11 + 3 == (uint64_t *)a3)
        return pthread_rwlock_unlock(v6);
      *(_DWORD *)(a3 + 48) = *((_DWORD *)v11 + 18);
      v13 = (char *)v11 + 76;
    }
    else
    {
      v22 = **a1;
      v23 = a2;
      v14 = std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)(a1 + 1), a2, (uint64_t)&std::piecewise_construct, &v23);
      if (v14 + 3 != (_QWORD *)v19)
      {
        *((_DWORD *)v14 + 18) = v20;
        *((_BYTE *)v14 + 76) = v21;
        v16 = v19[1];
        v15 = v19[2];
        *(_OWORD *)(v14 + 3) = v19[0];
        *(_OWORD *)(v14 + 5) = v16;
        *(_OWORD *)(v14 + 7) = v15;
      }
      v14[10] = v22;
      if (a1[4] > a1[7])
        *((_BYTE *)a1 + 48) = 1;
      if (v19 == (_OWORD *)a3)
        return pthread_rwlock_unlock(v6);
      v13 = &v21;
      *(_DWORD *)(a3 + 48) = v20;
      v12 = v19;
    }
    *(_BYTE *)(a3 + 52) = *v13;
    v17 = *v12;
    v18 = v12[2];
    *(_OWORD *)(a3 + 16) = v12[1];
    *(_OWORD *)(a3 + 32) = v18;
    *(_OWORD *)a3 = v17;
    return pthread_rwlock_unlock(v6);
  }
  v7[10] = **a1;
  if (v7 + 3 != (uint64_t *)a3)
  {
    *(_DWORD *)(a3 + 48) = *((_DWORD *)v7 + 18);
    *(_BYTE *)(a3 + 52) = *((_BYTE *)v7 + 76);
    v8 = *(_OWORD *)(v7 + 3);
    v9 = *(_OWORD *)(v7 + 7);
    *(_OWORD *)(a3 + 16) = *(_OWORD *)(v7 + 5);
    *(_OWORD *)(a3 + 32) = v9;
    *(_OWORD *)a3 = v8;
  }
  return pthread_rwlock_unlock(v6);
}

uint64_t EQKit::Font::STIXCollection::StretchInfo::StretchInfo(uint64_t this)
{
  *(_DWORD *)(this + 48) = 0;
  *(_BYTE *)(this + 52) = -1;
  return this;
}

{
  *(_DWORD *)(this + 48) = 0;
  *(_BYTE *)(this + 52) = -1;
  return this;
}

__n128 EQKit::Font::STIXCollection::StretchInfo::StretchInfo(EQKit::Font::STIXCollection::StretchInfo *this, const EQKit::Font::STIXCollection::StretchInfo *a2)
{
  __n128 result;
  __int128 v3;

  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_BYTE *)this + 52) = *((_BYTE *)a2 + 52);
  result = *(__n128 *)a2;
  v3 = *((_OWORD *)a2 + 2);
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((_OWORD *)this + 2) = v3;
  *(__n128 *)this = result;
  return result;
}

{
  __n128 result;
  __int128 v3;

  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_BYTE *)this + 52) = *((_BYTE *)a2 + 52);
  result = *(__n128 *)a2;
  v3 = *((_OWORD *)a2 + 2);
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((_OWORD *)this + 2) = v3;
  *(__n128 *)this = result;
  return result;
}

__n128 EQKit::Font::STIXCollection::StretchInfo::operator=(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  if (a1 != a2)
  {
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
    result = *(__n128 *)a2;
    v3 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v3;
    *(__n128 *)a1 = result;
  }
  return result;
}

CGPath *EQKit::Font::STIXCollection::newCGPathForRadicalWithOverbar(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, double a5, double a6, double a7)
{
  const __CTFont *v14;
  __CFString *v15;
  CGFloat *v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat MaxY;
  const __CTFontDescriptor *v20;
  CGFloat *v21;
  double v22;
  double v23;
  CGFloat v24;
  CGFloat v25;
  const EQKitLength *v26;
  double v27;
  const EQKitLength *v28;
  double v29;
  const EQKitLength *v30;
  double v31;
  const EQKitLength *v32;
  double v33;
  const EQKitLength *v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  double v45;
  CGPath *Mutable;
  CGAffineTransform v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  _BYTE v54[16];
  uint64_t v55;
  uint64_t v56;
  std::string __p;
  unint64_t *v58;
  uint64_t v59;
  _BYTE v60[32];
  char v61;
  unsigned int v62;
  CGRect v63;
  CGRect v64;
  CGRect v65;

  v62 = 8730;
  EQKitPath::EQKitPath((EQKitPath *)&v58, 0);
  memset(&__p, 0, sizeof(__p));
  v14 = (const __CTFont *)(*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t, double))(*(_QWORD *)a1 + 80))(a1, &v62, 2, a2, a5);
  if (v14)
  {
    EQKitPath::EQKitPath((EQKitPath *)v54, v14, v62);
    EQKitPath::operator=((uint64_t)&v58, (uint64_t)v54);
    EQKitPath::~EQKitPath((EQKitPath *)v54);
    if (v58)
    {
      v15 = (__CFString *)CTFontCopyPostScriptName(v14);
      MEMORY[0x219A15268](&__p, -[__CFString UTF8String](v15, "UTF8String"));
      CFRelease(v15);
      v16 = v61 ? (CGFloat *)v60 : EQKitPath::computePathBounds((CGFloat *)&v58);
      v63.origin.x = *v16;
      v63.origin.y = v16[1];
      v17 = v16[2];
      v18 = v16[3];
      v63.size.width = v17;
      v63.size.height = v18;
      MaxY = CGRectGetMaxY(v63);
      *(CGFloat *)a4 = v17;
      *(CGFloat *)(a4 + 8) = v18;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)(a4 + 24) = 0;
      *(CGFloat *)(a4 + 32) = MaxY;
      if (v58)
        goto LABEL_12;
    }
    CFRelease(v14);
  }
  else if (v58)
  {
    v14 = 0;
    goto LABEL_12;
  }
  v14 = (const __CTFont *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)a1 + 88))(a1, v62, 2, a2, a4, a5);
  if (v14)
  {
    EQKitPath::EQKitPath((EQKitPath *)v54, v14);
    EQKitPath::operator=((uint64_t)&v58, (uint64_t)v54);
    EQKitPath::~EQKitPath((EQKitPath *)v54);
    CFRelease(v14);
    MEMORY[0x219A15268](&__p, "STIXSizeOneSym-Regular");
    v62 = 9143;
    v20 = CTFontDescriptorCreateWithNameAndSize(CFSTR("STIXSizeOneSym-Regular"), *(CGFloat *)(a2 + 16));
    v14 = CTFontCreateWithFontDescriptor(v20, *(CGFloat *)(a2 + 16), 0);
    CFRelease(v20);
  }
LABEL_12:
  if (v61)
    v21 = (CGFloat *)v60;
  else
    v21 = EQKitPath::computePathBounds((CGFloat *)&v58);
  v22 = *v21;
  v23 = v21[1];
  v24 = v21[2];
  v25 = v21[3];
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v53, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v53 = __p;
  v26 = (const EQKitLength *)(*(uint64_t (**)(uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)a1 + 24))(a1, 4, &v53, v62);
  *a3 = _resolveLength(v26, v14, v27);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v52, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v52 = __p;
  v28 = (const EQKitLength *)(*(uint64_t (**)(uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)a1 + 24))(a1, 5, &v52, v62);
  a3[1] = _resolveLength(v28, v14, v29);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v51, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v51 = __p;
  v30 = (const EQKitLength *)(*(uint64_t (**)(uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)a1 + 24))(a1, 6, &v51, v62);
  a3[2] = _resolveLength(v30, v14, v31);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v50, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v50 = __p;
  v32 = (const EQKitLength *)(*(uint64_t (**)(uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)a1 + 24))(a1, 7, &v50, v62);
  a3[3] = _resolveLength(v32, v14, v33);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v49, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v49 = __p;
  v34 = (const EQKitLength *)(*(uint64_t (**)(uint64_t, uint64_t, std::string *, _QWORD))(*(_QWORD *)a1 + 24))(a1, 8, &v49, v62);
  a3[4] = _resolveLength(v34, v14, v35);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  *a3 = *(double *)(a4 + 32) + *a3;
  v64.origin.x = v22;
  v64.origin.y = v23;
  v64.size.width = v24;
  v64.size.height = v25;
  a3[1] = a3[1] - CGRectGetMinX(v64);
  v65.origin.x = v22;
  v65.origin.y = v23;
  v65.size.width = v24;
  v65.size.height = v25;
  a3[2] = a3[2] - CGRectGetMinX(v65);
  if (v14)
    CFRelease(v14);
  v36 = a3[3];
  v37 = a3[4];
  EQKitPath::findStemForEdge(&v58, 1, (uint64_t)v54);
  if (v54[0])
  {
    EQKitPath::extractPath((EQKitPath *)&v58);
    v38 = v59 + 16 * v55;
    v40 = *(double *)v38;
    v39 = *(_QWORD *)(v38 + 8);
    EQKitPath::extractPath((EQKitPath *)&v58);
    v41 = *(double *)(v59 + 16 * v56);
    if (v40 >= v41)
      v42 = *(double *)(v59 + 16 * v56);
    else
      v42 = v40;
    if (v40 > v41)
      v41 = v40;
    v43 = v36 + v37 + a6 + v41 - v42;
    v44 = v39;
    v45 = a7;
    EQKitPath::appendSubpathRect((EQKitPath *)&v58, *(CGRect *)&v42);
  }
  Mutable = CGPathCreateMutable();
  memset(&v48, 0, sizeof(v48));
  CGAffineTransformMakeTranslation(&v48, -v22, -v23);
  EQKitPath::appendToCGPath((uint64_t *)&v58, Mutable, &v48, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  EQKitPath::~EQKitPath((EQKitPath *)&v58);
  return Mutable;
}

void sub_217951060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,char a61)
{
  if (a60 < 0)
    operator delete(__p);
  EQKitPath::~EQKitPath((EQKitPath *)&a61);
  _Unwind_Resume(a1);
}

CGPath *`virtual thunk to'EQKit::Font::STIXCollection::newCGPathForRadicalWithOverbar(_QWORD *a1, uint64_t a2, double *a3, uint64_t a4, double a5, double a6, double a7)
{
  return EQKit::Font::STIXCollection::newCGPathForRadicalWithOverbar((uint64_t)a1 + *(_QWORD *)(*a1 - 176), a2, a3, a4, a5, a6, a7);
}

CGPath *EQKit::Font::STIXCollection::newCGPathForLongDivisionWithOverbar(EQKit::Font::STIXCollection *this, const EQKit::Script::Info *a2, double a3, double a4, double *a5)
{
  CGFloat MaxY;
  const CGPath *v10;
  CGPath *Mutable;
  float64x2_t v13;
  _BYTE v14[64];
  unint64_t *v15[20];
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  CGRect v19;

  v19.origin.x = (*(double (**)(EQKit::Font::STIXCollection *, uint64_t, const EQKit::Script::Info *))(*(_QWORD *)this + 136))(this, 10188, a2);
  MaxY = CGRectGetMaxY(v19);
  v16 = *MEMORY[0x24BDBF148];
  v17 = 0;
  v18 = 0;
  v10 = (const CGPath *)(*(uint64_t (**)(EQKit::Font::STIXCollection *, uint64_t, uint64_t, const EQKit::Script::Info *, __int128 *, double))(*(_QWORD *)this + 88))(this, 10188, 2, a2, &v16, a3 - MaxY);
  EQKitPath::EQKitPath((EQKitPath *)v15, v10);
  CGPathRelease(v10);
  EQKitPath::findStemForEdge(v15, 2, (uint64_t)v14);
  if (v14[0])
  {
    Mutable = CGPathCreateMutable();
    v13 = *(float64x2_t *)MEMORY[0x24BDBEFB0];
    EQKitPath::appendToCGPathWithModifiedStem((EQKitPath *)v15, Mutable, &v13, 0, (const EQKitPath::Stem *)v14, a4);
  }
  else
  {
    Mutable = 0;
  }
  EQKitPath::~EQKitPath((EQKitPath *)v15);
  return Mutable;
}

void sub_217951250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  EQKitPath::~EQKitPath((EQKitPath *)va);
  _Unwind_Resume(a1);
}

CGPath *`virtual thunk to'EQKit::Font::STIXCollection::newCGPathForLongDivisionWithOverbar(EQKit::Font::STIXCollection *this, const EQKit::Script::Info *a2, double a3, double a4, double *a5)
{
  return EQKit::Font::STIXCollection::newCGPathForLongDivisionWithOverbar((EQKit::Font::STIXCollection *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 184)), a2, a3, a4, a5);
}

uint64_t EQKit::Font::STIXCollection::fontsLoaded(EQKit::Font::STIXCollection *this)
{
  return *((unsigned __int8 *)this + 376);
}

uint64_t `virtual thunk to'EQKit::Font::STIXCollection::fontsLoaded(EQKit::Font::STIXCollection *this)
{
  return *((unsigned __int8 *)this + *(_QWORD *)(*(_QWORD *)this - 208) + 376);
}

EQKit::Font::SlantKey *EQKit::Font::SlantKey::SlantKey(EQKit::Font::SlantKey *this, CTFontRef font, int a3)
{
  unsigned int v5;
  CFIndex v6;
  CGGlyph glyphs[2];
  UniChar characters[2];

  *((_QWORD *)this + 1) = 0;
  *((_WORD *)this + 8) = -1;
  *((_DWORD *)this + 5) = a3;
  if (font)
  {
    if ((a3 - 0x10000) >> 20)
    {
      v6 = 1;
      LOWORD(v5) = a3;
    }
    else
    {
      v5 = ((a3 + 67043328) >> 10) - 10240;
      characters[1] = a3 & 0x3FF | 0xDC00;
      v6 = 2;
    }
    characters[0] = v5;
    if (CTFontGetGlyphsForCharacters(font, characters, glyphs, v6))
      *((_WORD *)this + 8) = glyphs[0];
    *(_QWORD *)this = CTFontCopyPostScriptName(font);
    *((CGFloat *)this + 1) = CTFontGetSize(font);
  }
  return this;
}

EQKit::Font::SlantKey *EQKit::Font::SlantKey::SlantKey(EQKit::Font::SlantKey *this, const EQKit::Font::SlantKey *a2)
{
  const void *v3;

  v3 = *(const void **)a2;
  *(_QWORD *)this = *(_QWORD *)a2;
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  if (v3)
    CFRetain(v3);
  return this;
}

{
  const void *v3;

  v3 = *(const void **)a2;
  *(_QWORD *)this = *(_QWORD *)a2;
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  if (v3)
    CFRetain(v3);
  return this;
}

uint64_t EQKit::Font::SlantKey::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;

  if (a1 != a2)
  {
    v4 = *(const void **)a1;
    if (*(_QWORD *)a1)
      CFRelease(v4);
    v5 = *(const void **)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    if (v5)
      CFRetain(v5);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  }
  return a1;
}

BOOL EQKit::Font::SlantKey::operator==(uint64_t a1, uint64_t a2)
{
  const __CFString *v2;
  const __CFString *v3;
  _BOOL8 result;

  if (a1 == a2)
    return 1;
  if (*(unsigned __int16 *)(a1 + 16) != *(unsigned __int16 *)(a2 + 16)
    || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)
    || *(double *)(a1 + 8) != *(double *)(a2 + 8))
  {
    return 0;
  }
  v2 = *(const __CFString **)a1;
  v3 = *(const __CFString **)a2;
  if (*(const __CFString **)a1 == v3)
    return 1;
  result = 0;
  if (v2 && v3)
    return CFStringCompare(v2, v3, 0) == kCFCompareEqualTo;
  return result;
}

BOOL EQKit::Font::SlantKey::operator<(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  double v7;
  double v8;
  const __CFString *v9;
  const __CFString *v10;
  BOOL v11;

  v2 = *(unsigned __int16 *)(a1 + 16);
  v3 = *(unsigned __int16 *)(a2 + 16);
  if (v2 < v3)
    return 1;
  if (v2 != v3)
    return 0;
  v4 = *(_DWORD *)(a1 + 20);
  v5 = *(_DWORD *)(a2 + 20);
  if (v4 < v5)
    return 1;
  if (v4 != v5)
    return 0;
  v7 = *(double *)(a1 + 8);
  v8 = *(double *)(a2 + 8);
  if (v7 < v8)
    return 1;
  if (v7 != v8)
    return 0;
  v9 = *(const __CFString **)a1;
  v10 = *(const __CFString **)a2;
  if (v9 && v10)
    return CFStringCompare(v9, v10, 0) == kCFCompareLessThan;
  if (v9)
    v11 = 1;
  else
    v11 = v10 == 0;
  return !v11;
}

_QWORD *std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::find<EQKit::Font::CharacterProperty::Map::Key>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _BOOL4 v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = EQKit::Font::CharacterProperty::Map::Key::operator<((uint64_t)(v3 + 4), a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || EQKit::Font::CharacterProperty::Map::Key::operator<(a2, (uint64_t)(v5 + 4)))
    return v2;
  return v5;
}

BOOL EQKit::Font::CharacterProperty::Map::Key::operator<(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  size_t v13;
  size_t v14;
  size_t v15;
  int v16;

  if (*(_DWORD *)a1 < *(_DWORD *)a2)
    return 1;
  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    return 0;
  v3 = *(_DWORD *)(a1 + 4);
  v4 = *(_DWORD *)(a2 + 4);
  if (v3 < v4)
    return 1;
  if (v3 != v4)
    return 0;
  v7 = *(_QWORD *)(a2 + 8);
  v5 = a2 + 8;
  v6 = v7;
  v8 = *(char *)(v5 + 23);
  v11 = *(_QWORD *)(a1 + 8);
  v9 = a1 + 8;
  v10 = v11;
  v12 = *(char *)(v9 + 23);
  if (v12 >= 0)
    v13 = *(unsigned __int8 *)(v9 + 23);
  else
    v13 = *(_QWORD *)(v9 + 8);
  if (v12 < 0)
    v9 = v10;
  if (v8 >= 0)
    v14 = *(unsigned __int8 *)(v5 + 23);
  else
    v14 = *(_QWORD *)(v5 + 8);
  if (v8 < 0)
    v5 = v6;
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = memcmp((const void *)v9, (const void *)v5, v15);
  if (v16)
    return v16 < 0;
  else
    return v13 < v14;
}

void EQKit::Font::CharacterProperty::Map::~Map(char **this)
{
  std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::destroy((uint64_t)(this + 6), this[7]);
  std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::destroy((uint64_t)(this + 3), this[4]);
  std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::destroy((uint64_t)this, this[1]);
}

void std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[63] < 0)
      operator delete(*((void **)a2 + 5));
    operator delete(a2);
  }
}

uint64_t ___ZL22_ensureFontsDownloadedP7NSArrayIP8NSStringE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v7 = 138543618;
    v8 = v4;
    v9 = 2114;
    v10 = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", a2);
    _os_log_impl(&dword_2178E2000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "#STIX fontFamily: %{public}@ fontUpdate: %{public}@", (uint8_t *)&v7, 0x16u);
  }
  if ((a2 - 6) >= 2 && (_DWORD)a2 != 1)
  {
    if ((_DWORD)a2 != 8)
      return 1;
    os_unfair_lock_lock((os_unfair_lock_t)&_downloadFailuresLock);
    objc_msgSend(*(id *)(a1 + 40), "addObject:", *(_QWORD *)(a1 + 32));
    os_unfair_lock_unlock((os_unfair_lock_t)&_downloadFailuresLock);
  }
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  if (!*(_BYTE *)(v5 + 24))
  {
    *(_BYTE *)(v5 + 24) = 1;
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
  }
  return 0;
}

EQKit::Font::STIXCollection::FontInfo *EQKit::Font::STIXCollection::FontInfo::FontInfo(EQKit::Font::STIXCollection::FontInfo *this, CFStringRef name)
{
  CFCharacterSetRef *v3;
  char *v4;
  const __CTFontDescriptor *v5;
  uint64_t v6;
  __CFString *v7;
  __CFString *v8;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)((char *)this + 8) = 0u;
  v3 = (CFCharacterSetRef *)((char *)this + 8);
  v4 = (char *)this + 16;
  *(_OWORD *)((char *)this + 24) = 0u;
  v5 = CTFontDescriptorCreateWithNameAndSize(name, 12.0);
  *(_QWORD *)this = CTFontCreateWithFontDescriptor(v5, 12.0, 0);
  CFRelease(v5);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v6 = *(_QWORD *)this;
    v10 = 138412290;
    v11 = v6;
    _os_log_impl(&dword_2178E2000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "#STIX Created font: %@", (uint8_t *)&v10, 0xCu);
  }
  if (*(_QWORD *)this)
  {
    v7 = (__CFString *)CTFontCopyPostScriptName(*(CTFontRef *)this);
    v8 = v7;
    if (v7)
    {
      MEMORY[0x219A15268](v4, -[__CFString UTF8String](v7, "UTF8String"));
      CFRelease(v8);
    }
    *v3 = CTFontCopyCharacterSet(*(CTFontRef *)this);
  }
  return this;
}

void sub_217951984(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void EQKit::Font::STIXCollection::FontInfo::~FontInfo(EQKit::Font::STIXCollection::FontInfo *this)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)this;
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)this = 0;
  }
  v3 = (const void *)*((_QWORD *)this + 1);
  if (v3)
  {
    CFRelease(v3);
    *((_QWORD *)this + 1) = 0;
  }
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

void sub_2179519F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*(void **)(v1 + 16));
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::destroy(uint64_t a1, const void **a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::destroy(a1, a2[1]);
    EQKit::Font::CompositeStretch::~CompositeStretch(a2 + 5);
    operator delete(a2);
  }
}

_QWORD *std::shared_ptr<EQKit::StemStretch::Glyph>::shared_ptr[abi:nn180100]<EQKit::StemStretch::Glyph,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D829210;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_217951ABC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<EQKit::StemStretch::Glyph>::reset[abi:nn180100]((EQKit::StemStretch::Glyph **)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<EQKit::StemStretch::Glyph *,std::shared_ptr<EQKit::StemStretch::Glyph>::__shared_ptr_default_delete<EQKit::StemStretch::Glyph,EQKit::StemStretch::Glyph>,std::allocator<EQKit::StemStretch::Glyph>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A153B8);
}

EQKit::StemStretch::Glyph *std::__shared_ptr_pointer<EQKit::StemStretch::Glyph *,std::shared_ptr<EQKit::StemStretch::Glyph>::__shared_ptr_default_delete<EQKit::StemStretch::Glyph,EQKit::StemStretch::Glyph>,std::allocator<EQKit::StemStretch::Glyph>>::__on_zero_shared(uint64_t a1)
{
  EQKit::StemStretch::Glyph *result;

  result = *(EQKit::StemStretch::Glyph **)(a1 + 24);
  if (result)
  {
    EQKit::StemStretch::Glyph::~Glyph(result);
    JUMPOUT(0x219A153B8);
  }
  return result;
}

EQKit::StemStretch::Glyph *std::unique_ptr<EQKit::StemStretch::Glyph>::reset[abi:nn180100](EQKit::StemStretch::Glyph **a1, EQKit::StemStretch::Glyph *a2)
{
  EQKit::StemStretch::Glyph *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    EQKit::StemStretch::Glyph::~Glyph(result);
    JUMPOUT(0x219A153B8);
  }
  return result;
}

uint64_t std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::EQKitCache(uint64_t a1, uint64_t a2, const void *a3)
{
  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = xmmword_217C27820;
  pthread_rwlock_init((pthread_rwlock_t *)(a1 + 72), 0);
  *(_QWORD *)(a1 + 272) = _Block_copy(a3);
  return a1;
}

void sub_217951C38(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__deallocate_node(a1, *(const void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__deallocate_node(uint64_t a1, const void **a2)
{
  const void **v2;
  const void **v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (const void **)*v2;
      std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)(v2 + 6));
      EQKit::StemStretch::Key::~Key(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::find<EQKit::StemStretch::Key>(_QWORD *a1, uint64_t a2)
{
  CFHashCode v4;
  int8x8_t v5;
  CFHashCode v6;
  uint8x8_t v7;
  unint64_t v8;
  CFHashCode v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;

  v4 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    v4 = CFHash((CFTypeRef)v4);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4 ^ *(unsigned __int16 *)(a2 + 16);
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4 ^ *(unsigned __int16 *)(a2 + 16);
    if (v6 >= *(_QWORD *)&v5)
      v9 = v6 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v6;
  }
  v10 = *(_QWORD **)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = (_QWORD *)*v10;
  if (*v10)
  {
    do
    {
      v12 = v11[1];
      if (v12 == v6)
      {
        if (EQKit::StemStretch::Key::operator==((uint64_t)(v11 + 2), a2))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(_QWORD *)&v5)
            v12 %= *(_QWORD *)&v5;
        }
        else
        {
          v12 &= *(_QWORD *)&v5 - 1;
        }
        if (v12 != v9)
          return 0;
      }
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  return v11;
}

_QWORD *std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__emplace_unique_key_args<EQKit::StemStretch::Key,std::piecewise_construct_t const&,std::tuple<EQKit::StemStretch::Key const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, const EQKit::StemStretch::Key **a4)
{
  CFHashCode v4;
  CFHashCode v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v26;

  v8 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    v8 = CFHash((CFTypeRef)v8);
  v9 = *(unsigned __int16 *)(a2 + 16);
  v10 = v8 ^ v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v8 ^ v9;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
    v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (_QWORD *)*v14;
      if (*v14)
      {
        do
        {
          v16 = v15[1];
          if (v16 == v10)
          {
            if (EQKit::StemStretch::Key::operator==((uint64_t)(v15 + 2), a2))
              return v15;
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11)
                v16 %= v11;
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<EQKit::StemStretch::Key const&>,std::tuple<>>(a1, v10, a4, (uint64_t)&v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *v26 = *v23;
    *v23 = v26;
  }
  else
  {
    *v26 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v26)
    {
      v24 = *(_QWORD *)(*v26 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26;
    }
  }
  v15 = v26;
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_217952038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,void *>>>::operator()[abi:nn180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<EQKit::StemStretch::Key const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const EQKit::StemStretch::Key **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)(v8 + 2), *a3);
  v8[6] = 0;
  v8[7] = 0;
  v8[8] = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_2179520CC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  const void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,void *>>>::operator()[abi:nn180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,void *>>>::operator()[abi:nn180100](uint64_t a1, const void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)(__p + 6));
    EQKit::StemStretch::Key::~Key(__p + 2);
  }
  if (__p)
    operator delete(__p);
}

uint64_t EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::EQKitCache(uint64_t a1, uint64_t a2, const void *a3)
{
  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = xmmword_217C27820;
  pthread_rwlock_init((pthread_rwlock_t *)(a1 + 72), 0);
  *(_QWORD *)(a1 + 272) = _Block_copy(a3);
  return a1;
}

void sub_2179523D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::__deallocate_node(a1, *(const void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::__deallocate_node(uint64_t a1, const void **a2)
{
  const void **v2;
  const void **v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (const void **)*v2;
      EQKit::StemStretch::Key::~Key(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t EQKitCache<EQKit::Font::SlantKey,EQKit::Font::SlantInfo,EQKit::Font::SlantInfo>::EQKitCache(uint64_t a1, uint64_t a2, const void *a3)
{
  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = xmmword_217C27820;
  pthread_rwlock_init((pthread_rwlock_t *)(a1 + 72), 0);
  *(_QWORD *)(a1 + 272) = _Block_copy(a3);
  return a1;
}

void sub_2179524D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (const void *)v2[2];
      if (v4)
        CFRelease(v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t *std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t *v11[3];

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t *)v5;
        v9 = *(_DWORD *)(v5 + 32);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = (uint64_t **)v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = (uint64_t **)(v8 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = (uint64_t *)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(a1, a4, (uint64_t)v11);
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v11[0]);
    v8 = v11[0];
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,void *>>>>::reset[abi:nn180100]((uint64_t)v11, 0);
  }
  return v8;
}

_QWORD *std::__tree<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v6[8] = **a2;
  result = EQKit::Font::CompositeStretch::CompositeStretch((_QWORD *)v6 + 5);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_21795267C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,void *>>>>::reset[abi:nn180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,EQKit::Font::CompositeStretch>,void *>>>>::reset[abi:nn180100](uint64_t a1, uint64_t a2)
{
  const void **v2;

  v2 = *(const void ***)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      EQKit::Font::CompositeStretch::~CompositeStretch(v2 + 5);
    operator delete(v2);
  }
}

uint64_t EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::~EQKitCache(uint64_t a1)
{
  pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 72));
  _Block_release(*(const void **)(a1 + 272));
  std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::~__hash_table(a1 + 8);
  return a1;
}

void sub_217952710(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::~__hash_table(v1 + 8);
  _Unwind_Resume(a1);
}

uint64_t EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::~EQKitCache(uint64_t a1)
{
  pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 72));
  _Block_release(*(const void **)(a1 + 272));
  std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::~__hash_table(a1 + 8);
  return a1;
}

void sub_21795275C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::~__hash_table(v1 + 8);
  _Unwind_Resume(a1);
}

uint64_t EQKitCache<EQKit::Font::SlantKey,EQKit::Font::SlantInfo,EQKit::Font::SlantInfo>::~EQKitCache(uint64_t a1)
{
  pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 72));
  _Block_release(*(const void **)(a1 + 272));
  std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::~__hash_table(a1 + 8);
  return a1;
}

void sub_2179527A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::~__hash_table(v1 + 8);
  _Unwind_Resume(a1);
}

BOOL EQKitCache<EQKit::StemStretch::Key,std::shared_ptr<EQKit::StemStretch::Glyph>,std::shared_ptr<EQKit::StemStretch::Glyph const>>::compareKeyLRU(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 32) < *(_QWORD *)(a2 + 32);
}

uint64_t std::vector<std::pair<EQKit::StemStretch::Key,unsigned long>>::__push_back_slow_path<std::pair<EQKit::StemStretch::Key,unsigned long>>(uint64_t *a1, const EQKit::StemStretch::Key *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v14;
  EQKit::StemStretch::Key *v15;
  EQKit::StemStretch::Key *v16;
  char *v17;
  uint64_t v18;

  v2 = *a1;
  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666)
    abort();
  v8 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v2) >> 3);
  if (2 * v9 > v4)
    v4 = 2 * v9;
  if (v9 >= 0x333333333333333)
    v10 = 0x666666666666666;
  else
    v10 = v4;
  v18 = v7;
  if (v10)
    v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<EQKit::StemStretch::Key,unsigned long>>>(v7, v10);
  else
    v11 = 0;
  v14 = v11;
  v15 = (EQKit::StemStretch::Key *)&v11[40 * v3];
  v16 = v15;
  v17 = &v11[40 * v10];
  EQKit::StemStretch::Key::Key(v15, a2);
  *((_QWORD *)v15 + 4) = *((_QWORD *)a2 + 4);
  v16 = (EQKit::StemStretch::Key *)((char *)v16 + 40);
  std::vector<std::pair<EQKit::StemStretch::Key,unsigned long>>::__swap_out_circular_buffer(a1, &v14);
  v12 = a1[1];
  std::__split_buffer<std::pair<EQKit::StemStretch::Key,unsigned long>>::~__split_buffer((uint64_t)&v14);
  return v12;
}

void sub_2179528C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<EQKit::StemStretch::Key,unsigned long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<EQKit::StemStretch::Key,unsigned long>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  if (v5 == *a1)
  {
    result = a2[1];
  }
  else
  {
    do
    {
      result = EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)(v6 - 40), (const EQKit::StemStretch::Key *)(v5 - 40));
      *(_QWORD *)(v6 - 8) = *(_QWORD *)(v5 - 8);
      v5 -= 40;
      v6 = result;
    }
    while (v5 != v4);
  }
  a2[1] = result;
  v8 = *a1;
  *a1 = result;
  a2[1] = v8;
  v9 = a1[1];
  a1[1] = a2[2];
  a2[2] = v9;
  v10 = a1[2];
  a1[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<EQKit::StemStretch::Key,unsigned long>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(40 * a2);
}

uint64_t std::__split_buffer<std::pair<EQKit::StemStretch::Key,unsigned long>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;
    EQKit::StemStretch::Key::~Key((const void **)(i - 40));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*,false>(EQKit::StemStretch::Key *a1, const EQKit::StemStretch::Key *a2, uint64_t (**a3)(EQKit::StemStretch::Key *, EQKit::StemStretch::Key *), uint64_t a4, char a5)
{
  EQKit::StemStretch::Key *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  EQKit::StemStretch::Key *v15;
  uint64_t v16;
  EQKit::StemStretch::Key *v17;
  EQKit::StemStretch::Key *v18;
  EQKit::StemStretch::Key *v19;
  EQKit::StemStretch::Key *v20;
  char v21;
  char v22;

void std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(uint64_t a1, const EQKit::StemStretch::Key *a2, uint64_t (**a3)(const void **, uint64_t))
{
  const EQKit::StemStretch::Key *v5;
  uint64_t v7;
  const EQKit::StemStretch::Key *v8;
  const EQKit::StemStretch::Key *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  const void *v13[4];
  uint64_t v14;

  if ((const EQKit::StemStretch::Key *)a1 != a2)
  {
    v5 = (const EQKit::StemStretch::Key *)(a1 + 40);
    if ((const EQKit::StemStretch::Key *)(a1 + 40) != a2)
    {
      v7 = 0;
      v8 = (const EQKit::StemStretch::Key *)a1;
      do
      {
        v9 = v5;
        if ((*a3)((const void **)v5, (uint64_t)v8))
        {
          EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v13, v9);
          v14 = *((_QWORD *)v8 + 9);
          v10 = v7;
          while (1)
          {
            EQKit::StemStretch::Key::operator=(a1 + v10 + 40, a1 + v10);
            *(_QWORD *)(a1 + v10 + 72) = *(_QWORD *)(a1 + v10 + 32);
            if (!v10)
              break;
            v11 = (*a3)(v13, a1 + v10 - 40);
            v10 -= 40;
            if ((v11 & 1) == 0)
            {
              v12 = a1 + v10 + 40;
              goto LABEL_10;
            }
          }
          v12 = a1;
LABEL_10:
          EQKit::StemStretch::Key::operator=(v12, (uint64_t)v13);
          *(_QWORD *)(v12 + 32) = v14;
          EQKit::StemStretch::Key::~Key(v13);
        }
        v5 = (const EQKit::StemStretch::Key *)((char *)v9 + 40);
        v7 += 40;
        v8 = v9;
      }
      while ((const EQKit::StemStretch::Key *)((char *)v9 + 40) != a2);
    }
  }
}

void sub_217952E94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKit::StemStretch::Key::~Key((const void **)va);
  _Unwind_Resume(a1);
}

void std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(uint64_t a1, const EQKit::StemStretch::Key *a2, uint64_t (**a3)(const void **, uint64_t))
{
  uint64_t v4;
  const EQKit::StemStretch::Key *v5;
  const EQKit::StemStretch::Key *v7;
  const void *v8[4];
  uint64_t v9;

  if ((const EQKit::StemStretch::Key *)a1 != a2)
  {
    v4 = a1;
    v5 = (const EQKit::StemStretch::Key *)(a1 + 40);
    if ((const EQKit::StemStretch::Key *)(a1 + 40) != a2)
    {
      do
      {
        v7 = v5;
        if ((*a3)((const void **)v5, v4))
        {
          EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v8, v7);
          v9 = *(_QWORD *)(v4 + 72);
          do
          {
            EQKit::StemStretch::Key::operator=(v4 + 40, v4);
            *(_QWORD *)(v4 + 72) = *(_QWORD *)(v4 + 32);
            v4 -= 40;
          }
          while (((*a3)(v8, v4) & 1) != 0);
          EQKit::StemStretch::Key::operator=(v4 + 40, (uint64_t)v8);
          *(_QWORD *)(v4 + 72) = v9;
          EQKit::StemStretch::Key::~Key(v8);
        }
        v5 = (const EQKit::StemStretch::Key *)((char *)v7 + 40);
        v4 = (uint64_t)v7;
      }
      while ((const EQKit::StemStretch::Key *)((char *)v7 + 40) != a2);
    }
  }
}

void sub_217952F78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKit::StemStretch::Key::~Key((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(EQKit::StemStretch::Key *a1, EQKit::StemStretch::Key *a2, uint64_t a3, uint64_t (**a4)(EQKit::StemStretch::Key *, EQKit::StemStretch::Key *))
{
  char v8;
  uint64_t result;
  EQKit::StemStretch::Key *v10;
  uint64_t v11;

  v8 = (*a4)(a2, a1);
  result = (*a4)((EQKit::StemStretch::Key *)a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:nn180100](a2, a3);
    if (!(*a4)(a2, a1))
      return 1;
    v10 = a1;
    v11 = (uint64_t)a2;
    goto LABEL_9;
  }
  if (!(_DWORD)result)
  {
    std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:nn180100](a1, (uint64_t)a2);
    if (!(*a4)((EQKit::StemStretch::Key *)a3, a2))
      return 1;
    v10 = a2;
    v11 = a3;
LABEL_9:
    std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:nn180100](v10, v11);
    return 2;
  }
  std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:nn180100](a1, a3);
  return 1;
}

EQKit::StemStretch::Key *std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,std::pair<EQKit::StemStretch::Key,unsigned long> *,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&)>(EQKit::StemStretch::Key *a1, unint64_t a2, uint64_t (**a3)(const void **, EQKit::StemStretch::Key *))
{
  EQKit::StemStretch::Key *v6;
  EQKit::StemStretch::Key *v7;
  int v8;
  const void *v10[4];
  uint64_t v11;

  EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v10, a1);
  v11 = *((_QWORD *)a1 + 4);
  if (((*a3)(v10, (EQKit::StemStretch::Key *)(a2 - 40)) & 1) != 0)
  {
    v6 = a1;
    do
      v6 = (EQKit::StemStretch::Key *)((char *)v6 + 40);
    while (((*a3)(v10, v6) & 1) == 0);
  }
  else
  {
    v7 = (EQKit::StemStretch::Key *)((char *)a1 + 40);
    do
    {
      v6 = v7;
      if ((unint64_t)v7 >= a2)
        break;
      v8 = (*a3)(v10, v7);
      v7 = (EQKit::StemStretch::Key *)((char *)v6 + 40);
    }
    while (!v8);
  }
  if ((unint64_t)v6 < a2)
  {
    do
      a2 -= 40;
    while (((*a3)(v10, (EQKit::StemStretch::Key *)a2) & 1) != 0);
  }
  while ((unint64_t)v6 < a2)
  {
    std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:nn180100](v6, a2);
    do
      v6 = (EQKit::StemStretch::Key *)((char *)v6 + 40);
    while (!(*a3)(v10, v6));
    do
      a2 -= 40;
    while (((*a3)(v10, (EQKit::StemStretch::Key *)a2) & 1) != 0);
  }
  if ((EQKit::StemStretch::Key *)((char *)v6 - 40) != a1)
  {
    EQKit::StemStretch::Key::operator=((uint64_t)a1, (uint64_t)v6 - 40);
    *((_QWORD *)a1 + 4) = *((_QWORD *)v6 - 1);
  }
  EQKit::StemStretch::Key::operator=((uint64_t)v6 - 40, (uint64_t)v10);
  *((_QWORD *)v6 - 1) = v11;
  EQKit::StemStretch::Key::~Key(v10);
  return v6;
}

void sub_2179531B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKit::StemStretch::Key::~Key((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,std::pair<EQKit::StemStretch::Key,unsigned long> *,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&)>(EQKit::StemStretch::Key *a1, unint64_t a2, uint64_t (**a3)(char *, const void **))
{
  uint64_t v6;
  char v7;
  char *v8;
  EQKit::StemStretch::Key *v9;
  unint64_t v10;
  const void *v12[4];
  uint64_t v13;

  EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v12, a1);
  v6 = 0;
  v13 = *((_QWORD *)a1 + 4);
  do
  {
    v7 = (*a3)((char *)a1 + v6 + 40, v12);
    v6 += 40;
  }
  while ((v7 & 1) != 0);
  v8 = (char *)a1 + v6;
  if (v6 == 40)
  {
    do
    {
      if ((unint64_t)v8 >= a2)
        break;
      a2 -= 40;
    }
    while (((*a3)((char *)a2, v12) & 1) == 0);
  }
  else
  {
    do
      a2 -= 40;
    while (!(*a3)((char *)a2, v12));
  }
  v9 = (EQKit::StemStretch::Key *)((char *)a1 + v6);
  if ((unint64_t)v8 < a2)
  {
    v10 = a2;
    do
    {
      std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:nn180100](v9, v10);
      do
        v9 = (EQKit::StemStretch::Key *)((char *)v9 + 40);
      while (((*a3)((char *)v9, v12) & 1) != 0);
      do
        v10 -= 40;
      while (!(*a3)((char *)v10, v12));
    }
    while ((unint64_t)v9 < v10);
  }
  if ((EQKit::StemStretch::Key *)((char *)v9 - 40) != a1)
  {
    EQKit::StemStretch::Key::operator=((uint64_t)a1, (uint64_t)v9 - 40);
    *((_QWORD *)a1 + 4) = *((_QWORD *)v9 - 1);
  }
  EQKit::StemStretch::Key::operator=((uint64_t)v9 - 40, (uint64_t)v12);
  *((_QWORD *)v9 - 1) = v13;
  EQKit::StemStretch::Key::~Key(v12);
  return (uint64_t)v9 - 40;
}

void sub_217953340(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKit::StemStretch::Key::~Key((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(uint64_t a1, EQKit::StemStretch::Key *a2, uint64_t (**a3)(EQKit::StemStretch::Key *, EQKit::StemStretch::Key *))
{
  _BOOL8 v6;
  EQKit::StemStretch::Key *v7;
  EQKit::StemStretch::Key *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  const void *v15[4];
  uint64_t v16;

  v6 = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v6;
    case 2uLL:
      if ((*a3)((EQKit::StemStretch::Key *)((char *)a2 - 40), (EQKit::StemStretch::Key *)a1))
        std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:nn180100]((EQKit::StemStretch::Key *)a1, (uint64_t)a2 - 40);
      return v6;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((EQKit::StemStretch::Key *)a1, (EQKit::StemStretch::Key *)(a1 + 40), (uint64_t)a2 - 40, a3);
      return v6;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((EQKit::StemStretch::Key *)a1, (EQKit::StemStretch::Key *)(a1 + 40), (EQKit::StemStretch::Key *)(a1 + 80), (uint64_t)a2 - 40, a3);
      return v6;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((EQKit::StemStretch::Key *)a1, (EQKit::StemStretch::Key *)(a1 + 40), (EQKit::StemStretch::Key *)(a1 + 80), (EQKit::StemStretch::Key *)(a1 + 120), (uint64_t)a2 - 40, a3);
      return v6;
    default:
      v7 = (EQKit::StemStretch::Key *)(a1 + 80);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((EQKit::StemStretch::Key *)a1, (EQKit::StemStretch::Key *)(a1 + 40), a1 + 80, a3);
      v8 = (EQKit::StemStretch::Key *)(a1 + 120);
      if ((EQKit::StemStretch::Key *)(a1 + 120) == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (!(*a3)(v8, v7))
  {
LABEL_14:
    v7 = v8;
    v9 += 40;
    v8 = (EQKit::StemStretch::Key *)((char *)v8 + 40);
    if (v8 == a2)
      return 1;
  }
  EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v15, v8);
  v16 = *((_QWORD *)v8 + 4);
  v11 = v9;
  while (1)
  {
    EQKit::StemStretch::Key::operator=(a1 + v11 + 120, a1 + v11 + 80);
    *(_QWORD *)(a1 + v11 + 152) = *(_QWORD *)(a1 + v11 + 112);
    if (v11 == -80)
      break;
    v12 = (*a3)((EQKit::StemStretch::Key *)v15, (EQKit::StemStretch::Key *)(a1 + v11 + 40));
    v11 -= 40;
    if ((v12 & 1) == 0)
    {
      v13 = a1 + v11 + 120;
      goto LABEL_12;
    }
  }
  v13 = a1;
LABEL_12:
  EQKit::StemStretch::Key::operator=(v13, (uint64_t)v15);
  *(_QWORD *)(v13 + 32) = v16;
  if (++v10 != 8)
  {
    EQKit::StemStretch::Key::~Key(v15);
    goto LABEL_14;
  }
  v6 = (EQKit::StemStretch::Key *)((char *)v8 + 40) == a2;
  EQKit::StemStretch::Key::~Key(v15);
  return v6;
}

void sub_217953568(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKit::StemStretch::Key::~Key((const void **)va);
  _Unwind_Resume(a1);
}

void std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:nn180100](EQKit::StemStretch::Key *a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5[4];

  EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v5, a1);
  EQKit::StemStretch::Key::operator=((uint64_t)a1, a2);
  EQKit::StemStretch::Key::operator=(a2, (uint64_t)v5);
  EQKit::StemStretch::Key::~Key(v5);
  v4 = *((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 4) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v4;
}

void sub_2179535E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  EQKit::StemStretch::Key::~Key(&a9);
  _Unwind_Resume(a1);
}

void std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(EQKit::StemStretch::Key *a1, EQKit::StemStretch::Key *a2, EQKit::StemStretch::Key *a3, uint64_t a4, uint64_t (**a5)(EQKit::StemStretch::Key *, EQKit::StemStretch::Key *))
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(a1, a2, (uint64_t)a3, a5);
  if ((*a5)((EQKit::StemStretch::Key *)a4, a3))
  {
    std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:nn180100](a3, a4);
    if ((*a5)(a3, a2))
    {
      std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:nn180100](a2, (uint64_t)a3);
      if ((*a5)(a2, a1))
        std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:nn180100](a1, (uint64_t)a2);
    }
  }
}

void std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(EQKit::StemStretch::Key *a1, EQKit::StemStretch::Key *a2, EQKit::StemStretch::Key *a3, EQKit::StemStretch::Key *a4, uint64_t a5, uint64_t (**a6)(EQKit::StemStretch::Key *, EQKit::StemStretch::Key *))
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(a1, a2, a3, (uint64_t)a4, a6);
  if ((*a6)((EQKit::StemStretch::Key *)a5, a4))
  {
    std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:nn180100](a4, a5);
    if ((*a6)(a4, a3))
    {
      std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:nn180100](a3, (uint64_t)a4);
      if ((*a6)(a3, a2))
      {
        std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:nn180100](a2, (uint64_t)a3);
        if ((*a6)(a2, a1))
          std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:nn180100](a1, (uint64_t)a2);
      }
    }
  }
}

EQKit::StemStretch::Key *std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*,std::pair<EQKit::StemStretch::Key,unsigned long>*>(EQKit::StemStretch::Key *a1, EQKit::StemStretch::Key *a2, EQKit::StemStretch::Key *a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  const EQKit::StemStretch::Key *v12;
  uint64_t v13;
  EQKit::StemStretch::Key *v14;
  unint64_t v15;

  if (a1 != a2)
  {
    v6 = (uint64_t)a2;
    v8 = a2 - a1;
    v9 = (a2 - a1) / 40;
    if (a2 - a1 >= 41)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (EQKit::StemStretch::Key *)((char *)a1 + 40 * v10);
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((uint64_t)a1, a4, v9, v12);
        v12 = (const EQKit::StemStretch::Key *)((char *)v12 - 40);
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if ((EQKit::StemStretch::Key *)v6 != a3)
    {
      v14 = (EQKit::StemStretch::Key *)v6;
      do
      {
        if ((*a4)((uint64_t)v14, (uint64_t)a1))
        {
          std::pair<EQKit::StemStretch::Key,unsigned long>::swap[abi:nn180100](v14, (uint64_t)a1);
          std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((uint64_t)a1, a4, v9, a1);
        }
        v14 = (EQKit::StemStretch::Key *)((char *)v14 + 40);
      }
      while (v14 != a3);
      v13 = (uint64_t)a3;
    }
    if (v8 >= 41)
    {
      v15 = v8 / 0x28uLL;
      do
      {
        std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(a1, v6, (unsigned int (**)(uint64_t, uint64_t))a4, v15);
        v6 -= 40;
      }
      while (v15-- > 2);
    }
    return (EQKit::StemStretch::Key *)v13;
  }
  return a3;
}

void std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(uint64_t a1, uint64_t (**a2)(uint64_t, uint64_t), uint64_t a3, const EQKit::StemStretch::Key *a4)
{
  unint64_t v4;
  const EQKit::StemStretch::Key *v5;
  int64_t v7;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15[4];
  uint64_t v16;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - a1) >> 3)))
    {
      v10 = (0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3)) | 1;
      v11 = a1 + 40 * v10;
      v12 = 0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v12 < a3 && (*a2)(a1 + 40 * v10, v11 + 40))
      {
        v11 += 40;
        v10 = v12;
      }
      if (((*a2)(v11, (uint64_t)v5) & 1) == 0)
      {
        EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v15, v5);
        v16 = *((_QWORD *)v5 + 4);
        do
        {
          v13 = v11;
          EQKit::StemStretch::Key::operator=((uint64_t)v5, v11);
          *((_QWORD *)v5 + 4) = *(_QWORD *)(v11 + 32);
          if (v7 < v10)
            break;
          v14 = (2 * v10) | 1;
          v11 = a1 + 40 * v14;
          v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            v10 = v14;
          }
          else if ((*a2)(a1 + 40 * v14, v11 + 40))
          {
            v11 += 40;
          }
          else
          {
            v10 = v14;
          }
          v5 = (const EQKit::StemStretch::Key *)v13;
        }
        while (!(*a2)(v11, (uint64_t)v15));
        EQKit::StemStretch::Key::operator=(v13, (uint64_t)v15);
        *(_QWORD *)(v13 + 32) = v16;
        EQKit::StemStretch::Key::~Key(v15);
      }
    }
  }
}

void sub_217953A38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKit::StemStretch::Key::~Key((const void **)va);
  _Unwind_Resume(a1);
}

void std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(EQKit::StemStretch::Key *a1, uint64_t a2, unsigned int (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  const void *v10[4];
  uint64_t v11;

  if (a4 >= 2)
  {
    EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v10, a1);
    v11 = *((_QWORD *)a1 + 4);
    v8 = std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((uint64_t)a1, a3, a4);
    v9 = v8;
    if (v8 == a2 - 40)
    {
      EQKit::StemStretch::Key::operator=(v8, (uint64_t)v10);
      *(_QWORD *)(v9 + 32) = v11;
    }
    else
    {
      EQKit::StemStretch::Key::operator=(v8, a2 - 40);
      *(_QWORD *)(v9 + 32) = *(_QWORD *)(a2 - 8);
      EQKit::StemStretch::Key::operator=(a2 - 40, (uint64_t)v10);
      *(_QWORD *)(a2 - 8) = v11;
      std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>((uint64_t)a1, v9 + 40, (uint64_t (**)(uint64_t, const void **))a3, 0xCCCCCCCCCCCCCCCDLL * ((v9 + 40 - (uint64_t)a1) >> 3));
    }
    EQKit::StemStretch::Key::~Key(v10);
  }
}

void sub_217953B38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKit::StemStretch::Key::~Key((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = a1 + 40 * v6 + 40;
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1 + 40 * v6 + 40, a1 + 40 * v6 + 80))
    {
      v9 += 40;
      v10 = v11;
    }
    EQKit::StemStretch::Key::operator=(a1, v9);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v9 + 32);
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

void std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::StemStretch::Key,unsigned long> const&,std::pair<EQKit::StemStretch::Key,unsigned long> const&),std::pair<EQKit::StemStretch::Key,unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t, const void **), uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  uint64_t v9;
  const EQKit::StemStretch::Key *v10;
  uint64_t v11;
  const void *v12[4];
  uint64_t v13;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v8 = v4 >> 1;
    v9 = a1 + 40 * (v4 >> 1);
    v10 = (const EQKit::StemStretch::Key *)(a2 - 40);
    if ((*a3)(v9, (const void **)(a2 - 40)))
    {
      EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)v12, v10);
      v13 = *(_QWORD *)(a2 - 8);
      do
      {
        v11 = v9;
        EQKit::StemStretch::Key::operator=((uint64_t)v10, v9);
        *((_QWORD *)v10 + 4) = *(_QWORD *)(v9 + 32);
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = a1 + 40 * v8;
        v10 = (const EQKit::StemStretch::Key *)v11;
      }
      while (((*a3)(v9, v12) & 1) != 0);
      EQKit::StemStretch::Key::operator=(v11, (uint64_t)v12);
      *(_QWORD *)(v11 + 32) = v13;
      EQKit::StemStretch::Key::~Key(v12);
    }
  }
}

void sub_217953CF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKit::StemStretch::Key::~Key((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__erase_unique<EQKit::StemStretch::Key>(_QWORD *a1, uint64_t a2)
{
  uint64_t *result;

  result = std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::find<EQKit::StemStretch::Key>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  const void **v3;
  void *__p;
  uint64_t v6;

  v2 = *a2;
  std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::remove(a1, a2, (uint64_t)&__p);
  v3 = (const void **)__p;
  __p = 0;
  if (v3)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,void *>>>::operator()[abi:nn180100]((uint64_t)&v6, v3);
  return v2;
}

_QWORD *std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::remove@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void std::vector<std::pair<EQKit::StemStretch::Key,unsigned long>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  const void **v2;
  const void **v4;
  void *v5;

  v1 = *a1;
  v2 = (const void **)**a1;
  if (v2)
  {
    v4 = (const void **)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        EQKit::StemStretch::Key::~Key(v4 - 5);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

BOOL EQKitCache<EQKit::StemStretch::Key,EQKitTypes::Axis::Enum,EQKitTypes::Axis::Enum>::compareKeyLRU(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 32) < *(_QWORD *)(a2 + 32);
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::__erase_unique<EQKit::StemStretch::Key>(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _BYTE v4[24];

  result = (uint64_t)std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::find<EQKit::StemStretch::Key>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::remove(a1, (_QWORD *)result, (uint64_t)v4);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,void *>>>>::reset[abi:nn180100]((uint64_t)v4, 0);
    return 1;
  }
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,void *>>>>::reset[abi:nn180100](uint64_t a1, uint64_t a2)
{
  const void **v2;

  v2 = *(const void ***)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      EQKit::StemStretch::Key::~Key(v2 + 2);
    operator delete(v2);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::__emplace_unique_key_args<EQKit::StemStretch::Key,std::piecewise_construct_t const&,std::tuple<EQKit::StemStretch::Key const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, const EQKit::StemStretch::Key **a4)
{
  CFHashCode v4;
  CFHashCode v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    v8 = CFHash((CFTypeRef)v8);
  v9 = *(unsigned __int16 *)(a2 + 16);
  v10 = v8 ^ v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v8 ^ v9;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
    v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (_QWORD *)*v14;
      if (*v14)
      {
        do
        {
          v16 = v15[1];
          if (v16 == v10)
          {
            if (EQKit::StemStretch::Key::operator==((uint64_t)(v15 + 2), a2))
              return v15;
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11)
                v16 %= v11;
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<EQKit::StemStretch::Key const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  v15 = (_QWORD *)v26[0];
  v26[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,void *>>>>::reset[abi:nn180100]((uint64_t)v26, 0);
  return v15;
}

void sub_217954244(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,void *>>>>::reset[abi:nn180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<EQKit::StemStretch::Key const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const EQKit::StemStretch::Key **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)(v8 + 2), *a3);
  *((_DWORD *)v8 + 12) = 0;
  v8[7] = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_2179542C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<EQKitTypes::Axis::Enum,unsigned long>>,void *>>>>::reset[abi:nn180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::find<EQKit::Font::SlantKey>(_QWORD *a1, uint64_t a2)
{
  CFHashCode v4;
  int8x8_t v5;
  CFHashCode v6;
  uint8x8_t v7;
  unint64_t v8;
  CFHashCode v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;

  v4 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    v4 = CFHash((CFTypeRef)v4);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4 ^ *(unsigned __int16 *)(a2 + 16);
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4 ^ *(unsigned __int16 *)(a2 + 16);
    if (v6 >= *(_QWORD *)&v5)
      v9 = v6 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v6;
  }
  v10 = *(_QWORD **)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = (_QWORD *)*v10;
  if (*v10)
  {
    do
    {
      v12 = v11[1];
      if (v12 == v6)
      {
        if (EQKit::Font::SlantKey::operator==((uint64_t)(v11 + 2), a2))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(_QWORD *)&v5)
            v12 %= *(_QWORD *)&v5;
        }
        else
        {
          v12 &= *(_QWORD *)&v5 - 1;
        }
        if (v12 != v9)
          return 0;
      }
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  return v11;
}

_QWORD *std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::__emplace_unique_key_args<EQKit::Font::SlantKey,std::piecewise_construct_t const&,std::tuple<EQKit::Font::SlantKey const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  CFHashCode v4;
  CFHashCode v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v26;

  v8 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    v8 = CFHash((CFTypeRef)v8);
  v9 = *(unsigned __int16 *)(a2 + 16);
  v10 = v8 ^ v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v8 ^ v9;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
    v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (_QWORD *)*v14;
      if (*v14)
      {
        do
        {
          v16 = v15[1];
          if (v16 == v10)
          {
            if (EQKit::Font::SlantKey::operator==((uint64_t)(v15 + 2), a2))
              return v15;
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11)
                v16 %= v11;
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<EQKit::Font::SlantKey const&>,std::tuple<>>(a1, v10, a4, (uint64_t)&v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *v26 = *v23;
    *v23 = v26;
  }
  else
  {
    *v26 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v26)
    {
      v24 = *(_QWORD *)(*v26 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26;
    }
  }
  v15 = v26;
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_217954640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,void *>>>::operator()[abi:nn180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::__unordered_map_hasher<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::hash<EQKit::Font::SlantKey>,std::equal_to<EQKit::Font::SlantKey>,true>,std::__unordered_map_equal<EQKit::Font::SlantKey,std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,std::equal_to<EQKit::Font::SlantKey>,std::hash<EQKit::Font::SlantKey>,true>,std::allocator<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<EQKit::Font::SlantKey const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = std::pair<EQKit::Font::SlantKey const,std::pair<EQKit::Font::SlantInfo,unsigned long>>::pair[abi:nn180100]<EQKit::Font::SlantKey const&>((uint64_t)(v8 + 2), *a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_2179546CC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,void *>>>::operator()[abi:nn180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::pair<EQKit::Font::SlantKey const,std::pair<EQKit::Font::SlantInfo,unsigned long>>::pair[abi:nn180100]<EQKit::Font::SlantKey const&>(uint64_t a1, uint64_t a2)
{
  const void *v3;

  v3 = *(const void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  if (v3)
    CFRetain(v3);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  return a1;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::Font::SlantKey,std::pair<EQKit::Font::SlantInfo,unsigned long>>,void *>>>::operator()[abi:nn180100](uint64_t a1, _QWORD *__p)
{
  const void *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (const void *)__p[2];
    if (v3)
      CFRelease(v3);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::EQKitCache(uint64_t a1, uint64_t a2, const void *a3)
{
  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = xmmword_217C27820;
  pthread_rwlock_init((pthread_rwlock_t *)(a1 + 72), 0);
  *(_QWORD *)(a1 + 272) = _Block_copy(a3);
  return a1;
}

void sub_2179547F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

BOOL EQKitCache<unsigned int,EQKit::Font::STIXCollection::StretchInfo,EQKit::Font::STIXCollection::StretchInfo>::compareKeyLRU(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) < *(_QWORD *)(a2 + 8);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*,false>(uint64_t result, int *a2, uint64_t (**a3)(int *, int *), uint64_t a4, char a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int *v18;
  char v19;
  BOOL v20;
  int v21;
  uint64_t v22;

  v8 = result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = ((uint64_t)a2 - v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*a3)(a2 - 4, (int *)v9);
        if ((_DWORD)result)
        {
          v21 = *(_DWORD *)v9;
          *(_DWORD *)v9 = *(a2 - 4);
          *(a2 - 4) = v21;
          v22 = *(_QWORD *)(v9 + 8);
          *(_QWORD *)(v9 + 8) = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v22;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>((int *)v9, (int *)(v9 + 16), a2 - 4, a3);
      case 4uLL:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(v9, v9 + 16, v9 + 32, (uint64_t)(a2 - 4), a3);
      case 5uLL:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(v9, v9 + 16, v9 + 32, v9 + 48, (uint64_t)(a2 - 4), a3);
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(v9, a2, (uint64_t (**)(_OWORD *, _QWORD))a3);
          else
            return std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(v9, a2, (uint64_t (**)(_OWORD *, _QWORD))a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = v9 + 16 * (v13 >> 1);
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>((int *)(v9 + 16 * (v13 >> 1)), (int *)v9, a2 - 4, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>((int *)v9, (int *)(v9 + 16 * (v13 >> 1)), a2 - 4, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>((int *)(v9 + 16), (int *)(v15 - 16), a2 - 8, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>((int *)(v9 + 32), (int *)(v9 + 16 + 16 * v14), a2 - 12, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>((int *)(v15 - 16), (int *)v15, (int *)(v9 + 16 + 16 * v14), a3);
            v16 = *(_DWORD *)v9;
            *(_DWORD *)v9 = *(_DWORD *)v15;
            *(_DWORD *)v15 = v16;
            v17 = *(_QWORD *)(v9 + 8);
            *(_QWORD *)(v9 + 8) = *(_QWORD *)(v15 + 8);
            *(_QWORD *)(v15 + 8) = v17;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (((*a3)((int *)(v9 - 16), (int *)v9) & 1) == 0)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,unsigned long> *,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&)>((int *)v9, (unint64_t)a2, (uint64_t (**)(__int128 *, int *))a3);
            v9 = result;
            goto LABEL_17;
          }
LABEL_12:
          v18 = std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,unsigned long> *,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&)>((int *)v9, (unint64_t)a2, (uint64_t (**)(int *, __int128 *))a3);
          if ((v19 & 1) == 0)
            goto LABEL_15;
          v20 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(v9, v18, a3);
          v9 = (uint64_t)(v18 + 4);
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>((uint64_t)(v18 + 4), a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v20)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*,false>(v8, v18, a3, -v11, a5 & 1);
            v9 = (uint64_t)(v18 + 4);
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v18;
          if (v20)
            return result;
          goto LABEL_2;
        }
        if ((int *)v9 != a2)
          return std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*,std::pair<unsigned int,unsigned long>*>(v9, (uint64_t)a2, (uint64_t)a2, (unsigned int (**)(uint64_t, uint64_t))a3);
        return result;
    }
  }
}

uint64_t std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  if ((_OWORD *)result != a2)
  {
    v16 = v3;
    v17 = v4;
    v6 = result;
    v7 = (_OWORD *)(result + 16);
    if ((_OWORD *)(result + 16) != a2)
    {
      v9 = 0;
      v10 = (_OWORD *)result;
      do
      {
        v11 = v10;
        v10 = v7;
        result = (*a3)(v7, v11);
        if ((_DWORD)result)
        {
          v15 = *v10;
          v12 = v9;
          while (1)
          {
            v13 = v6 + v12;
            *(_DWORD *)(v13 + 16) = *(_DWORD *)(v6 + v12);
            *(_QWORD *)(v13 + 24) = *(_QWORD *)(v6 + v12 + 8);
            if (!v12)
              break;
            v12 -= 16;
            result = (*a3)(&v15, v12 + v6);
            if ((result & 1) == 0)
            {
              v14 = v6 + v12 + 16;
              goto LABEL_10;
            }
          }
          v14 = v6;
LABEL_10:
          *(_DWORD *)v14 = v15;
          *(_QWORD *)(v14 + 8) = *((_QWORD *)&v15 + 1);
        }
        v7 = v10 + 1;
        v9 += 16;
      }
      while (v10 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  if ((_OWORD *)result != a2)
  {
    v13 = v3;
    v14 = v4;
    v6 = (_OWORD *)result;
    v7 = (_OWORD *)(result + 16);
    if ((_OWORD *)(result + 16) != a2)
    {
      v9 = result - 16;
      do
      {
        v10 = v6;
        v6 = v7;
        result = (*a3)(v7, v10);
        if ((_DWORD)result)
        {
          v12 = *v6;
          v11 = v9;
          do
          {
            *(_DWORD *)(v11 + 32) = *(_DWORD *)(v11 + 16);
            *(_QWORD *)(v11 + 40) = *(_QWORD *)(v11 + 24);
            result = (*a3)(&v12, v11);
            v11 -= 16;
          }
          while ((result & 1) != 0);
          *(_DWORD *)(v11 + 32) = v12;
          *(_QWORD *)(v11 + 40) = *((_QWORD *)&v12 + 1);
        }
        v7 = v6 + 1;
        v9 += 16;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(int *a1, int *a2, int *a3, uint64_t (**a4)(int *, int *))
{
  char v8;
  uint64_t result;
  int v10;
  uint64_t *v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) != 0)
  {
    v10 = *a1;
    if ((_DWORD)result)
    {
      *a1 = *a3;
      *a3 = v10;
      v11 = (uint64_t *)(a3 + 2);
      result = 1;
      v12 = (uint64_t *)(a1 + 2);
LABEL_9:
      v15 = v11;
      goto LABEL_10;
    }
    *a1 = *a2;
    *a2 = v10;
    v17 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v17;
    if ((*a4)(a3, a2))
    {
      v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      v11 = (uint64_t *)(a3 + 2);
      result = 2;
      v12 = (uint64_t *)(a2 + 2);
      goto LABEL_9;
    }
  }
  else
  {
    if (!(_DWORD)result)
      return result;
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    v15 = (uint64_t *)(a2 + 2);
    v14 = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = *((_QWORD *)a3 + 1);
    *((_QWORD *)a3 + 1) = v14;
    if ((*a4)(a2, a1))
    {
      v16 = *a1;
      *a1 = *a2;
      v12 = (uint64_t *)(a1 + 2);
      *a2 = v16;
      result = 2;
LABEL_10:
      v19 = *v12;
      *v12 = *v15;
      *v15 = v19;
      return result;
    }
  }
  return 1;
}

int *std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,unsigned long> *,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&)>(int *a1, unint64_t a2, uint64_t (**a3)(__int128 *, int *))
{
  unint64_t v4;
  int *v6;
  int *v7;
  int v8;
  int v9;
  uint64_t v10;
  __int128 v12;

  v4 = a2;
  v12 = *(_OWORD *)a1;
  if (((*a3)(&v12, (int *)(a2 - 16)) & 1) != 0)
  {
    v6 = a1;
    do
      v6 += 4;
    while (((*a3)(&v12, v6) & 1) == 0);
  }
  else
  {
    v7 = a1 + 4;
    do
    {
      v6 = v7;
      if ((unint64_t)v7 >= v4)
        break;
      v8 = (*a3)(&v12, v7);
      v7 = v6 + 4;
    }
    while (!v8);
  }
  if ((unint64_t)v6 < v4)
  {
    do
      v4 -= 16;
    while (((*a3)(&v12, (int *)v4) & 1) != 0);
  }
  while ((unint64_t)v6 < v4)
  {
    v9 = *v6;
    *v6 = *(_DWORD *)v4;
    *(_DWORD *)v4 = v9;
    v10 = *((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = *(_QWORD *)(v4 + 8);
    *(_QWORD *)(v4 + 8) = v10;
    do
      v6 += 4;
    while (!(*a3)(&v12, v6));
    do
      v4 -= 16;
    while (((*a3)(&v12, (int *)v4) & 1) != 0);
  }
  if (v6 - 4 != a1)
  {
    *a1 = *(v6 - 4);
    *((_QWORD *)a1 + 1) = *((_QWORD *)v6 - 1);
  }
  *(v6 - 4) = v12;
  *((_QWORD *)v6 - 1) = *((_QWORD *)&v12 + 1);
  return v6;
}

int *std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,unsigned long> *,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&)>(int *a1, unint64_t a2, uint64_t (**a3)(int *, __int128 *))
{
  uint64_t v6;
  unint64_t v7;
  __int128 *v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  int *result;
  __int128 v13;

  v6 = 0;
  v13 = *(_OWORD *)a1;
  do
    v6 += 4;
  while (((*a3)(&a1[v6], &v13) & 1) != 0);
  v7 = (unint64_t)&a1[v6];
  if (v6 == 4)
  {
    do
    {
      if (v7 >= a2)
        break;
      a2 -= 16;
    }
    while (((*a3)((int *)a2, &v13) & 1) == 0);
  }
  else
  {
    do
      a2 -= 16;
    while (!(*a3)((int *)a2, &v13));
  }
  v8 = (__int128 *)&a1[v6];
  if (v7 < a2)
  {
    v9 = a2;
    do
    {
      v10 = *(_DWORD *)v8;
      *(_DWORD *)v8 = *(_DWORD *)v9;
      *(_DWORD *)v9 = v10;
      v11 = *((_QWORD *)v8 + 1);
      *((_QWORD *)v8 + 1) = *(_QWORD *)(v9 + 8);
      *(_QWORD *)(v9 + 8) = v11;
      do
        ++v8;
      while (((*a3)((int *)v8, &v13) & 1) != 0);
      do
        v9 -= 16;
      while (!(*a3)((int *)v9, &v13));
    }
    while ((unint64_t)v8 < v9);
  }
  result = (int *)(v8 - 1);
  if (v8 - 1 != (__int128 *)a1)
  {
    *a1 = *((_DWORD *)v8 - 4);
    *((_QWORD *)a1 + 1) = *((_QWORD *)v8 - 1);
  }
  *((_DWORD *)v8 - 4) = v13;
  *((_QWORD *)v8 - 1) = *((_QWORD *)&v13 + 1);
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(uint64_t a1, int *a2, uint64_t (**a3)(int *, int *))
{
  uint64_t v6;
  _BOOL8 result;
  int v8;
  uint64_t v9;
  int *v10;
  int *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  v6 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((*a3)(a2 - 4, (int *)a1))
      {
        v8 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(a2 - 4);
        *(a2 - 4) = v8;
        v9 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 - 1);
        *((_QWORD *)a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>((int *)a1, (int *)(a1 + 16), a2 - 4, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(a1, a1 + 16, a1 + 32, (uint64_t)(a2 - 4), a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(a1, a1 + 16, a1 + 32, a1 + 48, (uint64_t)(a2 - 4), a3);
      return 1;
    default:
      v10 = (int *)(a1 + 32);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>((int *)a1, (int *)(a1 + 16), (int *)(a1 + 32), a3);
      v11 = (int *)(a1 + 48);
      if ((int *)(a1 + 48) == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v11, v10))
    {
      v17 = *(_OWORD *)v11;
      v14 = v12;
      while (1)
      {
        v15 = a1 + v14;
        *(_DWORD *)(v15 + 48) = *(_DWORD *)(a1 + v14 + 32);
        *(_QWORD *)(v15 + 56) = *(_QWORD *)(a1 + v14 + 40);
        if (v14 == -32)
          break;
        v14 -= 16;
        if (((*a3)((int *)&v17, (int *)(v15 + 16)) & 1) == 0)
        {
          v16 = a1 + v14 + 48;
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *(_DWORD *)v16 = v17;
      *(_QWORD *)(v16 + 8) = *((_QWORD *)&v17 + 1);
      if (++v13 == 8)
        return v11 + 4 == a2;
    }
    v10 = v11;
    v12 += 16;
    v11 += 4;
    if (v11 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(int *, int *))
{
  uint64_t result;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>((int *)a1, (int *)a2, (int *)a3, a5);
  result = (*a5)((int *)a4, (int *)a3);
  if ((_DWORD)result)
  {
    v11 = *(_DWORD *)a3;
    *(_DWORD *)a3 = *(_DWORD *)a4;
    *(_DWORD *)a4 = v11;
    v12 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = v12;
    result = (*a5)((int *)a3, (int *)a2);
    if ((_DWORD)result)
    {
      v13 = *(_DWORD *)a2;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v13;
      v14 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v14;
      result = (*a5)((int *)a2, (int *)a1);
      if ((_DWORD)result)
      {
        v15 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v15;
        v16 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = v16;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(int *, int *))
{
  uint64_t result;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(a1, a2, a3, a4, a6);
  result = (*a6)((int *)a5, (int *)a4);
  if ((_DWORD)result)
  {
    v13 = *(_DWORD *)a4;
    *(_DWORD *)a4 = *(_DWORD *)a5;
    *(_DWORD *)a5 = v13;
    v14 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = *(_QWORD *)(a5 + 8);
    *(_QWORD *)(a5 + 8) = v14;
    result = (*a6)((int *)a4, (int *)a3);
    if ((_DWORD)result)
    {
      v15 = *(_DWORD *)a3;
      *(_DWORD *)a3 = *(_DWORD *)a4;
      *(_DWORD *)a4 = v15;
      v16 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(a4 + 8) = v16;
      result = (*a6)((int *)a3, (int *)a2);
      if ((_DWORD)result)
      {
        v17 = *(_DWORD *)a2;
        *(_DWORD *)a2 = *(_DWORD *)a3;
        *(_DWORD *)a3 = v17;
        v18 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
        *(_QWORD *)(a3 + 8) = v18;
        result = (*a6)((int *)a2, (int *)a1);
        if ((_DWORD)result)
        {
          v19 = *(_DWORD *)a1;
          *(_DWORD *)a1 = *(_DWORD *)a2;
          *(_DWORD *)a2 = v19;
          v20 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          *(_QWORD *)(a2 + 8) = v20;
        }
      }
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*,std::pair<unsigned int,unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int (**a4)(uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  if (a1 != a2)
  {
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (__int128 *)(a1 + 16 * v10);
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if ((*a4)(v14, a1))
        {
          v15 = *(_DWORD *)v14;
          *(_DWORD *)v14 = *(_DWORD *)a1;
          *(_DWORD *)a1 = v15;
          v16 = *(_QWORD *)(v14 + 8);
          *(_QWORD *)(v14 + 8) = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v16;
          std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(a1, a4, v9, (__int128 *)a1);
        }
        v14 += 16;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v17 = (unint64_t)v8 >> 4;
      v18 = a2 - 16;
      do
      {
        v19 = *(_DWORD *)a1;
        v20 = *(_QWORD *)(a1 + 8);
        v21 = std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(a1, a4, v17);
        if (v18 == v21)
        {
          *(_DWORD *)v21 = v19;
          *(_QWORD *)(v21 + 8) = v20;
        }
        else
        {
          *(_DWORD *)v21 = *(_DWORD *)v18;
          *(_QWORD *)(v21 + 8) = *(_QWORD *)(v18 + 8);
          *(_DWORD *)v18 = v19;
          *(_QWORD *)(v18 + 8) = v20;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(a1, v21 + 16, (uint64_t (**)(uint64_t, uint64_t))a4, (v21 + 16 - a1) >> 4);
        }
        v18 -= 16;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(uint64_t result, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3, __int128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 *v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v20 = v4;
    v21 = v5;
    v7 = a4;
    v8 = result;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - result) >> 4)
    {
      v12 = ((uint64_t)a4 - result) >> 3;
      v13 = v12 + 1;
      v14 = result + 16 * (v12 + 1);
      v15 = v12 + 2;
      if (v12 + 2 < a3 && (*a2)(v14, v14 + 16))
      {
        v14 += 16;
        v13 = v15;
      }
      result = ((uint64_t (*)(uint64_t, __int128 *))*a2)(v14, v7);
      if ((result & 1) == 0)
      {
        v19 = *v7;
        do
        {
          v16 = v14;
          *(_DWORD *)v7 = *(_DWORD *)v14;
          *((_QWORD *)v7 + 1) = *(_QWORD *)(v14 + 8);
          if (v9 < v13)
            break;
          v17 = (2 * v13) | 1;
          v14 = v8 + 16 * v17;
          v18 = 2 * v13 + 2;
          if (v18 < a3)
          {
            if ((*a2)(v8 + 16 * v17, v14 + 16))
            {
              v14 += 16;
              v17 = v18;
            }
          }
          result = ((uint64_t (*)(uint64_t, __int128 *))*a2)(v14, &v19);
          v7 = (__int128 *)v16;
          v13 = v17;
        }
        while (!(_DWORD)result);
        *(_DWORD *)v16 = v19;
        *(_QWORD *)(v16 + 8) = *((_QWORD *)&v19 + 1);
      }
    }
  }
  return result;
}

uint64_t std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = a1 + 16 * v6 + 16;
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1 + 16 * v6 + 16, a1 + 16 * v6 + 32))
    {
      v9 += 16;
      v10 = v11;
    }
    *(_DWORD *)a1 = *(_DWORD *)v9;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v9 + 8);
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned int,unsigned long> const&,std::pair<unsigned int,unsigned long> const&),std::pair<unsigned int,unsigned long>*>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v14 = v4;
    v15 = v5;
    v8 = result;
    v9 = v6 >> 1;
    v10 = result + 16 * (v6 >> 1);
    v11 = (__int128 *)(a2 - 16);
    result = (*a3)(v10, a2 - 16);
    if ((_DWORD)result)
    {
      v13 = *v11;
      do
      {
        v12 = v10;
        *(_DWORD *)v11 = *(_DWORD *)v10;
        *((_QWORD *)v11 + 1) = *(_QWORD *)(v10 + 8);
        if (!v9)
          break;
        v9 = (v9 - 1) >> 1;
        v10 = v8 + 16 * v9;
        result = (*a3)(v10, (uint64_t)&v13);
        v11 = (__int128 *)v12;
      }
      while ((result & 1) != 0);
      *(_DWORD *)v12 = v13;
      *(_QWORD *)(v12 + 8) = *((_QWORD *)&v13 + 1);
    }
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::find<unsigned int>(_QWORD *a1, unsigned int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::__erase_unique<unsigned int>(_QWORD *a1, unsigned int *a2)
{
  uint64_t *result;

  result = std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::find<unsigned int>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  void *__p;

  v2 = *a2;
  std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::remove(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    operator delete(v3);
  return v2;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<EQKit::Font::STIXCollection::StretchInfo,unsigned long>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x58uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 18) = 0;
  *((_BYTE *)v11 + 76) = -1;
  v11[10] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_217955C58(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void EQKit::Font::STIXCollection::setupRequiredFontInfos(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  v1 = 138543362;
  v2 = a1;
  _os_log_error_impl(&dword_2178E2000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "#STIX failed to download fonts: %{public}@", (uint8_t *)&v1, 0xCu);
}

void EQKit::Font::STIXCollection::setupRequiredFontInfos()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_2178E2000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "#STIX failed to download fonts -- timeout", v0, 2u);
}

void sub_217955F0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_217956170(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_217956270(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL EQKit::Unicode::isPseudoScript(EQKit::Unicode *this)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  uint64_t *v6;

  v1 = this;
  if (EQKit::Unicode::pseudoScriptSet(void)::onceToken != -1)
    dispatch_once(&EQKit::Unicode::pseudoScriptSet(void)::onceToken, &__block_literal_global_2);
  v2 = *(_QWORD *)(EQKit::Unicode::pseudoScriptSet(void)::set + 8);
  if (!v2)
    goto LABEL_14;
  v3 = EQKit::Unicode::pseudoScriptSet(void)::set + 8;
  do
  {
    v4 = *(_DWORD *)(v2 + 28);
    v5 = v4 >= v1;
    if (v4 >= v1)
      v6 = (uint64_t *)v2;
    else
      v6 = (uint64_t *)(v2 + 8);
    if (v5)
      v3 = v2;
    v2 = *v6;
  }
  while (*v6);
  if (v3 == EQKit::Unicode::pseudoScriptSet(void)::set + 8 || *(_DWORD *)(v3 + 28) > v1)
LABEL_14:
    v3 = EQKit::Unicode::pseudoScriptSet(void)::set + 8;
  return v3 != EQKit::Unicode::pseudoScriptSet(void)::set + 8;
}

uint64_t EQKit::Unicode::variationSelector(EQKit::Unicode *this)
{
  unsigned int v1;

  if (((_DWORD)this - 917760) >= 0xF0)
    v1 = 0;
  else
    v1 = (_DWORD)this - 917743;
  if (this >> 4 == 4064)
    return ((_DWORD)this - 65023);
  else
    return v1;
}

uint64_t ___ZN5EQKit7UnicodeL15pseudoScriptSetEv_block_invoke()
{
  uint64_t v0;
  uint64_t result;

  v0 = operator new();
  result = std::set<unsigned int>::set[abi:nn180100]<unsigned int const*>(v0, (unsigned int *)_ZZZN5EQKit7UnicodeL15pseudoScriptSetEvEUb_E17sPseudoScriptData, -[EQKitMathMLMStyle mathMLAttributes]::sAttributesDataInherited);
  EQKit::Unicode::pseudoScriptSet(void)::set = v0;
  return result;
}

void sub_2179563B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A153B8](v1, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t std::set<unsigned int>::set[abi:nn180100]<unsigned int const*>(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t *v4;
  unsigned int *v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)a1, v4, v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_21795643C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>(uint64_t **a1, uint64_t *a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<unsigned int>::__find_equal<unsigned int>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<unsigned int>::__find_equal<unsigned int>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t EQKitPseudoUnitLength::EQKitPseudoUnitLength(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  int v7;
  void *v8;
  std::string *v9;
  void **v10;
  int64_t v11;
  int64_t size;
  char *v13;
  void **v14;
  void **v15;
  std::string::size_type v16;
  int v17;
  int v18;
  int64_t v19;
  std::string *v20;
  int64_t v21;
  char *v22;
  char *v23;
  int v24;
  int64_t v25;
  std::string *v26;
  int64_t v27;
  char *v28;
  char *v29;
  int v31;
  std::string *v32;
  char *v33;
  char *v34;
  __int128 v35;
  void *__p[2];
  unsigned __int8 v37;
  void *v38[2];
  unsigned __int8 v39;
  void *v40[2];
  unsigned __int8 v41;
  std::string v42;

  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0;
  if (*((char *)a2 + 23) >= 0)
    v3 = a2;
  else
    v3 = (uint64_t *)*a2;
  v4 = (void *)objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v3);
  v5 = objc_msgSend(v4, "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x24BDD14A8], "whitespaceCharacterSet"));
  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD17A8]), "initWithString:", v5);
  if (objc_msgSend(v6, "scanString:intoString:", CFSTR("+"), 0))
  {
    v7 = 2;
  }
  else if (objc_msgSend(v6, "scanString:intoString:", CFSTR("-"), 0))
  {
    v7 = 3;
  }
  else
  {
    if ((objc_msgSend(v6, "isAtEnd") & 1) != 0)
    {
      *(_DWORD *)(a1 + 16) = 0;
      goto LABEL_12;
    }
    v7 = 1;
  }
  *(_DWORD *)(a1 + 16) = v7;
LABEL_12:
  v8 = (void *)objc_msgSend((id)objc_msgSend(v6, "string"), "substringFromIndex:", objc_msgSend(v6, "scanLocation"));
  std::string::basic_string[abi:nn180100]<0>(&v42, (char *)objc_msgSend((id)objc_msgSend(v8, "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x24BDD14A8], "whitespaceCharacterSet")), "UTF8String"));

  std::string::basic_string[abi:nn180100]<0>(v40, "height");
  std::string::basic_string[abi:nn180100]<0>(v38, "depth");
  std::string::basic_string[abi:nn180100]<0>(__p, "width");
  if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v42;
  else
    v9 = (std::string *)v42.__r_.__value_.__r.__words[0];
  if ((v41 & 0x80u) == 0)
    v10 = v40;
  else
    v10 = (void **)v40[0];
  if ((v41 & 0x80u) == 0)
    v11 = v41;
  else
    v11 = (int64_t)v40[1];
  if (!v11)
  {
    v16 = 0;
LABEL_44:
    v17 = 1;
    goto LABEL_61;
  }
  if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
  else
    size = v42.__r_.__value_.__l.__size_;
  v13 = (char *)v9 + size;
  if (size >= v11)
  {
    v18 = *(char *)v10;
    v19 = size;
    v20 = v9;
    do
    {
      v21 = v19 - v11;
      if (v21 == -1)
        break;
      v22 = (char *)memchr(v20, v18, v21 + 1);
      if (!v22)
        break;
      v23 = v22;
      if (!memcmp(v22, v10, v11))
      {
        if (v23 != v13)
        {
          v16 = v23 - (char *)v9;
          if (v23 - (char *)v9 != -1)
            goto LABEL_44;
        }
        break;
      }
      v20 = (std::string *)(v23 + 1);
      v19 = v13 - (v23 + 1);
    }
    while (v19 >= v11);
  }
  if ((v39 & 0x80u) == 0)
    v14 = v38;
  else
    v14 = (void **)v38[0];
  if ((v39 & 0x80u) == 0)
    v11 = v39;
  else
    v11 = (int64_t)v38[1];
  if (!v11)
  {
    v16 = 0;
LABEL_52:
    v17 = 2;
    goto LABEL_61;
  }
  if (size >= v11)
  {
    v24 = *(char *)v14;
    v25 = size;
    v26 = v9;
    do
    {
      v27 = v25 - v11;
      if (v27 == -1)
        break;
      v28 = (char *)memchr(v26, v24, v27 + 1);
      if (!v28)
        break;
      v29 = v28;
      if (!memcmp(v28, v14, v11))
      {
        if (v29 != v13)
        {
          v16 = v29 - (char *)v9;
          if (v29 - (char *)v9 != -1)
            goto LABEL_52;
        }
        break;
      }
      v26 = (std::string *)(v29 + 1);
      v25 = v13 - (v29 + 1);
    }
    while (v25 >= v11);
  }
  if ((v37 & 0x80u) == 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  if ((v37 & 0x80u) == 0)
    v11 = v37;
  else
    v11 = (int64_t)__p[1];
  if (!v11)
  {
    v16 = 0;
LABEL_60:
    v17 = 3;
LABEL_61:
    *(_DWORD *)(a1 + 20) = v17;
    std::string::erase(&v42, v16, v11);
    goto LABEL_62;
  }
  if (size >= v11)
  {
    v31 = *(char *)v15;
    v32 = v9;
    do
    {
      if (size - v11 == -1)
        break;
      v33 = (char *)memchr(v32, v31, size - v11 + 1);
      if (!v33)
        break;
      v34 = v33;
      if (!memcmp(v33, v15, v11))
      {
        if (v34 != v13)
        {
          v16 = v34 - (char *)v9;
          if (v34 - (char *)v9 != -1)
            goto LABEL_60;
        }
        break;
      }
      v32 = (std::string *)(v34 + 1);
      size = v13 - (v34 + 1);
    }
    while (size >= v11);
  }
  *(_DWORD *)(a1 + 20) = 0;
LABEL_62:
  EQKitLength::EQKitLength(&v35, &v42, 1);
  *(_OWORD *)a1 = v35;
  if (*(_DWORD *)(a1 + 20) && (*(_DWORD *)a1 | 2) != 6)
  {
    *(_DWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  if ((char)v37 < 0)
    operator delete(__p[0]);
  if ((char)v39 < 0)
    operator delete(v38[0]);
  if ((char)v41 < 0)
    operator delete(v40[0]);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  return a1;
}

void sub_217956A70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if (a28 < 0)
    operator delete(a23);
  if (a34 < 0)
    operator delete(a29);
  _Unwind_Resume(exception_object);
}

double EQKitPseudoUnitLength::adjustedLength(EQKitPseudoUnitLength *this, double a2, double a3)
{
  int v3;

  v3 = *((_DWORD *)this + 4);
  if (v3 != 1)
  {
    if (v3 == 3)
    {
      return a2 - a3;
    }
    else if (v3 == 2)
    {
      return a2 + a3;
    }
    else
    {
      return a2;
    }
  }
  return a3;
}

double EQKitPseudoUnitLength::calculatePseudoAdjustment(EQKitPseudoUnitLength *this, double a2)
{
  double result;

  result = *((double *)this + 1) * a2;
  if (*(_DWORD *)this == 4)
    return result / 100.0;
  return result;
}

double EQKitPseudoUnitLength::adjustedPseudoLength(EQKitPseudoUnitLength *this, double a2, double a3, double a4, double a5)
{
  int v5;
  double v6;
  int v7;

  v5 = *((_DWORD *)this + 5);
  switch(v5)
  {
    case 3:
      v6 = *((double *)this + 1) * a5;
      break;
    case 2:
      v6 = *((double *)this + 1) * a4;
      break;
    case 1:
      v6 = *((double *)this + 1) * a3;
      break;
    default:
      return a2;
  }
  if (*(_DWORD *)this == 4)
    v6 = v6 / 100.0;
  v7 = *((_DWORD *)this + 4);
  if (v7 != 1)
  {
    if (v7 == 3)
      return a2 - v6;
    if (v7 == 2)
      return v6 + a2;
    return a2;
  }
  return v6;
}

double EQKitPseudoUnitLength::resolveToAbsoluteLength(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  double v9;
  double v11;
  int v13;

  v9 = a3;
  v11 = EQKitLength::resolveToAbsoluteWithUnitProviderAndDefault((double *)a1, a2, a3);
  if (*(_DWORD *)(a1 + 20))
    return EQKitPseudoUnitLength::adjustedPseudoLength((EQKitPseudoUnitLength *)a1, v9, a4, a5, a6);
  v13 = *(_DWORD *)(a1 + 16);
  switch(v13)
  {
    case 1:
      return v11;
    case 3:
      return v9 - v11;
    case 2:
      return v11 + v9;
  }
  return v9;
}

void sub_217957094(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A153B8](v1, 0x1020C408D4A57B4);
  _Unwind_Resume(a1);
}

void sub_2179573A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL EQKit::ScriptLevel::fromString(const std::string *a1, uint64_t a2)
{
  unsigned int v3;
  BOOL v5;
  int v6;
  uint64_t v8;
  _QWORD v9[12];
  char v10;
  uint64_t v11;

  std::istringstream::basic_istringstream[abi:nn180100](v9, a1, 8);
  v3 = std::istream::peek() << 24;
  v5 = v3 == 721420288 || v3 == 754974720;
  v8 = 0x7FFFFFFFFFFFFFFFLL;
  MEMORY[0x219A152D4](v9, &v8);
  v6 = *(_DWORD *)((_BYTE *)&v9[4] + *(_QWORD *)(v9[0] - 24)) & 7;
  if (v6 == 2)
  {
    *(_QWORD *)a2 = v8;
    *(_BYTE *)(a2 + 8) = v5;
  }
  v9[0] = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  v9[2] = MEMORY[0x24BEDB848] + 16;
  if (v10 < 0)
    operator delete((void *)v9[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x219A1537C](&v11);
  return v6 == 2;
}

void sub_217957518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::istringstream::~istringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t EQKit::ScriptLevel::resolveWithBase(EQKit::ScriptLevel *this, uint64_t a2)
{
  uint64_t v2;

  if (*((_BYTE *)this + 8))
    v2 = a2;
  else
    v2 = 0;
  return v2 + *(_QWORD *)this;
}

_QWORD *EQKitGroupAlignmentContext::EQKitGroupAlignmentContext(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = std::vector<unsigned long>::vector(a1, a2);
  std::vector<unsigned long>::vector(v4 + 3, a2 + 24);
  return a1;
}

void sub_21795757C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void EQKitGroupAlignmentContext::addRow(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  EQKitAlignmentGroup *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  void *v16;
  uint64_t v17;

  v4 = a1[1] - *a1;
  v5 = (uint64_t)(a1 + 3);
  if (v4 != a1[4] - a1[3])
  {
    v16 = (void *)objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    objc_msgSend(v16, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void EQKitGroupAlignmentContext::addRow(const std::vector<EQKitAlignmentGroup> &)"), CFSTR("EQKitGroupAlignmentContext.mm"), 21, CFSTR("should have the same number of left widths as right widths"));
    v4 = a1[1] - *a1;
  }
  v7 = *a2;
  v6 = a2[1];
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a2) >> 3);
  if (v8 > v4 >> 3)
  {
    v17 = 0;
    std::vector<double>::resize((uint64_t)a1, v8, &v17);
    v17 = 0;
    std::vector<double>::resize(v5, v8, &v17);
  }
  if (v6 != v7)
  {
    v9 = 0;
    v10 = 0;
    if (v8 <= 1)
      v8 = 1;
    do
    {
      v11 = (EQKitAlignmentGroup *)(*a2 + v9);
      v12 = *a1;
      v13 = EQKitAlignmentGroup::leftWidth(v11);
      if (*(double *)(v12 + 8 * v10) >= v13)
        v13 = *(double *)(v12 + 8 * v10);
      *(double *)(*a1 + 8 * v10) = v13;
      v14 = a1[3];
      v15 = EQKitAlignmentGroup::rightWidth(v11);
      if (*(double *)(v14 + 8 * v10) >= v15)
        v15 = *(double *)(v14 + 8 * v10);
      *(double *)(a1[3] + 8 * v10++) = v15;
      v9 += 24;
    }
    while (v8 != v10);
  }
}

void EQKitGroupAlignmentContext::leftSpaceRequiredForGroup(EQKitGroupAlignmentContext *this, const EQKitAlignmentGroup *a2, unint64_t a3)
{
  unint64_t v5;
  void *v7;

  v5 = (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3;
  if (v5 <= a3)
  {
    v7 = (void *)objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "CGFloat EQKitGroupAlignmentContext::leftSpaceRequiredForGroup(const EQKitAlignmentGroup &, NSUInteger) const"), CFSTR("EQKitGroupAlignmentContext.mm"), 42, CFSTR("invalid group index"));
    v5 = (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3;
  }
  if (v5 > a3)
    EQKitAlignmentGroup::leftWidth(a2);
}

void EQKitGroupAlignmentContext::rightSpaceRequiredForGroup(EQKitGroupAlignmentContext *this, const EQKitAlignmentGroup *a2, unint64_t a3)
{
  unint64_t v5;
  void *v7;

  v5 = (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3;
  if (v5 <= a3)
  {
    v7 = (void *)objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "CGFloat EQKitGroupAlignmentContext::rightSpaceRequiredForGroup(const EQKitAlignmentGroup &, NSUInteger) const"), CFSTR("EQKitGroupAlignmentContext.mm"), 48, CFSTR("invalid group index"));
    v5 = (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3;
  }
  if (v5 > a3)
    EQKitAlignmentGroup::rightWidth(a2);
}

double EQKitGroupAlignmentContext::widthOfGroupsAfterIndex(EQKitGroupAlignmentContext *this, uint64_t a2)
{
  double *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  double *v9;
  double v10;
  float v11;
  double v12;
  double *v13;
  double *v14;
  float v15;
  double v16;
  void *v17;

  v5 = *(_QWORD *)this;
  v4 = (double *)*((_QWORD *)this + 1);
  v6 = (uint64_t)v4 - *(_QWORD *)this;
  if (v6 != *((_QWORD *)this + 4) - *((_QWORD *)this + 3))
  {
    v17 = (void *)objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
    objc_msgSend(v17, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "CGFloat EQKitGroupAlignmentContext::widthOfGroupsAfterIndex(NSUInteger) const"), CFSTR("EQKitGroupAlignmentContext.mm"), 54, CFSTR("should have the same number of left widths as right widths"));
    v5 = *(_QWORD *)this;
    v4 = (double *)*((_QWORD *)this + 1);
    v6 = (uint64_t)v4 - *(_QWORD *)this;
  }
  v7 = a2 + 1;
  result = 0.0;
  if (a2 + 1 < (unint64_t)(v6 >> 3))
  {
    v9 = (double *)(v5 + 8 * v7);
    v10 = 0.0;
    if (v9 != v4)
    {
      v11 = 0.0;
      do
      {
        v12 = *v9++;
        v11 = v12 + v11;
      }
      while (v9 != v4);
      v10 = v11 + 0.0;
    }
    v13 = (double *)*((_QWORD *)this + 4);
    v14 = (double *)(*((_QWORD *)this + 3) + 8 * v7);
    if (v14 != v13)
    {
      v15 = 0.0;
      do
      {
        v16 = *v14++;
        v15 = v16 + v15;
      }
      while (v14 != v13);
      result = v15;
    }
    return v10 + result;
  }
  return result;
}

uint64_t EQKitAlignmentGroup::EQKitAlignmentGroup(uint64_t result, int a2)
{
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = 0x7FEFFFFFFFFFFFFFLL;
  return result;
}

{
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = 0x7FEFFFFFFFFFFFFFLL;
  return result;
}

double EQKitAlignmentGroup::EQKitAlignmentGroup(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

double EQKitAlignmentGroup::increaseWidth(EQKitAlignmentGroup *this, double a2)
{
  double result;

  result = *(double *)this + a2;
  *(double *)this = result;
  return result;
}

BOOL EQKitAlignmentGroup::needsDecimalAlignmentPoint(EQKitAlignmentGroup *this)
{
  return *((_DWORD *)this + 2) == 4 && *((double *)this + 2) == 1.79769313e308;
}

double EQKitAlignmentGroup::saveAlignmentPoint(EQKitAlignmentGroup *this, double a2)
{
  double result;

  result = *(double *)this + a2;
  *((double *)this + 2) = result;
  return result;
}

double EQKitAlignmentGroup::leftWidth(EQKitAlignmentGroup *this)
{
  double result;
  int v2;

  result = *((double *)this + 2);
  if (result == 1.79769313e308)
  {
    v2 = *((_DWORD *)this + 2);
    if ((v2 - 3) >= 2)
    {
      result = 0.0;
      if (v2 == 2)
        return *(double *)this * 0.5;
    }
    else
    {
      return *(double *)this;
    }
  }
  return result;
}

double EQKitAlignmentGroup::rightWidth(EQKitAlignmentGroup *this)
{
  double v1;
  double v2;
  int v3;

  v1 = *(double *)this;
  v2 = *((double *)this + 2);
  if (v2 == 1.79769313e308)
  {
    v3 = *((_DWORD *)this + 2);
    v2 = *(double *)this;
    if ((v3 - 3) >= 2)
    {
      v2 = 0.0;
      if (v3 == 2)
        v2 = v1 * 0.5;
    }
  }
  return v1 - v2;
}

void sub_217957B64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_217957C28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t EQKitUtilGetDeviceColorSpace()
{
  if (EQKitUtilGetDeviceColorSpace::onceToken != -1)
    dispatch_once(&EQKitUtilGetDeviceColorSpace::onceToken, &__block_literal_global_3);
  return EQKitUtilGetDeviceColorSpace::sDeviceColor;
}

uint64_t EQKitUtilGetFakeContext()
{
  if (EQKitUtilGetFakeContext::onceToken != -1)
    dispatch_once(&EQKitUtilGetFakeContext::onceToken, &__block_literal_global_1);
  return EQKitUtilGetFakeContext::sFakeContext;
}

uint64_t EQKitUtilDynamicCast(uint64_t a1, uint64_t a2)
{
  if (!a2)
    return 0;
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return a2;
  return 0;
}

void *EQKitUtilProtocolCast(uint64_t a1, void *a2)
{
  if (!a2)
    return 0;
  if (objc_msgSend(a2, "conformsToProtocol:", a1))
    return a2;
  return 0;
}

CFTypeRef EQKitUtilCFTypeCast(uint64_t a1, CFTypeRef cf)
{
  if (!cf)
    return 0;
  if (CFGetTypeID(cf) == a1)
    return cf;
  return 0;
}

uint64_t EQKitUtilUTF32CharFromString(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unsigned __int16 v5;
  unsigned __int16 v6;

  v2 = objc_msgSend(a1, "length");
  if ((unint64_t)(v2 - 1) > 1)
    return 0;
  v3 = v2;
  objc_msgSend(a1, "getCharacters:range:", &v5, 0, v2);
  result = v5;
  if (v3 == 1)
    return result;
  if ((v5 & 0xFC00) != 0xD800)
    return 0;
  if ((v6 & 0xFC00) == 0xDC00)
    return v6 + (v5 << 10) - 56613888;
  return 0;
}

uint64_t EQKitUtilNewStringFromUTF32Char(int a1)
{
  unsigned int v1;
  uint64_t v2;
  _WORD v4[2];

  if ((a1 - 0x10000) >> 20)
  {
    v2 = 1;
    LOWORD(v1) = a1;
  }
  else
  {
    v1 = ((a1 + 67043328) >> 10) - 10240;
    v4[1] = a1 & 0x3FF | 0xDC00;
    v2 = 2;
  }
  v4[0] = v1;
  return objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithCharacters:length:", v4, v2);
}

_QWORD *EQKit::Font::CharacterProperty::Map::newMapFromDictionary(EQKit::Font::CharacterProperty::Map *this, NSDictionary *a2, const EQKit::Environment::Version *a3)
{
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t *v26;
  uint64_t v27;
  EQKit::StemStretch::Config::Entry *v28;
  EQKit::StemStretch::Config::Entry *v29;
  uint64_t *v30;
  _QWORD *v32;
  uint64_t v33;
  EQKit::Font::CharacterProperty::Map *obj;
  uint64_t v35;
  uint64_t i;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t **v42;
  uint64_t **v43;
  __int128 v44;
  void *__p[2];
  char v46;
  char v47;
  _DWORD v48[2];
  std::string v49;
  void *v50[2];
  char v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  std::string v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _DWORD *v65;
  _BYTE v66[128];
  _BYTE v67[128];
  _BYTE v68[128];
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)operator new();
  v4[2] = 0;
  v4[1] = 0;
  *v4 = v4 + 1;
  v4[4] = 0;
  v4[3] = v4 + 4;
  v43 = (uint64_t **)(v4 + 3);
  v4[5] = 0;
  v4[7] = 0;
  v4[6] = v4 + 7;
  v42 = (uint64_t **)(v4 + 6);
  v32 = v4;
  v4[8] = 0;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  obj = this;
  v35 = -[EQKit::Font::CharacterProperty::Map countByEnumeratingWithState:objects:count:](this, "countByEnumeratingWithState:objects:count:", &v61, v68, 16);
  if (v35)
  {
    v33 = *(_QWORD *)v62;
    do
    {
      for (i = 0; i != v35; ++i)
      {
        if (*(_QWORD *)v62 != v33)
          objc_enumerationMutation(obj);
        v5 = *(void **)(*((_QWORD *)&v61 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          std::string::basic_string[abi:nn180100]<0>(&v60, (char *)objc_msgSend(v5, "UTF8String"));
          v6 = objc_opt_class();
          v7 = (void *)EQKitUtilDynamicCast(v6, -[EQKit::Font::CharacterProperty::Map objectForKey:](obj, "objectForKey:", v5));
          v58 = 0u;
          v59 = 0u;
          v56 = 0u;
          v57 = 0u;
          v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v56, v67, 16);
          if (v8)
          {
            v38 = *(_QWORD *)v57;
            v40 = v7;
            do
            {
              v9 = 0;
              v39 = v8;
              do
              {
                if (*(_QWORD *)v57 != v38)
                  objc_enumerationMutation(v7);
                v41 = v9;
                v10 = *(void **)(*((_QWORD *)&v56 + 1) + 8 * v9);
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                {
                  v11 = EQKitUtilUTF32CharFromString(v10);
                  if (v11)
                  {
                    v12 = objc_opt_class();
                    v13 = (void *)EQKitUtilDynamicCast(v12, objc_msgSend(v40, "objectForKey:", v10));
                    v14 = v13;
                    if (!a2->super.isa
                      && (objc_msgSend(v13, "objectForKey:", CFSTR("analyzeMethod"))
                       || objc_msgSend(v14, "objectForKey:", CFSTR("minStemLength"))))
                    {
                      v15 = (id)objc_msgSend(v14, "mutableCopy");
                      v16 = objc_alloc_init(MEMORY[0x24BDBCED8]);
                      if (objc_msgSend(v14, "objectForKey:", CFSTR("analyzeMethod")))
                        objc_msgSend(v16, "setObject:forKey:", objc_msgSend(v14, "objectForKey:", CFSTR("analyzeMethod")), CFSTR("analyzeMethod"));
                      if (objc_msgSend(v14, "objectForKey:", CFSTR("minStemLength")))
                        objc_msgSend(v16, "setObject:forKey:", objc_msgSend(v14, "objectForKey:", CFSTR("minStemLength")), CFSTR("minStemLength"));
                      objc_msgSend(v15, "removeObjectForKey:", CFSTR("analyzeMethod"));
                      objc_msgSend(v15, "removeObjectForKey:", CFSTR("minStemLength"));
                      objc_msgSend(v15, "setObject:forKey:", v16, CFSTR("stemStretch"));

                    }
                    else
                    {
                      v15 = v14;
                    }
                    v54 = 0u;
                    v55 = 0u;
                    v52 = 0u;
                    v53 = 0u;
                    v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v52, v66, 16);
                    if (v17)
                    {
                      v18 = *(_QWORD *)v53;
                      do
                      {
                        v19 = 0;
                        do
                        {
                          if (*(_QWORD *)v53 != v18)
                            objc_enumerationMutation(v15);
                          v20 = *(void **)(*((_QWORD *)&v52 + 1) + 8 * v19);
                          objc_opt_class();
                          if ((objc_opt_isKindOfClass() & 1) != 0)
                          {
                            std::string::basic_string[abi:nn180100]<0>(v50, (char *)objc_msgSend(v20, "UTF8String"));
                            if (map(void)::onceToken != -1)
                              dispatch_once(&map(void)::onceToken, &__block_literal_global_4);
                            v21 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::find<std::string>(map(void)::map, (const void **)v50);
                            if (map(void)::onceToken != -1)
                              dispatch_once(&map(void)::onceToken, &__block_literal_global_4);
                            if (map(void)::map + 8 == v21)
                              v22 = 0;
                            else
                              v22 = *(_DWORD *)(v21 + 56);
                            v48[0] = v11;
                            v48[1] = v22;
                            if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
                              std::string::__init_copy_ctor_external(&v49, v60.__r_.__value_.__l.__data_, v60.__r_.__value_.__l.__size_);
                            else
                              v49 = v60;
                            v23 = objc_msgSend(v15, "objectForKey:", v20);
                            if ((v22 - 1) >= 0xC)
                            {
                              if (v22)
                              {
                                if (v22 == 13)
                                {
                                  v27 = objc_opt_class();
                                  v28 = (EQKit::StemStretch::Config::Entry *)EQKitUtilDynamicCast(v27, v23);
                                  if (v28)
                                  {
                                    EQKit::StemStretch::Config::Entry::Entry((uint64_t)__p);
                                    if (EQKit::StemStretch::Config::Entry::fromDictionary(v28, (NSDictionary *)__p, v29))
                                    {
                                      *(_QWORD *)&v44 = v48;
                                      v30 = std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::__emplace_unique_key_args<EQKit::Font::CharacterProperty::Map::Key,std::piecewise_construct_t const&,std::tuple<EQKit::Font::CharacterProperty::Map::Key const&>,std::tuple<>>(v42, (uint64_t)v48, (uint64_t)&std::piecewise_construct, (uint64_t *)&v44);
                                      *((_OWORD *)v30 + 4) = *(_OWORD *)__p;
                                      *((_BYTE *)v30 + 80) = v46;
                                    }
                                  }
                                }
                              }
                              else
                              {
                                NSLog((NSString *)CFSTR("character property '%@' not recognized"), v20);
                              }
                            }
                            else
                            {
                              v24 = objc_opt_class();
                              v25 = (void *)EQKitUtilDynamicCast(v24, objc_msgSend(v15, "objectForKey:", v20));
                              if (v25)
                              {
                                std::string::basic_string[abi:nn180100]<0>(__p, (char *)objc_msgSend(v25, "UTF8String"));
                                EQKitLength::EQKitLength(&v44, __p, 1);
                                if ((_DWORD)v44 == 3)
                                {
                                  v65 = v48;
                                  v26 = std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>>>::__emplace_unique_key_args<EQKit::Font::CharacterProperty::Map::Key,std::piecewise_construct_t const&,std::tuple<EQKit::Font::CharacterProperty::Map::Key const&>,std::tuple<>>(v43, (uint64_t)v48, (uint64_t)&std::piecewise_construct, (uint64_t *)&v65);
                                  *((_OWORD *)v26 + 4) = v44;
                                }
                                else
                                {
                                  NSLog((NSString *)CFSTR("character property '%@' expected an em length - %@"), v20, v23);
                                }
                                if (v47 < 0)
                                  operator delete(__p[0]);
                              }
                              else
                              {
                                NSLog((NSString *)CFSTR("character property '%@' expected a NSString - %@"), v20, v23);
                              }
                            }
                            if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v49.__r_.__value_.__l.__data_);
                            if (v51 < 0)
                              operator delete(v50[0]);
                          }
                          ++v19;
                        }
                        while (v17 != v19);
                        v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v52, v66, 16);
                      }
                      while (v17);
                    }
                  }
                }
                v7 = v40;
                v9 = v41 + 1;
              }
              while (v41 + 1 != v39);
              v8 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", &v56, v67, 16);
            }
            while (v8);
          }
          if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v60.__r_.__value_.__l.__data_);
        }
      }
      v35 = -[EQKit::Font::CharacterProperty::Map countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v61, v68, 16);
    }
    while (v35);
  }
  return v32;
}

void sub_2179585B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (a57 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void ___ZL3mapv_block_invoke()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2[3];
  int v3;
  _QWORD v4[3];
  int v5;
  _QWORD v6[3];
  int v7;
  _QWORD v8[3];
  int v9;
  _QWORD v10[3];
  int v11;
  _QWORD v12[3];
  int v13;
  _QWORD v14[3];
  int v15;
  _QWORD v16[3];
  int v17;
  _QWORD v18[3];
  int v19;
  _QWORD v20[3];
  int v21;
  _QWORD v22[3];
  int v23;
  _QWORD v24[3];
  int v25;
  _QWORD v26[3];
  int v27;
  const void *v28;

  v28 = (const void *)*MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:nn180100]<0>(v2, "baselineAdjust");
  v3 = 3;
  std::string::basic_string[abi:nn180100]<0>(v4, "radicalBaselineOffset");
  v5 = 4;
  std::string::basic_string[abi:nn180100]<0>(v6, "radicalCenterXOffset");
  v7 = 5;
  std::string::basic_string[abi:nn180100]<0>(v8, "radicalMaxXOffset");
  v9 = 6;
  std::string::basic_string[abi:nn180100]<0>(v10, "radicalAdditionalLeftPadding");
  v11 = 7;
  std::string::basic_string[abi:nn180100]<0>(v12, "radicalAdditionalRightPadding");
  v13 = 8;
  std::string::basic_string[abi:nn180100]<0>(v14, "scriptSuperHAdjust");
  v15 = 9;
  std::string::basic_string[abi:nn180100]<0>(v16, "scriptSubHAdjust");
  v17 = 10;
  std::string::basic_string[abi:nn180100]<0>(v18, "scriptOverHAdjust");
  v19 = 11;
  std::string::basic_string[abi:nn180100]<0>(v20, "scriptUnderHAdjust");
  v21 = 12;
  std::string::basic_string[abi:nn180100]<0>(v22, "stemStretch");
  v23 = 13;
  std::string::basic_string[abi:nn180100]<0>(v24, "accentOverHAdjust");
  v25 = 1;
  std::string::basic_string[abi:nn180100]<0>(v26, "accentUnderHAdjust");
  v27 = 2;
  v0 = operator new();
  std::map<std::string const,EQKit::Font::CharacterProperty::Enum>::map[abi:nn180100]<std::pair<std::string const,EQKit::Font::CharacterProperty::Enum> const*>(v0, v2, &v28);
  map(void)::map = v0;
  v1 = 52;
  do
  {
    if (*((char *)&v2[v1 - 1] - 1) < 0)
      operator delete((void *)v2[v1 - 4]);
    v1 -= 4;
  }
  while (v1 * 8);
}

void sub_21795888C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v12;

  MEMORY[0x219A153B8](v10, 0x1020C4062D53EE8);
  v12 = 416;
  while (1)
  {
    if (*(&a10 + v12 - 9) < 0)
      operator delete(*(void **)(&a10 + v12 - 32));
    v12 -= 32;
    if (!v12)
      _Unwind_Resume(a1);
  }
}

void sub_217958930()
{
  JUMPOUT(0x217958928);
}

uint64_t std::map<std::string const,EQKit::Font::CharacterProperty::Enum>::map[abi:nn180100]<std::pair<std::string const,EQKit::Font::CharacterProperty::Enum> const*>(uint64_t a1, const void **a2, const void **a3)
{
  uint64_t *v4;
  const void **v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::__map_value_compare<std::string const,std::__value_type<std::string const,EQKitMathMLElement::Enum>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,EQKitMathMLElement::Enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,EQKitMathMLElement::Enum> const&>((uint64_t **)a1, v4, v6, (uint64_t)v6);
      v6 += 4;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_2179589A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>>>::__emplace_unique_key_args<EQKit::Font::CharacterProperty::Map::Key,std::piecewise_construct_t const&,std::tuple<EQKit::Font::CharacterProperty::Map::Key const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>>>::__find_equal<EQKit::Font::CharacterProperty::Map::Key>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<EQKit::Font::CharacterProperty::Map::Key const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

_QWORD *std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>>>::__find_equal<EQKit::Font::CharacterProperty::Map::Key>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (uint64_t)(v4 + 4);
        if (!EQKit::Font::CharacterProperty::Map::Key::operator<(a3, (uint64_t)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!EQKit::Font::CharacterProperty::Map::Key::operator<(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

_QWORD *std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<EQKit::Font::CharacterProperty::Map::Key const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = EQKit::Font::CharacterProperty::Map::Key::Key(v6 + 4, *a2);
  *((_DWORD *)v6 + 16) = 1;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_217958B48(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,void *>>>::operator()[abi:nn180100](v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *EQKit::Font::CharacterProperty::Map::Key::Key(_QWORD *a1, uint64_t a2)
{
  std::string *v3;
  __int128 v4;

  *a1 = *(_QWORD *)a2;
  v3 = (std::string *)(a1 + 1);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    v3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,void *>>>::operator()[abi:nn180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 63) < 0)
      operator delete(__p[5]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t *std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::__emplace_unique_key_args<EQKit::Font::CharacterProperty::Map::Key,std::piecewise_construct_t const&,std::tuple<EQKit::Font::CharacterProperty::Map::Key const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>>>::__find_equal<EQKit::Font::CharacterProperty::Map::Key>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<EQKit::Font::CharacterProperty::Map::Key const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

_QWORD *std::__tree<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::__map_value_compare<EQKit::Font::CharacterProperty::Map::Key,std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>,std::less<EQKit::Font::CharacterProperty::Map::Key>,true>,std::allocator<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKit::StemStretch::Config::Entry>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<EQKit::Font::CharacterProperty::Map::Key const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x58uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<EQKit::Font::CharacterProperty::Map::Key const,EQKit::StemStretch::Config::Entry>::pair[abi:nn180100]<EQKit::Font::CharacterProperty::Map::Key const&>(v6 + 4, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_217958CFC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<EQKit::Font::CharacterProperty::Map::Key,EQKitLength>,void *>>>::operator()[abi:nn180100](v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<EQKit::Font::CharacterProperty::Map::Key const,EQKit::StemStretch::Config::Entry>::pair[abi:nn180100]<EQKit::Font::CharacterProperty::Map::Key const&>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = EQKit::Font::CharacterProperty::Map::Key::Key(a1, a2);
  EQKit::StemStretch::Config::Entry::Entry((uint64_t)(v3 + 4));
  return a1;
}

void sub_217958D44(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

uint64_t EQKit::StemStretch::Config::Entry::Entry(uint64_t this)
{
  *(_DWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_BYTE *)(this + 16) = *(_BYTE *)(this + 16) & 0xF0 | 1;
  return this;
}

{
  *(_DWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_BYTE *)(this + 16) = *(_BYTE *)(this + 16) & 0xF0 | 1;
  return this;
}

uint64_t EQKit::StemStretch::Config::Entry::fromDictionary(EQKit::StemStretch::Config::Entry *this, NSDictionary *a2, EQKit::StemStretch::Config::Entry *a3)
{
  uint64_t v5;
  __int128 *p_p;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  int v13;
  char v14;
  uint64_t v16;
  __int128 *v18;
  char v19;
  __int128 v21;
  __int128 __p;
  uint64_t v23;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    return 0;
  __p = 0uLL;
  v23 = 0;
  v5 = _stringForKey(this, (uint64_t)CFSTR("analyzeMethod"), (uint64_t)&__p);
  if ((_DWORD)v5)
  {
    if (SHIBYTE(v23) < 0)
    {
      if (*((_QWORD *)&__p + 1) != 11
        || (*(_QWORD *)__p == 0x7543726F7272694DLL ? (v7 = *(_QWORD *)(__p + 3) == 0x6576727543726F72) : (v7 = 0), !v7))
      {
        if (*((_QWORD *)&__p + 1) != 13)
          goto LABEL_25;
        p_p = (__int128 *)__p;
        goto LABEL_15;
      }
    }
    else
    {
      if (HIBYTE(v23) != 11)
      {
        if (HIBYTE(v23) != 13)
          goto LABEL_25;
        p_p = &__p;
LABEL_15:
        v8 = *(_QWORD *)p_p;
        v9 = *(_QWORD *)((char *)p_p + 5);
        if (v8 == 0x6C656C6C61726150 && v9 == 0x736D6574536C656CLL)
        {
          v11 = (uint64_t)a2[2].super.isa & 0xFC | 1;
LABEL_26:
          LOBYTE(a2[2].super.isa) = v11;
          goto LABEL_27;
        }
LABEL_25:
        v11 = (uint64_t)a2[2].super.isa & 0xFC;
        goto LABEL_26;
      }
      if ((_QWORD)__p != 0x7543726F7272694DLL || *(_QWORD *)((char *)&__p + 3) != 0x6576727543726F72)
        goto LABEL_25;
    }
    v11 = (uint64_t)a2[2].super.isa & 0xFC | 2;
    goto LABEL_26;
  }
LABEL_27:
  if (_stringForKey(this, (uint64_t)CFSTR("minStemLength"), (uint64_t)&__p))
  {
    EQKitLength::EQKitLength(&v21, &__p, 0);
    *(_OWORD *)&a2->super.isa = v21;
    v5 = 1;
  }
  v13 = _stringForKey(this, (uint64_t)CFSTR("axis"), (uint64_t)&__p);
  v14 = HIBYTE(v23);
  if (v13)
  {
    if (v23 < 0)
    {
      v16 = *((_QWORD *)&__p + 1);
      if (*((_QWORD *)&__p + 1) == 8)
      {
        if (*(_QWORD *)__p == 0x6C61636974726576)
        {
LABEL_52:
          v19 = (uint64_t)a2[2].super.isa & 0xF3 | 8;
          goto LABEL_60;
        }
        v16 = *((_QWORD *)&__p + 1);
      }
      else if (*((_QWORD *)&__p + 1) == 10 && *(_QWORD *)__p == 0x746E6F7A69726F68 && *(_WORD *)(__p + 8) == 27745)
      {
LABEL_55:
        v19 = (uint64_t)a2[2].super.isa & 0xF3 | 4;
        goto LABEL_60;
      }
      if (v16 != 4)
      {
        v5 = 1;
LABEL_63:
        operator delete((void *)__p);
        return v5;
      }
      v18 = (__int128 *)__p;
    }
    else
    {
      if (HIBYTE(v23) != 4)
      {
        if (HIBYTE(v23) != 8)
        {
          if (HIBYTE(v23) != 10)
            return 1;
          if ((_QWORD)__p != 0x746E6F7A69726F68 || WORD4(__p) != 27745)
            return 1;
          goto LABEL_55;
        }
        if ((_QWORD)__p != 0x6C61636974726576)
          return 1;
        goto LABEL_52;
      }
      v18 = &__p;
    }
    if (*(_DWORD *)v18 != 1701736302)
    {
LABEL_61:
      v5 = 1;
      goto LABEL_62;
    }
    v19 = LOBYTE(a2[2].super.isa) | 0xC;
LABEL_60:
    LOBYTE(a2[2].super.isa) = v19;
    goto LABEL_61;
  }
LABEL_62:
  if (v14 < 0)
    goto LABEL_63;
  return v5;
}

void sub_2179590B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _stringForKey(void *a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  char isKindOfClass;
  __int128 v7;
  uint64_t v8;

  v4 = (void *)objc_msgSend(a1, "objectForKey:", a2);
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    std::string::basic_string[abi:nn180100]<0>(&v7, (char *)objc_msgSend(v4, "UTF8String"));
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    *(_OWORD *)a3 = v7;
    *(_QWORD *)(a3 + 16) = v8;
  }
  else
  {
    MEMORY[0x219A15268](a3, "");
  }
  return isKindOfClass & 1;
}

uint64_t EQKit::StemStretch::Key::Key(uint64_t this)
{
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_WORD *)(this + 16) = -1;
  *(_DWORD *)(this + 20) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_WORD *)(this + 16) = -1;
  *(_DWORD *)(this + 20) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

EQKit::StemStretch::Key *EQKit::StemStretch::Key::Key(EQKit::StemStretch::Key *this, CTFontRef font, __int16 a3, int a4, double a5)
{
  *((_QWORD *)this + 1) = 0;
  *((_WORD *)this + 8) = a3;
  *((_DWORD *)this + 5) = a4;
  *((double *)this + 3) = a5;
  if (font)
  {
    *(_QWORD *)this = CTFontCopyPostScriptName(font);
    *((CGFloat *)this + 1) = CTFontGetSize(font);
  }
  return this;
}

EQKit::StemStretch::Key *EQKit::StemStretch::Key::Key(EQKit::StemStretch::Key *this, const EQKit::StemStretch::Key *a2)
{
  const void *v3;

  v3 = *(const void **)a2;
  *(_QWORD *)this = *(_QWORD *)a2;
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  if (v3)
    CFRetain(v3);
  return this;
}

uint64_t EQKit::StemStretch::Key::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;

  if (a1 != a2)
  {
    v4 = *(const void **)a1;
    if (*(_QWORD *)a1)
      CFRelease(v4);
    v5 = *(const void **)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    if (v5)
      CFRetain(v5);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  }
  return a1;
}

void EQKit::StemStretch::Key::~Key(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

BOOL EQKit::StemStretch::Key::operator==(uint64_t a1, uint64_t a2)
{
  const __CFString *v2;
  const __CFString *v3;
  _BOOL8 result;

  if (a1 == a2)
    return 1;
  if (*(unsigned __int16 *)(a1 + 16) != *(unsigned __int16 *)(a2 + 16)
    || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)
    || *(double *)(a1 + 24) != *(double *)(a2 + 24)
    || *(double *)(a1 + 8) != *(double *)(a2 + 8))
  {
    return 0;
  }
  v2 = *(const __CFString **)a1;
  v3 = *(const __CFString **)a2;
  if (*(const __CFString **)a1 == v3)
    return 1;
  result = 0;
  if (v2 && v3)
    return CFStringCompare(v2, v3, 0) == kCFCompareEqualTo;
  return result;
}

BOOL EQKit::StemStretch::Key::operator<(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v5;
  unsigned int v6;
  double v7;
  double v8;
  double v9;
  double v10;
  const __CFString *v11;
  const __CFString *v12;
  BOOL v13;

  v2 = *(unsigned __int16 *)(a1 + 16);
  v3 = *(unsigned __int16 *)(a2 + 16);
  if (v2 < v3)
    return 1;
  if (v2 != v3)
    return 0;
  v5 = *(_DWORD *)(a1 + 20);
  v6 = *(_DWORD *)(a2 + 20);
  if (v5 < v6)
    return 1;
  if (v5 != v6)
    return 0;
  v7 = *(double *)(a1 + 24);
  v8 = *(double *)(a2 + 24);
  if (v7 < v8)
    return 1;
  if (v7 != v8)
    return 0;
  v9 = *(double *)(a1 + 8);
  v10 = *(double *)(a2 + 8);
  if (v9 < v10)
    return 1;
  if (v9 != v10)
    return 0;
  v11 = *(const __CFString **)a1;
  v12 = *(const __CFString **)a2;
  if (v11 && v12)
    return CFStringCompare(v11, v12, 0) == kCFCompareLessThan;
  if (v11)
    v13 = 1;
  else
    v13 = v12 == 0;
  return !v13;
}

const __CFString *EQKit::StemStretch::Key::newFont(CGFloat *this)
{
  const __CFString *result;
  const __CTFontDescriptor *v3;
  CTFontRef v4;

  result = *(const __CFString **)this;
  if (result)
  {
    v3 = CTFontDescriptorCreateWithNameAndSize(result, this[1]);
    v4 = CTFontCreateWithFontDescriptor(v3, this[1], 0);
    CFRelease(v3);
    return (const __CFString *)v4;
  }
  return result;
}

EQKit::StemStretch::Key *EQKit::StemStretch::Key::keyForFontAndCharacter@<X0>(EQKit::StemStretch::Key *this@<X0>, const __CTFont *a2@<X1>, double a3@<D0>, uint64_t a4@<X8>)
{
  int v6;
  const __CTFont *v7;
  CGGlyph glyphs;
  UniChar characters;

  characters = (unsigned __int16)a2;
  glyphs = -1;
  if (this)
  {
    v6 = (int)a2;
    v7 = this;
    this = (EQKit::StemStretch::Key *)CTFontGetGlyphsForCharacters(this, &characters, &glyphs, 1);
    if ((_DWORD)this)
      return EQKit::StemStretch::Key::Key((EQKit::StemStretch::Key *)a4, v7, glyphs, v6, a3);
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_WORD *)(a4 + 16) = -1;
  *(_DWORD *)(a4 + 20) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  return this;
}

EQKit::StemStretch::Glyph *EQKit::StemStretch::Glyph::Glyph(EQKit::StemStretch::Glyph *this, const EQKit::StemStretch::Key *a2, const EQKit::StemStretch::Config::Entry *a3)
{
  const __CFString *v6;
  const __CTFont *v7;
  double Size;
  int v9;
  BOOL v10;
  EQKitPath *v11;

  *(_DWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 3);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  v6 = EQKit::StemStretch::Key::newFont((CGFloat *)a2);
  *((_QWORD *)this + 1) = EQKitPath::newPathFromGlyphWithFont((EQKitPath *)*((unsigned __int16 *)a2 + 8), (const __CTFont *)v6, v7);
  if (!a3)
    goto LABEL_6;
  if (*(_DWORD *)a3)
  {
    Size = CTFontGetSize((CTFontRef)v6);
    *((double *)this + 2) = EQKitLength::resolveToAbsoluteWithSizeAndRule(a3, Size, *((double *)a2 + 3));
  }
  v9 = *((_BYTE *)a3 + 16) & 3;
  if (v9 == 2)
  {
    v10 = EQKit::StemStretch::Glyph::analyzeMirrorCurve(this, a3);
LABEL_8:
    if (v10)
      goto LABEL_12;
    goto LABEL_9;
  }
  if (v9 == 1)
  {
LABEL_6:
    v10 = EQKit::StemStretch::Glyph::analyzeParallelStems(this, a3);
    goto LABEL_8;
  }
LABEL_9:
  *(_DWORD *)this = 0;
  v11 = (EQKitPath *)*((_QWORD *)this + 1);
  if (v11)
  {
    EQKitPath::~EQKitPath(v11);
    MEMORY[0x219A153B8]();
  }
  *((_QWORD *)this + 1) = 0;
LABEL_12:
  if (v6)
    CFRelease(v6);
  return this;
}

void sub_217959638(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;

  va_start(va, a2);
  v4 = *(void **)(v2 + 48);
  if (v4)
  {
    *(_QWORD *)(v2 + 56) = v4;
    operator delete(v4);
  }
  std::vector<EQKit::StemStretch::FeatureCluster>::__destroy_vector::operator()[abi:nn180100]((void ***)va);
  _Unwind_Resume(a1);
}

BOOL EQKit::StemStretch::Glyph::analyzeParallelStems(EQKit::StemStretch::Glyph *this, const EQKit::StemStretch::Config::Entry *a2)
{
  uint64_t v3;
  uint64_t *v5;
  char v6;
  _BOOL4 v7;
  _BOOL8 v8;
  _BOOL4 v9;
  double *v10;
  uint64_t v11;
  double v12;
  double v13;
  double *v14;
  double v15;
  double *v16;
  void *v17;
  double *v18;
  double v19;
  int *v20;
  __int128 v21;
  __int128 v22;
  double *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  double *v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  unint64_t v32;
  void **v34;
  int v35;
  uint64_t v36[3];
  __int128 v37;
  void *__p[2];
  double *v39;
  uint64_t v40;
  char v41[8];
  int v42;
  uint64_t v43[3];
  __int128 v44;
  __int128 v45;
  double *v46;
  uint64_t v47;
  void **v48;

  v3 = *((_QWORD *)this + 1);
  if (!v3)
    return 0;
  EQKit::StemStretch::FeatureRange::FeatureRange((uint64_t)v41, v3, 1);
  EQKit::StemStretch::FeatureRange::FeatureRange((uint64_t)&v34, *((_QWORD *)this + 1), 2);
  v5 = &v47;
  if (a2 && (v6 = *((_BYTE *)a2 + 16), (v6 & 8) != 0))
  {
    v7 = 0;
  }
  else
  {
    v7 = EQKit::StemStretch::FeatureRange::analyze((EQKit::StemStretch::FeatureRange *)v41, *((double *)this + 2));
    if (!a2)
      goto LABEL_9;
    v6 = *((_BYTE *)a2 + 16);
  }
  if ((((v6 & 4) != 0) | 2) != 2)
  {
    if (!v7)
      goto LABEL_31;
    goto LABEL_25;
  }
LABEL_9:
  v9 = EQKit::StemStretch::FeatureRange::analyze((EQKit::StemStretch::FeatureRange *)&v34, *((double *)this + 2));
  if (v7 && v9)
  {
    v11 = *((_QWORD *)&v45 + 1);
    v10 = v46;
    v12 = 0.0;
    v13 = 0.0;
    if (*((double **)&v45 + 1) != v46)
    {
      v14 = (double *)*((_QWORD *)&v45 + 1);
      do
      {
        v15 = *v14++;
        v13 = v13 + v15;
      }
      while (v14 != v46);
    }
    v17 = __p[1];
    v16 = v39;
    if (__p[1] != v39)
    {
      v12 = 0.0;
      v18 = (double *)__p[1];
      do
      {
        v19 = *v18++;
        v12 = v12 + v19;
      }
      while (v18 != v39);
    }
    if (v13 < v12)
    {
      if (v35)
      {
        *(_DWORD *)this = v35;
        v20 = &v35;
        v21 = *(_OWORD *)((char *)this + 24);
        *(_OWORD *)((char *)this + 24) = v37;
        v22 = *(_OWORD *)((char *)this + 40);
        *((void **)this + 5) = __p[0];
        *((_QWORD *)this + 6) = v17;
        v37 = v21;
        *(_OWORD *)__p = v22;
        v23 = (double *)*((_QWORD *)this + 7);
        *((_QWORD *)this + 7) = v16;
LABEL_23:
        v5 = &v40;
        v39 = v23;
LABEL_30:
        v31 = *((_QWORD *)this + 8);
        *((_QWORD *)this + 8) = *v5;
        *v5 = v31;
        *v20 = 0;
        goto LABEL_31;
      }
      goto LABEL_31;
    }
    if (!v42)
      goto LABEL_31;
    *(_DWORD *)this = v42;
    v20 = &v42;
    v29 = *(_OWORD *)((char *)this + 24);
    *(_OWORD *)((char *)this + 24) = v44;
    v44 = v29;
    v30 = *(_OWORD *)((char *)this + 40);
    *((_QWORD *)this + 5) = v45;
    *((_QWORD *)this + 6) = v11;
    v45 = v30;
    v28 = (double *)*((_QWORD *)this + 7);
LABEL_29:
    *((_QWORD *)this + 7) = v10;
    v46 = v28;
    goto LABEL_30;
  }
  if (v7)
  {
LABEL_25:
    if (!v42)
      goto LABEL_31;
    *(_DWORD *)this = v42;
    v20 = &v42;
    v26 = *(_OWORD *)((char *)this + 24);
    *(_OWORD *)((char *)this + 24) = v44;
    v44 = v26;
    v27 = *(_OWORD *)((char *)this + 40);
    *(_OWORD *)((char *)this + 40) = v45;
    v45 = v27;
    v28 = (double *)*((_QWORD *)this + 7);
    v10 = v46;
    goto LABEL_29;
  }
  if (v9 && v35)
  {
    *(_DWORD *)this = v35;
    v20 = &v35;
    v24 = *(_OWORD *)((char *)this + 24);
    *(_OWORD *)((char *)this + 24) = v37;
    v25 = *(_OWORD *)((char *)this + 40);
    *(_OWORD *)((char *)this + 40) = *(_OWORD *)__p;
    v37 = v24;
    *(_OWORD *)__p = v25;
    v23 = (double *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v39;
    goto LABEL_23;
  }
LABEL_31:
  v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  v8 = v32 >= 2 && v32 - 1 == (uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 3;
  if (__p[1])
  {
    v39 = (double *)__p[1];
    operator delete(__p[1]);
  }
  v48 = (void **)&v37;
  std::vector<EQKit::StemStretch::FeatureCluster>::__destroy_vector::operator()[abi:nn180100](&v48);
  std::__list_imp<EQKit::StemStretch::FeatureRange::Span>::clear(v36);
  if (*((_QWORD *)&v45 + 1))
  {
    v46 = (double *)*((_QWORD *)&v45 + 1);
    operator delete(*((void **)&v45 + 1));
  }
  v34 = (void **)&v44;
  std::vector<EQKit::StemStretch::FeatureCluster>::__destroy_vector::operator()[abi:nn180100](&v34);
  std::__list_imp<EQKit::StemStretch::FeatureRange::Span>::clear(v43);
  return v8;
}

void sub_217959940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  EQKit::StemStretch::FeatureRange::~FeatureRange((EQKit::StemStretch::FeatureRange *)va);
  _Unwind_Resume(a1);
}

BOOL EQKit::StemStretch::Glyph::analyzeMirrorCurve(EQKit::StemStretch::Glyph *this, const EQKit::StemStretch::Config::Entry *a2)
{
  unsigned int v3;
  int v4;
  EQKitPath *v5;
  unint64_t CurveMirrorParallelWithAxis;
  _BOOL8 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  EQKitPath *v11;
  double *v12;
  double v13;
  double v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t **v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  EQKitPath *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t **v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t **v41;
  _QWORD **v43;
  _QWORD *v44;
  uint64_t v45;
  double v46;

  if (a2)
    v3 = (*((unsigned __int8 *)a2 + 16) >> 2) & 3;
  else
    v3 = 0;
  if (v3 <= 1)
    v4 = 1;
  else
    v4 = v3;
  v5 = (EQKitPath *)*((_QWORD *)this + 1);
  if (!v5)
    return 0;
  v46 = 0.0;
  CurveMirrorParallelWithAxis = EQKitPath::findCurveMirrorParallelWithAxis(v5, v4, &v46);
  v7 = CurveMirrorParallelWithAxis != 0x7FFFFFFFFFFFFFFFLL;
  if (CurveMirrorParallelWithAxis != 0x7FFFFFFFFFFFFFFFLL)
  {
    v8 = CurveMirrorParallelWithAxis;
    v9 = EQKitPath::endPointIndexForElement(*((EQKitPath **)this + 1), CurveMirrorParallelWithAxis);
    v10 = EQKitPath::addLineToAfterElement(*((EQKitPath **)this + 1), v8);
    v11 = (EQKitPath *)*((_QWORD *)this + 1);
    EQKitPath::extractPath(v11);
    v12 = (double *)(*((_QWORD *)v11 + 1) + 16 * v9);
    v13 = *v12;
    v14 = v12[1];
    v44 = 0;
    v45 = 0;
    v43 = &v44;
    v15 = *((_QWORD *)this + 4);
    if (v15 >= *((_QWORD *)this + 5))
    {
      v16 = std::vector<EQKit::StemStretch::FeatureCluster>::__push_back_slow_path<EQKit::StemStretch::FeatureCluster>((uint64_t)this + 24, (uint64_t)&v43);
    }
    else
    {
      std::set<unsigned long>::set[abi:nn180100](*((uint64_t **)this + 4), (uint64_t)&v43);
      v16 = v15 + 24;
      *((_QWORD *)this + 4) = v15 + 24;
    }
    *((_QWORD *)this + 4) = v16;
    std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)&v43, v44);
    v44 = 0;
    v45 = 0;
    v43 = &v44;
    v17 = *((_QWORD *)this + 4);
    if (v17 >= *((_QWORD *)this + 5))
    {
      v18 = std::vector<EQKit::StemStretch::FeatureCluster>::__push_back_slow_path<EQKit::StemStretch::FeatureCluster>((uint64_t)this + 24, (uint64_t)&v43);
    }
    else
    {
      std::set<unsigned long>::set[abi:nn180100](*((uint64_t **)this + 4), (uint64_t)&v43);
      v18 = v17 + 24;
      *((_QWORD *)this + 4) = v17 + 24;
    }
    *((_QWORD *)this + 4) = v18;
    std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)&v43, v44);
    v19 = *((_QWORD *)this + 8);
    v20 = (uint64_t **)*((_QWORD *)this + 3);
    v21 = *((_QWORD *)this + 4);
    v22 = (char *)*((_QWORD *)this + 7);
    if ((unint64_t)v22 >= v19)
    {
      v24 = (char *)*((_QWORD *)this + 6);
      v25 = (v22 - v24) >> 3;
      v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 61)
        abort();
      v27 = v19 - (_QWORD)v24;
      if (v27 >> 2 > v26)
        v26 = v27 >> 2;
      v28 = (unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v26;
      if (v28)
      {
        v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)this + 64, v28);
        v24 = (char *)*((_QWORD *)this + 6);
        v22 = (char *)*((_QWORD *)this + 7);
      }
      else
      {
        v29 = 0;
      }
      v30 = &v29[8 * v25];
      v31 = &v29[8 * v28];
      *(_QWORD *)v30 = 0;
      v23 = v30 + 8;
      while (v22 != v24)
      {
        v32 = *((_QWORD *)v22 - 1);
        v22 -= 8;
        *((_QWORD *)v30 - 1) = v32;
        v30 -= 8;
      }
      *((_QWORD *)this + 6) = v30;
      *((_QWORD *)this + 7) = v23;
      *((_QWORD *)this + 8) = v31;
      if (v24)
        operator delete(v24);
    }
    else
    {
      *(_QWORD *)v22 = 0;
      v23 = v22 + 8;
    }
    *((_QWORD *)this + 7) = v23;
    v33 = (EQKitPath *)*((_QWORD *)this + 1);
    EQKitPath::extractPath(v33);
    *(_DWORD *)this = v4;
    v34 = *((_QWORD *)v33 + 2) - *((_QWORD *)v33 + 1);
    if (v34)
    {
      v35 = 0;
      v36 = 0;
      v37 = (uint64_t **)(v21 - 24);
      v38 = v34 >> 4;
      if (v38 <= 1)
        v39 = 1;
      else
        v39 = v38;
      do
      {
        if (v9 == v36)
        {
          if (v46 <= 0.0)
          {
            v43 = (_QWORD **)v9;
            goto LABEL_50;
          }
          v43 = (_QWORD **)v9;
        }
        else if (v10 == v36)
        {
          if (v46 > 0.0)
          {
            v43 = (_QWORD **)v10;
LABEL_50:
            v41 = v37;
            goto LABEL_51;
          }
          v43 = (_QWORD **)v10;
        }
        else
        {
          v40 = *((_QWORD *)v33 + 1);
          if (v3 > 1)
          {
            if (*(double *)(v40 + v35 + 8) > v14)
            {
LABEL_49:
              v43 = (_QWORD **)v36;
              goto LABEL_50;
            }
          }
          else if (*(double *)(v40 + v35) > v13)
          {
            goto LABEL_49;
          }
          v43 = (_QWORD **)v36;
        }
        v41 = v20;
LABEL_51:
        std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(v41, (unint64_t *)&v43, (uint64_t *)&v43);
        ++v36;
        v35 += 16;
      }
      while (v39 != v36);
    }
  }
  return v7;
}

void sub_217959C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

EQKit::StemStretch::Glyph *EQKit::StemStretch::Glyph::Glyph(EQKit::StemStretch::Glyph *this, const EQKit::StemStretch::Glyph *a2)
{
  EQKitPath *v4;

  *(_DWORD *)this = *(_DWORD *)a2;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  std::vector<EQKit::StemStretch::FeatureCluster>::__init_with_size[abi:nn180100]<EQKit::StemStretch::FeatureCluster*,EQKit::StemStretch::FeatureCluster*>((uint64_t *)this + 3, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3));
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  std::vector<EQKit::StemStretch::Stem>::__init_with_size[abi:nn180100]<EQKit::StemStretch::Stem*,EQKit::StemStretch::Stem*>((char *)this + 48, *((uint64_t **)a2 + 6), *((uint64_t **)a2 + 7), (uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3);
  if (*((_QWORD *)a2 + 1))
  {
    v4 = (EQKitPath *)operator new();
    EQKitPath::EQKitPath(v4, *((const EQKitPath **)a2 + 1));
    *((_QWORD *)this + 1) = v4;
  }
  return this;
}

void sub_217959D6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  void *v6;
  va_list va;

  va_start(va, a2);
  MEMORY[0x219A153B8](v4, 0x1070C40036CD406);
  v6 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 56) = v6;
    operator delete(v6);
  }
  std::vector<EQKit::StemStretch::FeatureCluster>::__destroy_vector::operator()[abi:nn180100]((void ***)va);
  _Unwind_Resume(a1);
}

void EQKit::StemStretch::Glyph::~Glyph(EQKit::StemStretch::Glyph *this)
{
  EQKitPath *v2;
  void *v3;
  void **v4;

  v2 = (EQKitPath *)*((_QWORD *)this + 1);
  if (v2)
  {
    EQKitPath::~EQKitPath(v2);
    MEMORY[0x219A153B8]();
  }
  v3 = (void *)*((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 7) = v3;
    operator delete(v3);
  }
  v4 = (void **)((char *)this + 24);
  std::vector<EQKit::StemStretch::FeatureCluster>::__destroy_vector::operator()[abi:nn180100](&v4);
}

uint64_t EQKit::StemStretch::Glyph::operator=(uint64_t a1, uint64_t a2)
{
  EQKitPath *v4;
  EQKitPath *v5;

  if (a1 != a2)
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v4 = *(EQKitPath **)(a1 + 8);
    if (v4)
    {
      EQKitPath::~EQKitPath(v4);
      MEMORY[0x219A153B8]();
    }
    if (*(_QWORD *)(a2 + 8))
    {
      v5 = (EQKitPath *)operator new();
      EQKitPath::EQKitPath(v5, *(const EQKitPath **)(a2 + 8));
    }
    else
    {
      v5 = 0;
    }
    *(_QWORD *)(a1 + 8) = v5;
    std::vector<EQKit::StemStretch::FeatureCluster>::__assign_with_size[abi:nn180100]<EQKit::StemStretch::FeatureCluster*,EQKit::StemStretch::FeatureCluster*>(a1 + 24, *(_QWORD *)(a2 + 24), *(uint64_t ***)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3));
    std::vector<EQKit::StemStretch::Stem>::__assign_with_size[abi:nn180100]<EQKit::StemStretch::Stem*,EQKit::StemStretch::Stem*>((_QWORD *)(a1 + 48), *(char **)(a2 + 48), *(char **)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3);
  }
  return a1;
}

void sub_217959EF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A153B8](v1, 0x1070C40036CD406);
  _Unwind_Resume(a1);
}

BOOL EQKit::StemStretch::FeatureRange::analyze(EQKit::StemStretch::FeatureRange *this, double a2)
{
  unint64_t v4;
  int v5;
  _QWORD *v6;
  CGPoint *v7;
  uint64_t v8;
  __n128 v9;
  CGPoint *p_y;
  CGPoint *v11;
  double v12;
  double v13;
  double v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v21;
  uint64_t v22;
  char *v23;
  __int128 *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  CGPoint *v30;
  CGFloat v31;
  char *v32;
  __int128 *v33;
  char v34;
  _QWORD *v35;
  __int128 *v36;
  uint64_t i;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  __int128 *j;
  __int128 *v44;
  __int128 *v45;
  char *v46;
  __int128 *v47;
  uint64_t v48;
  _QWORD *v49;
  __int128 *v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char *v56;
  double *v57;
  double *v58;
  char v59;
  uint64_t v60;
  double v61;
  double v62;
  double v63;
  double *v64;
  double v65;
  double v66;
  double v67;
  uint64_t k;
  char *v69;
  uint64_t v70;
  double *v71;
  double v72;
  double v73;
  uint64_t v74;
  _DWORD *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  BOOL v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t m;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  int v96;
  double v97;
  double v98;
  int v99;
  __int128 v100;
  unint64_t v101;
  unint64_t v102;
  double x;
  CGPoint v104;
  CGPoint v105;
  void *__p;
  char *v107;
  unint64_t v108;
  __int128 v109;
  int v110;
  uint64_t v111;
  _QWORD v112[14];

  v4 = 0;
  v112[12] = *MEMORY[0x24BDAC8D0];
  v5 = *((_DWORD *)this + 2);
  __p = 0;
  v107 = 0;
  v108 = 0;
  v6 = (_QWORD *)((char *)this + 16);
  v7 = (CGPoint *)MEMORY[0x24BDBEFB0];
  v96 = v5;
  while (1)
  {
    v8 = *(_QWORD *)this;
    EQKitPath::extractPath(*(EQKitPath **)this);
    if (v4 >= (uint64_t)(*(_QWORD *)(v8 + 40) - *(_QWORD *)(v8 + 32)) >> 4)
      break;
    v104 = *v7;
    v105 = v104;
    if (!EQKitPath::elementMinMax(*(EQKitPath **)this, v4, &v105, &v104))
      goto LABEL_76;
    p_y = (CGPoint *)&v105.y;
    if (v5 == 1)
      p_y = &v105;
    x = p_y->x;
    v11 = (CGPoint *)&v104.y;
    if (v5 == 1)
      v11 = &v104;
    v12 = v11->x;
    v101 = 0;
    v102 = 0;
    if (EQKitPath::isLineTo(*(unint64_t ***)this, v4, &v102, &v101, 0))
    {
      v13 = EQKitPath::vector(*(EQKitPath **)this, v102, v101);
      if (v5 == 1)
        v13 = v14;
      v15 = v13 == 0.0;
    }
    else
    {
      v15 = 0;
    }
    v16 = *((_QWORD *)this + 3);
    LOBYTE(v97) = 0;
    v17 = std::__lower_bound[abi:nn180100]<std::_ClassicAlgPolicy,std::__list_iterator<EQKit::StemStretch::FeatureRange::Span,void *>,std::__list_iterator<EQKit::StemStretch::FeatureRange::Span,void *>,double,std::__identity,std::__less<void,void>>(v16, (uint64_t)v6, &x);
    v18 = v17;
    if (x >= v12 || v6 == (_QWORD *)v17)
    {
      v21 = x != v12 || v6 == (_QWORD *)v17 || v15;
      if ((v21 & 1) == 0)
      {
        v22 = 0;
        v97 = x;
        v98 = v12;
        v99 = 1;
        v100 = 0uLL;
        do
        {
          v23 = (char *)&v109 + v22;
          *(_OWORD *)v23 = xmmword_217C27960;
          *((_DWORD *)v23 + 4) = 0;
          *((_QWORD *)v23 + 3) = 0;
          *((_QWORD *)v23 + 4) = 0;
          v22 += 40;
        }
        while (v22 != 120);
        v24 = (__int128 *)(v17 + 16);
        v25 = EQKit::StemStretch::FeatureRange::Span::split(v17 + 16, (uint64_t)&v97, (uint64_t)&v109);
        if (v25)
        {
          v26 = v25 - 1;
          if (v25 == 1)
          {
            if (v24 != &v109)
            {
              *(_OWORD *)(v18 + 16) = v109;
              *(_DWORD *)(v18 + 32) = v110;
              *(_QWORD *)(v18 + 40) = v111;
              v27 = v112;
              v28 = (_QWORD *)v18;
              goto LABEL_71;
            }
            v28 = (_QWORD *)v18;
          }
          else
          {
            v47 = &v109;
            v48 = v25 - 1;
            v28 = (_QWORD *)v18;
            do
            {
              std::list<EQKit::StemStretch::FeatureRange::Span>::insert((uint64_t)v6, (uint64_t *)v18, (uint64_t)v47);
              if (v28 == (_QWORD *)v18)
                v28 = v49;
              v47 = (__int128 *)((char *)v47 + 40);
              --v48;
            }
            while (v48);
            v50 = (__int128 *)((char *)&v109 + 40 * v26);
            if (v24 == v50)
            {
              v7 = (CGPoint *)MEMORY[0x24BDBEFB0];
            }
            else
            {
              *(_OWORD *)(v18 + 16) = *v50;
              v51 = (char *)&v109 + 40 * v26;
              *(_DWORD *)(v18 + 32) = *((_DWORD *)v51 + 4);
              *(_QWORD *)(v18 + 40) = *((_QWORD *)v51 + 3);
              v27 = v51 + 32;
              v7 = (CGPoint *)MEMORY[0x24BDBEFB0];
LABEL_71:
              *(_QWORD *)(v18 + 48) = *v27;
            }
          }
          EQKit::StemStretch::FeatureRange::collapse((uint64_t)this, v28, (_QWORD *)v18);
        }
        v5 = v96;
      }
    }
    else
    {
      if (x < *(double *)(v17 + 16) && *((_QWORD *)this + 3) != v17)
        v18 = *(_QWORD *)v17;
      if (v15)
        v29 = 2;
      else
        v29 = 1;
      v97 = x;
      v98 = v12;
      v99 = v29;
      v100 = 0uLL;
      if (v15)
      {
        v30 = (CGPoint *)&v105.y;
        if (v5 != 1)
          v30 = &v105;
        v31 = v30->x;
        *(CGFloat *)&v100 = v30->x;
        v32 = v107;
        if ((unint64_t)v107 >= v108)
        {
          v33 = (__int128 *)std::vector<EQKit::StemStretch::FeatureRange::Span>::__push_back_slow_path<EQKit::StemStretch::FeatureRange::Span const&>((uint64_t *)&__p, (uint64_t)&v97);
        }
        else
        {
          *(double *)v107 = x;
          *((double *)v32 + 1) = v12;
          *((_DWORD *)v32 + 4) = 2;
          *((CGFloat *)v32 + 3) = v31;
          v33 = (__int128 *)(v32 + 40);
          *((_QWORD *)v32 + 4) = 0;
        }
        v107 = (char *)v33;
      }
      if ((_QWORD *)v18 != v6)
      {
        v34 = 0;
        v35 = (_QWORD *)v18;
        while (1)
        {
          v36 = (__int128 *)(v35 + 2);
          if (*((double *)v35 + 2) >= v12)
          {
LABEL_62:
            v5 = v96;
            if ((v34 & 1) != 0)
              EQKit::StemStretch::FeatureRange::collapse((uint64_t)this, (_QWORD *)v18, v35);
            goto LABEL_64;
          }
          for (i = 0; i != 120; i += 40)
          {
            v38 = (char *)&v109 + i;
            *(_OWORD *)v38 = xmmword_217C27960;
            *((_DWORD *)v38 + 4) = 0;
            *((_QWORD *)v38 + 3) = 0;
            *((_QWORD *)v38 + 4) = 0;
          }
          v39 = EQKit::StemStretch::FeatureRange::Span::split((uint64_t)(v35 + 2), (uint64_t)&v97, (uint64_t)&v109);
          v40 = v39;
          if (v39)
            break;
LABEL_60:
          v35 = (_QWORD *)v35[1];
          if (v35 == v6)
          {
            v35 = v6;
            goto LABEL_62;
          }
        }
        v41 = v39 - 1;
        if (v39 == 1)
        {
          if (v36 != &v109)
          {
            *((_OWORD *)v35 + 1) = v109;
            *((_DWORD *)v35 + 8) = v110;
            v35[5] = v111;
            v42 = v112;
            goto LABEL_58;
          }
        }
        else
        {
          for (j = &v109; --v40; j = v44)
          {
            v44 = (__int128 *)((char *)j + 40);
            std::list<EQKit::StemStretch::FeatureRange::Span>::insert((uint64_t)v6, v35, (uint64_t)j);
          }
          v45 = (__int128 *)((char *)&v109 + 40 * v41);
          if (v36 != v45)
          {
            *((_OWORD *)v35 + 1) = *v45;
            v46 = (char *)&v109 + 40 * v41;
            *((_DWORD *)v35 + 8) = *((_DWORD *)v46 + 4);
            v35[5] = *((_QWORD *)v46 + 3);
            v42 = v46 + 32;
LABEL_58:
            v35[6] = *v42;
          }
        }
        v34 = 1;
        goto LABEL_60;
      }
LABEL_64:
      v7 = (CGPoint *)MEMORY[0x24BDBEFB0];
    }
LABEL_76:
    ++v4;
  }
  v52 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((v107 - (_BYTE *)__p) >> 3));
  *(_QWORD *)&v109 = EQKit::StemStretch::FeatureRange::Span::compareOrthogonal;
  if (v107 == __p)
    v53 = 0;
  else
    v53 = v52;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*,false>((uint64_t)__p, (__int128 *)v107, (uint64_t (**)(__int128 *, __int128 *))&v109, v53, 1, v9);
  EQKit::StemStretch::FeatureRange::collapse((uint64_t)this, (uint64_t *)&__p);
  v54 = *((_QWORD *)this + 3);
  if ((_QWORD *)v54 == v6)
    goto LABEL_125;
  v55 = 0;
  do
  {
    if (*(_DWORD *)(v54 + 32) != 2)
      goto LABEL_119;
    v57 = (double *)__p;
    v56 = v107;
    if (__p == v107)
      goto LABEL_118;
    v58 = 0;
    v59 = 0;
    v60 = 0;
    v61 = 0.0;
    v62 = 0.0;
    v63 = 0.0;
    v64 = (double *)__p;
    do
    {
      v65 = *v64;
      if (*(double *)(v54 + 24) > *v64)
      {
        v66 = v64[1];
        if (*(double *)(v54 + 16) < v66)
        {
          if (v58)
          {
            v67 = vabdd_f64(v64[3], v58[3]);
            if (v61 <= v67)
              v61 = v67;
            v59 = 1;
            v58 = 0;
            if (!v60)
              goto LABEL_97;
          }
          else
          {
            v58 = v64;
            if (!v60)
            {
LABEL_97:
              ++v60;
              v63 = v65;
              v62 = v66;
              goto LABEL_98;
            }
          }
          if (v63 > v65)
            v65 = v63;
          if (v62 < v66)
            v66 = v62;
          goto LABEL_97;
        }
      }
LABEL_98:
      v64 += 5;
    }
    while (v64 != (double *)v107);
    if (!v60)
      goto LABEL_118;
    v97 = v63;
    v98 = v62;
    v99 = 0;
    v100 = 0uLL;
    do
    {
      if (*(double *)(v54 + 24) <= *v57 || *(double *)(v54 + 16) >= v57[1])
      {
        for (k = 0; k != 120; k += 40)
        {
          v69 = (char *)&v109 + k;
          *(_OWORD *)v69 = xmmword_217C27960;
          *((_DWORD *)v69 + 4) = 0;
          *((_QWORD *)v69 + 3) = 0;
          *((_QWORD *)v69 + 4) = 0;
        }
        v70 = EQKit::StemStretch::FeatureRange::Span::split((uint64_t)&v97, (uint64_t)v57, (uint64_t)&v109);
        if (v70)
        {
          v71 = (double *)&v109;
          while (1)
          {
            if (*(double *)(v54 + 24) > *v71)
            {
              v72 = v71[1];
              if (*(double *)(v54 + 16) < v72)
                break;
            }
            v71 += 5;
            if (!--v70)
              goto LABEL_113;
          }
          if (v71 != &v97)
          {
            v97 = *v71;
            v98 = v72;
            v99 = *((_DWORD *)v71 + 4);
            v100 = *(_OWORD *)(v71 + 3);
          }
        }
LABEL_113:
        v56 = v107;
      }
      v57 += 5;
    }
    while (v57 != (double *)v56);
    if (v98 < v97)
      goto LABEL_118;
    v73 = vabdd_f64(v98, v97);
    if (((v73 >= a2) & v59) != 1)
    {
      if (v73 >= a2)
        goto LABEL_122;
LABEL_118:
      v55 = 1;
      *(_DWORD *)(v54 + 32) = 1;
      goto LABEL_119;
    }
    if (v61 / (v98 - v97) >= 2.0)
      goto LABEL_118;
LABEL_122:
    *(double *)(v54 + 48) = v73;
LABEL_119:
    v54 = *(_QWORD *)(v54 + 8);
  }
  while ((_QWORD *)v54 != v6);
  if ((v55 & 1) != 0)
    EQKit::StemStretch::FeatureRange::collapse((uint64_t)this, *((_QWORD **)this + 3), v6);
LABEL_125:
  v74 = *((_QWORD *)this + 4);
  if (v74)
  {
    v75 = (_DWORD *)*((_QWORD *)this + 3);
    if (v75[8]
      || (v76 = *(_QWORD *)v75,
          *(_QWORD *)(v76 + 8) = *((_QWORD *)v75 + 1),
          **((_QWORD **)v75 + 1) = v76,
          *((_QWORD *)this + 4) = v74 - 1,
          operator delete(v75),
          (v74 = *((_QWORD *)this + 4)) != 0))
    {
      v77 = (uint64_t *)*v6;
      if (*(_DWORD *)(*v6 + 32)
        || (v78 = *v77,
            *(_QWORD *)(v78 + 8) = v77[1],
            *(_QWORD *)v77[1] = v78,
            *((_QWORD *)this + 4) = v74 - 1,
            operator delete(v77),
            (v74 = *((_QWORD *)this + 4)) != 0))
      {
        v79 = *((_QWORD *)this + 3);
        if (*(_DWORD *)(v79 + 32) != 2)
          goto LABEL_151;
        v80 = *(_QWORD *)(v79 + 16);
        v81 = operator new(0x38uLL);
        v81[2] = v80;
        v81[3] = v80;
        *((_DWORD *)v81 + 8) = 1;
        v81[5] = 0;
        v81[6] = 0;
        *v81 = v6;
        v81[1] = v79;
        *(_QWORD *)v79 = v81;
        v82 = __CFADD__(v74++, 1);
        *((_QWORD *)this + 3) = v81;
        *((_QWORD *)this + 4) = v74;
        if (!v82)
        {
LABEL_151:
          v83 = (_QWORD *)*v6;
          if (*(_DWORD *)(*v6 + 32) == 2)
          {
            v84 = v83[3];
            v85 = operator new(0x38uLL);
            v85[2] = v84;
            v85[3] = v84;
            *((_DWORD *)v85 + 8) = 1;
            v85[5] = 0;
            v85[6] = 0;
            *v85 = v83;
            v85[1] = v6;
            v83[1] = v85;
            *((_QWORD *)this + 2) = v85;
            *((_QWORD *)this + 4) = v74 + 1;
          }
        }
      }
    }
  }
  for (m = *((_QWORD *)this + 3); (_QWORD *)m != v6; m = *(_QWORD *)(m + 8))
  {
    v87 = *(_DWORD *)(m + 32);
    if (v87 == 1)
    {
      EQKit::StemStretch::FeatureRange::addFeatureCluster(this, *(double *)(m + 16), *(double *)(m + 24));
    }
    else if (v87 == 2)
    {
      EQKit::StemStretch::FeatureRange::addStem(this, *(double *)(m + 16), *(double *)(m + 24), *(double *)(m + 48));
    }
  }
  v89 = *((_QWORD *)this + 5);
  v88 = *((_QWORD *)this + 6);
  v92 = (char *)this + 64;
  v90 = *((_QWORD *)this + 8);
  v91 = *((_QWORD *)v92 + 1);
  if (__p)
  {
    v107 = (char *)__p;
    operator delete(__p);
  }
  v93 = 0xAAAAAAAAAAAAAAABLL * ((v88 - v89) >> 3);
  return v93 > 1 && v93 == ((v91 - v90) >> 3) + 1;
}

void sub_21795A768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void EQKit::StemStretch::FeatureRange::~FeatureRange(EQKit::StemStretch::FeatureRange *this)
{
  void *v2;
  void **v3;

  v2 = (void *)*((_QWORD *)this + 8);
  if (v2)
  {
    *((_QWORD *)this + 9) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 40);
  std::vector<EQKit::StemStretch::FeatureCluster>::__destroy_vector::operator()[abi:nn180100](&v3);
  std::__list_imp<EQKit::StemStretch::FeatureRange::Span>::clear((_QWORD *)this + 2);
}

_QWORD *EQKit::StemStretch::FeatureCluster::FeatureCluster(_QWORD *this)
{
  this[2] = 0;
  this[1] = 0;
  *this = this + 1;
  return this;
}

{
  this[2] = 0;
  this[1] = 0;
  *this = this + 1;
  return this;
}

void EQKit::StemStretch::FeatureCluster::~FeatureCluster(EQKit::StemStretch::FeatureCluster *this)
{
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
}

{
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
}

double *EQKit::StemStretch::Stem::Stem(double *this, double a2)
{
  *this = a2;
  return this;
}

{
  *this = a2;
  return this;
}

uint64_t *EQKit::StemStretch::FeatureCluster::addPoint(uint64_t **this, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(this, (unint64_t *)&v3, &v3);
}

CGPath *EQKit::StemStretch::Glyph::newPathWithLength(EQKit::StemStretch::Glyph *this, double a2, CGSize *a3)
{
  uint64_t v4;
  float64x2_t v7;
  CGFloat *v8;
  CGPath *Mutable;
  double v10;
  double v11;
  int v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CGSize *v20;
  EQKitPath *v21;
  uint64_t v22;
  unint64_t v23;
  BOOL v24;
  unint64_t v25;
  float64x2_t v26;
  uint64_t v27;
  float64x2_t *v28;
  uint64_t v29;
  int32x2_t v30;
  int64x2_t v31;
  int8x16_t v32;
  int8x16_t v33;
  float64x2_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  BOOL v42;
  double width;
  double height;
  float64x2_t v46;
  float64x2_t v47;
  CGAffineTransform v48;
  void *__p[3];

  v4 = *((_QWORD *)this + 1);
  if (!v4)
    return 0;
  v7 = *(float64x2_t *)MEMORY[0x24BDBEFB0];
  if (*(_BYTE *)(v4 + 120))
  {
    v8 = (CGFloat *)(v4 + 88);
  }
  else
  {
    v46 = *(float64x2_t *)MEMORY[0x24BDBEFB0];
    v8 = EQKitPath::computePathBounds((CGFloat *)v4);
    v7 = v46;
  }
  v10 = v8[2];
  v11 = v8[3];
  v12 = *(_DWORD *)this;
  if (*(_DWORD *)this == 1)
    v13 = v8[2];
  else
    v13 = v8[3];
  v14 = a2 - v13;
  if (a2 - v13 <= 0.0)
  {
    v19 = *((_QWORD *)this + 1);
    if (*(_BYTE *)(v19 + 120))
      v20 = (CGSize *)(v19 + 88);
    else
      v20 = (CGSize *)EQKitPath::computePathBounds((CGFloat *)v19);
    width = v20->width;
    height = v20->height;
    *a3 = v20[1];
    Mutable = CGPathCreateMutable();
    memset(&v48, 0, sizeof(v48));
    CGAffineTransformMakeTranslation(&v48, -width, -height);
    EQKitPath::appendToCGPath(*((uint64_t **)this + 1), Mutable, &v48, 0);
  }
  else
  {
    v15 = *v8;
    v16 = v8[1];
    v18 = *((_QWORD *)this + 6);
    v17 = *((_QWORD *)this + 7);
    a3->width = v10;
    a3->height = v11;
    v47 = v7;
    if (v12 == 1)
      a3->width = v10 + v14;
    else
      a3->height = v14 + v11;
    v21 = (EQKitPath *)*((_QWORD *)this + 1);
    EQKitPath::extractPath(v21);
    std::vector<CGPoint>::vector(__p, (uint64_t)v21 + 8);
    v22 = *((_QWORD *)this + 3);
    v23 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 4) - v22) >> 3);
    v24 = v23 >= 2;
    v25 = v23 - 2;
    v26 = v47;
    if (v24)
    {
      v27 = 0;
      v28 = (float64x2_t *)__p[0];
      v29 = ((uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 3) + 1;
      v30 = vdup_n_s32(v12 == 1);
      v31.i64[0] = v30.u32[0];
      v31.i64[1] = v30.u32[1];
      v32 = (int8x16_t)vdupq_lane_s64(0x8000000000000000, 0);
      v33.i64[1] = v32.i64[1];
      *(double *)v33.i64 = v14 / (double)(unint64_t)((v17 - v18) >> 3);
      v32.i64[1] = v33.i64[0];
      v34 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v31, 0x3FuLL)), v33, v32);
      v35 = 1;
      do
      {
        if (v35 == v29)
          break;
        v26 = vaddq_f64(v26, v34);
        v36 = (_QWORD *)(v22 + 24 * v35);
        v39 = (_QWORD *)*v36;
        v37 = v36 + 1;
        v38 = v39;
        if (v39 != v37)
        {
          do
          {
            v28[v38[4]] = vaddq_f64(v26, v28[v38[4]]);
            v40 = (_QWORD *)v38[1];
            if (v40)
            {
              do
              {
                v41 = v40;
                v40 = (_QWORD *)*v40;
              }
              while (v40);
            }
            else
            {
              do
              {
                v41 = (_QWORD *)v38[2];
                v42 = *v41 == (_QWORD)v38;
                v38 = v41;
              }
              while (!v42);
            }
            v38 = v41;
          }
          while (v41 != v37);
        }
        ++v35;
        v42 = v27++ == v25;
      }
      while (!v42);
    }
    Mutable = CGPathCreateMutable();
    memset(&v48, 0, sizeof(v48));
    CGAffineTransformMakeTranslation(&v48, -v15, -v16);
    EQKitPath::appendToCGPath(*((uint64_t **)this + 1), Mutable, &v48, (uint64_t *)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  return Mutable;
}

void sub_21795AB1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t **EQKit::StemStretch::FeatureCluster::operator=(uint64_t **a1, uint64_t **a2)
{
  if (a1 != a2)
    std::__tree<unsigned long>::__assign_multi<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>(a1, *a2, a2 + 1);
  return a1;
}

BOOL EQKit::StemStretch::FeatureCluster::containsPoint(EQKit::StemStretch::FeatureCluster *this, unint64_t a2)
{
  char *v2;
  _QWORD *v3;
  _QWORD *v4;
  char *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;

  v4 = (_QWORD *)*((_QWORD *)this + 1);
  v2 = (char *)this + 8;
  v3 = v4;
  if (!v4)
    goto LABEL_12;
  v5 = v2;
  do
  {
    v6 = v3[4];
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = (char *)v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 == v2 || *((_QWORD *)v5 + 4) > a2)
LABEL_12:
    v5 = v2;
  return v5 != v2;
}

double EQKit::StemStretch::Stem::Stem(EQKit::StemStretch::Stem *this, const EQKit::StemStretch::Stem *a2)
{
  double result;

  result = *(double *)a2;
  *(_QWORD *)this = *(_QWORD *)a2;
  return result;
}

{
  double result;

  result = *(double *)a2;
  *(_QWORD *)this = *(_QWORD *)a2;
  return result;
}

double EQKit::StemStretch::Stem::operator=(double *a1, double *a2)
{
  double result;

  if (a1 != a2)
  {
    result = *a2;
    *a1 = *a2;
  }
  return result;
}

uint64_t EQKit::StemStretch::FeatureRange::FeatureRange(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  _OWORD *v5;

  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = a3;
  v4 = a1 + 16;
  *(_QWORD *)(a1 + 16) = a1 + 16;
  *(_QWORD *)(a1 + 24) = a1 + 16;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  v5 = operator new(0x38uLL);
  v5[1] = xmmword_217C27960;
  *((_DWORD *)v5 + 8) = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *(_QWORD *)v5 = v4;
  *((_QWORD *)v5 + 1) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = 1;
  return a1;
}

void sub_21795ACB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  _QWORD *v11;

  a10 = (void **)(v10 + 40);
  std::vector<EQKit::StemStretch::FeatureCluster>::__destroy_vector::operator()[abi:nn180100](&a10);
  std::__list_imp<EQKit::StemStretch::FeatureRange::Span>::clear(v11);
  _Unwind_Resume(a1);
}

_QWORD *std::__list_imp<EQKit::StemStretch::FeatureRange::Span>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

uint64_t EQKit::StemStretch::FeatureRange::Span::split(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v3;
  double v4;
  int v5;
  BOOL v6;
  int v7;
  uint64_t v9;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  int v17;
  uint64_t v18;

  v4 = *(double *)a2;
  v3 = *(double *)(a2 + 8);
  v5 = *(_DWORD *)(a2 + 16);
  v6 = v3 - *(double *)a2 == 0.0 && v5 == 1;
  if (!v6 && (v3 <= *(double *)a1 || v4 >= *(double *)(a1 + 8)))
    return 0;
  v7 = *(_DWORD *)(a1 + 16);
  if (v7 == 1 || v7 == v5)
    return 0;
  v11 = *(double *)a1;
  if (*(double *)a1 == v4)
  {
    v12 = *(double *)(a1 + 8);
    if (v12 == v3)
    {
      if (v5 == 1)
      {
        if (a3 != a1)
        {
          *(double *)a3 = v11;
          *(double *)(a3 + 8) = v12;
          *(_OWORD *)(a3 + 24) = *(_OWORD *)(a1 + 24);
        }
        v9 = 1;
        *(_DWORD *)(a3 + 16) = 1;
        return v9;
      }
      if (!v7)
      {
        if (a3 != a2)
        {
          *(double *)a3 = v4;
          *(double *)(a3 + 8) = v3;
          *(_DWORD *)(a3 + 16) = v5;
          *(_OWORD *)(a3 + 24) = *(_OWORD *)(a2 + 24);
        }
        return 1;
      }
      return 0;
    }
  }
  if (v11 >= v4)
  {
    v13 = 0;
  }
  else
  {
    *(double *)a3 = v11;
    *(double *)(a3 + 8) = v4;
    *(_DWORD *)(a3 + 16) = v7;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    v11 = *(double *)a1;
    v4 = *(double *)a2;
    v3 = *(double *)(a2 + 8);
    v13 = 1;
    v5 = *(_DWORD *)(a2 + 16);
  }
  if (v11 > v4)
    v4 = v11;
  if (v3 >= *(double *)(a1 + 8))
    v3 = *(double *)(a1 + 8);
  v14 = a3 + 40 * v13;
  *(double *)v14 = v4;
  *(double *)(v14 + 8) = v3;
  *(_DWORD *)(v14 + 16) = v5;
  v9 = v13 + 1;
  *(_QWORD *)(v14 + 24) = 0;
  *(_QWORD *)(v14 + 32) = 0;
  v15 = *(double *)(a2 + 8);
  v16 = *(double *)(a1 + 8);
  if (v15 < v16)
  {
    v17 = *(_DWORD *)(a1 + 16);
    v18 = a3 + 40 * v9;
    *(double *)v18 = v15;
    *(double *)(v18 + 8) = v16;
    *(_DWORD *)(v18 + 16) = v17;
    v9 = v13 | 2;
    *(_QWORD *)(v18 + 24) = 0;
    *(_QWORD *)(v18 + 32) = 0;
  }
  return v9;
}

__n128 std::list<EQKit::StemStretch::FeatureRange::Span>::insert(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char *v6;
  __n128 result;
  uint64_t v8;

  v6 = (char *)operator new(0x38uLL);
  *((_OWORD *)v6 + 1) = *(_OWORD *)a3;
  *((_DWORD *)v6 + 8) = *(_DWORD *)(a3 + 16);
  result = *(__n128 *)(a3 + 24);
  *(__n128 *)(v6 + 40) = result;
  v8 = *a2;
  *(_QWORD *)(v8 + 8) = v6;
  *(_QWORD *)v6 = v8;
  *a2 = (uint64_t)v6;
  *((_QWORD *)v6 + 1) = a2;
  ++*(_QWORD *)(a1 + 16);
  return result;
}

void EQKit::StemStretch::FeatureRange::collapse(uint64_t a1, _QWORD *__p, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  v3 = a3;
  v4 = __p;
  v6 = (_QWORD *)(a1 + 16);
  if (*(_QWORD **)(a1 + 24) != __p)
    v4 = (_QWORD *)*__p;
  if (v6 != a3)
    v3 = (_QWORD *)a3[1];
  while (v4 != v3)
  {
    v7 = v4;
    v4 = (_QWORD *)v4[1];
    if (v4 != v6 && v7[8] == *((_DWORD *)v4 + 8))
    {
      v4[2] = *((_QWORD *)v7 + 2);
      v8 = *(_QWORD *)v7;
      *(_QWORD *)(v8 + 8) = v4;
      **((_QWORD **)v7 + 1) = v8;
      --*(_QWORD *)(a1 + 32);
      operator delete(v7);
    }
  }
}

BOOL EQKit::StemStretch::FeatureRange::Span::compareOrthogonal(double *a1, double *a2)
{
  double v2;
  double v3;

  v2 = a1[3];
  v3 = a2[3];
  if (v2 < v3)
    return 1;
  if (v2 == v3)
    return *a1 < *a2;
  return 0;
}

uint64_t EQKit::StemStretch::FeatureRange::collapse(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *a2;
  v3 = a2[1];
  while (v4 != v3 && v4 + 40 != v3)
  {
    if (*(double *)(v4 + 8) == *(double *)(v4 + 40)
      && *(double *)(v4 + 24) == *(double *)(v4 + 64)
      && *(_DWORD *)(v4 + 16) == *(_DWORD *)(v4 + 56))
    {
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(v4 + 48);
      result = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,EQKit::StemStretch::FeatureRange::Span *,EQKit::StemStretch::FeatureRange::Span *,EQKit::StemStretch::FeatureRange::Span *,0>(v4 + 80, v3, v4 + 40);
      a2[1] = v3;
    }
    else
    {
      v4 += 40;
    }
  }
  return result;
}

void EQKit::StemStretch::FeatureRange::addFeatureCluster(EQKit::StemStretch::FeatureRange *this, double a2, double a3)
{
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  EQKitPath *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t **v15;
  double *v16;
  _QWORD **v18;
  _QWORD *v19[2];

  v6 = *((_DWORD *)this + 2);
  v19[0] = 0;
  v19[1] = 0;
  v18 = v19;
  v7 = *((_QWORD *)this + 6);
  if (v7 >= *((_QWORD *)this + 7))
  {
    v8 = std::vector<EQKit::StemStretch::FeatureCluster>::__push_back_slow_path<EQKit::StemStretch::FeatureCluster>((uint64_t)this + 40, (uint64_t)&v18);
  }
  else
  {
    std::set<unsigned long>::set[abi:nn180100](*((uint64_t **)this + 6), (uint64_t)&v18);
    v8 = v7 + 24;
    *((_QWORD *)this + 6) = v7 + 24;
  }
  *((_QWORD *)this + 6) = v8;
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)&v18, v19[0]);
  v9 = *((_QWORD *)this + 6);
  v10 = *(EQKitPath **)this;
  EQKitPath::extractPath(v10);
  v12 = *((_QWORD *)v10 + 1);
  v11 = *((_QWORD *)v10 + 2);
  if (v11 != v12)
  {
    v13 = 0;
    v14 = 0;
    v15 = (uint64_t **)(v9 - 24);
    do
    {
      v16 = (double *)(v12 + v13);
      if (v6 != 1)
        v16 = (double *)(v12 + v13 + 8);
      if (*v16 >= a2 && *v16 <= a3)
      {
        v18 = (_QWORD **)v14;
        std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(v15, (unint64_t *)&v18, (uint64_t *)&v18);
        v12 = *((_QWORD *)v10 + 1);
        v11 = *((_QWORD *)v10 + 2);
      }
      ++v14;
      v13 += 16;
    }
    while (v14 < (v11 - v12) >> 4);
  }
}

void sub_21795B148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void EQKit::StemStretch::FeatureRange::addStem(EQKit::StemStretch::FeatureRange *this, double a2, double a3, double a4)
{
  char *v6;
  unint64_t v7;
  double *v8;
  double *v9;
  double *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  double *v16;
  char *v17;
  uint64_t v18;

  v6 = (char *)this + 80;
  v7 = *((_QWORD *)this + 10);
  v8 = (double *)*((_QWORD *)this + 9);
  if ((unint64_t)v8 >= v7)
  {
    v10 = (double *)*((_QWORD *)this + 8);
    v11 = v8 - v10;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      abort();
    v13 = v7 - (_QWORD)v10;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLayoutContext *>>((uint64_t)v6, v14);
      v10 = (double *)*((_QWORD *)this + 8);
      v8 = (double *)*((_QWORD *)this + 9);
    }
    else
    {
      v15 = 0;
    }
    v16 = (double *)&v15[8 * v11];
    v17 = &v15[8 * v14];
    *v16 = a4;
    v9 = v16 + 1;
    while (v8 != v10)
    {
      v18 = *((_QWORD *)v8-- - 1);
      *((_QWORD *)v16-- - 1) = v18;
    }
    *((_QWORD *)this + 8) = v16;
    *((_QWORD *)this + 9) = v9;
    *((_QWORD *)this + 10) = v17;
    if (v10)
      operator delete(v10);
  }
  else
  {
    *v8 = a4;
    v9 = v8 + 1;
  }
  *((_QWORD *)this + 9) = v9;
}

uint64_t std::__lower_bound[abi:nn180100]<std::_ClassicAlgPolicy,std::__list_iterator<EQKit::StemStretch::FeatureRange::Span,void *>,std::__list_iterator<EQKit::StemStretch::FeatureRange::Span,void *>,double,std::__identity,std::__less<void,void>>(uint64_t result, uint64_t a2, double *a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  if (result != a2)
  {
    v3 = 0;
    v4 = result;
    do
    {
      ++v3;
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4 != a2);
    do
    {
      v5 = v3 >> 1;
      v6 = result;
      if (v3 != 1)
      {
        v7 = v5 + 1;
        v6 = result;
        do
        {
          v6 = *(_QWORD *)(v6 + 8);
          --v7;
        }
        while (v7 > 1);
      }
      if (*(double *)(v6 + 24) < *a3)
      {
        result = *(_QWORD *)(v6 + 8);
        v5 = v3 + ~v5;
      }
      v3 = v5;
    }
    while (v5);
  }
  return result;
}

uint64_t std::vector<EQKit::StemStretch::FeatureRange::Span>::__push_back_slow_path<EQKit::StemStretch::FeatureRange::Span const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *__p;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v2 = *a1;
  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666)
    abort();
  v8 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v2) >> 3);
  if (2 * v9 > v4)
    v4 = 2 * v9;
  if (v9 >= 0x333333333333333)
    v10 = 0x666666666666666;
  else
    v10 = v4;
  v20 = v7;
  v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<EQKit::StemStretch::Key,unsigned long>>>(v7, v10);
  v12 = &v11[40 * v3];
  __p = v11;
  v17 = v12;
  v19 = &v11[40 * v13];
  *(_OWORD *)v12 = *(_OWORD *)a2;
  *((_DWORD *)v12 + 4) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(v12 + 24) = *(_OWORD *)(a2 + 24);
  v18 = v12 + 40;
  std::vector<EQKit::StemStretch::FeatureRange::Span>::__swap_out_circular_buffer(a1, &__p);
  v14 = a1[1];
  if (v18 != v17)
    v18 = &v17[(v18 - v17 - 40) % 0x28uLL];
  if (__p)
    operator delete(__p);
  return v14;
}

void sub_21795B3D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<EQKit::StemStretch::FeatureRange::Span>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_OWORD *)(v2 - 40);
    v2 -= 40;
    *(_OWORD *)(v4 - 40) = v5;
    v4 -= 40;
    *(_DWORD *)(v4 + 16) = *(_DWORD *)(v2 + 16);
    *(_OWORD *)(v4 + 24) = *(_OWORD *)(v2 + 24);
  }
  a2[1] = v4;
  v6 = *result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*,false>(uint64_t result, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5, __n128 a6)
{
  __int128 *v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 *v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 *v20;
  __int128 *v21;
  char v22;
  _BOOL4 v23;
  uint64_t (*v24)(__int128 *, __int128 *);
  __int128 *v25;
  __int128 *v26;
  __int128 *v27;

  v8 = a2;
  v9 = (__int128 *)result;
  v26 = a2;
  v27 = (__int128 *)result;
  while (2)
  {
    v10 = 1 - a4;
LABEL_3:
    v11 = (char *)v8 - (char *)v9;
    v12 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v8 - (char *)v9) >> 3);
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v24 = *a3;
        v26 = (__int128 *)((char *)v8 - 40);
        result = ((uint64_t (*)(void))v24)();
        if ((_DWORD)result)
          return (uint64_t)std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v27, &v26);
        return result;
      case 3uLL:
        v26 = (__int128 *)((char *)v8 - 40);
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(v9, (__int128 *)((char *)v9 + 40), (__int128 *)((char *)v8 - 40), a3);
      case 4uLL:
        v26 = (__int128 *)((char *)v8 - 40);
        return (uint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(v9, (__int128 *)((char *)v9 + 40), v9 + 5, (__int128 *)((char *)v8 - 40), a3);
      case 5uLL:
        v26 = (__int128 *)((char *)v8 - 40);
        return (uint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(v9, (__int128 *)((char *)v9 + 40), v9 + 5, (__int128 *)((char *)v9 + 120), (__int128 *)((char *)v8 - 40), a3);
      default:
        if (v11 <= 959)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>((uint64_t)v9, v8, (uint64_t (**)(_OWORD *, _QWORD))a3);
          else
            return std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>((uint64_t)v9, v8, (uint64_t (**)(_OWORD *, _QWORD))a3);
        }
        if (v10 == 1)
        {
          if (v9 != v8)
            return (uint64_t)std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*,EQKit::StemStretch::FeatureRange::Span*>(v9, v8, v8, (unsigned int (**)(int64_t, uint64_t))a3, a6);
          return result;
        }
        v13 = v12 >> 1;
        v14 = (__int128 *)((char *)v8 - 40);
        if ((unint64_t)v11 < 0x1401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>((__int128 *)((char *)v9 + 40 * (v12 >> 1)), v9, v14, a3);
          if ((a5 & 1) != 0)
          {
LABEL_11:
            v8 = v26;
            goto LABEL_12;
          }
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(v9, (__int128 *)((char *)v9 + 40 * (v12 >> 1)), v14, a3);
          v15 = v26;
          v16 = 5 * v13;
          v17 = 40 * v13;
          v18 = 40 * v13 - 40;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>((__int128 *)((char *)v27 + 40), (__int128 *)((char *)v27 + v18), v26 - 5, a3);
          v17 += 40;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(v27 + 5, (__int128 *)((char *)v27 + v17), (__int128 *)((char *)v15 - 120), a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>((__int128 *)((char *)v27 + v18), (__int128 *)((char *)v27 + 8 * v16), (__int128 *)((char *)v27 + v17), a3);
          v25 = (__int128 *)((char *)v27 + 8 * v16);
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v27, &v25);
          if ((a5 & 1) != 0)
            goto LABEL_11;
        }
        v19 = ((uint64_t (*)(char *))*a3)((char *)v27 - 40);
        v8 = v26;
        if ((v19 & 1) == 0)
        {
          result = (uint64_t)std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,EQKit::StemStretch::FeatureRange::Span *,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&)>((uint64_t)v27, v26, a3);
          v9 = (__int128 *)result;
          goto LABEL_20;
        }
LABEL_12:
        a6.n128_f64[0] = std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,EQKit::StemStretch::FeatureRange::Span *,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&)>((uint64_t)v27, v8, (uint64_t (**)(void))a3);
        v21 = v20;
        if ((v22 & 1) == 0)
          goto LABEL_19;
        v23 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(v27, v20, a3);
        v9 = (__int128 *)((char *)v21 + 40);
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>((__int128 *)((char *)v21 + 40), v8, a3);
        if (!(_DWORD)result)
        {
          if (v23)
          {
            v27 = (__int128 *)((char *)v21 + 40);
            goto LABEL_18;
          }
LABEL_19:
          result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*,false>(v27, v21, a3, -v10, a5 & 1, a6);
          v9 = (__int128 *)((char *)v21 + 40);
LABEL_20:
          a5 = 0;
          v27 = v9;
          a4 = -v10;
          continue;
        }
        if (!v23)
        {
          v26 = v21;
          v9 = v27;
          v8 = v21;
LABEL_18:
          ++v10;
          goto LABEL_3;
        }
        return result;
    }
  }
}

__int128 **std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(__int128 **result, __int128 **a2)
{
  __int128 *v2;
  __int128 *v3;
  __int128 v4;
  int v5;
  __int128 v6;

  v2 = *result;
  v3 = *a2;
  v4 = **result;
  v5 = *((_DWORD *)*result + 4);
  v6 = *(__int128 *)((char *)*result + 24);
  if (*result != *a2)
  {
    *v2 = *v3;
    *((_DWORD *)v2 + 4) = *((_DWORD *)v3 + 4);
    *(__int128 *)((char *)v2 + 24) = *(__int128 *)((char *)v3 + 24);
  }
  *v3 = v4;
  *((_DWORD *)v3 + 4) = v5;
  *(__int128 *)((char *)v3 + 24) = v6;
  return result;
}

uint64_t std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  if ((_OWORD *)result != a2)
  {
    v18 = v3;
    v19 = v4;
    v6 = result;
    v7 = (_OWORD *)(result + 40);
    if ((_OWORD *)(result + 40) != a2)
    {
      v9 = 0;
      v10 = (_OWORD *)result;
      do
      {
        v11 = v7;
        result = (*a3)(v7, v10);
        if ((_DWORD)result)
        {
          v15 = *v11;
          v16 = *((_DWORD *)v10 + 14);
          v17 = v10[4];
          v12 = v9;
          while (1)
          {
            v13 = v6 + v12;
            *(_OWORD *)(v13 + 40) = *(_OWORD *)(v6 + v12);
            *(_DWORD *)(v13 + 56) = *(_DWORD *)(v6 + v12 + 16);
            *(_OWORD *)(v13 + 64) = *(_OWORD *)(v6 + v12 + 24);
            if (!v12)
              break;
            v12 -= 40;
            result = (*a3)(&v15, v12 + v6);
            if ((result & 1) == 0)
            {
              v14 = v6 + v12 + 40;
              goto LABEL_10;
            }
          }
          v14 = v6;
LABEL_10:
          if ((__int128 *)v14 != &v15)
          {
            *(_OWORD *)v14 = v15;
            *(_DWORD *)(v14 + 16) = v16;
            *(_OWORD *)(v14 + 24) = v17;
          }
        }
        v7 = (_OWORD *)((char *)v11 + 40);
        v9 += 40;
        v10 = v11;
      }
      while ((_OWORD *)((char *)v11 + 40) != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  __int128 v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  if ((_OWORD *)result != a2)
  {
    v15 = v3;
    v16 = v4;
    v6 = (_OWORD *)result;
    v7 = (_OWORD *)(result + 40);
    if ((_OWORD *)(result + 40) != a2)
    {
      v9 = result - 40;
      do
      {
        v10 = v7;
        result = (*a3)(v7, v6);
        if ((_DWORD)result)
        {
          v12 = *v10;
          v13 = *((_DWORD *)v6 + 14);
          v14 = v6[4];
          v11 = v9;
          do
          {
            *(_OWORD *)(v11 + 80) = *(_OWORD *)(v11 + 40);
            *(_DWORD *)(v11 + 96) = *(_DWORD *)(v11 + 56);
            *(_OWORD *)(v11 + 104) = *(_OWORD *)(v11 + 64);
            result = (*a3)(&v12, v11);
            v11 -= 40;
          }
          while ((result & 1) != 0);
          if ((__int128 *)(v11 + 80) != &v12)
          {
            *(_OWORD *)(v11 + 80) = v12;
            *(_DWORD *)(v11 + 96) = v13;
            *(_OWORD *)(v11 + 104) = v14;
          }
        }
        v7 = (_OWORD *)((char *)v10 + 40);
        v9 += 40;
        v6 = v10;
      }
      while ((_OWORD *)((char *)v10 + 40) != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t (**a4)(__int128 *, __int128 *))
{
  char v7;
  uint64_t result;
  __int128 **v9;
  __int128 **v10;
  __int128 *v11;
  __int128 *v12;
  __int128 *v13;

  v12 = a2;
  v13 = a1;
  v11 = a3;
  v7 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v7 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v12, &v11);
    if (!(*a4)(v12, v13))
      return 1;
    v9 = &v13;
    v10 = &v12;
    goto LABEL_9;
  }
  if (!(_DWORD)result)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v13, &v12);
    if (!(*a4)(v11, v12))
      return 1;
    v9 = &v12;
    v10 = &v11;
LABEL_9:
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(v9, v10);
    return 2;
  }
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v13, &v11);
  return 1;
}

__int128 *std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,EQKit::StemStretch::FeatureRange::Span *,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&)>(uint64_t a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  __int128 *v5;
  __int128 *v6;
  int v7;
  __int128 *v8;
  __int128 v10;
  int v11;
  __int128 v12;
  __int128 *v13;
  __int128 *v14;

  v13 = a2;
  v10 = *(_OWORD *)a1;
  v11 = *(_DWORD *)(a1 + 16);
  v12 = *(_OWORD *)(a1 + 24);
  if (((*a3)(&v10, (__int128 *)((char *)a2 - 40)) & 1) != 0)
  {
    v5 = (__int128 *)a1;
    do
    {
      v5 = (__int128 *)((char *)v5 + 40);
      v14 = v5;
    }
    while (((*a3)(&v10, v5) & 1) == 0);
  }
  else
  {
    v6 = (__int128 *)(a1 + 40);
    do
    {
      v5 = v6;
      v14 = v6;
      if (v6 >= v13)
        break;
      v7 = (*a3)(&v10, v6);
      v6 = (__int128 *)((char *)v5 + 40);
    }
    while (!v7);
  }
  v8 = v13;
  if (v5 < v13)
  {
    do
    {
      v8 = (__int128 *)((char *)v8 - 40);
      v13 = v8;
    }
    while (((*a3)(&v10, v8) & 1) != 0);
    v5 = v14;
  }
  if (v5 < v8)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v14, &v13);
      do
        v14 = (__int128 *)((char *)v14 + 40);
      while (!((unsigned int (*)(__int128 *))*a3)(&v10));
      do
        v13 = (__int128 *)((char *)v13 - 40);
      while ((((uint64_t (*)(__int128 *))*a3)(&v10) & 1) != 0);
      v5 = v14;
    }
    while (v14 < v13);
  }
  if ((__int128 *)((char *)v5 - 40) != (__int128 *)a1)
  {
    *(_OWORD *)a1 = *(__int128 *)((char *)v5 - 40);
    *(_DWORD *)(a1 + 16) = *((_DWORD *)v5 - 6);
    *(_OWORD *)(a1 + 24) = *(v5 - 1);
  }
  if ((__int128 *)((char *)v5 - 40) != &v10)
  {
    *(__int128 *)((char *)v5 - 40) = v10;
    *((_DWORD *)v5 - 6) = v11;
    *(v5 - 1) = v12;
  }
  return v5;
}

double std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,EQKit::StemStretch::FeatureRange::Span *,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&)>(uint64_t a1, __int128 *a2, uint64_t (**a3)(void))
{
  uint64_t v5;
  __int128 v6;
  __int128 *v7;
  __int128 *v8;
  int v9;
  __int128 *v10;
  uint64_t (*v11)(void);
  __int128 *v12;
  __int128 v14;
  int v15;
  __int128 v16;
  __int128 *v17;
  __int128 *v18;

  v5 = 0;
  v17 = a2;
  v14 = *(_OWORD *)a1;
  v15 = *(_DWORD *)(a1 + 16);
  v16 = *(_OWORD *)(a1 + 24);
  do
  {
    v5 += 40;
    v18 = (__int128 *)(v5 + a1);
  }
  while (((*a3)() & 1) != 0);
  v7 = v17;
  if (v5 == 40)
  {
    v10 = (__int128 *)(a1 + 40);
    do
    {
      if (v10 >= v7)
        break;
      v11 = *a3;
      v7 = (__int128 *)((char *)v7 - 40);
      v17 = v7;
    }
    while ((((uint64_t (*)(__int128 *, __int128 *))v11)(v7, &v14) & 1) == 0);
  }
  else
  {
    v8 = (__int128 *)((char *)v17 - 40);
    do
    {
      v17 = v8;
      v9 = ((uint64_t (*)(__int128 *, __int128 *))*a3)(v8, &v14);
      v8 = (__int128 *)((char *)v8 - 40);
    }
    while (!v9);
    v10 = v18;
  }
  v12 = v10;
  if (v10 < v17)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v18, &v17);
      do
        v18 = (__int128 *)((char *)v18 + 40);
      while (((*a3)() & 1) != 0);
      do
        v17 = (__int128 *)((char *)v17 - 40);
      while (!(*a3)());
      v12 = v18;
    }
    while (v18 < v17);
  }
  if ((__int128 *)((char *)v12 - 40) != (__int128 *)a1)
  {
    *(_OWORD *)a1 = *(__int128 *)((char *)v12 - 40);
    *(_DWORD *)(a1 + 16) = *((_DWORD *)v12 - 6);
    v6 = *(v12 - 1);
    *(_OWORD *)(a1 + 24) = v6;
  }
  if ((__int128 *)((char *)v12 - 40) != &v14)
  {
    *(__int128 *)((char *)v12 - 40) = v14;
    *((_DWORD *)v12 - 6) = v15;
    *(_QWORD *)&v6 = v16;
    *(v12 - 1) = v16;
  }
  return *(double *)&v6;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t (*v8)(__int128 *, __int128 *);
  __int128 *v9;
  __int128 *v10;
  int v11;
  __int128 *v12;
  __int128 v13;
  int v14;
  __int128 v15;
  __int128 *v16;
  __int128 *v17;

  v16 = a2;
  v17 = a1;
  v6 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *a3;
      v16 = (__int128 *)((char *)a2 - 40);
      if (((unsigned int (*)(void))v8)())
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v17, &v16);
      return 1;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(a1, (__int128 *)((char *)a1 + 40), (__int128 *)((char *)a2 - 40), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(a1, (__int128 *)((char *)a1 + 40), a1 + 5, (__int128 *)((char *)a2 - 40), a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(a1, (__int128 *)((char *)a1 + 40), a1 + 5, (__int128 *)((char *)a1 + 120), (__int128 *)((char *)a2 - 40), a3);
      return 1;
    default:
      v9 = a1 + 5;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(a1, (__int128 *)((char *)a1 + 40), a1 + 5, a3);
      v10 = (__int128 *)((char *)a1 + 120);
      if (v10 == a2)
        return 1;
      v11 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v10, v9))
    {
      v13 = *v10;
      v14 = *((_DWORD *)v10 + 4);
      v15 = *(__int128 *)((char *)v10 + 24);
      do
      {
        v12 = v9;
        *(__int128 *)((char *)v9 + 40) = *v9;
        *((_DWORD *)v9 + 14) = *((_DWORD *)v9 + 4);
        v9[4] = *(__int128 *)((char *)v9 + 24);
        if (v9 == v17)
          break;
        v9 = (__int128 *)((char *)v9 - 40);
      }
      while (((*a3)(&v13, (__int128 *)((char *)v12 - 40)) & 1) != 0);
      if (v12 != &v13)
      {
        *v12 = v13;
        *((_DWORD *)v12 + 4) = v14;
        *(__int128 *)((char *)v12 + 24) = v15;
      }
      if (++v11 == 8)
        break;
    }
    v9 = v10;
    v10 = (__int128 *)((char *)v10 + 40);
    if (v10 == v16)
      return 1;
  }
  return (__int128 *)((char *)v10 + 40) == v16;
}

__int128 **std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t (**a5)(__int128 *, __int128 *))
{
  __int128 **result;
  __int128 *v11;
  __int128 *v12;
  __int128 *v13;
  __int128 *v14;

  v13 = a2;
  v14 = a1;
  v11 = a4;
  v12 = a3;
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(a1, a2, a3, a5);
  result = (__int128 **)(*a5)(a4, a3);
  if ((_DWORD)result)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v12, &v11);
    result = (__int128 **)(*a5)(v12, a2);
    if ((_DWORD)result)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v13, &v12);
      result = (__int128 **)(*a5)(v13, a1);
      if ((_DWORD)result)
        return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v14, &v13);
    }
  }
  return result;
}

__int128 **std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5, uint64_t (**a6)(__int128 *, __int128 *))
{
  __int128 **result;
  __int128 *v13;
  __int128 *v14;
  __int128 *v15;
  __int128 *v16;
  __int128 *v17;

  v16 = a2;
  v17 = a1;
  v14 = a4;
  v15 = a3;
  v13 = a5;
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(a1, a2, a3, a4, a6);
  result = (__int128 **)(*a6)(a5, a4);
  if ((_DWORD)result)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v14, &v13);
    result = (__int128 **)(*a6)(v14, a3);
    if ((_DWORD)result)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v15, &v14);
      result = (__int128 **)(*a6)(v15, a2);
      if ((_DWORD)result)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v16, &v15);
        result = (__int128 **)(*a6)(v16, a1);
        if ((_DWORD)result)
          return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v17, &v16);
      }
    }
  }
  return result;
}

__int128 *std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*,EQKit::StemStretch::FeatureRange::Span*>(__int128 *a1, __int128 *a2, __int128 *a3, unsigned int (**a4)(int64_t, uint64_t), __n128 a5)
{
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 *v13;
  __int128 *v14;
  int64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v25;
  __int128 *v26;

  v26 = a1;
  if (a1 != a2)
  {
    v8 = a1;
    v9 = (char *)a2 - (char *)a1;
    v10 = ((char *)a2 - (char *)a1) / 40;
    if ((char *)a2 - (char *)a1 >= 41)
    {
      v11 = (unint64_t)(v10 - 2) >> 1;
      v12 = v11 + 1;
      v13 = (__int128 *)((char *)a1 + 40 * v11);
      do
      {
        a5.n128_f64[0] = std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>((uint64_t)v8, a4, v10, v13);
        v13 = (__int128 *)((char *)v13 - 40);
        --v12;
      }
      while (v12);
    }
    v25 = a2;
    if (a2 == a3)
    {
      a3 = a2;
    }
    else
    {
      v14 = a2;
      do
      {
        if (((unsigned int (*)(__int128 *, __int128 *, __n128))*a4)(v14, v26, a5))
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<EQKit::StemStretch::FeatureRange::Span *&,EQKit::StemStretch::FeatureRange::Span *&>(&v25, &v26);
          a5.n128_f64[0] = std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>((uint64_t)v26, a4, v10, v26);
        }
        v14 = (__int128 *)((char *)v25 + 40);
        v25 = v14;
      }
      while (v14 != a3);
      v8 = v26;
      v9 = (char *)a2 - (char *)v26;
    }
    if (v9 >= 41)
    {
      v15 = v9 / 0x28uLL;
      v16 = (char *)a2 - 40;
      do
      {
        v18 = *(_QWORD *)v8;
        v17 = *((_QWORD *)v8 + 1);
        v19 = *((_DWORD *)v8 + 4);
        v21 = *((_QWORD *)v8 + 3);
        v20 = *((_QWORD *)v8 + 4);
        v22 = std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>((uint64_t)v8, a4, v15);
        if (v16 == (char *)v22)
        {
          *(_QWORD *)v22 = v18;
          *(_QWORD *)(v22 + 8) = v17;
          *(_DWORD *)(v22 + 16) = v19;
          *(_QWORD *)(v22 + 24) = v21;
          *(_QWORD *)(v22 + 32) = v20;
        }
        else
        {
          *(_OWORD *)v22 = *(_OWORD *)v16;
          *(_DWORD *)(v22 + 16) = *((_DWORD *)v16 + 4);
          *(_OWORD *)(v22 + 24) = *(_OWORD *)(v16 + 24);
          *(_QWORD *)v16 = v18;
          *((_QWORD *)v16 + 1) = v17;
          *((_DWORD *)v16 + 4) = v19;
          *((_QWORD *)v16 + 3) = v21;
          *((_QWORD *)v16 + 4) = v20;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>((uint64_t)v8, v22 + 40, (uint64_t (**)(uint64_t, __int128 *))a4, 0xCCCCCCCCCCCCCCCDLL * ((v22 + 40 - (uint64_t)v8) >> 3));
        }
        v16 -= 40;
      }
      while (v15-- > 2);
      return v25;
    }
  }
  return a3;
}

double std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(uint64_t a1, unsigned int (**a2)(int64_t, uint64_t), uint64_t a3, __int128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 *v7;
  int64_t v9;
  int64_t v12;
  int64_t v13;
  int64_t v14;
  __int128 v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  int v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v23 = v4;
    v24 = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - a1) >> 3)))
    {
      v12 = (0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3)) | 1;
      v13 = a1 + 40 * v12;
      v14 = 0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3 && (*a2)(a1 + 40 * v12, v13 + 40))
      {
        v13 += 40;
        v12 = v14;
      }
      if ((((uint64_t (*)(int64_t, __int128 *))*a2)(v13, v7) & 1) == 0)
      {
        v20 = *v7;
        v21 = *((_DWORD *)v7 + 4);
        v15 = *(__int128 *)((char *)v7 + 24);
        v22 = v15;
        do
        {
          v16 = (__int128 *)v13;
          if (v7 != (__int128 *)v13)
          {
            *v7 = *(_OWORD *)v13;
            *((_DWORD *)v7 + 4) = *(_DWORD *)(v13 + 16);
            v15 = *(_OWORD *)(v13 + 24);
            *(__int128 *)((char *)v7 + 24) = v15;
          }
          if (v9 < v12)
            break;
          v17 = (2 * v12) | 1;
          v13 = a1 + 40 * v17;
          v18 = 2 * v12 + 2;
          if (v18 < a3 && (*a2)(a1 + 40 * v17, v13 + 40))
          {
            v13 += 40;
            v17 = v18;
          }
          v7 = v16;
          v12 = v17;
        }
        while (!(*a2)(v13, (uint64_t)&v20));
        if (v16 != &v20)
        {
          *v16 = v20;
          *((_DWORD *)v16 + 4) = v21;
          *(_QWORD *)&v15 = v22;
          *(__int128 *)((char *)v16 + 24) = v22;
        }
      }
    }
  }
  return *(double *)&v15;
}

uint64_t std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = a1 + 40 * v6 + 40;
    v10 = 2 * v6;
    v6 = (2 * v6) | 1;
    v11 = v10 + 2;
    if (v10 + 2 < a3 && (*a2)(v9, v9 + 40))
    {
      v9 += 40;
      v6 = v11;
    }
    if (a1 != v9)
    {
      *(_OWORD *)a1 = *(_OWORD *)v9;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(v9 + 16);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(v9 + 24);
    }
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

double std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(EQKit::StemStretch::FeatureRange::Span const&,EQKit::StemStretch::FeatureRange::Span const&),EQKit::StemStretch::FeatureRange::Span*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t, __int128 *), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v19 = v4;
    v20 = v5;
    v10 = v6 >> 1;
    v11 = a1 + 40 * (v6 >> 1);
    v12 = a2 - 40;
    if ((*a3)(v11, (__int128 *)(a2 - 40)))
    {
      v16 = *(_OWORD *)(a2 - 40);
      v17 = *(_DWORD *)(a2 - 24);
      v13 = *(_OWORD *)(a2 - 16);
      v18 = v13;
      do
      {
        v14 = v11;
        if (v12 != v11)
        {
          *(_OWORD *)v12 = *(_OWORD *)v11;
          *(_DWORD *)(v12 + 16) = *(_DWORD *)(v11 + 16);
          v13 = *(_OWORD *)(v11 + 24);
          *(_OWORD *)(v12 + 24) = v13;
        }
        if (!v10)
          break;
        v10 = (v10 - 1) >> 1;
        v11 = a1 + 40 * v10;
        v12 = v14;
      }
      while (((*a3)(v11, &v16) & 1) != 0);
      if ((__int128 *)v14 != &v16)
      {
        *(_OWORD *)v14 = v16;
        *(_DWORD *)(v14 + 16) = v17;
        *(_QWORD *)&v13 = v18;
        *(_OWORD *)(v14 + 24) = v18;
      }
    }
  }
  return *(double *)&v13;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,EQKit::StemStretch::FeatureRange::Span *,EQKit::StemStretch::FeatureRange::Span *,EQKit::StemStretch::FeatureRange::Span *,0>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    do
    {
      if (result != a3)
      {
        *(_OWORD *)a3 = *(_OWORD *)result;
        *(_DWORD *)(a3 + 16) = *(_DWORD *)(result + 16);
        *(_OWORD *)(a3 + 24) = *(_OWORD *)(result + 24);
      }
      result += 40;
      a3 += 40;
    }
    while (result != a2);
    return a2;
  }
  return result;
}

void std::vector<EQKit::StemStretch::FeatureCluster>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 24;
        std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)(v4 - 24), *((_QWORD **)v4 - 2));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<EQKit::StemStretch::FeatureCluster>::__push_back_slow_path<EQKit::StemStretch::FeatureCluster>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  void *v14;
  uint64_t *v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;

  v2 = *(uint64_t **)a1;
  v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  v8 = *(_QWORD *)(a1 + 16);
  v7 = a1 + 16;
  v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)v2) >> 3);
  if (2 * v9 > v4)
    v4 = 2 * v9;
  if (v9 >= 0x555555555555555)
    v10 = 0xAAAAAAAAAAAAAAALL;
  else
    v10 = v4;
  v18 = v7;
  if (v10)
    v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v7, v10);
  else
    v11 = 0;
  v14 = v11;
  v15 = (uint64_t *)&v11[24 * v3];
  v17 = &v11[24 * v10];
  std::set<unsigned long>::set[abi:nn180100](v15, a2);
  v16 = v15 + 3;
  std::vector<EQKit::StemStretch::FeatureCluster>::__swap_out_circular_buffer((uint64_t **)a1, &v14);
  v12 = *(_QWORD *)(a1 + 8);
  std::__split_buffer<EQKit::StemStretch::FeatureCluster>::~__split_buffer(&v14);
  return v12;
}

void sub_21795C7D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<EQKit::StemStretch::FeatureCluster>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<EQKit::StemStretch::FeatureCluster>::__swap_out_circular_buffer(uint64_t **a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;

  v5 = *a1;
  v4 = (uint64_t)a1[1];
  result = (uint64_t *)a2[1];
  while ((uint64_t *)v4 != v5)
  {
    v4 -= 24;
    result = std::set<unsigned long>::set[abi:nn180100](result - 3, v4);
  }
  a2[1] = result;
  v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = (uint64_t *)a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = (uint64_t *)a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void **std::__split_buffer<EQKit::StemStretch::FeatureCluster>::~__split_buffer(void **a1)
{
  std::__split_buffer<EQKit::StemStretch::FeatureCluster>::clear[abi:nn180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<EQKit::StemStretch::FeatureCluster>::clear[abi:nn180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(i - 24, *(_QWORD **)(i - 16));
  }
}

uint64_t *std::vector<EQKit::StemStretch::FeatureCluster>::__init_with_size[abi:nn180100]<EQKit::StemStretch::FeatureCluster*,EQKit::StemStretch::FeatureCluster*>(uint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:nn180100](result, a4);
    return std::vector<EQKit::StemStretch::FeatureCluster>::__construct_at_end<EQKit::StemStretch::FeatureCluster*,EQKit::StemStretch::FeatureCluster*>(v6, a2, a3);
  }
  return result;
}

uint64_t *std::vector<EQKit::StemStretch::FeatureCluster>::__construct_at_end<EQKit::StemStretch::FeatureCluster*,EQKit::StemStretch::FeatureCluster*>(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v7;

  v3 = result;
  v4 = result[1];
  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      result = std::set<unsigned long>::set[abi:nn180100]((uint64_t *)(v4 + v7), a2 + v7);
      v7 += 24;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  v3[1] = v4;
  return result;
}

void sub_21795C994(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::vector<EQKit::StemStretch::Stem>::__init_with_size[abi:nn180100]<EQKit::StemStretch::Stem*,EQKit::StemStretch::Stem*>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long>::__vallocate[abi:nn180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void std::vector<EQKit::StemStretch::FeatureCluster>::__assign_with_size[abi:nn180100]<EQKit::StemStretch::FeatureCluster*,EQKit::StemStretch::FeatureCluster*>(uint64_t a1, uint64_t a2, uint64_t **a3, unint64_t a4)
{
  uint64_t **v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = *(uint64_t ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<EQKit::StemStretch::FeatureCluster>::__vdeallocate((void **)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v9 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v9 <= a4)
      v9 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    std::vector<std::string>::__vallocate[abi:nn180100]((_QWORD *)a1, v10);
    v11 = (uint64_t *)a1;
    v12 = a2;
    v13 = (uint64_t)a3;
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v8) >> 3) < a4)
  {
    v14 = (uint64_t **)(a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v8) >> 3));
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,EQKit::StemStretch::FeatureCluster *,EQKit::StemStretch::FeatureCluster *,EQKit::StemStretch::FeatureCluster *,0>(a2, v14, v8);
    v11 = (uint64_t *)a1;
    v12 = (uint64_t)v14;
    v13 = (uint64_t)a3;
LABEL_11:
    std::vector<EQKit::StemStretch::FeatureCluster>::__construct_at_end<EQKit::StemStretch::FeatureCluster*,EQKit::StemStretch::FeatureCluster*>(v11, v12, v13);
    return;
  }
  std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,EQKit::StemStretch::FeatureCluster *,EQKit::StemStretch::FeatureCluster *,EQKit::StemStretch::FeatureCluster *,0>(a2, a3, v8);
  v16 = v15;
  v17 = *(_QWORD *)(a1 + 8);
  if (v17 != v15)
  {
    do
    {
      v18 = v17 - 24;
      std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v17 - 24, *(_QWORD **)(v17 - 16));
      v17 = v18;
    }
    while (v18 != v16);
  }
  *(_QWORD *)(a1 + 8) = v16;
}

void std::vector<EQKit::StemStretch::FeatureCluster>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = v3 - 24;
        std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy((uint64_t)(v3 - 24), *((_QWORD **)v3 - 2));
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t **std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,EQKit::StemStretch::FeatureCluster *,EQKit::StemStretch::FeatureCluster *,EQKit::StemStretch::FeatureCluster *,0>(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t **v4;
  _QWORD *v6;

  v4 = (uint64_t **)a1;
  if ((uint64_t **)a1 != a2)
  {
    v6 = (_QWORD *)(a1 + 8);
    do
    {
      if (v4 != a3)
        std::__tree<unsigned long>::__assign_multi<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>(a3, *v4, v6);
      v4 += 3;
      a3 += 3;
      v6 += 3;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

char *std::vector<EQKit::StemStretch::Stem>::__assign_with_size[abi:nn180100]<EQKit::StemStretch::Stem*,EQKit::StemStretch::Stem*>(_QWORD *a1, char *a2, char *a3, unint64_t a4)
{
  char *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 3)
  {
    v18 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v18;
    v19 = (v18 - result) >> 3;
    if (v19 >= a4)
    {
      v25 = result;
      if (a2 != a3)
      {
        v26 = result;
        do
        {
          if (v6 != v26)
            *(_QWORD *)v26 = *(_QWORD *)v6;
          v6 += 8;
          v26 += 8;
          v25 += 8;
        }
        while (v6 != a3);
      }
      v17 = (char *)(v25 - result);
      v12 = result;
    }
    else
    {
      v20 = &a2[8 * v19];
      if (v12 != result)
      {
        v21 = 8 * v19;
        do
        {
          if (v6 != result)
            *(_QWORD *)result = *(_QWORD *)v6;
          v6 += 8;
          result += 8;
          v21 -= 8;
        }
        while (v21);
      }
      v22 = v12;
      if (v20 != a3)
      {
        v23 = v12;
        do
        {
          v24 = *(_QWORD *)v20;
          v20 += 8;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 += 8;
        }
        while (v20 != a3);
      }
      v17 = (char *)(v22 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 61)
      abort();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned long>::__vallocate[abi:nn180100](a1, v11);
    v14 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v14;
    v15 = v14;
    if (v6 != a3)
    {
      v15 = v12;
      do
      {
        v16 = *(_QWORD *)v6;
        v6 += 8;
        *(_QWORD *)v15 = v16;
        v15 += 8;
      }
      while (v6 != a3);
    }
    v17 = (char *)(v15 - v12);
  }
  *v13 = &v17[(_QWORD)v12];
  return result;
}

uint64_t *std::set<unsigned long>::set[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<unsigned long>::insert[abi:nn180100]<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_21795CDDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<unsigned long>::insert[abi:nn180100]<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<unsigned long>::__emplace_hint_unique_key_args<unsigned long,unsigned long const&>(v5, v6, v4 + 4, v4 + 4);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<unsigned long>::__emplace_hint_unique_key_args<unsigned long,unsigned long const&>(uint64_t **a1, _QWORD *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<unsigned long>::__find_equal<unsigned long>(a1, a2, &v11, &v10, a3);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

_QWORD *std::__tree<unsigned long>::__find_equal<unsigned long>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t *a5)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (_QWORD *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v16 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4];
          if (v15 >= v18)
            break;
          v16 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = (_QWORD *)v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (_QWORD *)a2[1];
    do
    {
      a4 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (_QWORD *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    v20 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = v20;
          v22 = v20[4];
          if (v6 >= v22)
            break;
          v20 = (_QWORD *)*v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = (_QWORD *)v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t **std::__tree<unsigned long>::__assign_multi<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v8[4] = v9[4];
          std::__tree<unsigned long>::__node_insert_multi(v5, v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          v10 = (_QWORD *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = (_QWORD *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v11 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)std::__tree<unsigned long>::_DetachedTreeCache::~_DetachedTreeCache[abi:nn180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<unsigned long>::__emplace_multi<unsigned long const&>(v5, a2 + 4);
      v12 = (_QWORD *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)a2[2];
          v11 = *v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_21795D1F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<unsigned long>::_DetachedTreeCache::~_DetachedTreeCache[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<unsigned long>::__node_insert_multi(uint64_t **a1, uint64_t *a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;

  v3 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (a2[4] >= (unint64_t)v4[4])
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v3, v5, a2);
  return a2;
}

uint64_t std::__tree<unsigned long>::_DetachedTreeCache::~_DetachedTreeCache[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::__map_value_compare<std::pair<unsigned short,EQKit::Config::Operator::Form>,std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>,std::less<std::pair<unsigned short,EQKit::Config::Operator::Form>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,EQKit::Config::Operator::Form>,EQKit::Config::Operator::Dictionary::Entry>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<unsigned long>::__emplace_multi<unsigned long const&>(uint64_t **a1, unint64_t *a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;

  v4 = (uint64_t *)operator new(0x28uLL);
  v5 = *a2;
  v4[4] = *a2;
  v6 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        if (v5 >= v7[4])
          break;
        v7 = (uint64_t *)*v7;
        v8 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7);
    v8 = v6 + 1;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v6, v8, v4);
  return v4;
}

uint64_t *std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t EQKit::Font::Metric::LengthEntry::LengthEntry(uint64_t this)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t j;
  uint64_t v8;

  for (i = 0; i != 128; i += 16)
  {
    v2 = this + i;
    *(_DWORD *)v2 = 1;
    *(_QWORD *)(v2 + 8) = 0;
  }
  v3 = 128;
  do
  {
    v4 = this + v3;
    *(_DWORD *)v4 = 1;
    *(_QWORD *)(v4 + 8) = 0;
    v3 += 16;
  }
  while (v4 + 16 != this + 256);
  v5 = 256;
  do
  {
    v6 = this + v5;
    *(_DWORD *)v6 = 1;
    *(_QWORD *)(v6 + 8) = 0;
    v5 += 16;
  }
  while (v6 + 16 != this + 384);
  for (j = 0; j != 128; j += 16)
  {
    v8 = this + j;
    *(_DWORD *)v8 = 0;
    *(_QWORD *)(v8 + 8) = 0;
    *(_DWORD *)(v8 + 128) = 0;
    *(_QWORD *)(v8 + 136) = 0;
    *(_DWORD *)(v8 + 256) = 0;
    *(_QWORD *)(v8 + 264) = 0;
  }
  return this;
}

__n128 EQKit::Font::Metric::LengthEntry::LengthEntry(EQKit::Font::Metric::LengthEntry *this, const EQKit::Font::Metric::LengthEntry *a2)
{
  uint64_t i;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t j;
  char *v9;
  __n128 result;

  for (i = 0; i != 128; i += 16)
  {
    v3 = (char *)this + i;
    *(_DWORD *)v3 = 1;
    *((_QWORD *)v3 + 1) = 0;
  }
  v4 = 128;
  do
  {
    v5 = (char *)this + v4;
    *(_DWORD *)v5 = 1;
    *((_QWORD *)v5 + 1) = 0;
    v4 += 16;
  }
  while (v5 + 16 != (char *)this + 256);
  v6 = 256;
  do
  {
    v7 = (char *)this + v6;
    *(_DWORD *)v7 = 1;
    *((_QWORD *)v7 + 1) = 0;
    v6 += 16;
  }
  while (v7 + 16 != (char *)this + 384);
  for (j = 128; j != 256; j += 16)
  {
    v9 = (char *)this + j;
    *((_OWORD *)v9 - 8) = *(_OWORD *)((char *)a2 + j - 128);
    *(_OWORD *)v9 = *(_OWORD *)((char *)a2 + j);
    result = *(__n128 *)((char *)a2 + j + 128);
    *((__n128 *)v9 + 8) = result;
  }
  return result;
}

__n128 EQKit::Font::Metric::LengthEntry::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 result;

  if (a1 != a2)
  {
    v2 = 0;
    v3 = a2 + 128;
    do
    {
      v4 = a1 + 128 + v2;
      *(_OWORD *)(v4 - 128) = *(_OWORD *)(a2 + v2);
      *(_OWORD *)v4 = *(_OWORD *)(v3 + v2);
      result = *(__n128 *)(v3 + v2 + 128);
      *(__n128 *)(v4 + 128) = result;
      v2 += 16;
    }
    while (v2 != 128);
  }
  return result;
}

double EQKit::Font::Metric::LengthEntry::resolveWithScriptAndRule(EQKit::Font::Metric::LengthEntry *this, const EQKit::Script::Info *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  double v9;
  EQKitLength *v10;
  int v11;
  double v12;
  double v13;

  v6 = *(_QWORD *)a2;
  if (*(uint64_t *)a2 <= 2)
  {
    if (v6)
    {
      if (v6 >= 1)
        ++v6;
    }
    else
    {
      v6 = *((_BYTE *)a2 + 8) == 0;
    }
  }
  else
  {
    v6 = 3;
  }
  v7 = *((unsigned __int8 *)a2 + 9) | (2 * (v6 & ~(v6 >> 63)));
  v8 = (_DWORD *)((char *)this + 16 * v7);
  if ((*v8 & 0xFFFFFFFD) != 0)
    v9 = EQKitLength::resolveToAbsoluteWithSizeAndRule((EQKit::Font::Metric::LengthEntry *)((char *)this + 16 * v7), *((double *)a2 + 2), a3);
  else
    v9 = 0.0;
  v11 = v8[32];
  v10 = (EQKitLength *)(v8 + 32);
  if ((v11 & 0xFFFFFFFD) != 0)
  {
    v12 = EQKitLength::resolveToAbsoluteWithSizeAndRule(v10, *((double *)a2 + 2), a3);
    if (v9 < v12)
      v9 = v12;
  }
  if ((*((_DWORD *)this + 4 * v7 + 64) & 0xFFFFFFFD) != 0)
  {
    v13 = EQKitLength::resolveToAbsoluteWithSizeAndRule(v10, *((double *)a2 + 2), a3);
    if (v9 > v13)
      return v13;
  }
  return v9;
}

uint64_t EQKit::Font::Metric::LengthEntry::fromString(const std::string *a1, __int128 *a2)
{
  int v4;
  const std::string *v5;
  std::string::size_type size;
  std::string::size_type v7;
  unint64_t v8;
  int v9;
  BOOL v10;
  std::string::size_type v11;
  std::string::size_type v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  int v18;
  const std::string *v19;
  unint64_t v20;
  std::string::size_type v21;
  std::string *p_str;
  uint64_t v23;
  _BOOL4 v24;
  int v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  __int128 *v29;
  uint64_t v31;
  int v32;
  char v33;
  std::string::size_type v34;
  int v39;
  int v40;
  std::string *v41;
  _BOOL4 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  __int128 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v68;
  std::string v69;
  std::string __str;
  __int128 v71;
  __int128 v72;
  _OWORD v73[6];
  _OWORD v74[16];

  EQKit::Font::Metric::LengthEntry::LengthEntry((uint64_t)&v71);
  v4 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (v4 >= 0)
    v5 = a1;
  else
    v5 = (const std::string *)a1->__r_.__value_.__r.__words[0];
  if (v4 >= 0)
    size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  else
    size = a1->__r_.__value_.__l.__size_;
  if (!size)
    return 0;
  v7 = 0;
  while (memchr(" \t\n", v5->__r_.__value_.__s.__data_[v7], 3uLL))
  {
    if (size == ++v7)
      return 0;
  }
  if (v7 == -1)
    return 0;
  v8 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    v9 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
    v10 = v9 < 0;
    if (v9 >= 0)
      v11 = (std::string::size_type)a1;
    else
      v11 = a1->__r_.__value_.__r.__words[0];
    if (v10)
      v12 = a1->__r_.__value_.__l.__size_;
    else
      v12 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    if (v12 <= v7)
    {
LABEL_31:
      v16 = -1;
    }
    else
    {
      v13 = (unsigned __int8 *)(v11 + v7);
      v14 = (unsigned __int8 *)(v11 + v12);
LABEL_22:
      v15 = 0;
      while (*v13 != asc_217C39177[v15])
      {
        if (++v15 == 3)
        {
          if (++v13 != v14)
            goto LABEL_22;
          goto LABEL_31;
        }
      }
      if (v13 == v14)
        goto LABEL_31;
      v16 = (unint64_t)&v13[-v11];
      v17 = &v13[-v11 - v7];
      if (v16 != -1)
        v12 = (std::string::size_type)v17;
    }
    std::string::basic_string(&__str, a1, v7, v12, (std::allocator<char> *)&v69);
    v18 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
    if (v18 >= 0)
      v19 = a1;
    else
      v19 = (const std::string *)a1->__r_.__value_.__r.__words[0];
    if (v18 >= 0)
      v20 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    else
      v20 = a1->__r_.__value_.__l.__size_;
    if (v20 <= v16)
    {
LABEL_41:
      v7 = -1;
    }
    else
    {
      while (memchr(" \t\n", v19->__r_.__value_.__s.__data_[v16], 3uLL))
      {
        if (v20 == ++v16)
          goto LABEL_41;
      }
      v7 = v16;
    }
    v21 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    p_str = &__str;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v21 = __str.__r_.__value_.__l.__size_;
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if (!v21)
      goto LABEL_54;
    v23 = 0;
    while (p_str->__r_.__value_.__s.__data_[v23] != 61)
    {
      if (v21 == ++v23)
        goto LABEL_54;
    }
    if (v21 == v23)
    {
LABEL_54:
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v27 = 0;
      v23 = -1;
      goto LABEL_55;
    }
    if (v23)
    {
      if (v23 == -1)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        v27 = 0;
        goto LABEL_55;
      }
      v24 = p_str->__r_.__value_.__s.__data_[v23 - 1] == 39;
    }
    else
    {
      v24 = 0;
    }
    std::string::basic_string(&v69, &__str, 0, v23 - v24, (std::allocator<char> *)&v68);
    if ((*((_BYTE *)&v69.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      if (HIBYTE(v69.__r_.__value_.__r.__words[2]) != 1)
      {
        if (HIBYTE(v69.__r_.__value_.__r.__words[2]) == 3)
          goto LABEL_96;
        if (HIBYTE(v69.__r_.__value_.__r.__words[2]) != 4)
          goto LABEL_154;
        if (LODWORD(v69.__r_.__value_.__l.__data_) == 1852403012)
          goto LABEL_120;
        if (LODWORD(v69.__r_.__value_.__l.__data_) == 2019650884)
          goto LABEL_139;
LABEL_140:
        if (LODWORD(v69.__r_.__value_.__l.__data_) == 1852403028)
        {
LABEL_141:
          v25 = 0;
          v26 = 1;
LABEL_144:
          v27 = 2;
          goto LABEL_166;
        }
        if (LODWORD(v69.__r_.__value_.__l.__data_) == 2019650900)
        {
LABEL_143:
          v26 = 0;
          v25 = 1;
          goto LABEL_144;
        }
        goto LABEL_163;
      }
      v39 = v69.__r_.__value_.__s.__data_[0];
      if (v69.__r_.__value_.__s.__data_[0] == 68)
        goto LABEL_135;
      if (v69.__r_.__value_.__s.__data_[0] == 84)
      {
LABEL_134:
        v26 = 0;
        v25 = 0;
        v40 = 1;
        v27 = 2;
        goto LABEL_167;
      }
LABEL_146:
      if (v39 == 83)
      {
LABEL_147:
        v26 = 0;
        v25 = 0;
        v40 = 1;
        v27 = 4;
        goto LABEL_167;
      }
      goto LABEL_154;
    }
    v34 = v69.__r_.__value_.__l.__size_;
    if (v69.__r_.__value_.__l.__size_ == 1 && *v69.__r_.__value_.__l.__data_ == 68)
    {
LABEL_135:
      v27 = 0;
      v26 = 0;
      v25 = 0;
      goto LABEL_166;
    }
    if (v69.__r_.__value_.__l.__size_ == 4)
    {
      if (*(_DWORD *)v69.__r_.__value_.__l.__data_ == 1852403012)
        goto LABEL_120;
      v34 = v69.__r_.__value_.__l.__size_;
      if (*(_DWORD *)v69.__r_.__value_.__l.__data_ == 2019650884)
      {
LABEL_139:
        v27 = 0;
        v26 = 0;
        v25 = 1;
        goto LABEL_166;
      }
      if ((*((_BYTE *)&v69.__r_.__value_.__s + 23) & 0x80) == 0)
      {
        if (HIBYTE(v69.__r_.__value_.__r.__words[2]) == 1)
          goto LABEL_118;
        if (HIBYTE(v69.__r_.__value_.__r.__words[2]) != 4)
        {
          if (HIBYTE(v69.__r_.__value_.__r.__words[2]) != 3)
            goto LABEL_154;
LABEL_96:
          if (LOWORD(v69.__r_.__value_.__l.__data_) == 26989 && v69.__r_.__value_.__s.__data_[2] == 110)
            goto LABEL_120;
          if (LOWORD(v69.__r_.__value_.__l.__data_) == 24941 && v69.__r_.__value_.__s.__data_[2] == 120)
            goto LABEL_139;
          goto LABEL_154;
        }
        goto LABEL_140;
      }
    }
    if (v34 != 3)
      goto LABEL_121;
    if (*(_WORD *)v69.__r_.__value_.__l.__data_ == 26989 && *(_BYTE *)(v69.__r_.__value_.__r.__words[0] + 2) == 110)
    {
LABEL_120:
      v27 = 0;
      v25 = 0;
      v26 = 1;
LABEL_166:
      v40 = 1;
      goto LABEL_167;
    }
    v34 = v69.__r_.__value_.__l.__size_;
    if (v69.__r_.__value_.__l.__size_ == 3)
    {
      if (*(_WORD *)v69.__r_.__value_.__l.__data_ == 24941 && *(_BYTE *)(v69.__r_.__value_.__r.__words[0] + 2) == 120)
        goto LABEL_139;
      if ((*((_BYTE *)&v69.__r_.__value_.__s + 23) & 0x80) == 0)
      {
        if (HIBYTE(v69.__r_.__value_.__r.__words[2]) != 1)
          goto LABEL_154;
LABEL_118:
        v39 = v69.__r_.__value_.__s.__data_[0];
        if (v69.__r_.__value_.__s.__data_[0] == 84)
          goto LABEL_134;
        goto LABEL_146;
      }
    }
LABEL_121:
    if (v34 == 1)
    {
      if (*v69.__r_.__value_.__l.__data_ == 84)
        goto LABEL_134;
      v34 = v69.__r_.__value_.__l.__size_;
    }
    if (v34 != 4)
      goto LABEL_136;
    if (*(_DWORD *)v69.__r_.__value_.__l.__data_ == 1852403028)
      goto LABEL_141;
    v34 = v69.__r_.__value_.__l.__size_;
    if (v69.__r_.__value_.__l.__size_ != 4)
      goto LABEL_136;
    if (*(_DWORD *)v69.__r_.__value_.__l.__data_ == 2019650900)
      goto LABEL_143;
    if ((*((_BYTE *)&v69.__r_.__value_.__s + 23) & 0x80) != 0)
    {
LABEL_136:
      if (v34 == 1)
      {
        if (*v69.__r_.__value_.__l.__data_ == 83)
          goto LABEL_147;
        v34 = v69.__r_.__value_.__l.__size_;
      }
      if (v34 != 4)
        goto LABEL_154;
      if (*(_DWORD *)v69.__r_.__value_.__l.__data_ == 1852403027)
        goto LABEL_164;
      if (v69.__r_.__value_.__l.__size_ != 4)
        goto LABEL_154;
      v41 = (std::string *)v69.__r_.__value_.__r.__words[0];
      goto LABEL_153;
    }
    if (HIBYTE(v69.__r_.__value_.__r.__words[2]) != 4)
    {
      if (HIBYTE(v69.__r_.__value_.__r.__words[2]) != 1)
        goto LABEL_154;
      v39 = v69.__r_.__value_.__s.__data_[0];
      goto LABEL_146;
    }
LABEL_163:
    if (LODWORD(v69.__r_.__value_.__l.__data_) == 1852403027)
    {
LABEL_164:
      v25 = 0;
      v26 = 1;
      goto LABEL_165;
    }
    v41 = &v69;
LABEL_153:
    if (LODWORD(v41->__r_.__value_.__l.__data_) == 2019650899)
    {
      v26 = 0;
      v25 = 1;
LABEL_165:
      v27 = 4;
      goto LABEL_166;
    }
LABEL_154:
    if (std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v69, "SS"))
    {
      v26 = 0;
      v25 = 0;
      v40 = 1;
      v27 = 6;
      goto LABEL_167;
    }
    if (std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v69, "SSmin"))
    {
      v25 = 0;
      v26 = 1;
      v27 = 6;
      goto LABEL_166;
    }
    v42 = std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v69, "SSmax");
    v25 = v42;
    v26 = 0;
    if (v42)
      v27 = 6;
    else
      v27 = 0;
    v40 = v42;
LABEL_167:
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v69.__r_.__value_.__l.__data_);
      if (!v40)
      {
LABEL_171:
        v32 = 0;
        goto LABEL_71;
      }
    }
    else if (!v40)
    {
      goto LABEL_171;
    }
LABEL_55:
    std::string::basic_string(&v69, &__str, v23 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v68);
    EQKitLength::EQKitLength(&v68, &v69, 1);
    if ((v68 & 0xFFFFFFFD) != 0)
    {
      v28 = v27 + v24;
      if (v26)
      {
        v29 = &v74[v28];
      }
      else
      {
        if (v28 < v8 || v8 == 0x7FFFFFFFFFFFFFFFLL)
          v31 = v27 + v24;
        else
          v31 = v8;
        v29 = &v71 + v28;
        if (v25)
          v29 += 16;
        else
          v8 = v31;
      }
      *v29 = v68;
    }
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v69.__r_.__value_.__l.__data_);
    v32 = 1;
LABEL_71:
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (v7 == -1)
      v33 = 0;
    else
      v33 = v32;
  }
  while ((v33 & 1) != 0);
  if (v8)
    v43 = 0;
  else
    v43 = v32;
  if (v43 != 1)
    return 0;
  if (!(_DWORD)v72)
    v72 = v71;
  v44 = 0;
  v45 = 0;
  v46 = v73;
  v47 = 1;
  do
  {
    v48 = v47;
    if (!*(_DWORD *)v46)
    {
      *v46 = *(&v71 + 2 * v45);
      v48 = v45;
    }
    v49 = v47;
    if (!*((_DWORD *)v46 + 4))
    {
      if (v47 == v48)
        v50 = v46;
      else
        v50 = &v71 + 2 * v44 + 1;
      if (v47 == v48)
        v49 = v47;
      else
        v49 = v44;
      v46[1] = *v50;
    }
    ++v47;
    v46 += 2;
    v44 = v49;
    v45 = v48;
  }
  while (v47 != 4);
  if (&v71 != a2)
  {
    v51 = v73[3];
    a2[4] = v73[2];
    a2[5] = v51;
    v52 = v73[5];
    a2[6] = v73[4];
    a2[7] = v52;
    v53 = v72;
    *a2 = v71;
    a2[1] = v53;
    v54 = v73[1];
    a2[2] = v73[0];
    a2[3] = v54;
    v55 = v74[0];
    v56 = v74[1];
    v57 = v74[3];
    a2[10] = v74[2];
    a2[11] = v57;
    a2[8] = v55;
    a2[9] = v56;
    v58 = v74[4];
    v59 = v74[5];
    v60 = v74[7];
    a2[14] = v74[6];
    a2[15] = v60;
    a2[12] = v58;
    a2[13] = v59;
    v61 = v74[8];
    v62 = v74[9];
    v63 = v74[11];
    a2[18] = v74[10];
    a2[19] = v63;
    a2[16] = v61;
    a2[17] = v62;
    v64 = v74[12];
    v65 = v74[13];
    v66 = v74[15];
    a2[22] = v74[14];
    a2[23] = v66;
    a2[20] = v64;
    a2[21] = v65;
  }
  return 1;
}

void sub_21795DF2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

EQKit::Font::Metric::Map *EQKit::Font::Metric::Map::Map(EQKit::Font::Metric::Map *this)
{
  EQKit::Font::Metric::Map *v1;
  uint64_t v2;

  v1 = this;
  v2 = 33;
  do
  {
    this = (EQKit::Font::Metric::Map *)(EQKit::Font::Metric::LengthEntry::LengthEntry((uint64_t)this) + 384);
    --v2;
  }
  while (v2);
  return v1;
}

{
  EQKit::Font::Metric::Map *v1;
  uint64_t v2;

  v1 = this;
  v2 = 33;
  do
  {
    this = (EQKit::Font::Metric::Map *)(EQKit::Font::Metric::LengthEntry::LengthEntry((uint64_t)this) + 384);
    --v2;
  }
  while (v2);
  return v1;
}

__CFString *EQKit::Font::Metric::Map::defaultForLengthMetric(int a1)
{
  if ((a1 - 11) > 0x15)
    return 0;
  else
    return off_24D829410[a1 - 11];
}

const __CFString *EQKit::Font::Metric::Map::defaultForFloatMetric(int a1)
{
  const __CFString *v1;

  v1 = CFSTR("0");
  if (a1 != 1)
    v1 = 0;
  if (a1)
    return v1;
  else
    return CFSTR("0.5");
}

__int128 *EQKit::Font::Metric::Map::newMapFromDictionary(EQKit::Font::Metric::Map *this, NSDictionary *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string::size_type v12;
  char v13;
  uint64_t v14;
  char v15;
  __CFString *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __CFString *v20;
  __int128 *v22;
  std::string::size_type v23;
  std::string __p[3];
  void *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  std::string v29;

  v3 = operator new();
  v4 = 33;
  v22 = (__int128 *)v3;
  do
  {
    v3 = EQKit::Font::Metric::LengthEntry::LengthEntry(v3) + 384;
    --v4;
  }
  while (v4);
  v5 = 0;
  v6 = v22;
  do
  {
    v7 = sLengthMetricNames[v5];
    v8 = -[EQKit::Font::Metric::Map objectForKey:](this, "objectForKey:", v7);
    v9 = objc_opt_class();
    v10 = EQKitUtilDynamicCast(v9, v8);
    if (!(v10 | v8))
      v10 = (uint64_t)EQKit::Font::Metric::Map::defaultForLengthMetric(v5);
    if (v10)
    {
      std::string::basic_string[abi:nn180100]<0>(__p, (char *)objc_msgSend((id)v10, "UTF8String"));
      if ((EQKit::Font::Metric::LengthEntry::fromString(__p, v6) & 1) == 0)
        NSLog((NSString *)CFSTR("invalid format for '%@' - %@'"), v7, v10);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    else
    {
      NSLog((NSString *)CFSTR("invalid/missing key for '%@' - %@"), v7, v8);
    }
    ++v5;
    v6 += 24;
  }
  while (v5 != 33);
  v11 = 0;
  v12 = *MEMORY[0x24BEDB7F8];
  v23 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  v13 = 1;
  v14 = MEMORY[0x24BEDB848] + 16;
  do
  {
    v15 = v13;
    v16 = sFloatMetricNames[v11];
    v17 = -[EQKit::Font::Metric::Map objectForKey:](this, "objectForKey:", v16);
    v18 = objc_opt_class();
    v19 = EQKitUtilDynamicCast(v18, v17);
    if (!(v19 | v17) && (v20 = CFSTR("0.5"), (v15 & 1) != 0)
      || (!(v19 | v17) ? (v20 = CFSTR("0")) : (v20 = (__CFString *)v19), v20))
    {
      std::string::basic_string[abi:nn180100]<0>(&v29, (char *)-[__CFString UTF8String](v20, "UTF8String"));
      v28 = 0;
      std::istringstream::basic_istringstream[abi:nn180100](__p, &v29, 8);
      MEMORY[0x219A152B0](__p, &v28);
      if ((*(_DWORD *)((_BYTE *)&__p[1].__r_.__value_.__r.__words[1]
                      + *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] - 24)) & 7) == 2)
        *((_QWORD *)v22 + v11 + 1584) = v28;
      else
        NSLog((NSString *)CFSTR("invalid format for '%@' - %@'"), v16, v20);
      __p[0].__r_.__value_.__r.__words[0] = v12;
      *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + *(_QWORD *)(v12 - 24)) = v23;
      __p[0].__r_.__value_.__r.__words[2] = v14;
      if (v26 < 0)
        operator delete(v25);
      std::streambuf::~streambuf();
      std::istream::~istream();
      MEMORY[0x219A1537C](&v27);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
    }
    else
    {
      NSLog((NSString *)CFSTR("invalid/missing key for '%@' - %@"), v16, v17);
    }
    v13 = 0;
    v11 = 1;
  }
  while ((v15 & 1) != 0);
  return v22;
}

void sub_21795E2DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (*(char *)(v19 - 89) < 0)
    operator delete(*(void **)(v19 - 112));
  _Unwind_Resume(exception_object);
}

uint64_t EQKit::Font::CharacterMapping::newMapFromDictionary(EQKit::Font::CharacterMapping *this, NSDictionary *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  int v14;
  unsigned int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unsigned int *v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = operator new();
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)v3 = v3 + 8;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v4 = -[EQKit::Font::CharacterMapping countByEnumeratingWithState:objects:count:](this, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v18;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v18 != v6)
          objc_enumerationMutation(this);
        v8 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * i);
        v9 = -[EQKit::Font::CharacterMapping objectForKey:](this, "objectForKey:", v8);
        v10 = objc_opt_class();
        v11 = (void *)EQKitUtilDynamicCast(v10, v8);
        v12 = objc_opt_class();
        v13 = (void *)EQKitUtilDynamicCast(v12, v9);
        v16 = 0;
        v16 = EQKitUtilUTF32CharFromString(v11);
        v14 = EQKitUtilUTF32CharFromString(v13);
        if (v16 && v14)
        {
          v21 = &v16;
          *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)v3, &v16, (uint64_t)&std::piecewise_construct, &v21)+ 8) = v14;
        }
        else
        {
          NSLog((NSString *)CFSTR("invalid character mapping entry: %@ => %@"), v8, v9);
        }
      }
      v5 = -[EQKit::Font::CharacterMapping countByEnumeratingWithState:objects:count:](this, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
    }
    while (v5);
  }
  return v3;
}

uint64_t *std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, unsigned int **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 28) = **a4;
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void sub_21795E7FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

EQKit::ILayoutOffset *EQKit::ILayoutOffset::ILayoutOffset(EQKit::ILayoutOffset *this, EQKitBox *a2, double a3)
{
  *(_QWORD *)this = a2;
  *((double *)this + 1) = a3;
  return this;
}

{
  *(_QWORD *)this = a2;
  *((double *)this + 1) = a3;
  return this;
}

EQKit::ILayoutOffset *EQKit::ILayoutOffset::ILayoutOffset(EQKit::ILayoutOffset *this, id *a2)
{
  *(_QWORD *)this = *a2;
  *((_QWORD *)this + 1) = a2[1];
  return this;
}

{
  *(_QWORD *)this = *a2;
  *((_QWORD *)this + 1) = a2[1];
  return this;
}

void EQKit::ILayoutOffset::~ILayoutOffset(id *this)
{

}

{

}

uint64_t EQKit::ILayoutOffset::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {

    *(_QWORD *)a1 = *(id *)a2;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  }
  return a1;
}

double EQKit::ILayoutOffset::offsetInBox(EQKit::ILayoutOffset *this, EQKitBox *a2)
{
  double v3;

  if (!*(_QWORD *)this)
    return 1.79769313e308;
  if (a2)
  {
    -[EQKitBox transformFromDescendant:](a2, "transformFromDescendant:");
    v3 = 0.0 * 0.0;
  }
  else
  {
    v3 = 0.0;
  }
  return v3 + 0.0 * *((double *)this + 1) + 0.0;
}

EQKit::ILayout *EQKit::ILayout::ILayout(EQKit::ILayout *this, EQKitBox *a2)
{
  EQKitBox *v3;

  v3 = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = v3;
  *((_QWORD *)this + 1) = (char *)this + 16;
  bzero((char *)this + 32, 4uLL);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  return this;
}

{
  EQKitBox *v3;

  v3 = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = v3;
  *((_QWORD *)this + 1) = (char *)this + 16;
  bzero((char *)this + 32, 4uLL);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  return this;
}

EQKit::ILayout *EQKit::ILayout::ILayout(EQKit::ILayout *this, const EQKit::ILayout *a2)
{
  *(_QWORD *)this = *(id *)a2;
  std::map<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>::map[abi:nn180100]((uint64_t *)this + 1, (uint64_t)a2 + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)((char *)a2 + 40);
  return this;
}

{
  *(_QWORD *)this = *(id *)a2;
  std::map<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>::map[abi:nn180100]((uint64_t *)this + 1, (uint64_t)a2 + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)((char *)a2 + 40);
  return this;
}

void EQKit::ILayout::~ILayout(EQKit::ILayout *this)
{

  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy((uint64_t)this + 8, *((id **)this + 2));
}

void sub_21795EB7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::destroy(v1 + 8, *(id **)(v1 + 16));
  _Unwind_Resume(a1);
}

uint64_t EQKit::ILayout::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {

    *(_QWORD *)a1 = *(id *)a2;
    std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *> *,long>>((uint64_t **)(a1 + 8), *(_QWORD **)(a2 + 8), (_QWORD *)(a2 + 16));
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  }
  return a1;
}

EQKitBox *EQKit::ILayout::setBox(EQKitBox *this, EQKitBox *a2)
{
  EQKitBox *v3;

  if ((EQKitBox *)this->super.isa != a2)
  {
    v3 = this;

    this = a2;
    v3->super.isa = (Class)this;
  }
  return this;
}

uint64_t EQKit::ILayout::setIsOverAccentTokenWithBaseToken(uint64_t this, int a2)
{
  __int16 v2;

  if (a2)
    v2 = 256;
  else
    v2 = 0;
  *(_WORD *)(this + 32) = *(_WORD *)(this + 32) & 0xFEFF | v2;
  return this;
}

uint64_t EQKit::ILayout::setIsUserSpace(uint64_t this, int a2)
{
  __int16 v2;

  if (a2)
    v2 = 512;
  else
    v2 = 0;
  *(_WORD *)(this + 32) = *(_WORD *)(this + 32) & 0xFDFF | v2;
  return this;
}

uint64_t EQKit::ILayout::setVerticalContentClassification(uint64_t result, char a2)
{
  *(_WORD *)(result + 32) = *(_WORD *)(result + 32) & 0xE3FF | ((a2 & 7) << 10);
  return result;
}

BOOL EQKit::ILayout::getOffsetOfKind(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;

  v5 = *(_QWORD *)(a1 + 16);
  v3 = a1 + 16;
  v4 = v5;
  if (!v5)
    return 0;
  v7 = v3;
  do
  {
    v8 = *(_DWORD *)(v4 + 32);
    v9 = v8 < a2;
    if (v8 >= a2)
      v10 = (uint64_t *)v4;
    else
      v10 = (uint64_t *)(v4 + 8);
    if (!v9)
      v7 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 == v3 || *(_DWORD *)(v7 + 32) > a2)
    return 0;
  EQKit::ILayoutOffset::operator=((uint64_t)a3, v7 + 40);
  return *a3 != 0;
}

void EQKit::ILayout::setOffsetOfKind(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  id v6;
  uint64_t v7;

  v4 = a1 + 8;
  v5 = a2;
  v6 = *(id *)a3;
  v7 = *(_QWORD *)(a3 + 8);
  std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__emplace_unique_key_args<EQKit::ILayoutOffset::Kind,std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset>>(v4, &v5, (uint64_t)&v5);

}

void sub_21795ED58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{

  _Unwind_Resume(a1);
}

uint64_t *EQKit::ILayout::removeOffsetOfKind(uint64_t *result, int a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;

  v2 = result + 2;
  v3 = result[2];
  if (v3)
  {
    ++result;
    v4 = (uint64_t)v2;
    do
    {
      v5 = *(_DWORD *)(v3 + 32);
      v6 = v5 < a2;
      if (v5 >= a2)
        v7 = (uint64_t *)v3;
      else
        v7 = (uint64_t *)(v3 + 8);
      if (!v6)
        v4 = v3;
      v3 = *v7;
    }
    while (*v7);
    if ((uint64_t *)v4 != v2 && *(_DWORD *)(v4 + 32) <= a2)
      return std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::erase((uint64_t **)result, v4);
  }
  return result;
}

void EQKit::ILayout::takeMissingOffsetsFromLayout(EQKit::ILayout *this, const EQKit::ILayout *a2)
{
  char *v2;
  char *v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  BOOL v14;
  int v15;
  id v16;
  uint64_t v17;

  v2 = (char *)*((_QWORD *)a2 + 1);
  v3 = (char *)a2 + 16;
  if (v2 != (char *)a2 + 16)
  {
    v4 = (char *)this + 8;
    v5 = (_QWORD *)((char *)this + 16);
    do
    {
      v6 = *v5;
      v7 = *((_DWORD *)v2 + 8);
      if (!*v5)
        goto LABEL_13;
      v8 = v5;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < v7;
        if (v9 >= v7)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (_QWORD *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 == v5 || v7 < *((_DWORD *)v8 + 8))
      {
LABEL_13:
        v15 = *((_DWORD *)v2 + 8);
        v16 = *((id *)v2 + 5);
        v17 = *((_QWORD *)v2 + 6);
        std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::__emplace_unique_key_args<EQKit::ILayoutOffset::Kind,std::pair<EQKit::ILayoutOffset::Kind const,EQKit::ILayoutOffset>>((uint64_t)v4, &v15, (uint64_t)&v15);

      }
      v12 = (char *)*((_QWORD *)v2 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(char **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (char *)*((_QWORD *)v2 + 2);
          v14 = *(_QWORD *)v13 == (_QWORD)v2;
          v2 = v13;
        }
        while (!v14);
      }
      v2 = v13;
    }
    while (v13 != v3);
  }
}

void sub_21795EEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{

  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,void *>>>::operator()[abi:nn180100](uint64_t a1, id *a2)
{
  if (*(_BYTE *)(a1 + 8))
  {

  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t *std::__tree<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::__map_value_compare<EQKit::ILayoutOffset::Kind,std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>,std::less<EQKit::ILayoutOffset::Kind>,true>,std::allocator<std::__value_type<EQKit::ILayoutOffset::Kind,EQKit::ILayoutOffset>>>::erase(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = std::__tree<std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,EQKit::Config::Operator::Form>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,EQKit::Config::Operator::Form>>>::__remove_node_pointer(a1, (uint64_t *)a2);

  operator delete((void *)a2);
  return v3;
}

EQKit::Environment::Version *EQKit::Environment::Version::Version(EQKit::Environment::Version *this, NSNumber *a2)
{
  NSUInteger v3;

  if (a2)
    v3 = -[NSNumber unsignedIntegerValue](a2, "unsignedIntegerValue");
  else
    v3 = 0;
  *(_QWORD *)this = v3;
  return this;
}

{
  NSUInteger v3;

  if (a2)
    v3 = -[NSNumber unsignedIntegerValue](a2, "unsignedIntegerValue");
  else
    v3 = 0;
  *(_QWORD *)this = v3;
  return this;
}

uint64_t EQKit::Environment::Version::versionNumber(EQKit::Environment::Version *this)
{
  return objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", *(_QWORD *)this);
}

_QWORD *EQKit::Font::CharacterArray::newArrayFromArray(EQKit::Font::CharacterArray *this, NSArray *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  int v11;
  unint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  int v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v3 = (_QWORD *)operator new();
  v3[1] = 0;
  v3[2] = 0;
  *v3 = 0;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v4 = -[EQKit::Font::CharacterArray countByEnumeratingWithState:objects:count:](this, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v25;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v25 != v5)
          objc_enumerationMutation(this);
        v7 = *(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * i);
        v8 = objc_opt_class();
        v9 = (void *)EQKitUtilDynamicCast(v8, v7);
        v10 = EQKitUtilUTF32CharFromString(v9);
        v11 = v10;
        if (v10)
        {
          v13 = (_DWORD *)v3[1];
          v12 = v3[2];
          if ((unint64_t)v13 >= v12)
          {
            v15 = (_DWORD *)*v3;
            v16 = ((uint64_t)v13 - *v3) >> 2;
            v17 = v16 + 1;
            if ((unint64_t)(v16 + 1) >> 62)
              abort();
            v18 = v12 - (_QWORD)v15;
            if (v18 >> 1 > v17)
              v17 = v18 >> 1;
            if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
              v19 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v19 = v17;
            if (v19)
            {
              v20 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitTypes::Notation::Enum>>((uint64_t)(v3 + 2), v19);
              v15 = (_DWORD *)*v3;
              v13 = (_DWORD *)v3[1];
            }
            else
            {
              v20 = 0;
            }
            v21 = &v20[4 * v16];
            *(_DWORD *)v21 = v11;
            v14 = v21 + 4;
            while (v13 != v15)
            {
              v22 = *--v13;
              *((_DWORD *)v21 - 1) = v22;
              v21 -= 4;
            }
            *v3 = v21;
            v3[1] = v14;
            v3[2] = &v20[4 * v19];
            if (v15)
              operator delete(v15);
          }
          else
          {
            *v13 = v10;
            v14 = v13 + 1;
          }
          v3[1] = v14;
        }
      }
      v4 = -[EQKit::Font::CharacterArray countByEnumeratingWithState:objects:count:](this, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
    }
    while (v4);
  }
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  return v3;
}

void EQKit::Kerning::Manager::~Manager(EQKit::Kerning::Manager *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)this;
  if (v1)
  {
    v2 = EQKitCache<EQKit::OpticalKern::Glyph::Key,std::shared_ptr<EQKit::OpticalKern::Edge::Path>,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>>::~EQKitCache(v1);
    MEMORY[0x219A153B8](v2, 0x10E0C40B27302BALL);
  }
}

EQKit::Kerning::Manager *EQKit::Kerning::Manager::Manager(EQKit::Kerning::Manager *this, const EQKit::Environment::Version *a2, NSDictionary *a3)
{
  char *v6;
  EQKitPath::QuantizationConfig *v7;
  uint64_t v8;
  NSDictionary *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD v14[5];

  *((_QWORD *)this + 1) = 0;
  v6 = (char *)this + 8;
  *((_BYTE *)this + 16) = *(_QWORD *)a2 > 1uLL;
  v7 = (EQKit::Kerning::Manager *)((char *)this + 24);
  v8 = objc_opt_class();
  v9 = (NSDictionary *)EQKitUtilDynamicCast(v8, (uint64_t)-[NSDictionary objectForKey:](a3, "objectForKey:", CFSTR("quantization")));
  EQKitPath::QuantizationConfig::QuantizationConfig(v7, v9);
  v10 = operator new();
  v14[0] = MEMORY[0x24BDAC760];
  v14[1] = 3221225472;
  v14[2] = ___ZN5EQKit7Kerning7ManagerC2ERKNS_11Environment7VersionEP12NSDictionary_block_invoke;
  v14[3] = &__block_descriptor_40_e35_B24__0r__Key_____CFString_SdI_8_v16l;
  v14[4] = this;
  EQKitCache<EQKit::OpticalKern::Glyph::Key,std::shared_ptr<EQKit::OpticalKern::Edge::Path>,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>>::EQKitCache(v10, (uint64_t)v6, v14);
  *(_QWORD *)this = v10;
  v11 = objc_opt_class();
  v12 = (void *)EQKitUtilDynamicCast(v11, (uint64_t)-[NSDictionary objectForKey:](a3, "objectForKey:", CFSTR("enabled")));
  if (v12 && *(_QWORD *)a2 >= 2uLL)
    *((_BYTE *)this + 16) = objc_msgSend(v12, "BOOLValue");
  return this;
}

void sub_21795F330(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A153B8](v1, 0x10E0C40B27302BALL);
  _Unwind_Resume(a1);
}

uint64_t ___ZN5EQKit7Kerning7ManagerC2ERKNS_11Environment7VersionEP12NSDictionary_block_invoke(uint64_t a1, const EQKit::OpticalKern::Glyph::Key *a2, uint64_t a3)
{
  uint64_t v5;
  EQKit::OpticalKern::Edge::Path *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = (EQKit::OpticalKern::Edge::Path *)operator new();
  EQKit::OpticalKern::Edge::Path::Path(v6, a2, (const EQKitPath::QuantizationConfig *)(v5 + 24), 0);
  std::shared_ptr<EQKit::OpticalKern::Edge::Path>::shared_ptr[abi:nn180100]<EQKit::OpticalKern::Edge::Path,void>(&v11, (uint64_t)v6);
  std::shared_ptr<EQKit::OpticalKern::Edge::Path>::operator=[abi:nn180100](a3, &v11);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return 1;
}

void sub_21795F408(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A153B8](v1, 0x1080C4076FF3075);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<EQKit::OpticalKern::Edge::Path>::operator=[abi:nn180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

uint64_t EQKit::Kerning::Manager::beginLayout(uint64_t this)
{
  ++*(_QWORD *)(this + 8);
  return this;
}

uint64_t EQKit::Kerning::Manager::endLayout(uint64_t ***this)
{
  return EQKitCache<EQKit::OpticalKern::Glyph::Key,std::shared_ptr<EQKit::OpticalKern::Edge::Path>,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>>::prune(*this);
}

uint64_t EQKitCache<EQKit::OpticalKern::Glyph::Key,std::shared_ptr<EQKit::OpticalKern::Edge::Path>,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>>::prune(uint64_t **a1)
{
  pthread_rwlock_t *v2;
  int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  EQKit::OpticalKern::Glyph::Key *v8;
  EQKit::OpticalKern::Glyph::Key *v9;
  EQKit::OpticalKern::Glyph::Key *v10;
  const EQKit::OpticalKern::Glyph::Key *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  void **v18[4];
  uint64_t v19;
  EQKit::OpticalKern::Glyph::Key *v20;
  EQKit::OpticalKern::Glyph::Key *v21;
  unint64_t v22;
  BOOL (*v23)(uint64_t, uint64_t);

  v2 = (pthread_rwlock_t *)(a1 + 9);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 9));
  v3 = *((unsigned __int8 *)a1 + 48);
  result = pthread_rwlock_unlock(v2);
  if (v3)
  {
    pthread_rwlock_wrlock(v2);
    if (*((_BYTE *)a1 + 48))
    {
      v5 = **a1;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v6 = a1[3];
      if (v6)
      {
        do
        {
          v7 = v6[8];
          EQKit::OpticalKern::Glyph::Key::Key((EQKit::OpticalKern::Glyph::Key *)v18, (const EQKit::OpticalKern::Glyph::Key *)(v6 + 2));
          v19 = v5 - v7;
          v8 = v21;
          if ((unint64_t)v21 >= v22)
          {
            v9 = (EQKit::OpticalKern::Glyph::Key *)std::vector<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>::__push_back_slow_path<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>((uint64_t)&v20, (const EQKit::OpticalKern::Glyph::Key *)v18);
          }
          else
          {
            EQKit::OpticalKern::Glyph::Key::Key(v21, (const EQKit::OpticalKern::Glyph::Key *)v18);
            *((_QWORD *)v8 + 4) = v19;
            v9 = (EQKit::OpticalKern::Glyph::Key *)((char *)v8 + 40);
          }
          v21 = v9;
          EQKit::OpticalKern::Glyph::Key::~Key((const void **)v18);
          v6 = (uint64_t *)*v6;
        }
        while (v6);
        v10 = v20;
        v11 = v21;
      }
      else
      {
        v11 = 0;
        v10 = 0;
      }
      v12 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((v11 - v10) >> 3));
      v23 = EQKitCache<EQKit::OpticalKern::Glyph::Key,std::shared_ptr<EQKit::OpticalKern::Edge::Path>,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>>::compareKeyLRU;
      if (v11 == v10)
        v13 = 0;
      else
        v13 = v12;
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*,false>(v10, v11, (uint64_t (**)(EQKit::OpticalKern::Glyph::Key *, EQKit::OpticalKern::Glyph::Key *))&v23, v13, 1);
      v14 = 0xCCCCCCCCCCCCCCCDLL * ((v21 - v20) >> 3);
      v15 = a1[8];
      v16 = v14 - (_QWORD)v15;
      if (v14 > (unint64_t)v15)
      {
        v17 = 40 * (_QWORD)v15;
        do
        {
          if (std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::find<EQKit::OpticalKern::Glyph::Key>(a1 + 1, (uint64_t)v20 + v17))
          {
            std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::__erase_unique<EQKit::OpticalKern::Glyph::Key>(a1 + 1, (uint64_t)v20 + v17);
          }
          v17 += 40;
          --v16;
        }
        while (v16);
      }
      *((_BYTE *)a1 + 48) = 0;
      v18[0] = (void **)&v20;
      std::vector<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>::__destroy_vector::operator()[abi:nn180100](v18);
    }
    return pthread_rwlock_unlock(v2);
  }
  return result;
}

void sub_21795F648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  a10 = (void **)&a15;
  std::vector<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>::__destroy_vector::operator()[abi:nn180100](&a10);
  _Unwind_Resume(a1);
}

double EQKit::Kerning::Manager::kerningDistanceRequiredToSatisfyMinClearance(_QWORD *a1, int a2, void *a3, int a4, void *a5, double a6, double a7, double a8, double a9, double a10)
{
  double v10;
  double v19;
  CGFloat v20;
  double v21;
  CGFloat v22;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  CGFloat MinX;
  double v28;
  double v29;
  double v30;
  double v31;
  int v32;
  double v33;
  double MinY;
  double v35;
  int v36;
  double v37;
  double v38;
  double v39;
  double MaxX;
  double v42;
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  _OWORD v49[2];
  void **v50;
  uint64_t v51;
  void ***v52;
  uint64_t v53;
  void **v54[3];
  int v55;
  _QWORD v56[3];
  int v57;
  double v58;
  CGPoint v59;
  CGPoint v60;
  CGRect v61;
  CGRect v62;
  CGRect v63;
  CGRect v64;
  CGRect v65;
  CGRect v66;
  CGRect v67;
  CGRect v68;

  v58 = 0.0;
  v10 = 0.0;
  if (*((_BYTE *)a1 + 16))
  {
    objc_msgSend(a3, "erasableBounds");
    v20 = v19;
    v22 = v21;
    v24 = v23;
    v26 = v25;
    objc_msgSend(a5, "erasableBounds");
    y = v61.origin.y;
    x = v61.origin.x;
    height = v61.size.height;
    width = v61.size.width;
    MinX = CGRectGetMinX(v61);
    v28 = a8;
    v29 = a10;
    v42 = v28;
    v30 = v28 + MinX;
    v62.origin.x = v20;
    v62.origin.y = v22;
    v62.size.width = v24;
    v62.size.height = v26;
    if (v30 - (a6 + CGRectGetMaxX(v62)) < v29)
    {
      v31 = v29;
      memset(v56, 0, sizeof(v56));
      v57 = 2;
      memset(v54, 0, sizeof(v54));
      v55 = 0;
      if (a2 == 2)
      {
        v63.origin.x = v20;
        v63.origin.y = v22;
        v63.size.width = v24;
        v63.size.height = v26;
        MaxX = CGRectGetMaxX(v63);
        v33 = a9;
        v64.origin.x = v20;
        v64.origin.y = v22;
        v64.size.width = v24;
        v64.size.height = v26;
        MinY = CGRectGetMinY(v64);
        v65.origin.x = v20;
        v65.origin.y = v22;
        v65.size.width = v24;
        v65.size.height = v26;
        v35 = CGRectGetHeight(v65);
        v59.y = a7 + MinY;
        v59.x = a6 + MaxX;
        EQKit::OpticalKern::Spec::appendEntry((EQKit::OpticalKern::Spec *)v56, v59, v35);
        v32 = 1;
      }
      else
      {
        v32 = 0;
        v33 = a9;
        if (!a2)
          v32 = objc_msgSend(a3, "appendOpticalAlignToSpec:offset:", v56, a6, a7);
      }
      if (a4 == 2)
      {
        v66.origin.y = y;
        v66.origin.x = x;
        v66.size.height = height;
        v66.size.width = width;
        v37 = CGRectGetMinX(v66);
        v67.origin.y = y;
        v67.origin.x = x;
        v67.size.height = height;
        v67.size.width = width;
        v38 = CGRectGetMinY(v67);
        v68.origin.y = y;
        v68.origin.x = x;
        v68.size.height = height;
        v68.size.width = width;
        v39 = CGRectGetHeight(v68);
        v60.y = v33 + v38;
        v60.x = v42 + v37;
        EQKit::OpticalKern::Spec::appendEntry((EQKit::OpticalKern::Spec *)v54, v60, v39);
        v36 = 1;
      }
      else
      {
        if (a4)
        {
LABEL_13:
          v52 = v54;
          std::vector<EQKit::OpticalKern::Spec::Entry>::__destroy_vector::operator()[abi:nn180100]((void ***)&v52);
          v54[0] = (void **)v56;
          std::vector<EQKit::OpticalKern::Spec::Entry>::__destroy_vector::operator()[abi:nn180100](v54);
          return v58;
        }
        v36 = objc_msgSend(a5, "appendOpticalAlignToSpec:offset:", v54, v42, v33);
      }
      if ((v32 & v36) == 1)
      {
        EQKit::OpticalKern::Edge::Composite::Composite(&v52, v56, a1 + 3, *a1);
        EQKit::OpticalKern::Edge::Composite::Composite(&v50, v54, a1 + 3, *a1);
        v49[0] = *MEMORY[0x24BDBEFB0];
        v49[1] = v49[0];
        EQKit::OpticalKern::Edge::Composite::isDistanceSmallerThanThreshold((int *)&v52, (uint64_t)&v50, &v58, (double *)v49, 0, v31);
        *(_QWORD *)&v49[0] = &v51;
        std::vector<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::__destroy_vector::operator()[abi:nn180100]((void ***)v49);
        v50 = (void **)&v53;
        std::vector<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::__destroy_vector::operator()[abi:nn180100](&v50);
      }
      goto LABEL_13;
    }
  }
  return v10;
}

void sub_21795F950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,uint64_t a25,void ***a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30)
{
  uint64_t v30;
  uint64_t v31;

  a17 = (void **)(v30 + 8);
  std::vector<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::__destroy_vector::operator()[abi:nn180100](&a17);
  a22 = (void **)&a27;
  std::vector<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::__destroy_vector::operator()[abi:nn180100](&a22);
  a26 = &a30;
  std::vector<EQKit::OpticalKern::Spec::Entry>::__destroy_vector::operator()[abi:nn180100]((void ***)&a26);
  a30 = (void **)(v31 - 168);
  std::vector<EQKit::OpticalKern::Spec::Entry>::__destroy_vector::operator()[abi:nn180100](&a30);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<EQKit::OpticalKern::Spec::Entry>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        EQKit::OpticalKern::Spec::Entry::~Entry((EQKit::OpticalKern::Spec::Entry *)(v4 - 72));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t EQKitCache<EQKit::OpticalKern::Glyph::Key,std::shared_ptr<EQKit::OpticalKern::Edge::Path>,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>>::~EQKitCache(uint64_t a1)
{
  pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 72));
  _Block_release(*(const void **)(a1 + 272));
  std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::~__hash_table(a1 + 8);
  return a1;
}

void sub_21795FACC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::~__hash_table(v1 + 8);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::__deallocate_node(a1, *(const void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::__deallocate_node(uint64_t a1, const void **a2)
{
  const void **v2;
  const void **v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (const void **)*v2;
      std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)(v2 + 6));
      EQKit::OpticalKern::Glyph::Key::~Key(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *std::shared_ptr<EQKit::OpticalKern::Edge::Path>::shared_ptr[abi:nn180100]<EQKit::OpticalKern::Edge::Path,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D829518;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_21795FBC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a10 = 0;
  if (v10)
    std::default_delete<EQKit::OpticalKern::Edge::Path>::operator()[abi:nn180100]((uint64_t)&a10, v10);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<EQKit::OpticalKern::Edge::Path *,std::shared_ptr<EQKit::OpticalKern::Edge::Path>::__shared_ptr_default_delete<EQKit::OpticalKern::Edge::Path,EQKit::OpticalKern::Edge::Path>,std::allocator<EQKit::OpticalKern::Edge::Path>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A153B8);
}

void std::__shared_ptr_pointer<EQKit::OpticalKern::Edge::Path *,std::shared_ptr<EQKit::OpticalKern::Edge::Path>::__shared_ptr_default_delete<EQKit::OpticalKern::Edge::Path,EQKit::OpticalKern::Edge::Path>,std::allocator<EQKit::OpticalKern::Edge::Path>>::__on_zero_shared(uint64_t a1)
{
  std::default_delete<EQKit::OpticalKern::Edge::Path>::operator()[abi:nn180100](a1 + 24, *(_QWORD *)(a1 + 24));
}

void std::default_delete<EQKit::OpticalKern::Edge::Path>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = *(void **)(a2 + 32);
    if (v2)
    {
      *(_QWORD *)(a2 + 40) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x219A153B8);
  }
}

uint64_t EQKitCache<EQKit::OpticalKern::Glyph::Key,std::shared_ptr<EQKit::OpticalKern::Edge::Path>,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>>::EQKitCache(uint64_t a1, uint64_t a2, const void *a3)
{
  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = xmmword_217C27820;
  pthread_rwlock_init((pthread_rwlock_t *)(a1 + 72), 0);
  *(_QWORD *)(a1 + 272) = _Block_copy(a3);
  return a1;
}

void sub_21795FCD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

BOOL EQKitCache<EQKit::OpticalKern::Glyph::Key,std::shared_ptr<EQKit::OpticalKern::Edge::Path>,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>>::compareKeyLRU(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 32) < *(_QWORD *)(a2 + 32);
}

uint64_t std::vector<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>::__push_back_slow_path<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>(uint64_t a1, const EQKit::OpticalKern::Glyph::Key *a2)
{
  EQKit::OpticalKern::Glyph::Key *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v14;
  EQKit::OpticalKern::Glyph::Key *v15;
  EQKit::OpticalKern::Glyph::Key *v16;
  char *v17;
  uint64_t v18;

  v2 = *(EQKit::OpticalKern::Glyph::Key **)a1;
  v3 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666)
    abort();
  v8 = *(_QWORD *)(a1 + 16);
  v7 = a1 + 16;
  v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - (uint64_t)v2) >> 3);
  if (2 * v9 > v4)
    v4 = 2 * v9;
  if (v9 >= 0x333333333333333)
    v10 = 0x666666666666666;
  else
    v10 = v4;
  v18 = v7;
  if (v10)
    v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<EQKit::StemStretch::Key,unsigned long>>>(v7, v10);
  else
    v11 = 0;
  v14 = v11;
  v15 = (EQKit::OpticalKern::Glyph::Key *)&v11[40 * v3];
  v16 = v15;
  v17 = &v11[40 * v10];
  EQKit::OpticalKern::Glyph::Key::Key(v15, a2);
  *((_QWORD *)v15 + 4) = *((_QWORD *)a2 + 4);
  v16 = (EQKit::OpticalKern::Glyph::Key *)((char *)v16 + 40);
  std::vector<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>::__swap_out_circular_buffer((EQKit::OpticalKern::Glyph::Key **)a1, &v14);
  v12 = *(_QWORD *)(a1 + 8);
  std::__split_buffer<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>::~__split_buffer((uint64_t)&v14);
  return v12;
}

void sub_21795FDF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

EQKit::OpticalKern::Glyph::Key *std::vector<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>::__swap_out_circular_buffer(EQKit::OpticalKern::Glyph::Key **a1, _QWORD *a2)
{
  EQKit::OpticalKern::Glyph::Key *v4;
  EQKit::OpticalKern::Glyph::Key *v5;
  EQKit::OpticalKern::Glyph::Key *v6;
  EQKit::OpticalKern::Glyph::Key *result;
  EQKit::OpticalKern::Glyph::Key *v8;
  EQKit::OpticalKern::Glyph::Key *v9;
  EQKit::OpticalKern::Glyph::Key *v10;

  v4 = *a1;
  v5 = a1[1];
  v6 = (EQKit::OpticalKern::Glyph::Key *)a2[1];
  if (v5 == *a1)
  {
    result = (EQKit::OpticalKern::Glyph::Key *)a2[1];
  }
  else
  {
    do
    {
      result = EQKit::OpticalKern::Glyph::Key::Key((EQKit::OpticalKern::Glyph::Key *)((char *)v6 - 40), (EQKit::OpticalKern::Glyph::Key *)((char *)v5 - 40));
      *((_QWORD *)v6 - 1) = *((_QWORD *)v5 - 1);
      v5 = (EQKit::OpticalKern::Glyph::Key *)((char *)v5 - 40);
      v6 = result;
    }
    while (v5 != v4);
  }
  a2[1] = result;
  v8 = *a1;
  *a1 = result;
  a2[1] = v8;
  v9 = a1[1];
  a1[1] = (EQKit::OpticalKern::Glyph::Key *)a2[2];
  a2[2] = v9;
  v10 = a1[2];
  a1[2] = (EQKit::OpticalKern::Glyph::Key *)a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;
    EQKit::OpticalKern::Glyph::Key::~Key((const void **)(i - 40));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*,false>(EQKit::OpticalKern::Glyph::Key *a1, const EQKit::OpticalKern::Glyph::Key *a2, uint64_t (**a3)(EQKit::OpticalKern::Glyph::Key *, EQKit::OpticalKern::Glyph::Key *), uint64_t a4, char a5)
{
  EQKit::OpticalKern::Glyph::Key *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  EQKit::OpticalKern::Glyph::Key *v15;
  uint64_t v16;
  EQKit::OpticalKern::Glyph::Key *v17;
  EQKit::OpticalKern::Glyph::Key *v18;
  EQKit::OpticalKern::Glyph::Key *v19;
  EQKit::OpticalKern::Glyph::Key *v20;
  char v21;
  char v22;

void std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(uint64_t a1, const EQKit::OpticalKern::Glyph::Key *a2, uint64_t (**a3)(const void **, uint64_t))
{
  const EQKit::OpticalKern::Glyph::Key *v5;
  uint64_t v7;
  const EQKit::OpticalKern::Glyph::Key *v8;
  const EQKit::OpticalKern::Glyph::Key *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  const void *v13[4];
  uint64_t v14;

  if ((const EQKit::OpticalKern::Glyph::Key *)a1 != a2)
  {
    v5 = (const EQKit::OpticalKern::Glyph::Key *)(a1 + 40);
    if ((const EQKit::OpticalKern::Glyph::Key *)(a1 + 40) != a2)
    {
      v7 = 0;
      v8 = (const EQKit::OpticalKern::Glyph::Key *)a1;
      do
      {
        v9 = v5;
        if ((*a3)((const void **)v5, (uint64_t)v8))
        {
          EQKit::OpticalKern::Glyph::Key::Key((EQKit::OpticalKern::Glyph::Key *)v13, v9);
          v14 = *((_QWORD *)v8 + 9);
          v10 = v7;
          while (1)
          {
            EQKit::OpticalKern::Glyph::Key::operator=(a1 + v10 + 40, a1 + v10);
            *(_QWORD *)(a1 + v10 + 72) = *(_QWORD *)(a1 + v10 + 32);
            if (!v10)
              break;
            v11 = (*a3)(v13, a1 + v10 - 40);
            v10 -= 40;
            if ((v11 & 1) == 0)
            {
              v12 = a1 + v10 + 40;
              goto LABEL_10;
            }
          }
          v12 = a1;
LABEL_10:
          EQKit::OpticalKern::Glyph::Key::operator=(v12, (uint64_t)v13);
          *(_QWORD *)(v12 + 32) = v14;
          EQKit::OpticalKern::Glyph::Key::~Key(v13);
        }
        v5 = (const EQKit::OpticalKern::Glyph::Key *)((char *)v9 + 40);
        v7 += 40;
        v8 = v9;
      }
      while ((const EQKit::OpticalKern::Glyph::Key *)((char *)v9 + 40) != a2);
    }
  }
}

void sub_21796037C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKit::OpticalKern::Glyph::Key::~Key((const void **)va);
  _Unwind_Resume(a1);
}

void std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(uint64_t a1, const EQKit::OpticalKern::Glyph::Key *a2, uint64_t (**a3)(const void **, uint64_t))
{
  uint64_t v4;
  const EQKit::OpticalKern::Glyph::Key *v5;
  const EQKit::OpticalKern::Glyph::Key *v7;
  const void *v8[4];
  uint64_t v9;

  if ((const EQKit::OpticalKern::Glyph::Key *)a1 != a2)
  {
    v4 = a1;
    v5 = (const EQKit::OpticalKern::Glyph::Key *)(a1 + 40);
    if ((const EQKit::OpticalKern::Glyph::Key *)(a1 + 40) != a2)
    {
      do
      {
        v7 = v5;
        if ((*a3)((const void **)v5, v4))
        {
          EQKit::OpticalKern::Glyph::Key::Key((EQKit::OpticalKern::Glyph::Key *)v8, v7);
          v9 = *(_QWORD *)(v4 + 72);
          do
          {
            EQKit::OpticalKern::Glyph::Key::operator=(v4 + 40, v4);
            *(_QWORD *)(v4 + 72) = *(_QWORD *)(v4 + 32);
            v4 -= 40;
          }
          while (((*a3)(v8, v4) & 1) != 0);
          EQKit::OpticalKern::Glyph::Key::operator=(v4 + 40, (uint64_t)v8);
          *(_QWORD *)(v4 + 72) = v9;
          EQKit::OpticalKern::Glyph::Key::~Key(v8);
        }
        v5 = (const EQKit::OpticalKern::Glyph::Key *)((char *)v7 + 40);
        v4 = (uint64_t)v7;
      }
      while ((const EQKit::OpticalKern::Glyph::Key *)((char *)v7 + 40) != a2);
    }
  }
}

void sub_217960460(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKit::OpticalKern::Glyph::Key::~Key((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(EQKit::OpticalKern::Glyph::Key *a1, EQKit::OpticalKern::Glyph::Key *a2, uint64_t a3, uint64_t (**a4)(EQKit::OpticalKern::Glyph::Key *, EQKit::OpticalKern::Glyph::Key *))
{
  char v8;
  uint64_t result;
  EQKit::OpticalKern::Glyph::Key *v10;
  uint64_t v11;

  v8 = (*a4)(a2, a1);
  result = (*a4)((EQKit::OpticalKern::Glyph::Key *)a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:nn180100](a2, a3);
    if (!(*a4)(a2, a1))
      return 1;
    v10 = a1;
    v11 = (uint64_t)a2;
    goto LABEL_9;
  }
  if (!(_DWORD)result)
  {
    std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:nn180100](a1, (uint64_t)a2);
    if (!(*a4)((EQKit::OpticalKern::Glyph::Key *)a3, a2))
      return 1;
    v10 = a2;
    v11 = a3;
LABEL_9:
    std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:nn180100](v10, v11);
    return 2;
  }
  std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:nn180100](a1, a3);
  return 1;
}

EQKit::OpticalKern::Glyph::Key *std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> *,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&)>(EQKit::OpticalKern::Glyph::Key *a1, unint64_t a2, uint64_t (**a3)(const void **, EQKit::OpticalKern::Glyph::Key *))
{
  EQKit::OpticalKern::Glyph::Key *v6;
  EQKit::OpticalKern::Glyph::Key *v7;
  int v8;
  const void *v10[4];
  uint64_t v11;

  EQKit::OpticalKern::Glyph::Key::Key((EQKit::OpticalKern::Glyph::Key *)v10, a1);
  v11 = *((_QWORD *)a1 + 4);
  if (((*a3)(v10, (EQKit::OpticalKern::Glyph::Key *)(a2 - 40)) & 1) != 0)
  {
    v6 = a1;
    do
      v6 = (EQKit::OpticalKern::Glyph::Key *)((char *)v6 + 40);
    while (((*a3)(v10, v6) & 1) == 0);
  }
  else
  {
    v7 = (EQKit::OpticalKern::Glyph::Key *)((char *)a1 + 40);
    do
    {
      v6 = v7;
      if ((unint64_t)v7 >= a2)
        break;
      v8 = (*a3)(v10, v7);
      v7 = (EQKit::OpticalKern::Glyph::Key *)((char *)v6 + 40);
    }
    while (!v8);
  }
  if ((unint64_t)v6 < a2)
  {
    do
      a2 -= 40;
    while (((*a3)(v10, (EQKit::OpticalKern::Glyph::Key *)a2) & 1) != 0);
  }
  while ((unint64_t)v6 < a2)
  {
    std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:nn180100](v6, a2);
    do
      v6 = (EQKit::OpticalKern::Glyph::Key *)((char *)v6 + 40);
    while (!(*a3)(v10, v6));
    do
      a2 -= 40;
    while (((*a3)(v10, (EQKit::OpticalKern::Glyph::Key *)a2) & 1) != 0);
  }
  if ((EQKit::OpticalKern::Glyph::Key *)((char *)v6 - 40) != a1)
  {
    EQKit::OpticalKern::Glyph::Key::operator=((uint64_t)a1, (uint64_t)v6 - 40);
    *((_QWORD *)a1 + 4) = *((_QWORD *)v6 - 1);
  }
  EQKit::OpticalKern::Glyph::Key::operator=((uint64_t)v6 - 40, (uint64_t)v10);
  *((_QWORD *)v6 - 1) = v11;
  EQKit::OpticalKern::Glyph::Key::~Key(v10);
  return v6;
}

void sub_2179606A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKit::OpticalKern::Glyph::Key::~Key((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> *,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&)>(EQKit::OpticalKern::Glyph::Key *a1, unint64_t a2, uint64_t (**a3)(char *, const void **))
{
  uint64_t v6;
  char v7;
  char *v8;
  EQKit::OpticalKern::Glyph::Key *v9;
  unint64_t v10;
  const void *v12[4];
  uint64_t v13;

  EQKit::OpticalKern::Glyph::Key::Key((EQKit::OpticalKern::Glyph::Key *)v12, a1);
  v6 = 0;
  v13 = *((_QWORD *)a1 + 4);
  do
  {
    v7 = (*a3)((char *)a1 + v6 + 40, v12);
    v6 += 40;
  }
  while ((v7 & 1) != 0);
  v8 = (char *)a1 + v6;
  if (v6 == 40)
  {
    do
    {
      if ((unint64_t)v8 >= a2)
        break;
      a2 -= 40;
    }
    while (((*a3)((char *)a2, v12) & 1) == 0);
  }
  else
  {
    do
      a2 -= 40;
    while (!(*a3)((char *)a2, v12));
  }
  v9 = (EQKit::OpticalKern::Glyph::Key *)((char *)a1 + v6);
  if ((unint64_t)v8 < a2)
  {
    v10 = a2;
    do
    {
      std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:nn180100](v9, v10);
      do
        v9 = (EQKit::OpticalKern::Glyph::Key *)((char *)v9 + 40);
      while (((*a3)((char *)v9, v12) & 1) != 0);
      do
        v10 -= 40;
      while (!(*a3)((char *)v10, v12));
    }
    while ((unint64_t)v9 < v10);
  }
  if ((EQKit::OpticalKern::Glyph::Key *)((char *)v9 - 40) != a1)
  {
    EQKit::OpticalKern::Glyph::Key::operator=((uint64_t)a1, (uint64_t)v9 - 40);
    *((_QWORD *)a1 + 4) = *((_QWORD *)v9 - 1);
  }
  EQKit::OpticalKern::Glyph::Key::operator=((uint64_t)v9 - 40, (uint64_t)v12);
  *((_QWORD *)v9 - 1) = v13;
  EQKit::OpticalKern::Glyph::Key::~Key(v12);
  return (uint64_t)v9 - 40;
}

void sub_217960828(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKit::OpticalKern::Glyph::Key::~Key((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(uint64_t a1, EQKit::OpticalKern::Glyph::Key *a2, uint64_t (**a3)(EQKit::OpticalKern::Glyph::Key *, EQKit::OpticalKern::Glyph::Key *))
{
  _BOOL8 v6;
  EQKit::OpticalKern::Glyph::Key *v7;
  EQKit::OpticalKern::Glyph::Key *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  const void *v15[4];
  uint64_t v16;

  v6 = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v6;
    case 2uLL:
      if ((*a3)((EQKit::OpticalKern::Glyph::Key *)((char *)a2 - 40), (EQKit::OpticalKern::Glyph::Key *)a1))std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:nn180100]((EQKit::OpticalKern::Glyph::Key *)a1, (uint64_t)a2 - 40);
      return v6;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>((EQKit::OpticalKern::Glyph::Key *)a1, (EQKit::OpticalKern::Glyph::Key *)(a1 + 40), (uint64_t)a2 - 40, a3);
      return v6;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>((EQKit::OpticalKern::Glyph::Key *)a1, (EQKit::OpticalKern::Glyph::Key *)(a1 + 40), (EQKit::OpticalKern::Glyph::Key *)(a1 + 80), (uint64_t)a2 - 40, a3);
      return v6;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>((EQKit::OpticalKern::Glyph::Key *)a1, (EQKit::OpticalKern::Glyph::Key *)(a1 + 40), (EQKit::OpticalKern::Glyph::Key *)(a1 + 80), (EQKit::OpticalKern::Glyph::Key *)(a1 + 120), (uint64_t)a2 - 40, a3);
      return v6;
    default:
      v7 = (EQKit::OpticalKern::Glyph::Key *)(a1 + 80);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>((EQKit::OpticalKern::Glyph::Key *)a1, (EQKit::OpticalKern::Glyph::Key *)(a1 + 40), a1 + 80, a3);
      v8 = (EQKit::OpticalKern::Glyph::Key *)(a1 + 120);
      if ((EQKit::OpticalKern::Glyph::Key *)(a1 + 120) == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (!(*a3)(v8, v7))
  {
LABEL_14:
    v7 = v8;
    v9 += 40;
    v8 = (EQKit::OpticalKern::Glyph::Key *)((char *)v8 + 40);
    if (v8 == a2)
      return 1;
  }
  EQKit::OpticalKern::Glyph::Key::Key((EQKit::OpticalKern::Glyph::Key *)v15, v8);
  v16 = *((_QWORD *)v8 + 4);
  v11 = v9;
  while (1)
  {
    EQKit::OpticalKern::Glyph::Key::operator=(a1 + v11 + 120, a1 + v11 + 80);
    *(_QWORD *)(a1 + v11 + 152) = *(_QWORD *)(a1 + v11 + 112);
    if (v11 == -80)
      break;
    v12 = (*a3)((EQKit::OpticalKern::Glyph::Key *)v15, (EQKit::OpticalKern::Glyph::Key *)(a1 + v11 + 40));
    v11 -= 40;
    if ((v12 & 1) == 0)
    {
      v13 = a1 + v11 + 120;
      goto LABEL_12;
    }
  }
  v13 = a1;
LABEL_12:
  EQKit::OpticalKern::Glyph::Key::operator=(v13, (uint64_t)v15);
  *(_QWORD *)(v13 + 32) = v16;
  if (++v10 != 8)
  {
    EQKit::OpticalKern::Glyph::Key::~Key(v15);
    goto LABEL_14;
  }
  v6 = (EQKit::OpticalKern::Glyph::Key *)((char *)v8 + 40) == a2;
  EQKit::OpticalKern::Glyph::Key::~Key(v15);
  return v6;
}

void sub_217960A50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKit::OpticalKern::Glyph::Key::~Key((const void **)va);
  _Unwind_Resume(a1);
}

void std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:nn180100](EQKit::OpticalKern::Glyph::Key *a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5[4];

  EQKit::OpticalKern::Glyph::Key::Key((EQKit::OpticalKern::Glyph::Key *)v5, a1);
  EQKit::OpticalKern::Glyph::Key::operator=((uint64_t)a1, a2);
  EQKit::OpticalKern::Glyph::Key::operator=(a2, (uint64_t)v5);
  EQKit::OpticalKern::Glyph::Key::~Key(v5);
  v4 = *((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 4) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v4;
}

void sub_217960ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  EQKit::OpticalKern::Glyph::Key::~Key(&a9);
  _Unwind_Resume(a1);
}

void std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(EQKit::OpticalKern::Glyph::Key *a1, EQKit::OpticalKern::Glyph::Key *a2, EQKit::OpticalKern::Glyph::Key *a3, uint64_t a4, uint64_t (**a5)(EQKit::OpticalKern::Glyph::Key *, EQKit::OpticalKern::Glyph::Key *))
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(a1, a2, (uint64_t)a3, a5);
  if ((*a5)((EQKit::OpticalKern::Glyph::Key *)a4, a3))
  {
    std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:nn180100](a3, a4);
    if ((*a5)(a3, a2))
    {
      std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:nn180100](a2, (uint64_t)a3);
      if ((*a5)(a2, a1))
        std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:nn180100](a1, (uint64_t)a2);
    }
  }
}

void std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(EQKit::OpticalKern::Glyph::Key *a1, EQKit::OpticalKern::Glyph::Key *a2, EQKit::OpticalKern::Glyph::Key *a3, EQKit::OpticalKern::Glyph::Key *a4, uint64_t a5, uint64_t (**a6)(EQKit::OpticalKern::Glyph::Key *, EQKit::OpticalKern::Glyph::Key *))
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(a1, a2, a3, (uint64_t)a4, a6);
  if ((*a6)((EQKit::OpticalKern::Glyph::Key *)a5, a4))
  {
    std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:nn180100](a4, a5);
    if ((*a6)(a4, a3))
    {
      std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:nn180100](a3, (uint64_t)a4);
      if ((*a6)(a3, a2))
      {
        std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:nn180100](a2, (uint64_t)a3);
        if ((*a6)(a2, a1))
          std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:nn180100](a1, (uint64_t)a2);
      }
    }
  }
}

EQKit::OpticalKern::Glyph::Key *std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(EQKit::OpticalKern::Glyph::Key *a1, EQKit::OpticalKern::Glyph::Key *a2, EQKit::OpticalKern::Glyph::Key *a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  const EQKit::OpticalKern::Glyph::Key *v12;
  uint64_t v13;
  EQKit::OpticalKern::Glyph::Key *v14;
  unint64_t v15;

  if (a1 != a2)
  {
    v6 = (uint64_t)a2;
    v8 = a2 - a1;
    v9 = (a2 - a1) / 40;
    if (a2 - a1 >= 41)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (EQKit::OpticalKern::Glyph::Key *)((char *)a1 + 40 * v10);
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>((uint64_t)a1, a4, v9, v12);
        v12 = (const EQKit::OpticalKern::Glyph::Key *)((char *)v12 - 40);
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if ((EQKit::OpticalKern::Glyph::Key *)v6 != a3)
    {
      v14 = (EQKit::OpticalKern::Glyph::Key *)v6;
      do
      {
        if ((*a4)((uint64_t)v14, (uint64_t)a1))
        {
          std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>::swap[abi:nn180100](v14, (uint64_t)a1);
          std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>((uint64_t)a1, a4, v9, a1);
        }
        v14 = (EQKit::OpticalKern::Glyph::Key *)((char *)v14 + 40);
      }
      while (v14 != a3);
      v13 = (uint64_t)a3;
    }
    if (v8 >= 41)
    {
      v15 = v8 / 0x28uLL;
      do
      {
        std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(a1, v6, (unsigned int (**)(uint64_t, uint64_t))a4, v15);
        v6 -= 40;
      }
      while (v15-- > 2);
    }
    return (EQKit::OpticalKern::Glyph::Key *)v13;
  }
  return a3;
}

void std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(uint64_t a1, uint64_t (**a2)(uint64_t, uint64_t), uint64_t a3, const EQKit::OpticalKern::Glyph::Key *a4)
{
  unint64_t v4;
  const EQKit::OpticalKern::Glyph::Key *v5;
  int64_t v7;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15[4];
  uint64_t v16;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - a1) >> 3)))
    {
      v10 = (0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3)) | 1;
      v11 = a1 + 40 * v10;
      v12 = 0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v12 < a3 && (*a2)(a1 + 40 * v10, v11 + 40))
      {
        v11 += 40;
        v10 = v12;
      }
      if (((*a2)(v11, (uint64_t)v5) & 1) == 0)
      {
        EQKit::OpticalKern::Glyph::Key::Key((EQKit::OpticalKern::Glyph::Key *)v15, v5);
        v16 = *((_QWORD *)v5 + 4);
        do
        {
          v13 = v11;
          EQKit::OpticalKern::Glyph::Key::operator=((uint64_t)v5, v11);
          *((_QWORD *)v5 + 4) = *(_QWORD *)(v11 + 32);
          if (v7 < v10)
            break;
          v14 = (2 * v10) | 1;
          v11 = a1 + 40 * v14;
          v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            v10 = v14;
          }
          else if ((*a2)(a1 + 40 * v14, v11 + 40))
          {
            v11 += 40;
          }
          else
          {
            v10 = v14;
          }
          v5 = (const EQKit::OpticalKern::Glyph::Key *)v13;
        }
        while (!(*a2)(v11, (uint64_t)v15));
        EQKit::OpticalKern::Glyph::Key::operator=(v13, (uint64_t)v15);
        *(_QWORD *)(v13 + 32) = v16;
        EQKit::OpticalKern::Glyph::Key::~Key(v15);
      }
    }
  }
}

void sub_217960F20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKit::OpticalKern::Glyph::Key::~Key((const void **)va);
  _Unwind_Resume(a1);
}

void std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(EQKit::OpticalKern::Glyph::Key *a1, uint64_t a2, unsigned int (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  const void *v10[4];
  uint64_t v11;

  if (a4 >= 2)
  {
    EQKit::OpticalKern::Glyph::Key::Key((EQKit::OpticalKern::Glyph::Key *)v10, a1);
    v11 = *((_QWORD *)a1 + 4);
    v8 = std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>((uint64_t)a1, a3, a4);
    v9 = v8;
    if (v8 == a2 - 40)
    {
      EQKit::OpticalKern::Glyph::Key::operator=(v8, (uint64_t)v10);
      *(_QWORD *)(v9 + 32) = v11;
    }
    else
    {
      EQKit::OpticalKern::Glyph::Key::operator=(v8, a2 - 40);
      *(_QWORD *)(v9 + 32) = *(_QWORD *)(a2 - 8);
      EQKit::OpticalKern::Glyph::Key::operator=(a2 - 40, (uint64_t)v10);
      *(_QWORD *)(a2 - 8) = v11;
      std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>((uint64_t)a1, v9 + 40, (uint64_t (**)(uint64_t, const void **))a3, 0xCCCCCCCCCCCCCCCDLL * ((v9 + 40 - (uint64_t)a1) >> 3));
    }
    EQKit::OpticalKern::Glyph::Key::~Key(v10);
  }
}

void sub_217961020(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKit::OpticalKern::Glyph::Key::~Key((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = a1 + 40 * v6 + 40;
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1 + 40 * v6 + 40, a1 + 40 * v6 + 80))
    {
      v9 += 40;
      v10 = v11;
    }
    EQKit::OpticalKern::Glyph::Key::operator=(a1, v9);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v9 + 32);
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

void std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&,std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long> const&),std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t, const void **), uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  uint64_t v9;
  const EQKit::OpticalKern::Glyph::Key *v10;
  uint64_t v11;
  const void *v12[4];
  uint64_t v13;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v8 = v4 >> 1;
    v9 = a1 + 40 * (v4 >> 1);
    v10 = (const EQKit::OpticalKern::Glyph::Key *)(a2 - 40);
    if ((*a3)(v9, (const void **)(a2 - 40)))
    {
      EQKit::OpticalKern::Glyph::Key::Key((EQKit::OpticalKern::Glyph::Key *)v12, v10);
      v13 = *(_QWORD *)(a2 - 8);
      do
      {
        v11 = v9;
        EQKit::OpticalKern::Glyph::Key::operator=((uint64_t)v10, v9);
        *((_QWORD *)v10 + 4) = *(_QWORD *)(v9 + 32);
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = a1 + 40 * v8;
        v10 = (const EQKit::OpticalKern::Glyph::Key *)v11;
      }
      while (((*a3)(v9, v12) & 1) != 0);
      EQKit::OpticalKern::Glyph::Key::operator=(v11, (uint64_t)v12);
      *(_QWORD *)(v11 + 32) = v13;
      EQKit::OpticalKern::Glyph::Key::~Key(v12);
    }
  }
}

void sub_2179611DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKit::OpticalKern::Glyph::Key::~Key((const void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::find<EQKit::OpticalKern::Glyph::Key>(_QWORD *a1, uint64_t a2)
{
  CFHashCode v4;
  int8x8_t v5;
  CFHashCode v6;
  uint8x8_t v7;
  unint64_t v8;
  CFHashCode v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;

  v4 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    v4 = CFHash((CFTypeRef)v4);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4 ^ *(unsigned int *)(a2 + 24) ^ (*(unsigned __int16 *)(a2 + 8) << 16);
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4 ^ *(unsigned int *)(a2 + 24) ^ (*(unsigned __int16 *)(a2 + 8) << 16);
    if (v6 >= *(_QWORD *)&v5)
      v9 = v6 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = v6 & (*(_QWORD *)&v5 - 1);
  }
  v10 = *(_QWORD **)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = (_QWORD *)*v10;
  if (*v10)
  {
    do
    {
      v12 = v11[1];
      if (v12 == v6)
      {
        if (EQKit::OpticalKern::Glyph::Key::operator==((uint64_t)(v11 + 2), a2))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(_QWORD *)&v5)
            v12 %= *(_QWORD *)&v5;
        }
        else
        {
          v12 &= *(_QWORD *)&v5 - 1;
        }
        if (v12 != v9)
          return 0;
      }
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t *std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::__erase_unique<EQKit::OpticalKern::Glyph::Key>(_QWORD *a1, uint64_t a2)
{
  uint64_t *result;

  result = std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::find<EQKit::OpticalKern::Glyph::Key>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  const void **v3;
  void *__p;
  uint64_t v6;

  v2 = *a2;
  std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::remove(a1, a2, (uint64_t)&__p);
  v3 = (const void **)__p;
  __p = 0;
  if (v3)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,void *>>>::operator()[abi:nn180100]((uint64_t)&v6, v3);
  return v2;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,void *>>>::operator()[abi:nn180100](uint64_t a1, const void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)(__p + 6));
    EQKit::OpticalKern::Glyph::Key::~Key(__p + 2);
  }
  if (__p)
    operator delete(__p);
}

void std::vector<std::pair<EQKit::OpticalKern::Glyph::Key,unsigned long>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  const void **v2;
  const void **v4;
  void *v5;

  v1 = *a1;
  v2 = (const void **)**a1;
  if (v2)
  {
    v4 = (const void **)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        EQKit::OpticalKern::Glyph::Key::~Key(v4 - 5);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

EQKit::OpticalKern::Glyph::Key *EQKit::OpticalKern::Glyph::Key::Key(EQKit::OpticalKern::Glyph::Key *this, CTFontRef font, __int16 a3, double a4, CGRectEdge a5)
{
  CFStringRef v6;

  *((_WORD *)this + 4) = a3;
  *((double *)this + 2) = a4;
  *((_DWORD *)this + 6) = a5;
  if (font)
    v6 = CTFontCopyPostScriptName(font);
  else
    v6 = 0;
  *(_QWORD *)this = v6;
  return this;
}

{
  CFStringRef v6;

  *((_WORD *)this + 4) = a3;
  *((double *)this + 2) = a4;
  *((_DWORD *)this + 6) = a5;
  if (font)
    v6 = CTFontCopyPostScriptName(font);
  else
    v6 = 0;
  *(_QWORD *)this = v6;
  return this;
}

EQKit::OpticalKern::Glyph::Key *EQKit::OpticalKern::Glyph::Key::Key(EQKit::OpticalKern::Glyph::Key *this, CFTypeRef cf, __int16 a3, double a4, CGRectEdge a5)
{
  *(_QWORD *)this = cf;
  *((_WORD *)this + 4) = a3;
  *((double *)this + 2) = a4;
  *((_DWORD *)this + 6) = a5;
  if (cf)
    CFRetain(cf);
  return this;
}

{
  *(_QWORD *)this = cf;
  *((_WORD *)this + 4) = a3;
  *((double *)this + 2) = a4;
  *((_DWORD *)this + 6) = a5;
  if (cf)
    CFRetain(cf);
  return this;
}

EQKit::OpticalKern::Glyph::Key *EQKit::OpticalKern::Glyph::Key::Key(EQKit::OpticalKern::Glyph::Key *this, const EQKit::OpticalKern::Glyph::Key *a2)
{
  const void *v4;

  v4 = *(const void **)a2;
  *(_QWORD *)this = *(_QWORD *)a2;
  if (v4)
    CFRetain(v4);
  *((_WORD *)this + 4) = *((_WORD *)a2 + 4);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  return this;
}

{
  const void *v4;

  v4 = *(const void **)a2;
  *(_QWORD *)this = *(_QWORD *)a2;
  if (v4)
    CFRetain(v4);
  *((_WORD *)this + 4) = *((_WORD *)a2 + 4);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  return this;
}

void EQKit::OpticalKern::Glyph::Key::~Key(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

uint64_t EQKit::OpticalKern::Glyph::Key::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;

  if (a1 != a2)
  {
    v4 = *(const void **)a1;
    if (*(_QWORD *)a1)
      CFRelease(v4);
    v5 = *(const void **)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    if (v5)
      CFRetain(v5);
    *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  }
  return a1;
}

BOOL EQKit::OpticalKern::Glyph::Key::operator==(uint64_t a1, uint64_t a2)
{
  const __CFString *v2;
  const __CFString *v3;
  _BOOL8 result;

  if (*(unsigned __int16 *)(a1 + 8) != *(unsigned __int16 *)(a2 + 8)
    || *(double *)(a1 + 16) != *(double *)(a2 + 16)
    || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
  {
    return 0;
  }
  v2 = *(const __CFString **)a1;
  v3 = *(const __CFString **)a2;
  if (*(const __CFString **)a1 == v3)
    return 1;
  result = 0;
  if (v2)
  {
    if (v3)
      return CFStringCompare(v2, v3, 0) == kCFCompareEqualTo;
  }
  return result;
}

EQKit::OpticalKern::Edge::Path *EQKit::OpticalKern::Edge::Path::Path(EQKit::OpticalKern::Edge::Path *this, const EQKit::OpticalKern::Glyph::Key *a2, const EQKitPath::QuantizationConfig *a3, const Config *a4)
{
  const __CTFontDescriptor *v7;
  const __CTFont *v8;
  const CGPath *v9;
  unint64_t **v11[2];
  CGAffineTransform matrix;

  *(_DWORD *)this = *((_DWORD *)a2 + 6);
  *((_QWORD *)this + 1) = 4;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  v7 = CTFontDescriptorCreateWithNameAndSize(*(CFStringRef *)a2, *((CGFloat *)a2 + 2));
  v8 = CTFontCreateWithFontDescriptor(v7, *((CGFloat *)a2 + 2), 0);
  CFRelease(v7);
  memset(&matrix, 0, sizeof(matrix));
  CGAffineTransformMakeScale(&matrix, 1.0, -1.0);
  if (v8)
    v9 = CTFontCreatePathForGlyph(v8, *((_WORD *)a2 + 4), &matrix);
  else
    v9 = 0;
  v11[0] = 0;
  v11[1] = 0;
  EQKit::OpticalKern::Edge::Path::analyze((unsigned int *)this, v9, (__int128 *)a3, v11);
  CGPathRelease(v9);
  if (v8)
    CFRelease(v8);
  return this;
}

void sub_2179617F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void **v10;
  void *v12;

  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  v12 = *v10;
  if (*v10)
  {
    *(_QWORD *)(v9 + 40) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

void EQKit::OpticalKern::Edge::Path::analyze(unsigned int *a1, const CGPath *a2, __int128 *a3, unint64_t ***a4)
{
  uint64_t *v5;
  int v8;
  CGFloat *v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  uint64_t v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  unint64_t v23;
  __int128 v24;
  unint64_t **v25;
  unint64_t *i;
  unint64_t v27;
  uint64_t v28;
  double *v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  char v33;
  double v34;
  double v35;
  _BOOL4 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  CGFloat v40[4];
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[72];
  CGRect v44;
  CGRect v45;

  *((_QWORD *)a1 + 2) = 0;
  v5 = (uint64_t *)(a1 + 4);
  *((_QWORD *)a1 + 3) = 0;
  *((_QWORD *)a1 + 7) = 0x7FF8000000000000;
  if (a2)
  {
    v8 = *a1;
    EQKitPath::EQKitPath((EQKitPath *)v40, a2);
    if (v43[32])
      v9 = (CGFloat *)v43;
    else
      v9 = EQKitPath::computePathBounds(v40);
    v11 = *v9;
    v10 = v9[1];
    v13 = v9[2];
    v12 = v9[3];
    v14 = *(_QWORD *)v9;
    v15 = v10;
    v16 = v13;
    v17 = v12;
    if ((v8 | 2) == 2)
    {
      v18 = CGRectGetMinY(*(CGRect *)&v14) * (double)*((unint64_t *)a1 + 1);
      *((_QWORD *)a1 + 2) = vcvtms_s32_f32(v18);
      v44.origin.x = v11;
      v44.origin.y = v10;
      v44.size.width = v13;
      v44.size.height = v12;
      v19 = CGRectGetMaxY(v44) * (double)*((unint64_t *)a1 + 1);
      v20 = ceilf(v19);
    }
    else
    {
      v21 = CGRectGetMinX(*(CGRect *)&v14) * (double)*((unint64_t *)a1 + 1);
      *((_QWORD *)a1 + 2) = vcvtms_s32_f32(v21);
      v45.origin.x = v11;
      v45.origin.y = v10;
      v45.size.width = v13;
      v45.size.height = v12;
      v22 = CGRectGetMaxX(v45) * (double)*((unint64_t *)a1 + 1);
      v20 = floorf(v22);
    }
    *((_QWORD *)a1 + 3) = (uint64_t)v20;
    v23 = (uint64_t)v20 - *((_QWORD *)a1 + 2) + 1;
    v37 = 0x7FF8000000000000;
    std::vector<double>::resize((uint64_t)(a1 + 8), v23, &v37);
    v37 = *v5;
    v24 = a3[1];
    v38 = *a3;
    v39 = v24;
    v25 = *a4;
    if (*a4)
    {
      for (i = *v25; i != v25[1]; ++i)
      {
        EQKitPath::quantizeElementEdge((EQKitPath *)v40, *i, *a1, (uint64_t)&v37, (uint64_t *)a1 + 4);
        v25 = *a4;
      }
    }
    else
    {
      EQKitPath::extractPath((EQKitPath *)v40);
      if (v42 != v41)
      {
        v27 = 0;
        if ((unint64_t)((v42 - v41) >> 4) <= 1)
          v28 = 1;
        else
          v28 = (v42 - v41) >> 4;
        do
          EQKitPath::quantizeElementEdge((EQKitPath *)v40, v27++, *a1, (uint64_t)&v37, (uint64_t *)a1 + 4);
        while (v28 != v27);
      }
    }
    v29 = (double *)*((_QWORD *)a1 + 4);
    v30 = *((_QWORD *)a1 + 5) - (_QWORD)v29;
    if (v30)
    {
      v31 = v30 >> 3;
      v32 = *a1 & 0xFFFFFFFE;
      if (v31 <= 1)
        v31 = 1;
      v33 = 1;
      do
      {
        v34 = *v29;
        if ((v33 & 1) == 0)
        {
          v35 = *((double *)a1 + 7);
          v36 = v34 < v35;
          if (v32 == 2)
            v36 = v35 < v34;
          if (!v36)
            v34 = *((double *)a1 + 7);
        }
        v33 = 0;
        *((double *)a1 + 7) = v34;
        ++v29;
        --v31;
      }
      while (v31);
    }
    EQKitPath::~EQKitPath((EQKitPath *)v40);
  }
  else
  {
    v40[0] = NAN;
    std::vector<double>::resize((uint64_t)(a1 + 8), 1uLL, v40);
  }
}

void sub_217961ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  EQKitPath::~EQKitPath((EQKitPath *)va);
  _Unwind_Resume(a1);
}

uint64_t EQKit::OpticalKern::Edge::Path::Path(uint64_t a1, int a2, const CGPath *a3, __int128 *a4, unint64_t ***a5)
{
  unint64_t **v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t **v12[2];

  *(_DWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v6 = a5[1];
  v12[0] = *a5;
  v12[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 1);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  EQKit::OpticalKern::Edge::Path::analyze((unsigned int *)a1, a3, a4, v12);
  if (v6)
  {
    v9 = (unint64_t *)(v6 + 1);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(unint64_t **))(*v6)[2])(v6);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v6);
    }
  }
  return a1;
}

void sub_217961BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void **v10;
  void *v12;

  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  v12 = *v10;
  if (*v10)
  {
    *(_QWORD *)(v9 + 40) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

uint64_t EQKit::OpticalKern::Edge::Segment::Segment(uint64_t this, CGRectEdge a2, CGPoint a3)
{
  double y;

  *(_QWORD *)this = off_24D829550;
  *(_DWORD *)(this + 8) = a2;
  *(CGPoint *)(this + 16) = a3;
  if ((a2 & 0xFFFFFFFD) != 0)
    y = a3.y;
  else
    y = a3.x;
  if ((a2 & 0xFFFFFFFD) == 0)
    a3.x = a3.y;
  *(CGFloat *)(this + 32) = a3.x;
  *(double *)(this + 40) = y;
  return this;
}

unint64_t EQKit::OpticalKern::Edge::Segment::closestBucketIndex(EQKit::OpticalKern::Edge::Segment *this, double a2)
{
  double v3;
  float v4;
  unint64_t v5;

  v3 = a2 - (*(double (**)(EQKit::OpticalKern::Edge::Segment *))(*(_QWORD *)this + 24))(this);
  v4 = v3 / (*(double (**)(EQKit::OpticalKern::Edge::Segment *))(*(_QWORD *)this + 56))(this);
  v5 = vcvtms_s32_f32(v4);
  if ((v5 & 0x8000000000000000) != 0)
    return 0;
  if ((*(uint64_t (**)(EQKit::OpticalKern::Edge::Segment *))(*(_QWORD *)this + 48))(this) <= v5)
    return (*(uint64_t (**)(EQKit::OpticalKern::Edge::Segment *))(*(_QWORD *)this + 48))(this) - 1;
  return v5;
}

uint64_t EQKit::OpticalKern::Edge::Segment::isDistanceToSmallerThanThreshold(_DWORD *a1, _DWORD *a2, double *a3, _OWORD *a4, void **a5, double a6)
{
  char v6;
  double v14;
  double v15;
  double v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  double v26;
  unint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  double v31;
  double v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  double v36;
  __int128 v37;
  _OWORD *v38;
  unint64_t v39;
  __int128 v40;
  _OWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  __int128 v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  double v53;
  double v54;
  BOOL v55;
  double v56;
  double v57;
  double v58;
  double v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v63;
  double v64;
  unint64_t v65;
  double v66;
  double v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  double v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  double v76;
  unint64_t v77;
  double v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  double v85;
  double v86;
  uint64_t v87;
  double v88;
  double v89;
  double v90;
  unint64_t v91;
  double v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  double v97;
  BOOL v98;
  void *v100;
  uint64_t v101;
  _OWORD *v102;
  double *v103;
  void **v104;
  char v105;
  unint64_t v106;
  unsigned int v107;
  unint64_t v108;
  unint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  double v113;
  __int128 v114;
  __int128 v115;
  _OWORD v116[2];
  __int128 v117;
  double v118;
  __int128 v119;
  double v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  double v124;
  __int128 v125;
  double v126;

  v6 = 0;
  if ((a1[2] & 0xFFFFFFFE) == 2 && a6 >= 0.0 && (a2[2] & 0xFFFFFFFE) != 2)
  {
    v14 = (*(double (**)(_DWORD *))(*(_QWORD *)a2 + 40))(a2);
    if (v14 - (*(double (**)(_DWORD *))(*(_QWORD *)a1 + 40))(a1) >= a6
      || (v15 = (*(double (**)(_DWORD *))(*(_QWORD *)a1 + 32))(a1) + a6,
          v15 <= (*(double (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2))
      || (v16 = (*(double (**)(_DWORD *))(*(_QWORD *)a2 + 32))(a2) + a6,
          v16 <= (*(double (**)(_DWORD *))(*(_QWORD *)a1 + 24))(a1)))
    {
      v6 = 0;
    }
    else
    {
      v17 = a1[2];
      v18 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 48))(a1);
      v19 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 48))(a2);
      v20 = v19;
      if (!v18 || !v19)
      {
        v100 = (void *)objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
        objc_msgSend(v100, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "BOOL _compareSegments(const Edge::Segment &, const Edge::Segment &, CGFloat, CGFloat &, Edge::CGPointVector &, Edge::CGPointVectors *)"), CFSTR("EQKitOpticalKern.mm"), 315, CFSTR("both segments needs at least one bucket"));
      }
      v109 = v20;
      v21 = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a1 + 88))(a1, 0);
      v22 = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
      v6 = 0;
      if (v21 < v18)
      {
        v23 = v22;
        if (v22 < v109)
        {
          v24 = v21;
          v103 = a3;
          v102 = a4;
          v25 = v17 & 0xFFFFFFFD;
          v26 = a6 * a6;
          v27 = v24;
          *(_QWORD *)&v125 = (*(double (**)(_DWORD *, unint64_t))(*(_QWORD *)a1 + 64))(a1, v24);
          *((_QWORD *)&v125 + 1) = v28;
          v126 = v29;
          v105 = 0;
          *(_QWORD *)&v123 = (*(double (**)(_DWORD *, unint64_t))(*(_QWORD *)a2 + 64))(a2, v23);
          *((_QWORD *)&v123 + 1) = v30;
          v124 = v31;
          v101 = (uint64_t)(a5 + 2);
          v32 = 1.79769313e308;
          v33 = v27;
          v34 = v23;
          v107 = v17 & 0xFFFFFFFD;
          v35 = v23;
          v104 = a5;
          do
          {
            v121 = *MEMORY[0x24BDBEFB0];
            v122 = v121;
            v36 = _determineBucketDistance((double *)&v125, (double *)&v123, v25 == 0, (double *)&v121);
            if (v36 < v26)
            {
              if (v36 < v32)
              {
                v37 = v122;
                *v102 = v121;
                v102[1] = v37;
                v32 = v36;
              }
              if (a5)
              {
                v38 = a5[1];
                v39 = (unint64_t)a5[2];
                if ((unint64_t)v38 >= v39)
                {
                  v42 = ((char *)v38 - (_BYTE *)*a5) >> 5;
                  v43 = v42 + 1;
                  if ((unint64_t)(v42 + 1) >> 59)
                    abort();
                  v44 = v39 - (_QWORD)*a5;
                  if (v44 >> 4 > v43)
                    v43 = v44 >> 4;
                  if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFE0)
                    v45 = 0x7FFFFFFFFFFFFFFLL;
                  else
                    v45 = v43;
                  if (v45)
                    v46 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKit::OpticalKern::Edge::CGPointVector>>(v101, v45);
                  else
                    v46 = 0;
                  v47 = &v46[32 * v42];
                  v48 = v122;
                  *(_OWORD *)v47 = v121;
                  *((_OWORD *)v47 + 1) = v48;
                  v50 = (char *)*a5;
                  v49 = (char *)a5[1];
                  v51 = v47;
                  if (v49 != *a5)
                  {
                    do
                    {
                      v52 = *((_OWORD *)v49 - 1);
                      *((_OWORD *)v51 - 2) = *((_OWORD *)v49 - 2);
                      *((_OWORD *)v51 - 1) = v52;
                      v51 -= 32;
                      v49 -= 32;
                    }
                    while (v49 != v50);
                    v49 = (char *)*a5;
                  }
                  v41 = v47 + 32;
                  *a5 = v51;
                  a5[1] = v47 + 32;
                  a5[2] = &v46[32 * v45];
                  if (v49)
                    operator delete(v49);
                }
                else
                {
                  v40 = v122;
                  *v38 = v121;
                  v38[1] = v40;
                  v41 = v38 + 2;
                }
                a5[1] = v41;
                v25 = v107;
              }
              if (*(double *)&v123 < *(double *)&v125)
              {
                v53 = v124;
                v54 = *((double *)&v125 + 1);
                v55 = v126 > *((double *)&v123 + 1) && v124 > *((double *)&v125 + 1);
                if (!v55)
                {
                  if (v126 >= *((double *)&v123 + 1))
                  {
                    if (v25)
                    {
                      v56 = v124;
                      v53 = *(double *)&v123;
                      v57 = *((double *)&v125 + 1);
                      v54 = *(double *)&v125;
                    }
                    else
                    {
                      v56 = *(double *)&v123;
                      v57 = *(double *)&v125;
                    }
                  }
                  else
                  {
                    if (v25)
                      v56 = *((double *)&v123 + 1);
                    else
                      v56 = *(double *)&v123;
                    if (v25)
                      v53 = *(double *)&v123;
                    else
                      v53 = *((double *)&v123 + 1);
                    if (v25)
                      v57 = v126;
                    else
                      v57 = *(double *)&v125;
                    if (v25)
                      v54 = *(double *)&v125;
                    else
                      v54 = v126;
                  }
                  *(double *)&v121 = v57;
                  *((double *)&v121 + 1) = v54;
                  *(double *)&v122 = v56;
                  *((double *)&v122 + 1) = v53;
                }
              }
              v58 = (*(double *)&v122 - *(double *)&v121) * (*(double *)&v122 - *(double *)&v121);
              if (!v25)
                v58 = (*((double *)&v122 + 1) - *((double *)&v121 + 1))
                    * (*((double *)&v122 + 1) - *((double *)&v121 + 1));
              v59 = *(double *)&v125 + sqrt(v26 - v58) - *(double *)&v123;
              if (*v103 >= v59)
                v59 = *v103;
              *v103 = v59;
              v105 = 1;
            }
            v60 = (*(uint64_t (**)(_DWORD *, unint64_t))(*(_QWORD *)a1 + 88))(a1, v27 + 1);
            v108 = v35;
            v61 = (*(uint64_t (**)(_DWORD *, unint64_t))(*(_QWORD *)a2 + 88))(a2, v35 + 1);
            v35 = v61;
            if (v60 >= v18 || v61 >= v109)
            {
              if (v60 < v18)
              {
                *(_QWORD *)&v125 = (*(double (**)(_DWORD *, unint64_t))(*(_QWORD *)a1 + 64))(a1, v60);
                *((_QWORD *)&v125 + 1) = v84;
                v126 = v85;
                v35 = v108;
              }
              else
              {
                if (v61 >= v109)
                  break;
                *(_QWORD *)&v123 = (*(double (**)(_DWORD *, unint64_t))(*(_QWORD *)a2 + 64))(a2, v61);
                *((_QWORD *)&v123 + 1) = v63;
                v124 = v64;
                v60 = v27;
              }
              v65 = v109;
            }
            else
            {
              v106 = v27;
              v55 = v33 > v27;
              v65 = v109;
              if (!v55)
              {
                v66 = *(double *)&v125;
                v33 = v60;
                do
                {
                  if ((*(double (**)(_DWORD *, unint64_t))(*(_QWORD *)a1 + 72))(a1, v33) > v66)
                    break;
                  v33 = (*(uint64_t (**)(_DWORD *, unint64_t))(*(_QWORD *)a1 + 88))(a1, v33 + 1);
                }
                while (v33 < v18);
              }
              if (v34 <= v108)
              {
                v67 = *(double *)&v123;
                v34 = v35;
                do
                {
                  if ((*(double (**)(_DWORD *, unint64_t))(*(_QWORD *)a2 + 72))(a2, v34) < v67)
                    break;
                  v34 = (*(uint64_t (**)(_DWORD *, unint64_t))(*(_QWORD *)a2 + 88))(a2, v34 + 1);
                }
                while (v34 < v109);
              }
              *(_QWORD *)&v119 = (*(double (**)(_DWORD *, unint64_t))(*(_QWORD *)a1 + 64))(a1, v60);
              *((_QWORD *)&v119 + 1) = v68;
              v120 = v69;
              *(_QWORD *)&v117 = (*(double (**)(_DWORD *, unint64_t))(*(_QWORD *)a2 + 64))(a2, v35);
              *((_QWORD *)&v117 + 1) = v70;
              v118 = v71;
              v72 = _determineBucketDistance((double *)&v125, (double *)&v117, v25 == 0, (double *)v116);
              if (v34 >= v109)
              {
                v81 = v34;
              }
              else
              {
                *(_QWORD *)&v110 = (*(double (**)(_DWORD *, unint64_t))(*(_QWORD *)a2 + 64))(a2, v34);
                *((_QWORD *)&v110 + 1) = v73;
                *(_QWORD *)&v111 = v74;
                v114 = *MEMORY[0x24BDBEFB0];
                v115 = v114;
                v75 = _determineBucketDistance((double *)&v125, (double *)&v110, v25 == 0, (double *)&v114);
                if (v75 >= v72)
                {
                  v76 = v72;
                  v81 = v34;
                }
                else
                {
                  v76 = v75;
                  if (v33 >= v18)
                    v77 = v106;
                  else
                    v77 = v33;
                  (*(void (**)(_DWORD *, unint64_t))(*(_QWORD *)a1 + 64))(a1, v77);
                  v79 = (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 80))(a2, v78);
                  if (v35 <= v79)
                    v80 = v79;
                  else
                    v80 = v35;
                  v81 = v34;
                  if (v80 < v34)
                  {
                    *(_QWORD *)&v110 = (*(double (**)(_DWORD *, unint64_t))(*(_QWORD *)a2 + 64))(a2, v80);
                    *((_QWORD *)&v110 + 1) = v82;
                    *(_QWORD *)&v111 = v83;
                    v76 = _determineBucketDistance((double *)&v125, (double *)&v110, v107 == 0, (double *)&v114);
                    v81 = v80;
                  }
                  if (v76 >= v72)
                  {
                    v76 = v72;
                  }
                  else
                  {
                    v118 = *(double *)&v111;
                    v116[0] = v114;
                    v116[1] = v115;
                    v117 = v110;
                    v35 = v81;
                  }
                }
                v72 = v76;
              }
              v25 = v107;
              v86 = _determineBucketDistance((double *)&v119, (double *)&v123, v107 == 0, (double *)&v114);
              if (v33 >= v18)
              {
                a5 = v104;
              }
              else
              {
                *(_QWORD *)&v112 = (*(double (**)(_DWORD *, unint64_t))(*(_QWORD *)a1 + 64))(a1, v33);
                *((_QWORD *)&v112 + 1) = v87;
                v113 = v88;
                v110 = *MEMORY[0x24BDBEFB0];
                v111 = v110;
                v89 = _determineBucketDistance((double *)&v112, (double *)&v123, v107 == 0, (double *)&v110);
                if (v89 >= v86)
                {
                  a5 = v104;
                  v25 = v107;
                }
                else
                {
                  v90 = v89;
                  if (v81 >= v109)
                    v91 = v108;
                  else
                    v91 = v81;
                  (*(void (**)(_DWORD *, unint64_t))(*(_QWORD *)a2 + 64))(a2, v91);
                  v93 = (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a1 + 80))(a1, v92);
                  if (v60 <= v93)
                    v94 = v93;
                  else
                    v94 = v60;
                  v95 = v33;
                  v25 = v107;
                  if (v94 < v33)
                  {
                    *(_QWORD *)&v112 = (*(double (**)(_DWORD *, unint64_t))(*(_QWORD *)a1 + 64))(a1, v94);
                    *((_QWORD *)&v112 + 1) = v96;
                    v113 = v97;
                    v90 = _determineBucketDistance((double *)&v112, (double *)&v123, v107 == 0, (double *)&v110);
                    v95 = v94;
                  }
                  a5 = v104;
                  if (v90 < v86)
                  {
                    v119 = v112;
                    v120 = v113;
                    v114 = v110;
                    v115 = v111;
                    v60 = v95;
                    v86 = v90;
                  }
                }
              }
              if (v72 <= v86)
              {
                v123 = v117;
                v124 = v118;
                v60 = v106;
              }
              else
              {
                v125 = v119;
                v126 = v120;
                v35 = v108;
              }
            }
            v98 = v60 >= v18 || v35 >= v65;
            v27 = v60;
          }
          while (!v98);
          v6 = v105;
        }
      }
    }
  }
  return v6 & 1;
}

void EQKit::OpticalKern::Edge::PathSegment::minOrthogonal(EQKit::OpticalKern::Edge::PathSegment *this)
{
  if (*((_QWORD *)this + 6))
    (*(double (**)(EQKit::OpticalKern::Edge::PathSegment *))(*(_QWORD *)this + 56))(this);
}

void EQKit::OpticalKern::Edge::PathSegment::maxOrthogonal(EQKit::OpticalKern::Edge::PathSegment *this)
{
  if (*((_QWORD *)this + 6))
    (*(double (**)(EQKit::OpticalKern::Edge::PathSegment *))(*(_QWORD *)this + 56))(this);
}

double EQKit::OpticalKern::Edge::PathSegment::closestOffset(EQKit::OpticalKern::Edge::PathSegment *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 6);
  if (v1)
    return *((double *)this + 5) + *(double *)(v1 + 56) * *((double *)this + 8);
  else
    return 0.0;
}

uint64_t EQKit::OpticalKern::Edge::PathSegment::bucketCount(EQKit::OpticalKern::Edge::PathSegment *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 6);
  if (v1)
    return *(_QWORD *)(v1 + 24) - *(_QWORD *)(v1 + 16) + 1;
  else
    return 1;
}

double EQKit::OpticalKern::Edge::PathSegment::bucketLength(EQKit::OpticalKern::Edge::PathSegment *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 6);
  if (v1)
    return *((double *)this + 8) * (1.0 / (double)*(unint64_t *)(v1 + 8));
  else
    return 1.0;
}

double EQKit::OpticalKern::Edge::PathSegment::bucket(EQKit::OpticalKern::Edge::PathSegment *this, uint64_t a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 6);
  if (v2)
    return *((double *)this + 5) + *(double *)(*(_QWORD *)(v2 + 32) + 8 * a2) * *((double *)this + 8);
  else
    return 0.0;
}

double EQKit::OpticalKern::Edge::PathSegment::offset(EQKit::OpticalKern::Edge::PathSegment *this, uint64_t a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 6);
  if (v2)
    return *((double *)this + 5) + *(double *)(*(_QWORD *)(v2 + 32) + 8 * a2) * *((double *)this + 8);
  else
    return 0.0;
}

uint64_t EQKit::OpticalKern::Edge::PathSegment::nextValidBucket(EQKit::OpticalKern::Edge::PathSegment *this, uint64_t a2)
{
  if (!*((_QWORD *)this + 6))
    return 0x7FFFFFFFFFFFFFFFLL;
  return a2;
}

void EQKit::OpticalKern::Edge::PathSegment::appendToCGPath(EQKit::OpticalKern::Edge::PathSegment *this, CGPath *a2)
{
  int *v2;
  int v5;
  unint64_t v6;
  double v7;
  uint64_t v8;
  char v9;
  double v10;
  double v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  int v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  CGPath *v23;
  double v24;
  double v25;
  CGPath *v26;
  double v27;
  BOOL v28;
  CGAffineTransform v29;

  v2 = (int *)*((_QWORD *)this + 6);
  if (v2)
  {
    v5 = *v2;
    v6 = *((_QWORD *)v2 + 1);
    v7 = *((double *)this + 8);
    memset(&v29, 0, sizeof(v29));
    CGAffineTransformMakeTranslation(&v29, *((CGFloat *)this + 2), *((CGFloat *)this + 3));
    v8 = *((_QWORD *)v2 + 2);
    if (v8 <= *((_QWORD *)v2 + 3))
    {
      v9 = 0;
      v10 = v7 * (1.0 / (double)v6);
      v11 = 0.0;
      do
      {
        v12 = *((_QWORD *)v2 + 2);
        v13 = __OFSUB__(v8, v12);
        v14 = v8 - v12;
        if (v14 < 0 != v13 || (v15 = *((_QWORD *)v2 + 4), v14 >= (unint64_t)((*((_QWORD *)v2 + 5) - v15) >> 3)))
        {
          v16 = 1.79769313e308;
          if ((*v2 & 0xFFFFFFFE) == 2)
            v16 = -1.79769313e308;
        }
        else
        {
          v16 = *(double *)(v15 + 8 * v14);
        }
        v17 = v16 * *((double *)this + 8);
        if ((v9 & 1) == 0)
        {
          v20 = (double)v8;
          if ((v5 | 2) == 2)
          {
            CGPathMoveToPoint(a2, &v29, v17, v10 * v20);
            v21 = v8 + 1;
            v22 = v10 * (double)(v8 + 1);
            v23 = a2;
            v24 = v17;
          }
          else
          {
            CGPathMoveToPoint(a2, &v29, v10 * v20, v17);
            v21 = v8 + 1;
            v24 = v10 * (double)(v8 + 1);
            v23 = a2;
            v22 = v17;
          }
          CGPathAddLineToPoint(v23, &v29, v24, v22);
          v9 = 1;
          v11 = v17;
          goto LABEL_22;
        }
        v18 = v5 | 2;
        if (v17 == v11)
        {
          if (v18 != 2)
            goto LABEL_20;
        }
        else
        {
          v19 = (double)v8;
          if (v18 != 2)
          {
            CGPathAddLineToPoint(a2, &v29, v10 * v19, v17);
LABEL_20:
            v21 = v8 + 1;
            v27 = v10 * (double)(v8 + 1);
            v26 = a2;
            v25 = v17;
            goto LABEL_21;
          }
          CGPathAddLineToPoint(a2, &v29, v17, v10 * v19);
        }
        v21 = v8 + 1;
        v25 = v10 * (double)(v8 + 1);
        v26 = a2;
        v27 = v17;
LABEL_21:
        CGPathAddLineToPoint(v26, &v29, v27, v25);
        v9 = 1;
LABEL_22:
        v2 = (int *)*((_QWORD *)this + 6);
        v28 = v8 < *((_QWORD *)v2 + 3);
        v8 = v21;
      }
      while (v28);
    }
  }
}

double EQKit::OpticalKern::Edge::ParallelSegment::minOrthogonal(EQKit::OpticalKern::Edge::ParallelSegment *this)
{
  return *((double *)this + 4);
}

double EQKit::OpticalKern::Edge::ParallelSegment::maxOrthogonal(EQKit::OpticalKern::Edge::ParallelSegment *this)
{
  return *((double *)this + 4) + *((double *)this + 6);
}

double EQKit::OpticalKern::Edge::ParallelSegment::closestOffset(EQKit::OpticalKern::Edge::ParallelSegment *this)
{
  return *((double *)this + 5);
}

uint64_t EQKit::OpticalKern::Edge::ParallelSegment::bucketCount(EQKit::OpticalKern::Edge::ParallelSegment *this)
{
  return 1;
}

double EQKit::OpticalKern::Edge::ParallelSegment::bucketLength(EQKit::OpticalKern::Edge::ParallelSegment *this)
{
  double result;

  result = *((double *)this + 6);
  if (result <= 0.0)
    return 1.0;
  return result;
}

double EQKit::OpticalKern::Edge::ParallelSegment::bucket(EQKit::OpticalKern::Edge::ParallelSegment *this)
{
  double v1;

  v1 = *((double *)this + 5);
  (*(void (**)(EQKit::OpticalKern::Edge::ParallelSegment *))(*(_QWORD *)this + 56))(this);
  return v1;
}

double EQKit::OpticalKern::Edge::ParallelSegment::offset(EQKit::OpticalKern::Edge::ParallelSegment *this)
{
  return *((double *)this + 5);
}

uint64_t EQKit::OpticalKern::Edge::ParallelSegment::nextValidBucket(EQKit::OpticalKern::Edge::ParallelSegment *this, uint64_t a2)
{
  return a2;
}

void EQKit::OpticalKern::Edge::ParallelSegment::appendToCGPath(CGFloat *this, CGMutablePathRef path)
{
  double v4;
  double v5;

  if (path)
  {
    if ((*((_DWORD *)this + 2) | 2) == 2)
    {
      CGPathMoveToPoint(path, 0, this[5], this[4]);
      v4 = this[5];
      v5 = this[4] + this[6];
    }
    else
    {
      CGPathMoveToPoint(path, 0, this[4], this[5]);
      v5 = this[5];
      v4 = this[4] + this[6];
    }
    CGPathAddLineToPoint(path, 0, v4, v5);
  }
}

uint64_t EQKit::OpticalKern::Edge::Composite::Composite(uint64_t a1, int **a2, __int128 *a3, uint64_t **a4)
{
  int v5;
  int64x2_t *v6;
  int *v7;
  int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  const __CTFont *v23;
  __int128 v24;
  const CGPath *v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  __int128 v37;
  unint64_t *v38;
  unint64_t v39;
  double v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  const __CTFont *CopyWithAttributes;
  const CGPath *v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  __int128 v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  double v63;
  double v64;
  unint64_t *v65;
  unint64_t v66;
  double Size;
  double v68;
  double v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  char *v92;
  __int128 v93;
  int64x2_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  char *v107;
  __int128 v108;
  int64x2_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  char *v122;
  __int128 v123;
  int64x2_t v124;
  CGFloat v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  CGFloat v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t *v133;
  CGFloat v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t *v138;
  __int128 *v139;
  uint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  int64x2_t *v144;
  __int128 v147;
  unint64_t **v148;
  std::__shared_weak_count *v149;
  CGAffineTransform cf;
  __int128 v151;
  __int128 v152;
  unint64_t **v153;
  std::__shared_weak_count *v154;
  _OWORD v155[2];

  v5 = *((_DWORD *)a2 + 6);
  *(_QWORD *)(a1 + 8) = 0;
  v6 = (int64x2_t *)(a1 + 8);
  *(_DWORD *)a1 = v5;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v7 = *a2;
  v144 = (int64x2_t *)(a1 + 8);
  if (*a2 != a2[1])
  {
    v9 = *((_DWORD *)a2 + 6);
    v10 = v9 & 0xFFFFFFFD;
    while (1)
    {
      v11 = *v7;
      if (*v7 == 1)
        break;
      if (v11 != 2)
      {
        if (v11 != 3)
          goto LABEL_150;
        v12 = operator new();
        v13 = *((double *)v7 + 1);
        v14 = *((double *)v7 + 2);
        v15 = *((_QWORD *)v7 + 6);
        *(_DWORD *)(v12 + 8) = v9;
        *(double *)(v12 + 16) = v13;
        *(double *)(v12 + 24) = v14;
        if (v10)
          v16 = v14;
        else
          v16 = v13;
        if (!v10)
          v13 = v14;
        *(double *)(v12 + 32) = v13;
        *(double *)(v12 + 40) = v16;
        *(_QWORD *)v12 = &off_24D829630;
        *(_QWORD *)(v12 + 48) = v15;
        std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::shared_ptr[abi:nn180100]<EQKit::OpticalKern::Edge::ParallelSegment,void>(v155, v12);
        v17 = *(_QWORD **)(a1 + 16);
        v18 = *(_QWORD *)(a1 + 24);
        if ((unint64_t)v17 >= v18)
        {
          v80 = ((uint64_t)v17 - v6->i64[0]) >> 4;
          v81 = v80 + 1;
          if ((unint64_t)(v80 + 1) >> 60)
            abort();
          v82 = v18 - v6->i64[0];
          if (v82 >> 3 > v81)
            v81 = v82 >> 3;
          if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF0)
            v83 = 0xFFFFFFFFFFFFFFFLL;
          else
            v83 = v81;
          *(_QWORD *)&cf.tx = a1 + 24;
          v84 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLength>>(a1 + 24, v83);
          v86 = &v84[16 * v80];
          v87 = *((_QWORD *)&v155[0] + 1);
          *(_OWORD *)v86 = v155[0];
          if (v87)
          {
            v88 = (unint64_t *)(v87 + 8);
            do
              v89 = __ldxr(v88);
            while (__stxr(v89 + 1, v88));
          }
          v91 = *(_QWORD **)(a1 + 8);
          v90 = *(_QWORD **)(a1 + 16);
          if (v90 == v91)
          {
            v94 = vdupq_n_s64((unint64_t)v90);
            v92 = &v84[16 * v80];
          }
          else
          {
            v92 = &v84[16 * v80];
            do
            {
              v93 = *((_OWORD *)v90 - 1);
              v90 -= 2;
              *((_OWORD *)v92 - 1) = v93;
              v92 -= 16;
              *v90 = 0;
              v90[1] = 0;
            }
            while (v90 != v91);
            v94 = *v6;
          }
          v22 = v86 + 16;
          *(_QWORD *)(a1 + 8) = v92;
          *(_QWORD *)(a1 + 16) = v86 + 16;
          *(int64x2_t *)&cf.b = v94;
          v125 = *(double *)(a1 + 24);
          *(_QWORD *)(a1 + 24) = &v84[16 * v85];
          cf.d = v125;
          *(_QWORD *)&cf.a = v94.i64[0];
          std::__split_buffer<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::~__split_buffer((uint64_t)&cf);
        }
        else
        {
          *v17 = *(_QWORD *)&v155[0];
          v19 = *((_QWORD *)&v155[0] + 1);
          v17[1] = *((_QWORD *)&v155[0] + 1);
          if (v19)
          {
            v20 = (unint64_t *)(v19 + 8);
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          v22 = v17 + 2;
        }
        *(_QWORD *)(a1 + 16) = v22;
        v126 = (std::__shared_weak_count *)*((_QWORD *)&v155[0] + 1);
        if (!*((_QWORD *)&v155[0] + 1))
          goto LABEL_150;
        v127 = (unint64_t *)(*((_QWORD *)&v155[0] + 1) + 8);
        do
          v128 = __ldaxr(v127);
        while (__stlxr(v128 - 1, v127));
        goto LABEL_148;
      }
      v155[0] = 0uLL;
      v23 = (const __CTFont *)*((_QWORD *)v7 + 4);
      if (a4 && v23)
      {
        LOWORD(cf.b) = *((_WORD *)v7 + 20);
        cf.c = 12.0;
        LODWORD(cf.d) = v9;
        *(_QWORD *)&cf.a = CTFontCopyPostScriptName(v23);
        EQKitCache<EQKit::OpticalKern::Glyph::Key,std::shared_ptr<EQKit::OpticalKern::Edge::Path>,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>>::lookup(a4, (uint64_t)&cf, &v152);
        v24 = v152;
        v152 = 0uLL;
        v155[0] = v24;
        if (*(_QWORD *)&cf.a)
          CFRelease(*(CFTypeRef *)&cf.a);
        goto LABEL_60;
      }
      if (v23)
      {
        CopyWithAttributes = CTFontCreateCopyWithAttributes(*((CTFontRef *)v7 + 4), 12.0, 0, 0);
        if (CopyWithAttributes)
        {
          memset(&cf, 0, sizeof(cf));
          CGAffineTransformMakeScale(&cf, 1.0, -1.0);
          v52 = CTFontCreatePathForGlyph(CopyWithAttributes, *((_WORD *)v7 + 20), &cf);
          v53 = operator new();
          v54 = v53;
          v55 = (std::__shared_weak_count *)*((_QWORD *)v7 + 8);
          v148 = (unint64_t **)*((_QWORD *)v7 + 7);
          v149 = v55;
          if (v55)
          {
            p_shared_owners = (unint64_t *)&v55->__shared_owners_;
            do
              v57 = __ldxr(p_shared_owners);
            while (__stxr(v57 + 1, p_shared_owners));
          }
          EQKit::OpticalKern::Edge::Path::Path(v53, v9, v52, a3, &v148);
          std::shared_ptr<EQKit::OpticalKern::Edge::Path const>::shared_ptr[abi:nn180100]<EQKit::OpticalKern::Edge::Path,void>(&v152, v54);
          v58 = v152;
          v152 = 0uLL;
          v155[0] = v58;
          v59 = v149;
          if (v149)
          {
            v60 = (unint64_t *)&v149->__shared_owners_;
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 - 1, v60));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          CGPathRelease(v52);
          CFRelease(CopyWithAttributes);
        }
LABEL_60:
        v62 = operator new();
        v63 = *((double *)v7 + 1);
        v64 = *((double *)v7 + 2);
        v147 = v155[0];
        v6 = v144;
        if (*((_QWORD *)&v155[0] + 1))
        {
          v65 = (unint64_t *)(*((_QWORD *)&v155[0] + 1) + 8);
          do
            v66 = __ldxr(v65);
          while (__stxr(v66 + 1, v65));
        }
        Size = CTFontGetSize(v23);
        *(_DWORD *)(v62 + 8) = v9;
        *(double *)(v62 + 16) = v63;
        *(double *)(v62 + 24) = v64;
        if (v10)
          v68 = v64;
        else
          v68 = v63;
        if (v10)
          v69 = v63;
        else
          v69 = v64;
        *(double *)(v62 + 32) = v69;
        *(double *)(v62 + 40) = v68;
        *(_QWORD *)v62 = &off_24D8295C0;
        *(_OWORD *)(v62 + 48) = v147;
        if (*((_QWORD *)&v147 + 1))
        {
          v70 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
          do
            v71 = __ldxr(v70);
          while (__stxr(v71 + 1, v70));
        }
        *(double *)(v62 + 64) = Size / 12.0;
        std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::shared_ptr[abi:nn180100]<EQKit::OpticalKern::Edge::PathSegment,void>(&v152, v62);
        if (*((_QWORD *)&v147 + 1))
        {
          v72 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
          do
            v73 = __ldaxr(v72);
          while (__stlxr(v73 - 1, v72));
          if (!v73)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v147 + 1) + 16))(*((_QWORD *)&v147 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v147 + 1));
          }
        }
        v74 = *(_QWORD **)(a1 + 16);
        v75 = *(_QWORD *)(a1 + 24);
        if ((unint64_t)v74 >= v75)
        {
          v110 = ((uint64_t)v74 - v144->i64[0]) >> 4;
          v111 = v110 + 1;
          if ((unint64_t)(v110 + 1) >> 60)
            abort();
          v112 = v75 - v144->i64[0];
          if (v112 >> 3 > v111)
            v111 = v112 >> 3;
          if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFF0)
            v113 = 0xFFFFFFFFFFFFFFFLL;
          else
            v113 = v111;
          *(_QWORD *)&cf.tx = a1 + 24;
          v114 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLength>>(a1 + 24, v113);
          v116 = &v114[16 * v110];
          v117 = *((_QWORD *)&v152 + 1);
          *(_OWORD *)v116 = v152;
          if (v117)
          {
            v118 = (unint64_t *)(v117 + 8);
            do
              v119 = __ldxr(v118);
            while (__stxr(v119 + 1, v118));
          }
          v121 = *(_QWORD **)(a1 + 8);
          v120 = *(_QWORD **)(a1 + 16);
          if (v120 == v121)
          {
            v124 = vdupq_n_s64((unint64_t)v120);
            v122 = &v114[16 * v110];
          }
          else
          {
            v122 = &v114[16 * v110];
            do
            {
              v123 = *((_OWORD *)v120 - 1);
              v120 -= 2;
              *((_OWORD *)v122 - 1) = v123;
              v122 -= 16;
              *v120 = 0;
              v120[1] = 0;
            }
            while (v120 != v121);
            v124 = *v144;
          }
          v79 = v116 + 16;
          *(_QWORD *)(a1 + 8) = v122;
          *(_QWORD *)(a1 + 16) = v116 + 16;
          *(int64x2_t *)&cf.b = v124;
          v134 = *(double *)(a1 + 24);
          *(_QWORD *)(a1 + 24) = &v114[16 * v115];
          cf.d = v134;
          *(_QWORD *)&cf.a = v124.i64[0];
          std::__split_buffer<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::~__split_buffer((uint64_t)&cf);
        }
        else
        {
          *v74 = v152;
          v76 = *((_QWORD *)&v152 + 1);
          v74[1] = *((_QWORD *)&v152 + 1);
          if (v76)
          {
            v77 = (unint64_t *)(v76 + 8);
            do
              v78 = __ldxr(v77);
            while (__stxr(v78 + 1, v77));
          }
          v79 = v74 + 2;
        }
        *(_QWORD *)(a1 + 16) = v79;
        v135 = (std::__shared_weak_count *)*((_QWORD *)&v152 + 1);
        if (*((_QWORD *)&v152 + 1))
        {
          v136 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
          do
            v137 = __ldaxr(v136);
          while (__stlxr(v137 - 1, v136));
          if (!v137)
          {
            ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
            std::__shared_weak_count::__release_weak(v135);
          }
        }
        v126 = (std::__shared_weak_count *)*((_QWORD *)&v155[0] + 1);
        if (!*((_QWORD *)&v155[0] + 1))
          goto LABEL_150;
        v138 = (unint64_t *)(*((_QWORD *)&v155[0] + 1) + 8);
        do
          v128 = __ldaxr(v138);
        while (__stlxr(v128 - 1, v138));
LABEL_148:
        if (!v128)
        {
          ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
          std::__shared_weak_count::__release_weak(v126);
        }
      }
LABEL_150:
      v7 += 18;
      if (v7 == a2[1])
      {
        v139 = *(__int128 **)(a1 + 8);
        v140 = *(uint64_t **)(a1 + 16);
        goto LABEL_153;
      }
    }
    v25 = EQKit::OpticalKern::Spec::Entry::copyPath((CFTypeRef *)v7);
    v26 = operator new();
    v27 = v26;
    v28 = (std::__shared_weak_count *)*((_QWORD *)v7 + 8);
    v153 = (unint64_t **)*((_QWORD *)v7 + 7);
    v154 = v28;
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    EQKit::OpticalKern::Edge::Path::Path(v26, v9, v25, a3, &v153);
    std::shared_ptr<EQKit::OpticalKern::Edge::Path>::shared_ptr[abi:nn180100]<EQKit::OpticalKern::Edge::Path,void>(v155, v27);
    v31 = v154;
    if (v154)
    {
      v32 = (unint64_t *)&v154->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    CGPathRelease(v25);
    v34 = operator new();
    v35 = *((double *)v7 + 1);
    v36 = *((double *)v7 + 2);
    v37 = v155[0];
    v151 = v155[0];
    if (*((_QWORD *)&v155[0] + 1))
    {
      v38 = (unint64_t *)(*((_QWORD *)&v155[0] + 1) + 8);
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    *(_DWORD *)(v34 + 8) = v9;
    *(double *)(v34 + 16) = v35;
    *(double *)(v34 + 24) = v36;
    if (v10)
      v40 = v36;
    else
      v40 = v35;
    if (!v10)
      v35 = v36;
    *(double *)(v34 + 32) = v35;
    *(double *)(v34 + 40) = v40;
    *(_QWORD *)v34 = &off_24D8295C0;
    *(_OWORD *)(v34 + 48) = v37;
    if (*((_QWORD *)&v37 + 1))
    {
      v41 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    *(_QWORD *)(v34 + 64) = 0x3FF0000000000000;
    std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::shared_ptr[abi:nn180100]<EQKit::OpticalKern::Edge::PathSegment,void>(&v152, v34);
    if (*((_QWORD *)&v37 + 1))
    {
      v43 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v37 + 1) + 16))(*((_QWORD *)&v37 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v37 + 1));
      }
    }
    v45 = *(_QWORD **)(a1 + 16);
    v46 = *(_QWORD *)(a1 + 24);
    if ((unint64_t)v45 >= v46)
    {
      v95 = ((uint64_t)v45 - v6->i64[0]) >> 4;
      v96 = v95 + 1;
      if ((unint64_t)(v95 + 1) >> 60)
        abort();
      v97 = v46 - v6->i64[0];
      if (v97 >> 3 > v96)
        v96 = v97 >> 3;
      if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF0)
        v98 = 0xFFFFFFFFFFFFFFFLL;
      else
        v98 = v96;
      *(_QWORD *)&cf.tx = a1 + 24;
      v99 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKitLength>>(a1 + 24, v98);
      v101 = &v99[16 * v95];
      v102 = *((_QWORD *)&v152 + 1);
      *(_OWORD *)v101 = v152;
      if (v102)
      {
        v103 = (unint64_t *)(v102 + 8);
        do
          v104 = __ldxr(v103);
        while (__stxr(v104 + 1, v103));
      }
      v106 = *(_QWORD **)(a1 + 8);
      v105 = *(_QWORD **)(a1 + 16);
      if (v105 == v106)
      {
        v109 = vdupq_n_s64((unint64_t)v105);
        v107 = &v99[16 * v95];
      }
      else
      {
        v107 = &v99[16 * v95];
        do
        {
          v108 = *((_OWORD *)v105 - 1);
          v105 -= 2;
          *((_OWORD *)v107 - 1) = v108;
          v107 -= 16;
          *v105 = 0;
          v105[1] = 0;
        }
        while (v105 != v106);
        v109 = *v6;
      }
      v50 = v101 + 16;
      *(_QWORD *)(a1 + 8) = v107;
      *(_QWORD *)(a1 + 16) = v101 + 16;
      *(int64x2_t *)&cf.b = v109;
      v129 = *(double *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = &v99[16 * v100];
      cf.d = v129;
      *(_QWORD *)&cf.a = v109.i64[0];
      std::__split_buffer<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::~__split_buffer((uint64_t)&cf);
    }
    else
    {
      *v45 = v152;
      v47 = *((_QWORD *)&v152 + 1);
      v45[1] = *((_QWORD *)&v152 + 1);
      if (v47)
      {
        v48 = (unint64_t *)(v47 + 8);
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
      v50 = v45 + 2;
    }
    *(_QWORD *)(a1 + 16) = v50;
    v130 = (std::__shared_weak_count *)*((_QWORD *)&v152 + 1);
    if (*((_QWORD *)&v152 + 1))
    {
      v131 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
      do
        v132 = __ldaxr(v131);
      while (__stlxr(v132 - 1, v131));
      if (!v132)
      {
        ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
        std::__shared_weak_count::__release_weak(v130);
      }
    }
    v126 = (std::__shared_weak_count *)*((_QWORD *)&v155[0] + 1);
    if (!*((_QWORD *)&v155[0] + 1))
      goto LABEL_150;
    v133 = (unint64_t *)(*((_QWORD *)&v155[0] + 1) + 8);
    do
      v128 = __ldaxr(v133);
    while (__stlxr(v128 - 1, v133));
    goto LABEL_148;
  }
  v140 = 0;
  v139 = 0;
LABEL_153:
  v141 = 126 - 2 * __clz(((char *)v140 - (char *)v139) >> 4);
  *(_QWORD *)&cf.a = _compareSegmentsMinOrthogonal;
  if (v140 == (uint64_t *)v139)
    v142 = 0;
  else
    v142 = v141;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*,false>(v139, v140, (uint64_t (**)(uint64_t *, uint64_t *))&cf, v142, 1);
  return a1;
}

void sub_217963380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, CFTypeRef cf, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  uint64_t v27;

  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)&a15);
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100](v27 - 144);
  *(_QWORD *)(v27 - 144) = a10;
  std::vector<std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>>::__destroy_vector::operator()[abi:nn180100]((void ***)(v27 - 144));
  _Unwind_Resume(a1);
}

void EQKitCache<EQKit::OpticalKern::Glyph::Key,std::shared_ptr<EQKit::OpticalKern::Edge::Path>,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>>::lookup(uint64_t **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  pthread_rwlock_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  uint64_t v18;

  v6 = (pthread_rwlock_t *)(a1 + 9);
  *a3 = 0;
  a3[1] = 0;
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 9));
  v7 = std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::find<EQKit::OpticalKern::Glyph::Key>(a1 + 1, a2);
  v8 = v7;
  if (v7)
  {
    v7[8] = **a1;
    std::shared_ptr<EQKit::StemStretch::Glyph>::operator=[abi:nn180100](a3, v7 + 6);
  }
  pthread_rwlock_unlock(v6);
  if (!v8)
  {
    v16 = 0;
    v17 = 0;
    v15 = 0;
    if (((unsigned int (*)(void))a1[34][2])())
    {
      pthread_rwlock_wrlock(v6);
      v9 = std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::find<EQKit::OpticalKern::Glyph::Key>(a1 + 1, a2);
      if (v9)
      {
        v10 = v9 + 6;
        v9[8] = **a1;
      }
      else
      {
        v17 = **a1;
        v18 = a2;
        v11 = std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::__emplace_unique_key_args<EQKit::OpticalKern::Glyph::Key,std::piecewise_construct_t const&,std::tuple<EQKit::OpticalKern::Glyph::Key const&>,std::tuple<>>((uint64_t)(a1 + 1), a2, (uint64_t)&std::piecewise_construct, &v18);
        v10 = &v15;
        std::shared_ptr<EQKit::StemStretch::Glyph>::operator=[abi:nn180100](v11 + 6, &v15);
        v11[8] = v17;
        if (a1[4] > a1[7])
        {
          *((_BYTE *)a1 + 48) = 1;
          v10 = &v15;
        }
      }
      std::shared_ptr<EQKit::StemStretch::Glyph>::operator=[abi:nn180100](a3, v10);
      pthread_rwlock_unlock(v6);
    }
    v12 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
}

void sub_217963668(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100](v2);
  _Unwind_Resume(a1);
}

uint64_t _compareSegmentsMinOrthogonal(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  double v4;

  result = *a1;
  if (result)
  {
    if (*a2)
    {
      v4 = (*(double (**)(uint64_t))(*(_QWORD *)result + 24))(result);
      return v4 < (*(double (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t EQKit::OpticalKern::Edge::Composite::isDistanceSmallerThanThreshold(int *a1, uint64_t a2, double *a3, double *a4, void **a5, double a6)
{
  int v6;
  uint64_t v7;
  char v13;
  __int128 *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  double v23;
  double v24;
  double v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unsigned int v33;
  __int128 v34;
  __int128 v35;
  _DWORD *v36;
  std::__shared_weak_count *v37;
  _DWORD *v38;
  std::__shared_weak_count *v39;

  v6 = *a1;
  *a3 = 0.0;
  v7 = *((_QWORD *)a1 + 1);
  if (v7 == *((_QWORD *)a1 + 2))
  {
    v13 = 0;
  }
  else
  {
    v13 = 0;
    v33 = v6 & 0xFFFFFFFD;
    v14 = (__int128 *)MEMORY[0x24BDBEFB0];
    do
    {
      v15 = *(std::__shared_weak_count **)(v7 + 8);
      v38 = *(_DWORD **)v7;
      v39 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
      }
      v18 = *(_QWORD *)(a2 + 8);
      if (v18 != *(_QWORD *)(a2 + 16))
      {
        do
        {
          v19 = *(_DWORD **)v18;
          v20 = *(std::__shared_weak_count **)(v18 + 8);
          v36 = *(_DWORD **)v18;
          v37 = v20;
          if (v20)
          {
            v21 = (unint64_t *)&v20->__shared_owners_;
            do
              v22 = __ldxr(v21);
            while (__stxr(v22 + 1, v21));
          }
          v34 = *v14;
          v35 = v34;
          if (v38
            && v19
            && EQKit::OpticalKern::Edge::Segment::isDistanceToSmallerThanThreshold(v38, v19, a3, &v34, a5, a6))
          {
            if ((v13 & 1) == 0
              || (!v33
                ? (v23 = *(double *)&v35 - *(double *)&v34, v24 = a4[2], v25 = *a4)
                : (v23 = *((double *)&v35 + 1) - *((double *)&v34 + 1), v24 = a4[3], v25 = a4[1]),
                  v23 < v24 - v25))
            {
              v26 = v35;
              *(_OWORD *)a4 = v34;
              *((_OWORD *)a4 + 1) = v26;
            }
            v13 = 1;
          }
          if (v20)
          {
            v27 = (unint64_t *)&v20->__shared_owners_;
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
          v18 += 16;
        }
        while (v18 != *(_QWORD *)(a2 + 16));
        v15 = v39;
      }
      if (v15)
      {
        v29 = (unint64_t *)&v15->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v7 += 16;
    }
    while (v7 != *((_QWORD *)a1 + 2));
  }
  return v13 & 1;
}

void sub_2179638F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

CGMutablePathRef EQKit::OpticalKern::Edge::Composite::newPathForEdge(EQKit::OpticalKern::Edge::Composite *this)
{
  CGMutablePathRef Mutable;
  uint64_t *i;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  Mutable = CGPathCreateMutable();
  if (Mutable)
  {
    for (i = (uint64_t *)*((_QWORD *)this + 1); i != *((uint64_t **)this + 2); i += 2)
    {
      v4 = *i;
      v5 = (std::__shared_weak_count *)i[1];
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      if (v4)
        (*(void (**)(uint64_t, CGMutablePathRef))(*(_QWORD *)v4 + 16))(v4, Mutable);
      if (v5)
      {
        v8 = (unint64_t *)&v5->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
  return Mutable;
}

void sub_2179639CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void EQKit::OpticalKern::Edge::PathSegment::~PathSegment(EQKit::OpticalKern::Edge::PathSegment *this)
{
  *(_QWORD *)this = &off_24D8295C0;
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)this + 48);
}

{
  *(_QWORD *)this = &off_24D8295C0;
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)this + 48);
  JUMPOUT(0x219A153B8);
}

void EQKit::OpticalKern::Edge::ParallelSegment::~ParallelSegment(EQKit::OpticalKern::Edge::ParallelSegment *this)
{
  JUMPOUT(0x219A153B8);
}

double _determineBucketDistance(double *a1, double *a2, int a3, double *a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  BOOL v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double result;

  v4 = a2[1];
  v5 = a2[2];
  v7 = a1[1];
  v6 = a1[2];
  if (v6 > v4 && v5 > v7)
  {
    if (v7 >= v4)
      v4 = a1[1];
    if (v5 < v6)
      v6 = a2[2];
    v28 = v6 + v4;
    v27 = v28 * 0.5;
    v25 = *a1;
    if (a3)
      v24 = *a1;
    else
      v24 = v28 * 0.5;
    if (a3)
    {
      v25 = v27;
      v26 = *a2;
    }
    else
    {
      v26 = v27;
    }
    if (!a3)
      v27 = *a2;
  }
  else
  {
    if ((a3 & 1) != 0)
      v9 = *a1;
    else
      v9 = a1[1];
    if ((a3 & 1) != 0)
      v10 = a1[1];
    else
      v10 = *a1;
    if ((a3 & 1) != 0)
      v11 = *a2;
    else
      v11 = a2[2];
    if ((a3 & 1) != 0)
      v12 = a2[2];
    else
      v12 = *a2;
    if (a3)
      v13 = *a2;
    else
      v13 = a2[1];
    if (a3)
      v14 = a2[1];
    else
      v14 = *a2;
    if (a3)
      v15 = *a1;
    else
      v15 = a1[2];
    if (a3)
      v16 = a1[2];
    else
      v16 = *a1;
    if (v6 < v4)
    {
      v9 = v15;
      v10 = v16;
      v11 = v13;
      v12 = v14;
    }
    if (a3)
      v17 = *a2;
    else
      v17 = a2[2];
    if (a3)
      v18 = a2[2];
    else
      v18 = *a2;
    if (a3)
      v19 = *a2;
    else
      v19 = a1[1];
    if (a3)
    {
      v20 = *a2;
    }
    else
    {
      v7 = *a2;
      v20 = a2[1];
    }
    if (a3)
      v21 = a2[1];
    else
      v21 = *a2;
    if (a3)
    {
      v5 = *a2;
      v22 = a1[2];
    }
    else
    {
      v22 = *a2;
    }
    v23 = v6 < v4;
    if (v6 < v4)
      v24 = v5;
    else
      v24 = v19;
    if (v23)
      v25 = v22;
    else
      v25 = v7;
    if (v23)
      v26 = v20;
    else
      v26 = v17;
    if (v23)
      v27 = v21;
    else
      v27 = v18;
    if (*a2 >= *a1)
    {
      v24 = v9;
      v25 = v10;
      v26 = v11;
      v27 = v12;
    }
  }
  *a4 = v24;
  a4[1] = v25;
  a4[2] = v26;
  a4[3] = v27;
  result = (v27 - v25) * (v27 - v25) + (v26 - v24) * (v26 - v24);
  if (*a2 < *a1 && a2[2] > a1[1] && a1[2] > a2[1])
    return -result;
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<EQKit::OpticalKern::Edge::CGPointVector>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(32 * a2);
}

_QWORD *std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::shared_ptr[abi:nn180100]<EQKit::OpticalKern::Edge::ParallelSegment,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D8296A0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_217963C18(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<EQKit::OpticalKern::Edge::ParallelSegment *,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::__shared_ptr_default_delete<EQKit::OpticalKern::Edge::Segment const,EQKit::OpticalKern::Edge::ParallelSegment>,std::allocator<EQKit::OpticalKern::Edge::ParallelSegment>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A153B8);
}

uint64_t std::__shared_ptr_pointer<EQKit::OpticalKern::Edge::ParallelSegment *,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::__shared_ptr_default_delete<EQKit::OpticalKern::Edge::Segment const,EQKit::OpticalKern::Edge::ParallelSegment>,std::allocator<EQKit::OpticalKern::Edge::ParallelSegment>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::shared_ptr[abi:nn180100]<EQKit::OpticalKern::Edge::PathSegment,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D8296D8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_217963CD4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<EQKit::OpticalKern::Edge::PathSegment *,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::__shared_ptr_default_delete<EQKit::OpticalKern::Edge::Segment const,EQKit::OpticalKern::Edge::PathSegment>,std::allocator<EQKit::OpticalKern::Edge::PathSegment>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A153B8);
}

uint64_t std::__shared_ptr_pointer<EQKit::OpticalKern::Edge::PathSegment *,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>::__shared_ptr_default_delete<EQKit::OpticalKern::Edge::Segment const,EQKit::OpticalKern::Edge::PathSegment>,std::allocator<EQKit::OpticalKern::Edge::PathSegment>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::__emplace_unique_key_args<EQKit::OpticalKern::Glyph::Key,std::piecewise_construct_t const&,std::tuple<EQKit::OpticalKern::Glyph::Key const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  CFHashCode v8;
  uint64_t v9;
  CFHashCode v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD v27[3];

  v8 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    v8 = CFHash((CFTypeRef)v8);
  v9 = *(unsigned __int16 *)(a2 + 8) << 16;
  v10 = v8 ^ *(unsigned int *)(a2 + 24);
  v11 = v10 ^ v9;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10 ^ v9;
      if (v11 >= v12)
        v4 = v11 % v12;
    }
    else
    {
      v4 = v11 & (v12 - 1);
    }
    v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      v16 = (_QWORD *)*v15;
      if (*v15)
      {
        do
        {
          v17 = v16[1];
          if (v17 == v11)
          {
            if (EQKit::OpticalKern::Glyph::Key::operator==((uint64_t)(v16 + 2), a2))
              return v16;
          }
          else
          {
            if (v14 > 1)
            {
              if (v17 >= v12)
                v17 %= v12;
            }
            else
            {
              v17 &= v12 - 1;
            }
            if (v17 != v4)
              break;
          }
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<EQKit::OpticalKern::Glyph::Key const&>,std::tuple<>>(a1, v11, a4, (uint64_t)v27);
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    v20 = 1;
    if (v12 >= 3)
      v20 = (v12 & (v12 - 1)) != 0;
    v21 = v20 | (2 * v12);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__rehash<true>(a1, v23);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v4 = v11 % v12;
      else
        v4 = v11;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
  }
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)v27[0] = *v24;
    *v24 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v27[0])
    {
      v25 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12)
          v25 %= v12;
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v27[0];
    }
  }
  v16 = (_QWORD *)v27[0];
  v27[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,void *>>>>::reset[abi:nn180100]((uint64_t)v27, 0);
  return v16;
}

void sub_217963FBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,void *>>>>::reset[abi:nn180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::__unordered_map_hasher<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::hash<EQKit::OpticalKern::Glyph::Key>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,true>,std::__unordered_map_equal<EQKit::OpticalKern::Glyph::Key,std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,std::equal_to<EQKit::OpticalKern::Glyph::Key>,std::hash<EQKit::OpticalKern::Glyph::Key>,true>,std::allocator<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<EQKit::OpticalKern::Glyph::Key const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = std::pair<EQKit::OpticalKern::Glyph::Key const,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>::pair[abi:nn180100]<EQKit::OpticalKern::Glyph::Key const&>((uint64_t)(v8 + 2), *a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_217964028(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,void *>>>>::reset[abi:nn180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::pair<EQKit::OpticalKern::Glyph::Key const,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>::pair[abi:nn180100]<EQKit::OpticalKern::Glyph::Key const&>(uint64_t a1, uint64_t a2)
{
  const void *v4;

  v4 = *(const void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (v4)
    CFRetain(v4);
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<EQKit::OpticalKern::Glyph::Key,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,void *>>>>::reset[abi:nn180100](uint64_t a1, uint64_t a2)
{
  CFTypeRef *v2;

  v2 = *(CFTypeRef **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:nn180100]<std::pair<EQKit::OpticalKern::Glyph::Key const,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,0>(v2 + 2);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:nn180100]<std::pair<EQKit::OpticalKern::Glyph::Key const,std::pair<std::shared_ptr<EQKit::OpticalKern::Edge::Path>,unsigned long>>,0>(CFTypeRef *a1)
{
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)(a1 + 4));
  if (*a1)
    CFRelease(*a1);
}

_QWORD *std::shared_ptr<EQKit::OpticalKern::Edge::Path const>::shared_ptr[abi:nn180100]<EQKit::OpticalKern::Edge::Path,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D829710;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_217964170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a10 = 0;
  if (v10)
    std::default_delete<EQKit::OpticalKern::Edge::Path>::operator()[abi:nn180100]((uint64_t)&a10, v10);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<EQKit::OpticalKern::Edge::Path *,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>::__shared_ptr_default_delete<EQKit::OpticalKern::Edge::Path const,EQKit::OpticalKern::Edge::Path>,std::allocator<EQKit::OpticalKern::Edge::Path>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A153B8);
}

void std::__shared_ptr_pointer<EQKit::OpticalKern::Edge::Path *,std::shared_ptr<EQKit::OpticalKern::Edge::Path const>::__shared_ptr_default_delete<EQKit::OpticalKern::Edge::Path const,EQKit::OpticalKern::Edge::Path>,std::allocator<EQKit::OpticalKern::Edge::Path>>::__on_zero_shared(uint64_t a1)
{
  std::default_delete<EQKit::OpticalKern::Edge::Path>::operator()[abi:nn180100](a1 + 24, *(_QWORD *)(a1 + 24));
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*,false>(__int128 *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  __int128 v15;
  uint64_t (*v16)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  char v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  char v31;
  BOOL v32;
  uint64_t (*v33)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  int v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;

void sub_2179645D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(uint64_t a1, _QWORD *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v9)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t *, uint64_t *);
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  int v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;

  if ((_QWORD *)a1 != a2)
  {
    v5 = (_QWORD *)(a1 + 16);
    if ((_QWORD *)(a1 + 16) != a2)
    {
      v7 = a1;
      do
      {
        v8 = v5;
        v9 = *a3;
        v10 = *(std::__shared_weak_count **)(v7 + 24);
        v47 = *(_QWORD *)(v7 + 16);
        v48 = v10;
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldxr(p_shared_owners);
          while (__stxr(v12 + 1, p_shared_owners));
        }
        v13 = *(std::__shared_weak_count **)(v7 + 8);
        v45 = *(_QWORD *)v7;
        v46 = v13;
        if (v13)
        {
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        v16 = v9(&v47, &v45);
        v17 = v46;
        if (v46)
        {
          v18 = (unint64_t *)&v46->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v20 = v48;
        if (!v48)
          goto LABEL_19;
        v21 = (unint64_t *)&v48->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
          if (v16)
          {
LABEL_20:
            v44 = *(_OWORD *)(v7 + 16);
            *v8 = 0;
            v8[1] = 0;
            std::shared_ptr<EQKit::OpticalKern::Edge::Path>::operator=[abi:nn180100]((uint64_t)v8, (__int128 *)v7);
            v23 = a1;
            if (v7 != a1)
            {
              while (1)
              {
                v24 = *a3;
                v43 = v44;
                if (*((_QWORD *)&v44 + 1))
                {
                  v25 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
                  do
                    v26 = __ldxr(v25);
                  while (__stxr(v26 + 1, v25));
                }
                v27 = v7 - 16;
                v41 = *(_QWORD *)(v7 - 16);
                v28 = *(std::__shared_weak_count **)(v7 - 8);
                v42 = v28;
                if (v28)
                {
                  v29 = (unint64_t *)&v28->__shared_owners_;
                  do
                    v30 = __ldxr(v29);
                  while (__stxr(v30 + 1, v29));
                }
                v31 = v24((uint64_t *)&v43, &v41);
                v32 = v42;
                if (v42)
                {
                  v33 = (unint64_t *)&v42->__shared_owners_;
                  do
                    v34 = __ldaxr(v33);
                  while (__stlxr(v34 - 1, v33));
                  if (!v34)
                  {
                    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                    std::__shared_weak_count::__release_weak(v32);
                  }
                }
                v35 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
                if (!*((_QWORD *)&v43 + 1))
                  goto LABEL_36;
                v36 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
                do
                  v37 = __ldaxr(v36);
                while (__stlxr(v37 - 1, v36));
                if (!v37)
                {
                  ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                  std::__shared_weak_count::__release_weak(v35);
                  if ((v31 & 1) == 0)
                  {
LABEL_43:
                    v23 = v7;
                    break;
                  }
                }
                else
                {
LABEL_36:
                  if (!v31)
                    goto LABEL_43;
                }
                std::shared_ptr<EQKit::OpticalKern::Edge::Path>::operator=[abi:nn180100](v7, (__int128 *)(v7 - 16));
                v7 -= 16;
                if (v27 == a1)
                {
                  v23 = a1;
                  break;
                }
              }
            }
            std::shared_ptr<EQKit::OpticalKern::Edge::Path>::operator=[abi:nn180100](v23, &v44);
            v38 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
            if (*((_QWORD *)&v44 + 1))
            {
              v39 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
              do
                v40 = __ldaxr(v39);
              while (__stlxr(v40 - 1, v39));
              if (!v40)
              {
                ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                std::__shared_weak_count::__release_weak(v38);
              }
            }
          }
        }
        else
        {
LABEL_19:
          if (v16)
            goto LABEL_20;
        }
        v5 = v8 + 2;
        v7 = (uint64_t)v8;
      }
      while (v8 + 2 != a2);
    }
  }
}

void sub_2179648AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t (*v8)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t *, uint64_t *);
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  char v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;

  if (a1 != a2)
  {
    v4 = a1;
    v5 = a1 + 16;
    if (a1 + 16 != a2)
    {
      do
      {
        v7 = v5;
        v8 = *a3;
        v9 = *(std::__shared_weak_count **)(v4 + 24);
        v46 = *(_QWORD *)(v4 + 16);
        v47 = v9;
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldxr(p_shared_owners);
          while (__stxr(v11 + 1, p_shared_owners));
        }
        v12 = *(std::__shared_weak_count **)(v4 + 8);
        v44 = *(_QWORD *)v4;
        v45 = v12;
        if (v12)
        {
          v13 = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        v15 = v8(&v46, &v44);
        v16 = v45;
        if (v45)
        {
          v17 = (unint64_t *)&v45->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v19 = v47;
        if (!v47)
          goto LABEL_18;
        v20 = (unint64_t *)&v47->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
          if (v15)
          {
LABEL_19:
            v43 = *(_OWORD *)v7;
            *(_QWORD *)v7 = 0;
            *(_QWORD *)(v7 + 8) = 0;
            v22 = v7;
            do
            {
              while (1)
              {
                v23 = v22;
                v22 = v4;
                std::shared_ptr<EQKit::OpticalKern::Edge::Path>::operator=[abi:nn180100](v23, (__int128 *)v4);
                v24 = *a3;
                v42 = v43;
                if (*((_QWORD *)&v43 + 1))
                {
                  v25 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
                  do
                    v26 = __ldxr(v25);
                  while (__stxr(v26 + 1, v25));
                }
                v4 -= 16;
                v40 = *(_QWORD *)(v22 - 16);
                v27 = *(std::__shared_weak_count **)(v22 - 8);
                v41 = v27;
                if (v27)
                {
                  v28 = (unint64_t *)&v27->__shared_owners_;
                  do
                    v29 = __ldxr(v28);
                  while (__stxr(v29 + 1, v28));
                }
                v30 = v24((uint64_t *)&v42, &v40);
                v31 = v41;
                if (v41)
                {
                  v32 = (unint64_t *)&v41->__shared_owners_;
                  do
                    v33 = __ldaxr(v32);
                  while (__stlxr(v33 - 1, v32));
                  if (!v33)
                  {
                    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                    std::__shared_weak_count::__release_weak(v31);
                  }
                }
                v34 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
                if (*((_QWORD *)&v42 + 1))
                {
                  v35 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
                  do
                    v36 = __ldaxr(v35);
                  while (__stlxr(v36 - 1, v35));
                  if (!v36)
                    break;
                }
                if ((v30 & 1) == 0)
                  goto LABEL_38;
              }
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v34);
            }
            while ((v30 & 1) != 0);
LABEL_38:
            std::shared_ptr<EQKit::OpticalKern::Edge::Path>::operator=[abi:nn180100](v22, &v43);
            v37 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
            if (*((_QWORD *)&v43 + 1))
            {
              v38 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
              do
                v39 = __ldaxr(v38);
              while (__stlxr(v39 - 1, v38));
              if (!v39)
              {
                ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                std::__shared_weak_count::__release_weak(v37);
              }
            }
          }
        }
        else
        {
LABEL_18:
          if (v15)
            goto LABEL_19;
        }
        v5 = v7 + 16;
        v4 = v7;
      }
      while (v7 + 16 != a2);
    }
  }
}

void sub_217964B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(uint64_t *a1, _QWORD *a2, _QWORD *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  uint64_t (*v8)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v9;
  std::__shared_weak_count **v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count **v14;
  unint64_t *v15;
  unint64_t v16;
  char v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t (*v24)(uint64_t *, uint64_t *);
  std::__shared_weak_count **v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t result;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  char v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  int v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t (*v72)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  int v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;

  v8 = *a4;
  v10 = (std::__shared_weak_count **)(a2 + 1);
  v9 = (std::__shared_weak_count *)a2[1];
  v105 = *a2;
  v106 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v14 = (std::__shared_weak_count **)(a1 + 1);
  v13 = (std::__shared_weak_count *)a1[1];
  v103 = *a1;
  v104 = v13;
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = v8(&v105, &v103);
  v18 = v104;
  if (v104)
  {
    v19 = (unint64_t *)&v104->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v106;
  if (v106)
  {
    v22 = (unint64_t *)&v106->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = *a4;
  v25 = (std::__shared_weak_count **)(a3 + 1);
  if ((v17 & 1) != 0)
  {
    v26 = *v25;
    v93 = *a3;
    v94 = v26;
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    v29 = (std::__shared_weak_count *)a2[1];
    v91 = *a2;
    v92 = v29;
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    v32 = v24(&v93, &v91);
    v33 = v92;
    if (v92)
    {
      v34 = (unint64_t *)&v92->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v36 = v94;
    if (v94)
    {
      v37 = (unint64_t *)&v94->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v39 = *a1;
    if (v32)
    {
      *a1 = *a3;
      *a3 = v39;
      result = 1;
LABEL_87:
      v10 = (std::__shared_weak_count **)(a3 + 1);
      goto LABEL_88;
    }
    *a1 = *a2;
    *a2 = v39;
    v71 = (std::__shared_weak_count *)a1[1];
    a1[1] = a2[1];
    a2[1] = v71;
    v72 = *a4;
    v73 = (std::__shared_weak_count *)a3[1];
    v89 = *a3;
    v90 = v73;
    if (v73)
    {
      v74 = (unint64_t *)&v73->__shared_owners_;
      do
        v75 = __ldxr(v74);
      while (__stxr(v75 + 1, v74));
      v71 = *v10;
    }
    v87 = *a2;
    v88 = v71;
    if (v71)
    {
      v76 = (unint64_t *)&v71->__shared_owners_;
      do
        v77 = __ldxr(v76);
      while (__stxr(v77 + 1, v76));
    }
    v78 = v72(&v89, &v87);
    v79 = v88;
    if (v88)
    {
      v80 = (unint64_t *)&v88->__shared_owners_;
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    v82 = v90;
    if (!v90)
      goto LABEL_85;
    v83 = (unint64_t *)&v90->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
      if (v78)
        goto LABEL_86;
    }
    else
    {
LABEL_85:
      if (v78)
      {
LABEL_86:
        v85 = *a2;
        *a2 = *a3;
        *a3 = v85;
        result = 2;
        v14 = v10;
        goto LABEL_87;
      }
    }
    return 1;
  }
  v41 = *v25;
  v101 = *a3;
  v102 = v41;
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  v44 = (std::__shared_weak_count *)a2[1];
  v99 = *a2;
  v100 = v44;
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  v47 = v24(&v101, &v99);
  v48 = v100;
  if (v100)
  {
    v49 = (unint64_t *)&v100->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = v102;
  if (!v102)
    goto LABEL_51;
  v52 = (unint64_t *)&v102->__shared_owners_;
  do
    v53 = __ldaxr(v52);
  while (__stlxr(v53 - 1, v52));
  if (v53)
  {
LABEL_51:
    if ((v47 & 1) != 0)
      goto LABEL_52;
    return 0;
  }
  ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
  std::__shared_weak_count::__release_weak(v51);
  if ((v47 & 1) == 0)
    return 0;
LABEL_52:
  v54 = *a2;
  *a2 = *a3;
  *a3 = v54;
  v55 = a2[1];
  a2[1] = a3[1];
  a3[1] = v55;
  v56 = *a4;
  v57 = (std::__shared_weak_count *)a2[1];
  v97 = *a2;
  v98 = v57;
  if (v57)
  {
    v58 = (unint64_t *)&v57->__shared_owners_;
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
  }
  v60 = (std::__shared_weak_count *)a1[1];
  v95 = *a1;
  v96 = v60;
  if (v60)
  {
    v61 = (unint64_t *)&v60->__shared_owners_;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
  }
  v63 = v56(&v97, &v95);
  v64 = v96;
  if (v96)
  {
    v65 = (unint64_t *)&v96->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = v98;
  if (!v98)
    goto LABEL_67;
  v68 = (unint64_t *)&v98->__shared_owners_;
  do
    v69 = __ldaxr(v68);
  while (__stlxr(v69 - 1, v68));
  if (!v69)
  {
    ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
    std::__shared_weak_count::__release_weak(v67);
    if (v63)
      goto LABEL_68;
  }
  else
  {
LABEL_67:
    if (v63)
    {
LABEL_68:
      v70 = *a1;
      *a1 = *a2;
      *a2 = v70;
      result = 2;
LABEL_88:
      v86 = *v14;
      *v14 = *v10;
      *v10 = v86;
      return result;
    }
  }
  return 1;
}

void sub_2179650A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

__int128 *std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const> *,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>)>(__int128 *a1, __int128 *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  __int128 *v4;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t *, uint64_t *);
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  char v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 *v21;
  uint64_t (*v22)(uint64_t *, uint64_t *);
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  char v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 *v35;
  __int128 *v36;
  uint64_t (*v37)(uint64_t *, uint64_t *);
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  char v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t (*v50)(uint64_t *, uint64_t *);
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  char v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(uint64_t *, uint64_t *);
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  int v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t (*v78)(uint64_t *, uint64_t *);
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  char v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v95;
  std::__shared_weak_count *v96;
  __int128 v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  __int128 v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  __int128 v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  __int128 v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  __int128 v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  __int128 v114;

  v4 = a2;
  v6 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  *(_QWORD *)&v114 = *(_QWORD *)a1;
  v7 = v114;
  *((_QWORD *)&v114 + 1) = v6;
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  v8 = *a3;
  v112 = v7;
  v113 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)a2 - 1);
  v110 = *((_QWORD *)a2 - 2);
  v111 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = v8(&v112, &v110);
  v15 = v111;
  if (v111)
  {
    v16 = (unint64_t *)&v111->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v113;
  if (!v113)
    goto LABEL_16;
  v19 = (unint64_t *)&v113->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_16:
    if ((v14 & 1) != 0)
      goto LABEL_17;
LABEL_37:
    v21 = a1 + 1;
    if (a1 + 1 >= v4)
      goto LABEL_60;
    v35 = a1;
    while (1)
    {
      v36 = v21;
      v37 = *a3;
      v106 = v114;
      if (*((_QWORD *)&v114 + 1))
      {
        v38 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      v40 = (std::__shared_weak_count *)*((_QWORD *)v35 + 3);
      v104 = *(_QWORD *)v21;
      v105 = v40;
      if (v40)
      {
        v41 = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      v43 = v37((uint64_t *)&v106, &v104);
      v44 = v105;
      if (v105)
      {
        v45 = (unint64_t *)&v105->__shared_owners_;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      v47 = (std::__shared_weak_count *)*((_QWORD *)&v106 + 1);
      if (!*((_QWORD *)&v106 + 1))
        goto LABEL_54;
      v48 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
        if ((v43 & 1) != 0)
        {
LABEL_59:
          v21 = v36;
          goto LABEL_60;
        }
      }
      else
      {
LABEL_54:
        if ((v43 & 1) != 0)
          goto LABEL_59;
      }
      v21 = v36 + 1;
      v35 = v36;
      if (v36 + 1 >= v4)
        goto LABEL_60;
    }
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if ((v14 & 1) == 0)
    goto LABEL_37;
LABEL_17:
  v21 = a1;
  do
  {
    v22 = *a3;
    v109 = v114;
    if (*((_QWORD *)&v114 + 1))
    {
      v23 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    v25 = (std::__shared_weak_count *)*((_QWORD *)v21 + 3);
    v107 = *((_QWORD *)v21 + 2);
    v108 = v25;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    v28 = v22((uint64_t *)&v109, &v107);
    v29 = v108;
    if (v108)
    {
      v30 = (unint64_t *)&v108->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v109 + 1);
    if (*((_QWORD *)&v109 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    ++v21;
  }
  while ((v28 & 1) == 0);
LABEL_60:
  if (v21 < v4)
  {
    do
    {
      v50 = *a3;
      v103 = v114;
      if (*((_QWORD *)&v114 + 1))
      {
        v51 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
      }
      v53 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
      v101 = *((_QWORD *)v4 - 2);
      v102 = v53;
      if (v53)
      {
        v54 = (unint64_t *)&v53->__shared_owners_;
        do
          v55 = __ldxr(v54);
        while (__stxr(v55 + 1, v54));
      }
      v56 = v50((uint64_t *)&v103, &v101);
      v57 = v102;
      if (v102)
      {
        v58 = (unint64_t *)&v102->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      v60 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
      if (*((_QWORD *)&v103 + 1))
      {
        v61 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      --v4;
    }
    while ((v56 & 1) != 0);
  }
  while (v21 < v4)
  {
    v63 = *(_QWORD *)v21;
    *(_QWORD *)v21 = *(_QWORD *)v4;
    *(_QWORD *)v4 = v63;
    v64 = *((_QWORD *)v21 + 1);
    *((_QWORD *)v21 + 1) = *((_QWORD *)v4 + 1);
    *((_QWORD *)v4 + 1) = v64;
    do
    {
      v65 = *a3;
      v100 = v114;
      if (*((_QWORD *)&v114 + 1))
      {
        v66 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
        do
          v67 = __ldxr(v66);
        while (__stxr(v67 + 1, v66));
      }
      v68 = (std::__shared_weak_count *)*((_QWORD *)v21 + 3);
      v98 = *((_QWORD *)v21 + 2);
      v99 = v68;
      if (v68)
      {
        v69 = (unint64_t *)&v68->__shared_owners_;
        do
          v70 = __ldxr(v69);
        while (__stxr(v70 + 1, v69));
      }
      v71 = v65((uint64_t *)&v100, &v98);
      v72 = v99;
      if (v99)
      {
        v73 = (unint64_t *)&v99->__shared_owners_;
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      v75 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
      if (*((_QWORD *)&v100 + 1))
      {
        v76 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      ++v21;
    }
    while (!v71);
    do
    {
      v78 = *a3;
      v97 = v114;
      if (*((_QWORD *)&v114 + 1))
      {
        v79 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
        do
          v80 = __ldxr(v79);
        while (__stxr(v80 + 1, v79));
      }
      v95 = *((_QWORD *)v4 - 2);
      v81 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
      v96 = v81;
      if (v81)
      {
        v82 = (unint64_t *)&v81->__shared_owners_;
        do
          v83 = __ldxr(v82);
        while (__stxr(v83 + 1, v82));
      }
      v84 = v78((uint64_t *)&v97, &v95);
      v85 = v96;
      if (v96)
      {
        v86 = (unint64_t *)&v96->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      v88 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
      if (*((_QWORD *)&v97 + 1))
      {
        v89 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      --v4;
    }
    while ((v84 & 1) != 0);
  }
  if (v21 - 1 != a1)
    std::shared_ptr<EQKit::OpticalKern::Edge::Path>::operator=[abi:nn180100]((uint64_t)a1, v21 - 1);
  std::shared_ptr<EQKit::OpticalKern::Edge::Path>::operator=[abi:nn180100]((uint64_t)(v21 - 1), &v114);
  v91 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
  if (*((_QWORD *)&v114 + 1))
  {
    v92 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  return v21;
}

void sub_2179656EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100](v1 - 112);
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100](v1 - 96);
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100](v1 - 80);
  _Unwind_Resume(a1);
}

__int128 *std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const> *,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>)>(uint64_t a1, __int128 *a2, uint64_t (**a3)(uint64_t *, __int128 *))
{
  unint64_t v6;
  __int128 *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t *, __int128 *);
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t *, __int128 *);
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  char v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t (*v36)(uint64_t *, __int128 *);
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  char v50;
  __int128 *v51;
  __int128 *v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t *, __int128 *);
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  char v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(uint64_t *, __int128 *);
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  int v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  __int128 v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  __int128 v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  __int128 v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  __int128 v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  __int128 v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  __int128 v102;

  v102 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = a1;
  do
  {
    while (1)
    {
      v7 = (__int128 *)v6;
      v9 = *(_QWORD *)(v6 + 16);
      v8 = *(std::__shared_weak_count **)(v6 + 24);
      v6 += 16;
      v10 = *a3;
      v100 = v9;
      v101 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      v99 = v102;
      if (*((_QWORD *)&v102 + 1))
      {
        v13 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v15 = v10(&v100, &v99);
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
      if (*((_QWORD *)&v99 + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v19 = v101;
      if (v101)
      {
        v20 = (unint64_t *)&v101->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
          break;
      }
      if ((v15 & 1) == 0)
        goto LABEL_20;
    }
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  while ((v15 & 1) != 0);
LABEL_20:
  if (v7 == (__int128 *)a1)
  {
    if (v6 < (unint64_t)a2)
    {
      do
      {
        v36 = *a3;
        v38 = *((_QWORD *)a2 - 2);
        v37 = (std::__shared_weak_count *)*((_QWORD *)a2-- - 1);
        v97 = v38;
        v98 = v37;
        if (v37)
        {
          v39 = (unint64_t *)&v37->__shared_owners_;
          do
            v40 = __ldxr(v39);
          while (__stxr(v40 + 1, v39));
        }
        v96 = v102;
        if (*((_QWORD *)&v102 + 1))
        {
          v41 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
          do
            v42 = __ldxr(v41);
          while (__stxr(v42 + 1, v41));
        }
        v43 = v36(&v97, &v96);
        v44 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
        if (*((_QWORD *)&v96 + 1))
        {
          v45 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        v47 = v98;
        if (v98)
        {
          v48 = (unint64_t *)&v98->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        if (v6 >= (unint64_t)a2)
          v50 = 1;
        else
          v50 = v43;
      }
      while ((v50 & 1) == 0);
    }
  }
  else
  {
    do
    {
      while (1)
      {
        v23 = *((_QWORD *)a2 - 2);
        v22 = (std::__shared_weak_count *)*((_QWORD *)a2-- - 1);
        v24 = *a3;
        v94 = v23;
        v95 = v22;
        if (v22)
        {
          v25 = (unint64_t *)&v22->__shared_owners_;
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
        }
        v93 = v102;
        if (*((_QWORD *)&v102 + 1))
        {
          v27 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        v29 = v24(&v94, &v93);
        v30 = (std::__shared_weak_count *)*((_QWORD *)&v93 + 1);
        if (*((_QWORD *)&v93 + 1))
        {
          v31 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        v33 = v95;
        if (v95)
        {
          v34 = (unint64_t *)&v95->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
            break;
        }
        if ((v29 & 1) != 0)
          goto LABEL_61;
      }
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
    while ((v29 & 1) == 0);
  }
LABEL_61:
  if (v6 < (unint64_t)a2)
  {
    v51 = (__int128 *)v6;
    v52 = a2;
    do
    {
      v53 = *(_QWORD *)v51;
      *(_QWORD *)v51 = *(_QWORD *)v52;
      *(_QWORD *)v52 = v53;
      v54 = *((_QWORD *)v51 + 1);
      *((_QWORD *)v51 + 1) = *((_QWORD *)v52 + 1);
      *((_QWORD *)v52 + 1) = v54;
      do
      {
        while (1)
        {
          v7 = v51;
          v56 = *((_QWORD *)v51 + 2);
          v55 = (std::__shared_weak_count *)*((_QWORD *)v51++ + 3);
          v57 = *a3;
          v91 = v56;
          v92 = v55;
          if (v55)
          {
            v58 = (unint64_t *)&v55->__shared_owners_;
            do
              v59 = __ldxr(v58);
            while (__stxr(v59 + 1, v58));
          }
          v90 = v102;
          if (*((_QWORD *)&v102 + 1))
          {
            v60 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
            do
              v61 = __ldxr(v60);
            while (__stxr(v61 + 1, v60));
          }
          v62 = v57(&v91, &v90);
          v63 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
          if (*((_QWORD *)&v90 + 1))
          {
            v64 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
            do
              v65 = __ldaxr(v64);
            while (__stlxr(v65 - 1, v64));
            if (!v65)
            {
              ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
              std::__shared_weak_count::__release_weak(v63);
            }
          }
          v66 = v92;
          if (v92)
          {
            v67 = (unint64_t *)&v92->__shared_owners_;
            do
              v68 = __ldaxr(v67);
            while (__stlxr(v68 - 1, v67));
            if (!v68)
              break;
          }
          if ((v62 & 1) == 0)
            goto LABEL_84;
        }
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
      while ((v62 & 1) != 0);
      do
      {
        while (1)
        {
LABEL_84:
          v69 = *((_QWORD *)v52-- - 2);
          v70 = *a3;
          v88 = v69;
          v71 = (std::__shared_weak_count *)*((_QWORD *)v52 + 1);
          v89 = v71;
          if (v71)
          {
            v72 = (unint64_t *)&v71->__shared_owners_;
            do
              v73 = __ldxr(v72);
            while (__stxr(v73 + 1, v72));
          }
          v87 = v102;
          if (*((_QWORD *)&v102 + 1))
          {
            v74 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
            do
              v75 = __ldxr(v74);
            while (__stxr(v75 + 1, v74));
          }
          v76 = v70(&v88, &v87);
          v77 = (std::__shared_weak_count *)*((_QWORD *)&v87 + 1);
          if (*((_QWORD *)&v87 + 1))
          {
            v78 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
            do
              v79 = __ldaxr(v78);
            while (__stlxr(v79 - 1, v78));
            if (!v79)
            {
              ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
              std::__shared_weak_count::__release_weak(v77);
            }
          }
          v80 = v89;
          if (!v89)
            break;
          v81 = (unint64_t *)&v89->__shared_owners_;
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 - 1, v81));
          if (v82)
            break;
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
          if (v76)
            goto LABEL_100;
        }
      }
      while (!v76);
LABEL_100:
      ;
    }
    while (v51 < v52);
  }
  if (v7 != (__int128 *)a1)
    std::shared_ptr<EQKit::OpticalKern::Edge::Path>::operator=[abi:nn180100](a1, v7);
  std::shared_ptr<EQKit::OpticalKern::Edge::Path>::operator=[abi:nn180100]((uint64_t)v7, &v102);
  v83 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
  if (*((_QWORD *)&v102 + 1))
  {
    v84 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  return v7;
}

void sub_217965C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v15;
  va_list va;
  uint64_t v17;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v15 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100](v13 - 96);
  _Unwind_Resume(a1);
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t (*v8)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  uint64_t (*v27)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  int v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t *, uint64_t *);
  unint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  int v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;

  v6 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *a3;
      v9 = (std::__shared_weak_count *)*(a2 - 1);
      v69 = *(a2 - 2);
      v70 = v9;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      v12 = a1[1];
      v67 = *a1;
      v68 = (std::__shared_weak_count *)v12;
      if (v12)
      {
        v13 = (unint64_t *)(v12 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v15 = v8(&v69, &v67);
      v16 = v68;
      if (v68)
      {
        v17 = (unint64_t *)&v68->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v19 = v70;
      if (v70)
      {
        v20 = (unint64_t *)&v70->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      if (v15)
      {
        v22 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v22;
        v23 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v23;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      v24 = (uint64_t)(a1 + 4);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(a1, a1 + 2, a1 + 4, a3);
      v25 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v26 = 0;
      break;
  }
  while (1)
  {
    v27 = *a3;
    v28 = (std::__shared_weak_count *)v25[1];
    v65 = *v25;
    v66 = v28;
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    v31 = *(std::__shared_weak_count **)(v24 + 8);
    v63 = *(_QWORD *)v24;
    v64 = v31;
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    v34 = v27(&v65, &v63);
    v35 = v64;
    if (v64)
    {
      v36 = (unint64_t *)&v64->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v38 = v66;
    if (v66)
    {
      v39 = (unint64_t *)&v66->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
        break;
    }
    if (v34)
      goto LABEL_39;
LABEL_69:
    v24 = (uint64_t)v25;
    v25 += 2;
    if (v25 == a2)
      return 1;
  }
  ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
  std::__shared_weak_count::__release_weak(v38);
  if (!v34)
    goto LABEL_69;
LABEL_39:
  v62 = *(_OWORD *)v25;
  *v25 = 0;
  v25[1] = 0;
  std::shared_ptr<EQKit::OpticalKern::Edge::Path>::operator=[abi:nn180100]((uint64_t)v25, (__int128 *)v24);
  v41 = (uint64_t)a1;
  if ((uint64_t *)v24 != a1)
  {
    while (1)
    {
      v42 = *a3;
      v61 = v62;
      if (*((_QWORD *)&v62 + 1))
      {
        v43 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      v45 = (uint64_t *)(v24 - 16);
      v59 = *(_QWORD *)(v24 - 16);
      v46 = *(std::__shared_weak_count **)(v24 - 8);
      v60 = v46;
      if (v46)
      {
        v47 = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      v49 = v42((uint64_t *)&v61, &v59);
      v50 = v60;
      if (v60)
      {
        v51 = (unint64_t *)&v60->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      v53 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
      if (!*((_QWORD *)&v61 + 1))
        goto LABEL_55;
      v54 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
        if ((v49 & 1) == 0)
        {
LABEL_62:
          v41 = v24;
          break;
        }
      }
      else
      {
LABEL_55:
        if (!v49)
          goto LABEL_62;
      }
      std::shared_ptr<EQKit::OpticalKern::Edge::Path>::operator=[abi:nn180100](v24, (__int128 *)(v24 - 16));
      v24 -= 16;
      if (v45 == a1)
      {
        v41 = (uint64_t)a1;
        break;
      }
    }
  }
  std::shared_ptr<EQKit::OpticalKern::Edge::Path>::operator=[abi:nn180100](v41, &v62);
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
  if (*((_QWORD *)&v62 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (++v26 != 8)
    goto LABEL_69;
  return v25 + 2 == a2;
}

void sub_217966140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  uint64_t (*v10)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  int v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(a1, a2, a3, a5);
  v10 = *a5;
  v11 = (std::__shared_weak_count *)a4[1];
  v68 = *a4;
  v69 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = (std::__shared_weak_count *)a3[1];
  v66 = *a3;
  v67 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = v10(&v68, &v66);
  v18 = v67;
  if (v67)
  {
    v19 = (unint64_t *)&v67->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v69;
  if (!v69)
    goto LABEL_16;
  v22 = (unint64_t *)&v69->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
    if (!v17)
      return;
  }
  else
  {
LABEL_16:
    if (!v17)
      return;
  }
  v24 = *a3;
  *a3 = *a4;
  *a4 = v24;
  v25 = a3[1];
  a3[1] = a4[1];
  a4[1] = v25;
  v26 = *a5;
  v27 = (std::__shared_weak_count *)a3[1];
  v64 = *a3;
  v65 = v27;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = (std::__shared_weak_count *)a2[1];
  v62 = *a2;
  v63 = v30;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v33 = v26(&v64, &v62);
  v34 = v63;
  if (v63)
  {
    v35 = (unint64_t *)&v63->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v65;
  if (!v65)
    goto LABEL_32;
  v38 = (unint64_t *)&v65->__shared_owners_;
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
    if (!v33)
      return;
  }
  else
  {
LABEL_32:
    if (!v33)
      return;
  }
  v40 = *a2;
  *a2 = *a3;
  *a3 = v40;
  v41 = a2[1];
  a2[1] = a3[1];
  a3[1] = v41;
  v42 = *a5;
  v43 = (std::__shared_weak_count *)a2[1];
  v60 = *a2;
  v61 = v43;
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  v46 = a1[1];
  v58 = *a1;
  v59 = (std::__shared_weak_count *)v46;
  if (v46)
  {
    v47 = (unint64_t *)(v46 + 8);
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  v49 = v42(&v60, &v58);
  v50 = v59;
  if (v59)
  {
    v51 = (unint64_t *)&v59->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = v61;
  if (v61)
  {
    v54 = (unint64_t *)&v61->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if (v49)
  {
    v56 = *a1;
    *a1 = *a2;
    *a2 = v56;
    v57 = a1[1];
    a1[1] = a2[1];
    a2[1] = v57;
  }
}

void sub_2179664A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  uint64_t (*v12)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t *, uint64_t *);
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t *, uint64_t *);
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t *, uint64_t *);
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  int v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;

  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(a1, a2, a3, a4, a6);
  v12 = *a6;
  v13 = (std::__shared_weak_count *)a5[1];
  v90 = *a5;
  v91 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v16 = a4[1];
  v88 = *a4;
  v89 = (std::__shared_weak_count *)v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = v12(&v90, &v88);
  v20 = v89;
  if (v89)
  {
    v21 = (unint64_t *)&v89->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v91;
  if (!v91)
    goto LABEL_16;
  v24 = (unint64_t *)&v91->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    if (!v19)
      return;
  }
  else
  {
LABEL_16:
    if (!v19)
      return;
  }
  v26 = *a4;
  *a4 = *a5;
  *a5 = v26;
  v27 = a4[1];
  a4[1] = a5[1];
  a5[1] = v27;
  v28 = *a6;
  v29 = a4[1];
  v86 = *a4;
  v87 = (std::__shared_weak_count *)v29;
  if (v29)
  {
    v30 = (unint64_t *)(v29 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = a3[1];
  v84 = *a3;
  v85 = (std::__shared_weak_count *)v32;
  if (v32)
  {
    v33 = (unint64_t *)(v32 + 8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  v35 = v28(&v86, &v84);
  v36 = v85;
  if (v85)
  {
    v37 = (unint64_t *)&v85->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = v87;
  if (!v87)
    goto LABEL_32;
  v40 = (unint64_t *)&v87->__shared_owners_;
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 - 1, v40));
  if (!v41)
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
    if (!v35)
      return;
  }
  else
  {
LABEL_32:
    if (!v35)
      return;
  }
  v42 = *a3;
  *a3 = *a4;
  *a4 = v42;
  v43 = a3[1];
  a3[1] = a4[1];
  a4[1] = v43;
  v44 = *a6;
  v45 = a3[1];
  v82 = *a3;
  v83 = (std::__shared_weak_count *)v45;
  if (v45)
  {
    v46 = (unint64_t *)(v45 + 8);
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  v48 = a2[1];
  v80 = *a2;
  v81 = (std::__shared_weak_count *)v48;
  if (v48)
  {
    v49 = (unint64_t *)(v48 + 8);
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
  v51 = v44(&v82, &v80);
  v52 = v81;
  if (v81)
  {
    v53 = (unint64_t *)&v81->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = v83;
  if (!v83)
    goto LABEL_48;
  v56 = (unint64_t *)&v83->__shared_owners_;
  do
    v57 = __ldaxr(v56);
  while (__stlxr(v57 - 1, v56));
  if (!v57)
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
    if (!v51)
      return;
  }
  else
  {
LABEL_48:
    if (!v51)
      return;
  }
  v58 = *a2;
  *a2 = *a3;
  *a3 = v58;
  v59 = a2[1];
  a2[1] = a3[1];
  a3[1] = v59;
  v60 = *a6;
  v61 = a2[1];
  v78 = *a2;
  v79 = (std::__shared_weak_count *)v61;
  if (v61)
  {
    v62 = (unint64_t *)(v61 + 8);
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }
  v64 = a1[1];
  v76 = *a1;
  v77 = (std::__shared_weak_count *)v64;
  if (v64)
  {
    v65 = (unint64_t *)(v64 + 8);
    do
      v66 = __ldxr(v65);
    while (__stxr(v66 + 1, v65));
  }
  v67 = v60(&v78, &v76);
  v68 = v77;
  if (v77)
  {
    v69 = (unint64_t *)&v77->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = v79;
  if (v79)
  {
    v72 = (unint64_t *)&v79->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  if (v67)
  {
    v74 = *a1;
    *a1 = *a2;
    *a2 = v74;
    v75 = a1[1];
    a1[1] = a2[1];
    a2[1] = v75;
  }
}

void sub_2179668F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t *std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, __int128 *))
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t (*v15)(uint64_t *, __int128 *);
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;

  if (a1 != a2)
  {
    v6 = (uint64_t)a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if ((uint64_t *)v6 != a3)
    {
      v14 = (uint64_t *)v6;
      while (1)
      {
        v15 = *a4;
        v16 = (std::__shared_weak_count *)v14[1];
        v36 = *v14;
        v37 = v16;
        if (v16)
        {
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldxr(p_shared_owners);
          while (__stxr(v18 + 1, p_shared_owners));
        }
        v19 = a1[1];
        v34 = *a1;
        v35 = (std::__shared_weak_count *)v19;
        if (v19)
        {
          v20 = (unint64_t *)(v19 + 8);
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        v22 = v15(&v36, (__int128 *)&v34);
        v23 = v35;
        if (v35)
        {
          v24 = (unint64_t *)&v35->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v26 = v37;
        if (v37)
        {
          v27 = (unint64_t *)&v37->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
            break;
        }
        if (v22)
          goto LABEL_23;
LABEL_24:
        v14 += 2;
        if (v14 == a3)
        {
          v13 = (uint64_t)a3;
          goto LABEL_28;
        }
      }
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
      if (!v22)
        goto LABEL_24;
LABEL_23:
      v29 = *v14;
      *v14 = *a1;
      *a1 = v29;
      v30 = v14[1];
      v14[1] = a1[1];
      a1[1] = v30;
      std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>((uint64_t)a1, a4, v9, a1);
      goto LABEL_24;
    }
LABEL_28:
    if (v8 >= 17)
    {
      v31 = (unint64_t)v8 >> 4;
      do
      {
        std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>((uint64_t)a1, v6, (uint64_t (**)(__int128 *, uint64_t *))a4, v31);
        v6 -= 16;
      }
      while (v31-- > 2);
    }
    return (uint64_t *)v13;
  }
  return a3;
}

void sub_217966B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(uint64_t a1, uint64_t (**a2)(uint64_t *, __int128 *), uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t *, __int128 *);
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  int v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t (*v26)(uint64_t *, uint64_t *);
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  char v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(__int128 *, uint64_t *);
  __int128 v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t (*v57)(uint64_t *, __int128 *);
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  int v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  __int128 v87;

  v4 = a3 - 2;
  if (a3 < 2)
    return;
  v5 = a4;
  v73 = v4 >> 1;
  if ((uint64_t)(v4 >> 1) < ((uint64_t)a4 - a1) >> 4)
    return;
  v9 = ((uint64_t)a4 - a1) >> 3;
  v10 = v9 + 1;
  v11 = a1 + 16 * (v9 + 1);
  v12 = v9 + 2;
  if (v9 + 2 >= a3)
    goto LABEL_21;
  v13 = *a2;
  v87 = *(_OWORD *)v11;
  if (*((_QWORD *)&v87 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = *(std::__shared_weak_count **)(v11 + 24);
  v85 = *(_QWORD *)(v11 + 16);
  v86 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  v19 = v13((uint64_t *)&v87, (__int128 *)&v85);
  v20 = v86;
  if (v86)
  {
    v21 = (unint64_t *)&v86->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (std::__shared_weak_count *)*((_QWORD *)&v87 + 1);
  if (*((_QWORD *)&v87 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      if ((v19 & 1) == 0)
        goto LABEL_21;
      goto LABEL_20;
    }
  }
  if (v19)
  {
LABEL_20:
    v11 += 16;
    v10 = v12;
  }
LABEL_21:
  v26 = (uint64_t (*)(uint64_t *, uint64_t *))*a2;
  v27 = *(std::__shared_weak_count **)(v11 + 8);
  v83 = *(_QWORD *)v11;
  v84 = v27;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = (std::__shared_weak_count *)v5[1];
  v81 = *v5;
  v82 = v30;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v33 = v26(&v83, &v81);
  v34 = v82;
  if (v82)
  {
    v35 = (unint64_t *)&v82->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v84;
  if (!v84)
    goto LABEL_36;
  v38 = (unint64_t *)&v84->__shared_owners_;
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
    if ((v33 & 1) != 0)
      return;
  }
  else
  {
LABEL_36:
    if ((v33 & 1) != 0)
      return;
  }
  v80 = *(_OWORD *)v5;
  *v5 = 0;
  v5[1] = 0;
  do
  {
    v40 = v11;
    std::shared_ptr<EQKit::OpticalKern::Edge::Path>::operator=[abi:nn180100]((uint64_t)v5, (__int128 *)v11);
    if (v73 < v10)
      break;
    v41 = 2 * v10;
    v10 = (2 * v10) | 1;
    v11 = a1 + 16 * v10;
    v42 = v41 + 2;
    if (v41 + 2 < a3)
    {
      v43 = (uint64_t (*)(__int128 *, uint64_t *))*a2;
      v44 = *(_OWORD *)v11;
      v79 = v44;
      if (*((_QWORD *)&v44 + 1))
      {
        v45 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
      }
      v47 = *(std::__shared_weak_count **)(v11 + 24);
      v77 = *(_QWORD *)(v11 + 16);
      v78 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
      v50 = v43(&v79, &v77);
      v51 = v78;
      if (v78)
      {
        v52 = (unint64_t *)&v78->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v54 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
      if (*((_QWORD *)&v79 + 1))
      {
        v55 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
          if ((v50 & 1) == 0)
            goto LABEL_57;
LABEL_56:
          v11 += 16;
          v10 = v42;
          goto LABEL_57;
        }
      }
      if (v50)
        goto LABEL_56;
    }
LABEL_57:
    v57 = *a2;
    v58 = *(std::__shared_weak_count **)(v11 + 8);
    v75 = *(_QWORD *)v11;
    v76 = v58;
    if (v58)
    {
      v59 = (unint64_t *)&v58->__shared_owners_;
      do
        v60 = __ldxr(v59);
      while (__stxr(v60 + 1, v59));
    }
    v74 = v80;
    if (*((_QWORD *)&v80 + 1))
    {
      v61 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
    }
    v63 = v57(&v75, &v74);
    v64 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
    if (*((_QWORD *)&v74 + 1))
    {
      v65 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    v67 = v76;
    if (v76)
    {
      v68 = (unint64_t *)&v76->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    v5 = (uint64_t *)v40;
  }
  while (!v63);
  std::shared_ptr<EQKit::OpticalKern::Edge::Path>::operator=[abi:nn180100](v40, &v80);
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
  if (*((_QWORD *)&v80 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
}

void sub_217966FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100](v17 - 112);
  _Unwind_Resume(a1);
}

void std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, uint64_t *), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;

  if (a4 >= 2)
  {
    v13 = *(_OWORD *)a1;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v7 = std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(a1, a3, a4);
    v8 = v7;
    v9 = (__int128 *)(a2 - 16);
    if ((__int128 *)v7 == v9)
    {
      std::shared_ptr<EQKit::OpticalKern::Edge::Path>::operator=[abi:nn180100](v7, &v13);
    }
    else
    {
      std::shared_ptr<EQKit::OpticalKern::Edge::Path>::operator=[abi:nn180100](v7, v9);
      std::shared_ptr<EQKit::OpticalKern::Edge::Path>::operator=[abi:nn180100]((uint64_t)v9, &v13);
      std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(a1, v8 + 16, a3, (v8 + 16 - a1) >> 4);
    }
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
    if (*((_QWORD *)&v13 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_217967110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(uint64_t a1, uint64_t (**a2)(__int128 *, uint64_t *), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(__int128 *, uint64_t *);
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  int v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v27;
  std::__shared_weak_count *v28;
  __int128 v29;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = a1;
    a1 += 16 * v6 + 16;
    v10 = 2 * v6;
    v6 = (2 * v6) | 1;
    v11 = v10 + 2;
    if (v10 + 2 >= a3)
      goto LABEL_22;
    v12 = *a2;
    v13 = *(_OWORD *)a1;
    v29 = v13;
    if (*((_QWORD *)&v13 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v16 = *(std::__shared_weak_count **)(a1 + 24);
    v27 = *(_QWORD *)(a1 + 16);
    v28 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    v19 = v12(&v29, &v27);
    v20 = v28;
    if (v28)
    {
      v21 = (unint64_t *)&v28->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
    if (!*((_QWORD *)&v29 + 1))
      goto LABEL_20;
    v24 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (v25)
    {
LABEL_20:
      if (!v19)
        goto LABEL_22;
LABEL_21:
      a1 += 16;
      v6 = v11;
      goto LABEL_22;
    }
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    if ((v19 & 1) != 0)
      goto LABEL_21;
LABEL_22:
    std::shared_ptr<EQKit::OpticalKern::Edge::Path>::operator=[abi:nn180100](v9, (__int128 *)a1);
  }
  while (v6 <= v8);
  return a1;
}

void sub_2179672A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>,std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>),std::shared_ptr<EQKit::OpticalKern::Edge::Segment const>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, uint64_t *), uint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  __int128 *v8;
  uint64_t (*v9)(__int128 *, uint64_t *);
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  int v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(__int128 *, uint64_t *);
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  char v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  __int128 v46;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v7 = v4 >> 1;
    v8 = (__int128 *)(a1 + 16 * (v4 >> 1));
    v9 = *a3;
    v10 = *v8;
    v46 = v10;
    if (*((_QWORD *)&v10 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v13 = *(std::__shared_weak_count **)(a2 - 8);
    v14 = a2 - 16;
    v44 = *(_QWORD *)(a2 - 16);
    v45 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    v17 = v9(&v46, &v44);
    v18 = v45;
    if (v45)
    {
      v19 = (unint64_t *)&v45->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
    if (!*((_QWORD *)&v46 + 1))
      goto LABEL_17;
    v22 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      if (!v17)
        return;
    }
    else
    {
LABEL_17:
      if (!v17)
        return;
    }
    v43 = *(_OWORD *)v14;
    *(_QWORD *)v14 = 0;
    *(_QWORD *)(v14 + 8) = 0;
    do
    {
      v24 = (uint64_t)v8;
      std::shared_ptr<EQKit::OpticalKern::Edge::Path>::operator=[abi:nn180100](v14, v8);
      if (!v7)
        break;
      v7 = (v7 - 1) >> 1;
      v8 = (__int128 *)(a1 + 16 * v7);
      v25 = *a3;
      v26 = *v8;
      v42 = v26;
      if (*((_QWORD *)&v26 + 1))
      {
        v27 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      v41 = v43;
      if (*((_QWORD *)&v43 + 1))
      {
        v29 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v31 = v25(&v42, (uint64_t *)&v41);
      v32 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
      if (*((_QWORD *)&v41 + 1))
      {
        v33 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v35 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
      if (*((_QWORD *)&v42 + 1))
      {
        v36 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v14 = v24;
    }
    while ((v31 & 1) != 0);
    std::shared_ptr<EQKit::OpticalKern::Edge::Path>::operator=[abi:nn180100](v24, &v43);
    v38 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
    if (*((_QWORD *)&v43 + 1))
    {
      v39 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
  }
}

void sub_21796752C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void EQKit::OpticalKern::Spec::Entry::~Entry(EQKit::OpticalKern::Spec::Entry *this)
{
  const void *v2;
  const void *v3;

  v2 = (const void *)*((_QWORD *)this + 4);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 3);
  if (v3)
    CFRelease(v3);
  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100]((uint64_t)this + 56);
}

void sub_2179675A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100](v1 + 56);
  _Unwind_Resume(a1);
}

EQKit::OpticalKern::Spec::Entry *EQKit::OpticalKern::Spec::Entry::Entry(EQKit::OpticalKern::Spec::Entry *this, CGPoint a2, const CGPath *a3)
{
  *(_DWORD *)this = 1;
  *(CGPoint *)((char *)this + 8) = a2;
  *((_QWORD *)this + 3) = a3;
  *((_QWORD *)this + 4) = 0;
  *((_WORD *)this + 20) = -1;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  if (a3)
    CFRetain(a3);
  return this;
}

void sub_217967608(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100](v1 + 56);
  _Unwind_Resume(a1);
}

EQKit::OpticalKern::Spec::Entry *EQKit::OpticalKern::Spec::Entry::Entry(EQKit::OpticalKern::Spec::Entry *this, CGPoint a2, const __CTFont *a3, __int16 a4)
{
  *(_DWORD *)this = 2;
  *(CGPoint *)((char *)this + 8) = a2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a3;
  *((_WORD *)this + 20) = a4;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  if (a3)
    CFRetain(a3);
  return this;
}

void sub_217967668(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100](v1 + 56);
  _Unwind_Resume(a1);
}

uint64_t EQKit::OpticalKern::Spec::Entry::Entry(uint64_t this, CGPoint a2, double a3)
{
  *(_DWORD *)this = 3;
  *(CGPoint *)(this + 8) = a2;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_WORD *)(this + 40) = -1;
  *(double *)(this + 48) = a3;
  *(_QWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 64) = 0;
  return this;
}

{
  *(_DWORD *)this = 3;
  *(CGPoint *)(this + 8) = a2;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_WORD *)(this + 40) = -1;
  *(double *)(this + 48) = a3;
  *(_QWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 64) = 0;
  return this;
}

EQKit::OpticalKern::Spec::Entry *EQKit::OpticalKern::Spec::Entry::Entry(EQKit::OpticalKern::Spec::Entry *this, const EQKit::OpticalKern::Spec::Entry *a2)
{
  const void *v3;
  const void *v4;
  __int16 v5;
  uint64_t v6;

  *(_DWORD *)this = *(_DWORD *)a2;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)((char *)a2 + 8);
  v4 = (const void *)*((_QWORD *)a2 + 3);
  v3 = (const void *)*((_QWORD *)a2 + 4);
  v5 = *((_WORD *)a2 + 20);
  v6 = *((_QWORD *)a2 + 6);
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 3) = v4;
  *((_QWORD *)this + 4) = v3;
  *((_WORD *)this + 20) = v5;
  *((_QWORD *)this + 6) = v6;
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    CFRetain(v4);
    v3 = (const void *)*((_QWORD *)this + 4);
  }
  if (v3)
    CFRetain(v3);
  return this;
}

void sub_217967734(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<EQKit::StemStretch::Glyph>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t EQKit::OpticalKern::Spec::Entry::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;

  if (a1 != a2)
  {
    v4 = *(const void **)(a1 + 32);
    if (v4)
      CFRelease(v4);
    v5 = *(const void **)(a1 + 24);
    if (v5)
      CFRelease(v5);
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    std::shared_ptr<EQKit::StemStretch::Glyph>::operator=[abi:nn180100]((_QWORD *)(a1 + 56), (uint64_t *)(a2 + 56));
    v6 = *(const void **)(a1 + 24);
    if (v6)
      CFRetain(v6);
    v7 = *(const void **)(a1 + 32);
    if (v7)
      CFRetain(v7);
  }
  return a1;
}

CGPathRef EQKit::OpticalKern::Spec::Entry::copyPath(CFTypeRef *this)
{
  const __CTFont *v2;
  int v3;
  CGAffineTransform v4;

  if (this[3])
    return (CGPathRef)CFRetain(this[3]);
  v2 = (const __CTFont *)this[4];
  if (!v2)
    return 0;
  v3 = *((unsigned __int16 *)this + 20);
  if (v3 == 0xFFFF)
    return 0;
  memset(&v4, 0, sizeof(v4));
  CGAffineTransformMakeScale(&v4, 1.0, -1.0);
  return CTFontCreatePathForGlyph(v2, v3, &v4);
}

void EQKit::OpticalKern::Spec::appendEntry(EQKit::OpticalKern::Spec *this, CGPoint a2, const CGPath *a3)
{
  unint64_t v4;
  uint64_t v5;
  _BYTE v6[72];

  EQKit::OpticalKern::Spec::Entry::Entry((EQKit::OpticalKern::Spec::Entry *)v6, a2, a3);
  v4 = *((_QWORD *)this + 1);
  if (v4 >= *((_QWORD *)this + 2))
  {
    v5 = std::vector<EQKit::OpticalKern::Spec::Entry>::__push_back_slow_path<EQKit::OpticalKern::Spec::Entry>((uint64_t)this, (const EQKit::OpticalKern::Spec::Entry *)v6);
  }
  else
  {
    EQKit::OpticalKern::Spec::Entry::Entry(*((EQKit::OpticalKern::Spec::Entry **)this + 1), (const EQKit::OpticalKern::Spec::Entry *)v6);
    v5 = v4 + 72;
    *((_QWORD *)this + 1) = v4 + 72;
  }
  *((_QWORD *)this + 1) = v5;
  EQKit::OpticalKern::Spec::Entry::~Entry((EQKit::OpticalKern::Spec::Entry *)v6);
}

void sub_2179678D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKit::OpticalKern::Spec::Entry::~Entry((EQKit::OpticalKern::Spec::Entry *)va);
  _Unwind_Resume(a1);
}

void EQKit::OpticalKern::Spec::appendEntry(EQKit::OpticalKern::Spec *this, CGPoint a2, const __CTFont *a3, __int16 a4)
{
  unint64_t v5;
  uint64_t v6;
  _BYTE v7[72];

  EQKit::OpticalKern::Spec::Entry::Entry((EQKit::OpticalKern::Spec::Entry *)v7, a2, a3, a4);
  v5 = *((_QWORD *)this + 1);
  if (v5 >= *((_QWORD *)this + 2))
  {
    v6 = std::vector<EQKit::OpticalKern::Spec::Entry>::__push_back_slow_path<EQKit::OpticalKern::Spec::Entry>((uint64_t)this, (const EQKit::OpticalKern::Spec::Entry *)v7);
  }
  else
  {
    EQKit::OpticalKern::Spec::Entry::Entry(*((EQKit::OpticalKern::Spec::Entry **)this + 1), (const EQKit::OpticalKern::Spec::Entry *)v7);
    v6 = v5 + 72;
    *((_QWORD *)this + 1) = v5 + 72;
  }
  *((_QWORD *)this + 1) = v6;
  EQKit::OpticalKern::Spec::Entry::~Entry((EQKit::OpticalKern::Spec::Entry *)v7);
}

void sub_217967964(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKit::OpticalKern::Spec::Entry::~Entry((EQKit::OpticalKern::Spec::Entry *)va);
  _Unwind_Resume(a1);
}

void EQKit::OpticalKern::Spec::appendEntry(EQKit::OpticalKern::Spec *this, CGPoint a2, double a3)
{
  unint64_t v4;
  uint64_t v5;
  int v6;
  CGPoint v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  double v11;
  uint64_t v12;
  uint64_t v13;

  v6 = 3;
  v7 = a2;
  v8 = 0;
  v9 = 0;
  v10 = -1;
  v11 = a3;
  v12 = 0;
  v13 = 0;
  v4 = *((_QWORD *)this + 1);
  if (v4 >= *((_QWORD *)this + 2))
  {
    v5 = std::vector<EQKit::OpticalKern::Spec::Entry>::__push_back_slow_path<EQKit::OpticalKern::Spec::Entry>((uint64_t)this, (const EQKit::OpticalKern::Spec::Entry *)&v6);
  }
  else
  {
    EQKit::OpticalKern::Spec::Entry::Entry(*((EQKit::OpticalKern::Spec::Entry **)this + 1), (const EQKit::OpticalKern::Spec::Entry *)&v6);
    v5 = v4 + 72;
    *((_QWORD *)this + 1) = v4 + 72;
  }
  *((_QWORD *)this + 1) = v5;
  EQKit::OpticalKern::Spec::Entry::~Entry((EQKit::OpticalKern::Spec::Entry *)&v6);
}

void sub_217967A0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  EQKit::OpticalKern::Spec::Entry::~Entry((EQKit::OpticalKern::Spec::Entry *)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<EQKit::OpticalKern::Spec::Entry>::__push_back_slow_path<EQKit::OpticalKern::Spec::Entry>(uint64_t a1, const EQKit::OpticalKern::Spec::Entry *a2)
{
  EQKit::OpticalKern::Spec::Entry *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v14;
  EQKit::OpticalKern::Spec::Entry *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v2 = *(EQKit::OpticalKern::Spec::Entry **)a1;
  v3 = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL)
    abort();
  v8 = *(_QWORD *)(a1 + 16);
  v7 = a1 + 16;
  v9 = 0x8E38E38E38E38E39 * ((v8 - (uint64_t)v2) >> 3);
  if (2 * v9 > v4)
    v4 = 2 * v9;
  if (v9 >= 0x1C71C71C71C71C7)
    v10 = 0x38E38E38E38E38ELL;
  else
    v10 = v4;
  v18 = v7;
  if (v10)
    v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<EQKit::OpticalKern::Spec::Entry>>(v7, v10);
  else
    v11 = 0;
  v14 = v11;
  v15 = (EQKit::OpticalKern::Spec::Entry *)&v11[72 * v3];
  v17 = &v11[72 * v10];
  EQKit::OpticalKern::Spec::Entry::Entry(v15, a2);
  v16 = (char *)v15 + 72;
  std::vector<EQKit::OpticalKern::Spec::Entry>::__swap_out_circular_buffer((EQKit::OpticalKern::Spec::Entry **)a1, &v14);
  v12 = *(_QWORD *)(a1 + 8);
  std::__split_buffer<EQKit::OpticalKern::Spec::Entry>::~__split_buffer((uint64_t)&v14);
  return v12;
}

void sub_217967B2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<EQKit::OpticalKern::Spec::Entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

EQKit::OpticalKern::Spec::Entry *std::vector<EQKit::OpticalKern::Spec::Entry>::__swap_out_circular_buffer(EQKit::OpticalKern::Spec::Entry **a1, _QWORD *a2)
{
  const EQKit::OpticalKern::Spec::Entry *v4;
  const EQKit::OpticalKern::Spec::Entry *v5;
  EQKit::OpticalKern::Spec::Entry *result;
  EQKit::OpticalKern::Spec::Entry *v7;
  EQKit::OpticalKern::Spec::Entry *v8;
  EQKit::OpticalKern::Spec::Entry *v9;

  v5 = *a1;
  v4 = a1[1];
  result = (EQKit::OpticalKern::Spec::Entry *)a2[1];
  while (v4 != v5)
  {
    v4 = (const EQKit::OpticalKern::Spec::Entry *)((char *)v4 - 72);
    result = EQKit::OpticalKern::Spec::Entry::Entry((EQKit::OpticalKern::Spec::Entry *)((char *)result - 72), v4);
  }
  a2[1] = result;
  v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = (EQKit::OpticalKern::Spec::Entry *)a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = (EQKit::OpticalKern::Spec::Entry *)a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<EQKit::OpticalKern::Spec::Entry>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(72 * a2);
}

uint64_t std::__split_buffer<EQKit::OpticalKern::Spec::Entry>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 72;
    EQKit::OpticalKern::Spec::Entry::~Entry((EQKit::OpticalKern::Spec::Entry *)(i - 72));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_DWORD *EQKit::Layout::Config::Config(_DWORD *this)
{
  *this = 2;
  return this;
}

{
  *this = 2;
  return this;
}

uint64_t EQKit::Layout::Config::newConfigFromDictionary(EQKit::Layout::Config *this, NSDictionary *a2, NSDictionary *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  char *v9;
  unsigned int v10;
  int v11;
  void *__p[2];
  char v14;

  v5 = operator new();
  *(_DWORD *)v5 = 2;
  v6 = *(_QWORD *)this;
  *(_BYTE *)(v5 + 6) = *(_QWORD *)this > 2uLL;
  *(_BYTE *)(v5 + 7) = v6 > 3;
  v7 = objc_opt_class();
  v8 = (void *)EQKitUtilDynamicCast(v7, (uint64_t)-[NSDictionary objectForKey:](a2, "objectForKey:", CFSTR("radicalIndexAlign")));
  if (v8)
    v9 = (char *)objc_msgSend(v8, "UTF8String");
  else
    v9 = "";
  std::string::basic_string[abi:nn180100]<0>(__p, v9);
  v10 = EQKitTypes::Align::alignFromMathMLString((const void **)__p, 2);
  if (v14 < 0)
    operator delete(__p[0]);
  if (v10 <= 2)
    v11 = 2;
  else
    v11 = v10;
  *(_DWORD *)v5 = v11;
  *(_BYTE *)(v5 + 4) = _BOOL(a2, (NSString *)CFSTR("useBaseFontForLineHeight"));
  *(_BYTE *)(v5 + 5) = _BOOL(a2, (NSString *)CFSTR("allowSingleLineHeight"));
  return v5;
}

void sub_217967D88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _BOOL(NSDictionary *a1, NSString *a2)
{
  uint64_t v4;

  v4 = objc_opt_class();
  return objc_msgSend((id)EQKitUtilDynamicCast(v4, (uint64_t)-[NSDictionary objectForKey:](a1, "objectForKey:", a2)), "BOOLValue");
}

void sub_217967EE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_217967F7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_21796809C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_217968258(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_21796835C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{

}

void sub_2179686F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_217968934(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_217968AB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_217968B14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_217968B90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_217968D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v11;

  _Unwind_Resume(a1);
}

void sub_217968DD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_217968E28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_217968E98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_217968F08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_217969128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_21796929C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_2179693DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_217969740(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_217969874(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_217969B38(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Unwind_Resume(a1);
}

void sub_217969CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_217969EAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_217969F58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<long long const,NSMutableArray * {__strong}>,std::__unordered_map_hasher<long long const,std::__hash_value_type<long long const,NSMutableArray * {__strong}>,TSP::IdentifierHash,std::equal_to<long long const>,true>,std::__unordered_map_equal<long long const,std::__hash_value_type<long long const,NSMutableArray * {__strong}>,std::equal_to<long long const>,TSP::IdentifierHash,true>,std::allocator<std::__hash_value_type<long long const,NSMutableArray * {__strong}>>>::find<long long>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<long long const,NSMutableArray * {__strong}>,std::__unordered_map_hasher<long long const,std::__hash_value_type<long long const,NSMutableArray * {__strong}>,TSP::IdentifierHash,std::equal_to<long long const>,true>,std::__unordered_map_equal<long long const,std::__hash_value_type<long long const,NSMutableArray * {__strong}>,std::equal_to<long long const>,TSP::IdentifierHash,true>,std::allocator<std::__hash_value_type<long long const,NSMutableArray * {__strong}>>>::__emplace_unique_key_args<long long,std::pair<long long const,NSMutableArray * {__strong}>>(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = (_QWORD *)(a1 + 16);
  i = operator new(0x20uLL);
  v13 = *a3;
  v14 = a3[1];
  a3[1] = 0;
  *i = 0;
  i[1] = v6;
  i[2] = v13;
  i[3] = v14;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v7 || (float)(v16 * (float)v7) < v15)
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__rehash<true>(a1, v20);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *v12;
  *v12 = i;
  *(_QWORD *)(v21 + 8 * v3) = v12;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v23 >= v7)
        v23 %= v7;
    }
    else
    {
      v23 &= v7 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_21796A270(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long const,NSMutableArray * {__strong}>,void *>>>::operator()[abi:nn180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long const,NSMutableArray * {__strong}>,void *>>>::operator()[abi:nn180100](uint64_t a1, id *a2)
{
  if (*(_BYTE *)(a1 + 8))
  {

  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

void sub_21796A35C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21796A3E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21796A4D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_21796A614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  void *v23;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{

}

void sub_21796A6F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_21796A7DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_21796A86C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_21796AA34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_21796AB18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_21796AC7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_21796AD3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_21796AE28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_21796B0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26)
{
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;

  _Block_object_dispose((const void *)(v32 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_21796B370(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21796B5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_21796B65C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_21796B89C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_21796BA98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_21796BB90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_21796BDA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

void sub_21796BFEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_21796C3BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_21796C5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_21796C684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  int v11;

  if (v11)

  _Unwind_Resume(a1);
}

void sub_21796C764(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void TSP::DataDigestForString(TSP *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  int v8;
  int v9;
  char v10;
  TSP *v11;

  v11 = this;
  if (-[TSP length](v11, "length") == 40)
  {
    v4 = -[TSP UTF8String](objc_retainAutorelease(v11), "UTF8String");
    v5 = 0;
    v6 = (char *)(v4 + 1);
    do
    {
      v7 = *(v6 - 1);
      v8 = *v6;
      if (v7 > 96)
        LOBYTE(v7) = v7 - 32;
      v9 = (char)v7;
      if (v8 > 96)
        LOBYTE(v8) = v8 - 32;
      if ((char)v8 > 64)
        LOBYTE(v8) = v8 + 9;
      v10 = 16 * v7;
      if (v9 > 64)
        v10 -= 112;
      *(_BYTE *)(a2 + v5++) = v10 & 0xF0 | v8 & 0xF;
      v6 += 2;
    }
    while (v5 != 20);
  }
  else
  {
    -[TSP length](v11, "length");
    TSULogErrorInFunction();
  }

}

void sub_21796C864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_21796CA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  void *v28;
  void *v29;

  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_21796CBB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_21796CC84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_21796CE8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_21796CF94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21796D0A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_21796D3DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_21796D534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_21796D824(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void sub_21796D998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_21796DAA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_21796DBD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_21796DD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_21796DE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_21796DFA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_21796E084(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21796E53C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_21796E690(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_21796E79C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_21796E898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_21796E97C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_21796EA5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<long long const,TSPData * {__weak}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long const,TSPData * {__weak}>,void *>>>>::reset[abi:nn180100](uint64_t a1, uint64_t a2)
{
  id *v2;

  v2 = *(id **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      objc_destroyWeak(v2 + 3);
    operator delete(v2);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>,std::__unordered_map_hasher<std::array<unsigned char,20ul> const,std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>,TSP::DataDigestHash,TSP::DataDigestEqualTo,true>,std::__unordered_map_equal<std::array<unsigned char,20ul> const,std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>,TSP::DataDigestEqualTo,TSP::DataDigestHash,true>,std::allocator<std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>>>::find<std::array<unsigned char,20ul>>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (result[2] == *a2
        && result[3] == a2[1]
        && *((_DWORD *)result + 8) == (unint64_t)*((unsigned int *)a2 + 4))
      {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>,void *>>>>::reset[abi:nn180100](uint64_t a1, uint64_t a2)
{
  id *v2;

  v2 = *(id **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      objc_destroyWeak(v2 + 5);
    operator delete(v2);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<long long const,TSPData * {__weak}>,std::__unordered_map_hasher<long long const,std::__hash_value_type<long long const,TSPData * {__weak}>,TSP::ObjectIdentifierHash,std::equal_to<long long const>,true>,std::__unordered_map_equal<long long const,std::__hash_value_type<long long const,TSPData * {__weak}>,std::equal_to<long long const>,TSP::ObjectIdentifierHash,true>,std::allocator<std::__hash_value_type<long long const,TSPData * {__weak}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = a1 + 16;
  v14 = operator new(0x20uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *v14 = 0;
  v14[1] = v7;
  v14[2] = **a4;
  v14[3] = 0;
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  v11 = (_QWORD *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<long long const,TSPData * {__weak}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long const,TSPData * {__weak}>,void *>>>>::reset[abi:nn180100]((uint64_t)v24, 0);
  return v11;
}

void sub_21796EE24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<long long const,TSPData * {__weak}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long const,TSPData * {__weak}>,void *>>>>::reset[abi:nn180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>,std::__unordered_map_hasher<std::array<unsigned char,20ul> const,std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>,TSP::DataDigestHash,TSP::DataDigestEqualTo,true>,std::__unordered_map_equal<std::array<unsigned char,20ul> const,std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>,TSP::DataDigestEqualTo,TSP::DataDigestHash,true>,std::allocator<std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>>>::__emplace_unique_key_args<std::array<unsigned char,20ul>,std::piecewise_construct_t const&,std::tuple<std::array<unsigned char,20ul> const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  uint64_t v15;
  _QWORD *v16;
  __int128 v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD v27[2];
  char v28;

  v7 = *(_QWORD *)a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *(_QWORD *)a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *(_QWORD *)a2
            && i[3] == *(_QWORD *)(a2 + 8)
            && *((_DWORD *)i + 8) == (unint64_t)*(unsigned int *)(a2 + 16))
          {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v15 = a1 + 16;
  v16 = operator new(0x30uLL);
  v27[0] = v16;
  v27[1] = a1 + 16;
  *v16 = 0;
  v16[1] = v7;
  v17 = **a4;
  *((_DWORD *)v16 + 8) = *((_DWORD *)*a4 + 4);
  *((_OWORD *)v16 + 1) = v17;
  v16[5] = 0;
  v28 = 1;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v8 || (float)(v19 * (float)v8) < v18)
  {
    v20 = 1;
    if (v8 >= 3)
      v20 = (v8 & (v8 - 1)) != 0;
    v21 = v20 | (2 * v8);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::__unordered_map_hasher<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::hash<EQKit::StemStretch::Key>,std::equal_to<EQKit::StemStretch::Key>,true>,std::__unordered_map_equal<EQKit::StemStretch::Key,std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>,std::equal_to<EQKit::StemStretch::Key>,std::hash<EQKit::StemStretch::Key>,true>,std::allocator<std::__hash_value_type<EQKit::StemStretch::Key,std::pair<std::shared_ptr<EQKit::StemStretch::Glyph>,unsigned long>>>>::__rehash<true>(a1, v23);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)v27[0] = *v24;
    *v24 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v15;
    if (*(_QWORD *)v27[0])
    {
      v25 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v25 >= v8)
          v25 %= v8;
      }
      else
      {
        v25 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v27[0];
    }
  }
  i = (uint64_t *)v27[0];
  v27[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>,void *>>>>::reset[abi:nn180100]((uint64_t)v27, 0);
  return i;
}

void sub_21796F09C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::array<unsigned char,20ul> const,TSPData * {__weak}>,void *>>>>::reset[abi:nn180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_21796F464(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_21796F524(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21796F618(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_21796F708(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21796F824(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_21796F8B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_21796F970(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_21796FA0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_21796FC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_21796FC9C()
{
  JUMPOUT(0x21796FC8CLL);
}

void sub_21796FD38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_21796FE90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_21796FFCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_2179700FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_217970324(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21797040C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2179704EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

{
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{

}

void sub_2179705F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)TSPData;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_21797073C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_217970798(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2179707E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_217970828(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21797086C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_217970974(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_217970B9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_217970C38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_217970C80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_217970CC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_217970D0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_217970D54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_217970DBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_217970E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_217970EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_217970F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_217971000(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_217971090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_2179711B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_21797133C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2179715A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  uint64_t v26;

  objc_end_catch();
  _Block_object_dispose(&a19, 8);

  _Block_object_dispose((const void *)(v26 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_217971700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_21797190C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_217971974(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2179719B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_217971AC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_217971CC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_217971E30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_217971F28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2179720F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2179721A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_217972234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_217972304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{

}

void sub_2179723F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_217972494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_2179725A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_2179726D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_217972840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  void *v23;
  void *v24;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_2179729C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_217972AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_217972B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_217972D00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_217972E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_217972F3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t TSPCGDataProviderGetBytes(void *a1, const char *a2, uint64_t a3)
{
  return objc_msgSend(a1, "readToBuffer:size:", a2, a3);
}

uint64_t TSPCGDataProviderSkipForward(void *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a1;
  v4 = objc_msgSend(v3, "offset");
  objc_msgSend(v3, "seekToOffset:", v4 + a2);
  v5 = objc_msgSend(v3, "offset") - v4;

  return v5;
}

void sub_217972FF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t TSPCGDataProviderRewind(void *a1, const char *a2)
{
  return objc_msgSend(a1, "seekToOffset:", 0);
}

void TSPCGDataProviderReleaseInfo(void *a1)
{
  void *cf;

  cf = a1;
  objc_msgSend(cf, "close");
  CFRelease(cf);

}

void sub_217973040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_21797313C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_2179732B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_2179733FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, objc_super a12)
{
  void *v12;
  void *v13;
  void *v14;

  a12.super_class = (Class)TSPTemporaryDataStorage;
  -[_Unwind_Exception dealloc](&a12, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_2179734B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_217973544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_217973644(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_2179736C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_217973778(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21797387C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2179739CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_217973AD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_217973B9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_217973C38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_217973D70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_217973E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_217973F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_21797407C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2179741A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2179741E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_21797422C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_2179742DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_217974374(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21797445C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_217974504(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_2179745C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_217974644(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2179746D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_217974768(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_217974850(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2179749A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_217974AB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_217974C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_217974E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_217974F58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_217975040(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_217975204(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_21797528C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)TSPDataRepReadChannel;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_2179753E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_217975F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_217976018(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_217976274(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_2179763B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_217976530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_217976694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_217976828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_217976C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id UnsafePointer()
{
  if (TSPBundle::once != -1)
    dispatch_once(&TSPBundle::once, &__block_literal_global_8);
  return (id)TSPBundle::bundle;
}

void sub_2179770D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_2179771C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_217977278(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_21797731C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_217977480(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_217977540(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t TSP::ObjectStateIdentifier::ObjectStateIdentifier(uint64_t this)
{
  *(_BYTE *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_BYTE *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

{
  *(_BYTE *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_BYTE *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

uint64_t TSP::ObjectStateIdentifier::ObjectStateIdentifier(uint64_t this, uint64_t a2)
{
  *(_BYTE *)this = 1;
  *(_QWORD *)(this + 8) = a2;
  *(_BYTE *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

{
  *(_BYTE *)this = 1;
  *(_QWORD *)(this + 8) = a2;
  *(_BYTE *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

TSP::ObjectStateIdentifier *TSP::ObjectStateIdentifier::ObjectStateIdentifier(TSP::ObjectStateIdentifier *this, NSString *a2)
{
  NSString *v3;

  v3 = a2;
  *(_BYTE *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 1;
  *((_QWORD *)this + 3) = v3;
  return this;
}

{
  NSString *v3;

  v3 = a2;
  *(_BYTE *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 1;
  *((_QWORD *)this + 3) = v3;
  return this;
}

void TSP::ObjectStateIdentifier::~ObjectStateIdentifier(id *this)
{

}

{

}

uint64_t TSP::ObjectStateIdentifier::hasDataState(TSP::ObjectStateIdentifier *this)
{
  return *(unsigned __int8 *)this;
}

uint64_t TSP::ObjectStateIdentifier::dataState(TSP::ObjectStateIdentifier *this)
{
  void *v2;
  void *v3;
  void *v4;

  if (!*(_BYTE *)this)
  {
    objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "int64_t TSP::ObjectStateIdentifier::dataState() const");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/persistence/src/TSPObjectStateIdentifier.mm");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, v4, 34, CFSTR("Asked for data state when we have none"));

  }
  return *((_QWORD *)this + 1);
}

void sub_21797779C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t TSP::ObjectStateIdentifier::setDataState(uint64_t this, uint64_t a2)
{
  *(_BYTE *)this = 1;
  *(_BYTE *)(this + 16) = 0;
  *(_QWORD *)(this + 8) = a2;
  return this;
}

uint64_t TSP::ObjectStateIdentifier::hasFileState(TSP::ObjectStateIdentifier *this)
{
  return *((unsigned __int8 *)this + 16);
}

id TSP::ObjectStateIdentifier::fileState(TSP::ObjectStateIdentifier *this)
{
  void *v2;
  void *v3;
  void *v4;

  if (!*((_BYTE *)this + 16))
  {
    objc_msgSend(MEMORY[0x24BEB3C28], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "NSString *TSP::ObjectStateIdentifier::fileState() const");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "/Library/Caches/com.apple.xbs/Sources/AlderShared/persistence/src/TSPObjectStateIdentifier.mm");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, v4, 52, CFSTR("Asked for file state when we have none"));

  }
  return *((id *)this + 3);
}

void sub_217977880(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void TSP::ObjectStateIdentifier::setFileState(TSP::ObjectStateIdentifier *this, NSString *a2)
{
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 16) = 1;
  objc_storeStrong((id *)this + 3, a2);
}

void sub_2179779B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_217977AE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_217977C34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_217977D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_217977EF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_217977FD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_217978164(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_217978230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

