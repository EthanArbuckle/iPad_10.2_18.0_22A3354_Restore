uint64_t ____brc_create_section_block_invoke_2(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = __brc_create_section_lastSectionID + 1;
  v1 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
  v2 = *(_QWORD *)(v1 + 24);
  if (*(_BYTE *)(result + 40) != ((v2 & 1) == 0))
  {
    *(_QWORD *)(v1 + 24) = v2 + 1;
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24);
  }
  __brc_create_section_lastSectionID = v2;
  return result;
}

void sub_1CBD45598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  __brc_leave_section(&a26);
  _Unwind_Resume(a1);
}

void sub_1CBD45894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void __br_notify_register_dispatch_block_invoke(uint64_t a1)
{
  id v2;
  id v3;
  int v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  NSObject *v20;
  void *v21;
  NSObject *v22;
  uint64_t v23;
  id v24;
  id v25;
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  void *v29;
  __int16 v30;
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if ((objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", CFSTR("__defaultPersonaID__")) & 1) != 0
    || (v2 = *(id *)(a1 + 32)) == 0)
  {
    if (_block_invoke___personaOnceToken != -1)
      dispatch_once(&_block_invoke___personaOnceToken, &__block_literal_global_92);
    v3 = (id)_block_invoke___personalPersona;
    v4 = 1;
  }
  else
  {
    v3 = v2;
    v4 = 0;
  }
  objc_msgSend(MEMORY[0x1E0DC5EE8], "sharedManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "currentPersona");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v25 = 0;
  objc_msgSend(v6, "userPersonaUniqueString");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7 == v3 || (objc_msgSend(v7, "isEqualToString:", v3) & 1) != 0)
    goto LABEL_9;
  if (!voucher_process_can_use_arbitrary_personas())
  {
    if (v4 && (objc_msgSend(v6, "isDataSeparatedPersona") & 1) == 0)
    {
      brc_bread_crumbs();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
        -[_BRCOperation completedWithResult:error:].cold.3();

    }
    else
    {
      brc_bread_crumbs();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        -[_BRCOperation completedWithResult:error:].cold.2();

      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2FE0], 22, 0);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      if (v14)
        goto LABEL_25;
    }
LABEL_9:
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    goto LABEL_10;
  }
  v24 = 0;
  v9 = (void *)objc_msgSend(v6, "copyCurrentPersonaContextWithError:", &v24);
  v10 = v24;
  v11 = v25;
  v25 = v9;

  if (v10)
  {
    brc_bread_crumbs();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, (os_log_type_t)0x90u))
      -[_BRCOperation completedWithResult:error:].cold.1();

  }
  objc_msgSend(v6, "generateAndRestorePersonaContextWithPersonaUniqueString:", v3);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v14)
    goto LABEL_9;
  brc_bread_crumbs();
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, (os_log_type_t)0x90u))
  {
    v23 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412802;
    v27 = v23;
    v28 = 2112;
    v29 = v14;
    v30 = 2112;
    v31 = v15;
    _os_log_error_impl(&dword_1CBD43000, v16, (os_log_type_t)0x90u, "[ERROR] Can't adopt persona %@: %@%@", buf, 0x20u);
  }

LABEL_25:
  brc_bread_crumbs();
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v20 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
    __br_notify_register_dispatch_block_invoke_cold_1(a1, (uint64_t)v19, v20);

LABEL_10:
  _BRRestorePersona();

}

void sub_1CBD45C64(_Unwind_Exception *a1)
{
  _BRRestorePersona();
  _Unwind_Resume(a1);
}

void __br_notify_register_dispatch_block_invoke_0(uint64_t a1)
{
  id v2;
  id v3;
  int v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  NSObject *v20;
  void *v21;
  NSObject *v22;
  uint64_t v23;
  id v24;
  id v25;
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  void *v29;
  __int16 v30;
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if ((objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", CFSTR("__defaultPersonaID__")) & 1) != 0
    || (v2 = *(id *)(a1 + 32)) == 0)
  {
    if (_block_invoke_3___personaOnceToken != -1)
      dispatch_once(&_block_invoke_3___personaOnceToken, &__block_literal_global_193);
    v3 = (id)_block_invoke_3___personalPersona;
    v4 = 1;
  }
  else
  {
    v3 = v2;
    v4 = 0;
  }
  objc_msgSend(MEMORY[0x1E0DC5EE8], "sharedManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "currentPersona");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v25 = 0;
  objc_msgSend(v6, "userPersonaUniqueString");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7 == v3 || (objc_msgSend(v7, "isEqualToString:", v3) & 1) != 0)
    goto LABEL_9;
  if (!voucher_process_can_use_arbitrary_personas())
  {
    if (v4 && (objc_msgSend(v6, "isDataSeparatedPersona") & 1) == 0)
    {
      brc_bread_crumbs();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
        -[_BRCOperation completedWithResult:error:].cold.3();

    }
    else
    {
      brc_bread_crumbs();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        -[_BRCOperation completedWithResult:error:].cold.2();

      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2FE0], 22, 0);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      if (v14)
        goto LABEL_25;
    }
LABEL_9:
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    goto LABEL_10;
  }
  v24 = 0;
  v9 = (void *)objc_msgSend(v6, "copyCurrentPersonaContextWithError:", &v24);
  v10 = v24;
  v11 = v25;
  v25 = v9;

  if (v10)
  {
    brc_bread_crumbs();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, (os_log_type_t)0x90u))
      -[_BRCOperation completedWithResult:error:].cold.1();

  }
  objc_msgSend(v6, "generateAndRestorePersonaContextWithPersonaUniqueString:", v3);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v14)
    goto LABEL_9;
  brc_bread_crumbs();
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, (os_log_type_t)0x90u))
  {
    v23 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412802;
    v27 = v23;
    v28 = 2112;
    v29 = v14;
    v30 = 2112;
    v31 = v15;
    _os_log_error_impl(&dword_1CBD43000, v16, (os_log_type_t)0x90u, "[ERROR] Can't adopt persona %@: %@%@", buf, 0x20u);
  }

LABEL_25:
  brc_bread_crumbs();
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v20 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
    __br_notify_register_dispatch_block_invoke_cold_1_0(a1);

LABEL_10:
  _BRRestorePersona();

}

void sub_1CBD46054(_Unwind_Exception *a1)
{
  _BRRestorePersona();
  _Unwind_Resume(a1);
}

void __br_notify_register_dispatch_block_invoke_1(uint64_t a1)
{
  id v2;
  id v3;
  int v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  NSObject *v20;
  void *v21;
  NSObject *v22;
  uint64_t v23;
  id v24;
  id v25;
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  void *v29;
  __int16 v30;
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if ((objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", CFSTR("__defaultPersonaID__")) & 1) != 0
    || (v2 = *(id *)(a1 + 32)) == 0)
  {
    if (_block_invoke___personaOnceToken_4 != -1)
      dispatch_once(&_block_invoke___personaOnceToken_4, &__block_literal_global_167);
    v3 = (id)_block_invoke___personalPersona_4;
    v4 = 1;
  }
  else
  {
    v3 = v2;
    v4 = 0;
  }
  objc_msgSend(MEMORY[0x1E0DC5EE8], "sharedManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "currentPersona");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v25 = 0;
  objc_msgSend(v6, "userPersonaUniqueString");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7 == v3 || (objc_msgSend(v7, "isEqualToString:", v3) & 1) != 0)
    goto LABEL_9;
  if (!voucher_process_can_use_arbitrary_personas())
  {
    if (v4 && (objc_msgSend(v6, "isDataSeparatedPersona") & 1) == 0)
    {
      brc_bread_crumbs();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
        -[_BRCOperation completedWithResult:error:].cold.3();

    }
    else
    {
      brc_bread_crumbs();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        -[_BRCOperation completedWithResult:error:].cold.2();

      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2FE0], 22, 0);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      if (v14)
        goto LABEL_25;
    }
LABEL_9:
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    goto LABEL_10;
  }
  v24 = 0;
  v9 = (void *)objc_msgSend(v6, "copyCurrentPersonaContextWithError:", &v24);
  v10 = v24;
  v11 = v25;
  v25 = v9;

  if (v10)
  {
    brc_bread_crumbs();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, (os_log_type_t)0x90u))
      __br_notify_register_dispatch_block_invoke_cold_2((uint64_t)v10, (uint64_t)v12, v13);

  }
  objc_msgSend(v6, "generateAndRestorePersonaContextWithPersonaUniqueString:", v3);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v14)
    goto LABEL_9;
  brc_bread_crumbs();
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, (os_log_type_t)0x90u))
  {
    v23 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412802;
    v27 = v23;
    v28 = 2112;
    v29 = v14;
    v30 = 2112;
    v31 = v15;
    _os_log_error_impl(&dword_1CBD43000, v16, (os_log_type_t)0x90u, "[ERROR] Can't adopt persona %@: %@%@", buf, 0x20u);
  }

LABEL_25:
  brc_bread_crumbs();
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v20 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
    __br_notify_register_dispatch_block_invoke_cold_1_1();

LABEL_10:
  _BRRestorePersona();

}

void sub_1CBD46444(_Unwind_Exception *a1)
{
  _BRRestorePersona();
  _Unwind_Resume(a1);
}

uint64_t brc_power_is_ok()
{
  void *v0;
  NSObject *v1;

  brc_notify_get_state();
  brc_bread_crumbs();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v1 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
    brc_power_is_ok_cold_1();

  return 0;
}

void __brc_create_section(char a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  _QWORD v8[5];
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  if (__brc_create_section_once != -1)
    dispatch_once(&__brc_create_section_once, &__block_literal_global_60);
  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = ____brc_create_section_block_invoke_2;
  v8[3] = &unk_1E87674D0;
  v8[4] = &v10;
  v9 = a1;
  dispatch_sync((dispatch_queue_t)__brc_create_section_queue, v8);
  a4[1] = a2;
  a4[2] = 0;
  *a4 = v11[3];
  *((_DWORD *)a4 + 4) = a3;
  _Block_object_dispose(&v10, 8);
}

void sub_1CBD46A80(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBD47950(_Unwind_Exception *a1)
{
  _BRRestorePersona();
  _Unwind_Resume(a1);
}

void sub_1CBD47DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  __brc_leave_section(&a28);
  _Unwind_Resume(a1);
}

void sub_1CBD48210(_Unwind_Exception *a1)
{
  _BRRestorePersona();
  _Unwind_Resume(a1);
}

void sub_1CBD4845C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _brc_ipc_check_logged_status(void *a1, uint64_t a2, void *a3)
{
  id v5;
  void (**v6)(id, void *);
  void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  NSObject *v15;
  void *v16;
  BOOL v17;
  void *v18;
  BOOL v19;
  void *v20;
  NSObject *v21;
  id v22;
  int v23;
  void *v24;
  NSObject *v25;
  void *v26;
  NSObject *v27;
  void *v28;
  NSObject *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v38;
  NSObject *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  NSObject *v51;
  void *v52;
  void *v53;
  void *v54;
  char v55;
  char v56;
  void *v57;
  void *v58;
  void *v59;
  int v60;
  void *v61;
  NSObject *v62;
  void *v63;
  NSObject *v64;
  void *v65;
  NSObject *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  uint8_t buf[24];
  void *v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  if (!v5)
  {
    brc_bread_crumbs();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
      _brc_ipc_check_logged_status_cold_1();

    goto LABEL_53;
  }
  if (a2 == 2)
  {
LABEL_53:
    v36 = 1;
    goto LABEL_54;
  }
  objc_msgSend(v5, "session");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v7)
  {
    +[BRCAccountsManager sharedManager](BRCAccountsManager, "sharedManager");
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v69, "accountForCurrentPersona");
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v67, "identifier");
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    if (v68)
    {
      brc_bread_crumbs();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = v68;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v8;
        _os_log_impl(&dword_1CBD43000, v9, OS_LOG_TYPE_INFO, "[INFO] Account %@ is not loaded, waiting for it%@", buf, 0x16u);
      }

      if (!objc_msgSend(v69, "waitForAccountLoadingSynchronouslyIfPossible:", v68))
      {
        v70 = 0;
        v71 = 0;
LABEL_17:
        brc_bread_crumbs();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        brc_default_log();
        v15 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412802;
          *(_QWORD *)&buf[4] = v71;
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v70;
          *(_WORD *)&buf[22] = 2112;
          v73 = v14;
          _os_log_impl(&dword_1CBD43000, v15, OS_LOG_TYPE_INFO, "[INFO] After waiting, the sesion is: %@, handler is: %@%@", buf, 0x20u);
        }

        if (v71)
        {
          objc_msgSend(v71, "accountHandler");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = v16 == 0;

          if (!v17)
          {
            objc_msgSend(v71, "accountHandler");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            v19 = v18 == v70;

            if (!v19)
            {
              brc_bread_crumbs();
              v61 = (void *)objc_claimAutoreleasedReturnValue();
              brc_default_log();
              v62 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v62, OS_LOG_TYPE_FAULT))
                _brc_ipc_check_logged_status_cold_6();

            }
          }
        }
        if (!objc_msgSend(v70, "doesNotHaveEnoughDiskSpaceToBeFunctional"))
          goto LABEL_39;
        if (objc_msgSend(v70, "checkEnoughDiskSpaceToBeFunctional"))
        {
          memset(buf, 0, sizeof(buf));
          __brc_create_section(0, (uint64_t)"_brc_ipc_check_logged_status", 643, buf);
          brc_bread_crumbs();
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          brc_default_log();
          v21 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
            _brc_ipc_check_logged_status_cold_5();

          if (v67)
          {
            v22 = v70;
            objc_sync_enter(v22);
            v23 = objc_msgSend(v22, "doesNotHaveEnoughDiskSpaceToBeFunctional");
            if (v23)
            {
              objc_msgSend(v22, "setDoesNotHaveEnoughDiskSpaceToBeFunctional:", 0);
            }
            else
            {
              brc_bread_crumbs();
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              brc_default_log();
              v25 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(v74) = 138412290;
                *(_QWORD *)((char *)&v74 + 4) = v24;
                _os_log_impl(&dword_1CBD43000, v25, OS_LOG_TYPE_DEFAULT, "[NOTICE] another thread has already tried to load the account%@", (uint8_t *)&v74, 0xCu);
              }

            }
            objc_sync_exit(v22);

            __brc_leave_section((uint64_t *)buf);
            if (v23)
            {
              brc_bread_crumbs();
              v26 = (void *)objc_claimAutoreleasedReturnValue();
              brc_default_log();
              v27 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                *(_QWORD *)&buf[4] = v26;
                _os_log_impl(&dword_1CBD43000, v27, OS_LOG_TYPE_DEFAULT, "[NOTICE] iCloud Drive has now enough disk space to work so loading account%@", buf, 0xCu);
              }

              objc_msgSend(v22, "startAndLoadAccountSynchronously:", v67);
              brc_bread_crumbs();
              v28 = (void *)objc_claimAutoreleasedReturnValue();
              brc_default_log();
              v29 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
                _brc_ipc_check_logged_status_cold_4();

              BRPostAccountTokenChangedNotification();
              objc_msgSend(v22, "session");
              v30 = objc_claimAutoreleasedReturnValue();

              v71 = (void *)v30;
LABEL_39:
              if (v71)
              {
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                {
                  +[BRCDaemon daemon](BRCDaemon, "daemon");
                  v31 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v31, "waitOnAccountResumedQueue");

                }
                objc_msgSend(v5, "setSession:", v71);
              }

              goto LABEL_44;
            }
          }
          else
          {
            __brc_leave_section((uint64_t *)buf);
          }
        }
        brc_bread_crumbs();
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        brc_default_log();
        v39 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v38;
          _os_log_impl(&dword_1CBD43000, v39, OS_LOG_TYPE_DEFAULT, "[WARNING] Returning error because iCloud Drive doesn't have enough disk space to be functional%@", buf, 0xCu);
        }

        v40 = (void *)MEMORY[0x1E0CB35C8];
        *(_QWORD *)&v74 = *MEMORY[0x1E0CB2D50];
        objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v41, "localizedStringForKey:value:table:", CFSTR("Can't use iCloud Drive."), &stru_1E8769030, 0);
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        *(_QWORD *)buf = v42;
        *((_QWORD *)&v74 + 1) = *MEMORY[0x1E0CB2D68];
        objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v43, "localizedStringForKey:value:table:", CFSTR("The disk is full."), &stru_1E8769030, 0);
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        *(_QWORD *)&buf[8] = v44;
        v75 = *MEMORY[0x1E0CB2D80];
        objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v45, "localizedStringForKey:value:table:", CFSTR("Free some space on your disk?"), &stru_1E8769030, 0);
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        *(_QWORD *)&buf[16] = v46;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", buf, &v74, 3);
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v40, "errorWithDomain:code:userInfo:", *MEMORY[0x1E0D10B70], 34, v47);
        v48 = (void *)objc_claimAutoreleasedReturnValue();

        v6[2](v6, v48);
        goto LABEL_79;
      }
      objc_msgSend(v69, "accountHandlerForACAccountID:", v68);
      v70 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v70, "session");
    }
    else
    {
      brc_bread_crumbs();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        _brc_ipc_check_logged_status_cold_7();

      objc_msgSend(v69, "accountHandlerForCurrentPersona");
      v70 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v70, "session");
    }
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_17;
  }
LABEL_44:
  objc_msgSend(v5, "session");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = v32;
  if (v32)
    v34 = 1;
  else
    v34 = -1;

  if (v34 == a2 || a2 == 3 && v33 || !a2)
    goto LABEL_53;
  if (a2 == -1)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "brc_errorDaemonShouldBeLoggedOut");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    v6[2](v6, v35);

LABEL_79:
    v36 = 0;
    goto LABEL_54;
  }
  objc_msgSend(v5, "_getCloudDocsUnsupportedError");
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  if (v49)
  {
    brc_bread_crumbs();
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v51 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v49;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v50;
      _os_log_impl(&dword_1CBD43000, v51, OS_LOG_TYPE_DEFAULT, "[WARNING] Returning error because iCloud Drive not supported: %@%@", buf, 0x16u);
    }

    v6[2](v6, v49);
    goto LABEL_79;
  }
  +[BRCAccountsManager sharedManager](BRCAccountsManager, "sharedManager");
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v52, "waitForInitialAccountLoadingSynchronouslyIfPossible"))
  {
    v54 = 0;
LABEL_72:
    v58 = (void *)MEMORY[0x1E0CB35C8];
    objc_msgSend(v54, "loggedOutError");
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v58, "brc_errorLoggedOutWithUnderlyingError:", v59);
    v57 = (void *)objc_claimAutoreleasedReturnValue();

    goto LABEL_73;
  }
  objc_msgSend(v52, "accountForCurrentPersona");
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v52, "accountHandlerForCurrentPersona");
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  v55 = objc_msgSend(v54, "waitForSessionLoading");
  if (v53)
    v56 = v55;
  else
    v56 = 1;
  if ((v56 & 1) == 0
    && objc_msgSend(v53, "br_isEnabledForCloudDocs")
    && objc_msgSend(v53, "br_isEligibleiCloudAccount"))
  {
    brc_bread_crumbs();
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v64 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v64, (os_log_type_t)0x90u))
      _brc_ipc_check_logged_status_cold_3();

    brc_bread_crumbs();
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v66 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
      -[BRCAccountHandler _loadOnDiskAccountSessionWithError:].cold.3();

    exit(0);
  }
  objc_msgSend(v54, "loggedOutError");
  v57 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v57)
    goto LABEL_72;
LABEL_73:
  if (a2 == 3
    && ((objc_msgSend(v57, "br_isCloudDocsErrorCode:", 22) & 1) != 0
     || (objc_msgSend(v57, "br_isCloudDocsErrorCode:", 34) & 1) != 0))
  {
    v60 = 0;
    v36 = 1;
  }
  else
  {
    v6[2](v6, v57);
    v36 = 0;
    v60 = 1;
  }

  if (v60)
    goto LABEL_79;
LABEL_54:

  return v36;
}

void sub_1CBD49080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void *v15;

  objc_sync_exit(v15);
  __brc_leave_section(&a15);
  _Unwind_Resume(a1);
}

void sub_1CBD49304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t _brc_ipc_check_applibrary_write_access(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void (**v9)(id, id);
  uint64_t v10;
  id v11;
  id v13;

  v7 = a1;
  v8 = a3;
  v9 = a4;
  if (v7)
  {
    if (_brc_ipc_check_logged_status(v7, a2, v9))
    {
      v13 = 0;
      v10 = objc_msgSend(v7, "_canCreateAppLibraryWithID:error:", v8, &v13);
      v11 = v13;
      if ((v10 & 1) == 0)
        v9[2](v9, v11);

    }
    else
    {
      v10 = 0;
    }
  }
  else
  {
    v10 = 1;
  }

  return v10;
}

void __brc_leave_section(uint64_t *a1)
{
  uint64_t v1;
  void *v2;
  NSObject *v3;
  NSObject *v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = *a1;
    if (*a1)
    {
      brc_bread_crumbs();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v3 = objc_claimAutoreleasedReturnValue();
      v4 = v3;
      if ((v1 & 1) != 0)
      {
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
          __brc_leave_section_cold_1((uint64_t)v2, v1, v4);
      }
      else if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        v5 = 134218242;
        v6 = v1;
        v7 = 2112;
        v8 = v2;
        _os_log_impl(&dword_1CBD43000, v4, OS_LOG_TYPE_INFO, "[INFO] ┗%llx %@", (uint8_t *)&v5, 0x16u);
      }

    }
  }
}

void sub_1CBD4998C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id _BRBlockRememberPersona(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD v7[4];
  id v8;
  id v9;

  v1 = a1;
  objc_msgSend(MEMORY[0x1E0DC5EE8], "sharedManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "currentPersona");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "userPersonaUniqueString");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = ___BRBlockRememberPersona_block_invoke;
    v7[3] = &unk_1E875EAA8;
    v8 = v4;
    v9 = v1;
    v5 = (void *)objc_msgSend(v7, "copy");

  }
  else
  {
    v5 = (void *)MEMORY[0x1D17A6DB0](v1);
  }

  return v5;
}

void sub_1CBD49D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBD4A050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBD4A254(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBD4A450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void sub_1CBD4A73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBD4A95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1CBD4B564(_Unwind_Exception *a1)
{
  _BRRestorePersona();
  _Unwind_Resume(a1);
}

uint64_t validateUserDouble(void *a1, double *a2, double *a3, double *a4)
{
  id v7;
  uint64_t v8;
  double v10;

  v7 = a1;
  if (v7)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0)
      || (objc_msgSend(v7, "doubleValue"), a2) && v10 < *a2
      || a3 && v10 > *a3)
    {
      v8 = 2;
    }
    else
    {
      *a4 = v10;
      v8 = 1;
    }
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

void sub_1CBD4B894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void sub_1CBD4BEAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBD4C1E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

__CFString *BRCPrettyPrintEnumWithContext(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  int *v7;
  __CFString *v8;
  uint64_t v9;
  id v10;
  void *v11;
  int v12;
  void *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __CFString *v21;
  void *v22;
  uint64_t v23;

  v5 = a3;
  v6 = v5;
  if (*(_QWORD *)(a2 + 8))
  {
    v7 = (int *)(a2 + 16);
    v8 = CFSTR("<unknown>");
    while (*((_QWORD *)v7 - 2) != a1)
    {
      v9 = *((_QWORD *)v7 + 2);
      v7 += 6;
      if (!v9)
        goto LABEL_18;
    }
    v10 = v5;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", *((_QWORD *)v7 - 1));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = *v7;
    if (*v7 == 2)
    {
      v22 = v11;
      v23 = 3;
    }
    else
    {
      if (v12 != 1)
      {
        if (v12)
        {
          brc_bread_crumbs();
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          brc_default_log();
          v14 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
            BRCPrettyPrintEnumWithContext_cold_1((uint64_t)v13, v14, v15, v16, v17, v18, v19, v20);

        }
        v21 = v11;
        goto LABEL_17;
      }
      v22 = v11;
      v23 = 1;
    }
    +[BRCDumpContext highlightedString:type:context:](BRCDumpContext, "highlightedString:type:context:", v22, v23, v10);
    v21 = (__CFString *)objc_claimAutoreleasedReturnValue();
LABEL_17:
    v8 = v21;

    goto LABEL_18;
  }
  v8 = CFSTR("<unknown>");
LABEL_18:

  return v8;
}

void brc_task_tracker_cancel(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  NSObject *v3;

  v1 = a1;
  if (!v1)
  {
    brc_bread_crumbs();
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
      brc_task_tracker_async_with_logs_and_qos_cold_1();

  }
  atomic_store(1u, v1 + 24);

}

brc_task_tracker *brc_task_tracker_create(const char *a1)
{
  brc_task_tracker *v2;
  void *v3;
  NSObject *v4;
  dispatch_group_t v5;
  OS_dispatch_group *group;

  v2 = objc_alloc_init(brc_task_tracker);
  if (!a1)
  {
    brc_bread_crumbs();
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      brc_task_tracker_create_cold_1();

    a1 = "unknown";
  }
  v2->label = strdup(a1);
  v5 = dispatch_group_create();
  group = v2->group;
  v2->group = (OS_dispatch_group *)v5;

  return v2;
}

void sub_1CBD4D480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t _brc_ipc_check_applibrary_proxy(void *a1, uint64_t a2, void *a3)
{
  id v5;
  void (**v6)(id, id);
  uint64_t v7;
  id v8;
  id v10;

  v5 = a1;
  v6 = a3;
  if (v5)
  {
    if (_brc_ipc_check_logged_status(v5, a2, v6))
    {
      v10 = 0;
      v7 = objc_msgSend(v5, "_isAppLibraryProxyWithError:", &v10);
      v8 = v10;
      if ((v7 & 1) == 0)
        v6[2](v6, v8);

    }
    else
    {
      v7 = 0;
    }
  }
  else
  {
    v7 = 1;
  }

  return v7;
}

void sub_1CBD4DCA4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _brc_ipc_check_client_privilege(void *a1, uint64_t a2, char a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  NSObject *v14;

  v9 = a1;
  v10 = a5;
  if (!v9)
  {
    v11 = 1;
    goto LABEL_10;
  }
  if (!_brc_ipc_check_logged_status(v9, a2, v10))
    goto LABEL_8;
  v11 = 1;
  if ((objc_msgSend(v9, "_entitlementBooleanValueForKey:", *MEMORY[0x1E0D10C28]) & 1) == 0 && (a3 & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "br_errorWithDomain:code:description:", *MEMORY[0x1E0D10B70], 26, CFSTR("%s privilege required"), a4);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v10 + 2))(v10, v12);

    brc_bread_crumbs();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, (os_log_type_t)0x90u))
      _brc_ipc_check_client_privilege_cold_1();

LABEL_8:
    v11 = 0;
  }
LABEL_10:

  return v11;
}

id ubiquitousItemHasUnresolvedConflicts(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = a1;
  if (objc_msgSend(v1, "isDocument"))
  {
    v2 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(v1, "asDocument");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "liveConflictLoserEtags");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "numberWithInt:", objc_msgSend(v4, "count") != 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v5 = (void *)MEMORY[0x1E0C9AAA0];
  }

  return v5;
}

uint64_t ubiquitousItemIsDownloading(void *a1)
{
  id v1;
  void *v2;
  int v3;
  void *v4;
  int v5;
  uint64_t v6;
  int v7;
  void *v8;
  void *v9;

  v1 = a1;
  +[BRCSystemResourcesManager manager](BRCSystemResourcesManager, "manager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isNetworkReachable");

  if (v3)
  {
    if (objc_msgSend(v1, "isDocument"))
    {
      objc_msgSend(v1, "asDocument");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_msgSend(v4, "downloadStatus");
      if (v5)
      {
        if (v5 == 3)
        {
          v6 = MEMORY[0x1E0C9AAA0];
        }
        else
        {
          v7 = objc_msgSend(v4, "isDownloadRequested");
          v6 = MEMORY[0x1E0C9AAA0];
          if (v7)
          {
            objc_msgSend(v4, "desiredVersion");
            v8 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v8, "downloadError");
            v9 = (void *)objc_claimAutoreleasedReturnValue();

            if (!v9)
              v6 = MEMORY[0x1E0C9AAB0];
          }
        }
      }
      else
      {
        v6 = 0;
      }

    }
    else
    {
      v6 = 0;
    }
  }
  else
  {
    v6 = MEMORY[0x1E0C9AAA0];
  }

  return v6;
}

id ubiquitousItemIsDownloadRequested(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = a1;
  if (objc_msgSend(v1, "isDocument"))
  {
    v2 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(v1, "asDocument");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "numberWithBool:", objc_msgSend(v3, "isDownloadRequested"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

id ubiquitousItemUploadingError(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = a1;
  if (objc_msgSend(v1, "isDocument"))
  {
    objc_msgSend(v1, "asDocument");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "uploadError");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    if (v3 && !objc_msgSend(v3, "brc_isCloudKitErrorRequiringAssetRescan"))
    {
      v4 = v3;
      goto LABEL_6;
    }

  }
  objc_msgSend(v1, "syncUpError");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v4;
LABEL_6:
  objc_msgSend(v4, "brc_wrappedError");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id ubiquitousItemDownloadingError(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = a1;
  if (objc_msgSend(v1, "isDocument"))
  {
    objc_msgSend(v1, "asDocument");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "desiredVersion");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "downloadError");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "brc_wrappedError");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ubiquitousItemIsShared(void *a1)
{
  id v1;
  char v2;
  uint64_t v3;
  void *v4;
  int v5;

  v1 = a1;
  v2 = objc_msgSend(v1, "isSharedByMe");
  v3 = MEMORY[0x1E0C9AAB0];
  if ((v2 & 1) == 0)
  {
    objc_msgSend(v1, "clientZone");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "isSharedZone");

    if (!v5)
      v3 = MEMORY[0x1E0C9AAA0];
  }

  return v3;
}

id ubiquitousSharedItemRole(void *a1)
{
  id v1;
  id *v2;
  void *v3;
  int v4;
  id v5;

  v1 = a1;
  if ((objc_msgSend(v1, "isSharedByMe") & 1) != 0)
  {
    v2 = (id *)MEMORY[0x1E0C99B98];
  }
  else
  {
    objc_msgSend(v1, "clientZone");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "isSharedZone");

    if (!v4)
    {
      v5 = 0;
      goto LABEL_7;
    }
    v2 = (id *)MEMORY[0x1E0C99BA0];
  }
  v5 = *v2;
LABEL_7:

  return v5;
}

id ubiquitousSharedItemOwnerName(void *a1)
{
  void *v1;
  void *v2;

  ubiquitousSharedItemOwnerNameComponents(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "br_formattedName");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id ubiquitousSharedItemOwnerNameComponents(void *a1)
{
  id v1;
  void *v2;
  int v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v9;
  NSObject *v10;

  v1 = a1;
  objc_msgSend(v1, "clientZone");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isSharedZone");

  if (v3)
  {
    objc_msgSend(v1, "ownerKey");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "db");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    +[BRCAccountSession userIdentityForKey:db:](BRCAccountSession, "userIdentityForKey:db:", v4, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v6)
    {
      brc_bread_crumbs();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
        ubiquitousSharedItemOwnerNameComponents_cold_1((uint64_t)v9, v10);

    }
    objc_msgSend(v6, "nameComponents");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

id ubiquitousItemLastEditorNameComponents(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "isDocument"))
  {
    objc_msgSend(v3, "asDocument");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "currentVersion");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "lastEditorUserIdentityWithDB:", v4);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v7 = 0;
  }
  objc_msgSend(v7, "nameComponentsAcceptUnknownUser:", 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

id ubiquitousSharedItemOldPermissions(void *a1)
{
  id v1;
  void *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  id *v6;
  id v7;

  v1 = a1;
  objc_msgSend(v1, "clientZone");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isSharedZone");

  if ((v3 & 1) == 0)
  {
    if (objc_msgSend(v1, "isSharedByMe"))
    {
      if ((objc_msgSend(v1, "sharingOptions") & 0x48) != 0)
      {
        v4 = 16;
        goto LABEL_6;
      }
      if (objc_msgSend(v1, "isDocument") && (objc_msgSend(v1, "sharingOptions") & 1) != 0)
      {
        v4 = 2;
        goto LABEL_6;
      }
    }
    v7 = 0;
    goto LABEL_12;
  }
  v4 = 32;
LABEL_6:
  v5 = objc_msgSend(v1, "sharingOptions");
  v6 = (id *)MEMORY[0x1E0C99B88];
  if ((v5 & v4) != 0)
    v6 = (id *)MEMORY[0x1E0C99B80];
  v7 = *v6;
LABEL_12:

  return v7;
}

id ubiquitousSharedItemCurrentUserPermissions(void *a1)
{
  id v1;
  void *v2;
  int v3;
  char v4;
  id *v5;
  int v6;
  id v7;

  v1 = a1;
  objc_msgSend(v1, "clientZone");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isSharedZone");

  if (v3)
  {
    v4 = objc_msgSend(v1, "sharingOptions");

    v5 = (id *)MEMORY[0x1E0C99B80];
    if ((v4 & 0x20) == 0)
      v5 = (id *)MEMORY[0x1E0C99B88];
  }
  else
  {
    v6 = objc_msgSend(v1, "isSharedByMe");

    if (!v6)
    {
      v7 = 0;
      return v7;
    }
    v5 = (id *)MEMORY[0x1E0C99B88];
  }
  v7 = *v5;
  return v7;
}

uint64_t ubiquitousItemIsUploading(void *a1)
{
  id v1;
  void *v2;
  int v3;
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;

  v1 = a1;
  +[BRCSystemResourcesManager manager](BRCSystemResourcesManager, "manager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isNetworkReachable");

  v4 = MEMORY[0x1E0C9AAA0];
  if (v3)
  {
    if (objc_msgSend(v1, "isDocument"))
    {
      objc_msgSend(v1, "asDocument");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "uploadStatus");

      v7 = MEMORY[0x1E0C9AAB0];
      if (v6 == 3)
        v7 = v4;
      if (v6)
        v4 = v7;
      else
        v4 = 0;
    }
    else
    {
      v4 = 0;
    }
  }

  return v4;
}

id ubiquitousItemLastEditorDeviceName(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "isDocument"))
  {
    objc_msgSend(v3, "asDocument");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "currentVersion");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "lastEditorDeviceDisplayNameWithDB:", v4);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

id ubiquitousItemLastEditorName(void *a1, void *a2)
{
  void *v2;
  void *v3;

  ubiquitousItemLastEditorNameComponents(a1, a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "br_formattedName");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id ubiquitousItemIsConflicted(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v1 = a1;
  if (objc_msgSend(v1, "isDocument"))
  {
    v2 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(v1, "asDocument");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "currentVersion");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "conflictLoserEtags");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "numberWithInt:", objc_msgSend(v5, "count") != 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v6 = (void *)MEMORY[0x1E0C9AAA0];
  }

  return v6;
}

id ubiquitousItemIdentifier(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = a1;
  objc_msgSend(v1, "itemID");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "session");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v2, "zoneUniqueItemIDStringWithSession:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id ubiquitousDocumentRecordID(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  if (objc_msgSend(v1, "isDocument"))
  {
    objc_msgSend(v1, "asDocument");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "documentRecordID");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

id ubiquitousEditedSinceShared(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = a1;
  if (objc_msgSend(v1, "isDocument") && (objc_msgSend(v1, "sharingOptions") & 0x48) != 0)
  {
    objc_msgSend(v1, "asDocument");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "currentVersion");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "editedSinceShared");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

id ubiquitousIsTopLevelSharedItem(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 v3;
  void *v4;

  v1 = a1;
  v2 = (void *)MEMORY[0x1E0CB37E8];
  v3 = (objc_msgSend(v1, "sharingOptions") & 4) != 0 && (objc_msgSend(v1, "sharingOptions") & 0x48) != 0;
  objc_msgSend(v2, "numberWithInt:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void OUTLINED_FUNCTION_0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x16u);
}

void sub_1CBD4F6DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void OUTLINED_FUNCTION_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, (os_log_type_t)0x90u, a4, a5, 0x16u);
}

void sub_1CBD50238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id location)
{
  id *v29;

  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

void __dispatch_async_with_logs_block_invoke(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  const char *label;
  __int128 v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *(_OWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  brc_bread_crumbs();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    label = dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32));
    *(_DWORD *)buf = 134218498;
    v8 = v5;
    v9 = 2080;
    v10 = label;
    v11 = 2112;
    v12 = v2;
    _os_log_debug_impl(&dword_1CBD43000, v3, OS_LOG_TYPE_DEBUG, "[DEBUG] ┳%llx continuing on %s%@", buf, 0x20u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  __brc_leave_section((uint64_t *)&v5);
}

void sub_1CBD50910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

uint64_t OUTLINED_FUNCTION_1_0(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)a1 + 32), "count");
}

uint64_t BRFieldCKInfoReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  BOOL v33;
  uint64_t v34;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 36) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_40;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_42;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_40:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_42:
          v33 = v19 != 0;
          v34 = 32;
          goto LABEL_47;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 2u;
          break;
        case 3u:
          PBReaderReadString();
          v30 = objc_claimAutoreleasedReturnValue();
          v31 = 16;
          goto LABEL_38;
        case 4u:
          PBReaderReadString();
          v30 = objc_claimAutoreleasedReturnValue();
          v31 = 24;
          goto LABEL_38;
        case 5u:
          PBReaderReadData();
          v30 = objc_claimAutoreleasedReturnValue();
          v31 = 8;
LABEL_38:
          v32 = *(void **)(a1 + v31);
          *(_QWORD *)(a1 + v31) = v30;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v27 = *v3;
        v28 = *(_QWORD *)(a2 + v27);
        if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
          break;
        v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
        *(_QWORD *)(a2 + v27) = v28 + 1;
        v26 |= (unint64_t)(v29 & 0x7F) << v24;
        if ((v29 & 0x80) == 0)
          goto LABEL_44;
        v24 += 7;
        v14 = v25++ >= 9;
        if (v14)
        {
          v26 = 0;
          goto LABEL_46;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_44:
      if (*(_BYTE *)(a2 + *v5))
        v26 = 0;
LABEL_46:
      v33 = v26 != 0;
      v34 = 33;
LABEL_47:
      *(_BYTE *)(a1 + v34) = v33;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL AppTelemetryQBSInvestigationReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  int *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 48) |= 2u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___AppTelemetryQBSInvestigation__serverTruthDirCount;
              goto LABEL_61;
            }
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              break;
            v17 += 7;
            v23 = v18++ > 8;
            if (v23)
            {
              v19 = 0;
              v24 = &OBJC_IVAR___AppTelemetryQBSInvestigation__serverTruthDirCount;
              goto LABEL_64;
            }
          }
          v24 = &OBJC_IVAR___AppTelemetryQBSInvestigation__serverTruthDirCount;
          goto LABEL_62;
        case 2u:
          v25 = 0;
          v26 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 48) |= 4u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___AppTelemetryQBSInvestigation__serverTruthDirFaultCount;
              goto LABEL_61;
            }
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 1;
            v19 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              v23 = v26++ > 8;
              if (v23)
              {
                v19 = 0;
                v24 = &OBJC_IVAR___AppTelemetryQBSInvestigation__serverTruthDirFaultCount;
                goto LABEL_64;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___AppTelemetryQBSInvestigation__serverTruthDirFaultCount;
          goto LABEL_62;
        case 3u:
          v30 = 0;
          v31 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 48) |= 1u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___AppTelemetryQBSInvestigation__clientTruthDirFaultCount;
              goto LABEL_61;
            }
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
            *(_QWORD *)(a2 + v32) = v33 + 1;
            v19 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              v23 = v31++ > 8;
              if (v23)
              {
                v19 = 0;
                v24 = &OBJC_IVAR___AppTelemetryQBSInvestigation__clientTruthDirFaultCount;
                goto LABEL_64;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___AppTelemetryQBSInvestigation__clientTruthDirFaultCount;
          goto LABEL_62;
        case 4u:
          v35 = 0;
          v36 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 48) |= 0x10u;
          while (2)
          {
            v37 = *v3;
            v38 = *(_QWORD *)(a2 + v37);
            if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___AppTelemetryQBSInvestigation__timeSinceLogin;
              goto LABEL_61;
            }
            v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
            *(_QWORD *)(a2 + v37) = v38 + 1;
            v19 |= (unint64_t)(v39 & 0x7F) << v35;
            if (v39 < 0)
            {
              v35 += 7;
              v23 = v36++ > 8;
              if (v23)
              {
                v19 = 0;
                v24 = &OBJC_IVAR___AppTelemetryQBSInvestigation__timeSinceLogin;
                goto LABEL_64;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___AppTelemetryQBSInvestigation__timeSinceLogin;
          goto LABEL_62;
        case 5u:
          v40 = 0;
          v41 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 48) |= 8u;
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
          return 0;
      }
      while (1)
      {
        v42 = *v3;
        v43 = *(_QWORD *)(a2 + v42);
        if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
          break;
        v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
        *(_QWORD *)(a2 + v42) = v43 + 1;
        v19 |= (unint64_t)(v44 & 0x7F) << v40;
        if ((v44 & 0x80) == 0)
        {
          v24 = &OBJC_IVAR___AppTelemetryQBSInvestigation__serverTruthTotalItemsCount;
          goto LABEL_62;
        }
        v40 += 7;
        v23 = v41++ > 8;
        if (v23)
        {
          v19 = 0;
          v24 = &OBJC_IVAR___AppTelemetryQBSInvestigation__serverTruthTotalItemsCount;
          goto LABEL_64;
        }
      }
      v24 = &OBJC_IVAR___AppTelemetryQBSInvestigation__serverTruthTotalItemsCount;
LABEL_61:
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_62:
      if (*(_BYTE *)(a2 + *v5))
        v19 = 0;
LABEL_64:
      *(_QWORD *)(a1 + *v24) = v19;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1CBD53D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_1_1(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, (uint8_t *)va, 0x16u);
}

void OUTLINED_FUNCTION_4(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void sub_1CBD54874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CBD54C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_3_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_4_1(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, (os_log_type_t)0x90u, a4, (uint8_t *)va, 0x16u);
}

void sub_1CBD5886C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  id *v28;

  objc_destroyWeak(v28);
  objc_destroyWeak(location);
  objc_destroyWeak(a9);
  objc_destroyWeak(&a28);
  _Unwind_Resume(a1);
}

void sub_1CBD59918(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void __dispatch_async_with_logs_block_invoke_0(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  const char *label;
  __int128 v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *(_OWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  brc_bread_crumbs();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    label = dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32));
    *(_DWORD *)buf = 134218498;
    v8 = v5;
    v9 = 2080;
    v10 = label;
    v11 = 2112;
    v12 = v2;
    _os_log_debug_impl(&dword_1CBD43000, v3, OS_LOG_TYPE_DEBUG, "[DEBUG] ┳%llx continuing on %s%@", buf, 0x20u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  __brc_leave_section((uint64_t *)&v5);
}

void sub_1CBD59A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

uint64_t _relocationCheck(void *a1, void *a2)
{
  id *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  int v12;
  id v13;
  __int16 v14;
  void *v15;
  __int16 v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  objc_msgSend(v3, "itemGlobalID");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "itemParentGlobalID");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v4
    && (objc_msgSend(v6, "isEqualToItemGlobalID:", v4) & 1) == 0
    && objc_msgSend(v3[1], "globalID:isStrictChildOfGlobalID:", v4, v5))
  {
    brc_bread_crumbs();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      v12 = 138412802;
      v13 = v4;
      v14 = 2112;
      v15 = v5;
      v16 = 2112;
      v17 = v8;
      _os_log_debug_impl(&dword_1CBD43000, v9, OS_LOG_TYPE_DEBUG, "[DEBUG] trying to reparent to %@, which is a descendent of myself (%@)%@", (uint8_t *)&v12, 0x20u);
    }

    v10 = 0;
  }
  else
  {
    v10 = 1;
  }

  return v10;
}

void sub_1CBD5A678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBD5AD54(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBD5AFB0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBD5B1C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBD5B440(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBD5B634(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

id queryPlanForSQL(const char *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0DE81E0], "rawInjection:length:", a1, strlen(a1));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(v3, "fetch:", CFSTR("explain query plan %@"), v5);

  objc_msgSend(v4, "appendFormat:", CFSTR("plan:\n"));
  if (objc_msgSend(v6, "next"))
  {
    do
    {
      objc_msgSend(v6, "stringAtIndex:", 3);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "appendFormat:", CFSTR("    %@\n"), v7);

    }
    while ((objc_msgSend(v6, "next") & 1) != 0);
  }

  return v4;
}

void sub_1CBD5D958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CBD5DEC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_4_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, a5, 0x16u);
}

void sub_1CBD5ECA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void sub_1CBD5EE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBD5F5A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14, uint64_t a15, uint64_t a16, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void dispatch_async_with_logs(void *a1, void *a2)
{
  NSObject *v3;
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  const char *label;
  _QWORD v12[4];
  NSObject *v13;
  id v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _BYTE buf[24];
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = (void *)MEMORY[0x1D17A6BE8]();
  v17 = 0uLL;
  v18 = 0;
  __brc_create_section(0, (uint64_t)"dispatch_async_with_logs", 262, &v17);
  brc_bread_crumbs();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v10 = v17;
    label = dispatch_queue_get_label(v3);
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = v10;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = label;
    *(_WORD *)&buf[22] = 2112;
    v20 = v6;
    _os_log_debug_impl(&dword_1CBD43000, v7, OS_LOG_TYPE_DEBUG, "[DEBUG] ┣%llx dispatching to %s%@", buf, 0x20u);
  }

  *(_QWORD *)&buf[16] = v18;
  *(_OWORD *)buf = v17;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __dispatch_async_with_logs_block_invoke_1;
  v12[3] = &unk_1E875D578;
  v15 = v17;
  v16 = v18;
  v8 = v3;
  v13 = v8;
  v9 = v4;
  v14 = v9;
  dispatch_async(v8, v12);

  objc_autoreleasePoolPop(v5);
}

void sub_1CBD5FDC4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBD60470(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBD605AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void sub_1CBD60978(_Unwind_Exception *a1)
{
  uint64_t v1;

  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 48));
  _Unwind_Resume(a1);
}

void sub_1CBD60AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void sub_1CBD60C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void sub_1CBD61040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  objc_sync_exit(obj);
  __brc_leave_section(&a38);
  _Unwind_Resume(a1);
}

void sub_1CBD61434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  void *v18;

  objc_sync_exit(v18);
  __brc_leave_section(&a18);
  _Unwind_Resume(a1);
}

void sub_1CBD617CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void sub_1CBD61CA8(_Unwind_Exception *a1)
{
  _BRRestorePersona();
  _Unwind_Resume(a1);
}

void sub_1CBD61F9C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBD62310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CBD62938(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;
  uint64_t v3;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 128));
  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void sub_1CBD62D04(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBD632C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void __dispatch_async_with_logs_block_invoke_1(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  const char *label;
  __int128 v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *(_OWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  brc_bread_crumbs();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    label = dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32));
    *(_DWORD *)buf = 134218498;
    v8 = v5;
    v9 = 2080;
    v10 = label;
    v11 = 2112;
    v12 = v2;
    _os_log_debug_impl(&dword_1CBD43000, v3, OS_LOG_TYPE_DEBUG, "[DEBUG] ┳%llx continuing on %s%@", buf, 0x20u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  __brc_leave_section((uint64_t *)&v5);
}

void sub_1CBD6358C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_3_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0x16u);
}

void OUTLINED_FUNCTION_9(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, (os_log_type_t)0x90u, a4, &a9, 0xCu);
}

uint64_t OUTLINED_FUNCTION_10(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)a3 = a4;
  *(_QWORD *)(a3 + 4) = result;
  *(_WORD *)(a3 + 12) = 2112;
  *(_QWORD *)(a3 + 14) = a2;
  return result;
}

void dispatch_async_with_logs_0(void *a1, void *a2)
{
  NSObject *v3;
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  const char *label;
  _QWORD v12[4];
  NSObject *v13;
  id v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _BYTE buf[24];
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = (void *)MEMORY[0x1D17A6BE8]();
  v17 = 0uLL;
  v18 = 0;
  __brc_create_section(0, (uint64_t)"dispatch_async_with_logs", 262, &v17);
  brc_bread_crumbs();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v10 = v17;
    label = dispatch_queue_get_label(v3);
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = v10;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = label;
    *(_WORD *)&buf[22] = 2112;
    v20 = v6;
    _os_log_debug_impl(&dword_1CBD43000, v7, OS_LOG_TYPE_DEBUG, "[DEBUG] ┣%llx dispatching to %s%@", buf, 0x20u);
  }

  *(_QWORD *)&buf[16] = v18;
  *(_OWORD *)buf = v17;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __dispatch_async_with_logs_block_invoke_2;
  v12[3] = &unk_1E875D578;
  v15 = v17;
  v16 = v18;
  v8 = v3;
  v13 = v8;
  v9 = v4;
  v14 = v9;
  dispatch_async(v8, v12);

  objc_autoreleasePoolPop(v5);
}

void sub_1CBD640F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBD6438C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  id *v30;
  id *v31;
  id *v32;
  uint64_t v33;

  objc_destroyWeak(v32);
  objc_destroyWeak(v31);
  objc_destroyWeak(v30);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v33 - 136), 8);
  objc_destroyWeak((id *)(v33 - 88));
  _Unwind_Resume(a1);
}

void sub_1CBD643EC()
{
  JUMPOUT(0x1CBD643DCLL);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{

}

void sub_1CBD648CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBD64EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void __dispatch_async_with_logs_block_invoke_2(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  const char *label;
  __int128 v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *(_OWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  brc_bread_crumbs();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    label = dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32));
    *(_DWORD *)buf = 134218498;
    v8 = v5;
    v9 = 2080;
    v10 = label;
    v11 = 2112;
    v12 = v2;
    _os_log_debug_impl(&dword_1CBD43000, v3, OS_LOG_TYPE_DEBUG, "[DEBUG] ┳%llx continuing on %s%@", buf, 0x20u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  __brc_leave_section((uint64_t *)&v5);
}

void sub_1CBD6504C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void sub_1CBD67910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{

}

id brc_string_from_xattr(int a1, const char *a2)
{
  ssize_t v2;
  _BYTE value[1024];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = fgetxattr(a1, a2, value, 0x3FFuLL, 0, 0);
  if ((unint64_t)(v2 - 1023) < 0xFFFFFFFFFFFFFC02 || value[0] == 0)
    return 0;
  value[v2 + 1] = 0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", value);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_1CBD69CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBD6A7F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBD6B1AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBD6C5A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_11_0(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void sub_1CBD6D488(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBD6D5C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBD6D774(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBD6FF44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

id _issueReadWriteSandboxExtensionForURL(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  NSObject *v6;
  id v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  id v12;
  __int16 v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = *MEMORY[0x1E0C80008];
  v8 = 0;
  objc_msgSend(v1, "brc_issueSandboxExtensionOfClass:error:", v2, &v8);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v8;
  if (v3)
  {
    brc_bread_crumbs();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    brc_notifications_log();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      _issueReadWriteSandboxExtensionForURL_cold_1();
  }
  else
  {
    brc_bread_crumbs();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, (os_log_type_t)0x90u))
    {
      *(_DWORD *)buf = 138412802;
      v10 = v1;
      v11 = 2112;
      v12 = v4;
      v13 = 2112;
      v14 = v5;
      _os_log_error_impl(&dword_1CBD43000, v6, (os_log_type_t)0x90u, "[ERROR] failed to issue sandbox extension for %@: %@%@", buf, 0x20u);
    }
  }

  return v3;
}

uint64_t BRFieldFinderTagsReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  void *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        if (v17)
          objc_msgSend(a1, "addTags:", v17);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1CBD70D4C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBD70E00(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBD70EA8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBD719E0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 144));
  _Unwind_Resume(a1);
}

void sub_1CBD71BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBD72334(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBD7387C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBD73D0C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void __br_notify_register_dispatch_block_invoke_2()
{
  uint64_t v0;
  void *v1;
  id v2;

  objc_msgSend(MEMORY[0x1E0DC5F00], "personaAttributesForPersonaType:", 0);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "userPersonaUniqueString");
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)_block_invoke___personalPersona;
  _block_invoke___personalPersona = v0;

}

void sub_1CBD75648(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBD757B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBD75ABC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBD75BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CBD76D24(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

uint64_t create_control_file(char *a1, __darwin_ino64_t *a2, int a3)
{
  int v6;
  void *v7;
  NSObject *v8;
  int v9;
  char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (!a3 || !unlink(a1) || *__error() == 2)
    return file_id_from_control_file(a1, a2, 0);
  v6 = *__error();
  brc_bread_crumbs();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, (os_log_type_t)0x90u))
  {
    v9 = 136315650;
    v10 = a1;
    v11 = 1024;
    v12 = v6;
    v13 = 2112;
    v14 = v7;
    _os_log_error_impl(&dword_1CBD43000, v8, (os_log_type_t)0x90u, "[ERROR] failed unlinking '%s' %{errno}d%@", (uint8_t *)&v9, 0x1Cu);
  }

  *__error() = v6;
  return 0xFFFFFFFFLL;
}

uint64_t file_id_from_control_file(const char *a1, __darwin_ino64_t *a2, int a3)
{
  int v5;
  int v6;
  int v7;
  void *v8;
  NSObject *v9;
  int v10;
  int v11;
  void *v12;
  NSObject *v13;
  uint64_t result;
  void *v15;
  NSObject *v16;
  stat v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  memset(&v17, 0, sizeof(v17));
  if (a3)
    v5 = open(a1, 33028, 384);
  else
    v5 = open(a1, 773, 384);
  if (v5 < 0)
  {
    v11 = *__error();
    brc_bread_crumbs();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, (os_log_type_t)0x90u))
    {
      *(_DWORD *)buf = 136315650;
      v19 = a1;
      v20 = 1024;
      v21 = v11;
      v22 = 2112;
      v23 = v12;
      _os_log_error_impl(&dword_1CBD43000, v13, (os_log_type_t)0x90u, "[ERROR] failed opening '%s' %{errno}d%@", buf, 0x1Cu);
    }

    *__error() = v11;
    return 0xFFFFFFFFLL;
  }
  v6 = v5;
  if (fstat(v5, &v17))
  {
    v7 = *__error();
    brc_bread_crumbs();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, (os_log_type_t)0x90u))
    {
      *(_DWORD *)buf = 136315650;
      v19 = a1;
      v20 = 1024;
      v21 = v7;
      v22 = 2112;
      v23 = v8;
      _os_log_error_impl(&dword_1CBD43000, v9, (os_log_type_t)0x90u, "[ERROR] failed stating '%s' %{errno}d%@", buf, 0x1Cu);
    }

    *__error() = v7;
    v10 = *__error();
    close(v6);
    *__error() = v10;
    return 0xFFFFFFFFLL;
  }
  if (close(v6))
  {
    brc_bread_crumbs();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, (os_log_type_t)0x90u))
      file_id_from_control_file_cold_1();

  }
  result = 0;
  *a2 = v17.st_ino;
  return result;
}

void sub_1CBD7C760(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1CBD7CB4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  id *v22;
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  __brc_leave_section(&a22);
  _Unwind_Resume(a1);
}

void sub_1CBD7CE90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBD7D67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{

}

void sub_1CBD7F924(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBD7FB94(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_6_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0x16u);
}

void OUTLINED_FUNCTION_16(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, (uint8_t *)va, 0x1Eu);
}

void OUTLINED_FUNCTION_17(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, (uint8_t *)va, 0x18u);
}

void OUTLINED_FUNCTION_19(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0x12u);
}

void sub_1CBD81F10(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBD81FA0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBD82578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void BRSetupAARequest(void *a1)
{
  uint64_t v1;
  const void *v2;
  id v3;

  v3 = a1;
  v1 = _CFHTTPCookieStorageCreateWithProperties();
  if (v1)
  {
    v2 = (const void *)v1;
    objc_msgSend(v3, "setCookieStorage:", v1);
    CFRelease(v2);
  }

}

void sub_1CBD82984(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBD82C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBD830E8(_Unwind_Exception *a1)
{
  _BRRestorePersona();
  _Unwind_Resume(a1);
}

void sub_1CBD833D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBD837B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBD83824(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBD84694(_Unwind_Exception *a1)
{
  uint64_t v1;

  __brc_leave_section((uint64_t *)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_1CBD8528C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  __brc_leave_section(&a26);
  _Unwind_Resume(a1);
}

void sub_1CBD857F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{

}

void sub_1CBD85BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBD867EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  _Block_object_dispose(&a24, 8);
  __brc_leave_section(&a44);
  _Unwind_Resume(a1);
}

void sub_1CBD86948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1CBD87198(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBD87D30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const __CFString *a11, uint64_t a12, char a13)
{
  _QWORD *v13;
  void *v14;
  id v15;
  void *v16;
  NSObject *v17;
  void *v18;
  id v19;
  void *v20;
  NSObject *v21;
  void *v22;
  BRCFPFSMigrationScheduler *v23;
  id v24;
  void *v25;
  NSObject *v26;
  void *v27;
  NSObject *v28;
  void *v29;
  void *v30;

  if (a2 == 3)
  {
    v15 = objc_begin_catch(exception_object);
    brc_bread_crumbs();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, (os_log_type_t)0x90u))
    {
      objc_msgSend(v15, "reason");
      objc_claimAutoreleasedReturnValue();
      -[BRCAccountHandler _tryToOpenSession:error:].cold.1();
    }

    objc_msgSend(MEMORY[0x1E0CB35C8], "br_errorWithDomain:code:description:", *MEMORY[0x1E0D10B70], 22, CFSTR("Disabled - iCloud Drive database is from the future"));
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "setLoggedOutError:", v18);

    if (v13)
    {
      objc_msgSend(v14, "loggedOutError");
      *v13 = (id)objc_claimAutoreleasedReturnValue();
    }

    objc_end_catch();
  }
  else if (a2 == 2)
  {
    v19 = objc_begin_catch(exception_object);
    brc_bread_crumbs();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, (os_log_type_t)0x90u))
    {
      objc_msgSend(v19, "reason");
      objc_claimAutoreleasedReturnValue();
      -[BRCAccountHandler _tryToOpenSession:error:].cold.2();
    }

    objc_msgSend(MEMORY[0x1E0CB35C8], "br_errorWithDomain:code:description:", *MEMORY[0x1E0D10B70], 111, CFSTR("Disabled - iCloud Drive database is from FPFS but we are in Legacy"));
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "setLoggedOutError:", v22);

    if (v13)
    {
      objc_msgSend(v14, "loggedOutError");
      *v13 = (id)objc_claimAutoreleasedReturnValue();
    }
    v23 = objc_alloc_init(BRCFPFSMigrationScheduler);
    -[BRCFPFSMigrationScheduler fixFPFSFeatureFlagUserDefaults](v23, "fixFPFSFeatureFlagUserDefaults");

    objc_end_catch();
  }
  else
  {
    if (a2 != 1)
      _Unwind_Resume(exception_object);
    v24 = objc_begin_catch(exception_object);
    brc_bread_crumbs();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, (os_log_type_t)0x90u))
      -[BRCAccountHandler _tryToOpenSession:error:].cold.4();

    brc_bread_crumbs();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, (os_log_type_t)0x90u))
    {
      objc_msgSend(v24, "callStackSymbols");
      objc_claimAutoreleasedReturnValue();
      -[BRCAccountHandler _tryToOpenSession:error:].cold.3();
    }

    if (v13)
    {
      v29 = (void *)MEMORY[0x1E0CB35C8];
      a11 = CFSTR("exception");
      a12 = (uint64_t)v24;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &a12, &a11, 1);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v29, "errorWithDomain:code:userInfo:", *MEMORY[0x1E0D10B70], 9999, v30);
      *v13 = (id)objc_claimAutoreleasedReturnValue();

    }
    objc_end_catch();
  }
  JUMPOUT(0x1CBD87C7CLL);
}

void sub_1CBD88E74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBD891B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBD89550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBD8A280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Block_object_dispose(&a30, 8);
  _Unwind_Resume(a1);
}

void __dispatch_async_with_logs_block_invoke_3(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  const char *label;
  __int128 v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *(_OWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  brc_bread_crumbs();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    label = dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32));
    *(_DWORD *)buf = 134218498;
    v8 = v5;
    v9 = 2080;
    v10 = label;
    v11 = 2112;
    v12 = v2;
    _os_log_debug_impl(&dword_1CBD43000, v3, OS_LOG_TYPE_DEBUG, "[DEBUG] ┳%llx continuing on %s%@", buf, 0x20u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  __brc_leave_section((uint64_t *)&v5);
}

void sub_1CBD8B25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void __dispatch_group_async_with_logs_block_invoke(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  const char *label;
  __int128 v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *(_OWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  brc_bread_crumbs();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    label = dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32));
    *(_DWORD *)buf = 134218498;
    v8 = v5;
    v9 = 2080;
    v10 = label;
    v11 = 2112;
    v12 = v2;
    _os_log_debug_impl(&dword_1CBD43000, v3, OS_LOG_TYPE_DEBUG, "[DEBUG] ┳%llx continuing on %s%@", buf, 0x20u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  __brc_leave_section((uint64_t *)&v5);
}

void sub_1CBD8B39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void __brc_dispatch_async_autorelease_with_logs_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  const char *label;
  __int128 v6;
  uint64_t v7;
  uint8_t buf[4];
  uint64_t v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17A6BE8]();
  v6 = *(_OWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 64);
  brc_bread_crumbs();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    label = dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32));
    *(_DWORD *)buf = 134218498;
    v9 = v6;
    v10 = 2080;
    v11 = label;
    v12 = 2112;
    v13 = v3;
    _os_log_debug_impl(&dword_1CBD43000, v4, OS_LOG_TYPE_DEBUG, "[DEBUG] ┳%llx continuing on %s%@", buf, 0x20u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  __brc_leave_section((uint64_t *)&v6);
  objc_autoreleasePoolPop(v2);
}

void sub_1CBD8B4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_14_0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, (uint8_t *)va, 0x12u);
}

void OUTLINED_FUNCTION_15(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, (os_log_type_t)0x90u, a4, (uint8_t *)va, 0x12u);
}

void sub_1CBD8B914(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1CBD8BD84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  void *v16;
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  objc_sync_exit(v16);
  _Unwind_Resume(a1);
}

void sub_1CBD8C1A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  void *v16;
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  objc_sync_exit(v16);
  _Unwind_Resume(a1);
}

void sub_1CBD8C7A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBD8CE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

void sub_1CBD8DF88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  __brc_leave_section(&a38);
  _Unwind_Resume(a1);
}

void sub_1CBD8EA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  __brc_leave_section(&a61);
  _Unwind_Resume(a1);
}

void sub_1CBD8F4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBD90E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CBD915DC(_Unwind_Exception *a1)
{
  _BRRestorePersona();
  _Unwind_Resume(a1);
}

void sub_1CBD9260C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id BRDiskCheckerServiceConnection()
{
  void *v0;
  void *v1;

  v0 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3B38]), "initWithServiceName:", CFSTR("com.apple.iCloudDriveCore.telemetry-disk-checker"));
  BRDiskCheckerServiceInterface();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setRemoteObjectInterface:", v1);

  objc_msgSend(v0, "resume");
  return v0;
}

void sub_1CBD92BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CBD92EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{

}

void sub_1CBD99CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a61, 8);
  _Block_object_dispose(&STACK[0x270], 8);
  _Unwind_Resume(a1);
}

id BRDiskCheckerServiceInterface()
{
  if (BRDiskCheckerServiceInterface_onceToken != -1)
    dispatch_once(&BRDiskCheckerServiceInterface_onceToken, &__block_literal_global_626);
  return (id)BRDiskCheckerServiceInterface_interface;
}

void OUTLINED_FUNCTION_10_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x20u);
}

uint64_t _buddyHasFinished(uint64_t a1, void *a2)
{
  void *v3;
  NSObject *v4;
  int v6;
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  brc_bread_crumbs();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 138412290;
    v7 = v3;
    _os_log_impl(&dword_1CBD43000, v4, OS_LOG_TYPE_DEFAULT, "[NOTICE] BYSetupAssistantFinishedDarwinNotification was received%@", (uint8_t *)&v6, 0xCu);
  }

  return objc_msgSend(a2, "_stopObservingBuddyAndExecuteCallbacks");
}

void sub_1CBD9D258(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Block_object_dispose((const void *)(v2 - 128), 8);
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{

}

void sub_1CBD9D690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1CBD9D764(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBD9D9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBD9DC14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBD9E1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBD9E65C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBD9E948(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBD9EACC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL BRCExtensionErrorPayloadReadFrom(char *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((int)(v10 >> 3) > 16)
      {
        if ((_DWORD)v17 == 17)
        {
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 8;
          goto LABEL_28;
        }
        if ((_DWORD)v17 == 18)
        {
          PBReaderReadString();
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          if (v20)
            objc_msgSend(a1, "addRecordIds:", v20);
          goto LABEL_29;
        }
      }
      else
      {
        if ((_DWORD)v17 == 1)
        {
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 16;
          goto LABEL_28;
        }
        if ((_DWORD)v17 == 16)
        {
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 24;
LABEL_28:
          v20 = *(void **)&a1[v19];
          *(_QWORD *)&a1[v19] = v18;
LABEL_29:

          continue;
        }
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1CBDA05F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  id *v28;
  id *v29;
  id *v30;
  uint64_t v31;

  objc_destroyWeak(v30);
  _Block_object_dispose(&a28, 8);
  objc_destroyWeak(v29);
  objc_destroyWeak(v28);
  objc_destroyWeak((id *)(v31 - 184));
  _Unwind_Resume(a1);
}

void sub_1CBDA0A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void sub_1CBDA0D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void sub_1CBDA0EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void sub_1CBDA1220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBDA1320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

uint64_t BRCItemFieldsPrettyPrint()
{
  return BRCPrettyPrintBitmap();
}

uint64_t BRCIsBusyDate(uint64_t a1)
{
  return objc_msgSend(MEMORY[0x1E0D1D0A8], "dateIsBusyFolderDate:", (double)a1 - *MEMORY[0x1E0C9ADF8]);
}

uint64_t BRFieldPkgItemReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t result;
  void *v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_62;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_64;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_62:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_64:
          *(_DWORD *)(a1 + 56) = v19;
          continue;
        case 2u:
          PBReaderReadString();
          v23 = objc_claimAutoreleasedReturnValue();
          v24 = 24;
          goto LABEL_53;
        case 3u:
          v25 = 0;
          v26 = 0;
          v27 = 0;
          *(_BYTE *)(a1 + 64) |= 1u;
          while (2)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
              *(_QWORD *)(a2 + v28) = v29 + 1;
              v27 |= (unint64_t)(v30 & 0x7F) << v25;
              if (v30 < 0)
              {
                v25 += 7;
                v14 = v26++ >= 9;
                if (v14)
                {
                  v27 = 0;
                  goto LABEL_68;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v27 = 0;
LABEL_68:
          v50 = 8;
          goto LABEL_82;
        case 4u:
          v31 = 0;
          v32 = 0;
          v33 = 0;
          *(_BYTE *)(a1 + 64) |= 8u;
          while (2)
          {
            v34 = *v3;
            v35 = *(_QWORD *)(a2 + v34);
            if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
              *(_QWORD *)(a2 + v34) = v35 + 1;
              v33 |= (unint64_t)(v36 & 0x7F) << v31;
              if (v36 < 0)
              {
                v31 += 7;
                v14 = v32++ >= 9;
                if (v14)
                {
                  v33 = 0;
                  goto LABEL_72;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v33 = 0;
LABEL_72:
          v51 = v33 != 0;
          v52 = 61;
          goto LABEL_77;
        case 5u:
          v37 = 0;
          v38 = 0;
          v39 = 0;
          *(_BYTE *)(a1 + 64) |= 4u;
          while (2)
          {
            v40 = *v3;
            v41 = *(_QWORD *)(a2 + v40);
            if (v41 == -1 || v41 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v42 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v41);
              *(_QWORD *)(a2 + v40) = v41 + 1;
              v39 |= (unint64_t)(v42 & 0x7F) << v37;
              if (v42 < 0)
              {
                v37 += 7;
                v14 = v38++ >= 9;
                if (v14)
                {
                  v39 = 0;
                  goto LABEL_76;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v39 = 0;
LABEL_76:
          v51 = v39 != 0;
          v52 = 60;
LABEL_77:
          *(_BYTE *)(a1 + v52) = v51;
          continue;
        case 6u:
          PBReaderReadString();
          v23 = objc_claimAutoreleasedReturnValue();
          v24 = 48;
          goto LABEL_53;
        case 7u:
          PBReaderReadData();
          v23 = objc_claimAutoreleasedReturnValue();
          v24 = 32;
          goto LABEL_53;
        case 0xFu:
          PBReaderReadData();
          v23 = objc_claimAutoreleasedReturnValue();
          v24 = 40;
LABEL_53:
          v44 = *(void **)(a1 + v24);
          *(_QWORD *)(a1 + v24) = v23;

          continue;
        case 0x10u:
          v45 = 0;
          v46 = 0;
          v27 = 0;
          *(_BYTE *)(a1 + 64) |= 2u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v47 = *v3;
        v48 = *(_QWORD *)(a2 + v47);
        if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v4))
          break;
        v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
        *(_QWORD *)(a2 + v47) = v48 + 1;
        v27 |= (unint64_t)(v49 & 0x7F) << v45;
        if ((v49 & 0x80) == 0)
          goto LABEL_79;
        v45 += 7;
        v14 = v46++ >= 9;
        if (v14)
        {
          v27 = 0;
          goto LABEL_81;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_79:
      if (*(_BYTE *)(a2 + *v5))
        v27 = 0;
LABEL_81:
      v50 = 16;
LABEL_82:
      *(_QWORD *)(a1 + v50) = v27;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1CBDA6838(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBDA69C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7(uint64_t a1)
{

}

void dispatch_async_with_logs_1(void *a1, void *a2)
{
  NSObject *v3;
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  const char *label;
  _QWORD v12[4];
  NSObject *v13;
  id v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _BYTE buf[24];
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = (void *)MEMORY[0x1D17A6BE8]();
  v17 = 0uLL;
  v18 = 0;
  __brc_create_section(0, (uint64_t)"dispatch_async_with_logs", 262, &v17);
  brc_bread_crumbs();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  brc_notifications_log();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v10 = v17;
    label = dispatch_queue_get_label(v3);
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = v10;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = label;
    *(_WORD *)&buf[22] = 2112;
    v20 = v6;
    _os_log_debug_impl(&dword_1CBD43000, v7, OS_LOG_TYPE_DEBUG, "[NOTIF] ┣%llx dispatching to %s%@", buf, 0x20u);
  }

  *(_QWORD *)&buf[16] = v18;
  *(_OWORD *)buf = v17;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __dispatch_async_with_logs_block_invoke_4;
  v12[3] = &unk_1E875D578;
  v15 = v17;
  v16 = v18;
  v8 = v3;
  v13 = v8;
  v9 = v4;
  v14 = v9;
  dispatch_async(v8, v12);

  objc_autoreleasePoolPop(v5);
}

void sub_1CBDA6FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1CBDA74FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  __brc_leave_section(&a20);
  _Unwind_Resume(a1);
}

void sub_1CBDA77EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBDA7C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBDA7D9C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void __dispatch_async_with_logs_block_invoke_4(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  const char *label;
  __int128 v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *(_OWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  brc_bread_crumbs();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  brc_notifications_log();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    label = dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32));
    *(_DWORD *)buf = 134218498;
    v8 = v5;
    v9 = 2080;
    v10 = label;
    v11 = 2112;
    v12 = v2;
    _os_log_debug_impl(&dword_1CBD43000, v3, OS_LOG_TYPE_DEBUG, "[NOTIF] ┳%llx continuing on %s%@", buf, 0x20u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  __brc_leave_section((uint64_t *)&v5);
}

void sub_1CBDA7F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void sub_1CBDA81A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8(uint64_t a1)
{

}

void OUTLINED_FUNCTION_8_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0x1Cu);
}

void sub_1CBDAFF88(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBDB0244(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_3_3(void *a1, const char *a2)
{
  return objc_msgSend(a1, "code");
}

uint64_t brc_mutex_init_recursive(pthread_mutex_t *a1)
{
  pthread_mutexattr_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v3.__sig = 0;
  *(_QWORD *)v3.__opaque = 0;
  pthread_mutexattr_init(&v3);
  pthread_mutexattr_settype(&v3, 2);
  LODWORD(a1) = pthread_mutex_init(a1, &v3);
  pthread_mutexattr_destroy(&v3);
  if ((_DWORD)a1)
    brc_mutex_abort((uint64_t)"Can't init mutex");
  return 0;
}

void brc_mutex_abort(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  void *v7;

  brc_bread_crumbs();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
  {
    v4 = 136315394;
    v5 = a1;
    v6 = 2112;
    v7 = v2;
    _os_log_fault_impl(&dword_1CBD43000, v3, OS_LOG_TYPE_FAULT, "[CRIT] UNREACHABLE: mutex error: %s%@", (uint8_t *)&v4, 0x16u);
  }

  __break(1u);
}

uint64_t brc_mutex_init(pthread_mutex_t *a1)
{
  pthread_mutexattr_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v3.__sig = 0;
  *(_QWORD *)v3.__opaque = 0;
  pthread_mutexattr_init(&v3);
  pthread_mutexattr_settype(&v3, 1);
  LODWORD(a1) = pthread_mutex_init(a1, &v3);
  pthread_mutexattr_destroy(&v3);
  if ((_DWORD)a1)
    brc_mutex_abort((uint64_t)"Can't init mutex");
  return 0;
}

uint64_t brc_mutex_destroy(pthread_mutex_t *a1)
{
  uint64_t result;

  result = pthread_mutex_destroy(a1);
  if ((_DWORD)result)
    brc_mutex_abort((uint64_t)"Can't destroy mutex");
  return result;
}

uint64_t brc_mutex_lock(pthread_mutex_t *a1)
{
  uint64_t result;

  result = pthread_mutex_lock(a1);
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 11)
      brc_mutex_abort((uint64_t)"Dead lock");
    brc_mutex_abort((uint64_t)"Invalid mutex");
  }
  return result;
}

uint64_t brc_mutex_unlock(pthread_mutex_t *a1)
{
  uint64_t result;

  result = pthread_mutex_unlock(a1);
  if ((_DWORD)result)
    brc_mutex_abort((uint64_t)"Can't unlock mutex");
  return result;
}

uint64_t brc_mutex_assert_locked(pthread_mutex_t *a1)
{
  uint64_t result;

  result = pthread_mutex_lock(a1);
  if ((_DWORD)result != 11)
    brc_mutex_abort((uint64_t)"Mutex should already be locked");
  return result;
}

uint64_t brc_mutex_assert_unlocked(pthread_mutex_t *a1)
{
  uint64_t result;

  result = pthread_mutex_lock(a1);
  if (!(_DWORD)result)
    return pthread_mutex_unlock(a1);
  if ((_DWORD)result == 11)
    brc_mutex_abort((uint64_t)"Mutex should already be locked");
  return result;
}

void sub_1CBDB1D7C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_1CBDB219C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  id *v25;

  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CBDB34C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CBDB36DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBDB39CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  __brc_leave_section((uint64_t *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_1CBDB3CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBDB3FD4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void __dispatch_async_with_logs_block_invoke_5(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  const char *label;
  __int128 v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *(_OWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  brc_bread_crumbs();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    label = dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32));
    *(_DWORD *)buf = 134218498;
    v8 = v5;
    v9 = 2080;
    v10 = label;
    v11 = 2112;
    v12 = v2;
    _os_log_debug_impl(&dword_1CBD43000, v3, OS_LOG_TYPE_DEBUG, "[DEBUG] ┳%llx continuing on %s%@", buf, 0x20u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  __brc_leave_section((uint64_t *)&v5);
}

void sub_1CBDB42C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

uint64_t AppTelemetryInvestigationReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  void *v50;
  AppTelemetryQBSInvestigation *v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 0x3E8u:
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 128;
        goto LABEL_65;
      case 0x3E9u:
        v20 = 0;
        v21 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 144) |= 0x40u;
        while (2)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
            *(_QWORD *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              v14 = v21++ >= 9;
              if (v14)
              {
                v22 = 0;
                goto LABEL_98;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v22 = 0;
LABEL_98:
        v63 = v22 != 0;
        v64 = 140;
        goto LABEL_124;
      case 0x3EAu:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 32;
        goto LABEL_65;
      case 0x3EBu:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        *(_BYTE *)(a1 + 144) |= 1u;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v28 = 0;
                goto LABEL_102;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v28 = 0;
LABEL_102:
        v65 = 8;
        goto LABEL_119;
      case 0x3ECu:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 24;
        goto LABEL_65;
      case 0x3EDu:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 72;
        goto LABEL_65;
      case 0x3EEu:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 64;
        goto LABEL_65;
      case 0x3EFu:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 112;
        goto LABEL_65;
      case 0x3F0u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 88;
        goto LABEL_65;
      case 0x3F1u:
        v32 = 0;
        v33 = 0;
        v34 = 0;
        *(_BYTE *)(a1 + 144) |= 0x20u;
        while (2)
        {
          v35 = *v3;
          v36 = *(_QWORD *)(a2 + v35);
          if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
            *(_QWORD *)(a2 + v35) = v36 + 1;
            v34 |= (unint64_t)(v37 & 0x7F) << v32;
            if (v37 < 0)
            {
              v32 += 7;
              v14 = v33++ >= 9;
              if (v14)
              {
                v34 = 0;
                goto LABEL_106;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v34 = 0;
LABEL_106:
        v63 = v34 != 0;
        v64 = 139;
        goto LABEL_124;
      case 0x3F2u:
        v38 = 0;
        v39 = 0;
        v40 = 0;
        *(_BYTE *)(a1 + 144) |= 4u;
        while (2)
        {
          v41 = *v3;
          v42 = *(_QWORD *)(a2 + v41);
          if (v42 == -1 || v42 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v42);
            *(_QWORD *)(a2 + v41) = v42 + 1;
            v40 |= (unint64_t)(v43 & 0x7F) << v38;
            if (v43 < 0)
            {
              v38 += 7;
              v14 = v39++ >= 9;
              if (v14)
              {
                v40 = 0;
                goto LABEL_110;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v40 = 0;
LABEL_110:
        v63 = v40 != 0;
        v64 = 136;
        goto LABEL_124;
      case 0x3F3u:
        v44 = 0;
        v45 = 0;
        v46 = 0;
        *(_BYTE *)(a1 + 144) |= 0x10u;
        while (2)
        {
          v47 = *v3;
          v48 = *(_QWORD *)(a2 + v47);
          if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
            *(_QWORD *)(a2 + v47) = v48 + 1;
            v46 |= (unint64_t)(v49 & 0x7F) << v44;
            if (v49 < 0)
            {
              v44 += 7;
              v14 = v45++ >= 9;
              if (v14)
              {
                v46 = 0;
                goto LABEL_114;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v46 = 0;
LABEL_114:
        v63 = v46 != 0;
        v64 = 138;
        goto LABEL_124;
      case 0x3F4u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 40;
        goto LABEL_65;
      case 0x3F5u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 80;
LABEL_65:
        v50 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_125;
      case 0x3F6u:
        v51 = objc_alloc_init(AppTelemetryQBSInvestigation);
        objc_storeStrong((id *)(a1 + 96), v51);
        if (!PBReaderPlaceMark() || !AppTelemetryQBSInvestigationReadFrom((uint64_t)v51, a2))
          goto LABEL_127;
        goto LABEL_87;
      case 0x3F7u:
        v51 = objc_alloc_init(AppTelemetryQBSPerformance);
        objc_storeStrong((id *)(a1 + 104), v51);
        if (!PBReaderPlaceMark() || (AppTelemetryQBSPerformanceReadFrom((uint64_t)v51, a2) & 1) == 0)
          goto LABEL_127;
        goto LABEL_87;
      case 0x3F8u:
        v51 = objc_alloc_init(AppTelemetryFPFSMigrationInvestigation);
        objc_storeStrong((id *)(a1 + 48), v51);
        if (!PBReaderPlaceMark()
          || (AppTelemetryFPFSMigrationInvestigationReadFrom((uint64_t)v51, a2) & 1) == 0)
        {
          goto LABEL_127;
        }
        goto LABEL_87;
      case 0x3F9u:
        v52 = 0;
        v53 = 0;
        v28 = 0;
        *(_BYTE *)(a1 + 144) |= 2u;
        while (2)
        {
          v54 = *v3;
          v55 = *(_QWORD *)(a2 + v54);
          if (v55 == -1 || v55 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v56 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v55);
            *(_QWORD *)(a2 + v54) = v55 + 1;
            v28 |= (unint64_t)(v56 & 0x7F) << v52;
            if (v56 < 0)
            {
              v52 += 7;
              v14 = v53++ >= 9;
              if (v14)
              {
                v28 = 0;
                goto LABEL_118;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v28 = 0;
LABEL_118:
        v65 = 16;
LABEL_119:
        *(_QWORD *)(a1 + v65) = v28;
        goto LABEL_125;
      case 0x3FAu:
        v51 = objc_alloc_init(AppTelemetryFPFSMigrationNonMigratedItemInvestigation);
        objc_storeStrong((id *)(a1 + 56), v51);
        if (!PBReaderPlaceMark()
          || (AppTelemetryFPFSMigrationNonMigratedItemInvestigationReadFrom((uint64_t)v51, a2) & 1) == 0)
        {
          goto LABEL_127;
        }
        goto LABEL_87;
      case 0x3FBu:
        v51 = objc_alloc_init(AppTelemetryStuckStatus);
        objc_storeStrong((id *)(a1 + 120), v51);
        if (PBReaderPlaceMark() && (AppTelemetryStuckStatusReadFrom((uint64_t)v51, a2) & 1) != 0)
        {
LABEL_87:
          PBReaderRecallMark();

LABEL_125:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_127:

        return 0;
      case 0x3FCu:
        v57 = 0;
        v58 = 0;
        v59 = 0;
        *(_BYTE *)(a1 + 144) |= 8u;
        while (2)
        {
          v60 = *v3;
          v61 = *(_QWORD *)(a2 + v60);
          if (v61 == -1 || v61 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v62 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v61);
            *(_QWORD *)(a2 + v60) = v61 + 1;
            v59 |= (unint64_t)(v62 & 0x7F) << v57;
            if (v62 < 0)
            {
              v57 += 7;
              v14 = v58++ >= 9;
              if (v14)
              {
                v59 = 0;
                goto LABEL_123;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v59 = 0;
LABEL_123:
        v63 = v59 != 0;
        v64 = 137;
LABEL_124:
        *(_BYTE *)(a1 + v64) = v63;
        goto LABEL_125;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_125;
    }
  }
}

void sub_1CBDB6F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__9(uint64_t a1)
{

}

void sub_1CBDB7358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBDB78F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CBDB7AAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBDBAB8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location)
{
  uint64_t v11;

  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v11 - 152));
  _Unwind_Resume(a1);
}

void sub_1CBDBB810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  __brc_leave_section(&a53);
  _Unwind_Resume(a1);
}

void sub_1CBDBC47C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBDBE0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;

  _Block_object_dispose((const void *)(v30 - 176), 8);
  __brc_leave_section(&a30);
  _Unwind_Resume(a1);
}

void sub_1CBDBEA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBDBEF50(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBDBF4FC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1CBDC022C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,id location,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a70;

  __brc_leave_section(&a70);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__10(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10(uint64_t a1)
{

}

void sub_1CBDC04D8(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_1CBDC0608(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBDC0874(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_1CBDC09A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBDC150C(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 232));
  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Unwind_Resume(a1);
}

void sub_1CBDC16D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBDC1A78(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBDC1E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1CBDC2310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBDC2648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBDC2A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBDC2D4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void dispatch_async_with_logs_2(void *a1, void *a2)
{
  NSObject *v3;
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  const char *label;
  _QWORD v12[4];
  NSObject *v13;
  id v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _BYTE buf[24];
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = (void *)MEMORY[0x1D17A6BE8]();
  v17 = 0uLL;
  v18 = 0;
  __brc_create_section(0, (uint64_t)"dispatch_async_with_logs", 262, &v17);
  brc_bread_crumbs();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  brc_notifications_log();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v10 = v17;
    label = dispatch_queue_get_label(v3);
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = v10;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = label;
    *(_WORD *)&buf[22] = 2112;
    v20 = v6;
    _os_log_debug_impl(&dword_1CBD43000, v7, OS_LOG_TYPE_DEBUG, "[NOTIF] ┣%llx dispatching to %s%@", buf, 0x20u);
  }

  *(_QWORD *)&buf[16] = v18;
  *(_OWORD *)buf = v17;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __dispatch_async_with_logs_block_invoke_6;
  v12[3] = &unk_1E875D578;
  v15 = v17;
  v16 = v18;
  v8 = v3;
  v13 = v8;
  v9 = v4;
  v14 = v9;
  dispatch_async(v8, v12);

  objc_autoreleasePoolPop(v5);
}

void sub_1CBDC39D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  __brc_leave_section(&a9);
  __brc_leave_section(&a12);
  _Unwind_Resume(a1);
}

void __brc_dispatch_async_autorelease_block_invoke(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x1D17A6BE8]();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  objc_autoreleasePoolPop(v2);
}

void __brc_dispatch_async_autorelease_with_logs_block_invoke_0(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  const char *label;
  __int128 v6;
  uint64_t v7;
  uint8_t buf[4];
  uint64_t v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17A6BE8]();
  v6 = *(_OWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 64);
  brc_bread_crumbs();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  brc_notifications_log();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    label = dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32));
    *(_DWORD *)buf = 134218498;
    v9 = v6;
    v10 = 2080;
    v11 = label;
    v12 = 2112;
    v13 = v3;
    _os_log_debug_impl(&dword_1CBD43000, v4, OS_LOG_TYPE_DEBUG, "[NOTIF] ┳%llx continuing on %s%@", buf, 0x20u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  __brc_leave_section((uint64_t *)&v6);
  objc_autoreleasePoolPop(v2);
}

void sub_1CBDC3B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void __dispatch_async_with_logs_block_invoke_6(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  const char *label;
  __int128 v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *(_OWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  brc_bread_crumbs();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  brc_notifications_log();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    label = dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32));
    *(_DWORD *)buf = 134218498;
    v8 = v5;
    v9 = 2080;
    v10 = label;
    v11 = 2112;
    v12 = v2;
    _os_log_debug_impl(&dword_1CBD43000, v3, OS_LOG_TYPE_DEBUG, "[NOTIF] ┳%llx continuing on %s%@", buf, 0x20u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  __brc_leave_section((uint64_t *)&v5);
}

void sub_1CBDC3CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_8_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0x20u);
}

id userNotificationRefToCompletionBlock()
{
  if (userNotificationRefToCompletionBlock_onceToken != -1)
    dispatch_once(&userNotificationRefToCompletionBlock_onceToken, &__block_literal_global_233);
  return (id)userNotificationRefToCompletionBlock_userNotificationRefToCompletion;
}

void sub_1CBDC4274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void _notificationCallback(void *a1, char a2)
{
  void *v4;
  id v5;
  void (**v6)(_QWORD, _QWORD);
  uint64_t v7;
  void *v8;
  NSObject *v9;
  void *v10;
  NSObject *v11;

  dispatch_assert_queue_V2(MEMORY[0x1E0C80D38]);
  userNotificationRefToCompletionBlock();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = a1;
  objc_msgSend(v4, "objectForKey:", v5);
  v6 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    v7 = a2 & 3;
    brc_bread_crumbs();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      _notificationCallback_cold_2();

    v6[2](v6, v7);
  }
  else
  {
    brc_bread_crumbs();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, (os_log_type_t)0x90u))
      _notificationCallback_cold_1();

  }
  objc_msgSend(v4, "removeObjectForKey:", v5);

}

void sub_1CBDC4FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__11(uint64_t a1)
{

}

void __userNotificationRefToCompletionBlock_block_invoke()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3748], "strongToStrongObjectsMapTable");
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)userNotificationRefToCompletionBlock_userNotificationRefToCompletion;
  userNotificationRefToCompletionBlock_userNotificationRefToCompletion = v0;

}

void sub_1CBDCA2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBDCA480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBDCA680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBDCAA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBDCB3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBDCBA24(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBDCBC9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1CBDCBF34(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBDCC248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1CBDCC374(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBDCC68C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBDCC838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void setTypeFieldFromDBType(int a1, int a2, __int16 *a3)
{
  __int16 v3;
  void *v4;
  NSObject *v5;
  __int16 v6;

  switch(a1)
  {
    case -1:
      brc_bread_crumbs();
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, (os_log_type_t)0x90u))
        setTypeFieldFromDBType_cold_1((uint64_t)v4, v5);

      return;
    case 0:
      v3 = *a3 | 8;
      goto LABEL_16;
    case 1:
      v6 = *a3;
      if (a2)
        v3 = v6 | 0x200;
      else
        v3 = v6 | 1;
      goto LABEL_16;
    case 2:
      v3 = *a3 | 0x10;
      goto LABEL_16;
    case 3:
      v3 = *a3 | 2;
      goto LABEL_16;
    case 4:
      v3 = *a3 | 0x20;
      goto LABEL_16;
    case 5:
      v3 = *a3 | 4;
      goto LABEL_16;
    case 6:
      v3 = *a3 | 0x40;
      goto LABEL_16;
    case 7:
      v3 = *a3 | 0x80;
      goto LABEL_16;
    case 8:
    case 9:
    case 10:
      v3 = *a3 | 0x100;
LABEL_16:
      *a3 = v3;
      break;
    default:
      return;
  }
}

void sub_1CBDD2318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBDD35A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,os_activity_scope_state_s state)
{
  __brc_leave_section(&a24);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1CBDD42CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL BRCRecursivelyChangeOwnerAndGroupToMobile(void *a1, _QWORD *a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  id *v13;
  int v14;
  void *v15;
  NSObject *v16;
  void *v17;
  uint64_t v18;
  _BOOL8 v19;
  void *v20;
  NSObject *v21;
  void *v23;
  uint64_t v24;
  id v25;
  id v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _QWORD v32[5];
  id obj;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t);
  void (*v38)(uint64_t);
  id v39;
  uint8_t v40[128];
  uint8_t buf[4];
  void *v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  void *v46;
  _QWORD v47[2];
  _QWORD v48[5];

  v48[2] = *MEMORY[0x1E0C80C00];
  v25 = a1;
  v2 = *MEMORY[0x1E0CB2A58];
  v47[0] = *MEMORY[0x1E0CB2A98];
  v47[1] = v2;
  v48[0] = CFSTR("mobile");
  v48[1] = CFSTR("mobile");
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v48, v47, 2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = 0;
  v35 = &v34;
  v36 = 0x3032000000;
  v37 = __Block_byref_object_copy__12;
  v38 = __Block_byref_object_dispose__12;
  v39 = 0;
  obj = 0;
  v4 = objc_msgSend(v25, "setResourceValues:error:", v3, &obj);
  objc_storeStrong(&v39, obj);
  if ((v4 & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v32[0] = MEMORY[0x1E0C809B0];
    v32[1] = 3221225472;
    v32[2] = __BRCRecursivelyChangeOwnerAndGroupToMobile_block_invoke;
    v32[3] = &unk_1E8760788;
    v32[4] = &v34;
    objc_msgSend(v5, "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:", v25, 0, 0, v32);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v7 = v6;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v28, v40, 16);
    if (v8)
    {
      v9 = *(_QWORD *)v29;
      while (2)
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_QWORD *)v29 != v9)
            objc_enumerationMutation(v7);
          v11 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * i);
          v12 = (void *)MEMORY[0x1D17A6BE8]();
          v13 = (id *)(v35 + 5);
          v27 = (id)v35[5];
          v14 = objc_msgSend(v11, "setResourceValues:error:", v3, &v27);
          objc_storeStrong(v13, v27);
          if ((v14 & 1) == 0)
          {
            brc_bread_crumbs();
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            brc_default_log();
            v16 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v16, (os_log_type_t)0x90u))
            {
              objc_msgSend(v11, "path");
              v17 = (void *)objc_claimAutoreleasedReturnValue();
              v18 = v35[5];
              *(_DWORD *)buf = 138412802;
              v42 = v17;
              v43 = 2112;
              v44 = v18;
              v45 = 2112;
              v46 = v15;
              _os_log_error_impl(&dword_1CBD43000, v16, (os_log_type_t)0x90u, "[ERROR] Failed to make %@ owned by mobile: %@%@", buf, 0x20u);

            }
            if (a2)
              *a2 = objc_retainAutorelease((id)v35[5]);
          }
          objc_autoreleasePoolPop(v12);
          if (!v14)
          {

            v19 = 0;
            goto LABEL_21;
          }
        }
        v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v28, v40, 16);
        if (v8)
          continue;
        break;
      }
    }

    v19 = v35[5] == 0;
LABEL_21:

  }
  else
  {
    brc_bread_crumbs();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, (os_log_type_t)0x90u))
    {
      objc_msgSend(v25, "path");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = v35[5];
      *(_DWORD *)buf = 138412802;
      v42 = v23;
      v43 = 2112;
      v44 = v24;
      v45 = 2112;
      v46 = v20;
      _os_log_error_impl(&dword_1CBD43000, v21, (os_log_type_t)0x90u, "[ERROR] Failed to make %@ owned by mobile: %@%@", buf, 0x20u);

    }
    v19 = 0;
    if (a2)
      *a2 = objc_retainAutorelease((id)v35[5]);
  }
  _Block_object_dispose(&v34, 8);

  return v19;
}

void sub_1CBDD551C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__12(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__12(uint64_t a1)
{

}

__CFString *BRCAppLibraryStatePrettyPrint(unsigned int a1)
{
  return BRCPrettyPrintBitmapWithContext(a1, (uint64_t)&applibrary_state_entries, 0);
}

__CFString *BRCAppLibraryStatePrettyPrintWithContext(unsigned int a1, void *a2)
{
  return BRCPrettyPrintBitmapWithContext(a1, (uint64_t)&applibrary_state_entries, a2);
}

void sub_1CBDD7658(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBDD8C54(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBDDA464(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void dispatch_async_with_logs_3(void *a1, void *a2)
{
  NSObject *v3;
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  const char *label;
  _QWORD v12[4];
  NSObject *v13;
  id v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _BYTE buf[24];
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = (void *)MEMORY[0x1D17A6BE8]();
  v17 = 0uLL;
  v18 = 0;
  __brc_create_section(0, (uint64_t)"dispatch_async_with_logs", 262, &v17);
  brc_bread_crumbs();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v10 = v17;
    label = dispatch_queue_get_label(v3);
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = v10;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = label;
    *(_WORD *)&buf[22] = 2112;
    v20 = v6;
    _os_log_debug_impl(&dword_1CBD43000, v7, OS_LOG_TYPE_DEBUG, "[DEBUG] ┣%llx dispatching to %s%@", buf, 0x20u);
  }

  *(_QWORD *)&buf[16] = v18;
  *(_OWORD *)buf = v17;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __dispatch_async_with_logs_block_invoke_7;
  v12[3] = &unk_1E875D578;
  v15 = v17;
  v16 = v18;
  v8 = v3;
  v13 = v8;
  v9 = v4;
  v14 = v9;
  dispatch_async(v8, v12);

  objc_autoreleasePoolPop(v5);
}

void sub_1CBDDA9FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBDDB314(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void __dispatch_async_with_logs_block_invoke_7(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  const char *label;
  __int128 v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *(_OWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  brc_bread_crumbs();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    label = dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32));
    *(_DWORD *)buf = 134218498;
    v8 = v5;
    v9 = 2080;
    v10 = label;
    v11 = 2112;
    v12 = v2;
    _os_log_debug_impl(&dword_1CBD43000, v3, OS_LOG_TYPE_DEBUG, "[DEBUG] ┳%llx continuing on %s%@", buf, 0x20u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  __brc_leave_section((uint64_t *)&v5);
}

void sub_1CBDDCF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_8_3(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x20u);
}

void sub_1CBDDD80C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1CBDDDABC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBDDDC48(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void dispatch_async_with_logs_4(void *a1, void *a2)
{
  NSObject *v3;
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  const char *label;
  _QWORD v12[4];
  NSObject *v13;
  id v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _BYTE buf[24];
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = (void *)MEMORY[0x1D17A6BE8]();
  v17 = 0uLL;
  v18 = 0;
  __brc_create_section(0, (uint64_t)"dispatch_async_with_logs", 262, &v17);
  brc_bread_crumbs();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v10 = v17;
    label = dispatch_queue_get_label(v3);
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = v10;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = label;
    *(_WORD *)&buf[22] = 2112;
    v20 = v6;
    _os_log_debug_impl(&dword_1CBD43000, v7, OS_LOG_TYPE_DEBUG, "[DEBUG] ┣%llx dispatching to %s%@", buf, 0x20u);
  }

  *(_QWORD *)&buf[16] = v18;
  *(_OWORD *)buf = v17;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __dispatch_async_with_logs_block_invoke_8;
  v12[3] = &unk_1E875D578;
  v15 = v17;
  v16 = v18;
  v8 = v3;
  v13 = v8;
  v9 = v4;
  v14 = v9;
  dispatch_async(v8, v12);

  objc_autoreleasePoolPop(v5);
}

void sub_1CBDE0670(_Unwind_Exception *a1)
{
  uint64_t v1;

  __brc_leave_section((uint64_t *)(v1 - 200));
  _Unwind_Resume(a1);
}

void sub_1CBDE1D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__13(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__13(uint64_t a1)
{

}

void sub_1CBDE2AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void __dispatch_async_with_logs_block_invoke_8(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  const char *label;
  __int128 v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *(_OWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  brc_bread_crumbs();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    label = dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32));
    *(_DWORD *)buf = 134218498;
    v8 = v5;
    v9 = 2080;
    v10 = label;
    v11 = 2112;
    v12 = v2;
    _os_log_debug_impl(&dword_1CBD43000, v3, OS_LOG_TYPE_DEBUG, "[DEBUG] ┳%llx continuing on %s%@", buf, 0x20u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  __brc_leave_section((uint64_t *)&v5);
}

void sub_1CBDE5288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void sub_1CBDE5508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint8_t buf)
{
  uint64_t v15;
  id v16;
  void *v17;
  NSObject *v18;
  void *v19;
  uint64_t v20;
  void *v21;

  if (a2 == 1)
  {
    v16 = objc_begin_catch(exception_object);
    brc_bread_crumbs();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
    {
      objc_msgSend(v16, "debugDescription");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      -[BRCLocalVersion(LegacyAdditions) initFromResultSet:pos:].cold.1(v19, (uint64_t)v17, &buf, v18);
    }

    objc_msgSend(MEMORY[0x1E0C95048], "brc_fakeRecordWithErrorMarkerFor20716676");
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = *(void **)(v15 + 120);
    *(_QWORD *)(v15 + 120) = v20;

    objc_end_catch();
    JUMPOUT(0x1CBDE535CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1CBDE6160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  __brc_leave_section(&a30);
  _Unwind_Resume(a1);
}

void sub_1CBDE6474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBDE6DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBDE7D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBDE995C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ___allowedClassesForErrors_block_invoke()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v0 = objc_alloc(MEMORY[0x1E0C99E60]);
  v1 = objc_opt_class();
  v2 = objc_opt_class();
  v3 = objc_opt_class();
  v4 = objc_opt_class();
  v5 = objc_opt_class();
  v6 = objc_opt_class();
  v7 = objc_opt_class();
  v8 = objc_opt_class();
  v9 = objc_msgSend(v0, "initWithObjects:", v1, v2, v3, v4, v5, v6, v7, v8, objc_opt_class(), 0);
  v10 = (void *)_allowedClassesForErrors_allowedClasses;
  _allowedClassesForErrors_allowedClasses = v9;

}

void ___allowedClassesForEtags_block_invoke()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v0 = objc_alloc(MEMORY[0x1E0C99E60]);
  v1 = objc_opt_class();
  v2 = objc_opt_class();
  v3 = objc_opt_class();
  v4 = objc_msgSend(v0, "initWithObjects:", v1, v2, v3, objc_opt_class(), 0);
  v5 = (void *)_allowedClassesForEtags_allowedClasses;
  _allowedClassesForEtags_allowedClasses = v4;

}

void OUTLINED_FUNCTION_6_2(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;

  _os_log_debug_impl(a1, v4, OS_LOG_TYPE_DEBUG, a4, v5, 0x16u);
}

uint64_t OUTLINED_FUNCTION_7_1(uint64_t result, float a2)
{
  uint64_t v2;
  uint64_t v3;

  *(float *)v2 = a2;
  *(_QWORD *)(v2 + 4) = result;
  *(_WORD *)(v2 + 12) = 2112;
  *(_QWORD *)(v2 + 14) = v3;
  return result;
}

id OUTLINED_FUNCTION_8_4(id a1)
{
  return a1;
}

__CFString *BRCPrettyPrintBitmapWithContext(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  int *v7;
  unint64_t v8;
  _UNKNOWN **v9;
  uint64_t v10;
  id v12;
  void *v13;
  void *v14;
  int v15;
  id v16;
  void *v17;
  void *v18;
  uint64_t v19;
  id v20;
  _UNKNOWN **v21;
  unint64_t v22;
  void *v23;
  NSObject *v24;
  uint64_t v25;
  __CFString *v26;
  id v28;
  uint8_t buf[4];
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithCapacity:", 255);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (*(_QWORD *)(a2 + 8))
  {
    v7 = (int *)(a2 + 16);
    v8 = 0x1E0CB3000uLL;
    v9 = &off_1E875B000;
    v28 = v5;
    while (1)
    {
      v10 = *((_QWORD *)v7 - 2);
      if ((v10 & ~a1) != 0)
        goto LABEL_21;
      if (!v10 && a1 != 0)
        goto LABEL_21;
      v12 = v5;
      objc_msgSend(*(id *)(v8 + 2368), "stringWithUTF8String:", *((_QWORD *)v7 - 1));
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = v13;
      v15 = *v7;
      if (*v7 == 2)
        break;
      if (v15 == 1)
      {
        v17 = v9[341];
        v18 = v14;
        v19 = 1;
LABEL_15:
        objc_msgSend(v17, "highlightedString:type:context:", v18, v19, v12);
        v16 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_16;
      }
      if (v15)
      {
        v21 = v9;
        v22 = v8;
        brc_bread_crumbs();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        brc_default_log();
        v24 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 138412290;
          v30 = v23;
          _os_log_fault_impl(&dword_1CBD43000, v24, OS_LOG_TYPE_FAULT, "[CRIT] UNREACHABLE: unknown color%@", buf, 0xCu);
        }

        v20 = v14;
        v8 = v22;
        v9 = v21;
        v5 = v28;
        goto LABEL_20;
      }
      v16 = v13;
LABEL_16:
      v20 = v16;
LABEL_20:

      objc_msgSend(v6, "appendFormat:", CFSTR("%@|"), v20);
      a1 ^= v10;
LABEL_21:
      v25 = *((_QWORD *)v7 + 2);
      v7 += 6;
      if (!v25)
        goto LABEL_22;
    }
    v17 = v9[341];
    v18 = v14;
    v19 = 3;
    goto LABEL_15;
  }
LABEL_22:
  if (a1)
  {
    objc_msgSend(v6, "appendFormat:", CFSTR("0x%llx"), a1);
  }
  else
  {
    if (!objc_msgSend(v6, "length"))
    {
      v26 = &stru_1E8769030;
      goto LABEL_27;
    }
    objc_msgSend(v6, "deleteCharactersInRange:", objc_msgSend(v6, "length") - 1, 1);
  }
  v26 = v6;
LABEL_27:

  return v26;
}

void sub_1CBDEDCC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a26, 8);
  __brc_leave_section(&a30);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__14(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__14(uint64_t a1)
{

}

void sub_1CBDEE3D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1CBDEE958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBDEEDC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  __brc_leave_section(&a26);
  _Unwind_Resume(a1);
}

void sub_1CBDEF538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

void sub_1CBDEFD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;

  _Block_object_dispose(&a32, 8);
  _Block_object_dispose(&a38, 8);
  __brc_leave_section((uint64_t *)(v38 - 248));
  _Unwind_Resume(a1);
}

void sub_1CBDF154C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  __brc_leave_section(&a18);
  _Unwind_Resume(a1);
}

void sub_1CBDF1C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void dispatch_async_with_logs_5(void *a1, void *a2)
{
  NSObject *v3;
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  const char *label;
  _QWORD v12[4];
  NSObject *v13;
  id v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _BYTE buf[24];
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = (void *)MEMORY[0x1D17A6BE8]();
  v17 = 0uLL;
  v18 = 0;
  __brc_create_section(0, (uint64_t)"dispatch_async_with_logs", 262, &v17);
  brc_bread_crumbs();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v10 = v17;
    label = dispatch_queue_get_label(v3);
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = v10;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = label;
    *(_WORD *)&buf[22] = 2112;
    v20 = v6;
    _os_log_debug_impl(&dword_1CBD43000, v7, OS_LOG_TYPE_DEBUG, "[DEBUG] ┣%llx dispatching to %s%@", buf, 0x20u);
  }

  *(_QWORD *)&buf[16] = v18;
  *(_OWORD *)buf = v17;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __dispatch_async_with_logs_block_invoke_9;
  v12[3] = &unk_1E875D578;
  v15 = v17;
  v16 = v18;
  v8 = v3;
  v13 = v8;
  v9 = v4;
  v14 = v9;
  dispatch_async(v8, v12);

  objc_autoreleasePoolPop(v5);
}

void sub_1CBDF2410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose(&a51, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__15(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__15(uint64_t a1)
{

}

void sub_1CBDF28A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBDF2BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void sub_1CBDF545C(_Unwind_Exception *a1)
{
  uint64_t v1;

  __brc_leave_section((uint64_t *)(v1 - 80));
  _Unwind_Resume(a1);
}

void sub_1CBDF5868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void sub_1CBDF6E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  __brc_leave_section(&a32);
  _Unwind_Resume(a1);
}

void sub_1CBDF6FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __dispatch_async_with_logs_block_invoke_9(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  const char *label;
  __int128 v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *(_OWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  brc_bread_crumbs();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    label = dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32));
    *(_DWORD *)buf = 134218498;
    v8 = v5;
    v9 = 2080;
    v10 = label;
    v11 = 2112;
    v12 = v2;
    _os_log_debug_impl(&dword_1CBD43000, v3, OS_LOG_TYPE_DEBUG, "[DEBUG] ┳%llx continuing on %s%@", buf, 0x20u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  __brc_leave_section((uint64_t *)&v5);
}

void sub_1CBDF75D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

uint64_t BRCIsLegacyUbiquityFault(int a1, char a2, __int16 a3, _DWORD *a4)
{
  BOOL v6;
  _QWORD value[2];
  int v10;

  if ((a2 & 0x20) != 0)
  {
    value[0] = 0;
    value[1] = 0;
    v10 = 0;
    if (fgetxattr(a1, "com.apple.decmpfs", value, 0x14uLL, 0, 32) == 20)
    {
      v6 = LODWORD(value[0]) == 1668116582 && HIDWORD(value[0]) == -2147483647;
      if (v6 && v10 == 1)
        return 1;
    }
  }
  if ((a3 & 0xF000) == 0x4000 && *a4 == 1802465890)
    return 2;
  return 0;
}

uint64_t BRCTouchRootMergeWitness(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  char v8;
  id v9;
  void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  void *v20;
  NSObject *v21;
  void *v23;
  id v24;
  id v25;
  _QWORD v26[2];
  _QWORD v27[2];
  _QWORD v28[2];
  uint8_t buf[4];
  void *v30;
  __int16 v31;
  id v32;
  __int16 v33;
  void *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1E0CB3620];
  v5 = a1;
  objc_msgSend(v4, "defaultManager");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "stringByAppendingPathComponent:", *MEMORY[0x1E0D10DB8]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v25 = 0;
  v8 = objc_msgSend(v6, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v7, 1, 0, &v25);
  v9 = v25;
  if ((v8 & 1) == 0)
  {
    brc_bread_crumbs();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, (os_log_type_t)0x90u))
    {
      *(_DWORD *)buf = 138412802;
      v30 = v7;
      v31 = 2112;
      v32 = v9;
      v33 = 2112;
      v34 = v10;
      _os_log_error_impl(&dword_1CBD43000, v11, (os_log_type_t)0x90u, "[ERROR] Unable to create directory \"%@\": %@%@", buf, 0x20u);
    }

  }
  v12 = (void *)MEMORY[0x1E0C99E98];
  v28[0] = v7;
  v28[1] = CFSTR(".icloud-drive.do-not-delete");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v28, 2);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "fileURLWithPathComponents:", v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0C99D50], "data");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "writeToURL:atomically:", v14, 0);

  v16 = *MEMORY[0x1E0C999F0];
  v26[0] = *MEMORY[0x1E0C998E8];
  v26[1] = v16;
  v27[0] = v3;
  v27[1] = MEMORY[0x1E0C9AAB0];
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v27, v26, 2);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = v9;
  v18 = objc_msgSend(v14, "setResourceValues:error:", v17, &v24);
  v19 = v24;

  if ((v18 & 1) == 0)
  {
    brc_bread_crumbs();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, (os_log_type_t)0x90u))
    {
      objc_msgSend(v14, "path");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412802;
      v30 = v23;
      v31 = 2112;
      v32 = v19;
      v33 = 2112;
      v34 = v20;
      _os_log_error_impl(&dword_1CBD43000, v21, (os_log_type_t)0x90u, "[ERROR] Unable to set mtime & hidden on \"%@\": %@%@", buf, 0x20u);

    }
  }

  return v18;
}

uint64_t BRCMigrateLegacyUbiquityRoot(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  id v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  void *v19;
  NSObject *v20;
  BRCFileUnlinker *v21;
  void *v22;
  int v23;
  int v24;
  void *v25;
  NSObject *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  void *v36;
  NSObject *v37;
  void *v38;
  id v39;
  NSObject *v40;
  NSObject *v41;
  id v42;
  uint64_t v43;
  int v44;
  void *v45;
  NSObject *v46;
  char v47;
  char v48;
  void *v49;
  NSObject *v50;
  const char *v51;
  NSObject *v52;
  uint32_t v53;
  void *v54;
  NSObject *v55;
  BOOL v56;
  void *v57;
  NSObject *v58;
  void *v59;
  NSObject *v60;
  int v61;
  void *v62;
  NSObject *v63;
  id v64;
  id v65;
  void *v66;
  NSObject *v67;
  BRCFileUnlinker *v68;
  void *v69;
  BRCFileUnlinker *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t i;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  id v78;
  id v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  _BOOL4 v88;
  int v89;
  void *v90;
  NSObject *v91;
  int v92;
  void *v93;
  NSObject *v94;
  void *v95;
  NSObject *v96;
  int v97;
  id v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uid_t v106;
  void *v107;
  NSObject *v108;
  void *v109;
  NSObject *v110;
  void *v111;
  NSObject *v112;
  int v113;
  void *v114;
  NSObject *v115;
  NSObject *v116;
  int v117;
  void *v118;
  NSObject *v119;
  void *v120;
  void *v121;
  int v122;
  id v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  int v131;
  const char *v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  id v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  id v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  int v194;
  int v195;
  unsigned __int16 v196;
  unsigned __int16 v197;
  unsigned __int16 v198;
  int v199;
  void *v200;
  id v201;
  void *v202;
  void *v203;
  BRCFileUnlinker *v204;
  id v205;
  id v206;
  id v207;
  stat v208;
  uint64_t v209[3];
  uint64_t v210[3];
  stat v211;
  uint64_t v212;
  void *v213;
  _BYTE buf[46];
  _BYTE v215[6];
  _BYTE v216[6];
  _BYTE v217[6];
  _BYTE v218[6];
  _BYTE v219[6];
  _BYTE v220[6];
  _BYTE v221[6];
  _BYTE v222[6];
  _BYTE v223[6];
  _BYTE v224[6];
  _BYTE v225[72];
  uint64_t v226;

  v226 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v201 = a3;
  memset(v209, 0, sizeof(v209));
  __brc_create_section(0, (uint64_t)"BRCMigrateLegacyUbiquityRoot", 183, v209);
  brc_bread_crumbs();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    BRCMigrateLegacyUbiquityRoot_cold_6();

  v9 = objc_retainAutorelease(v6);
  v10 = (const char *)objc_msgSend(v9, "fileSystemRepresentation");
  v16 = BRCOpenAt(0xFFFFFFFFLL, v10, 33028, v11, v12, v13, v14, v15, v196);
  if (v16 < 0)
  {
    if (*__error() == 2)
    {
      v17 = 0;
      goto LABEL_10;
    }
    v18 = *__error();
    brc_bread_crumbs();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, (os_log_type_t)0x90u))
    {
      *(_DWORD *)buf = 138412802;
      *(_QWORD *)&buf[4] = v9;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v18;
      *(_WORD *)&buf[18] = 2112;
      *(_QWORD *)&buf[20] = v19;
      _os_log_error_impl(&dword_1CBD43000, v20, (os_log_type_t)0x90u, "[ERROR] can't open root '%@' %{errno}d%@", buf, 0x1Cu);
    }

    *__error() = v18;
  }
  v17 = 1;
LABEL_10:
  BRCGetXattrValueForKeyOnFD(v16, v9, CFSTR("com.apple.ubd.prsid"));
  v203 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "stringByAppendingString:", CFSTR(".CloudDocs"));
  v202 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = [BRCFileUnlinker alloc];
  objc_msgSend(v201, "stringByAppendingPathComponent:", CFSTR("Caches/com.apple.bird"));
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v204 = -[BRCFileUnlinker initWithCacheDirPath:](v21, "initWithCacheDirPath:", v22);

  -[BRCFileUnlinker resume](v204, "resume");
  v23 = objc_msgSend(v203, "isEqualToString:", v202);
  memset(&v208, 0, sizeof(v208));
  objc_msgSend(v9, "stringByAppendingPathExtension:", v202);
  v205 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v24 = lstat((const char *)objc_msgSend(v205, "fileSystemRepresentation"), &v208);
  if (v24 < 0)
  {
    if (*__error() != 2)
    {
      v44 = *__error();
      brc_bread_crumbs();
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v46 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v46, (os_log_type_t)0x90u))
      {
        *(_DWORD *)buf = 138412802;
        *(_QWORD *)&buf[4] = v205;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v44;
        *(_WORD *)&buf[18] = 2112;
        *(_QWORD *)&buf[20] = v45;
        _os_log_error_impl(&dword_1CBD43000, v46, (os_log_type_t)0x90u, "[ERROR] can't lstat '%@' %{errno}d%@", buf, 0x1Cu);
      }

      *__error() = v44;
    }
    if (v23)
    {
      close(v16);
      goto LABEL_95;
    }
  }
  else
  {
    brc_bread_crumbs();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      v199 = aPcDBLSW[(unint64_t)v208.st_mode >> 12];
      if ((v208.st_mode & 0x100) != 0)
        v27 = 114;
      else
        v27 = 45;
      if ((v208.st_mode & 0x80) != 0)
        v28 = 119;
      else
        v28 = 45;
      if ((v208.st_mode & 0x40) != 0)
        v29 = 120;
      else
        v29 = 45;
      if ((v208.st_mode & 0x20) != 0)
        v30 = 114;
      else
        v30 = 45;
      if ((v208.st_mode & 0x10) != 0)
        v31 = 119;
      else
        v31 = 45;
      if ((v208.st_mode & 8) != 0)
        v32 = 120;
      else
        v32 = 45;
      if ((v208.st_mode & 4) != 0)
        v33 = 114;
      else
        v33 = 45;
      if ((v208.st_mode & 2) != 0)
        v34 = 119;
      else
        v34 = 45;
      if ((v208.st_mode & 1) != 0)
        v35 = 120;
      else
        v35 = 45;
      *(_DWORD *)buf = 138417666;
      *(_QWORD *)&buf[4] = v205;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v208.st_dev;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v208.st_ino;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = v199;
      *(_WORD *)&buf[34] = 1024;
      *(_DWORD *)&buf[36] = v27;
      *(_WORD *)&buf[40] = 1024;
      *(_DWORD *)&buf[42] = v28;
      *(_WORD *)v215 = 1024;
      *(_DWORD *)&v215[2] = v29;
      *(_WORD *)v216 = 1024;
      *(_DWORD *)&v216[2] = v30;
      *(_WORD *)v217 = 1024;
      *(_DWORD *)&v217[2] = v31;
      *(_WORD *)v218 = 1024;
      *(_DWORD *)&v218[2] = v32;
      *(_WORD *)v219 = 1024;
      *(_DWORD *)&v219[2] = v33;
      *(_WORD *)v220 = 1024;
      *(_DWORD *)&v220[2] = v34;
      *(_WORD *)v221 = 1024;
      *(_DWORD *)&v221[2] = v35;
      *(_WORD *)v222 = 1024;
      *(_DWORD *)&v222[2] = v208.st_nlink;
      *(_WORD *)v223 = 1024;
      *(_DWORD *)&v223[2] = v208.st_uid;
      *(_WORD *)v224 = 1024;
      *(_DWORD *)&v224[2] = v208.st_gid;
      *(_WORD *)v225 = 2048;
      *(_QWORD *)&v225[2] = v208.st_atimespec.tv_sec;
      *(_WORD *)&v225[10] = 2048;
      *(_QWORD *)&v225[12] = v208.st_mtimespec.tv_sec;
      *(_WORD *)&v225[20] = 2048;
      *(_QWORD *)&v225[22] = v208.st_ctimespec.tv_sec;
      *(_WORD *)&v225[30] = 2048;
      *(_QWORD *)&v225[32] = v208.st_size;
      *(_WORD *)&v225[40] = 1024;
      *(_DWORD *)&v225[42] = v208.st_flags;
      *(_WORD *)&v225[46] = 2112;
      *(_QWORD *)&v225[48] = v25;
      _os_log_impl(&dword_1CBD43000, v26, OS_LOG_TYPE_DEFAULT, "[NOTICE] found our root at '%@' deviceID:%u fileID:%llu mode:%c%c%c%c%c%c%c%c%c%c nlink:%u uid:%u gid:%u atime:%lu mtime:%lu ctime:%lu size:%llu flags:0x%x%@", buf, 0xA2u);
    }

    if (v23)
    {
      if (!-[BRCFileUnlinker renameAndUnlinkInBackgroundItemAtPath:](v204, "renameAndUnlinkInBackgroundItemAtPath:", v205))
      {
        brc_bread_crumbs();
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        brc_default_log();
        v37 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_FAULT))
          BRCMigrateLegacyUbiquityRoot_cold_5();

      }
      objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v9);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      v207 = 0;
      objc_msgSend(v38, "getResourceValue:forKey:error:", &v207, *MEMORY[0x1E0C998E8], 0);
      v39 = v207;

      if (v39)
        BRCTouchRootMergeWitness(v9, v39);
      brc_bread_crumbs();
      v40 = objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v41 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_FAULT))
        BRCMigrateLegacyUbiquityRoot_cold_4();

      v42 = 0;
      v43 = 0;
LABEL_147:

      goto LABEL_148;
    }
  }
  if ((v16 & 0x80000000) == 0)
  {
    close(v16);
    if (v203)
    {
      v47 = objc_msgSend(v203, "hasPrefix:", v5);
      if (v24 < 0)
        v48 = v47;
      else
        v48 = 0;
      if ((v48 & 1) != 0)
      {
        brc_bread_crumbs();
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        brc_default_log();
        v50 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412802;
          *(_QWORD *)&buf[4] = v203;
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v202;
          *(_WORD *)&buf[22] = 2112;
          *(_QWORD *)&buf[24] = v49;
          v51 = "[NOTICE] migrating root from accountString %@ to %@%@";
          v52 = v50;
          v53 = 32;
LABEL_84:
          _os_log_impl(&dword_1CBD43000, v52, OS_LOG_TYPE_DEFAULT, v51, buf, v53);
          goto LABEL_85;
        }
        goto LABEL_85;
      }
    }
    else if (v24 < 0)
    {
      brc_bread_crumbs();
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v50 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = v202;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v49;
        v51 = "[NOTICE] tagging root with accountString %@%@";
        v52 = v50;
        v53 = 22;
        goto LABEL_84;
      }
LABEL_85:

      v64 = v9;
      v65 = v201;
      memset(v210, 0, sizeof(v210));
      __brc_create_section(0, (uint64_t)"_unlinkUbiquitySupportFiles", 58, v210);
      brc_bread_crumbs();
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v67 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
        BRCMigrateLegacyUbiquityRoot_cold_1();

      v68 = [BRCFileUnlinker alloc];
      objc_msgSend(v65, "stringByAppendingPathComponent:", CFSTR("Caches/com.apple.bird"));
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      v70 = -[BRCFileUnlinker initWithCacheDirPath:](v68, "initWithCacheDirPath:", v69);

      -[BRCFileUnlinker resume](v70, "resume");
      memset(&v211, 0, 64);
      v71 = objc_msgSend(&unk_1E87D8808, "countByEnumeratingWithState:objects:count:", &v211, buf, 16);
      if (v71)
      {
        v72 = **(_QWORD **)&v211.st_uid;
        do
        {
          for (i = 0; i != v71; ++i)
          {
            if (**(_QWORD **)&v211.st_uid != v72)
              objc_enumerationMutation(&unk_1E87D8808);
            objc_msgSend(v64, "stringByAppendingPathComponent:", *(_QWORD *)(v211.st_ino + 8 * i));
            v74 = (void *)objc_claimAutoreleasedReturnValue();
            -[BRCFileUnlinker renameAndUnlinkInBackgroundItemAtPath:](v70, "renameAndUnlinkInBackgroundItemAtPath:", v74);

          }
          v71 = objc_msgSend(&unk_1E87D8808, "countByEnumeratingWithState:objects:count:", &v211, buf, 16);
        }
        while (v71);
      }
      objc_msgSend(v65, "stringByAppendingPathComponent:", CFSTR("Application Support/Ubiquity"));
      v75 = (void *)objc_claimAutoreleasedReturnValue();
      -[BRCFileUnlinker renameAndUnlinkInBackgroundItemAtPath:](v70, "renameAndUnlinkInBackgroundItemAtPath:", v75);

      objc_msgSend(v65, "stringByAppendingPathComponent:", CFSTR("Caches/com.apple.ubd"));
      v76 = (void *)objc_claimAutoreleasedReturnValue();
      -[BRCFileUnlinker renameAndUnlinkInBackgroundItemAtPath:](v70, "renameAndUnlinkInBackgroundItemAtPath:", v76);

      objc_msgSend(v65, "stringByAppendingPathComponent:", CFSTR("Logs/CrashReporter/DiagnosticLogs/Ubiquity"));
      v77 = (void *)objc_claimAutoreleasedReturnValue();
      -[BRCFileUnlinker renameAndUnlinkInBackgroundItemAtPath:](v70, "renameAndUnlinkInBackgroundItemAtPath:", v77);

      __brc_leave_section(v210);
      goto LABEL_95;
    }
  }
  if (v17)
  {
    memset(buf, 0, 24);
    __brc_create_section(0, (uint64_t)"BRCMigrateLegacyUbiquityRoot", 325, buf);
    brc_bread_crumbs();
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v55 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
      BRCMigrateLegacyUbiquityRoot_cold_3();

    v56 = -[BRCFileUnlinker renameAndUnlinkInBackgroundItemAtPath:](v204, "renameAndUnlinkInBackgroundItemAtPath:", v9);
    if (!v56)
    {
      brc_bread_crumbs();
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v58 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v58, OS_LOG_TYPE_FAULT))
        BRCMigrateLegacyUbiquityRoot_cold_2();

    }
    __brc_leave_section((uint64_t *)buf);
    if (!v56)
    {
      v42 = 0;
      v43 = 0;
      goto LABEL_148;
    }
  }
  if ((v24 & 0x80000000) == 0)
  {
    if ((BRCRenameAt(-1, v205, -1, v9, 0) & 0x80000000) != 0)
    {
      v61 = *__error();
      brc_bread_crumbs();
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v63 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v63, (os_log_type_t)0x90u))
      {
        *(_DWORD *)buf = 138413058;
        *(_QWORD *)&buf[4] = v205;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v9;
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = v61;
        *(_WORD *)&buf[28] = 2112;
        *(_QWORD *)&buf[30] = v62;
        _os_log_error_impl(&dword_1CBD43000, v63, (os_log_type_t)0x90u, "[ERROR] failed renaming root back from '%@' to '%@' %{errno}d%@", buf, 0x26u);
      }

      *__error() = v61;
    }
    else
    {
      brc_bread_crumbs();
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v60 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412802;
        *(_QWORD *)&buf[4] = v205;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v9;
        *(_WORD *)&buf[22] = 2112;
        *(_QWORD *)&buf[24] = v59;
        _os_log_impl(&dword_1CBD43000, v60, OS_LOG_TYPE_DEFAULT, "[NOTICE] moved '%@' back to '%@'%@", buf, 0x20u);
      }

    }
  }
LABEL_95:
  v78 = v9;
  memset(&v211, 0, sizeof(v211));
  v79 = objc_retainAutorelease(v78);
  v80 = (const char *)objc_msgSend(v79, "fileSystemRepresentation");
  v86 = BRCOpenAt(0xFFFFFFFFLL, v80, 33028, v81, v82, v83, v84, v85, v197);
  v87 = v86;
  if (v86 < 0)
  {
    if (*__error() != 2)
    {
      v89 = *__error();
      brc_bread_crumbs();
      v90 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v91 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v91, (os_log_type_t)0x90u))
      {
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = -1;
        *(_WORD *)&buf[8] = 2112;
        *(_QWORD *)&buf[10] = v79;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v89;
        *(_WORD *)&buf[24] = 2112;
        *(_QWORD *)&buf[26] = v90;
        _os_log_error_impl(&dword_1CBD43000, v91, (os_log_type_t)0x90u, "[ERROR] can't open (%d, '%@') %{errno}d%@", buf, 0x22u);
      }

      *__error() = v89;
    }
  }
  else
  {
    if (fstat(v86, &v211) < 0)
    {
      v92 = *__error();
      brc_bread_crumbs();
      v93 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v94 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v94, (os_log_type_t)0x90u))
      {
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = -1;
        *(_WORD *)&buf[8] = 2112;
        *(_QWORD *)&buf[10] = v79;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v92;
        *(_WORD *)&buf[24] = 2112;
        *(_QWORD *)&buf[26] = v93;
        _os_log_error_impl(&dword_1CBD43000, v94, (os_log_type_t)0x90u, "[ERROR] can't fstat (%d, '%@') %{errno}d%@", buf, 0x22u);
      }
      goto LABEL_138;
    }
    if ((v211.st_mode & 0xF000) == 0x4000)
    {
      v88 = 0;
      goto LABEL_114;
    }
    brc_bread_crumbs();
    v95 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v96 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v96, (os_log_type_t)0x90u))
    {
      v145 = aPcDBLSW[(unint64_t)v211.st_mode >> 12];
      if ((v211.st_mode & 0x100) != 0)
        v146 = 114;
      else
        v146 = 45;
      if ((v211.st_mode & 0x80) != 0)
        v147 = 119;
      else
        v147 = 45;
      if ((v211.st_mode & 0x40) != 0)
        v148 = 120;
      else
        v148 = 45;
      if ((v211.st_mode & 0x20) != 0)
        v149 = 114;
      else
        v149 = 45;
      if ((v211.st_mode & 0x10) != 0)
        v150 = 119;
      else
        v150 = 45;
      if ((v211.st_mode & 8) != 0)
        v151 = 120;
      else
        v151 = 45;
      if ((v211.st_mode & 4) != 0)
        v152 = 114;
      else
        v152 = 45;
      if ((v211.st_mode & 2) != 0)
        v153 = 119;
      else
        v153 = 45;
      if ((v211.st_mode & 1) != 0)
        v154 = 120;
      else
        v154 = 45;
      *(_DWORD *)buf = 67114754;
      *(_DWORD *)&buf[4] = -1;
      *(_WORD *)&buf[8] = 2112;
      *(_QWORD *)&buf[10] = v79;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v211.st_dev;
      *(_WORD *)&buf[24] = 2048;
      *(_QWORD *)&buf[26] = v211.st_ino;
      *(_WORD *)&buf[34] = 1024;
      *(_DWORD *)&buf[36] = v145;
      *(_WORD *)&buf[40] = 1024;
      *(_DWORD *)&buf[42] = v146;
      *(_WORD *)v215 = 1024;
      *(_DWORD *)&v215[2] = v147;
      *(_WORD *)v216 = 1024;
      *(_DWORD *)&v216[2] = v148;
      *(_WORD *)v217 = 1024;
      *(_DWORD *)&v217[2] = v149;
      *(_WORD *)v218 = 1024;
      *(_DWORD *)&v218[2] = v150;
      *(_WORD *)v219 = 1024;
      *(_DWORD *)&v219[2] = v151;
      *(_WORD *)v220 = 1024;
      *(_DWORD *)&v220[2] = v152;
      *(_WORD *)v221 = 1024;
      *(_DWORD *)&v221[2] = v153;
      *(_WORD *)v222 = 1024;
      *(_DWORD *)&v222[2] = v154;
      *(_WORD *)v223 = 1024;
      *(_DWORD *)&v223[2] = v211.st_nlink;
      *(_WORD *)v224 = 1024;
      *(_DWORD *)&v224[2] = v211.st_uid;
      *(_WORD *)v225 = 1024;
      *(_DWORD *)&v225[2] = v211.st_gid;
      *(_WORD *)&v225[6] = 2048;
      *(_QWORD *)&v225[8] = v211.st_atimespec.tv_sec;
      *(_WORD *)&v225[16] = 2048;
      *(_QWORD *)&v225[18] = v211.st_mtimespec.tv_sec;
      *(_WORD *)&v225[26] = 2048;
      *(_QWORD *)&v225[28] = v211.st_ctimespec.tv_sec;
      *(_WORD *)&v225[36] = 2048;
      *(_QWORD *)&v225[38] = v211.st_size;
      *(_WORD *)&v225[46] = 1024;
      *(_DWORD *)&v225[48] = v211.st_flags;
      *(_WORD *)&v225[52] = 2112;
      *(_QWORD *)&v225[54] = v95;
      _os_log_error_impl(&dword_1CBD43000, v96, (os_log_type_t)0x90u, "[ERROR] not a directory at (%d, '%@') deviceID:%u fileID:%llu mode:%c%c%c%c%c%c%c%c%c%c nlink:%u uid:%u gid:%u atime:%lu mtime:%lu ctime:%lu size:%llu flags:0x%x%@", buf, 0xA8u);
    }

    close(v87);
    BRCUnlinkAt(-1, v79, 0);
  }
  v97 = BRCMkdirAt(-1, v79, 493);
  if (v97 < 0 && *__error() != 17)
  {
    v113 = *__error();
    brc_bread_crumbs();
    v114 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v115 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v115, (os_log_type_t)0x90u))
    {
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = -1;
      *(_WORD *)&buf[8] = 2112;
      *(_QWORD *)&buf[10] = v79;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v113;
      *(_WORD *)&buf[24] = 2112;
      *(_QWORD *)&buf[26] = v114;
      _os_log_error_impl(&dword_1CBD43000, v115, (os_log_type_t)0x90u, "[ERROR] mkdirat(%d, '%@') %{errno}d%@", buf, 0x22u);
    }
    goto LABEL_131;
  }
  v98 = objc_retainAutorelease(v79);
  v99 = (const char *)objc_msgSend(v98, "fileSystemRepresentation");
  v105 = BRCOpenAt(0xFFFFFFFFLL, v99, 33028, v100, v101, v102, v103, v104, v198);
  v87 = v105;
  if (v105 < 0)
  {
    v113 = *__error();
    brc_bread_crumbs();
    v114 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v115 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v115, (os_log_type_t)0x90u))
    {
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = -1;
      *(_WORD *)&buf[8] = 2112;
      *(_QWORD *)&buf[10] = v98;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v113;
      *(_WORD *)&buf[24] = 2112;
      *(_QWORD *)&buf[26] = v114;
      _os_log_error_impl(&dword_1CBD43000, v115, (os_log_type_t)0x90u, "[ERROR] can't open (%d, '%@') after mkdir %{errno}d%@", buf, 0x22u);
    }
LABEL_131:

    *__error() = v113;
    goto LABEL_140;
  }
  if (fstat(v105, &v211) < 0)
  {
    v92 = *__error();
    brc_bread_crumbs();
    v93 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v94 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v94, (os_log_type_t)0x90u))
    {
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = -1;
      *(_WORD *)&buf[8] = 2112;
      *(_QWORD *)&buf[10] = v98;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v92;
      *(_WORD *)&buf[24] = 2112;
      *(_QWORD *)&buf[26] = v93;
      _os_log_error_impl(&dword_1CBD43000, v94, (os_log_type_t)0x90u, "[ERROR] can't fstat (%d, '%@') after mkdir %{errno}d%@", buf, 0x22u);
    }
    goto LABEL_138;
  }
  if ((v211.st_mode & 0xF000) != 0x4000)
  {
    brc_bread_crumbs();
    v200 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v116 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v116, (os_log_type_t)0x90u))
    {
      v176 = aPcDBLSW[(unint64_t)v211.st_mode >> 12];
      if ((v211.st_mode & 0x100) != 0)
        v177 = 114;
      else
        v177 = 45;
      if ((v211.st_mode & 0x80) != 0)
        v178 = 119;
      else
        v178 = 45;
      if ((v211.st_mode & 0x40) != 0)
        v179 = 120;
      else
        v179 = 45;
      if ((v211.st_mode & 0x20) != 0)
        v180 = 114;
      else
        v180 = 45;
      if ((v211.st_mode & 0x10) != 0)
        v181 = 119;
      else
        v181 = 45;
      if ((v211.st_mode & 8) != 0)
        v182 = 120;
      else
        v182 = 45;
      if ((v211.st_mode & 4) != 0)
        v183 = 114;
      else
        v183 = 45;
      if ((v211.st_mode & 2) != 0)
        v184 = 119;
      else
        v184 = 45;
      if ((v211.st_mode & 1) != 0)
        v185 = 120;
      else
        v185 = 45;
      *(_DWORD *)buf = 67114754;
      *(_DWORD *)&buf[4] = -1;
      *(_WORD *)&buf[8] = 2112;
      *(_QWORD *)&buf[10] = v98;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v211.st_dev;
      *(_WORD *)&buf[24] = 2048;
      *(_QWORD *)&buf[26] = v211.st_ino;
      *(_WORD *)&buf[34] = 1024;
      *(_DWORD *)&buf[36] = v176;
      *(_WORD *)&buf[40] = 1024;
      *(_DWORD *)&buf[42] = v177;
      *(_WORD *)v215 = 1024;
      *(_DWORD *)&v215[2] = v178;
      *(_WORD *)v216 = 1024;
      *(_DWORD *)&v216[2] = v179;
      *(_WORD *)v217 = 1024;
      *(_DWORD *)&v217[2] = v180;
      *(_WORD *)v218 = 1024;
      *(_DWORD *)&v218[2] = v181;
      *(_WORD *)v219 = 1024;
      *(_DWORD *)&v219[2] = v182;
      *(_WORD *)v220 = 1024;
      *(_DWORD *)&v220[2] = v183;
      *(_WORD *)v221 = 1024;
      *(_DWORD *)&v221[2] = v184;
      *(_WORD *)v222 = 1024;
      *(_DWORD *)&v222[2] = v185;
      *(_WORD *)v223 = 1024;
      *(_DWORD *)&v223[2] = v211.st_nlink;
      *(_WORD *)v224 = 1024;
      *(_DWORD *)&v224[2] = v211.st_uid;
      *(_WORD *)v225 = 1024;
      *(_DWORD *)&v225[2] = v211.st_gid;
      *(_WORD *)&v225[6] = 2048;
      *(_QWORD *)&v225[8] = v211.st_atimespec.tv_sec;
      *(_WORD *)&v225[16] = 2048;
      *(_QWORD *)&v225[18] = v211.st_mtimespec.tv_sec;
      *(_WORD *)&v225[26] = 2048;
      *(_QWORD *)&v225[28] = v211.st_ctimespec.tv_sec;
      *(_WORD *)&v225[36] = 2048;
      *(_QWORD *)&v225[38] = v211.st_size;
      *(_WORD *)&v225[46] = 1024;
      *(_DWORD *)&v225[48] = v211.st_flags;
      *(_WORD *)&v225[52] = 2112;
      *(_QWORD *)&v225[54] = v200;
      _os_log_error_impl(&dword_1CBD43000, v116, (os_log_type_t)0x90u, "[ERROR] not a directory at (%d, '%@') after mkdir deviceID:%u fileID:%llu mode:%c%c%c%c%c%c%c%c%c%c nlink:%u uid:%u gid:%u atime:%lu mtime:%lu ctime:%lu size:%llu flags:0x%x%@", buf, 0xA8u);
    }

    goto LABEL_139;
  }
  v88 = v97 >= 0;
LABEL_114:
  v106 = getuid();
  if (v211.st_uid != v106)
  {
    brc_bread_crumbs();
    v107 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v108 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v108, (os_log_type_t)0x90u))
    {
      v155 = aPcDBLSW[(unint64_t)v211.st_mode >> 12];
      if ((v211.st_mode & 0x100) != 0)
        v156 = 114;
      else
        v156 = 45;
      if ((v211.st_mode & 0x80) != 0)
        v157 = 119;
      else
        v157 = 45;
      if ((v211.st_mode & 0x40) != 0)
        v158 = 120;
      else
        v158 = 45;
      if ((v211.st_mode & 0x20) != 0)
        v159 = 114;
      else
        v159 = 45;
      if ((v211.st_mode & 0x10) != 0)
        v160 = 119;
      else
        v160 = 45;
      v161 = v5;
      if ((v211.st_mode & 8) != 0)
        v162 = 120;
      else
        v162 = 45;
      if ((v211.st_mode & 4) != 0)
        v163 = 114;
      else
        v163 = 45;
      if ((v211.st_mode & 2) != 0)
        v164 = 119;
      else
        v164 = 45;
      if ((v211.st_mode & 1) != 0)
        v165 = 120;
      else
        v165 = 45;
      *(_DWORD *)buf = 67115010;
      *(_DWORD *)&buf[4] = v106;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = -1;
      *(_WORD *)&buf[14] = 2112;
      *(_QWORD *)&buf[16] = v79;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = v211.st_dev;
      *(_WORD *)&buf[30] = 2048;
      *(_QWORD *)&buf[32] = v211.st_ino;
      *(_WORD *)&buf[40] = 1024;
      *(_DWORD *)&buf[42] = v155;
      *(_WORD *)v215 = 1024;
      *(_DWORD *)&v215[2] = v156;
      *(_WORD *)v216 = 1024;
      *(_DWORD *)&v216[2] = v157;
      *(_WORD *)v217 = 1024;
      *(_DWORD *)&v217[2] = v158;
      *(_WORD *)v218 = 1024;
      *(_DWORD *)&v218[2] = v159;
      *(_WORD *)v219 = 1024;
      *(_DWORD *)&v219[2] = v160;
      *(_WORD *)v220 = 1024;
      *(_DWORD *)&v220[2] = v162;
      v5 = v161;
      *(_WORD *)v221 = 1024;
      *(_DWORD *)&v221[2] = v163;
      *(_WORD *)v222 = 1024;
      *(_DWORD *)&v222[2] = v164;
      *(_WORD *)v223 = 1024;
      *(_DWORD *)&v223[2] = v165;
      *(_WORD *)v224 = 1024;
      *(_DWORD *)&v224[2] = v211.st_nlink;
      *(_WORD *)v225 = 1024;
      *(_DWORD *)&v225[2] = v211.st_uid;
      *(_WORD *)&v225[6] = 1024;
      *(_DWORD *)&v225[8] = v211.st_gid;
      *(_WORD *)&v225[12] = 2048;
      *(_QWORD *)&v225[14] = v211.st_atimespec.tv_sec;
      *(_WORD *)&v225[22] = 2048;
      *(_QWORD *)&v225[24] = v211.st_mtimespec.tv_sec;
      *(_WORD *)&v225[32] = 2048;
      *(_QWORD *)&v225[34] = v211.st_ctimespec.tv_sec;
      *(_WORD *)&v225[42] = 2048;
      *(_QWORD *)&v225[44] = v211.st_size;
      *(_WORD *)&v225[52] = 1024;
      *(_DWORD *)&v225[54] = v211.st_flags;
      *(_WORD *)&v225[58] = 2112;
      *(_QWORD *)&v225[60] = v107;
      _os_log_error_impl(&dword_1CBD43000, v108, (os_log_type_t)0x90u, "[ERROR] unexpected uid != %u at (%d, '%@')deviceID:%u fileID:%llu mode:%c%c%c%c%c%c%c%c%c%c nlink:%u uid:%u gid:%u atime:%lu mtime:%lu ctime:%lu size:%llu flags:0x%x%@", buf, 0xAEu);
    }

  }
  if ((~v211.st_mode & 0x1ED) == 0)
    goto LABEL_121;
  brc_bread_crumbs();
  v109 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v110 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v110, (os_log_type_t)0x90u))
  {
    v166 = aPcDBLSW[(unint64_t)v211.st_mode >> 12];
    if ((v211.st_mode & 0x100) != 0)
      v167 = 114;
    else
      v167 = 45;
    if ((v211.st_mode & 0x80) != 0)
      v168 = 119;
    else
      v168 = 45;
    if ((v211.st_mode & 0x40) != 0)
      v169 = 120;
    else
      v169 = 45;
    if ((v211.st_mode & 0x20) != 0)
      v170 = 114;
    else
      v170 = 45;
    if ((v211.st_mode & 0x10) != 0)
      v171 = 119;
    else
      v171 = 45;
    if ((v211.st_mode & 8) != 0)
      v172 = 120;
    else
      v172 = 45;
    if ((v211.st_mode & 4) != 0)
      v173 = 114;
    else
      v173 = 45;
    if ((v211.st_mode & 2) != 0)
      v174 = 119;
    else
      v174 = 45;
    if ((v211.st_mode & 1) != 0)
      v175 = 120;
    else
      v175 = 45;
    *(_DWORD *)buf = 67114754;
    *(_DWORD *)&buf[4] = -1;
    *(_WORD *)&buf[8] = 2112;
    *(_QWORD *)&buf[10] = v79;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v211.st_dev;
    *(_WORD *)&buf[24] = 2048;
    *(_QWORD *)&buf[26] = v211.st_ino;
    *(_WORD *)&buf[34] = 1024;
    *(_DWORD *)&buf[36] = v166;
    *(_WORD *)&buf[40] = 1024;
    *(_DWORD *)&buf[42] = v167;
    *(_WORD *)v215 = 1024;
    *(_DWORD *)&v215[2] = v168;
    *(_WORD *)v216 = 1024;
    *(_DWORD *)&v216[2] = v169;
    *(_WORD *)v217 = 1024;
    *(_DWORD *)&v217[2] = v170;
    *(_WORD *)v218 = 1024;
    *(_DWORD *)&v218[2] = v171;
    *(_WORD *)v219 = 1024;
    *(_DWORD *)&v219[2] = v172;
    *(_WORD *)v220 = 1024;
    *(_DWORD *)&v220[2] = v173;
    *(_WORD *)v221 = 1024;
    *(_DWORD *)&v221[2] = v174;
    *(_WORD *)v222 = 1024;
    *(_DWORD *)&v222[2] = v175;
    *(_WORD *)v223 = 1024;
    *(_DWORD *)&v223[2] = v211.st_nlink;
    *(_WORD *)v224 = 1024;
    *(_DWORD *)&v224[2] = v211.st_uid;
    *(_WORD *)v225 = 1024;
    *(_DWORD *)&v225[2] = v211.st_gid;
    *(_WORD *)&v225[6] = 2048;
    *(_QWORD *)&v225[8] = v211.st_atimespec.tv_sec;
    *(_WORD *)&v225[16] = 2048;
    *(_QWORD *)&v225[18] = v211.st_mtimespec.tv_sec;
    *(_WORD *)&v225[26] = 2048;
    *(_QWORD *)&v225[28] = v211.st_ctimespec.tv_sec;
    *(_WORD *)&v225[36] = 2048;
    *(_QWORD *)&v225[38] = v211.st_size;
    *(_WORD *)&v225[46] = 1024;
    *(_DWORD *)&v225[48] = v211.st_flags;
    *(_WORD *)&v225[52] = 2112;
    *(_QWORD *)&v225[54] = v109;
    _os_log_error_impl(&dword_1CBD43000, v110, (os_log_type_t)0x90u, "[ERROR] unexpected permissions at (%d, '%@') deviceID:%u fileID:%llu mode:%c%c%c%c%c%c%c%c%c%c nlink:%u uid:%u gid:%u atime:%lu mtime:%lu ctime:%lu size:%llu flags:0x%x%@", buf, 0xA8u);
  }

  if (fchmod(v87, v211.st_mode | 0x1ED) < 0)
  {
    v117 = *__error();
    brc_bread_crumbs();
    v118 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v119 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v119, (os_log_type_t)0x90u))
    {
      v186 = aPcDBLSW[(unint64_t)v211.st_mode >> 12];
      if ((v211.st_mode & 0x100) != 0)
        v187 = 114;
      else
        v187 = 45;
      if ((v211.st_mode & 0x80) != 0)
        v188 = 119;
      else
        v188 = 45;
      if ((v211.st_mode & 0x40) != 0)
        v189 = 120;
      else
        v189 = 45;
      if ((v211.st_mode & 0x20) != 0)
        v190 = 114;
      else
        v190 = 45;
      if ((v211.st_mode & 0x10) != 0)
        v191 = 119;
      else
        v191 = 45;
      if ((v211.st_mode & 8) != 0)
        v192 = 120;
      else
        v192 = 45;
      if ((v211.st_mode & 4) != 0)
        v193 = 114;
      else
        v193 = 45;
      if ((v211.st_mode & 2) != 0)
        v194 = 119;
      else
        v194 = 45;
      if ((v211.st_mode & 1) != 0)
        v195 = 120;
      else
        v195 = 45;
      *(_DWORD *)buf = 67115010;
      *(_DWORD *)&buf[4] = -1;
      *(_WORD *)&buf[8] = 2112;
      *(_QWORD *)&buf[10] = v79;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v211.st_dev;
      *(_WORD *)&buf[24] = 2048;
      *(_QWORD *)&buf[26] = v211.st_ino;
      *(_WORD *)&buf[34] = 1024;
      *(_DWORD *)&buf[36] = v186;
      *(_WORD *)&buf[40] = 1024;
      *(_DWORD *)&buf[42] = v187;
      *(_WORD *)v215 = 1024;
      *(_DWORD *)&v215[2] = v188;
      *(_WORD *)v216 = 1024;
      *(_DWORD *)&v216[2] = v189;
      *(_WORD *)v217 = 1024;
      *(_DWORD *)&v217[2] = v190;
      *(_WORD *)v218 = 1024;
      *(_DWORD *)&v218[2] = v191;
      *(_WORD *)v219 = 1024;
      *(_DWORD *)&v219[2] = v192;
      *(_WORD *)v220 = 1024;
      *(_DWORD *)&v220[2] = v193;
      *(_WORD *)v221 = 1024;
      *(_DWORD *)&v221[2] = v194;
      *(_WORD *)v222 = 1024;
      *(_DWORD *)&v222[2] = v195;
      *(_WORD *)v223 = 1024;
      *(_DWORD *)&v223[2] = v211.st_nlink;
      *(_WORD *)v224 = 1024;
      *(_DWORD *)&v224[2] = v211.st_uid;
      *(_WORD *)v225 = 1024;
      *(_DWORD *)&v225[2] = v211.st_gid;
      *(_WORD *)&v225[6] = 2048;
      *(_QWORD *)&v225[8] = v211.st_atimespec.tv_sec;
      *(_WORD *)&v225[16] = 2048;
      *(_QWORD *)&v225[18] = v211.st_mtimespec.tv_sec;
      *(_WORD *)&v225[26] = 2048;
      *(_QWORD *)&v225[28] = v211.st_ctimespec.tv_sec;
      *(_WORD *)&v225[36] = 2048;
      *(_QWORD *)&v225[38] = v211.st_size;
      *(_WORD *)&v225[46] = 1024;
      *(_DWORD *)&v225[48] = v211.st_flags;
      *(_WORD *)&v225[52] = 1024;
      *(_DWORD *)&v225[54] = v117;
      *(_WORD *)&v225[58] = 2112;
      *(_QWORD *)&v225[60] = v118;
      _os_log_error_impl(&dword_1CBD43000, v119, (os_log_type_t)0x90u, "[ERROR] failed chmod at (%d, '%@') deviceID:%u fileID:%llu mode:%c%c%c%c%c%c%c%c%c%c nlink:%u uid:%u gid:%u atime:%lu mtime:%lu ctime:%lu size:%llu flags:0x%x %{errno}d%@", buf, 0xAEu);
    }

    *__error() = v117;
    goto LABEL_139;
  }
  if (fstat(v87, &v211) < 0)
  {
    v92 = *__error();
    brc_bread_crumbs();
    v93 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v94 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v94, (os_log_type_t)0x90u))
    {
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = -1;
      *(_WORD *)&buf[8] = 2112;
      *(_QWORD *)&buf[10] = v79;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v92;
      *(_WORD *)&buf[24] = 2112;
      *(_QWORD *)&buf[26] = v93;
      _os_log_error_impl(&dword_1CBD43000, v94, (os_log_type_t)0x90u, "[ERROR] can't fstat (%d, '%@') after mkdir %{errno}d%@", buf, 0x22u);
    }
LABEL_138:

    *__error() = v92;
LABEL_139:
    close(v87);
LABEL_140:

    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v120 = (void *)objc_claimAutoreleasedReturnValue();
    v212 = *MEMORY[0x1E0CB2AA8];
    v213 = &unk_1E87D71D8;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v213, &v212, 1);
    v121 = (void *)objc_claimAutoreleasedReturnValue();
    v206 = 0;
    v122 = objc_msgSend(v120, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v79, 1, v121, &v206);
    v42 = v206;

    if (!v122)
    {
      brc_bread_crumbs();
      v39 = (id)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v40 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v40, (os_log_type_t)0x90u))
      {
        *(_DWORD *)buf = 138412802;
        *(_QWORD *)&buf[4] = v79;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v42;
        *(_WORD *)&buf[22] = 2112;
        *(_QWORD *)&buf[24] = v39;
        _os_log_error_impl(&dword_1CBD43000, v40, (os_log_type_t)0x90u, "[ERROR] Failed to create root at %@ - %@%@", buf, 0x20u);
      }
      v43 = 1;
      goto LABEL_147;
    }
    goto LABEL_141;
  }
LABEL_121:
  close(v87);
  brc_bread_crumbs();
  v111 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v112 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v112, OS_LOG_TYPE_DEBUG))
  {
    v133 = "found";
    v134 = aPcDBLSW[(unint64_t)v211.st_mode >> 12];
    if (v88)
      v133 = "created";
    if ((v211.st_mode & 0x100) != 0)
      v135 = 114;
    else
      v135 = 45;
    if ((v211.st_mode & 0x80) != 0)
      v136 = 119;
    else
      v136 = 45;
    if ((v211.st_mode & 0x40) != 0)
      v137 = 120;
    else
      v137 = 45;
    if ((v211.st_mode & 0x20) != 0)
      v138 = 114;
    else
      v138 = 45;
    v139 = v5;
    if ((v211.st_mode & 0x10) != 0)
      v140 = 119;
    else
      v140 = 45;
    *(_QWORD *)&buf[4] = v133;
    *(_DWORD *)&buf[14] = -1;
    if ((v211.st_mode & 8) != 0)
      v141 = 120;
    else
      v141 = 45;
    if ((v211.st_mode & 4) != 0)
      v142 = 114;
    else
      v142 = 45;
    *(_DWORD *)buf = 136321026;
    if ((v211.st_mode & 2) != 0)
      v143 = 119;
    else
      v143 = 45;
    *(_WORD *)&buf[12] = 1024;
    if ((v211.st_mode & 1) != 0)
      v144 = 120;
    else
      v144 = 45;
    *(_WORD *)&buf[18] = 2112;
    *(_QWORD *)&buf[20] = v79;
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = v211.st_dev;
    *(_WORD *)&buf[34] = 2048;
    *(_QWORD *)&buf[36] = v211.st_ino;
    *(_WORD *)&buf[44] = 1024;
    *(_DWORD *)v215 = v134;
    *(_WORD *)&v215[4] = 1024;
    *(_DWORD *)v216 = v135;
    *(_WORD *)&v216[4] = 1024;
    *(_DWORD *)v217 = v136;
    *(_WORD *)&v217[4] = 1024;
    *(_DWORD *)v218 = v137;
    *(_WORD *)&v218[4] = 1024;
    *(_DWORD *)v219 = v138;
    *(_WORD *)&v219[4] = 1024;
    *(_DWORD *)v220 = v140;
    v5 = v139;
    *(_WORD *)&v220[4] = 1024;
    *(_DWORD *)v221 = v141;
    *(_WORD *)&v221[4] = 1024;
    *(_DWORD *)v222 = v142;
    *(_WORD *)&v222[4] = 1024;
    *(_DWORD *)v223 = v143;
    *(_WORD *)&v223[4] = 1024;
    *(_DWORD *)v224 = v144;
    *(_WORD *)&v224[4] = 1024;
    *(_DWORD *)v225 = v211.st_nlink;
    *(_WORD *)&v225[4] = 1024;
    *(_DWORD *)&v225[6] = v211.st_uid;
    *(_WORD *)&v225[10] = 1024;
    *(_DWORD *)&v225[12] = v211.st_gid;
    *(_WORD *)&v225[16] = 2048;
    *(_QWORD *)&v225[18] = v211.st_atimespec.tv_sec;
    *(_WORD *)&v225[26] = 2048;
    *(_QWORD *)&v225[28] = v211.st_mtimespec.tv_sec;
    *(_WORD *)&v225[36] = 2048;
    *(_QWORD *)&v225[38] = v211.st_ctimespec.tv_sec;
    *(_WORD *)&v225[46] = 2048;
    *(_QWORD *)&v225[48] = v211.st_size;
    *(_WORD *)&v225[56] = 1024;
    *(_DWORD *)&v225[58] = v211.st_flags;
    *(_WORD *)&v225[62] = 2112;
    *(_QWORD *)&v225[64] = v111;
    _os_log_debug_impl(&dword_1CBD43000, v112, OS_LOG_TYPE_DEBUG, "[DEBUG] %s dir at (%d, '%@') deviceID:%u fileID:%llu mode:%c%c%c%c%c%c%c%c%c%c nlink:%u uid:%u gid:%u atime:%lu mtime:%lu ctime:%lu size:%llu flags:0x%x%@", buf, 0xB2u);
  }

  v42 = 0;
LABEL_141:
  v123 = objc_retainAutorelease(v79);
  v124 = (const char *)objc_msgSend(v123, "fileSystemRepresentation");
  v130 = BRCOpenAt(0xFFFFFFFFLL, v124, 33028, v125, v126, v127, v128, v129, v198);
  v131 = v130;
  if ((v130 & 0x80000000) == 0)
  {
    BRCSetXattrValueForKeyOnFD(v130, v123, CFSTR("com.apple.ubd.prsid"), v202);
    close(v131);
  }
  v43 = 1;
LABEL_148:

  __brc_leave_section(v209);
  return v43;
}

void sub_1CBDF9830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  __brc_leave_section(&a37);
  _Unwind_Resume(a1);
}

uint64_t BRCRootIsOwnedByUbd(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  unsigned int v17;
  int v18;
  void *v19;
  NSObject *v20;
  stat v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v1 = objc_retainAutorelease(a1);
  v2 = (const char *)objc_msgSend(v1, "fileSystemRepresentation");
  v8 = BRCOpenAt(0xFFFFFFFFLL, v2, 33028, v3, v4, v5, v6, v7, v22.st_dev);
  if (v8 < 0)
  {
    if (*__error() == 2)
    {
      v11 = 0;
    }
    else
    {
      v18 = *__error();
      brc_bread_crumbs();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, (os_log_type_t)0x90u))
      {
        v22.st_dev = 138412802;
        *(_QWORD *)&v22.st_mode = v1;
        WORD2(v22.st_ino) = 1024;
        *(_DWORD *)((char *)&v22.st_ino + 6) = v18;
        HIWORD(v22.st_uid) = 2112;
        *(_QWORD *)&v22.st_gid = v19;
        _os_log_error_impl(&dword_1CBD43000, v20, (os_log_type_t)0x90u, "[ERROR] can't open root '%@' %{errno}d%@", (uint8_t *)&v22, 0x1Cu);
      }

      v11 = 0;
      *__error() = v18;
    }
  }
  else
  {
    v9 = v8;
    memset(&v22, 0, sizeof(v22));
    v10 = fstatat(v8, ".ubd", &v22, 32);
    v11 = v10 == 0;
    if (!v10)
    {
      brc_bread_crumbs();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        BRCRootIsOwnedByUbd_cold_2(&v22.st_dev, (uint64_t)v12, v13);

    }
    BRCGetXattrValueForKeyOnFD(v9, v1, CFSTR("com.apple.ubd.prsid"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (v14)
    {
      brc_bread_crumbs();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        BRCRootIsOwnedByUbd_cold_1();

      v17 = objc_msgSend(v14, "hasSuffix:", CFSTR(".CloudDocs")) ^ 1;
      if (v10)
        v11 = v17;
      else
        v11 = 1;
    }
    close(v9);

  }
  return v11;
}

uint64_t BRCConvertDownloadOptionsToInternal(unint64_t a1)
{
  uint64_t v2;

  if ((a1 & 1) != 0)
  {
    v2 = 1;
  }
  else if ((a1 & 4) != 0)
  {
    v2 = 16;
  }
  else
  {
    v2 = 8 * (qos_class_self() > 0x18);
  }
  return (2 * (int)a1) & 4 | (32 * ((a1 >> 3) & 1)) | v2;
}

void sub_1CBDFE1EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBE007B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBE01FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__16(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__16(uint64_t a1)
{

}

void sub_1CBE04760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL brc_pack_xattrs(int a1, void *a2, unint64_t a3, uint64_t a4, unint64_t a5, _QWORD *a6)
{
  id v9;
  BOOL v10;
  id v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  void *v29;
  NSObject *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  void *v35;
  NSObject *v36;
  const char *v38;
  _QWORD *v39;
  void *v40;
  unint64_t v41;
  void *v44;
  id v45;
  uint8_t buf[4];
  const char *v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  id v51;
  __int16 v52;
  void *v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v40 = (void *)objc_opt_new();
  v41 = a5;
  if (!a5)
  {
    v10 = 1;
    goto LABEL_25;
  }
  v39 = a6;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v44 = v9;
  while (1)
  {
    v13 = v11;
    v14 = *(const char **)(a4 + 8 * v12);
    v15 = strlen(v14);
    objc_msgSend(v9, "data");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend(v16, "length");
    v45 = v11;
    BRCGetXattrValue(a1, v14, a3 - v17 - v15, &v45);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v45;

    if (!v18)
      break;
    v19 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytes:length:encoding:", v14, v15, 4);
    objc_msgSend(v40, "setName:", v19);

    objc_msgSend(v40, "setValue:", v18);
    v20 = v9;
    v21 = objc_alloc_init(MEMORY[0x1E0D82B98]);
    objc_msgSend(v40, "writeTo:", v21);
    -[NSObject data](v21, "data");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "data");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = objc_msgSend(v23, "length");
    v25 = objc_msgSend(v22, "length");
    v26 = objc_msgSend(v22, "length");
    v27 = v24 + v25 + 1;
    do
    {
      ++v27;
      v28 = v26 > 0x7F;
      v26 >>= 7;
    }
    while (v28);

    if (v27 <= a3)
    {
      objc_msgSend(v44, "writeData:forTag:", v22, 1);
      brc_bread_crumbs();
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v30 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        objc_msgSend(v44, "data");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        v33 = objc_msgSend(v32, "length");
        *(_DWORD *)buf = 136315650;
        v47 = v14;
        v48 = 2048;
        v49 = v33;
        v50 = 2112;
        v51 = v29;
        _os_log_debug_impl(&dword_1CBD43000, v30, OS_LOG_TYPE_DEBUG, "[DEBUG] serialized xattr %s (blob size:%ld)%@", buf, 0x20u);

      }
    }
    else
    {
      brc_bread_crumbs();
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v30 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        v31 = objc_msgSend(v18, "length");
        *(_DWORD *)buf = 136315650;
        v47 = v14;
        v48 = 2048;
        v49 = v31;
        v50 = 2112;
        v51 = v29;
        _os_log_impl(&dword_1CBD43000, v30, OS_LOG_TYPE_DEFAULT, "[WARNING] skipping xattr %s (size:%zd) because we don't have enough space anymore%@", buf, 0x20u);
      }
    }

LABEL_15:
    v10 = ++v12 >= v41;
    v9 = v44;
    if (v12 == v41)
    {
      v10 = 1;
      goto LABEL_24;
    }
  }
  if (objc_msgSend(v11, "br_isPOSIXErrorCode:", 27))
  {
    brc_bread_crumbs();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v47 = v14;
      v48 = 2112;
      v49 = (uint64_t)v18;
      _os_log_impl(&dword_1CBD43000, v21, OS_LOG_TYPE_DEFAULT, "[WARNING] Ignoring xattr which is too large %s%@", buf, 0x16u);
    }
    goto LABEL_15;
  }
  v34 = v11;
  if (v34)
  {
    brc_bread_crumbs();
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v36 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v36, (os_log_type_t)0x90u))
    {
      v38 = "(passed to caller)";
      *(_DWORD *)buf = 136315906;
      v47 = "brc_pack_xattrs";
      v48 = 2080;
      if (!v39)
        v38 = "(ignored by caller)";
      v49 = (uint64_t)v38;
      v50 = 2112;
      v51 = v34;
      v52 = 2112;
      v53 = v35;
      _os_log_error_impl(&dword_1CBD43000, v36, (os_log_type_t)0x90u, "[ERROR] %s: %s error: %@%@", buf, 0x2Au);
    }

  }
  if (v39)
    *v39 = objc_retainAutorelease(v34);

LABEL_24:
LABEL_25:

  return v10;
}

void brc_remove_xattrs(int fd, const char **a2, uint64_t a3)
{
  uint64_t v3;
  void *v6;
  NSObject *v7;
  const char *v8;
  const char *v9;
  int v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  _WORD v14[17];

  *(_QWORD *)&v14[13] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v3 = a3;
    do
    {
      if (fremovexattr(fd, *a2, 0) < 0)
      {
        brc_bread_crumbs();
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        brc_default_log();
        v7 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          v9 = *a2;
          v10 = *__error();
          *(_DWORD *)buf = 136315650;
          v12 = v9;
          v13 = 1024;
          *(_DWORD *)v14 = v10;
          v14[2] = 2112;
          *(_QWORD *)&v14[3] = v6;
          _os_log_impl(&dword_1CBD43000, v7, OS_LOG_TYPE_DEFAULT, "[WARNING] removing xattr %s failed %{errno}d%@", buf, 0x1Cu);
        }
      }
      else
      {
        brc_bread_crumbs();
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        brc_default_log();
        v7 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
        {
          v8 = *a2;
          *(_DWORD *)buf = 136315394;
          v12 = v8;
          v13 = 2112;
          *(_QWORD *)v14 = v6;
          _os_log_debug_impl(&dword_1CBD43000, v7, OS_LOG_TYPE_DEBUG, "[DEBUG] removed xattr %s%@", buf, 0x16u);
        }
      }

      ++a2;
      --v3;
    }
    while (v3);
  }
}

void sub_1CBE060E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *location, id *a13, id *a14)
{
  id *v14;
  id *v15;
  id *v16;
  uint64_t v17;

  objc_destroyWeak(v16);
  objc_destroyWeak(v15);
  objc_destroyWeak(v14);
  objc_destroyWeak(location);
  objc_destroyWeak(a13);
  objc_destroyWeak(a14);
  objc_destroyWeak((id *)(v17 - 128));
  _Unwind_Resume(a1);
}

void sub_1CBE06A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  __brc_leave_section(&a42);
  _Unwind_Resume(a1);
}

void sub_1CBE06E98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBE07038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBE0740C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBE0766C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBE07B08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void dispatch_async_with_logs_6(void *a1, void *a2)
{
  NSObject *v3;
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  const char *label;
  _QWORD v12[4];
  NSObject *v13;
  id v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _BYTE buf[24];
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = (void *)MEMORY[0x1D17A6BE8]();
  v17 = 0uLL;
  v18 = 0;
  __brc_create_section(0, (uint64_t)"dispatch_async_with_logs", 262, &v17);
  brc_bread_crumbs();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v10 = v17;
    label = dispatch_queue_get_label(v3);
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = v10;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = label;
    *(_WORD *)&buf[22] = 2112;
    v20 = v6;
    _os_log_debug_impl(&dword_1CBD43000, v7, OS_LOG_TYPE_DEBUG, "[DEBUG] ┣%llx dispatching to %s%@", buf, 0x20u);
  }

  *(_QWORD *)&buf[16] = v18;
  *(_OWORD *)buf = v17;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __dispatch_async_with_logs_block_invoke_10;
  v12[3] = &unk_1E875D578;
  v15 = v17;
  v16 = v18;
  v8 = v3;
  v13 = v8;
  v9 = v4;
  v14 = v9;
  dispatch_async(v8, v12);

  objc_autoreleasePoolPop(v5);
}

void sub_1CBE086F0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1CBE08B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location,uint64_t a22)
{
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  __brc_leave_section(&a22);
  _Unwind_Resume(a1);
}

void sub_1CBE09060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBE09478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBE09A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location,uint64_t a22)
{
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  __brc_leave_section(&a22);
  _Unwind_Resume(a1);
}

void sub_1CBE0A2C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location,uint64_t a22)
{
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  __brc_leave_section(&a22);
  _Unwind_Resume(a1);
}

void sub_1CBE0B2F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBE0BED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBE0C420(_Unwind_Exception *a1)
{
  _BRRestorePersona();
  _Unwind_Resume(a1);
}

void sub_1CBE0C84C(_Unwind_Exception *a1)
{
  _BRRestorePersona();
  _Unwind_Resume(a1);
}

void sub_1CBE0CFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBE0E164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  __brc_leave_section(&a24);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__17(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__17(uint64_t a1)
{

}

void sub_1CBE0E4B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void __dispatch_async_with_logs_block_invoke_10(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  const char *label;
  __int128 v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *(_OWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  brc_bread_crumbs();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    label = dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32));
    *(_DWORD *)buf = 134218498;
    v8 = v5;
    v9 = 2080;
    v10 = label;
    v11 = 2112;
    v12 = v2;
    _os_log_debug_impl(&dword_1CBD43000, v3, OS_LOG_TYPE_DEBUG, "[DEBUG] ┳%llx continuing on %s%@", buf, 0x20u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  __brc_leave_section((uint64_t *)&v5);
}

void sub_1CBE0EA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

Class initUIDevice()
{
  Class Class;

  if (!UIKitLibrary_frameworkLibrary)
  {
    UIKitLibrary_frameworkLibrary = (uint64_t)dlopen("/System/Library/Frameworks/UIKit.framework/UIKit", 2);
    if (!UIKitLibrary_frameworkLibrary)
      initUIDevice_cold_1();
  }
  Class = objc_getClass("UIDevice");
  classUIDevice = (uint64_t)Class;
  if (!Class)
    initUIDevice_cold_2();
  getUIDeviceClass = (uint64_t (*)())UIDeviceFunction;
  return Class;
}

id UIDeviceFunction()
{
  return (id)classUIDevice;
}

void OUTLINED_FUNCTION_9_1(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, (uint8_t *)va, 0x20u);
}

void sub_1CBE12C34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBE13118(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBE132AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBE13AF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBE15384(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBE17F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBE18808(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBE1919C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBE19508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1CBE198B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1CBE19C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1CBE1A098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1CBE1B264(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1CBE1B9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  __brc_leave_section(&a27);
  _Unwind_Resume(a1);
}

void sub_1CBE1BD04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBE1BE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void sub_1CBE1C4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void sub_1CBE1C6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void sub_1CBE1C890(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1CBE1CDCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBE1DD6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__18(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__18(uint64_t a1)
{

}

void sub_1CBE1E270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

__CFString *BRCServerZoneStatePrettyPrint(unsigned int a1)
{
  return BRCPrettyPrintBitmapWithContext(a1, (uint64_t)&server_zone_state_entries, 0);
}

__CFString *BRCServerZoneStatePrettyPrintWithContext(unsigned int a1, void *a2)
{
  return BRCPrettyPrintBitmapWithContext(a1, (uint64_t)&server_zone_state_entries, a2);
}

id _BRCClassesForContainerState()
{
  if (_BRCClassesForContainerState_onceToken != -1)
    dispatch_once(&_BRCClassesForContainerState_onceToken, &__block_literal_global_23);
  return (id)_BRCClassesForContainerState_allowedClasses;
}

void sub_1CBE28050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,os_activity_scope_state_s state)
{
  uint64_t v41;

  _Block_object_dispose((const void *)(v41 - 176), 8);
  __brc_leave_section(&a38);
  os_activity_scope_leave(&state);
  _Block_object_dispose((const void *)(v41 - 240), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__19(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__19(uint64_t a1)
{

}

void sub_1CBE29938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBE29E48(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBE2A130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBE2AEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

void sub_1CBE2B304(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_1CBE2B974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose(&a49, 8);
  _Unwind_Resume(a1);
}

uint64_t BRCGenerationCountFromData(void *a1)
{
  return *(unsigned int *)(objc_msgSend(objc_retainAutorelease(a1), "bytes") + 8);
}

void sub_1CBE2D7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__20(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__20(uint64_t a1)
{

}

void OUTLINED_FUNCTION_1_2(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, (os_log_type_t)0x90u, a4, &a9, 0x16u);
}

uint64_t OUTLINED_FUNCTION_9_2(void *a1, const char *a2)
{
  return objc_msgSend(a1, "changes");
}

void sub_1CBE2EE7C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBE2F654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  objc_sync_exit(v9);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__21(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__21(uint64_t a1)
{

}

void sub_1CBE39510(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __int128 buf, int a20,__int16 a21,__int16 a22,void *a23,__int128 a24)
{
  uint64_t v24;
  id v25;
  void *v26;
  _QWORD *v27;
  void *v28;
  NSObject *v29;
  const char *v30;

  if (a2 == 1)
  {
    v25 = objc_begin_catch(a1);
    objc_msgSend(MEMORY[0x1E0CB35C8], "brc_errorFromException:", v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = *(_QWORD **)(v24 + 24);
    if (v26)
    {
      brc_bread_crumbs();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v29 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v29, (os_log_type_t)0x90u))
      {
        v30 = "(passed to caller)";
        LODWORD(buf) = 136315906;
        *(_QWORD *)((char *)&buf + 4) = "-[CKRecord(BRCSerializationAdditions) serializeStatInfo:diffs:stageID:deadInServ"
                                        "erTruth:shouldPCSChainStatus:basehashSaltGetter:childBasehashSaltGetter:error:]";
        WORD6(buf) = 2080;
        if (!v27)
          v30 = "(ignored by caller)";
        *(_QWORD *)((char *)&buf + 14) = v30;
        a22 = 2112;
        a23 = v26;
        LOWORD(a24) = 2112;
        *(_QWORD *)((char *)&a24 + 2) = v28;
        _os_log_error_impl(&dword_1CBD43000, v29, (os_log_type_t)0x90u, "[ERROR] %s: %s error: %@%@", (uint8_t *)&buf, 0x2Au);
      }

    }
    if (v27)
      *v27 = objc_retainAutorelease(v26);

    objc_end_catch();
    JUMPOUT(0x1CBE394B4);
  }
  _Unwind_Resume(a1);
}

void sub_1CBE3A198(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 buf, int a16, __int16 a17, __int16 a18, void *a19, __int128 a20)
{
  id v20;
  void *v21;
  void *v22;
  NSObject *v23;
  const char *v24;

  if (a2 == 1)
  {
    v20 = objc_begin_catch(a1);
    objc_msgSend(MEMORY[0x1E0CB35C8], "brc_errorFromException:", v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    if (v21)
    {
      brc_bread_crumbs();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, (os_log_type_t)0x90u))
      {
        v24 = "(passed to caller)";
        LODWORD(buf) = 136315906;
        *(_QWORD *)((char *)&buf + 4) = "-[CKRecord(BRCSerializationAdditions) serializeVersion:diffs:deadInServerTruth:b"
                                        "asehashSalt:error:]";
        WORD6(buf) = 2080;
        if (!a10)
          v24 = "(ignored by caller)";
        *(_QWORD *)((char *)&buf + 14) = v24;
        a18 = 2112;
        a19 = v21;
        LOWORD(a20) = 2112;
        *(_QWORD *)((char *)&a20 + 2) = v22;
        _os_log_error_impl(&dword_1CBD43000, v23, (os_log_type_t)0x90u, "[ERROR] %s: %s error: %@%@", (uint8_t *)&buf, 0x2Au);
      }

    }
    if (a10)
      *a10 = objc_retainAutorelease(v21);

    objc_end_catch();
    JUMPOUT(0x1CBE3A000);
  }
  _Unwind_Resume(a1);
}

__CFString *prettyPrintServerChangeToken(void *a1, uint64_t a2)
{
  __CFString *v2;
  __CFString *v3;
  __CFString *v4;

  objc_msgSend(a1, "descriptionWithContext:", a2);
  v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (!v2)
    v2 = CFSTR("nil-token");
  v4 = v2;

  return v4;
}

__CFString *prettyPrintQueryCursor(void *a1)
{
  void *v1;
  __CFString *v2;
  __CFString *v3;
  __CFString *v4;

  objc_msgSend(a1, "data");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "base64EncodedStringWithOptions:", 0);
  v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (!v2)
    v2 = CFSTR("nil-cursor");
  v4 = v2;

  return v4;
}

id OUTLINED_FUNCTION_11_2(id a1)
{
  return objc_retainAutorelease(a1);
}

void sub_1CBE3E508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBE3E7D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBE3F148(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 240));
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__22(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__22(uint64_t a1)
{

}

void sub_1CBE3F3C4(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_1CBE3F500(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBE3F860(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1CBE3FBD0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBE3FFDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1CBE407D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBE40AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __brc_dispatch_async_autorelease_block_invoke_0(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x1D17A6BE8]();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  objc_autoreleasePoolPop(v2);
}

void __dispatch_async_with_logs_block_invoke_11(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  const char *label;
  __int128 v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *(_OWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  brc_bread_crumbs();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    label = dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32));
    *(_DWORD *)buf = 134218498;
    v8 = v5;
    v9 = 2080;
    v10 = label;
    v11 = 2112;
    v12 = v2;
    _os_log_debug_impl(&dword_1CBD43000, v3, OS_LOG_TYPE_DEBUG, "[DEBUG] ┳%llx continuing on %s%@", buf, 0x20u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  __brc_leave_section((uint64_t *)&v5);
}

void sub_1CBE40E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void __brc_dispatch_async_autorelease_with_logs_block_invoke_1(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  const char *label;
  __int128 v6;
  uint64_t v7;
  uint8_t buf[4];
  uint64_t v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17A6BE8]();
  v6 = *(_OWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 64);
  brc_bread_crumbs();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    label = dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32));
    *(_DWORD *)buf = 134218498;
    v9 = v6;
    v10 = 2080;
    v11 = label;
    v12 = 2112;
    v13 = v3;
    _os_log_debug_impl(&dword_1CBD43000, v4, OS_LOG_TYPE_DEBUG, "[DEBUG] ┳%llx continuing on %s%@", buf, 0x20u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  __brc_leave_section((uint64_t *)&v6);
  objc_autoreleasePoolPop(v2);
}

void sub_1CBE40FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void sub_1CBE422F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;

  __brc_leave_section(&a64);
  _Unwind_Resume(a1);
}

void sub_1CBE43B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void reuploadItemInContainer(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  int v12;
  void *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  NSObject *v20;
  void *v21;
  NSObject *v22;
  void *v23;

  v7 = a1;
  v8 = a3;
  v9 = a4;
  v10 = a2;
  objc_msgSend(v7, "recordType");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "isEqualToString:", CFSTR("structure"));

  if (v12)
  {
    brc_bread_crumbs();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      reuploadItemInContainer_cold_1();

    handleErrorForRecord(v7, v10, v8, v9);
  }
  else
  {
    objc_msgSend(v7, "recordID");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "session");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "brc_itemIDWithSession:", v16);
    v17 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(v10, "itemByItemID:", v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v18, "isDocument")
      && objc_msgSend(v18, "syncUpState") == 4
      && (objc_msgSend(v18, "isDead") & 1) == 0)
    {
      brc_bread_crumbs();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
        reuploadItemInContainer_cold_3();

      objc_msgSend(v18, "asDocument");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "markNeedsReading");

      objc_msgSend(v18, "saveToDB");
    }
    else
    {
      brc_bread_crumbs();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        reuploadItemInContainer_cold_2();

    }
    v10 = (id)v17;
  }

}

void markRecordBacklistedFromSyncWithMinimumSupportedOS(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v5 = a3;
  v6 = a2;
  objc_msgSend(a1, "recordID");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "session");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "brc_itemIDWithSession:", v8);
  v10 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "itemByItemID:", v10);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v9, "markNeedsOSUpgradeToSyncUpWithName:", v6);
  objc_msgSend(v9, "saveToDB");

}

void markRecordNeedingRemapToNewParent(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  NSObject *v22;

  v7 = a1;
  v8 = a3;
  v9 = a4;
  v10 = a2;
  objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("parent"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v11, "recordID");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v12 = 0;
  }
  v13 = objc_alloc(MEMORY[0x1E0C95070]);
  objc_msgSend(v8, "serverZone");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "zoneID");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = (void *)objc_msgSend(v13, "initWithRecordName:zoneID:", v10, v15);

  objc_msgSend(v8, "session");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "brc_itemIDWithSession:", v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v8, "session");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "brc_itemIDWithSession:", v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  if (v20)
  {
    remapItemIDToNewItemID(v20, v18, v8, v9);
  }
  else
  {
    brc_bread_crumbs();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
      markRecordNeedingRemapToNewParent_cold_1();

  }
}

void markRecordNeedingRemapToNewRecordName(void *a1, void *a2, void *a3, void *a4)
{
  objc_class *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;

  v7 = (objc_class *)MEMORY[0x1E0C95070];
  v8 = a4;
  v9 = a3;
  v10 = a2;
  v11 = a1;
  v12 = [v7 alloc];
  objc_msgSend(v9, "serverZone");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "zoneID");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = (id)objc_msgSend(v12, "initWithRecordName:zoneID:", v10, v14);

  objc_msgSend(v9, "session");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "brc_itemIDWithSession:", v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v11, "recordID");
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v9, "session");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "brc_itemIDWithSession:", v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  remapItemIDToNewItemID(v19, v16, v9, v8);
}

void handleErrorForRecord(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  unint64_t v32;
  void *v33;
  void *v34;
  unint64_t v35;
  id v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  id v44;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = v7;
  v11 = a1;
  objc_msgSend(v10, "session");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "recordID");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "recordName");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "hasPrefix:", CFSTR("shareAlias/"));

  if (!v15)
  {
    objc_msgSend(v11, "recordID");
    v26 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v26, "brc_itemIDWithSession:", v12);
    v27 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v10, "itemByItemID:", v27);
    v23 = (void *)objc_claimAutoreleasedReturnValue();

    v20 = v10;
    goto LABEL_12;
  }
  objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("target"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v16)
  {
    v23 = 0;
    v20 = v10;
    goto LABEL_11;
  }
  objc_msgSend(v16, "recordID");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "zoneID");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "serverZoneByCKZoneID:", v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "clientZone");
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v20)
    goto LABEL_8;
  objc_msgSend(v16, "recordID");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "brc_itemIDWithSession:", v12);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "itemByItemID:", v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  if (!objc_msgSend(v23, "syncUpState"))
  {
    brc_bread_crumbs();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_FAULT))
      handleErrorForRecord_cold_2();

LABEL_8:
    v23 = 0;
  }
LABEL_11:

LABEL_12:
  brc_bread_crumbs();
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v29 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
    handleErrorForRecord_cold_1();

  if (v23)
  {
    if ((objc_msgSend(v23, "isZoneRoot") & 1) == 0)
    {
      objc_msgSend(v9, "syncUpCallback");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "dbRowID");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      v32 = objc_msgSend(v30, "postponeSyncUpCallback:inZone:", v23, v31);

      objc_msgSend(v20, "mangledID");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      +[BRCUserDefaults defaultsForMangledID:](BRCUserDefaults, "defaultsForMangledID:", v33);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      v35 = objc_msgSend(v34, "syncUpRetryCountForFailure");

      if (v32 > v35)
      {
        v36 = v23;
        objc_msgSend(v8, "brc_telemetryReportableErrorWithRecordName:", 0);
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v36, "db");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        v43 = objc_msgSend(v36, "dbRowID");

        objc_msgSend(v37, "domain");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        v44 = v8;
        v40 = objc_msgSend(v37, "code");
        objc_msgSend(v37, "brc_cloudKitErrorMessage");
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v38, "execute:", CFSTR("INSERT OR REPLACE INTO item_errors (item_rowid, error_domain, error_code, error_message, service) VALUES (%llu, %@, %ld, %@, %d)"), v43, v39, v40, v41, 3);

        +[BRCAutoBugCaptureReporter sharedABCReporter](BRCAutoBugCaptureReporter, "sharedABCReporter");
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v42, "captureLogsForOperationType:ofSubtype:forError:", CFSTR("SyncHealth"), CFSTR("SyncUp"), v37);

        v8 = v44;
      }
    }
  }
  objc_msgSend(v9, "setThrottledItemInBatch:", 1);

}

void sub_1CBE46158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CBE469A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__23(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__23(uint64_t a1)
{

}

void sub_1CBE47578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void remapItemIDToNewItemID(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  NSObject *v12;
  void *v13;
  _QWORD v14[4];
  id v15;
  id v16;
  id v17;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  if (objc_msgSend(v10, "containsObject:", v7))
  {
    brc_bread_crumbs();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      remapItemIDToNewItemID_cold_1();

  }
  else
  {
    objc_msgSend(v10, "addObject:", v7);
    objc_msgSend(v9, "db");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __remapItemIDToNewItemID_block_invoke;
    v14[3] = &unk_1E8761D60;
    v15 = v9;
    v16 = v7;
    v17 = v8;
    objc_msgSend(v13, "groupInTransaction:", v14);

  }
}

uint64_t __remapItemIDToNewItemID_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  void *v16;
  uint64_t v17;
  void *v18;
  NSObject *v19;
  int v20;
  void *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "itemByItemID:", *(_QWORD *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "isKnownByServer"))
  {
    brc_bread_crumbs();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT))
      __remapItemIDToNewItemID_block_invoke_cold_1();

  }
  objc_msgSend(*(id *)(a1 + 32), "serverItemByItemID:", *(_QWORD *)(a1 + 48));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "itemByItemID:", *(_QWORD *)(a1 + 48));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    brc_bread_crumbs();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(void **)(a1 + 40);
      v8 = *(_QWORD *)(a1 + 48);
      v20 = 138412802;
      v21 = v7;
      v22 = 2112;
      v23 = v8;
      v24 = 2112;
      v25 = v5;
      _os_log_impl(&dword_1CBD43000, v6, OS_LOG_TYPE_DEFAULT, "[WARNING] We were told to remap to an item %@ -> %@ which is already in our client truth%@", (uint8_t *)&v20, 0x20u);
    }

    if (objc_msgSend(v4, "isOnDisk"))
    {
      brc_bread_crumbs();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        v20 = 138412290;
        v21 = v9;
        _os_log_impl(&dword_1CBD43000, v10, OS_LOG_TYPE_DEFAULT, "[WARNING] Item is also on disk, marking the item as rejected%@", (uint8_t *)&v20, 0xCu);
      }

      objc_msgSend(v4, "markForceRejected");
      v11 = (void *)objc_opt_new();
      objc_msgSend(v4, "learnItemID:serverItem:path:markLost:", v11, 0, 0, 1);

      if ((objc_msgSend(v4, "saveToDB") & 1) == 0)
        goto LABEL_9;
    }
    else
    {
      objc_msgSend(v4, "markNeedsDeleteForRescheduleOfItem:", v3);
      if (!objc_msgSend(v4, "saveToDB"))
      {
LABEL_9:
        v12 = 0;
        goto LABEL_14;
      }
    }
  }
  brc_bread_crumbs();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    v16 = *(void **)(a1 + 40);
    v17 = *(_QWORD *)(a1 + 48);
    v20 = 138412802;
    v21 = v16;
    v22 = 2112;
    v23 = v17;
    v24 = 2112;
    v25 = v13;
    _os_log_debug_impl(&dword_1CBD43000, v14, OS_LOG_TYPE_DEBUG, "[DEBUG] The server wasn't able to remap parentID %@ to pcs chained parent %@ so doing it now%@", (uint8_t *)&v20, 0x20u);
  }

  objc_msgSend(v2, "learnItemID:serverItem:path:markLost:", *(_QWORD *)(a1 + 48), v3, 0, 0);
  v12 = objc_msgSend(v2, "saveToDB");
LABEL_14:

  return v12;
}

void sub_1CBE4BE74(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBE4C174(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBE4C284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  objc_sync_exit(v7);
  _Unwind_Resume(a1);
}

void sub_1CBE4C4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t br_create_tables_initial(void *a1, void *a2, int a3, void **a4)
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  NSObject *v18;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v7 = a1;
  v8 = a2;
  v9 = v8;
  v21 = 0uLL;
  v22 = 0;
  if (!a3)
  {
    if (v7)
    {
      if ((objc_msgSend(v7, "_setupBackupDetector:error:", &v21, a4) & 1) == 0)
      {
LABEL_25:
        v14 = 0;
        goto LABEL_26;
      }
    }
    else
    {
      v21 = xmmword_1CC066F50;
      v22 = 0;
    }
    if (objc_msgSend(v9, "execute:", CFSTR("CREATE TABLE backup_detector( old integer, new integer, counter integer, os text not null, br text not null)")))
    {
      v20 = v21;
      v10 = v22;
      OSVersion();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      BRVersion();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v9, "execute:", CFSTR("INSERT INTO backup_detector (old, new, counter, os, br) VALUES (%llu, %llu, %llu, %@, %@)"), v20, v10, v11, v12)&& objc_msgSend(v9, "execute:", CFSTR("CREATE TABLE boot_history(date integer primary key, os text not null, br text not null, bird_schema integer not null, db_schema integer not null)"))&& objc_msgSend(v9, "execute:", CFSTR("CREATE TABLE client_containers( container_id text primary key, container_schema_version integer not null, container_plist blob)"))&& (objc_msgSend(v9, "execute:", CFSTR("CREATE TABLE client_state (v)")) & 1) != 0)
      {
        v13 = objc_msgSend(v9, "execute:", CFSTR("INSERT INTO client_state values (NULL)"));

        if ((v13 & 1) != 0)
          goto LABEL_18;
      }
      else
      {

      }
    }
LABEL_20:
    if (a4)
    {
      objc_msgSend(v9, "lastError");
      v15 = objc_claimAutoreleasedReturnValue();
      v16 = *a4;
      *a4 = (void *)v15;

    }
    brc_bread_crumbs();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
      br_create_tables_initial_cold_1();

    goto LABEL_25;
  }
  if (!objc_msgSend(v8, "execute:", CFSTR("CREATE TABLE devices(key integer primary key, name text unique not null)"))|| !objc_msgSend(v9, "execute:", CFSTR("CREATE TABLE server_boot_history(date integer primary key, os text not null, br text not null, bird_schema integer not null, db_schema integer not null)"))|| !objc_msgSend(v9, "execute:", CFSTR("CREATE TABLE server_containers( container_id text primary key, container_schema_version integer not null, container_plist blob)"))|| (objc_msgSend(v9, "execute:", CFSTR("CREATE TABLE server_state (state, config_plist)")) & 1) == 0|| (objc_msgSend(v9, "execute:", CFSTR("INSERT INTO server_state values (NULL, NULL)")) & 1) == 0)
  {
    goto LABEL_20;
  }
LABEL_18:
  v14 = 1;
LABEL_26:

  return v14;
}

uint64_t br_update_tables_1_000(uint64_t a1, void *a2, char a3, void **a4)
{
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  NSObject *v21;
  void **v23;
  void *v24;
  id obj;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = v6;
  if ((a3 & 1) != 0)
  {
    v8 = 1;
  }
  else
  {
    v9 = (void *)objc_msgSend(v6, "fetch:", CFSTR("SELECT container_id, container_plist FROM client_containers"));
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    objc_msgSend(v9, "enumerateObjectsOfClass:", objc_opt_class());
    obj = (id)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
    if (v10)
    {
      v11 = v10;
      v23 = a4;
      v24 = v9;
      v12 = *(_QWORD *)v27;
      while (2)
      {
        for (i = 0; i != v11; ++i)
        {
          if (*(_QWORD *)v27 != v12)
            objc_enumerationMutation(obj);
          v14 = *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * i);
          objc_msgSend(MEMORY[0x1E0DE81D8], "nameWithPrefix:suffix:", v14, CFSTR("items"));
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0DE81D8], "nameWithPrefix:suffix:", v14, CFSTR("unapplied_table"));
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0DE81D8], "nameWithPrefix:suffix:", v14, CFSTR("server_items"));
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          if (!objc_msgSend(v7, "execute:", CFSTR("UPDATE %@ SET item_live_conflict_loser_etags = call_block(%@, item_live_conflict_loser_etags) WHERE item_live_conflict_loser_etags IS NOT NULL"), v15, &__block_literal_global_26)|| (objc_msgSend(v7, "execute:", CFSTR("INSERT OR IGNORE INTO %@ (throttle_id) SELECT item_rank FROM %@ WHERE version_conflict_loser_etags IS NOT NULL AND item_rank IS NOT NULL"), v16, v17) & 1) == 0)
          {
            if (v23)
            {
              objc_msgSend(v7, "lastError");
              v18 = objc_claimAutoreleasedReturnValue();
              v19 = *v23;
              *v23 = (void *)v18;

            }
            brc_bread_crumbs();
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            brc_default_log();
            v21 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_FAULT))
              br_create_tables_initial_cold_1();

            v8 = 0;
            v9 = v24;
            goto LABEL_19;
          }

        }
        v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
        v8 = 1;
        v9 = v24;
        if (v11)
          continue;
        break;
      }
    }
    else
    {
      v8 = 1;
    }
LABEL_19:

  }
  return v8;
}

uint64_t br_update_tables_2_000(void *a1, void *a2, int a3, void **a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t i;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  char v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  NSObject *v27;
  uint64_t v28;
  void *v29;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  NSObject *v36;
  void *v37;
  char v38;
  void *v39;
  uint64_t v40;
  void *v41;
  NSObject *v42;
  void *v43;
  uint64_t j;
  void *v45;
  void *v46;
  char v47;
  char v48;
  uint64_t v49;
  void *v50;
  void *v51;
  NSObject *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  id obj;
  id obja;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  id v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _QWORD v67[4];
  id v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  _BYTE v78[128];
  _BYTE v79[32];
  _BYTE v80[128];
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  if (a3)
  {
    if (objc_msgSend(v8, "execute:", CFSTR("CREATE TABLE server_zones(rowid integer PRIMARY KEY, zone_owner text not null, zone_name text not null, zone_plist blob, UNIQUE (zone_owner, zone_name))"))&& objc_msgSend(v8, "execute:", CFSTR("CREATE TABLE server_xattr_blobs(zone_rowid integer not null, signature blob not null, data blob not null, PRIMARY KEY(zone_rowid, signature))"))&& (objc_msgSend(v8, "execute:", CFSTR("CREATE TABLE server_pending_fetches(zone_rowid integer not null, record_id blob not null, record blob, PRIMARY KEY (zone_rowid, record_id))")) & 1) != 0)
    {
      if (objc_msgSend(v8, "execute:", CFSTR("INSERT INTO server_zones (rowid, zone_owner, zone_name, zone_plist) SELECT NULL, %@, container_id, container_plist FROM server_containers"), *MEMORY[0x1E0C94730])&& (objc_msgSend(v8, "execute:", CFSTR("DROP TABLE server_containers")) & 1) != 0)
      {
        v10 = (void *)objc_msgSend(v8, "fetch:", CFSTR("SELECT rowid, zone_name FROM server_zones"));
        if (objc_msgSend(v10, "next"))
        {
          do
          {
            objc_msgSend(v10, "stringAtIndex:", 1);
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "numberAtIndex:", 0);
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v9, "setObject:forKeyedSubscript:", v11, v12);

          }
          while ((objc_msgSend(v10, "next") & 1) != 0);
        }
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        objc_msgSend(v9, "keyEnumerator");
        obj = (id)objc_claimAutoreleasedReturnValue();
        v61 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v74, v80, 16);
        if (v61)
        {
          v59 = *(_QWORD *)v75;
          while (2)
          {
            for (i = 0; i != v61; ++i)
            {
              if (*(_QWORD *)v75 != v59)
                objc_enumerationMutation(obj);
              v14 = *(_QWORD *)(*((_QWORD *)&v74 + 1) + 8 * i);
              objc_msgSend(v9, "objectForKeyedSubscript:", v14);
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(MEMORY[0x1E0DE81D8], "nameWithPrefix:suffix:", v15, CFSTR("server_xattrs"));
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              if (!objc_msgSend(v8, "execute:", CFSTR("INSERT INTO server_xattr_blobs SELECT %@, signature, data FROM %@"), v14, v16)|| !objc_msgSend(v8, "execute:", CFSTR("DROP TABLE %@"), v16)|| (objc_msgSend(MEMORY[0x1E0DE81D8], "nameWithPrefix:suffix:", v15, CFSTR("pending_fetches")), v17 = (void *)objc_claimAutoreleasedReturnValue(), v18 = objc_msgSend(v8, "execute:", CFSTR("DROP TABLE %@"), v17), v17, (v18 & 1) == 0))
              {
                if (a4)
                {
                  objc_msgSend(v8, "lastError");
                  v33 = objc_claimAutoreleasedReturnValue();
                  v34 = *a4;
                  *a4 = (void *)v33;

                }
                brc_bread_crumbs();
                v35 = (void *)objc_claimAutoreleasedReturnValue();
                brc_default_log();
                v36 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v36, OS_LOG_TYPE_FAULT))
                  br_update_tables_2_000_cold_1();

                goto LABEL_53;
              }

            }
            v61 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v74, v80, 16);
            if (v61)
              continue;
            break;
          }
        }

        goto LABEL_20;
      }
      if (a4)
      {
        objc_msgSend(v8, "lastError");
        v31 = objc_claimAutoreleasedReturnValue();
        v32 = *a4;
        *a4 = (void *)v31;

      }
      brc_bread_crumbs();
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_FAULT))
        br_update_tables_2_000_cold_2();
    }
    else
    {
      if (a4)
      {
        objc_msgSend(v8, "lastError");
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = *a4;
        *a4 = (void *)v28;

      }
      brc_bread_crumbs();
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_FAULT))
        br_update_tables_2_000_cold_3();
    }
    goto LABEL_52;
  }
  if (!objc_msgSend(v8, "execute:", CFSTR("CREATE TABLE client_zones(rowid integer PRIMARY KEY, zone_owner text not null, zone_name text not null, zone_plist blob, UNIQUE (zone_owner, zone_name))"))|| !objc_msgSend(v8, "execute:", CFSTR("CREATE TABLE client_reader_throttle(throttle_id integer primary key, zone_rowid integer not null, throttle_state integer not null, retry_count integer not null default 0, last_try_stamp integer not null default 0, next_retry_stamp integer not null default 0, expire_stamp integer not null default 0)"))|| !objc_msgSend(v8, "execute:", CFSTR("CREATE INDEX \"client_reader_throttle/zone_rowid\" ON client_reader_throttle (zone_rowid)"))|| !objc_msgSend(v8, "execute:", CFSTR("CREATE INDEX \"client_reader_throttle/next_retry_stamp_active_state\" ON client_reader_throttle (throttle_state, next_retry_stamp ASC, throttle_id ASC) WHERE throttle_state = 1"))|| !objc_msgSend(v8, "execute:", CFSTR("CREATE INDEX \"client_reader_throttle/zone_rowid__throttle_state\" ON client_reader_throttle (throttle_state, zone_rowid)"))
    || !objc_msgSend(v8, "execute:", CFSTR("CREATE INDEX \"client_reader_throttle/expire_stamp_inactive_state\" ON client_reader_throttle (throttle_state, expire_stamp ASC) WHERE throttle_state = 0"))|| !objc_msgSend(v8, "execute:", CFSTR("CREATE TABLE client_unapplied_table(throttle_id integer primary key, zone_rowid integer not null, throttle_state integer not null, retry_count integer not null default 0, last_try_stamp integer not null default 0, next_retry_stamp integer not null default 0, expire_stamp integer not null default 0, item_id blob not null, apply_kind integer not null)"))|| !objc_msgSend(v8, "execute:", CFSTR("CREATE INDEX \"client_unapplied_table/zone_rowid\" ON client_unapplied_table (zone_rowid)"))|| !objc_msgSend(v8, "execute:", CFSTR("CREATE INDEX \"client_unapplied_table/next_retry_stamp_active_state\" ON client_unapplied_table (throttle_state, next_retry_stamp ASC, throttle_id ASC) WHERE throttle_state = 1"))|| !objc_msgSend(v8, "execute:", CFSTR("CREATE INDEX \"client_unapplied_table/zone_rowid__kind__throttle_state\" ON client_unapplied_table (throttle_state, zone_rowid, apply_kind)"))
    || !objc_msgSend(v8, "execute:", CFSTR("CREATE INDEX \"client_unapplied_table/expire_stamp_inactive_state\" ON client_unapplied_table (throttle_state, expire_stamp ASC) WHERE throttle_state = 0"))|| !objc_msgSend(v8, "execute:", CFSTR("CREATE TABLE client_document_access(zone_rowid text not null , item_rowid integer not null , evictable integer not null , access_time integer not null default 0, PRIMARY KEY (zone_rowid, item_rowid))"))|| !objc_msgSend(v8, "execute:", CFSTR("CREATE INDEX \"client_document_access/access_item\" ON client_document_access (access_time)"))|| !objc_msgSend(v8, "execute:", CFSTR("CREATE INDEX \"client_document_access/evictable\" ON client_document_access (evictable)"))|| (objc_msgSend(v8, "execute:", CFSTR("DROP TABLE IF EXISTS document_access")) & 1) == 0)
  {
    if (a4)
    {
      objc_msgSend(v8, "lastError");
      v24 = objc_claimAutoreleasedReturnValue();
      v25 = *a4;
      *a4 = (void *)v24;

    }
    brc_bread_crumbs();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_FAULT))
      br_update_tables_2_000_cold_6();
LABEL_52:

    v10 = 0;
LABEL_53:
    v19 = 0;
    goto LABEL_54;
  }
  v70 = 0;
  v71 = &v70;
  v72 = 0x2020000000;
  v73 = 1;
  v20 = (void *)objc_msgSend(v8, "fetch:", CFSTR("SELECT rowid, zone_name FROM server_zones"));
  while (objc_msgSend(v20, "next"))
  {
    v21 = objc_msgSend(v20, "unsignedLongAtIndex:", 0);
    if (v21 > v71[3])
      v71[3] = v21 + 1;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "stringAtIndex:", 1);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setObject:forKeyedSubscript:", v22, v23);

  }
  v67[0] = MEMORY[0x1E0C809B0];
  v67[1] = 3221225472;
  v67[2] = __br_update_tables_2_000_block_invoke;
  v67[3] = &unk_1E8762740;
  v62 = v9;
  v68 = v62;
  v69 = &v70;
  v37 = (void *)MEMORY[0x1D17A6DB0](v67);
  if ((objc_msgSend(v8, "execute:", CFSTR("INSERT INTO client_zones (rowid, zone_owner, zone_name, zone_plist)    SELECT call_block(%@, container_id), %@, container_id, container_plist      FROM client_containers"), v37, *MEMORY[0x1E0C94730]) & 1) == 0)
  {

LABEL_71:
    if (a4)
    {
      objc_msgSend(v8, "lastError");
      v40 = objc_claimAutoreleasedReturnValue();
      v41 = *a4;
      *a4 = (void *)v40;

    }
    brc_bread_crumbs();
    v56 = (id)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v42 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v42, OS_LOG_TYPE_FAULT))
    {
      objc_msgSend(v8, "lastError");
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      br_update_tables_2_000_cold_4(v43, (uint64_t)v56, (uint64_t)v79);
    }
LABEL_92:

    v48 = 0;
    v10 = v20;
    goto LABEL_93;
  }
  v38 = objc_msgSend(v8, "execute:", CFSTR("DROP TABLE client_containers"));

  if ((v38 & 1) == 0)
    goto LABEL_71;
  objc_msgSend(v62, "removeAllObjects");
  v10 = (void *)objc_msgSend(v8, "fetch:", CFSTR("SELECT rowid, zone_name FROM client_zones"));
  while (1)
  {

    if (!objc_msgSend(v10, "next"))
      break;
    objc_msgSend(v10, "stringAtIndex:", 1);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "numberAtIndex:", 0);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v62, "setObject:forKeyedSubscript:", v20, v39);

  }
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  objc_msgSend(v62, "keyEnumerator");
  v56 = (id)objc_claimAutoreleasedReturnValue();
  v55 = objc_msgSend(v56, "countByEnumeratingWithState:objects:count:", &v63, v78, 16);
  if (v55)
  {
    v54 = *(_QWORD *)v64;
    while (2)
    {
      for (j = 0; j != v55; ++j)
      {
        if (*(_QWORD *)v64 != v54)
          objc_enumerationMutation(v56);
        objc_msgSend(v62, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v63 + 1) + 8 * j));
        v42 = objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0DE81D8], "nameWithPrefix:suffix:", v42, CFSTR("items"));
        obja = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0DE81D8], "nameWithPrefix:suffix:", v42, CFSTR("desired_additions"));
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0DE81D8], "nameWithPrefix:suffix:", v42, CFSTR("unapplied_table"));
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        if (!objc_msgSend(v8, "execute:", CFSTR("DROP TABLE %@"), v60)
          || !objc_msgSend(v8, "execute:", CFSTR("UPDATE %@   SET item_state = -1, item_processing_stamp = 1 WHERE item_type = 3   AND item_localsyncupstate = 3"), obja)|| !objc_msgSend(v8, "execute:", CFSTR("DROP TABLE %@"), v45)|| (objc_msgSend(MEMORY[0x1E0DE81D8], "nameWithPrefix:suffix:", v42, CFSTR("reader_throttle")), v46 = (void *)objc_claimAutoreleasedReturnValue(), v47 = objc_msgSend(v8, "execute:", CFSTR("DROP TABLE %@"), v46), v46, (v47 & 1) == 0))
        {
          if (a4)
          {
            objc_msgSend(v8, "lastError");
            v49 = objc_claimAutoreleasedReturnValue();
            v50 = *a4;
            *a4 = (void *)v49;

          }
          brc_bread_crumbs();
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          brc_default_log();
          v52 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v52, OS_LOG_TYPE_FAULT))
          {
            objc_msgSend(v8, "lastError");
            v53 = (void *)objc_claimAutoreleasedReturnValue();
            br_update_tables_2_000_cold_4(v53, (uint64_t)v51, (uint64_t)v79);
          }

          v20 = v10;
          goto LABEL_92;
        }

      }
      v55 = objc_msgSend(v56, "countByEnumeratingWithState:objects:count:", &v63, v78, 16);
      v48 = 1;
      if (v55)
        continue;
      break;
    }
  }
  else
  {
    v48 = 1;
  }
LABEL_93:

  _Block_object_dispose(&v70, 8);
  if ((v48 & 1) == 0)
    goto LABEL_53;
LABEL_20:
  if (v7)
    +[BRCStageRegistry migrateStageToVersion2_0WithSession:](BRCStageRegistry, "migrateStageToVersion2_0WithSession:", v7);
  v19 = 1;
LABEL_54:

  return v19;
}

void sub_1CBE4F3BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

uint64_t br_update_tables_3_002(uint64_t a1, void *a2, int a3, void **a4)
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  unint64_t v13;
  void *v14;
  char v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  char v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  char v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  NSObject *v40;
  uint64_t v41;
  void *v42;
  uint64_t v44;
  void *v45;
  void *v46;
  NSObject *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  char v57;
  uint64_t i;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _QWORD v71[4];
  id v72;
  _BYTE v73[128];
  _BYTE v74[128];
  _QWORD v75[4];

  v75[2] = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = (void *)MEMORY[0x1E0C99E60];
  v75[0] = objc_opt_class();
  v75[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v75, 2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setWithArray:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v10 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v71[0] = MEMORY[0x1E0C809B0];
  v71[1] = 3221225472;
  v71[2] = __br_update_tables_3_002_block_invoke;
  v71[3] = &unk_1E875E1A8;
  v11 = v9;
  v72 = v11;
  v12 = (void *)MEMORY[0x1D17A6DB0](v71);
  if (a3)
  {
    if (objc_msgSend(v6, "execute:", CFSTR(" CREATE TABLE server_items(zone_rowid integer not null, item_id blob not null, item_rank integer, item_sharing_options integer not null default 0, item_sharing_etag blob default null, item_stat_ckinfo blob, item_state integer not null, item_type integer not null, item_mode integer not null, item_creator_id integer not null, item_birthtime integer not null, item_parent_id blob not null, item_filename text not null, item_origname text, item_hidden_ext integer not null, item_finder_tags blob, item_xattr_signature blob, version_ckinfo blob, version_mtime integer, version_name text, version_size integer, version_thumb_size integer, version_thumb_signature blob, version_content_signature blob, version_xattr_signature blob, version_device integer, version_conflict_loser_etags blob, version_quarantine_info blob, PRIMARY KEY (zone_rowid, item_id), UNIQUE (item_rank))")))
    {
      if (objc_msgSend(v6, "execute:", CFSTR("CREATE INDEX \"server_items/path_index\" ON server_items (zone_rowid, item_parent_id, item_filename)")))
      {
        if (objc_msgSend(v6, "execute:", CFSTR("CREATE INDEX \"server_items/alias_map\" ON server_items (item_type, item_filename, zone_rowid, item_rank) WHERE item_type = 3")))
        {
          if (objc_msgSend(v6, "execute:", CFSTR("CREATE INDEX \"server_items/item_rank\" ON server_items (zone_rowid, item_rank)")))
          {
            if (objc_msgSend(v6, "execute:", CFSTR("CREATE INDEX \"server_items/item_parent_id__item_state\" ON server_items (zone_rowid, item_parent_id, item_state)")))
            {
              if (objc_msgSend(v6, "execute:", CFSTR("CREATE INDEX \"server_items/item_xattr_signature\" ON server_items (zone_rowid, item_xattr_signature)")))
              {
                if (objc_msgSend(v6, "execute:", CFSTR("CREATE INDEX \"server_items/version_xattr_signature\" ON server_items (zone_rowid, version_xattr_signature)")))
                {
                  if (objc_msgSend(v6, "execute:", CFSTR("CREATE TABLE server_owners(owner_key integer primary key, owner_name text not null, owner_plist blob, UNIQUE (owner_name))")))
                  {
                    v13 = 0x1E0DE8000uLL;
                    objc_msgSend(MEMORY[0x1E0DE81D8], "nameWithPrefix:suffix:", *MEMORY[0x1E0D10DF0], CFSTR("server_items"));
                    v14 = (void *)objc_claimAutoreleasedReturnValue();
                    v15 = objc_msgSend(v6, "execute:", CFSTR("DROP TABLE IF EXISTS %@"), v14);

                    if ((v15 & 1) != 0)
                    {
                      v16 = (void *)objc_msgSend(v6, "fetch:", CFSTR("SELECT rowid, zone_name FROM server_zones"));
                      if (objc_msgSend(v16, "next"))
                      {
                        do
                        {
                          objc_msgSend(v16, "stringAtIndex:", 1);
                          v17 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v16, "numberAtIndex:", 0);
                          v18 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v10, "setObject:forKeyedSubscript:", v17, v18);

                        }
                        while ((objc_msgSend(v16, "next") & 1) != 0);
                      }
                      v69 = 0u;
                      v70 = 0u;
                      v67 = 0u;
                      v68 = 0u;
                      objc_msgSend(v10, "keyEnumerator");
                      v19 = (void *)objc_claimAutoreleasedReturnValue();
                      v50 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v67, v74, 16);
                      if (v50)
                      {
                        v52 = *(_QWORD *)v68;
                        while (2)
                        {
                          v20 = 0;
                          do
                          {
                            if (*(_QWORD *)v68 != v52)
                              objc_enumerationMutation(v19);
                            v54 = v20;
                            v56 = *(_QWORD *)(*((_QWORD *)&v67 + 1) + 8 * v20);
                            objc_msgSend(v10, "objectForKeyedSubscript:");
                            v21 = objc_claimAutoreleasedReturnValue();
                            objc_msgSend(*(id *)(v13 + 472), "nameWithPrefix:suffix:", v21, CFSTR("server_items"));
                            v22 = objc_claimAutoreleasedReturnValue();
                            v59 = (void *)MEMORY[0x1D17A6DB0](v12);
                            v61 = (void *)v22;
                            if (!objc_msgSend(v6, "execute:", CFSTR("INSERT INTO server_items (zone_rowid, item_sharing_options, item_id, item_rank, item_stat_ckinfo, item_state, item_type, item_mode, item_creator_id, item_birthtime, item_parent_id, item_filename, item_origname, item_hidden_ext, item_finder_tags, item_xattr_signature, version_ckinfo, version_mtime, version_name, version_size, version_thumb_size, version_thumb_signature, version_content_signature, version_xattr_signature, version_device, version_conflict_loser_etags, version_quarantine_info) SELECT %@, call_block(%@, item_iwork_sharing_info), item_id, item_rank, item_stat_ckinfo, item_state, item_type, item_mode, item_creator_id, item_birthtime, item_parent_id, item_filename, item_origname, item_hidden_ext, item_finder_tags, item_xattr_signature, version_ckinfo, version_mtime, version_name, version_size, version_thumb_size, version_thumb_signature, version_content_signature, version_xattr_signature, version_device, version_conflict_loser_etags, version_quarantine_info FROM %@"), v56, v59, v22))goto LABEL_76;
                            objc_msgSend(*(id *)(v13 + 472), "nameWithPrefix:suffix:", v21, CFSTR("server_items_view"));
                            v23 = (void *)objc_claimAutoreleasedReturnValue();
                            if ((objc_msgSend(v6, "execute:", CFSTR("DROP VIEW IF EXISTS %@"), v23) & 1) == 0)
                            {

LABEL_76:
                              v24 = v61;
LABEL_77:
                              if (a4)
                              {
                                objc_msgSend(v6, "lastError");
                                v37 = objc_claimAutoreleasedReturnValue();
                                v38 = *a4;
                                *a4 = (void *)v37;

                              }
                              brc_bread_crumbs();
                              v39 = (void *)objc_claimAutoreleasedReturnValue();
                              brc_default_log();
                              v40 = objc_claimAutoreleasedReturnValue();
                              if (os_log_type_enabled(v40, OS_LOG_TYPE_FAULT))
                                br_create_tables_initial_cold_1();

                              goto LABEL_88;
                            }
                            v24 = v61;
                            v57 = objc_msgSend(v6, "execute:", CFSTR("DROP TABLE %@"), v61);

                            if ((v57 & 1) == 0)
                              goto LABEL_77;

                            v20 = v54 + 1;
                            v13 = 0x1E0DE8000;
                          }
                          while (v50 != v54 + 1);
                          v25 = 1;
                          v50 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v67, v74, 16);
                          if (v50)
                            continue;
                          break;
                        }
                      }
                      else
                      {
                        v25 = 1;
                      }
                      goto LABEL_89;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (a4)
    {
      objc_msgSend(v6, "lastError");
      v35 = objc_claimAutoreleasedReturnValue();
      v36 = *a4;
      *a4 = (void *)v35;

    }
    brc_bread_crumbs();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v21 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_FAULT))
      goto LABEL_87;
LABEL_86:
    br_create_tables_initial_cold_1();
LABEL_87:
    v16 = 0;
LABEL_88:

    v25 = 0;
LABEL_89:

    goto LABEL_90;
  }
  if (!objc_msgSend(v6, "execute:", CFSTR(" CREATE TABLE client_items(rowid integer primary key, zone_rowid integer not null, item_id blob not null, item_sharing_options integer not null default 0, item_localsyncupstate integer, item_in_flight_diffs integer, item_local_diffs integer not null, item_notifs_rank integer not null, item_transfer_priority integer, item_processing_stamp integer, item_doc_id integer, item_file_id integer, item_generation, item_localname text, item_bouncedname text, item_staged_file_id integer, item_staged_generation integer, item_stat_ckinfo blob, item_state integer not null, item_type integer not null, item_mode integer not null, item_creator_id integer not null, item_birthtime integer not null, item_parent_id blob not null, item_filename text, item_hidden_ext integer not null, item_finder_tags blob, item_xattr_signature blob, item_live_conflict_loser_etags blob, version_ckinfo blob, version_mtime integer, version_name text, version_size integer, version_thumb_size integer, version_thumb_signature blob, version_content_signature blob, version_xattr_signature blob, version_device integer, version_conflict_loser_etags blob, version_quarantine_info blob, version_uploaded_assets blob, version_upload_error blob, desired_version blob, UNIQUE (zone_rowid, item_id), UNIQUE (zone_rowid, item_doc_id), UNIQUE (zone_rowid, item_file_id), UNIQUE (item_staged_file_id), UNIQUE (zone_rowid, item_parent_id, item_localname))"))|| !objc_msgSend(v6, "execute:", CFSTR("CREATE INDEX \"client_items/item_parent_id__item_state\" ON client_items (zone_rowid, item_parent_id, item_state)"))|| !objc_msgSend(v6, "execute:", CFSTR("CREATE INDEX \"client_items/item_path\" ON client_items (zone_rowid, item_parent_id, item_filename)"))|| !objc_msgSend(v6, "execute:", CFSTR("CREATE INDEX \"client_items/alias_map\" ON client_items (item_type, item_filename, zone_rowid) WHERE item_type = 3"))|| !objc_msgSend(v6, "execute:", CFSTR("CREATE INDEX \"client_items/item_in_flight_diffs\" ON client_items (zone_rowid, item_in_flight_diffs)"))
    || !objc_msgSend(v6, "execute:", CFSTR("CREATE INDEX \"client_items/item_bouncedname\" ON client_items (item_bouncedname) WHERE item_bouncedname IS NOT NULL"))|| !objc_msgSend(v6, "execute:", CFSTR("CREATE INDEX \"client_items/lost_scan_index\" ON client_items (item_state, zone_rowid, item_processing_stamp) WHERE item_state = -1"))|| !objc_msgSend(v6, "execute:", CFSTR("CREATE INDEX \"client_items/zombie_scan_index\" ON client_items (item_state, zone_rowid, item_processing_stamp) WHERE item_state = -3"))|| !objc_msgSend(v6, "execute:", CFSTR("CREATE INDEX \"client_items/item_notifs_rank\" ON client_items (zone_rowid, item_notifs_rank)"))|| !objc_msgSend(v6, "execute:", CFSTR("CREATE INDEX \"client_items/download_index\" ON client_items (zone_rowid, item_staged_file_id, desired_version)"))
    || !objc_msgSend(v6, "execute:", CFSTR("CREATE INDEX \"client_items/eviction_index\" ON client_items (item_localsyncupstate, zone_rowid, version_size) WHERE item_localsyncupstate = 0"))|| !objc_msgSend(v6, "execute:", CFSTR("CREATE INDEX \"client_items/sync_up_enumerator_1\" ON client_items (item_localsyncupstate, zone_rowid, item_type) WHERE item_localsyncupstate = 4"))|| !objc_msgSend(v6, "execute:", CFSTR("CREATE INDEX \"client_items/sync_up_enumerator_2\" ON client_items (item_localsyncupstate, zone_rowid, item_state) WHERE item_localsyncupstate = 4"))|| !objc_msgSend(v6, "execute:", CFSTR(" CREATE TABLE client_pkg_items(item_doc_id integer not null, rel_path text not null, zone_rowid integer not null, item_type integer not null, asset_rank integer not null, is_dirty integer, quarantine_info blob, file_id integer not null, signature_or_link blob, generation, size integer, mode integer, mtime integer, PRIMARY KEY (item_doc_id, rel_path ASC))"))|| !objc_msgSend(v6, "execute:", CFSTR("CREATE UNIQUE INDEX \"client_pkg_items/asset_rank\" ON client_pkg_items (item_doc_id, asset_rank)"))
    || !objc_msgSend(v6, "execute:", CFSTR("CREATE INDEX \"client_pkg_items/size\" ON client_pkg_items (item_doc_id, size)"))|| !objc_msgSend(v6, "execute:", CFSTR("CREATE INDEX \"client_pkg_items/is_dirty\" ON client_pkg_items (item_doc_id, is_dirty)"))|| !objc_msgSend(v6, "execute:", CFSTR("CREATE INDEX \"client_pkg_items/zone_rowid\" ON client_pkg_items (zone_rowid)"))|| !objc_msgSend(v6, "execute:", CFSTR("CREATE TABLE client_uploads(throttle_id integer primary key, zone_rowid integer not null, throttle_state integer not null, retry_count integer not null default 0, last_try_stamp integer not null default 0, next_retry_stamp integer not null default 0, expire_stamp integer not null default 0, item_id blob not null, transfer_queue blob not null, transfer_size integer not null, transfer_record blob, transfer_stage blob, transfer_operation blob, UNIQUE(transfer_stage))"))|| !objc_msgSend(v6, "execute:", CFSTR("CREATE INDEX \"client_uploads/gc_index\" ON client_uploads (throttle_state, expire_stamp ASC) WHERE throttle_state = 0"))
    || !objc_msgSend(v6, "execute:", CFSTR("CREATE INDEX IF NOT EXISTS \"client_uploads/scheduling_by_size\" ON client_uploads (throttle_state, transfer_queue, transfer_operation, transfer_size ASC)  WHERE throttle_state = 1"))|| !objc_msgSend(v6, "execute:", CFSTR("CREATE INDEX IF NOT EXISTS \"client_uploads/scheduling_by_stamp\" ON client_uploads (throttle_state, transfer_queue, transfer_operation, next_retry_stamp ASC)  WHERE throttle_state = 1"))|| !objc_msgSend(v6, "execute:", CFSTR("CREATE INDEX \"client_uploads/transfer_operation\" ON client_uploads (transfer_operation) WHERE transfer_operation IS NOT NULL"))|| !objc_msgSend(v6, "execute:", CFSTR("CREATE INDEX \"client_uploads/zone_rowid__throttle_state\" ON client_uploads (throttle_state, zone_rowid)"))|| !objc_msgSend(v6, "execute:", CFSTR("CREATE INDEX \"client_uploads/reset_index\" ON client_uploads (zone_rowid, throttle_state)"))
    || !objc_msgSend(v6, "execute:", CFSTR("CREATE INDEX \"client_uploads/out_of_quota_index\" ON client_uploads (throttle_state, zone_rowid, transfer_size)  WHERE throttle_state = 32")))
  {
LABEL_83:
    if (a4)
    {
      objc_msgSend(v6, "lastError");
      v41 = objc_claimAutoreleasedReturnValue();
      v42 = *a4;
      *a4 = (void *)v41;

    }
    brc_bread_crumbs();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v21 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_FAULT))
      goto LABEL_87;
    goto LABEL_86;
  }
  v26 = *MEMORY[0x1E0D10DF0];
  objc_msgSend(MEMORY[0x1E0DE81D8], "nameWithPrefix:suffix:", *MEMORY[0x1E0D10DF0], CFSTR("pkg_items"));
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v6, "execute:", CFSTR("DROP TABLE IF EXISTS %@"), v27) & 1) == 0)
  {

    goto LABEL_83;
  }
  objc_msgSend(MEMORY[0x1E0DE81D8], "nameWithPrefix:suffix:", v26, CFSTR("items"));
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = objc_msgSend(v6, "execute:", CFSTR("DROP TABLE IF EXISTS %@"), v28);

  if ((v29 & 1) == 0)
    goto LABEL_83;
  v16 = (void *)objc_msgSend(v6, "fetch:", CFSTR("SELECT rowid, zone_name FROM client_zones"));
  if (objc_msgSend(v16, "next"))
  {
    do
    {
      objc_msgSend(v16, "stringAtIndex:", 1);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "numberAtIndex:", 0);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "setObject:forKeyedSubscript:", v30, v31);

    }
    while ((objc_msgSend(v16, "next") & 1) != 0);
  }
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  objc_msgSend(v10, "keyEnumerator");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v51 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v63, v73, 16);
  if (v51)
  {
    v53 = *(_QWORD *)v64;
    while (2)
    {
      for (i = 0; i != v51; ++i)
      {
        if (*(_QWORD *)v64 != v53)
          objc_enumerationMutation(v19);
        v32 = *(_QWORD *)(*((_QWORD *)&v63 + 1) + 8 * i);
        objc_msgSend(v10, "objectForKeyedSubscript:", v32);
        v21 = objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0DE81D8], "nameWithPrefix:suffix:", v21, CFSTR("pkg_items"));
        v62 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0DE81D8], "nameWithPrefix:suffix:", v21, CFSTR("items"));
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        v55 = (void *)MEMORY[0x1D17A6DB0](v12);
        if (!objc_msgSend(v6, "execute:", CFSTR("INSERT INTO client_items (rowid, zone_rowid, version_upload_error, item_sharing_options, item_id, item_localsyncupstate, item_in_flight_diffs, item_local_diffs, item_notifs_rank, item_transfer_priority, item_processing_stamp, item_doc_id, item_file_id, item_generation, item_localname, item_bouncedname, item_staged_file_id, item_staged_generation, item_stat_ckinfo, item_state, item_type, item_mode, item_creator_id, item_birthtime, item_parent_id, item_filename, item_hidden_ext, item_finder_tags, item_xattr_signature, item_live_conflict_loser_etags, version_ckinfo, version_mtime, version_name, version_size, version_thumb_size, version_thumb_signature, version_content_signature, version_xattr_signature, version_device, version_conflict_loser_etags, version_quarantine_info, version_uploaded_assets, desired_version) SELECT rowid, %@, NULL, call_block(%@, item_iwork_sharing_info), item_id, item_localsyncupstate, item_in_flight_diffs, item_local_diffs, item_notifs_rank, item_transfer_priority, item_processing_stamp, item_doc_id, item_file_id, item_generation, item_localname, item_bouncedname, item_staged_file_id, item_staged_generation, item_stat_ckinfo, item_state, item_type, item_mode, item_creator_id, item_birthtime, item_parent_id, item_filename, item_hidden_ext, item_finder_tags, item_xattr_signature, item_live_conflict_loser_etags, version_ckinfo, version_mtime, version_name, version_size, version_thumb_size, version_thumb_signature, version_content_signature, version_xattr_signature, version_device, version_conflict_loser_etags, version_quarantine_info, version_uploaded_assets, desired_version FROM %@"), v32, v55, v60))goto LABEL_92;
        objc_msgSend(MEMORY[0x1E0DE81D8], "nameWithPrefix:suffix:", v21, CFSTR("items_view"));
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        if (!objc_msgSend(v6, "execute:", CFSTR("DROP VIEW IF EXISTS %@"), v33)
          || !objc_msgSend(v6, "execute:", CFSTR("DROP TABLE %@"), v60)
          || (objc_msgSend(v6, "execute:", CFSTR("INSERT INTO client_pkg_items (zone_rowid, item_doc_id, rel_path, item_type, asset_rank, is_dirty, quarantine_info, file_id, signature_or_link, generation, size, mode, mtime) SELECT %@, item_doc_id, rel_path, item_type, asset_rank, is_dirty, quarantine_info, file_id, signature_or_link, generation, size, mode, mtime FROM %@"), v32, v62) & 1) == 0)
        {

LABEL_92:
LABEL_93:
          if (a4)
          {
            objc_msgSend(v6, "lastError");
            v44 = objc_claimAutoreleasedReturnValue();
            v45 = *a4;
            *a4 = (void *)v44;

          }
          brc_bread_crumbs();
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          brc_default_log();
          v47 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v47, OS_LOG_TYPE_FAULT))
            br_create_tables_initial_cold_1();

          goto LABEL_88;
        }
        v34 = objc_msgSend(v6, "execute:", CFSTR("DROP TABLE %@"), v62);

        if ((v34 & 1) == 0)
          goto LABEL_93;

      }
      v51 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v63, v73, 16);
      if (v51)
        continue;
      break;
    }
  }

  if (!objc_msgSend(v6, "execute:", CFSTR("DELETE FROM client_reader_throttle"))
    || !objc_msgSend(v6, "execute:", CFSTR("INSERT INTO client_reader_throttle (zone_rowid, throttle_id, throttle_state) SELECT zone_rowid, rowid, 1 FROM client_items WHERE item_localsyncupstate = 2"))|| (objc_msgSend(v6, "execute:", CFSTR("INSERT INTO client_uploads (zone_rowid, throttle_id, throttle_state, item_id, transfer_queue, transfer_size) SELECT zone_rowid, rowid, 1, item_id, '_prepare', version_size + version_thumb_size  FROM client_items WHERE item_localsyncupstate = 1")) & 1) == 0)
  {
    if (a4)
    {
      objc_msgSend(v6, "lastError");
      v48 = objc_claimAutoreleasedReturnValue();
      v49 = *a4;
      *a4 = (void *)v48;

    }
    brc_bread_crumbs();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_FAULT))
      br_create_tables_initial_cold_1();
    goto LABEL_88;
  }
  v25 = 1;
LABEL_90:

  return v25;
}

uint64_t br_update_tables_4_000(void *a1, void *a2, int a3, void **a4)
{
  id v7;
  id v8;
  void *v9;
  const __CFString *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  NSObject *v15;

  v7 = a1;
  v8 = a2;
  v9 = v8;
  if (a3)
  {
    v10 = CFSTR("DROP TABLE IF EXISTS server_alias_map");
  }
  else
  {
    if (!objc_msgSend(v8, "execute:", CFSTR("DELETE FROM client_unapplied_table"))
      || !objc_msgSend(v9, "execute:", CFSTR("DROP TABLE IF EXISTS alias_map"))
      || !objc_msgSend(v9, "execute:", CFSTR("INSERT INTO client_unapplied_table (zone_rowid, throttle_id, throttle_state, item_id, apply_kind) SELECT zone_rowid, -rowid, 1, item_id, %u FROM client_items WHERE item_localsyncupstate = 1"), 0)|| !objc_msgSend(v9, "execute:", CFSTR("INSERT INTO client_unapplied_table (zone_rowid, throttle_id, throttle_state, item_id, apply_kind) SELECT zone_rowid, item_rank, 1, item_id, %u FROM server_items"), 1)|| !objc_msgSend(v9, "execute:", CFSTR("DROP TABLE IF EXISTS client_desired_additions"))|| !objc_msgSend(v9, "execute:", CFSTR("CREATE TABLE client_downloads(throttle_id integer not null, zone_rowid integer not null, throttle_state integer not null, retry_count integer not null default 0, last_try_stamp integer not null default 0, next_retry_stamp integer not null default 0, expire_stamp integer not null default 0, item_id blob not null, transfer_queue blob not null, transfer_size integer not null, transfer_record blob, transfer_stage blob, transfer_operation blob, download_kind integer not null, download_etag blob not null, download_priority integer not null, download_request_stamp integer not null, download_error blob, UNIQUE(transfer_stage), UNIQUE(throttle_id, download_kind, download_etag))"))|| !objc_msgSend(v9, "execute:", CFSTR("CREATE INDEX \"client_downloads/scheduling_by_priority\" ON client_downloads (throttle_state, transfer_queue, transfer_operation, download_priority DESC, download_request_stamp DESC) WHERE throttle_state = 1"))|| !objc_msgSend(
                          v9,
                          "execute:",
                          CFSTR("CREATE INDEX \"client_downloads/scheduling_by_priority_and_kind\" ON client_downloads (throttle_state, transfer_queue, transfer_operation, download_kind, download_priority DESC, download_request_stamp DESC) WHERE throttle_state = 1"))
      || !objc_msgSend(v9, "execute:", CFSTR("CREATE INDEX \"client_downloads/scheduling_by_stamp\" ON client_downloads (throttle_state, transfer_queue, transfer_operation, next_retry_stamp ASC)  WHERE throttle_state = 1"))|| !objc_msgSend(v9, "execute:", CFSTR("CREATE INDEX \"client_downloads/gc_index\" ON client_downloads (throttle_state, expire_stamp ASC) WHERE throttle_state = 0"))|| !objc_msgSend(v9, "execute:", CFSTR("CREATE INDEX \"client_downloads/transfer_operation\" ON client_downloads (transfer_operation) WHERE transfer_operation IS NOT NULL"))|| !objc_msgSend(v9, "execute:", CFSTR("CREATE INDEX \"client_downloads/zone_rowid__throttle_state\" ON client_downloads (throttle_state, zone_rowid)")))
    {
      goto LABEL_18;
    }
    v10 = CFSTR("CREATE INDEX \"client_downloads/reset_index\" ON client_downloads (zone_rowid, throttle_state)");
  }
  if ((objc_msgSend(v9, "execute:", v10) & 1) != 0)
  {
    v11 = 1;
    goto LABEL_23;
  }
LABEL_18:
  if (a4)
  {
    objc_msgSend(v9, "lastError");
    v12 = objc_claimAutoreleasedReturnValue();
    v13 = *a4;
    *a4 = (void *)v12;

  }
  brc_bread_crumbs();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
    br_create_tables_initial_cold_1();

  v11 = 0;
LABEL_23:

  return v11;
}

uint64_t br_update_tables_4_001(void *a1, void *a2, char a3, void **a4)
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  NSObject *v14;

  v7 = a1;
  v8 = a2;
  v9 = v8;
  if ((a3 & 1) != 0
    || (objc_msgSend(v8, "execute:", CFSTR("ALTER TABLE client_uploads ADD COLUMN upload_error blob")) & 1) != 0)
  {
    v10 = 1;
  }
  else
  {
    if (a4)
    {
      objc_msgSend(v9, "lastError");
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = *a4;
      *a4 = (void *)v11;

    }
    brc_bread_crumbs();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
      br_create_tables_initial_cold_1();

    v10 = 0;
  }

  return v10;
}

uint64_t br_update_tables_4_002()
{
  return 1;
}

uint64_t br_update_tables_4_003()
{
  return 1;
}

uint64_t br_update_tables_4_004(uint64_t a1, uint64_t a2, int a3)
{
  void *v3;
  void *v4;
  char v5;
  id v6;
  void *v7;
  NSObject *v8;
  id v10;
  uint8_t buf[4];
  void *v12;
  __int16 v13;
  id v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    objc_msgSend(MEMORY[0x1E0D10E48], "containersRepositoryURL");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = 0;
    v5 = objc_msgSend(v4, "removeItemAtURL:error:", v3, &v10);
    v6 = v10;

    if ((v5 & 1) == 0)
    {
      if ((objc_msgSend(v6, "br_isPOSIXErrorCode:", 2) & 1) != 0
        || objc_msgSend(v6, "br_isCocoaErrorCode:", 4))
      {
        brc_bread_crumbs();
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        brc_default_log();
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
          br_update_tables_4_004_cold_1();
      }
      else
      {
        brc_bread_crumbs();
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        brc_default_log();
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412802;
          v12 = v3;
          v13 = 2112;
          v14 = v6;
          v15 = 2112;
          v16 = v7;
          _os_log_impl(&dword_1CBD43000, v8, OS_LOG_TYPE_DEFAULT, "[WARNING] can't suppress %@: %@%@", buf, 0x20u);
        }
      }

    }
  }
  return 1;
}

uint64_t br_update_tables_4_005(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if ((a3 & 1) != 0)
  {
    v8 = 1;
  }
  else if (objc_msgSend(v6, "execute:", CFSTR("CREATE INDEX \"client_downloads/low_disk_index\" ON client_downloads (throttle_state, throttle_id, download_kind)  WHERE throttle_state = 43")))
  {
    v8 = objc_msgSend(v7, "execute:", CFSTR("DROP INDEX \"client_document_access/access_item\""));
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t br_update_tables_4_006(uint64_t a1, void *a2, int a3)
{
  if (a3)
    return objc_msgSend(a2, "execute:", CFSTR("CREATE INDEX \"server_items/version_size\" ON server_items (version_size)"));
  else
    return 1;
}

uint64_t br_update_tables_4_007(uint64_t a1, void *a2, char a3)
{
  if ((a3 & 1) != 0)
    return 1;
  else
    return objc_msgSend(a2, "execute:", CFSTR("CREATE TABLE spotlight_ranks(doc_id integer not null, notif_rank integer not null, PRIMARY KEY (doc_id, notif_rank ASC))"));
}

uint64_t br_update_tables_4_008(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if ((a3 & 1) != 0)
  {
    v8 = 1;
  }
  else if (objc_msgSend(v6, "execute:", CFSTR("ALTER TABLE backup_detector ADD COLUMN uuid blob")))
  {
    v9 = (void *)objc_opt_new();
    objc_msgSend(v9, "UUIDString");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "execute:", CFSTR("UPDATE backup_detector SET uuid = %@"), v10);

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t br_update_tables_4_009(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if ((a3 & 1) != 0)
  {
    v8 = 1;
  }
  else if (objc_msgSend(v6, "execute:", CFSTR("CREATE INDEX \"client_pkg_items/item_doc_id\" ON client_pkg_items (item_doc_id, zone_rowid)")))
  {
    v8 = objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_items/doc_sync_state\" ON client_items (zone_rowid, item_localsyncupstate, item_type)WHERE item_type = 1  AND item_localsyncupstate IN (2, 3, 4)"));
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t br_update_tables_4_010(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if ((a3 & 1) != 0)
  {
    v8 = 1;
  }
  else if (objc_msgSend(v6, "execute:", CFSTR("DROP INDEX \"client_items/item_notifs_rank\"")))
  {
    v8 = objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_items/item_notifs_rank\" ON client_items (item_notifs_rank, zone_rowid)"));
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t br_update_tables_4_011(uint64_t a1, void *a2, char a3)
{
  if ((a3 & 1) != 0)
    return 1;
  else
    return objc_msgSend(a2, "execute:", CFSTR("CREATE INDEX \"client_items/spotlight_index\" ON client_items (item_type, item_state, item_doc_id, item_notifs_rank) WHERE item_type in (1, 2)"));
}

uint64_t br_update_tables_4_012(uint64_t a1, void *a2, char a3)
{
  if ((a3 & 1) != 0)
    return 1;
  else
    return objc_msgSend(a2, "execute:", CFSTR("CREATE INDEX \"spotlight_ranks/notif_rank\" ON spotlight_ranks (notif_rank)"));
}

uint64_t br_update_tables_4_013(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if ((a3 & 1) != 0)
  {
    v8 = 1;
  }
  else if (objc_msgSend(v6, "execute:", CFSTR("ALTER TABLE client_items ADD COLUMN item_scope integer NOT NULL DEFAULT 0")))
  {
    v8 = 0;
    if (br_fixup_tables_4_013(v5, v7, 0))
      v8 = objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX item_scope_index ON client_items(zone_rowid, item_notifs_rank, item_scope, item_state)"));
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t br_update_tables_4_014(uint64_t a1, void *a2, char a3)
{
  if ((a3 & 1) != 0)
    return 1;
  else
    return objc_msgSend(a2, "execute:", CFSTR("CREATE INDEX pending_download_docs ON client_items(item_doc_id, desired_version) WHERE desired_version != NULL"));
}

uint64_t br_update_tables_4_015()
{
  return 1;
}

uint64_t br_update_tables_4_016(uint64_t a1, void *a2, int a3)
{
  id v4;
  void *v5;
  uint64_t v6;

  v4 = a2;
  v5 = v4;
  if (a3)
  {
    if (objc_msgSend(v4, "execute:", CFSTR("ALTER TABLE server_items ADD COLUMN item_depth integer NOT NULL DEFAULT 0")))v6 = objc_msgSend(v5, "execute:", CFSTR("CREATE INDEX \"server_items/item_rank_depth\" ON server_items (zone_rowid, item_rank, item_depth)"));
    else
      v6 = 0;
  }
  else
  {
    v6 = 1;
  }

  return v6;
}

uint64_t br_update_tables_4_017(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if ((a3 & 1) != 0)
  {
    v8 = 1;
  }
  else if (objc_msgSend(v6, "execute:", CFSTR("ALTER TABLE client_items ADD COLUMN item_min_supported_os_rowid integer DEFAULT NULL")))
  {
    v8 = objc_msgSend(v7, "execute:", CFSTR("CREATE TABLE os_names(name text unique)"));
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t br_update_tables_4_018()
{
  return 1;
}

uint64_t br_update_tables_4_019()
{
  return 1;
}

uint64_t br_update_tables_4_020(uint64_t a1, void *a2, char a3)
{
  id v4;
  void *v5;
  uint64_t v6;

  if ((a3 & 1) != 0)
    return 1;
  v4 = a2;
  +[BRCUserDefaults defaultsForMangledID:](BRCUserDefaults, "defaultsForMangledID:", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v4, "execute:", CFSTR("UPDATE client_document_access SET evictable = (SELECT version_mtime FROM client_items as ci WHERE ci.rowid = item_rowid) WHERE access_time = 0 AND evictable = 0 AND (SELECT version_size FROM client_items as ci WHERE ci.rowid = item_rowid) > %lld AND (SELECT item_type FROM client_items as ci WHERE ci.rowid = item_rowid) = 1"), objc_msgSend(v5, "minAutomaticallyEvictableFilesize"));

  return v6;
}

uint64_t br_update_tables_5_000(void *a1, void *a2, uint64_t a3, void **a4)
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  NSObject *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  NSObject *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  NSObject *v40;
  uint64_t v41;
  void *v42;
  void *v44;
  unsigned int v45;
  void **v46;
  id v47;
  uint8_t buf[4];
  void *v49;
  __int16 v50;
  void *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = v8;
  if ((a3 & 1) == 0)
  {
    if ((objc_msgSend(v8, "execute:", CFSTR(" CREATE TABLE app_libraries(rowid integer PRIMARY KEY, app_library_plist blob)")) & 1) != 0)
    {
      v46 = a4;
      v47 = v7;
      v45 = a3;
      v11 = (void *)objc_msgSend(v9, "fetch:", CFSTR("SELECT rowid, zone_plist FROM client_zones"));
      if (objc_msgSend(v11, "next"))
      {
        while (1)
        {
          _BRCClassesForContainerState();
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "unarchivedObjectOfClasses:atIndex:", v12, 1);
          v13 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v13)
          {
            brc_bread_crumbs();
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            brc_default_log();
            v32 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v32, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 138412290;
              v49 = v31;
              _os_log_fault_impl(&dword_1CBD43000, v32, OS_LOG_TYPE_FAULT, "[CRIT] Assertion failed: plist != nil%@", buf, 0xCu);
            }

          }
          objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("state"));
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = objc_msgSend(v16, "unsignedIntegerValue");

          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", *(_QWORD *)&v17 & 0xC0804);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "setObject:forKeyedSubscript:", v18, CFSTR("state"));

          objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("fileID"));
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "setObject:forKeyedSubscript:", v19, CFSTR("fileID"));

          objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("generationID"));
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "setObject:forKeyedSubscript:", v20, CFSTR("generationID"));

          objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("maxLostStamp"));
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "setObject:forKeyedSubscript:", v21, CFSTR("maxLostStamp"));

          objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("deepScanStamp"));
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "setObject:forKeyedSubscript:", v22, CFSTR("deepScanStamp"));

          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", *(_QWORD *)&v17 & 0x131710);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "setObject:forKeyedSubscript:", v23, CFSTR("state"));

          objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("requestID"));
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "setObject:forKeyedSubscript:", v24, CFSTR("requestID"));

          objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("lastApplyRank"));
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "setObject:forKeyedSubscript:", v25, CFSTR("lastApplyRank"));

          objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("appliedTombstoneRanks"));
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "setObject:forKeyedSubscript:", v26, CFSTR("appliedTombstoneRanks"));

          objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("syncUpThrottle"));
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "setObject:forKeyedSubscript:", v27, CFSTR("syncUpThrottle"));

          objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("syncUpBudget"));
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "setObject:forKeyedSubscript:", v28, CFSTR("syncUpBudget"));

          objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("syncDownThrottle"));
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "setObject:forKeyedSubscript:", v29, CFSTR("syncDownThrottle"));

          objc_msgSend(v11, "numberAtIndex:", 0);
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_msgSend(v9, "execute:", CFSTR("UPDATE client_zones SET zone_plist = %@ WHERE rowid = %@"), v15, v30) & 1) == 0)break;
          if ((objc_msgSend(v9, "execute:", CFSTR("INSERT INTO app_libraries (rowid, app_library_plist) VALUES (%@, %@)"), v30, v14) & 1) == 0)
          {
            if (v46)
            {
              objc_msgSend(v9, "lastError");
              v41 = objc_claimAutoreleasedReturnValue();
              v42 = *v46;
              *v46 = (void *)v41;

            }
            brc_bread_crumbs();
            v39 = (void *)objc_claimAutoreleasedReturnValue();
            brc_default_log();
            v40 = objc_claimAutoreleasedReturnValue();
            if (!os_log_type_enabled(v40, OS_LOG_TYPE_FAULT))
              goto LABEL_50;
LABEL_53:
            objc_msgSend(v9, "lastError");
            v44 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412546;
            v49 = v44;
            v50 = 2112;
            v51 = v39;
            _os_log_fault_impl(&dword_1CBD43000, v40, OS_LOG_TYPE_FAULT, "[CRIT] UNREACHABLE: migration should work: %@%@", buf, 0x16u);

            goto LABEL_50;
          }

          if (!objc_msgSend(v11, "next"))
            goto LABEL_20;
        }
        if (v46)
        {
          objc_msgSend(v9, "lastError");
          v37 = objc_claimAutoreleasedReturnValue();
          v38 = *v46;
          *v46 = (void *)v37;

        }
        brc_bread_crumbs();
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        brc_default_log();
        v40 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v40, OS_LOG_TYPE_FAULT))
          goto LABEL_53;
LABEL_50:

      }
      else
      {
LABEL_20:
        if (objc_msgSend(v9, "execute:", CFSTR("ALTER TABLE client_items ADD COLUMN app_library_rowid"))
          && objc_msgSend(v9, "execute:", CFSTR("UPDATE client_items SET app_library_rowid = zone_rowid"))
          && objc_msgSend(v9, "execute:", CFSTR("CREATE UNIQUE INDEX \"client_items/item_doc_id\" ON client_items (item_doc_id)"))&& objc_msgSend(v9, "execute:", CFSTR("CREATE UNIQUE INDEX \"client_items/item_file_id_unique\" ON client_items (item_file_id, item_state)WHERE item_state != -3"))&& objc_msgSend(v9, "execute:", CFSTR("CREATE INDEX \"client_items/item_id\" ON client_items(item_id)"))&& objc_msgSend(v9, "execute:", CFSTR("CREATE INDEX \"client_items/item_file_id\" ON client_items (item_file_id)"))&& objc_msgSend(v9, "execute:", CFSTR("DROP INDEX \"client_items/item_parent_id__item_state\""))&& objc_msgSend(v9, "execute:",
                             CFSTR("CREATE INDEX \"client_items/item_parent_id__item_state\" ON client_items (item_parent_id, item_state)"))
          && objc_msgSend(v9, "execute:", CFSTR("DROP INDEX \"client_items/item_path\""))
          && objc_msgSend(v9, "execute:", CFSTR("CREATE INDEX \"client_items/item_path\" ON client_items (item_parent_id, item_filename)"))&& objc_msgSend(v9, "execute:", CFSTR("CREATE INDEX \"client_items/item_parent_id__item_localname\" ON client_items (item_parent_id, item_localname)"))&& objc_msgSend(v9, "execute:", CFSTR(" CREATE TABLE client_pkg_items_tmp(item_doc_id integer not null, rel_path text not null, item_type integer not null, asset_rank integer not null, is_dirty integer, quarantine_info blob, file_id integer not null, signature_or_link blob, generation, size integer, mode integer, mtime integer, PRIMARY KEY (item_doc_id, rel_path ASC))"))&& objc_msgSend(v9, "execute:", CFSTR("INSERT INTO client_pkg_items_tmp (item_doc_id, rel_path, item_type, asset_rank, is_dirty, quarantine_info, file_id, signature_or_link, generation, size, mode, mtime) SELECT item_doc_id, rel_path, item_type, asset_rank, is_dirty, quarantine_info, file_id, signature_or_link, generation, size, mode, mtime FROM client_pkg_items"))&& objc_msgSend(v9, "execute:", CFSTR("DROP TABLE client_pkg_items"))&& objc_msgSend(v9, "execute:",
                             CFSTR("ALTER TABLE client_pkg_items_tmp RENAME TO client_pkg_items"))
          && objc_msgSend(v9, "execute:", CFSTR("CREATE INDEX \"client_pkg_items/size\" ON client_pkg_items (item_doc_id, size)"))&& objc_msgSend(v9, "execute:", CFSTR("CREATE INDEX \"client_pkg_items/is_dirty\" ON client_pkg_items (item_doc_id, is_dirty)"))&& objc_msgSend(v9, "execute:", CFSTR("DROP INDEX item_scope_index"))&& objc_msgSend(v9, "execute:", CFSTR("CREATE INDEX \"client_items/item_scope_index\" ON client_items(zone_rowid, item_notifs_rank, item_scope, item_state)"))&& objc_msgSend(v9, "execute:", CFSTR("DROP INDEX pending_download_docs"))&& (objc_msgSend(v9, "execute:", CFSTR("CREATE INDEX \"client_items/pending_download_docs\" ON client_items(item_doc_id, desired_version) WHERE desired_version != NULL")) & 1) != 0)
        {
          v10 = objc_msgSend(v9, "execute:", CFSTR("DROP INDEX \"client_items/doc_sync_state\""));

          v7 = v47;
          a3 = v45;
          if (!(_DWORD)v10)
            goto LABEL_52;
          goto LABEL_3;
        }
      }

      v10 = 0;
      v7 = v47;
      goto LABEL_52;
    }
    if (a4)
    {
      objc_msgSend(v9, "lastError");
      v33 = objc_claimAutoreleasedReturnValue();
      v34 = *a4;
      *a4 = (void *)v33;

    }
    brc_bread_crumbs();
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v36 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_FAULT))
      br_create_tables_initial_cold_1();

LABEL_19:
    v10 = 0;
    goto LABEL_52;
  }
  if ((objc_msgSend(v8, "execute:", CFSTR("CREATE INDEX \"server_items/item_id\" ON server_items(item_id)")) & 1) == 0)
    goto LABEL_19;
LABEL_3:
  v10 = +[BRCItemID migrateItemIDsToVersion5WithDB:serverTruth:](BRCItemID, "migrateItemIDsToVersion5WithDB:serverTruth:", v9, a3);
LABEL_52:

  return v10;
}

uint64_t br_update_tables_5_001(uint64_t a1, void *a2, int a3)
{
  id v4;
  void *v5;
  uint64_t v6;

  v4 = a2;
  v5 = v4;
  if (a3)
  {
    if (objc_msgSend(v4, "execute:", CFSTR("CREATE TABLE users(user_key integer primary key, user_name text not null, user_plist blob, UNIQUE (user_name))"))&& objc_msgSend(v5, "execute:", CFSTR("INSERT INTO users(user_key, user_name, user_plist) SELECT owner_key, owner_name, owner_plist FROM server_owners")))
    {
      v6 = objc_msgSend(v5, "execute:", CFSTR("DROP TABLE server_owners"));
    }
    else
    {
      v6 = 0;
    }
  }
  else
  {
    v6 = 1;
  }

  return v6;
}

uint64_t br_update_tables_5_002(uint64_t a1, void *a2, char a3)
{
  if ((a3 & 1) != 0)
    return 1;
  else
    return objc_msgSend(a2, "execute:", CFSTR("ALTER TABLE client_downloads ADD COLUMN unit_count_completed INTEGER DEFAULT 0"));
}

uint64_t br_update_tables_5_003(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if ((a3 & 1) != 0)
  {
    v8 = 1;
  }
  else if (objc_msgSend(v6, "execute:", CFSTR("ALTER TABLE client_document_access RENAME TO client_document_access_tmp"))&& objc_msgSend(v7, "execute:", CFSTR("CREATE TABLE client_document_access(item_rowid integer primary key, evictable integer not null , access_time integer not null default 0)"))&& objc_msgSend(v7, "execute:", CFSTR("INSERT INTO client_document_access(item_rowid, evictable, access_time) SELECT item_rowid, evictable, access_time FROM client_document_access_tmp"))&& objc_msgSend(v7, "execute:", CFSTR("DROP TABLE client_document_access_tmp")))
  {
    v8 = objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_document_access/evictable\" ON client_document_access (evictable)"));
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t br_update_tables_5_004(void *a1, void *a2, int a3)
{
  id v5;
  id v6;
  void *v7;
  const __CFString *v8;
  uint64_t v9;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (!a3)
  {
    if (objc_msgSend(v6, "execute:", CFSTR("ALTER TABLE client_items ADD COLUMN item_trash_put_back_parent_id BLOB DEFAULT NULL")))
    {
      v8 = CFSTR("ALTER TABLE client_items ADD COLUMN item_trash_put_back_path BLOB DEFAULT NULL");
      goto LABEL_6;
    }
LABEL_7:
    v9 = 0;
    goto LABEL_8;
  }
  if ((objc_msgSend(v6, "execute:", CFSTR("ALTER TABLE server_items ADD COLUMN item_trash_put_back_parent_id BLOB DEFAULT NULL")) & 1) == 0)goto LABEL_7;
  v8 = CFSTR("ALTER TABLE server_items ADD COLUMN item_trash_put_back_path BLOB DEFAULT NULL");
LABEL_6:
  v9 = objc_msgSend(v7, "execute:", v8);
LABEL_8:

  return v9;
}

uint64_t br_update_tables_5_005(void *a1, void *a2, int a3)
{
  id v5;
  id v6;
  void *v7;
  const __CFString *v8;
  uint64_t v9;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (!a3)
  {
    if (objc_msgSend(v6, "execute:", CFSTR("ALTER TABLE client_uploads ADD COLUMN upload_priority integer DEFAULT 0"))&& objc_msgSend(v7, "execute:", CFSTR("ALTER TABLE client_uploads ADD COLUMN upload_request_stamp integer DEFAULT 0"))&& objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_pkg_items/asset_rank\" ON client_pkg_items (item_doc_id, asset_rank)"))&& objc_msgSend(v7, "execute:", CFSTR("DROP INDEX \"client_items/lost_scan_index\""))&& objc_msgSend(v7, "execute:", CFSTR("DROP INDEX \"client_items/zombie_scan_index\""))&& objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_items/lost_scan_index\" ON client_items (item_state, app_library_rowid, item_processing_stamp) WHERE item_state = -1"))&& objc_msgSend(v7,
                         "execute:",
                         CFSTR("CREATE INDEX \"client_items/zombie_scan_index\" ON client_items (item_state, app_library_rowid, item_processing_stamp) WHERE item_state = -3")))
    {
      v8 = CFSTR("CREATE INDEX \"client_items/doc_sync_state\" ON client_items (zone_rowid, item_localsyncupstate, item_type)WHERE item_type = 1");
      goto LABEL_4;
    }
LABEL_13:
    v9 = 0;
    goto LABEL_14;
  }
  if ((objc_msgSend(v6, "execute:", CFSTR("DROP INDEX \"server_items/path_index\"")) & 1) == 0)
    goto LABEL_13;
  v8 = CFSTR("CREATE INDEX \"server_items/path_index\" ON server_items (item_parent_id, item_filename)");
LABEL_4:
  v9 = objc_msgSend(v7, "execute:", v8);
LABEL_14:

  return v9;
}

uint64_t br_update_tables_5_006(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if ((a3 & 1) != 0)
  {
    v8 = 1;
  }
  else if (objc_msgSend(v6, "execute:", CFSTR("ALTER TABLE client_items ADD COLUMN item_thumb_greedy integer default 0"))&& objc_msgSend(v7, "execute:", CFSTR("ALTER TABLE client_items ADD COLUMN item_thumb_live_signature blob default null")))
  {
    v8 = objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_document_access/evictable/item_rowid\" ON client_document_access (item_rowid)"));
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t br_update_tables_5_007(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t j;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[128];
  _BYTE v42[128];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = v6;
  if ((a3 & 1) != 0)
  {
    v8 = objc_msgSend(v6, "execute:", CFSTR("CREATE TABLE rowid_reservations(rowid integer PRIMARY KEY, container_id text not null, owner text, UNIQUE (container_id, owner))"));
    v9 = (void *)objc_msgSend(v7, "fetch:", CFSTR("SELECT zone_name, zone_owner, rowid FROM server_zones WHERE zone_plist IS NULL"));
    if (objc_msgSend(v9, "next"))
    {
      do
      {
        objc_msgSend(v9, "stringAtIndex:", 0);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "stringAtIndex:", 1);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "numberAtIndex:", 2);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "execute:", CFSTR("INSERT INTO rowid_reservations  (container_id, owner, rowid)  VALUES (%@, %@, %@)"), v10, v11, v12);

      }
      while ((objc_msgSend(v9, "next") & 1) != 0);
    }
    objc_msgSend(v7, "execute:", CFSTR("DELETE FROM server_zones WHERE zone_plist IS NULL"));
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v32 = v5;
    objc_msgSend(v5, "_privateServerZonesEnumerator:", v7);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v37, v42, 16);
    v31 = v9;
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)v38;
      do
      {
        for (i = 0; i != v15; ++i)
        {
          if (*(_QWORD *)v38 != v16)
            objc_enumerationMutation(v13);
          if ((v8 & 1) != 0)
          {
            v18 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * i);
            objc_msgSend(v18, "dbRowID");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v18, "zoneName");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            v8 = objc_msgSend(v7, "execute:", CFSTR("INSERT INTO rowid_reservations  (rowid, container_id, owner) VALUES (%@, %@, %@)"), v19, v20, 0);

          }
          else
          {
            v8 = 0;
          }
        }
        v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v37, v42, 16);
      }
      while (v15);
    }

    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    objc_msgSend(v32, "_sharedServerZonesEnumerator:", v7);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v33, v41, 16);
    if (v22)
    {
      v23 = v22;
      v24 = *(_QWORD *)v34;
      do
      {
        for (j = 0; j != v23; ++j)
        {
          if (*(_QWORD *)v34 != v24)
            objc_enumerationMutation(v21);
          if ((v8 & 1) != 0)
          {
            v26 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * j);
            objc_msgSend(v26, "dbRowID");
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v26, "zoneName");
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v26, "ownerName");
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            v8 = objc_msgSend(v7, "execute:", CFSTR("INSERT INTO rowid_reservations  (rowid, container_id, owner) VALUES (%@, %@, %@)"), v27, v28, v29);

          }
          else
          {
            v8 = 0;
          }
        }
        v23 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v33, v41, 16);
      }
      while (v23);
    }

    v5 = v32;
  }
  else if (objc_msgSend(v6, "execute:", CFSTR("ALTER TABLE app_libraries ADD COLUMN app_library_name text default null"))&& objc_msgSend(v7, "execute:", CFSTR("ALTER TABLE app_libraries ADD COLUMN app_library_owner text default null"))&& objc_msgSend(v7, "execute:", CFSTR("ALTER TABLE app_libraries ADD COLUMN zone_rowid integer default 0")))
  {
    v8 = objc_msgSend(v7, "execute:", CFSTR("UPDATE app_libraries SET app_library_name = (SELECT zone_name FROM client_zones WHERE app_libraries.rowid = client_zones.rowid),     app_library_owner = (SELECT zone_owner FROM client_zones WHERE app_libraries.rowid = client_zones.rowid),     zone_rowid = rowid"));
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t br_update_tables_5_008(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if ((a3 & 1) != 0)
  {
    v8 = 1;
  }
  else if (objc_msgSend(v6, "execute:", CFSTR("DROP INDEX \"client_items/item_parent_id__item_state\"")))
  {
    v8 = objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_items/item_parent_id__item_state\" ON client_items (app_library_rowid, item_parent_id, item_state)"));
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t br_update_tables_5_009(uint64_t a1, void *a2, int a3)
{
  id v4;
  void *v5;
  uint64_t v6;

  v4 = a2;
  v5 = v4;
  if (a3)
  {
    if (objc_msgSend(v4, "execute:", CFSTR("ALTER TABLE rowid_reservations RENAME TO rowid_reservations_old"))&& objc_msgSend(v5, "execute:", CFSTR("CREATE TABLE rowid_reservations(rowid integer PRIMARY KEY, container_id text not null, owner text, UNIQUE (container_id, owner))"))&& objc_msgSend(v5, "execute:", CFSTR("INSERT INTO rowid_reservations (rowid, container_id, owner) SELECT rowid, container_id, owner FROM rowid_reservations_old")))
    {
      v6 = objc_msgSend(v5, "execute:", CFSTR("DROP TABLE rowid_reservations_old"));
    }
    else
    {
      v6 = 0;
    }
  }
  else
  {
    v6 = 1;
  }

  return v6;
}

uint64_t br_update_tables_5_010(uint64_t a1, void *a2, int a3)
{
  const __CFString *v3;

  if (a3)
    v3 = CFSTR("CREATE UNIQUE INDEX \"server_zones/zone_name__zone_owner\" ON server_zones (zone_name, zone_owner)");
  else
    v3 = CFSTR("CREATE UNIQUE INDEX \"client_zones/zone_name__zone_owner\" ON client_zones (zone_name, zone_owner)");
  return objc_msgSend(a2, "execute:", v3);
}

uint64_t br_update_tables_5_011(void *a1, void *a2, int a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (!a3)
  {
    v11 = (void *)objc_msgSend(v6, "numberWithSQL:", CFSTR("SELECT COUNT(*) FROM app_libraries GROUP BY app_library_name, app_library_owner"));
    if ((unint64_t)objc_msgSend(v11, "unsignedLongLongValue") >= 2)
    {
      brc_bread_crumbs();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, (os_log_type_t)0x90u))
        br_update_tables_5_011_cold_2();

    }
    else
    {

      if (objc_msgSend(v7, "execute:", CFSTR("ALTER TABLE app_libraries RENAME TO app_libraries_old"))
        && objc_msgSend(v7, "execute:", CFSTR("CREATE TABLE app_libraries(rowid integer PRIMARY KEY , app_library_plist blob , app_library_name text default null , app_library_owner text default null , zone_rowid integer default 0 , UNIQUE (app_library_name, app_library_owner))"))&& objc_msgSend(v7, "execute:", CFSTR("INSERT INTO app_libraries        (rowid, app_library_plist, app_library_name, app_library_name, app_library_owner, zone_rowid) SELECT rowid, app_library_plist, app_library_name, app_library_name, app_library_owner, zone_rowid FROM app_libraries_old")))
      {
        v12 = objc_msgSend(v7, "execute:", CFSTR("DROP TABLE app_libraries_old"));
        v8 = 0;
        goto LABEL_17;
      }
    }
    v8 = 0;
LABEL_16:
    v12 = 0;
    goto LABEL_17;
  }
  v8 = (void *)objc_msgSend(v6, "fetch:", CFSTR("SELECT rowid FROM rowid_reservations WHERE owner = %@"), *MEMORY[0x1E0C94730]);
  if (objc_msgSend(v8, "next"))
  {
    brc_bread_crumbs();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, (os_log_type_t)0x90u))
      br_update_tables_5_011_cold_1();

    goto LABEL_16;
  }
  v12 = 1;
LABEL_17:

  return v12;
}

uint64_t br_update_tables_5_012(uint64_t a1, void *a2, int a3)
{
  id v4;
  void *v5;
  uint64_t v6;

  v4 = a2;
  v5 = v4;
  if (a3)
  {
    if (objc_msgSend(v4, "execute:", CFSTR("CREATE TABLE aggregates(key TEXT NOT NULL, value INTEGER NOT NULL DEFAULT 0)")))v6 = objc_msgSend(v5, "execute:", CFSTR("INSERT INTO aggregates (key, value) SELECT 'version_size_sum', COALESCE(SUM(version_size), 0) FROM server_items"));
    else
      v6 = 0;
    objc_msgSend(v5, "execute:", CFSTR("CREATE TRIGGER insert_version_sum_size AFTER INSERT ON server_items  BEGIN  UPDATE aggregates SET value = (value + COALESCE(new.version_size, 0)) WHERE key = 'version_size_sum';   END"));
    objc_msgSend(v5, "execute:", CFSTR("CREATE TRIGGER update_version_sum_size UPDATE OF version_size ON server_items  BEGIN  UPDATE aggregates SET value = (value - COALESCE(old.version_size, 0) + COALESCE(new.version_size, 0)) WHERE key = 'version_size_sum';   END"));
    objc_msgSend(v5, "execute:", CFSTR("CREATE TRIGGER delete_version_sum_size BEFORE DELETE ON server_items  BEGIN  UPDATE aggregates SET value = (value - COALESCE(old.version_size, 0)) WHERE key = 'version_size_sum';   END"));
  }
  else
  {
    v6 = 1;
  }

  return v6;
}

uint64_t br_update_tables_5_013(uint64_t a1, void *a2, char a3)
{
  id v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;

  if ((a3 & 1) != 0)
    return 1;
  v4 = a2;
  v5 = objc_msgSend(v4, "execute:", CFSTR("CREATE TABLE client_pkg_sizes (item_doc_id integer not null primary key, aggregate_size integer not null default 0, largest_file_size integer not null default 0)"));
  v6 = v5 & objc_msgSend(v4, "execute:", CFSTR("INSERT INTO client_pkg_sizes SELECT item_doc_id, COALESCE(SUM(size), 0), COALESCE(MAX(size), 0) FROM client_pkg_items GROUP BY item_doc_id"));
  v7 = objc_msgSend(v4, "execute:", CFSTR("CREATE TRIGGER \"client_pkg_items/increase_pkg_size\" AFTER INSERT ON client_pkg_items BEGIN INSERT OR IGNORE INTO client_pkg_sizes VALUES (new.item_doc_id, 0, 0); UPDATE client_pkg_sizes SET aggregate_size = aggregate_size + COALESCE(new.size, 0), largest_file_size = MAX(COALESCE(new.size,0), largest_file_size) WHERE item_doc_id = new.item_doc_id; END"));
  v8 = v6 & v7 & objc_msgSend(v4, "execute:", CFSTR("CREATE TRIGGER \"client_pkg_items/update_pkg_size\" UPDATE OF size ON client_pkg_items BEGIN UPDATE client_pkg_sizes SET aggregate_size = aggregate_size - COALESCE(old.size, 0) + COALESCE(new.size, 0), largest_file_size = MAX(COALESCE(new.size,0), largest_file_size) WHERE item_doc_id = new.item_doc_id; END"));
  v9 = objc_msgSend(v4, "execute:", CFSTR("CREATE TRIGGER \"client_pkg_items/reduce_pkg_size\"  BEFORE DELETE ON client_pkg_items BEGIN UPDATE client_pkg_sizes SET aggregate_size = aggregate_size - COALESCE(old.size, 0) WHERE item_doc_id = old.item_doc_id; END"));
  v10 = objc_msgSend(v4, "execute:", CFSTR("DROP INDEX \"client_pkg_items/size\""));

  return v8 & v9 & v10;
}

uint64_t br_update_tables_5_014(uint64_t a1, void *a2, char a3)
{
  if ((a3 & 1) != 0)
    return 1;
  else
    return objc_msgSend(a2, "execute:", CFSTR("CREATE TABLE share_metadata_cache( item_rowid integer primary key, share_path text unique not null, share_metadata blob non null)"));
}

uint64_t br_update_tables_5_015(uint64_t a1, void *a2, char a3)
{
  id v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;

  if ((a3 & 1) != 0)
    return 1;
  v4 = a2;
  v5 = objc_msgSend(v4, "execute:", CFSTR("ALTER TABLE app_libraries ADD COLUMN auto_client_item_count INTEGER DEFAULT 0"));
  v6 = v5 & objc_msgSend(v4, "execute:", CFSTR("ALTER TABLE app_libraries ADD COLUMN auto_document_count INTEGER DEFAULT 0"));
  v7 = objc_msgSend(v4, "execute:", CFSTR("ALTER TABLE app_libraries ADD COLUMN auto_document_with_local_changes_count INTEGER DEFAULT 0"));
  v8 = v6 & v7 & objc_msgSend(v4, "execute:", CFSTR("ALTER TABLE app_libraries ADD COLUMN auto_aggregate_size INTEGER DEFAULT 0"));
  v9 = objc_msgSend(v4, "execute:", CFSTR("CREATE TRIGGER \"client_items/insert_item\" AFTER INSERT ON client_items BEGIN  UPDATE app_libraries SET auto_client_item_count = auto_client_item_count + 1 WHERE rowid = new.app_library_rowid AND new.item_type != 4 AND new.item_type != 3;  UPDATE app_libraries SET auto_aggregate_size = auto_aggregate_size + COALESCE(new.version_size, 0), auto_document_count = auto_document_count + 1      WHERE rowid = new.app_library_rowid AND new.item_type = 1 AND new.item_state != 1;  UPDATE app_libraries SET auto_document_with_local_changes_count = auto_document_with_local_changes_count + 1 WHERE rowid = new.app_library_rowid AND new.item_type = 1 AND new.item_localsyncupstate >= 2; END"));
  v10 = v9 & objc_msgSend(v4, "execute:", CFSTR("CREATE TRIGGER \"client_items/delete_item\" BEFORE delete ON client_items BEGIN  UPDATE app_libraries SET auto_client_item_count = auto_client_item_count - 1 WHERE rowid = old.app_library_rowid AND old.item_type != 4 AND old.item_type != 3;  UPDATE app_libraries SET auto_aggregate_size = auto_aggregate_size - COALESCE(old.version_size, 0), auto_document_count = auto_document_count - 1      WHERE rowid = old.app_library_rowid AND old.item_type = 1 AND old.item_state != 1;  UPDATE app_libraries SET auto_document_with_local_changes_count = auto_document_with_local_changes_count - 1 WHERE rowid = old.app_library_rowid AND old.item_type = 1 AND old.item_localsyncupstate >= 2; END"));
  v11 = v8 & v10 & objc_msgSend(v4, "execute:", CFSTR("CREATE TRIGGER \"client_items/update_size\" UPDATE OF version_size, item_type, item_state ON client_items BEGIN  UPDATE app_libraries SET    auto_aggregate_size = auto_aggregate_size - COALESCE(old.version_size,0)  * (old.item_type = 1 AND old.item_state != 1) + COALESCE(new.version_size,0) * (new.item_type = 1 AND new.item_state != 1),    auto_document_count = auto_document_count - (old.item_type = 1 AND old.item_state != 1) + (new.item_type = 1 AND new.item_state != 1)      WHERE rowid = new.app_library_rowid; END"));
  v12 = objc_msgSend(v4, "execute:", CFSTR("CREATE TRIGGER \"client_items/update_changes_count\" UPDATE OF item_type,item_localsyncupstate ON client_items BEGIN  UPDATE app_libraries set auto_document_with_local_changes_count = auto_document_with_local_changes_count - (old.item_type = 1 AND old.item_localsyncupstate >= 2) + (new.item_type = 1 AND new.item_localsyncupstate >= 2) where rowid = new.app_library_rowid; END"));

  return v11 & v12;
}

uint64_t br_update_tables_5_016(uint64_t a1, void *a2, int a3)
{
  if (a3)
    return objc_msgSend(a2, "execute:", CFSTR("ALTER TABLE server_items ADD COLUMN pcs_state INTEGER NOT NULL DEFAULT 0"));
  else
    return 1;
}

uint64_t br_update_tables_6_000()
{
  return 1;
}

uint64_t br_update_tables_6_001(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if ((a3 & 1) != 0)
  {
    v8 = 1;
  }
  else if (objc_msgSend(v6, "execute:", CFSTR("DROP TABLE share_metadata_cache")))
  {
    v8 = objc_msgSend(v7, "execute:", CFSTR("CREATE TABLE share_metadata_cache( item_rowid integer primary key, share_path text unique not null, record_id blob non null)"));
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t br_update_tables_6_002()
{
  return 1;
}

uint64_t br_update_tables_6_003()
{
  return 1;
}

uint64_t br_update_tables_6_004(uint64_t a1, void *a2, char a3)
{
  id v4;
  void *v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  NSObject *v16;

  v4 = a2;
  v5 = v4;
  if ((a3 & 1) != 0)
  {
    v6 = 1;
  }
  else
  {
    v7 = objc_msgSend(v4, "execute:", CFSTR("ALTER TABLE \"client_uploads\" ADD COLUMN app_library_rowid INTEGER"));
    v8 = objc_msgSend(v5, "execute:", CFSTR("UPDATE \"client_uploads\" SET app_library_rowid = (SELECT app_library_rowid FROM client_items WHERE client_items.rowid = client_uploads.throttle_id) "));
    v9 = objc_msgSend(v5, "execute:", CFSTR("ALTER TABLE \"client_downloads\" ADD COLUMN app_library_rowid INTEGER "));
    v10 = objc_msgSend(v5, "execute:", CFSTR("UPDATE \"client_downloads\" SET app_library_rowid = (SELECT app_library_rowid FROM client_items WHERE client_items.rowid = client_downloads.throttle_id) "));
    v11 = (void *)objc_msgSend(v5, "numberWithSQL:", CFSTR("SELECT 1 FROM client_uploads WHERE app_library_rowid == NULL LIMIT 1"));
    if (objc_msgSend(v11, "BOOLValue"))
    {
      brc_bread_crumbs();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
        br_update_tables_6_004_cold_2();

      v6 = 0;
    }
    else
    {
      v6 = v7 & v8 & v9 & v10;
    }
    v14 = (void *)objc_msgSend(v5, "numberWithSQL:", CFSTR("SELECT 1 FROM client_downloads WHERE app_library_rowid == NULL LIMIT 1"));

    if (objc_msgSend(v14, "BOOLValue"))
    {
      brc_bread_crumbs();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
        br_update_tables_6_004_cold_1();

      v6 = 0;
    }

  }
  return v6;
}

uint64_t br_update_tables_6_005(uint64_t a1, void *a2, char a3)
{
  if ((a3 & 1) != 0)
    return 1;
  else
    return objc_msgSend(a2, "execute:", CFSTR("DROP TABLE IF EXISTS share_metadata_cache"));
}

uint64_t br_update_tables_6_006()
{
  return 1;
}

uint64_t br_update_tables_6_007()
{
  return 1;
}

uint64_t br_update_tables_6_008(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if ((a3 & 1) != 0)
  {
    v8 = 1;
  }
  else if (objc_msgSend(v6, "execute:", CFSTR("CREATE INDEX \"client_items/item_parent_id_rowid\" ON client_items(zone_rowid, item_parent_id, rowid)")))
  {
    v8 = objc_msgSend(v7, "execute:", CFSTR("CREATE TABLE mark_children_lost_progress(zone_rowid INTEGER NOT NULL, item_parent_id BLOB NOT NULL, last_updated_row_id INTEGER NOT NULL, UNIQUE(zone_rowid, item_parent_id))"));
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t br_update_tables_6_009(uint64_t a1, void *a2, char a3)
{
  if ((a3 & 1) != 0)
    return 1;
  else
    return objc_msgSend(a2, "execute:", CFSTR("ALTER TABLE client_pkg_items ADD COLUMN xattrs BLOB"));
}

uint64_t br_update_tables_6_010(uint64_t a1, void *a2, char a3)
{
  id v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;

  if ((a3 & 1) != 0)
    return 1;
  v4 = a2;
  v5 = objc_msgSend(v4, "execute:", CFSTR("DROP INDEX IF EXISTS \"client_items/lost_scan_index\""));
  v6 = v5 & objc_msgSend(v4, "execute:", CFSTR("DROP INDEX IF EXISTS \"client_items/zombie_scan_index\""));
  v7 = objc_msgSend(v4, "execute:", CFSTR("DROP INDEX IF EXISTS \"client_items/lostzombie_scan_index\""));
  v8 = objc_msgSend(v4, "execute:", CFSTR("CREATE INDEX \"client_items/lostzombie_scan_index\" ON client_items (item_processing_stamp) WHERE item_state IN (-1, -3)"));

  return v6 & v7 & v8;
}

uint64_t br_update_tables_6_011(uint64_t a1, void *a2, int a3)
{
  if (a3)
    return objc_msgSend(a2, "execute:", CFSTR("ALTER TABLE server_pending_fetches ADD COLUMN deleted_record_type INTEGER NOT NULL DEFAULT 0"));
  else
    return 1;
}

uint64_t br_update_tables_6_012()
{
  return 1;
}

uint64_t br_update_tables_6_013(void *a1, void *a2, int a3)
{
  id v5;
  id v6;
  void *v7;
  const __CFString *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (a3)
    v8 = CFSTR("SELECT 1 FROM server_items WHERE zone_rowid NOT IN (SELECT rowid from server_zones)");
  else
    v8 = CFSTR("SELECT 1 FROM client_items WHERE zone_rowid NOT IN (SELECT rowid from client_zones)");
  v9 = (void *)objc_msgSend(v6, "numberWithSQL:", v8);
  if (objc_msgSend(v9, "BOOLValue"))
  {
    brc_bread_crumbs();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
      br_update_tables_6_013_cold_1();

  }
  v12 = objc_msgSend(v9, "BOOLValue") ^ 1;

  return v12;
}

uint64_t br_update_tables_6_014()
{
  return 1;
}

uint64_t br_update_tables_6_015()
{
  return 1;
}

uint64_t br_update_tables_6_016(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;

  v2 = a2;
  if (objc_msgSend(v2, "execute:", CFSTR("DROP TABLE IF EXISTS sqlite_stat1"))
    && objc_msgSend(v2, "execute:", CFSTR("DROP TABLE IF EXISTS sqlite_stat2"))
    && objc_msgSend(v2, "execute:", CFSTR("DROP TABLE IF EXISTS sqlite_stat3")))
  {
    v3 = objc_msgSend(v2, "execute:", CFSTR("DROP TABLE IF EXISTS sqlite_stat4"));
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

uint64_t br_update_tables_6_017(uint64_t a1, void *a2, char a3)
{
  if ((a3 & 1) != 0)
    return 1;
  else
    return objc_msgSend(a2, "execute:", CFSTR("ALTER TABLE mark_children_lost_progress ADD COLUMN item_parent_file_id integer"));
}

BOOL br_update_tables_7_000(void *a1, void *a2, int a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  char v11;
  _BOOL8 v12;
  int v13;
  _QWORD v15[5];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;

  v5 = a1;
  v6 = a2;
  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = 0;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __br_update_tables_7_000_block_invoke;
  v15[3] = &unk_1E8762768;
  v15[4] = &v16;
  v7 = (void *)MEMORY[0x1D17A6DB0](v15);
  v8 = MEMORY[0x1D17A6DB0]();
  v9 = (void *)v8;
  v10 = *MEMORY[0x1E0C94730];
  if (!a3)
  {
    v13 = objc_msgSend(v6, "execute:", CFSTR("UPDATE client_items SET item_parent_id = call_block(%@, item_parent_id, item_id) WHERE zone_rowid IN (SELECT rowid FROM client_zones WHERE client_zones.zone_owner != %@)"), v8, v10);

    if (!v13)
      goto LABEL_3;
LABEL_5:
    v12 = *((_BYTE *)v17 + 24) == 0;
    goto LABEL_6;
  }
  v11 = objc_msgSend(v6, "execute:", CFSTR("UPDATE server_items SET item_parent_id = call_block(%@, item_parent_id, item_id) WHERE zone_rowid IN (SELECT rowid FROM server_zones WHERE zone_owner != %@)"), v8, v10);

  if ((v11 & 1) != 0)
    goto LABEL_5;
LABEL_3:
  v12 = 0;
LABEL_6:

  _Block_object_dispose(&v16, 8);
  return v12;
}

void sub_1CBE523CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t br_update_tables_7_001()
{
  return 1;
}

uint64_t br_update_tables_7_002()
{
  return 1;
}

uint64_t br_update_tables_7_003(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if ((a3 & 1) != 0)
  {
    v8 = 1;
  }
  else if (objc_msgSend(v6, "execute:", CFSTR("ALTER TABLE client_document_access ADD COLUMN modify_access_time integer NOT NULL DEFAULT 0"))&& objc_msgSend(v7, "execute:", CFSTR("UPDATE client_document_access SET modify_access_time = MAX(access_time, IFNULL((SELECT version_mtime FROM client_items AS ci WHERE ci.rowid = item_rowid), 0))"))&& objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_document_access/modify_access_item\" ON client_document_access(modify_access_time)")))
  {
    v8 = objc_msgSend(v7, "execute:", CFSTR("INSERT OR IGNORE INTO client_document_access (item_rowid, evictable, access_time, modify_access_time) SELECT rowid, 0, 0, version_mtime FROM client_items WHERE item_type IN (1, 2, 8)"));
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

BOOL br_update_tables_8_000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[BRCItemID migrateItemIDsToVersion8WithDB:serverTruth:](BRCItemID, "migrateItemIDsToVersion8WithDB:serverTruth:", a2, a3);
}

uint64_t br_update_tables_8_001(uint64_t a1, void *a2, int a3)
{
  id v3;
  int v4;
  int v5;
  unsigned int v6;

  if (!a3)
    return 1;
  v3 = a2;
  v4 = objc_msgSend(v3, "execute:", CFSTR("DROP INDEX IF EXISTS \"server_pending_fetches/record_index\""));
  v5 = v4 & objc_msgSend(v3, "execute:", CFSTR("CREATE INDEX \"server_pending_fetches/record_is_null\" ON server_pending_fetches (zone_rowid) WHERE record IS NULL"));
  v6 = objc_msgSend(v3, "execute:", CFSTR("CREATE INDEX \"server_pending_fetches/record_is_not_null\" ON server_pending_fetches (zone_rowid) WHERE (record >= '')"));

  return v5 & v6;
}

uint64_t br_update_tables_8_002(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if ((a3 & 1) != 0)
  {
    v8 = 1;
  }
  else if (objc_msgSend(v6, "execute:", CFSTR("ALTER TABLE client_document_access ADD COLUMN indexable integer NOT NULL DEFAULT 0"))&& objc_msgSend(v7, "execute:", CFSTR("UPDATE client_document_access SET indexable = 1 WHERE (SELECT item_scope FROM client_items AS ci WHERE ci.rowid = item_rowid) = 2")))
  {
    v8 = objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_document_access/indexable\" ON client_document_access(indexable) WHERE indexable != 0"));
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t br_update_tables_9_000(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if ((a3 & 1) != 0)
  {
    v8 = 1;
  }
  else if (objc_msgSend(v6, "execute:", CFSTR("ALTER TABLE client_document_access RENAME TO client_document_access_tmp"))&& objc_msgSend(v7, "execute:", CFSTR("CREATE TABLE client_document_access( item_rowid integer primary key, access_time integer not null default 0, modify_access_time integer NOT NULL DEFAULT 0, properties integer NOT NULL DEFAULT 0)"))&& objc_msgSend(v7, "execute:", CFSTR("INSERT INTO client_document_access(item_rowid, access_time, modify_access_time, properties) SELECT item_rowid, access_time, modify_access_time, ((case when indexable != 0 then 0x2 else 0 end) | (case when evictable != 0 then 0x1 else 0 end)) FROM client_document_access_tmp"))&& objc_msgSend(v7, "execute:", CFSTR("DROP INDEX \"client_document_access/evictable\""))&& objc_msgSend(v7, "execute:", CFSTR("DROP INDEX \"client_document_access/evictable/item_rowid\""))&& objc_msgSend(v7, "execute:",
                            CFSTR("DROP INDEX \"client_document_access/modify_access_item\""))
         && objc_msgSend(v7, "execute:", CFSTR("DROP INDEX \"client_document_access/indexable\""))
         && objc_msgSend(v7, "execute:", CFSTR("DROP TABLE client_document_access_tmp"))
         && objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_document_access/evictable\" ON client_document_access (properties) WHERE ((properties & 0x1) != 0)"))&& objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_document_access/evictable/item_rowid\" ON client_document_access (item_rowid);"))
         && objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_document_access/modify_access_item\" ON client_document_access(modify_access_time);")))
  {
    v8 = objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_document_access/indexable\" ON client_document_access(properties) WHERE ((properties & 0x2) != 0)"));
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t br_update_tables_9_001(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if ((a3 & 1) != 0)
  {
    v8 = 1;
  }
  else if (objc_msgSend(v6, "execute:", CFSTR("DROP INDEX \"client_items/doc_sync_state\"")))
  {
    v8 = objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_items/doc_sync_state\" ON client_items (zone_rowid, item_localsyncupstate) WHERE item_type IN (1, 6)"));
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t br_update_tables_9_002(uint64_t a1, void *a2, char a3)
{
  if ((a3 & 1) != 0)
    return 1;
  else
    return objc_msgSend(a2, "execute:", CFSTR("CREATE INDEX \"client_document_access/access_item\" ON client_document_access(access_time);"));
}

uint64_t br_update_tables_9_003()
{
  return 1;
}

uint64_t br_update_tables_9_004(uint64_t a1, void *a2, char a3)
{
  id v4;
  int v5;
  unsigned int v6;

  if ((a3 & 1) != 0)
    return 1;
  v4 = a2;
  v5 = objc_msgSend(v4, "execute:", CFSTR("CREATE TRIGGER IF NOT EXISTS \"client_items/update_app_library\" AFTER UPDATE OF app_library_rowid ON client_items WHEN new.app_library_rowid <> old.app_library_rowid BEGIN  UPDATE app_libraries SET auto_client_item_count = auto_client_item_count - 1 WHERE rowid = old.app_library_rowid AND old.item_type != 4 AND old.item_type != 3;  UPDATE app_libraries SET auto_aggregate_size = auto_aggregate_size - COALESCE(old.version_size, 0), auto_document_count = auto_document_count - 1      WHERE rowid = old.app_library_rowid AND old.item_type = 1 AND old.item_state != 1;  UPDATE app_libraries SET auto_document_with_local_changes_count = auto_document_with_local_changes_count - 1 WHERE rowid = old.app_library_rowid AND old.item_type = 1 AND old.item_localsyncupstate >= 2;  UPDATE app_libraries SET auto_client_item_count = auto_client_item_count + 1 WHERE rowid = new.app_library_rowid AND new.item_type != 4 AND new.item_type != 3;  UPDATE app_libraries SET auto_aggregate_size = auto_aggregate_size + COALESCE(new.version_size, 0), auto_document_count = auto_document_count + 1      WHERE rowid = new.app_library_rowid AND new.item_type = 1 AND new.item_state != 1;  UPDATE app_libraries SET auto_document_with_local_changes_count = auto_document_with_local_changes_count + 1 WHERE rowid = new.app_library_rowid AND new.item_type = 1 AND new.item_localsyncupstate >= 2; END"));
  v6 = objc_msgSend(v4, "execute:", CFSTR("UPDATE app_libraries SET auto_client_item_count=(SELECT COUNT(*) FROM client_items WHERE app_library_rowid = app_libraries.rowid AND item_type != 4 AND item_type != 3), auto_document_count=(SELECT COUNT(*) FROM client_items WHERE app_library_rowid = app_libraries.rowid AND item_type = 1 AND item_state != 1), auto_aggregate_size=(SELECT COALESCE(SUM(version_size), 0) FROM client_items WHERE app_libraries.rowid = app_library_rowid AND item_type = 1 AND item_state != 1), auto_document_with_local_changes_count=(SELECT COUNT(*) FROM client_items WHERE app_library_rowid = app_libraries.rowid AND item_type = 1 AND item_localsyncupstate >= 2)"));

  return v5 & v6;
}

uint64_t br_update_tables_10_000(void *a1, void *a2, char a3)
{
  id v5;
  void *v6;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  BRCRelativePath *v18;
  void *v19;
  NSObject *v20;
  void *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  BRCRelativePath *v27;
  void *v28;
  NSObject *v29;
  NSObject *v30;
  void *v31;
  NSObject *v32;
  void *v33;
  BRCRelativePath *v34;
  void *v35;
  void *v36;
  NSObject *v37;
  int v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  void *v45;
  NSObject *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  uint64_t v50;
  void *v51;
  NSObject *v52;
  void *v53;
  NSObject *v54;
  NSObject *v55;
  BRCRelativePath *v56;
  BRCRelativePath *v57;
  void *v58;
  void *v59;
  NSObject *v60;
  void *v61;
  void *v62;
  BRCItemID_v9 *v63;
  void *v64;
  uint64_t v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  uint64_t v71;
  void *v72;
  void *v73;
  void *v74;
  int v75;
  int v76;
  id v77;
  void *v78;
  void *v79;
  uint64_t v80;
  void *v81;
  void *v82;
  void *v83;
  int v84;
  int v85;
  void *v86;
  NSObject *v87;
  BRCRelativePath *v88;
  NSObject *v89;
  BRCRelativePath *v90;
  NSObject *v91;
  void *v92;
  NSObject *v93;
  NSObject *v94;
  void *v95;
  id obj;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  void *context;
  int v106;
  void *v107;
  BRCRelativePath *v108;
  void *v109;
  void *v110;
  id v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  id v116;
  void *v117;
  void *v118;
  _QWORD v119[4];
  BRCRelativePath *v120;
  BRCRelativePath *v121;
  id v122;
  _BYTE *v123;
  char v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  int v129;
  uint8_t v130[4];
  BRCRelativePath *v131;
  __int16 v132;
  BRCRelativePath *v133;
  __int16 v134;
  void *v135;
  _BYTE buf[32];
  void (*v137)(uint64_t);
  id v138;
  _BYTE v139[128];
  uint64_t v140;

  v140 = *MEMORY[0x1E0C80C00];
  v111 = a1;
  v5 = a2;
  v6 = v5;
  v129 = 0;
  if ((a3 & 1) != 0)
    goto LABEL_2;
  v8 = objc_msgSend(v5, "execute:", CFSTR("CREATE TABLE client_sync_up(throttle_id integer not null, zone_rowid integer not null, throttle_state integer not null, in_flight_diffs integer, retry_count integer not null default 0, last_try_stamp integer not null default 0, next_retry_stamp integer not null default 0, expire_stamp integer not null default 0, UNIQUE(throttle_id, zone_rowid))"));
  v9 = objc_msgSend(v6, "execute:", CFSTR("ALTER TABLE client_items  ADD COLUMN item_parent_zone_rowid integer"));
  v10 = objc_msgSend(v6, "execute:", CFSTR("INSERT OR IGNORE INTO client_sync_up( throttle_id, zone_rowid, throttle_state, in_flight_diffs) SELECT  rowid, zone_rowid, 1, item_in_flight_diffs FROM client_items WHERE  item_localsyncupstate = 4"));
  v11 = objc_msgSend(v6, "execute:", CFSTR("UPDATE client_items SET item_parent_zone_rowid = zone_rowid"));
  LOBYTE(v106) = 0;
  if (v8 && v9 && v10 && v11)
  {
    if (!v111 || !+[BRCDaemon isDaemonRunning](BRCDaemon, "isDaemonRunning"))
    {
LABEL_2:
      LOBYTE(v106) = 1;
      goto LABEL_3;
    }
    v118 = v6;
    objc_msgSend(v111, "dirPathForSyncedFolderType:", 1);
    v95 = (void *)objc_claimAutoreleasedReturnValue();
    v108 = -[BRCRelativePath initWithRootPath:session:]([BRCRelativePath alloc], "initWithRootPath:session:", v95, v111);
    if (-[BRCRelativePath resolveAndKeepOpenMustExist:error:](v108, "resolveAndKeepOpenMustExist:error:", 1, &v129))
    {
      if (v108)
      {
        v127 = 0u;
        v128 = 0u;
        v125 = 0u;
        v126 = 0u;
        objc_msgSend(v111, "_sharedClientZonesEnumerator");
        obj = (id)objc_claimAutoreleasedReturnValue();
        v98 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v125, v139, 16);
        if (v98)
        {
          v106 = 1;
          v97 = *(_QWORD *)v126;
          v102 = *MEMORY[0x1E0D10DF8];
          v103 = *MEMORY[0x1E0D10DB0];
          v100 = *MEMORY[0x1E0D10D98];
          v101 = *MEMORY[0x1E0D10DB8];
          while (1)
          {
            v12 = 0;
            do
            {
              if (*(_QWORD *)v126 != v97)
              {
                v13 = v12;
                objc_enumerationMutation(obj);
                v12 = v13;
              }
              v99 = v12;
              v107 = *(void **)(*((_QWORD *)&v125 + 1) + 8 * v12);
              objc_msgSend(v107, "dbRowID");
              v14 = (void *)objc_claimAutoreleasedReturnValue();
              v117 = (void *)objc_msgSend(v118, "fetch:", CFSTR("SELECT rowid, item_id, item_file_id, item_filename, item_type FROM client_items WHERE zone_rowid = %@"), v14);

              if (objc_msgSend(v117, "next"))
              {
                do
                {
                  context = (void *)MEMORY[0x1D17A6BE8]();
                  objc_msgSend(v117, "numberAtIndex:", 0);
                  v115 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v117, "objectOfClass:atIndex:", objc_opt_class(), 1);
                  v114 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v117, "numberAtIndex:", 2);
                  v109 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v117, "stringAtIndex:", 3);
                  v113 = (void *)objc_claimAutoreleasedReturnValue();
                  v104 = objc_msgSend(v117, "longAtIndex:", 4);
                  v15 = (void *)MEMORY[0x1E0CB3940];
                  objc_msgSend(v114, "itemIDString");
                  v16 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v107, "mangledID");
                  v17 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v15, "unsaltedBookmarkDataWithItemResolutionString:serverZoneMangledID:", v16, v17);
                  v112 = (void *)objc_claimAutoreleasedReturnValue();

                  v18 = -[BRCRelativePath initWithFileID:root:session:]([BRCRelativePath alloc], "initWithFileID:root:session:", objc_msgSend(v109, "unsignedLongLongValue"), v108, v111);
                  if (-[BRCRelativePath resolveAndKeepOpenMustExist:error:](v18, "resolveAndKeepOpenMustExist:error:", 1, &v129))
                  {
                    brc_bread_crumbs();
                    v19 = (void *)objc_claimAutoreleasedReturnValue();
                    brc_default_log();
                    v20 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)buf = 138412546;
                      *(_QWORD *)&buf[4] = v18;
                      *(_WORD *)&buf[12] = 2112;
                      *(_QWORD *)&buf[14] = v19;
                      _os_log_debug_impl(&dword_1CBD43000, v20, OS_LOG_TYPE_DEBUG, "[DEBUG] found one shared doc by ID: %@%@", buf, 0x16u);
                    }

                    if (v18)
                    {
                      v110 = 0;
                      goto LABEL_31;
                    }
                  }
                  else
                  {
                    brc_bread_crumbs();
                    v21 = (void *)objc_claimAutoreleasedReturnValue();
                    brc_default_log();
                    v22 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = 138412802;
                      *(_QWORD *)&buf[4] = v18;
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&buf[14] = v129;
                      *(_WORD *)&buf[18] = 2112;
                      *(_QWORD *)&buf[20] = v21;
                      _os_log_impl(&dword_1CBD43000, v22, OS_LOG_TYPE_DEFAULT, "[WARNING] can't find relpath by ID: %@ %{errno}d%@", buf, 0x1Cu);
                    }

                  }
                  v23 = (void *)MEMORY[0x1E0CB3940];
                  objc_msgSend(v107, "mangledID");
                  v24 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v24, "mangledIDString");
                  v25 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v114, "itemIDString");
                  v26 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v23, "stringWithFormat:", CFSTR("%@/%@/%@/%@"), v102, v25, v26, v113);
                  v110 = (void *)objc_claimAutoreleasedReturnValue();

                  -[BRCRelativePath pathWithChildAtPath:](v108, "pathWithChildAtPath:", v110);
                  v27 = (BRCRelativePath *)objc_claimAutoreleasedReturnValue();
                  if (!-[BRCRelativePath resolveAndKeepOpenMustExist:error:](v27, "resolveAndKeepOpenMustExist:error:", 1, &v129))
                  {
                    brc_bread_crumbs();
                    v33 = (void *)objc_claimAutoreleasedReturnValue();
                    brc_default_log();
                    v30 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v30, (os_log_type_t)0x90u))
                    {
                      *(_DWORD *)buf = 138413314;
                      *(_QWORD *)&buf[4] = v27;
                      *(_WORD *)&buf[12] = 2112;
                      *(_QWORD *)&buf[14] = v110;
                      *(_WORD *)&buf[22] = 2112;
                      *(_QWORD *)&buf[24] = v113;
                      LOWORD(v137) = 1024;
                      *(_DWORD *)((char *)&v137 + 2) = v129;
                      HIWORD(v137) = 2112;
                      v138 = v33;
                      _os_log_error_impl(&dword_1CBD43000, v30, (os_log_type_t)0x90u, "[ERROR] can't find relpath %@ by parent %@ and name: %@ %{errno}d%@", buf, 0x30u);
                    }
                    v38 = 0;
                    v18 = 0;
                    v116 = 0;
                    v35 = 0;
                    v34 = 0;
                    goto LABEL_68;
                  }
                  brc_bread_crumbs();
                  v28 = (void *)objc_claimAutoreleasedReturnValue();
                  brc_default_log();
                  v29 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 138412546;
                    *(_QWORD *)&buf[4] = v27;
                    *(_WORD *)&buf[12] = 2112;
                    *(_QWORD *)&buf[14] = v28;
                    _os_log_debug_impl(&dword_1CBD43000, v29, OS_LOG_TYPE_DEBUG, "[DEBUG] found one shared doc by parent and name: %@%@", buf, 0x16u);
                  }

                  if (!v27)
                  {
                    v38 = 0;
                    v18 = 0;
                    v116 = 0;
                    v35 = 0;
                    v34 = 0;
                    goto LABEL_69;
                  }
                  v18 = v27;
LABEL_31:
                  v30 = objc_msgSend(v118, "fetch:", CFSTR("SELECT item_parent_id, zone_rowid FROM client_items WHERE  item_filename = %@ AND item_type = 3 AND item_state in (0, -1)"), v112);
                  if (!-[NSObject next](v30, "next"))
                  {
                    v35 = 0;
                    v116 = 0;
                    v27 = 0;
                    goto LABEL_46;
                  }
                  -[NSObject objectOfClass:atIndex:](v30, "objectOfClass:atIndex:", objc_opt_class(), 0);
                  v116 = (id)objc_claimAutoreleasedReturnValue();
                  -[NSObject numberAtIndex:](v30, "numberAtIndex:", 1);
                  v27 = (BRCRelativePath *)objc_claimAutoreleasedReturnValue();
                  brc_bread_crumbs();
                  v31 = (void *)objc_claimAutoreleasedReturnValue();
                  brc_default_log();
                  v32 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 138412802;
                    *(_QWORD *)&buf[4] = v116;
                    *(_WORD *)&buf[12] = 2112;
                    *(_QWORD *)&buf[14] = v27;
                    *(_WORD *)&buf[22] = 2112;
                    *(_QWORD *)&buf[24] = v31;
                    _os_log_debug_impl(&dword_1CBD43000, v32, OS_LOG_TYPE_DEBUG, "[DEBUG] Found alias item parent: %@ in zone: %@%@", buf, 0x20u);
                  }

                  if (!v116)
                  {
                    v35 = 0;
                    v116 = 0;
LABEL_46:
                    v33 = 0;
LABEL_47:
                    objc_msgSend(v107, "zoneName");
                    v39 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v111, "_privateClientZoneByName:db:", v39, v118);
                    v40 = (void *)objc_claimAutoreleasedReturnValue();

                    if (v40)
                    {
                      v41 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D10E88]), "initWithAppLibraryName:", v39);
                      objc_msgSend(v41, "mangledIDString");
                      v42 = (void *)objc_claimAutoreleasedReturnValue();

                      if ((objc_msgSend(v39, "isEqualToString:", v103) & 1) != 0)
                      {
                        v43 = v42;
                      }
                      else
                      {
                        objc_msgSend(v42, "stringByAppendingFormat:", CFSTR("/%@"), v100);
                        v44 = objc_claimAutoreleasedReturnValue();

                        v43 = (void *)v44;
                      }
                      v110 = v43;
                      -[BRCRelativePath pathWithChildAtPath:](v108, "pathWithChildAtPath:");
                      v34 = (BRCRelativePath *)objc_claimAutoreleasedReturnValue();
                      if (-[BRCRelativePath resolveAndKeepOpenMustExist:error:](v34, "resolveAndKeepOpenMustExist:error:", 1, &v129))
                      {
                        brc_bread_crumbs();
                        v45 = (void *)objc_claimAutoreleasedReturnValue();
                        brc_default_log();
                        v46 = objc_claimAutoreleasedReturnValue();
                        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)buf = 138412546;
                          *(_QWORD *)&buf[4] = v34;
                          *(_WORD *)&buf[12] = 2112;
                          *(_QWORD *)&buf[14] = v45;
                          _os_log_debug_impl(&dword_1CBD43000, v46, OS_LOG_TYPE_DEBUG, "[DEBUG] Found a usable parent path of our server item: %@%@", buf, 0x16u);
                        }

                        v47 = -[BRCRelativePath fileID](v34, "fileID");
                        objc_msgSend(v40, "dbRowID");
                        v48 = (void *)objc_claimAutoreleasedReturnValue();
                        v49 = (void *)objc_msgSend(v118, "fetch:", CFSTR("SELECT item_id FROM client_items WHERE item_file_id = %lld AND zone_rowid = %@"), v47, v48);

                        if (objc_msgSend(v49, "next"))
                        {
                          objc_msgSend(v49, "objectOfClass:atIndex:", objc_opt_class(), 0);
                          v50 = objc_claimAutoreleasedReturnValue();
                        }
                        else
                        {
                          v50 = 0;
                        }

                        if (v34)
                        {
                          v38 = 1;
                          v116 = (id)v50;
                          v35 = v40;
                          goto LABEL_68;
                        }
                        v116 = (id)v50;
                        goto LABEL_60;
                      }
                      brc_bread_crumbs();
                      v51 = (void *)objc_claimAutoreleasedReturnValue();
                      brc_default_log();
                      v52 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)buf = 138412802;
                        *(_QWORD *)&buf[4] = v34;
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&buf[14] = v129;
                        *(_WORD *)&buf[18] = 2112;
                        *(_QWORD *)&buf[20] = v51;
                        _os_log_debug_impl(&dword_1CBD43000, v52, OS_LOG_TYPE_DEBUG, "[DEBUG] can't resolve: %@ %{errno}d%@", buf, 0x1Cu);
                      }

                    }
LABEL_60:
                    objc_msgSend(v111, "_privateClientZoneByName:db:", v103, v118);
                    v35 = (void *)objc_claimAutoreleasedReturnValue();

                    -[BRCRelativePath pathWithChildAtPath:](v108, "pathWithChildAtPath:", v101);
                    v34 = (BRCRelativePath *)objc_claimAutoreleasedReturnValue();
                    if (-[BRCRelativePath resolveAndKeepOpenMustExist:error:](v34, "resolveAndKeepOpenMustExist:error:", 1, &v129))
                    {
                      brc_bread_crumbs();
                      v53 = (void *)objc_claimAutoreleasedReturnValue();
                      brc_default_log();
                      v54 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)buf = 138412546;
                        *(_QWORD *)&buf[4] = v34;
                        *(_WORD *)&buf[12] = 2112;
                        *(_QWORD *)&buf[14] = v53;
                        _os_log_debug_impl(&dword_1CBD43000, v54, OS_LOG_TYPE_DEBUG, "[DEBUG] Found a usable parent path of our server item: %@%@", buf, 0x16u);
                      }
                    }
                    else
                    {
                      brc_bread_crumbs();
                      v54 = objc_claimAutoreleasedReturnValue();
                      brc_default_log();
                      v55 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)buf = 138412802;
                        *(_QWORD *)&buf[4] = v34;
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&buf[14] = v129;
                        *(_WORD *)&buf[18] = 2112;
                        *(_QWORD *)&buf[20] = v54;
                        _os_log_impl(&dword_1CBD43000, v55, OS_LOG_TYPE_DEFAULT, "[WARNING] can't resolve the root of iCloud Drive: %@ %{errno}d%@", buf, 0x1Cu);
                      }

                      v53 = v34;
                      v34 = 0;
                    }

                    goto LABEL_67;
                  }
                  v33 = (void *)objc_msgSend(v118, "numberWithSQL:", CFSTR("SELECT item_file_id FROM client_items WHERE  item_id = %@ AND zone_rowid = %@"), v116, v27);
                  if (!v33)
                  {
                    v35 = 0;
                    goto LABEL_47;
                  }
                  v34 = -[BRCRelativePath initWithFileID:root:session:]([BRCRelativePath alloc], "initWithFileID:root:session:", objc_msgSend(v33, "unsignedLongLongValue"), v108, v111);
                  objc_msgSend(v111, "_privateClientZoneByID:db:", v27, v118);
                  v35 = (void *)objc_claimAutoreleasedReturnValue();
                  if (v35)
                  {
                    if (!-[BRCRelativePath resolveAndKeepOpenMustExist:error:](v34, "resolveAndKeepOpenMustExist:error:", 1, &v129))
                    {
                      brc_bread_crumbs();
                      v86 = (void *)objc_claimAutoreleasedReturnValue();
                      brc_default_log();
                      v87 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)buf = 138412802;
                        *(_QWORD *)&buf[4] = v34;
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&buf[14] = v129;
                        *(_WORD *)&buf[18] = 2112;
                        *(_QWORD *)&buf[20] = v86;
                        _os_log_impl(&dword_1CBD43000, v87, OS_LOG_TYPE_DEFAULT, "[WARNING] can't find dst by ID: %@ %{errno}d%@", buf, 0x1Cu);
                      }

                      goto LABEL_47;
                    }
                    brc_bread_crumbs();
                    v36 = (void *)objc_claimAutoreleasedReturnValue();
                    brc_default_log();
                    v37 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)buf = 138412546;
                      *(_QWORD *)&buf[4] = v34;
                      *(_WORD *)&buf[12] = 2112;
                      *(_QWORD *)&buf[14] = v36;
                      _os_log_debug_impl(&dword_1CBD43000, v37, OS_LOG_TYPE_DEBUG, "[DEBUG] Found a usable parent path of our server item: %@%@", buf, 0x16u);
                    }
                  }
                  else
                  {
                    brc_bread_crumbs();
                    v36 = (void *)objc_claimAutoreleasedReturnValue();
                    brc_default_log();
                    v37 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v37, OS_LOG_TYPE_FAULT))
                    {
                      *(_DWORD *)buf = 138412546;
                      *(_QWORD *)&buf[4] = v27;
                      *(_WORD *)&buf[12] = 2112;
                      *(_QWORD *)&buf[14] = v36;
                      _os_log_fault_impl(&dword_1CBD43000, v37, OS_LOG_TYPE_FAULT, "[CRIT] UNREACHABLE: no destination zone for %@%@", buf, 0x16u);
                    }
                  }

                  if (!v34)
                    goto LABEL_47;
LABEL_67:
                  v38 = 1;
LABEL_68:

LABEL_69:
                  *(_QWORD *)buf = 0;
                  *(_QWORD *)&buf[8] = buf;
                  *(_QWORD *)&buf[16] = 0x3032000000;
                  *(_QWORD *)&buf[24] = __Block_byref_object_copy__24;
                  v137 = __Block_byref_object_dispose__24;
                  v138 = 0;
                  if (v38 && v34)
                  {
                    v119[0] = MEMORY[0x1E0C809B0];
                    v119[1] = 3221225472;
                    v119[2] = __br_update_tables_10_000_block_invoke;
                    v119[3] = &unk_1E87627B8;
                    v56 = v34;
                    v120 = v56;
                    v57 = v18;
                    v121 = v57;
                    v123 = buf;
                    v122 = v113;
                    v124 = v104;
                    if (!-[BRCRelativePath performOnOpenParentFileDescriptor:error:](v57, "performOnOpenParentFileDescriptor:error:", v119, 0))
                    {
                      v58 = *(void **)(*(_QWORD *)&buf[8] + 40);
                      *(_QWORD *)(*(_QWORD *)&buf[8] + 40) = 0;

                      brc_bread_crumbs();
                      v59 = (void *)objc_claimAutoreleasedReturnValue();
                      brc_default_log();
                      v60 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)v130 = 138412802;
                        v131 = v57;
                        v132 = 2112;
                        v133 = v56;
                        v134 = 2112;
                        v135 = v59;
                        _os_log_impl(&dword_1CBD43000, v60, OS_LOG_TYPE_DEFAULT, "[WARNING] can't bounce %@ to %@%@", v130, 0x20u);
                      }

                    }
                  }
                  if (!v35)
                  {
                    objc_msgSend(v111, "_privateClientZoneByName:db:", v103, v118);
                    v35 = (void *)objc_claimAutoreleasedReturnValue();
                    if (!v35)
                    {
                      brc_bread_crumbs();
                      v90 = (BRCRelativePath *)objc_claimAutoreleasedReturnValue();
                      brc_default_log();
                      v91 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v91, OS_LOG_TYPE_FAULT))
                      {
                        *(_DWORD *)v130 = 138412290;
                        v131 = v90;
                        _os_log_fault_impl(&dword_1CBD43000, v91, OS_LOG_TYPE_FAULT, "[CRIT] Assertion failed: dstZone%@", v130, 0xCu);
                      }

                      v35 = 0;
                    }
                  }
                  objc_msgSend(v35, "zoneName");
                  v61 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v111, "_old_privateAppLibraryByZoneName:db:", v61, v118);
                  v62 = (void *)objc_claimAutoreleasedReturnValue();

                  if (!v62)
                  {
                    brc_bread_crumbs();
                    v88 = (BRCRelativePath *)objc_claimAutoreleasedReturnValue();
                    brc_default_log();
                    v89 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v89, OS_LOG_TYPE_FAULT))
                    {
                      *(_DWORD *)v130 = 138412290;
                      v131 = v88;
                      _os_log_fault_impl(&dword_1CBD43000, v89, OS_LOG_TYPE_FAULT, "[CRIT] Assertion failed: dstAppLibrary%@", v130, 0xCu);
                    }

                  }
                  if (!v116)
                  {
                    v63 = [BRCItemID_v9 alloc];
                    objc_msgSend(v62, "dbRowID");
                    v64 = (void *)objc_claimAutoreleasedReturnValue();
                    v116 = -[BRCItemID_v9 _initAsLibraryRootWithAppLibraryRowID:enclosureUUID:](v63, "_initAsLibraryRootWithAppLibraryRowID:enclosureUUID:", v64, 0);

                  }
                  if (!*(_QWORD *)(*(_QWORD *)&buf[8] + 40))
                    goto LABEL_85;
                  v65 = objc_opt_class();
                  objc_msgSend(v35, "dbRowID");
                  v66 = (void *)objc_claimAutoreleasedReturnValue();
                  v67 = (void *)objc_msgSend(v118, "fetchObjectOfClass:sql:", v65, CFSTR("SELECT 1 from client_items  WHERE item_parent_zone_rowid = %@    AND item_parent_id = %@    AND IFNULL(item_localname, item_filename) = %@"), v66, v116, *(_QWORD *)(*(_QWORD *)&buf[8] + 40));

                  if (objc_msgSend(v67, "BOOLValue"))
                  {
                    v68 = *(void **)(*(_QWORD *)&buf[8] + 40);
                    *(_QWORD *)(*(_QWORD *)&buf[8] + 40) = 0;

                  }
                  if (!*(_QWORD *)(*(_QWORD *)&buf[8] + 40))
                  {
LABEL_85:
                    objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
                    v69 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v69, "UUIDString");
                    v70 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v113, "brc_representableHFSFileNameWithSuffix:addedExtension:makeDotFile:", v70, 0, 0);
                    v71 = objc_claimAutoreleasedReturnValue();
                    v72 = *(void **)(*(_QWORD *)&buf[8] + 40);
                    *(_QWORD *)(*(_QWORD *)&buf[8] + 40) = v71;

                  }
                  objc_msgSend(v35, "dbRowID");
                  v73 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v62, "dbRowID");
                  v74 = (void *)objc_claimAutoreleasedReturnValue();
                  v75 = objc_msgSend(v118, "execute:", CFSTR("UPDATE client_items SET  item_parent_zone_rowid = %@,  item_parent_id = %@,  app_library_rowid = %@,  item_localname = %@ WHERE  rowid = %@"), v73, v116, v74, *(_QWORD *)(*(_QWORD *)&buf[8] + 40), v115);

                  v76 = v106 & v75 & objc_msgSend(v118, "execute:", CFSTR("UPDATE client_items SET  item_state = -1 WHERE  rowid = %@ AND item_state = 0"), v115);
                  if (objc_msgSend(v118, "changes"))
                  {
                    v77 = v62;
                    objc_msgSend(v77, "plist");
                    v78 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v78, "objectForKeyedSubscript:", CFSTR("state"));
                    v79 = (void *)objc_claimAutoreleasedReturnValue();
                    v80 = objc_msgSend(v79, "unsignedLongLongValue");

                    if ((v80 & 4) == 0)
                    {
                      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v80 | 4);
                      v81 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v78, "setObject:forKeyedSubscript:", v81, CFSTR("state"));

                      objc_msgSend(v77, "zoneRowID");
                      v82 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v77, "dbRowID");
                      v83 = (void *)objc_claimAutoreleasedReturnValue();
                      v84 = objc_msgSend(v118, "execute:", CFSTR("UPDATE app_libraries SET app_library_plist = %@, zone_rowid = %@ WHERE rowid = %@"), v78, v82, v83);

                      v76 &= v84;
                    }

                  }
                  v85 = objc_msgSend(v118, "execute:", CFSTR("DELETE FROM client_items WHERE  item_filename = %@ AND  item_type = 3"), v112);
                  -[BRCRelativePath close](v34, "close");
                  -[BRCRelativePath close](v18, "close");

                  _Block_object_dispose(buf, 8);
                  objc_autoreleasePoolPop(context);
                  v106 = v76 & v85;
                }
                while ((objc_msgSend(v117, "next") & 1) != 0);
              }

              v12 = v99 + 1;
            }
            while (v99 + 1 != v98);
            v98 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v125, v139, 16);
            if (!v98)
              goto LABEL_120;
          }
        }
        LOBYTE(v106) = 1;
LABEL_120:

        -[BRCRelativePath close](v108, "close");
LABEL_121:

        v6 = v118;
        goto LABEL_3;
      }
    }
    else
    {
      brc_bread_crumbs();
      v92 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v93 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412802;
        *(_QWORD *)&buf[4] = v108;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v129;
        *(_WORD *)&buf[18] = 2112;
        *(_QWORD *)&buf[20] = v92;
        _os_log_impl(&dword_1CBD43000, v93, OS_LOG_TYPE_DEFAULT, "[WARNING] can't open root: %@ %{errno}d%@", buf, 0x1Cu);
      }

    }
    brc_bread_crumbs();
    v108 = (BRCRelativePath *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v94 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v94, OS_LOG_TYPE_FAULT))
      br_update_tables_10_000_cold_1();

    LOBYTE(v106) = 0;
    goto LABEL_121;
  }
LABEL_3:

  return v106 & 1;
}

void sub_1CBE53CA0(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x200], 8);
  _Unwind_Resume(a1);
}

uint64_t br_update_tables_11_000(void *a1, void *a2, int a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (!a3)
  {
    if (objc_msgSend(v6, "execute:", CFSTR("ALTER TABLE app_libraries RENAME TO app_libraries_old"))
      && objc_msgSend(v7, "execute:", CFSTR("CREATE TABLE app_libraries(rowid integer PRIMARY KEY , app_library_plist blob , app_library_name text unique default null , zone_rowid integer default 0 , auto_client_item_count integer default 0 , auto_document_count INTEGER DEFAULT 0 , auto_document_with_local_changes_count INTEGER DEFAULT 0 , auto_aggregate_size INTEGER DEFAULT 0)"))&& objc_msgSend(v7, "execute:", CFSTR("INSERT INTO app_libraries  (rowid, app_library_plist, app_library_name, zone_rowid, auto_client_item_count, auto_document_count, auto_document_with_local_changes_count, auto_aggregate_size) SELECT rowid, app_library_plist, app_library_name, zone_rowid, auto_client_item_count, auto_document_count, auto_document_with_local_changes_count, auto_aggregate_size   FROM app_libraries_old WHERE app_library_owner = %@ OR app_library_owner IS NULL"), *MEMORY[0x1E0C94730])&& objc_msgSend(v7, "execute:", CFSTR("DROP TABLE app_libraries_old")))
    {
      v9 = 0;
      if (!+[BRCItemID migrateItemIDsToVersion11WithDB:serverTruth:](BRCItemID, "migrateItemIDsToVersion11WithDB:serverTruth:", v7, 0))goto LABEL_49;
      if (objc_msgSend(v7, "execute:", CFSTR("ALTER TABLE mark_children_lost_progress RENAME TO mark_children_lost_progress_old"))&& objc_msgSend(v7, "execute:", CFSTR("CREATE TABLE mark_children_lost_progress (zone_rowid INTEGER NOT NULL , item_parent_id BLOB NOT NULL , last_updated_row_id INTEGER NOT NULL , item_parent_file_id INTEGER , app_library_rowid INTEGER NOT NULL , PRIMARY KEY(zone_rowid, item_parent_id))"))&& objc_msgSend(v7, "execute:", CFSTR("INSERT INTO mark_children_lost_progress (zone_rowid, item_parent_id, last_updated_row_id, item_parent_file_id, app_library_rowid) SELECT o.zone_rowid, o.item_parent_id, o.last_updated_row_id, o.item_parent_file_id, c.app_library_rowid   FROM mark_children_lost_progress_old AS o INNER JOIN client_items AS c     ON o.zone_rowid = c.zone_rowid AND o.item_parent_id = c.item_id"))&& objc_msgSend(v7, "execute:", CFSTR("DROP TABLE mark_children_lost_progress_old"))&& objc_msgSend(v7, "execute:", CFSTR("ALTER TABLE client_downloads RENAME TO client_downloads_old"))&& objc_msgSend(v7, "execute:",
                           CFSTR("CREATE TABLE client_downloads(throttle_id integer not null, zone_rowid integer not null, app_library_rowid integer not null, throttle_state integer not null, retry_count integer not null default 0, last_try_stamp integer not null default 0, next_retry_stamp integer not null default 0, expire_stamp integer not null default 0, transfer_queue blob not null, transfer_size integer not null, transfer_record blob, transfer_stage blob, transfer_operation blob, download_kind integer not null, download_etag blob not null, download_priority integer not null, download_request_stamp integer not null, download_error blob, unit_count_completed INTEGER DEFAULT 0, UNIQUE(transfer_stage), UNIQUE(throttle_id, download_kind, download_etag))"))
        && objc_msgSend(v7, "execute:", CFSTR("INSERT INTO client_downloads (throttle_id, zone_rowid, app_library_rowid, throttle_state, retry_count, last_try_stamp, next_retry_stamp, expire_stamp, transfer_queue, transfer_size, transfer_record, transfer_stage, transfer_operation, download_kind, download_etag, download_priority, download_request_stamp, download_error, unit_count_completed) SELECT throttle_id, zone_rowid, app_library_rowid, throttle_state, retry_count, last_try_stamp, next_retry_stamp, expire_stamp, transfer_queue, transfer_size, transfer_record, transfer_stage, transfer_operation, download_kind, download_etag, download_priority, download_request_stamp, download_error, unit_count_completed FROM client_downloads_old"))&& objc_msgSend(v7, "execute:", CFSTR("DROP TABLE client_downloads_old"))&& objc_msgSend(v7, "execute:", CFSTR("ALTER TABLE client_uploads RENAME TO client_uploads_old"))&& objc_msgSend(v7, "execute:", CFSTR("CREATE TABLE client_uploads(throttle_id integer primary key, zone_rowid integer not null, app_library_rowid integer not null, throttle_state integer not null, retry_count integer not null default 0, last_try_stamp integer not null default 0, next_retry_stamp integer not null default 0, expire_stamp integer not null default 0, transfer_queue blob not null, transfer_size integer not null, transfer_record blob, transfer_stage blob, transfer_operation blob, upload_error blob, upload_priority integer DEFAULT 0, upload_request_stamp integer DEFAULT 0, UNIQUE(transfer_stage))"))&& objc_msgSend(v7, "execute:", CFSTR("INSERT INTO client_uploads (throttle_id, zone_rowid, app_library_rowid, throttle_state, retry_count, last_try_stamp, next_retry_stamp, expire_stamp, transfer_queue, transfer_size, transfer_record, transfer_stage, transfer_operation, upload_error, upload_priority, upload_request_stamp) SELECT throttle_id, zone_rowid, app_library_rowid, throttle_state, retry_count, last_try_stamp, next_retry_stamp, expire_stamp, transfer_queue, transfer_size, transfer_record, transfer_stage, transfer_operation, upload_error, upload_priority, upload_request_stamp FROM client_uploads_old"))&& objc_msgSend(v7, "execute:", CFSTR("DROP TABLE client_uploads_old"))&& objc_msgSend(v7, "execute:", CFSTR("ALTER TABLE client_unapplied_table RENAME TO client_unapplied_table_old"))&& objc_msgSend(
                           v7,
                           "execute:",
                           CFSTR("CREATE TABLE client_unapplied_table(throttle_id integer primary key, zone_rowid integer not null, throttle_state integer not null, retry_count integer not null default 0, last_try_stamp integer not null default 0, next_retry_stamp integer not null default 0, expire_stamp integer not null default 0, apply_kind integer not null)"))
        && objc_msgSend(v7, "execute:", CFSTR("INSERT INTO client_unapplied_table (throttle_id, zone_rowid, throttle_state, retry_count, last_try_stamp, next_retry_stamp, expire_stamp, apply_kind) SELECT throttle_id, zone_rowid, throttle_state, retry_count, last_try_stamp, next_retry_stamp, expire_stamp, apply_kind FROM client_unapplied_table_old"))&& objc_msgSend(v7, "execute:", CFSTR("DROP TABLE client_unapplied_table_old"))&& objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_downloads/scheduling_by_priority\" ON client_downloads (throttle_state, transfer_queue, transfer_operation, download_priority DESC, download_request_stamp DESC) WHERE throttle_state = 1"))&& objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_downloads/scheduling_by_priority_and_kind\" ON client_downloads (throttle_state, transfer_queue, transfer_operation, download_kind, download_priority DESC, download_request_stamp DESC) WHERE throttle_state = 1"))&& objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_downloads/scheduling_by_stamp\" ON client_downloads (throttle_state, transfer_queue, transfer_operation, next_retry_stamp ASC)  WHERE throttle_state = 1"))&& objc_msgSend(v7, "execute:",
                           CFSTR("CREATE INDEX \"client_downloads/gc_index\" ON client_downloads (throttle_state, expire_stamp ASC) WHERE throttle_state = 0"))
        && objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_downloads/transfer_operation\" ON client_downloads (transfer_operation) WHERE transfer_operation IS NOT NULL"))&& objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_downloads/zone_rowid__throttle_state\" ON client_downloads (throttle_state, zone_rowid)"))&& objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_downloads/reset_index\" ON client_downloads (zone_rowid, throttle_state)"))&& objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_downloads/low_disk_index\" ON client_downloads (throttle_state, throttle_id, download_kind)  WHERE throttle_state = 43"))&& objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_uploads/gc_index\" ON client_uploads (throttle_state, expire_stamp ASC) WHERE throttle_state = 0"))
        && objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX IF NOT EXISTS \"client_uploads/scheduling_by_size\" ON client_uploads (throttle_state, transfer_queue, transfer_operation, transfer_size ASC)  WHERE throttle_state = 1"))&& objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX IF NOT EXISTS \"client_uploads/scheduling_by_stamp\" ON client_uploads (throttle_state, transfer_queue, transfer_operation, next_retry_stamp ASC)  WHERE throttle_state = 1"))&& objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_uploads/transfer_operation\" ON client_uploads (transfer_operation) WHERE transfer_operation IS NOT NULL"))&& objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_uploads/zone_rowid__throttle_state\" ON client_uploads (throttle_state, zone_rowid)"))&& objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_uploads/reset_index\" ON client_uploads (zone_rowid, throttle_state)"))
        && objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_uploads/out_of_quota_index\" ON client_uploads (throttle_state, zone_rowid, transfer_size)  WHERE throttle_state = 32"))&& objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_unapplied_table/zone_rowid\" ON client_unapplied_table (zone_rowid)"))&& objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_unapplied_table/next_retry_stamp_active_state\" ON client_unapplied_table (throttle_state, next_retry_stamp ASC, throttle_id ASC) WHERE throttle_state = 1"))&& objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_unapplied_table/zone_rowid__kind__throttle_state\" ON client_unapplied_table (throttle_state, zone_rowid, apply_kind)")))
      {
        v8 = objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_unapplied_table/expire_stamp_inactive_state\" ON client_unapplied_table (throttle_state, expire_stamp ASC) WHERE throttle_state = 0"));
        goto LABEL_7;
      }
    }
LABEL_48:
    v9 = 0;
    goto LABEL_49;
  }
  if (!objc_msgSend(v6, "execute:", CFSTR("ALTER TABLE rowid_reservations RENAME TO rowid_reservations_old"))|| !objc_msgSend(v7, "execute:", CFSTR("CREATE TABLE rowid_reservations(rowid integer PRIMARY KEY, container_id text unique not null)"))|| !objc_msgSend(v7, "execute:", CFSTR("INSERT INTO rowid_reservations (rowid, container_id) SELECT rowid, container_id FROM rowid_reservations_old WHERE owner = %@ OR owner IS NULL"), *MEMORY[0x1E0C94730])|| !objc_msgSend(v7, "execute:", CFSTR("DROP TABLE rowid_reservations_old")))
  {
    goto LABEL_48;
  }
  v8 = +[BRCItemID migrateItemIDsToVersion11WithDB:serverTruth:](BRCItemID, "migrateItemIDsToVersion11WithDB:serverTruth:", v7, 1);
LABEL_7:
  v9 = v8;
LABEL_49:

  return v9;
}

uint64_t br_update_tables_11_001(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if ((a3 & 1) != 0)
  {
    v8 = 1;
  }
  else if (objc_msgSend(v6, "execute:", CFSTR("CREATE INDEX \"client_items/mark_children_lost_index\" ON client_items(item_parent_zone_rowid, item_parent_id, rowid ASC) WHERE item_state = 0"))&& objc_msgSend(v7, "execute:", CFSTR("create index \"client_items/faults_enumeration\" ON client_items(zone_rowid, rowid) WHERE item_type = 2"))&& objc_msgSend(v7, "execute:", CFSTR("DROP INDEX \"client_items/sync_up_enumerator_1\""))&& objc_msgSend(v7, "execute:", CFSTR("DROP INDEX \"client_items/sync_up_enumerator_2\""))&& objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_items/sync_up_enumerator_1\" ON client_items(item_parent_zone_rowid, item_parent_id) WHERE item_localsyncupstate = 4 AND item_state IN (0, -1, 1)")))
  {
    v8 = objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_items/sync_up_enumerator_2\" ON client_items(zone_rowid) WHERE item_localsyncupstate IN (2, 3, 4)"));
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t br_update_tables_11_002(uint64_t a1, void *a2, int a3)
{
  const __CFString *v3;

  if (a3)
    v3 = CFSTR("ALTER TABLE server_items ADD COLUMN item_lastusedtime integer DEFAULT NULL");
  else
    v3 = CFSTR("ALTER TABLE client_items ADD COLUMN item_lastusedtime integer DEFAULT NULL");
  return objc_msgSend(a2, "execute:", v3);
}

uint64_t br_update_tables_11_003(uint64_t a1, void *a2, int a3)
{
  const __CFString *v3;

  if (a3)
    v3 = CFSTR("ALTER TABLE server_items ADD COLUMN item_favoriterank integer DEFAULT NULL");
  else
    v3 = CFSTR("ALTER TABLE client_items ADD COLUMN item_favoriterank integer DEFAULT NULL");
  return objc_msgSend(a2, "execute:", v3);
}

uint64_t br_update_tables_12_000(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if ((a3 & 1) != 0)
  {
    v8 = 1;
  }
  else if (objc_msgSend(v6, "execute:", CFSTR("DROP INDEX \"spotlight_ranks/notif_rank\""))
         && objc_msgSend(v7, "execute:", CFSTR("DROP TABLE spotlight_ranks"))
         && objc_msgSend(v7, "execute:", CFSTR("CREATE TABLE tombstones(file_object_id      integer not null, file_object_id_type integer not null, notif_rank          integer not null, PRIMARY KEY (file_object_id, notif_rank ASC))"))&& objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"tombstones/notif_rank\" ON tombstones (notif_rank)"))&& objc_msgSend(v7, "execute:", CFSTR("ALTER TABLE client_items ADD COLUMN item_user_visible integer not null default 1"))&& objc_msgSend(v7, "execute:", CFSTR("UPDATE client_document_access SET properties = properties & 1")))
  {
    v8 = objc_msgSend(v7, "execute:", CFSTR("DROP INDEX \"client_document_access/indexable\""));
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t br_update_tables_12_001(uint64_t a1, void *a2, char a3)
{
  id v3;

  if ((a3 & 1) == 0)
  {
    v3 = a2;
    objc_msgSend(v3, "execute:", CFSTR("UPDATE client_downloads SET app_library_rowid = (SELECT app_library_rowid FROM client_items WHERE client_downloads.throttle_id = client_items.rowid) WHERE throttle_state != 0"));
    objc_msgSend(v3, "execute:", CFSTR("UPDATE client_uploads SET app_library_rowid = (SELECT app_library_rowid FROM client_items WHERE client_uploads.throttle_id = client_items.rowid) WHERE throttle_state != 0"));

  }
  return 1;
}

uint64_t br_update_tables_13_000(void *a1, void *a2, int a3)
{
  id v5;
  id v6;
  void *v7;
  const __CFString *v8;
  uint64_t v9;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (!a3)
  {
    if (objc_msgSend(v6, "execute:", CFSTR("ALTER TABLE client_items ADD COLUMN item_alias_target text")))
    {
      v8 = CFSTR("UPDATE client_items SET item_alias_target = item_filename, item_filename = NULL WHERE item_type = 3");
      goto LABEL_6;
    }
LABEL_7:
    v9 = 0;
    goto LABEL_8;
  }
  if ((objc_msgSend(v6, "execute:", CFSTR("ALTER TABLE server_items ADD COLUMN item_alias_target text")) & 1) == 0)
    goto LABEL_7;
  v8 = CFSTR("UPDATE server_items SET item_alias_target = item_filename, item_filename = \"\" WHERE item_type = 3");
LABEL_6:
  v9 = objc_msgSend(v7, "execute:", v8);
LABEL_8:

  return v9;
}

uint64_t br_update_tables_13_001(uint64_t a1, void *a2, int a3)
{
  if (a3)
    return objc_msgSend(a2, "execute:", CFSTR("UPDATE server_items SET version_quarantine_info = %@, item_rank = NULL WHERE length(version_quarantine_info) == 0 AND version_quarantine_info IS NOT NULL"), 0);
  else
    return 1;
}

uint64_t br_update_tables_13_002(uint64_t a1, void *a2, char a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  if ((a3 & 1) != 0)
    return 1;
  v4 = a2;
  v5 = (void *)objc_opt_new();
  objc_msgSend(v5, "UUIDString");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v4, "execute:", CFSTR("UPDATE backup_detector SET uuid = %@"), v6);

  return v7;
}

uint64_t br_update_tables_13_003(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if ((a3 & 1) != 0)
  {
    v8 = 1;
  }
  else if (objc_msgSend(v6, "execute:", CFSTR("UPDATE client_items SET item_local_diffs = item_local_diffs | %llu & ~%llu WHERE item_local_diffs & %llu != 0"), 0x2000, 0x80000000000000, 0x80000000000000))
  {
    v8 = objc_msgSend(v7, "execute:", CFSTR("UPDATE client_items SET item_local_diffs = item_local_diffs | %llu WHERE item_type = 5 AND item_stat_ckinfo IS NULL AND (item_local_diffs & %llu)==0"), 0x2000, 0x2000);
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t br_update_tables_14_000(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if ((a3 & 1) != 0)
  {
    v8 = 1;
  }
  else if (objc_msgSend(v6, "execute:", CFSTR("ALTER TABLE client_items ADD COLUMN item_tmpbounceno INTEGER"))&& objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_items/item_tmpbounceno\" ON client_items (item_tmpbounceno) WHERE item_tmpbounceno IS NOT NULL"))&& objc_msgSend(v7, "execute:", CFSTR("UPDATE client_items SET item_tmpbounceno = call_block(%p, item_bouncedname) WHERE item_bouncedname IS NOT NULL"), &__block_literal_global_814)&& objc_msgSend(v7, "execute:", CFSTR("DROP INDEX \"client_items/item_bouncedname\""))&& objc_msgSend(v7, "execute:", CFSTR("DROP INDEX \"client_items/item_parent_id__item_localname\""))&& objc_msgSend(v7,
                            "execute:",
                            CFSTR("CREATE INDEX \"client_items/item_parent_id__item_bouncedname\" ON client_items (item_parent_zone_rowid, item_parent_id, item_bouncedname) WHERE item_bouncedname IS NOT NULL"))
         && objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_items/item_parent_id__item_localname\" ON client_items (item_parent_zone_rowid, item_parent_id, item_localname) WHERE item_localname IS NOT NULL")))
  {
    v8 = objc_msgSend(v7, "execute:", CFSTR("UPDATE client_items SET item_bouncedname = call_block(%p, item_filename, item_localname) WHERE item_localname IS NOT NULL"), &__block_literal_global_826);
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t br_update_tables_14_001(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if ((a3 & 1) != 0)
  {
    v8 = 1;
  }
  else if (objc_msgSend(v6, "execute:", CFSTR("DROP INDEX \"client_items/item_path\""))
         && objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_items/item_filename_path\" ON client_items (item_parent_zone_rowid, item_parent_id, item_filename)"))&& objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_items/item_localname_path\" ON client_items (item_parent_zone_rowid, item_parent_id, item_localname)"))&& objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_items/item_bouncedname_path\" ON client_items (item_parent_zone_rowid, item_parent_id, item_bouncedname)"))&& objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_items/shared_item_library\" ON client_items (app_library_rowid, item_state) WHERE item_creator_id != 0;"))
         && objc_msgSend(v7, "execute:", CFSTR("DROP INDEX \"client_items/item_id\""))
         && objc_msgSend(v7, "execute:", CFSTR("DROP INDEX \"client_items/item_file_id\""))
         && objc_msgSend(v7, "execute:", CFSTR("DROP INDEX \"client_items/item_file_id_unique\"")))
  {
    v8 = objc_msgSend(v7, "execute:", CFSTR("CREATE UNIQUE INDEX \"client_items/item_file_id_unique\" ON client_items(item_file_id) WHERE item_state IN (0, -1)"));
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t br_update_tables_14_002(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if ((a3 & 1) != 0)
  {
    v8 = 1;
  }
  else if (objc_msgSend(v6, "execute:", CFSTR("CREATE INDEX \"client_sync_up/next_retry\" ON client_sync_up (next_retry_stamp) WHERE throttle_state = 1"))&& objc_msgSend(v7, "execute:", CFSTR("DROP INDEX \"client_items/sync_up_enumerator_1\""))&& objc_msgSend(v7, "execute:", CFSTR("DROP INDEX \"client_items/sync_up_enumerator_2\"")))
  {
    v8 = objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_items/sync_up_enumerator\" ON client_items(item_state, item_type) WHERE item_localsyncupstate = 4 AND item_min_supported_os_rowid IS NULL"));
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t br_update_tables_14_003(uint64_t a1, void *a2, char a3)
{
  id v4;
  uint64_t v5;
  uint64_t v7;

  v4 = a2;
  if ((a3 & 1) != 0)
  {
    v5 = 1;
  }
  else
  {
    v7 = brc_current_date_nsec();
    if (objc_msgSend(v4, "execute:", CFSTR("UPDATE client_items SET item_user_visible = 0 WHERE item_scope IN (0, 1)"))&& objc_msgSend(v4, "execute:", CFSTR("UPDATE client_items SET item_user_visible = 0 WHERE item_scope = 3 AND (SELECT parent.item_filename FROM client_items AS parent WHERE parent.item_id = item_parent_id AND parent.zone_rowid = item_parent_zone_rowid)"))&& objc_msgSend(v4, "execute:", CFSTR("UPDATE client_items SET item_user_visible = 0 WHERE item_filename LIKE '.%%' AND item_scope = 2")))
    {
      v5 = objc_msgSend(v4, "execute:", CFSTR("UPDATE client_items SET item_state = -1, item_processing_stamp = inc_and_fetch64(%p) WHERE item_user_visible = 0 AND item_scope = 2 AND item_type = 0 AND item_state = 0"), &v7);
    }
    else
    {
      v5 = 0;
    }
  }

  return v5;
}

uint64_t br_update_tables_15_000(uint64_t a1, void *a2, int a3)
{
  if (a3)
    return objc_msgSend(a2, "execute:", CFSTR("DROP TABLE server_pending_fetches"));
  else
    return 1;
}

uint64_t br_update_tables_15_001(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if ((a3 & 1) != 0)
  {
    v8 = 1;
  }
  else if (objc_msgSend(v6, "execute:", CFSTR("DROP INDEX \"client_items/item_notifs_rank\""))
         && objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_items/item_notifs_rank_children\" ON client_items (item_parent_id, item_parent_zone_rowid, item_notifs_rank) WHERE item_state IN (0, -1)"))&& objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_items/item_notifs_rank_library\" ON client_items (item_notifs_rank, app_library_rowid) WHERE item_state IN (0, -1)"))&& objc_msgSend(v7, "execute:", CFSTR("DROP INDEX \"client_items/alias_map\"")))
  {
    v8 = objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_items/alias_map\" ON client_items(item_type, item_alias_target) WHERE item_type = 3"));
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t br_update_tables_15_002(uint64_t a1, void *a2, int a3)
{
  id v4;
  void *v5;
  uint64_t v6;

  v4 = a2;
  v5 = v4;
  if (a3)
  {
    if (objc_msgSend(v4, "execute:", CFSTR("DROP INDEX \"server_items/alias_map\"")))
      v6 = objc_msgSend(v5, "execute:", CFSTR("CREATE INDEX \"server_items/alias_map\" ON server_items(item_type, item_alias_target) WHERE item_type = 3"));
    else
      v6 = 0;
  }
  else
  {
    v6 = 1;
  }

  return v6;
}

uint64_t br_update_tables_15_003(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if ((a3 & 1) != 0)
  {
    v8 = 1;
  }
  else if (objc_msgSend(v6, "execute:", CFSTR("DROP INDEX \"client_items/item_localname_path\""))
         && objc_msgSend(v7, "execute:", CFSTR("DROP INDEX \"client_items/item_bouncedname_path\""))
         && objc_msgSend(v7, "execute:", CFSTR("DROP INDEX \"client_items/item_parent_id_rowid\""))
         && objc_msgSend(v7, "execute:", CFSTR("DROP INDEX \"client_items/spotlight_index\""))
         && objc_msgSend(v7, "execute:", CFSTR("DROP INDEX \"client_items/item_parent_id__item_state\""))
         && objc_msgSend(v7, "execute:", CFSTR("DROP INDEX \"client_items/download_index\""))
         && objc_msgSend(v7, "execute:", CFSTR("DROP INDEX \"client_items/eviction_index\""))
         && objc_msgSend(v7, "execute:", CFSTR("DROP INDEX \"client_items/item_in_flight_diffs\""))
         && objc_msgSend(v7, "execute:", CFSTR("DROP INDEX \"client_uploads/scheduling_by_size\""))
         && objc_msgSend(v7, "execute:", CFSTR("DROP INDEX \"client_pkg_items/is_dirty\""))
         && objc_msgSend(v7, "execute:", CFSTR("DROP INDEX \"client_items/pending_download_docs\""))
         && objc_msgSend(v7, "execute:", CFSTR("DROP INDEX \"client_document_access/evictable\""))
         && objc_msgSend(v7, "execute:", CFSTR("DROP INDEX \"client_document_access/evictable/item_rowid\""))&& objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_items/app_library_rowid\" ON client_items (app_library_rowid)"))&& objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_items/item_parent_id_rowid\" ON client_items (item_parent_id, app_library_rowid, rowid)"))&& objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_items/working_set_index\" ON client_items (item_notifs_rank) WHERE item_user_visible = 1"))&& objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_items/eviction_index\" ON client_items (version_mtime, app_library_rowid) WHERE item_localsyncupstate = 0 AND item_state != 1"))
         && objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_sync_up/sync_state_index\" ON client_sync_up (zone_rowid, throttle_state)"))&& objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_sync_up/throttle_id\" ON client_sync_up (throttle_id)"))&& objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_sync_up/zone_rowid\" ON client_sync_up (zone_rowid)"))&& objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_sync_up/expire_stamp_inactive_state\" ON client_sync_up (throttle_state, expire_stamp) WHERE throttle_state = 0")))
  {
    v8 = objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_uploads/scheduling_by_priority\" ON client_uploads (throttle_state, transfer_queue, upload_priority DESC, upload_request_stamp DESC, transfer_size ASC)  WHERE throttle_state = 1 AND transfer_operation IS NULL"));
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t br_update_tables_15_004()
{
  return 1;
}

uint64_t br_update_tables_16_000(void *a1, void *a2, int a3)
{
  id v5;
  id v6;
  void *v7;
  const __CFString *v8;
  uint64_t v9;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (!a3)
  {
    if (objc_msgSend(v6, "execute:", CFSTR("ALTER TABLE client_items ADD COLUMN item_side_car_ckinfo BLOB"))&& objc_msgSend(v7, "execute:", CFSTR("ALTER TABLE client_items ADD COLUMN item_creator INTEGER"))&& objc_msgSend(v7, "execute:", CFSTR("ALTER TABLE client_items ADD COLUMN version_edited_since_shared INTEGER")))
    {
      v8 = CFSTR("DROP INDEX \"client_items/eviction_index\"");
      goto LABEL_10;
    }
LABEL_11:
    v9 = 0;
    goto LABEL_12;
  }
  if (!objc_msgSend(v6, "execute:", CFSTR("ALTER TABLE server_items ADD COLUMN item_side_car_ckinfo BLOB"))|| !objc_msgSend(v7, "execute:", CFSTR("ALTER TABLE server_items ADD COLUMN item_creator INTEGER"))|| (objc_msgSend(v7, "execute:", CFSTR("ALTER TABLE server_items ADD COLUMN version_edited_since_shared INTEGER")) & 1) == 0)
  {
    goto LABEL_11;
  }
  v8 = CFSTR("CREATE TABLE side_car_lookahead(record_name text primary key , root_alias_record_name text NOT NULL, item_side_car_ckinfo BLOB NOT NULL , item_favoriterank integer , item_lastusedtime integer)");
LABEL_10:
  v9 = objc_msgSend(v7, "execute:", v8);
LABEL_12:

  return v9;
}

uint64_t br_update_tables_16_001(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if ((a3 & 1) != 0)
  {
    v8 = 1;
  }
  else if (objc_msgSend(v6, "execute:", CFSTR("ALTER TABLE client_items ADD COLUMN visible_child_count integer"))&& objc_msgSend(v7, "execute:", CFSTR("CREATE TRIGGER \"visible_child_count/deletion\" AFTER DELETE ON client_items BEGIN UPDATE OR IGNORE client_items SET visible_child_count = visible_child_count - 1 WHERE (old.item_user_visible = 1 OR old.item_scope = 3) AND old.item_parent_id = item_id AND old.item_parent_zone_rowid = zone_rowid AND old.item_filename != \".Trash\" ; END")))
  {
    v8 = objc_msgSend(v7, "execute:", CFSTR("CREATE TRIGGER \"visible_child_count/insertion\" AFTER INSERT ON client_items BEGIN UPDATE OR IGNORE client_items SET visible_child_count = visible_child_count + 1 WHERE (new.item_user_visible = 1 OR new.item_scope = 3) AND new.item_filename != \".Trash\" AND new.item_parent_id = item_id AND new.item_parent_zone_rowid = zone_rowid ; END"));
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t br_update_tables_16_002(uint64_t a1, void *a2, int a3)
{
  id v4;
  void *v5;
  uint64_t v6;

  v4 = a2;
  v5 = v4;
  if (a3)
  {
    if (objc_msgSend(v4, "execute:", CFSTR("ALTER TABLE server_items ADD COLUMN quota_used INTEGER"))
      && objc_msgSend(v5, "execute:", CFSTR("ALTER TABLE server_items ADD COLUMN recursive_child_count INTEGER"))&& objc_msgSend(v5, "execute:", CFSTR("ALTER TABLE server_items ADD COLUMN shared_children_count INTEGER"))&& objc_msgSend(v5, "execute:", CFSTR("ALTER TABLE server_items ADD COLUMN shared_alias_count INTEGER")))
    {
      v6 = objc_msgSend(v5, "execute:", CFSTR("ALTER TABLE server_items ADD COLUMN child_count INTEGER"));
    }
    else
    {
      v6 = 0;
    }
  }
  else
  {
    v6 = 1;
  }

  return v6;
}

uint64_t br_update_tables_16_003(uint64_t a1, void *a2, int a3)
{
  if (a3)
    return objc_msgSend(a2, "execute:", CFSTR("CREATE INDEX \"server_items/item_parent_id__item_type\" ON server_items(zone_rowid, item_type, item_parent_id)"));
  else
    return 1;
}

uint64_t br_update_tables_16_004()
{
  return 1;
}

uint64_t br_update_tables_16_005(uint64_t a1, void *a2, int a3)
{
  if (a3)
    return objc_msgSend(a2, "execute:", CFSTR("ALTER TABLE side_car_lookahead ADD COLUMN item_finder_tags blob"));
  else
    return 1;
}

uint64_t br_update_tables_16_006(void *a1, void *a2, int a3, void **a4)
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t j;
  void *v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  if (a3)
  {
    +[BRCMigrationQueryOperation folderSharesMigrationKey](BRCMigrationQueryOperation, "folderSharesMigrationKey");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = _br_setupMigrationQueryOnServerTruth(v9, v7, v8, a4);

    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    objc_msgSend(v7, "_sharedServerZonesEnumerator:", v8);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
    if (v12)
    {
      v13 = v12;
      v14 = *(_QWORD *)v29;
      do
      {
        for (i = 0; i != v13; ++i)
        {
          if (*(_QWORD *)v29 != v14)
            objc_enumerationMutation(v11);
          v16 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * i);
          objc_msgSend(v16, "changeState");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "forgetChangeTokens");

          if ((v10 & 1) != 0)
            v10 = objc_msgSend(v7, "saveServerZoneToDB:", v16);
          else
            v10 = 0;
        }
        v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
      }
      while (v13);
    }
  }
  else
  {
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    objc_msgSend(v7, "_sharedClientZonesEnumerator", 0);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
    if (v18)
    {
      v19 = v18;
      v20 = *(_QWORD *)v25;
      LOBYTE(v10) = 1;
      do
      {
        for (j = 0; j != v19; ++j)
        {
          if (*(_QWORD *)v25 != v20)
            objc_enumerationMutation(v11);
          v22 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * j);
          objc_msgSend(v22, "setStateBits:", 256);
          if ((v10 & 1) != 0)
            v10 = objc_msgSend(v7, "saveClientZoneToDB:", v22);
          else
            v10 = 0;
        }
        v19 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
      }
      while (v19);
    }
    else
    {
      v10 = 1;
    }
  }

  return v10;
}

uint64_t br_update_tables_16_007()
{
  return 1;
}

uint64_t br_update_tables_16_008()
{
  return 1;
}

uint64_t br_update_tables_16_009(void *a1, void *a2, int a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  _UNKNOWN **v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  int v22;
  void *v23;
  NSObject *v24;
  int v25;
  void *v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v30;
  id v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  char v36;
  void *v37;
  uint8_t buf[4];
  void *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (a3)
  {
    v31 = v5;
    v8 = (void *)objc_msgSend(v6, "fetch:", CFSTR("SELECT record_name, root_alias_record_name, item_favoriterank, item_lastusedtime, item_finder_tags, item_side_car_ckinfo FROM side_car_lookahead WHERE length(root_alias_record_name) = 36"));
    if (objc_msgSend(v8, "next"))
    {
      v36 = 1;
      v9 = &off_1E875B000;
      v32 = v7;
      while (1)
      {
        v37 = (void *)MEMORY[0x1D17A6BE8]();
        objc_msgSend(v8, "stringAtIndex:", 0);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "stringAtIndex:", 1);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = (void *)objc_msgSend(objc_alloc((Class)v9[368]), "initWithUUIDString:", v11);
        objc_msgSend(v10, "componentsSeparatedByString:", CFSTR("/"));
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v13, "count") != 2)
        {
          brc_bread_crumbs();
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          brc_default_log();
          v24 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 138412290;
            v39 = v23;
            _os_log_fault_impl(&dword_1CBD43000, v24, OS_LOG_TYPE_FAULT, "[CRIT] UNREACHABLE: Ignoring corrupt side car file%@", buf, 0xCu);
          }

          objc_autoreleasePoolPop(v37);
          goto LABEL_21;
        }
        v14 = v7;
        v15 = objc_alloc((Class)v9[368]);
        objc_msgSend(v13, "lastObject");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = objc_msgSend(v15, "initWithUUIDString:", v16);

        objc_msgSend(v8, "numberAtIndex:", 2);
        v18 = objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "numberAtIndex:", 3);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "dataAtIndex:", 4);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "objectOfClass:atIndex:", objc_opt_class(), 5);
        v21 = objc_claimAutoreleasedReturnValue();
        v34 = (void *)v18;
        v35 = (void *)v17;
        v33 = (void *)v21;
        if ((v36 & 1) != 0)
        {
          v30 = v17;
          v7 = v14;
          v25 = objc_msgSend(v14, "execute:", CFSTR("UPDATE server_items SET item_favoriterank = %@, item_lastusedtime = %@, item_finder_tags = %@, item_side_car_ckinfo = %@, item_rank = NULL WHERE item_id = %@ AND zone_rowid IN (SELECT zone_rowid FROM server_items WHERE item_id = %@)"), v18, v19, v20, v21, v12, v30);
          if (objc_msgSend(v14, "changes") <= 1)
          {
            if (v25)
              v36 = objc_msgSend(v14, "execute:", CFSTR("DELETE FROM side_car_lookahead WHERE record_name = %@"), v10);
            else
              v36 = 0;
            v22 = 1;
            goto LABEL_20;
          }
          v36 = v25;
        }
        else
        {
          v7 = v14;
          v36 = 0;
          if (objc_msgSend(v14, "changes") < 2)
          {
            v22 = 1;
            goto LABEL_20;
          }
        }
        brc_bread_crumbs();
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        brc_default_log();
        v27 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 138412290;
          v39 = v26;
          _os_log_fault_impl(&dword_1CBD43000, v27, OS_LOG_TYPE_FAULT, "[CRIT] UNREACHABLE: Found more than one match for that query%@", buf, 0xCu);
        }

        v22 = 0;
        v7 = v32;
LABEL_20:

        objc_autoreleasePoolPop(v37);
        v9 = &off_1E875B000;
        if (!v22)
        {

          v28 = 0;
          goto LABEL_26;
        }
LABEL_21:
        if ((objc_msgSend(v8, "next") & 1) == 0)
          goto LABEL_25;
      }
    }
    v36 = 1;
LABEL_25:

    v28 = v36 & 1;
LABEL_26:
    v5 = v31;
  }
  else
  {
    v28 = 1;
  }

  return v28;
}

uint64_t br_update_tables_16_010(uint64_t a1, void *a2, int a3)
{
  id v4;
  void *v5;
  uint64_t v6;

  v4 = a2;
  v5 = v4;
  if (a3)
  {
    if (objc_msgSend(v4, "execute:", CFSTR("DROP TRIGGER IF EXISTS \"server_items/sharing_state_propagation\""))&& objc_msgSend(v5, "execute:", CFSTR("DROP TRIGGER IF EXISTS \"server_items/learn_parent_sharing_state\""))&& objc_msgSend(v5, "execute:", CFSTR("DROP TRIGGER IF EXISTS \"server_items/sharing_state_insertion\""))&& objc_msgSend(v5, "execute:", CFSTR("CREATE TRIGGER \"server_items/sharing_state_propagation\" AFTER UPDATE OF item_sharing_options ON server_items BEGIN UPDATE server_items SET item_sharing_options = (item_sharing_options & (~124)) | (new.item_sharing_options & 120) WHERE new.item_sharing_options != old.item_sharing_options AND new.item_type IN (0, 9, 10) AND new.item_state = 0 AND item_parent_id = new.item_id AND zone_rowid = new.zone_rowid AND (item_sharing_options & 4) == 0 AND (item_sharing_options & 120) != (new.item_sharing_options & 120); END"))
      && objc_msgSend(v5, "execute:", CFSTR("CREATE TRIGGER \"server_items/learn_parent_sharing_state\" AFTER UPDATE OF item_parent_id ON server_items BEGIN UPDATE server_items SET item_sharing_options = ((item_sharing_options & (~124)) | IFNULL((SELECT item_sharing_options & 120 FROM server_items as pi WHERE pi.item_id = new.item_parent_id AND pi.zone_rowid = new.zone_rowid), 0)) WHERE new.item_parent_id != old.item_parent_id AND item_id = new.item_id AND zone_rowid = new.zone_rowid AND item_state = 0 AND (item_sharing_options & 4) == 0; END")))
    {
      v6 = objc_msgSend(v5, "execute:", CFSTR("CREATE TRIGGER \"server_items/sharing_state_insertion\" AFTER INSERT ON server_items BEGIN UPDATE server_items SET item_sharing_options = ((item_sharing_options & (~124)) | IFNULL((SELECT item_sharing_options & 120 FROM server_items as pi WHERE pi.item_id = new.item_parent_id AND pi.zone_rowid = new.zone_rowid), 0)) WHERE (new.item_sharing_options & 4) == 0 AND item_id = new.item_id AND zone_rowid = new.zone_rowid; UPDATE server_items SET item_sharing_options = (item_sharing_options & (~124)) | (new.item_sharing_options & 120) WHERE (new.item_sharing_options & 4) != 0 AND new.item_type IN (0, 9, 10) AND new.item_state = 0 AND item_parent_id = new.item_id AND zone_rowid = new.zone_rowid AND (item_sharing_options & 4) == 0 AND (item_sharing_options & 120) != (new.item_sharing_options & 120); END"));
    }
    else
    {
      v6 = 0;
    }
  }
  else
  {
    v6 = 1;
  }

  return v6;
}

uint64_t br_update_tables_16_011(void *a1, void *a2, int a3, void **a4)
{
  id v6;
  id v7;
  void *v8;
  uint64_t v9;

  if (!a3)
    return 1;
  v6 = a2;
  v7 = a1;
  +[BRCMigrationQueryOperation folderShareAliasesMigrationKey](BRCMigrationQueryOperation, "folderShareAliasesMigrationKey");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = _br_setupMigrationQueryOnServerTruth(v8, v7, v6, a4);

  return v9;
}

uint64_t br_update_tables_16_012(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v22;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if ((a3 & 1) != 0)
  {
    v8 = 1;
  }
  else
  {
    v9 = v6;
    v22 = v5;
    if (objc_msgSend(v9, "execute:", CFSTR("DROP TABLE IF EXISTS item_errors"))
      && objc_msgSend(v9, "execute:", CFSTR("DROP INDEX IF EXISTS \"item_errors/error_group\""))
      && objc_msgSend(v9, "execute:", CFSTR("DROP TRIGGER IF EXISTS \"item_errors/deletion\""))
      && objc_msgSend(v9, "execute:", CFSTR("DROP TRIGGER IF EXISTS \"item_errors/upload-deletion\""))
      && objc_msgSend(v9, "execute:", CFSTR("DROP TRIGGER IF EXISTS \"item_errors/upload-idle\""))
      && objc_msgSend(v9, "execute:", CFSTR("DROP TRIGGER IF EXISTS \"item_errors/download-deletion\""))
      && objc_msgSend(v9, "execute:", CFSTR("DROP TRIGGER IF EXISTS \"item_errors/download-idle\""))
      && objc_msgSend(v9, "execute:", CFSTR("DROP TRIGGER IF EXISTS \"item_errors/quota-insertion\""))
      && objc_msgSend(v9, "execute:", CFSTR("DROP TRIGGER IF EXISTS \"item_errors/quota-deletion\""))
      && objc_msgSend(v9, "execute:", CFSTR("DROP TRIGGER IF EXISTS \"item_errors/quota-update-away\""))
      && objc_msgSend(v9, "execute:", CFSTR("DROP TRIGGER IF EXISTS \"item_errors/quota-update-into\""))
      && objc_msgSend(v9, "execute:", CFSTR("DROP TRIGGER IF EXISTS \"item_errors/disk-insertion\""))
      && objc_msgSend(v9, "execute:", CFSTR("DROP TRIGGER IF EXISTS \"item_errors/disk-deletion\""))
      && objc_msgSend(v9, "execute:", CFSTR("DROP TRIGGER IF EXISTS \"item_errors/disk-update-away\""))
      && objc_msgSend(v9, "execute:", CFSTR("DROP TRIGGER IF EXISTS \"item_errors/disk-update-into\""))
      && objc_msgSend(v9, "execute:", CFSTR("CREATE TABLE item_errors(item_rowid integer NOT NULL, error_domain TEXT NOT NULL default \"unknown\", error_code integer NOT NULL default 0, error_message TEXT, error_timestamp TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, service integer NOT NULL, PRIMARY KEY (item_rowid, error_domain, error_code, service))"))&& objc_msgSend(v9, "execute:", CFSTR("CREATE TRIGGER \"item_errors/deletion\" AFTER DELETE ON client_items BEGIN DELETE FROM item_errors WHERE item_rowid = old.rowid; END"))
      && objc_msgSend(v9, "execute:", CFSTR("CREATE TRIGGER \"item_errors/upload-deletion\" AFTER DELETE ON client_uploads BEGIN DELETE FROM item_errors WHERE item_rowid = old.throttle_id AND service = 1; END"))
      && objc_msgSend(v9, "execute:", CFSTR("CREATE TRIGGER \"item_errors/upload-idle\" AFTER UPDATE OF throttle_state ON client_uploads WHEN (new.throttle_state = 0  AND old.throttle_state != 0) BEGIN DELETE FROM item_errors WHERE item_rowid = old.throttle_id AND service = 1; END"))
      && objc_msgSend(v9, "execute:", CFSTR("CREATE TRIGGER \"item_errors/download-deletion\" AFTER DELETE ON client_downloads BEGIN DELETE FROM item_errors WHERE item_rowid = old.throttle_id AND service = 2; END"))
      && objc_msgSend(v9, "execute:", CFSTR("CREATE TRIGGER \"item_errors/download-idle\" AFTER UPDATE OF throttle_state ON client_downloads WHEN (new.throttle_state = 0  AND old.throttle_state != 0) BEGIN DELETE FROM item_errors WHERE item_rowid = old.throttle_id AND service = 2; END"))
      && objc_msgSend(v9, "execute:", CFSTR("CREATE TRIGGER \"item_errors/quota-insertion\" AFTER INSERT ON client_uploads WHEN new.throttle_state = 32 BEGIN INSERT OR REPLACE INTO item_errors (item_rowid, error_domain, error_code, service)       VALUES (new.throttle_id, \"CKErrorDomain\", 25, 1); END"))
      && objc_msgSend(v9, "execute:", CFSTR("CREATE TRIGGER \"item_errors/quota-deletion\" AFTER DELETE ON client_uploads WHEN old.throttle_state = 32 BEGIN DELETE FROM item_errors WHERE item_rowid = old.throttle_id    AND error_domain = \"CKErrorDomain\"    AND error_code = 25    AND service = 1; END"))
      && objc_msgSend(v9, "execute:", CFSTR("CREATE TRIGGER \"item_errors/quota-update-away\" AFTER UPDATE OF throttle_state ON client_uploads WHEN (old.throttle_state = 32    AND new.throttle_state != 32) BEGIN DELETE FROM item_errors  WHERE item_rowid = old.throttle_id    AND error_domain = \"CKErrorDomain\"    AND error_code = 25    AND service = 1; END"))
      && objc_msgSend(v9, "execute:", CFSTR("CREATE TRIGGER \"item_errors/quota-update-into\" AFTER UPDATE OF throttle_state ON client_uploads WHEN (old.throttle_state != 32    AND new.throttle_state = 32) BEGIN INSERT OR REPLACE INTO item_errors (item_rowid, error_domain, error_code, service)       VALUES (new.throttle_id, \"CKErrorDomain\", 25, 1); END"))
      && objc_msgSend(v9, "execute:", CFSTR("CREATE TRIGGER \"item_errors/disk-insertion\" AFTER INSERT ON client_downloads WHEN new.throttle_state = 43 BEGIN INSERT OR REPLACE INTO item_errors (item_rowid, error_domain, error_code, service)       VALUES (new.throttle_id, \"BRCloudDocsErrorDomain\", 34, 2); END"))
      && objc_msgSend(v9, "execute:", CFSTR("CREATE TRIGGER \"item_errors/disk-deletion\" AFTER DELETE ON client_downloads WHEN old.throttle_state = 43 BEGIN DELETE FROM item_errors WHERE item_rowid = old.throttle_id    AND error_domain = \"BRCloudDocsErrorDomain\"    AND error_code = 34    AND service = 2; END"))
      && objc_msgSend(v9, "execute:", CFSTR("CREATE TRIGGER \"item_errors/disk-update-away\" AFTER UPDATE OF throttle_state ON client_downloads WHEN (old.throttle_state = 43  AND new.throttle_state != 43) BEGIN DELETE FROM item_errors  WHERE item_rowid = old.throttle_id    AND error_domain = \"BRCloudDocsErrorDomain\"    AND error_code = 34    AND service = 2; END"))
      && objc_msgSend(v9, "execute:", CFSTR("CREATE TRIGGER \"item_errors/disk-update-into\" AFTER UPDATE OF throttle_state ON client_downloads WHEN (old.throttle_state != 43  AND new.throttle_state = 43) BEGIN INSERT OR REPLACE INTO item_errors (item_rowid, error_domain, error_code, service)       VALUES (new.throttle_id, \"BRCloudDocsErrorDomain\", 34, 2); END")))
    {
      v8 = objc_msgSend(v9, "execute:", CFSTR("INSERT INTO item_errors (item_rowid, error_domain, error_code, service) SELECT throttle_id, \"CKErrorDomain\", 25, 1          FROM client_uploads WHERE throttle_state = 32"));
    }
    else
    {
      v8 = 0;
    }
    +[BRCUserDefaults defaultsForMangledID:](BRCUserDefaults, "defaultsForMangledID:", 0);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = (void *)objc_msgSend(v9, "fetch:", CFSTR("SELECT throttle_id, upload_error FROM client_uploads WHERE throttle_state != 32   AND throttle_state != 0   AND (retry_count > %llu OR throttle_state = 33)"), objc_msgSend(v10, "uploadRetryCountForFailure"));
    if (objc_msgSend(v11, "next"))
    {
      do
      {
        v12 = (void *)MEMORY[0x1D17A6BE8]();
        v13 = objc_msgSend(v11, "unsignedLongLongAtIndex:", 0);
        objc_msgSend(v11, "objectOfClass:atIndex:", objc_opt_class(), 1);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "domain");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "execute:", CFSTR("INSERT INTO item_errors (item_rowid, error_domain, error_code, service) VALUES (%llu, %@, %lu, 1)"), v13, v15, objc_msgSend(v14, "code"));

        objc_autoreleasePoolPop(v12);
      }
      while ((objc_msgSend(v11, "next") & 1) != 0);
    }
    if ((_DWORD)v8)
      v8 = objc_msgSend(v9, "execute:", CFSTR("INSERT INTO item_errors (item_rowid, error_domain, error_code, service) SELECT throttle_id, \"BRCloudDocsErrorDomain\", 34, 2          FROM client_downloads WHERE throttle_state = 43"));
    v16 = (void *)objc_msgSend(v9, "fetch:", CFSTR("SELECT throttle_id, download_error FROM client_downloads WHERE throttle_state != 43   AND throttle_state != 0   AND (retry_count > %llu OR throttle_state = 41)"), objc_msgSend(v10, "downloadRetryCountForFailure"));

    if (objc_msgSend(v16, "next"))
    {
      do
      {
        v17 = (void *)MEMORY[0x1D17A6BE8]();
        v18 = objc_msgSend(v16, "unsignedLongLongAtIndex:", 0);
        objc_msgSend(v16, "objectOfClass:atIndex:", objc_opt_class(), 1);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "domain");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "execute:", CFSTR("INSERT INTO item_errors (item_rowid, error_domain, error_code, service) VALUES (%llu, %@, %lu, 2)"), v18, v20, objc_msgSend(v19, "code"));

        objc_autoreleasePoolPop(v17);
      }
      while ((objc_msgSend(v16, "next") & 1) != 0);
    }

    v5 = v22;
  }

  return v8;
}

uint64_t br_update_tables_16_013()
{
  return 1;
}

uint64_t br_update_tables_16_014(uint64_t a1, void *a2, char a3)
{
  if ((a3 & 1) != 0)
    return 1;
  else
    return objc_msgSend(a2, "execute:", CFSTR("UPDATE client_items AS parent SET visible_child_count = (SELECT COUNT(*) FROM client_items AS child WHERE child.item_parent_id = parent.item_id AND child.item_parent_zone_rowid = parent.zone_rowid AND (child.item_user_visible = 1 OR (child.item_scope == 3 AND child.item_filename != \".Trash\"))) WHERE parent.item_type in (0, 9, 10, 4)"));
}

uint64_t br_update_tables_16_015()
{
  return 1;
}

uint64_t br_update_tables_16_016(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if ((a3 & 1) != 0)
  {
    v8 = 1;
  }
  else if (objc_msgSend(v6, "execute:", CFSTR("CREATE TABLE telemetry_events(rowid integer PRIMARY KEY, payload blob NOT NULL)")))
  {
    v8 = objc_msgSend(v7, "execute:", CFSTR("CREATE TABLE telemetry_failure_counts(item_id integer NOT NULL, zone_rowid integer NOT NULL, retry_count integer NOT NULL, PRIMARY KEY (item_id, zone_rowid))"));
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t br_update_tables_16_017(uint64_t a1, void *a2, int a3)
{
  if (a3)
    return objc_msgSend(a2, "execute:", CFSTR("CREATE INDEX \"server_items/share_root\" ON server_items(item_rank) WHERE (item_sharing_options & 4) != 0"));
  else
    return 1;
}

uint64_t br_update_tables_16_018(void *a1, void *a2, char a3)
{
  id v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v23;
  id v24;
  id obj;
  char v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _QWORD v31[4];
  id v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v24 = a2;
  if ((a3 & 1) != 0)
  {
    v6 = 1;
  }
  else
  {
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    objc_msgSend(v5, "_privateClientZonesEnumerator");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v34;
      v26 = 1;
      do
      {
        v10 = 0;
        v23 = v8;
        do
        {
          if (*(_QWORD *)v34 != v9)
            objc_enumerationMutation(obj);
          v11 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * v10);
          if (objc_msgSend(v11, "isSyncBlockedBecauseAppNotInstalled"))
          {
            objc_msgSend(v11, "dbRowID");
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            v13 = (void *)objc_msgSend(v24, "fetch:", CFSTR("SELECT rowid, app_library_name, app_library_plist, zone_rowid FROM app_libraries WHERE zone_rowid = %@"), v12);

            v31[0] = MEMORY[0x1E0C809B0];
            v31[1] = 3221225472;
            v31[2] = __br_update_tables_16_018_block_invoke;
            v31[3] = &unk_1E875E2C8;
            v14 = v5;
            v32 = v14;
            objc_msgSend(v13, "enumerateObjects:", v31);
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            v27 = 0u;
            v28 = 0u;
            v29 = 0u;
            v30 = 0u;
            v16 = v15;
            v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v27, v37, 16);
            if (v17)
            {
              v18 = v17;
              v19 = v5;
              v20 = *(_QWORD *)v28;
              while (2)
              {
                for (i = 0; i != v18; ++i)
                {
                  if (*(_QWORD *)v28 != v20)
                    objc_enumerationMutation(v16);
                  if (objc_msgSend(*(id *)(*((_QWORD *)&v27 + 1) + 8 * i), "hasLocalChanges"))
                  {
                    objc_msgSend(v11, "clearStateBits:", 4096);
                    if ((v26 & 1) != 0)
                      v26 = objc_msgSend(v14, "saveClientZoneToDB:", v11);
                    else
                      v26 = 0;
                    goto LABEL_21;
                  }
                }
                v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v27, v37, 16);
                if (v18)
                  continue;
                break;
              }
LABEL_21:
              v5 = v19;
              v8 = v23;
            }

          }
          ++v10;
        }
        while (v10 != v8);
        v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
      }
      while (v8);
    }
    else
    {
      v26 = 1;
    }

    v6 = v26;
  }

  return v6 & 1;
}

uint64_t br_update_tables_16_019(uint64_t a1, void *a2, char a3)
{
  uint64_t v3;
  void *v4;

  if ((a3 & 1) != 0)
    return 1;
  v4 = (void *)objc_msgSend(a2, "numberWithSQL:", CFSTR("SELECT 1 FROM client_items WHERE item_bouncedname LIKE '%%.icloud'"));
  v3 = objc_msgSend(v4, "BOOLValue") ^ 1;

  return v3;
}

uint64_t br_update_tables_16_020(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if ((a3 & 1) != 0)
  {
    v8 = 1;
  }
  else if (objc_msgSend(v6, "execute:", CFSTR("DROP TRIGGER IF EXISTS \"visible_child_count/reparent\""))
         && objc_msgSend(v7, "execute:", CFSTR("DROP TRIGGER IF EXISTS \"visible_child_count/visibility\""))&& objc_msgSend(v7, "execute:", CFSTR("CREATE TRIGGER \"visible_child_count/reparent\" AFTER UPDATE OF item_parent_id, item_parent_zone_rowid ON client_items WHEN (new.item_parent_id != old.item_parent_id OR new.item_parent_zone_rowid != old.item_parent_zone_rowid) BEGIN UPDATE OR IGNORE client_items SET   visible_child_count = visible_child_count - 1  WHERE (old.item_user_visible = 1 OR old.item_scope = 3) AND item_id = old.item_parent_id AND zone_rowid = old.item_parent_zone_rowid AND old.item_filename != \".Trash\" ; UPDATE OR IGNORE client_items SET   visible_child_count = visible_child_count + 1  WHERE (old.item_user_visible = 1 OR old.item_scope = 3) AND item_id = new.item_parent_id AND zone_rowid = new.item_parent_zone_rowid AND new.item_filename != \".Trash\" ; END")))
  {
    v8 = objc_msgSend(v7, "execute:", CFSTR("CREATE TRIGGER \"visible_child_count/visibility\" AFTER UPDATE OF item_user_visible, item_scope ON client_items WHEN (new.item_user_visible != old.item_user_visible OR new.item_scope != old.item_scope) BEGIN UPDATE OR IGNORE client_items SET   visible_child_count = visible_child_count + (new.item_user_visible | (new.item_scope == 3)) - (old.item_user_visible | (old.item_scope == 3)) WHERE item_id == new.item_parent_id AND zone_rowid = new.item_parent_zone_rowid AND new.item_filename != \".Trash\" ; END"));
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t br_update_tables_16_022(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if ((a3 & 1) != 0)
  {
    v8 = 1;
  }
  else if (objc_msgSend(v6, "execute:", CFSTR("CREATE INDEX \"client_items/sync_state_job_recovery\" ON client_items(item_localsyncupstate) WHERE item_localsyncupstate != 0")))
  {
    v8 = objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_items/download_job\" ON client_items(rowid) WHERE desired_version IS NOT NULL"));
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t br_update_tables_17_000()
{
  return 1;
}

uint64_t br_update_tables_17_001()
{
  return 1;
}

uint64_t br_update_tables_18_000(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if ((a3 & 1) != 0)
  {
    v8 = 1;
  }
  else if (objc_msgSend(v6, "execute:", CFSTR("DROP INDEX IF EXISTS \"client_items/shared_item_library\""))&& objc_msgSend(v7, "execute:", CFSTR("UPDATE client_downloads SET transfer_queue = '_retry' WHERE transfer_queue = 'com.apple.SharedDocs'")))
  {
    v8 = objc_msgSend(v7, "execute:", CFSTR("UPDATE client_uploads SET transfer_queue = '_retry' WHERE transfer_queue = 'com.apple.SharedDocs'"));
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t br_update_tables_19_000(uint64_t a1, void *a2, int a3)
{
  id v4;
  void *v5;
  void *v6;
  char v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  uint8_t buf[4];
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  if (a3)
  {
    objc_msgSend(MEMORY[0x1E0DC5EE8], "sharedManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "currentPersona");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "isDataSeparatedPersona");

    if ((v7 & 1) == 0)
    {
      v8 = (void *)objc_msgSend(v4, "fetch:", CFSTR("SELECT config_plist FROM server_state WHERE config_plist IS NOT NULL"));
      if (objc_msgSend(v8, "next"))
      {
        v9 = (void *)MEMORY[0x1E0C99E60];
        v10 = objc_opt_class();
        v11 = objc_opt_class();
        v12 = objc_opt_class();
        v13 = objc_opt_class();
        v14 = objc_opt_class();
        objc_msgSend(v9, "setWithObjects:", v10, v11, v12, v13, v14, objc_opt_class(), 0);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "unarchivedObjectOfClasses:atIndex:", v15, 0);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          +[BRCUserDefaults cachedServerConfigurationPath](BRCUserDefaults, "cachedServerConfigurationPath");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "writeToFile:atomically:", v17, 1);
        }
        else
        {
          brc_bread_crumbs();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          brc_default_log();
          v19 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            v22 = v17;
            _os_log_impl(&dword_1CBD43000, v19, OS_LOG_TYPE_DEFAULT, "[WARNING] Cannot decode configuration plist from the database%@", buf, 0xCu);
          }

        }
      }

    }
    if (objc_msgSend(v4, "execute:", CFSTR("CREATE TABLE server_state_tmp (state)"))
      && objc_msgSend(v4, "execute:", CFSTR("INSERT INTO server_state_tmp (state) SELECT state FROM server_state"))&& objc_msgSend(v4, "execute:", CFSTR("DROP TABLE server_state")))
    {
      v18 = objc_msgSend(v4, "execute:", CFSTR("ALTER TABLE server_state_tmp RENAME TO server_state"));
    }
    else
    {
      v18 = 0;
    }
  }
  else
  {
    v18 = 1;
  }

  return v18;
}

uint64_t br_update_tables_19_001(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if ((a3 & 1) != 0)
  {
    v8 = 1;
  }
  else if (objc_msgSend(v6, "execute:", CFSTR("ALTER TABLE client_items ADD COLUMN version_old_zone_item_id blob"))&& objc_msgSend(v7, "execute:", CFSTR("ALTER TABLE client_items ADD COLUMN version_old_zone_rowid integer")))
  {
    v8 = objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_items/version_old_zone_rowid\" ON client_items (version_old_zone_rowid)"));
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t br_update_tables_20_000()
{
  return 1;
}

uint64_t br_update_tables_20_001(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if ((a3 & 1) != 0)
  {
    v8 = 1;
  }
  else if (objc_msgSend(v6, "execute:", CFSTR("ALTER TABLE client_items ADD COLUMN version_block_sync_until_timestamp integer default null"))&& objc_msgSend(v7, "execute:", CFSTR("ALTER TABLE client_items ADD COLUMN version_block_sync_until_bundle_id text default null"))&& objc_msgSend(v7, "execute:", CFSTR("ALTER TABLE client_items ADD COLUMN version_block_sync_until_resuming integer default null")))
  {
    v8 = objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_items/version_block_sync_timestamp\" ON client_items (version_block_sync_until_timestamp)"));
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t br_update_tables_20_002()
{
  return 1;
}

uint64_t br_update_tables_20_003(void *a1, void *a2, int a3)
{
  id v5;
  id v6;
  void *v7;
  char v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t j;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t k;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t m;
  void *v35;
  void *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[128];
  _BYTE v55[128];
  _BYTE v56[128];
  _BYTE v57[128];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (a3)
  {
    if (objc_msgSend(v6, "execute:", CFSTR("CREATE TRIGGER \"server_items/orphan_reschedule\" AFTER INSERT ON server_items BEGIN UPDATE server_items SET item_depth = 0 WHERE new.item_type IN (0, 9, 10)   AND item_parent_id = new.item_id   AND zone_rowid = new.zone_rowid   AND item_depth = -2   AND item_rank IS NULL; END")))
      v8 = objc_msgSend(v7, "execute:", CFSTR("CREATE TRIGGER \"server_items/orphan_reschedule_propagation\" AFTER UPDATE OF item_depth ON server_items BEGIN UPDATE server_items SET item_depth = 0 WHERE new.item_depth = 0 AND old.item_depth = -2   AND new.item_type IN (0, 9, 10)   AND item_parent_id = new.item_id   AND zone_rowid = new.zone_rowid   AND item_depth = -2   AND item_rank IS NULL; END"));
    else
      v8 = 0;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    objc_msgSend(v5, "_privateServerZonesEnumerator:", v7);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v50, v57, 16);
    if (v18)
    {
      v19 = v18;
      v20 = *(_QWORD *)v51;
      do
      {
        for (i = 0; i != v19; ++i)
        {
          if (*(_QWORD *)v51 != v20)
            objc_enumerationMutation(v17);
          v22 = *(void **)(*((_QWORD *)&v50 + 1) + 8 * i);
          objc_msgSend(v22, "changeState");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "changeToken");
          v24 = (void *)objc_claimAutoreleasedReturnValue();

          if (v24)
            objc_msgSend(v22, "setStateBits:", 60);
          if ((v8 & 1) != 0)
            v8 = objc_msgSend(v5, "saveServerZone:toDB:", v22, v7);
          else
            v8 = 0;
        }
        v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v50, v57, 16);
      }
      while (v19);
    }
  }
  else
  {
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v37 = v5;
    objc_msgSend(v5, "_appLibrariesEnumerator:version:", v6, 2);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v46, v56, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v47;
      v8 = 1;
      do
      {
        for (j = 0; j != v11; ++j)
        {
          if (*(_QWORD *)v47 != v12)
            objc_enumerationMutation(v9);
          v14 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * j);
          objc_msgSend(v14, "dbRowID");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = (void *)objc_msgSend(v7, "numberWithSQL:", CFSTR("SELECT 1 FROM client_items WHERE app_library_rowid = %@ AND item_stat_ckinfo IS NOT NULL LIMIT 1"), v15);

          if (objc_msgSend(v16, "BOOLValue"))
          {
            objc_msgSend(v14, "setStateBits:", 369098752);
            if ((v8 & 1) != 0)
              v8 = objc_msgSend(v37, "saveAppLibrary:toDB:supportsEnhancedDrivePrivacy:", v14, v7, 0);
            else
              v8 = 0;
          }

        }
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v46, v56, 16);
      }
      while (v11);
    }
    else
    {
      v8 = 1;
    }

    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v5 = v37;
    objc_msgSend(v37, "_privateClientZonesEnumerator");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v42, v55, 16);
    if (v26)
    {
      v27 = v26;
      v28 = *(_QWORD *)v43;
      do
      {
        for (k = 0; k != v27; ++k)
        {
          if (*(_QWORD *)v43 != v28)
            objc_enumerationMutation(v25);
          v30 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * k);
          if ((objc_msgSend(v30, "state") & 0x10000) != 0)
          {
            objc_msgSend(v30, "setStateBits:", 256);
            objc_msgSend(v30, "clearStateBits:", 0x10000);
            if ((v8 & 1) != 0)
              v8 = objc_msgSend(v37, "saveClientZoneToDB:", v30);
            else
              v8 = 0;
          }
        }
        v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v42, v55, 16);
      }
      while (v27);
    }

    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    objc_msgSend(v37, "_sharedClientZonesEnumerator");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v38, v54, 16);
    if (v31)
    {
      v32 = v31;
      v33 = *(_QWORD *)v39;
      do
      {
        for (m = 0; m != v32; ++m)
        {
          if (*(_QWORD *)v39 != v33)
            objc_enumerationMutation(v17);
          v35 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * m);
          if ((objc_msgSend(v35, "state") & 0x10000) != 0)
          {
            objc_msgSend(v35, "setStateBits:", 256);
            objc_msgSend(v35, "clearStateBits:", 0x10000);
            if ((v8 & 1) != 0)
              v8 = objc_msgSend(v37, "saveClientZoneToDB:", v35);
            else
              v8 = 0;
          }
        }
        v32 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v38, v54, 16);
      }
      while (v32);
    }
  }

  return v8 & 1;
}

uint64_t br_update_tables_20_004(uint64_t a1, void *a2, int a3)
{
  if (a3)
    return objc_msgSend(a2, "execute:", CFSTR("CREATE INDEX \"server_items/item_lastusedtime\" ON server_items(item_lastusedtime DESC)"));
  else
    return 1;
}

uint64_t br_update_tables_20_005(uint64_t a1, void *a2, char a3)
{
  if ((a3 & 1) != 0)
    return 1;
  else
    return recursive_table_recreate_schema(a2);
}

uint64_t br_update_tables_20_006(uint64_t a1, void *a2, char a3)
{
  if ((a3 & 1) != 0)
    return 1;
  else
    return objc_msgSend(a2, "execute:", CFSTR("CREATE TABLE IF NOT EXISTS ciconia_history(date integer NOT NULL, os text NOT NULL, br text NOT NULL, bird_schema integer NOT NULL, db_schema integer NOT NULL, ciconia_version integer NOT NULL, last_error text, duration real NOT NULL, uuid text NOT NULL, PRIMARY KEY (uuid))"));
}

uint64_t br_update_tables_21_000(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  NSObject *v15;
  id v16;
  void *v17;
  uint64_t v18;
  id v20;
  _QWORD v21[4];
  void *v22;
  id v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  id v27;
  __int16 v28;
  void *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  if (objc_msgSend(MEMORY[0x1E0D10E50], "hasDaemonicParts"))
  {
    objc_msgSend(v5, "stageRegistry");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v7 = 0;
  }
  v8 = objc_opt_new();
  v9 = (void *)v8;
  if ((a3 & 1) != 0)
  {
    v10 = (void *)objc_msgSend(v6, "fetch:", CFSTR("SELECT signature, data FROM server_xattr_blobs"));
    if (objc_msgSend(v10, "next"))
    {
      do
      {
        v11 = (void *)MEMORY[0x1D17A6BE8]();
        objc_msgSend(v10, "dataAtIndex:", 0);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "dataAtIndex:", 1);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = 0;
        if ((objc_msgSend(v9, "containsObject:", v12) & 1) == 0)
        {
          if (v7 && (objc_msgSend(v7, "saveXattrBlob:forSignature:error:", v13, v12, &v20) & 1) == 0)
          {
            brc_bread_crumbs();
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            brc_default_log();
            v15 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 138412802;
              v25 = v12;
              v26 = 2112;
              v27 = v20;
              v28 = 2112;
              v29 = v14;
              _os_log_fault_impl(&dword_1CBD43000, v15, OS_LOG_TYPE_FAULT, "[CRIT] UNREACHABLE: Couldn't save xattr blob for signature %@.  Continuing anyway - %@%@", buf, 0x20u);
            }

          }
          else if ((unint64_t)objc_msgSend(v9, "count") <= 0x7F)
          {
            objc_msgSend(v9, "addObject:", v12);
          }
        }

        objc_autoreleasePoolPop(v11);
      }
      while ((objc_msgSend(v10, "next") & 1) != 0);
    }
    v18 = objc_msgSend(v6, "execute:", CFSTR("DROP TABLE server_xattr_blobs"));
  }
  else
  {
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 3221225472;
    v21[2] = __br_update_tables_21_000_block_invoke;
    v21[3] = &unk_1E87608E8;
    v22 = (void *)v8;
    v23 = v7;
    v16 = v9;
    v17 = (void *)MEMORY[0x1D17A6DB0](v21);
    objc_msgSend(v6, "execute:", CFSTR("UPDATE client_pkg_items SET xattrs = call_block(%p, xattrs) WHERE xattrs IS NOT NULL"), v17);

    v18 = 1;
    v10 = v22;
  }

  return v18;
}

uint64_t br_update_tables_21_001(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if ((a3 & 1) != 0)
  {
    v8 = 1;
  }
  else if (objc_msgSend(v6, "execute:", CFSTR("CREATE INDEX \"client_items/share_id\" on client_items(app_library_rowid) WHERE (item_sharing_options & 4) != 0")))
  {
    v8 = objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_items/oob_sync_ack\" on client_items(zone_rowid) WHERE (item_local_diffs & 1152921504606846976) != 0"));
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t br_update_tables_21_002(uint64_t a1, void *a2, char a3)
{
  if ((a3 & 1) != 0)
    return 1;
  else
    return objc_msgSend(a2, "execute:", CFSTR("CREATE INDEX \"ciconia_history/counting_index\" ON ciconia_history(ciconia_version)"));
}

uint64_t br_update_tables_21_003(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  const __CFString *v8;
  uint64_t v9;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if ((a3 & 1) == 0)
  {
    if ((objc_msgSend(v6, "execute:", CFSTR("CREATE INDEX \"client_items/item_xattr_signature\" ON client_items(item_xattr_signature)")) & 1) != 0)
    {
      v8 = CFSTR("CREATE INDEX \"client_items/version_xattr_signature\" ON client_items(version_xattr_signature)");
      goto LABEL_8;
    }
LABEL_9:
    v9 = 0;
    goto LABEL_10;
  }
  if (!objc_msgSend(v6, "execute:", CFSTR("DROP INDEX IF EXISTS \"server_items/item_xattr_signature\""))
    || !objc_msgSend(v7, "execute:", CFSTR("DROP INDEX IF EXISTS \"server_items/version_xattr_signature\""))|| !objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"server_items/item_xattr_signature\" ON server_items(item_xattr_signature)")))
  {
    goto LABEL_9;
  }
  v8 = CFSTR("CREATE INDEX \"server_items/version_xattr_signature\" ON server_items(version_xattr_signature)");
LABEL_8:
  v9 = objc_msgSend(v7, "execute:", v8);
LABEL_10:

  return v9;
}

uint64_t br_update_tables_21_004(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if ((a3 & 1) != 0)
  {
    v8 = 1;
  }
  else if (objc_msgSend(v6, "execute:", CFSTR("ALTER TABLE telemetry_events ADD COLUMN priority integer not null default 0")))
  {
    v8 = objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"telemetry_events/priority\" ON telemetry_events (priority) WHERE priority = 1"));
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t br_update_tables_21_005(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  const __CFString *v8;
  uint64_t v9;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if ((a3 & 1) == 0)
  {
    if (objc_msgSend(v6, "execute:", CFSTR("DROP INDEX \"client_document_access/modify_access_item\""))
      && objc_msgSend(v7, "execute:", CFSTR("DROP INDEX \"tombstones/notif_rank\""))
      && objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"tombstones/notif_rank\" ON tombstones (notif_rank)"))&& objc_msgSend(v7, "execute:", CFSTR("DROP INDEX \"client_items/version_block_sync_timestamp\""))&& objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"client_items/version_block_sync_until_timestamp\" ON client_items (version_block_sync_until_timestamp) WHERE version_block_sync_until_timestamp IS NOT NULL"))&& (objc_msgSend(v7, "execute:", CFSTR("CREATE INDEX \"telemetry_events/priority__rowid\" ON telemetry_events (priority, rowid)")) & 1) != 0)
    {
      v8 = CFSTR("CREATE INDEX \"client_items/item_type_dir-fault\" ON client_items (item_type) WHERE item_type IN (9, 10)");
      goto LABEL_4;
    }
LABEL_12:
    v9 = 0;
    goto LABEL_13;
  }
  if (!objc_msgSend(v6, "execute:", CFSTR("CREATE INDEX \"server_items/item_type_dir-fault\" ON server_items (item_type) WHERE item_type IN (9, 10)")))goto LABEL_12;
  v8 = CFSTR("CREATE INDEX \"server_items/item_type_folder\" ON server_items (item_type) WHERE item_type IN (0, 9, 10)");
LABEL_4:
  v9 = objc_msgSend(v7, "execute:", v8);
LABEL_13:

  return v9;
}

uint64_t br_update_tables_21_006(uint64_t a1, void *a2, char a3)
{
  if ((a3 & 1) != 0)
    return 1;
  else
    return objc_msgSend(a2, "execute:", CFSTR("ALTER TABLE ciconia_history ADD COLUMN last_originator integer default 0"));
}

uint64_t br_update_tables_21_007(uint64_t a1, void *a2, char a3)
{
  id v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;

  if ((a3 & 1) != 0)
    return 1;
  v4 = a2;
  v5 = objc_msgSend(v4, "execute:", CFSTR("DROP INDEX IF EXISTS \"client_sync_up/sync_state_index\""));
  v6 = v5 & objc_msgSend(v4, "execute:", CFSTR("CREATE INDEX IF NOT EXISTS \"client_sync_up/throttle_state_index\" ON client_sync_up (throttle_state, zone_rowid) WHERE throttle_state != 0"));
  v7 = objc_msgSend(v4, "execute:", CFSTR("DROP INDEX IF EXISTS \"client_uploads/blocked_on_sync_up_state_index\""));
  v8 = objc_msgSend(v4, "execute:", CFSTR("CREATE INDEX \"client_uploads/blocked_on_sync_up_state_index\" ON client_uploads (throttle_state) WHERE throttle_state = 31"));

  return v6 & v7 & v8;
}

uint64_t br_internal_fixup_10_000(uint64_t a1, void *a2, char a3)
{
  uint64_t v3;
  id v4;
  void *v5;

  if ((a3 & 1) != 0)
    return 1;
  v4 = a2;
  v5 = (void *)objc_msgSend(v4, "fetchObjectOfClass:sql:", objc_opt_class(), CFSTR("SELECT 1 FROM client_items WHERE item_state in (0, -1)  AND NOT EXISTS (SELECT 1 FROM app_libraries WHERE client_items.app_library_rowid = app_libraries.rowid)"));

  v3 = objc_msgSend(v5, "BOOLValue") ^ 1;
  return v3;
}

uint64_t br_internal_fixup_20_005(uint64_t a1, void *a2, char a3)
{
  if ((a3 & 1) != 0)
    return 1;
  else
    return recursive_table_recreate_schema(a2);
}

uint64_t br_fixup_tables_4_013(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t j;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  if ((a3 & 1) != 0)
  {
    v7 = 1;
  }
  else
  {
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    objc_msgSend(v5, "_privateClientZonesEnumerator");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v24;
      LOBYTE(v7) = 1;
      do
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(_QWORD *)v24 != v11)
            objc_enumerationMutation(v8);
          if ((v7 & 1) != 0)
            v7 = upgradeItemScopesForClientZone(*(void **)(*((_QWORD *)&v23 + 1) + 8 * i), v6);
          else
            v7 = 0;
        }
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
      }
      while (v10);
    }
    else
    {
      v7 = 1;
    }

    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    objc_msgSend(v5, "_sharedClientZonesEnumerator", 0);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)v20;
      do
      {
        for (j = 0; j != v15; ++j)
        {
          if (*(_QWORD *)v20 != v16)
            objc_enumerationMutation(v13);
          if ((v7 & 1) != 0)
            v7 = upgradeItemScopesForClientZone(*(void **)(*((_QWORD *)&v19 + 1) + 8 * j), v6);
          else
            v7 = 0;
        }
        v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
      }
      while (v15);
    }

  }
  return v7;
}

uint64_t br_fixup_tables_4_017()
{
  return 1;
}

uint64_t br_fixup_tables_4_019(void *a1, void *a2, int a3)
{
  id v5;
  id v6;
  void *v7;
  const __CFString *v8;
  uint64_t v9;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (!a3)
  {
    if (objc_msgSend(v6, "execute:", CFSTR("UPDATE client_items SET item_filename = call_block(%@, item_filename) WHERE item_filename != call_block(%@, item_filename)"), &__block_literal_global_1229, &__block_literal_global_1229)&& objc_msgSend(v7, "execute:", CFSTR("UPDATE client_items SET version_name = call_block(%@, version_name) WHERE version_name IS NOT NULL AND version_name != call_block(%@, version_name)"), &__block_literal_global_1229, &__block_literal_global_1229)&& objc_msgSend(v7, "execute:", CFSTR("UPDATE client_items SET item_localname = call_block(%@, item_localname) WHERE item_localname IS NOT NULL AND item_localname != call_block(%@, item_localname)"), &__block_literal_global_1229, &__block_literal_global_1229))
    {
      v8 = CFSTR("UPDATE client_items SET item_bouncedname = call_block(%@, item_bouncedname) WHERE item_bouncedname IS NOT NULL AND item_bouncedname != call_block(%@, item_bouncedname)");
      goto LABEL_9;
    }
LABEL_10:
    v9 = 0;
    goto LABEL_11;
  }
  if (!objc_msgSend(v6, "execute:", CFSTR("UPDATE server_items SET item_filename = call_block(%@, item_filename) WHERE item_filename != call_block(%@, item_filename)"), &__block_literal_global_1229, &__block_literal_global_1229)|| (objc_msgSend(v7, "execute:", CFSTR("UPDATE server_items SET item_origname = call_block(%@, item_origname) WHERE item_origname IS NOT NULL AND item_origname != call_block(%@, item_origname)"), &__block_literal_global_1229, &__block_literal_global_1229) & 1) == 0)
  {
    goto LABEL_10;
  }
  v8 = CFSTR("UPDATE server_items SET version_name = call_block(%@, version_name) WHERE version_name IS NOT NULL AND version_name != call_block(%@, version_name)");
LABEL_9:
  v9 = objc_msgSend(v7, "execute:", v8, &__block_literal_global_1229, &__block_literal_global_1229);
LABEL_11:

  return v9;
}

uint64_t br_fixup_tables_4_020(uint64_t a1, void *a2, char a3)
{
  if ((a3 & 1) != 0)
    return 1;
  else
    return objc_msgSend(a2, "execute:", CFSTR("UPDATE client_document_access     SET evictable = call_block(%@, access_time, (SELECT version_mtime FROM client_items AS ci WHERE ci.rowid = item_rowid))  WHERE evictable > 0"), &__block_literal_global_1246);
}

uint64_t br_fixup_tables_7_001(void *a1, void *a2, int a3, void **a4)
{
  id v6;
  id v7;
  void *v8;
  uint64_t v9;

  if (!a3)
    return 1;
  v6 = a2;
  v7 = a1;
  +[BRCMigrationQueryOperation documentSharesMigrationKey](BRCMigrationQueryOperation, "documentSharesMigrationKey");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = _br_setupMigrationQueryOnServerTruth(v8, v7, v6, a4);

  return v9;
}

uint64_t br_fixup_tables_7_002(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if ((a3 & 1) != 0)
  {
    v8 = 1;
  }
  else if (objc_msgSend(v6, "execute:", CFSTR("UPDATE client_uploads SET throttle_state = 1 WHERE throttle_id in (SELECT throttle_id FROM client_items, client_uploads WHERE client_items.rowid = client_uploads.throttle_id AND item_localsyncupstate = 3)"))&& objc_msgSend(v7, "execute:", CFSTR("INSERT INTO client_uploads (throttle_id, zone_rowid, throttle_state, retry_count, last_try_stamp, next_retry_stamp, expire_stamp, item_id, transfer_queue, transfer_size, transfer_record, transfer_stage, transfer_operation, upload_error, upload_priority, upload_request_stamp, app_library_rowid) SELECT client_items.rowid, zone_rowid, 1, 0, 0, 0, 0, item_id, \"_prepare\", version_size + version_thumb_size, NULL, NULL, NULL, NULL, -1, 0, app_library_rowid FROM client_items WHERE item_type IN (1, 6) AND item_localsyncupstate = 3 AND rowid NOT IN (SELECT throttle_id from client_uploads)"))&& objc_msgSend(v7, "execute:", CFSTR("UPDATE client_downloads SET throttle_state = 1 WHERE throttle_id in(SELECT throttle_id FROM client_items, client_downloads WHERE client_items.rowid = client_downloads.throttle_id AND item_type IN (1, 2, 6, 7) AND desired_version is not NULL AND call_block(%@, desired_version))"), &__block_literal_global_1253))
  {
    v8 = objc_msgSend(v7, "execute:", CFSTR("INSERT INTO client_downloads (throttle_id, zone_rowid, throttle_state, retry_count, last_try_stamp, next_retry_stamp, expire_stamp, item_id, transfer_queue, transfer_size, transfer_record, transfer_stage, transfer_operation, download_kind, download_etag, download_priority, download_request_stamp, download_error, unit_count_completed, app_library_rowid) SELECT client_items.rowid, client_items.zone_rowid, 1, 0, 0, 0, 0, item_id, call_block(%@, app_library_owner, app_library_name), call_block(%@, desired_version), NULL, NULL, NULL, 0, call_block(%@, desired_version), -1, 0, NULL, 0, app_library_rowid FROM client_items, app_libraries, client_zones WHERE client_items.app_library_rowid = app_libraries.rowid AND app_libraries.zone_rowid = client_zones.rowid AND item_type IN (1, 2, 6, 7) AND desired_version is not NULL AND client_items.rowid NOT IN (SELECT throttle_id from client_downloads) AND call_block(%@, desired_version)"), &__block_literal_global_1257, &__block_literal_global_1260, &__block_literal_global_1262, &__block_literal_global_1263);
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t br_fixup_tables_15_004(uint64_t a1, void *a2, char a3)
{
  if ((a3 & 1) != 0)
    return 1;
  else
    return objc_msgSend(a2, "execute:", CFSTR("INSERT OR REPLACE INTO client_uploads  (throttle_id, zone_rowid, app_library_rowid, transfer_size, throttle_state, transfer_queue) SELECT rowid, zone_rowid, app_library_rowid, version_size + version_thumb_size, 1, %s FROM client_items WHERE item_localsyncupstate == 3 AND rowid NOT IN (SELECT throttle_id FROM client_uploads WHERE throttle_state != 0)"), "_prepare");
}

void __br_update_tables_1_000_block_invoke(uint64_t a1, sqlite3_context *a2, uint64_t a3, sqlite3_value **a4)
{
  sqlite3_value *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  const __CFString *v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v5 = *a4;
  v6 = (void *)MEMORY[0x1E0C99E60];
  v7 = objc_opt_class();
  objc_msgSend(v6, "setWithObjects:", v7, objc_opt_class(), 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  _unarchivedSqliteValue(v5, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v9, "count"))
  {
    v14 = CFSTR("l");
    v15[0] = v9;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v15, &v14, 1);
    v10 = (id)objc_claimAutoreleasedReturnValue();
    v11 = (void *)MEMORY[0x1D17A6BE8]();
    v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB36F8]), "initRequiringSecureCoding:", 1);
    objc_msgSend(v12, "encodeObject:forKey:", v10, *MEMORY[0x1E0CB2CD0]);
    objc_msgSend(v12, "encodedData");
    v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    sqlite3_result_blob(a2, (const void *)objc_msgSend(v13, "bytes"), objc_msgSend(v13, "length"), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);

    objc_autoreleasePoolPop(v11);
  }
  else
  {
    sqlite3_result_null(a2);
  }

}

id _unarchivedSqliteValue(sqlite3_value *a1, void *a2)
{
  objc_class *v3;
  id v4;
  id v5;
  const void *v6;
  void *v7;
  void *v8;
  void *v9;

  v3 = (objc_class *)MEMORY[0x1E0C99D50];
  v4 = a2;
  v5 = [v3 alloc];
  v6 = sqlite3_value_blob(a1);
  v7 = (void *)objc_msgSend(v5, "initWithBytesNoCopy:length:freeWhenDone:", v6, sqlite3_value_bytes(a1), 0);
  v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3710]), "initForReadingFromData:error:", v7, 0);
  objc_msgSend(v8, "decodeObjectOfClasses:forKey:", v4, *MEMORY[0x1E0CB2CD0]);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

void __br_update_tables_2_000_block_invoke(uint64_t a1, sqlite3_context *a2, uint64_t a3, _QWORD *a4)
{
  void *v6;
  void *v7;
  sqlite3_int64 v8;
  uint64_t v9;
  id v10;

  v6 = *(void **)(a1 + 32);
  v7 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "newFromSqliteValue:", *a4);
  objc_msgSend(v6, "objectForKeyedSubscript:", v7);
  v10 = (id)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v8 = objc_msgSend(v10, "unsignedLongLongValue");
  }
  else
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v8 = *(_QWORD *)(v9 + 24);
    *(_QWORD *)(v9 + 24) = v8 + 1;
  }
  sqlite3_result_int64(a2, v8);

}

void __br_update_tables_3_002_block_invoke(uint64_t a1, sqlite3_context *a2, uint64_t a3, sqlite3_value **a4)
{
  id v7;

  if (sqlite3_value_type(*a4) == 4)
  {
    _unarchivedSqliteValue(*a4, *(void **)(a1 + 32));
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      sqlite3_result_int(a2, objc_msgSend(v7, "options"));

      return;
    }

  }
  sqlite3_result_int(a2, 0);
}

void __br_update_tables_7_000_block_invoke(uint64_t a1, sqlite3_context *a2, uint64_t a3, sqlite3_value **a4)
{
  _BYTE *v7;
  int v8;
  int v9;
  unsigned __int8 *v10;
  _BYTE *v11;
  sqlite3_context *v12;
  int v13;
  void *v14;
  NSObject *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  NSObject *v19;
  int v20;
  int v21;
  _BYTE v22[24];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v7 = sqlite3_value_blob(*a4);
  v8 = sqlite3_value_bytes(*a4);
  v9 = v8;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    sqlite3_result_blob(a2, v7, v8, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    return;
  }
  if (v8 != 5)
  {
    brc_bread_crumbs();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, (os_log_type_t)0x90u))
      __br_update_tables_7_000_block_invoke_cold_2();

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    v12 = a2;
    v11 = v7;
    v13 = v9;
    goto LABEL_17;
  }
  v10 = (unsigned __int8 *)sqlite3_value_blob(a4[1]);
  if (sqlite3_value_bytes(a4[1]) != 21)
  {
    brc_bread_crumbs();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, (os_log_type_t)0x90u))
      __br_update_tables_7_000_block_invoke_cold_1();

    goto LABEL_16;
  }
  if (*v7 != 1)
  {
    brc_bread_crumbs();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, (os_log_type_t)0x90u))
    {
      v20 = *v7;
      v21 = *v10;
      *(_DWORD *)v22 = 67109634;
      *(_DWORD *)&v22[4] = v20;
      *(_WORD *)&v22[8] = 1024;
      *(_DWORD *)&v22[10] = v21;
      *(_WORD *)&v22[14] = 2112;
      *(_QWORD *)&v22[16] = v18;
      _os_log_error_impl(&dword_1CBD43000, v19, (os_log_type_t)0x90u, "[ERROR] type mismatch with parent %d or item %d%@", v22, 0x18u);
    }

LABEL_16:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    v12 = a2;
    v11 = v7;
    v13 = 5;
    goto LABEL_17;
  }
  v22[0] = 5;
  *(_DWORD *)&v22[1] = *(_DWORD *)(v7 + 1);
  *(_OWORD *)&v22[5] = *(_OWORD *)(v10 + 5);
  v11 = v22;
  v12 = a2;
  v13 = 21;
LABEL_17:
  sqlite3_result_blob(v12, v11, v13, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
}

uint64_t __Block_byref_object_copy__24(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__24(uint64_t a1)
{

}

uint64_t __br_update_tables_10_000_block_invoke(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  _QWORD v15[4];
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  int v20;
  char v21;

  v4 = objc_msgSend(*(id *)(a1 + 32), "fileID");
  if (v4 == objc_msgSend(*(id *)(a1 + 40), "parentFileID"))
  {
    objc_msgSend(*(id *)(a1 + 40), "filename");
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

    brc_bread_crumbs();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      __br_update_tables_10_000_block_invoke_cold_1();

    v10 = 0;
  }
  else
  {
    v11 = *(void **)(a1 + 32);
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __br_update_tables_10_000_block_invoke_706;
    v15[3] = &unk_1E8762790;
    v16 = *(id *)(a1 + 48);
    v21 = *(_BYTE *)(a1 + 64);
    v20 = a2;
    v17 = *(id *)(a1 + 40);
    v12 = *(id *)(a1 + 32);
    v13 = *(_QWORD *)(a1 + 56);
    v18 = v12;
    v19 = v13;
    if (objc_msgSend(v11, "performOnOpenFileDescriptor:error:", v15, 0))
      v10 = 0;
    else
      v10 = 16;

    v8 = v16;
  }

  return v10;
}

uint64_t __br_update_tables_10_000_block_invoke_706(uint64_t a1, int a2)
{
  void *v4;
  id v5;
  unint64_t v6;
  void *v7;
  void *v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  uint64_t v13;
  id v14;
  const char *v15;
  int v16;
  void *v17;
  int v18;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  NSObject *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  stat v33;
  id v34;
  unint64_t v35;
  uint8_t buf[4];
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  _BYTE v43[14];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v34 = 0;
  v35 = 0;
  objc_msgSend(*(id *)(a1 + 32), "br_stringByDeletingPathBounceNo:andPathExtension:", &v35, &v34);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v34;
  v6 = v35;
  if (v35 > 0xFFFFFFFFFFFFFF37)
  {
LABEL_14:
    v19 = 16;
    goto LABEL_22;
  }
  while (1)
  {
    if (v6)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v6 + 1);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "br_representableHFSFileNameWithNumber:addedExtension:makeDotFile:", v7, v5, 0);
      v8 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      objc_msgSend(v4, "br_representableHFSFileNameWithNumber:addedExtension:makeDotFile:", 0, v5, 0);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
    }
    v9 = *(unsigned __int8 *)(a1 + 68);
    v10 = v9 > 8;
    v11 = (1 << v9) & 0x184;
    if (!v10 && v11 != 0)
    {
      objc_msgSend(v8, "br_sideFaultName");
      v13 = objc_claimAutoreleasedReturnValue();

      v8 = (void *)v13;
    }
    v14 = objc_retainAutorelease(v8);
    v15 = (const char *)objc_msgSend(v14, "br_fileSystemRepresentation");
    memset(&v33, 0, sizeof(v33));
    if (!fstatat(a2, v15, &v33, 32))
      goto LABEL_13;
    v16 = *(_DWORD *)(a1 + 64);
    objc_msgSend(*(id *)(a1 + 40), "filename");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = BRCRenameAt(v16, v17, a2, v14, 4u);

    if (!v18)
      break;
    v19 = *__error();
    if ((_DWORD)v19 != 17)
    {
      brc_bread_crumbs();
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v28 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v28, (os_log_type_t)0x90u))
      {
        v30 = *(_QWORD *)(a1 + 32);
        v31 = *(_QWORD *)(a1 + 40);
        v32 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 138413314;
        v37 = v30;
        v38 = 2112;
        v39 = v31;
        v40 = 2112;
        v41 = v32;
        v42 = 1024;
        *(_DWORD *)v43 = v19;
        *(_WORD *)&v43[4] = 2112;
        *(_QWORD *)&v43[6] = v27;
        _os_log_error_impl(&dword_1CBD43000, v28, (os_log_type_t)0x90u, "[ERROR] can't rename %@\n     from: %@\n       to: %@ %{errno}d%@", buf, 0x30u);
      }

      goto LABEL_21;
    }
LABEL_13:

    if (++v6 >= v35 + 200)
      goto LABEL_14;
  }
  brc_bread_crumbs();
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v21 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
  {
    v22 = *(_QWORD *)(a1 + 32);
    v23 = *(_QWORD *)(a1 + 40);
    v24 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 138413058;
    v37 = v22;
    v38 = 2112;
    v39 = v23;
    v40 = 2112;
    v41 = v24;
    v42 = 2112;
    *(_QWORD *)v43 = v20;
    _os_log_impl(&dword_1CBD43000, v21, OS_LOG_TYPE_INFO, "[INFO] renamed %@\n  from: %@\n    to: %@%@", buf, 0x2Au);
  }

  v25 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v26 = v14;
  v19 = 0;
  v27 = *(void **)(v25 + 40);
  *(_QWORD *)(v25 + 40) = v26;
LABEL_21:

LABEL_22:
  return v19;
}

void __br_update_tables_14_000_block_invoke(uint64_t a1, sqlite3_context *a2, uint64_t a3, sqlite3_value **a4)
{
  void *v5;
  uint64_t v6;
  id v7;
  sqlite3_int64 v8;
  void *v9;
  NSObject *v10;
  sqlite3_int64 v11;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", sqlite3_value_text(*a4));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (_CFURLCStringIsPromiseName())
  {
    objc_msgSend(v5, "substringWithRange:", 1, objc_msgSend(v5, "length") - 8);
    v6 = objc_claimAutoreleasedReturnValue();

    v5 = (void *)v6;
  }
  v11 = 0;
  v7 = (id)objc_msgSend(v5, "br_stringByDeletingPathBounceNo:", &v11);
  v8 = v11;
  if ((unint64_t)v11 > 1)
    goto LABEL_4;
  brc_bread_crumbs();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
    __br_update_tables_14_000_block_invoke_cold_1();

  v8 = v11;
  if (v11)
LABEL_4:
    sqlite3_result_int64(a2, v8);
  else
    sqlite3_result_null(a2);

}

void __br_update_tables_14_000_block_invoke_825(uint64_t a1, sqlite3_context *a2, uint64_t a3, sqlite3_value **a4)
{
  const unsigned __int8 *v6;
  const unsigned __int8 *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  NSObject *v21;
  id v22;
  unint64_t v23;
  uint64_t v24;

  v6 = sqlite3_value_text(*a4);
  v7 = sqlite3_value_text(a4[1]);
  if (_CFURLCStringIsPromiseName())
  {
    v8 = (void *)MEMORY[0x1D17A6BE8]();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v6);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "substringWithRange:", 1, objc_msgSend(v9, "length") - 8);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    v23 = 0;
    v24 = 0;
    v22 = 0;
    objc_msgSend(v10, "br_stringByDeletingPathBounceNo:andPathExtension:", &v24, &v22);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v22;
    v14 = (id)objc_msgSend(v11, "br_stringByDeletingPathBounceNo:", &v23);
    if (v24 == v23)
      goto LABEL_3;
    if (v23 > 1)
      goto LABEL_6;
    brc_bread_crumbs();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_FAULT))
      __br_update_tables_14_000_block_invoke_cold_1();

    if (v23)
    {
LABEL_6:
      v15 = (void *)MEMORY[0x1E0CB3940];
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "stringValue");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "br_representableHFSFileNameWithBase:suffix:extension:makeDotFile:", v12, v17, v13, 0);
      v18 = (void *)objc_claimAutoreleasedReturnValue();

      v19 = objc_retainAutorelease(v18);
      sqlite3_result_text(a2, (const char *)objc_msgSend(v19, "fileSystemRepresentation"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);

      objc_autoreleasePoolPop(v8);
    }
    else
    {
LABEL_3:

      objc_autoreleasePoolPop(v8);
      sqlite3_result_null(a2);
    }
  }
  else
  {
    sqlite3_result_text(a2, (const char *)v7, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  }
}

uint64_t _br_setupMigrationQueryOnServerTruth(void *a1, void *a2, void *a3, void **a4)
{
  id v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  NSObject *v26;
  id v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v29 = a1;
  v6 = a2;
  v7 = a3;
  v8 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  objc_msgSend(v6, "_privateServerZonesEnumerator:", v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v31;
    do
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v31 != v12)
          objc_enumerationMutation(v9);
        v14 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * i);
        objc_msgSend(v14, "changeState");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "changeToken");
        v16 = (void *)objc_claimAutoreleasedReturnValue();

        if (v16)
        {
          objc_msgSend(v14, "mangledID");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "addObject:", v17);

        }
      }
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
    }
    while (v11);
  }

  if (objc_msgSend(v8, "count"))
  {
    v18 = (void *)objc_msgSend(v7, "fetch:", CFSTR("SELECT state FROM server_state"));
    if (objc_msgSend(v18, "next"))
    {
      objc_msgSend(v18, "unarchivedObjectOfClass:atIndex:", objc_opt_class(), 0);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = v29;
      if (v19
        && (objc_msgSend(v8, "allObjects"),
            v21 = (void *)objc_claimAutoreleasedReturnValue(),
            objc_msgSend(v19, "initiateMigrationQueryForMangledIDs:key:", v21, v29),
            v21,
            (objc_msgSend(v7, "execute:", CFSTR("UPDATE server_state SET state = %@"), v19) & 1) == 0))
      {
        if (a4)
        {
          objc_msgSend(v7, "lastError");
          v23 = objc_claimAutoreleasedReturnValue();
          v24 = *a4;
          *a4 = (void *)v23;

        }
        brc_bread_crumbs();
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        brc_default_log();
        v26 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_FAULT))
          br_create_tables_initial_cold_1();

        v22 = 0;
      }
      else
      {
        v22 = 1;
      }
    }
    else
    {
      v19 = 0;
      v22 = 1;
      v20 = v29;
    }

  }
  else
  {
    v22 = 1;
    v20 = v29;
  }

  return v22;
}

id __br_update_tables_16_018_block_invoke(uint64_t a1, uint64_t a2)
{
  return (id)objc_msgSend(*(id *)(a1 + 32), "newAppLibraryFromPQLResultSet:version:", a2, 2);
}

uint64_t recursive_table_recreate_schema(void *a1)
{
  id v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;

  v1 = a1;
  v2 = objc_msgSend(v1, "execute:", CFSTR("DROP TABLE IF EXISTS item_recursive_properties"));
  v3 = v2 & objc_msgSend(v1, "execute:", CFSTR("DROP INDEX IF EXISTS \"item_recursive_properties/item_id\""));
  v4 = objc_msgSend(v1, "execute:", CFSTR("DROP INDEX IF EXISTS \"item_recursive_properties/item_parent_id\""));
  v5 = v3 & v4 & objc_msgSend(v1, "execute:", CFSTR("DROP TRIGGER IF EXISTS \"item_recursive_properties/insertion\""));
  v6 = objc_msgSend(v1, "execute:", CFSTR("DROP TRIGGER IF EXISTS \"item_recursive_properties/deletion\""));
  v7 = v6 & objc_msgSend(v1, "execute:", CFSTR("DROP TRIGGER IF EXISTS\"item_recursive_properties/reparent\""));
  v8 = v5 & v7 & objc_msgSend(v1, "execute:", CFSTR("DROP TRIGGER IF EXISTS \"item_recursive_properties/recursive_update\""));
  v9 = objc_msgSend(v1, "execute:", CFSTR("DROP TRIGGER IF EXISTS \"item_recursive_properties/recursive_reparent\""));
  v10 = v9 & objc_msgSend(v1, "execute:", CFSTR("DROP TRIGGER IF EXISTS \"item_recursive_properties/recursive_delete\""));
  v11 = v10 & objc_msgSend(v1, "execute:", CFSTR("DROP TRIGGER IF EXISTS \"item_recursive_properties/item_id_update\""));
  v12 = v8 & v11 & objc_msgSend(v1, "execute:", CFSTR("CREATE TABLE item_recursive_properties( item_rowid integer not null primary key, item_id blob not null, item_parent_id blob, item_type integer not null, zone_rowid integer not null, item_parent_zone_rowid  integer not null, dir_faults_count integer not null default 0, faults_count integer not null default 0, needs_faulting_count integer not null default 0, over_quota_count integer not null default 0, shared_by_me_count integer not null default 0, shared_to_me_count integer not null default 0, uploaded_size integer not null default 0, uploaded_count integer not null default 0, needs_upload_size integer not null default 0, needs_upload_count integer not null default 0, downloaded_size integer not null default 0, downloaded_count integer not null default 0, needs_download_size integer not null default 0, needs_download_count integer not null default 0, dl_unstaged_count integer not null default 0, needs_dl_unstage_count integer not null default 0, synced_up_count integer not null default 0, needs_sync_up_count integer not null default 0, needs_delete_doc_count  integer not null default 0)"));
  v13 = objc_msgSend(v1, "execute:", CFSTR("CREATE UNIQUE INDEX \"item_recursive_properties/item_id_zone_rowid\"ON item_recursive_properties (item_id, zone_rowid)"));
  v14 = v13 & objc_msgSend(v1, "execute:", CFSTR("CREATE INDEX \"item_recursive_properties/item_parent_id_zone_rowid\"ON item_recursive_properties (item_parent_id, item_parent_zone_rowid)"));
  v15 = v14 & objc_msgSend(v1, "execute:", CFSTR("CREATE TRIGGER \"item_recursive_properties/item_id_update\" AFTER UPDATE OF item_id, zone_rowid ON client_items WHEN (new.item_id != old.item_id OR new.zone_rowid != old.zone_rowid)  AND new.item_type IN (0, 9, 10, 4, 1, 2, 8) BEGIN UPDATE OR IGNORE item_recursive_properties SET   item_parent_id = new.item_id,  item_parent_zone_rowid = new.zone_rowid WHERE item_parent_id == old.item_id   AND item_parent_zone_rowid = old.zone_rowid ; UPDATE OR IGNORE item_recursive_properties SET   item_id = new.item_id,  zone_rowid = new.zone_rowid WHERE item_rowid == new.rowid ; END"));
  objc_msgSend(MEMORY[0x1E0DE81E0], "rawInjection:length:", "AND item_filename != '.Trash'", 29);
  v16 = objc_claimAutoreleasedReturnValue();
  v17 = v15 & objc_msgSend(v1, "execute:", CFSTR("INSERT INTO item_recursive_properties (item_rowid, item_id, item_parent_id, item_type, zone_rowid, item_parent_zone_rowid)SELECT rowid, item_id, item_parent_id, item_type, zone_rowid, item_parent_zone_rowid FROM client_items WHERE item_type IN (0, 9, 10, 4) %@"), v16);

  v18 = v12 & v17 & objc_msgSend(v1, "execute:", CFSTR("CREATE TRIGGER \"item_recursive_properties/insertion\" AFTER INSERT ON client_items WHEN new.item_filename != '.Trash' AND new.item_type IN (0, 9, 10, 4) BEGIN INSERT OR IGNORE INTO item_recursive_properties   (item_rowid, item_id, item_parent_id, item_type) VALUES   (new.rowid, new.item_id, new.item_parent_id, new.item_type); END"));
  LODWORD(v16) = objc_msgSend(v1, "execute:", CFSTR("CREATE TRIGGER \"item_recursive_properties/deletion\" AFTER DELETE ON client_items WHEN old.item_type IN (0, 9, 10, 4, 1, 2, 8) BEGIN DELETE FROM item_recursive_properties WHERE item_rowid == old.rowid ; END"));
  LODWORD(v16) = v16 & objc_msgSend(v1, "execute:", CFSTR("CREATE TRIGGER \"item_recursive_properties/reparent\" AFTER UPDATE OF item_parent_id, item_parent_zone_rowid ON client_items WHEN (new.item_parent_id != old.item_parent_id OR new.item_parent_zone_rowid != old.item_parent_zone_rowid)  AND new.item_type IN (0, 9, 10, 4, 1, 2, 8) BEGIN UPDATE OR IGNORE item_recursive_properties SET   item_parent_id = new.item_parent_id,   item_parent_zone_rowid = new.item_parent_zone_rowid WHERE item_rowid == new.rowid AND item_parent_id IS NOT NULL ; END"));
  LODWORD(v16) = v16 & objc_msgSend(v1, "execute:", &cfstr_CreateTriggerI_18);
  LODWORD(v16) = v16 & objc_msgSend(v1, "execute:", CFSTR("CREATE TRIGGER \"item_recursive_properties/recursive_reparent\" AFTER UPDATE OF item_parent_id, item_parent_zone_rowid ON item_recursive_properties WHEN ((new.item_parent_id != old.item_parent_id OR new.item_parent_zone_rowid != old.item_parent_zone_rowid)        AND ((SELECT 1 FROM item_recursive_properties WHERE item_id = new.item_parent_id AND zone_rowid = new.item_parent_zone_rowid LIMIT 1)              OR item_id_is_root(new.item_parent_id))) BEGIN UPDATE item_recursive_properties SET  dir_faults_count = dir_faults_count - old.dir_faults_count ,  faults_count = faults_count - old.faults_count ,  needs_faulting_count = needs_faulting_count - old.needs_faulting_count ,  over_quota_count = over_quota_count - old.over_quota_count ,  shared_by_me_count = shared_by_me_count - old.shared_by_me_count ,  shared_to_me_count = shared_to_me_count - old.shared_to_me_count ,  needs_upload_size = needs_upload_size - old.needs_upload_size ,  needs_upload_count = needs_upload_count - old.needs_upload_count ,  needs_download_size = needs_download_size - old.needs_download_size ,  needs_download_count = needs_download_count - old.needs_download_count ,  needs_dl_unstage_count = needs_dl_unstage_count - old.needs_dl_unstage_count ,  needs_sync_up_count = needs_sync_up_count - old.needs_sync_up_count ,  needs_delete_doc_count = needs_delete_doc_count - old.needs_delete_doc_count  WHERE item_id == old.item_parent_id AND  zone_rowid = old.item_parent_zone_rowid; UPDATE item_recursive_properties SET  dir_faults_count = dir_faults_count + new.dir_faults_count ,  faults_count = faults_count + new.faults_count ,  needs_faulting_count = needs_faulting_count + new.needs_faulting_count ,  over_quota_count = over_quota_count + new.over_quota_count ,  shared_by_me_count = shared_by_me_count + new.shared_by_me_count ,  shared_to_me_count = shared_to_me_count + new.shared_to_me_count ,  needs_upload_size = needs_upload_size + new.needs_upload_size ,  needs_upload_count = needs_upload_count + new.needs_upload_count ,  needs_download_size = needs_download_size + new.needs_download_size ,  needs_download_count = needs_download_count + new.needs_download_count ,  needs_dl_unstage_count = needs_dl_unstage_count + new.needs_dl_unstage_count ,  needs_sync_up_count = needs_sync_up_count + new.needs_sync_up_count ,  needs_delete_doc_count = needs_delete_doc_count + new.needs_delete_doc_count  WHERE item_id == new.item_parent_id AND  zone_rowid = new.item_parent_zone_rowid; END"));
  LODWORD(v16) = v16 & objc_msgSend(v1, "execute:", CFSTR("CREATE TRIGGER \"item_recursive_properties/recursive_delete\" AFTER DELETE ON item_recursive_properties BEGIN UPDATE item_recursive_properties SET  dir_faults_count = dir_faults_count - old.dir_faults_count ,  faults_count = faults_count - old.faults_count ,  needs_faulting_count = needs_faulting_count - old.needs_faulting_count ,  over_quota_count = over_quota_count - old.over_quota_count ,  shared_by_me_count = shared_by_me_count - old.shared_by_me_count ,  shared_to_me_count = shared_to_me_count - old.shared_to_me_count ,  needs_upload_size = needs_upload_size - old.needs_upload_size ,  needs_upload_count = needs_upload_count - old.needs_upload_count ,  needs_download_size = needs_download_size - old.needs_download_size ,  needs_download_count = needs_download_count - old.needs_download_count ,  needs_dl_unstage_count = needs_dl_unstage_count - old.needs_dl_unstage_count ,  needs_sync_up_count = needs_sync_up_count - old.needs_sync_up_count ,  needs_delete_doc_count = needs_delete_doc_count - old.needs_delete_doc_count  WHERE item_id == old.item_parent_id AND  zone_rowid = old.item_parent_zone_rowid AND(0 != old.dir_faults_count OR  0 != old.faults_count OR  0 != old.needs_faulting_count OR  0 != old.over_quota_count OR  0 != old.shared_by_me_count OR  0 != old.shared_to_me_count OR  0 != old.needs_upload_size OR  0 != old.needs_upload_count OR  0 != old.needs_download_size OR  0 != old.needs_download_count OR  0 != old.needs_dl_unstage_count OR  0 != old.needs_sync_up_count OR  0 != old.needs_delete_doc_count); END"));
  v19 = v18 & v16 & objc_msgSend(v1, "execute:", CFSTR("INSERT OR IGNORE INTO item_recursive_properties (item_rowid, item_id, item_parent_id, item_type, zone_rowid, item_parent_zone_rowid) SELECT rowid, item_id, item_parent_id, call_block(%p, item_type), zone_rowid, item_parent_zone_rowid FROM client_items WHERE (item_sharing_options & 4) != 0 OR item_type IN (2, 7, 8) OR item_localsyncupstate IN (3,4) AND item_type IN (1, 2, 8)"), &__block_literal_global_1149);
  LODWORD(v16) = objc_msgSend(v1, "execute:", CFSTR("UPDATE item_recursive_properties SET shared_by_me_count = call_block(%p, shared_by_me_count, 1, (SELECT cz.zone_owner FROM client_zones AS cz WHERE cz.rowid = zone_rowid)), shared_to_me_count = call_block(%p, shared_to_me_count, 0, (SELECT cz.zone_owner FROM client_zones AS cz WHERE cz.rowid = zone_rowid)) WHERE item_rowid IN (SELECT rowid FROM client_items WHERE (item_sharing_options & 4) != 0)"), &__block_literal_global_1151, &__block_literal_global_1151);
  LODWORD(v16) = v16 & objc_msgSend(v1, "execute:", CFSTR("UPDATE item_recursive_properties SET shared_to_me_count = 1 WHERE item_rowid IN (SELECT rowid FROM client_items WHERE (item_sharing_options & 4) != 0 AND zone_rowid != item_parent_zone_rowid)"));
  LODWORD(v16) = v16 & objc_msgSend(v1, "execute:", CFSTR("UPDATE item_recursive_properties SET dir_faults_count = dir_faults_count + 1 WHERE item_type IN (9, 10)"));
  LODWORD(v16) = v16 & objc_msgSend(v1, "execute:", CFSTR("UPDATE item_recursive_properties SET faults_count = 1 WHERE item_rowid IN (SELECT rowid FROM client_items WHERE item_type IN (2, 7, 8))"));
  LODWORD(v16) = v16 & objc_msgSend(v1, "execute:", CFSTR("UPDATE item_recursive_properties AS ip SET needs_upload_size = (SELECT ci.version_size from client_items AS ci WHERE ci.rowid = ip.item_rowid), needs_upload_count = 1 WHERE item_rowid IN (SELECT rowid FROM client_items WHERE item_localsyncupstate = 3 AND item_type IN (1, 2, 8))"));
  v20 = v16 & objc_msgSend(v1, "execute:", CFSTR("UPDATE item_recursive_properties AS ip SET needs_sync_up_count = needs_sync_up_count + 1 WHERE item_rowid IN (SELECT rowid FROM client_items WHERE item_localsyncupstate = 4 AND item_type IN (1, 2, 8))"));
  LODWORD(v16) = objc_msgSend(v1, "execute:", CFSTR("UPDATE item_recursive_properties AS ip SET needs_delete_doc_count = needs_delete_doc_count + 1 WHERE item_rowid IN (SELECT rowid FROM client_items WHERE item_state IN (1, -3) AND item_type IN (1, 2, 8))"));

  return v19 & v20 & v16;
}

void __recursive_table_recreate_schema_block_invoke(uint64_t a1, sqlite3_context *a2, int a3, sqlite3_value **a4)
{
  int v6;
  char v8;
  void *v9;
  NSObject *v10;

  if (a3 != 1)
  {
    brc_bread_crumbs();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      __recursive_table_recreate_schema_block_invoke_cold_1();

  }
  v6 = sqlite3_value_int(*a4);
  if (v6 << 24 == 0x2000000 || v6 << 24 == 0x8000000)
    v8 = 1;
  else
    v8 = v6;
  if (v8 == 7)
    v8 = 6;
  sqlite3_result_int(a2, v8);
}

void __recursive_table_recreate_schema_block_invoke_1150(uint64_t a1, sqlite3_context *a2, int a3, uint64_t a4)
{
  sqlite3_int64 v6;
  _BOOL4 v7;
  void *v8;
  void *v9;
  NSObject *v10;

  if (a3 != 3)
  {
    brc_bread_crumbs();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      __recursive_table_recreate_schema_block_invoke_1150_cold_1();

  }
  v6 = sqlite3_value_int64(*(sqlite3_value **)a4);
  v7 = sqlite3_value_int(*(sqlite3_value **)(a4 + 8)) == 0;
  v8 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "newFromSqliteValue:", *(_QWORD *)(a4 + 16));
  sqlite3_result_int64(a2, v6 + (v7 ^ objc_msgSend(v8, "isEqualToString:", *MEMORY[0x1E0C94730])));

}

void __br_update_tables_21_000_block_invoke(uint64_t a1, sqlite3_context *a2, int a3, _QWORD *a4)
{
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  id v12;
  void *v13;
  NSObject *v14;
  id v15;
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  id v19;
  __int16 v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (a3 != 1)
  {
    brc_bread_crumbs();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
      __recursive_table_recreate_schema_block_invoke_cold_1();

  }
  v7 = (void *)objc_msgSend(MEMORY[0x1E0C99D50], "newFromSqliteValue:", *a4);
  objc_msgSend(v7, "brc_signature");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = 0;
  if ((objc_msgSend(*(id *)(a1 + 32), "containsObject:", v8) & 1) == 0)
  {
    v9 = *(void **)(a1 + 40);
    if (v9 && (objc_msgSend(v9, "saveXattrBlob:forSignature:error:", v7, v8, &v15) & 1) == 0)
    {
      brc_bread_crumbs();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 138412802;
        v17 = v8;
        v18 = 2112;
        v19 = v15;
        v20 = 2112;
        v21 = v10;
        _os_log_fault_impl(&dword_1CBD43000, v11, OS_LOG_TYPE_FAULT, "[CRIT] UNREACHABLE: Couldn't save xattr blob for signature %@.  Continuing anyway - %@%@", buf, 0x20u);
      }

    }
    else if ((unint64_t)objc_msgSend(*(id *)(a1 + 32), "count") <= 0x7F)
    {
      objc_msgSend(*(id *)(a1 + 32), "addObject:", v8);
    }
  }
  v12 = objc_retainAutorelease(v8);
  sqlite3_result_blob(a2, (const void *)objc_msgSend(v12, "bytes"), objc_msgSend(v12, "length"), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);

}

uint64_t upgradeItemScopesForClientZone(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v9;
  uint64_t v10;

  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "isCloudDocsZone") & 1) != 0 || objc_msgSend(v3, "isSharedZone"))
  {
    objc_msgSend(v3, "dbRowID");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v4, "execute:", CFSTR("UPDATE client_items SET item_scope = 2 WHERE zone_rowid = %@ AND item_scope = 0 AND item_state != -2"), v5, v10);
  }
  else
  {
    objc_msgSend(v3, "dbRowID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v4, "execute:", CFSTR("UPDATE client_items SET item_scope = 2 WHERE zone_rowid = %@ AND item_scope = 0 AND migration_is_parented_or_equal_to_old_doc_id(%p, item_parent_id) AND item_state != -2"), v9, v3);

    if (!(_DWORD)v7)
      goto LABEL_5;
    objc_msgSend(v3, "dbRowID");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v4, "execute:", CFSTR("UPDATE client_items SET item_scope = 1 WHERE zone_rowid = %@ AND item_scope = 0 AND NOT migration_is_parented_or_equal_to_old_doc_id(%p, item_parent_id) AND item_state != -2"), v5, v3);
  }
  v7 = v6;

LABEL_5:
  return v7;
}

void __br_fixup_tables_4_019_block_invoke(uint64_t a1, sqlite3_context *a2, uint64_t a3, sqlite3_value **a4)
{
  void *v6;
  id v7;
  const char *v8;
  int v9;

  v6 = (void *)MEMORY[0x1D17A6BE8]();
  objc_msgSend(MEMORY[0x1E0CB3940], "br_pathWithFileSystemRepresentation:", sqlite3_value_text(*a4));
  v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v8 = (const char *)objc_msgSend(v7, "fileSystemRepresentation");
  v9 = strlen(v8);
  sqlite3_result_text(a2, v8, v9, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);

  objc_autoreleasePoolPop(v6);
}

void __br_fixup_tables_4_020_block_invoke(uint64_t a1, sqlite3_context *a2, uint64_t a3, sqlite3_value **a4)
{
  sqlite3_int64 v6;
  unint64_t v7;

  v6 = sqlite3_value_int64(*a4);
  if (!v6)
  {
    v7 = sqlite3_value_int64(a4[1]);
    if (v7 <= 1)
      v6 = 1;
    else
      v6 = v7;
  }
  sqlite3_result_int64(a2, v6);
}

void __br_fixup_tables_7_002_block_invoke(uint64_t a1, sqlite3_context *a2, uint64_t a3, _QWORD *a4)
{
  id v5;

  v5 = +[BRCDesiredVersion newFromSqliteValue:](BRCDesiredVersion, "newFromSqliteValue:", *a4);
  sqlite3_result_int(a2, objc_msgSend(v5, "wantsContent"));

}

void __br_fixup_tables_7_002_block_invoke_2(uint64_t a1, sqlite3_context *a2, uint64_t a3, _QWORD *a4)
{
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  NSObject *v11;
  void *v12;
  NSObject *v13;

  v6 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "newFromSqliteValue:", *a4);
  if (!v6)
  {
    brc_bread_crumbs();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
      __br_fixup_tables_7_002_block_invoke_2_cold_2();

  }
  if (objc_msgSend(v6, "isEqualToString:", *MEMORY[0x1E0C94730]))
    v7 = (id)objc_msgSend(MEMORY[0x1E0CB3940], "newFromSqliteValue:", a4[1]);
  else
    v7 = (id)*MEMORY[0x1E0D10DF0];
  v8 = v7;
  if (!v7)
  {
    brc_bread_crumbs();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
      __br_fixup_tables_7_002_block_invoke_2_cold_1();

  }
  v9 = objc_retainAutorelease(v8);
  sqlite3_result_text(a2, (const char *)objc_msgSend(v9, "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);

}

void __br_fixup_tables_7_002_block_invoke_1259(uint64_t a1, sqlite3_context *a2, uint64_t a3, _QWORD *a4)
{
  id v5;

  v5 = +[BRCDesiredVersion newFromSqliteValue:](BRCDesiredVersion, "newFromSqliteValue:", *a4);
  sqlite3_result_int64(a2, objc_msgSend(v5, "size"));

}

void __br_fixup_tables_7_002_block_invoke_2_1261(uint64_t a1, sqlite3_context *a2, uint64_t a3, _QWORD *a4)
{
  void *v5;
  id v6;
  id v7;

  v7 = +[BRCDesiredVersion newFromSqliteValue:](BRCDesiredVersion, "newFromSqliteValue:", *a4);
  objc_msgSend(v7, "ckInfo");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "etag");
  v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  sqlite3_result_text(a2, (const char *)objc_msgSend(v6, "UTF8String"), -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);

}

void __br_fixup_tables_7_002_block_invoke_3(uint64_t a1, sqlite3_context *a2, uint64_t a3, _QWORD *a4)
{
  id v5;

  v5 = +[BRCDesiredVersion newFromSqliteValue:](BRCDesiredVersion, "newFromSqliteValue:", *a4);
  sqlite3_result_int(a2, objc_msgSend(v5, "wantsContent"));

}

__CFString *BRCClientZoneStatePrettyPrint(unsigned int a1)
{
  return BRCPrettyPrintBitmapWithContext(a1, (uint64_t)&local_container_state_entries, 0);
}

__CFString *BRCClientZoneStatePrettyPrintWithContext(unsigned int a1, void *a2)
{
  return BRCPrettyPrintBitmapWithContext(a1, (uint64_t)&local_container_state_entries, a2);
}

uint64_t BRContainerStatusFromSyncState(char a1)
{
  unsigned int v1;

  if ((a1 & 0xA) != 0)
    v1 = (2 * ((a1 & 5) != 0)) | 4;
  else
    v1 = 2 * ((a1 & 5) != 0);
  if (v1 <= 1)
    return 1;
  else
    return v1;
}

void sub_1CBE5A21C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  __brc_leave_section(&a20);
  _Unwind_Resume(a1);
}

void sub_1CBE5ABD4(_Unwind_Exception *a1)
{
  __brc_leave_section((uint64_t *)&STACK[0x238]);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__25(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__25(uint64_t a1)
{

}

void checkErrorIsRetriable(sqlite3_context *a1, sqlite3_value **a2, id *a3)
{
  id v6;
  const void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  if (sqlite3_value_type(*a2) != 4)
    goto LABEL_5;
  v6 = objc_alloc(MEMORY[0x1E0C99D50]);
  v7 = sqlite3_value_blob(*a2);
  v11 = (id)objc_msgSend(v6, "initWithBytesNoCopy:length:freeWhenDone:", v7, sqlite3_value_bytes(*a2), 0);
  v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3710]), "initForReadingFromData:error:", v11, 0);
  objc_msgSend(v8, "decodeObjectOfClass:forKey:", objc_opt_class(), *MEMORY[0x1E0CB2CD0]);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (!v9 || (objc_msgSend(v9, "brc_isEverRetriable") & 1) != 0)
  {

LABEL_5:
    sqlite3_result_int(a1, 1);
    return;
  }
  if (a3)
    objc_storeStrong(a3, v10);
  sqlite3_result_int(a1, 0);

}

void sub_1CBE5C2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void sub_1CBE5E54C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_1CBE5E7EC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_1CBE5F984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBE60460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1CBE6085C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CBE60E08(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBE60E90(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBE62578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void dispatch_async_with_logs_7(void *a1, void *a2)
{
  NSObject *v3;
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  const char *label;
  _QWORD v12[4];
  NSObject *v13;
  id v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _BYTE buf[24];
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = (void *)MEMORY[0x1D17A6BE8]();
  v17 = 0uLL;
  v18 = 0;
  __brc_create_section(0, (uint64_t)"dispatch_async_with_logs", 262, &v17);
  brc_bread_crumbs();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v10 = v17;
    label = dispatch_queue_get_label(v3);
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = v10;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = label;
    *(_WORD *)&buf[22] = 2112;
    v20 = v6;
    _os_log_debug_impl(&dword_1CBD43000, v7, OS_LOG_TYPE_DEBUG, "[DEBUG] ┣%llx dispatching to %s%@", buf, 0x20u);
  }

  *(_QWORD *)&buf[16] = v18;
  *(_OWORD *)buf = v17;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __dispatch_async_with_logs_block_invoke_12;
  v12[3] = &unk_1E875D578;
  v15 = v17;
  v16 = v18;
  v8 = v3;
  v13 = v8;
  v9 = v4;
  v14 = v9;
  dispatch_async(v8, v12);

  objc_autoreleasePoolPop(v5);
}

void sub_1CBE6366C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_1CBE637BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void sub_1CBE63BC4(_Unwind_Exception *a1)
{
  _BRRestorePersona();
  _Unwind_Resume(a1);
}

void sub_1CBE63D04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBE65E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  __brc_leave_section(&a40);
  _Unwind_Resume(a1);
}

void sub_1CBE661D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBE696C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, id a19)
{
  id *v19;
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a19);
  _Unwind_Resume(a1);
}

void sub_1CBE69EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  id *v24;

  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CBE6A350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CBE6A694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CBE6AF18(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_1CBE6B42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

void sub_1CBE6BAE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_1CBE6D8B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void sub_1CBE6E3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void sub_1CBE6EEB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  __brc_leave_section((uint64_t *)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_1CBE6F0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void sub_1CBE6FCB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  __brc_leave_section(&a27);
  _Unwind_Resume(a1);
}

void sub_1CBE6FF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void sub_1CBE703B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBE704EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBE70624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBE7095C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBE71388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a55, 8);
  _Unwind_Resume(a1);
}

void __dispatch_async_with_logs_block_invoke_12(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  const char *label;
  __int128 v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *(_OWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  brc_bread_crumbs();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    label = dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32));
    *(_DWORD *)buf = 134218498;
    v8 = v5;
    v9 = 2080;
    v10 = label;
    v11 = 2112;
    v12 = v2;
    _os_log_debug_impl(&dword_1CBD43000, v3, OS_LOG_TYPE_DEBUG, "[DEBUG] ┳%llx continuing on %s%@", buf, 0x20u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  __brc_leave_section((uint64_t *)&v5);
}

void sub_1CBE72D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_1_3(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, a5, 0x16u);
}

void OUTLINED_FUNCTION_15_1(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

uint64_t OUTLINED_FUNCTION_18_0(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t OUTLINED_FUNCTION_19_1(uint64_t result, uint64_t a2, double a3, float a4)
{
  *(float *)a2 = a4;
  *(double *)(a2 + 4) = a3;
  *(_WORD *)(a2 + 12) = 2112;
  *(_QWORD *)(a2 + 14) = result;
  return result;
}

BOOL BRFieldXattrReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 8;
LABEL_22:
        v19 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadData();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = 16;
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AppTelemetryTelemetryMessageReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  AppTelemetryTimeSeriesEvent *v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_33;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v20 = 0;
            goto LABEL_35;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_35:
        *(_QWORD *)(a1 + 8) = v20;
      }
      else if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(AppTelemetryTimeSeriesEvent);
        objc_msgSend((id)a1, "addEvents:", v17);
        if (!PBReaderPlaceMark() || (AppTelemetryTimeSeriesEventReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1CBE74B60(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBE74BDC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBE75258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CBE75414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBE758AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBE759FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__26(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__26(uint64_t a1)
{

}

void sub_1CBE768FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBE781EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__27(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__27(uint64_t a1)
{

}

BOOL BRCGenerateAPFSSnapshot(int a1, void *a2, _QWORD *a3)
{
  id v5;
  int v6;
  void *v7;
  void *v8;
  NSObject *v9;
  int v11;
  id v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = objc_retainAutorelease(a2);
  v6 = fs_snapshot_create(a1, (const char *)objc_msgSend(v5, "UTF8String"), 0);
  if (v6 < 0)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "br_errorFromErrno");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    brc_bread_crumbs();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 138412802;
      v12 = v5;
      v13 = 2112;
      v14 = v7;
      v15 = 2112;
      v16 = v8;
      _os_log_impl(&dword_1CBD43000, v9, OS_LOG_TYPE_DEFAULT, "[WARNING] Failed to create snapshot %@ - %@%@", (uint8_t *)&v11, 0x20u);
    }

    if (a3)
      *a3 = objc_retainAutorelease(v7);

  }
  return v6 >= 0;
}

id BRCMountAPFSSnapshot(int a1, void *a2, _QWORD *a3)
{
  id v5;
  void *v6;
  void *v7;
  char v8;
  id v9;
  void *v10;
  NSObject *v11;
  id v12;
  const char *v13;
  id v14;
  const char *v15;
  id v16;
  id v17;
  void *v18;
  NSObject *v19;
  id v21;
  uint8_t buf[4];
  id v23;
  __int16 v24;
  id v25;
  __int16 v26;
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  BRCMountDirPath(v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = 0;
  v8 = objc_msgSend(v7, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v6, 1, 0, &v21);
  v9 = v21;

  if ((v8 & 1) == 0)
  {
    brc_bread_crumbs();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412802;
      v23 = v6;
      v24 = 2112;
      v25 = v9;
      v26 = 2112;
      v27 = v10;
      _os_log_debug_impl(&dword_1CBD43000, v11, OS_LOG_TYPE_DEBUG, "[DEBUG] Failed to create directory at %@ - %@%@", buf, 0x20u);
    }

  }
  v12 = objc_retainAutorelease(v6);
  v13 = (const char *)objc_msgSend(v12, "fileSystemRepresentation");
  v14 = objc_retainAutorelease(v5);
  v15 = (const char *)objc_msgSend(v14, "UTF8String");

  if (fs_snapshot_mount(a1, v13, v15, 0x100000u) < 0)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "br_errorFromErrno");
    v17 = (id)objc_claimAutoreleasedReturnValue();

    brc_bread_crumbs();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412802;
      v23 = v12;
      v24 = 2112;
      v25 = v17;
      v26 = 2112;
      v27 = v18;
      _os_log_impl(&dword_1CBD43000, v19, OS_LOG_TYPE_DEFAULT, "[WARNING] Failed to mount %@ - %@%@", buf, 0x20u);
    }

    if (a3)
    {
      v17 = objc_retainAutorelease(v17);
      v16 = 0;
      *a3 = v17;
    }
    else
    {
      v16 = 0;
    }
  }
  else
  {
    v16 = v12;
    v17 = v9;
  }

  return v16;
}

id BRCMountDirPath(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;

  v1 = (void *)MEMORY[0x1E0CB3940];
  v2 = a1;
  objc_msgSend(v1, "br_currentSupportDir");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "stringByAppendingPathComponent:", v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

uint64_t BRCUnmountAPFSSnapshot(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  id v7;
  void *v8;
  NSObject *v9;
  int v11;
  id v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  BRCMountDirPath(a1);
  v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  if (unmount((const char *)objc_msgSend(v3, "UTF8String"), 0x80000) < 0 && *__error() != 2)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "br_errorFromErrno");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    brc_bread_crumbs();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 138412802;
      v12 = v3;
      v13 = 2112;
      v14 = v4;
      v15 = 2112;
      v16 = v5;
      _os_log_impl(&dword_1CBD43000, v6, OS_LOG_TYPE_DEFAULT, "[WARNING] Failed to unmount %@ - %@%@", (uint8_t *)&v11, 0x20u);
    }

    if (a2)
      *a2 = objc_retainAutorelease(v4);

  }
  v7 = objc_retainAutorelease(v3);
  if (rmdir((const char *)objc_msgSend(v7, "fileSystemRepresentation")) < 0 && *__error() != 2)
  {
    brc_bread_crumbs();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      BRCUnmountAPFSSnapshot_cold_1((uint64_t)v7, (uint64_t)v8, v9);

  }
  return 1;
}

uint64_t BRCDeleteAPFSSnapshot(int a1, void *a2, _QWORD *a3)
{
  id v5;
  uint64_t v6;
  void *v8;
  void *v9;
  NSObject *v10;
  int v11;
  id v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = objc_retainAutorelease(a2);
  if (fs_snapshot_delete(a1, (const char *)objc_msgSend(v5, "UTF8String"), 0) < 0 && *__error() != 2)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "br_errorFromErrno");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    brc_bread_crumbs();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v11 = 138412802;
      v12 = v5;
      v13 = 2112;
      v14 = v8;
      v15 = 2112;
      v16 = v9;
      _os_log_debug_impl(&dword_1CBD43000, v10, OS_LOG_TYPE_DEBUG, "[DEBUG] Failed to delete snapshot %@ - %@%@", (uint8_t *)&v11, 0x20u);
    }

    if (a3)
      *a3 = objc_retainAutorelease(v8);

    v6 = 0;
  }
  else
  {
    v6 = 1;
  }

  return v6;
}

BOOL BRCHasAPFSSnapshot(uint64_t a1, _QWORD *a2)
{
  int v3;
  void *v4;
  void *v5;
  NSObject *v6;
  const char *v8;
  int v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = fs_snapshot_list(4096, 0, 0, 0, 0);
  if (v3 < 0)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "br_errorFromErrno");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (v4)
    {
      brc_bread_crumbs();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, (os_log_type_t)0x90u))
      {
        v8 = "(passed to caller)";
        v9 = 136315906;
        v10 = "BRCHasAPFSSnapshot";
        v11 = 2080;
        if (!a2)
          v8 = "(ignored by caller)";
        v12 = v8;
        v13 = 2112;
        v14 = v4;
        v15 = 2112;
        v16 = v5;
        _os_log_error_impl(&dword_1CBD43000, v6, (os_log_type_t)0x90u, "[ERROR] %s: %s error: %@%@", (uint8_t *)&v9, 0x2Au);
      }

    }
    if (a2)
      *a2 = objc_retainAutorelease(v4);

  }
  return v3 > 0;
}

void sub_1CBE7B4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void dispatch_async_with_logs_8(void *a1, void *a2)
{
  NSObject *v3;
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  const char *label;
  _QWORD v12[4];
  NSObject *v13;
  id v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _BYTE buf[24];
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = (void *)MEMORY[0x1D17A6BE8]();
  v17 = 0uLL;
  v18 = 0;
  __brc_create_section(0, (uint64_t)"dispatch_async_with_logs", 262, &v17);
  brc_bread_crumbs();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  brc_notifications_log();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v10 = v17;
    label = dispatch_queue_get_label(v3);
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = v10;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = label;
    *(_WORD *)&buf[22] = 2112;
    v20 = v6;
    _os_log_debug_impl(&dword_1CBD43000, v7, OS_LOG_TYPE_DEBUG, "[NOTIF] ┣%llx dispatching to %s%@", buf, 0x20u);
  }

  *(_QWORD *)&buf[16] = v18;
  *(_OWORD *)buf = v17;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __dispatch_async_with_logs_block_invoke_13;
  v12[3] = &unk_1E875D578;
  v15 = v17;
  v16 = v18;
  v8 = v3;
  v13 = v8;
  v9 = v4;
  v14 = v9;
  dispatch_async(v8, v12);

  objc_autoreleasePoolPop(v5);
}

uint64_t _computeDelta(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  void *v10;
  NSObject *v11;
  void *v12;
  NSObject *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  void *v19;
  NSObject *v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (a1 > a2)
  {
    brc_bread_crumbs();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
    {
      v21 = 134218498;
      v22 = a1;
      v23 = 2048;
      v24 = a2;
      v25 = 2112;
      v26 = v10;
      _os_log_fault_impl(&dword_1CBD43000, v11, OS_LOG_TYPE_FAULT, "[CRIT] UNREACHABLE: from size %llu is bigger than to size %llu%@", (uint8_t *)&v21, 0x20u);
    }

  }
  if (a3 > a4)
  {
    brc_bread_crumbs();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
    {
      v21 = 134218498;
      v22 = a3;
      v23 = 2048;
      v24 = a4;
      v25 = 2112;
      v26 = v12;
      _os_log_fault_impl(&dword_1CBD43000, v13, OS_LOG_TYPE_FAULT, "[CRIT] UNREACHABLE: version size %llu is greater than progress size %llu%@", (uint8_t *)&v21, 0x20u);
    }

  }
  if (a1 == a2)
    return 0;
  v15 = (double)a3 / (double)a4;
  v16 = (uint64_t)(v15 * (double)a2) - (uint64_t)(v15 * (double)a1);
  v17 = a3 - (uint64_t)(v15 * (double)a4);
  if (!a5)
    v17 = 0;
  v14 = v17 + v16;
  if (v17 + v16 < 0)
  {
    brc_bread_crumbs();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
      _computeDelta_cold_1();

  }
  return v14;
}

void sub_1CBE7E958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBE7FC68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void __dispatch_async_with_logs_block_invoke_13(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  const char *label;
  __int128 v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *(_OWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  brc_bread_crumbs();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  brc_notifications_log();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    label = dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32));
    *(_DWORD *)buf = 134218498;
    v8 = v5;
    v9 = 2080;
    v10 = label;
    v11 = 2112;
    v12 = v2;
    _os_log_debug_impl(&dword_1CBD43000, v3, OS_LOG_TYPE_DEBUG, "[NOTIF] ┳%llx continuing on %s%@", buf, 0x20u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  __brc_leave_section((uint64_t *)&v5);
}

void sub_1CBE82AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void sub_1CBE852CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBE88538(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_7_3(id *a1)
{
  return objc_msgSend(*a1, "totalCount");
}

void sub_1CBE93470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__28(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__28(uint64_t a1)
{

}

void sub_1CBE93998(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBE93A78(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBE93AE0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBE9440C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBE951A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void __dispatch_async_with_logs_block_invoke_14(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  const char *label;
  __int128 v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *(_OWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  brc_bread_crumbs();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    label = dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32));
    *(_DWORD *)buf = 134218498;
    v8 = v5;
    v9 = 2080;
    v10 = label;
    v11 = 2112;
    v12 = v2;
    _os_log_debug_impl(&dword_1CBD43000, v3, OS_LOG_TYPE_DEBUG, "[DEBUG] ┳%llx continuing on %s%@", buf, 0x20u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  __brc_leave_section((uint64_t *)&v5);
}

void sub_1CBE95454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void sub_1CBE974F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_1CBE97BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1CBE9830C(_Unwind_Exception *a1)
{
  uint64_t v1;

  __brc_leave_section((uint64_t *)(v1 - 184));
  _Unwind_Resume(a1);
}

void sub_1CBE984EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBE9878C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__29(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__29(uint64_t a1)
{

}

void sub_1CBE98BF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1CBE993E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBE99664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBE99830(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBE99898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1CBE99CBC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBE99D18(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBE9A0D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBE9A7D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBE9AB30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void dispatch_async_with_logs_9(void *a1, void *a2)
{
  NSObject *v3;
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  const char *label;
  _QWORD v12[4];
  NSObject *v13;
  id v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _BYTE buf[24];
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = (void *)MEMORY[0x1D17A6BE8]();
  v17 = 0uLL;
  v18 = 0;
  __brc_create_section(0, (uint64_t)"dispatch_async_with_logs", 262, &v17);
  brc_bread_crumbs();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v10 = v17;
    label = dispatch_queue_get_label(v3);
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = v10;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = label;
    *(_WORD *)&buf[22] = 2112;
    v20 = v6;
    _os_log_debug_impl(&dword_1CBD43000, v7, OS_LOG_TYPE_DEBUG, "[DEBUG] ┣%llx dispatching to %s%@", buf, 0x20u);
  }

  *(_QWORD *)&buf[16] = v18;
  *(_OWORD *)buf = v17;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __dispatch_async_with_logs_block_invoke_15;
  v12[3] = &unk_1E875D578;
  v15 = v17;
  v16 = v18;
  v8 = v3;
  v13 = v8;
  v9 = v4;
  v14 = v9;
  dispatch_async(v8, v12);

  objc_autoreleasePoolPop(v5);
}

void sub_1CBE9B150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBE9B33C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBE9B844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  _Block_object_dispose(&a44, 8);
  _Unwind_Resume(a1);
}

void __dispatch_async_with_logs_block_invoke_15(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  const char *label;
  __int128 v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *(_OWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  brc_bread_crumbs();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    label = dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32));
    *(_DWORD *)buf = 134218498;
    v8 = v5;
    v9 = 2080;
    v10 = label;
    v11 = 2112;
    v12 = v2;
    _os_log_debug_impl(&dword_1CBD43000, v3, OS_LOG_TYPE_DEBUG, "[DEBUG] ┳%llx continuing on %s%@", buf, 0x20u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  __brc_leave_section((uint64_t *)&v5);
}

void sub_1CBE9BE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

uint64_t brc_index_for_folder_type(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = a1 - 1;
  if (a1 != 1)
  {
    brc_bread_crumbs();
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      brc_index_for_folder_type_cold_1((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10);

  }
  return v1;
}

uint64_t brc_folder_type_name(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 != 1)
  {
    brc_bread_crumbs();
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
      brc_index_for_folder_type_cold_1((uint64_t)v2, v3, v4, v5, v6, v7, v8, v9);

  }
  return 0;
}

uint64_t brc_enumerate_all_folder_types(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 16))(a1, 1);
}

id BRCGetAccountDSIDForMobileDocsRoot(void *a1, char a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  NSObject *v10;

  objc_msgSend(a1, "path");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    BRCGetXattrValueForKeyOnPath(v3, CFSTR("com.apple.ubd.prsid"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (v5)
    {
      if ((objc_msgSend(v5, "hasSuffix:", CFSTR(".CloudDocs")) & 1) != 0)
      {
        objc_msgSend(v6, "substringToIndex:", objc_msgSend(v6, "length") - objc_msgSend(CFSTR(".CloudDocs"), "length"));
        v7 = (id)objc_claimAutoreleasedReturnValue();
LABEL_11:
        v8 = v7;
        goto LABEL_12;
      }
      brc_bread_crumbs();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
        BRCGetAccountDSIDForMobileDocsRoot_cold_1((uint64_t)v6, (uint64_t)v9, v10);

      if ((a2 & 1) == 0)
      {
        v7 = v6;
        goto LABEL_11;
      }
    }
    v8 = 0;
LABEL_12:

    goto LABEL_13;
  }
  v8 = 0;
LABEL_13:

  return v8;
}

id BRCGetAccountDSIDForiCloudDesktopRoot(void *a1)
{
  void *v1;
  void *v2;
  void *v3;

  objc_msgSend(a1, "path");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1)
  {
    BRCGetXattrValueForKeyOnPath(v1, (void *)*MEMORY[0x1E0D10E28]);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_1CBE9C2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__30(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__30(uint64_t a1)
{

}

void sub_1CBE9D018(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBE9D540(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBE9D624(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBE9DAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBE9E2D4(_Unwind_Exception *a1)
{
  void *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_sync_exit(v1);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v4 - 88));
  _Unwind_Resume(a1);
}

void sub_1CBE9E530(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBE9E5A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBE9E9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void dispatch_async_with_logs_10(void *a1, void *a2)
{
  NSObject *v3;
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  const char *label;
  _QWORD v12[4];
  NSObject *v13;
  id v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _BYTE buf[24];
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = (void *)MEMORY[0x1D17A6BE8]();
  v17 = 0uLL;
  v18 = 0;
  __brc_create_section(0, (uint64_t)"dispatch_async_with_logs", 262, &v17);
  brc_bread_crumbs();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v10 = v17;
    label = dispatch_queue_get_label(v3);
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = v10;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = label;
    *(_WORD *)&buf[22] = 2112;
    v20 = v6;
    _os_log_debug_impl(&dword_1CBD43000, v7, OS_LOG_TYPE_DEBUG, "[DEBUG] ┣%llx dispatching to %s%@", buf, 0x20u);
  }

  *(_QWORD *)&buf[16] = v18;
  *(_OWORD *)buf = v17;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __dispatch_async_with_logs_block_invoke_16;
  v12[3] = &unk_1E875D578;
  v15 = v17;
  v16 = v18;
  v8 = v3;
  v13 = v8;
  v9 = v4;
  v14 = v9;
  dispatch_async(v8, v12);

  objc_autoreleasePoolPop(v5);
}

void sub_1CBE9EDB0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBE9F1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__31(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__31(uint64_t a1)
{

}

void __dispatch_async_with_logs_block_invoke_16(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  const char *label;
  __int128 v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *(_OWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  brc_bread_crumbs();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    label = dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32));
    *(_DWORD *)buf = 134218498;
    v8 = v5;
    v9 = 2080;
    v10 = label;
    v11 = 2112;
    v12 = v2;
    _os_log_debug_impl(&dword_1CBD43000, v3, OS_LOG_TYPE_DEBUG, "[DEBUG] ┳%llx continuing on %s%@", buf, 0x20u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  __brc_leave_section((uint64_t *)&v5);
}

void sub_1CBE9F4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

id BRCExecutableNameForProcessIdentifier()
{
  int v0;
  void *v1;
  void *v2;
  _BYTE buffer[4096];
  uint64_t v5;

  v0 = MEMORY[0x1E0C80A78]();
  v5 = *MEMORY[0x1E0C80C00];
  if (proc_pidpath(v0, buffer, 0x1000u) < 1)
    return 0;
  objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:", buffer, 0, 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "lastPathComponent");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

uint64_t BRFieldXattrBlobReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  BRFieldXattr *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(BRFieldXattr);
        objc_msgSend(a1, "addXattrs:", v17);
        if (!PBReaderPlaceMark() || !BRFieldXattrReadFrom((uint64_t)v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1CBEA1204(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBEA1420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CBEA16B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBEA1940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CBEA1BB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBEA217C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t _fstatItem(uint64_t a1, _QWORD *a2, _DWORD *a3, _DWORD *a4, _QWORD *a5, _QWORD *a6)
{
  int v12;
  uint64_t result;
  int v14;
  void *v15;
  NSObject *v16;
  int DocID;
  int v18;
  void *v19;
  NSObject *v20;
  __int128 v21;
  uint64_t v22;
  uint8_t buf[4];
  _BYTE v24[10];
  _BYTE v25[14];
  _OWORD v26[66];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v21 = xmmword_1CC06700C;
  v22 = 0;
  if (!a6)
    DWORD1(v21) = 102236160;
  memset(v26, 0, 512);
  if (fgetattrlist(a1, &v21, v26, 0x424uLL, 0x20u) < 0)
  {
    v14 = *__error();
    brc_bread_crumbs();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, (os_log_type_t)0x90u))
    {
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)v24 = a1;
      *(_WORD *)&v24[4] = 1024;
      *(_DWORD *)&v24[6] = v14;
      *(_WORD *)v25 = 2112;
      *(_QWORD *)&v25[2] = v15;
      _os_log_error_impl(&dword_1CBD43000, v16, (os_log_type_t)0x90u, "[ERROR] fgetattrlist(%d) failed %{errno}d%@", buf, 0x18u);
    }

    *__error() = v14;
    return 0xFFFFFFFFLL;
  }
  else
  {
    if (a3)
      *a3 = DWORD1(v26[0]);
    if (a2)
      *a2 = *(_QWORD *)((char *)v26 + 12);
    if (a5)
      *a5 = *(_QWORD *)((char *)&v26[1] + 4);
    if (a6)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "br_pathWithFileSystemRepresentation:", (char *)&v26[1] + SHIDWORD(v26[1]) + 12, v21, v22);
      *a6 = (id)objc_claimAutoreleasedReturnValue();
    }
    if (a4 && (v12 = DWORD2(v26[0]), *a4 = DWORD2(v26[0]), !v12))
    {
      DocID = BRCGetOrAllocateDocID(a1);
      if (!DocID)
      {
        v18 = *__error();
        brc_bread_crumbs();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        brc_default_log();
        v20 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v20, (os_log_type_t)0x90u))
        {
          *(_DWORD *)buf = 134218498;
          *(_QWORD *)v24 = *(_QWORD *)((char *)v26 + 12);
          *(_WORD *)&v24[8] = 1024;
          *(_DWORD *)v25 = v18;
          *(_WORD *)&v25[4] = 2112;
          *(_QWORD *)&v25[6] = v19;
          _os_log_error_impl(&dword_1CBD43000, v20, (os_log_type_t)0x90u, "[ERROR] failed allocating documentID for fileID:%llu %{errno}d%@", buf, 0x1Cu);
        }

        *__error() = v18;
      }
      result = 0;
      *a4 = DocID;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_1CBEA4804(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1CBEA48CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBEA6198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBEA634C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBEA6644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBEA6790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBEA69EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBEA6B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBEA6C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBEA6F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBEA7094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBEA73FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBEA7774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBEA7AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBEA7CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBEA860C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBEA890C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBEA8B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1CBEA9520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CBEA9EB0(_Unwind_Exception *a1)
{
  _BRRestorePersona();
  _Unwind_Resume(a1);
}

void sub_1CBEAB0C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBEAB9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose((const void *)(v11 - 160), 8);
  __brc_leave_section((uint64_t *)va);
  _BRRestorePersona();
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__32(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__32(uint64_t a1)
{

}

void sub_1CBEACBAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  void *v48;
  uint64_t v49;

  objc_sync_exit(v48);
  __brc_leave_section(&a41);
  _Block_object_dispose((const void *)(v49 - 160), 8);
  _BRRestorePersona();
  _Unwind_Resume(a1);
}

void sub_1CBEACF18(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBEACFD8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _BRCWritePackageExtensions()
{
  if (_BRCWritePackageExtensions_onceToken != -1)
    dispatch_once(&_BRCWritePackageExtensions_onceToken, &__block_literal_global_13_0);
  return br_pacer_signal();
}

id extension_array_path()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3940], "br_currentSupportDir");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "stringByAppendingPathComponent:", CFSTR("pkg_extensions.plist"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id __old_extension_manager_bundle_path()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3940], "br_currentSupportDir");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "stringByAppendingPathComponent:", CFSTR("SharedPackageExtensions.app"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id __very_old_extension_manager_bundle_path()
{
  void *v0;
  void *v1;
  void *v2;

  objc_msgSend(MEMORY[0x1E0CB3940], "br_currentSupportDir");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "stringByAppendingPathComponent:", *MEMORY[0x1E0D10D00]);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "stringByAppendingPathComponent:", CFSTR("SharedPackageExtensions.app"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_1CBEAF848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;
  char a69;

  _Block_object_dispose(&a65, 8);
  _Block_object_dispose(&a69, 8);
  _Block_object_dispose(&STACK[0x200], 8);
  _Unwind_Resume(a1);
}

void sub_1CBEB0424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CBEB0FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  _Block_object_dispose(&a49, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__33(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__33(uint64_t a1)
{

}

void sub_1CBEB1F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  __brc_leave_section(&a37);
  _Unwind_Resume(a1);
}

void sub_1CBEB588C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;

  __brc_leave_section(&a46);
  _Block_object_dispose(&a49, 8);
  _Block_object_dispose((const void *)(v49 - 240), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__34(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__34(uint64_t a1)
{

}

void __dispatch_group_async_with_logs_block_invoke_0(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  const char *label;
  __int128 v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *(_OWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  brc_bread_crumbs();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    label = dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32));
    *(_DWORD *)buf = 134218498;
    v8 = v5;
    v9 = 2080;
    v10 = label;
    v11 = 2112;
    v12 = v2;
    _os_log_debug_impl(&dword_1CBD43000, v3, OS_LOG_TYPE_DEBUG, "[DEBUG] ┳%llx continuing on %s%@", buf, 0x20u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  __brc_leave_section((uint64_t *)&v5);
}

void sub_1CBEB6BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void sub_1CBEB87E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBEB88FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBEB89B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1CBEB9098(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBEB93B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__35(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__35(uint64_t a1)
{

}

void sub_1CBEB9728(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBEBA3E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 232), 8);
  _Block_object_dispose((const void *)(v1 - 200), 8);
  _Block_object_dispose((const void *)(v1 - 168), 8);
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void brc_dispatch_async_autorelease_with_logs(void *a1, void *a2)
{
  NSObject *v3;
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  const char *label;
  _QWORD v12[4];
  NSObject *v13;
  id v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _BYTE buf[24];
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = (void *)MEMORY[0x1D17A6BE8]();
  v17 = 0uLL;
  v18 = 0;
  __brc_create_section(0, (uint64_t)"brc_dispatch_async_autorelease_with_logs", 276, &v17);
  brc_bread_crumbs();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v10 = v17;
    label = dispatch_queue_get_label(v3);
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = v10;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = label;
    *(_WORD *)&buf[22] = 2112;
    v20 = v6;
    _os_log_debug_impl(&dword_1CBD43000, v7, OS_LOG_TYPE_DEBUG, "[DEBUG] ┣%llx dispatching to %s%@", buf, 0x20u);
  }

  *(_QWORD *)&buf[16] = v18;
  *(_OWORD *)buf = v17;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __brc_dispatch_async_autorelease_with_logs_block_invoke_2;
  v12[3] = &unk_1E875D578;
  v15 = v17;
  v16 = v18;
  v8 = v3;
  v13 = v8;
  v9 = v4;
  v14 = v9;
  dispatch_async(v8, v12);

  objc_autoreleasePoolPop(v5);
}

void sub_1CBEBC4EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBEBCED0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBEBD148(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBEBD1C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void __brc_dispatch_async_autorelease_with_logs_block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  const char *label;
  __int128 v6;
  uint64_t v7;
  uint8_t buf[4];
  uint64_t v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17A6BE8]();
  v6 = *(_OWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 64);
  brc_bread_crumbs();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    label = dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32));
    *(_DWORD *)buf = 134218498;
    v9 = v6;
    v10 = 2080;
    v11 = label;
    v12 = 2112;
    v13 = v3;
    _os_log_debug_impl(&dword_1CBD43000, v4, OS_LOG_TYPE_DEBUG, "[DEBUG] ┳%llx continuing on %s%@", buf, 0x20u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  __brc_leave_section((uint64_t *)&v6);
  objc_autoreleasePoolPop(v2);
}

void sub_1CBEBD3BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void sub_1CBEBE2C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBEBF2D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, id *a10, id *a11)
{
  id *v11;
  id *v12;
  uint64_t v13;

  objc_destroyWeak(v12);
  objc_destroyWeak(v11);
  objc_destroyWeak(location);
  objc_destroyWeak(a10);
  objc_destroyWeak(a11);
  objc_destroyWeak((id *)(v13 - 128));
  _Unwind_Resume(a1);
}

void sub_1CBEBF568(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBEC0708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  __brc_leave_section(&a30);
  _Unwind_Resume(a1);
}

void sub_1CBEC0A64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBEC0D1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBEC0E08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBEC0ED8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBEC15C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBEC1D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  __brc_leave_section(&a28);
  _Unwind_Resume(a1);
}

void sub_1CBEC1F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBEC4794(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBEC4C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBEC60A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void dispatch_async_with_logs_11(void *a1, void *a2)
{
  NSObject *v3;
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  const char *label;
  _QWORD v12[4];
  NSObject *v13;
  id v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _BYTE buf[24];
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = (void *)MEMORY[0x1D17A6BE8]();
  v17 = 0uLL;
  v18 = 0;
  __brc_create_section(0, (uint64_t)"dispatch_async_with_logs", 262, &v17);
  brc_bread_crumbs();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v10 = v17;
    label = dispatch_queue_get_label(v3);
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = v10;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = label;
    *(_WORD *)&buf[22] = 2112;
    v20 = v6;
    _os_log_debug_impl(&dword_1CBD43000, v7, OS_LOG_TYPE_DEBUG, "[DEBUG] ┣%llx dispatching to %s%@", buf, 0x20u);
  }

  *(_QWORD *)&buf[16] = v18;
  *(_OWORD *)buf = v17;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __dispatch_async_with_logs_block_invoke_17;
  v12[3] = &unk_1E875D578;
  v15 = v17;
  v16 = v18;
  v8 = v3;
  v13 = v8;
  v9 = v4;
  v14 = v9;
  dispatch_async(v8, v12);

  objc_autoreleasePoolPop(v5);
}

void sub_1CBEC8554(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBEC8698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__36(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__36(uint64_t a1)
{

}

void sub_1CBEC8A7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBEC8D38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void __dispatch_async_with_logs_block_invoke_17(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  const char *label;
  __int128 v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *(_OWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  brc_bread_crumbs();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    label = dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32));
    *(_DWORD *)buf = 134218498;
    v8 = v5;
    v9 = 2080;
    v10 = label;
    v11 = 2112;
    v12 = v2;
    _os_log_debug_impl(&dword_1CBD43000, v3, OS_LOG_TYPE_DEBUG, "[DEBUG] ┳%llx continuing on %s%@", buf, 0x20u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  __brc_leave_section((uint64_t *)&v5);
}

void sub_1CBEC9DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void sub_1CBECA228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void __dispatch_async_with_logs_block_invoke_18(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  const char *label;
  __int128 v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *(_OWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  brc_bread_crumbs();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    label = dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32));
    *(_DWORD *)buf = 134218498;
    v8 = v5;
    v9 = 2080;
    v10 = label;
    v11 = 2112;
    v12 = v2;
    _os_log_debug_impl(&dword_1CBD43000, v3, OS_LOG_TYPE_DEBUG, "[DEBUG] ┳%llx continuing on %s%@", buf, 0x20u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  __brc_leave_section((uint64_t *)&v5);
}

void sub_1CBECB630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void sub_1CBECE97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__37(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__37(uint64_t a1)
{

}

void sub_1CBED0A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBED1158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBED1C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  __brc_leave_section(&a49);
  _Unwind_Resume(a1);
}

id _BRActivityBlockRememberPersona(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD v7[4];
  id v8;
  id v9;

  v1 = a1;
  objc_msgSend(MEMORY[0x1E0DC5EE8], "sharedManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "currentPersona");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "userPersonaUniqueString");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = ___BRActivityBlockRememberPersona_block_invoke;
    v7[3] = &unk_1E87646B8;
    v8 = v4;
    v9 = v1;
    v5 = (void *)objc_msgSend(v7, "copy");

  }
  else
  {
    v5 = (void *)MEMORY[0x1D17A6DB0](v1);
  }

  return v5;
}

void sub_1CBED2AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  _BRRestorePersona();
  _Block_object_dispose(&a53, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__38(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__38(uint64_t a1)
{

}

void sub_1CBED36E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  void *v16;

  objc_sync_exit(v16);
  _Block_object_dispose(&a16, 8);
  _Unwind_Resume(a1);
}

void sub_1CBED3E6C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBED41AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1CBED462C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBED4AA0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBED4FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

void sub_1CBED5218(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBED5540(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBED5C90(_Unwind_Exception *a1)
{
  _BRRestorePersona();
  _Unwind_Resume(a1);
}

void __br_notify_register_dispatch_block_invoke_2_0()
{
  uint64_t v0;
  void *v1;
  id v2;

  objc_msgSend(MEMORY[0x1E0DC5F00], "personaAttributesForPersonaType:", 0);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "userPersonaUniqueString");
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)_block_invoke_3___personalPersona;
  _block_invoke_3___personalPersona = v0;

}

uint64_t BRFieldPkgLocalItemReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  BRFieldPkgItem *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = objc_alloc_init(BRFieldPkgItem);
          objc_storeStrong((id *)(a1 + 32), v17);
          if (PBReaderPlaceMark() && (BRFieldPkgItemReadFrom((uint64_t)v17, a2) & 1) != 0)
          {
            PBReaderRecallMark();

            continue;
          }

          return 0;
        case 2u:
          v19 = 0;
          v20 = 0;
          v21 = 0;
          while (1)
          {
            v22 = *v3;
            v23 = *(_QWORD *)(a2 + v22);
            if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
              break;
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0)
              goto LABEL_47;
            v19 += 7;
            v14 = v20++ >= 9;
            if (v14)
            {
              v21 = 0;
              goto LABEL_49;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_47:
          if (*(_BYTE *)(a2 + *v5))
            v21 = 0;
LABEL_49:
          v38 = 8;
          goto LABEL_58;
        case 3u:
          v25 = 0;
          v26 = 0;
          v27 = 0;
          *(_BYTE *)(a1 + 48) |= 2u;
          while (2)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
              *(_QWORD *)(a2 + v28) = v29 + 1;
              v27 |= (unint64_t)(v30 & 0x7F) << v25;
              if (v30 < 0)
              {
                v25 += 7;
                v14 = v26++ >= 9;
                if (v14)
                {
                  LODWORD(v27) = 0;
                  goto LABEL_53;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v27) = 0;
LABEL_53:
          *(_DWORD *)(a1 + 24) = v27;
          continue;
        case 4u:
          v31 = 0;
          v32 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 48) |= 1u;
          break;
        case 5u:
          PBReaderReadData();
          v36 = objc_claimAutoreleasedReturnValue();
          v37 = *(void **)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v36;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v33 = *v3;
        v34 = *(_QWORD *)(a2 + v33);
        if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
          break;
        v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
        *(_QWORD *)(a2 + v33) = v34 + 1;
        v21 |= (unint64_t)(v35 & 0x7F) << v31;
        if ((v35 & 0x80) == 0)
          goto LABEL_55;
        v31 += 7;
        v14 = v32++ >= 9;
        if (v14)
        {
          v21 = 0;
          goto LABEL_57;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_55:
      if (*(_BYTE *)(a2 + *v5))
        v21 = 0;
LABEL_57:
      v38 = 16;
LABEL_58:
      *(_QWORD *)(a1 + v38) = v21;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1CBED7088(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBED71D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBED791C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1CBED7C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__39(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__39(uint64_t a1)
{

}

void sub_1CBED8528(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBED8678(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBED87B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBED88E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBED8A3C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBED8B88(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBED8CCC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBED8E48(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBED8F6C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBED9090(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id BRCBundleServiceConnection()
{
  void *v0;
  int v1;
  void *v2;
  void *v4;
  NSObject *v5;

  +[BRCAccountsManager sharedManager](BRCAccountsManager, "sharedManager");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "isInSyncBubble");

  if (v1)
  {
    brc_bread_crumbs();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      BRCBundleServiceConnection_cold_1();

  }
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3B38]), "initWithServiceName:", CFSTR("com.apple.CloudDocsDaemon.container-metadata-extractor"));
  if (BRCBundleServiceInterface_onceToken != -1)
    dispatch_once(&BRCBundleServiceInterface_onceToken, &__block_literal_global_752);
  objc_msgSend(v2, "setRemoteObjectInterface:", BRCBundleServiceInterface_interface);
  objc_msgSend(v2, "resume");
  return v2;
}

void sub_1CBED97CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBED989C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBED9BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  void *v25;

  objc_sync_exit(v25);
  __brc_leave_section(&a25);
  _Unwind_Resume(a1);
}

void sub_1CBEDA748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBEDC03C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *location)
{
  uint64_t v12;

  __brc_leave_section((uint64_t *)(v12 - 184));
  _Unwind_Resume(a1);
}

void sub_1CBEDC2F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBEDC4D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBEDC5B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBEDC7BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBEDCC04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  id *v24;

  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CBEDD220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBEDD4DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CBEDD84C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBEDDD04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBEDE474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location)
{
  id *v11;
  uint64_t v12;

  objc_destroyWeak(v11);
  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v12 - 112));
  _Unwind_Resume(a1);
}

void sub_1CBEDEC20(_Unwind_Exception *a1)
{
  _BRRestorePersona();
  _Unwind_Resume(a1);
}

void sub_1CBEDF168(_Unwind_Exception *a1)
{
  _BRRestorePersona();
  _Unwind_Resume(a1);
}

void sub_1CBEDF6E4(_Unwind_Exception *a1)
{
  _BRRestorePersona();
  _Unwind_Resume(a1);
}

void sub_1CBEDFCF0(_Unwind_Exception *a1)
{
  _BRRestorePersona();
  _Unwind_Resume(a1);
}

void sub_1CBEE017C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  uint64_t v61;

  _Block_object_dispose(&a55, 8);
  _Block_object_dispose(&a61, 8);
  __brc_leave_section((uint64_t *)(v61 - 256));
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__40(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__40(uint64_t a1)
{

}

void sub_1CBEE075C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBEE099C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  __brc_leave_section(&a29);
  _Unwind_Resume(a1);
}

void sub_1CBEE17E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBEE1A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  void *v14;

  objc_destroyWeak(&location);
  objc_sync_exit(v14);
  _Unwind_Resume(a1);
}

void sub_1CBEE3B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  uint64_t v62;

  __brc_leave_section((uint64_t *)(v62 - 160));
  __brc_leave_section(&a62);
  _Unwind_Resume(a1);
}

void sub_1CBEE4028(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBEE4338(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBEE56C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  __brc_leave_section(&a28);
  _Unwind_Resume(a1);
}

void sub_1CBEE5AB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  __brc_leave_section((uint64_t *)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_1CBEE5F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  __brc_leave_section(&a30);
  _Unwind_Resume(a1);
}

void sub_1CBEE7104(_Unwind_Exception *a1)
{
  __brc_leave_section((uint64_t *)&STACK[0x3E0]);
  _Unwind_Resume(a1);
}

void sub_1CBEEA798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  __brc_leave_section(&a30);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose((const void *)(v39 - 224), 8);
  _Unwind_Resume(a1);
}

void sub_1CBEEAF98(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1CBEEB5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1CBEEB854(_Unwind_Exception *a1)
{
  objc_sync_exit(CFSTR("currentUserRecordID"));
  _Unwind_Resume(a1);
}

void sub_1CBEEB964(_Unwind_Exception *a1)
{
  objc_sync_exit(CFSTR("currentUserRecordID"));
  _Unwind_Resume(a1);
}

void sub_1CBEEBBAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  uint64_t v16;
  va_list va;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v16 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  __brc_leave_section((uint64_t *)va);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v14 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1CBEEBDA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBEEC170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBEEC68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBEEC894(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBEECFB0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBEEF520(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBEF0108(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBEF0B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void dispatch_async_with_logs_12(void *a1, void *a2)
{
  NSObject *v3;
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  const char *label;
  _QWORD v12[4];
  NSObject *v13;
  id v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _BYTE buf[24];
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = (void *)MEMORY[0x1D17A6BE8]();
  v17 = 0uLL;
  v18 = 0;
  __brc_create_section(0, (uint64_t)"dispatch_async_with_logs", 262, &v17);
  brc_bread_crumbs();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v10 = v17;
    label = dispatch_queue_get_label(v3);
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = v10;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = label;
    *(_WORD *)&buf[22] = 2112;
    v20 = v6;
    _os_log_debug_impl(&dword_1CBD43000, v7, OS_LOG_TYPE_DEBUG, "[DEBUG] ┣%llx dispatching to %s%@", buf, 0x20u);
  }

  *(_QWORD *)&buf[16] = v18;
  *(_OWORD *)buf = v17;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __dispatch_async_with_logs_block_invoke_19;
  v12[3] = &unk_1E875D578;
  v15 = v17;
  v16 = v18;
  v8 = v3;
  v13 = v8;
  v9 = v4;
  v14 = v9;
  dispatch_async(v8, v12);

  objc_autoreleasePoolPop(v5);
}

void sub_1CBEF0F28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBEF1408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBEF18CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBEF1B48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBEF1DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBEF2980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBEF2EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBEF3250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void sub_1CBEF3548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBEF3B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBEF3EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBEF4530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a26, 8);
  __brc_leave_section((uint64_t *)(v26 - 104));
  _Unwind_Resume(a1);
}

void sub_1CBEF5DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBEF618C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBEF7014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBEF7374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBEF77A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBEF7C80(_Unwind_Exception *a1)
{
  uint64_t v1;

  __brc_leave_section((uint64_t *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_1CBEF84A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void __dispatch_async_with_logs_block_invoke_19(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  const char *label;
  __int128 v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *(_OWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  brc_bread_crumbs();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    label = dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32));
    *(_DWORD *)buf = 134218498;
    v8 = v5;
    v9 = 2080;
    v10 = label;
    v11 = 2112;
    v12 = v2;
    _os_log_debug_impl(&dword_1CBD43000, v3, OS_LOG_TYPE_DEBUG, "[DEBUG] ┳%llx continuing on %s%@", buf, 0x20u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  __brc_leave_section((uint64_t *)&v5);
}

void sub_1CBEF884C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void dispatch_async_with_logs_13(void *a1, void *a2)
{
  NSObject *v3;
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  const char *label;
  _QWORD v12[4];
  NSObject *v13;
  id v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _BYTE buf[24];
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = (void *)MEMORY[0x1D17A6BE8]();
  v17 = 0uLL;
  v18 = 0;
  __brc_create_section(0, (uint64_t)"dispatch_async_with_logs", 262, &v17);
  brc_bread_crumbs();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v10 = v17;
    label = dispatch_queue_get_label(v3);
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = v10;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = label;
    *(_WORD *)&buf[22] = 2112;
    v20 = v6;
    _os_log_debug_impl(&dword_1CBD43000, v7, OS_LOG_TYPE_DEBUG, "[DEBUG] ┣%llx dispatching to %s%@", buf, 0x20u);
  }

  *(_QWORD *)&buf[16] = v18;
  *(_OWORD *)buf = v17;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __dispatch_async_with_logs_block_invoke_20;
  v12[3] = &unk_1E875D578;
  v15 = v17;
  v16 = v18;
  v8 = v3;
  v13 = v8;
  v9 = v4;
  v14 = v9;
  dispatch_async(v8, v12);

  objc_autoreleasePoolPop(v5);
}

void sub_1CBEF9D20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBEFAA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__41(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__41(uint64_t a1)
{

}

void sub_1CBEFAF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  _Block_object_dispose(&a55, 8);
  _Unwind_Resume(a1);
}

void sub_1CBEFB488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void __dispatch_async_with_logs_block_invoke_20(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  const char *label;
  __int128 v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *(_OWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  brc_bread_crumbs();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    label = dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32));
    *(_DWORD *)buf = 134218498;
    v8 = v5;
    v9 = 2080;
    v10 = label;
    v11 = 2112;
    v12 = v2;
    _os_log_debug_impl(&dword_1CBD43000, v3, OS_LOG_TYPE_DEBUG, "[DEBUG] ┳%llx continuing on %s%@", buf, 0x20u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  __brc_leave_section((uint64_t *)&v5);
}

void sub_1CBEFB6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

uint64_t AppTelemetryFPFSMigrationInvestigationReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  char v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  char v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  char v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char v94;
  char v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  char v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  char v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char v112;
  char v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char v118;
  char v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char v124;
  char v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  char v131;
  char v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char v137;
  char v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char v143;
  char v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  char v149;
  char v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  char v155;
  char v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  char v161;
  char v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  char v167;
  char v168;
  unsigned int v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  char v173;
  char v174;
  unsigned int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  char v180;
  char v181;
  unsigned int v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  char v186;
  char v187;
  unsigned int v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  char v193;
  char v194;
  unsigned int v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  char v199;
  char v200;
  unsigned int v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  char v205;
  char v206;
  unsigned int v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  char v211;
  char v212;
  unsigned int v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  char v217;
  char v218;
  unsigned int v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  char v223;
  BOOL v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_QWORD *)(a1 + 256) |= 0x40000000uLL;
          while (1)
          {
            v21 = *v3;
            v22 = *(_QWORD *)(a2 + v21);
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)(a2 + *v4))
              break;
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_253;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              v20 = 0;
              goto LABEL_255;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_253:
          if (*(_BYTE *)(a2 + *v5))
            v20 = 0;
LABEL_255:
          v224 = v20 != 0;
          v225 = 250;
          goto LABEL_361;
        case 2u:
          v26 = 0;
          v27 = 0;
          v28 = 0;
          *(_QWORD *)(a1 + 256) |= 0x400uLL;
          while (2)
          {
            v29 = *v3;
            v30 = *(_QWORD *)(a2 + v29);
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
              *(_QWORD *)(a2 + v29) = v31;
              v28 |= (unint64_t)(v32 & 0x7F) << v26;
              if (v32 < 0)
              {
                v26 += 7;
                v15 = v27++ >= 9;
                if (v15)
                {
                  v28 = 0;
                  goto LABEL_259;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v28 = 0;
LABEL_259:
          v226 = 88;
          goto LABEL_382;
        case 3u:
          v33 = 0;
          v34 = 0;
          v28 = 0;
          *(_QWORD *)(a1 + 256) |= 0x200000uLL;
          while (2)
          {
            v35 = *v3;
            v36 = *(_QWORD *)(a2 + v35);
            v37 = v36 + 1;
            if (v36 == -1 || v37 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
              *(_QWORD *)(a2 + v35) = v37;
              v28 |= (unint64_t)(v38 & 0x7F) << v33;
              if (v38 < 0)
              {
                v33 += 7;
                v15 = v34++ >= 9;
                if (v15)
                {
                  v28 = 0;
                  goto LABEL_263;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v28 = 0;
LABEL_263:
          v226 = 176;
          goto LABEL_382;
        case 4u:
          v39 = 0;
          v40 = 0;
          v28 = 0;
          *(_QWORD *)(a1 + 256) |= 1uLL;
          while (2)
          {
            v41 = *v3;
            v42 = *(_QWORD *)(a2 + v41);
            v43 = v42 + 1;
            if (v42 == -1 || v43 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v42);
              *(_QWORD *)(a2 + v41) = v43;
              v28 |= (unint64_t)(v44 & 0x7F) << v39;
              if (v44 < 0)
              {
                v39 += 7;
                v15 = v40++ >= 9;
                if (v15)
                {
                  v28 = 0;
                  goto LABEL_267;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v28 = 0;
LABEL_267:
          v226 = 8;
          goto LABEL_382;
        case 5u:
          v45 = 0;
          v46 = 0;
          v47 = 0;
          *(_QWORD *)(a1 + 256) |= 0x10000000uLL;
          while (2)
          {
            v48 = *v3;
            v49 = *(_QWORD *)(a2 + v48);
            v50 = v49 + 1;
            if (v49 == -1 || v50 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v51 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v49);
              *(_QWORD *)(a2 + v48) = v50;
              v47 |= (unint64_t)(v51 & 0x7F) << v45;
              if (v51 < 0)
              {
                v45 += 7;
                v15 = v46++ >= 9;
                if (v15)
                {
                  v47 = 0;
                  goto LABEL_271;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v47 = 0;
LABEL_271:
          v224 = v47 != 0;
          v225 = 248;
          goto LABEL_361;
        case 6u:
          *(_QWORD *)(a1 + 256) |= 0x80uLL;
          v52 = *v3;
          v53 = *(_QWORD *)(a2 + v52);
          if (v53 <= 0xFFFFFFFFFFFFFFF7 && v53 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v54 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v53);
            *(_QWORD *)(a2 + v52) = v53 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v54 = 0;
          }
          *(_QWORD *)(a1 + 64) = v54;
          continue;
        case 7u:
          v55 = 0;
          v56 = 0;
          v57 = 0;
          *(_QWORD *)(a1 + 256) |= 0x4000000uLL;
          while (2)
          {
            v58 = *v3;
            v59 = *(_QWORD *)(a2 + v58);
            v60 = v59 + 1;
            if (v59 == -1 || v60 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v61 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v59);
              *(_QWORD *)(a2 + v58) = v60;
              v57 |= (unint64_t)(v61 & 0x7F) << v55;
              if (v61 < 0)
              {
                v55 += 7;
                v15 = v56++ >= 9;
                if (v15)
                {
                  LODWORD(v57) = 0;
                  goto LABEL_275;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v57) = 0;
LABEL_275:
          v227 = 240;
          goto LABEL_280;
        case 8u:
          v62 = 0;
          v63 = 0;
          v57 = 0;
          *(_QWORD *)(a1 + 256) |= 0x8000000uLL;
          while (2)
          {
            v64 = *v3;
            v65 = *(_QWORD *)(a2 + v64);
            v66 = v65 + 1;
            if (v65 == -1 || v66 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v67 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v65);
              *(_QWORD *)(a2 + v64) = v66;
              v57 |= (unint64_t)(v67 & 0x7F) << v62;
              if (v67 < 0)
              {
                v62 += 7;
                v15 = v63++ >= 9;
                if (v15)
                {
                  LODWORD(v57) = 0;
                  goto LABEL_279;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v57) = 0;
LABEL_279:
          v227 = 244;
LABEL_280:
          *(_DWORD *)(a1 + v227) = v57;
          continue;
        case 9u:
          v68 = 0;
          v69 = 0;
          v28 = 0;
          *(_QWORD *)(a1 + 256) |= 0x200uLL;
          while (2)
          {
            v70 = *v3;
            v71 = *(_QWORD *)(a2 + v70);
            v72 = v71 + 1;
            if (v71 == -1 || v72 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v73 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v71);
              *(_QWORD *)(a2 + v70) = v72;
              v28 |= (unint64_t)(v73 & 0x7F) << v68;
              if (v73 < 0)
              {
                v68 += 7;
                v15 = v69++ >= 9;
                if (v15)
                {
                  v28 = 0;
                  goto LABEL_284;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v28 = 0;
LABEL_284:
          v226 = 80;
          goto LABEL_382;
        case 0xAu:
          v74 = 0;
          v75 = 0;
          v28 = 0;
          *(_QWORD *)(a1 + 256) |= 2uLL;
          while (2)
          {
            v76 = *v3;
            v77 = *(_QWORD *)(a2 + v76);
            v78 = v77 + 1;
            if (v77 == -1 || v78 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v79 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v77);
              *(_QWORD *)(a2 + v76) = v78;
              v28 |= (unint64_t)(v79 & 0x7F) << v74;
              if (v79 < 0)
              {
                v74 += 7;
                v15 = v75++ >= 9;
                if (v15)
                {
                  v28 = 0;
                  goto LABEL_288;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v28 = 0;
LABEL_288:
          v226 = 16;
          goto LABEL_382;
        case 0xBu:
          v80 = 0;
          v81 = 0;
          v28 = 0;
          *(_QWORD *)(a1 + 256) |= 4uLL;
          while (2)
          {
            v82 = *v3;
            v83 = *(_QWORD *)(a2 + v82);
            v84 = v83 + 1;
            if (v83 == -1 || v84 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v85 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v83);
              *(_QWORD *)(a2 + v82) = v84;
              v28 |= (unint64_t)(v85 & 0x7F) << v80;
              if (v85 < 0)
              {
                v80 += 7;
                v15 = v81++ >= 9;
                if (v15)
                {
                  v28 = 0;
                  goto LABEL_292;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v28 = 0;
LABEL_292:
          v226 = 24;
          goto LABEL_382;
        case 0xCu:
          PBReaderReadString();
          v86 = objc_claimAutoreleasedReturnValue();
          v87 = 232;
          goto LABEL_97;
        case 0xDu:
          PBReaderReadString();
          v86 = objc_claimAutoreleasedReturnValue();
          v87 = 216;
          goto LABEL_97;
        case 0xEu:
          PBReaderReadString();
          v86 = objc_claimAutoreleasedReturnValue();
          v87 = 224;
LABEL_97:
          v88 = *(void **)(a1 + v87);
          *(_QWORD *)(a1 + v87) = v86;

          continue;
        case 0xFu:
          v89 = 0;
          v90 = 0;
          v28 = 0;
          *(_QWORD *)(a1 + 256) |= 8uLL;
          while (2)
          {
            v91 = *v3;
            v92 = *(_QWORD *)(a2 + v91);
            v93 = v92 + 1;
            if (v92 == -1 || v93 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v94 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v92);
              *(_QWORD *)(a2 + v91) = v93;
              v28 |= (unint64_t)(v94 & 0x7F) << v89;
              if (v94 < 0)
              {
                v89 += 7;
                v15 = v90++ >= 9;
                if (v15)
                {
                  v28 = 0;
                  goto LABEL_296;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v28 = 0;
LABEL_296:
          v226 = 32;
          goto LABEL_382;
        case 0x10u:
          v95 = 0;
          v96 = 0;
          v28 = 0;
          *(_QWORD *)(a1 + 256) |= 0x10uLL;
          while (2)
          {
            v97 = *v3;
            v98 = *(_QWORD *)(a2 + v97);
            v99 = v98 + 1;
            if (v98 == -1 || v99 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v100 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v98);
              *(_QWORD *)(a2 + v97) = v99;
              v28 |= (unint64_t)(v100 & 0x7F) << v95;
              if (v100 < 0)
              {
                v95 += 7;
                v15 = v96++ >= 9;
                if (v15)
                {
                  v28 = 0;
                  goto LABEL_300;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v28 = 0;
LABEL_300:
          v226 = 40;
          goto LABEL_382;
        case 0x11u:
          v101 = 0;
          v102 = 0;
          v28 = 0;
          *(_QWORD *)(a1 + 256) |= 0x40uLL;
          while (2)
          {
            v103 = *v3;
            v104 = *(_QWORD *)(a2 + v103);
            v105 = v104 + 1;
            if (v104 == -1 || v105 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v106 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v104);
              *(_QWORD *)(a2 + v103) = v105;
              v28 |= (unint64_t)(v106 & 0x7F) << v101;
              if (v106 < 0)
              {
                v101 += 7;
                v15 = v102++ >= 9;
                if (v15)
                {
                  v28 = 0;
                  goto LABEL_304;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v28 = 0;
LABEL_304:
          v226 = 56;
          goto LABEL_382;
        case 0x12u:
          v107 = 0;
          v108 = 0;
          v28 = 0;
          *(_QWORD *)(a1 + 256) |= 0x1000uLL;
          while (2)
          {
            v109 = *v3;
            v110 = *(_QWORD *)(a2 + v109);
            v111 = v110 + 1;
            if (v110 == -1 || v111 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v112 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v110);
              *(_QWORD *)(a2 + v109) = v111;
              v28 |= (unint64_t)(v112 & 0x7F) << v107;
              if (v112 < 0)
              {
                v107 += 7;
                v15 = v108++ >= 9;
                if (v15)
                {
                  v28 = 0;
                  goto LABEL_308;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v28 = 0;
LABEL_308:
          v226 = 104;
          goto LABEL_382;
        case 0x13u:
          v113 = 0;
          v114 = 0;
          v28 = 0;
          *(_QWORD *)(a1 + 256) |= 0x100uLL;
          while (2)
          {
            v115 = *v3;
            v116 = *(_QWORD *)(a2 + v115);
            v117 = v116 + 1;
            if (v116 == -1 || v117 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v118 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v116);
              *(_QWORD *)(a2 + v115) = v117;
              v28 |= (unint64_t)(v118 & 0x7F) << v113;
              if (v118 < 0)
              {
                v113 += 7;
                v15 = v114++ >= 9;
                if (v15)
                {
                  v28 = 0;
                  goto LABEL_312;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v28 = 0;
LABEL_312:
          v226 = 72;
          goto LABEL_382;
        case 0x14u:
          v119 = 0;
          v120 = 0;
          v28 = 0;
          *(_QWORD *)(a1 + 256) |= 0x20uLL;
          while (2)
          {
            v121 = *v3;
            v122 = *(_QWORD *)(a2 + v121);
            v123 = v122 + 1;
            if (v122 == -1 || v123 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v124 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v122);
              *(_QWORD *)(a2 + v121) = v123;
              v28 |= (unint64_t)(v124 & 0x7F) << v119;
              if (v124 < 0)
              {
                v119 += 7;
                v15 = v120++ >= 9;
                if (v15)
                {
                  v28 = 0;
                  goto LABEL_316;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v28 = 0;
LABEL_316:
          v226 = 48;
          goto LABEL_382;
        case 0x15u:
          v125 = 0;
          v126 = 0;
          v127 = 0;
          *(_QWORD *)(a1 + 256) |= 0x20000000uLL;
          while (2)
          {
            v128 = *v3;
            v129 = *(_QWORD *)(a2 + v128);
            v130 = v129 + 1;
            if (v129 == -1 || v130 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v131 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v129);
              *(_QWORD *)(a2 + v128) = v130;
              v127 |= (unint64_t)(v131 & 0x7F) << v125;
              if (v131 < 0)
              {
                v125 += 7;
                v15 = v126++ >= 9;
                if (v15)
                {
                  v127 = 0;
                  goto LABEL_320;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v127 = 0;
LABEL_320:
          v224 = v127 != 0;
          v225 = 249;
          goto LABEL_361;
        case 0x16u:
          v132 = 0;
          v133 = 0;
          v28 = 0;
          *(_QWORD *)(a1 + 256) |= 0x40000uLL;
          while (2)
          {
            v134 = *v3;
            v135 = *(_QWORD *)(a2 + v134);
            v136 = v135 + 1;
            if (v135 == -1 || v136 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v137 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v135);
              *(_QWORD *)(a2 + v134) = v136;
              v28 |= (unint64_t)(v137 & 0x7F) << v132;
              if (v137 < 0)
              {
                v132 += 7;
                v15 = v133++ >= 9;
                if (v15)
                {
                  v28 = 0;
                  goto LABEL_324;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v28 = 0;
LABEL_324:
          v226 = 152;
          goto LABEL_382;
        case 0x17u:
          v138 = 0;
          v139 = 0;
          v28 = 0;
          *(_QWORD *)(a1 + 256) |= 0x100000uLL;
          while (2)
          {
            v140 = *v3;
            v141 = *(_QWORD *)(a2 + v140);
            v142 = v141 + 1;
            if (v141 == -1 || v142 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v143 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v141);
              *(_QWORD *)(a2 + v140) = v142;
              v28 |= (unint64_t)(v143 & 0x7F) << v138;
              if (v143 < 0)
              {
                v138 += 7;
                v15 = v139++ >= 9;
                if (v15)
                {
                  v28 = 0;
                  goto LABEL_328;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v28 = 0;
LABEL_328:
          v226 = 168;
          goto LABEL_382;
        case 0x18u:
          v144 = 0;
          v145 = 0;
          v28 = 0;
          *(_QWORD *)(a1 + 256) |= 0x80000uLL;
          while (2)
          {
            v146 = *v3;
            v147 = *(_QWORD *)(a2 + v146);
            v148 = v147 + 1;
            if (v147 == -1 || v148 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v149 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v147);
              *(_QWORD *)(a2 + v146) = v148;
              v28 |= (unint64_t)(v149 & 0x7F) << v144;
              if (v149 < 0)
              {
                v144 += 7;
                v15 = v145++ >= 9;
                if (v15)
                {
                  v28 = 0;
                  goto LABEL_332;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v28 = 0;
LABEL_332:
          v226 = 160;
          goto LABEL_382;
        case 0x19u:
          v150 = 0;
          v151 = 0;
          v28 = 0;
          *(_QWORD *)(a1 + 256) |= 0x4000uLL;
          while (2)
          {
            v152 = *v3;
            v153 = *(_QWORD *)(a2 + v152);
            v154 = v153 + 1;
            if (v153 == -1 || v154 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v155 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v153);
              *(_QWORD *)(a2 + v152) = v154;
              v28 |= (unint64_t)(v155 & 0x7F) << v150;
              if (v155 < 0)
              {
                v150 += 7;
                v15 = v151++ >= 9;
                if (v15)
                {
                  v28 = 0;
                  goto LABEL_336;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v28 = 0;
LABEL_336:
          v226 = 120;
          goto LABEL_382;
        case 0x1Au:
          v156 = 0;
          v157 = 0;
          v28 = 0;
          *(_QWORD *)(a1 + 256) |= 0x20000uLL;
          while (2)
          {
            v158 = *v3;
            v159 = *(_QWORD *)(a2 + v158);
            v160 = v159 + 1;
            if (v159 == -1 || v160 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v161 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v159);
              *(_QWORD *)(a2 + v158) = v160;
              v28 |= (unint64_t)(v161 & 0x7F) << v156;
              if (v161 < 0)
              {
                v156 += 7;
                v15 = v157++ >= 9;
                if (v15)
                {
                  v28 = 0;
                  goto LABEL_340;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v28 = 0;
LABEL_340:
          v226 = 144;
          goto LABEL_382;
        case 0x1Bu:
          v162 = 0;
          v163 = 0;
          v28 = 0;
          *(_QWORD *)(a1 + 256) |= 0x8000uLL;
          while (2)
          {
            v164 = *v3;
            v165 = *(_QWORD *)(a2 + v164);
            v166 = v165 + 1;
            if (v165 == -1 || v166 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v167 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v165);
              *(_QWORD *)(a2 + v164) = v166;
              v28 |= (unint64_t)(v167 & 0x7F) << v162;
              if (v167 < 0)
              {
                v162 += 7;
                v15 = v163++ >= 9;
                if (v15)
                {
                  v28 = 0;
                  goto LABEL_344;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v28 = 0;
LABEL_344:
          v226 = 128;
          goto LABEL_382;
        case 0x1Cu:
          v168 = 0;
          v169 = 0;
          v28 = 0;
          *(_QWORD *)(a1 + 256) |= 0x10000uLL;
          while (2)
          {
            v170 = *v3;
            v171 = *(_QWORD *)(a2 + v170);
            v172 = v171 + 1;
            if (v171 == -1 || v172 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v173 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v171);
              *(_QWORD *)(a2 + v170) = v172;
              v28 |= (unint64_t)(v173 & 0x7F) << v168;
              if (v173 < 0)
              {
                v168 += 7;
                v15 = v169++ >= 9;
                if (v15)
                {
                  v28 = 0;
                  goto LABEL_348;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v28 = 0;
LABEL_348:
          v226 = 136;
          goto LABEL_382;
        case 0x1Du:
          v174 = 0;
          v175 = 0;
          v176 = 0;
          *(_QWORD *)(a1 + 256) |= 0x100000000uLL;
          while (2)
          {
            v177 = *v3;
            v178 = *(_QWORD *)(a2 + v177);
            v179 = v178 + 1;
            if (v178 == -1 || v179 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v180 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v178);
              *(_QWORD *)(a2 + v177) = v179;
              v176 |= (unint64_t)(v180 & 0x7F) << v174;
              if (v180 < 0)
              {
                v174 += 7;
                v15 = v175++ >= 9;
                if (v15)
                {
                  v176 = 0;
                  goto LABEL_352;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v176 = 0;
LABEL_352:
          v224 = v176 != 0;
          v225 = 252;
          goto LABEL_361;
        case 0x1Eu:
          v181 = 0;
          v182 = 0;
          v28 = 0;
          *(_QWORD *)(a1 + 256) |= 0x2000000uLL;
          while (2)
          {
            v183 = *v3;
            v184 = *(_QWORD *)(a2 + v183);
            v185 = v184 + 1;
            if (v184 == -1 || v185 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v186 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v184);
              *(_QWORD *)(a2 + v183) = v185;
              v28 |= (unint64_t)(v186 & 0x7F) << v181;
              if (v186 < 0)
              {
                v181 += 7;
                v15 = v182++ >= 9;
                if (v15)
                {
                  v28 = 0;
                  goto LABEL_356;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v28 = 0;
LABEL_356:
          v226 = 208;
          goto LABEL_382;
        case 0x1Fu:
          v187 = 0;
          v188 = 0;
          v189 = 0;
          *(_QWORD *)(a1 + 256) |= 0x80000000uLL;
          while (2)
          {
            v190 = *v3;
            v191 = *(_QWORD *)(a2 + v190);
            v192 = v191 + 1;
            if (v191 == -1 || v192 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v193 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v191);
              *(_QWORD *)(a2 + v190) = v192;
              v189 |= (unint64_t)(v193 & 0x7F) << v187;
              if (v193 < 0)
              {
                v187 += 7;
                v15 = v188++ >= 9;
                if (v15)
                {
                  v189 = 0;
                  goto LABEL_360;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v189 = 0;
LABEL_360:
          v224 = v189 != 0;
          v225 = 251;
LABEL_361:
          *(_BYTE *)(a1 + v225) = v224;
          continue;
        case 0x20u:
          v194 = 0;
          v195 = 0;
          v28 = 0;
          *(_QWORD *)(a1 + 256) |= 0x1000000uLL;
          while (2)
          {
            v196 = *v3;
            v197 = *(_QWORD *)(a2 + v196);
            v198 = v197 + 1;
            if (v197 == -1 || v198 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v199 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v197);
              *(_QWORD *)(a2 + v196) = v198;
              v28 |= (unint64_t)(v199 & 0x7F) << v194;
              if (v199 < 0)
              {
                v194 += 7;
                v15 = v195++ >= 9;
                if (v15)
                {
                  v28 = 0;
                  goto LABEL_365;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v28 = 0;
LABEL_365:
          v226 = 200;
          goto LABEL_382;
        case 0x21u:
          v200 = 0;
          v201 = 0;
          v28 = 0;
          *(_QWORD *)(a1 + 256) |= 0x400000uLL;
          while (2)
          {
            v202 = *v3;
            v203 = *(_QWORD *)(a2 + v202);
            v204 = v203 + 1;
            if (v203 == -1 || v204 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v205 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v203);
              *(_QWORD *)(a2 + v202) = v204;
              v28 |= (unint64_t)(v205 & 0x7F) << v200;
              if (v205 < 0)
              {
                v200 += 7;
                v15 = v201++ >= 9;
                if (v15)
                {
                  v28 = 0;
                  goto LABEL_369;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v28 = 0;
LABEL_369:
          v226 = 184;
          goto LABEL_382;
        case 0x22u:
          v206 = 0;
          v207 = 0;
          v28 = 0;
          *(_QWORD *)(a1 + 256) |= 0x800uLL;
          while (2)
          {
            v208 = *v3;
            v209 = *(_QWORD *)(a2 + v208);
            v210 = v209 + 1;
            if (v209 == -1 || v210 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v211 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v209);
              *(_QWORD *)(a2 + v208) = v210;
              v28 |= (unint64_t)(v211 & 0x7F) << v206;
              if (v211 < 0)
              {
                v206 += 7;
                v15 = v207++ >= 9;
                if (v15)
                {
                  v28 = 0;
                  goto LABEL_373;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v28 = 0;
LABEL_373:
          v226 = 96;
          goto LABEL_382;
        case 0x23u:
          v212 = 0;
          v213 = 0;
          v28 = 0;
          *(_QWORD *)(a1 + 256) |= 0x2000uLL;
          while (2)
          {
            v214 = *v3;
            v215 = *(_QWORD *)(a2 + v214);
            v216 = v215 + 1;
            if (v215 == -1 || v216 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v217 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v215);
              *(_QWORD *)(a2 + v214) = v216;
              v28 |= (unint64_t)(v217 & 0x7F) << v212;
              if (v217 < 0)
              {
                v212 += 7;
                v15 = v213++ >= 9;
                if (v15)
                {
                  v28 = 0;
                  goto LABEL_377;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v28 = 0;
LABEL_377:
          v226 = 112;
          goto LABEL_382;
        case 0x24u:
          v218 = 0;
          v219 = 0;
          v28 = 0;
          *(_QWORD *)(a1 + 256) |= 0x800000uLL;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v220 = *v3;
        v221 = *(_QWORD *)(a2 + v220);
        v222 = v221 + 1;
        if (v221 == -1 || v222 > *(_QWORD *)(a2 + *v4))
          break;
        v223 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v221);
        *(_QWORD *)(a2 + v220) = v222;
        v28 |= (unint64_t)(v223 & 0x7F) << v218;
        if ((v223 & 0x80) == 0)
          goto LABEL_379;
        v218 += 7;
        v15 = v219++ >= 9;
        if (v15)
        {
          v28 = 0;
          goto LABEL_381;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_379:
      if (*(_BYTE *)(a2 + *v5))
        v28 = 0;
LABEL_381:
      v226 = 192;
LABEL_382:
      *(_QWORD *)(a1 + v226) = v28;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

const __CFString *zoneHealthStateDescriptionForCode(unsigned int a1)
{
  if (a1 > 2)
    return CFSTR("unknown");
  else
    return off_1E8764FE0[a1];
}

uint64_t shouldReportProblemToHealthZone(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  +[BRCUserDefaults defaultsForMangledID:](BRCUserDefaults, "defaultsForMangledID:", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "healthErrorsToReport");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "containsObject:", v4);

  return v5;
}

uint64_t BRCSetSharedSpotlightAttributeAtURL()
{
  return 0;
}

uint64_t BRCSetAllShareAttributesAtURL(void *a1)
{
  id v1;
  int v2;
  void *v3;
  NSObject *v4;
  void *v6;
  int v7;
  void *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = *__error();
  brc_bread_crumbs();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, (os_log_type_t)0x90u))
  {
    objc_msgSend(v1, "path");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = 138412802;
    v8 = v6;
    v9 = 1024;
    v10 = v2;
    v11 = 2112;
    v12 = v3;
    _os_log_error_impl(&dword_1CBD43000, v4, (os_log_type_t)0x90u, "[ERROR] could not set Spotlight attribute for share at path: %@ %{errno}d%@", (uint8_t *)&v7, 0x1Cu);

  }
  *__error() = v2;

  return 0;
}

uint64_t BRCReadlinkAt(int a1, const char *a2, char *a3, uint64_t a4)
{
  ssize_t v5;
  ssize_t v6;
  uint64_t result;

  v5 = readlinkat(a1, a2, a3, a4 - 1);
  if (v5 < 0)
    return 0xFFFFFFFFLL;
  v6 = v5;
  result = 0;
  a3[v6] = 0;
  return result;
}

uint64_t BRCUnlinkAt(int a1, void *a2, int a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  int *v10;
  char *v11;
  _DWORD v12[2];
  __int16 v13;
  id v14;
  __int16 v15;
  int v16;
  __int16 v17;
  char *v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = objc_retainAutorelease(a2);
  v6 = unlinkat(a1, (const char *)objc_msgSend(v5, "fileSystemRepresentation"), a3);
  if ((_DWORD)v6)
  {
    brc_bread_crumbs();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      v10 = __error();
      v11 = strerror(*v10);
      v12[0] = 67110146;
      v12[1] = a1;
      v13 = 2112;
      v14 = v5;
      v15 = 1024;
      v16 = a3;
      v17 = 2080;
      v18 = v11;
      v19 = 2112;
      v20 = v7;
      _os_log_debug_impl(&dword_1CBD43000, v8, OS_LOG_TYPE_DEBUG, "[DEBUG] unlinkat(%d, '%@', %d) failed: %s%@", (uint8_t *)v12, 0x2Cu);
    }

  }
  return v6;
}

uint64_t BRCMkdirAt(int a1, void *a2, int a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  void *v9;
  NSObject *v10;
  int *v12;
  char *v13;
  _DWORD v14[2];
  __int16 v15;
  id v16;
  __int16 v17;
  int v18;
  __int16 v19;
  char *v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = objc_retainAutorelease(a2);
  v6 = mkdirat(a1, (const char *)objc_msgSend(v5, "fileSystemRepresentation"), a3);
  v7 = v6;
  if ((_DWORD)v6)
    v8 = (_DWORD)v6 == 17;
  else
    v8 = 1;
  if (!v8)
  {
    brc_bread_crumbs();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v12 = __error();
      v13 = strerror(*v12);
      v14[0] = 67110146;
      v14[1] = a1;
      v15 = 2112;
      v16 = v5;
      v17 = 1024;
      v18 = a3;
      v19 = 2080;
      v20 = v13;
      v21 = 2112;
      v22 = v9;
      _os_log_debug_impl(&dword_1CBD43000, v10, OS_LOG_TYPE_DEBUG, "[DEBUG] mkdirat(%d, '%@', 0%3o) failed: %s%@", (uint8_t *)v14, 0x2Cu);
    }

  }
  return v7;
}

uint64_t BRCSymlinkAt(void *a1, int a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  const char *v8;
  id v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  int v13;
  void *v14;
  NSObject *v15;
  int *v17;
  char *v18;
  _DWORD v19[2];
  __int16 v20;
  id v21;
  __int16 v22;
  id v23;
  __int16 v24;
  char *v25;
  __int16 v26;
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  if (!objc_msgSend(v5, "length"))
  {
    v13 = *__error();
    brc_bread_crumbs();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, (os_log_type_t)0x90u))
      BRCSymlinkAt_cold_1();
    goto LABEL_11;
  }
  if (!objc_msgSend(v6, "length"))
  {
    v13 = *__error();
    brc_bread_crumbs();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, (os_log_type_t)0x90u))
      BRCSymlinkAt_cold_2();
LABEL_11:

    *__error() = v13;
    *__error() = 22;
    v10 = 0xFFFFFFFFLL;
    goto LABEL_12;
  }
  v7 = objc_retainAutorelease(v5);
  v8 = (const char *)objc_msgSend(v7, "fileSystemRepresentation");
  v9 = objc_retainAutorelease(v6);
  v10 = symlinkat(v8, a2, (const char *)objc_msgSend(v9, "fileSystemRepresentation"));
  if ((_DWORD)v10)
  {
    brc_bread_crumbs();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      v17 = __error();
      v18 = strerror(*v17);
      v19[0] = 67110146;
      v19[1] = a2;
      v20 = 2112;
      v21 = v9;
      v22 = 2112;
      v23 = v7;
      v24 = 2080;
      v25 = v18;
      v26 = 2112;
      v27 = v11;
      _os_log_debug_impl(&dword_1CBD43000, v12, OS_LOG_TYPE_DEBUG, "[DEBUG] symlinkat(%d, '%@', '%@') failed: %s%@", (uint8_t *)v19, 0x30u);
    }

  }
LABEL_12:

  return v10;
}

uint64_t BRCMkContainerComponent(int a1, void *a2, _BYTE *a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  id v9;
  id v10;
  int v11;
  void *v12;
  NSObject *v13;
  int v14;
  void *v15;
  NSObject *v16;
  void *v18;
  NSObject *v19;
  int v20;
  void *v21;
  NSObject *v22;
  void *v23;
  NSObject *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint8_t buf[4];
  int v29;
  __int16 v30;
  id v31;
  __int16 v32;
  int v33;
  __int16 v34;
  void *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v26 = xmmword_1CC067168;
  v27 = 0;
  v25 = 0;
  v5 = objc_retainAutorelease(a2);
  if (!getattrlistat(a1, (const char *)objc_msgSend(v5, "fileSystemRepresentation"), &v26, &v25, 8uLL, 0x21uLL)
    && (WORD2(v25) & 0xF1D2) == 0x41C0)
  {
    goto LABEL_15;
  }
  if ((BRCMkdirAt(a1, v5, 493) & 0x80000000) == 0)
  {
    brc_bread_crumbs();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      BRCMkContainerComponent_cold_4();

    goto LABEL_7;
  }
  if (*__error() != 17)
  {
    v14 = *__error();
    brc_bread_crumbs();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, (os_log_type_t)0x90u))
    {
      *(_DWORD *)buf = 67109890;
      v29 = a1;
      v30 = 2112;
      v31 = v5;
      v32 = 1024;
      v33 = v14;
      v34 = 2112;
      v35 = v15;
      _os_log_error_impl(&dword_1CBD43000, v16, (os_log_type_t)0x90u, "[ERROR] mkdirat(%d, '%@') failed %{errno}d%@", buf, 0x22u);
    }

    *__error() = v14;
    if (*__error())
      goto LABEL_21;
    brc_bread_crumbs();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v24 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
      goto LABEL_33;
    goto LABEL_32;
  }
  v9 = objc_retainAutorelease(v5);
  if (unlinkat(a1, (const char *)objc_msgSend(v9, "fileSystemRepresentation"), 0))
  {
    v10 = objc_retainAutorelease(v9);
    if (fchmodat(a1, (const char *)objc_msgSend(v10, "br_fileSystemRepresentation"), 0x1EDu, 32) < 0)
    {
      v11 = *__error();
      brc_bread_crumbs();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, (os_log_type_t)0x90u))
      {
        *(_DWORD *)buf = 67109890;
        v29 = a1;
        v30 = 2112;
        v31 = v10;
        v32 = 1024;
        v33 = v11;
        v34 = 2112;
        v35 = v12;
        _os_log_error_impl(&dword_1CBD43000, v13, (os_log_type_t)0x90u, "[ERROR] fchmodat(%d, '%@') failed %{errno}d%@", buf, 0x22u);
      }

      *__error() = v11;
    }
LABEL_15:
    if (a3)
    {
      v8 = 0;
      *a3 = 0;
      goto LABEL_22;
    }
LABEL_17:
    v8 = 0;
    goto LABEL_22;
  }
  brc_bread_crumbs();
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    BRCMkContainerComponent_cold_2();

  if ((BRCMkdirAt(a1, v9, 511) & 0x80000000) != 0)
  {
    v20 = *__error();
    brc_bread_crumbs();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, (os_log_type_t)0x90u))
    {
      *(_DWORD *)buf = 67109890;
      v29 = a1;
      v30 = 2112;
      v31 = v9;
      v32 = 1024;
      v33 = v20;
      v34 = 2112;
      v35 = v21;
      _os_log_error_impl(&dword_1CBD43000, v22, (os_log_type_t)0x90u, "[ERROR] mkdirat(%d, '%@') failed %{errno}d%@", buf, 0x22u);
    }

    *__error() = v20;
    if (*__error())
      goto LABEL_21;
    brc_bread_crumbs();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v24 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
    {
LABEL_33:

LABEL_21:
      v8 = 0xFFFFFFFFLL;
      goto LABEL_22;
    }
LABEL_32:
    BRCMkContainerComponent_cold_1();
    goto LABEL_33;
  }
LABEL_7:
  if (!a3)
    goto LABEL_17;
  v8 = 0;
  *a3 = 1;
LABEL_22:

  return v8;
}

uint64_t BRCRenameAt(int a1, void *a2, int a3, void *a4, unsigned int a5)
{
  id v9;
  id v10;
  id v11;
  const char *v12;
  id v13;
  uint64_t v14;
  void *v15;
  NSObject *v16;
  int *v18;
  char *v19;
  _DWORD v20[2];
  __int16 v21;
  id v22;
  __int16 v23;
  int v24;
  __int16 v25;
  id v26;
  __int16 v27;
  unsigned int v28;
  __int16 v29;
  char *v30;
  __int16 v31;
  void *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10 = a4;
  v11 = objc_retainAutorelease(v9);
  v12 = (const char *)objc_msgSend(v11, "fileSystemRepresentation");
  v13 = objc_retainAutorelease(v10);
  v14 = renameatx_np(a1, v12, a3, (const char *)objc_msgSend(v13, "fileSystemRepresentation"), a5);
  if ((_DWORD)v14)
  {
    brc_bread_crumbs();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      v18 = __error();
      v19 = strerror(*v18);
      v20[0] = 67110658;
      v20[1] = a1;
      v21 = 2112;
      v22 = v11;
      v23 = 1024;
      v24 = a3;
      v25 = 2112;
      v26 = v13;
      v27 = 1024;
      v28 = a5;
      v29 = 2080;
      v30 = v19;
      v31 = 2112;
      v32 = v15;
      _os_log_debug_impl(&dword_1CBD43000, v16, OS_LOG_TYPE_DEBUG, "[DEBUG] renameatx_np(%d, '%@', %d, '%@', %u) failed: %s%@", (uint8_t *)v20, 0x3Cu);
    }

  }
  return v14;
}

uint64_t BRCCloneAt(int a1, void *a2, int a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  _copyfile_state *v10;
  void *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  id v15;
  const char *v16;
  id v17;
  uint64_t v18;
  int v19;
  int v20;
  void *v21;
  NSObject *v22;
  void *v24;
  void *v25;
  int src;
  stat v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  void *v31;
  __int16 v32;
  void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a4;
  memset(&v27, 0, sizeof(v27));
  v9 = objc_retainAutorelease(v7);
  if (fstatat(a1, (const char *)objc_msgSend(v9, "fileSystemRepresentation"), &v27, 32) < 0)
  {
    v20 = *__error();
    brc_bread_crumbs();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, (os_log_type_t)0x90u))
      BRCCloneAt_cold_1();

    *__error() = v20;
    v18 = 0xFFFFFFFFLL;
  }
  else if ((v27.st_mode & 0xF000) == 0x4000)
  {
    src = 0;
    v10 = copyfile_state_alloc();
    copyfile_state_set(v10, 6u, brc_copyfileat_status_cb);
    copyfile_state_set(v10, 7u, &src);
    BRCPathAt(a1, v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    BRCPathAt(a3, v8);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    brc_bread_crumbs();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend(v11, "fp_prettyPath");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "fp_prettyPath");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412802;
      v29 = v24;
      v30 = 2112;
      v31 = v25;
      v32 = 2112;
      v33 = v13;
      _os_log_debug_impl(&dword_1CBD43000, v14, OS_LOG_TYPE_DEBUG, "[DEBUG] Cloning %@ to %@%@", buf, 0x20u);

    }
    v15 = objc_retainAutorelease(v11);
    v16 = (const char *)objc_msgSend(v15, "fileSystemRepresentation");
    v17 = objc_retainAutorelease(v12);
    v18 = copyfile(v16, (const char *)objc_msgSend(v17, "fileSystemRepresentation"), v10, 0x10C8000u);
    copyfile_state_free(v10);
    if ((v18 & 0x80000000) != 0)
    {
      v19 = src;
      if (src)
        *__error() = v19;
    }

  }
  else
  {
    v18 = clonefileat(a1, (const char *)objc_msgSend(objc_retainAutorelease(v9), "fileSystemRepresentation"), a3, (const char *)objc_msgSend(objc_retainAutorelease(v8), "fileSystemRepresentation"), 1u);
  }

  return v18;
}

uint64_t brc_copyfileat_status_cb(int a1, int a2, uint64_t a3, const char *a4, uint64_t a5, int *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int v12;
  int v13;
  void *v14;
  NSObject *v15;
  void *v16;
  NSObject *v17;
  stat v18;
  uint64_t v19;
  uint64_t v20;

  result = 0;
  if (a1 == 1 && a2 == 3)
  {
    v19 = v6;
    v20 = v7;
    v12 = *__error();
    memset(&v18, 0, sizeof(v18));
    if ((lstat(a4, &v18) & 0x80000000) == 0)
    {
      v13 = v18.st_mode & 0xF000;
      if (v13 != 0x4000)
      {
        if (v13 == 0x8000)
        {
          if ((v18.st_flags & 0x20) != 0 && v12 == 9)
          {
            brc_bread_crumbs();
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            brc_default_log();
            v15 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
              brc_copyfileat_status_cb_cold_2();
            goto LABEL_13;
          }
        }
        else if (v13 != 40960)
        {
          brc_bread_crumbs();
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          brc_default_log();
          v15 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
            brc_copyfileat_status_cb_cold_1();
LABEL_13:

          return 1;
        }
      }
    }
    brc_bread_crumbs();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, (os_log_type_t)0x90u))
      brc_copyfileat_status_cb_cold_3();

    *a6 = *__error();
    return 2;
  }
  return result;
}

id BRCPathAt(int a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _BYTE v8[1024];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (a1 == -1)
  {
    v6 = v3;
  }
  else if (fcntl(a1, 50, v8) < 0)
  {
    v6 = 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "br_pathWithFileSystemRepresentation:", v8);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "stringByAppendingPathComponent:", v4);
    v6 = (id)objc_claimAutoreleasedReturnValue();

  }
  return v6;
}

uint64_t BRCFSetAttrList(int a1, void *a2, void *a3, size_t a4)
{
  uint64_t v4;
  void *v5;
  NSObject *v6;

  v4 = fsetattrlist(a1, a2, a3, a4, 1u);
  if ((_DWORD)v4)
  {
    brc_bread_crumbs();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      BRCFSetAttrList_cold_1((uint64_t)v5, v6);

  }
  return v4;
}

BOOL BRCSetXattrValueForKeyOnPath(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  int v9;
  int v10;
  _BOOL8 v11;
  int v12;
  void *v13;
  NSObject *v14;
  int v16;
  id v17;
  __int16 v18;
  int v19;
  __int16 v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = objc_retainAutorelease(v5);
  v9 = open((const char *)objc_msgSend(v8, "fileSystemRepresentation"), 33028);
  if (v9 < 0)
  {
    if (*__error() == 2)
    {
      v11 = 0;
    }
    else
    {
      v12 = *__error();
      brc_bread_crumbs();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, (os_log_type_t)0x90u))
      {
        v16 = 138412802;
        v17 = v8;
        v18 = 1024;
        v19 = v12;
        v20 = 2112;
        v21 = v13;
        _os_log_error_impl(&dword_1CBD43000, v14, (os_log_type_t)0x90u, "[ERROR] can't open '%@' %{errno}d%@", (uint8_t *)&v16, 0x1Cu);
      }

      v11 = 0;
      *__error() = v12;
    }
  }
  else
  {
    v10 = v9;
    v11 = BRCSetXattrValueForKeyOnFD(v9, v8, v6, v7);
    close(v10);
  }

  return v11;
}

BOOL BRCSetXattrValueForKeyOnFD(int a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  const char *v10;
  id v11;
  const void *v12;
  size_t v13;
  int v14;
  int v15;
  void *v16;
  NSObject *v17;
  int v19;
  const char *v20;
  __int16 v21;
  const void *v22;
  __int16 v23;
  id v24;
  __int16 v25;
  int v26;
  __int16 v27;
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = objc_retainAutorelease(a3);
  v9 = a4;
  v10 = (const char *)objc_msgSend(v8, "UTF8String");
  v11 = objc_retainAutorelease(v9);
  v12 = (const void *)objc_msgSend(v11, "UTF8String");
  v13 = objc_msgSend(v11, "length");

  v14 = fsetxattr(a1, v10, v12, v13, 0, 0);
  if (v14 < 0)
  {
    v15 = *__error();
    brc_bread_crumbs();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, (os_log_type_t)0x90u))
    {
      v19 = 136316162;
      v20 = v10;
      v21 = 2080;
      v22 = v12;
      v23 = 2112;
      v24 = v7;
      v25 = 1024;
      v26 = v15;
      v27 = 2112;
      v28 = v16;
      _os_log_error_impl(&dword_1CBD43000, v17, (os_log_type_t)0x90u, "[ERROR] can't set xattr %s to %s at '%@' %{errno}d%@", (uint8_t *)&v19, 0x30u);
    }

    *__error() = v15;
  }

  return v14 >= 0;
}

id BRCGetXattrValueForKeyOnPath(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  int v6;
  int v7;
  void *v8;
  int v9;
  void *v10;
  NSObject *v11;
  int v13;
  id v14;
  __int16 v15;
  int v16;
  __int16 v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = objc_retainAutorelease(v3);
  v6 = open((const char *)objc_msgSend(v5, "fileSystemRepresentation"), 33028);
  if (v6 < 0)
  {
    if (*__error() == 2)
    {
      v8 = 0;
    }
    else
    {
      v9 = *__error();
      brc_bread_crumbs();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, (os_log_type_t)0x90u))
      {
        v13 = 138412802;
        v14 = v5;
        v15 = 1024;
        v16 = v9;
        v17 = 2112;
        v18 = v10;
        _os_log_error_impl(&dword_1CBD43000, v11, (os_log_type_t)0x90u, "[ERROR] can't open '%@' %{errno}d%@", (uint8_t *)&v13, 0x1Cu);
      }

      v8 = 0;
      *__error() = v9;
    }
  }
  else
  {
    v7 = v6;
    BRCGetXattrValueForKeyOnFD(v6, v5, v4);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    close(v7);
  }

  return v8;
}

id BRCGetXattrValueForKeyOnFD(int a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  ssize_t v9;
  size_t v10;
  _BYTE *v11;
  id v12;
  unsigned __int8 v13;
  uint64_t v14;
  BOOL v15;
  void *v16;
  NSObject *v17;
  int v18;
  void *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  NSObject *v23;
  int v24;
  void *v25;
  NSObject *v26;
  int v28;
  size_t v29;
  __int16 v30;
  id v31;
  __int16 v32;
  _BYTE v33[24];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (a1 < 0)
    goto LABEL_32;
  v8 = objc_retainAutorelease(v6);
  v9 = fgetxattr(a1, (const char *)objc_msgSend(v8, "UTF8String"), 0, 0, 0, 0);
  if (v9 < 0)
  {
    if (*__error() == 93)
    {
LABEL_32:
      v21 = 0;
      goto LABEL_33;
    }
    v18 = *__error();
    brc_bread_crumbs();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, (os_log_type_t)0x90u))
    {
      v28 = 138413058;
      v29 = (size_t)v8;
      v30 = 2112;
      v31 = v5;
      v32 = 1024;
      *(_DWORD *)v33 = v18;
      *(_WORD *)&v33[4] = 2112;
      *(_QWORD *)&v33[6] = v19;
      _os_log_error_impl(&dword_1CBD43000, v20, (os_log_type_t)0x90u, "[ERROR] can't read the size of xattr %@ at '%@' %{errno}d%@", (uint8_t *)&v28, 0x26u);
    }

    v21 = 0;
    *__error() = v18;
  }
  else
  {
    v10 = v9;
    if (!v9)
    {
      brc_bread_crumbs();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, (os_log_type_t)0x90u))
      {
        v28 = 138412802;
        v29 = (size_t)v8;
        v30 = 2112;
        v31 = v5;
        v32 = 2112;
        *(_QWORD *)v33 = v22;
        _os_log_error_impl(&dword_1CBD43000, v23, (os_log_type_t)0x90u, "[ERROR] empty xattr %@ at '%@'%@", (uint8_t *)&v28, 0x20u);
      }

      goto LABEL_32;
    }
    v11 = malloc_type_calloc(1uLL, v9 + 1, 0x75FFCE5uLL);
    v12 = objc_retainAutorelease(v8);
    if (fgetxattr(a1, (const char *)objc_msgSend(v12, "UTF8String"), v11, v10, 0, 0) < 0)
    {
      v24 = *__error();
      brc_bread_crumbs();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v26 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, (os_log_type_t)0x90u))
      {
        v28 = 134219010;
        v29 = v10;
        v30 = 2112;
        v31 = v12;
        v32 = 2112;
        *(_QWORD *)v33 = v5;
        *(_WORD *)&v33[8] = 1024;
        *(_DWORD *)&v33[10] = v24;
        *(_WORD *)&v33[14] = 2112;
        *(_QWORD *)&v33[16] = v25;
        _os_log_error_impl(&dword_1CBD43000, v26, (os_log_type_t)0x90u, "[ERROR] can't read %lu-byte xattr %@ at '%@' %{errno}d%@", (uint8_t *)&v28, 0x30u);
      }

      *__error() = v24;
LABEL_31:
      free(v11);
      goto LABEL_32;
    }
    v13 = *v11;
    if (*v11)
    {
      v14 = 1;
      while (1)
      {
        v15 = (v13 - 48) >= 0xAu && ((v13 & 0xDF) - 65) >= 0x1Au;
        if (v15 && (v13 - 32 > 0x3F || ((1 << (v13 - 32)) & 0x800000000400E001) == 0) && v13 != 10)
          break;
        v13 = v11[v14++];
        if (!v13)
          goto LABEL_27;
      }
      brc_bread_crumbs();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, (os_log_type_t)0x90u))
      {
        v28 = 138413058;
        v29 = (size_t)v12;
        v30 = 2112;
        v31 = v5;
        v32 = 2080;
        *(_QWORD *)v33 = v11;
        *(_WORD *)&v33[8] = 2112;
        *(_QWORD *)&v33[10] = v16;
        _os_log_error_impl(&dword_1CBD43000, v17, (os_log_type_t)0x90u, "[ERROR] invalid xattr %@ at '%@': %s%@", (uint8_t *)&v28, 0x2Au);
      }

      goto LABEL_31;
    }
LABEL_27:
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", v11, 4);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    free(v11);
  }
LABEL_33:

  return v21;
}

uint64_t BRCOpenAt(uint64_t a1, const char *a2, __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int16 a9)
{
  unsigned __int16 v9;

  if ((a3 & 0x200) != 0)
    v9 = a9;
  else
    v9 = 0;
  return BRCOpenAtAndGetProtectionStatus(a1, a2, a3, v9, 0);
}

uint64_t BRCOpenAtAndGetProtectionStatus(uint64_t a1, const char *a2, int a3, uint64_t a4, _BYTE *a5)
{
  uint64_t v10;
  void *v11;
  NSObject *v12;
  int v13;
  int v14;
  int v15;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  id v28;
  char *v29;
  NSObject *v30;
  __int16 v31;
  void *v32;
  NSObject *v33;
  void *v34;
  NSObject *v35;
  int v36;
  const char *v37;
  NSObject *v38;
  uint32_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int *v64;
  int v65;
  uint64_t v66;
  int v67;
  int v68;
  int v70;
  int v71;
  void *v72;
  NSObject *v73;
  int v74;
  int v75;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  dev_t v105;
  dev_t st_dev;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  gid_t v121;
  gid_t v122;
  uid_t v123;
  uid_t v124;
  int v125;
  int v126;
  int v127;
  int st_nlink;
  __darwin_ino64_t v129;
  __darwin_ino64_t st_ino;
  uid_t v131;
  uid_t st_uid;
  gid_t v133;
  gid_t st_gid;
  __darwin_time_t v135;
  __darwin_time_t tv_sec;
  __darwin_time_t v137;
  __darwin_time_t v138;
  __darwin_time_t v139;
  __darwin_time_t v140;
  off_t v141;
  off_t st_size;
  __uint32_t v143;
  __uint32_t st_flags;
  stat v145;
  uint8_t buf[4];
  int v147;
  __int16 v148;
  const char *v149;
  __int16 v150;
  dev_t v151;
  __int16 v152;
  _BYTE v153[10];
  _BYTE v154[6];
  _BYTE v155[6];
  _BYTE v156[6];
  _BYTE v157[6];
  _BYTE v158[6];
  _BYTE v159[6];
  _BYTE v160[6];
  _BYTE v161[6];
  _BYTE v162[10];
  __int16 v163;
  int v164;
  __int16 v165;
  uid_t v166;
  __int16 v167;
  gid_t v168;
  __int16 v169;
  _BYTE v170[10];
  __darwin_time_t v171;
  _BYTE v172[10];
  __int16 v173;
  _BYTE v174[10];
  _BYTE v175[6];
  void *v176;
  gid_t v177;
  __int16 v178;
  __darwin_time_t v179;
  __int16 v180;
  __darwin_time_t v181;
  __int16 v182;
  __darwin_time_t v183;
  __int16 v184;
  off_t v185;
  __int16 v186;
  __uint32_t v187;
  __int16 v188;
  _BYTE v189[14];
  uint64_t v190;

  v190 = *MEMORY[0x1E0C80C00];
  memset(&v145, 0, sizeof(v145));
  v10 = openat(a1, a2, a3, a4);
  if ((v10 & 0x80000000) == 0)
  {
LABEL_2:
    if (!fstat(v10, &v145) && (v145.st_mode & 0xF040) == 0x4000)
    {
      if (fchmod(v10, v145.st_mode | 0x1C0) < 0)
      {
        brc_bread_crumbs();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        brc_default_log();
        v12 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v12, (os_log_type_t)0x90u))
        {
          if ((~v145.st_mode & 0x100) != 0)
            v74 = 114;
          else
            v74 = 45;
          if ((~v145.st_mode & 0x80) != 0)
            v75 = 119;
          else
            v75 = 45;
          if ((~v145.st_mode & 0x40) != 0 && (v145.st_mode & 0xF000) == 0x4000)
            v77 = 120;
          else
            v77 = 45;
          st_dev = v145.st_dev;
          st_ino = v145.st_ino;
          if ((v145.st_mode & 0x100) != 0)
            v78 = 114;
          else
            v78 = 45;
          v124 = v78;
          v126 = aPcDBLSW[(unint64_t)v145.st_mode >> 12];
          if ((v145.st_mode & 0x80) != 0)
            v79 = 119;
          else
            v79 = 45;
          if ((v145.st_mode & 0x40) != 0)
            v80 = 120;
          else
            v80 = 45;
          v120 = v80;
          v122 = v79;
          if ((v145.st_mode & 0x20) != 0)
            v81 = 114;
          else
            v81 = 45;
          if ((v145.st_mode & 0x10) != 0)
            v82 = 119;
          else
            v82 = 45;
          v116 = v82;
          v118 = v81;
          if ((v145.st_mode & 8) != 0)
            v83 = 120;
          else
            v83 = 45;
          if ((v145.st_mode & 4) != 0)
            v84 = 114;
          else
            v84 = 45;
          v112 = v84;
          v114 = v83;
          if ((v145.st_mode & 2) != 0)
            v85 = 119;
          else
            v85 = 45;
          if ((v145.st_mode & 1) != 0)
            v86 = 120;
          else
            v86 = 45;
          v108 = v86;
          v110 = v85;
          st_nlink = v145.st_nlink;
          st_uid = v145.st_uid;
          st_gid = v145.st_gid;
          tv_sec = v145.st_atimespec.tv_sec;
          v138 = v145.st_mtimespec.tv_sec;
          v140 = v145.st_ctimespec.tv_sec;
          st_size = v145.st_size;
          st_flags = v145.st_flags;
          v87 = *__error();
          *(_DWORD *)buf = 67117570;
          v147 = a1;
          v148 = 2080;
          v149 = a2;
          v150 = 1024;
          v151 = 35;
          v152 = 1024;
          *(_DWORD *)v153 = v74;
          *(_WORD *)&v153[4] = 1024;
          *(_DWORD *)&v153[6] = v75;
          *(_WORD *)v154 = 1024;
          *(_DWORD *)&v154[2] = v77;
          *(_WORD *)v155 = 1024;
          *(_DWORD *)&v155[2] = 45;
          *(_WORD *)v156 = 1024;
          *(_DWORD *)&v156[2] = 45;
          *(_WORD *)v157 = 1024;
          *(_DWORD *)&v157[2] = 45;
          *(_WORD *)v158 = 1024;
          *(_DWORD *)&v158[2] = 45;
          *(_WORD *)v159 = 1024;
          *(_DWORD *)&v159[2] = 45;
          *(_WORD *)v160 = 1024;
          *(_DWORD *)&v160[2] = 45;
          *(_WORD *)v161 = 1024;
          *(_DWORD *)&v161[2] = st_dev;
          *(_WORD *)v162 = 2048;
          *(_QWORD *)&v162[2] = st_ino;
          v163 = 1024;
          v164 = v126;
          v165 = 1024;
          v166 = v124;
          v167 = 1024;
          v168 = v122;
          v169 = 1024;
          *(_DWORD *)v170 = v120;
          *(_WORD *)&v170[4] = 1024;
          *(_DWORD *)&v170[6] = v118;
          LOWORD(v171) = 1024;
          *(_DWORD *)((char *)&v171 + 2) = v116;
          HIWORD(v171) = 1024;
          *(_DWORD *)v172 = v114;
          *(_WORD *)&v172[4] = 1024;
          *(_DWORD *)&v172[6] = v112;
          v173 = 1024;
          *(_DWORD *)v174 = v110;
          *(_WORD *)&v174[4] = 1024;
          *(_DWORD *)&v174[6] = v108;
          *(_WORD *)v175 = 1024;
          *(_DWORD *)&v175[2] = st_nlink;
          LOWORD(v176) = 1024;
          *(_DWORD *)((char *)&v176 + 2) = st_uid;
          HIWORD(v176) = 1024;
          v177 = st_gid;
          v178 = 2048;
          v179 = tv_sec;
          v180 = 2048;
          v181 = v138;
          v182 = 2048;
          v183 = v140;
          v184 = 2048;
          v185 = st_size;
          v186 = 1024;
          v187 = st_flags;
          v188 = 1024;
          *(_DWORD *)v189 = v87;
          *(_WORD *)&v189[4] = 2112;
          *(_QWORD *)&v189[6] = v11;
          _os_log_error_impl(&dword_1CBD43000, v12, (os_log_type_t)0x90u, "[ERROR] failed fchmodat(%d, '%s', %c%c%c%c%c%c%c%c%c%c) deviceID:%u fileID:%llu mode:%c%c%c%c%c%c%c%c%c%c nlink:%u uid:%u gid:%u atime:%lu mtime:%lu ctime:%lu size:%llu flags:0x%x %{errno}d%@", buf, 0xEAu);
        }
      }
      else
      {
        brc_bread_crumbs();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        brc_default_log();
        v12 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          v13 = aPcDBLSW[(unint64_t)v145.st_mode >> 12];
          if ((~v145.st_mode & 0x100) != 0)
            v14 = 114;
          else
            v14 = 45;
          if ((~v145.st_mode & 0x80) != 0)
            v15 = 119;
          else
            v15 = 45;
          if ((~v145.st_mode & 0x40) != 0 && (v145.st_mode & 0xF000) == 0x4000)
            v17 = 120;
          else
            v17 = 45;
          if ((v145.st_mode & 0x100) != 0)
            v18 = 114;
          else
            v18 = 45;
          if ((v145.st_mode & 0x80) != 0)
            v19 = 119;
          else
            v19 = 45;
          if ((v145.st_mode & 0x40) != 0)
            v20 = 120;
          else
            v20 = 45;
          *(_DWORD *)buf = 67117314;
          if ((v145.st_mode & 0x20) != 0)
            v21 = 114;
          else
            v21 = 45;
          v147 = a1;
          v148 = 2080;
          if ((v145.st_mode & 0x10) != 0)
            v22 = 119;
          else
            v22 = 45;
          v149 = a2;
          if ((v145.st_mode & 8) != 0)
            v23 = 120;
          else
            v23 = 45;
          v150 = 1024;
          v151 = 35;
          if ((v145.st_mode & 4) != 0)
            v24 = 114;
          else
            v24 = 45;
          v152 = 1024;
          if ((v145.st_mode & 2) != 0)
            v25 = 119;
          else
            v25 = 45;
          *(_DWORD *)v153 = v14;
          if ((v145.st_mode & 1) != 0)
            v26 = 120;
          else
            v26 = 45;
          *(_WORD *)&v153[4] = 1024;
          *(_DWORD *)&v153[6] = v15;
          *(_WORD *)v154 = 1024;
          *(_DWORD *)&v154[2] = v17;
          *(_WORD *)v155 = 1024;
          *(_DWORD *)&v155[2] = 45;
          *(_WORD *)v156 = 1024;
          *(_DWORD *)&v156[2] = 45;
          *(_WORD *)v157 = 1024;
          *(_DWORD *)&v157[2] = 45;
          *(_WORD *)v158 = 1024;
          *(_DWORD *)&v158[2] = 45;
          *(_WORD *)v159 = 1024;
          *(_DWORD *)&v159[2] = 45;
          *(_WORD *)v160 = 1024;
          *(_DWORD *)&v160[2] = 45;
          *(_WORD *)v161 = 1024;
          *(_DWORD *)&v161[2] = v145.st_dev;
          *(_WORD *)v162 = 2048;
          *(_QWORD *)&v162[2] = v145.st_ino;
          v163 = 1024;
          v164 = v13;
          v165 = 1024;
          v166 = v18;
          v167 = 1024;
          v168 = v19;
          v169 = 1024;
          *(_DWORD *)v170 = v20;
          *(_WORD *)&v170[4] = 1024;
          *(_DWORD *)&v170[6] = v21;
          LOWORD(v171) = 1024;
          *(_DWORD *)((char *)&v171 + 2) = v22;
          HIWORD(v171) = 1024;
          *(_DWORD *)v172 = v23;
          *(_WORD *)&v172[4] = 1024;
          *(_DWORD *)&v172[6] = v24;
          v173 = 1024;
          *(_DWORD *)v174 = v25;
          *(_WORD *)&v174[4] = 1024;
          *(_DWORD *)&v174[6] = v26;
          *(_WORD *)v175 = 1024;
          *(_DWORD *)&v175[2] = v145.st_nlink;
          LOWORD(v176) = 1024;
          *(_DWORD *)((char *)&v176 + 2) = v145.st_uid;
          HIWORD(v176) = 1024;
          v177 = v145.st_gid;
          v178 = 2048;
          v179 = v145.st_atimespec.tv_sec;
          v180 = 2048;
          v181 = v145.st_mtimespec.tv_sec;
          v182 = 2048;
          v183 = v145.st_ctimespec.tv_sec;
          v184 = 2048;
          v185 = v145.st_size;
          v186 = 1024;
          v187 = v145.st_flags;
          v188 = 2112;
          *(_QWORD *)v189 = v11;
          _os_log_debug_impl(&dword_1CBD43000, v12, OS_LOG_TYPE_DEBUG, "[DEBUG] openat(%d, '%s'): added %c%c%c%c%c%c%c%c%c%c to deviceID:%u fileID:%llu mode:%c%c%c%c%c%c%c%c%c%c nlink:%u uid:%u gid:%u atime:%lu mtime:%lu ctime:%lu size:%llu flags:0x%x%@", buf, 0xE4u);
        }
      }

    }
    return v10;
  }
  if (*__error() == 13)
  {
    if (!strcmp(a2, "."))
    {
      v27 = fstat(a1, &v145);
      if (!(v27 | v145.st_uid))
      {
        objc_msgSend(MEMORY[0x1E0C99E98], "brc_fileURLWithFileDescriptor:", a1);
        v28 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v10 = open((const char *)objc_msgSend(v28, "fileSystemRepresentation"), a3, a4);
        if ((v10 & 0x80000000) != 0)
        {
          brc_bread_crumbs();
          v72 = (void *)objc_claimAutoreleasedReturnValue();
          brc_default_log();
          v73 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v73, (os_log_type_t)0x90u))
          {
            v102 = *__error();
            *(_DWORD *)buf = 67109890;
            v147 = a1;
            v148 = 2112;
            v149 = (const char *)v28;
            v150 = 1024;
            v151 = v102;
            v152 = 2112;
            *(_QWORD *)v153 = v72;
            _os_log_error_impl(&dword_1CBD43000, v73, (os_log_type_t)0x90u, "[ERROR] Failed to open fd %d by relpath %@ %{errno}d%@", buf, 0x22u);
          }

          *__error() = 13;
        }
        else
        {
          brc_bread_crumbs();
          v29 = (char *)objc_claimAutoreleasedReturnValue();
          brc_default_log();
          v30 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109378;
            v147 = a1;
            v148 = 2112;
            v149 = v29;
            _os_log_impl(&dword_1CBD43000, v30, OS_LOG_TYPE_DEFAULT, "[WARNING] Fixed up openat(%d, '.') for inaccessible folder%@", buf, 0x12u);
          }

        }
        goto LABEL_159;
      }
    }
    if (fstatat(a1, a2, &v145, 32) < 0)
    {
      brc_bread_crumbs();
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v35 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v35, (os_log_type_t)0x90u))
      {
        v36 = *__error();
        *(_DWORD *)buf = 67109890;
        v147 = a1;
        v148 = 2080;
        v149 = a2;
        v150 = 1024;
        v151 = v36;
        v152 = 2112;
        *(_QWORD *)v153 = v34;
        v37 = "[ERROR] failed openat with EACCES and fstatat(%d, '%s') %{errno}d%@";
        v38 = v35;
        v39 = 34;
LABEL_135:
        _os_log_error_impl(&dword_1CBD43000, v38, (os_log_type_t)0x90u, v37, buf, v39);
      }
    }
    else if ((v145.st_mode & 0x100) != 0)
    {
      brc_bread_crumbs();
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v35 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v35, (os_log_type_t)0x90u))
      {
        v40 = aPcDBLSW[(unint64_t)v145.st_mode >> 12];
        if ((v145.st_mode & 0x100) != 0)
          v41 = 114;
        else
          v41 = 45;
        if ((v145.st_mode & 0x80) != 0)
          v42 = 119;
        else
          v42 = 45;
        if ((v145.st_mode & 0x40) != 0)
          v43 = 120;
        else
          v43 = 45;
        if ((v145.st_mode & 0x20) != 0)
          v44 = 114;
        else
          v44 = 45;
        if ((v145.st_mode & 0x10) != 0)
          v45 = 119;
        else
          v45 = 45;
        if ((v145.st_mode & 8) != 0)
          v46 = 120;
        else
          v46 = 45;
        if ((v145.st_mode & 4) != 0)
          v47 = 114;
        else
          v47 = 45;
        if ((v145.st_mode & 2) != 0)
          v48 = 119;
        else
          v48 = 45;
        if ((v145.st_mode & 1) != 0)
          v49 = 120;
        else
          v49 = 45;
        *(_DWORD *)buf = 67114754;
        v147 = a1;
        v148 = 2080;
        v149 = a2;
        v150 = 1024;
        v151 = v145.st_dev;
        v152 = 2048;
        *(_QWORD *)v153 = v145.st_ino;
        *(_WORD *)&v153[8] = 1024;
        *(_DWORD *)v154 = v40;
        *(_WORD *)&v154[4] = 1024;
        *(_DWORD *)v155 = v41;
        *(_WORD *)&v155[4] = 1024;
        *(_DWORD *)v156 = v42;
        *(_WORD *)&v156[4] = 1024;
        *(_DWORD *)v157 = v43;
        *(_WORD *)&v157[4] = 1024;
        *(_DWORD *)v158 = v44;
        *(_WORD *)&v158[4] = 1024;
        *(_DWORD *)v159 = v45;
        *(_WORD *)&v159[4] = 1024;
        *(_DWORD *)v160 = v46;
        *(_WORD *)&v160[4] = 1024;
        *(_DWORD *)v161 = v47;
        *(_WORD *)&v161[4] = 1024;
        *(_DWORD *)v162 = v48;
        *(_WORD *)&v162[4] = 1024;
        *(_DWORD *)&v162[6] = v49;
        v163 = 1024;
        v164 = v145.st_nlink;
        v165 = 1024;
        v166 = v145.st_uid;
        v167 = 1024;
        v168 = v145.st_gid;
        v169 = 2048;
        *(_QWORD *)v170 = v145.st_atimespec.tv_sec;
        *(_WORD *)&v170[8] = 2048;
        v171 = v145.st_mtimespec.tv_sec;
        *(_WORD *)v172 = 2048;
        *(_QWORD *)&v172[2] = v145.st_ctimespec.tv_sec;
        v173 = 2048;
        *(_QWORD *)v174 = v145.st_size;
        *(_WORD *)&v174[8] = 1024;
        *(_DWORD *)v175 = v145.st_flags;
        *(_WORD *)&v175[4] = 2112;
        v176 = v34;
        v37 = "[ERROR] failed openat(%d, '%s') with EACCES, but the item is readable: deviceID:%u fileID:%llu mode:%c%c%c"
              "%c%c%c%c%c%c%c nlink:%u uid:%u gid:%u atime:%lu mtime:%lu ctime:%lu size:%llu flags:0x%x%@";
        v38 = v35;
        v39 = 168;
        goto LABEL_135;
      }
    }
    else
    {
      if ((v145.st_mode & 0xF000) == 0x4000)
        v31 = 448;
      else
        v31 = 384;
      if ((fchmodat(a1, a2, v31 | v145.st_mode, 32) & 0x80000000) == 0)
      {
        brc_bread_crumbs();
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        brc_default_log();
        v33 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
        {
          v88 = aPcDBLSW[(unint64_t)v145.st_mode >> 12];
          if ((~v145.st_mode & 0x100) != 0)
            v89 = 114;
          else
            v89 = 45;
          if ((~v145.st_mode & 0x80) != 0)
            v90 = 119;
          else
            v90 = 45;
          if ((~v145.st_mode & 0x40) != 0 && (v145.st_mode & 0xF000) == 0x4000)
            v92 = 120;
          else
            v92 = 45;
          if ((v145.st_mode & 0x100) != 0)
            v93 = 114;
          else
            v93 = 45;
          if ((v145.st_mode & 0x80) != 0)
            v94 = 119;
          else
            v94 = 45;
          if ((v145.st_mode & 0x40) != 0)
            v95 = 120;
          else
            v95 = 45;
          *(_DWORD *)buf = 67117314;
          if ((v145.st_mode & 0x20) != 0)
            v96 = 114;
          else
            v96 = 45;
          v147 = a1;
          v148 = 2080;
          if ((v145.st_mode & 0x10) != 0)
            v97 = 119;
          else
            v97 = 45;
          v149 = a2;
          if ((v145.st_mode & 8) != 0)
            v98 = 120;
          else
            v98 = 45;
          v151 = 35;
          v150 = 1024;
          if ((v145.st_mode & 4) != 0)
            v99 = 114;
          else
            v99 = 45;
          v152 = 1024;
          if ((v145.st_mode & 2) != 0)
            v100 = 119;
          else
            v100 = 45;
          *(_DWORD *)v153 = v89;
          if ((v145.st_mode & 1) != 0)
            v101 = 120;
          else
            v101 = 45;
          *(_WORD *)&v153[4] = 1024;
          *(_DWORD *)&v153[6] = v90;
          *(_WORD *)v154 = 1024;
          *(_DWORD *)&v154[2] = v92;
          *(_WORD *)v155 = 1024;
          *(_DWORD *)&v155[2] = 45;
          *(_WORD *)v156 = 1024;
          *(_DWORD *)&v156[2] = 45;
          *(_WORD *)v157 = 1024;
          *(_DWORD *)&v157[2] = 45;
          *(_WORD *)v158 = 1024;
          *(_DWORD *)&v158[2] = 45;
          *(_WORD *)v159 = 1024;
          *(_DWORD *)&v159[2] = 45;
          *(_WORD *)v160 = 1024;
          *(_DWORD *)&v160[2] = 45;
          *(_WORD *)v161 = 1024;
          *(_DWORD *)&v161[2] = v145.st_dev;
          *(_WORD *)v162 = 2048;
          *(_QWORD *)&v162[2] = v145.st_ino;
          v163 = 1024;
          v164 = v88;
          v165 = 1024;
          v166 = v93;
          v167 = 1024;
          v168 = v94;
          v169 = 1024;
          *(_DWORD *)v170 = v95;
          *(_WORD *)&v170[4] = 1024;
          *(_DWORD *)&v170[6] = v96;
          LOWORD(v171) = 1024;
          *(_DWORD *)((char *)&v171 + 2) = v97;
          HIWORD(v171) = 1024;
          *(_DWORD *)v172 = v98;
          *(_WORD *)&v172[4] = 1024;
          *(_DWORD *)&v172[6] = v99;
          v173 = 1024;
          *(_DWORD *)v174 = v100;
          *(_WORD *)&v174[4] = 1024;
          *(_DWORD *)&v174[6] = v101;
          *(_WORD *)v175 = 1024;
          *(_DWORD *)&v175[2] = v145.st_nlink;
          LOWORD(v176) = 1024;
          *(_DWORD *)((char *)&v176 + 2) = v145.st_uid;
          HIWORD(v176) = 1024;
          v177 = v145.st_gid;
          v178 = 2048;
          v179 = v145.st_atimespec.tv_sec;
          v180 = 2048;
          v181 = v145.st_mtimespec.tv_sec;
          v182 = 2048;
          v183 = v145.st_ctimespec.tv_sec;
          v184 = 2048;
          v185 = v145.st_size;
          v186 = 1024;
          v187 = v145.st_flags;
          v188 = 2112;
          *(_QWORD *)v189 = v32;
          _os_log_debug_impl(&dword_1CBD43000, v33, OS_LOG_TYPE_DEBUG, "[DEBUG] failed openat(%d, '%s') with EACCES: added %c%c%c%c%c%c%c%c%c%c to deviceID:%u fileID:%llu mode:%c%c%c%c%c%c%c%c%c%c nlink:%u uid:%u gid:%u atime:%lu mtime:%lu ctime:%lu size:%llu flags:0x%x%@", buf, 0xE4u);
        }

        v10 = openat(a1, a2, a3, a4);
LABEL_159:
        if ((v10 & 0x80000000) == 0)
          goto LABEL_2;
        goto LABEL_137;
      }
      brc_bread_crumbs();
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v35 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v35, (os_log_type_t)0x90u))
      {
        if ((~v145.st_mode & 0x100) != 0)
          v50 = 114;
        else
          v50 = 45;
        v104 = v50;
        if ((~v145.st_mode & 0x80) != 0)
          v51 = 119;
        else
          v51 = 45;
        v103 = v51;
        if ((~v145.st_mode & 0x40) != 0 && (v145.st_mode & 0xF000) == 0x4000)
          v53 = 120;
        else
          v53 = 45;
        v105 = v145.st_dev;
        v129 = v145.st_ino;
        if ((v145.st_mode & 0x100) != 0)
          v54 = 114;
        else
          v54 = 45;
        v123 = v54;
        v125 = aPcDBLSW[(unint64_t)v145.st_mode >> 12];
        if ((v145.st_mode & 0x80) != 0)
          v55 = 119;
        else
          v55 = 45;
        if ((v145.st_mode & 0x40) != 0)
          v56 = 120;
        else
          v56 = 45;
        v119 = v56;
        v121 = v55;
        if ((v145.st_mode & 0x20) != 0)
          v57 = 114;
        else
          v57 = 45;
        if ((v145.st_mode & 0x10) != 0)
          v58 = 119;
        else
          v58 = 45;
        v115 = v58;
        v117 = v57;
        if ((v145.st_mode & 8) != 0)
          v59 = 120;
        else
          v59 = 45;
        if ((v145.st_mode & 4) != 0)
          v60 = 114;
        else
          v60 = 45;
        v111 = v60;
        v113 = v59;
        if ((v145.st_mode & 2) != 0)
          v61 = 119;
        else
          v61 = 45;
        if ((v145.st_mode & 1) != 0)
          v62 = 120;
        else
          v62 = 45;
        v107 = v62;
        v109 = v61;
        v127 = v145.st_nlink;
        v131 = v145.st_uid;
        v133 = v145.st_gid;
        v135 = v145.st_atimespec.tv_sec;
        v137 = v145.st_mtimespec.tv_sec;
        v139 = v145.st_ctimespec.tv_sec;
        v141 = v145.st_size;
        v143 = v145.st_flags;
        v63 = *__error();
        *(_DWORD *)buf = 67117570;
        v147 = a1;
        v148 = 2080;
        v149 = a2;
        v150 = 1024;
        v151 = 35;
        v152 = 1024;
        *(_DWORD *)v153 = v104;
        *(_WORD *)&v153[4] = 1024;
        *(_DWORD *)&v153[6] = v103;
        *(_WORD *)v154 = 1024;
        *(_DWORD *)&v154[2] = v53;
        *(_WORD *)v155 = 1024;
        *(_DWORD *)&v155[2] = 45;
        *(_WORD *)v156 = 1024;
        *(_DWORD *)&v156[2] = 45;
        *(_WORD *)v157 = 1024;
        *(_DWORD *)&v157[2] = 45;
        *(_WORD *)v158 = 1024;
        *(_DWORD *)&v158[2] = 45;
        *(_WORD *)v159 = 1024;
        *(_DWORD *)&v159[2] = 45;
        *(_WORD *)v160 = 1024;
        *(_DWORD *)&v160[2] = 45;
        *(_WORD *)v161 = 1024;
        *(_DWORD *)&v161[2] = v105;
        *(_WORD *)v162 = 2048;
        *(_QWORD *)&v162[2] = v129;
        v163 = 1024;
        v164 = v125;
        v165 = 1024;
        v166 = v123;
        v167 = 1024;
        v168 = v121;
        v169 = 1024;
        *(_DWORD *)v170 = v119;
        *(_WORD *)&v170[4] = 1024;
        *(_DWORD *)&v170[6] = v117;
        LOWORD(v171) = 1024;
        *(_DWORD *)((char *)&v171 + 2) = v115;
        HIWORD(v171) = 1024;
        *(_DWORD *)v172 = v113;
        *(_WORD *)&v172[4] = 1024;
        *(_DWORD *)&v172[6] = v111;
        v173 = 1024;
        *(_DWORD *)v174 = v109;
        *(_WORD *)&v174[4] = 1024;
        *(_DWORD *)&v174[6] = v107;
        *(_WORD *)v175 = 1024;
        *(_DWORD *)&v175[2] = v127;
        LOWORD(v176) = 1024;
        *(_DWORD *)((char *)&v176 + 2) = v131;
        HIWORD(v176) = 1024;
        v177 = v133;
        v178 = 2048;
        v179 = v135;
        v180 = 2048;
        v181 = v137;
        v182 = 2048;
        v183 = v139;
        v184 = 2048;
        v185 = v141;
        v186 = 1024;
        v187 = v143;
        v188 = 1024;
        *(_DWORD *)v189 = v63;
        *(_WORD *)&v189[4] = 2112;
        *(_QWORD *)&v189[6] = v34;
        v37 = "[ERROR] failed openat with EACCES and fchmodat(%d, '%s', %c%c%c%c%c%c%c%c%c%c) deviceID:%u fileID:%llu mod"
              "e:%c%c%c%c%c%c%c%c%c%c nlink:%u uid:%u gid:%u atime:%lu mtime:%lu ctime:%lu size:%llu flags:0x%x %{errno}d%@";
        v38 = v35;
        v39 = 234;
        goto LABEL_135;
      }
    }

    *__error() = 13;
  }
LABEL_137:
  v64 = __error();
  if ((a3 & 3) != 0 || *v64 != 1)
    return v10;
  v65 = -1;
  if ((a1 & 0x80000000) == 0 && *a2 != 47)
  {
    v65 = open(".", 33028);
    if (__pthread_fchdir() != -1 || v65 < 0)
    {
      if ((__pthread_fchdir() & 0x80000000) != 0)
      {
        if ((v65 & 0x80000000) == 0)
        {
          v70 = *__error();
          __pthread_fchdir();
          *__error() = v70;
          v71 = *__error();
          close(v65);
          *__error() = v71;
        }
        return v10;
      }
    }
    else
    {
      close(v65);
      if ((__pthread_fchdir() & 0x80000000) != 0)
        return v10;
      v65 = -1;
    }
  }
  v66 = open_dprotected_np(a2, a3, 0, 1);
  v10 = v66;
  if (a5 && (v66 & 0x80000000) == 0)
    *a5 = 1;
  if ((v65 & 0x80000000) == 0)
  {
    v67 = *__error();
    __pthread_fchdir();
    *__error() = v67;
    v68 = *__error();
    close(v65);
    *__error() = v68;
  }
  if ((v10 & 0x80000000) == 0)
    goto LABEL_2;
  return v10;
}

uint64_t BRCOpenByID(int32_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  fsid_t v13;
  _QWORD v14[2];
  __int128 v15;
  uint64_t v16;
  char v17[1024];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v13.val[0] = a1;
  v13.val[1] = 0;
  if ((fsgetpath(v17, 0x400uLL, &v13, a2) & 0x8000000000000000) == 0 && !__sandbox_allowed())
    return 0xFFFFFFFFLL;
  *(_QWORD *)&v15 = a2;
  v5 = openbyid_np();
  if ((v5 & 0x80000000) != 0)
  {
    v6 = __error();
    if ((a3 & 3) == 0 && *v6 == 1)
    {
      v7 = -5;
      while ((fsgetpath(v17, 0x400uLL, &v13, a2) & 0x8000000000000000) == 0)
      {
        if (!__sandbox_allowed())
          return 0xFFFFFFFFLL;
        v8 = open_dprotected_np(v17, a3, 0, 1);
        v5 = v8;
        if ((v8 & 0x80000000) == 0)
        {
          v16 = 0;
          v15 = xmmword_1CC067180;
          memset(v14, 0, 12);
          v9 = fgetattrlist(v8, &v15, v14, 0xCuLL, 0x20u);
          v10 = *(_QWORD *)((char *)v14 + 4);
          if (v9 < 0)
            v10 = 0;
          if (v10 == a2)
            return v5;
          close(v5);
          *__error() = 2;
          v5 = 0xFFFFFFFFLL;
        }
        if (__CFADD__(v7++, 1))
          return v5;
      }
    }
  }
  return v5;
}

BOOL __sandbox_allowed()
{
  int v0;

  getpid();
  v0 = sandbox_check();
  if (v0)
    *__error() = 1;
  return v0 == 0;
}

uint64_t BRCUnlinkFileID(int32_t a1, uint64_t a2)
{
  std::error_code *v2;
  fsid_t v4;
  std::__fs::filesystem::path __p;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4.val[0] = a1;
  v4.val[1] = 0;
  if (fsgetpath((char *)&__p, 0x400uLL, &v4, a2) < 0 || !__sandbox_allowed())
    return 0xFFFFFFFFLL;
  else
    return remove(&__p, v2);
}

uint64_t BRCIsFileIDLocked(int32_t a1, uint64_t a2)
{
  int v4;
  int v5;
  unsigned int v6;
  void *v8;
  NSObject *v9;

  if (!a2)
  {
    brc_bread_crumbs();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
      BRCIsFileIDLocked_cold_1();

  }
  v4 = BRCOpenByID(a1, a2, 33028);
  if (v4 < 0)
    return 0;
  v5 = v4;
  v6 = flock(v4, 6);
  close(v5);
  return v6 >> 31;
}

uint64_t BRCSetMtime(int a1, uint64_t a2)
{
  int v4;
  uint64_t result;
  int v6;
  void *v7;
  NSObject *v8;
  stat v9;
  timeval v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  memset(&v9, 0, sizeof(v9));
  if (fstat(a1, &v9) < 0)
  {
    v6 = *__error();
    brc_bread_crumbs();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, (os_log_type_t)0x90u))
      BRCCloneAt_cold_1();
  }
  else
  {
    v10.tv_sec = v9.st_atimespec.tv_sec;
    v10.tv_usec = v9.st_atimespec.tv_nsec;
    v11 = a2;
    v12 = 0;
    v4 = futimes(a1, &v10);
    result = 0;
    if ((v4 & 0x80000000) == 0)
      return result;
    v6 = *__error();
    brc_bread_crumbs();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, (os_log_type_t)0x90u))
      BRCSetMtime_cold_2();
  }

  *__error() = v6;
  return 0xFFFFFFFFLL;
}

uint64_t BRCRemoveFolderInAutoreleasepool(void *a1, void *a2, int a3, int a4)
{
  id v7;
  id v8;
  uint64_t v9;
  _QWORD v11[4];
  id v12;

  v7 = a2;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __BRCRemoveFolderInAutoreleasepool_block_invoke;
  v11[3] = &unk_1E8765000;
  v12 = v7;
  v8 = v7;
  v9 = BRCRemoveFolder(a1, v11, a3, a4);

  return v9;
}

uint64_t BRCRemoveFolder(void *a1, void *a2, int a3, int a4)
{
  id v7;
  id v8;
  int v9;
  int v10;
  removefile_flags_t v11;
  _removefile_state *v12;
  id v13;
  int v14;
  int v15;
  void *v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  NSObject *v20;
  uint64_t v21;
  void *v23;
  int value;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  if (objc_msgSend(v7, "length"))
  {
    if (a3)
      v9 = 3;
    else
      v9 = 1;
    if (a4)
      v10 = 256;
    else
      v10 = 0;
    v11 = v10 | v9;
    v12 = removefile_state_alloc();
    value = 0;
    removefile_state_set(v12, 1u, _brc_removefile_confirm_callback);
    removefile_state_set(v12, 2u, v8);
    removefile_state_set(v12, 3u, _brc_removefile_error_callback);
    removefile_state_set(v12, 4u, &value);
    v13 = objc_retainAutorelease(v7);
    removefile((const char *)objc_msgSend(v13, "fileSystemRepresentation"), v12, v11);
    removefile_state_free(v12);
    v14 = value;
    *__error() = v14;
    if (value)
    {
      v15 = *__error();
      brc_bread_crumbs();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, (os_log_type_t)0x90u))
      {
        objc_msgSend(v13, "fp_obfuscatedPath");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412802;
        v26 = v23;
        v27 = 1024;
        v28 = v15;
        v29 = 2112;
        v30 = v16;
        _os_log_error_impl(&dword_1CBD43000, v17, (os_log_type_t)0x90u, "[ERROR] Failed to remove folder at path %@ %{errno}d%@", buf, 0x1Cu);

      }
      *__error() = v15;
      if (value)
        v18 = 0xFFFFFFFFLL;
      else
        v18 = 0;
    }
    else
    {
      v18 = 0;
    }
  }
  else
  {
    brc_bread_crumbs();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, (os_log_type_t)0x90u))
      BRCRemoveFolder_cold_1((uint64_t)v19, v20, v21);

    *__error() = 22;
    v18 = 0xFFFFFFFFLL;
  }

  return v18;
}

_acl *_brc_removefile_confirm_callback(uint64_t a1, const char *a2, uint64_t a3)
{
  int ProtectionStatus;
  uint64_t (**v6)(_QWORD, _QWORD, _QWORD);
  int v7;
  void *v8;
  NSObject *v9;
  _acl *v10;
  int v11;
  void *v12;
  NSObject *v13;
  int v14;
  int v15;
  void *v16;
  NSObject *v17;
  acl_t fd_np;
  int v19;
  void *v20;
  NSObject *v21;
  int v22;
  void *v23;
  NSObject *v24;
  stat v26;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  void *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  ProtectionStatus = BRCOpenAtAndGetProtectionStatus(0xFFFFFFFFLL, a2, 2129924, 0, 0);
  memset(&v26, 0, sizeof(v26));
  v6 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))MEMORY[0x1D17A6DB0](a3);
  if ((ProtectionStatus & 0x80000000) == 0)
  {
    if (fstat(ProtectionStatus, &v26))
    {
      v7 = *__error();
      brc_bread_crumbs();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, (os_log_type_t)0x90u))
      {
        *(_DWORD *)buf = 136315650;
        v28 = a2;
        v29 = 1024;
        v30 = v7;
        v31 = 2112;
        v32 = v8;
        _os_log_error_impl(&dword_1CBD43000, v9, (os_log_type_t)0x90u, "[ERROR] Couldn't stat %s %{errno}d%@", buf, 0x1Cu);
      }

      *__error() = v7;
      if (v6)
      {
        v10 = (_acl *)((uint64_t (**)(_QWORD, const char *, _QWORD))v6)[2](v6, a2, 0);
        if ((_DWORD)v10)
          goto LABEL_33;
      }
    }
    else
    {
      if (v6)
      {
        v10 = (_acl *)((uint64_t (**)(_QWORD, const char *, stat *))v6)[2](v6, a2, &v26);
        if ((_DWORD)v10)
          goto LABEL_33;
      }
      if ((v26.st_flags & 6) != 0 && fchflags(ProtectionStatus, v26.st_flags & 0xFFF9))
      {
        v11 = *__error();
        brc_bread_crumbs();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        brc_default_log();
        v13 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v13, (os_log_type_t)0x90u))
        {
          *(_DWORD *)buf = 136315650;
          v28 = a2;
          v29 = 1024;
          v30 = v11;
          v31 = 2112;
          v32 = v12;
          _os_log_error_impl(&dword_1CBD43000, v13, (os_log_type_t)0x90u, "[ERROR] Unable to strip UF_IMMUTABLE and UF_APPEND to %s %{errno}d%@", buf, 0x1Cu);
        }

        *__error() = v11;
      }
      if ((v26.st_mode & 0xF000) == 0x4000)
        v14 = 448;
      else
        v14 = 384;
      if ((v14 & ~v26.st_mode) != 0 && fchmod(ProtectionStatus, v26.st_mode | v14))
      {
        v15 = *__error();
        brc_bread_crumbs();
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        brc_default_log();
        v17 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v17, (os_log_type_t)0x90u))
        {
          *(_DWORD *)buf = 136315650;
          v28 = a2;
          v29 = 1024;
          v30 = v15;
          v31 = 2112;
          v32 = v16;
          _os_log_error_impl(&dword_1CBD43000, v17, (os_log_type_t)0x90u, "[ERROR] Failed setting permissions of %s %{errno}d%@", buf, 0x1Cu);
        }

        *__error() = v15;
      }
    }
    fd_np = acl_get_fd_np(ProtectionStatus, ACL_TYPE_EXTENDED);
    if (fd_np)
    {
      acl_free(fd_np);
      v10 = acl_init(0);
      if (!v10)
      {
LABEL_33:
        close(ProtectionStatus);
        goto LABEL_37;
      }
      if (acl_set_fd_np(ProtectionStatus, v10, ACL_TYPE_EXTENDED))
      {
        v19 = *__error();
        brc_bread_crumbs();
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        brc_default_log();
        v21 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v21, (os_log_type_t)0x90u))
        {
          *(_DWORD *)buf = 136315650;
          v28 = a2;
          v29 = 1024;
          v30 = v19;
          v31 = 2112;
          v32 = v20;
          _os_log_error_impl(&dword_1CBD43000, v21, (os_log_type_t)0x90u, "[ERROR] Failed stripping acls of %s %{errno}d%@", buf, 0x1Cu);
        }

        *__error() = v19;
      }
      acl_free(v10);
    }
    v10 = 0;
    goto LABEL_33;
  }
  if (*__error() == 2)
  {
    v10 = 0;
  }
  else
  {
    v22 = *__error();
    brc_bread_crumbs();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, (os_log_type_t)0x90u))
    {
      *(_DWORD *)buf = 136315650;
      v28 = a2;
      v29 = 1024;
      v30 = v22;
      v31 = 2112;
      v32 = v23;
      _os_log_error_impl(&dword_1CBD43000, v24, (os_log_type_t)0x90u, "[ERROR] Failed opening %s %{errno}d%@", buf, 0x1Cu);
    }

    v10 = 0;
    *__error() = v22;
  }
LABEL_37:

  return v10;
}

uint64_t _brc_removefile_error_callback(_removefile_state *a1, uint64_t a2, _DWORD *a3)
{
  void *v5;
  NSObject *v6;
  char *v7;
  char *v9;
  int dst;
  uint8_t buf[4];
  uint64_t v12;
  __int16 v13;
  char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  dst = 0;
  removefile_state_get(a1, 5u, &dst);
  if (dst == 66)
  {
    brc_bread_crumbs();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      v7 = strerror(dst);
      *(_DWORD *)buf = 136315906;
      v12 = a2;
      v13 = 2080;
      v14 = v7;
      v15 = 1024;
      v16 = dst;
      v17 = 2112;
      v18 = v5;
      _os_log_debug_impl(&dword_1CBD43000, v6, OS_LOG_TYPE_DEBUG, "[DEBUG] Can't delete %s: %s(%d)%@", buf, 0x26u);
    }
  }
  else
  {
    brc_bread_crumbs();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, (os_log_type_t)0x90u))
    {
      v9 = strerror(dst);
      *(_DWORD *)buf = 136315906;
      v12 = a2;
      v13 = 2080;
      v14 = v9;
      v15 = 1024;
      v16 = dst;
      v17 = 2112;
      v18 = v5;
      _os_log_error_impl(&dword_1CBD43000, v6, (os_log_type_t)0x90u, "[ERROR] Can't delete %s: %s(%d)%@", buf, 0x26u);
    }
  }

  if (a3 && !*a3)
    *a3 = dst;
  return 1;
}

uint64_t BRCRecursiveRemove(void *a1)
{
  return BRCRemoveFolder(a1, 0, 0, 0);
}

uint64_t BRCRecursiveRemoveBelow(void *a1)
{
  return BRCRemoveFolder(a1, 0, 1, 0);
}

id BRCCopyFakeQuarantineInfo(int a1, _QWORD *a2)
{
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  id v10;

  v10 = 0;
  BRCGetXattrValue(a1, "com.apple.quarantine", -1, &v10);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v10;
  v6 = v5;
  if (v5)
  {
    v7 = 0;
    if (a2)
      *a2 = objc_retainAutorelease(v5);
  }
  else
  {
    if (v4)
    {
      v8 = v4;
    }
    else
    {
      BRCGetXattrValue(a1, "com.apple.private.bird.fake-qtn", -1, a2);
      v8 = (id)objc_claimAutoreleasedReturnValue();
    }
    v7 = v8;
  }

  return v7;
}

id BRCGetXattrValue(int a1, const char *a2, ssize_t a3, _QWORD *a4)
{
  ssize_t v8;
  size_t v9;
  void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  const char *v15;
  id v17;
  id v18;
  void *v19;
  void *v20;
  NSObject *v21;
  const char *v22;
  int v23;
  const char *v24;
  __int16 v25;
  size_t v26;
  __int16 v27;
  ssize_t v28;
  __int16 v29;
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v8 = fgetxattr(a1, a2, 0, 0, 0, 0);
  if (!v8)
    return (id)objc_opt_new();
  v9 = v8;
  if (v8 < 0)
  {
    if (*__error() == 93)
      return 0;
    objc_msgSend(MEMORY[0x1E0CB35C8], "br_errorFromErrno");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v12)
    {
LABEL_17:
      if (a4)
        *a4 = objc_retainAutorelease(v12);

      return 0;
    }
    brc_bread_crumbs();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v14 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v14, (os_log_type_t)0x90u))
    {
LABEL_16:

      goto LABEL_17;
    }
    v15 = "(passed to caller)";
    v23 = 136315906;
    v24 = "BRCGetXattrValue";
    v25 = 2080;
    if (!a4)
      v15 = "(ignored by caller)";
LABEL_32:
    v26 = (size_t)v15;
    v27 = 2112;
    v28 = (ssize_t)v12;
    v29 = 2112;
    v30 = v13;
    _os_log_error_impl(&dword_1CBD43000, v14, (os_log_type_t)0x90u, "[ERROR] %s: %s error: %@%@", (uint8_t *)&v23, 0x2Au);
    goto LABEL_16;
  }
  if ((a3 & 0x8000000000000000) == 0 && v8 > a3)
  {
    brc_bread_crumbs();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v23 = 136315906;
      v24 = a2;
      v25 = 2048;
      v26 = v9;
      v27 = 2048;
      v28 = a3;
      v29 = 2112;
      v30 = v10;
      _os_log_impl(&dword_1CBD43000, v11, OS_LOG_TYPE_DEFAULT, "[WARNING] Extended attribute %s size %ld is greater than size limit %ld%@", (uint8_t *)&v23, 0x2Au);
    }

    objc_msgSend(MEMORY[0x1E0CB35C8], "br_errorWithPOSIXCode:", 27);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v12)
      goto LABEL_17;
    brc_bread_crumbs();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v14 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v14, (os_log_type_t)0x90u))
      goto LABEL_16;
    v15 = "(passed to caller)";
    v23 = 136315906;
    v24 = "BRCGetXattrValue";
    v25 = 2080;
    if (!a4)
      v15 = "(ignored by caller)";
    goto LABEL_32;
  }
  v17 = objc_retainAutorelease((id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DF0]), "initWithLength:", v8));
  if (fgetxattr(a1, a2, (void *)objc_msgSend(v17, "mutableBytes"), v9, 0, 0) == v9)
  {
    v18 = v17;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "br_errorFromErrno");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    if (v19)
    {
      brc_bread_crumbs();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, (os_log_type_t)0x90u))
      {
        v22 = "(passed to caller)";
        v23 = 136315906;
        v24 = "BRCGetXattrValue";
        v25 = 2080;
        if (!a4)
          v22 = "(ignored by caller)";
        v26 = (size_t)v22;
        v27 = 2112;
        v28 = (ssize_t)v19;
        v29 = 2112;
        v30 = v20;
        _os_log_error_impl(&dword_1CBD43000, v21, (os_log_type_t)0x90u, "[ERROR] %s: %s error: %@%@", (uint8_t *)&v23, 0x2Au);
      }

    }
    if (a4)
      *a4 = objc_retainAutorelease(v19);

    v18 = 0;
  }

  return v18;
}

uint64_t BRCSetFakeQuarantineInfo(int a1, void *a2, _QWORD *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  int v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (v5)
  {
    v7 = objc_retainAutorelease(v5);
    if (fsetxattr(a1, "com.apple.quarantine", (const void *)objc_msgSend(v7, "bytes"), objc_msgSend(v7, "length"), 0, 0) < 0)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "br_errorFromErrno");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if (v8)
      {
        brc_bread_crumbs();
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        brc_default_log();
        v10 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v10, (os_log_type_t)0x90u))
        {
          v11 = "(passed to caller)";
          v14 = 136315906;
          v15 = "BRCSetFakeQuarantineInfo";
          v16 = 2080;
          if (!a3)
            v11 = "(ignored by caller)";
LABEL_15:
          v17 = v11;
          v18 = 2112;
          v19 = v8;
          v20 = 2112;
          v21 = v9;
          _os_log_error_impl(&dword_1CBD43000, v10, (os_log_type_t)0x90u, "[ERROR] %s: %s error: %@%@", (uint8_t *)&v14, 0x2Au);
          goto LABEL_16;
        }
        goto LABEL_16;
      }
      goto LABEL_17;
    }
LABEL_10:
    fremovexattr(a1, "com.apple.private.bird.fake-qtn", 0);
    v12 = 1;
    goto LABEL_20;
  }
  if ((fremovexattr(a1, "com.apple.quarantine", 0) & 0x80000000) == 0 || *__error() == 93)
    goto LABEL_10;
  objc_msgSend(MEMORY[0x1E0CB35C8], "br_errorFromErrno");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    brc_bread_crumbs();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, (os_log_type_t)0x90u))
    {
      v11 = "(passed to caller)";
      v14 = 136315906;
      v15 = "BRCSetFakeQuarantineInfo";
      v16 = 2080;
      if (!a3)
        v11 = "(ignored by caller)";
      goto LABEL_15;
    }
LABEL_16:

  }
LABEL_17:
  if (a3)
    *a3 = objc_retainAutorelease(v8);

  v12 = 0;
LABEL_20:

  return v12;
}

BOOL BRCQuarantineInfoIsEqual(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  void *v10;
  NSObject *v11;
  _DWORD v13[2];
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = a1;
  +[BRCUserDefaults defaultsForMangledID:](BRCUserDefaults, "defaultsForMangledID:", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "ignoredQuarantineMask");

  v7 = objc_msgSend(v4, "br_qtnFlags");
  v8 = objc_msgSend(v3, "br_qtnFlags");

  v9 = (v8 ^ v7) & ~v6;
  if (v9)
  {
    brc_bread_crumbs();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      v13[0] = 67109890;
      v13[1] = v7;
      v14 = 1024;
      v15 = v8;
      v16 = 1024;
      v17 = v6;
      v18 = 2112;
      v19 = v10;
      _os_log_debug_impl(&dword_1CBD43000, v11, OS_LOG_TYPE_DEBUG, "[DEBUG] Quarantine info differs in flags %u vs %u ignoring %u%@", (uint8_t *)v13, 0x1Eu);
    }

  }
  return v9 == 0;
}

uint64_t BRCSetupVNodeRapidAging(int a1)
{
  int v1;
  int v3;
  int v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v4 = 0x4400000001;
  if (a1)
    v1 = 1;
  else
    v1 = 3;
  v3 = v1;
  return sysctl(v4, 2u, 0, 0, &v3, 4uLL);
}

unint64_t BRCRoundedTimestamp(unint64_t a1)
{
  void *v2;
  unsigned int v3;

  +[BRCUserDefaults defaultsForMangledID:](BRCUserDefaults, "defaultsForMangledID:", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "timestampRoundingAmount");

  return a1 / v3 * v3;
}

xattr_flags_t brc_xattr_flags_from_name(char *a1)
{
  xattr_flags_t v2;
  char *v3;
  const char *v4;
  _QWORD *v5;

  if (brc_xattr_flags_from_name_onceToken != -1)
    dispatch_once(&brc_xattr_flags_from_name_onceToken, &__block_literal_global_48);
  v2 = xattr_flags_from_name(a1);
  v3 = xattr_name_without_flags(a1);
  v4 = brc_xattr_flags_from_name_xattr_mods;
  if (brc_xattr_flags_from_name_xattr_mods)
  {
    v5 = &unk_1ED5406F8;
    while (strcmp(v3, v4))
    {
      v4 = (const char *)v5[1];
      v5 += 3;
      if (!v4)
        goto LABEL_9;
    }
    v2 = (*(v5 - 1) | v2) & ~*v5;
  }
LABEL_9:
  free(v3);
  return v2;
}

const char *__brc_xattr_flags_from_name_block_invoke()
{
  const char *result;
  char **v1;
  const char *v2;

  result = brc_xattr_flags_from_name_xattr_mods;
  if (brc_xattr_flags_from_name_xattr_mods)
  {
    v1 = &brc_xattr_flags_from_name_xattr_mods;
    do
    {
      *v1 = xattr_name_without_flags(result);
      v2 = v1[3];
      v1 += 3;
      result = v2;
    }
    while (v2);
  }
  return result;
}

BOOL BRCFileMightHaveChangedByFileName(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  int ProtectionStatus;
  int v13;
  ssize_t v14;
  int v15;
  char *v16;
  char *v17;
  _BOOL8 result;
  int v19;
  int v20;
  _OWORD v21[3];
  char namebuff[256];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  ProtectionStatus = BRCOpenAtAndGetProtectionStatus(a1, a2, 256, 0, 0);
  if (ProtectionStatus < 0)
    return 1;
  v13 = ProtectionStatus;
  v14 = flistxattr(ProtectionStatus, namebuff, 0x100uLL, 0);
  if (v14 < 0)
    goto LABEL_7;
  *(_QWORD *)&v21[0] = MEMORY[0x1E0C809B0];
  *((_QWORD *)&v21[0] + 1) = 3221225472;
  *(_QWORD *)&v21[1] = __countSyncableXattrs_block_invoke;
  *((_QWORD *)&v21[1] + 1) = &__block_descriptor_33_e9_B16__0r_8l;
  LOBYTE(v21[2]) = 1;
  if (v14)
  {
    v15 = 0;
    v16 = &namebuff[v14];
    v17 = namebuff;
    do
    {
      v15 += (*(uint64_t (**)(_OWORD *, char *))&v21[1])(v21, v17);
      v17 += strlen(v17) + 1;
    }
    while (v17 < v16);
    if (v15)
    {
LABEL_7:
      close(v13);
      return 1;
    }
  }
  memset(v21, 0, 36);
  v19 = fgetattrlist(v13, &BRCFileMightHaveChangedByFileName_al, v21, 0x24uLL, 0x20u);
  close(v13);
  if (v19 < 0)
    return 1;
  if ((a7 - 1) >= 2)
  {
    if (a7 == 3)
    {
LABEL_17:
      v20 = 0;
      a5 = *(_QWORD *)((char *)v21 + 4);
      goto LABEL_19;
    }
    if (a7 != 8)
    {
LABEL_18:
      v20 = 61632;
      goto LABEL_19;
    }
  }
  if (!_CFURLCStringIsPromiseName())
  {
    if (a7 == 3)
      goto LABEL_17;
    goto LABEL_18;
  }
  v20 = 61568;
LABEL_19:
  result = 1;
  if (((DWORD1(v21[1]) ^ a6) & v20) == 0 && DWORD2(v21[1]) == a4 && a5 == *(_QWORD *)((char *)v21 + 4))
    return *(_QWORD *)((char *)&v21[1] + 12) != a3;
  return result;
}

BOOL __countSyncableXattrs_block_invoke(uint64_t a1, char *a2)
{
  xattr_flags_t v3;

  v3 = brc_xattr_flags_from_name(a2);
  return *(_BYTE *)(a1 + 32) == (xattr_intent_with_flags(4u, v3) != 0);
}

uint64_t __sort_strings_block_invoke(uint64_t a1, const char **a2, const char **a3)
{
  return strcmp(*a2, *a3);
}

void sub_1CBF072F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CBF078DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t _brc_ipc_check_url_access(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend(a1, "accessLogicalOrPhysicalURL:accessKind:dbAccessKind:synchronouslyIfPossible:handler:", a3, a4, a5, 0, a6);
}

void sub_1CBF081B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__42(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__42(uint64_t a1)
{

}

void sub_1CBF08CA4(_Unwind_Exception *a1)
{
  _BRRestorePersona();
  _Unwind_Resume(a1);
}

void sub_1CBF09550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  __brc_leave_section(&a25);
  __brc_leave_section(&a34);
  _Unwind_Resume(a1);
}

void sub_1CBF09B84(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Unwind_Resume(a1);
}

void sub_1CBF09EB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF0A644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  __brc_leave_section(&a19);
  __brc_leave_section(&a28);
  _Unwind_Resume(a1);
}

void sub_1CBF0B154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  __brc_leave_section(&a19);
  __brc_leave_section(&a28);
  _Unwind_Resume(a1);
}

void sub_1CBF0BAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  __brc_leave_section(&a17);
  __brc_leave_section(&a26);
  _Unwind_Resume(a1);
}

void sub_1CBF0C508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF0CB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  __brc_leave_section(&a19);
  __brc_leave_section(&a28);
  _Unwind_Resume(a1);
}

void sub_1CBF0D340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  __brc_leave_section(&a17);
  __brc_leave_section(&a26);
  _Unwind_Resume(a1);
}

void sub_1CBF0DBB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  __brc_leave_section(&a30);
  _Unwind_Resume(a1);
}

void sub_1CBF0E418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  __brc_leave_section(&a19);
  __brc_leave_section(&a28);
  _Unwind_Resume(a1);
}

void sub_1CBF0EBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  __brc_leave_section(&a17);
  __brc_leave_section(&a26);
  _Unwind_Resume(a1);
}

void sub_1CBF0F2AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  __brc_leave_section(&a21);
  __brc_leave_section(&a30);
  _Unwind_Resume(a1);
}

void sub_1CBF0FAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF100DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF110DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF115BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF11B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF12344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  __brc_leave_section(&a19);
  __brc_leave_section(&a28);
  _Unwind_Resume(a1);
}

void sub_1CBF12C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF13004(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF13250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF13748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF13D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF14398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  __brc_leave_section(&a17);
  __brc_leave_section(&a26);
  _Unwind_Resume(a1);
}

void sub_1CBF14A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  __brc_leave_section(&a19);
  __brc_leave_section(&a28);
  _Unwind_Resume(a1);
}

void sub_1CBF1508C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  __brc_leave_section(&a17);
  __brc_leave_section(&a26);
  _Unwind_Resume(a1);
}

void sub_1CBF156CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  __brc_leave_section(&a17);
  __brc_leave_section(&a26);
  _Unwind_Resume(a1);
}

void sub_1CBF15D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  __brc_leave_section(&a17);
  __brc_leave_section(&a26);
  _Unwind_Resume(a1);
}

void sub_1CBF16348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF16978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  id *v34;
  uint64_t v35;

  _Block_object_dispose(&a28, 8);
  objc_destroyWeak(v34);
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose((const void *)(v35 - 176), 8);
  __brc_leave_section((uint64_t *)(v35 - 200));
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__96(uint64_t a1, uint64_t a2)
{
  objc_moveWeak((id *)(a1 + 40), (id *)(a2 + 40));
}

void __Block_byref_object_dispose__97(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 40));
}

void sub_1CBF175C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  __brc_leave_section((uint64_t *)va);
  __brc_leave_section((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_1CBF17BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  __brc_leave_section(&a26);
  _Unwind_Resume(a1);
}

void sub_1CBF18220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF186A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF18B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF19250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF19BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;

  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a49, 8);
  _Block_object_dispose((const void *)(v49 - 240), 8);
  _Unwind_Resume(a1);
}

void sub_1CBF1A534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v59;

  __brc_leave_section(&a40);
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a53, 8);
  _Block_object_dispose(&a59, 8);
  _Block_object_dispose((const void *)(v59 - 240), 8);
  _Unwind_Resume(a1);
}

void sub_1CBF1AC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF1B208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF1BA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF1BFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  __brc_leave_section((uint64_t *)va);
  __brc_leave_section((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_1CBF1C408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF1C8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  __brc_leave_section(&a17);
  __brc_leave_section(&a26);
  _Unwind_Resume(a1);
}

void sub_1CBF1D29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  __brc_leave_section(&a19);
  __brc_leave_section(&a28);
  _Unwind_Resume(a1);
}

void sub_1CBF1DB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  __brc_leave_section(&a17);
  __brc_leave_section(&a26);
  _Unwind_Resume(a1);
}

void sub_1CBF1EB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF1F9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF20090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  __brc_leave_section(&a52);
  _Unwind_Resume(a1);
}

void sub_1CBF2078C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBF20F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF21544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  __brc_leave_section(&a23);
  __brc_leave_section(&a32);
  _Unwind_Resume(a1);
}

void sub_1CBF21880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF21BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  __brc_leave_section(&a30);
  _Unwind_Resume(a1);
}

void sub_1CBF22518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF22D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  __brc_leave_section(&a17);
  __brc_leave_section(&a26);
  _Unwind_Resume(a1);
}

void sub_1CBF233EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBF241F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void __dispatch_async_with_logs_block_invoke_21(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  const char *label;
  __int128 v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *(_OWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  brc_bread_crumbs();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    label = dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32));
    *(_DWORD *)buf = 134218498;
    v8 = v5;
    v9 = 2080;
    v10 = label;
    v11 = 2112;
    v12 = v2;
    _os_log_debug_impl(&dword_1CBD43000, v3, OS_LOG_TYPE_DEBUG, "[DEBUG] ┳%llx continuing on %s%@", buf, 0x20u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  __brc_leave_section((uint64_t *)&v5);
}

void sub_1CBF25048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void __dispatch_async_with_logs_block_invoke_22(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  const char *label;
  __int128 v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *(_OWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  brc_bread_crumbs();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    label = dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32));
    *(_DWORD *)buf = 134218498;
    v8 = v5;
    v9 = 2080;
    v10 = label;
    v11 = 2112;
    v12 = v2;
    _os_log_debug_impl(&dword_1CBD43000, v3, OS_LOG_TYPE_DEBUG, "[DEBUG] ┳%llx continuing on %s%@", buf, 0x20u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  __brc_leave_section((uint64_t *)&v5);
}

void sub_1CBF25C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void brc_task_tracker_async_with_logs_and_qos(void *a1, void *a2, dispatch_block_flags_t a3, dispatch_qos_class_t a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  char is_cancelled;
  void *v19;
  dispatch_block_t v20;
  dispatch_block_t v21;
  void *v22;
  void *v23;
  void *v24;
  NSObject *v25;
  _QWORD block[4];
  _QWORD *v27;
  id v28;
  id v29;
  _QWORD v30[4];
  id v31;
  id v32;

  v11 = a1;
  v12 = a2;
  v13 = a5;
  v14 = a6;
  if (!v11)
  {
    brc_bread_crumbs();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_FAULT))
      brc_task_tracker_async_with_logs_and_qos_cold_1();

  }
  v15 = MEMORY[0x1E0C809B0];
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = __brc_task_tracker_async_with_logs_and_qos_block_invoke;
  v30[3] = &unk_1E875EAA8;
  v16 = v11;
  v31 = v16;
  v32 = v14;
  v17 = (void *)MEMORY[0x1D17A6DB0](v30);
  is_cancelled = brc_task_tracker_is_cancelled(v16);
  v19 = (void *)v16[2];
  if ((is_cancelled & 1) != 0)
  {
    if (a3 != DISPATCH_BLOCK_INHERIT_QOS_CLASS || a4)
      v20 = dispatch_block_create_with_qos_class(a3, a4, 0, v17);
    else
      v20 = (dispatch_block_t)MEMORY[0x1D17A6DB0](v17);
    v22 = v20;
    dispatch_group_async_with_logs(v19, v12, v20);
  }
  else
  {
    block[0] = v15;
    block[1] = 3221225472;
    block[2] = __brc_task_tracker_async_with_logs_and_qos_block_invoke_10;
    block[3] = &unk_1E8765708;
    v27 = v16;
    v28 = v13;
    v29 = v17;
    if (a3 != DISPATCH_BLOCK_INHERIT_QOS_CLASS || a4)
      v21 = dispatch_block_create_with_qos_class(a3, a4, 0, block);
    else
      v21 = (dispatch_block_t)MEMORY[0x1D17A6DB0](block);
    v23 = v21;
    dispatch_group_async_with_logs(v19, v12, v21);

    v22 = v27;
  }

}

uint64_t __brc_task_tracker_async_with_logs_and_qos_block_invoke(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint64_t result;

  brc_bread_crumbs();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    __brc_task_tracker_async_with_logs_and_qos_block_invoke_cold_1(a1, (uint64_t)v2, v3);

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t brc_task_tracker_is_cancelled(void *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  void *v5;
  NSObject *v6;

  v1 = a1;
  if (!v1)
  {
    brc_bread_crumbs();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      brc_task_tracker_async_with_logs_and_qos_cold_1();

  }
  v2 = atomic_load(v1 + 24);
  v3 = v2 & 1;

  return v3;
}

void dispatch_group_async_with_logs(void *a1, void *a2, void *a3)
{
  NSObject *v5;
  NSObject *v6;
  id v7;
  void *v8;
  void *v9;
  NSObject *v10;
  NSObject *v11;
  id v12;
  uint64_t v13;
  const char *label;
  _QWORD v15[4];
  NSObject *v16;
  id v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  _BYTE buf[24];
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = (void *)MEMORY[0x1D17A6BE8]();
  v20 = 0uLL;
  v21 = 0;
  __brc_create_section(0, (uint64_t)"dispatch_group_async_with_logs", 293, &v20);
  brc_bread_crumbs();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    v13 = v20;
    label = dispatch_queue_get_label(v6);
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = v13;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = label;
    *(_WORD *)&buf[22] = 2112;
    v23 = v9;
    _os_log_debug_impl(&dword_1CBD43000, v10, OS_LOG_TYPE_DEBUG, "[DEBUG] ┣%llx dispatching to %s%@", buf, 0x20u);
  }

  *(_QWORD *)&buf[16] = v21;
  *(_OWORD *)buf = v20;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __dispatch_group_async_with_logs_block_invoke_1;
  v15[3] = &unk_1E875D578;
  v18 = v20;
  v19 = v21;
  v11 = v6;
  v16 = v11;
  v12 = v7;
  v17 = v12;
  dispatch_group_async(v5, v11, v15);

  objc_autoreleasePoolPop(v8);
}

uint64_t __brc_task_tracker_async_with_logs_and_qos_block_invoke_10(uint64_t a1)
{
  int is_cancelled;
  uint64_t v3;

  is_cancelled = brc_task_tracker_is_cancelled(*(void **)(a1 + 32));
  v3 = 40;
  if (is_cancelled)
    v3 = 48;
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + v3) + 16))();
}

void brc_task_tracker_async_with_logs(void *a1, void *a2, void *a3, void *a4)
{
  brc_task_tracker_async_with_logs_and_qos(a1, a2, DISPATCH_BLOCK_INHERIT_QOS_CLASS, QOS_CLASS_UNSPECIFIED, a3, a4);
}

intptr_t brc_task_tracker_wait_timeout(uint64_t a1, dispatch_time_t a2)
{
  return dispatch_group_wait(*(dispatch_group_t *)(a1 + 16), a2);
}

intptr_t brc_task_tracker_wait(uint64_t a1)
{
  return dispatch_group_wait(*(dispatch_group_t *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL);
}

void brc_task_tracker_sync(void *a1, void *a2, void *a3)
{
  dispatch_group_t *v5;
  void (**v6)(void);
  void (**v7)(void);
  void (**v8)(void);
  void *v9;
  NSObject *v10;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (!v5)
  {
    brc_bread_crumbs();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      brc_task_tracker_async_with_logs_and_qos_cold_1();

  }
  dispatch_group_enter(v5[2]);
  if (brc_task_tracker_is_cancelled(v5))
    v8 = v7;
  else
    v8 = v6;
  v8[2]();
  dispatch_group_leave(v5[2]);

}

void __dispatch_group_async_with_logs_block_invoke_1(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  const char *label;
  __int128 v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *(_OWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  brc_bread_crumbs();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    label = dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32));
    *(_DWORD *)buf = 134218498;
    v8 = v5;
    v9 = 2080;
    v10 = label;
    v11 = 2112;
    v12 = v2;
    _os_log_debug_impl(&dword_1CBD43000, v3, OS_LOG_TYPE_DEBUG, "[DEBUG] ┳%llx continuing on %s%@", buf, 0x20u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  __brc_leave_section((uint64_t *)&v5);
}

void sub_1CBF27B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void sub_1CBF2847C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF286E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  id v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  va_list va2;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, id);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v14 = va_arg(va3, id);
  v16 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  v18 = va_arg(va3, _QWORD);
  v19 = va_arg(va3, _QWORD);
  v20 = va_arg(va3, _QWORD);
  __brc_leave_section((uint64_t *)va);
  __destructor_8_s0_s8_s16_s24((id *)va1);
  __destructor_8_s0_s8_s16_s24((id *)va2);
  __destructor_8_s0_s8_s16_s24((id *)va3);
  _Unwind_Resume(a1);
}

void __destructor_8_s0_s8_s16_s24(id *a1)
{

}

void sub_1CBF29D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF2A274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF2B108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1CBF2D968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF2FC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  _Block_object_dispose(&a51, 8);
  _Unwind_Resume(a1);
}

void sub_1CBF320BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF34420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  __brc_leave_section(&a38);
  _Unwind_Resume(a1);
}

void sub_1CBF34584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void sub_1CBF35428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF359B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CBF35C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF3694C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__43(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__43(uint64_t a1)
{

}

void sub_1CBF36F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a41, 8);
  _Unwind_Resume(a1);
}

void sub_1CBF381F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBF38410(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBF3850C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1CBF3876C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBF39324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CBF39890(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBF3BBD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBF3D8E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_15_2(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

uint64_t BRFieldUserIdentityReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1CBF4117C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CBF41D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CBF43914(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF43DDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF4551C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBF45650(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBF46BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__44(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__44(uint64_t a1)
{

}

void sub_1CBF47708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id *location)
{
  uint64_t v16;

  _Block_object_dispose((const void *)(v16 - 208), 8);
  _Unwind_Resume(a1);
}

void sub_1CBF47988(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBF479F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1CBF480F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t AppTelemetryTimeSeriesEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  int *v8;
  int *v9;
  int *v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  int v19;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  uint64_t result;
  char v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  int *v67;
  int *v68;
  int *v69;
  AppTelemetryInvestigation *v70;
  uint64_t v71;
  uint64_t v72;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  v8 = &OBJC_IVAR___BRCPackageManifestReader__error;
  v9 = &OBJC_IVAR___BRCPackageManifestReader__error;
  v10 = &OBJC_IVAR___BRCPackageManifestReader__error;
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    while (1)
    {
      v14 = *v3;
      v15 = *(_QWORD *)(a2 + v14);
      v16 = v15 + 1;
      if (v15 == -1 || v16 > *(_QWORD *)(a2 + *v4))
        break;
      v17 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v15);
      *(_QWORD *)(a2 + v14) = v16;
      v13 |= (unint64_t)(v17 & 0x7F) << v11;
      if ((v17 & 0x80) == 0)
        goto LABEL_12;
      v11 += 7;
      v18 = v12++ >= 9;
      if (v18)
      {
        v13 = 0;
        v19 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v19 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v13 = 0;
LABEL_14:
    if (v19 || (v13 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v13 >> 3))
    {
      case 0u:
        v21 = 0;
        do
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          v24 = v23 + 1;
          if (v23 == -1 || v24 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
            goto LABEL_99;
          }
          v25 = *(char *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v24;
          if ((v25 & 0x80000000) == 0)
            break;
        }
        while (v21++ <= 8);
        goto LABEL_99;
      case 1u:
        v27 = 0;
        v28 = 0;
        v29 = 0;
        while (2)
        {
          v30 = *v3;
          v31 = *(_QWORD *)(a2 + v30);
          v32 = v31 + 1;
          if (v31 == -1 || v32 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
            *(_QWORD *)(a2 + v30) = v32;
            v29 |= (unint64_t)(v33 & 0x7F) << v27;
            if (v33 < 0)
            {
              v27 += 7;
              v18 = v28++ >= 9;
              if (v18)
              {
                LODWORD(v29) = 0;
                goto LABEL_76;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v29) = 0;
LABEL_76:
        v71 = v8[515];
        goto LABEL_81;
      case 2u:
        objc_msgSend((id)a1, "clearOneofValuesForMagnitude");
        *(_BYTE *)(a1 + v9[506]) |= 8u;
        *(_DWORD *)(a1 + v10[507]) = 1;
        *(_BYTE *)(a1 + v9[506]) |= 0x10u;
        v34 = *v3;
        v35 = *(_QWORD *)(a2 + v34);
        if (v35 <= 0xFFFFFFFFFFFFFFFBLL && v35 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v36 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v35);
          *(_QWORD *)(a2 + v34) = v35 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v36 = 0;
        }
        *(_DWORD *)(a1 + 44) = v36;
        goto LABEL_99;
      case 3u:
        objc_msgSend((id)a1, "clearOneofValuesForMagnitude");
        *(_BYTE *)(a1 + v9[506]) |= 8u;
        *(_DWORD *)(a1 + v10[507]) = 2;
        *(_BYTE *)(a1 + v9[506]) |= 1u;
        v37 = *v3;
        v38 = *(_QWORD *)(a2 + v37);
        if (v38 <= 0xFFFFFFFFFFFFFFF7 && v38 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v39 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v38);
          *(_QWORD *)(a2 + v37) = v38 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v39 = 0;
        }
        *(_QWORD *)(a1 + 8) = v39;
        goto LABEL_99;
      case 4u:
        objc_msgSend((id)a1, "clearOneofValuesForMagnitude");
        v40 = 0;
        v41 = 0;
        v29 = 0;
        *(_BYTE *)(a1 + v9[506]) |= 8u;
        *(_DWORD *)(a1 + v10[507]) = 3;
        *(_BYTE *)(a1 + v9[506]) |= 0x20u;
        while (2)
        {
          v42 = *v3;
          v43 = *(_QWORD *)(a2 + v42);
          v44 = v43 + 1;
          if (v43 == -1 || v44 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
            *(_QWORD *)(a2 + v42) = v44;
            v29 |= (unint64_t)(v45 & 0x7F) << v40;
            if (v45 < 0)
            {
              v40 += 7;
              v18 = v41++ >= 9;
              if (v18)
              {
                LODWORD(v29) = 0;
                goto LABEL_80;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v29) = 0;
LABEL_80:
        v71 = 48;
LABEL_81:
        *(_DWORD *)(a1 + v71) = v29;
        goto LABEL_99;
      case 5u:
        objc_msgSend((id)a1, "clearOneofValuesForMagnitude");
        v46 = 0;
        v47 = 0;
        v48 = 0;
        *(_BYTE *)(a1 + v9[506]) |= 8u;
        *(_DWORD *)(a1 + v10[507]) = 4;
        *(_BYTE *)(a1 + v9[506]) |= 0x40u;
        while (2)
        {
          v49 = *v3;
          v50 = *(_QWORD *)(a2 + v49);
          v51 = v50 + 1;
          if (v50 == -1 || v51 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v52 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v50);
            *(_QWORD *)(a2 + v49) = v51;
            v48 |= (unint64_t)(v52 & 0x7F) << v46;
            if (v52 < 0)
            {
              v46 += 7;
              v18 = v47++ >= 9;
              if (v18)
              {
                v48 = 0;
                goto LABEL_85;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v48 = 0;
LABEL_85:
        *(_BYTE *)(a1 + 56) = v48 != 0;
        goto LABEL_99;
      case 6u:
        objc_msgSend((id)a1, "clearOneofValuesForMagnitude");
        v53 = 0;
        v54 = 0;
        v55 = 0;
        *(_BYTE *)(a1 + v9[506]) |= 8u;
        *(_DWORD *)(a1 + v10[507]) = 5;
        *(_BYTE *)(a1 + v9[506]) |= 2u;
        while (2)
        {
          v56 = *v3;
          v57 = *(_QWORD *)(a2 + v56);
          v58 = v57 + 1;
          if (v57 == -1 || v58 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v59 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v57);
            *(_QWORD *)(a2 + v56) = v58;
            v55 |= (unint64_t)(v59 & 0x7F) << v53;
            if (v59 < 0)
            {
              v53 += 7;
              v18 = v54++ >= 9;
              if (v18)
              {
                v55 = 0;
                goto LABEL_89;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v55 = 0;
LABEL_89:
        v72 = 16;
        goto LABEL_94;
      case 0xAu:
        v61 = 0;
        v62 = 0;
        v55 = 0;
        *(_BYTE *)(a1 + v9[506]) |= 4u;
        while (2)
        {
          v63 = *v3;
          v64 = *(_QWORD *)(a2 + v63);
          v65 = v64 + 1;
          if (v64 == -1 || v65 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v66 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v64);
            *(_QWORD *)(a2 + v63) = v65;
            v55 |= (unint64_t)(v66 & 0x7F) << v61;
            if (v66 < 0)
            {
              v61 += 7;
              v18 = v62++ >= 9;
              if (v18)
              {
                v55 = 0;
                goto LABEL_93;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v55 = 0;
LABEL_93:
        v72 = 24;
LABEL_94:
        *(_QWORD *)(a1 + v72) = v55;
        goto LABEL_99;
      case 0xBu:
        v67 = v9;
        v68 = v10;
        v69 = v8;
        v70 = objc_alloc_init(AppTelemetryInvestigation);
        objc_storeStrong((id *)(a1 + 32), v70);
        if (PBReaderPlaceMark() && (AppTelemetryInvestigationReadFrom((uint64_t)v70, a2) & 1) != 0)
        {
          PBReaderRecallMark();

          v8 = v69;
          v10 = v68;
          v9 = v67;
LABEL_99:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_99;
    }
  }
}

void sub_1CBF4A964(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF4B470(_Unwind_Exception *a1)
{
  _BRRestorePersona();
  _Unwind_Resume(a1);
}

void __ubiquitousGetterForAttribute_block_invoke()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  _QWORD v7[5];
  _QWORD v8[6];

  v8[5] = *MEMORY[0x1E0C80C00];
  v7[0] = *MEMORY[0x1E0C99A38];
  objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithPointer:", isUbiquitousItemForURL);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = v0;
  v7[1] = *MEMORY[0x1E0C99B40];
  objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithPointer:", ubiquitousItemIsUploading_0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v8[1] = v1;
  v7[2] = *MEMORY[0x1E0C99B38];
  objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithPointer:", ubiquitousItemIsUploaded);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v8[2] = v2;
  v7[3] = *MEMORY[0x1E0C99B18];
  objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithPointer:", ubiquitousItemIsDownloaded);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v8[3] = v3;
  v7[4] = *MEMORY[0x1E0C99B00];
  objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithPointer:", ubiquitousItemDownloadingStatus);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v8[4] = v4;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v8, v7, 5);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)ubiquitousGetterForAttribute_ubiquitousAttributeToFunction;
  ubiquitousGetterForAttribute_ubiquitousAttributeToFunction = v5;

}

id isUbiquitousItemForURL(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  int v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  char v15;
  uint64_t v16;
  void *v17;
  void *v19;
  id v20;
  id v21;
  void *v22;
  NSObject *v23;
  void *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  NSObject *v28;
  id v29;
  id v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  void *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = a1;
  objc_msgSend(v2, "session");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "personaIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "isEqualToString:", CFSTR("__defaultPersonaID__")))
  {

  }
  else
  {
    objc_msgSend(v2, "session");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "personaIdentifier");
    v6 = (id)objc_claimAutoreleasedReturnValue();

    if (v6)
    {
      v7 = 0;
      goto LABEL_8;
    }
  }
  if (isUbiquitousItemForURL___personaOnceToken != -1)
    dispatch_once(&isUbiquitousItemForURL___personaOnceToken, &__block_literal_global_9);
  v6 = (id)isUbiquitousItemForURL___personalPersona;
  v7 = 1;
LABEL_8:
  objc_msgSend(MEMORY[0x1E0DC5EE8], "sharedManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "currentPersona");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v30 = 0;
  objc_msgSend(v9, "userPersonaUniqueString");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v10 == v6 || (objc_msgSend(v10, "isEqualToString:", v6) & 1) != 0)
  {
    v12 = 0;
    goto LABEL_11;
  }
  if (voucher_process_can_use_arbitrary_personas())
  {
    v29 = 0;
    v19 = (void *)objc_msgSend(v9, "copyCurrentPersonaContextWithError:", &v29);
    v20 = v29;
    v21 = v30;
    v30 = v19;

    if (v20)
    {
      brc_bread_crumbs();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, (os_log_type_t)0x90u))
        -[_BRCOperation completedWithResult:error:].cold.1();

    }
    objc_msgSend(v9, "generateAndRestorePersonaContextWithPersonaUniqueString:", v6);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12)
    {
      brc_bread_crumbs();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, (os_log_type_t)0x90u))
      {
        objc_msgSend(v2, "session");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v26, "personaIdentifier");
        v1 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412802;
        v32 = v1;
        v33 = 2112;
        v34 = v12;
        v35 = 2112;
        v36 = v24;
        _os_log_error_impl(&dword_1CBD43000, v25, (os_log_type_t)0x90u, "[ERROR] Can't adopt persona %@: %@%@", buf, 0x20u);

      }
LABEL_33:

    }
  }
  else
  {
    if (v7 && (objc_msgSend(v9, "isDataSeparatedPersona") & 1) == 0)
    {
      brc_bread_crumbs();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
        -[_BRCOperation completedWithResult:error:].cold.3();
      v12 = 0;
      goto LABEL_33;
    }
    brc_bread_crumbs();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
      -[_BRCOperation completedWithResult:error:].cold.2();

    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2FE0], 22, 0);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
  }
LABEL_11:
  v13 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(v2, "relpath");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "exists");
  if ((v15 & 1) != 0)
  {
    v16 = 1;
  }
  else
  {
    objc_msgSend(v2, "faultedRelpath");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v1, "exists");
  }
  objc_msgSend(v13, "numberWithInt:", v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if ((v15 & 1) == 0)

  _BRRestorePersona();
  return v17;
}

void sub_1CBF4BA90(_Unwind_Exception *a1)
{
  _BRRestorePersona();
  _Unwind_Resume(a1);
}

id ubiquitousItemIsUploading_0(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  int v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void (*v13)(void *, void *);
  void *v14;
  void *v15;
  void *v17;
  id v18;
  id v19;
  void *v20;
  NSObject *v21;
  void *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  NSObject *v27;
  id v28;
  id v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  void *v33;
  __int16 v34;
  void *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "session");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "personaIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "isEqualToString:", CFSTR("__defaultPersonaID__")))
  {

  }
  else
  {
    objc_msgSend(v1, "session");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "personaIdentifier");
    v5 = (id)objc_claimAutoreleasedReturnValue();

    if (v5)
    {
      v6 = 0;
      goto LABEL_8;
    }
  }
  if (ubiquitousItemIsUploading___personaOnceToken != -1)
    dispatch_once(&ubiquitousItemIsUploading___personaOnceToken, &__block_literal_global_11);
  v5 = (id)ubiquitousItemIsUploading___personalPersona;
  v6 = 1;
LABEL_8:
  objc_msgSend(MEMORY[0x1E0DC5EE8], "sharedManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "currentPersona");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v29 = 0;
  objc_msgSend(v8, "userPersonaUniqueString");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v9 == v5 || (objc_msgSend(v9, "isEqualToString:", v5) & 1) != 0)
  {
    v11 = 0;
    goto LABEL_11;
  }
  if (voucher_process_can_use_arbitrary_personas())
  {
    v28 = 0;
    v17 = (void *)objc_msgSend(v8, "copyCurrentPersonaContextWithError:", &v28);
    v18 = v28;
    v19 = v29;
    v29 = v17;

    if (v18)
    {
      brc_bread_crumbs();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, (os_log_type_t)0x90u))
        -[_BRCOperation completedWithResult:error:].cold.1();

    }
    objc_msgSend(v8, "generateAndRestorePersonaContextWithPersonaUniqueString:", v5);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (v11)
    {
      brc_bread_crumbs();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, (os_log_type_t)0x90u))
      {
        objc_msgSend(v1, "session");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "personaIdentifier");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412802;
        v31 = v25;
        v32 = 2112;
        v33 = v11;
        v34 = 2112;
        v35 = v22;
        _os_log_error_impl(&dword_1CBD43000, v23, (os_log_type_t)0x90u, "[ERROR] Can't adopt persona %@: %@%@", buf, 0x20u);

      }
LABEL_28:

    }
  }
  else
  {
    if (v6 && (objc_msgSend(v8, "isDataSeparatedPersona") & 1) == 0)
    {
      brc_bread_crumbs();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
        -[_BRCOperation completedWithResult:error:].cold.3();
      v11 = 0;
      goto LABEL_28;
    }
    brc_bread_crumbs();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
      -[_BRCOperation completedWithResult:error:].cold.2();

    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2FE0], 22, 0);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
  }
LABEL_11:
  objc_msgSend(v1, "byIDLocalItem");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = +[BRCUbiquitousAttributes brc_getterForAttribute:](BRCUbiquitousAttributes, "brc_getterForAttribute:", *MEMORY[0x1E0C99B40]);
  objc_msgSend(v1, "db");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v13(v12, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  _BRRestorePersona();
  return v15;
}

void sub_1CBF4BEDC(_Unwind_Exception *a1)
{
  _BRRestorePersona();
  _Unwind_Resume(a1);
}

id ubiquitousItemIsUploaded(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  int v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  void *v15;
  char v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  NSObject *v22;
  void *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v30;
  NSObject *v31;
  id v32;
  id v33;
  uint8_t buf[4];
  void *v35;
  __int16 v36;
  void *v37;
  __int16 v38;
  void *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "session");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "personaIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "isEqualToString:", CFSTR("__defaultPersonaID__")))
  {

  }
  else
  {
    objc_msgSend(v1, "session");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "personaIdentifier");
    v5 = (id)objc_claimAutoreleasedReturnValue();

    if (v5)
    {
      v6 = 0;
      goto LABEL_8;
    }
  }
  if (ubiquitousItemIsUploaded___personaOnceToken != -1)
    dispatch_once(&ubiquitousItemIsUploaded___personaOnceToken, &__block_literal_global_12_0);
  v5 = (id)ubiquitousItemIsUploaded___personalPersona;
  v6 = 1;
LABEL_8:
  objc_msgSend(MEMORY[0x1E0DC5EE8], "sharedManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "currentPersona");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v33 = 0;
  objc_msgSend(v8, "userPersonaUniqueString");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v9 == v5 || (objc_msgSend(v9, "isEqualToString:", v5) & 1) != 0)
  {
    v11 = 0;
    goto LABEL_11;
  }
  if (voucher_process_can_use_arbitrary_personas())
  {
    v32 = 0;
    v18 = (void *)objc_msgSend(v8, "copyCurrentPersonaContextWithError:", &v32);
    v19 = v32;
    v20 = v33;
    v33 = v18;

    if (v19)
    {
      brc_bread_crumbs();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, (os_log_type_t)0x90u))
        -[_BRCOperation completedWithResult:error:].cold.1();

    }
    objc_msgSend(v8, "generateAndRestorePersonaContextWithPersonaUniqueString:", v5);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (v11)
    {
      brc_bread_crumbs();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, (os_log_type_t)0x90u))
      {
        objc_msgSend(v1, "session");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "personaIdentifier");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412802;
        v35 = v26;
        v36 = 2112;
        v37 = v11;
        v38 = 2112;
        v39 = v23;
        _os_log_error_impl(&dword_1CBD43000, v24, (os_log_type_t)0x90u, "[ERROR] Can't adopt persona %@: %@%@", buf, 0x20u);

      }
LABEL_44:

    }
  }
  else
  {
    if (v6 && (objc_msgSend(v8, "isDataSeparatedPersona") & 1) == 0)
    {
      brc_bread_crumbs();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
        -[_BRCOperation completedWithResult:error:].cold.3();
      v11 = 0;
      goto LABEL_44;
    }
    brc_bread_crumbs();
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v31 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
      -[_BRCOperation completedWithResult:error:].cold.2();

    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2FE0], 22, 0);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
  }
LABEL_11:
  objc_msgSend(v1, "relpath");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "exists");
  if ((v13 & 1) != 0)
  {
    objc_msgSend(v1, "byIDLocalItem");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = v12;
  }
  else
  {
    objc_msgSend(v1, "faultedRelpath");
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if ((objc_msgSend(v15, "exists") & 1) == 0)
    {
      v17 = (void *)MEMORY[0x1E0C9AAA0];
      goto LABEL_35;
    }
    objc_msgSend(v1, "faultedLocalItem");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
  }
  if ((objc_msgSend(v15, "isDocument") & 1) != 0)
  {
    if (v14)
      v16 = 0;
    else
      v16 = v13;
    if ((v16 & 1) != 0 || v13 && (objc_msgSend(v14, "changedAtRelativePath:scanPackage:", v15, 0) & 1) != 0)
    {
      v17 = (void *)MEMORY[0x1E0C9AAA0];
    }
    else
    {
      v27 = (void *)MEMORY[0x1E0CB37E8];
      objc_msgSend(v14, "asDocument");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "numberWithInt:", objc_msgSend(v28, "uploadStatus") == 3);
      v17 = (void *)objc_claimAutoreleasedReturnValue();

    }
  }
  else
  {
    v17 = 0;
  }

LABEL_35:
  _BRRestorePersona();

  return v17;
}

void sub_1CBF4C3CC(_Unwind_Exception *a1)
{
  _BRRestorePersona();
  _Unwind_Resume(a1);
}

id ubiquitousItemIsDownloaded(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  int v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v15;
  id v16;
  id v17;
  void *v18;
  NSObject *v19;
  void *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  NSObject *v25;
  id v26;
  id v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  void *v31;
  __int16 v32;
  void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "session");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "personaIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "isEqualToString:", CFSTR("__defaultPersonaID__")))
  {

  }
  else
  {
    objc_msgSend(v1, "session");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "personaIdentifier");
    v5 = (id)objc_claimAutoreleasedReturnValue();

    if (v5)
    {
      v6 = 0;
      goto LABEL_8;
    }
  }
  if (ubiquitousItemIsDownloaded___personaOnceToken != -1)
    dispatch_once(&ubiquitousItemIsDownloaded___personaOnceToken, &__block_literal_global_13_1);
  v5 = (id)ubiquitousItemIsDownloaded___personalPersona;
  v6 = 1;
LABEL_8:
  objc_msgSend(MEMORY[0x1E0DC5EE8], "sharedManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "currentPersona");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v27 = 0;
  objc_msgSend(v8, "userPersonaUniqueString");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v9 == v5 || (objc_msgSend(v9, "isEqualToString:", v5) & 1) != 0)
  {
    v11 = 0;
    goto LABEL_11;
  }
  if (voucher_process_can_use_arbitrary_personas())
  {
    v26 = 0;
    v15 = (void *)objc_msgSend(v8, "copyCurrentPersonaContextWithError:", &v26);
    v16 = v26;
    v17 = v27;
    v27 = v15;

    if (v16)
    {
      brc_bread_crumbs();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, (os_log_type_t)0x90u))
        -[_BRCOperation completedWithResult:error:].cold.1();

    }
    objc_msgSend(v8, "generateAndRestorePersonaContextWithPersonaUniqueString:", v5);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (v11)
    {
      brc_bread_crumbs();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, (os_log_type_t)0x90u))
      {
        objc_msgSend(v1, "session");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "personaIdentifier");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412802;
        v29 = v23;
        v30 = 2112;
        v31 = v11;
        v32 = 2112;
        v33 = v20;
        _os_log_error_impl(&dword_1CBD43000, v21, (os_log_type_t)0x90u, "[ERROR] Can't adopt persona %@: %@%@", buf, 0x20u);

      }
LABEL_28:

    }
  }
  else
  {
    if (v6 && (objc_msgSend(v8, "isDataSeparatedPersona") & 1) == 0)
    {
      brc_bread_crumbs();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
        -[_BRCOperation completedWithResult:error:].cold.3();
      v11 = 0;
      goto LABEL_28;
    }
    brc_bread_crumbs();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      -[_BRCOperation completedWithResult:error:].cold.2();

    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2FE0], 22, 0);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
  }
LABEL_11:
  ubiquitousItemDownloadingStatus(v1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v12 == (void *)*MEMORY[0x1E0C99AF0]);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  _BRRestorePersona();
  return v13;
}

void sub_1CBF4C808(_Unwind_Exception *a1)
{
  _BRRestorePersona();
  _Unwind_Resume(a1);
}

id ubiquitousItemDownloadingStatus(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  int v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  char v14;
  char v15;
  void *v16;
  void *v17;
  char v18;
  id *v19;
  id v20;
  void *v22;
  id v23;
  id v24;
  void *v25;
  NSObject *v26;
  void *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  void *v31;
  NSObject *v32;
  int v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  void *v41;
  __int16 v42;
  void *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "session");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "personaIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "isEqualToString:", CFSTR("__defaultPersonaID__")))
  {

  }
  else
  {
    objc_msgSend(v1, "session");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "personaIdentifier");
    v5 = (id)objc_claimAutoreleasedReturnValue();

    if (v5)
    {
      v6 = 0;
      goto LABEL_8;
    }
  }
  if (ubiquitousItemDownloadingStatus___personaOnceToken != -1)
    dispatch_once(&ubiquitousItemDownloadingStatus___personaOnceToken, &__block_literal_global_14);
  v5 = (id)ubiquitousItemDownloadingStatus___personalPersona;
  v6 = 1;
LABEL_8:
  objc_msgSend(MEMORY[0x1E0DC5EE8], "sharedManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "currentPersona");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v37 = 0;
  objc_msgSend(v8, "userPersonaUniqueString");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v9 == v5 || (objc_msgSend(v9, "isEqualToString:", v5) & 1) != 0)
  {
    v11 = 0;
    goto LABEL_11;
  }
  if (voucher_process_can_use_arbitrary_personas())
  {
    v36 = 0;
    v22 = (void *)objc_msgSend(v8, "copyCurrentPersonaContextWithError:", &v36);
    v23 = v36;
    v24 = v37;
    v37 = v22;

    if (v23)
    {
      brc_bread_crumbs();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v26 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, (os_log_type_t)0x90u))
        -[_BRCOperation completedWithResult:error:].cold.1();

    }
    objc_msgSend(v8, "generateAndRestorePersonaContextWithPersonaUniqueString:", v5);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (v11)
    {
      brc_bread_crumbs();
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v28 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v28, (os_log_type_t)0x90u))
      {
        objc_msgSend(v1, "session");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "personaIdentifier");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412802;
        v39 = v30;
        v40 = 2112;
        v41 = v11;
        v42 = 2112;
        v43 = v27;
        _os_log_error_impl(&dword_1CBD43000, v28, (os_log_type_t)0x90u, "[ERROR] Can't adopt persona %@: %@%@", buf, 0x20u);

      }
LABEL_46:

    }
  }
  else
  {
    if (v6 && (objc_msgSend(v8, "isDataSeparatedPersona") & 1) == 0)
    {
      brc_bread_crumbs();
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v28 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
        -[_BRCOperation completedWithResult:error:].cold.3();
      v11 = 0;
      goto LABEL_46;
    }
    brc_bread_crumbs();
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v32 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
      -[_BRCOperation completedWithResult:error:].cold.2();

    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2FE0], 22, 0);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
  }
LABEL_11:
  objc_msgSend(v1, "relpath");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "byIDLocalItem");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v12, "exists");
  if (v13)
    v15 = 1;
  else
    v15 = v14;
  if ((v15 & 1) == 0
    && (objc_msgSend(v1, "faultedLocalItem"), (v16 = (void *)objc_claimAutoreleasedReturnValue()) != 0)
    && (objc_msgSend(v1, "faultedRelpath"),
        v17 = (void *)objc_claimAutoreleasedReturnValue(),
        v18 = objc_msgSend(v17, "exists"),
        v17,
        v16,
        (v18 & 1) != 0))
  {
    v19 = (id *)MEMORY[0x1E0C99B08];
  }
  else
  {
    if (!objc_msgSend(v12, "exists") || !objc_msgSend(v12, "isDocument"))
    {
      v20 = 0;
      goto LABEL_25;
    }
    if (v13 && (objc_msgSend(v13, "changedAtRelativePath:scanPackage:", v12, 0) & 1) == 0)
    {
      v33 = objc_msgSend(v13, "isIdleOrRejected");
      v19 = (id *)MEMORY[0x1E0C99AF0];
      if (v33)
      {
        objc_msgSend(v13, "asDocument");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v34, "desiredVersion");
        v35 = (void *)objc_claimAutoreleasedReturnValue();

        if (v35)
          v19 = (id *)MEMORY[0x1E0C99AF8];
      }
    }
    else
    {
      v19 = (id *)MEMORY[0x1E0C99AF0];
    }
  }
  v20 = *v19;
LABEL_25:

  _BRRestorePersona();
  return v20;
}

void sub_1CBF4CD18(_Unwind_Exception *a1)
{
  _BRRestorePersona();
  _Unwind_Resume(a1);
}

void __isUbiquitousItemForURL_block_invoke()
{
  uint64_t v0;
  void *v1;
  id v2;

  objc_msgSend(MEMORY[0x1E0DC5F00], "personaAttributesForPersonaType:", 0);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "userPersonaUniqueString");
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)isUbiquitousItemForURL___personalPersona;
  isUbiquitousItemForURL___personalPersona = v0;

}

void __ubiquitousItemIsUploading_block_invoke()
{
  uint64_t v0;
  void *v1;
  id v2;

  objc_msgSend(MEMORY[0x1E0DC5F00], "personaAttributesForPersonaType:", 0);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "userPersonaUniqueString");
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)ubiquitousItemIsUploading___personalPersona;
  ubiquitousItemIsUploading___personalPersona = v0;

}

void __ubiquitousItemIsUploaded_block_invoke()
{
  uint64_t v0;
  void *v1;
  id v2;

  objc_msgSend(MEMORY[0x1E0DC5F00], "personaAttributesForPersonaType:", 0);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "userPersonaUniqueString");
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)ubiquitousItemIsUploaded___personalPersona;
  ubiquitousItemIsUploaded___personalPersona = v0;

}

void __ubiquitousItemIsDownloaded_block_invoke()
{
  uint64_t v0;
  void *v1;
  id v2;

  objc_msgSend(MEMORY[0x1E0DC5F00], "personaAttributesForPersonaType:", 0);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "userPersonaUniqueString");
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)ubiquitousItemIsDownloaded___personalPersona;
  ubiquitousItemIsDownloaded___personalPersona = v0;

}

void __ubiquitousItemDownloadingStatus_block_invoke()
{
  uint64_t v0;
  void *v1;
  id v2;

  objc_msgSend(MEMORY[0x1E0DC5F00], "personaAttributesForPersonaType:", 0);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "userPersonaUniqueString");
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)ubiquitousItemDownloadingStatus___personalPersona;
  ubiquitousItemDownloadingStatus___personalPersona = v0;

}

void sub_1CBF4D024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CBF4D104(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBF4D570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__45(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__45(uint64_t a1)
{

}

uint64_t _makeSideFault(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  const char *v10;
  size_t v11;
  void *v12;
  void *v13;
  NSObject *v14;
  uint64_t v15;
  const char *v17;
  int v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  void *v25;
  char __s[765];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = *MEMORY[0x1E0C99A90];
  v7 = a2;
  objc_msgSend(v7, "objectForKeyedSubscript:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB38B0], "dataWithPropertyList:format:options:error:", v7, 200, 0, a3);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v9, "writeToURL:options:error:", v5, 2, a3))
  {
    objc_msgSend(v8, "getCString:maxLength:encoding:", __s, 765, 4);
    v10 = (const char *)objc_msgSend(objc_retainAutorelease(v5), "fileSystemRepresentation");
    v11 = strlen(__s);
    if (!setxattr(v10, "com.apple.icloud.itemName", __s, v11, 0, 1))
    {
      v15 = 1;
      goto LABEL_10;
    }
    objc_msgSend(MEMORY[0x1E0CB35C8], "br_errorFromErrno");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (v12)
    {
      brc_bread_crumbs();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, (os_log_type_t)0x90u))
      {
        v17 = "(passed to caller)";
        v18 = 136315906;
        v19 = "_makeSideFault";
        v20 = 2080;
        if (!a3)
          v17 = "(ignored by caller)";
        v21 = v17;
        v22 = 2112;
        v23 = v12;
        v24 = 2112;
        v25 = v13;
        _os_log_error_impl(&dword_1CBD43000, v14, (os_log_type_t)0x90u, "[ERROR] %s: %s error: %@%@", (uint8_t *)&v18, 0x2Au);
      }

    }
    if (a3)
      *a3 = objc_retainAutorelease(v12);

  }
  v15 = 0;
LABEL_10:

  return v15;
}

void sub_1CBF4DCCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBF4E168(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF4E2E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF4E5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t brc_set_or_remove_xattr(int a1, const char *a2, char *__s)
{
  size_t v6;

  if (__s)
    v6 = strlen(__s) + 1;
  else
    v6 = 0;
  return brc_set_or_remove_xattr_data(a1, a2, __s, v6);
}

uint64_t brc_set_or_remove_xattr_data(int a1, const char *a2, const void *a3, size_t a4)
{
  if (a3)
    return fsetxattr(a1, a2, a3, a4, 0, 0) != 0;
  if (fremovexattr(a1, a2, 0) && *__error() != 93)
    return 0xFFFFFFFFLL;
  return 0;
}

void OUTLINED_FUNCTION_3_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, (os_log_type_t)0x90u, a4, a5, 0x12u);
}

void OUTLINED_FUNCTION_5_1(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, (os_log_type_t)0x90u, a4, &a9, 0x1Cu);
}

int *OUTLINED_FUNCTION_13_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 24) = a1;
  return __error();
}

void sub_1CBF52674(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1CBF56640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__46(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__46(uint64_t a1)
{

}

void sub_1CBF56B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CBF56D58(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBF56E3C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBF574D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBF58338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  _Block_object_dispose(&a34, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__47(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__47(uint64_t a1)
{

}

void sub_1CBF58488(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBF58AFC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBF58C88(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBF59200(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBF593BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBF599F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBF59BAC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBF5B3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF5B758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CBF5BB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBF5CAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void sub_1CBF5CE44(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBF5CEB4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBF5CFC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _brc_ipc_spi(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  void (**v8)(id, id);
  uint64_t v9;
  id v10;
  id v12;

  v7 = a1;
  v8 = a4;
  if (v7)
  {
    if (_brc_ipc_check_logged_status(v7, a2, v8))
    {
      v12 = 0;
      v9 = objc_msgSend(v7, "_hasPrivateIPCEntitlementForSelector:error:", a3, &v12);
      v10 = v12;
      if ((v9 & 1) == 0)
        v8[2](v8, v10);

    }
    else
    {
      v9 = 0;
    }
  }
  else
  {
    v9 = 1;
  }

  return v9;
}

uint64_t _brc_ipc_check_applibraries_access(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  uint64_t v11;
  void *v12;

  v5 = a1;
  v6 = a3;
  if (!v5)
    goto LABEL_11;
  if (!_brc_ipc_check_logged_status(v5, a2, v6))
  {
LABEL_13:
    v11 = 0;
    goto LABEL_14;
  }
  if ((objc_msgSend(v5, "_isAppLibraryProxyEntitled") & 1) == 0)
  {
    objc_msgSend(v5, "entitledAppLibraryIDs");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "count");

    if (!v8 && (objc_msgSend(v5, "isSandboxed") & 1) == 0 && objc_msgSend(v5, "checkTCCAccess"))
    {
      brc_bread_crumbs();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        _brc_ipc_check_applibraries_access_cold_1();

      goto LABEL_11;
    }
    if (objc_msgSend(v5, "cloudEnabledStatus") != 1)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "brc_daemonAccessDisabledError");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      (*((void (**)(id, void *))v6 + 2))(v6, v12);

      goto LABEL_13;
    }
  }
LABEL_11:
  v11 = 1;
LABEL_14:

  return v11;
}

uint64_t _brc_ipc_check_applibrary_read_access(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void (**v9)(id, id);
  uint64_t v10;
  id v11;
  id v13;

  v7 = a1;
  v8 = a3;
  v9 = a4;
  if (v7)
  {
    if (_brc_ipc_check_logged_status(v7, a2, v9))
    {
      v13 = 0;
      v10 = objc_msgSend(v7, "_hasAccessToAppLibraryID:error:", v8, &v13);
      v11 = v13;
      if ((v10 & 1) == 0)
        v9[2](v9, v11);

    }
    else
    {
      v10 = 0;
    }
  }
  else
  {
    v10 = 1;
  }

  return v10;
}

uint64_t _brc_ipc_check_entitlement(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void (**v7)(id, void *);
  uint64_t v8;
  void *v9;
  void *v10;
  NSObject *v11;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  if ((objc_msgSend(v5, "_entitlementBooleanValueForKey:", *MEMORY[0x1E0D10C28]) & 1) != 0
    || (objc_msgSend(v5, "_entitlementBooleanValueForKey:", v6) & 1) != 0)
  {
    v8 = 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "br_errorWithDomain:code:description:", *MEMORY[0x1E0D10B70], 1, CFSTR("%@ entitlement required"), v6);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v7[2](v7, v9);

    brc_bread_crumbs();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, (os_log_type_t)0x90u))
      _brc_ipc_check_entitlement_cold_1();

    v8 = 0;
  }

  return v8;
}

uint64_t _brc_ipc_check_entitlement_and_logged_status(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;

  v7 = a1;
  v8 = a3;
  v9 = a4;
  if (v7)
  {
    if (_brc_ipc_check_logged_status(v7, a2, v9))
      v10 = _brc_ipc_check_entitlement(v7, v8, v9);
    else
      v10 = 0;
  }
  else
  {
    v10 = 1;
  }

  return v10;
}

uint64_t _brc_ipc_check_account_access(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  NSObject *v11;

  v5 = a1;
  v6 = a3;
  if (!v5)
    goto LABEL_6;
  if (!_brc_ipc_check_logged_status(v5, a2, v6))
  {
LABEL_10:
    v8 = 0;
    goto LABEL_11;
  }
  v7 = *MEMORY[0x1E0D10C18];
  if ((objc_msgSend(v5, "_entitlementBooleanValueForKey:", *MEMORY[0x1E0D10C18]) & 1) == 0
    && (objc_msgSend(v5, "_entitlementBooleanValueForKey:", *MEMORY[0x1E0D10C20]) & 1) == 0
    && (objc_msgSend(v5, "_entitlementBooleanValueForKey:", *MEMORY[0x1E0D10C40]) & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "br_errorWithDomain:code:description:", *MEMORY[0x1E0D10B70], 1, CFSTR("%@ entitlement required"), v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v6 + 2))(v6, v9);

    brc_bread_crumbs();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    brc_default_log();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, (os_log_type_t)0x90u))
      _brc_ipc_check_entitlement_cold_1();

    goto LABEL_10;
  }
LABEL_6:
  v8 = 1;
LABEL_11:

  return v8;
}

uint64_t _brc_ipc_check_tcc_access(void *a1, uint64_t a2, void *a3)
{
  if (a1)
    return _brc_ipc_check_logged_status(a1, 1, a3);
  else
    return 1;
}

void sub_1CBF5DDE4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBF5E4AC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBF5E508(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBF5E55C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBF5E5B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBF5E604(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBF5E65C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id _cocoaDomainPermissionError(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v12;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1E0CB35C8];
  v3 = *MEMORY[0x1E0CB28A8];
  if (a1)
    v4 = 257;
  else
    v4 = 513;
  v12 = *MEMORY[0x1E0CB2D50];
  v5 = (void *)MEMORY[0x1E0CB3940];
  if (a1)
    v6 = "read";
  else
    v6 = "write";
  objc_msgSend(a2, "path");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "stringWithFormat:", CFSTR("No permission to %s at \"%@\""), v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v13[0] = v8;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v13, &v12, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "errorWithDomain:code:userInfo:", v3, v4, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_1CBF5EC7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__48(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__48(uint64_t a1)
{

}

void sub_1CBF5EE98(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBF5F06C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBF5F27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBF5FB88(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBF6004C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF608C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF60CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF61094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF6146C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF61878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF61FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF62C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  __brc_leave_section(&a59);
  __brc_leave_section(&a62);
  _Unwind_Resume(a1);
}

void sub_1CBF63210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF63A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  __brc_leave_section(&a42);
  _Unwind_Resume(a1);
}

void sub_1CBF63FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF64548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF64FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  __brc_leave_section(&a25);
  __brc_leave_section(&a34);
  _Unwind_Resume(a1);
}

void sub_1CBF65560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF6592C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF65D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF662F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF66A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF67280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF67598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF67940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF68080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF68484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  __brc_leave_section(&a30);
  _Unwind_Resume(a1);
}

void sub_1CBF68AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF694FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  __brc_leave_section(&a26);
  _Unwind_Resume(a1);
}

void sub_1CBF69B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  __brc_leave_section(&a32);
  _Unwind_Resume(a1);
}

void sub_1CBF6A310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF6A6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  __brc_leave_section(&a28);
  _Unwind_Resume(a1);
}

void sub_1CBF6B53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  __brc_leave_section(&a19);
  __brc_leave_section(&a28);
  __brc_leave_section(&a37);
  _Unwind_Resume(a1);
}

void sub_1CBF6BF8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  __brc_leave_section(&a10);
  __brc_leave_section(&a19);
  __brc_leave_section(&a28);
  _Unwind_Resume(a1);
}

void sub_1CBF6C754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  __brc_leave_section((uint64_t *)va);
  __brc_leave_section((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_1CBF6CF34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;
  uint64_t v34;

  objc_sync_exit(v33);
  __brc_leave_section(&a9);
  _Block_object_dispose((const void *)(v34 - 160), 8);
  _Block_object_dispose(&a33, 8);
  __brc_leave_section((uint64_t *)(v34 - 216));
  _Unwind_Resume(a1);
}

void sub_1CBF6D1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void sub_1CBF6D3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  objc_sync_exit(v9);
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void sub_1CBF6DCB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a66;
  void *v66;
  uint64_t v67;

  objc_sync_exit(v66);
  __brc_leave_section(&a15);
  _Block_object_dispose((const void *)(v67 - 256), 8);
  _Block_object_dispose(&a54, 8);
  _Block_object_dispose((const void *)(v67 - 176), 8);
  __brc_leave_section(&a66);
  _Unwind_Resume(a1);
}

void sub_1CBF6DFF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void sub_1CBF6E1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void sub_1CBF6E3E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  objc_sync_exit(v9);
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void sub_1CBF6F074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a66;
  char a69;

  __brc_leave_section(&a58);
  __brc_leave_section(&a66);
  _Block_object_dispose(&a69, 8);
  _Unwind_Resume(a1);
}

void sub_1CBF6F794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  __brc_leave_section((uint64_t *)va);
  __brc_leave_section((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_1CBF6FC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF70060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF70594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF70954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF70F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  __brc_leave_section(&a32);
  _Unwind_Resume(a1);
}

void sub_1CBF7162C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF719C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  __brc_leave_section(&a28);
  _Unwind_Resume(a1);
}

void sub_1CBF71F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF722F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF7266C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF72AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF7318C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF73584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF73A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF73E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF74224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  __brc_leave_section(&a28);
  _Unwind_Resume(a1);
}

void sub_1CBF74A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  __brc_leave_section(&a26);
  _Unwind_Resume(a1);
}

void sub_1CBF750E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF757A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  __brc_leave_section(&a30);
  _Unwind_Resume(a1);
}

void sub_1CBF763FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  __brc_leave_section((uint64_t *)(v1 - 216));
  _Unwind_Resume(a1);
}

void sub_1CBF76E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose(&a61, 8);
  _Unwind_Resume(a1);
}

void sub_1CBF77894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF77C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF7809C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF786E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF78C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF79000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF795C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  __brc_leave_section((uint64_t *)(v1 - 200));
  _Unwind_Resume(a1);
}

void sub_1CBF7A7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  __brc_leave_section(&a32);
  _Unwind_Resume(a1);
}

void sub_1CBF7AAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBF7B078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  __brc_leave_section(&a25);
  __brc_leave_section(&a34);
  _Unwind_Resume(a1);
}

void sub_1CBF7E804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF7ED8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF7F338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF7FB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF801A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  __brc_leave_section(&a21);
  __brc_leave_section(&a30);
  _Unwind_Resume(a1);
}

void sub_1CBF808B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1CBF81D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  __brc_leave_section(&a27);
  _Unwind_Resume(a1);
}

void sub_1CBF8226C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF827E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF82E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF83B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF84D10(_Unwind_Exception *a1)
{
  uint64_t v1;

  __brc_leave_section((uint64_t *)(v1 - 200));
  _Unwind_Resume(a1);
}

void sub_1CBF85A20(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  __brc_leave_section((uint64_t *)(v1 - 200));
  _Unwind_Resume(a1);
}

void sub_1CBF86108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF86C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF87618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF87F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBF884AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF88E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  __brc_leave_section(&a26);
  _Unwind_Resume(a1);
}

void sub_1CBF8956C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  __brc_leave_section(&a26);
  _Unwind_Resume(a1);
}

void sub_1CBF89B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF8A230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  __brc_leave_section(&a23);
  __brc_leave_section(&a32);
  _Unwind_Resume(a1);
}

void sub_1CBF8AF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF8B458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  __brc_leave_section(&a16);
  __brc_leave_section(&a26);
  _Unwind_Resume(a1);
}

void sub_1CBF8BB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF8BFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBF8C720(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  __brc_leave_section((uint64_t *)(v1 - 232));
  _Unwind_Resume(a1);
}

void sub_1CBF8CEC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF8D704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  uint64_t v40;

  _Block_object_dispose((const void *)(v40 - 176), 8);
  __brc_leave_section(&a40);
  _Unwind_Resume(a1);
}

void sub_1CBF8DCC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF8E094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF8E4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF8E874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF8EC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF8F6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a70;
  uint64_t v70;

  _Block_object_dispose((const void *)(v70 - 176), 8);
  __brc_leave_section(&a61);
  __brc_leave_section(&a70);
  _Unwind_Resume(a1);
}

void sub_1CBF8FB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void __dispatch_async_with_logs_block_invoke_23(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  const char *label;
  __int128 v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *(_OWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  brc_bread_crumbs();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    label = dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32));
    *(_DWORD *)buf = 134218498;
    v8 = v5;
    v9 = 2080;
    v10 = label;
    v11 = 2112;
    v12 = v2;
    _os_log_debug_impl(&dword_1CBD43000, v3, OS_LOG_TYPE_DEBUG, "[DEBUG] ┳%llx continuing on %s%@", buf, 0x20u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  __brc_leave_section((uint64_t *)&v5);
}

void sub_1CBF8FC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void sub_1CBF90574(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF90D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF90FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___allowedClassesForErrors_block_invoke_0()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v0 = objc_alloc(MEMORY[0x1E0C99E60]);
  v1 = objc_opt_class();
  v2 = objc_opt_class();
  v3 = objc_opt_class();
  v4 = objc_opt_class();
  v5 = objc_opt_class();
  v6 = objc_opt_class();
  v7 = objc_opt_class();
  v8 = objc_opt_class();
  v9 = objc_msgSend(v0, "initWithObjects:", v1, v2, v3, v4, v5, v6, v7, v8, objc_opt_class(), 0);
  v10 = (void *)_allowedClassesForErrors_allowedClasses_0;
  _allowedClassesForErrors_allowedClasses_0 = v9;

}

void sub_1CBF91FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CBF92344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CBF9382C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBF93A3C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBF93C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CBF94120(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBF94228(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBF94284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1CBF942E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1CBF943D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBF94E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location)
{
  id *v11;
  uint64_t v12;

  objc_destroyWeak(v11);
  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v12 - 128));
  _Unwind_Resume(a1);
}

void sub_1CBF95028(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF95214(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBF955E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBF959B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1CBF96434(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBF9671C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1CBF96A30(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBF96CD4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBF96E84(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBF96F08(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBF96F5C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBF96FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1CBF970B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void dispatch_async_with_logs_14(void *a1, void *a2)
{
  NSObject *v3;
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  const char *label;
  _QWORD v12[4];
  NSObject *v13;
  id v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _BYTE buf[24];
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = (void *)MEMORY[0x1D17A6BE8]();
  v17 = 0uLL;
  v18 = 0;
  __brc_create_section(0, (uint64_t)"dispatch_async_with_logs", 262, &v17);
  brc_bread_crumbs();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v10 = v17;
    label = dispatch_queue_get_label(v3);
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = v10;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = label;
    *(_WORD *)&buf[22] = 2112;
    v20 = v6;
    _os_log_debug_impl(&dword_1CBD43000, v7, OS_LOG_TYPE_DEBUG, "[DEBUG] ┣%llx dispatching to %s%@", buf, 0x20u);
  }

  *(_QWORD *)&buf[16] = v18;
  *(_OWORD *)buf = v17;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __dispatch_async_with_logs_block_invoke_24;
  v12[3] = &unk_1E875D578;
  v15 = v17;
  v16 = v18;
  v8 = v3;
  v13 = v8;
  v9 = v4;
  v14 = v9;
  dispatch_async(v8, v12);

  objc_autoreleasePoolPop(v5);
}

void sub_1CBF97568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CBF97784(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void __dispatch_async_with_logs_block_invoke_24(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  const char *label;
  __int128 v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *(_OWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  brc_bread_crumbs();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    label = dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32));
    *(_DWORD *)buf = 134218498;
    v8 = v5;
    v9 = 2080;
    v10 = label;
    v11 = 2112;
    v12 = v2;
    _os_log_debug_impl(&dword_1CBD43000, v3, OS_LOG_TYPE_DEBUG, "[DEBUG] ┳%llx continuing on %s%@", buf, 0x20u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  __brc_leave_section((uint64_t *)&v5);
}

void sub_1CBF97BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_6_3(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0x12u);
}

uint64_t AppTelemetryFPFSMigrationNonMigratedItemInvestigationReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  char v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  char v84;
  unsigned int v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  char v89;
  unsigned int v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  char v94;
  unsigned int v95;
  uint64_t v96;
  unint64_t v97;
  char v98;
  char v99;
  unsigned int v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  char v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  char v109;
  unsigned int v110;
  uint64_t v111;
  unint64_t v112;
  char v113;
  char v114;
  unsigned int v115;
  uint64_t v116;
  unint64_t v117;
  char v118;
  char v119;
  unsigned int v120;
  uint64_t v121;
  unint64_t v122;
  char v123;
  char v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  char v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char v135;
  char v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  char v141;
  char v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  char v147;
  char v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  char v153;
  char v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  char v159;
  char v160;
  unsigned int v161;
  uint64_t v162;
  unint64_t v163;
  char v164;
  char v165;
  unsigned int v166;
  uint64_t v167;
  unint64_t v168;
  char v169;
  char v170;
  unsigned int v171;
  uint64_t v172;
  unint64_t v173;
  char v174;
  char v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  char v180;
  char v181;
  unsigned int v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  char v186;
  char v187;
  unsigned int v188;
  uint64_t v189;
  unint64_t v190;
  char v191;
  char v192;
  unsigned int v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  char v197;
  char v198;
  unsigned int v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  char v203;
  char v204;
  unsigned int v205;
  uint64_t v206;
  unint64_t v207;
  char v208;
  char v209;
  unsigned int v210;
  uint64_t v211;
  unint64_t v212;
  char v213;
  char v214;
  unsigned int v215;
  uint64_t v216;
  unint64_t v217;
  char v218;
  char v219;
  unsigned int v220;
  uint64_t v221;
  unint64_t v222;
  char v223;
  char v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  char v229;
  char v230;
  unsigned int v231;
  uint64_t v232;
  unint64_t v233;
  char v234;
  char v235;
  unsigned int v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  char v240;
  char v241;
  unsigned int v242;
  uint64_t v243;
  unint64_t v244;
  char v245;
  char v246;
  unsigned int v247;
  uint64_t v248;
  unint64_t v249;
  char v250;
  char v251;
  unsigned int v252;
  uint64_t v253;
  unint64_t v254;
  char v255;
  char v256;
  unsigned int v257;
  uint64_t v258;
  unint64_t v259;
  char v260;
  char v261;
  unsigned int v262;
  uint64_t v263;
  unint64_t v264;
  char v265;
  char v266;
  unsigned int v267;
  uint64_t v268;
  unint64_t v269;
  char v270;
  char v271;
  unsigned int v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  char v276;
  char v277;
  unsigned int v278;
  uint64_t v279;
  unint64_t v280;
  char v281;
  char v282;
  unsigned int v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  char v287;
  char v288;
  unsigned int v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  char v293;
  char v294;
  unsigned int v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  char v299;
  char v300;
  unsigned int v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  char v305;
  char v306;
  unsigned int v307;
  uint64_t v308;
  unint64_t v309;
  char v310;
  char v311;
  unsigned int v312;
  uint64_t v313;
  unint64_t v314;
  char v315;
  char v316;
  unsigned int v317;
  uint64_t v318;
  uint64_t v319;
  unint64_t v320;
  char v321;
  char v322;
  unsigned int v323;
  uint64_t v324;
  uint64_t v325;
  unint64_t v326;
  char v327;
  char v328;
  unsigned int v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  char v333;
  char v334;
  unsigned int v335;
  uint64_t v336;
  unint64_t v337;
  char v338;
  char v339;
  unsigned int v340;
  uint64_t v341;
  unint64_t v342;
  char v343;
  char v344;
  unsigned int v345;
  uint64_t v346;
  uint64_t v347;
  unint64_t v348;
  char v349;
  char v350;
  unsigned int v351;
  uint64_t v352;
  unint64_t v353;
  char v354;
  char v355;
  unsigned int v356;
  uint64_t v357;
  unint64_t v358;
  char v359;
  char v360;
  unsigned int v361;
  uint64_t v362;
  unint64_t v363;
  char v364;
  char v365;
  unsigned int v366;
  uint64_t v367;
  unint64_t v368;
  char v369;
  char v370;
  unsigned int v371;
  uint64_t v372;
  unint64_t v373;
  char v374;
  char v375;
  unsigned int v376;
  uint64_t v377;
  unint64_t v378;
  char v379;
  void *v380;
  char v381;
  unsigned int v382;
  uint64_t v383;
  unint64_t v384;
  char v385;
  char v386;
  unsigned int v387;
  uint64_t v388;
  unint64_t v389;
  char v390;
  char v391;
  unsigned int v392;
  uint64_t v393;
  unint64_t v394;
  char v395;
  char v396;
  unsigned int v397;
  uint64_t v398;
  unint64_t v399;
  char v400;
  char v401;
  unsigned int v402;
  uint64_t v403;
  uint64_t v404;
  unint64_t v405;
  char v406;
  char v407;
  unsigned int v408;
  uint64_t v409;
  unint64_t v410;
  char v411;
  char v412;
  unsigned int v413;
  uint64_t v414;
  unint64_t v415;
  char v416;
  char v417;
  unsigned int v418;
  uint64_t v419;
  unint64_t v420;
  char v421;
  char v422;
  unsigned int v423;
  uint64_t v424;
  unint64_t v425;
  char v426;
  uint64_t v427;
  uint64_t v428;
  BOOL v429;
  uint64_t v430;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_QWORD *)(a1 + 452) |= 0x2000000uLL;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_555;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_557;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_555:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_557:
          v427 = 208;
          goto LABEL_856;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_QWORD *)(a1 + 452) |= 0x80000000000uLL;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_561;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_561:
          v428 = 384;
          goto LABEL_614;
        case 3u:
          v30 = 0;
          v31 = 0;
          v26 = 0;
          *(_QWORD *)(a1 + 452) |= 0x40000000000uLL;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_565;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_565:
          v428 = 340;
          goto LABEL_614;
        case 4u:
          v35 = 0;
          v36 = 0;
          v37 = 0;
          *(_QWORD *)(a1 + 452) |= 0x800000000000000uLL;
          while (2)
          {
            v38 = *v3;
            v39 = *(_QWORD *)(a2 + v38);
            if (v39 == -1 || v39 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v40 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v39);
              *(_QWORD *)(a2 + v38) = v39 + 1;
              v37 |= (unint64_t)(v40 & 0x7F) << v35;
              if (v40 < 0)
              {
                v35 += 7;
                v14 = v36++ >= 9;
                if (v14)
                {
                  v37 = 0;
                  goto LABEL_569;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v37 = 0;
LABEL_569:
          v429 = v37 != 0;
          v430 = 433;
          goto LABEL_839;
        case 5u:
          v41 = 0;
          v42 = 0;
          v43 = 0;
          *(_QWORD *)(a1 + 452) |= 0x1000000000000000uLL;
          while (2)
          {
            v44 = *v3;
            v45 = *(_QWORD *)(a2 + v44);
            if (v45 == -1 || v45 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v46 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v45);
              *(_QWORD *)(a2 + v44) = v45 + 1;
              v43 |= (unint64_t)(v46 & 0x7F) << v41;
              if (v46 < 0)
              {
                v41 += 7;
                v14 = v42++ >= 9;
                if (v14)
                {
                  v43 = 0;
                  goto LABEL_573;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v43 = 0;
LABEL_573:
          v429 = v43 != 0;
          v430 = 434;
          goto LABEL_839;
        case 6u:
          v47 = 0;
          v48 = 0;
          v26 = 0;
          *(_QWORD *)(a1 + 452) |= 0x200000000000uLL;
          while (2)
          {
            v49 = *v3;
            v50 = *(_QWORD *)(a2 + v49);
            if (v50 == -1 || v50 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v51 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v50);
              *(_QWORD *)(a2 + v49) = v50 + 1;
              v26 |= (unint64_t)(v51 & 0x7F) << v47;
              if (v51 < 0)
              {
                v47 += 7;
                v14 = v48++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_577;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_577:
          v428 = 416;
          goto LABEL_614;
        case 7u:
          v52 = 0;
          v53 = 0;
          v54 = 0;
          *(_QWORD *)(a1 + 452) |= 0x100000000000000uLL;
          while (2)
          {
            v55 = *v3;
            v56 = *(_QWORD *)(a2 + v55);
            if (v56 == -1 || v56 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v57 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v56);
              *(_QWORD *)(a2 + v55) = v56 + 1;
              v54 |= (unint64_t)(v57 & 0x7F) << v52;
              if (v57 < 0)
              {
                v52 += 7;
                v14 = v53++ >= 9;
                if (v14)
                {
                  v54 = 0;
                  goto LABEL_581;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v54 = 0;
LABEL_581:
          v429 = v54 != 0;
          v430 = 430;
          goto LABEL_839;
        case 8u:
          v58 = 0;
          v59 = 0;
          v60 = 0;
          *(_QWORD *)(a1 + 452) |= 0x8000000000000000;
          while (2)
          {
            v61 = *v3;
            v62 = *(_QWORD *)(a2 + v61);
            if (v62 == -1 || v62 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v63 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v62);
              *(_QWORD *)(a2 + v61) = v62 + 1;
              v60 |= (unint64_t)(v63 & 0x7F) << v58;
              if (v63 < 0)
              {
                v58 += 7;
                v14 = v59++ >= 9;
                if (v14)
                {
                  v60 = 0;
                  goto LABEL_585;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v60 = 0;
LABEL_585:
          v429 = v60 != 0;
          v430 = 437;
          goto LABEL_839;
        case 9u:
          v64 = 0;
          v65 = 0;
          v66 = 0;
          *(_QWORD *)(a1 + 452) |= 0x4000000000000000uLL;
          while (2)
          {
            v67 = *v3;
            v68 = *(_QWORD *)(a2 + v67);
            if (v68 == -1 || v68 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v69 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v68);
              *(_QWORD *)(a2 + v67) = v68 + 1;
              v66 |= (unint64_t)(v69 & 0x7F) << v64;
              if (v69 < 0)
              {
                v64 += 7;
                v14 = v65++ >= 9;
                if (v14)
                {
                  v66 = 0;
                  goto LABEL_589;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v66 = 0;
LABEL_589:
          v429 = v66 != 0;
          v430 = 436;
          goto LABEL_839;
        case 0xAu:
          PBReaderReadString();
          v70 = objc_claimAutoreleasedReturnValue();
          v71 = 408;
          goto LABEL_490;
        case 0xBu:
          v72 = 0;
          v73 = 0;
          v74 = 0;
          *(_QWORD *)(a1 + 452) |= 0x200000000000000uLL;
          while (2)
          {
            v75 = *v3;
            v76 = *(_QWORD *)(a2 + v75);
            if (v76 == -1 || v76 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v77 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v76);
              *(_QWORD *)(a2 + v75) = v76 + 1;
              v74 |= (unint64_t)(v77 & 0x7F) << v72;
              if (v77 < 0)
              {
                v72 += 7;
                v14 = v73++ >= 9;
                if (v14)
                {
                  v74 = 0;
                  goto LABEL_593;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v74 = 0;
LABEL_593:
          v429 = v74 != 0;
          v430 = 431;
          goto LABEL_839;
        case 0xCu:
          v78 = 0;
          v79 = 0;
          v80 = 0;
          *(_WORD *)(a1 + 460) |= 1u;
          while (2)
          {
            v81 = *v3;
            v82 = *(_QWORD *)(a2 + v81);
            if (v82 == -1 || v82 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v83 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v82);
              *(_QWORD *)(a2 + v81) = v82 + 1;
              v80 |= (unint64_t)(v83 & 0x7F) << v78;
              if (v83 < 0)
              {
                v78 += 7;
                v14 = v79++ >= 9;
                if (v14)
                {
                  v80 = 0;
                  goto LABEL_597;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v80 = 0;
LABEL_597:
          v429 = v80 != 0;
          v430 = 438;
          goto LABEL_839;
        case 0xDu:
          v84 = 0;
          v85 = 0;
          v26 = 0;
          *(_QWORD *)(a1 + 452) |= 0x20000000000uLL;
          while (2)
          {
            v86 = *v3;
            v87 = *(_QWORD *)(a2 + v86);
            if (v87 == -1 || v87 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v88 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v87);
              *(_QWORD *)(a2 + v86) = v87 + 1;
              v26 |= (unint64_t)(v88 & 0x7F) << v84;
              if (v88 < 0)
              {
                v84 += 7;
                v14 = v85++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_601;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_601:
          v428 = 336;
          goto LABEL_614;
        case 0xEu:
          v89 = 0;
          v90 = 0;
          v19 = 0;
          *(_QWORD *)(a1 + 452) |= 0x100000000uLL;
          while (2)
          {
            v91 = *v3;
            v92 = *(_QWORD *)(a2 + v91);
            if (v92 == -1 || v92 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v93 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v92);
              *(_QWORD *)(a2 + v91) = v92 + 1;
              v19 |= (unint64_t)(v93 & 0x7F) << v89;
              if (v93 < 0)
              {
                v89 += 7;
                v14 = v90++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_605;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_605:
          v427 = 264;
          goto LABEL_856;
        case 0xFu:
          v94 = 0;
          v95 = 0;
          v19 = 0;
          *(_QWORD *)(a1 + 452) |= 0x20uLL;
          while (2)
          {
            v96 = *v3;
            v97 = *(_QWORD *)(a2 + v96);
            if (v97 == -1 || v97 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v98 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v97);
              *(_QWORD *)(a2 + v96) = v97 + 1;
              v19 |= (unint64_t)(v98 & 0x7F) << v94;
              if (v98 < 0)
              {
                v94 += 7;
                v14 = v95++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_609;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_609:
          v427 = 48;
          goto LABEL_856;
        case 0x10u:
          v99 = 0;
          v100 = 0;
          v26 = 0;
          *(_QWORD *)(a1 + 452) |= 0x100000000000uLL;
          while (2)
          {
            v101 = *v3;
            v102 = *(_QWORD *)(a2 + v101);
            if (v102 == -1 || v102 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v103 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v102);
              *(_QWORD *)(a2 + v101) = v102 + 1;
              v26 |= (unint64_t)(v103 & 0x7F) << v99;
              if (v103 < 0)
              {
                v99 += 7;
                v14 = v100++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_613;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_613:
          v428 = 400;
LABEL_614:
          *(_DWORD *)(a1 + v428) = v26;
          continue;
        case 0x11u:
          v104 = 0;
          v105 = 0;
          v19 = 0;
          *(_QWORD *)(a1 + 452) |= 0x10000000uLL;
          while (2)
          {
            v106 = *v3;
            v107 = *(_QWORD *)(a2 + v106);
            if (v107 == -1 || v107 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v108 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v107);
              *(_QWORD *)(a2 + v106) = v107 + 1;
              v19 |= (unint64_t)(v108 & 0x7F) << v104;
              if (v108 < 0)
              {
                v104 += 7;
                v14 = v105++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_618;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_618:
          v427 = 232;
          goto LABEL_856;
        case 0x12u:
          v109 = 0;
          v110 = 0;
          v19 = 0;
          *(_QWORD *)(a1 + 452) |= 0x200000uLL;
          while (2)
          {
            v111 = *v3;
            v112 = *(_QWORD *)(a2 + v111);
            if (v112 == -1 || v112 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v113 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v112);
              *(_QWORD *)(a2 + v111) = v112 + 1;
              v19 |= (unint64_t)(v113 & 0x7F) << v109;
              if (v113 < 0)
              {
                v109 += 7;
                v14 = v110++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_622;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_622:
          v427 = 176;
          goto LABEL_856;
        case 0x13u:
          v114 = 0;
          v115 = 0;
          v19 = 0;
          *(_QWORD *)(a1 + 452) |= 0x400000000uLL;
          while (2)
          {
            v116 = *v3;
            v117 = *(_QWORD *)(a2 + v116);
            if (v117 == -1 || v117 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v118 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v117);
              *(_QWORD *)(a2 + v116) = v117 + 1;
              v19 |= (unint64_t)(v118 & 0x7F) << v114;
              if (v118 < 0)
              {
                v114 += 7;
                v14 = v115++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_626;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_626:
          v427 = 280;
          goto LABEL_856;
        case 0x14u:
          v119 = 0;
          v120 = 0;
          v19 = 0;
          *(_QWORD *)(a1 + 452) |= 0x200000000uLL;
          while (2)
          {
            v121 = *v3;
            v122 = *(_QWORD *)(a2 + v121);
            if (v122 == -1 || v122 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v123 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v122);
              *(_QWORD *)(a2 + v121) = v122 + 1;
              v19 |= (unint64_t)(v123 & 0x7F) << v119;
              if (v123 < 0)
              {
                v119 += 7;
                v14 = v120++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_630;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_630:
          v427 = 272;
          goto LABEL_856;
        case 0x15u:
          v124 = 0;
          v125 = 0;
          v126 = 0;
          *(_QWORD *)(a1 + 452) |= 0x40000000000000uLL;
          while (2)
          {
            v127 = *v3;
            v128 = *(_QWORD *)(a2 + v127);
            if (v128 == -1 || v128 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v129 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v128);
              *(_QWORD *)(a2 + v127) = v128 + 1;
              v126 |= (unint64_t)(v129 & 0x7F) << v124;
              if (v129 < 0)
              {
                v124 += 7;
                v14 = v125++ >= 9;
                if (v14)
                {
                  v126 = 0;
                  goto LABEL_634;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v126 = 0;
LABEL_634:
          v429 = v126 != 0;
          v430 = 428;
          goto LABEL_839;
        case 0x16u:
          v130 = 0;
          v131 = 0;
          v132 = 0;
          *(_WORD *)(a1 + 460) |= 0x20u;
          while (2)
          {
            v133 = *v3;
            v134 = *(_QWORD *)(a2 + v133);
            if (v134 == -1 || v134 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v135 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v134);
              *(_QWORD *)(a2 + v133) = v134 + 1;
              v132 |= (unint64_t)(v135 & 0x7F) << v130;
              if (v135 < 0)
              {
                v130 += 7;
                v14 = v131++ >= 9;
                if (v14)
                {
                  v132 = 0;
                  goto LABEL_638;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v132 = 0;
LABEL_638:
          v429 = v132 != 0;
          v430 = 443;
          goto LABEL_839;
        case 0x17u:
          v136 = 0;
          v137 = 0;
          v138 = 0;
          *(_QWORD *)(a1 + 452) |= 0x2000000000000000uLL;
          while (2)
          {
            v139 = *v3;
            v140 = *(_QWORD *)(a2 + v139);
            if (v140 == -1 || v140 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v141 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v140);
              *(_QWORD *)(a2 + v139) = v140 + 1;
              v138 |= (unint64_t)(v141 & 0x7F) << v136;
              if (v141 < 0)
              {
                v136 += 7;
                v14 = v137++ >= 9;
                if (v14)
                {
                  v138 = 0;
                  goto LABEL_642;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v138 = 0;
LABEL_642:
          v429 = v138 != 0;
          v430 = 435;
          goto LABEL_839;
        case 0x18u:
          v142 = 0;
          v143 = 0;
          v144 = 0;
          *(_WORD *)(a1 + 460) |= 4u;
          while (2)
          {
            v145 = *v3;
            v146 = *(_QWORD *)(a2 + v145);
            if (v146 == -1 || v146 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v147 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v146);
              *(_QWORD *)(a2 + v145) = v146 + 1;
              v144 |= (unint64_t)(v147 & 0x7F) << v142;
              if (v147 < 0)
              {
                v142 += 7;
                v14 = v143++ >= 9;
                if (v14)
                {
                  v144 = 0;
                  goto LABEL_646;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v144 = 0;
LABEL_646:
          v429 = v144 != 0;
          v430 = 440;
          goto LABEL_839;
        case 0x19u:
          v148 = 0;
          v149 = 0;
          v150 = 0;
          *(_WORD *)(a1 + 460) |= 2u;
          while (2)
          {
            v151 = *v3;
            v152 = *(_QWORD *)(a2 + v151);
            if (v152 == -1 || v152 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v153 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v152);
              *(_QWORD *)(a2 + v151) = v152 + 1;
              v150 |= (unint64_t)(v153 & 0x7F) << v148;
              if (v153 < 0)
              {
                v148 += 7;
                v14 = v149++ >= 9;
                if (v14)
                {
                  v150 = 0;
                  goto LABEL_650;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v150 = 0;
LABEL_650:
          v429 = v150 != 0;
          v430 = 439;
          goto LABEL_839;
        case 0x1Au:
          v154 = 0;
          v155 = 0;
          v156 = 0;
          *(_QWORD *)(a1 + 452) |= 0x400000000000000uLL;
          while (2)
          {
            v157 = *v3;
            v158 = *(_QWORD *)(a2 + v157);
            if (v158 == -1 || v158 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v159 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v158);
              *(_QWORD *)(a2 + v157) = v158 + 1;
              v156 |= (unint64_t)(v159 & 0x7F) << v154;
              if (v159 < 0)
              {
                v154 += 7;
                v14 = v155++ >= 9;
                if (v14)
                {
                  v156 = 0;
                  goto LABEL_654;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v156 = 0;
LABEL_654:
          v429 = v156 != 0;
          v430 = 432;
          goto LABEL_839;
        case 0x1Bu:
          PBReaderReadString();
          v70 = objc_claimAutoreleasedReturnValue();
          v71 = 376;
          goto LABEL_490;
        case 0x1Cu:
          v160 = 0;
          v161 = 0;
          v19 = 0;
          *(_QWORD *)(a1 + 452) |= 0x1000000uLL;
          while (2)
          {
            v162 = *v3;
            v163 = *(_QWORD *)(a2 + v162);
            if (v163 == -1 || v163 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v164 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v163);
              *(_QWORD *)(a2 + v162) = v163 + 1;
              v19 |= (unint64_t)(v164 & 0x7F) << v160;
              if (v164 < 0)
              {
                v160 += 7;
                v14 = v161++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_658;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_658:
          v427 = 200;
          goto LABEL_856;
        case 0x1Du:
          v165 = 0;
          v166 = 0;
          v19 = 0;
          *(_QWORD *)(a1 + 452) |= 0x400000uLL;
          while (2)
          {
            v167 = *v3;
            v168 = *(_QWORD *)(a2 + v167);
            if (v168 == -1 || v168 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v169 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v168);
              *(_QWORD *)(a2 + v167) = v168 + 1;
              v19 |= (unint64_t)(v169 & 0x7F) << v165;
              if (v169 < 0)
              {
                v165 += 7;
                v14 = v166++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_662;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_662:
          v427 = 184;
          goto LABEL_856;
        case 0x1Eu:
          v170 = 0;
          v171 = 0;
          v19 = 0;
          *(_QWORD *)(a1 + 452) |= 0x8000uLL;
          while (2)
          {
            v172 = *v3;
            v173 = *(_QWORD *)(a2 + v172);
            if (v173 == -1 || v173 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v174 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v173);
              *(_QWORD *)(a2 + v172) = v173 + 1;
              v19 |= (unint64_t)(v174 & 0x7F) << v170;
              if (v174 < 0)
              {
                v170 += 7;
                v14 = v171++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_666;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_666:
          v427 = 128;
          goto LABEL_856;
        case 0x1Fu:
          v175 = 0;
          v176 = 0;
          v177 = 0;
          *(_QWORD *)(a1 + 452) |= 0x80000000000000uLL;
          while (2)
          {
            v178 = *v3;
            v179 = *(_QWORD *)(a2 + v178);
            if (v179 == -1 || v179 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v180 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v179);
              *(_QWORD *)(a2 + v178) = v179 + 1;
              v177 |= (unint64_t)(v180 & 0x7F) << v175;
              if (v180 < 0)
              {
                v175 += 7;
                v14 = v176++ >= 9;
                if (v14)
                {
                  v177 = 0;
                  goto LABEL_670;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v177 = 0;
LABEL_670:
          v429 = v177 != 0;
          v430 = 429;
          goto LABEL_839;
        case 0x20u:
          v181 = 0;
          v182 = 0;
          v183 = 0;
          *(_QWORD *)(a1 + 452) |= 0x10000000000000uLL;
          while (2)
          {
            v184 = *v3;
            v185 = *(_QWORD *)(a2 + v184);
            if (v185 == -1 || v185 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v186 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v185);
              *(_QWORD *)(a2 + v184) = v185 + 1;
              v183 |= (unint64_t)(v186 & 0x7F) << v181;
              if (v186 < 0)
              {
                v181 += 7;
                v14 = v182++ >= 9;
                if (v14)
                {
                  v183 = 0;
                  goto LABEL_674;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v183 = 0;
LABEL_674:
          v429 = v183 != 0;
          v430 = 426;
          goto LABEL_839;
        case 0x21u:
          PBReaderReadString();
          v70 = objc_claimAutoreleasedReturnValue();
          v71 = 368;
          goto LABEL_490;
        case 0x22u:
          v187 = 0;
          v188 = 0;
          v19 = 0;
          *(_QWORD *)(a1 + 452) |= 0x8000000uLL;
          while (2)
          {
            v189 = *v3;
            v190 = *(_QWORD *)(a2 + v189);
            if (v190 == -1 || v190 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v191 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v190);
              *(_QWORD *)(a2 + v189) = v190 + 1;
              v19 |= (unint64_t)(v191 & 0x7F) << v187;
              if (v191 < 0)
              {
                v187 += 7;
                v14 = v188++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_678;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_678:
          v427 = 224;
          goto LABEL_856;
        case 0x23u:
          v192 = 0;
          v193 = 0;
          v194 = 0;
          *(_WORD *)(a1 + 460) |= 0x200u;
          while (2)
          {
            v195 = *v3;
            v196 = *(_QWORD *)(a2 + v195);
            if (v196 == -1 || v196 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v197 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v196);
              *(_QWORD *)(a2 + v195) = v196 + 1;
              v194 |= (unint64_t)(v197 & 0x7F) << v192;
              if (v197 < 0)
              {
                v192 += 7;
                v14 = v193++ >= 9;
                if (v14)
                {
                  v194 = 0;
                  goto LABEL_682;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v194 = 0;
LABEL_682:
          v429 = v194 != 0;
          v430 = 447;
          goto LABEL_839;
        case 0x24u:
          v198 = 0;
          v199 = 0;
          v200 = 0;
          *(_WORD *)(a1 + 460) |= 0x400u;
          while (2)
          {
            v201 = *v3;
            v202 = *(_QWORD *)(a2 + v201);
            if (v202 == -1 || v202 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v203 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v202);
              *(_QWORD *)(a2 + v201) = v202 + 1;
              v200 |= (unint64_t)(v203 & 0x7F) << v198;
              if (v203 < 0)
              {
                v198 += 7;
                v14 = v199++ >= 9;
                if (v14)
                {
                  v200 = 0;
                  goto LABEL_686;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v200 = 0;
LABEL_686:
          v429 = v200 != 0;
          v430 = 448;
          goto LABEL_839;
        case 0x25u:
          PBReaderReadString();
          v70 = objc_claimAutoreleasedReturnValue();
          v71 = 344;
          goto LABEL_490;
        case 0x26u:
          v204 = 0;
          v205 = 0;
          v19 = 0;
          *(_QWORD *)(a1 + 452) |= 0x100uLL;
          while (2)
          {
            v206 = *v3;
            v207 = *(_QWORD *)(a2 + v206);
            if (v207 == -1 || v207 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v208 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v207);
              *(_QWORD *)(a2 + v206) = v207 + 1;
              v19 |= (unint64_t)(v208 & 0x7F) << v204;
              if (v208 < 0)
              {
                v204 += 7;
                v14 = v205++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_690;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_690:
          v427 = 72;
          goto LABEL_856;
        case 0x27u:
          v209 = 0;
          v210 = 0;
          v19 = 0;
          *(_QWORD *)(a1 + 452) |= 0x40uLL;
          while (2)
          {
            v211 = *v3;
            v212 = *(_QWORD *)(a2 + v211);
            if (v212 == -1 || v212 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v213 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v212);
              *(_QWORD *)(a2 + v211) = v212 + 1;
              v19 |= (unint64_t)(v213 & 0x7F) << v209;
              if (v213 < 0)
              {
                v209 += 7;
                v14 = v210++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_694;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_694:
          v427 = 56;
          goto LABEL_856;
        case 0x28u:
          v214 = 0;
          v215 = 0;
          v19 = 0;
          *(_QWORD *)(a1 + 452) |= 0x20000uLL;
          while (2)
          {
            v216 = *v3;
            v217 = *(_QWORD *)(a2 + v216);
            if (v217 == -1 || v217 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v218 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v217);
              *(_QWORD *)(a2 + v216) = v217 + 1;
              v19 |= (unint64_t)(v218 & 0x7F) << v214;
              if (v218 < 0)
              {
                v214 += 7;
                v14 = v215++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_698;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_698:
          v427 = 144;
          goto LABEL_856;
        case 0x29u:
          v219 = 0;
          v220 = 0;
          v19 = 0;
          *(_QWORD *)(a1 + 452) |= 0x10000uLL;
          while (2)
          {
            v221 = *v3;
            v222 = *(_QWORD *)(a2 + v221);
            if (v222 == -1 || v222 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v223 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v222);
              *(_QWORD *)(a2 + v221) = v222 + 1;
              v19 |= (unint64_t)(v223 & 0x7F) << v219;
              if (v223 < 0)
              {
                v219 += 7;
                v14 = v220++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_702;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_702:
          v427 = 136;
          goto LABEL_856;
        case 0x2Au:
          v224 = 0;
          v225 = 0;
          v226 = 0;
          *(_QWORD *)(a1 + 452) |= 0x2000000000000uLL;
          while (2)
          {
            v227 = *v3;
            v228 = *(_QWORD *)(a2 + v227);
            if (v228 == -1 || v228 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v229 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v228);
              *(_QWORD *)(a2 + v227) = v228 + 1;
              v226 |= (unint64_t)(v229 & 0x7F) << v224;
              if (v229 < 0)
              {
                v224 += 7;
                v14 = v225++ >= 9;
                if (v14)
                {
                  v226 = 0;
                  goto LABEL_706;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v226 = 0;
LABEL_706:
          v429 = v226 != 0;
          v430 = 423;
          goto LABEL_839;
        case 0x2Bu:
          v230 = 0;
          v231 = 0;
          v19 = 0;
          *(_QWORD *)(a1 + 452) |= 0x80uLL;
          while (2)
          {
            v232 = *v3;
            v233 = *(_QWORD *)(a2 + v232);
            if (v233 == -1 || v233 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v234 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v233);
              *(_QWORD *)(a2 + v232) = v233 + 1;
              v19 |= (unint64_t)(v234 & 0x7F) << v230;
              if (v234 < 0)
              {
                v230 += 7;
                v14 = v231++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_710;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_710:
          v427 = 64;
          goto LABEL_856;
        case 0x2Cu:
          v235 = 0;
          v236 = 0;
          v237 = 0;
          *(_QWORD *)(a1 + 452) |= 0x4000000000000uLL;
          while (2)
          {
            v238 = *v3;
            v239 = *(_QWORD *)(a2 + v238);
            if (v239 == -1 || v239 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v240 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v239);
              *(_QWORD *)(a2 + v238) = v239 + 1;
              v237 |= (unint64_t)(v240 & 0x7F) << v235;
              if (v240 < 0)
              {
                v235 += 7;
                v14 = v236++ >= 9;
                if (v14)
                {
                  v237 = 0;
                  goto LABEL_714;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v237 = 0;
LABEL_714:
          v429 = v237 != 0;
          v430 = 424;
          goto LABEL_839;
        case 0x2Du:
          v241 = 0;
          v242 = 0;
          v19 = 0;
          *(_QWORD *)(a1 + 452) |= 0x1000uLL;
          while (2)
          {
            v243 = *v3;
            v244 = *(_QWORD *)(a2 + v243);
            if (v244 == -1 || v244 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v245 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v244);
              *(_QWORD *)(a2 + v243) = v244 + 1;
              v19 |= (unint64_t)(v245 & 0x7F) << v241;
              if (v245 < 0)
              {
                v241 += 7;
                v14 = v242++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_718;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_718:
          v427 = 104;
          goto LABEL_856;
        case 0x2Eu:
          v246 = 0;
          v247 = 0;
          v19 = 0;
          *(_QWORD *)(a1 + 452) |= 0x200uLL;
          while (2)
          {
            v248 = *v3;
            v249 = *(_QWORD *)(a2 + v248);
            if (v249 == -1 || v249 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v250 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v249);
              *(_QWORD *)(a2 + v248) = v249 + 1;
              v19 |= (unint64_t)(v250 & 0x7F) << v246;
              if (v250 < 0)
              {
                v246 += 7;
                v14 = v247++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_722;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_722:
          v427 = 80;
          goto LABEL_856;
        case 0x2Fu:
          v251 = 0;
          v252 = 0;
          v19 = 0;
          *(_QWORD *)(a1 + 452) |= 0x2000uLL;
          while (2)
          {
            v253 = *v3;
            v254 = *(_QWORD *)(a2 + v253);
            if (v254 == -1 || v254 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v255 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v254);
              *(_QWORD *)(a2 + v253) = v254 + 1;
              v19 |= (unint64_t)(v255 & 0x7F) << v251;
              if (v255 < 0)
              {
                v251 += 7;
                v14 = v252++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_726;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_726:
          v427 = 112;
          goto LABEL_856;
        case 0x30u:
          v256 = 0;
          v257 = 0;
          v19 = 0;
          *(_QWORD *)(a1 + 452) |= 0x400uLL;
          while (2)
          {
            v258 = *v3;
            v259 = *(_QWORD *)(a2 + v258);
            if (v259 == -1 || v259 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v260 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v259);
              *(_QWORD *)(a2 + v258) = v259 + 1;
              v19 |= (unint64_t)(v260 & 0x7F) << v256;
              if (v260 < 0)
              {
                v256 += 7;
                v14 = v257++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_730;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_730:
          v427 = 88;
          goto LABEL_856;
        case 0x31u:
          v261 = 0;
          v262 = 0;
          v19 = 0;
          *(_QWORD *)(a1 + 452) |= 0x4000uLL;
          while (2)
          {
            v263 = *v3;
            v264 = *(_QWORD *)(a2 + v263);
            if (v264 == -1 || v264 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v265 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v264);
              *(_QWORD *)(a2 + v263) = v264 + 1;
              v19 |= (unint64_t)(v265 & 0x7F) << v261;
              if (v265 < 0)
              {
                v261 += 7;
                v14 = v262++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_734;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_734:
          v427 = 120;
          goto LABEL_856;
        case 0x32u:
          v266 = 0;
          v267 = 0;
          v19 = 0;
          *(_QWORD *)(a1 + 452) |= 0x800uLL;
          while (2)
          {
            v268 = *v3;
            v269 = *(_QWORD *)(a2 + v268);
            if (v269 == -1 || v269 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v270 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v269);
              *(_QWORD *)(a2 + v268) = v269 + 1;
              v19 |= (unint64_t)(v270 & 0x7F) << v266;
              if (v270 < 0)
              {
                v266 += 7;
                v14 = v267++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_738;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_738:
          v427 = 96;
          goto LABEL_856;
        case 0x33u:
          v271 = 0;
          v272 = 0;
          v273 = 0;
          *(_QWORD *)(a1 + 452) |= 0x8000000000000uLL;
          while (2)
          {
            v274 = *v3;
            v275 = *(_QWORD *)(a2 + v274);
            if (v275 == -1 || v275 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v276 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v275);
              *(_QWORD *)(a2 + v274) = v275 + 1;
              v273 |= (unint64_t)(v276 & 0x7F) << v271;
              if (v276 < 0)
              {
                v271 += 7;
                v14 = v272++ >= 9;
                if (v14)
                {
                  v273 = 0;
                  goto LABEL_742;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v273 = 0;
LABEL_742:
          v429 = v273 != 0;
          v430 = 425;
          goto LABEL_839;
        case 0x34u:
          v277 = 0;
          v278 = 0;
          v19 = 0;
          *(_QWORD *)(a1 + 452) |= 0x800000uLL;
          while (2)
          {
            v279 = *v3;
            v280 = *(_QWORD *)(a2 + v279);
            if (v280 == -1 || v280 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v281 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v280);
              *(_QWORD *)(a2 + v279) = v280 + 1;
              v19 |= (unint64_t)(v281 & 0x7F) << v277;
              if (v281 < 0)
              {
                v277 += 7;
                v14 = v278++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_746;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_746:
          v427 = 192;
          goto LABEL_856;
        case 0x35u:
          v282 = 0;
          v283 = 0;
          v284 = 0;
          *(_WORD *)(a1 + 460) |= 0x40u;
          while (2)
          {
            v285 = *v3;
            v286 = *(_QWORD *)(a2 + v285);
            if (v286 == -1 || v286 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v287 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v286);
              *(_QWORD *)(a2 + v285) = v286 + 1;
              v284 |= (unint64_t)(v287 & 0x7F) << v282;
              if (v287 < 0)
              {
                v282 += 7;
                v14 = v283++ >= 9;
                if (v14)
                {
                  v284 = 0;
                  goto LABEL_750;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v284 = 0;
LABEL_750:
          v429 = v284 != 0;
          v430 = 444;
          goto LABEL_839;
        case 0x36u:
          v288 = 0;
          v289 = 0;
          v290 = 0;
          *(_QWORD *)(a1 + 452) |= 0x800000000000uLL;
          while (2)
          {
            v291 = *v3;
            v292 = *(_QWORD *)(a2 + v291);
            if (v292 == -1 || v292 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v293 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v292);
              *(_QWORD *)(a2 + v291) = v292 + 1;
              v290 |= (unint64_t)(v293 & 0x7F) << v288;
              if (v293 < 0)
              {
                v288 += 7;
                v14 = v289++ >= 9;
                if (v14)
                {
                  v290 = 0;
                  goto LABEL_754;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v290 = 0;
LABEL_754:
          v429 = v290 != 0;
          v430 = 421;
          goto LABEL_839;
        case 0x37u:
          v294 = 0;
          v295 = 0;
          v296 = 0;
          *(_WORD *)(a1 + 460) |= 8u;
          while (2)
          {
            v297 = *v3;
            v298 = *(_QWORD *)(a2 + v297);
            if (v298 == -1 || v298 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v299 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v298);
              *(_QWORD *)(a2 + v297) = v298 + 1;
              v296 |= (unint64_t)(v299 & 0x7F) << v294;
              if (v299 < 0)
              {
                v294 += 7;
                v14 = v295++ >= 9;
                if (v14)
                {
                  v296 = 0;
                  goto LABEL_758;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v296 = 0;
LABEL_758:
          v429 = v296 != 0;
          v430 = 441;
          goto LABEL_839;
        case 0x38u:
          v300 = 0;
          v301 = 0;
          v302 = 0;
          *(_QWORD *)(a1 + 452) |= 0x20000000000000uLL;
          while (2)
          {
            v303 = *v3;
            v304 = *(_QWORD *)(a2 + v303);
            if (v304 == -1 || v304 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v305 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v304);
              *(_QWORD *)(a2 + v303) = v304 + 1;
              v302 |= (unint64_t)(v305 & 0x7F) << v300;
              if (v305 < 0)
              {
                v300 += 7;
                v14 = v301++ >= 9;
                if (v14)
                {
                  v302 = 0;
                  goto LABEL_762;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v302 = 0;
LABEL_762:
          v429 = v302 != 0;
          v430 = 427;
          goto LABEL_839;
        case 0x39u:
          v306 = 0;
          v307 = 0;
          v19 = 0;
          *(_QWORD *)(a1 + 452) |= 0x4000000uLL;
          while (2)
          {
            v308 = *v3;
            v309 = *(_QWORD *)(a2 + v308);
            if (v309 == -1 || v309 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v310 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v309);
              *(_QWORD *)(a2 + v308) = v309 + 1;
              v19 |= (unint64_t)(v310 & 0x7F) << v306;
              if (v310 < 0)
              {
                v306 += 7;
                v14 = v307++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_766;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_766:
          v427 = 216;
          goto LABEL_856;
        case 0x3Au:
          v311 = 0;
          v312 = 0;
          v19 = 0;
          *(_QWORD *)(a1 + 452) |= 0x10uLL;
          while (2)
          {
            v313 = *v3;
            v314 = *(_QWORD *)(a2 + v313);
            if (v314 == -1 || v314 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v315 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v314);
              *(_QWORD *)(a2 + v313) = v314 + 1;
              v19 |= (unint64_t)(v315 & 0x7F) << v311;
              if (v315 < 0)
              {
                v311 += 7;
                v14 = v312++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_770;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_770:
          v427 = 40;
          goto LABEL_856;
        case 0x3Bu:
          v316 = 0;
          v317 = 0;
          v318 = 0;
          *(_QWORD *)(a1 + 452) |= 0x1000000000000uLL;
          while (2)
          {
            v319 = *v3;
            v320 = *(_QWORD *)(a2 + v319);
            if (v320 == -1 || v320 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v321 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v320);
              *(_QWORD *)(a2 + v319) = v320 + 1;
              v318 |= (unint64_t)(v321 & 0x7F) << v316;
              if (v321 < 0)
              {
                v316 += 7;
                v14 = v317++ >= 9;
                if (v14)
                {
                  v318 = 0;
                  goto LABEL_774;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v318 = 0;
LABEL_774:
          v429 = v318 != 0;
          v430 = 422;
          goto LABEL_839;
        case 0x3Cu:
          v322 = 0;
          v323 = 0;
          v324 = 0;
          *(_WORD *)(a1 + 460) |= 0x100u;
          while (2)
          {
            v325 = *v3;
            v326 = *(_QWORD *)(a2 + v325);
            if (v326 == -1 || v326 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v327 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v326);
              *(_QWORD *)(a2 + v325) = v326 + 1;
              v324 |= (unint64_t)(v327 & 0x7F) << v322;
              if (v327 < 0)
              {
                v322 += 7;
                v14 = v323++ >= 9;
                if (v14)
                {
                  v324 = 0;
                  goto LABEL_778;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v324 = 0;
LABEL_778:
          v429 = v324 != 0;
          v430 = 446;
          goto LABEL_839;
        case 0x3Du:
          PBReaderReadString();
          v70 = objc_claimAutoreleasedReturnValue();
          v71 = 392;
          goto LABEL_490;
        case 0x3Eu:
          v328 = 0;
          v329 = 0;
          v330 = 0;
          *(_WORD *)(a1 + 460) |= 0x10u;
          while (2)
          {
            v331 = *v3;
            v332 = *(_QWORD *)(a2 + v331);
            if (v332 == -1 || v332 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v333 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v332);
              *(_QWORD *)(a2 + v331) = v332 + 1;
              v330 |= (unint64_t)(v333 & 0x7F) << v328;
              if (v333 < 0)
              {
                v328 += 7;
                v14 = v329++ >= 9;
                if (v14)
                {
                  v330 = 0;
                  goto LABEL_782;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v330 = 0;
LABEL_782:
          v429 = v330 != 0;
          v430 = 442;
          goto LABEL_839;
        case 0x3Fu:
          v334 = 0;
          v335 = 0;
          v19 = 0;
          *(_QWORD *)(a1 + 452) |= 0x8000000000uLL;
          while (2)
          {
            v336 = *v3;
            v337 = *(_QWORD *)(a2 + v336);
            if (v337 == -1 || v337 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v338 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v337);
              *(_QWORD *)(a2 + v336) = v337 + 1;
              v19 |= (unint64_t)(v338 & 0x7F) << v334;
              if (v338 < 0)
              {
                v334 += 7;
                v14 = v335++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_786;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_786:
          v427 = 320;
          goto LABEL_856;
        case 0x40u:
          v339 = 0;
          v340 = 0;
          v19 = 0;
          *(_QWORD *)(a1 + 452) |= 0x10000000000uLL;
          while (2)
          {
            v341 = *v3;
            v342 = *(_QWORD *)(a2 + v341);
            if (v342 == -1 || v342 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v343 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v342);
              *(_QWORD *)(a2 + v341) = v342 + 1;
              v19 |= (unint64_t)(v343 & 0x7F) << v339;
              if (v343 < 0)
              {
                v339 += 7;
                v14 = v340++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_790;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_790:
          v427 = 328;
          goto LABEL_856;
        case 0x41u:
          v344 = 0;
          v345 = 0;
          v346 = 0;
          *(_WORD *)(a1 + 460) |= 0x80u;
          while (2)
          {
            v347 = *v3;
            v348 = *(_QWORD *)(a2 + v347);
            if (v348 == -1 || v348 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v349 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v348);
              *(_QWORD *)(a2 + v347) = v348 + 1;
              v346 |= (unint64_t)(v349 & 0x7F) << v344;
              if (v349 < 0)
              {
                v344 += 7;
                v14 = v345++ >= 9;
                if (v14)
                {
                  v346 = 0;
                  goto LABEL_794;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v346 = 0;
LABEL_794:
          v429 = v346 != 0;
          v430 = 445;
          goto LABEL_839;
        case 0x42u:
          v350 = 0;
          v351 = 0;
          v19 = 0;
          *(_QWORD *)(a1 + 452) |= 0x40000000uLL;
          while (2)
          {
            v352 = *v3;
            v353 = *(_QWORD *)(a2 + v352);
            if (v353 == -1 || v353 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v354 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v353);
              *(_QWORD *)(a2 + v352) = v353 + 1;
              v19 |= (unint64_t)(v354 & 0x7F) << v350;
              if (v354 < 0)
              {
                v350 += 7;
                v14 = v351++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_798;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_798:
          v427 = 248;
          goto LABEL_856;
        case 0x43u:
          v355 = 0;
          v356 = 0;
          v19 = 0;
          *(_QWORD *)(a1 + 452) |= 0x20000000uLL;
          while (2)
          {
            v357 = *v3;
            v358 = *(_QWORD *)(a2 + v357);
            if (v358 == -1 || v358 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v359 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v358);
              *(_QWORD *)(a2 + v357) = v358 + 1;
              v19 |= (unint64_t)(v359 & 0x7F) << v355;
              if (v359 < 0)
              {
                v355 += 7;
                v14 = v356++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_802;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_802:
          v427 = 240;
          goto LABEL_856;
        case 0x44u:
          v360 = 0;
          v361 = 0;
          v19 = 0;
          *(_QWORD *)(a1 + 452) |= 0x80000000uLL;
          while (2)
          {
            v362 = *v3;
            v363 = *(_QWORD *)(a2 + v362);
            if (v363 == -1 || v363 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v364 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v363);
              *(_QWORD *)(a2 + v362) = v363 + 1;
              v19 |= (unint64_t)(v364 & 0x7F) << v360;
              if (v364 < 0)
              {
                v360 += 7;
                v14 = v361++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_806;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_806:
          v427 = 256;
          goto LABEL_856;
        case 0x45u:
          v365 = 0;
          v366 = 0;
          v19 = 0;
          *(_QWORD *)(a1 + 452) |= 0x80000uLL;
          while (2)
          {
            v367 = *v3;
            v368 = *(_QWORD *)(a2 + v367);
            if (v368 == -1 || v368 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v369 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v368);
              *(_QWORD *)(a2 + v367) = v368 + 1;
              v19 |= (unint64_t)(v369 & 0x7F) << v365;
              if (v369 < 0)
              {
                v365 += 7;
                v14 = v366++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_810;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_810:
          v427 = 160;
          goto LABEL_856;
        case 0x46u:
          v370 = 0;
          v371 = 0;
          v19 = 0;
          *(_QWORD *)(a1 + 452) |= 0x40000uLL;
          while (2)
          {
            v372 = *v3;
            v373 = *(_QWORD *)(a2 + v372);
            if (v373 == -1 || v373 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v374 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v373);
              *(_QWORD *)(a2 + v372) = v373 + 1;
              v19 |= (unint64_t)(v374 & 0x7F) << v370;
              if (v374 < 0)
              {
                v370 += 7;
                v14 = v371++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_814;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_814:
          v427 = 152;
          goto LABEL_856;
        case 0x47u:
          v375 = 0;
          v376 = 0;
          v19 = 0;
          *(_QWORD *)(a1 + 452) |= 0x100000uLL;
          while (2)
          {
            v377 = *v3;
            v378 = *(_QWORD *)(a2 + v377);
            if (v378 == -1 || v378 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v379 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v378);
              *(_QWORD *)(a2 + v377) = v378 + 1;
              v19 |= (unint64_t)(v379 & 0x7F) << v375;
              if (v379 < 0)
              {
                v375 += 7;
                v14 = v376++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_818;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_818:
          v427 = 168;
          goto LABEL_856;
        case 0x48u:
          PBReaderReadString();
          v70 = objc_claimAutoreleasedReturnValue();
          v71 = 352;
          goto LABEL_490;
        case 0x49u:
          PBReaderReadString();
          v70 = objc_claimAutoreleasedReturnValue();
          v71 = 360;
LABEL_490:
          v380 = *(void **)(a1 + v71);
          *(_QWORD *)(a1 + v71) = v70;

          continue;
        case 0x4Au:
          v381 = 0;
          v382 = 0;
          v19 = 0;
          *(_QWORD *)(a1 + 452) |= 1uLL;
          while (2)
          {
            v383 = *v3;
            v384 = *(_QWORD *)(a2 + v383);
            if (v384 == -1 || v384 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v385 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v384);
              *(_QWORD *)(a2 + v383) = v384 + 1;
              v19 |= (unint64_t)(v385 & 0x7F) << v381;
              if (v385 < 0)
              {
                v381 += 7;
                v14 = v382++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_822;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_822:
          v427 = 8;
          goto LABEL_856;
        case 0x4Bu:
          v386 = 0;
          v387 = 0;
          v19 = 0;
          *(_QWORD *)(a1 + 452) |= 4uLL;
          while (2)
          {
            v388 = *v3;
            v389 = *(_QWORD *)(a2 + v388);
            if (v389 == -1 || v389 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v390 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v389);
              *(_QWORD *)(a2 + v388) = v389 + 1;
              v19 |= (unint64_t)(v390 & 0x7F) << v386;
              if (v390 < 0)
              {
                v386 += 7;
                v14 = v387++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_826;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_826:
          v427 = 24;
          goto LABEL_856;
        case 0x4Cu:
          v391 = 0;
          v392 = 0;
          v19 = 0;
          *(_QWORD *)(a1 + 452) |= 2uLL;
          while (2)
          {
            v393 = *v3;
            v394 = *(_QWORD *)(a2 + v393);
            if (v394 == -1 || v394 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v395 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v394);
              *(_QWORD *)(a2 + v393) = v394 + 1;
              v19 |= (unint64_t)(v395 & 0x7F) << v391;
              if (v395 < 0)
              {
                v391 += 7;
                v14 = v392++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_830;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_830:
          v427 = 16;
          goto LABEL_856;
        case 0x4Du:
          v396 = 0;
          v397 = 0;
          v19 = 0;
          *(_QWORD *)(a1 + 452) |= 8uLL;
          while (2)
          {
            v398 = *v3;
            v399 = *(_QWORD *)(a2 + v398);
            if (v399 == -1 || v399 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v400 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v399);
              *(_QWORD *)(a2 + v398) = v399 + 1;
              v19 |= (unint64_t)(v400 & 0x7F) << v396;
              if (v400 < 0)
              {
                v396 += 7;
                v14 = v397++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_834;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_834:
          v427 = 32;
          goto LABEL_856;
        case 0x4Eu:
          v401 = 0;
          v402 = 0;
          v403 = 0;
          *(_QWORD *)(a1 + 452) |= 0x400000000000uLL;
          while (2)
          {
            v404 = *v3;
            v405 = *(_QWORD *)(a2 + v404);
            if (v405 == -1 || v405 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v406 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v405);
              *(_QWORD *)(a2 + v404) = v405 + 1;
              v403 |= (unint64_t)(v406 & 0x7F) << v401;
              if (v406 < 0)
              {
                v401 += 7;
                v14 = v402++ >= 9;
                if (v14)
                {
                  v403 = 0;
                  goto LABEL_838;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v403 = 0;
LABEL_838:
          v429 = v403 != 0;
          v430 = 420;
LABEL_839:
          *(_BYTE *)(a1 + v430) = v429;
          continue;
        case 0x4Fu:
          v407 = 0;
          v408 = 0;
          v19 = 0;
          *(_QWORD *)(a1 + 452) |= 0x1000000000uLL;
          while (2)
          {
            v409 = *v3;
            v410 = *(_QWORD *)(a2 + v409);
            if (v410 == -1 || v410 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v411 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v410);
              *(_QWORD *)(a2 + v409) = v410 + 1;
              v19 |= (unint64_t)(v411 & 0x7F) << v407;
              if (v411 < 0)
              {
                v407 += 7;
                v14 = v408++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_843;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_843:
          v427 = 296;
          goto LABEL_856;
        case 0x50u:
          v412 = 0;
          v413 = 0;
          v19 = 0;
          *(_QWORD *)(a1 + 452) |= 0x2000000000uLL;
          while (2)
          {
            v414 = *v3;
            v415 = *(_QWORD *)(a2 + v414);
            if (v415 == -1 || v415 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v416 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v415);
              *(_QWORD *)(a2 + v414) = v415 + 1;
              v19 |= (unint64_t)(v416 & 0x7F) << v412;
              if (v416 < 0)
              {
                v412 += 7;
                v14 = v413++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_847;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_847:
          v427 = 304;
          goto LABEL_856;
        case 0x51u:
          v417 = 0;
          v418 = 0;
          v19 = 0;
          *(_QWORD *)(a1 + 452) |= 0x4000000000uLL;
          while (2)
          {
            v419 = *v3;
            v420 = *(_QWORD *)(a2 + v419);
            if (v420 == -1 || v420 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v421 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v420);
              *(_QWORD *)(a2 + v419) = v420 + 1;
              v19 |= (unint64_t)(v421 & 0x7F) << v417;
              if (v421 < 0)
              {
                v417 += 7;
                v14 = v418++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_851;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_851:
          v427 = 312;
          goto LABEL_856;
        case 0x52u:
          v422 = 0;
          v423 = 0;
          v19 = 0;
          *(_QWORD *)(a1 + 452) |= 0x800000000uLL;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v424 = *v3;
        v425 = *(_QWORD *)(a2 + v424);
        if (v425 == -1 || v425 >= *(_QWORD *)(a2 + *v4))
          break;
        v426 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v425);
        *(_QWORD *)(a2 + v424) = v425 + 1;
        v19 |= (unint64_t)(v426 & 0x7F) << v422;
        if ((v426 & 0x80) == 0)
          goto LABEL_853;
        v422 += 7;
        v14 = v423++ >= 9;
        if (v14)
        {
          v19 = 0;
          goto LABEL_855;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_853:
      if (*(_BYTE *)(a2 + *v5))
        v19 = 0;
LABEL_855:
      v427 = 288;
LABEL_856:
      *(_QWORD *)(a1 + v427) = v19;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1CBFA7E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CBFA8120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  __brc_leave_section((uint64_t *)&location);
  _Unwind_Resume(a1);
}

void sub_1CBFA83B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBFA8658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBFA8B08(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBFA8E2C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBFA90BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBFA9168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1CBFA991C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t validateUserBool(void *a1, _BYTE *a2)
{
  id v3;
  uint64_t v4;

  v3 = a1;
  if (v3)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    {
      *a2 = objc_msgSend(v3, "BOOLValue");
      v4 = 1;
    }
    else
    {
      v4 = 2;
    }
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

id _stringSetFromDefaultValue(void *a1, int a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v4 = (void *)objc_opt_new();
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v5 = v3;
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v15;
      do
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v15 != v8)
            objc_enumerationMutation(v5);
          v10 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * v9);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v11 = v10;
            if (objc_msgSend(v11, "length", (_QWORD)v14))
            {
              if (a2
                && objc_msgSend(v11, "characterAtIndex:", 0) == 46
                && (unint64_t)objc_msgSend(v11, "length") >= 2)
              {
                objc_msgSend(v11, "substringFromIndex:", 1);
                v12 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v4, "addObject:", v12);

              }
              else
              {
                objc_msgSend(v4, "addObject:", v11);
              }
            }

          }
          ++v9;
        }
        while (v7 != v9);
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      }
      while (v7);
    }

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

id _validateThrottleDefaults(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  char isKindOfClass;
  void *v19;
  NSObject *v20;
  uint64_t v21;
  int v22;
  void *v23;
  void *v24;
  double v25;
  double v26;
  void *v27;
  double v28;
  BOOL v29;
  id v30;
  void *v31;
  NSObject *v32;
  void *v33;
  void *v35;
  double v36;
  void *v37;
  double v38;
  double v39;
  void *v40;
  double v41;
  __int128 v42;
  id v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint8_t buf[4];
  id v49;
  __int16 v50;
  void *v51;
  __int16 v52;
  void *v53;
  _QWORD v54[6];
  _BYTE v55[128];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      v6 = 0;
      goto LABEL_28;
    }
    v43 = v3;
    v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithDictionary:", v3);
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v47 = 0u;
    v54[0] = CFSTR("start-after");
    v54[1] = CFSTR("give-up-after");
    v54[2] = CFSTR("wait-at-least");
    v54[3] = CFSTR("wait-at-most");
    v54[4] = CFSTR("forget-after");
    v54[5] = CFSTR("max-elemnt-count");
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v54, 6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v44, v55, 16);
    if (!v8)
      goto LABEL_21;
    v10 = v8;
    v11 = *(_QWORD *)v45;
    *(_QWORD *)&v9 = 138412290;
    v42 = v9;
LABEL_5:
    v12 = 0;
    while (1)
    {
      if (*(_QWORD *)v45 != v11)
        objc_enumerationMutation(v7);
      v13 = *(_QWORD *)(*((_QWORD *)&v44 + 1) + 8 * v12);
      objc_msgSend(v5, "objectForKeyedSubscript:", v13, v42);
      v14 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v14)
      {
        brc_bread_crumbs();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        brc_default_log();
        v20 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = v42;
          v49 = v19;
          _os_log_fault_impl(&dword_1CBD43000, v20, OS_LOG_TYPE_FAULT, "[CRIT] Assertion failed: defaultValues[key] != nil%@", buf, 0xCu);
        }

      }
      objc_msgSend(v6, "objectForKeyedSubscript:", v13);
      v15 = (void *)objc_claimAutoreleasedReturnValue();

      if (v15)
      {
        objc_msgSend(v6, "objectForKeyedSubscript:", v13);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          objc_msgSend(v6, "objectForKeyedSubscript:", v13);
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          isKindOfClass = objc_opt_isKindOfClass();

          if ((isKindOfClass & 1) == 0)
            goto LABEL_27;
          goto LABEL_15;
        }
      }
      else
      {
        objc_msgSend(v5, "objectForKeyedSubscript:", v13);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "setObject:forKeyedSubscript:", v16, v13);
      }

LABEL_15:
      if (v10 == ++v12)
      {
        v21 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v44, v55, 16);
        v10 = v21;
        if (!v21)
        {
LABEL_21:

          objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("start-after"));
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v7, "intValue");
          objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("give-up-after"));
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          if (v22 >= (int)objc_msgSend(v23, "intValue"))
          {

LABEL_27:
            v3 = v43;
          }
          else
          {
            objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("wait-at-least"));
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v24, "doubleValue");
            v26 = v25;
            objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("wait-at-most"));
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v27, "doubleValue");
            if (v26 <= v28)
            {
              objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("wait-at-most"));
              v35 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v35, "doubleValue");
              if (v36 <= 0.0)
              {
                v29 = 1;
              }
              else
              {
                objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("wait-at-most"));
                v37 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v37, "doubleValue");
                v39 = v38;
                objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("forget-after"));
                v40 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v40, "doubleValue");
                v29 = v39 > v41;

              }
            }
            else
            {
              v29 = 1;
            }

            v33 = v6;
            v3 = v43;
            if (!v29)
            {
LABEL_31:
              v30 = v33;

              goto LABEL_32;
            }
          }
LABEL_28:
          brc_bread_crumbs();
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          brc_default_log();
          v32 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v32, (os_log_type_t)0x90u))
          {
            *(_DWORD *)buf = 138412802;
            v49 = v3;
            v50 = 2112;
            v51 = v5;
            v52 = 2112;
            v53 = v31;
            _os_log_error_impl(&dword_1CBD43000, v32, (os_log_type_t)0x90u, "[ERROR] invalid user default %@; using:%@%@",
              buf,
              0x20u);
          }

          v33 = v5;
          goto LABEL_31;
        }
        goto LABEL_5;
      }
    }
  }
  v30 = v4;
LABEL_32:

  return v30;
}

id _numberSetFromDefaultValue(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v2 = (void *)objc_opt_new();
    v10 = 0u;
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v11;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v11 != v6)
            objc_enumerationMutation(v3);
          v8 = *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * v7);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            objc_msgSend(v2, "addObject:", v8, (_QWORD)v10);
          ++v7;
        }
        while (v5 != v7);
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      }
      while (v5);
    }

  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void sub_1CBFB2214(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1CBFB2730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__49(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__49(uint64_t a1)
{

}

void ____brc_create_section_block_invoke()
{
  NSObject *v0;
  dispatch_queue_t v1;
  void *v2;
  NSObject *v3;

  dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UNSPECIFIED, 0);
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_queue_attr_make_with_autorelease_frequency(v3, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = dispatch_queue_create("create-log-section", v0);

  v2 = (void *)__brc_create_section_queue;
  __brc_create_section_queue = (uint64_t)v1;

}

void sub_1CBFB53DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBFB558C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CBFB5720(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBFB592C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBFB8250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id *a9, id *a10, uint64_t a11, id *location)
{
  id *v12;
  id *v13;
  uint64_t v14;

  objc_destroyWeak(v12);
  objc_destroyWeak(v13);
  objc_destroyWeak(location);
  _Block_object_dispose((const void *)(v14 - 176), 8);
  objc_destroyWeak(a10);
  objc_destroyWeak(a9);
  objc_destroyWeak((id *)&STACK[0x238]);
  _Block_object_dispose(&STACK[0x298], 8);
  _Block_object_dispose((const void *)(v14 - 248), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__50(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__50(uint64_t a1)
{

}

void sub_1CBFB88F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void sub_1CBFB8B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void sub_1CBFB8F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBFB9198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBFB96DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBFBA358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, id a18)
{
  id *v18;
  id *v19;
  uint64_t v20;

  objc_destroyWeak(v19);
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a18);
  _Block_object_dispose((const void *)(v20 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1CBFBA7BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBFBC9C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBFBD4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__51(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__51(uint64_t a1)
{

}

uint64_t BRFieldPkgHeaderReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_31:
        *(_DWORD *)(a1 + 8) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1CBFC07F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  __brc_leave_section(&a29);
  _Unwind_Resume(a1);
}

void sub_1CBFC0C80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBFC0DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__52(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__52(uint64_t a1)
{

}

void sub_1CBFC10E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  _Block_object_dispose(va1, 8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBFC136C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  _Block_object_dispose(va1, 8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBFC156C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  __brc_leave_section((uint64_t *)(v8 - 56));
  _Unwind_Resume(a1);
}

void sub_1CBFC18BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void __dispatch_async_with_logs_block_invoke_25(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  const char *label;
  __int128 v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *(_OWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  brc_bread_crumbs();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    label = dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32));
    *(_DWORD *)buf = 134218498;
    v8 = v5;
    v9 = 2080;
    v10 = label;
    v11 = 2112;
    v12 = v2;
    _os_log_debug_impl(&dword_1CBD43000, v3, OS_LOG_TYPE_DEBUG, "[DEBUG] ┳%llx continuing on %s%@", buf, 0x20u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  __brc_leave_section((uint64_t *)&v5);
}

void sub_1CBFC1C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __brc_leave_section(&a9);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_3_5(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void sub_1CBFC2020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__53(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__53(uint64_t a1)
{

}

void sub_1CBFC39B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void register_error_in_dictionary(void *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;

  v14 = a1;
  v3 = a2;
  if (v3)
  {
    v4 = v3;
    objc_msgSend(v3, "brc_telemetryReportableErrorWithRecordName:", 0);
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = (void *)v5;
    if (v5)
      v7 = (void *)v5;
    else
      v7 = v4;
    v8 = v7;

    v9 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v8, "domain");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "stringWithFormat:", CFSTR("%@.%ld"), v10, objc_msgSend(v8, "code"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "setObject:forKey:", v11, CFSTR("error"));

    objc_msgSend(v8, "brc_cloudKitErrorMessage");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12)
    {
      objc_msgSend(v8, "brc_cloudKitErrorMessage");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "setObject:forKey:", v13, CFSTR("errorMessage"));

    }
  }
  else
  {
    v8 = 0;
  }

}

void sub_1CBFC4C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *location, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id a25)
{
  id *v25;

  objc_destroyWeak(v25);
  objc_destroyWeak(location);
  objc_destroyWeak(&a25);
  _Unwind_Resume(a1);
}

void sub_1CBFC4DA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBFC4F0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBFC8858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1CBFC9D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  __brc_leave_section(&a28);
  _Unwind_Resume(a1);
}

void sub_1CBFCA6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  __brc_leave_section(&a37);
  _Unwind_Resume(a1);
}

void sub_1CBFCB2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void sub_1CBFCCC68(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_9_4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return objc_msgSend(*(id *)(v1 + a1), "count");
}

void sub_1CBFCF944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__54(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__54(uint64_t a1)
{

}

void sub_1CBFD00A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBFD0434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t AppTelemetryQBSPerformanceReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = *(void **)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v17;

          continue;
        case 2u:
          v20 = 0;
          v21 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 48) |= 4u;
          while (2)
          {
            v23 = *v3;
            v24 = *(_QWORD *)(a2 + v23);
            if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
              *(_QWORD *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                v14 = v21++ >= 9;
                if (v14)
                {
                  v22 = 0;
                  goto LABEL_53;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v22 = 0;
LABEL_53:
          v41 = 24;
          goto LABEL_66;
        case 3u:
          v26 = 0;
          v27 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 48) |= 1u;
          while (2)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
              *(_QWORD *)(a2 + v28) = v29 + 1;
              v22 |= (unint64_t)(v30 & 0x7F) << v26;
              if (v30 < 0)
              {
                v26 += 7;
                v14 = v27++ >= 9;
                if (v14)
                {
                  v22 = 0;
                  goto LABEL_57;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v22 = 0;
LABEL_57:
          v41 = 8;
          goto LABEL_66;
        case 4u:
          v31 = 0;
          v32 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 48) |= 2u;
          while (2)
          {
            v33 = *v3;
            v34 = *(_QWORD *)(a2 + v33);
            if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
              *(_QWORD *)(a2 + v33) = v34 + 1;
              v22 |= (unint64_t)(v35 & 0x7F) << v31;
              if (v35 < 0)
              {
                v31 += 7;
                v14 = v32++ >= 9;
                if (v14)
                {
                  v22 = 0;
                  goto LABEL_61;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v22 = 0;
LABEL_61:
          v41 = 16;
          goto LABEL_66;
        case 5u:
          v36 = 0;
          v37 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 48) |= 8u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v38 = *v3;
        v39 = *(_QWORD *)(a2 + v38);
        if (v39 == -1 || v39 >= *(_QWORD *)(a2 + *v4))
          break;
        v40 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v39);
        *(_QWORD *)(a2 + v38) = v39 + 1;
        v22 |= (unint64_t)(v40 & 0x7F) << v36;
        if ((v40 & 0x80) == 0)
          goto LABEL_63;
        v36 += 7;
        v14 = v37++ >= 9;
        if (v14)
        {
          v22 = 0;
          goto LABEL_65;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_63:
      if (*(_BYTE *)(a2 + *v5))
        v22 = 0;
LABEL_65:
      v41 = 32;
LABEL_66:
      *(_QWORD *)(a1 + v41) = v22;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1CBFD2110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBFD2748(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBFD4AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  __destructor_8_s0_s8_s16_s24((id *)va);
  _Unwind_Resume(a1);
}

void sub_1CBFD5A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__55(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__55(uint64_t a1)
{

}

void sub_1CBFD5DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  __destructor_8_s0_s8_s16_s24((id *)va);
  _Unwind_Resume(a1);
}

void sub_1CBFD61B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  __destructor_8_s0_s8_s16_s24((id *)va);
  _Unwind_Resume(a1);
}

void __move_assignment_8_8_s0_s8_s16_s24_t32w8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;

  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;

  v6 = a2[1];
  a2[1] = 0;
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;

  v8 = a2[2];
  a2[2] = 0;
  v9 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v8;

  v10 = a2[3];
  a2[3] = 0;
  v11 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v10;

  *(_QWORD *)(a1 + 32) = a2[4];
}

void __copy_assignment_8_8_s0_s8_s16_s24_t32w8(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)a1, *(id *)a2);
  objc_storeStrong((id *)(a1 + 8), *(id *)(a2 + 8));
  objc_storeStrong((id *)(a1 + 16), *(id *)(a2 + 16));
  objc_storeStrong((id *)(a1 + 24), *(id *)(a2 + 24));
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
}

void sub_1CBFD6520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  id *v15;
  uint64_t v16;
  va_list va;

  va_start(va, a15);
  __destructor_8_s0_s8_s16_s24(v15);
  _Block_object_dispose(va, 8);
  __destructor_8_s0_s8_s16_s24((id *)(v16 - 112));
  _Unwind_Resume(a1);
}

id __copy_helper_block_e8_56n23_8_8_s0_s8_s16_s24_t32w8(uint64_t a1, uint64_t a2)
{
  return __copy_constructor_8_8_s0_s8_s16_s24_t32w8((_QWORD *)(a1 + 56), a2 + 56);
}

id __copy_constructor_8_8_s0_s8_s16_s24_t32w8(_QWORD *a1, uint64_t a2)
{
  id result;

  *a1 = *(id *)a2;
  a1[1] = *(id *)(a2 + 8);
  a1[2] = *(id *)(a2 + 16);
  result = *(id *)(a2 + 24);
  a1[3] = result;
  a1[4] = *(_QWORD *)(a2 + 32);
  return result;
}

void __destroy_helper_block_e8_56n15_8_s0_s8_s16_s24(uint64_t a1)
{
  __destructor_8_s0_s8_s16_s24((id *)(a1 + 56));
}

void sub_1CBFD7D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  __destructor_8_s0_s8_s16_s24(&a9);
  _Unwind_Resume(a1);
}

void sub_1CBFD82E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1CBFDA390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,id a57)
{
  __brc_leave_section(&a54);
  __destructor_8_s0_s8_s16_s24(&a57);
  _Unwind_Resume(a1);
}

void sub_1CBFDB5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  __brc_leave_section(&a28);
  _Unwind_Resume(a1);
}

void sub_1CBFDBF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  __brc_leave_section((uint64_t *)va);
  __destructor_8_s0_s8_s16_s24((id *)va1);
  _Unwind_Resume(a1);
}

id __copy_helper_block_e8_32n23_8_8_s0_s8_s16_s24_t32w8(uint64_t a1, uint64_t a2)
{
  return __copy_constructor_8_8_s0_s8_s16_s24_t32w8((_QWORD *)(a1 + 32), a2 + 32);
}

void __destroy_helper_block_e8_32n15_8_s0_s8_s16_s24(uint64_t a1)
{
  __destructor_8_s0_s8_s16_s24((id *)(a1 + 32));
}

void sub_1CBFDD8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  __brc_leave_section(&a41);
  _Unwind_Resume(a1);
}

void sub_1CBFDF710(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1CBFE03D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __destructor_8_s0_s8_s16_s24((id *)va);
  _Unwind_Resume(a1);
}

void sub_1CBFE165C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  __brc_leave_section(&a27);
  _Unwind_Resume(a1);
}

void sub_1CBFE1FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_13_1(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x12u);
}

void sub_1CBFE25F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CBFE3110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;

  _Block_object_dispose((const void *)(v38 - 144), 8);
  __brc_leave_section(&a38);
  _Unwind_Resume(a1);
}

void sub_1CBFE3C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBFE3DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBFE46A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBFE5D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  void *v18;

  objc_sync_exit(v18);
  _Unwind_Resume(a1);
}

void sub_1CBFE5E70(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBFE5EEC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t prettyprintFSEventFlags()
{
  return BRCPrettyPrintBitmap();
}

void sub_1CBFE6818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBFE74E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void fseventsCallback(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  int v6;
  void *v10;
  _BYTE *v11;
  id v12;
  uint64_t v13;
  void *v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  _BYTE *v20;
  void *v21;
  NSObject *v22;
  unsigned int v23;
  BRCFSEvent *v24;
  void *v25;
  NSObject *v26;
  BRCFSEvent *v27;
  uint64_t v28;
  void *context;
  void *v30;
  id v31;
  uint8_t buf[4];
  void *v35;
  __int16 v36;
  void *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v10 = (void *)MEMORY[0x1D17A6BE8]();
  if (a3)
  {
    context = v10;
    v11 = a2;
    v12 = a4;
    v13 = objc_opt_new();
    v14 = (void *)v13;
    LOBYTE(v6) = 0;
    v15 = a3 - 1;
    if ((int)a3 < 1)
    {
LABEL_19:
      objc_msgSend(v11, "queueEvents:markSelfEncountered:", v14, v6 & 1);
    }
    else
    {
      v28 = a3;
      v16 = a3 + 1;
      v30 = (void *)v13;
      v31 = v12;
      while (1)
      {
        v17 = (void *)MEMORY[0x1D17A6BE8]();
        if (v11[144])
          break;
        v18 = *(unsigned int *)(a5 + 4 * v15);
        objc_msgSend(v12, "objectAtIndexedSubscript:", v15);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v19, "br_isExcludedWithMaximumDepth:", 1024))
        {
          v20 = v11;
          brc_bread_crumbs();
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          brc_default_log();
          v22 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 138412546;
            v35 = v19;
            v36 = 2112;
            v37 = v21;
            _os_log_debug_impl(&dword_1CBD43000, v22, OS_LOG_TYPE_DEBUG, "[DEBUG] Pretending excluded path is OwnEvent %@%@", buf, 0x16u);
          }

          v18 = v18 | 0x80000;
          v11 = v20;
          v14 = v30;
          v12 = v31;
        }
        v23 = (v18 >> 19) & 1;
        if ((v23 & v6) != 0)
        {
          LOBYTE(v6) = 1;
        }
        else
        {
          LOBYTE(v6) = v23 | v6;
          if ((v18 & 0xE) != 0)
          {
            objc_msgSend(v14, "removeAllObjects");
            v27 = -[BRCFSEvent initWithPath:flags:eventID:]([BRCFSEvent alloc], "initWithPath:flags:eventID:", v19, v18, *(_QWORD *)(a6 + 8 * v15));
            objc_msgSend(v14, "addObject:", v27);

            objc_autoreleasePoolPop(v17);
            goto LABEL_19;
          }
          v24 = -[BRCFSEvent initWithPath:flags:eventID:]([BRCFSEvent alloc], "initWithPath:flags:eventID:", v19, v18, *(_QWORD *)(a6 + 8 * v15));
          objc_msgSend(v14, "insertObject:atIndex:", v24, 0);

        }
        objc_autoreleasePoolPop(v17);
        --v16;
        --v15;
        if (v16 <= 1)
          goto LABEL_19;
      }
      brc_bread_crumbs();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      brc_default_log();
      v26 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134218242;
        v35 = (void *)(v28 - v15);
        v36 = 2112;
        v37 = v25;
        _os_log_debug_impl(&dword_1CBD43000, v26, OS_LOG_TYPE_DEBUG, "[DEBUG] draining %lu fsevents%@", buf, 0x16u);
      }

      objc_autoreleasePoolPop(v17);
    }

    v10 = context;
  }
  objc_autoreleasePoolPop(v10);
}

void sub_1CBFE798C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBFE7BCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBFE7DC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBFE821C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBFE8A1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1CBFE8C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__56(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__56(uint64_t a1)
{

}

void sub_1CBFE9DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  __brc_leave_section(&a27);
  _Unwind_Resume(a1);
}

void sub_1CBFEA1FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CBFEA4D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1CBFEA698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBFEAA50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBFEAC98(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBFEAE98(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBFEBA0C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1CBFEC37C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBFED064(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose(&STACK[0x230], 8);
  _Block_object_dispose(&STACK[0x250], 8);
  _Block_object_dispose((const void *)(v1 - 256), 8);
  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__57(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__57(uint64_t a1)
{

}

void sub_1CBFEE510(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBFEE800(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBFEE934(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBFEEC88(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBFEFC84(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__58(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__58(uint64_t a1)
{

}

void sub_1CBFF0A18(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBFF0A98(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBFF0B04(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL brc_device_has_enough_space(uint64_t a1)
{
  int v1;
  id v2;
  const char *v3;
  int v5;
  void *v6;
  NSObject *v7;
  int v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  void *v14;
  uint64_t v15;

  v1 = a1;
  v15 = *MEMORY[0x1E0C80C00];
  v8 = 0;
  objc_msgSend(MEMORY[0x1E0CB3940], "br_pathWithDeviceID:fileID:", a1, 2);
  v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v3 = (const char *)objc_msgSend(v2, "fileSystemRepresentation");

  if ((fsctl(v3, 0x40046818uLL, &v8, 0) & 0x80000000) == 0)
    return (v8 & 0x1204) == 0;
  v5 = *__error();
  brc_bread_crumbs();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, (os_log_type_t)0x90u))
  {
    *(_DWORD *)buf = 67109634;
    v10 = v1;
    v11 = 1024;
    v12 = v5;
    v13 = 2112;
    v14 = v6;
    _os_log_error_impl(&dword_1CBD43000, v7, (os_log_type_t)0x90u, "[ERROR] fsctl(dev=%d) failed %{errno}d%@", buf, 0x18u);
  }

  *__error() = v5;
  return 1;
}

void __br_notify_register_dispatch_block_invoke_2_1()
{
  uint64_t v0;
  void *v1;
  id v2;

  objc_msgSend(MEMORY[0x1E0DC5F00], "personaAttributesForPersonaType:", 0);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "userPersonaUniqueString");
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)_block_invoke___personalPersona_4;
  _block_invoke___personalPersona_4 = v0;

}

id OUTLINED_FUNCTION_0_3(id a1)
{
  return a1;
}

void sub_1CBFF34A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBFF40B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBFF41AC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBFF439C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBFF560C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBFF584C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__59(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__59(uint64_t a1)
{

}

void sub_1CBFF6BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBFF6DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CBFF7FD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CBFF8CEC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t AppTelemetryStuckStatusReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  int *v8;
  int *v9;
  int *v10;
  int *v11;
  int *v12;
  int *v13;
  int *v14;
  int *v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  BOOL v27;
  int v28;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  int *v36;
  int *v37;
  int *v38;
  int *v39;
  int *v40;
  uint64_t v41;
  uint64_t result;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  char v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  char v76;
  unsigned int v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  char v81;
  unsigned int v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  char v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  char v91;
  unsigned int v92;
  uint64_t v93;
  unint64_t v94;
  char v95;
  char v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  char v101;
  unsigned int v102;
  uint64_t v103;
  unint64_t v104;
  char v105;
  char v106;
  unsigned int v107;
  uint64_t v108;
  unint64_t v109;
  char v110;
  char v111;
  unsigned int v112;
  uint64_t v113;
  unint64_t v114;
  char v115;
  char v116;
  unsigned int v117;
  uint64_t v118;
  unint64_t v119;
  char v120;
  char v121;
  unsigned int v122;
  uint64_t v123;
  unint64_t v124;
  char v125;
  char v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  char v131;
  char v132;
  unsigned int v133;
  uint64_t v134;
  unint64_t v135;
  char v136;
  char v137;
  unsigned int v138;
  uint64_t v139;
  unint64_t v140;
  char v141;
  char v142;
  unsigned int v143;
  uint64_t v144;
  unint64_t v145;
  char v146;
  char v147;
  unsigned int v148;
  uint64_t v149;
  unint64_t v150;
  char v151;
  BOOL v152;
  uint64_t v153;
  uint64_t v154;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = &OBJC_IVAR___BRCPackageManifestReader__error;
    v8 = (int *)MEMORY[0x1E0D82BB8];
    v9 = &OBJC_IVAR___BRCPackageManifestReader__error;
    v10 = &OBJC_IVAR___BRCPackageManifestReader__error;
    v11 = &OBJC_IVAR___BRCPackageManifestReader__error;
    v12 = &OBJC_IVAR___BRCPackageManifestReader__error;
    v13 = &OBJC_IVAR___BRCPackageManifestReader__error;
    v14 = &OBJC_IVAR___BRCPackageManifestReader__error;
    v15 = &OBJC_IVAR___BRCPackageManifestReader__error;
    v16 = &OBJC_IVAR___BRCPackageManifestReader__error;
    v17 = &OBJC_IVAR___BRCPackageManifestReader__error;
    v18 = &OBJC_IVAR___BRCPackageManifestReader__error;
    v19 = &OBJC_IVAR___BRCPackageManifestReader__error;
    v20 = &OBJC_IVAR___BRCPackageManifestReader__error;
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      while (1)
      {
        v24 = *v3;
        v25 = *(_QWORD *)(a2 + v24);
        if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
          break;
        v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v25);
        *(_QWORD *)(a2 + v24) = v25 + 1;
        v23 |= (unint64_t)(v26 & 0x7F) << v21;
        if ((v26 & 0x80) == 0)
          goto LABEL_12;
        v21 += 7;
        v27 = v22++ >= 9;
        if (v27)
        {
          v23 = 0;
          v28 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v28 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v23 = 0;
LABEL_14:
      if (v28 || (v23 & 7) == 4)
        break;
      switch((v23 >> 3))
      {
        case 1u:
          v30 = 0;
          v31 = 0;
          v32 = 0;
          *(_DWORD *)(a1 + v7[959]) |= 0x40000u;
          while (1)
          {
            v33 = *v3;
            v34 = *(_QWORD *)(a2 + v33);
            if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
              break;
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v34);
            *(_QWORD *)(a2 + v33) = v34 + 1;
            v32 |= (unint64_t)(v35 & 0x7F) << v30;
            if ((v35 & 0x80) == 0)
              goto LABEL_176;
            v30 += 7;
            v27 = v31++ >= 9;
            if (v27)
            {
              v32 = 0;
              goto LABEL_178;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_176:
          if (*(_BYTE *)(a2 + *v5))
            v32 = 0;
LABEL_178:
          v152 = v32 != 0;
          v153 = v9[960];
          goto LABEL_247;
        case 2u:
          v43 = 0;
          v44 = 0;
          v45 = 0;
          *(_DWORD *)(a1 + v7[959]) |= 0x80000u;
          while (2)
          {
            v46 = *v3;
            v47 = *(_QWORD *)(a2 + v46);
            if (v47 == -1 || v47 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v48 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v47);
              *(_QWORD *)(a2 + v46) = v47 + 1;
              v45 |= (unint64_t)(v48 & 0x7F) << v43;
              if (v48 < 0)
              {
                v43 += 7;
                v27 = v44++ >= 9;
                if (v27)
                {
                  v45 = 0;
                  goto LABEL_182;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v45 = 0;
LABEL_182:
          v152 = v45 != 0;
          v153 = v10[961];
          goto LABEL_247;
        case 3u:
          v49 = 0;
          v50 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + v7[959]) |= 2u;
          while (2)
          {
            v52 = *v3;
            v53 = *(_QWORD *)(a2 + v52);
            if (v53 == -1 || v53 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v54 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v53);
              *(_QWORD *)(a2 + v52) = v53 + 1;
              v51 |= (unint64_t)(v54 & 0x7F) << v49;
              if (v54 < 0)
              {
                v49 += 7;
                v27 = v50++ >= 9;
                if (v27)
                {
                  v51 = 0;
                  goto LABEL_186;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v51 = 0;
LABEL_186:
          v154 = v11[962];
          goto LABEL_264;
        case 4u:
          v55 = 0;
          v56 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + v7[959]) |= 4u;
          while (2)
          {
            v57 = *v3;
            v58 = *(_QWORD *)(a2 + v57);
            if (v58 == -1 || v58 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v59 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v58);
              *(_QWORD *)(a2 + v57) = v58 + 1;
              v51 |= (unint64_t)(v59 & 0x7F) << v55;
              if (v59 < 0)
              {
                v55 += 7;
                v27 = v56++ >= 9;
                if (v27)
                {
                  v51 = 0;
                  goto LABEL_190;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v51 = 0;
LABEL_190:
          v154 = v12[963];
          goto LABEL_264;
        case 5u:
          v60 = 0;
          v61 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + v7[959]) |= 1u;
          while (2)
          {
            v62 = *v3;
            v63 = *(_QWORD *)(a2 + v62);
            if (v63 == -1 || v63 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v64 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v63);
              *(_QWORD *)(a2 + v62) = v63 + 1;
              v51 |= (unint64_t)(v64 & 0x7F) << v60;
              if (v64 < 0)
              {
                v60 += 7;
                v27 = v61++ >= 9;
                if (v27)
                {
                  v51 = 0;
                  goto LABEL_194;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v51 = 0;
LABEL_194:
          v154 = v13[964];
          goto LABEL_264;
        case 6u:
          v65 = 0;
          v66 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + v7[959]) |= 8u;
          while (2)
          {
            v67 = *v3;
            v68 = *(_QWORD *)(a2 + v67);
            if (v68 == -1 || v68 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v69 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v68);
              *(_QWORD *)(a2 + v67) = v68 + 1;
              v51 |= (unint64_t)(v69 & 0x7F) << v65;
              if (v69 < 0)
              {
                v65 += 7;
                v27 = v66++ >= 9;
                if (v27)
                {
                  v51 = 0;
                  goto LABEL_198;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v51 = 0;
LABEL_198:
          v154 = v14[965];
          goto LABEL_264;
        case 7u:
          v70 = 0;
          v71 = 0;
          v72 = 0;
          *(_DWORD *)(a1 + v7[959]) |= 0x100000u;
          while (2)
          {
            v73 = *v3;
            v74 = *(_QWORD *)(a2 + v73);
            if (v74 == -1 || v74 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v75 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v74);
              *(_QWORD *)(a2 + v73) = v74 + 1;
              v72 |= (unint64_t)(v75 & 0x7F) << v70;
              if (v75 < 0)
              {
                v70 += 7;
                v27 = v71++ >= 9;
                if (v27)
                {
                  v72 = 0;
                  goto LABEL_202;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v72 = 0;
LABEL_202:
          v152 = v72 != 0;
          v153 = v15[966];
          goto LABEL_247;
        case 8u:
          v76 = 0;
          v77 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + v7[959]) |= 0x20u;
          while (2)
          {
            v78 = *v3;
            v79 = *(_QWORD *)(a2 + v78);
            if (v79 == -1 || v79 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v80 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v79);
              *(_QWORD *)(a2 + v78) = v79 + 1;
              v51 |= (unint64_t)(v80 & 0x7F) << v76;
              if (v80 < 0)
              {
                v76 += 7;
                v27 = v77++ >= 9;
                if (v27)
                {
                  v51 = 0;
                  goto LABEL_206;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v51 = 0;
LABEL_206:
          v154 = v16[967];
          goto LABEL_264;
        case 9u:
          v81 = 0;
          v82 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + v7[959]) |= 0x10u;
          while (2)
          {
            v83 = *v3;
            v84 = *(_QWORD *)(a2 + v83);
            if (v84 == -1 || v84 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v85 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v84);
              *(_QWORD *)(a2 + v83) = v84 + 1;
              v51 |= (unint64_t)(v85 & 0x7F) << v81;
              if (v85 < 0)
              {
                v81 += 7;
                v27 = v82++ >= 9;
                if (v27)
                {
                  v51 = 0;
                  goto LABEL_210;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v51 = 0;
LABEL_210:
          v154 = v17[968];
          goto LABEL_264;
        case 0xAu:
          v86 = 0;
          v87 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + v7[959]) |= 0x800u;
          while (2)
          {
            v88 = *v3;
            v89 = *(_QWORD *)(a2 + v88);
            if (v89 == -1 || v89 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v90 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v89);
              *(_QWORD *)(a2 + v88) = v89 + 1;
              v51 |= (unint64_t)(v90 & 0x7F) << v86;
              if (v90 < 0)
              {
                v86 += 7;
                v27 = v87++ >= 9;
                if (v27)
                {
                  v51 = 0;
                  goto LABEL_214;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v51 = 0;
LABEL_214:
          v154 = v18[969];
          goto LABEL_264;
        case 0xBu:
          v91 = 0;
          v92 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + v7[959]) |= 0x100u;
          while (2)
          {
            v93 = *v3;
            v94 = *(_QWORD *)(a2 + v93);
            if (v94 == -1 || v94 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v95 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v94);
              *(_QWORD *)(a2 + v93) = v94 + 1;
              v51 |= (unint64_t)(v95 & 0x7F) << v91;
              if (v95 < 0)
              {
                v91 += 7;
                v27 = v92++ >= 9;
                if (v27)
                {
                  v51 = 0;
                  goto LABEL_218;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v51 = 0;
LABEL_218:
          v154 = v19[970];
          goto LABEL_264;
        case 0xCu:
          v96 = 0;
          v97 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + v7[959]) |= 0x1000u;
          while (2)
          {
            v98 = *v3;
            v99 = *(_QWORD *)(a2 + v98);
            if (v99 == -1 || v99 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v100 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v99);
              *(_QWORD *)(a2 + v98) = v99 + 1;
              v51 |= (unint64_t)(v100 & 0x7F) << v96;
              if (v100 < 0)
              {
                v96 += 7;
                v27 = v97++ >= 9;
                if (v27)
                {
                  v51 = 0;
                  goto LABEL_222;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v51 = 0;
LABEL_222:
          v154 = v20[971];
          goto LABEL_264;
        case 0xDu:
          v101 = 0;
          v102 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + v7[959]) |= 0x400u;
          while (2)
          {
            v103 = *v3;
            v104 = *(_QWORD *)(a2 + v103);
            if (v104 == -1 || v104 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v105 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v104);
              *(_QWORD *)(a2 + v103) = v104 + 1;
              v51 |= (unint64_t)(v105 & 0x7F) << v101;
              if (v105 < 0)
              {
                v101 += 7;
                v27 = v102++ >= 9;
                if (v27)
                {
                  v51 = 0;
                  goto LABEL_226;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v51 = 0;
LABEL_226:
          v154 = 88;
          goto LABEL_264;
        case 0xEu:
          v106 = 0;
          v107 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + v7[959]) |= 0x200u;
          while (2)
          {
            v108 = *v3;
            v109 = *(_QWORD *)(a2 + v108);
            if (v109 == -1 || v109 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v110 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v109);
              *(_QWORD *)(a2 + v108) = v109 + 1;
              v51 |= (unint64_t)(v110 & 0x7F) << v106;
              if (v110 < 0)
              {
                v106 += 7;
                v27 = v107++ >= 9;
                if (v27)
                {
                  v51 = 0;
                  goto LABEL_230;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v51 = 0;
LABEL_230:
          v154 = 80;
          goto LABEL_264;
        case 0xFu:
          v111 = 0;
          v112 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + v7[959]) |= 0x80u;
          while (2)
          {
            v113 = *v3;
            v114 = *(_QWORD *)(a2 + v113);
            if (v114 == -1 || v114 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v115 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v114);
              *(_QWORD *)(a2 + v113) = v114 + 1;
              v51 |= (unint64_t)(v115 & 0x7F) << v111;
              if (v115 < 0)
              {
                v111 += 7;
                v27 = v112++ >= 9;
                if (v27)
                {
                  v51 = 0;
                  goto LABEL_234;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v51 = 0;
LABEL_234:
          v154 = 64;
          goto LABEL_264;
        case 0x10u:
          v116 = 0;
          v117 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + v7[959]) |= 0x40u;
          while (2)
          {
            v118 = *v3;
            v119 = *(_QWORD *)(a2 + v118);
            if (v119 == -1 || v119 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v120 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v119);
              *(_QWORD *)(a2 + v118) = v119 + 1;
              v51 |= (unint64_t)(v120 & 0x7F) << v116;
              if (v120 < 0)
              {
                v116 += 7;
                v27 = v117++ >= 9;
                if (v27)
                {
                  v51 = 0;
                  goto LABEL_238;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v51 = 0;
LABEL_238:
          v154 = 56;
          goto LABEL_264;
        case 0x11u:
          v121 = 0;
          v122 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + v7[959]) |= 0x2000u;
          while (2)
          {
            v123 = *v3;
            v124 = *(_QWORD *)(a2 + v123);
            if (v124 == -1 || v124 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v125 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v124);
              *(_QWORD *)(a2 + v123) = v124 + 1;
              v51 |= (unint64_t)(v125 & 0x7F) << v121;
              if (v125 < 0)
              {
                v121 += 7;
                v27 = v122++ >= 9;
                if (v27)
                {
                  v51 = 0;
                  goto LABEL_242;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v51 = 0;
LABEL_242:
          v154 = 112;
          goto LABEL_264;
        case 0x12u:
          v126 = 0;
          v127 = 0;
          v128 = 0;
          *(_DWORD *)(a1 + v7[959]) |= 0x200000u;
          while (2)
          {
            v129 = *v3;
            v130 = *(_QWORD *)(a2 + v129);
            if (v130 == -1 || v130 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v131 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v130);
              *(_QWORD *)(a2 + v129) = v130 + 1;
              v128 |= (unint64_t)(v131 & 0x7F) << v126;
              if (v131 < 0)
              {
                v126 += 7;
                v27 = v127++ >= 9;
                if (v27)
                {
                  v128 = 0;
                  goto LABEL_246;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v128 = 0;
LABEL_246:
          v152 = v128 != 0;
          v153 = 155;
LABEL_247:
          *(_BYTE *)(a1 + v153) = v152;
          continue;
        case 0x13u:
          v132 = 0;
          v133 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + v7[959]) |= 0x4000u;
          while (2)
          {
            v134 = *v3;
            v135 = *(_QWORD *)(a2 + v134);
            if (v135 == -1 || v135 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v136 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v135);
              *(_QWORD *)(a2 + v134) = v135 + 1;
              v51 |= (unint64_t)(v136 & 0x7F) << v132;
              if (v136 < 0)
              {
                v132 += 7;
                v27 = v133++ >= 9;
                if (v27)
                {
                  v51 = 0;
                  goto LABEL_251;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v51 = 0;
LABEL_251:
          v154 = 120;
          goto LABEL_264;
        case 0x14u:
          v137 = 0;
          v138 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + v7[959]) |= 0x10000u;
          while (2)
          {
            v139 = *v3;
            v140 = *(_QWORD *)(a2 + v139);
            if (v140 == -1 || v140 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v141 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v140);
              *(_QWORD *)(a2 + v139) = v140 + 1;
              v51 |= (unint64_t)(v141 & 0x7F) << v137;
              if (v141 < 0)
              {
                v137 += 7;
                v27 = v138++ >= 9;
                if (v27)
                {
                  v51 = 0;
                  goto LABEL_255;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v51 = 0;
LABEL_255:
          v154 = 136;
          goto LABEL_264;
        case 0x15u:
          v142 = 0;
          v143 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + v7[959]) |= 0x8000u;
          while (2)
          {
            v144 = *v3;
            v145 = *(_QWORD *)(a2 + v144);
            if (v145 == -1 || v145 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v146 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v145);
              *(_QWORD *)(a2 + v144) = v145 + 1;
              v51 |= (unint64_t)(v146 & 0x7F) << v142;
              if (v146 < 0)
              {
                v142 += 7;
                v27 = v143++ >= 9;
                if (v27)
                {
                  v51 = 0;
                  goto LABEL_259;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v51 = 0;
LABEL_259:
          v154 = 128;
          goto LABEL_264;
        case 0x16u:
          v147 = 0;
          v148 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + v7[959]) |= 0x20000u;
          break;
        default:
          v36 = v9;
          v37 = v10;
          v38 = v7;
          v39 = v11;
          v40 = v12;
          v41 = a1;
          result = PBReaderSkipValueWithTag();
          v20 = &OBJC_IVAR___BRCPackageManifestReader__error;
          v13 = &OBJC_IVAR___BRCPackageManifestReader__error;
          a1 = v41;
          v14 = &OBJC_IVAR___BRCPackageManifestReader__error;
          v5 = (int *)MEMORY[0x1E0D82BC8];
          v12 = v40;
          v15 = &OBJC_IVAR___BRCPackageManifestReader__error;
          v11 = v39;
          v16 = &OBJC_IVAR___BRCPackageManifestReader__error;
          v7 = v38;
          v18 = &OBJC_IVAR___BRCPackageManifestReader__error;
          v10 = v37;
          v17 = &OBJC_IVAR___BRCPackageManifestReader__error;
          v9 = v36;
          v19 = &OBJC_IVAR___BRCPackageManifestReader__error;
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v149 = *v3;
        v150 = *(_QWORD *)(a2 + v149);
        if (v150 == -1 || v150 >= *(_QWORD *)(a2 + *v4))
          break;
        v151 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v150);
        *(_QWORD *)(a2 + v149) = v150 + 1;
        v51 |= (unint64_t)(v151 & 0x7F) << v147;
        if ((v151 & 0x80) == 0)
          goto LABEL_261;
        v147 += 7;
        v27 = v148++ >= 9;
        if (v27)
        {
          v51 = 0;
          goto LABEL_263;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_261:
      if (*(_BYTE *)(a2 + *v5))
        v51 = 0;
LABEL_263:
      v154 = 144;
LABEL_264:
      *(_QWORD *)(a1 + v154) = v51;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void __brc_pendingPlaceholder_block_invoke()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", "\x01?", 2);
  v1 = (void *)brc_pendingPlaceholder_filePlaceHolder;
  brc_pendingPlaceholder_filePlaceHolder = v0;

  v2 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", "\x1B?", 2);
  v3 = (void *)brc_pendingPlaceholder_pkgPlaceHolder;
  brc_pendingPlaceholder_pkgPlaceHolder = v2;

}

void sub_1CBFFC6F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBFFC974(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBFFCCC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  void *v20;

  objc_sync_exit(v20);
  _Unwind_Resume(a1);
}

void sub_1CBFFE2D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBFFE3C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBFFE630(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1CBFFEA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1CBFFEEC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1CC000554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1CC00460C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CC004E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__60(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__60(uint64_t a1)
{

}

void sub_1CC0056F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CC006824(_Unwind_Exception *a1)
{
  __brc_leave_section((uint64_t *)&STACK[0x208]);
  _Unwind_Resume(a1);
}

void sub_1CC006E1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1CC007298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  __brc_leave_section((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ubiquitousSharedItemOwnerNameComponents_cold_1(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 138412290;
  v3 = a1;
  _os_log_fault_impl(&dword_1CBD43000, a2, OS_LOG_TYPE_FAULT, "[CRIT] Assertion failed: ownerIdentity%@", (uint8_t *)&v2, 0xCu);
  OUTLINED_FUNCTION_2();
}

void _issueReadWriteSandboxExtensionForURL_cold_1()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1CBD43000, v0, v1, "[NOTIF] issued sandbox extension for %@%@");
  OUTLINED_FUNCTION_2();
}

void __br_notify_register_dispatch_block_invoke_cold_1(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 48);
  v4 = 136315394;
  v5 = v3;
  v6 = 2112;
  v7 = a2;
  _os_log_fault_impl(&dword_1CBD43000, log, OS_LOG_TYPE_FAULT, "[CRIT] UNREACHABLE: Failed to adopt persona for notification %s%@", (uint8_t *)&v4, 0x16u);
  OUTLINED_FUNCTION_2();
}

void file_id_from_control_file_cold_1()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_4_1(&dword_1CBD43000, v0, v1, "[ERROR] failed closing '%s'%@");
  OUTLINED_FUNCTION_2();
}

void _notificationCallback_cold_1()
{
  os_log_t v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_1();
  _os_log_error_impl(&dword_1CBD43000, v0, (os_log_type_t)0x90u, "[ERROR] No completion block for notification %@%@", v1, 0x16u);
  OUTLINED_FUNCTION_2();
}

void _notificationCallback_cold_2()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_0(&dword_1CBD43000, v0, v1, "[DEBUG] User picked %s response%@");
  OUTLINED_FUNCTION_2();
}

void setTypeFieldFromDBType_cold_1(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl(&dword_1CBD43000, a2, (os_log_type_t)0x90u, "[ERROR] Unexpected type!%@", (uint8_t *)&v2, 0xCu);
}

void BRCPrettyPrintEnumWithContext_cold_1(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0_2(&dword_1CBD43000, a2, a3, "[CRIT] UNREACHABLE: unknown color%@", a5, a6, a7, a8, 2u);
}

void BRCMigrateLegacyUbiquityRoot_cold_1()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_0(&dword_1CBD43000, v0, v1, "[DEBUG] ┏%llx deleting ubd's support files%@");
  OUTLINED_FUNCTION_2();
}

void BRCMigrateLegacyUbiquityRoot_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_0_2(&dword_1CBD43000, v0, v1, "[CRIT] UNREACHABLE: Failed removing root folder from the wrong account%@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_2();
}

void BRCMigrateLegacyUbiquityRoot_cold_3()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_0(&dword_1CBD43000, v0, v1, "[DEBUG] ┏%llx deleting root folder%@");
  OUTLINED_FUNCTION_2();
}

void BRCMigrateLegacyUbiquityRoot_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_0_2(&dword_1CBD43000, v0, v1, "[CRIT] We own both the root and had an old one renamed away\nWe have purged the old one, and will now reset%@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_2();
}

void BRCMigrateLegacyUbiquityRoot_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_0_2(&dword_1CBD43000, v0, v1, "[CRIT] UNREACHABLE: Failed to remove mobile documents directory not belonging to us%@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_2();
}

void BRCMigrateLegacyUbiquityRoot_cold_6()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_0(&dword_1CBD43000, v0, v1, "[DEBUG] ┏%llx migrating legacy ubiquity root%@");
  OUTLINED_FUNCTION_2();
}

void BRCRootIsOwnedByUbd_cold_1()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_0(&dword_1CBD43000, v0, v1, "[DEBUG] root has accountString %@%@");
  OUTLINED_FUNCTION_2();
}

void BRCRootIsOwnedByUbd_cold_2(int *a1, uint64_t a2, os_log_t log)
{
  int v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  int v23;
  int v24;
  _DWORD v25[2];
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  int v63;
  __int16 v64;
  uint64_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = *((unsigned __int16 *)a1 + 2);
  v5 = aPcDBLSW[v4 >> 12];
  v6 = *((_QWORD *)a1 + 1);
  v7 = *((unsigned __int16 *)a1 + 3);
  if ((v4 & 0x100) != 0)
    v8 = 114;
  else
    v8 = 45;
  if ((v4 & 0x80) != 0)
    v9 = 119;
  else
    v9 = 45;
  v10 = a1[4];
  v11 = a1[5];
  v12 = *((_QWORD *)a1 + 4);
  if ((v4 & 0x40) != 0)
    v13 = 120;
  else
    v13 = 45;
  v14 = *((_QWORD *)a1 + 6);
  if ((v4 & 0x20) != 0)
    v15 = 114;
  else
    v15 = 45;
  v16 = *((_QWORD *)a1 + 8);
  if ((v4 & 0x10) != 0)
    v17 = 119;
  else
    v17 = 45;
  if ((v4 & 8) != 0)
    v18 = 120;
  else
    v18 = 45;
  if ((v4 & 4) != 0)
    v19 = 114;
  else
    v19 = 45;
  if ((v4 & 2) != 0)
    v20 = 119;
  else
    v20 = 45;
  v21 = (v4 & 1) == 0;
  v22 = *((_QWORD *)a1 + 12);
  v23 = a1[29];
  v25[0] = 67114242;
  if (v21)
    v24 = 45;
  else
    v24 = 120;
  v25[1] = v3;
  v26 = 2048;
  v27 = v6;
  v28 = 1024;
  v29 = v5;
  v30 = 1024;
  v31 = v8;
  v32 = 1024;
  v33 = v9;
  v34 = 1024;
  v35 = v13;
  v36 = 1024;
  v37 = v15;
  v38 = 1024;
  v39 = v17;
  v40 = 1024;
  v41 = v18;
  v42 = 1024;
  v43 = v19;
  v44 = 1024;
  v45 = v20;
  v46 = 1024;
  v47 = v24;
  v48 = 1024;
  v49 = v7;
  v50 = 1024;
  v51 = v10;
  v52 = 1024;
  v53 = v11;
  v54 = 2048;
  v55 = v12;
  v56 = 2048;
  v57 = v14;
  v58 = 2048;
  v59 = v16;
  v60 = 2048;
  v61 = v22;
  v62 = 1024;
  v63 = v23;
  v64 = 2112;
  v65 = a2;
  _os_log_debug_impl(&dword_1CBD43000, log, OS_LOG_TYPE_DEBUG, "[DEBUG] root has a .ubd folder: deviceID:%u fileID:%llu mode:%c%c%c%c%c%c%c%c%c%c nlink:%u uid:%u gid:%u atime:%lu mtime:%lu ctime:%lu size:%llu flags:0x%x%@", (uint8_t *)v25, 0x98u);
}

void initUIDevice_cold_1()
{
  void *v0;
  NSObject *v1;
  int v2;
  char *v3;
  __int16 v4;
  void *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  brc_bread_crumbs();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  brc_default_log();
  v1 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    v2 = 136315394;
    v3 = dlerror();
    v4 = 2112;
    v5 = v0;
    _os_log_impl(&dword_1CBD43000, v1, OS_LOG_TYPE_DEFAULT, "[WARNING] Can't open UIKit : %s%@", (uint8_t *)&v2, 0x16u);
  }

  __assert_rtn("UIKitLibrary", "/Library/Caches/com.apple.xbs/Sources/CloudDocs_plugins/core/shared/containers/BRCContainerScheduler.m", 72, "Can't open UIKit");
}

void initUIDevice_cold_2()
{
  __assert_rtn("initUIDevice", "BRCContainerScheduler.m", 73, "classUIDevice");
}

void reuploadItemInContainer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_3_1(&dword_1CBD43000, v0, v1, "[DEBUG] We shouldn't re-upload in case of structure records failures%@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_2();
}

void reuploadItemInContainer_cold_2()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1CBD43000, v0, v1, "[DEBUG] item %@ doesn't need to be reuploaded%@");
  OUTLINED_FUNCTION_2();
}

void reuploadItemInContainer_cold_3()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1CBD43000, v0, v1, "[DEBUG] item %@ needs to be re-uploaded%@");
  OUTLINED_FUNCTION_2();
}

void markRecordNeedingRemapToNewParent_cold_1()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_1_1(&dword_1CBD43000, v0, v1, "[CRIT] UNREACHABLE: Couldn't find parentID for record %@%@");
  OUTLINED_FUNCTION_2();
}

void handleErrorForRecord_cold_1()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1CBD43000, v0, v1, "[DEBUG] handling error for %@%@");
  OUTLINED_FUNCTION_2();
}

void handleErrorForRecord_cold_2()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_1_1(&dword_1CBD43000, v0, v1, "[CRIT] UNREACHABLE: target item %@ is idle, should not throtlle it%@");
  OUTLINED_FUNCTION_2();
}

void remapItemIDToNewItemID_cold_1()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1CBD43000, v0, v1, "[DEBUG] We already remapped %@%@");
  OUTLINED_FUNCTION_2();
}

void __remapItemIDToNewItemID_block_invoke_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_0_2(&dword_1CBD43000, v0, v1, "[CRIT] Assertion failed: !item.isKnownByServer%@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_2();
}

void br_create_tables_initial_cold_1()
{
  id v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  OUTLINED_FUNCTION_9_0();
  objc_msgSend(v0, "lastError");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_6_0(&dword_1CBD43000, v2, v3, "[CRIT] UNREACHABLE: migration should work: %@%@", v4, v5, v6, v7, v8);

  OUTLINED_FUNCTION_6();
}

void br_update_tables_2_000_cold_1()
{
  id v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  OUTLINED_FUNCTION_14_1();
  objc_msgSend(v0, "lastError");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_7_2();
  OUTLINED_FUNCTION_6_0(&dword_1CBD43000, v2, v3, "[CRIT] UNREACHABLE: migration should work: %@%@", v4, v5, v6, v7, v8);

  OUTLINED_FUNCTION_6();
}

void br_update_tables_2_000_cold_2()
{
  id v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  OUTLINED_FUNCTION_14_1();
  objc_msgSend(v0, "lastError");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_7_2();
  OUTLINED_FUNCTION_6_0(&dword_1CBD43000, v2, v3, "[CRIT] UNREACHABLE: migration should work: %@%@", v4, v5, v6, v7, v8);

  OUTLINED_FUNCTION_6();
}

void br_update_tables_2_000_cold_3()
{
  id v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  OUTLINED_FUNCTION_14_1();
  objc_msgSend(v0, "lastError");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_7_2();
  OUTLINED_FUNCTION_6_0(&dword_1CBD43000, v2, v3, "[CRIT] UNREACHABLE: migration should work: %@%@", v4, v5, v6, v7, v8);

  OUTLINED_FUNCTION_6();
}

void br_update_tables_2_000_cold_4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint8_t *v5;
  NSObject *v6;

  OUTLINED_FUNCTION_10((uint64_t)a1, a2, a3, 5.778e-34);
  OUTLINED_FUNCTION_4_2(&dword_1CBD43000, v6, v4, "[CRIT] UNREACHABLE: migration should work: %@%@", v5);

}

void br_update_tables_2_000_cold_6()
{
  id v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  OUTLINED_FUNCTION_14_1();
  objc_msgSend(v0, "lastError");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_7_2();
  OUTLINED_FUNCTION_6_0(&dword_1CBD43000, v2, v3, "[CRIT] UNREACHABLE: migration should work: %@%@", v4, v5, v6, v7, v8);

  OUTLINED_FUNCTION_6();
}

void br_update_tables_4_004_cold_1()
{
  os_log_t v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_1();
  _os_log_debug_impl(&dword_1CBD43000, v0, OS_LOG_TYPE_DEBUG, "[DEBUG] Not need to remove %@ as it was not created yet%@", v1, 0x16u);
  OUTLINED_FUNCTION_2();
}

void br_update_tables_5_011_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_9(&dword_1CBD43000, v0, v1, "[ERROR] invalid owner in rowid_reservations, resetting%@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_2();
}

void br_update_tables_5_011_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_9(&dword_1CBD43000, v0, v1, "[ERROR] found duplicate app library, resetting%@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_2();
}

void br_update_tables_6_004_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_0_2(&dword_1CBD43000, v0, v1, "[CRIT] UNREACHABLE: incomplete migration for client_downloads%@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_2();
}

void br_update_tables_6_004_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_0_2(&dword_1CBD43000, v0, v1, "[CRIT] UNREACHABLE: incomplete migration for client_uploads%@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_2();
}

void br_update_tables_6_013_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_0_2(&dword_1CBD43000, v0, v1, "[CRIT] Corrupt DB state: some items belong to non-existing zones!%@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_2();
}

void br_update_tables_10_000_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_0_2(&dword_1CBD43000, v0, v1, "[CRIT] Should always be able to resolve synced folder root!%@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_2();
}

void __br_update_tables_7_000_block_invoke_cold_1()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_15(&dword_1CBD43000, v0, v1, "[ERROR] itemID of unexpected length %d%@");
  OUTLINED_FUNCTION_2();
}

void __br_update_tables_7_000_block_invoke_cold_2()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_15(&dword_1CBD43000, v0, v1, "[ERROR] parentID of unexpected length %d%@");
  OUTLINED_FUNCTION_2();
}

void __br_update_tables_10_000_block_invoke_cold_1()
{
  os_log_t v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_4_0();
  _os_log_debug_impl(&dword_1CBD43000, v0, OS_LOG_TYPE_DEBUG, "[DEBUG] we have already renamed the files on disk%@", v1, 0xCu);
  OUTLINED_FUNCTION_2();
}

void __br_update_tables_14_000_block_invoke_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_0_2(&dword_1CBD43000, v0, v1, "[CRIT] Assertion failed: physicalBounceNo && physicalBounceNo >= 2%@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_2();
}

void __recursive_table_recreate_schema_block_invoke_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_0_2(&dword_1CBD43000, v0, v1, "[CRIT] Assertion failed: argc == 1%@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_2();
}

void __recursive_table_recreate_schema_block_invoke_1150_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_0_2(&dword_1CBD43000, v0, v1, "[CRIT] Assertion failed: argc == 3%@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_2();
}

void __br_fixup_tables_7_002_block_invoke_2_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_0_2(&dword_1CBD43000, v0, v1, "[CRIT] Assertion failed: syncContextIdentifier%@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_2();
}

void __br_fixup_tables_7_002_block_invoke_2_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_0_2(&dword_1CBD43000, v0, v1, "[CRIT] Assertion failed: appLibraryOwner%@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_2();
}

void BRCUnmountAPFSSnapshot_cold_1(uint64_t a1, uint64_t a2, NSObject *a3)
{
  void *v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  void *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB35C8], "br_errorFromErrno");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = 138412802;
  v8 = a1;
  v9 = 2112;
  v10 = v6;
  v11 = 2112;
  v12 = a2;
  _os_log_debug_impl(&dword_1CBD43000, a3, OS_LOG_TYPE_DEBUG, "[DEBUG] Can't rmdir %@ - %@%@", (uint8_t *)&v7, 0x20u);

}

void _computeDelta_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_0_2(&dword_1CBD43000, v0, v1, "[CRIT] Assertion failed: delta >= 0%@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_2();
}

void brc_index_for_folder_type_cold_1(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0_2(&dword_1CBD43000, a2, a3, "[CRIT] Assertion failed: folderType >= BRCSyncedFolderTypeMin && folderType <= BRCSyncedFolderTypeMax%@", a5, a6, a7, a8, 2u);
}

void BRCGetAccountDSIDForMobileDocsRoot_cold_1(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  const char *v4;
  __int16 v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = 136315650;
  v4 = "com.apple.ubd.prsid";
  v5 = 2112;
  v6 = a1;
  v7 = 2112;
  v8 = a2;
  _os_log_fault_impl(&dword_1CBD43000, log, OS_LOG_TYPE_FAULT, "[CRIT] UNREACHABLE: %s xattr value '%@' has the wrong format%@", (uint8_t *)&v3, 0x20u);
}

void __br_notify_register_dispatch_block_invoke_cold_1_0(uint64_t a1)
{
  uint64_t v1;
  os_log_t v2;
  __int128 v3;

  LODWORD(v3) = 136315394;
  *(_QWORD *)((char *)&v3 + 4) = *(_QWORD *)(a1 + 48);
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_1_1(&dword_1CBD43000, v1, v2, "[CRIT] UNREACHABLE: Failed to adopt persona for notification %s%@", (_QWORD)v3, DWORD2(v3));
  OUTLINED_FUNCTION_2();
}

void BRCBundleServiceConnection_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_0_2(&dword_1CBD43000, v0, v1, "[CRIT] Assertion failed: ![BRCAccountsManager sharedManager].isInSyncBubble%@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_2();
}

void BRCSymlinkAt_cold_1()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_15(&dword_1CBD43000, v0, v1, "[ERROR] refusing to create a symlink with an empty target %{errno}d%@");
  OUTLINED_FUNCTION_2();
}

void BRCSymlinkAt_cold_2()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_15(&dword_1CBD43000, v0, v1, "[ERROR] refusing to create a symlink with an empty name %{errno}d%@");
  OUTLINED_FUNCTION_2();
}

void BRCMkContainerComponent_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_0_2(&dword_1CBD43000, v0, v1, "[CRIT] Assertion failed: errno != 0%@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_2();
}

void BRCMkContainerComponent_cold_2()
{
  NSObject *v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_3_2(&dword_1CBD43000, v0, (uint64_t)v0, "[DEBUG] unlinked unexpected file at '%@'%@", v1);
  OUTLINED_FUNCTION_2();
}

void BRCMkContainerComponent_cold_4()
{
  NSObject *v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_3_2(&dword_1CBD43000, v0, (uint64_t)v0, "[DEBUG] created '%@'%@", v1);
  OUTLINED_FUNCTION_2();
}

void BRCCloneAt_cold_1()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_15(&dword_1CBD43000, v0, v1, "[ERROR] Couldn't stat to set mtime %{errno}d%@");
  OUTLINED_FUNCTION_2();
}

void brc_copyfileat_status_cb_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_3_1(&dword_1CBD43000, v0, v1, "[DEBUG] skipping unsupported object in package%@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_2();
}

void brc_copyfileat_status_cb_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_3_1(&dword_1CBD43000, v0, v1, "[DEBUG] skipping compressed / unreadable object in package%@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_2();
}

void brc_copyfileat_status_cb_cold_3()
{
  os_log_t v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_4_0();
  _os_log_error_impl(&dword_1CBD43000, v0, (os_log_type_t)0x90u, "[ERROR] Couldn't clone package%@", v1, 0xCu);
  OUTLINED_FUNCTION_2();
}

void BRCFSetAttrList_cold_1(uint64_t a1, NSObject *a2)
{
  int *v3;
  uint64_t v4;
  uint8_t v5[24];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = __error();
  strerror(*v3);
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_3_2(&dword_1CBD43000, a2, v4, "[DEBUG] fsetattrlist failed: %s%@", v5);
}

void BRCIsFileIDLocked_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_0_2(&dword_1CBD43000, v0, v1, "[CRIT] Assertion failed: fileID%@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_2();
}

void BRCSetMtime_cold_2()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_15(&dword_1CBD43000, v0, v1, "[ERROR] Couldn't set mtime %{errno}d%@");
  OUTLINED_FUNCTION_2();
}

void BRCRemoveFolder_cold_1(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  const char *v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = 136315394;
  v4 = "BRCRemoveFolder";
  v5 = 2112;
  v6 = a1;
  OUTLINED_FUNCTION_3(&dword_1CBD43000, a2, a3, "[ERROR] Invalid call to %s with empty path%@", (uint8_t *)&v3);
  OUTLINED_FUNCTION_2();
}

void brc_task_tracker_create_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_0_2(&dword_1CBD43000, v0, v1, "[CRIT] UNREACHABLE: task tracker created with nil label%@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_2();
}

void brc_task_tracker_async_with_logs_and_qos_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_0_2(&dword_1CBD43000, v0, v1, "[CRIT] Assertion failed: task_tracker%@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_2();
}

void __brc_task_tracker_async_with_logs_and_qos_block_invoke_cold_1(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5;
  void *v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  void *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v6 = (void *)MEMORY[0x1D17A6DB0](*(_QWORD *)(a1 + 40));
  v7 = 136315650;
  v8 = v5;
  v9 = 2048;
  v10 = v6;
  v11 = 2112;
  v12 = a2;
  _os_log_debug_impl(&dword_1CBD43000, a3, OS_LOG_TYPE_DEBUG, "[DEBUG] task tracker (%s) has been cancelled, calling cancellation block <%p>%@", (uint8_t *)&v7, 0x20u);

}

void _brc_ipc_check_logged_status_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_0_2(&dword_1CBD43000, v0, v1, "[CRIT] UNREACHABLE: there should be a client%@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_2();
}

void _brc_ipc_check_logged_status_cold_3()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_4_1(&dword_1CBD43000, v0, v1, "[ERROR] Finishing Loading all accounts but %@ is still not loaded .. restarting bird%@");
  OUTLINED_FUNCTION_2();
}

void _brc_ipc_check_logged_status_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_3_1(&dword_1CBD43000, v0, v1, "[DEBUG] Notifying clients of account change because we could have denied xpc during low disk space%@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_2();
}

void _brc_ipc_check_logged_status_cold_5()
{
  uint64_t v0;
  uint64_t v1;
  os_log_t v2;
  __int128 v3;

  OUTLINED_FUNCTION_11_0(*MEMORY[0x1E0C80C00]);
  LODWORD(v3) = 134218242;
  *(_QWORD *)((char *)&v3 + 4) = v0;
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_0(&dword_1CBD43000, v1, v2, "[DEBUG] ┏%llx there is now enough disk space to work%@", (_QWORD)v3, DWORD2(v3));
  OUTLINED_FUNCTION_2();
}

void _brc_ipc_check_logged_status_cold_6()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_0_2(&dword_1CBD43000, v0, v1, "[CRIT] Assertion failed: session.accountHandler == handler%@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_2();
}

void _brc_ipc_check_logged_status_cold_7()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_3_1(&dword_1CBD43000, v0, v1, "[DEBUG] Couldn't find the account for the current persona. We may be in the middle of a log out request%@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_2();
}

void _brc_ipc_check_applibraries_access_cold_1()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1CBD43000, v0, v1, "[DEBUG] granting TCC access to non-sandboxed app %@%@");
  OUTLINED_FUNCTION_2();
}

void _brc_ipc_check_entitlement_cold_1()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_4_1(&dword_1CBD43000, v0, v1, "[ERROR] invalid entitlement for %@%@");
  OUTLINED_FUNCTION_2();
}

void _brc_ipc_check_client_privilege_cold_1()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_4_1(&dword_1CBD43000, v0, v1, "[ERROR] %@ is missing privilege%@");
  OUTLINED_FUNCTION_2();
}

void __brc_leave_section_cold_1(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = 134218242;
  v4 = a2;
  v5 = 2112;
  v6 = a1;
  _os_log_debug_impl(&dword_1CBD43000, log, OS_LOG_TYPE_DEBUG, "[DEBUG] ┗%llx %@", (uint8_t *)&v3, 0x16u);
}

void brc_power_is_ok_cold_1()
{
  NSObject *v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_3_2(&dword_1CBD43000, v0, (uint64_t)v0, "[DEBUG] Power level is now %s%@", v1);
  OUTLINED_FUNCTION_2();
}

void __br_notify_register_dispatch_block_invoke_cold_1_1()
{
  os_log_t v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_0_1();
  _os_log_fault_impl(&dword_1CBD43000, v0, OS_LOG_TYPE_FAULT, "[CRIT] UNREACHABLE: Failed to adopt persona for notification %s%@", v1, 0x16u);
  OUTLINED_FUNCTION_2();
}

void __br_notify_register_dispatch_block_invoke_cold_2(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = 138412546;
  v4 = a1;
  v5 = 2112;
  v6 = a2;
  _os_log_error_impl(&dword_1CBD43000, log, (os_log_type_t)0x90u, "[ERROR] won't restore persona: %@%@", (uint8_t *)&v3, 0x16u);
  OUTLINED_FUNCTION_2();
}

uint64_t AnalyticsIsEventUsed()
{
  return MEMORY[0x1E0D15408]();
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x1E0D15428]();
}

uint64_t BKSTerminateApplicationForReasonAndReportWithDescription()
{
  return MEMORY[0x1E0D00BE8]();
}

uint64_t BRCPrettyPrintBitmap()
{
  return MEMORY[0x1E0D10B10]();
}

uint64_t BRCPrettyPrintEnum()
{
  return MEMORY[0x1E0D10B18]();
}

uint64_t BRCXPCInterface()
{
  return MEMORY[0x1E0D10B48]();
}

uint64_t BRCXPCTokenInterface()
{
  return MEMORY[0x1E0D10B50]();
}

uint64_t BRContainerIconCKAssetKeyForName()
{
  return MEMORY[0x1E0D10B90]();
}

uint64_t BRContainerIconCKAssetKeys()
{
  return MEMORY[0x1E0D10B98]();
}

uint64_t BRContainerIconNameForCKAssetKey()
{
  return MEMORY[0x1E0D10BA0]();
}

uint64_t BRCopyEntitlementsForAuditToken()
{
  return MEMORY[0x1E0D10BC0]();
}

uint64_t BRCurrentPersonaIsDataSeparated()
{
  return MEMORY[0x1E0D10BC8]();
}

uint64_t BRCurrentPersonaMatchesID()
{
  return MEMORY[0x1E0D10BD0]();
}

uint64_t BREntitledApplicationIdentifier()
{
  return MEMORY[0x1E0D10C00]();
}

uint64_t BREntitledContainerIdentifiers()
{
  return MEMORY[0x1E0D10C08]();
}

uint64_t BREntitledContainerIdentifiersForProxy()
{
  return MEMORY[0x1E0D10C10]();
}

uint64_t BRGetLastUsedDate()
{
  return MEMORY[0x1E0D10C80]();
}

uint64_t BRGetMigrationStatusForDSID()
{
  return MEMORY[0x1E0D10C88]();
}

uint64_t BRIsDefaultDomain()
{
  return MEMORY[0x1E0D10C98]();
}

uint64_t BRIsEntitledForAnyiCloudService()
{
  return MEMORY[0x1E0D10CA0]();
}

uint64_t BRIsFPFSEnabled()
{
  return MEMORY[0x1E0D10CA8]();
}

uint64_t BRLocalizedFileSizeDescription()
{
  return MEMORY[0x1E0D10CB0]();
}

uint64_t BRMakeiWorkSharingOptions()
{
  return MEMORY[0x1E0D10CD0]();
}

uint64_t BRNotificationNameForServerAvailabilityChanges()
{
  return MEMORY[0x1E0D10CE0]();
}

uint64_t BRNotifyNameForForegroundChangeWithContainerID()
{
  return MEMORY[0x1E0D10CE8]();
}

uint64_t BRPerformWithPersonaAndError()
{
  return MEMORY[0x1E0D10D08]();
}

uint64_t BRPersonaSpecificName()
{
  return MEMORY[0x1E0D10D10]();
}

uint64_t BRPlatform()
{
  return MEMORY[0x1E0D10D18]();
}

uint64_t BRPostAccountTokenChangedNotification()
{
  return MEMORY[0x1E0D10D20]();
}

uint64_t BRSetLastUsedDate()
{
  return MEMORY[0x1E0D10D38]();
}

uint64_t BRSetMigrationStatusForDSIDInPref()
{
  return MEMORY[0x1E0D10D40]();
}

uint64_t BRVersion()
{
  return MEMORY[0x1E0D10E18]();
}

uint64_t BYSetupAssistantNeedsToRun()
{
  return MEMORY[0x1E0D8D6F8]();
}

void CCHmac(CCHmacAlgorithm algorithm, const void *key, size_t keyLength, const void *data, size_t dataLength, void *macOut)
{
  MEMORY[0x1E0C801D8](*(_QWORD *)&algorithm, key, keyLength, data, dataLength, macOut);
}

void CCHmacFinal(CCHmacContext *ctx, void *macOut)
{
  MEMORY[0x1E0C801F8](ctx, macOut);
}

void CCHmacInit(CCHmacContext *ctx, CCHmacAlgorithm algorithm, const void *key, size_t keyLength)
{
  MEMORY[0x1E0C80200](ctx, *(_QWORD *)&algorithm, key, keyLength);
}

void CCHmacUpdate(CCHmacContext *ctx, const void *data, size_t dataLength)
{
  MEMORY[0x1E0C80218](ctx, data, dataLength);
}

int CC_MD5_Final(unsigned __int8 *md, CC_MD5_CTX *c)
{
  return MEMORY[0x1E0C80310](md, c);
}

int CC_MD5_Init(CC_MD5_CTX *c)
{
  return MEMORY[0x1E0C80318](c);
}

int CC_MD5_Update(CC_MD5_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1E0C80320](c, data, *(_QWORD *)&len);
}

int CC_SHA1_Final(unsigned __int8 *md, CC_SHA1_CTX *c)
{
  return MEMORY[0x1E0C80330](md, c);
}

int CC_SHA1_Init(CC_SHA1_CTX *c)
{
  return MEMORY[0x1E0C80338](c);
}

int CC_SHA1_Update(CC_SHA1_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1E0C80340](c, data, *(_QWORD *)&len);
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1E0C80368](data, *(_QWORD *)&len, md);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C97C58]();
  return result;
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
  MEMORY[0x1E0C988B0](center, observer, callBack, name, object, suspensionBehavior);
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988B8]();
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
  MEMORY[0x1E0C98900](center, observer, name, object);
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return MEMORY[0x1E0C98A30](applicationID);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1E0C98A70](key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
  MEMORY[0x1E0C98A80](key, value, applicationID);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98BF8](rl, source, mode);
}

CFRunLoopMode CFRunLoopCopyCurrentMode(CFRunLoopRef rl)
{
  return (CFRunLoopMode)MEMORY[0x1E0C98C28](rl);
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x1E0C98C30]();
}

void CFRunLoopSourceInvalidate(CFRunLoopSourceRef source)
{
  MEMORY[0x1E0C98CE0](source);
}

void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding)
{
  MEMORY[0x1E0C98EE0](theString, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return (CFStringRef)MEMORY[0x1E0C99538](alloc, uuid);
}

SInt32 CFUserNotificationCancel(CFUserNotificationRef userNotification)
{
  return MEMORY[0x1E0C995A0](userNotification);
}

CFUserNotificationRef CFUserNotificationCreate(CFAllocatorRef allocator, CFTimeInterval timeout, CFOptionFlags flags, SInt32 *error, CFDictionaryRef dictionary)
{
  return (CFUserNotificationRef)MEMORY[0x1E0C995A8](allocator, flags, error, dictionary, timeout);
}

CFRunLoopSourceRef CFUserNotificationCreateRunLoopSource(CFAllocatorRef allocator, CFUserNotificationRef userNotification, CFUserNotificationCallBack callout, CFIndex order)
{
  return (CFRunLoopSourceRef)MEMORY[0x1E0C995B8](allocator, userNotification, callout, order);
}

SInt32 CFUserNotificationUpdate(CFUserNotificationRef userNotification, CFTimeInterval timeout, CFOptionFlags flags, CFDictionaryRef dictionary)
{
  return MEMORY[0x1E0C995F0](userNotification, flags, dictionary, timeout);
}

uint64_t CacheDeletePurgeAsync()
{
  return MEMORY[0x1E0D09B78]();
}

uint64_t CacheDeleteRegisterInfoCallbacks()
{
  return MEMORY[0x1E0D09B98]();
}

uint64_t FPExtendBookmarkForDocumentURL()
{
  return MEMORY[0x1E0CAA948]();
}

uint64_t FPUpdateLastUsedDate()
{
  return MEMORY[0x1E0CAAB00]();
}

FSEventStreamRef FSEventStreamCreate(CFAllocatorRef allocator, FSEventStreamCallback callback, FSEventStreamContext *context, CFArrayRef pathsToWatch, FSEventStreamEventId sinceWhen, CFTimeInterval latency, FSEventStreamCreateFlags flags)
{
  return (FSEventStreamRef)MEMORY[0x1E0CA5758](allocator, callback, context, pathsToWatch, sinceWhen, *(_QWORD *)&flags, latency);
}

void FSEventStreamFlushSync(FSEventStreamRef streamRef)
{
  MEMORY[0x1E0CA5760](streamRef);
}

void FSEventStreamInvalidate(FSEventStreamRef streamRef)
{
  MEMORY[0x1E0CA5768](streamRef);
}

void FSEventStreamRelease(FSEventStreamRef streamRef)
{
  MEMORY[0x1E0CA5770](streamRef);
}

void FSEventStreamSetDispatchQueue(FSEventStreamRef streamRef, dispatch_queue_t q)
{
  MEMORY[0x1E0CA5780](streamRef, q);
}

Boolean FSEventStreamStart(FSEventStreamRef streamRef)
{
  return MEMORY[0x1E0CA5790](streamRef);
}

void FSEventStreamStop(FSEventStreamRef streamRef)
{
  MEMORY[0x1E0CA5798](streamRef);
}

CFUUIDRef FSEventsCopyUUIDForDevice(dev_t dev)
{
  return (CFUUIDRef)MEMORY[0x1E0CA57A8](*(_QWORD *)&dev);
}

FSEventStreamEventId FSEventsGetCurrentEventId(void)
{
  return MEMORY[0x1E0CA57B0]();
}

uint64_t GSLibraryGetOrAllocateDocumentId()
{
  return MEMORY[0x1E0D25D10]();
}

uint64_t GSLibraryResolveDocumentId2()
{
  return MEMORY[0x1E0D25D20]();
}

uint64_t MKBDeviceUnlockedSinceBoot()
{
  return MEMORY[0x1E0D4E4A0]();
}

NSArray *__cdecl NSAllMapTableKeys(NSMapTable *table)
{
  return (NSArray *)MEMORY[0x1E0CB2850](table);
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1E0CB28A0](aClassName);
}

NSString *NSHomeDirectory(void)
{
  return (NSString *)MEMORY[0x1E0CB2C00]();
}

uint64_t NSRequestConcreteImplementation()
{
  return MEMORY[0x1E0CB3158]();
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  return (NSArray *)MEMORY[0x1E0CB3178](directory, domainMask, expandTilde);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1E0CB3190](aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1E0CB3200](aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1E0CB3230](aSelector);
}

NSString *NSUserName(void)
{
  return (NSString *)MEMORY[0x1E0CB3428]();
}

uint64_t OSVersion()
{
  return MEMORY[0x1E0D10FD8]();
}

uint64_t PBDataWriterWriteBOOLField()
{
  return MEMORY[0x1E0D82C10]();
}

uint64_t PBDataWriterWriteDataField()
{
  return MEMORY[0x1E0D82C28]();
}

uint64_t PBDataWriterWriteDoubleField()
{
  return MEMORY[0x1E0D82C38]();
}

uint64_t PBDataWriterWriteFloatField()
{
  return MEMORY[0x1E0D82C50]();
}

uint64_t PBDataWriterWriteInt32Field()
{
  return MEMORY[0x1E0D82C58]();
}

uint64_t PBDataWriterWriteInt64Field()
{
  return MEMORY[0x1E0D82C68]();
}

uint64_t PBDataWriterWriteStringField()
{
  return MEMORY[0x1E0D82C98]();
}

uint64_t PBDataWriterWriteSubmessage()
{
  return MEMORY[0x1E0D82CB0]();
}

uint64_t PBDataWriterWriteUint32Field()
{
  return MEMORY[0x1E0D82CB8]();
}

uint64_t PBDataWriterWriteUint64Field()
{
  return MEMORY[0x1E0D82CC0]();
}

uint64_t PBReaderPlaceMark()
{
  return MEMORY[0x1E0D82CE0]();
}

uint64_t PBReaderReadData()
{
  return MEMORY[0x1E0D82CF0]();
}

uint64_t PBReaderReadString()
{
  return MEMORY[0x1E0D82D00]();
}

uint64_t PBReaderRecallMark()
{
  return MEMORY[0x1E0D82D10]();
}

uint64_t PBReaderSkipValueWithTag()
{
  return MEMORY[0x1E0D82D28]();
}

int SecRandomCopyBytes(SecRandomRef rnd, size_t count, void *bytes)
{
  return MEMORY[0x1E0CD65A0](rnd, count, bytes);
}

uint64_t TCCAccessCheckAuditToken()
{
  return MEMORY[0x1E0DB0F90]();
}

uint64_t TCCAccessCopyBundleIdentifiersDisabledForService()
{
  return MEMORY[0x1E0DB0FA0]();
}

uint64_t TCCAccessCopyBundleIdentifiersForService()
{
  return MEMORY[0x1E0DB0FA8]();
}

uint64_t TCCAccessReset()
{
  return MEMORY[0x1E0DB1020]();
}

Boolean UTTypeConformsTo(CFStringRef inUTI, CFStringRef inConformsToUTI)
{
  return MEMORY[0x1E0CA5940](inUTI, inConformsToUTI);
}

CFStringRef UTTypeCreatePreferredIdentifierForTag(CFStringRef inTagClass, CFStringRef inTag, CFStringRef inConformingToUTI)
{
  return (CFStringRef)MEMORY[0x1E0CA5980](inTagClass, inTag, inConformingToUTI);
}

uint64_t _BRLocalizedStringWithFormat()
{
  return MEMORY[0x1E0D10FE8]();
}

uint64_t _BRRestorePersona()
{
  return MEMORY[0x1E0D10FF0]();
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

uint64_t _CFHTTPCookieStorageCreateWithProperties()
{
  return MEMORY[0x1E0C92DF0]();
}

uint64_t _CFURLCStringIsPromiseName()
{
  return MEMORY[0x1E0C9A5C0]();
}

uint64_t _CFURLCopyLogicalNameOfPromiseAtURL()
{
  return MEMORY[0x1E0C9A620]();
}

uint64_t _CFURLCopyPropertiesOfPromiseAtURL()
{
  return MEMORY[0x1E0C9A648]();
}

uint64_t _CFURLIsItemPromiseAtURL()
{
  return MEMORY[0x1E0C9A718]();
}

uint64_t _CFURLIsPromiseName()
{
  return MEMORY[0x1E0C9A720]();
}

uint64_t _CFURLPromiseCopyPhysicalURL()
{
  return MEMORY[0x1E0C9A730]();
}

uint64_t _CFURLPromiseCreateProperties()
{
  return MEMORY[0x1E0C9A740]();
}

uint64_t _CFURLPromiseSetPhysicalURL()
{
  return MEMORY[0x1E0C9A748]();
}

void _Exit(int a1)
{
  MEMORY[0x1E0C80980](*(_QWORD *)&a1);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

uint64_t __pthread_fchdir()
{
  return MEMORY[0x1E0C80BB8]();
}

uint64_t _br_parseUUIDString()
{
  return MEMORY[0x1E0D10FF8]();
}

os_activity_t _os_activity_create(void *dso, const char *description, os_activity_t activity, os_activity_flag_t flags)
{
  return (os_activity_t)MEMORY[0x1E0C80FC0](dso, description, activity, *(_QWORD *)&flags);
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81020](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _set_user_dir_suffix()
{
  return MEMORY[0x1E0C811A0]();
}

uint64_t abc_report_assert_with_signature()
{
  return MEMORY[0x1E0D11000]();
}

uint64_t abc_report_panic_with_signature()
{
  return MEMORY[0x1E0D11008]();
}

int access(const char *a1, int a2)
{
  return MEMORY[0x1E0C813D0](a1, *(_QWORD *)&a2);
}

int acl_create_entry_np(acl_t *acl_p, acl_entry_t *entry_p, int entry_index)
{
  return MEMORY[0x1E0C81420](acl_p, entry_p, *(_QWORD *)&entry_index);
}

int acl_free(void *obj_p)
{
  return MEMORY[0x1E0C81438](obj_p);
}

acl_t acl_get_fd_np(int fd, acl_type_t type)
{
  return (acl_t)MEMORY[0x1E0C81458](*(_QWORD *)&fd, *(_QWORD *)&type);
}

acl_t acl_init(int count)
{
  return (acl_t)MEMORY[0x1E0C814A0](*(_QWORD *)&count);
}

int acl_set_fd_np(int fd, acl_t acl, acl_type_t acl_type)
{
  return MEMORY[0x1E0C814B0](*(_QWORD *)&fd, acl, *(_QWORD *)&acl_type);
}

int acl_set_permset_mask_np(acl_entry_t entry_d, acl_permset_mask_t mask)
{
  return MEMORY[0x1E0C814D8](entry_d, mask);
}

int acl_set_qualifier(acl_entry_t entry_d, const void *tag_qualifier_p)
{
  return MEMORY[0x1E0C814E0](entry_d, tag_qualifier_p);
}

int acl_set_tag_type(acl_entry_t entry_d, acl_tag_t tag_type)
{
  return MEMORY[0x1E0C814E8](entry_d, *(_QWORD *)&tag_type);
}

uint64_t br_pacer_cancel()
{
  return MEMORY[0x1E0D11018]();
}

uint64_t br_pacer_create()
{
  return MEMORY[0x1E0D11020]();
}

uint64_t br_pacer_pretend_event_handler_fired()
{
  return MEMORY[0x1E0D11028]();
}

uint64_t br_pacer_resume()
{
  return MEMORY[0x1E0D11030]();
}

uint64_t br_pacer_set_event_handler()
{
  return MEMORY[0x1E0D11038]();
}

uint64_t br_pacer_signal()
{
  return MEMORY[0x1E0D11040]();
}

uint64_t br_pacer_signal_at_most_after_min_interval()
{
  return MEMORY[0x1E0D11048]();
}

uint64_t br_pacer_suspend()
{
  return MEMORY[0x1E0D11050]();
}

uint64_t br_pacer_test_cancel()
{
  return MEMORY[0x1E0D11058]();
}

uint64_t brc_append_system_info_to_message()
{
  return MEMORY[0x1E0D11068]();
}

uint64_t brc_bread_crumbs()
{
  return MEMORY[0x1E0D11078]();
}

uint64_t brc_current_date_nsec()
{
  return MEMORY[0x1E0D11080]();
}

uint64_t brc_default_log()
{
  return MEMORY[0x1E0D11088]();
}

uint64_t brc_interval_from_nsec()
{
  return MEMORY[0x1E0D11090]();
}

uint64_t brc_interval_to_nsec()
{
  return MEMORY[0x1E0D11098]();
}

uint64_t brc_is_before_deadline()
{
  return MEMORY[0x1E0D110A0]();
}

uint64_t brc_monotonic_time_diff_to_interval()
{
  return MEMORY[0x1E0D110A8]();
}

uint64_t brc_monotonic_time_now()
{
  return MEMORY[0x1E0D110B0]();
}

uint64_t brc_notifications_log()
{
  return MEMORY[0x1E0D110B8]();
}

uint64_t brc_notify_get_state()
{
  return MEMORY[0x1E0D110C0]();
}

uint64_t brc_notify_register_check()
{
  return MEMORY[0x1E0D110C8]();
}

uint64_t brc_notify_set_state_and_post()
{
  return MEMORY[0x1E0D110D0]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

int chflags(const char *a1, __uint32_t a2)
{
  return MEMORY[0x1E0C82630](a1, *(_QWORD *)&a2);
}

Method class_getInstanceMethod(Class cls, SEL name)
{
  return (Method)MEMORY[0x1E0DE7AA8](cls, name);
}

int clonefileat(int a1, const char *a2, int a3, const char *a4, uint32_t a5)
{
  return MEMORY[0x1E0C82680](*(_QWORD *)&a1, a2, *(_QWORD *)&a3, a4, *(_QWORD *)&a5);
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

int closedir(DIR *a1)
{
  return MEMORY[0x1E0C82698](a1);
}

uint64_t container_create_or_lookup_path_for_current_user()
{
  return MEMORY[0x1E0C82818]();
}

int copyfile(const char *from, const char *to, copyfile_state_t state, copyfile_flags_t flags)
{
  return MEMORY[0x1E0C82B18](from, to, state, *(_QWORD *)&flags);
}

copyfile_state_t copyfile_state_alloc(void)
{
  return (copyfile_state_t)MEMORY[0x1E0C82B20]();
}

int copyfile_state_free(copyfile_state_t a1)
{
  return MEMORY[0x1E0C82B28](a1);
}

int copyfile_state_set(copyfile_state_t s, uint32_t flag, const void *src)
{
  return MEMORY[0x1E0C82B38](s, *(_QWORD *)&flag, src);
}

uint64_t dirstat_np()
{
  return MEMORY[0x1E0C82BB8]();
}

void dispatch_activate(dispatch_object_t object)
{
  MEMORY[0x1E0C82BC0](object);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82BC8](when, queue, block);
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
  MEMORY[0x1E0C82BE8](queue);
}

void dispatch_assert_queue_not_V2(dispatch_queue_t queue)
{
  MEMORY[0x1E0C82BF8](queue);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

void dispatch_async_and_wait(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C08](queue, block);
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1E0C82C60](flags, block);
}

dispatch_block_t dispatch_block_create_with_qos_class(dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1E0C82C68](flags, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D10](group, queue, block);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D38](group, queue, block);
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82D48](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(dispatch_queue_attr_t attr)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E20](attr);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E28](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E50](label, attr, target);
}

const char *__cdecl dispatch_queue_get_label(dispatch_queue_t queue)
{
  return (const char *)MEMORY[0x1E0C82E58](queue);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA0](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

void dispatch_set_target_queue(dispatch_object_t object, dispatch_queue_t queue)
{
  MEMORY[0x1E0C82F08](object, queue);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x1E0C82F10](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

uintptr_t dispatch_source_get_data(dispatch_source_t source)
{
  return MEMORY[0x1E0C82F28](source);
}

uintptr_t dispatch_source_get_handle(dispatch_source_t source)
{
  return MEMORY[0x1E0C82F30](source);
}

void dispatch_source_merge_data(dispatch_source_t source, uintptr_t value)
{
  MEMORY[0x1E0C82F40](source, value);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F48](source, handler);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F58](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x1E0C82F78](source, start, interval, leeway);
}

intptr_t dispatch_source_testcancel(dispatch_source_t source)
{
  return MEMORY[0x1E0C82F80](source);
}

void dispatch_suspend(dispatch_object_t object)
{
  MEMORY[0x1E0C82F88](object);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

dispatch_workloop_t dispatch_workloop_create(const char *label)
{
  return (dispatch_workloop_t)MEMORY[0x1E0C82FD8](label);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1E0C83038]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1E0C83040](__path, *(_QWORD *)&__mode);
}

int dup(int a1)
{
  return MEMORY[0x1E0C83078](*(_QWORD *)&a1);
}

uint64_t dyld_get_active_platform()
{
  return MEMORY[0x1E0C830A0]();
}

uint64_t dyld_program_sdk_at_least()
{
  return MEMORY[0x1E0C83158]();
}

void exit(int a1)
{
  MEMORY[0x1E0C83278](*(_QWORD *)&a1);
}

int fchflags(int a1, __uint32_t a2)
{
  return MEMORY[0x1E0C832C8](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

int fchmod(int a1, mode_t a2)
{
  return MEMORY[0x1E0C832D0](*(_QWORD *)&a1, a2);
}

int fchmodat(int a1, const char *a2, mode_t a3, int a4)
{
  return MEMORY[0x1E0C832D8](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4);
}

int fclose(FILE *a1)
{
  return MEMORY[0x1E0C832F8](a1);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1E0C83300](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

int fcopyfile(int from_fd, int to_fd, copyfile_state_t a3, copyfile_flags_t flags)
{
  return MEMORY[0x1E0C83308](*(_QWORD *)&from_fd, *(_QWORD *)&to_fd, a3, *(_QWORD *)&flags);
}

FILE *__cdecl fdopen(int a1, const char *a2)
{
  return (FILE *)MEMORY[0x1E0C83318](*(_QWORD *)&a1, a2);
}

DIR *__cdecl fdopendir(int a1)
{
  return (DIR *)MEMORY[0x1E0C83320](*(_QWORD *)&a1);
}

int ffsctl(int a1, unint64_t a2, void *a3, unsigned int a4)
{
  return MEMORY[0x1E0C83378](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4);
}

int fgetattrlist(int a1, void *a2, void *a3, size_t a4, unsigned int a5)
{
  return MEMORY[0x1E0C83380](*(_QWORD *)&a1, a2, a3, a4, *(_QWORD *)&a5);
}

ssize_t fgetxattr(int fd, const char *name, void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x1E0C833A8](*(_QWORD *)&fd, name, value, size, *(_QWORD *)&position, *(_QWORD *)&options);
}

ssize_t flistxattr(int fd, char *namebuff, size_t size, int options)
{
  return MEMORY[0x1E0C833F8](*(_QWORD *)&fd, namebuff, size, *(_QWORD *)&options);
}

int flock(int a1, int a2)
{
  return MEMORY[0x1E0C83400](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

long double fmod(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C83440](__x, __y);
  return result;
}

float fmodf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C83448](a1, a2);
  return result;
}

uint64_t fp_shouldObfuscateFilenames()
{
  return MEMORY[0x1E0CAAD80]();
}

uint64_t fpfs_enable_fault_handling()
{
  return MEMORY[0x1E0CAADA8]();
}

uint64_t fpfs_recursive_prune_fault_ciconia()
{
  return MEMORY[0x1E0CAAE20]();
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x1E0C83488](*(_QWORD *)&a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x1E0C83490](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

int fremovexattr(int fd, const char *name, int options)
{
  return MEMORY[0x1E0C834E0](*(_QWORD *)&fd, name, *(_QWORD *)&options);
}

int fs_snapshot_create(int a1, const char *a2, uint32_t a3)
{
  return MEMORY[0x1E0C834F8](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

int fs_snapshot_delete(int a1, const char *a2, uint32_t a3)
{
  return MEMORY[0x1E0C83500](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

int fs_snapshot_list(int a1, attrlist *a2, void *a3, size_t a4, uint32_t a5)
{
  return MEMORY[0x1E0C83508](*(_QWORD *)&a1, a2, a3, a4, *(_QWORD *)&a5);
}

int fs_snapshot_mount(int a1, const char *a2, const char *a3, uint32_t a4)
{
  return MEMORY[0x1E0C83510](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4);
}

int fsctl(const char *a1, unint64_t a2, void *a3, unsigned int a4)
{
  return MEMORY[0x1E0C83528](a1, a2, a3, *(_QWORD *)&a4);
}

int fsetattrlist(int a1, void *a2, void *a3, size_t a4, unsigned int a5)
{
  return MEMORY[0x1E0C83540](*(_QWORD *)&a1, a2, a3, a4, *(_QWORD *)&a5);
}

int fsetxattr(int fd, const char *name, const void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x1E0C83548](*(_QWORD *)&fd, name, value, size, *(_QWORD *)&position, *(_QWORD *)&options);
}

ssize_t fsgetpath(char *a1, size_t a2, fsid_t *a3, uint64_t a4)
{
  return MEMORY[0x1E0C83550](a1, a2, a3, a4);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1E0C83560](*(_QWORD *)&a1, a2);
}

int fstatat(int a1, const char *a2, stat *a3, int a4)
{
  return MEMORY[0x1E0C83568](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4);
}

int fstatfs(int a1, statfs *a2)
{
  return MEMORY[0x1E0C83570](*(_QWORD *)&a1, a2);
}

int fts_close(FTS *a1)
{
  return MEMORY[0x1E0C835A0](a1);
}

FTS *__cdecl fts_open(char *const *a1, int a2, int (__cdecl *a3)(const FTSENT **, const FTSENT **))
{
  return (FTS *)MEMORY[0x1E0C835A8](a1, *(_QWORD *)&a2, a3);
}

FTSENT *__cdecl fts_read(FTS *a1)
{
  return (FTSENT *)MEMORY[0x1E0C835B0](a1);
}

int fts_set(FTS *a1, FTSENT *a2, int a3)
{
  return MEMORY[0x1E0C835B8](a1, a2, *(_QWORD *)&a3);
}

int futimes(int a1, const timeval *a2)
{
  return MEMORY[0x1E0C835D8](*(_QWORD *)&a1, a2);
}

int getattrlist(const char *a1, void *a2, void *a3, size_t a4, unsigned int a5)
{
  return MEMORY[0x1E0C83610](a1, a2, a3, a4, *(_QWORD *)&a5);
}

int getattrlistat(int a1, const char *a2, void *a3, void *a4, size_t a5, unint64_t a6)
{
  return MEMORY[0x1E0C83618](*(_QWORD *)&a1, a2, a3, a4, a5, a6);
}

uid_t geteuid(void)
{
  return MEMORY[0x1E0C83668]();
}

int getgrnam_r(const char *a1, group *a2, char *a3, size_t a4, group **a5)
{
  return MEMORY[0x1E0C83698](a1, a2, a3, a4, a5);
}

pid_t getpid(void)
{
  return MEMORY[0x1E0C83760]();
}

uid_t getuid(void)
{
  return MEMORY[0x1E0C83828]();
}

ssize_t getxattr(const char *path, const char *name, void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x1E0C83840](path, name, value, size, *(_QWORD *)&position, *(_QWORD *)&options);
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1E0C83A20]();
}

int linkat(int a1, const char *a2, int a3, const char *a4, int a5)
{
  return MEMORY[0x1E0C83B78](*(_QWORD *)&a1, a2, *(_QWORD *)&a3, a4, *(_QWORD *)&a5);
}

int lstat(const char *a1, stat *a2)
{
  return MEMORY[0x1E0C83C40](a1, a2);
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1E0C83C50]();
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F10](ptr, size, type_id);
}

int mbr_gid_to_uuid(gid_t gid, uuid_t uu)
{
  return MEMORY[0x1E0C84008](*(_QWORD *)&gid, uu);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void method_exchangeImplementations(Method m1, Method m2)
{
  MEMORY[0x1E0DE7B50](m1, m2);
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x1E0C84160](a1, a2);
}

int mkdirat(int a1, const char *a2, mode_t a3)
{
  return MEMORY[0x1E0C84168](*(_QWORD *)&a1, a2, a3);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1E0C843D8](*(_QWORD *)&token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1E0C84408](name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1E0DE7BF0](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7C38](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_end_catch(void)
{
  MEMORY[0x1E0DE7C80]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7CB0](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1E0DE7CD0](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

void objc_moveWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7D18](to, from);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F88](self, _cmd, newValue, offset);
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F90](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7FA0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FB8](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1E0DE7FC8](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1E0DE7FD0](obj);
}

void objc_terminate(void)
{
  MEMORY[0x1E0DE7FD8]();
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7FE0](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1E0C84480](a1, *(_QWORD *)&a2);
}

int open_dprotected_np(const char *a1, int a2, int a3, int a4, ...)
{
  return MEMORY[0x1E0C84488](a1, *(_QWORD *)&a2, *(_QWORD *)&a3, *(_QWORD *)&a4);
}

int openat(int a1, const char *a2, int a3, ...)
{
  return MEMORY[0x1E0C844A0](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

uint64_t openbyid_np()
{
  return MEMORY[0x1E0C844B8]();
}

void os_activity_scope_enter(os_activity_t activity, os_activity_scope_state_t state)
{
  MEMORY[0x1E0C84510](activity, state);
}

void os_activity_scope_leave(os_activity_scope_state_t state)
{
  MEMORY[0x1E0C84518](state);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1E0C84970]();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

uint64_t os_variant_has_internal_content()
{
  return MEMORY[0x1E0C849F0]();
}

uint64_t pql_sqlite3_value_object()
{
  return MEMORY[0x1E0DE81F0]();
}

uint64_t pql_sqlite3_value_pointer()
{
  return MEMORY[0x1E0DE81F8]();
}

int proc_pidpath(int pid, void *buffer, uint32_t buffersize)
{
  return MEMORY[0x1E0C84C50](*(_QWORD *)&pid, buffer, *(_QWORD *)&buffersize);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E18](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1E0C84E20](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E28](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E38](a1);
}

int pthread_mutexattr_destroy(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1E0C84E40](a1);
}

int pthread_mutexattr_init(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1E0C84E48](a1);
}

int pthread_mutexattr_settype(pthread_mutexattr_t *a1, int a2)
{
  return MEMORY[0x1E0C84E60](a1, *(_QWORD *)&a2);
}

int pthread_rwlock_rdlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1E0C84EA0](a1);
}

int pthread_rwlock_unlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1E0C84EB8](a1);
}

int pthread_rwlock_wrlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1E0C84EC0](a1);
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x1E0C84F80]();
}

void qsort_b(void *__base, size_t __nel, size_t __width, void *__compar)
{
  MEMORY[0x1E0C84F90](__base, __nel, __width, __compar);
}

dirent *__cdecl readdir(DIR *a1)
{
  return (dirent *)MEMORY[0x1E0C85008](a1);
}

ssize_t readlinkat(int a1, const char *a2, char *a3, size_t a4)
{
  return MEMORY[0x1E0C85020](*(_QWORD *)&a1, a2, a3, a4);
}

BOOL remove(const std::__fs::filesystem::path *__p, std::error_code *__ec)
{
  return MEMORY[0x1E0C850B8](__p, __ec);
}

int removefile(const char *path, removefile_state_t state, removefile_flags_t flags)
{
  return MEMORY[0x1E0C850C0](path, state, *(_QWORD *)&flags);
}

removefile_state_t removefile_state_alloc(void)
{
  return (removefile_state_t)MEMORY[0x1E0C850C8]();
}

int removefile_state_free(removefile_state_t a1)
{
  return MEMORY[0x1E0C850D0](a1);
}

int removefile_state_get(removefile_state_t state, uint32_t key, void *dst)
{
  return MEMORY[0x1E0C850D8](state, *(_QWORD *)&key, dst);
}

int removefile_state_set(removefile_state_t state, uint32_t key, const void *value)
{
  return MEMORY[0x1E0C850E0](state, *(_QWORD *)&key, value);
}

int renameatx_np(int a1, const char *a2, int a3, const char *a4, unsigned int a5)
{
  return MEMORY[0x1E0C85110](*(_QWORD *)&a1, a2, *(_QWORD *)&a3, a4, *(_QWORD *)&a5);
}

int rmdir(const char *a1)
{
  return MEMORY[0x1E0C85138](a1);
}

uint64_t sandbox_check()
{
  return MEMORY[0x1E0C85178]();
}

uint64_t sandbox_check_by_audit_token()
{
  return MEMORY[0x1E0C85180]();
}

int setiopolicy_np(int a1, int a2, int a3)
{
  return MEMORY[0x1E0C85340](*(_QWORD *)&a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
}

int setxattr(const char *path, const char *name, const void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x1E0C853A0](path, name, value, size, *(_QWORD *)&position, *(_QWORD *)&options);
}

void (__cdecl *__cdecl signal(int a1, void (__cdecl *a2)(int)))(int)
{
  return (void (__cdecl *)(int))MEMORY[0x1E0C853F0](*(_QWORD *)&a1, a2);
}

unsigned int sleep(unsigned int a1)
{
  return MEMORY[0x1E0C85438](*(_QWORD *)&a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

int sqlite3_bind_blob(sqlite3_stmt *a1, int a2, const void *a3, int n, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1E0DE8580](a1, *(_QWORD *)&a2, a3, *(_QWORD *)&n, a5);
}

int sqlite3_bind_int64(sqlite3_stmt *a1, int a2, sqlite3_int64 a3)
{
  return MEMORY[0x1E0DE85A8](a1, *(_QWORD *)&a2, a3);
}

int sqlite3_bind_null(sqlite3_stmt *a1, int a2)
{
  return MEMORY[0x1E0DE85B0](a1, *(_QWORD *)&a2);
}

int sqlite3_bind_parameter_count(sqlite3_stmt *a1)
{
  return MEMORY[0x1E0DE85B8](a1);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1E0DE85D8](a1, *(_QWORD *)&a2, a3, *(_QWORD *)&a4, a5);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return (const void *)MEMORY[0x1E0DE8660](a1, *(_QWORD *)&iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1E0DE8668](a1, *(_QWORD *)&iCol);
}

int sqlite3_column_count(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1E0DE8678](pStmt);
}

sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1E0DE8698](a1, *(_QWORD *)&iCol);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return (const unsigned __int8 *)MEMORY[0x1E0DE86B8](a1, *(_QWORD *)&iCol);
}

int sqlite3_column_type(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1E0DE86C8](a1, *(_QWORD *)&iCol);
}

const char *__cdecl sqlite3_errmsg(sqlite3 *a1)
{
  return (const char *)MEMORY[0x1E0DE8788](a1);
}

int sqlite3_file_control(sqlite3 *a1, const char *zDbName, int op, void *a4)
{
  return MEMORY[0x1E0DE87C0](a1, zDbName, *(_QWORD *)&op, a4);
}

void sqlite3_result_blob(sqlite3_context *a1, const void *a2, int a3, void (__cdecl *a4)(void *))
{
  MEMORY[0x1E0DE88B8](a1, a2, *(_QWORD *)&a3, a4);
}

void sqlite3_result_int(sqlite3_context *a1, int a2)
{
  MEMORY[0x1E0DE88F0](a1, *(_QWORD *)&a2);
}

void sqlite3_result_int64(sqlite3_context *a1, sqlite3_int64 a2)
{
  MEMORY[0x1E0DE88F8](a1, a2);
}

void sqlite3_result_null(sqlite3_context *a1)
{
  MEMORY[0x1E0DE8900](a1);
}

void sqlite3_result_text(sqlite3_context *a1, const char *a2, int a3, void (__cdecl *a4)(void *))
{
  MEMORY[0x1E0DE8910](a1, a2, *(_QWORD *)&a3, a4);
}

void sqlite3_result_value(sqlite3_context *a1, sqlite3_value *a2)
{
  MEMORY[0x1E0DE8920](a1, a2);
}

const char *__cdecl sqlite3_sql(sqlite3_stmt *pStmt)
{
  return (const char *)MEMORY[0x1E0DE8998](pStmt);
}

int sqlite3_stmt_status(sqlite3_stmt *a1, int op, int resetFlg)
{
  return MEMORY[0x1E0DE89C0](a1, *(_QWORD *)&op, *(_QWORD *)&resetFlg);
}

const void *__cdecl sqlite3_value_blob(sqlite3_value *a1)
{
  return (const void *)MEMORY[0x1E0DE8A18](a1);
}

int sqlite3_value_bytes(sqlite3_value *a1)
{
  return MEMORY[0x1E0DE8A20](a1);
}

int sqlite3_value_int(sqlite3_value *a1)
{
  return MEMORY[0x1E0DE8A48](a1);
}

sqlite3_int64 sqlite3_value_int64(sqlite3_value *a1)
{
  return MEMORY[0x1E0DE8A50](a1);
}

const unsigned __int8 *__cdecl sqlite3_value_text(sqlite3_value *a1)
{
  return (const unsigned __int8 *)MEMORY[0x1E0DE8A60](a1);
}

int sqlite3_value_type(sqlite3_value *a1)
{
  return MEMORY[0x1E0DE8A70](a1);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1E0C854D8](a1, a2);
}

int statfs(const char *a1, statfs *a2)
{
  return MEMORY[0x1E0C854E0](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1E0C85540](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1E0C85548](*(_QWORD *)&__errnum);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1E0C855A8](__s1, __s2, __n);
}

char *__cdecl strsignal(int __sig)
{
  return (char *)MEMORY[0x1E0C855F8](*(_QWORD *)&__sig);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85658](__str, __endptr, *(_QWORD *)&__base);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85698](__str, __endptr, *(_QWORD *)&__base);
}

int symlinkat(const char *a1, int a2, const char *a3)
{
  return MEMORY[0x1E0C85720](a1, *(_QWORD *)&a2, a3);
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1E0C85798](a1, *(_QWORD *)&a2, a3, a4, a5, a6);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1E0C857A0](a1, a2, a3, a4, a5);
}

void syslog(int a1, const char *a2, ...)
{
  MEMORY[0x1E0C857D0](*(_QWORD *)&a1, a2);
}

time_t time(time_t *a1)
{
  return MEMORY[0x1E0C85950](a1);
}

int unlink(const char *a1)
{
  return MEMORY[0x1E0C859B8](a1);
}

int unlinkat(int a1, const char *a2, int a3)
{
  return MEMORY[0x1E0C859C0](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

int unmount(const char *a1, int a2)
{
  return MEMORY[0x1E0C859C8](a1, *(_QWORD *)&a2);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x1E0C859E0](*(_QWORD *)&a1);
}

void uuid_generate(uuid_t out)
{
  MEMORY[0x1E0C85A18](out);
}

void uuid_generate_random(uuid_t out)
{
  MEMORY[0x1E0C85A20](out);
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
  MEMORY[0x1E0C85A40](uu, out);
}

void uuid_unparse_upper(const uuid_t uu, uuid_string_t out)
{
  MEMORY[0x1E0C85A50](uu, out);
}

uint64_t voucher_adopt()
{
  return MEMORY[0x1E0C85B10]();
}

uint64_t voucher_process_can_use_arbitrary_personas()
{
  return MEMORY[0x1E0C85B70]();
}

xattr_flags_t xattr_flags_from_name(const char *a1)
{
  return MEMORY[0x1E0C85D50](a1);
}

int xattr_intent_with_flags(xattr_operation_intent_t a1, xattr_flags_t a2)
{
  return MEMORY[0x1E0C85D58](*(_QWORD *)&a1, a2);
}

char *__cdecl xattr_name_without_flags(const char *a1)
{
  return (char *)MEMORY[0x1E0C85D68](a1);
}

xpc_activity_state_t xpc_activity_get_state(xpc_activity_t activity)
{
  return MEMORY[0x1E0C85D90](activity);
}

void xpc_activity_register(const char *identifier, xpc_object_t criteria, xpc_activity_handler_t handler)
{
  MEMORY[0x1E0C85D98](identifier, criteria, handler);
}

BOOL xpc_activity_set_state(xpc_activity_t activity, xpc_activity_state_t state)
{
  return MEMORY[0x1E0C85DB8](activity, state);
}

BOOL xpc_activity_should_defer(xpc_activity_t activity)
{
  return MEMORY[0x1E0C85DC8](activity);
}

void xpc_activity_unregister(const char *identifier)
{
  MEMORY[0x1E0C85DD0](identifier);
}

BOOL xpc_BOOL_get_value(xpc_object_t xBOOL)
{
  return MEMORY[0x1E0C85F00](xBOOL);
}

uint64_t xpc_copy_entitlement_for_token()
{
  return MEMORY[0x1E0C86120]();
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C86208](keys, values, count);
}

int64_t xpc_dictionary_get_int64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1E0C862A0](xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
  MEMORY[0x1E0C86310](xdict, key, value);
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
  MEMORY[0x1E0C86360](xdict, key, value);
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
  MEMORY[0x1E0C86390](xdict, key, string);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1E0C86520](object);
}

void xpc_set_event_stream_handler(const char *stream, dispatch_queue_t targetq, xpc_handler_t handler)
{
  MEMORY[0x1E0C866E8](stream, targetq, handler);
}

