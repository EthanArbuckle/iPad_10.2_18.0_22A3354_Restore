@implementation CAMViewfinderViewController

- (void)_updatePropertiesForCaptureConfiguration:(id)a3 conflictingControlConfiguration:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  double v9;
  double v10;
  void *v11;
  NSMutableDictionary *v12;
  NSMutableDictionary *exposureBiasesByMode;
  void *v14;
  NSMutableArray *v15;
  NSMutableArray *semanticStyles;
  void *v17;
  double v18;
  void *v19;
  int v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  id v24;
  void *v25;
  id v26;

  v26 = a3;
  v6 = a4;
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  self->__desiredFlashMode = objc_msgSend(v6, "desiredFlashMode");
  self->__desiredHDRMode = objc_msgSend(v6, "desiredHDRMode");
  self->__flashAndHDRConflictingControl = objc_msgSend(v6, "flashAndHDRConflictingControl");
  self->__desiredLivePhotoMode = objc_msgSend(v6, "desiredLivePhotoMode");
  self->__desiredRAWMode = objc_msgSend(v6, "desiredRAWMode");
  self->__desiredPhotoResolution = objc_msgSend(v6, "desiredPhotoResolution");
  self->__photoFormatConflicts = objc_msgSend(v6, "photoFormatConflicts");
  self->__desiredMacroMode = objc_msgSend(v6, "desiredMacroMode");
  self->__desiredProResVideoMode = objc_msgSend(v26, "proResVideoMode");
  +[CAMCaptureConfiguration captureGraphConfigurationUsingConfiguration:outputToExternalStorage:](CAMCaptureConfiguration, "captureGraphConfigurationUsingConfiguration:outputToExternalStorage:", v26, -[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _setCurrentGraphConfiguration:](self, "_setCurrentGraphConfiguration:", v8);
  self->__resolvedFlashMode = objc_msgSend(v26, "flashMode");
  self->__resolvedHDRMode = objc_msgSend(v26, "HDRMode");
  self->__desiredTorchMode = objc_msgSend(v26, "torchMode");
  self->__resolvedTorchMode = -[CAMViewfinderViewController _resolvedTorchModeForGraphConfiguration:](self, "_resolvedTorchModeForGraphConfiguration:", v8);
  self->__resolvedTimerDuration = objc_msgSend(v26, "timerDuration");
  self->_photoModeAspectRatioCrop = objc_msgSend(v26, "photoModeAspectRatioCrop");
  self->__photoModeEffectFilterType = objc_msgSend(v26, "photoModeEffectFilterType");
  self->__squareModeEffectFilterType = objc_msgSend(v26, "squareModeEffectFilterType");
  self->__portraitModeEffectFilterType = objc_msgSend(v26, "portraitModeEffectFilterType");
  self->__resolvedLivePhotoMode = objc_msgSend(v26, "irisMode");
  self->__portraitModeLightingEffectType = objc_msgSend(v26, "portraitModeLightingEffectType");
  objc_msgSend(v26, "portraitModeApertureValue");
  self->__portraitModeApertureValue = v9;
  objc_msgSend(v26, "portraitModeIntensityValue");
  self->__portraitModeIntensityValue = v10;
  objc_msgSend(v26, "exposureBiasesByMode");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (NSMutableDictionary *)objc_msgSend(v11, "mutableCopy");
  exposureBiasesByMode = self->__exposureBiasesByMode;
  self->__exposureBiasesByMode = v12;

  self->__resolvedMacroMode = objc_msgSend(v26, "macroMode");
  self->__resolvedPhotoResolution = objc_msgSend(v26, "photoResolution");
  self->__resolvedRAWMode = objc_msgSend(v26, "rawMode");
  objc_msgSend(v26, "semanticStyles");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (NSMutableArray *)objc_msgSend(v14, "mutableCopy");
  semanticStyles = self->__semanticStyles;
  self->__semanticStyles = v15;

  self->__selectedSemanticStyleIndex = objc_msgSend(v26, "selectedSemanticStyleIndex");
  self->__smartStyleSystemStyleIndex = objc_msgSend(v26, "smartStyleSystemStyleIndex");
  self->__desiredVideoStabilizationMode = objc_msgSend(v26, "videoStabilizationMode");
  -[CAMViewfinderViewController _motionController](self, "_motionController");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _defaultZoomFactorForGraphConfiguration:captureOrientation:](self, "_defaultZoomFactorForGraphConfiguration:captureOrientation:", v8, objc_msgSend(v17, "captureOrientation"));
  self->__cachedVideoZoomFactor = v18;

  self->__spatialVideoEnabled = objc_msgSend(v26, "spatialVideoEnabled");
  -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
  -[CAMViewfinderViewController _resetPortraitModeApertureValueIfNeededForGraphConfiguration:zoomFactor:](self, "_resetPortraitModeApertureValueIfNeededForGraphConfiguration:zoomFactor:", v8);
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v19, "isLowLightSupported");

  if (v20)
  {
    self->__desiredLowLightControlMode = objc_msgSend(v6, "desiredLowLightControlMode");
    v21 = objc_msgSend(v6, "lowLightConflicts");
    self->__lowLightConflicts = v21;
    self->__resolvedLowLightControlMode = +[CAMConflictingControlConfiguration resolveDesiredLowLightControlMode:lowLightConflicts:resolvedFlashMode:](CAMConflictingControlConfiguration, "resolveDesiredLowLightControlMode:lowLightConflicts:resolvedFlashMode:", self->__desiredLowLightControlMode, v21, self->__resolvedFlashMode);
  }
  self->__depthEffectEnabledFromSuggestion = objc_msgSend(v26, "optionalDepthEffectEnabled");
  self->encoding = objc_msgSend(v7, "photoFormatControlSecondaryFormat");
  self->resolution = v22;
  self->__lastZoomInteractionType = 0;
  self->__spatialModeHasVideoSelected = objc_msgSend(v7, "spatialModeHasVideoSelected");
  objc_msgSend(v7, "preferredDrawerControlByMode");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  if (v23)
  {
    objc_msgSend(v7, "preferredDrawerControlByMode");
    v24 = (id)objc_claimAutoreleasedReturnValue();
    v25 = (void *)objc_msgSend(v24, "mutableCopy");
    -[CAMViewfinderViewController set_preferredControlToOpenInDrawerForMode:](self, "set_preferredControlToOpenInDrawerForMode:", v25);

  }
  else
  {
    v24 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    -[CAMViewfinderViewController set_preferredControlToOpenInDrawerForMode:](self, "set_preferredControlToOpenInDrawerForMode:", v24);
  }

}

- (int64_t)_autorotationStyleForLayoutStyle:(int64_t)a3
{
  void *v4;
  int v5;
  int64_t v6;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isSplitScreenSupported");
  if ((unint64_t)(a3 - 1) >= 3)
  {
    if (a3 != 4 && a3)
    {
      v6 = 0;
    }
    else if (v5)
    {
      v6 = 2;
    }
    else
    {
      v6 = 1;
    }
  }
  else
  {
    v6 = 2;
  }

  return v6;
}

- (BOOL)isEmulatingImagePicker
{
  return -[CAMViewfinderViewController emulationMode](self, "emulationMode") != 0;
}

- (int64_t)emulationMode
{
  return self->_emulationMode;
}

- (CAMCallStatusMonitor)_callStatusMonitor
{
  return self->__callStatusMonitor;
}

- (unint64_t)supportedInterfaceOrientations
{
  return -[CAMViewfinderViewController _supportedInterfaceOrientationsForLayoutStyle:wantsTextAnalysis:](self, "_supportedInterfaceOrientationsForLayoutStyle:wantsTextAnalysis:", -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle"), -[CAMViewfinderViewController _wantsVisualTextAnalysis](self, "_wantsVisualTextAnalysis"));
}

- (int64_t)_layoutStyle
{
  return self->__layoutStyle;
}

- (BOOL)shouldAutorotate
{
  void *v3;
  char v4;
  char v5;

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isCapturingVideo");
  if (-[CAMViewfinderViewController autorotationStyle](self, "autorotationStyle") == 2)
    v5 = v4 ^ 1;
  else
    v5 = 1;

  return v5;
}

- (CUCaptureController)_captureController
{
  return self->__captureController;
}

- (int64_t)_internalAutorotationStyle
{
  return self->__internalAutorotationStyle;
}

- (BOOL)prefersStatusBarHidden
{
  void *v2;
  void *v3;
  char v4;

  -[CAMViewfinderViewController _cameraRollController](self, "_cameraRollController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
    v4 = objc_msgSend(v2, "prefersPresentingStatusbarHidden");
  else
    v4 = 1;

  return v4;
}

- (CAMCameraRollController)_cameraRollController
{
  return self->__cameraRollController;
}

- (unint64_t)preferredScreenEdgesDeferringSystemGestures
{
  unint64_t v3;
  void *v5;
  void *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  v3 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
  if (v3 > 3 || v3 == 1)
    return 0;
  -[CAMViewfinderViewController view](self, "view");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "window");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = CAMInterfaceOrientationForWindow(v6);

  v8 = 1;
  v9 = 4;
  if (v7 != 1)
  {
    v9 = 0;
    v8 = 0;
  }
  if (v7 == 2)
    v10 = 1;
  else
    v10 = v9;
  if (v7 == 2)
    v11 = 4;
  else
    v11 = v8;
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v12)
    v13 = v11;
  else
    v13 = 0;
  return v13 | v10;
}

- (void)loadView
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  CAMFullscreenViewfinder *v8;
  void *v9;
  CAMViewfinderView *v10;
  int64_t v11;
  CAMTopBar *v12;
  CAMTopBar *v13;
  CAMTopBar *topBar;
  CAMBottomBar *v15;
  CAMBottomBar *bottomBar;
  NSString *v17;
  _BOOL4 IsAccessibilityCategory;
  CAMBarsAccessibilityHUDManager *v19;
  CAMBarsAccessibilityHUDManager *v20;
  void *v21;
  void *v22;
  double v23;
  void *v24;
  double v25;
  _BOOL8 v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  NSString *v42;
  _BOOL4 v43;
  CAMBarsAccessibilityHUDManager *v44;
  PUReviewScreenDoneButton *v45;
  PUReviewScreenDoneButton *doneButton;
  PUReviewScreenDoneButton *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  CAMModeDial *v60;
  CAMModeDial *modeDial;
  CAMImageWell *v62;
  CAMImageWell *imageWell;
  CAMFlipButton *v64;
  CAMFlipButton *flipButton;
  CAMZoomControl *v66;
  CAMZoomControl *zoomControl;
  CAMZoomSlider *v68;
  CAMZoomSlider *zoomSlider;
  CAMDynamicShutterControl *v70;
  CAMDynamicShutterControl *dynamicShutterControl;
  CAMCreativeCameraButton *v72;
  CAMCreativeCameraButton *creativeCameraButton;
  void *v74;
  id v75;

  -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
  v75 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v75, "previewView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _setAccessibilityHUDManagers:](self, "_setAccessibilityHUDManagers:", v4);
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "videoPreviewLayer");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "setVideoPreviewLayer:", v7);
  if (!-[CAMViewfinderViewController isShowingStandardControls](self, "isShowingStandardControls"))
  {
    v11 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
LABEL_8:
    v10 = -[CAMViewfinderView initWithLayoutStyle:]([CAMViewfinderView alloc], "initWithLayoutStyle:", v11);
    -[CAMViewfinderView setPreviewView:](v10, "setPreviewView:", v3);
    -[CAMViewfinderView setTopBar:](v10, "setTopBar:", self->__topBar);
    -[CAMViewfinderView setBottomBar:](v10, "setBottomBar:", self->__bottomBar);
    -[CAMViewfinderView setVisibilityDelegate:](v10, "setVisibilityDelegate:", self);
    -[CAMViewfinderView setUseCreativeControls:](v10, "setUseCreativeControls:", self->__useCreativeCameraControls);
    -[CAMViewfinderViewController _transitionController](self, "_transitionController");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "setTarget:", v10);

    -[CAMViewfinderViewController setView:](self, "setView:", v10);
    goto LABEL_15;
  }
  if (!objc_msgSend(v5, "isCTMSupported"))
  {
    v11 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
    v12 = [CAMTopBar alloc];
    v13 = -[CAMTopBar initWithFrame:](v12, "initWithFrame:", *MEMORY[0x1E0C9D648], *(double *)(MEMORY[0x1E0C9D648] + 8), *(double *)(MEMORY[0x1E0C9D648] + 16), *(double *)(MEMORY[0x1E0C9D648] + 24));
    topBar = self->__topBar;
    self->__topBar = v13;

    -[CAMTopBar setStyle:](self->__topBar, "setStyle:", 0);
    -[CAMTopBar setVisibilityUpdateDelegate:](self->__topBar, "setVisibilityUpdateDelegate:", self);
    v15 = -[CAMBottomBar initWithLayoutStyle:]([CAMBottomBar alloc], "initWithLayoutStyle:", v11);
    bottomBar = self->__bottomBar;
    self->__bottomBar = v15;

    -[CAMBottomBar setVisibilityUpdateDelegate:](self->__bottomBar, "setVisibilityUpdateDelegate:", self);
    -[CAMViewfinderViewController currentContentSize](self, "currentContentSize");
    v17 = (NSString *)objc_claimAutoreleasedReturnValue();
    IsAccessibilityCategory = UIContentSizeCategoryIsAccessibilityCategory(v17);

    if (IsAccessibilityCategory)
    {
      v19 = -[CAMBarsAccessibilityHUDManager initWithView:delegate:cancelsTouchesInView:]([CAMBarsAccessibilityHUDManager alloc], "initWithView:delegate:cancelsTouchesInView:", self->__topBar, self, 1);
      objc_msgSend(v4, "addObject:", v19);

      v20 = -[CAMBarsAccessibilityHUDManager initWithView:delegate:cancelsTouchesInView:]([CAMBarsAccessibilityHUDManager alloc], "initWithView:delegate:cancelsTouchesInView:", self->__bottomBar, self, 0);
      objc_msgSend(v4, "addObject:", v20);

    }
    goto LABEL_8;
  }
  -[CAMViewfinderViewController _createMetalContextIfNecessary](self, "_createMetalContextIfNecessary");
  v8 = [CAMFullscreenViewfinder alloc];
  -[CAMViewfinderViewController _metalContext](self, "_metalContext");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = -[CAMFullscreenViewfinder initWithMetalContext:useCreativeCameraControls:](v8, "initWithMetalContext:useCreativeCameraControls:", v9, -[CAMViewfinderViewController _useCreativeCameraControls](self, "_useCreativeCameraControls"));

  -[CAMViewfinderView setPreviewView:](v10, "setPreviewView:", v3);
  -[CAMViewfinderView setDelegate:](v10, "setDelegate:", self);
  -[CAMViewfinderViewController setView:](self, "setView:", v10);
  -[CAMViewfinderViewController _updateViewfinderMaterialAnimated:](self, "_updateViewfinderMaterialAnimated:", 0);
  if (-[CAMViewfinderViewController _shouldUseZoomControlInsteadOfSlider](self, "_shouldUseZoomControlInsteadOfSlider"))
  {
    -[CAMViewfinderView setZoomStyle:](v10, "setZoomStyle:", 1);
  }
  else
  {
    -[CAMViewfinderView setZoomStyle:](v10, "setZoomStyle:", 2);
    -[CAMViewfinderView zoomSlider](v10, "zoomSlider");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v23) = 0;
    objc_msgSend(v22, "setMinimumValue:", v23);

    -[CAMViewfinderView zoomSlider](v10, "zoomSlider");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v25) = 1.0;
    objc_msgSend(v24, "setMaximumValue:", v25);

    v26 = -[CAMViewfinderViewController _shouldEnableZoomSlider](self, "_shouldEnableZoomSlider");
    -[CAMViewfinderView zoomSlider](v10, "zoomSlider");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "setEnabled:", v26);

    -[CAMViewfinderView zoomSlider](v10, "zoomSlider");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "setAlpha:", 0.0);

  }
  -[CAMViewfinderView flipButton](v10, "flipButton");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "addTarget:action:forControlEvents:", self, sel__handleFlipButtonTouchDown_, 1);

  -[CAMViewfinderView flipButton](v10, "flipButton");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "addTarget:action:forControlEvents:", self, sel__handleFlipButtonReleased_, 64);

  -[CAMViewfinderView imageWell](v10, "imageWell");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "addTarget:action:forControlEvents:", self, sel__handleImageWellReleased_, 64);

  -[CAMViewfinderView imageWell](v10, "imageWell");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v32, "addTarget:action:forControlEvents:", self, sel__handleImageWellPressed_, 1);

  -[CAMViewfinderView modeDial](v10, "modeDial");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v33, "addTarget:action:forControlEvents:", self, sel__handleModeDialTouchDown_, 1);

  -[CAMViewfinderView modeDial](v10, "modeDial");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v34, "addTarget:action:forControlEvents:", self, sel__handleModeDialValueChanged_, 4096);

  -[CAMViewfinderView zoomControl](v10, "zoomControl");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "addTarget:action:forControlEvents:", self, sel__handleTouchDownForZoomControl_, 1);

  -[CAMViewfinderView zoomSlider](v10, "zoomSlider");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v36, "addTarget:action:forControlEvents:", self, sel__handleTouchDownForZoomSlider_, 1);

  -[CAMViewfinderView zoomSlider](v10, "zoomSlider");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v37, "addTarget:action:forControlEvents:", self, sel__zoomSliderValueDidChange_forEvent_, 4096);

  -[CAMViewfinderView creativeCameraButton](v10, "creativeCameraButton");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v38, "addTarget:action:forControlEvents:", self, sel__handleCreativeCameraButtonPressed_, 1);

  -[CAMViewfinderView creativeCameraButton](v10, "creativeCameraButton");
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v39, "addTarget:action:forControlEvents:", self, sel__handleCreativeCameraButtonReleased_, 64);

  -[CAMViewfinderView creativeCameraButton](v10, "creativeCameraButton");
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v40, "addTarget:action:forControlEvents:", self, sel__handleCreativeCameraButtonTouchAttemptedWhileDisabled_, 0x1000000);

  -[CAMViewfinderView photoVideoModeSwitch](v10, "photoVideoModeSwitch");
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v41, "addTarget:action:forControlEvents:", self, sel__handlePhotoVideoModeSwitchValueChanged_, 4096);

  -[CAMViewfinderViewController currentContentSize](self, "currentContentSize");
  v42 = (NSString *)objc_claimAutoreleasedReturnValue();
  v43 = UIContentSizeCategoryIsAccessibilityCategory(v42);

  if (v43)
  {
    v44 = -[CAMBarsAccessibilityHUDManager initWithView:delegate:cancelsTouchesInView:]([CAMBarsAccessibilityHUDManager alloc], "initWithView:delegate:cancelsTouchesInView:", v10, self, 1);
    objc_msgSend(v4, "addObject:", v44);

  }
  if (-[CAMViewfinderViewController _useCreativeCameraControls](self, "_useCreativeCameraControls"))
  {
    objc_msgSend(MEMORY[0x1E0D7D238], "doneButton");
    v45 = (PUReviewScreenDoneButton *)objc_claimAutoreleasedReturnValue();
    doneButton = self->__doneButton;
    self->__doneButton = v45;

    -[PUReviewScreenDoneButton addTarget:action:forControlEvents:](self->__doneButton, "addTarget:action:forControlEvents:", self, sel__handleDoneButtonReleased_, 64);
    v47 = self->__doneButton;
    -[CAMViewfinderView controlStatusBar](v10, "controlStatusBar");
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v48, "setSecondaryAccessoryControl:", v47);

  }
  -[CAMViewfinderView shutterControl](v10, "shutterControl");
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v49, "setDelegate:", self);

  -[CAMViewfinderView zoomControl](v10, "zoomControl");
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v50, "setDelegate:", self);

  -[CAMViewfinderView zoomSlider](v10, "zoomSlider");
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v51, "setDelegate:", self);

  -[CAMViewfinderView modeDial](v10, "modeDial");
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v52, "setDataSource:", self);

  -[CAMViewfinderView modeSelectorGestureRecognizer](v10, "modeSelectorGestureRecognizer");
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v53, "setDelegate:", self);

  -[CAMViewfinderView modeSelector](v10, "modeSelector");
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v54, "setDelegate:", self);

  -[CAMViewfinderView modeSelector](v10, "modeSelector");
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v55, "setDataSource:", self);

  -[CAMViewfinderView modeDial](v10, "modeDial");
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v56, "reloadData");

  -[CAMViewfinderView modeSelector](v10, "modeSelector");
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v57, "reloadData");

  -[CAMViewfinderView controlStatusBar](v10, "controlStatusBar");
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v58, "setDelegate:", self);

  -[CAMViewfinderView badgeTray](v10, "badgeTray");
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v59, "setDelegate:", self);

  -[CAMViewfinderView modeDial](v10, "modeDial");
  v60 = (CAMModeDial *)objc_claimAutoreleasedReturnValue();
  modeDial = self->__modeDial;
  self->__modeDial = v60;

  -[CAMViewfinderView imageWell](v10, "imageWell");
  v62 = (CAMImageWell *)objc_claimAutoreleasedReturnValue();
  imageWell = self->__imageWell;
  self->__imageWell = v62;

  -[CAMViewfinderView flipButton](v10, "flipButton");
  v64 = (CAMFlipButton *)objc_claimAutoreleasedReturnValue();
  flipButton = self->__flipButton;
  self->__flipButton = v64;

  -[CAMViewfinderView zoomControl](v10, "zoomControl");
  v66 = (CAMZoomControl *)objc_claimAutoreleasedReturnValue();
  zoomControl = self->__zoomControl;
  self->__zoomControl = v66;

  -[CAMViewfinderView zoomSlider](v10, "zoomSlider");
  v68 = (CAMZoomSlider *)objc_claimAutoreleasedReturnValue();
  zoomSlider = self->__zoomSlider;
  self->__zoomSlider = v68;

  -[CAMViewfinderView shutterControl](v10, "shutterControl");
  v70 = (CAMDynamicShutterControl *)objc_claimAutoreleasedReturnValue();
  dynamicShutterControl = self->__dynamicShutterControl;
  self->__dynamicShutterControl = v70;

  -[CAMViewfinderView creativeCameraButton](v10, "creativeCameraButton");
  v72 = (CAMCreativeCameraButton *)objc_claimAutoreleasedReturnValue();
  creativeCameraButton = self->__creativeCameraButton;
  self->__creativeCameraButton = v72;

  -[CAMViewfinderViewController _transitionController](self, "_transitionController");
  v74 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v74, "setTarget:", v10);

LABEL_15:
}

- (CAMPreviewViewController)_previewViewController
{
  return self->__previewViewController;
}

- (BOOL)isShowingStandardControls
{
  return self->_showingStandardControls;
}

- (id)currentContentSize
{
  void *v2;
  void *v3;

  -[CAMViewfinderViewController traitCollection](self, "traitCollection");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "preferredContentSizeCategory");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (void)viewDidLoad
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  objc_super v8;

  v8.receiver = self;
  v8.super_class = (Class)CAMViewfinderViewController;
  -[CAMViewfinderViewController viewDidLoad](&v8, sel_viewDidLoad);
  -[CAMViewfinderViewController view](self, "view");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "_accessibilitySetInterfaceStyleIntent:", 2);

  -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "didMoveToParentViewController:", self);
  -[CAMViewfinderViewController _createCommonControlsIfNecessary](self, "_createCommonControlsIfNecessary");
  -[CAMViewfinderViewController _createCommonGestureRecognizersIfNecessary](self, "_createCommonGestureRecognizersIfNecessary");
  -[CAMViewfinderViewController _updateForCurrentConfiguration](self, "_updateForCurrentConfiguration");
  -[CAMViewfinderViewController _updateModeDisabledForCurrentStateAnimated:](self, "_updateModeDisabledForCurrentStateAnimated:", 0);
  -[CAMViewfinderViewController _updateDisabledModeUIAnimated:](self, "_updateDisabledModeUIAnimated:", 0);
  -[CAMViewfinderViewController _cameraRollController](self, "_cameraRollController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController cameraRollControllerDidStartSession:](self, "cameraRollControllerDidStartSession:", v5);
  -[CAMViewfinderViewController modesForModeDial:](self, "modesForModeDial:", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _remoteShutterController](self, "_remoteShutterController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setAvailableCaptureModes:", v6);

}

- (CAMCaptureGraphConfiguration)_currentGraphConfiguration
{
  return self->__currentGraphConfiguration;
}

- (void)_createCommonControlsIfNecessary
{
  int64_t v3;
  void *v4;
  id v5;

  if (-[CAMViewfinderViewController isShowingStandardControls](self, "isShowingStandardControls"))
  {
    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v5 = (id)objc_claimAutoreleasedReturnValue();
    v3 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
    -[CAMViewfinderViewController _createShutterButtonIfNecessary](self, "_createShutterButtonIfNecessary");
    if (objc_msgSend(v5, "isFrontCameraSupported")
      && objc_msgSend(v5, "isBackCameraSupported"))
    {
      -[CAMViewfinderViewController _createFlipButtonIfNecessary](self, "_createFlipButtonIfNecessary");
    }
    if (objc_msgSend(v5, "isCTMSupported"))
      -[CAMViewfinderViewController _createVerticalSwipeGestureRecognizersIfNecessary](self, "_createVerticalSwipeGestureRecognizersIfNecessary");
    if (+[CAMBottomBar wantsVerticalBarForLayoutStyle:](CAMBottomBar, "wantsVerticalBarForLayoutStyle:", v3))
    {
      -[CAMViewfinderViewController _createTimerButtonIfNecessary](self, "_createTimerButtonIfNecessary");
      if (-[CAMViewfinderViewController _wantsHDRControlsVisible](self, "_wantsHDRControlsVisible"))
        -[CAMViewfinderViewController _createHDRButtonIfNecessary](self, "_createHDRButtonIfNecessary");
      if (objc_msgSend(v5, "isLivePhotoSupported"))
        -[CAMViewfinderViewController _createLivePhotoButtonIfNecessary](self, "_createLivePhotoButtonIfNecessary");
    }
    if (v3 != 2)
    {
      -[CAMViewfinderViewController _createModeDialIfNecessary](self, "_createModeDialIfNecessary");
      -[CAMViewfinderViewController _createFocusAndExposureLockBadgeIfNecessary](self, "_createFocusAndExposureLockBadgeIfNecessary");
      if (-[CAMViewfinderViewController _useCreativeCameraControls](self, "_useCreativeCameraControls"))
      {
        -[CAMViewfinderViewController _createCreativeCameraButtonIfNecessary](self, "_createCreativeCameraButtonIfNecessary");
        -[CAMViewfinderViewController _createPhotosButtonIfNecessary](self, "_createPhotosButtonIfNecessary");
        -[CAMViewfinderViewController _createDoneButtonIfNecessary](self, "_createDoneButtonIfNecessary");
      }
      else
      {
        -[CAMViewfinderViewController _createReviewButtonIfNecessary](self, "_createReviewButtonIfNecessary");
        -[CAMViewfinderViewController _reviewButton](self, "_reviewButton");
        v4 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v4)
          -[CAMViewfinderViewController _createImageWellIfNecessary](self, "_createImageWellIfNecessary");
      }
      if ((objc_msgSend(v5, "isBackFlashSupported") & 1) != 0
        || objc_msgSend(v5, "isFrontFlashSupported"))
      {
        -[CAMViewfinderViewController _createFlashButtonIfNecessary](self, "_createFlashButtonIfNecessary");
        -[CAMViewfinderViewController _createFlashBadgeIfNecessary](self, "_createFlashBadgeIfNecessary");
      }
    }
    -[CAMViewfinderViewController _createOrDestroySharedLibraryControlsIfNecessary](self, "_createOrDestroySharedLibraryControlsIfNecessary");

  }
}

- (void)_createShutterButtonIfNecessary
{
  int64_t v3;
  CUShutterButton *v4;
  CUShutterButton *shutterButton;

  if (!self->__shutterButton)
  {
    if (-[CAMViewfinderViewController _shouldCreateAndEmbedControls](self, "_shouldCreateAndEmbedControls"))
    {
      v3 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
      +[CUShutterButton shutterButtonWithLayoutStyle:](CUShutterButton, "shutterButtonWithLayoutStyle:", v3);
      v4 = (CUShutterButton *)objc_claimAutoreleasedReturnValue();
      shutterButton = self->__shutterButton;
      self->__shutterButton = v4;

      -[CUShutterButton addTarget:action:forControlEvents:](self->__shutterButton, "addTarget:action:forControlEvents:", self, sel__handleShutterButtonPressed_, 1);
      -[CUShutterButton addTarget:action:forControlEvents:](self->__shutterButton, "addTarget:action:forControlEvents:", self, sel__handleShutterButtonReleased_, 64);
      -[CUShutterButton addTarget:action:forControlEvents:](self->__shutterButton, "addTarget:action:forControlEvents:", self, sel__handleShutterButtonDragEnter_, 16);
      -[CUShutterButton addTarget:action:forControlEvents:](self->__shutterButton, "addTarget:action:forControlEvents:", self, sel__handleShutterButtonDragExited_, 32);
      -[CUShutterButton addTarget:action:forControlEvents:](self->__shutterButton, "addTarget:action:forControlEvents:", self, sel__handleShutterButtonCancelled_, 256);
      -[CUShutterButton setMode:](self->__shutterButton, "setMode:", 0);
      -[CUShutterButton setExclusiveTouch:](self->__shutterButton, "setExclusiveTouch:", 1);
      -[CUShutterButton setDelegate:](self->__shutterButton, "setDelegate:", self);
      -[CAMViewfinderViewController _embedShutterButtonWithLayoutStyle:](self, "_embedShutterButtonWithLayoutStyle:", v3);
    }
  }
}

- (void)_embedShutterButtonWithLayoutStyle:(int64_t)a3
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "bottomBar");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _shutterButton](self, "_shutterButton");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (a3 == 2)
    v7 = v5;
  else
    v7 = v9;
  if (a3 == 2)
    v8 = v9;
  else
    v8 = v5;
  objc_msgSend(v7, "setShutterButton:", 0);
  objc_msgSend(v8, "setShutterButton:", v6);

}

- (id)viewfinderView
{
  void *v3;
  char v4;
  void *v5;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isCTMSupported");

  if ((v4 & 1) != 0)
  {
    v5 = 0;
  }
  else
  {
    -[CAMViewfinderViewController view](self, "view");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v5;
}

- (CUShutterButton)_shutterButton
{
  return self->__shutterButton;
}

- (void)_createFlipButtonIfNecessary
{
  int64_t v3;
  void *v4;
  int v5;
  CAMFlipButton *v6;
  CAMFlipButton *flipButton;

  if (!self->__flipButton
    && -[CAMViewfinderViewController _shouldCreateAndEmbedControls](self, "_shouldCreateAndEmbedControls"))
  {
    v3 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "overContentFlipButtonSupported");

    if (v5)
      +[CAMFlipButton flipButtonOverContent](CAMFlipButton, "flipButtonOverContent");
    else
      +[CAMFlipButton flipButtonWithLayoutStyle:](CAMFlipButton, "flipButtonWithLayoutStyle:", v3);
    v6 = (CAMFlipButton *)objc_claimAutoreleasedReturnValue();
    flipButton = self->__flipButton;
    self->__flipButton = v6;

    -[CAMFlipButton addTarget:action:forControlEvents:](self->__flipButton, "addTarget:action:forControlEvents:", self, sel__handleFlipButtonTouchDown_, 1);
    -[CAMFlipButton addTarget:action:forControlEvents:](self->__flipButton, "addTarget:action:forControlEvents:", self, sel__handleFlipButtonReleased_, 64);
    -[CAMFlipButton setExclusiveTouch:](self->__flipButton, "setExclusiveTouch:", 1);
    -[CAMViewfinderViewController _embedFlipButtonWithLayoutStyle:](self, "_embedFlipButtonWithLayoutStyle:", v3);
  }
}

- (void)_embedFlipButtonWithLayoutStyle:(int64_t)a3
{
  void *v5;
  void *v6;
  void *v7;
  _BOOL4 v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v12 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _topBar](self, "_topBar");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _bottomBar](self, "_bottomBar");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _flipButton](self, "_flipButton");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = +[CAMBottomBar wantsVerticalBarForLayoutStyle:](CAMBottomBar, "wantsVerticalBarForLayoutStyle:", a3);
  if (dyld_program_sdk_at_least())
  {
    if (a3 == 2)
    {
      objc_msgSend(v6, "setFlipButton:", 0);
      v9 = v12;
LABEL_11:
      v10 = v7;
      goto LABEL_12;
    }
    v11 = v12;
LABEL_9:
    objc_msgSend(v11, "setFlipButton:", 0);
    v9 = v6;
    goto LABEL_11;
  }
  if (a3 != 2)
  {
    if (!v8)
    {
      objc_msgSend(v6, "setFlipButton:", 0);
      v9 = v5;
      goto LABEL_11;
    }
    v11 = v5;
    goto LABEL_9;
  }
  objc_msgSend(v5, "setFlipButton:", 0);
  v9 = v6;
  v10 = 0;
LABEL_12:
  objc_msgSend(v9, "setFlipButton:", v10);

}

- (CAMTopBar)_topBar
{
  return self->__topBar;
}

- (CAMBottomBar)_bottomBar
{
  return self->__bottomBar;
}

- (CAMFlipButton)_flipButton
{
  return self->__flipButton;
}

- (void)_createModeDialIfNecessary
{
  int64_t v3;
  CAMModeDial *v4;
  CAMModeDial *modeDial;

  if (!self->__modeDial)
  {
    if (-[CAMViewfinderViewController _shouldCreateAndEmbedControls](self, "_shouldCreateAndEmbedControls"))
    {
      v3 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
      v4 = -[CAMModeDial initWithLayoutStyle:]([CAMModeDial alloc], "initWithLayoutStyle:", v3);
      modeDial = self->__modeDial;
      self->__modeDial = v4;

      -[CAMModeDial addTarget:action:forControlEvents:](self->__modeDial, "addTarget:action:forControlEvents:", self, sel__handleModeDialTouchDown_, 1);
      -[CAMModeDial addTarget:action:forControlEvents:](self->__modeDial, "addTarget:action:forControlEvents:", self, sel__handleModeDialValueChanged_, 4096);
      -[CAMModeDial setDataSource:](self->__modeDial, "setDataSource:", self);
      -[CAMModeDial reloadData](self->__modeDial, "reloadData");
      -[CAMViewfinderViewController _embedModeDialWithLayoutStyle:](self, "_embedModeDialWithLayoutStyle:", v3);
    }
  }
}

- (id)modesForModeDial:(id)a3
{
  id v4;
  void *v5;
  _BOOL4 v6;

  v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  -[CAMViewfinderViewController availableCaptureModes](self, "availableCaptureModes");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "containsObject:", &unk_1EA3B04F0))
    objc_msgSend(v4, "addObject:", &unk_1EA3B04F0);
  if (objc_msgSend(v5, "containsObject:", &unk_1EA3B0478))
    objc_msgSend(v4, "addObject:", &unk_1EA3B0478);
  if (objc_msgSend(v5, "containsObject:", &unk_1EA3B04D8))
    objc_msgSend(v4, "addObject:", &unk_1EA3B04D8);
  if (objc_msgSend(v5, "containsObject:", &unk_1EA3B0418))
    objc_msgSend(v4, "addObject:", &unk_1EA3B0418);
  if (objc_msgSend(v5, "containsObject:", &unk_1EA3B0400))
    objc_msgSend(v4, "addObject:", &unk_1EA3B0400);
  if (objc_msgSend(v5, "containsObject:", &unk_1EA3B0430))
    objc_msgSend(v4, "addObject:", &unk_1EA3B0430);
  v6 = -[CAMViewfinderViewController _spatialModeHasVideoSelected](self, "_spatialModeHasVideoSelected");
  if (objc_msgSend(v5, "containsObject:", &unk_1EA3B0490) && v6)
    objc_msgSend(v4, "addObject:", &unk_1EA3B0490);
  if (((objc_msgSend(v5, "containsObject:", &unk_1EA3B03D0) ^ 1 | v6) & 1) == 0)
    objc_msgSend(v4, "addObject:", &unk_1EA3B03D0);
  if (objc_msgSend(v5, "containsObject:", &unk_1EA3B04C0))
    objc_msgSend(v4, "addObject:", &unk_1EA3B04C0);
  if (objc_msgSend(v5, "containsObject:", &unk_1EA3B04A8))
    objc_msgSend(v4, "addObject:", &unk_1EA3B04A8);

  return v4;
}

- (NSSet)availableCaptureModes
{
  return self->_availableCaptureModes;
}

- (void)_embedModeDialWithLayoutStyle:(int64_t)a3
{
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;

  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "bottomBar");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _modeDial](self, "_modeDial");
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)v6;
  if (a3 == 2)
    v8 = 0;
  else
    v8 = v6;
  objc_msgSend(v5, "setModeDial:", v8);

}

- (CAMModeDial)_modeDial
{
  return self->__modeDial;
}

- (void)_createFocusAndExposureLockBadgeIfNecessary
{
  CAMFocusLockBadge *v3;
  CAMFocusLockBadge *v4;
  CAMFocusLockBadge *focusAndExposureLockBadge;

  if (!self->__focusAndExposureLockBadge
    && -[CAMViewfinderViewController _shouldCreateAndEmbedControls](self, "_shouldCreateAndEmbedControls"))
  {
    v3 = [CAMFocusLockBadge alloc];
    v4 = -[CAMFocusLockBadge initWithFrame:](v3, "initWithFrame:", *MEMORY[0x1E0C9D648], *(double *)(MEMORY[0x1E0C9D648] + 8), *(double *)(MEMORY[0x1E0C9D648] + 16), *(double *)(MEMORY[0x1E0C9D648] + 24));
    focusAndExposureLockBadge = self->__focusAndExposureLockBadge;
    self->__focusAndExposureLockBadge = v4;

  }
  -[CAMViewfinderViewController _embedFocusAndExposureLockBadgeWithLayoutStyle:](self, "_embedFocusAndExposureLockBadgeWithLayoutStyle:", -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle"));
}

- (void)_embedFocusAndExposureLockBadgeWithLayoutStyle:(int64_t)a3
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;

  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _focusAndExposureLockBadge](self, "_focusAndExposureLockBadge");
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)v5;
  if (a3 == 2)
    v7 = 0;
  else
    v7 = v5;
  objc_msgSend(v8, "setFocusAndExposureLockBadge:", v7);

}

- (CAMFocusLockBadge)_focusAndExposureLockBadge
{
  return self->__focusAndExposureLockBadge;
}

- (BOOL)_useCreativeCameraControls
{
  return self->__useCreativeCameraControls;
}

- (void)_createReviewButtonIfNecessary
{
  UIButton *v3;
  int64_t v4;
  id v5;

  -[CAMViewfinderViewController reviewButtonSource](self, "reviewButtonSource");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "reviewButton");
  v3 = (UIButton *)objc_claimAutoreleasedReturnValue();
  if (v3 != self->__reviewButton)
  {
    v4 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
    -[UIButton removeFromSuperview](self->__reviewButton, "removeFromSuperview");
    objc_storeStrong((id *)&self->__reviewButton, v3);
    -[CAMViewfinderViewController _embedReviewButtonWithLayoutStyle:](self, "_embedReviewButtonWithLayoutStyle:", v4);
  }

}

- (CAMViewfinderReviewButtonSource)reviewButtonSource
{
  return (CAMViewfinderReviewButtonSource *)objc_loadWeakRetained((id *)&self->_reviewButtonSource);
}

- (UIButton)_reviewButton
{
  return self->__reviewButton;
}

- (void)_createImageWellIfNecessary
{
  int64_t v3;
  CAMImageWell *v4;
  CAMImageWell *imageWell;

  if (!self->__imageWell)
  {
    if (-[CAMViewfinderViewController _shouldCreateAndEmbedControls](self, "_shouldCreateAndEmbedControls"))
    {
      v3 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
      v4 = -[CAMImageWell initWithLayoutStyle:]([CAMImageWell alloc], "initWithLayoutStyle:", v3);
      imageWell = self->__imageWell;
      self->__imageWell = v4;

      -[CAMImageWell addTarget:action:forControlEvents:](self->__imageWell, "addTarget:action:forControlEvents:", self, sel__handleImageWellReleased_, 64);
      -[CAMImageWell addTarget:action:forControlEvents:](self->__imageWell, "addTarget:action:forControlEvents:", self, sel__handleImageWellPressed_, 1);
      -[CAMImageWell setExclusiveTouch:](self->__imageWell, "setExclusiveTouch:", 1);
      -[CAMViewfinderViewController _embedImageWellWithLayoutStyle:](self, "_embedImageWellWithLayoutStyle:", v3);
    }
  }
}

- (void)_embedImageWellWithLayoutStyle:(int64_t)a3
{
  void *v5;
  void *v6;
  _BOOL4 v7;
  void *v9;
  id v10;

  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "bottomBar");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _imageWell](self, "_imageWell");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = -[CAMViewfinderViewController isEmulatingImagePicker](self, "isEmulatingImagePicker");
  if (a3 == 2 || v7)
    v9 = 0;
  else
    v9 = v6;
  objc_msgSend(v5, "setImageWell:", v9);

}

- (CAMImageWell)_imageWell
{
  return self->__imageWell;
}

- (void)_createFlashButtonIfNecessary
{
  int64_t v3;
  CAMFlashButton *v4;
  CAMFlashButton *flashButton;

  if (!self->__flashButton)
  {
    if (-[CAMViewfinderViewController _shouldCreateAndEmbedControls](self, "_shouldCreateAndEmbedControls"))
    {
      v3 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
      v4 = -[CAMFlashButton initWithLayoutStyle:]([CAMFlashButton alloc], "initWithLayoutStyle:", v3);
      flashButton = self->__flashButton;
      self->__flashButton = v4;

      -[CAMFlashButton addTarget:action:forControlEvents:](self->__flashButton, "addTarget:action:forControlEvents:", self, sel__handleFlashButtonChangedFlashMode, 4096);
      -[CAMFlashButton addTarget:action:forControlEvents:](self->__flashButton, "addTarget:action:forControlEvents:", self, sel__handleFlashButtonWhileFlashUnavailable, 0x1000000);
      -[CAMFlashButton setExclusiveTouch:](self->__flashButton, "setExclusiveTouch:", 1);
      -[CAMFlashButton setAllowsAutomaticFlash:needsReloadData:](self->__flashButton, "setAllowsAutomaticFlash:needsReloadData:", 1, 0);
      -[CAMFlashButton reloadData](self->__flashButton, "reloadData");
      -[CAMViewfinderViewController _resolveAndUpdatePotentiallyConflictingControls:animated:](self, "_resolveAndUpdatePotentiallyConflictingControls:animated:", 1, 0);
      -[CAMViewfinderViewController _embedFlashButtonWithLayoutStyle:](self, "_embedFlashButtonWithLayoutStyle:", v3);
    }
  }
}

- (BOOL)_isLivePhotoSupportedForGraphConfiguration:(id)a3
{
  id v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a3;
  v5 = objc_msgSend(v4, "mode");
  v6 = objc_msgSend(v4, "device");

  return -[CAMViewfinderViewController _isLivePhotoSupportedForMode:device:](self, "_isLivePhotoSupportedForMode:device:", v5, v6);
}

- (BOOL)_isLivePhotoSupportedForMode:(int64_t)a3 device:(int64_t)a4
{
  uint64_t v5;
  void *v6;
  char v7;

  if ((unint64_t)(a4 - 1) > 0xA)
    v5 = 0;
  else
    v5 = qword_1DB9A53B8[a4 - 1];
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isLivePhotoSupportedForMode:devicePosition:", a3, v5);

  return v7;
}

- (BOOL)_isHDRSupportedForGraphConfiguration:(id)a3
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "mode");
  v6 = objc_msgSend(v3, "devicePosition");

  LOBYTE(v3) = objc_msgSend(v4, "isHDRSupportedForMode:devicePosition:", v5, v6);
  return (char)v3;
}

- (BOOL)_isFlashOrTorchSupportedForGraphConfiguration:(id)a3
{
  id v3;
  void *v4;
  int v5;

  v3 = a3;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "isFlashOrTorchSupportedForMode:devicePosition:", objc_msgSend(v3, "mode"), objc_msgSend(v3, "devicePosition")))v5 = objc_msgSend(v3, "enableStereoVideoCapture") ^ 1;
  else
    LOBYTE(v5) = 0;

  return v5;
}

- (int64_t)_desiredFlashMode
{
  return self->__desiredFlashMode;
}

- (int64_t)_desiredHDRMode
{
  return self->__desiredHDRMode;
}

- (int64_t)_flashAndHDRConflictingControl
{
  return self->__flashAndHDRConflictingControl;
}

- (void)_setResolvedFlashMode:(int64_t)a3
{
  self->__resolvedFlashMode = a3;
}

- (void)_setResolvedHDRMode:(int64_t)a3
{
  self->__resolvedHDRMode = a3;
}

- (void)_setResolvedLivePhotoMode:(int64_t)a3
{
  self->__resolvedLivePhotoMode = a3;
}

- (int64_t)_resolvedFlashMode
{
  return self->__resolvedFlashMode;
}

- (CAMFlashButton)_flashButton
{
  return self->__flashButton;
}

- (CAMRemoteShutterController)_remoteShutterController
{
  return self->__remoteShutterController;
}

- (CAMPortraitModeInstructionLabel)_portraitModeInstructionLabel
{
  return self->__portraitModeInstructionLabel;
}

- (CAMHDRButton)_HDRButton
{
  return self->__HDRButton;
}

- (BOOL)_isShowingCameraRoll
{
  void *v2;
  char v3;

  -[CAMViewfinderViewController _cameraRollController](self, "_cameraRollController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isCameraRollViewControllerPresented");

  return v3;
}

- (void)_updatePairedVideoCaptureOnControllerForGraphConfiguration:(id)a3 isShowingCameraRoll:(BOOL)a4
{
  _BOOL8 v4;
  id v6;
  id v7;

  v4 = a4;
  v6 = a3;
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  LODWORD(v4) = -[CAMViewfinderViewController _shouldPauseCapturingStillImagePairedVideoForGraphConfiguration:isShowingCameraRoll:](self, "_shouldPauseCapturingStillImagePairedVideoForGraphConfiguration:isShowingCameraRoll:", v6, v4);

  if (v4)
    objc_msgSend(v7, "pauseCapturingStillImagePairedVideo");
  else
    objc_msgSend(v7, "resumeCapturingStillImagePairedVideo");

}

- (BOOL)_shouldPauseCapturingStillImagePairedVideoForGraphConfiguration:(id)a3 isShowingCameraRoll:(BOOL)a4
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  uint64_t v12;

  v12 = 0;
  v6 = a3;
  v7 = objc_msgSend(v6, "mode");
  v8 = objc_msgSend(v6, "device");

  -[CAMViewfinderViewController _resolvePotentiallyConflictingControlsForMode:device:resolvedFlashMode:resolvedHDRMode:resolvedLivePhotoMode:resolvedRAWMode:resolvedPhotoResolution:](self, "_resolvePotentiallyConflictingControlsForMode:device:resolvedFlashMode:resolvedHDRMode:resolvedLivePhotoMode:resolvedRAWMode:resolvedPhotoResolution:", v7, v8, 0, 0, &v12, 0, 0);
  v9 = -[CAMViewfinderViewController _isBurstEndSoundPlaying](self, "_isBurstEndSoundPlaying");
  if (v12)
    v10 = a4;
  else
    v10 = 1;
  return v10 || v9;
}

- (BOOL)_isBurstEndSoundPlaying
{
  return self->__burstEndSoundPlaying;
}

- (void)updateControlVisibilityAnimated:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  void *v6;
  uint64_t v7;
  double v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  void *v13;
  CAMViewfinderViewController *v14;
  id v15;
  uint64_t v16;
  BOOL v17;

  v3 = a3;
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _motionController](self, "_motionController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "captureOrientation");

  if (v3)
    v8 = 0.25;
  else
    v8 = 0.0;
  v10 = MEMORY[0x1E0C809B0];
  v11 = 3221225472;
  v12 = __63__CAMViewfinderViewController_updateControlVisibilityAnimated___block_invoke;
  v13 = &unk_1EA32A748;
  v14 = self;
  v15 = v5;
  v16 = v7;
  v17 = v3;
  v9 = v5;
  +[CAMView animateIfNeededWithDuration:animations:](CAMView, "animateIfNeededWithDuration:animations:", &v10, v8);
  -[CEKLightingControl setNameBadgeHidden:animated:](self->__lightingControl, "setNameBadgeHidden:animated:", -[CAMViewfinderViewController _shouldHideLightingControlBadgeForGraphConfiguration:orientation:](self, "_shouldHideLightingControlBadgeForGraphConfiguration:orientation:", v9, v7, v10, v11, v12, v13, v14), v3);
  -[CAMViewfinderViewController _updateDescriptionOverlayVisibilityForMode:allowShow:allowHide:animated:](self, "_updateDescriptionOverlayVisibilityForMode:allowShow:allowHide:animated:", objc_msgSend(v9, "mode"), 1, 1, v3);
  -[CAMViewfinderViewController _updateBadgeVisibilityAnimated:](self, "_updateBadgeVisibilityAnimated:", v3);
  -[CAMViewfinderViewController _updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:animated:](self, "_updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:animated:", v9, v3);

}

- (BOOL)isPerformingReviewUsingOverlay
{
  return self->_performingReviewUsingOverlay;
}

- (BOOL)_shouldHideTopBarForGraphConfiguration:(id)a3
{
  id v4;
  void *v5;
  int v6;
  BOOL v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  int v11;
  void *v12;
  uint64_t v13;
  void *v14;
  _BOOL4 v15;
  char v16;

  v4 = a3;
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isCapturingTimelapse");
  v7 = -[CAMViewfinderViewController _isPerformingTopBarOrientationChange](self, "_isPerformingTopBarOrientationChange");
  v8 = -[CAMViewfinderViewController isPerformingReviewUsingOverlay](self, "isPerformingReviewUsingOverlay");
  v9 = objc_msgSend(v5, "isCapturingPanorama");
  v10 = objc_msgSend(v4, "mode");
  if (v10 == 5 || v10 == 3)
  {
    v11 = -[CAMViewfinderViewController _useCreativeCameraControls](self, "_useCreativeCameraControls");
    -[CAMViewfinderViewController _topBar](self, "_topBar");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "sharedLibraryButton");
    v13 = objc_claimAutoreleasedReturnValue();
    if (v13)
    {
      v14 = (void *)v13;
      v15 = -[CAMViewfinderViewController _shouldShowSharedLibraryButtonForGraphConfiguration:](self, "_shouldShowSharedLibraryButtonForGraphConfiguration:", v4);

      v11 |= v15;
    }
    else
    {

    }
    if (((v11 ^ 1 | v6 | v9) & 1) != 0)
      goto LABEL_9;
  }
  else if (((v6 | v9) & 1) != 0)
  {
LABEL_9:
    v16 = 1;
    goto LABEL_10;
  }
  v16 = v7 || v8;
LABEL_10:

  return v16;
}

- (BOOL)_isPerformingTopBarOrientationChange
{
  return self->__performingTopBarOrientationChange;
}

- (BOOL)_shouldHideFlashButtonForGraphConfiguration:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  char v7;
  char v8;
  char v9;
  _BOOL4 v10;
  BOOL v11;
  BOOL v12;
  void *v13;
  char v14;
  int v15;
  void *v16;
  void *v17;

  v4 = a3;
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _topBar](self, "_topBar");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(MEMORY[0x1E0DC3470], "shouldMakeUIForDefaultPNG");
  v8 = objc_msgSend(v5, "isCapturingVideo");
  v9 = objc_msgSend(v5, "isCapturingTimelapse");
  v10 = -[CAMViewfinderViewController _isCapturingFromTimer](self, "_isCapturingFromTimer");
  v11 = -[CAMViewfinderViewController _isFlashOrTorchSupportedForGraphConfiguration:](self, "_isFlashOrTorchSupportedForGraphConfiguration:", v4);
  if ((v8 & 1) != 0 || (v9 & 1) != 0 || v10)
  {
    -[CAMViewfinderViewController _controlDrawer](self, "_controlDrawer");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v13 == 0;

  }
  else
  {
    v12 = 0;
  }
  v14 = v7 | !v11;
  v15 = 1;
  if ((v14 & 1) == 0 && !v12)
    v15 = -[CAMViewfinderViewController _isTransitioningToCreativeCamera](self, "_isTransitioningToCreativeCamera");
  -[CAMViewfinderViewController _flashButton](self, "_flashButton");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "flashButton");
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  if (v16 == v17)
    v15 |= objc_msgSend(v6, "shouldHideFlashButtonForGraphConfiguration:", v4);

  return v15;
}

- (BOOL)_isCapturingFromTimer
{
  return self->__capturingFromTimer;
}

- (BOOL)_isTransitioningToCreativeCamera
{
  return -[CAMViewfinderViewController messagesTransitionState](self, "messagesTransitionState") == 1;
}

- (int64_t)messagesTransitionState
{
  return self->_messagesTransitionState;
}

- (BOOL)_shouldHideHDRButtonForGraphConfiguration:(id)a3
{
  id v4;
  void *v5;
  BOOL v6;
  char v7;
  _BOOL4 v8;
  _BOOL4 v9;
  int v10;
  void *v11;
  void *v12;

  v4 = a3;
  -[CAMViewfinderViewController _topBar](self, "_topBar");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[CAMViewfinderViewController _isCapturingFromTimer](self, "_isCapturingFromTimer");
  v7 = objc_msgSend(MEMORY[0x1E0DC3470], "shouldMakeUIForDefaultPNG");
  v8 = -[CAMViewfinderViewController _isHDRSupportedForGraphConfiguration:](self, "_isHDRSupportedForGraphConfiguration:", v4);
  v9 = -[CAMViewfinderViewController _wantsHDRControlsVisible](self, "_wantsHDRControlsVisible");
  v10 = 1;
  if (v8 && !v6 && (v7 & 1) == 0)
    v10 = -[CAMViewfinderViewController _isTransitioningToCreativeCamera](self, "_isTransitioningToCreativeCamera")
       || !v9;
  -[CAMViewfinderViewController _HDRButton](self, "_HDRButton");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "HDRButton");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11 == v12)
    v10 |= objc_msgSend(v5, "shouldHideHDRButtonForGraphConfiguration:", v4);

  return v10;
}

- (CAMElapsedTimeView)_elapsedTimeView
{
  return self->__elapsedTimeView;
}

- (BOOL)_shouldHideLivePhotoButtonForGraphConfiguration:(id)a3
{
  id v4;
  void *v5;
  char v6;
  _BOOL4 v7;
  int v8;
  void *v9;
  void *v10;

  v4 = a3;
  -[CAMViewfinderViewController _topBar](self, "_topBar");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(MEMORY[0x1E0DC3470], "shouldMakeUIForDefaultPNG");
  v7 = -[CAMViewfinderViewController _isLivePhotoSupportedForGraphConfiguration:](self, "_isLivePhotoSupportedForGraphConfiguration:", v4);
  v8 = 1;
  if ((v6 & 1) == 0 && v7)
    v8 = -[CAMViewfinderViewController _isTransitioningToCreativeCamera](self, "_isTransitioningToCreativeCamera");
  -[CAMViewfinderViewController _livePhotoButton](self, "_livePhotoButton");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "livePhotoButton");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9 == v10)
    v8 |= objc_msgSend(v5, "shouldHideLivePhotoButtonForGraphConfiguration:", v4);

  return v8;
}

- (CAMLivePhotoButton)_livePhotoButton
{
  return self->__livePhotoButton;
}

- (BOOL)_shouldHideFlipButtonForGraphConfiguration:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  char v7;
  char v8;
  char v9;
  void *v10;
  char v11;
  char v12;
  BOOL v13;
  void *v14;
  char v15;
  char v16;
  char v17;
  void *v18;
  void *v19;
  void *v20;
  BOOL v22;
  BOOL v23;
  char v24;
  char v25;
  int v26;
  char v27;

  v4 = a3;
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = objc_msgSend(MEMORY[0x1E0DC3470], "shouldMakeUIForDefaultPNG");
  if (objc_msgSend(v6, "isBackCameraSupported"))
    v26 = objc_msgSend(v6, "isFrontCameraSupported");
  else
    v26 = 0;
  v25 = objc_msgSend(v5, "isCapturingVideo");
  v24 = objc_msgSend(v5, "isCapturingTimelapse");
  v23 = -[CAMViewfinderViewController _isLowLightCaptureUIVisible](self, "_isLowLightCaptureUIVisible");
  v22 = -[CAMViewfinderViewController _isCapturingFromTimer](self, "_isCapturingFromTimer");
  v7 = 0;
  switch(objc_msgSend(v4, "mode"))
  {
    case 0:
    case 1:
    case 4:
    case 5:
      v7 = 1;
      goto LABEL_14;
    case 2:
      if (!objc_msgSend(v6, "isFrontSlomoSupported"))
        goto LABEL_13;
      v8 = objc_msgSend(v6, "isBackSlomoSupported");
      goto LABEL_12;
    case 6:
      if (!objc_msgSend(v6, "isFrontPortraitModeSupported"))
        goto LABEL_13;
      v8 = objc_msgSend(v6, "isBackPortraitModeSupported");
      goto LABEL_12;
    case 7:
      if (objc_msgSend(v6, "isFrontCinematicModeSupported"))
      {
        v8 = objc_msgSend(v6, "isBackCinematicModeSupported");
LABEL_12:
        v7 = v8;
      }
      else
      {
LABEL_13:
        v7 = 0;
      }
LABEL_14:
      v9 = objc_msgSend(v5, "isCapturingBurst");
      -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      if (v10)
        v11 = v9;
      else
        v11 = 0;

      v12 = objc_msgSend(v4, "enableStereoVideoCapture");
      v13 = -[CAMViewfinderViewController _trueVideoIsActive](self, "_trueVideoIsActive");
      -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = objc_msgSend(v14, "smartStyleControlsVisible");

      v16 = v7 ^ 1;
      if (!v26)
        v16 = 1;
      v17 = v16 | v25 | v11 | v24 | v23 | v27 | v12 | v22 | v13 | v15;
      -[CAMViewfinderViewController _topBar](self, "_topBar");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMViewfinderViewController _flipButton](self, "_flipButton");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "flipButton");
      v20 = (void *)objc_claimAutoreleasedReturnValue();

      if (v19 == v20)
        v17 |= objc_msgSend(v18, "shouldHideFlipButtonForGraphConfiguration:", v4);

      return v17 & 1;
    default:
      goto LABEL_14;
  }
}

- (BOOL)_shouldHideModeDialForGraphConfiguration:(id)a3
{
  id v4;
  void *v5;

  v4 = a3;
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(self) = -[CAMViewfinderViewController _shouldHideModeDialForGraphConfiguration:isCapturingBurst:](self, "_shouldHideModeDialForGraphConfiguration:isCapturingBurst:", v4, objc_msgSend(v5, "isCapturingBurst"));

  return (char)self;
}

- (BOOL)_shouldHideUtilityBarForGraphConfiguration:(id)a3
{
  id v4;
  void *v5;
  char v6;
  void *v7;
  char v8;
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  int v12;
  _BOOL4 v13;

  v4 = a3;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isCTMSupported");

  if ((v6 & 1) != 0)
  {
    LOBYTE(v7) = 1;
  }
  else
  {
    v8 = objc_msgSend(MEMORY[0x1E0DC3470], "shouldMakeUIForDefaultPNG");
    v9 = -[CAMViewfinderViewController _isShowingFilterScrubber](self, "_isShowingFilterScrubber");
    v10 = v9 & -[CAMViewfinderViewController _shouldUseFiltersForGraphConfiguration:](self, "_shouldUseFiltersForGraphConfiguration:", v4);
    v11 = -[CAMViewfinderViewController _isShowingPortraitApertureSlider](self, "_isShowingPortraitApertureSlider");
    v12 = v10 | v11 | -[CAMViewfinderViewController _isShowingPortraitIntensitySlider](self, "_isShowingPortraitIntensitySlider");
    -[CAMViewfinderViewController _utilityBar](self, "_utilityBar");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = -[CAMViewfinderViewController _isMenuButtonConflictingWithView:](self, "_isMenuButtonConflictingWithView:", v7);

    LOBYTE(v7) = 1;
    if (v12 == 1 && (v8 & 1) == 0)
      LODWORD(v7) = -[CAMViewfinderViewController _isTransitioningToCreativeCamera](self, "_isTransitioningToCreativeCamera")|| v13;
  }

  return (char)v7;
}

- (BOOL)_isShowingFilterScrubber
{
  return self->__showingFilterScrubber;
}

- (BOOL)_shouldUseFiltersForGraphConfiguration:(id)a3
{
  unint64_t v3;
  void *v4;
  char v5;

  v3 = objc_msgSend(a3, "mode");
  if (v3 > 6 || ((1 << v3) & 0x51) == 0)
    return 0;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isLiveFilteringSupported");

  return v5;
}

- (BOOL)_shouldHideImageWellForGraphConfiguration:(id)a3
{
  void *v4;
  char v5;
  char v6;
  char v7;
  BOOL v8;
  BOOL v9;
  int v10;
  void *v11;
  unsigned int v12;
  BOOL v13;
  void *v14;
  char v15;
  char v17;

  -[CAMViewfinderViewController _captureController](self, "_captureController", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(MEMORY[0x1E0DC3470], "shouldMakeUIForDefaultPNG");
  v5 = objc_msgSend(v4, "isCapturingVideo");
  v6 = objc_msgSend(v4, "isCapturingPanorama");
  v7 = objc_msgSend(v4, "isCapturingTimelapse");
  v8 = -[CAMViewfinderViewController _isLowLightCaptureUIVisible](self, "_isLowLightCaptureUIVisible");
  v9 = -[CAMViewfinderViewController _isCapturingFromTimer](self, "_isCapturingFromTimer");
  v10 = objc_msgSend(v4, "isCapturingBurst");
  -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11)
    v12 = v10 & ~-[CAMViewfinderViewController _capturingFromPhysicalButton](self, "_capturingFromPhysicalButton");
  else
    LOBYTE(v12) = 0;

  v13 = -[CAMViewfinderViewController _trueVideoIsActive](self, "_trueVideoIsActive");
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "smartStyleControlsVisible");

  return (v17 | v5 | v12 | v6 | v7 | v8 | v9 | v13 | v15) & 1;
}

- (BOOL)_shouldHideReviewButtonForGraphConfiguration:(id)a3
{
  CAMViewfinderViewController *v3;
  void *v4;
  char v5;
  char v6;
  char v7;
  char v8;
  BOOL v9;

  v3 = self;
  -[CAMViewfinderViewController _captureController](self, "_captureController", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(MEMORY[0x1E0DC3470], "shouldMakeUIForDefaultPNG");
  v6 = objc_msgSend(v4, "isCapturingVideo");
  v7 = objc_msgSend(v4, "isCapturingPanorama");
  v8 = objc_msgSend(v4, "isCapturingTimelapse");
  v9 = -[CAMViewfinderViewController _isCapturingFromTimer](v3, "_isCapturingFromTimer");
  LOBYTE(v3) = v5 | v6 | v7 | v8 | v9 | -[CAMViewfinderViewController _isInPopoverPresentation](v3, "_isInPopoverPresentation");

  return (char)v3;
}

- (BOOL)_shouldHideCreativeCameraButtonForGraphConfiguration:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  BOOL v10;
  BOOL v11;
  int64_t v12;
  unint64_t v13;
  void *v14;
  char v15;
  BOOL v16;
  char v18;

  v4 = a3;
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v4, "mode");

  v18 = objc_msgSend(MEMORY[0x1E0DC3470], "shouldMakeUIForDefaultPNG");
  v7 = objc_msgSend(v5, "isCapturingVideo");
  v8 = objc_msgSend(v5, "isCapturingPanorama");
  v9 = objc_msgSend(v5, "isCapturingTimelapse");
  v10 = -[CAMViewfinderViewController _isLowLightCaptureUIVisible](self, "_isLowLightCaptureUIVisible");
  v11 = -[CAMViewfinderViewController _isCapturingFromTimer](self, "_isCapturingFromTimer");
  v12 = -[CAMViewfinderViewController _currentHalfPressSpotlight](self, "_currentHalfPressSpotlight");
  v13 = v6 - 2;
  -[CAMViewfinderViewController view](self, "view");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = CEKIsViewInMultitask();

  v16 = 1;
  if (v13 >= 8 && (v18 & 1) == 0 && (v7 & 1) == 0 && (v8 & 1) == 0 && (v9 & 1) == 0 && !v10 && !v11)
  {
    if (v12)
      v16 = 1;
    else
      v16 = v15;
  }

  return v16;
}

- (BOOL)_shouldHideDoneButtonForGraphConfiguration:(id)a3
{
  id v4;
  void *v5;
  int v6;
  int v7;
  _BOOL4 v8;
  _BOOL4 v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  void *v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  int v20;

  v4 = a3;
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v5, "isCapturingVideo");
  v6 = objc_msgSend(v5, "isCapturingPanorama");
  v7 = objc_msgSend(v5, "isCapturingTimelapse");
  v8 = -[CAMViewfinderViewController _isLowLightCaptureUIVisible](self, "_isLowLightCaptureUIVisible");
  v9 = -[CAMViewfinderViewController _isCapturingFromTimer](self, "_isCapturingFromTimer");
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "controlStatusBar");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "isControlExpanded");

  -[CAMViewfinderViewController _doneButton](self, "_doneButton");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _topBar](self, "_topBar");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "doneButton");
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13 == v15)
    v16 = objc_msgSend(v14, "shouldHideDoneButtonForGraphConfiguration:", v4);
  else
    v16 = 0;
  v17 = v4;
  if (((v20 | v6 | v7 | v8 | v9) & 1) != 0)
    v18 = 1;
  else
    v18 = v16 | v12;

  return v18;
}

- (PUReviewScreenDoneButton)_doneButton
{
  return self->__doneButton;
}

- (BOOL)_shouldHideShutterButtonForGraphConfiguration:(id)a3
{
  unint64_t v4;
  void *v5;
  char v6;

  v4 = -[CAMViewfinderViewController messagesTransitionState](self, "messagesTransitionState", a3) - 2;
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "smartStyleControlsVisible");

  if (v4 < 3)
    return 1;
  else
    return v6;
}

- (CAMMotionController)_motionController
{
  return self->__motionController;
}

- (BOOL)_shouldHideStillDuringVideoButtonForGraphConfiguration:(id)a3
{
  void *v3;
  char v4;

  -[CAMViewfinderViewController _captureController](self, "_captureController", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isCapturingVideo") ^ 1;

  return v4;
}

- (BOOL)_shouldHideFilterButtonForGraphConfiguration:(id)a3
{
  id v4;
  void *v5;
  char v6;
  BOOL v7;
  int v8;
  void *v9;
  void *v10;

  v4 = a3;
  -[CAMViewfinderViewController _topBar](self, "_topBar");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(MEMORY[0x1E0DC3470], "shouldMakeUIForDefaultPNG");
  v7 = -[CAMViewfinderViewController _isCapturingFromTimer](self, "_isCapturingFromTimer");
  v8 = 1;
  if (-[CAMViewfinderViewController _shouldUseFiltersForGraphConfiguration:](self, "_shouldUseFiltersForGraphConfiguration:", v4)&& !v7&& (v6 & 1) == 0)
  {
    v8 = -[CAMViewfinderViewController _isTransitioningToCreativeCamera](self, "_isTransitioningToCreativeCamera");
  }
  -[CAMViewfinderViewController _filterButton](self, "_filterButton");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "filterButton");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9 == v10)
    v8 |= objc_msgSend(v5, "shouldHideFilterButtonForGraphConfiguration:", v4);

  return v8;
}

- (CAMFilterButton)_filterButton
{
  return self->__filterButton;
}

- (BOOL)_shouldHideFilterNameBadgeForGraphConfiguration:(id)a3
{
  id v4;
  _BOOL4 v5;
  _BOOL4 v6;
  BOOL v7;
  char v8;
  void *v9;
  BOOL v10;
  BOOL v11;
  BOOL result;

  v4 = a3;
  v5 = -[CAMViewfinderViewController _isShowingFilterScrubber](self, "_isShowingFilterScrubber");
  v6 = -[CAMViewfinderViewController _shouldUseFiltersForGraphConfiguration:](self, "_shouldUseFiltersForGraphConfiguration:", v4);
  v7 = -[CAMViewfinderViewController _isShowingBurstIndicatorView](self, "_isShowingBurstIndicatorView");
  v8 = objc_msgSend(MEMORY[0x1E0DC3470], "shouldMakeUIForDefaultPNG");
  -[CAMViewfinderViewController _filterNameBadge](self, "_filterNameBadge");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = -[CAMViewfinderViewController _isMenuButtonConflictingWithView:](self, "_isMenuButtonConflictingWithView:", v9);

  v11 = -[CAMViewfinderViewController _shouldHideBadgesForGraphConfiguration:](self, "_shouldHideBadgesForGraphConfiguration:", v4);
  result = 1;
  if (v6 && v5 && !v7 && (v8 & 1) == 0 && !v10)
    return -[CAMViewfinderViewController _isTransitioningToCreativeCamera](self, "_isTransitioningToCreativeCamera")
        || v11;
  return result;
}

- (BOOL)_isShowingBurstIndicatorView
{
  void *v2;
  double v3;
  BOOL v4;

  -[CAMViewfinderViewController _burstIndicatorView](self, "_burstIndicatorView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "alpha");
  v4 = v3 > 0.0;

  return v4;
}

- (CAMBurstIndicatorView)_burstIndicatorView
{
  return self->__burstIndicatorView;
}

- (CAMFilterNameBadge)_filterNameBadge
{
  return self->__filterNameBadge;
}

- (BOOL)_shouldHidePanoramaViewForGraphConfiguration:(id)a3
{
  void *v4;
  id v5;
  char v6;
  uint64_t v7;
  void *v8;
  char v9;
  char v10;
  char v11;

  v4 = (void *)MEMORY[0x1E0DC3470];
  v5 = a3;
  v6 = objc_msgSend(v4, "shouldMakeUIForDefaultPNG");
  v7 = objc_msgSend(v5, "mode");

  -[CAMViewfinderViewController _closedViewfinderController](self, "_closedViewfinderController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "isViewfinderClosed");
  if (v7 == 3)
    v10 = v6;
  else
    v10 = 1;
  v11 = v10 | v9;

  return v11;
}

- (CAMClosedViewfinderController)_closedViewfinderController
{
  return self->__closedViewfinderController;
}

- (CAMPanoramaViewController)_panoramaViewController
{
  return self->__panoramaViewController;
}

- (BOOL)_shouldHideZoomSliderForGraphConfiguration:(id)a3
{
  return -[CAMViewfinderViewController _shouldHideZoomSliderForGraphConfiguration:ignoreExpiredVisibilityTimer:](self, "_shouldHideZoomSliderForGraphConfiguration:ignoreExpiredVisibilityTimer:", a3, 0);
}

- (BOOL)_shouldHideZoomSliderForGraphConfiguration:(id)a3 ignoreExpiredVisibilityTimer:(BOOL)a4
{
  id v6;
  char v7;
  void *v8;
  char v9;
  char v10;
  BOOL v11;
  BOOL v12;
  char v13;
  void *v14;
  char v15;
  char v16;

  v6 = a3;
  v7 = -[CAMViewfinderViewController _wantsZoomSliderForGraphConfiguration:](self, "_wantsZoomSliderForGraphConfiguration:", v6);
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "isCapturingBurst");
  v10 = objc_msgSend(MEMORY[0x1E0DC3470], "shouldMakeUIForDefaultPNG");
  v11 = !a4
     && -[CAMZoomSlider shouldHideForExpiredVisibilityTimer](self->__zoomSlider, "shouldHideForExpiredVisibilityTimer");
  v12 = -[CAMViewfinderViewController _isCapturingFromTimer](self, "_isCapturingFromTimer");
  v13 = -[CAMViewfinderViewController _shouldHideUtilityBarForGraphConfiguration:](self, "_shouldHideUtilityBarForGraphConfiguration:", v6);

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "isSemanticStyleControlVisible");

  v16 = v11 | ~v7 | v9 | v12 | v10 | ~v13 | v15 | -[CAMViewfinderViewController _wantsVisualTextAnalysis](self, "_wantsVisualTextAnalysis");
  return v16 & 1;
}

- (BOOL)_isZoomAllowedForGraphConfiguration:(id)a3
{
  id v3;
  void *v4;
  int v5;
  int v6;

  v3 = a3;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isZoomAllowedForMode:device:videoConfiguration:videoStabilizationStrength:", objc_msgSend(v3, "mode"), objc_msgSend(v3, "device"), objc_msgSend(v3, "videoConfiguration"), objc_msgSend(v3, "videoStabilizationStrength"));

  if (v5)
    v6 = objc_msgSend(v3, "enableStereoVideoCapture") ^ 1;
  else
    LOBYTE(v6) = 0;

  return v6;
}

- (BOOL)_shouldHideZoomControlForGraphConfiguration:(id)a3
{
  id v4;
  void *v5;
  int v6;
  int v7;
  int v8;
  _BOOL4 v9;
  int v10;
  int v11;
  _BOOL4 v12;
  void *v13;
  void *v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  BOOL v19;
  void *v20;
  BOOL v21;
  char v22;
  char v24;
  char v25;
  char v26;
  _BOOL4 v27;
  _BOOL4 v28;
  _BOOL4 v29;
  int v30;

  v4 = a3;
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = objc_msgSend(v5, "isCapturingBurst");
  v6 = objc_msgSend(v5, "isCapturingVideo");
  v7 = objc_msgSend(v5, "isCapturingTimelapse");
  v8 = objc_msgSend(v5, "isCapturingPanorama");
  v29 = -[CAMViewfinderViewController _isLowLightCaptureUIVisible](self, "_isLowLightCaptureUIVisible");
  v28 = -[CAMViewfinderViewController _wantsZoomControlForGraphConfiguration:](self, "_wantsZoomControlForGraphConfiguration:", v4);
  v9 = -[CAMViewfinderViewController _zoomControlReconfiguresGraphConfiguration:](self, "_zoomControlReconfiguresGraphConfiguration:", v4);
  if (!v9 | v6)
    v10 = v9;
  else
    v10 = v7 | v8;
  v11 = objc_msgSend(MEMORY[0x1E0DC3470], "shouldMakeUIForDefaultPNG");
  v12 = -[CAMViewfinderViewController _isCapturingFromTimer](self, "_isCapturingFromTimer");
  v27 = -[CAMViewfinderViewController _shouldHideUtilityBarForGraphConfiguration:](self, "_shouldHideUtilityBarForGraphConfiguration:", v4);
  v26 = -[CAMViewfinderViewController _shouldHideLightingControlForGraphConfiguration:](self, "_shouldHideLightingControlForGraphConfiguration:", v4);
  -[CAMViewfinderViewController _targetLightingControl](self, "_targetLightingControl");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = objc_msgSend(v13, "isExpanded");
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = objc_msgSend(v14, "isFilterScrubberVisible");

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "isSemanticStyleControlVisible");

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "smartStyleControlsVisible");

  v19 = -[CAMViewfinderViewController _shouldShowDescriptionOverlayViewForGraphConfiguration:](self, "_shouldShowDescriptionOverlayViewForGraphConfiguration:", v4);
  if (-[CAMViewfinderViewController _wantsVisualTextAnalysis](self, "_wantsVisualTextAnalysis"))
  {
    -[CAMViewfinderViewController _textInteractionInsert](self, "_textInteractionInsert");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = v20 != 0;

  }
  else
  {
    v21 = 0;
  }
  v22 = 1;
  if (((!v28 | v30 | v29 | v10 | v11 | v12) & 1) == 0 && v27)
    v22 = v25 & ~v26 | v24 | v19 | v16 | v18 | v21;

  return v22 & 1;
}

- (BOOL)_shouldHideLightingControlForGraphConfiguration:(id)a3
{
  id v4;
  _BOOL4 v5;
  void *v6;
  int v7;
  _BOOL4 v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _BOOL4 v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  int64_t v20;
  BOOL result;
  char v22;
  _BOOL4 v23;
  _BOOL4 v24;

  v4 = a3;
  v24 = -[CAMViewfinderViewController _wantsLightingControlForGraphConfiguration:](self, "_wantsLightingControlForGraphConfiguration:", v4);
  v23 = -[CAMViewfinderViewController _isShowingFilterScrubber](self, "_isShowingFilterScrubber");
  v5 = -[CAMViewfinderViewController _shouldShowDescriptionOverlayViewForGraphConfiguration:](self, "_shouldShowDescriptionOverlayViewForGraphConfiguration:", v4);
  -[CAMViewfinderViewController _zoomControl](self, "_zoomControl");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isShowingZoomDial");

  v8 = -[CAMViewfinderViewController _isCapturingFromTimer](self, "_isCapturingFromTimer");
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v4, "mode");
  v11 = objc_msgSend(v4, "devicePosition");
  v12 = -[CAMViewfinderViewController _currentPhotoFormat](self, "_currentPhotoFormat");
  v14 = objc_msgSend(v9, "isDepthSuggestionSupportedForMode:devicePosition:photoFormat:", v10, v11, v12, v13);

  v15 = -[CAMViewfinderViewController _shouldUsePhotoModePortraitEffect](self, "_shouldUsePhotoModePortraitEffect");
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "smartStyleControlsVisible");

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend(v18, "isSystemOverlayVisible");

  v20 = -[CAMViewfinderViewController _lightingControlLayoutPositionForGraphConfiguration:](self, "_lightingControlLayoutPositionForGraphConfiguration:", v4);
  result = 1;
  if (v24 && !v23 && !v5 && !v7 && !v8 && v14 ^ 1 | v15)
  {
    if (v20 == 2)
      v22 = v19;
    else
      v22 = 0;
    return v17 | v22;
  }
  return result;
}

- (BOOL)_shouldHideLightingControlBadgeForGraphConfiguration:(id)a3 orientation:(int64_t)a4
{
  unint64_t v5;
  id v6;
  int64_t v7;
  BOOL v8;

  v5 = a4 - 3;
  v6 = a3;
  v7 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
  v8 = -[CAMViewfinderViewController _shouldHideBadgesForGraphConfiguration:](self, "_shouldHideBadgesForGraphConfiguration:", v6);

  return v5 < 2 || v7 == 1 || v8;
}

- (BOOL)_shouldHideGridViewForGraphConfiguration:(id)a3
{
  BOOL v3;
  void *v4;
  char v5;

  v3 = -[CAMViewfinderViewController _isTransitioningToCreativeCamera](self, "_isTransitioningToCreativeCamera", a3);
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "shouldShowGridView");

  return v3 | v5 ^ 1;
}

- (BOOL)_shouldHideLevelViewForGraphConfiguration:(id)a3
{
  _BOOL4 v4;
  BOOL v5;

  v4 = -[CAMViewfinderViewController _shouldCreateLevelViewForMode:](self, "_shouldCreateLevelViewForMode:", objc_msgSend(a3, "mode"));
  v5 = -[CAMViewfinderViewController _isLowLightCaptureUIVisible](self, "_isLowLightCaptureUIVisible");
  return !v4
      || v5
      || -[CAMViewfinderViewController _isTransitioningToCreativeCamera](self, "_isTransitioningToCreativeCamera");
}

- (void)_updateLevelMotionTracking
{
  _BOOL4 v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  v3 = -[CAMViewfinderViewController _shouldMonitorDeviceMotionForGraphConfiguration:](self, "_shouldMonitorDeviceMotionForGraphConfiguration:");
  -[CAMViewfinderViewController _motionController](self, "_motionController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v3)
  {
    -[CAMViewfinderViewController _levelViewModel](self, "_levelViewModel");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "beginUpdatingLevelViewModel:", v6);

  }
  else
  {
    objc_msgSend(v4, "endUpdatingActiveLevelViewModel");
  }

}

- (BOOL)_shouldMonitorDeviceMotionForGraphConfiguration:(id)a3
{
  id v4;
  int64_t v5;
  void *v6;
  char v7;
  void *v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;

  v4 = a3;
  v5 = +[CAMApplication appOrPlugInState](CAMApplication, "appOrPlugInState");
  -[CAMViewfinderViewController _closedViewfinderController](self, "_closedViewfinderController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isViewfinderClosed");
  -[CAMViewfinderViewController _levelViewModel](self, "_levelViewModel");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[CAMViewfinderViewController _shouldHideLevelViewForGraphConfiguration:](self, "_shouldHideLevelViewForGraphConfiguration:", v4);
  LOBYTE(self) = -[CAMViewfinderViewController _shouldHideHorizonLevelViewForGraphConfiguration:](self, "_shouldHideHorizonLevelViewForGraphConfiguration:", v4);

  if ((v9 & self & 1) != 0)
    v10 = 0;
  else
    v10 = (v8 != 0) & ~v7;
  if (v5)
    v11 = 0;
  else
    v11 = v10;

  return v11;
}

- (CAMLevelViewModel)_levelViewModel
{
  return self->__levelViewModel;
}

- (int64_t)_sanitizedVideoConfigurationForMode:(int64_t)a3 device:(int64_t)a4
{
  void *v8;
  uint64_t v9;
  _BOOL8 v10;
  int64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;

  if (-[CAMViewfinderViewController emulationMode](self, "emulationMode"))
    return -[CAMViewfinderViewController imagePickerVideoConfiguration](self, "imagePickerVideoConfiguration");
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if ((unint64_t)(a4 - 1) > 0xA)
    v9 = 0;
  else
    v9 = qword_1DB9A53B8[a4 - 1];
  v10 = -[CAMViewfinderViewController _isSpatialVideoInVideoModeActiveForMode:devicePosition:](self, "_isSpatialVideoInVideoModeActiveForMode:devicePosition:", a3, v9);
  v11 = 0;
  v12 = -[CAMViewfinderViewController _trueVideoIsActive](self, "_trueVideoIsActive");
  switch(a3)
  {
    case 1:
      if (-[CAMViewfinderViewController _videoConfigurationOverride](self, "_videoConfigurationOverride"))
        v13 = -[CAMViewfinderViewController _videoConfigurationOverride](self, "_videoConfigurationOverride");
      else
        v13 = objc_msgSend(v8, "videoConfiguration");
      if (v10)
        v16 = 7;
      else
        v16 = v13;
      v17 = 1;
      goto LABEL_26;
    case 2:
      if (-[CAMViewfinderViewController _slomoConfigurationOverride](self, "_slomoConfigurationOverride"))
        v14 = -[CAMViewfinderViewController _slomoConfigurationOverride](self, "_slomoConfigurationOverride");
      else
        v14 = objc_msgSend(v8, "slomoConfiguration");
      v11 = +[CAMCaptureConfiguration sanitizeVideoConfigurationForDesiredConfiguration:mode:device:spatialVideoEnabled:trueVideoEnabled:](CAMCaptureConfiguration, "sanitizeVideoConfigurationForDesiredConfiguration:mode:device:spatialVideoEnabled:trueVideoEnabled:", v14, 2, a4, v10, v12);
      if (!v11)
      {
        +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v8, "videoEncodingBehaviorForConfiguration:mode:desiredProResVideoMode:outputToExternalStorage:spatialVideoEnabled:", 0, 2, 0, 0, v10);
        v20 = objc_msgSend(v8, "HDR10BitVideoEnabled");
        v21 = 0;
        if (v20)
          v21 = objc_msgSend(v18, "isHDR10BitVideoSupportedForMode:", 2);
        LOBYTE(v22) = v21;
        v11 = objc_msgSend(v18, "resolvedVideoConfigurationForMode:device:videoEncodingBehavior:videoConfiguration:outputToExternalStorage:spatialVideoEnabled:prefersHDR10BitVideo:", 2, a4, v19, 0, 0, v10, v22);

      }
      break;
    case 7:
      if (-[CAMViewfinderViewController _cinematicConfigurationOverride](self, "_cinematicConfigurationOverride"))
        v15 = -[CAMViewfinderViewController _cinematicConfigurationOverride](self, "_cinematicConfigurationOverride");
      else
        v15 = objc_msgSend(v8, "cinematicConfiguration");
      v16 = v15;
      v17 = 7;
      goto LABEL_26;
    case 8:
      v16 = 7;
      v17 = 8;
LABEL_26:
      v11 = +[CAMCaptureConfiguration sanitizeVideoConfigurationForDesiredConfiguration:mode:device:spatialVideoEnabled:trueVideoEnabled:](CAMCaptureConfiguration, "sanitizeVideoConfigurationForDesiredConfiguration:mode:device:spatialVideoEnabled:trueVideoEnabled:", v16, v17, a4, v10, v12);
      break;
    default:
      break;
  }

  return v11;
}

- (BOOL)_shouldHideTimerButtonForGraphConfiguration:(id)a3
{
  id v4;
  void *v5;
  char v6;
  void *v7;
  int v8;
  int v9;
  void *v10;
  void *v11;

  v4 = a3;
  -[CAMViewfinderViewController _topBar](self, "_topBar");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(MEMORY[0x1E0DC3470], "shouldMakeUIForDefaultPNG");
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isTimerSupportedForMode:", objc_msgSend(v4, "mode"));

  v9 = 1;
  if (v8 && (v6 & 1) == 0)
    v9 = -[CAMViewfinderViewController _isTransitioningToCreativeCamera](self, "_isTransitioningToCreativeCamera");
  -[CAMViewfinderViewController _timerButton](self, "_timerButton");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timerButton");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10 == v11)
    v9 |= objc_msgSend(v5, "shouldHideTimerButtonForGraphConfiguration:", v4);

  return v9;
}

- (CAMTimerButton)_timerButton
{
  return self->__timerButton;
}

- (BOOL)_shouldHideTimerIndicatorViewForGraphConfiguration:(id)a3
{
  BOOL v4;

  v4 = -[CAMViewfinderViewController _shouldHideTimerButtonForGraphConfiguration:](self, "_shouldHideTimerButtonForGraphConfiguration:", a3);
  return v4 | !-[CAMViewfinderViewController _isCapturingFromTimer](self, "_isCapturingFromTimer");
}

- (void)_updateBadgeVisibilityAnimated:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  void *v9;
  _BOOL4 v10;
  _BOOL4 v11;
  _BOOL4 v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  double v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  int v36;
  int v37;
  void *v38;
  _BOOL4 v39;
  _BOOL4 v40;
  _QWORD v41[5];
  id v42;
  BOOL v43;
  BOOL v44;

  v3 = a3;
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[CAMViewfinderViewController _shouldHideFlashBadgeForGraphConfiguration:](self, "_shouldHideFlashBadgeForGraphConfiguration:", v5);
  v7 = -[CAMViewfinderViewController _shouldHideHDRBadgeForGraphConfiguration:](self, "_shouldHideHDRBadgeForGraphConfiguration:", v5);
  v40 = -[CAMViewfinderViewController _shouldHideLivePhotoBadgeForGraphConfiguration:](self, "_shouldHideLivePhotoBadgeForGraphConfiguration:", v5);
  v8 = -[CAMViewfinderViewController _shouldHideShallowDepthOfFieldBadgeForGraphConfiguration:](self, "_shouldHideShallowDepthOfFieldBadgeForGraphConfiguration:", v5);
  v39 = -[CAMViewfinderViewController _shouldHideFocusAndExposureLockBadgeForGraphConfiguration:](self, "_shouldHideFocusAndExposureLockBadgeForGraphConfiguration:", v5);
  -[CAMViewfinderViewController _motionController](self, "_motionController");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = -[CAMViewfinderViewController _shouldHideLightingNameBadgeForGraphConfiguration:orientation:](self, "_shouldHideLightingNameBadgeForGraphConfiguration:orientation:", v5, objc_msgSend(v9, "captureOrientation"));

  v11 = -[CAMViewfinderViewController shouldLayoutLightingNameBadgeAtBottom](self, "shouldLayoutLightingNameBadgeAtBottom");
  v12 = -[CAMViewfinderViewController _shouldShowSharedLibraryBadgeForGraphConfiguration:](self, "_shouldShowSharedLibraryBadgeForGraphConfiguration:", v5);
  HIDWORD(v35) = -[CAMViewfinderViewController _shouldShowVideoStabilizationBadgeForGraphConfiguration:](self, "_shouldShowVideoStabilizationBadgeForGraphConfiguration:", v5);
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v35) = objc_msgSend(v13, "videoCapturePaused");

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    -[CAMViewfinderViewController _flashBadge](self, "_flashBadge");
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (v15)
    {
      -[CAMViewfinderViewController _flashBadge](self, "_flashBadge");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "addObject:", v16);

    }
  }
  if (!v7)
  {
    -[CAMViewfinderViewController _HDRBadge](self, "_HDRBadge");
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    if (v17)
    {
      -[CAMViewfinderViewController _HDRBadge](self, "_HDRBadge");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "addObject:", v18);

    }
  }
  if (!v40)
  {
    -[CAMViewfinderViewController _livePhotoBadge](self, "_livePhotoBadge");
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    if (v19)
    {
      -[CAMViewfinderViewController _livePhotoBadge](self, "_livePhotoBadge");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "addObject:", v20);

    }
  }
  if (!v8)
  {
    -[CAMViewfinderViewController _shallowDepthOfFieldBadge](self, "_shallowDepthOfFieldBadge");
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    if (v21)
    {
      -[CAMViewfinderViewController _shallowDepthOfFieldBadge](self, "_shallowDepthOfFieldBadge");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "addObject:", v22);

    }
  }
  if (!v39)
  {
    -[CAMViewfinderViewController _focusAndExposureLockBadge](self, "_focusAndExposureLockBadge");
    v23 = (void *)objc_claimAutoreleasedReturnValue();

    if (v23)
    {
      -[CAMViewfinderViewController _focusAndExposureLockBadge](self, "_focusAndExposureLockBadge");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "addObject:", v24);

    }
  }
  if (!v10 && !v11)
  {
    -[CAMViewfinderViewController _lightingNameBadge](self, "_lightingNameBadge");
    v25 = (void *)objc_claimAutoreleasedReturnValue();

    if (v25)
    {
      -[CAMViewfinderViewController _lightingNameBadge](self, "_lightingNameBadge");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "addObject:", v26);

    }
  }
  if (v12)
  {
    -[CAMViewfinderViewController _sharedLibraryBadge](self, "_sharedLibraryBadge");
    v27 = (void *)objc_claimAutoreleasedReturnValue();

    if (v27)
    {
      -[CAMViewfinderViewController _sharedLibraryBadge](self, "_sharedLibraryBadge");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "addObject:", v28);

    }
  }
  objc_msgSend(v38, "setVisibleTopBadges:animated:", v14, v3, v35);
  if (v3)
    v29 = 0.25;
  else
    v29 = 0.0;
  v41[0] = MEMORY[0x1E0C809B0];
  v41[1] = 3221225472;
  v41[2] = __62__CAMViewfinderViewController__updateBadgeVisibilityAnimated___block_invoke;
  v41[3] = &unk_1EA328958;
  v41[4] = self;
  v42 = v5;
  v43 = v11;
  v44 = v10;
  v30 = v5;
  +[CAMView animateIfNeededWithDuration:animations:](CAMView, "animateIfNeededWithDuration:animations:", v41, v29);
  v31 = 2;
  if (v40)
    v31 = 0;
  if (!v39)
    v31 |= 4uLL;
  if (v12)
    v31 |= 0x10uLL;
  if (v37)
    v31 |= 0x20uLL;
  if (v36)
    v32 = v31 | 0x40;
  else
    v32 = v31;
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v33, "badgeTray");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v34, "setVisibleBadges:animated:", v32, v3);

}

- (BOOL)_shouldHideFlashBadgeForGraphConfiguration:(id)a3
{
  id v4;
  void *v5;
  char v6;
  char v7;
  char v8;
  char v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  char v13;
  char v14;
  char v15;
  BOOL v16;
  void *v17;
  BOOL v18;
  _BOOL4 v19;
  char v20;
  int v21;

  v4 = a3;
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isCapturingBurst");
  v7 = objc_msgSend(v5, "isCapturingVideo");
  v8 = objc_msgSend(v5, "isFlashActive");
  v9 = objc_msgSend(v5, "isTorchActive");
  v10 = -[CAMViewfinderViewController _resolvedFlashMode](self, "_resolvedFlashMode");
  v11 = objc_msgSend(v4, "mode");
  if (v11 > 8)
  {
    v14 = 0;
  }
  else if (((1 << v11) & 0x186) != 0)
  {
    v12 = -[CAMViewfinderViewController _resolvedTorchMode](self, "_resolvedTorchMode");
    if (v12 == 2)
      v13 = v9;
    else
      v13 = 0;
    if (v12 == 1)
      v14 = 1;
    else
      v14 = v13;
  }
  else
  {
    if (v10 == 2)
      v15 = v8;
    else
      v15 = 0;
    if (v10 == 1)
      v15 = 1;
    if (((1 << v11) & 0x51) != 0)
      v14 = v15;
    else
      v14 = 0;
  }
  v16 = -[CAMViewfinderViewController _isShowingBurstIndicatorView](self, "_isShowingBurstIndicatorView");
  -[CAMViewfinderViewController _flashBadge](self, "_flashBadge");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = -[CAMViewfinderViewController _isMenuButtonConflictingWithView:](self, "_isMenuButtonConflictingWithView:", v17);

  v19 = -[CAMViewfinderViewController _shouldHideBadgesForGraphConfiguration:](self, "_shouldHideBadgesForGraphConfiguration:", v4);
  v20 = v6 | v14 ^ 1 | v7;
  LOBYTE(v21) = 1;
  if ((v20 & 1) == 0 && !v16 && !v18)
    v21 = -[CAMViewfinderViewController _isTransitioningToCreativeCamera](self, "_isTransitioningToCreativeCamera")
       || v19;

  return v21;
}

- (CAMFlashBadge)_flashBadge
{
  return self->__flashBadge;
}

- (BOOL)_shouldHideHDRBadgeForGraphConfiguration:(id)a3
{
  id v4;
  void *v5;
  int64_t v6;
  char v7;
  _BOOL4 v8;
  char v9;
  char v10;
  _BOOL4 v11;
  BOOL v12;
  void *v13;
  BOOL v14;
  int v15;
  _BOOL4 v16;
  void *v17;
  void *v18;
  void *v20;

  v4 = a3;
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[CAMViewfinderViewController _resolvedHDRMode](self, "_resolvedHDRMode");
  v20 = v5;
  v7 = objc_msgSend(v5, "isHDRSuggested");
  v8 = -[CAMViewfinderViewController _isHDRSupportedForGraphConfiguration:](self, "_isHDRSupportedForGraphConfiguration:", v4);
  v9 = v7 ^ 1;
  if (v6 != 2)
    v9 = 1;
  if (v6 == 1)
    v10 = 0;
  else
    v10 = v9;
  v11 = -[CAMViewfinderViewController _shouldHideFlashBadgeForGraphConfiguration:](self, "_shouldHideFlashBadgeForGraphConfiguration:", v4);
  v12 = -[CAMViewfinderViewController _isShowingBurstIndicatorView](self, "_isShowingBurstIndicatorView");
  -[CAMViewfinderViewController _HDRBadge](self, "_HDRBadge");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = -[CAMViewfinderViewController _isMenuButtonConflictingWithView:](self, "_isMenuButtonConflictingWithView:", v13);

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v17, "isSmartHDRSupported");

  v16 = -[CAMViewfinderViewController _shouldHideBadgesForGraphConfiguration:](self, "_shouldHideBadgesForGraphConfiguration:", v4);
  LOBYTE(v17) = 1;
  if (!v8 || (v10 & 1) != 0 || !v11 || v12)
  {
    v18 = v20;
  }
  else
  {
    v18 = v20;
    if (!v14)
      LODWORD(v17) = (-[CAMViewfinderViewController _isTransitioningToCreativeCamera](self, "_isTransitioningToCreativeCamera")|| v16) | v15;
  }

  return (char)v17;
}

- (int64_t)_resolvedHDRMode
{
  return self->__resolvedHDRMode;
}

- (CAMHDRBadge)_HDRBadge
{
  return self->__HDRBadge;
}

- (BOOL)_shouldHideLivePhotoBadgeForGraphConfiguration:(id)a3
{
  void *v4;
  int v5;
  char v6;
  _BOOL4 v7;
  void *v8;
  int v9;
  void *v10;
  _BOOL4 v11;
  _BOOL4 v12;
  id v13;

  v13 = a3;
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isCapturingLivePhotoVideo");
  v6 = objc_msgSend(MEMORY[0x1E0DC3470], "shouldMakeUIForDefaultPNG");
  v7 = -[CAMViewfinderViewController _isLivePhotoSupportedForGraphConfiguration:](self, "_isLivePhotoSupportedForGraphConfiguration:", v13);
  -[CAMViewfinderViewController _timerCache](self, "_timerCache");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "isRunningTimerForKey:", &unk_1EA3B03B8);

  -[CAMViewfinderViewController _livePhotoBadge](self, "_livePhotoBadge");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = -[CAMViewfinderViewController _isMenuButtonConflictingWithView:](self, "_isMenuButtonConflictingWithView:", v10);

  v12 = -[CAMViewfinderViewController _shouldHideBadgesForGraphConfiguration:](self, "_shouldHideBadgesForGraphConfiguration:", v13);
  LOBYTE(v13) = 1;
  if ((v6 & 1) == 0 && v7 && (((v5 | v9) ^ 1 | v11) & 1) == 0)
    LODWORD(v13) = -[CAMViewfinderViewController _isTransitioningToCreativeCamera](self, "_isTransitioningToCreativeCamera")|| v12;

  return (char)v13;
}

- (CAMLivePhotoBadge)_livePhotoBadge
{
  return self->__livePhotoBadge;
}

- (BOOL)_shouldHideShallowDepthOfFieldBadgeForGraphConfiguration:(id)a3
{
  id v4;
  uint64_t v5;
  BOOL v6;
  void *v7;
  BOOL v8;
  char v9;
  void *v10;
  char v11;
  BOOL v12;
  char v13;

  v4 = a3;
  v5 = objc_msgSend(v4, "mode");
  v6 = -[CAMViewfinderViewController _shouldShowDescriptionOverlayViewForGraphConfiguration:](self, "_shouldShowDescriptionOverlayViewForGraphConfiguration:", v4);
  -[CAMViewfinderViewController _shallowDepthOfFieldBadge](self, "_shallowDepthOfFieldBadge");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = -[CAMViewfinderViewController _isMenuButtonConflictingWithView:](self, "_isMenuButtonConflictingWithView:", v7);

  v9 = objc_msgSend(MEMORY[0x1E0DC3470], "shouldMakeUIForDefaultPNG");
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "arePortraitEffectsSupported");

  v12 = -[CAMViewfinderViewController _shouldHideBadgesForGraphConfiguration:](self, "_shouldHideBadgesForGraphConfiguration:", v4);
  if (v5 == 6)
    v13 = v9;
  else
    v13 = 1;
  return v13 | v8 | v11 | v6 | v12;
}

- (CAMShallowDepthOfFieldBadge)_shallowDepthOfFieldBadge
{
  return self->__shallowDepthOfFieldBadge;
}

- (BOOL)_shouldHideFocusAndExposureLockBadgeForGraphConfiguration:(id)a3
{
  CAMPreviewViewController *previewViewController;
  id v5;
  char v6;
  void *v7;
  _BOOL4 v8;
  BOOL v9;
  BOOL v10;
  void *v11;
  BOOL v12;
  BOOL v13;
  BOOL result;

  previewViewController = self->__previewViewController;
  v5 = a3;
  if (-[CAMPreviewViewController isFocusLockedByUser](previewViewController, "isFocusLockedByUser")
    || -[CAMPreviewViewController isExposureLockedByUser](self->__previewViewController, "isExposureLockedByUser"))
  {
    v6 = 0;
  }
  else
  {
    -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v7, "isFocusLockedOnCinematicSubject") ^ 1;

  }
  v8 = -[CAMViewfinderViewController _shouldHideLivePhotoBadgeForGraphConfiguration:](self, "_shouldHideLivePhotoBadgeForGraphConfiguration:", v5);
  v9 = -[CAMViewfinderViewController _shouldShowSharedLibraryBadgeForGraphConfiguration:](self, "_shouldShowSharedLibraryBadgeForGraphConfiguration:", v5);
  v10 = -[CAMViewfinderViewController _shouldShowVideoStabilizationBadgeForGraphConfiguration:](self, "_shouldShowVideoStabilizationBadgeForGraphConfiguration:", v5);
  -[CAMViewfinderViewController _livePhotoBadge](self, "_livePhotoBadge");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = -[CAMViewfinderViewController _isMenuButtonConflictingWithView:](self, "_isMenuButtonConflictingWithView:", v11);

  v13 = -[CAMViewfinderViewController _shouldHideBadgesForGraphConfiguration:](self, "_shouldHideBadgesForGraphConfiguration:", v5);
  result = 1;
  if ((v6 & 1) == 0 && v8 && !v12)
    return -[CAMViewfinderViewController _isTransitioningToCreativeCamera](self, "_isTransitioningToCreativeCamera")
        || v13
        || v9
        || v10;
  return result;
}

- (BOOL)_shouldHidePortraitModeInstructionLabelForGraphConfiguration:(id)a3
{
  id v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void *v14;
  char v15;
  BOOL v16;
  BOOL v17;
  char v18;
  void *v19;
  BOOL v20;
  uint64_t v21;
  char v22;
  void *v23;

  v4 = a3;
  v5 = objc_msgSend(v4, "mode");
  if ((unint64_t)(v5 - 6) < 2)
  {
    v6 = 0;
    v7 = 1;
  }
  else if (v5)
  {
    v6 = 0;
    v7 = v5 == 1 && (objc_msgSend(v4, "videoStabilizationStrength") & 0xFFFFFFFFFFFFFFFELL) == 2;
  }
  else
  {
    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v4, "mode");
    v10 = objc_msgSend(v4, "devicePosition");
    v11 = -[CAMViewfinderViewController _currentPhotoFormat](self, "_currentPhotoFormat");
    v13 = objc_msgSend(v8, "isDepthSuggestionSupportedForMode:devicePosition:photoFormat:", v9, v10, v11, v12);
    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "portraitInPhotoModeBehavior");

    v7 = 0;
    if (v13 && (v15 & 1) != 0)
      v7 = -[CAMViewfinderViewController _depthEffectEnabledFromSuggestion](self, "_depthEffectEnabledFromSuggestion");
    v6 = -[CAMViewfinderViewController isRecording](self, "isRecording");

  }
  v16 = +[CAMPortraitModeInstructionLabel shouldDisplayInstructionForShallowDepthOfFieldStatus:](CAMPortraitModeInstructionLabel, "shouldDisplayInstructionForShallowDepthOfFieldStatus:", -[CAMViewfinderViewController _shallowDepthOfFieldStatus](self, "_shallowDepthOfFieldStatus"));
  v17 = -[CAMViewfinderViewController _shouldShowDescriptionOverlayViewForGraphConfiguration:](self, "_shouldShowDescriptionOverlayViewForGraphConfiguration:", v4);
  v18 = objc_msgSend(MEMORY[0x1E0DC3470], "shouldMakeUIForDefaultPNG");
  -[CAMViewfinderViewController _portraitModeInstructionLabel](self, "_portraitModeInstructionLabel");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[CAMViewfinderViewController _isMenuButtonConflictingWithView:](self, "_isMenuButtonConflictingWithView:", v19);

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v21 = objc_claimAutoreleasedReturnValue();
  v22 = objc_msgSend((id)v21, "isSemanticStyleControlVisible");

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v21) = objc_msgSend(v23, "isSmartStylePickerVisible");

  return ((!v7 || !v16) | v18 | v20 | v17 | v6 | v22 | v21) & 1;
}

- (int64_t)_shallowDepthOfFieldStatus
{
  return self->__shallowDepthOfFieldStatus;
}

- (BOOL)_shouldHideQRCodeInstructionLabelForGraphConfiguration:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  BOOL v10;
  char v11;
  BOOL v12;

  v4 = a3;
  v5 = objc_msgSend(v4, "mode");
  -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v4, "devicePosition");

  objc_msgSend(v6, "cachedMRCResults");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v7) = +[CAMQRCodeInstructionLabel shouldDisplayInstructionForMRCResults:devicePosition:](CAMQRCodeInstructionLabel, "shouldDisplayInstructionForMRCResults:devicePosition:", v8, v7);
  -[CAMViewfinderViewController _qrCodeInstructionLabel](self, "_qrCodeInstructionLabel");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = -[CAMViewfinderViewController _isMenuButtonConflictingWithView:](self, "_isMenuButtonConflictingWithView:", v9);

  v11 = v7 ^ 1;
  if ((v5 & 0xFFFFFFFFFFFFFFFBLL) != 0)
    v11 = 1;
  if (v10)
    v12 = 1;
  else
    v12 = v11;

  return v12;
}

- (CAMQRCodeInstructionLabel)_qrCodeInstructionLabel
{
  return self->__qrCodeInstructionLabel;
}

- (BOOL)_shouldHideLightingNameBadgeForGraphConfiguration:(id)a3 orientation:(int64_t)a4
{
  id v6;
  BOOL v7;
  BOOL v8;
  char v9;
  void *v10;
  BOOL v11;

  v6 = a3;
  v7 = -[CAMViewfinderViewController _shouldHideLightingControlForGraphConfiguration:](self, "_shouldHideLightingControlForGraphConfiguration:", v6);
  v8 = -[CAMViewfinderViewController _isShowingBurstIndicatorView](self, "_isShowingBurstIndicatorView");
  v9 = objc_msgSend(MEMORY[0x1E0DC3470], "shouldMakeUIForDefaultPNG");
  -[CAMViewfinderViewController _lightingNameBadge](self, "_lightingNameBadge");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = -[CAMViewfinderViewController _isMenuButtonConflictingWithView:](self, "_isMenuButtonConflictingWithView:", v10);

  LOBYTE(a4) = -[CAMViewfinderViewController _shouldHideLightingControlBadgeForGraphConfiguration:orientation:](self, "_shouldHideLightingControlBadgeForGraphConfiguration:orientation:", v6, a4);
  LOBYTE(self) = -[CAMViewfinderViewController _shouldHideBadgesForGraphConfiguration:](self, "_shouldHideBadgesForGraphConfiguration:", v6);

  return (v7 || v8 || v11) | a4 ^ 1 | self | v9;
}

- (CEKLightingNameBadge)_lightingNameBadge
{
  return self->__lightingNameBadge;
}

- (void)_updateHDRSuggestionMonitoringForGraphConfiguration:(id)a3
{
  void *v4;
  int v5;
  char v6;
  _BOOL4 v7;
  int64_t v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a3;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isHDRSupportedForDevicePosition:", objc_msgSend(v11, "devicePosition"));
  v6 = objc_msgSend(v4, "isSmartHDRSupported");
  if (v5 && (v6 & 1) == 0)
  {
    v7 = -[CAMViewfinderViewController _isHDRSupportedForGraphConfiguration:](self, "_isHDRSupportedForGraphConfiguration:", v11);
    v8 = -[CAMViewfinderViewController _resolvedHDRMode](self, "_resolvedHDRMode");
    -[CAMViewfinderViewController _captureController](self, "_captureController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v9;
    if (v7 && v8 == 2)
      objc_msgSend(v9, "startMonitoringForHDRSuggestions");
    else
      objc_msgSend(v9, "stopMonitoringForHDRSuggestions");

  }
}

- (void)_embedFlashButtonWithLayoutStyle:(int64_t)a3
{
  void *v5;
  void *v6;
  _BOOL4 v7;
  void *v8;
  void *v9;
  id v10;

  -[CAMViewfinderViewController _bottomBar](self, "_bottomBar");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _topBar](self, "_topBar");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _flashButton](self, "_flashButton");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = +[CAMBottomBar wantsVerticalBarForLayoutStyle:](CAMBottomBar, "wantsVerticalBarForLayoutStyle:", a3);
  if (a3 == 2)
  {
    objc_msgSend(v5, "setFlashButton:", 0);
    v8 = v10;
    v9 = 0;
  }
  else
  {
    if (v7)
    {
      objc_msgSend(v5, "setFlashButton:", 0);
      v8 = v10;
    }
    else
    {
      objc_msgSend(v10, "setFlashButton:", 0);
      v8 = v5;
    }
    v9 = v6;
  }
  objc_msgSend(v8, "setFlashButton:", v9);

}

- (void)_createFlashBadgeIfNecessary
{
  CAMFlashBadge *v3;
  CAMFlashBadge *v4;
  CAMFlashBadge *flashBadge;

  if (!self->__flashBadge
    && -[CAMViewfinderViewController _shouldCreateAndEmbedControls](self, "_shouldCreateAndEmbedControls"))
  {
    v3 = [CAMFlashBadge alloc];
    v4 = -[CAMFlashBadge initWithFrame:](v3, "initWithFrame:", *MEMORY[0x1E0C9D648], *(double *)(MEMORY[0x1E0C9D648] + 8), *(double *)(MEMORY[0x1E0C9D648] + 16), *(double *)(MEMORY[0x1E0C9D648] + 24));
    flashBadge = self->__flashBadge;
    self->__flashBadge = v4;

  }
  -[CAMViewfinderViewController _embedFlashBadgeWithLayoutStyle:](self, "_embedFlashBadgeWithLayoutStyle:", -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle"));
}

- (void)_embedFlashBadgeWithLayoutStyle:(int64_t)a3
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;

  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _flashBadge](self, "_flashBadge");
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)v5;
  if (a3 == 2)
    v7 = 0;
  else
    v7 = v5;
  objc_msgSend(v8, "setFlashBadge:", v7);

}

- (void)_createCommonGestureRecognizersIfNecessary
{
  -[CAMViewfinderViewController _createZoomPinchGestureRecognizerIfNecessary](self, "_createZoomPinchGestureRecognizerIfNecessary");
  if (-[CAMViewfinderViewController isShowingStandardControls](self, "isShowingStandardControls"))
  {
    -[CAMViewfinderViewController _createSwipeToModeSwitchGestureRecognizersIfNecessary](self, "_createSwipeToModeSwitchGestureRecognizersIfNecessary");
    -[CAMViewfinderViewController _createCameraRollSwipeUpGestureRecognizerIfNecessary](self, "_createCameraRollSwipeUpGestureRecognizerIfNecessary");
  }
}

- (void)_createZoomPinchGestureRecognizerIfNecessary
{
  CAMZoomPinchGestureRecognizer *v3;
  UIPinchGestureRecognizer *zoomPinchGestureRecognizer;
  id v5;

  if (!self->__zoomPinchGestureRecognizer)
  {
    v3 = -[CAMZoomPinchGestureRecognizer initWithTarget:action:]([CAMZoomPinchGestureRecognizer alloc], "initWithTarget:action:", self, sel__handleZoomPinchGestureRecognizer_);
    zoomPinchGestureRecognizer = self->__zoomPinchGestureRecognizer;
    self->__zoomPinchGestureRecognizer = &v3->super;

    -[UIPinchGestureRecognizer setDelegate:](self->__zoomPinchGestureRecognizer, "setDelegate:", self);
    -[CAMViewfinderViewController view](self, "view");
    v5 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "addGestureRecognizer:", self->__zoomPinchGestureRecognizer);

  }
}

- (void)_createSwipeToModeSwitchGestureRecognizersIfNecessary
{
  int64_t v3;
  unint64_t v4;
  UISwipeGestureRecognizer *v5;
  UISwipeGestureRecognizer *previousModeGestureRecognizer;
  void *v7;
  unint64_t v8;
  UISwipeGestureRecognizer *v9;
  UISwipeGestureRecognizer *nextModeGestureRecognizer;
  id v11;

  v3 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
  if (!self->__previousModeGestureRecognizer)
  {
    v4 = -[CAMViewfinderViewController _previousModeSwipeDirectionForLayoutStyle:](self, "_previousModeSwipeDirectionForLayoutStyle:", v3);
    v5 = (UISwipeGestureRecognizer *)objc_msgSend(objc_alloc(MEMORY[0x1E0DC3D10]), "initWithTarget:action:", self, sel__swipedToPreviousCameraMode);
    previousModeGestureRecognizer = self->__previousModeGestureRecognizer;
    self->__previousModeGestureRecognizer = v5;

    -[UISwipeGestureRecognizer setDirection:](self->__previousModeGestureRecognizer, "setDirection:", v4);
    -[UISwipeGestureRecognizer setDelegate:](self->__previousModeGestureRecognizer, "setDelegate:", self);
    -[CAMViewfinderViewController view](self, "view");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "addGestureRecognizer:", self->__previousModeGestureRecognizer);

  }
  if (!self->__nextModeGestureRecognizer)
  {
    v8 = -[CAMViewfinderViewController _nextModeSwitchDirectionForLayoutStyle:](self, "_nextModeSwitchDirectionForLayoutStyle:", v3);
    v9 = (UISwipeGestureRecognizer *)objc_msgSend(objc_alloc(MEMORY[0x1E0DC3D10]), "initWithTarget:action:", self, sel__swipedToNextCameraMode);
    nextModeGestureRecognizer = self->__nextModeGestureRecognizer;
    self->__nextModeGestureRecognizer = v9;

    -[UISwipeGestureRecognizer setDirection:](self->__nextModeGestureRecognizer, "setDirection:", v8);
    -[UISwipeGestureRecognizer setDelegate:](self->__nextModeGestureRecognizer, "setDelegate:", self);
    -[CAMViewfinderViewController view](self, "view");
    v11 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "addGestureRecognizer:", self->__nextModeGestureRecognizer);

  }
}

- (unint64_t)_previousModeSwipeDirectionForLayoutStyle:(int64_t)a3
{
  if (+[CAMBottomBar wantsVerticalBarForLayoutStyle:](CAMBottomBar, "wantsVerticalBarForLayoutStyle:", a3))
  {
    return 8;
  }
  else
  {
    return 1;
  }
}

- (unint64_t)_nextModeSwitchDirectionForLayoutStyle:(int64_t)a3
{
  if (+[CAMBottomBar wantsVerticalBarForLayoutStyle:](CAMBottomBar, "wantsVerticalBarForLayoutStyle:", a3))
  {
    return 4;
  }
  else
  {
    return 2;
  }
}

- (void)_createCameraRollSwipeUpGestureRecognizerIfNecessary
{
  UIPanGestureRecognizer *v3;
  UIPanGestureRecognizer *cameraRollSwipeUpGestureRecognizer;
  id v5;

  if (!self->__cameraRollSwipeUpGestureRecognizer)
  {
    v3 = (UIPanGestureRecognizer *)objc_msgSend(objc_alloc(MEMORY[0x1E0DC3AA0]), "initWithTarget:action:", self, sel__handleCameraRollSwipeUpGestureRecognizer_);
    cameraRollSwipeUpGestureRecognizer = self->__cameraRollSwipeUpGestureRecognizer;
    self->__cameraRollSwipeUpGestureRecognizer = v3;

    -[UIPanGestureRecognizer setDelegate:](self->__cameraRollSwipeUpGestureRecognizer, "setDelegate:", self);
    -[CAMViewfinderViewController view](self, "view");
    v5 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "addGestureRecognizer:", self->__cameraRollSwipeUpGestureRecognizer);

  }
}

- (void)_updateForCurrentConfiguration
{
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  int64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int64_t v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v16 = (id)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v16, "mode");
  -[CAMViewfinderViewController _createCommonControlsIfNecessary](self, "_createCommonControlsIfNecessary");
  -[CAMViewfinderViewController _createModeSpecificControlsForConfiguration:](self, "_createModeSpecificControlsForConfiguration:", v16);
  -[CAMViewfinderViewController _updateBarBackgroundStyleForMode:capturing:animated:](self, "_updateBarBackgroundStyleForMode:capturing:animated:", v3, 0, 0);
  -[CAMViewfinderViewController _topBar](self, "_topBar");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "configureForMode:", v3);
  -[CAMViewfinderViewController _modeDial](self, "_modeDial");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "reloadData");
  objc_msgSend(v5, "setSelectedMode:animated:", v3, 0);
  -[CAMViewfinderViewController _updateShutterButtonForGraphConfiguration:isCapturing:animated:](self, "_updateShutterButtonForGraphConfiguration:isCapturing:animated:", v16, -[CAMViewfinderViewController _isCapturing](self, "_isCapturing"), 0);
  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = -[CAMViewfinderViewController _aspectRatioForMode:devicePosition:](self, "_aspectRatioForMode:devicePosition:", v3, objc_msgSend(v16, "devicePosition"));
  objc_msgSend(v6, "setDesiredAspectRatio:", v7);
  objc_msgSend(v6, "setMaskingAspectRatio:", v7);
  -[CAMViewfinderViewController _applyTransformsForAutorotationStyle:](self, "_applyTransformsForAutorotationStyle:", -[CAMViewfinderViewController autorotationStyle](self, "autorotationStyle"));
  -[CAMViewfinderViewController _resolveAndUpdatePotentiallyConflictingControls:animated:](self, "_resolveAndUpdatePotentiallyConflictingControls:animated:", 0, 0);
  -[CAMViewfinderViewController updateControlVisibilityAnimated:](self, "updateControlVisibilityAnimated:", 0);
  -[CAMViewfinderViewController _updateModeDisabledForCurrentStateAnimated:](self, "_updateModeDisabledForCurrentStateAnimated:", 0);
  if (+[CAMZoomSlider shouldFadeOutZoomSliderForLayoutStyle:](CAMZoomSlider, "shouldFadeOutZoomSliderForLayoutStyle:", -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle")))
  {
    -[CAMZoomSlider makeInvisibleAnimated:](self->__zoomSlider, "makeInvisibleAnimated:", 0);
  }
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _configureZoomControlForGraphConfiguration:animated:](self, "_configureZoomControlForGraphConfiguration:animated:", v8, 0);

  -[CAMZoomControl setShouldShowZoomDial:animationDuration:](self->__zoomControl, "setShouldShowZoomDial:animationDuration:", 0, 0);
  -[CAMViewfinderViewController _updateZoomControlLayoutForGraphConfiguration:fromGraphConfiguration:animated:](self, "_updateZoomControlLayoutForGraphConfiguration:fromGraphConfiguration:animated:", v16, v16, 0);
  -[CAMViewfinderViewController _updateLightingControlFadesForGraphConfiguration:animated:](self, "_updateLightingControlFadesForGraphConfiguration:animated:", v16, 0);
  -[CAMViewfinderViewController _updateFilterButtonOnState](self, "_updateFilterButtonOnState");
  -[CAMViewfinderViewController _setTimerDurationAndUpdateUI:animated:](self, "_setTimerDurationAndUpdateUI:animated:", -[CAMViewfinderViewController _resolvedTimerDuration](self, "_resolvedTimerDuration"), 0);
  -[CAMViewfinderViewController _collapseExpandedButtonsAnimated:](self, "_collapseExpandedButtonsAnimated:", 0);
  if (-[CAMViewfinderViewController _shouldUpdateCaptureOrientation](self, "_shouldUpdateCaptureOrientation"))
    -[CAMViewfinderViewController _updateUIForCaptureOrientationAnimated:](self, "_updateUIForCaptureOrientationAnimated:", 0);
  -[CAMViewfinderViewController _updateHomeIndicatorBehaviorsForCaptureOrientation](self, "_updateHomeIndicatorBehaviorsForCaptureOrientation");
  -[CAMViewfinderViewController _updateFilterScrubberForGraphConfiguration:](self, "_updateFilterScrubberForGraphConfiguration:", v16);
  -[CAMViewfinderViewController _updateFilterNameBadgeAnimated:](self, "_updateFilterNameBadgeAnimated:", 0);
  -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
  -[CAMViewfinderViewController _updatePortraitApertureSliderForGraphConfiguration:zoomFactor:](self, "_updatePortraitApertureSliderForGraphConfiguration:zoomFactor:", v16);
  -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
  -[CAMViewfinderViewController _updatePortraitApertureButtonForGraphConfiguration:zoomFactor:animated:](self, "_updatePortraitApertureButtonForGraphConfiguration:zoomFactor:animated:", v16, 0);
  -[CAMViewfinderViewController _updatePortraitIntensitySliderForCurrentState](self, "_updatePortraitIntensitySliderForCurrentState");
  -[CAMViewfinderViewController _updateIntensityButtonForCurrentState](self, "_updateIntensityButtonForCurrentState");
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setViewportAspectRatio:animated:", v7, 0);
  objc_msgSend(v9, "modeIndicator");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setSelectedMode:", v3);

  objc_msgSend(v9, "modeSelector");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "setSelectedMode:", v3);

  v12 = -[CAMViewfinderViewController photoModeAspectRatioCrop](self, "photoModeAspectRatioCrop");
  -[CAMViewfinderViewController _controlDrawer](self, "_controlDrawer");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "aspectRatioButton");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setAspectRatio:", v12);

  -[CAMViewfinderViewController _updateLightingUIForGraphConfiguration:animated:](self, "_updateLightingUIForGraphConfiguration:animated:", v16, 0);
  -[CAMViewfinderViewController _updatePortraitModeInstructionLabelForCurrentState](self, "_updatePortraitModeInstructionLabelForCurrentState");
  -[CAMViewfinderViewController _updateQRCodeInstructionLabelForCurrentState](self, "_updateQRCodeInstructionLabelForCurrentState");
  -[CAMViewfinderViewController _updateAutoMacroButtonAnimated:](self, "_updateAutoMacroButtonAnimated:", 0);
  -[CAMViewfinderViewController _updateDepthEffectSuggestionButtonAnimated:](self, "_updateDepthEffectSuggestionButtonAnimated:", 0);
  -[CAMViewfinderViewController _updatePhotoFormatPickerAnimated:](self, "_updatePhotoFormatPickerAnimated:", 0);
  -[CAMViewfinderViewController _updateSpatialCaptureUIStateForGraphConfiguration:animated:](self, "_updateSpatialCaptureUIStateForGraphConfiguration:animated:", v16, 0);
  -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "willChangeToGraphConfiguration:", v16);
  objc_msgSend(v15, "didChangeToGraphConfiguration:animated:", v16, 0);

}

- (int64_t)_currentMode
{
  void *v2;
  int64_t v3;

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "mode");

  return v3;
}

- (void)_createStillImageControlsIfNecessary
{
  int64_t v3;
  int v4;
  id v5;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v3 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
  v4 = objc_msgSend(v5, "isLivePhotoSupported");
  if (v4)
    -[CAMViewfinderViewController _createLivePhotoBadgeIfNecessary](self, "_createLivePhotoBadgeIfNecessary");
  if (v3 != 2)
  {
    -[CAMViewfinderViewController _createTimerButtonIfNecessary](self, "_createTimerButtonIfNecessary");
    -[CAMViewfinderViewController _createTimerIndicatorViewIfNecessary](self, "_createTimerIndicatorViewIfNecessary");
    if (-[CAMViewfinderViewController _wantsHDRControlsVisible](self, "_wantsHDRControlsVisible"))
    {
      -[CAMViewfinderViewController _createHDRButtonIfNecessary](self, "_createHDRButtonIfNecessary");
      -[CAMViewfinderViewController _createHDRBadgeIfNecessary](self, "_createHDRBadgeIfNecessary");
    }
    if ((objc_msgSend(v5, "isBackBurstSupported") & 1) != 0 || objc_msgSend(v5, "isFrontBurstSupported"))
      -[CAMViewfinderViewController _createBurstIndicatorViewIfNecessary](self, "_createBurstIndicatorViewIfNecessary");
    if (objc_msgSend(v5, "isLiveFilteringSupported"))
      -[CAMViewfinderViewController _createFilterButtonIfNecessary](self, "_createFilterButtonIfNecessary");
    if (v4)
      -[CAMViewfinderViewController _createLivePhotoButtonIfNecessary](self, "_createLivePhotoButtonIfNecessary");
    -[CAMViewfinderViewController _createQRCodeInstructionLabelIfNecessary](self, "_createQRCodeInstructionLabelIfNecessary");
  }
  if (objc_msgSend(v5, "isLiveFilteringSupported"))
    -[CAMViewfinderViewController _createFilterScrubberGestureRecognizersIfNecessary](self, "_createFilterScrubberGestureRecognizersIfNecessary");

}

- (void)_createTimerButtonIfNecessary
{
  CAMTimerButton *v3;
  CAMTimerButton *timerButton;

  if (!-[CAMViewfinderViewController _shouldCreatePhotosButton](self, "_shouldCreatePhotosButton"))
  {
    if (!self->__timerButton)
    {
      if (-[CAMViewfinderViewController _shouldCreateAndEmbedControls](self, "_shouldCreateAndEmbedControls"))
      {
        v3 = -[CAMTimerButton initWithLayoutStyle:]([CAMTimerButton alloc], "initWithLayoutStyle:", -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle"));
        timerButton = self->__timerButton;
        self->__timerButton = v3;

        -[CAMTimerButton addTarget:action:forControlEvents:](self->__timerButton, "addTarget:action:forControlEvents:", self, sel__handleTimerButtonChangedTimerDuration, 4096);
        -[CAMTimerButton setDelegate:](self->__timerButton, "setDelegate:", self);
        -[CAMTimerButton setHideOffWhenCollapsed:needsReloadData:](self->__timerButton, "setHideOffWhenCollapsed:needsReloadData:", 1, 0);
        -[CAMTimerButton reloadData](self->__timerButton, "reloadData");
        -[CAMTimerButton setDuration:](self->__timerButton, "setDuration:", -[CAMViewfinderViewController _resolvedTimerDuration](self, "_resolvedTimerDuration"));
      }
    }
    -[CAMViewfinderViewController _embedTimerButtonWithLayoutStyle:](self, "_embedTimerButtonWithLayoutStyle:", -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle"));
  }
}

- (double)timeIntervalForDuration:(int64_t)a3
{
  double result;

  result = 0.0;
  if ((unint64_t)(a3 - 1) <= 2)
    return dbl_1DB9A5258[a3 - 1];
  return result;
}

- (int64_t)_resolvedTimerDuration
{
  return self->__resolvedTimerDuration;
}

- (void)_embedTimerButtonWithLayoutStyle:(int64_t)a3
{
  void *v5;
  void *v6;
  _BOOL4 v7;
  _BOOL4 v8;
  void *v9;
  void *v10;
  id v11;

  -[CAMViewfinderViewController _bottomBar](self, "_bottomBar");
  v11 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _topBar](self, "_topBar");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _timerButton](self, "_timerButton");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = +[CAMBottomBar wantsVerticalBarForLayoutStyle:](CAMBottomBar, "wantsVerticalBarForLayoutStyle:", a3);
  v8 = -[CAMViewfinderViewController isEmulatingImagePicker](self, "isEmulatingImagePicker");
  if (a3 == 2 || v8)
  {
    objc_msgSend(v5, "setTimerButton:", 0);
    v9 = v11;
    v10 = 0;
  }
  else
  {
    if (v7)
    {
      objc_msgSend(v5, "setTimerButton:", 0);
      v9 = v11;
    }
    else
    {
      objc_msgSend(v11, "setTimerButton:", 0);
      v9 = v5;
    }
    v10 = v6;
  }
  objc_msgSend(v9, "setTimerButton:", v10);

}

- (void)_createTimerIndicatorViewIfNecessary
{
  CAMTimerIndicatorView *v3;
  CAMTimerIndicatorView *timerIndicatorView;
  void *v5;

  if (!self->__timerIndicatorView
    && -[CAMViewfinderViewController _shouldCreateAndEmbedControls](self, "_shouldCreateAndEmbedControls"))
  {
    v3 = objc_alloc_init(CAMTimerIndicatorView);
    timerIndicatorView = self->__timerIndicatorView;
    self->__timerIndicatorView = v3;

    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", 0.0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _setLastTimerIndicatorFaceUpdateDate:](self, "_setLastTimerIndicatorFaceUpdateDate:", v5);

  }
  -[CAMViewfinderViewController _embedTimerIndicatorViewWithLayoutStyle:](self, "_embedTimerIndicatorViewWithLayoutStyle:", -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle"));
}

- (void)_setLastTimerIndicatorFaceUpdateDate:(id)a3
{
  objc_storeStrong((id *)&self->__lastTimerIndicatorFaceUpdateDate, a3);
}

- (void)_embedTimerIndicatorViewWithLayoutStyle:(int64_t)a3
{
  void *v5;
  _BOOL4 v6;
  void *v8;
  id v9;

  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _timerIndicatorView](self, "_timerIndicatorView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[CAMViewfinderViewController isEmulatingImagePicker](self, "isEmulatingImagePicker");
  if (a3 == 2 || v6)
    v8 = 0;
  else
    v8 = v5;
  objc_msgSend(v9, "setTimerIndicatorView:", v8);

}

- (CAMTimerIndicatorView)_timerIndicatorView
{
  return self->__timerIndicatorView;
}

- (BOOL)_wantsHDRControlsVisible
{
  void *v3;
  int v4;
  void *v5;

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = -[CAMViewfinderViewController _isHDRSupportedForGraphConfiguration:](self, "_isHDRSupportedForGraphConfiguration:", v3);

  if (v4)
  {
    +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v5, "shouldUseModernHDRBehavior") ^ 1;

  }
  return v4;
}

- (void)_createHDRButtonIfNecessary
{
  void *v3;
  _BOOL4 v4;
  uint64_t v5;
  int64_t v6;
  CAMHDRButton *v7;
  CAMHDRButton *HDRButton;
  void *v9;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (!self->__HDRButton)
  {
    v9 = v3;
    v4 = -[CAMViewfinderViewController _shouldCreateAndEmbedControls](self, "_shouldCreateAndEmbedControls");
    v3 = v9;
    if (v4)
    {
      v5 = objc_msgSend(v9, "isAutomaticHDRSupportedForDevicePosition:", -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"));
      v6 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
      v7 = -[CAMHDRButton initWithLayoutStyle:]([CAMHDRButton alloc], "initWithLayoutStyle:", v6);
      HDRButton = self->__HDRButton;
      self->__HDRButton = v7;

      -[CAMHDRButton addTarget:action:forControlEvents:](self->__HDRButton, "addTarget:action:forControlEvents:", self, sel__handleHDRButtonChangedHDRMode, 4096);
      -[CAMHDRButton setExclusiveTouch:](self->__HDRButton, "setExclusiveTouch:", 1);
      -[CAMHDRButton setAllowsAutomaticHDR:needsReloadData:](self->__HDRButton, "setAllowsAutomaticHDR:needsReloadData:", v5, 0);
      -[CAMHDRButton reloadData](self->__HDRButton, "reloadData");
      -[CAMViewfinderViewController _resolveAndUpdatePotentiallyConflictingControls:animated:](self, "_resolveAndUpdatePotentiallyConflictingControls:animated:", 1, 0);
      -[CAMViewfinderViewController _embedHDRButtonWithLayoutStyle:](self, "_embedHDRButtonWithLayoutStyle:", v6);
      v3 = v9;
    }
  }

}

- (void)_embedHDRButtonWithLayoutStyle:(int64_t)a3
{
  void *v5;
  void *v6;
  _BOOL4 v7;
  _BOOL4 v8;
  void *v9;
  void *v10;
  id v11;

  -[CAMViewfinderViewController _bottomBar](self, "_bottomBar");
  v11 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _topBar](self, "_topBar");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _HDRButton](self, "_HDRButton");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = +[CAMBottomBar wantsVerticalBarForLayoutStyle:](CAMBottomBar, "wantsVerticalBarForLayoutStyle:", a3);
  v8 = -[CAMViewfinderViewController isEmulatingImagePicker](self, "isEmulatingImagePicker");
  if (a3 == 2 || v8)
  {
    objc_msgSend(v5, "setHDRButton:", 0);
    v9 = v11;
    v10 = 0;
  }
  else
  {
    if (!v7)
    {
      objc_msgSend(v11, "setHDRButton:", 0);
      objc_msgSend(v5, "setHDRButton:", v6);
      objc_msgSend(v5, "configureForMode:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"));
      goto LABEL_8;
    }
    objc_msgSend(v5, "setHDRButton:", 0);
    v9 = v11;
    v10 = v6;
  }
  objc_msgSend(v9, "setHDRButton:", v10);
LABEL_8:

}

- (void)_createHDRBadgeIfNecessary
{
  void *v3;
  char v4;
  CAMHDRBadge *v5;
  CAMHDRBadge *v6;
  CAMHDRBadge *HDRBadge;

  if (!self->__HDRBadge)
  {
    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "isSmartHDRSupported");

    if ((v4 & 1) == 0)
    {
      v5 = [CAMHDRBadge alloc];
      v6 = -[CAMHDRBadge initWithFrame:](v5, "initWithFrame:", *MEMORY[0x1E0C9D648], *(double *)(MEMORY[0x1E0C9D648] + 8), *(double *)(MEMORY[0x1E0C9D648] + 16), *(double *)(MEMORY[0x1E0C9D648] + 24));
      HDRBadge = self->__HDRBadge;
      self->__HDRBadge = v6;

    }
  }
  -[CAMViewfinderViewController _embedHDRBadgeWithLayoutStyle:](self, "_embedHDRBadgeWithLayoutStyle:", -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle"));
}

- (void)_embedHDRBadgeWithLayoutStyle:(int64_t)a3
{
  void *v5;
  _BOOL4 v6;
  void *v8;
  id v9;

  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _HDRBadge](self, "_HDRBadge");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[CAMViewfinderViewController isEmulatingImagePicker](self, "isEmulatingImagePicker");
  if (a3 == 2 || v6)
    v8 = 0;
  else
    v8 = v5;
  objc_msgSend(v9, "setHDRBadge:", v8);

}

- (BOOL)_shouldUseZoomControlInsteadOfSlider
{
  uint64_t v3;
  char v4;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend((id)v3, "zoomControlSupported");

  LOBYTE(v3) = -[CAMViewfinderViewController isEmulatingImagePicker](self, "isEmulatingImagePicker");
  return v4 & (v3 ^ 1 | -[CAMViewfinderViewController isShowingStandardControls](self, "isShowingStandardControls"));
}

- (void)_createBurstIndicatorViewIfNecessary
{
  int64_t v3;
  CAMBurstIndicatorView *v4;
  CAMBurstIndicatorView *burstIndicatorView;

  if (!self->__burstIndicatorView)
  {
    if (-[CAMViewfinderViewController _shouldCreateAndEmbedControls](self, "_shouldCreateAndEmbedControls"))
    {
      v3 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
      v4 = -[CAMBurstIndicatorView initWithLayoutStyle:]([CAMBurstIndicatorView alloc], "initWithLayoutStyle:", v3);
      burstIndicatorView = self->__burstIndicatorView;
      self->__burstIndicatorView = v4;

      -[CAMBurstIndicatorView setAlpha:](self->__burstIndicatorView, "setAlpha:", 0.0);
      -[CAMViewfinderViewController _embedBurstIndicatorViewWithLayoutStyle:](self, "_embedBurstIndicatorViewWithLayoutStyle:", v3);
    }
  }
}

- (void)_embedBurstIndicatorViewWithLayoutStyle:(int64_t)a3
{
  void *v5;
  _BOOL4 v6;
  void *v8;
  id v9;

  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _burstIndicatorView](self, "_burstIndicatorView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[CAMViewfinderViewController isEmulatingImagePicker](self, "isEmulatingImagePicker");
  if (a3 == 2 || v6)
    v8 = 0;
  else
    v8 = v5;
  objc_msgSend(v9, "setBurstIndicatorView:", v8);

}

- (void)_createFilterButtonIfNecessary
{
  int64_t v3;
  CAMFilterButton *v4;
  CAMFilterButton *filterButton;

  if (!self->__filterButton)
  {
    if (-[CAMViewfinderViewController _shouldCreateAndEmbedControls](self, "_shouldCreateAndEmbedControls"))
    {
      v3 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
      +[CAMFilterButton filterButtonWithLayoutStyle:](CAMFilterButton, "filterButtonWithLayoutStyle:", v3);
      v4 = (CAMFilterButton *)objc_claimAutoreleasedReturnValue();
      filterButton = self->__filterButton;
      self->__filterButton = v4;

      -[CAMFilterButton addTarget:action:forControlEvents:](self->__filterButton, "addTarget:action:forControlEvents:", self, sel__handleFilterButtonTapped_, 64);
      -[CAMFilterButton setExclusiveTouch:](self->__filterButton, "setExclusiveTouch:", 1);
      -[CAMViewfinderViewController _updateFilterButtonOnState](self, "_updateFilterButtonOnState");
      -[CAMViewfinderViewController _embedFilterButtonWithLayoutStyle:](self, "_embedFilterButtonWithLayoutStyle:", v3);
    }
  }
}

- (void)_updateFilterButtonOnState
{
  int64_t v3;
  int64_t v4;
  _BOOL8 v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v3 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
  v4 = -[CAMViewfinderViewController _effectFilterTypeForMode:](self, "_effectFilterTypeForMode:", v3);
  v5 = v4 != +[CAMUserPreferences defaultFilterTypeForMode:](CAMUserPreferences, "defaultFilterTypeForMode:", v3);
  -[CAMViewfinderViewController _filterButton](self, "_filterButton");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setOn:", v5);

  -[CAMViewfinderViewController _controlDrawer](self, "_controlDrawer");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "filterButton");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setOn:", v5);

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "controlStatusBar");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "filterIndicator");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setOn:", v5);

}

- (int64_t)_effectFilterTypeForMode:(int64_t)a3
{
  if (!-[CAMViewfinderViewController _canUseFilteringForLayoutStyle:](self, "_canUseFilteringForLayoutStyle:", -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle")))return +[CAMUserPreferences defaultFilterTypeForMode:](CAMUserPreferences, "defaultFilterTypeForMode:", a3);
  if (a3 == 6)
    return -[CAMViewfinderViewController _portraitModeEffectFilterType](self, "_portraitModeEffectFilterType");
  if (a3 == 4)
    return -[CAMViewfinderViewController _squareModeEffectFilterType](self, "_squareModeEffectFilterType");
  if (a3)
    return 0;
  return -[CAMViewfinderViewController _photoModeEffectFilterType](self, "_photoModeEffectFilterType");
}

- (BOOL)_canUseFilteringForLayoutStyle:(int64_t)a3
{
  void *v4;
  char v5;
  BOOL v6;

  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "preserveEffectFilter");
  if (a3 == 2)
    v6 = v5;
  else
    v6 = 1;

  return v6;
}

- (int64_t)_photoModeEffectFilterType
{
  return self->__photoModeEffectFilterType;
}

- (void)_embedFilterButtonWithLayoutStyle:(int64_t)a3
{
  void *v5;
  void *v6;
  _BOOL4 v7;
  _BOOL4 v8;
  int v9;
  void *v10;
  id v11;

  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "topBar");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _filterButton](self, "_filterButton");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = +[CAMBottomBar wantsVerticalBarForLayoutStyle:](CAMBottomBar, "wantsVerticalBarForLayoutStyle:", a3);
  v8 = -[CAMViewfinderViewController isEmulatingImagePicker](self, "isEmulatingImagePicker");
  v9 = a3 == 2 || v8;
  if (v9 | v7)
    v10 = 0;
  else
    v10 = v6;
  objc_msgSend(v5, "setFilterButton:", v10);

}

- (void)_createQRCodeInstructionLabelIfNecessary
{
  CAMQRCodeInstructionLabel *v3;
  CAMQRCodeInstructionLabel *v4;
  CAMQRCodeInstructionLabel *qrCodeInstructionLabel;

  if (!self->__qrCodeInstructionLabel)
  {
    if (-[CAMViewfinderViewController _shouldCreateAndEmbedControls](self, "_shouldCreateAndEmbedControls"))
    {
      v3 = [CAMQRCodeInstructionLabel alloc];
      v4 = -[CAMInstructionLabel initWithFrame:](v3, "initWithFrame:", *MEMORY[0x1E0C9D648], *(double *)(MEMORY[0x1E0C9D648] + 8), *(double *)(MEMORY[0x1E0C9D648] + 16), *(double *)(MEMORY[0x1E0C9D648] + 24));
      qrCodeInstructionLabel = self->__qrCodeInstructionLabel;
      self->__qrCodeInstructionLabel = v4;

      -[CAMInstructionLabel setUseModeDialFontSize:](self->__qrCodeInstructionLabel, "setUseModeDialFontSize:", 1);
      -[CAMViewfinderViewController _updateQRCodeInstructionLabelForCurrentState](self, "_updateQRCodeInstructionLabelForCurrentState");
      -[CAMViewfinderViewController _embedQRCodeInstructionLabelWithLayoutStyle:](self, "_embedQRCodeInstructionLabelWithLayoutStyle:", -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle"));
    }
  }
}

- (void)_updateQRCodeInstructionLabelForCurrentState
{
  unint64_t v3;
  uint64_t v4;
  id v5;

  -[CAMViewfinderViewController _targetQRCodeInstructionLabel](self, "_targetQRCodeInstructionLabel");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v3 = -[CAMViewfinderViewController _currentDevice](self, "_currentDevice") - 1;
  if (v3 > 0xA)
    v4 = 0;
  else
    v4 = qword_1DB9A53B8[v3];
  objc_msgSend(v5, "setDevicePosition:", v4);
  objc_msgSend(v5, "setMRCResults:", MEMORY[0x1E0C9AA60]);

}

- (int64_t)_currentDevice
{
  void *v2;
  int64_t v3;

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "device");

  return v3;
}

- (void)_embedQRCodeInstructionLabelWithLayoutStyle:(int64_t)a3
{
  void *v5;
  _BOOL4 v6;
  void *v8;
  id v9;

  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _qrCodeInstructionLabel](self, "_qrCodeInstructionLabel");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[CAMViewfinderViewController isEmulatingImagePicker](self, "isEmulatingImagePicker");
  if (a3 == 2 || v6)
    v8 = 0;
  else
    v8 = v5;
  objc_msgSend(v9, "setQrCodeInstructionLabel:", v8);

}

- (void)_destroyGridViewIfNecessary
{
  CAMGridView *gridView;

  if (self->__gridView)
  {
    -[CAMViewfinderViewController _unembedGridView](self, "_unembedGridView");
    gridView = self->__gridView;
    self->__gridView = 0;

  }
}

- (void)_createOrDestroyLevelViewIfNecessary
{
  int64_t v3;
  char v4;
  _BOOL4 v5;
  id v6;

  v3 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v6, "shouldShowLevelView");
  v5 = -[CAMViewfinderViewController _shouldCreateLevelViewForMode:](self, "_shouldCreateLevelViewForMode:", v3);
  if ((v4 & 1) != 0)
  {
    if (v5)
      -[CAMViewfinderViewController _createLevelViewIfNecessary](self, "_createLevelViewIfNecessary");
  }
  else
  {
    -[CAMViewfinderViewController _destroyLevelViewIfNecessary](self, "_destroyLevelViewIfNecessary");
  }

}

- (void)_destroyLevelViewIfNecessary
{
  CAMLevelIndicatorView *levelView;

  if (self->__levelView)
  {
    -[CAMViewfinderViewController _unembedLevelView](self, "_unembedLevelView");
    levelView = self->__levelView;
    self->__levelView = 0;

  }
}

- (void)_createFilterScrubberGestureRecognizersIfNecessary
{
  void *v3;
  char v4;
  UISwipeGestureRecognizer *v5;
  UISwipeGestureRecognizer *previousFilterGestureRecognizer;
  UISwipeGestureRecognizer *v7;
  UISwipeGestureRecognizer *nextFilterGestureRecognizer;
  id v9;

  -[CAMViewfinderViewController _createVerticalSwipeGestureRecognizersIfNecessary](self, "_createVerticalSwipeGestureRecognizersIfNecessary");
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isCTMSupported");

  if ((v4 & 1) == 0)
  {
    -[CAMViewfinderViewController view](self, "view");
    v9 = (id)objc_claimAutoreleasedReturnValue();
    if (!self->__previousFilterGestureRecognizer)
    {
      v5 = (UISwipeGestureRecognizer *)objc_msgSend(objc_alloc(MEMORY[0x1E0DC3D10]), "initWithTarget:action:", self, sel__handleSwipeToPreviousFilterRecognizer_);
      previousFilterGestureRecognizer = self->__previousFilterGestureRecognizer;
      self->__previousFilterGestureRecognizer = v5;

      -[UISwipeGestureRecognizer setDirection:](self->__previousFilterGestureRecognizer, "setDirection:", 1);
      -[UISwipeGestureRecognizer setDelegate:](self->__previousFilterGestureRecognizer, "setDelegate:", self);
      objc_msgSend(v9, "addGestureRecognizer:", self->__previousFilterGestureRecognizer);
    }
    if (!self->__nextFilterGestureRecognizer)
    {
      v7 = (UISwipeGestureRecognizer *)objc_msgSend(objc_alloc(MEMORY[0x1E0DC3D10]), "initWithTarget:action:", self, sel__handleSwipeToNextFilterRecognizer_);
      nextFilterGestureRecognizer = self->__nextFilterGestureRecognizer;
      self->__nextFilterGestureRecognizer = v7;

      -[UISwipeGestureRecognizer setDirection:](self->__nextFilterGestureRecognizer, "setDirection:", 2);
      -[UISwipeGestureRecognizer setDelegate:](self->__nextFilterGestureRecognizer, "setDelegate:", self);
      objc_msgSend(v9, "addGestureRecognizer:", self->__nextFilterGestureRecognizer);
    }

  }
}

- (void)_updateEnabledControlsWithReason:(id)a3
{
  -[CAMViewfinderViewController _updateEnabledControlsWithReason:forceLog:](self, "_updateEnabledControlsWithReason:forceLog:", a3, 0);
}

- (void)_updateEnabledControlsWithReason:(id)a3 forceLog:(BOOL)a4
{
  void *v5;
  void *v6;
  void *v7;
  _BOOL8 v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  _BOOL8 v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t j;
  uint64_t v26;
  _BOOL8 v27;
  void *v28;
  _BOOL8 v29;
  void *v30;
  _BOOL8 v31;
  void *v32;
  void *v33;
  _BOOL8 v34;
  _BOOL8 v35;
  void *v36;
  NSObject *v37;
  void *v38;
  _BOOL4 v39;
  NSObject *v40;
  void *v41;
  NSObject *v42;
  void *v43;
  NSObject *v44;
  void *v45;
  NSObject *v46;
  void *v47;
  NSObject *v48;
  void *v49;
  NSObject *v50;
  void *v51;
  NSObject *v52;
  void *v53;
  NSObject *v54;
  void *v55;
  NSObject *v56;
  void *v57;
  NSObject *v58;
  void *v59;
  NSObject *v60;
  void *v61;
  BOOL v62;
  unsigned __int8 v63;
  BOOL v64;
  unsigned __int8 v65;
  BOOL v66;
  unsigned __int8 v67;
  BOOL v68;
  unsigned __int8 v69;
  BOOL v70;
  unsigned __int8 v71;
  BOOL v72;
  unsigned __int8 v73;
  BOOL v74;
  unsigned __int8 v75;
  BOOL v76;
  unsigned __int8 v77;
  BOOL v78;
  unsigned __int8 v79;
  BOOL v80;
  unsigned __int8 v81;
  BOOL v82;
  unsigned __int8 v83;
  int v84;
  int v85;
  void *v86;
  _BOOL4 v87;
  id v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint8_t buf[4];
  void *v98;
  _BYTE v99[128];
  _BYTE v100[128];
  uint64_t v101;

  v87 = a4;
  v101 = *MEMORY[0x1E0C80C00];
  v88 = a3;
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "controlDrawer");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v86 = v5;
  objc_msgSend(v5, "controlStatusBar");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = -[CAMViewfinderViewController _shouldEnableControlDrawerToggle](self, "_shouldEnableControlDrawerToggle");
  objc_msgSend(v7, "directionIndicator");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setEnabled:", v8);

  -[CAMViewfinderViewController _primaryControlStatusIndicatorTypes](self, "_primaryControlStatusIndicatorTypes");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _secondaryControlStatusIndicatorTypes](self, "_secondaryControlStatusIndicatorTypes");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "arrayByAddingObjectsFromArray:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  v95 = 0u;
  v96 = 0u;
  v93 = 0u;
  v94 = 0u;
  v13 = v12;
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v93, v100, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v94;
    do
    {
      for (i = 0; i != v15; ++i)
      {
        if (*(_QWORD *)v94 != v16)
          objc_enumerationMutation(v13);
        v18 = objc_msgSend(*(id *)(*((_QWORD *)&v93 + 1) + 8 * i), "integerValue");
        v19 = -[CAMViewfinderViewController _shouldEnableControlStatusIndicator:](self, "_shouldEnableControlStatusIndicator:", v18);
        objc_msgSend(v7, "indicatorForType:", v18);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "setEnabled:", v19);

      }
      v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v93, v100, 16);
    }
    while (v15);
  }

  v91 = 0u;
  v92 = 0u;
  v89 = 0u;
  v90 = 0u;
  -[CAMViewfinderViewController _allControlDrawerTypes](self, "_allControlDrawerTypes");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v89, v99, 16);
  if (v22)
  {
    v23 = v22;
    v24 = *(_QWORD *)v90;
    do
    {
      for (j = 0; j != v23; ++j)
      {
        if (*(_QWORD *)v90 != v24)
          objc_enumerationMutation(v21);
        v26 = objc_msgSend(*(id *)(*((_QWORD *)&v89 + 1) + 8 * j), "integerValue");
        v27 = -[CAMViewfinderViewController _shouldEnableDrawerControl:](self, "_shouldEnableDrawerControl:", v26);
        objc_msgSend(v6, "buttonForType:", v26);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v28, "setEnabled:", v27);

      }
      v23 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v89, v99, 16);
    }
    while (v23);
  }

  v85 = -[CAMFlashButton isEnabled](self->__flashButton, "isEnabled");
  v84 = -[CAMViewfinderViewController _shouldEnableFlashButton](self, "_shouldEnableFlashButton");
  v83 = -[CAMHDRButton isEnabled](self->__HDRButton, "isEnabled");
  v82 = -[CAMViewfinderViewController _shouldEnableHDRButton](self, "_shouldEnableHDRButton");
  v81 = -[CAMTimerButton isEnabled](self->__timerButton, "isEnabled");
  v80 = -[CAMViewfinderViewController _shouldEnableTimerButton](self, "_shouldEnableTimerButton");
  v79 = -[CAMLivePhotoButton isEnabled](self->__livePhotoButton, "isEnabled");
  v78 = -[CAMViewfinderViewController _shouldEnableLivePhotoButton](self, "_shouldEnableLivePhotoButton");
  v77 = -[CAMFlipButton isEnabled](self->__flipButton, "isEnabled");
  v76 = -[CAMViewfinderViewController _shouldEnableFlipButton](self, "_shouldEnableFlipButton");
  v75 = -[CAMImageWell isEnabled](self->__imageWell, "isEnabled");
  v74 = -[CAMViewfinderViewController _shouldEnableImageWell](self, "_shouldEnableImageWell");
  v73 = -[CUShutterButton isEnabled](self->__shutterButton, "isEnabled");
  v72 = -[CAMViewfinderViewController _shouldEnableShutterButton](self, "_shouldEnableShutterButton");
  v71 = -[CUShutterButton isEnabled](self->__stillDuringVideoButton, "isEnabled");
  v70 = -[CAMViewfinderViewController _shouldEnableShutterButton](self, "_shouldEnableShutterButton");
  v69 = -[CAMFilterButton isEnabled](self->__filterButton, "isEnabled");
  v68 = -[CAMViewfinderViewController _shouldEnableFilterButton](self, "_shouldEnableFilterButton");
  v67 = -[CAMModeDial isEnabled](self->__modeDial, "isEnabled");
  v66 = -[CAMViewfinderViewController _shouldEnableModeDial](self, "_shouldEnableModeDial");
  v65 = -[CAMZoomSlider isEnabled](self->__zoomSlider, "isEnabled");
  v64 = -[CAMViewfinderViewController _shouldEnableZoomSlider](self, "_shouldEnableZoomSlider");
  v63 = -[CAMZoomControl isEnabled](self->__zoomControl, "isEnabled");
  v62 = -[CAMViewfinderViewController _shouldEnableZoomControl](self, "_shouldEnableZoomControl");
  -[CAMFlashButton setEnabled:](self->__flashButton, "setEnabled:", -[CAMViewfinderViewController _shouldEnableFlashButton](self, "_shouldEnableFlashButton"));
  -[CAMHDRButton setEnabled:](self->__HDRButton, "setEnabled:", -[CAMViewfinderViewController _shouldEnableHDRButton](self, "_shouldEnableHDRButton"));
  -[CAMTimerButton setEnabled:](self->__timerButton, "setEnabled:", -[CAMViewfinderViewController _shouldEnableTimerButton](self, "_shouldEnableTimerButton"));
  -[CAMLivePhotoButton setEnabled:](self->__livePhotoButton, "setEnabled:", -[CAMViewfinderViewController _shouldEnableLivePhotoButton](self, "_shouldEnableLivePhotoButton"));
  -[CAMSharedLibraryButton setEnabled:](self->__sharedLibraryButton, "setEnabled:", -[CAMViewfinderViewController _shouldEnableSharedLibraryButton](self, "_shouldEnableSharedLibraryButton"));
  -[CAMFlipButton setEnabled:](self->__flipButton, "setEnabled:", -[CAMViewfinderViewController _shouldEnableFlipButton](self, "_shouldEnableFlipButton"));
  -[CAMImageWell setEnabled:](self->__imageWell, "setEnabled:", -[CAMViewfinderViewController _shouldEnableImageWell](self, "_shouldEnableImageWell"));
  -[CUShutterButton setEnabled:](self->__shutterButton, "setEnabled:", -[CAMViewfinderViewController _shouldEnableShutterButton](self, "_shouldEnableShutterButton"));
  -[CUShutterButton setShowDisabled:](self->__shutterButton, "setShowDisabled:", -[CAMViewfinderViewController _shouldShowShutterButtonDisabled](self, "_shouldShowShutterButtonDisabled"));
  -[CAMDynamicShutterControl setEnabled:](self->__dynamicShutterControl, "setEnabled:", -[CAMViewfinderViewController _shouldEnableShutterButton](self, "_shouldEnableShutterButton"));
  -[CAMDynamicShutterControl setShowDisabled:animated:](self->__dynamicShutterControl, "setShowDisabled:animated:", -[CAMViewfinderViewController _shouldShowShutterButtonDisabled](self, "_shouldShowShutterButtonDisabled"), 1);
  -[CUShutterButton setEnabled:](self->__stillDuringVideoButton, "setEnabled:", -[CAMViewfinderViewController _shouldEnableShutterButton](self, "_shouldEnableShutterButton"));
  -[CAMFilterButton setEnabled:](self->__filterButton, "setEnabled:", -[CAMViewfinderViewController _shouldEnableFilterButton](self, "_shouldEnableFilterButton"));
  -[CEKApertureButton setEnabled:](self->__apertureButton, "setEnabled:", -[CAMViewfinderViewController _shouldEnableApertureButton](self, "_shouldEnableApertureButton"));
  -[CAMModeDial setEnabled:](self->__modeDial, "setEnabled:", -[CAMViewfinderViewController _shouldEnableModeDial](self, "_shouldEnableModeDial"));
  -[CAMZoomSlider setEnabled:](self->__zoomSlider, "setEnabled:", -[CAMViewfinderViewController _shouldEnableZoomSlider](self, "_shouldEnableZoomSlider"));
  -[CAMZoomControl setEnabled:](self->__zoomControl, "setEnabled:", -[CAMViewfinderViewController _shouldEnableZoomControl](self, "_shouldEnableZoomControl"));
  -[CAMCreativeCameraButton setEnabled:](self->__creativeCameraButton, "setEnabled:", -[CAMViewfinderViewController _shouldEnableCreativeCameraButton](self, "_shouldEnableCreativeCameraButton"));
  -[CAMVideoConfigurationStatusIndicator setEnabled:](self->__videoConfigurationStatusIndicator, "setEnabled:", -[CAMViewfinderViewController _shouldEnableVideoConfigurationControl](self, "_shouldEnableVideoConfigurationControl"));
  v29 = -[CAMViewfinderViewController _shouldEnableTextAnalysisButton](self, "_shouldEnableTextAnalysisButton");
  -[CAMViewfinderViewController _imageAnalysisButton](self, "_imageAnalysisButton");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "setEnabled:", v29);

  v31 = -[CAMViewfinderViewController _shouldEnableAutoMacroButton](self, "_shouldEnableAutoMacroButton");
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v32, "autoMacroButton");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v33, "setEnabled:", v31);

  -[CAMViewfinderViewController _setSwipeToModeSwitchEnabled:](self, "_setSwipeToModeSwitchEnabled:", -[CAMViewfinderViewController _shouldEnableSwipeToModeSwitch](self, "_shouldEnableSwipeToModeSwitch"));
  v34 = -[CAMViewfinderViewController _shouldEnableSwipeToChangeFilters](self, "_shouldEnableSwipeToChangeFilters");
  -[UISwipeGestureRecognizer setEnabled:](self->__previousFilterGestureRecognizer, "setEnabled:", v34);
  -[UISwipeGestureRecognizer setEnabled:](self->__nextFilterGestureRecognizer, "setEnabled:", v34);
  v35 = -[CAMViewfinderViewController _shouldEnableSmartStylesSwipeGestures](self, "_shouldEnableSmartStylesSwipeGestures");
  -[UISwipeGestureRecognizer setEnabled:](self->__smartStylesSwipeLeftGestureRecognizer, "setEnabled:", v35);
  -[UISwipeGestureRecognizer setEnabled:](self->__smartStylesSwipeRightGestureRecognizer, "setEnabled:", v35);
  v36 = v88;
  if (self->_userInteractionLoggingEnabled)
  {
    if (v85 != v84)
      goto LABEL_17;
    if (!v87)
    {
      if (((v83 ^ v82) & 1) == 0)
      {
LABEL_32:
        v39 = v87;
        if (((v81 ^ v80) & 1) != 0)
          goto LABEL_37;
        if (!v87)
        {
          v36 = v88;
          if (((v79 ^ v78) & 1) == 0)
            goto LABEL_48;
          goto LABEL_45;
        }
LABEL_34:
        if ((-[CAMTimerButton isEnabled](self->__timerButton, "isEnabled") & 1) != 0)
        {
          v36 = v88;
          if (((v79 ^ v78) & 1) != 0)
          {
LABEL_45:
            v44 = os_log_create("com.apple.camera", "Camera");
            if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
            {
              -[CAMViewfinderViewController _debugEnabledDescriptionForControl:withReason:](self, "_debugEnabledDescriptionForControl:withReason:", self->__livePhotoButton, v36);
              v45 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543362;
              v98 = v45;
              _os_log_impl(&dword_1DB760000, v44, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);

            }
LABEL_48:
            if (((v77 ^ v76) & 1) == 0)
            {
              if (!v39)
              {
                if (((v75 ^ v74) & 1) != 0)
                {
LABEL_61:
                  v48 = os_log_create("com.apple.camera", "Camera");
                  if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
                  {
                    -[CAMViewfinderViewController _debugEnabledDescriptionForControl:withReason:](self, "_debugEnabledDescriptionForControl:withReason:", self->__imageWell, v36);
                    v49 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 138543362;
                    v98 = v49;
                    _os_log_impl(&dword_1DB760000, v48, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);

                  }
                  goto LABEL_64;
                }
                goto LABEL_64;
              }
              goto LABEL_50;
            }
            goto LABEL_53;
          }
LABEL_41:
          if ((-[CAMLivePhotoButton isEnabled](self->__livePhotoButton, "isEnabled") & 1) != 0)
          {
            if (((v77 ^ v76) & 1) == 0)
            {
LABEL_50:
              if ((-[CAMFlipButton isEnabled](self->__flipButton, "isEnabled") & 1) != 0)
              {
                if (((v75 ^ v74) & 1) != 0)
                  goto LABEL_61;
LABEL_57:
                if ((-[CAMImageWell isEnabled](self->__imageWell, "isEnabled") & 1) != 0)
                {
                  if (((v73 ^ v72) & 1) != 0)
                    goto LABEL_69;
                  goto LABEL_66;
                }
                goto LABEL_61;
              }
            }
LABEL_53:
            v46 = os_log_create("com.apple.camera", "Camera");
            if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
            {
              -[CAMViewfinderViewController _debugEnabledDescriptionForControl:withReason:](self, "_debugEnabledDescriptionForControl:withReason:", self->__flipButton, v36);
              v47 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543362;
              v98 = v47;
              _os_log_impl(&dword_1DB760000, v46, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);

            }
            if (((v75 ^ v74) & 1) != 0)
              goto LABEL_61;
            if (v39)
              goto LABEL_57;
LABEL_64:
            if (((v73 ^ v72) & 1) != 0)
              goto LABEL_69;
            if (!v39)
            {
              if (((v71 ^ v70) & 1) == 0)
                goto LABEL_80;
              goto LABEL_77;
            }
LABEL_66:
            if ((-[CUShutterButton isEnabled](self->__shutterButton, "isEnabled") & 1) != 0)
            {
              if (((v71 ^ v70) & 1) != 0)
              {
LABEL_77:
                v52 = os_log_create("com.apple.camera", "Camera");
                if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
                {
                  -[CAMViewfinderViewController _debugEnabledDescriptionForControl:withReason:](self, "_debugEnabledDescriptionForControl:withReason:", self->__stillDuringVideoButton, v36);
                  v53 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543362;
                  v98 = v53;
                  _os_log_impl(&dword_1DB760000, v52, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);

                }
LABEL_80:
                if (((v69 ^ v68) & 1) == 0)
                {
                  if (!v39)
                  {
                    if (((v67 ^ v66) & 1) != 0)
                    {
LABEL_93:
                      v56 = os_log_create("com.apple.camera", "Camera");
                      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
                      {
                        -[CAMViewfinderViewController _debugEnabledDescriptionForControl:withReason:](self, "_debugEnabledDescriptionForControl:withReason:", self->__modeDial, v36);
                        v57 = (void *)objc_claimAutoreleasedReturnValue();
                        *(_DWORD *)buf = 138543362;
                        v98 = v57;
                        _os_log_impl(&dword_1DB760000, v56, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);

                      }
                      goto LABEL_96;
                    }
                    goto LABEL_96;
                  }
                  goto LABEL_82;
                }
                goto LABEL_85;
              }
LABEL_73:
              if ((-[CUShutterButton isEnabled](self->__stillDuringVideoButton, "isEnabled") & 1) != 0)
              {
                if (((v69 ^ v68) & 1) == 0)
                {
LABEL_82:
                  if ((-[CAMFilterButton isEnabled](self->__filterButton, "isEnabled") & 1) != 0)
                  {
                    if (((v67 ^ v66) & 1) != 0)
                      goto LABEL_93;
LABEL_89:
                    if ((-[CAMModeDial isEnabled](self->__modeDial, "isEnabled") & 1) != 0)
                    {
                      if (((v65 ^ v64) & 1) != 0)
                        goto LABEL_101;
                      goto LABEL_98;
                    }
                    goto LABEL_93;
                  }
                }
LABEL_85:
                v54 = os_log_create("com.apple.camera", "Camera");
                if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
                {
                  -[CAMViewfinderViewController _debugEnabledDescriptionForControl:withReason:](self, "_debugEnabledDescriptionForControl:withReason:", self->__filterButton, v36);
                  v55 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543362;
                  v98 = v55;
                  _os_log_impl(&dword_1DB760000, v54, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);

                }
                if (((v67 ^ v66) & 1) != 0)
                  goto LABEL_93;
                if (v39)
                  goto LABEL_89;
LABEL_96:
                if (((v65 ^ v64) & 1) != 0)
                  goto LABEL_101;
                if (!v39)
                {
                  if (((v63 ^ v62) & 1) == 0)
                    goto LABEL_111;
                  goto LABEL_108;
                }
LABEL_98:
                if ((-[CAMZoomSlider isEnabled](self->__zoomSlider, "isEnabled") & 1) != 0)
                {
                  if (((v63 ^ v62) & 1) != 0)
                  {
LABEL_108:
                    v60 = os_log_create("com.apple.camera", "Camera");
                    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
                    {
                      -[CAMViewfinderViewController _debugEnabledDescriptionForControl:withReason:](self, "_debugEnabledDescriptionForControl:withReason:", self->__zoomControl, v36);
                      v61 = (void *)objc_claimAutoreleasedReturnValue();
                      *(_DWORD *)buf = 138543362;
                      v98 = v61;
                      _os_log_impl(&dword_1DB760000, v60, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);

                    }
                    goto LABEL_111;
                  }
LABEL_105:
                  if ((-[CAMZoomControl isEnabled](self->__zoomControl, "isEnabled") & 1) != 0)
                    goto LABEL_111;
                  goto LABEL_108;
                }
LABEL_101:
                v58 = os_log_create("com.apple.camera", "Camera");
                if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
                {
                  -[CAMViewfinderViewController _debugEnabledDescriptionForControl:withReason:](self, "_debugEnabledDescriptionForControl:withReason:", self->__zoomSlider, v36);
                  v59 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543362;
                  v98 = v59;
                  _os_log_impl(&dword_1DB760000, v58, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);

                }
                if (((v63 ^ v62) & 1) != 0)
                  goto LABEL_108;
                if (!v87)
                  goto LABEL_111;
                goto LABEL_105;
              }
              goto LABEL_77;
            }
LABEL_69:
            v50 = os_log_create("com.apple.camera", "Camera");
            if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
            {
              -[CAMViewfinderViewController _debugEnabledDescriptionForControl:withReason:](self, "_debugEnabledDescriptionForControl:withReason:", self->__shutterButton, v36);
              v51 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543362;
              v98 = v51;
              _os_log_impl(&dword_1DB760000, v50, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);

            }
            if (((v71 ^ v70) & 1) != 0)
              goto LABEL_77;
            if (!v39)
              goto LABEL_80;
            goto LABEL_73;
          }
          goto LABEL_45;
        }
LABEL_37:
        v42 = os_log_create("com.apple.camera", "Camera");
        v36 = v88;
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
        {
          -[CAMViewfinderViewController _debugEnabledDescriptionForControl:withReason:](self, "_debugEnabledDescriptionForControl:withReason:", self->__timerButton, v88);
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v98 = v43;
          _os_log_impl(&dword_1DB760000, v42, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);

        }
        if (((v79 ^ v78) & 1) != 0)
          goto LABEL_45;
        if (!v39)
          goto LABEL_48;
        goto LABEL_41;
      }
      goto LABEL_29;
    }
    if ((-[CAMFlashButton isEnabled](self->__flashButton, "isEnabled") & 1) != 0)
    {
      if (((v83 ^ v82) & 1) == 0)
      {
LABEL_25:
        if ((-[CAMHDRButton isEnabled](self->__HDRButton, "isEnabled") & 1) != 0)
        {
          v39 = v87;
          if (((v81 ^ v80) & 1) != 0)
            goto LABEL_37;
          goto LABEL_34;
        }
      }
    }
    else
    {
LABEL_17:
      v37 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        -[CAMViewfinderViewController _debugEnabledDescriptionForControl:withReason:](self, "_debugEnabledDescriptionForControl:withReason:", self->__flashButton, v88);
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v98 = v38;
        _os_log_impl(&dword_1DB760000, v37, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);

      }
      if (((v83 ^ v82) & 1) == 0)
      {
        if (!v87)
          goto LABEL_32;
        goto LABEL_25;
      }
    }
LABEL_29:
    v40 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      -[CAMViewfinderViewController _debugEnabledDescriptionForControl:withReason:](self, "_debugEnabledDescriptionForControl:withReason:", self->__HDRButton, v88);
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v98 = v41;
      _os_log_impl(&dword_1DB760000, v40, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);

    }
    goto LABEL_32;
  }
LABEL_111:

}

- (BOOL)_shouldEnableFlashButton
{
  BOOL v3;
  BOOL v4;
  void *v5;
  char v6;

  v3 = -[CAMViewfinderViewController _isOutOfDiskSpace](self, "_isOutOfDiskSpace");
  v4 = -[CAMViewfinderViewController _isModeDisabled](self, "_isModeDisabled");
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isCapturingLowLightImage");

  return ((v3 || v4) | v6) ^ 1;
}

- (BOOL)_isOutOfDiskSpace
{
  return self->__outOfDiskSpace;
}

- (BOOL)_shouldEnableHDRButton
{
  BOOL v3;
  BOOL v4;
  void *v5;
  char v6;

  v3 = -[CAMViewfinderViewController _isOutOfDiskSpace](self, "_isOutOfDiskSpace");
  v4 = -[CAMViewfinderViewController _isModeDisabled](self, "_isModeDisabled");
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isCapturingLowLightImage");

  return ((v3 || v4) | v6) ^ 1;
}

- (BOOL)_shouldEnableTimerButton
{
  BOOL v3;
  BOOL v4;
  BOOL v5;
  void *v6;
  char v7;

  v3 = -[CAMViewfinderViewController _isCapturingFromTimer](self, "_isCapturingFromTimer");
  v4 = -[CAMViewfinderViewController _isOutOfDiskSpace](self, "_isOutOfDiskSpace");
  v5 = -[CAMViewfinderViewController _isModeDisabled](self, "_isModeDisabled");
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isCapturingLowLightImage");

  return ((v3 || v4 || v5) | v7) ^ 1;
}

- (BOOL)_shouldEnableLivePhotoButton
{
  BOOL v3;
  void *v4;
  char v5;

  v3 = -[CAMViewfinderViewController _isModeDisabled](self, "_isModeDisabled");
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isCapturingLowLightImage");

  return (v3 | v5) ^ 1;
}

- (BOOL)_shouldEnableFlipButton
{
  CAMViewfinderViewController *v2;
  void *v3;
  char v4;

  v2 = self;
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isConfigurationAvailable");
  LOBYTE(v2) = v4 & !-[CAMViewfinderViewController _isOutOfDiskSpace](v2, "_isOutOfDiskSpace");

  return (char)v2;
}

- (BOOL)_shouldEnableImageWell
{
  void *v2;
  char v3;

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isCapturingLowLightImage");

  return v3 ^ 1;
}

- (BOOL)_shouldEnableShutterButton
{
  return -[CAMViewfinderViewController _reasonsToDisableShutterButton](self, "_reasonsToDisableShutterButton") == 0;
}

- (unint64_t)_reasonsToDisableShutterButton
{
  unint64_t v3;
  int64_t v4;
  void *v5;
  int v6;
  int v7;
  int v8;
  _BOOL4 v9;
  _BOOL4 v10;
  int v11;
  int v12;
  void *v13;
  int v14;
  _BOOL4 v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  int v20;
  _BOOL4 v21;
  unint64_t v22;
  unint64_t v23;
  void *v25;
  int v26;
  _BOOL4 v27;
  int v28;

  v3 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
  v4 = -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition");
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = 1;
  if (v3 <= 9 && ((1 << v3) & 0x3D7) != 0)
  {
    if (objc_msgSend(v5, "isCapturingLowLightImage"))
      v6 = -[CAMViewfinderViewController _isCurrentLowLightCaptureCancelable](self, "_isCurrentLowLightCaptureCancelable");
    else
      v6 = objc_msgSend(v5, "isCaptureAvailable");
  }
  v28 = v6;
  v27 = -[CAMViewfinderViewController _isOutOfDiskSpace](self, "_isOutOfDiskSpace");
  if (objc_msgSend(v5, "isCapturingLowLightImage")
    && -[CAMViewfinderViewController _isCurrentLowLightCaptureCancelable](self, "_isCurrentLowLightCaptureCancelable"))
  {
    v7 = 1;
  }
  else
  {
    v7 = !-[CAMViewfinderViewController isPreventingAdditionalCaptures](self, "isPreventingAdditionalCaptures");
  }
  v26 = v7;
  -[CAMViewfinderViewController _closedViewfinderController](self, "_closedViewfinderController");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v25, "isViewfinderClosed");
  v9 = -[CAMViewfinderViewController _isOpeningViewfinder](self, "_isOpeningViewfinder");
  v10 = -[CAMViewfinderViewController _isClosingViewfinder](self, "_isClosingViewfinder");
  v11 = objc_msgSend(v5, "isInterrupted");
  v12 = 0;
  if ((v11 & 1) == 0 && v9)
  {
    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v13, "allowCaptureWhileViewfinderIsOpeningForMode:devicePosition:", v3, v4) ^ 1;

  }
  v14 = v8 | v10;
  v15 = -[CAMViewfinderViewController _isModeDisabled](self, "_isModeDisabled");
  -[CAMViewfinderViewController _storageController](self, "_storageController");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "purgeableStorageContainer");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "isPurging");

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v19, "isProResVideoSupportedForMode:videoConfiguration:outputToExternalStorage:", v3, -[CAMViewfinderViewController _currentVideoConfiguration](self, "_currentVideoConfiguration"), -[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled"));

  v21 = -[CAMViewfinderViewController _desiredProResVideoMode](self, "_desiredProResVideoMode") == 1;
  v22 = v28 ^ 1u;
  if (v27)
    v22 |= 2uLL;
  if ((v14 & ~v11) != 0)
    v22 |= 4uLL;
  if (v12)
    v22 |= 0x40uLL;
  if (!v26)
    v22 |= 8uLL;
  if (v15)
    v22 |= 0x10uLL;
  if ((v18 & v20 & v21) != 0)
    v23 = v22 | 0x80;
  else
    v23 = v22;

  return v23;
}

- (BOOL)_isOpeningViewfinder
{
  return self->__openingViewfinder;
}

- (BOOL)_isClosingViewfinder
{
  return self->__closingViewfinder;
}

- (BOOL)_shouldEnableFilterButton
{
  BOOL v3;
  BOOL v4;
  void *v5;
  char v6;

  v3 = -[CAMViewfinderViewController _isOutOfDiskSpace](self, "_isOutOfDiskSpace");
  v4 = -[CAMViewfinderViewController _isModeDisabled](self, "_isModeDisabled");
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isCapturingLowLightImage");

  return ((v3 || v4) | v6) ^ 1;
}

- (BOOL)_shouldEnableModeDial
{
  void *v3;
  int v4;
  char v5;
  void *v6;
  BOOL v7;
  char v8;
  char v9;
  BOOL v10;

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isConfigurationAvailable");
  v5 = -[CAMViewfinderViewController _isCapturingFromTimer](self, "_isCapturingFromTimer");
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = -[CAMViewfinderViewController _shouldHideUtilityBarForGraphConfiguration:](self, "_shouldHideUtilityBarForGraphConfiguration:", v6);

  v8 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle") == 1 || v7;
  v9 = v8 & ~v5;
  if (v4)
    v10 = v9;
  else
    v10 = 0;

  return v10;
}

- (BOOL)_shouldEnableZoomSlider
{
  BOOL v3;

  v3 = -[CAMViewfinderViewController _isOutOfDiskSpace](self, "_isOutOfDiskSpace");
  return (v3 | -[CAMViewfinderViewController _isModeDisabled](self, "_isModeDisabled")) ^ 1;
}

- (BOOL)_shouldEnableZoomControl
{
  void *v3;
  _BOOL4 v4;
  _BOOL4 v5;
  unsigned int v6;

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = -[CAMViewfinderViewController _isOutOfDiskSpace](self, "_isOutOfDiskSpace");
  v5 = -[CAMViewfinderViewController _isModeDisabled](self, "_isModeDisabled");
  v6 = ((v4 || v5) | objc_msgSend(v3, "isCapturingLowLightImage")) ^ 1;
  if (-[CAMViewfinderViewController _shouldUseZoomButtonForCameraToggleForCurrentModeAndDevice](self, "_shouldUseZoomButtonForCameraToggleForCurrentModeAndDevice"))
  {
    v6 &= objc_msgSend(v3, "isConfigurationAvailable");
  }

  return v6;
}

- (BOOL)_shouldShowShutterButtonDisabled
{
  BOOL v3;
  void *v4;
  int v5;
  int v6;

  v3 = -[CAMViewfinderViewController _isModeDisabled](self, "_isModeDisabled");
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "isCapturingLowLightImage"))
    v5 = !-[CAMViewfinderViewController _isCurrentLowLightCaptureCancelable](self, "_isCurrentLowLightCaptureCancelable");
  else
    v5 = 0;

  v6 = v5 | -[CAMViewfinderViewController _isLowLightCaptureCanceling](self, "_isLowLightCaptureCanceling");
  if (v3)
    return 1;
  else
    return v6;
}

- (BOOL)_shouldEnableSwipeToModeSwitch
{
  void *v3;
  _BOOL4 v4;
  int64_t v5;
  _BOOL4 v6;
  _BOOL4 v7;
  void *v8;
  int v9;
  void *v10;
  int v11;
  _BOOL4 v12;
  int v13;

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = -[CAMViewfinderViewController _shouldHideModeDialForGraphConfiguration:isCapturingBurst:](self, "_shouldHideModeDialForGraphConfiguration:isCapturingBurst:", v3, 0);

  v5 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
  v6 = -[CAMViewfinderViewController _shouldEnableModeDial](self, "_shouldEnableModeDial");
  v7 = -[CAMViewfinderViewController _isShowingFilterScrubber](self, "_isShowingFilterScrubber");
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "isSemanticStyleControlVisible");

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "isSmartStylePickerVisible");

  v12 = -[CAMViewfinderViewController _trueVideoIsActive](self, "_trueVideoIsActive");
  v13 = !v6 || v4;
  if (v5 == 2)
    v13 = 1;
  return ((v13 | v7 | v9 | v11 | v12) & 1) == 0;
}

- (void)_setSwipeToModeSwitchEnabled:(BOOL)a3
{
  _BOOL8 v3;

  v3 = a3;
  -[UISwipeGestureRecognizer setEnabled:](self->__nextModeGestureRecognizer, "setEnabled:");
  -[UISwipeGestureRecognizer setEnabled:](self->__previousModeGestureRecognizer, "setEnabled:", v3);
}

- (BOOL)_shouldEnableSwipeToChangeFilters
{
  int64_t v3;
  _BOOL4 v4;
  void *v5;
  int v6;
  _BOOL4 v7;
  int v8;
  BOOL v9;

  v3 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
  v4 = -[CAMViewfinderViewController _isShowingFilterScrubber](self, "_isShowingFilterScrubber");
  -[CAMViewfinderViewController _closedViewfinderController](self, "_closedViewfinderController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isViewfinderClosed");
  v7 = -[CAMViewfinderViewController _isOpeningViewfinder](self, "_isOpeningViewfinder");
  v8 = (v6 | v7 | -[CAMViewfinderViewController _isClosingViewfinder](self, "_isClosingViewfinder")) ^ 1;
  if (v3 == 2)
    LOBYTE(v8) = 0;
  if (v4)
    v9 = v8;
  else
    v9 = 0;

  return v9;
}

- (BOOL)_isAnimatingFilterScrubberDismissal
{
  return self->__animatingFilterScrubberDismissal;
}

- (int64_t)_bottomBarBackgroundStyleForMode:(int64_t)a3
{
  int64_t v5;
  int64_t v6;
  void *v7;
  unsigned int v8;
  _BOOL4 v9;
  _BOOL4 v10;
  void *v11;
  void *v12;
  void *v13;
  _BOOL4 v14;
  uint64_t v15;
  unsigned int v16;

  v5 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
  if (+[CAMBottomBar wantsVerticalBarForLayoutStyle:](CAMBottomBar, "wantsVerticalBarForLayoutStyle:", v5))
  {
    return 1;
  }
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isCapturingVideo");
  v9 = -[CAMViewfinderViewController isEmulatingImagePicker](self, "isEmulatingImagePicker");
  switch(a3)
  {
    case 0:
    case 4:
    case 6:
    case 9:
      v10 = v9;
      -[CAMViewfinderViewController view](self, "view");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "window");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "screen");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = !CAMIsTallScreen(v13);

      v15 = 2;
      if (v14 || v10)
        v15 = 0;
      break;
    case 1:
    case 2:
    case 7:
    case 8:
      v15 = v8;
      break;
    case 3:
      v16 = objc_msgSend(v7, "isCapturingPanorama");
      goto LABEL_11;
    case 5:
      v16 = objc_msgSend(v7, "isCapturingTimelapse");
LABEL_11:
      v15 = v16;
      break;
    default:
      v15 = 0;
      break;
  }
  if (v5 == 2)
    v6 = 1;
  else
    v6 = v15;

  return v6;
}

- (int64_t)_shutterButtonModeForCameraMode:(int64_t)a3 isCapturing:(BOOL)a4
{
  _BOOL4 v4;
  void *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  switch(a3)
  {
    case 0:
    case 4:
    case 6:
    case 9:
      +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "isLivePhotoSupported");
      v7 = 4;
      if (v4)
        v7 = 9;
      v8 = 5;
      if (!v4)
        v8 = 0;
      if (v6)
        v9 = v7;
      else
        v9 = v8;

      break;
    case 1:
    case 7:
    case 8:
      if (a4)
        v9 = 6;
      else
        v9 = 1;
      break;
    case 2:
      v10 = !a4;
      v11 = 2;
      v12 = 7;
      goto LABEL_16;
    case 3:
      if (a4)
        v9 = 5;
      else
        v9 = 0;
      break;
    case 5:
      v10 = !a4;
      v11 = 3;
      v12 = 8;
LABEL_16:
      if (v10)
        v9 = v11;
      else
        v9 = v12;
      break;
    default:
      v9 = 0;
      break;
  }
  return v9;
}

- (void)_applyTransformsForAutorotationStyle:(int64_t)a3
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  int64_t v9;
  CGAffineTransform *v10;
  void *v11;
  void *v12;
  int64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  CGAffineTransform v19;
  CGAffineTransform v20;
  CGAffineTransform v21;
  CGAffineTransform v22;
  CGAffineTransform v23;
  CGAffineTransform v24;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGAffineTransform v27;
  CGAffineTransform v28[2];
  CGAffineTransform v29;

  -[CAMViewfinderViewController view](self, "view");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "previewView");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  memset(&v29, 0, sizeof(v29));
  v9 = 1;
  CAMTransformCorrectingForOrientation(1, (uint64_t)&v29);
  memset(&v28[1], 0, sizeof(CGAffineTransform));
  -[CAMViewfinderViewController customPreviewViewTransform](self, "customPreviewViewTransform");
  switch(a3)
  {
    case 2:
      v22 = v29;
      objc_msgSend(v5, "setTransform:", &v22);
      -[CAMViewfinderViewController view](self, "view");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "window");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = CAMInterfaceOrientationForWindow(v15);

      objc_msgSend(v6, "setPreviewViewOrientation:", v9);
      if (-[CAMViewfinderViewController _isScreenExternalDisplay](self, "_isScreenExternalDisplay"))
      {
        -[CAMViewfinderViewController _motionController](self, "_motionController");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = objc_msgSend(v16, "captureOrientation");

      }
      memset(&v27, 0, sizeof(v27));
      objc_msgSend(v6, "setExternalDisplayPreviewOrientation:", v9, CAMTransformCorrectingForOrientation(v9, (uint64_t)&v27));
      t2 = v28[1];
      memset(&t1, 0, sizeof(t1));
      v21 = v27;
      CGAffineTransformConcat(&t1, &t2, &v21);
      v20 = t1;
      objc_msgSend(v8, "setTransform:", &v20);
      -[CAMViewfinderViewController _textInteractionBackground](self, "_textInteractionBackground");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = t1;
      objc_msgSend(v17, "setTransform:", &v19);
      objc_msgSend(v6, "prepareForAutorotation");

      break;
    case 1:
      v9 = 1;
      objc_msgSend(v6, "setPreviewViewOrientation:", 1);
      -[CAMViewfinderViewController view](self, "view");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "window");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = CAMInterfaceOrientationForWindow(v12);

      -[CAMViewfinderViewController _applyAutorotationCorrectingTransformForOrientation:](self, "_applyAutorotationCorrectingTransformForOrientation:", v13);
      t1 = v28[1];
      memset(&v27, 0, sizeof(v27));
      t2 = v29;
      CGAffineTransformConcat(&v27, &t1, &t2);
      v23 = v27;
      v10 = &v23;
      goto LABEL_6;
    case 0:
      v28[0] = v29;
      objc_msgSend(v5, "setTransform:", v28);
      v9 = 1;
      objc_msgSend(v6, "setPreviewViewOrientation:", 1);
      t1 = v28[1];
      memset(&v27, 0, sizeof(v27));
      t2 = v29;
      CGAffineTransformConcat(&v27, &t1, &t2);
      v24 = v27;
      v10 = &v24;
LABEL_6:
      objc_msgSend(v8, "setTransform:", v10);
      break;
  }
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "setPreviewViewOrientation:", v9);

}

- (CGAffineTransform)customPreviewViewTransform
{
  __int128 v3;

  v3 = *(_OWORD *)&self[55].d;
  *(_OWORD *)&retstr->a = *(_OWORD *)&self[55].b;
  *(_OWORD *)&retstr->c = v3;
  *(_OWORD *)&retstr->tx = *(_OWORD *)&self[55].ty;
  return self;
}

- (void)_applyAutorotationCorrectingTransformForOrientation:(int64_t)a3
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  double v23;
  double v24;
  void *v25;
  double v26;
  double v27;
  void *v28;
  double v29;
  double v30;
  void *v31;
  double v32;
  double v33;
  _OWORD v34[3];
  __int128 v35;
  __int128 v36;
  __int128 v37;

  -[CAMViewfinderViewController view](self, "view");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v36 = 0u;
  v37 = 0u;
  v35 = 0u;
  -[CAMViewfinderViewController view](self, "view", CAMTransformCorrectingForOrientation(a3, (uint64_t)&v35));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "window");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "screen");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v8, "_referenceBounds");
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v16 = v15;
  objc_msgSend(v5, "bounds");
  -[CAMViewfinderViewController _portraitOrientedSizeForSize:](self, "_portraitOrientedSizeForSize:", v17, v18);
  objc_msgSend(v5, "superview");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "layer");
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  v21 = objc_msgSend(v20, "needsLayoutOnGeometryChange");
  objc_msgSend(v20, "setNeedsLayoutOnGeometryChange:", 0);
  -[CAMViewfinderViewController view](self, "view");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  UIRoundToViewScale();
  v24 = v23;

  -[CAMViewfinderViewController view](self, "view");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  UIRoundToViewScale();
  v27 = v26;

  -[CAMViewfinderViewController view](self, "view");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  UIRoundToViewScale();
  v30 = v29;

  -[CAMViewfinderViewController view](self, "view");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  UIRoundToViewScale();
  v33 = v32;

  if (v24 == v30 && v27 == v33)
    objc_msgSend(v5, "setBounds:", v10, v12, v14, v16);
  v34[0] = v35;
  v34[1] = v36;
  v34[2] = v37;
  objc_msgSend(v5, "setTransform:", v34);
  objc_msgSend(v20, "setNeedsLayoutOnGeometryChange:", v21);

}

- (CGSize)_portraitOrientedSizeForSize:(CGSize)a3
{
  double height;
  double width;
  void *v5;
  void *v6;
  void *v7;
  _BOOL4 v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  CGSize result;

  height = a3.height;
  width = a3.width;
  -[CAMViewfinderViewController view](self, "view");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "window");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "screen");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "_referenceBounds");
  v8 = width < height;
  if (v9 < v10)
    v8 = width > height;
  if (v8)
    v11 = width;
  else
    v11 = height;
  if (!v8)
    height = width;

  v12 = height;
  v13 = v11;
  result.height = v13;
  result.width = v12;
  return result;
}

- (void)_setResolvedTimerDuration:(int64_t)a3
{
  self->__resolvedTimerDuration = a3;
}

- (void)_collapseExpandedButtonsAnimated:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  void *v6;
  id v7;

  v3 = a3;
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "controlDrawer");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "collapseExpandableButtonsAnimated:updatePreferredDrawerControl:", v3, 0);

  objc_msgSend(v7, "controlStatusBar");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "collapseExpandedIndicatorAnimated:", v3);

  -[CAMExpandableMenuButton collapseMenuAnimated:](self->__flashButton, "collapseMenuAnimated:", v3);
  -[CAMExpandableMenuButton collapseMenuAnimated:](self->__HDRButton, "collapseMenuAnimated:", v3);
  -[CAMExpandableMenuButton collapseMenuAnimated:](self->__timerButton, "collapseMenuAnimated:", v3);
  -[CAMExpandableMenuButton collapseMenuAnimated:](self->__livePhotoButton, "collapseMenuAnimated:", v3);
  -[CAMExpandableMenuButton collapseMenuAnimated:](self->__sharedLibraryButton, "collapseMenuAnimated:", v3);

}

- (void)_updateUIForCaptureOrientationAnimated:(BOOL)a3
{
  _BOOL8 v3;
  int64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  void (**v11)(_QWORD);
  void *v12;
  void *v13;
  void *v14;
  _BOOL8 v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  int64_t v23;
  void *v24;
  void *v25;
  char v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  _QWORD v32[4];
  id v33;
  void (**v34)(_QWORD);
  _QWORD aBlock[5];
  id v36;
  int64_t v37;

  v3 = a3;
  v5 = -[CAMViewfinderViewController autorotationStyle](self, "autorotationStyle");
  -[CAMViewfinderViewController _motionController](self, "_motionController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "captureOrientation");
  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (-[CAMViewfinderViewController _isScreenExternalDisplay](self, "_isScreenExternalDisplay"))
  {
    v9 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __70__CAMViewfinderViewController__updateUIForCaptureOrientationAnimated___block_invoke;
    aBlock[3] = &unk_1EA32A7C0;
    aBlock[4] = self;
    v37 = v5;
    v10 = v8;
    v36 = v10;
    v11 = (void (**)(_QWORD))_Block_copy(aBlock);
    v12 = v11;
    if (v3)
    {
      v13 = (void *)MEMORY[0x1E0DC3F10];
      v32[0] = v9;
      v32[1] = 3221225472;
      v32[2] = __70__CAMViewfinderViewController__updateUIForCaptureOrientationAnimated___block_invoke_2;
      v32[3] = &unk_1EA329298;
      v34 = v11;
      v33 = v10;
      objc_msgSend(v13, "animateWithDuration:animations:", v32, 0.3);

    }
    else
    {
      v11[2](v11);
    }

  }
  if (v5 == 1)
  {
    -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = -[CAMViewfinderViewController _shouldRotateTopBarForGraphConfiguration:](self, "_shouldRotateTopBarForGraphConfiguration:", v14);

    objc_msgSend(v8, "setAutomaticallyAdjustsTopBarOrientation:", v15);
    v16 = v7;
  }
  else
  {
    v16 = 1;
  }
  -[CAMViewfinderViewController _rotateTopBarAndControlsToOrientation:shouldAnimate:](self, "_rotateTopBarAndControlsToOrientation:shouldAnimate:", v16, v3);
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setOrientation:animated:", v16, v3);

  -[CAMViewfinderViewController _imageWell](self, "_imageWell");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "setCameraOrientation:animated:", v16, v3);

  -[CAMViewfinderViewController _creativeCameraButton](self, "_creativeCameraButton");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "setOrientation:animated:", v16, v3);

  -[CAMViewfinderViewController _burstIndicatorView](self, "_burstIndicatorView");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  +[CAMView rotateView:toInterfaceOrientation:animated:](CAMView, "rotateView:toInterfaceOrientation:animated:", v20, v16, v3);

  -[CAMViewfinderViewController _timerIndicatorView](self, "_timerIndicatorView");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "setOrientation:animated:", v16, v3);

  objc_msgSend(v8, "setOrientation:animated:", v16, v3);
  -[CAMViewfinderViewController _zoomSlider](self, "_zoomSlider");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "setOrientation:animated:", v16, v3);

  v23 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
  -[CAMViewfinderViewController _zoomControl](self, "_zoomControl");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = v24;
  if (v23 == 1)
  {
    v26 = objc_msgSend(v24, "isTracking");

    if ((v26 & 1) != 0)
      goto LABEL_14;
    -[CAMViewfinderViewController _zoomControl](self, "_zoomControl");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "setShouldShowZoomDial:animationDuration:", 0, 0);
  }
  else
  {
    objc_msgSend(v24, "setOrientation:animated:", v16, v3);
  }

LABEL_14:
  if (dyld_program_sdk_at_least())
  {
    -[CAMViewfinderViewController _flipButton](self, "_flipButton");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "setOrientation:animated:", v16, v3);

  }
  -[CAMViewfinderViewController _lightingControl](self, "_lightingControl");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "setOrientation:", v7);

  -[CAMViewfinderViewController _targetElapsedTimeView](self, "_targetElapsedTimeView");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "setBackgroundStyle:animated:", -[CAMViewfinderViewController _elapsedTimeViewIdleBackgroundStyle](self, "_elapsedTimeViewIdleBackgroundStyle"), v3);
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "setSpatialCaptureRecordingIndicatorVisible:animated:", 0, v3);

  -[CAMViewfinderViewController _panoramaViewController](self, "_panoramaViewController");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "didChangeToCaptureOrientation:", v7);

}

- (CAMZoomSlider)_zoomSlider
{
  return self->__zoomSlider;
}

- (CAMZoomControl)_zoomControl
{
  return self->__zoomControl;
}

- (CAMCreativeCameraButton)_creativeCameraButton
{
  return self->__creativeCameraButton;
}

- (BOOL)_shouldRotateTopBarForGraphConfiguration:(id)a3
{
  unint64_t v4;
  unsigned int v5;

  v4 = objc_msgSend(a3, "mode");
  v5 = (v4 < 9) & (0x186u >> v4);
  if (-[CAMViewfinderViewController autorotationStyle](self, "autorotationStyle") == 1)
    return v5;
  else
    return 0;
}

- (void)_rotateTopBarAndControlsToOrientation:(int64_t)a3 shouldAnimate:(BOOL)a4
{
  _BOOL8 v4;
  uint64_t v7;
  void *v8;
  _BOOL4 v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;

  v4 = a4;
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v23 = (id)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v23, "isCapturingVideo");
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updateTopBarStyleForGraphConfiguration:capturing:animated:](self, "_updateTopBarStyleForGraphConfiguration:capturing:animated:", v8, v7, v4);
  v9 = -[CAMViewfinderViewController _shouldApplyTopBarRotationForGraphConfiguration:](self, "_shouldApplyTopBarRotationForGraphConfiguration:", v8);
  -[CAMViewfinderViewController _topBar](self, "_topBar");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    -[CAMViewfinderViewController _topBar](self, "_topBar");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setOrientation:", a3);

  }
  else
  {
    -[CAMViewfinderViewController updateControlVisibilityAnimated:](self, "updateControlVisibilityAnimated:", v4);
  }
  if (v9)
    a3 = 1;
  -[CAMViewfinderViewController _flashButton](self, "_flashButton");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setOrientation:animated:", a3, v4);

  -[CAMViewfinderViewController _HDRButton](self, "_HDRButton");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setOrientation:animated:", a3, v4);

  -[CAMViewfinderViewController _livePhotoButton](self, "_livePhotoButton");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setOrientation:animated:", a3, v4);

  -[CAMViewfinderViewController _sharedLibraryButton](self, "_sharedLibraryButton");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "setOrientation:animated:", a3, v4);

  -[CAMViewfinderViewController _timerButton](self, "_timerButton");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "setOrientation:animated:", a3, v4);

  -[CAMViewfinderViewController _filterButton](self, "_filterButton");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setOrientation:animated:", a3, v4);

  -[CAMViewfinderViewController _apertureButton](self, "_apertureButton");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "setOrientation:animated:", a3, v4);

  -[CAMViewfinderViewController _videoConfigurationStatusIndicator](self, "_videoConfigurationStatusIndicator");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  +[CAMView rotateView:toInterfaceOrientation:animated:](CAMView, "rotateView:toInterfaceOrientation:animated:", v19, a3, v4);

  -[CAMViewfinderViewController _photosButton](self, "_photosButton");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "setOrientation:animated:", a3, v4);

  -[CAMViewfinderViewController _intensityButton](self, "_intensityButton");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "setOrientation:animated:", a3, v4);

  if ((dyld_program_sdk_at_least() & 1) == 0)
  {
    -[CAMViewfinderViewController _flipButton](self, "_flipButton");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "setOrientation:animated:", a3, v4);

  }
}

- (void)_updateTopBarStyleForGraphConfiguration:(id)a3 capturing:(BOOL)a4 animated:(BOOL)a5
{
  _BOOL8 v5;
  int64_t v7;
  id v8;

  v5 = a5;
  v7 = -[CAMViewfinderViewController _topBarStyleForGraphConfiguration:capturing:](self, "_topBarStyleForGraphConfiguration:capturing:", a3, a4);
  -[CAMViewfinderViewController _topBar](self, "_topBar");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setStyle:animated:", v7, v5);

}

- (BOOL)_shouldApplyTopBarRotationForGraphConfiguration:(id)a3
{
  BOOL v4;
  void *v5;

  v4 = -[CAMViewfinderViewController _shouldRotateTopBarForGraphConfiguration:](self, "_shouldRotateTopBarForGraphConfiguration:", a3);
  -[CAMViewfinderViewController _motionController](self, "_motionController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if ((unint64_t)(objc_msgSend(v5, "captureOrientation") - 3) >= 2)
    v4 = 0;

  return v4;
}

- (BOOL)shouldHideLightingControl
{
  CAMViewfinderViewController *v2;
  void *v3;

  v2 = self;
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v2) = -[CAMViewfinderViewController _shouldHideLightingControlForGraphConfiguration:](v2, "_shouldHideLightingControlForGraphConfiguration:", v3);

  return (char)v2;
}

- (BOOL)shouldHideFilterNameBadge
{
  CAMViewfinderViewController *v2;
  void *v3;

  v2 = self;
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v2) = -[CAMViewfinderViewController _shouldHideFilterNameBadgeForGraphConfiguration:](v2, "_shouldHideFilterNameBadgeForGraphConfiguration:", v3);

  return (char)v2;
}

- (CEKLightingControl)_lightingControl
{
  return self->__lightingControl;
}

- (void)_updateHomeIndicatorBehaviorsForCaptureOrientation
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  if (-[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle") == 4)
  {
    -[CAMViewfinderViewController _motionController](self, "_motionController");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v6, "captureOrientation");
    objc_msgSend(MEMORY[0x1E0DC3470], "sharedApplication");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v5, "hostProcess") | 4) == 4)
      objc_msgSend(v4, "_setReachabilitySupported:", (unint64_t)(v3 - 5) < 0xFFFFFFFFFFFFFFFELL);
    -[CAMViewfinderViewController _setHomeIndicatorAutoHideOrientation:](self, "_setHomeIndicatorAutoHideOrientation:", v3);

  }
}

- (void)_updateFilterScrubberForGraphConfiguration:(id)a3
{
  void *v4;
  int v5;
  void *v6;
  uint64_t v7;
  int64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  void *v15;
  id v16;

  v16 = a3;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isLiveFilteringSupported");

  v6 = v16;
  if (v5)
  {
    v7 = objc_msgSend(v16, "mode");
    v8 = -[CAMViewfinderViewController _effectFilterTypeForMode:](self, "_effectFilterTypeForMode:", v7);
    +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "filterTypesForMode:", v7);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController set_filterTypes:](self, "set_filterTypes:", v10);
    -[CAMViewfinderViewController _filterTypes](self, "_filterTypes");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "count");

    if (v12 >= 1)
    {
      v13 = -[CAMViewfinderViewController _lastCapturedFilterTypeForMode:](self, "_lastCapturedFilterTypeForMode:", v7);
      v14 = +[CAMUserPreferences defaultFilterTypeForMode:](CAMUserPreferences, "defaultFilterTypeForMode:", v7);
      -[CAMViewfinderViewController _targetFilterScrubberView](self, "_targetFilterScrubberView");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "setItemCount:", v12);
      objc_msgSend(v15, "setDefaultIndex:", -[CAMViewfinderViewController _itemIndexForFilterType:](self, "_itemIndexForFilterType:", v14));
      objc_msgSend(v15, "setSelectedIndex:", -[CAMViewfinderViewController _itemIndexForFilterType:](self, "_itemIndexForFilterType:", v8));
      objc_msgSend(v15, "setMarkedIndex:", -[CAMViewfinderViewController _itemIndexForFilterType:](self, "_itemIndexForFilterType:", v13));

    }
    v6 = v16;
  }

}

- (int64_t)_lastCapturedFilterTypeForMode:(int64_t)a3
{
  void *v4;
  void *v5;
  uint64_t v6;
  int64_t v7;

  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (a3 == 6)
  {
    v6 = objc_msgSend(v4, "portraitModeLastCapturedEffectFilterType");
  }
  else if (a3 == 4)
  {
    v6 = objc_msgSend(v4, "squareModeLastCapturedEffectFilterType");
  }
  else
  {
    if (a3)
    {
      v7 = 0;
      goto LABEL_9;
    }
    v6 = objc_msgSend(v4, "photoModeLastCapturedEffectFilterType");
  }
  v7 = v6;
LABEL_9:

  return v7;
}

- (CEKWheelScrubberView)_filterScrubberView
{
  return self->__filterScrubberView;
}

- (void)_updateFilterNameBadgeAnimated:(BOOL)a3
{
  int64_t v4;
  void *v5;
  void *v6;
  id v7;

  v4 = -[CAMViewfinderViewController _effectFilterTypeForMode:](self, "_effectFilterTypeForMode:", -[CAMViewfinderViewController _currentMode](self, "_currentMode", a3));
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "filterNameBadge");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setFilterType:", v4);

  }
  else
  {
    -[CAMViewfinderViewController _filterNameBadge](self, "_filterNameBadge");
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setFilterType:", v4);
  }

}

- (void)_updatePortraitModeInstructionLabelForCurrentState
{
  int64_t v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  -[CAMViewfinderViewController _targetPortraitModeInstructionLabel](self, "_targetPortraitModeInstructionLabel");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  v3 = -[CAMViewfinderViewController _displayedFlashModeForMode:flashActive:](self, "_displayedFlashModeForMode:flashActive:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), 0);
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isFlashOrTorchSupportedForMode:devicePosition:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"));

  if (-[CAMViewfinderViewController _currentMode](self, "_currentMode") == 1)
  {
    if (-[CAMViewfinderViewController _resolvedVideoStabilizationMode](self, "_resolvedVideoStabilizationMode") == 1)
      v5 = 0;
    else
      v5 = v5;
  }
  objc_msgSend(v9, "setShallowDepthOfFieldStatus:", -[CAMViewfinderViewController _shallowDepthOfFieldStatus](self, "_shallowDepthOfFieldStatus"));
  objc_msgSend(v9, "setFlashSupported:", v5);
  objc_msgSend(v9, "setFlashMode:", v3);
  v6 = -[CAMViewfinderViewController _currentDevice](self, "_currentDevice") - 1;
  if (v6 > 0xA)
    v7 = 0;
  else
    v7 = qword_1DB9A53B8[v6];
  objc_msgSend(v9, "setDevicePosition:", v7);
  objc_msgSend(v9, "setLightingType:", -[CAMViewfinderViewController _sanitizedLightingTypeForMode:device:](self, "_sanitizedLightingTypeForMode:device:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevice](self, "_currentDevice")));
  objc_msgSend(v9, "setLowLightMode:", -[CAMViewfinderViewController _resolvedLowLightMode](self, "_resolvedLowLightMode"));
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setLowLightStatus:", objc_msgSend(v8, "lowLightStatus"));

}

- (void)_updateDisabledModeUIAnimated:(BOOL)a3
{
  _BOOL4 v3;
  _BOOL4 v5;
  CAMDisabledModeOverlayView *v6;
  CAMDisabledModeOverlayView *v7;
  CAMDisabledModeOverlayView *v8;
  void *v9;
  uint64_t v10;
  CAMDisabledModeOverlayView *v11;
  void *v12;
  _QWORD v13[5];
  CAMDisabledModeOverlayView *v14;
  _QWORD v15[4];
  CAMDisabledModeOverlayView *v16;
  _QWORD v17[4];
  CAMDisabledModeOverlayView *v18;

  v3 = a3;
  if (-[CAMViewfinderViewController isViewLoaded](self, "isViewLoaded"))
  {
    v5 = -[CAMViewfinderViewController _isModeDisabled](self, "_isModeDisabled");
    -[CAMViewfinderViewController _disabledModeOverlayView](self, "_disabledModeOverlayView");
    v6 = (CAMDisabledModeOverlayView *)objc_claimAutoreleasedReturnValue();
    v7 = v6;
    if (((v5 ^ (v6 != 0)) & 1) != 0)
    {
      if (v6)
      {
        if (v3)
        {
          v8 = v6;
          -[CAMViewfinderViewController _setDisabledModeOverlayView:](self, "_setDisabledModeOverlayView:", 0);
          v9 = (void *)MEMORY[0x1E0DC3F10];
          v10 = MEMORY[0x1E0C809B0];
          v15[0] = MEMORY[0x1E0C809B0];
          v15[1] = 3221225472;
          v15[2] = __61__CAMViewfinderViewController__updateDisabledModeUIAnimated___block_invoke_3;
          v15[3] = &unk_1EA328868;
          v16 = v8;
          v13[0] = v10;
          v13[1] = 3221225472;
          v13[2] = __61__CAMViewfinderViewController__updateDisabledModeUIAnimated___block_invoke_4;
          v13[3] = &unk_1EA32A948;
          v13[4] = self;
          v14 = v16;
          v7 = v16;
          objc_msgSend(v9, "animateWithDuration:delay:options:animations:completion:", 2, v15, v13, 0.25, 0.0);

        }
        else
        {
          -[CAMViewfinderViewController _embedDisabledModeOverlayView:](self, "_embedDisabledModeOverlayView:", 0);
          -[CAMViewfinderViewController _setDisabledModeOverlayView:](self, "_setDisabledModeOverlayView:", 0);
        }
      }
      else
      {
        v11 = [CAMDisabledModeOverlayView alloc];
        v7 = -[CAMDisabledModeOverlayView initWithFrame:](v11, "initWithFrame:", *MEMORY[0x1E0C9D648], *(double *)(MEMORY[0x1E0C9D648] + 8), *(double *)(MEMORY[0x1E0C9D648] + 16), *(double *)(MEMORY[0x1E0C9D648] + 24));
        -[CAMViewfinderViewController _setDisabledModeOverlayView:](self, "_setDisabledModeOverlayView:", v7);
        -[CAMViewfinderViewController _embedDisabledModeOverlayView:](self, "_embedDisabledModeOverlayView:", v7);
        -[CAMViewfinderViewController _updateDisabledModeOverlayViewForCurrentState](self, "_updateDisabledModeOverlayViewForCurrentState");
        if (v3)
        {
          -[CAMDisabledModeOverlayView setAlpha:](v7, "setAlpha:", 0.0);
          v12 = (void *)MEMORY[0x1E0DC3F10];
          v17[0] = MEMORY[0x1E0C809B0];
          v17[1] = 3221225472;
          v17[2] = __61__CAMViewfinderViewController__updateDisabledModeUIAnimated___block_invoke;
          v17[3] = &unk_1EA328868;
          v7 = v7;
          v18 = v7;
          objc_msgSend(v12, "animateWithDuration:delay:options:animations:completion:", 2, v17, &__block_literal_global_1018, 0.1, 0.0);

        }
      }
    }
    else
    {
      -[CAMViewfinderViewController _updateDisabledModeOverlayViewForCurrentState](self, "_updateDisabledModeOverlayViewForCurrentState");
    }

  }
}

- (CAMDisabledModeOverlayView)_disabledModeOverlayView
{
  return self->__disabledModeOverlayView;
}

- (void)cameraRollControllerDidStartSession:(id)a3
{
  id v4;

  objc_msgSend(a3, "persistedThumbnailImage");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _presentImageWellImage:uuid:animated:](self, "_presentImageWellImage:uuid:animated:", v4, CFSTR("CAMPersistedThumbnailImage"), 0);

}

- (void)viewWillAppear:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  void *v6;
  objc_super v7;

  v3 = a3;
  v7.receiver = self;
  v7.super_class = (Class)CAMViewfinderViewController;
  -[CAMViewfinderViewController viewWillAppear:](&v7, sel_viewWillAppear_);
  -[CAMViewfinderViewController _cameraRollController](self, "_cameraRollController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "presentingViewControllerViewWillAppear:", v3);

  -[CAMViewfinderViewController _closedViewfinderController](self, "_closedViewfinderController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "removeClosedViewfinderReason:", 8);

}

- (int64_t)preferredWhitePointAdaptivityStyle
{
  return 2;
}

- (BOOL)prefersHomeIndicatorAutoHidden
{
  return -[CAMViewfinderViewController _autoHideHomeIndicatorForOrientation:](self, "_autoHideHomeIndicatorForOrientation:", -[CAMViewfinderViewController _homeIndicatorAutoHideOrientation](self, "_homeIndicatorAutoHideOrientation"));
}

- (int64_t)_homeIndicatorAutoHideOrientation
{
  return self->__homeIndicatorAutoHideOrientation;
}

- (BOOL)_autoHideHomeIndicatorForOrientation:(int64_t)a3
{
  int64_t v3;
  void *v4;
  void *v5;
  int64_t v6;

  v3 = a3 - 3;
  -[CAMViewfinderViewController view](self, "view");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "window");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = CAMInterfaceOrientationForWindow(v5);

  return ((v6 - 3) | (unint64_t)v3) < 2;
}

- (void)_handleApplicationDidRemoveDeactivationReason:(id)a3
{
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a3, "userInfo");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E0DC5710]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "integerValue");

  -[CAMViewfinderViewController _debugStringForApplicationDeactivationReason:](self, "_debugStringForApplicationDeactivationReason:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v13 = 138543362;
    v14 = v7;
    _os_log_impl(&dword_1DB760000, v8, OS_LOG_TYPE_DEFAULT, "Did remove deactivation reason %{public}@", (uint8_t *)&v13, 0xCu);
  }

  -[CAMViewfinderViewController _closedViewfinderController](self, "_closedViewfinderController");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  switch((int)v6)
  {
    case 0:
    case 5:
    case 10:
    case 12:
    case 15:
      break;
    case 1:
      v11 = 14;
      goto LABEL_16;
    case 2:
      v11 = 15;
      goto LABEL_16;
    case 3:
      objc_msgSend(v9, "removeClosedViewfinderReason:", 16);
      -[CAMViewfinderViewController _disabledPreviewController](self, "_disabledPreviewController");
      v12 = objc_claimAutoreleasedReturnValue();
      -[NSObject removeDisabledPreviewReason:](v12, "removeDisabledPreviewReason:", 2);
      goto LABEL_13;
    case 4:
      v11 = 17;
      goto LABEL_16;
    case 6:
      v11 = 18;
      goto LABEL_16;
    case 7:
      v11 = 19;
      goto LABEL_16;
    case 8:
      v11 = 20;
      goto LABEL_16;
    case 11:
      v11 = 21;
      goto LABEL_16;
    case 13:
      v11 = 22;
LABEL_16:
      objc_msgSend(v9, "removeClosedViewfinderReason:", v11);
      break;
    default:
      v12 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        -[CAMViewfinderViewController _handleApplicationWillAddDeactivationReason:].cold.1();
LABEL_13:

      break;
  }

}

- (id)_debugStringForApplicationDeactivationReason:(int)a3
{
  __CFString *v3;

  if (a3 < 0x1F && ((0x4000FDFFu >> a3) & 1) != 0)
    v3 = off_1EA32AEA0[a3];
  else
    v3 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Unknown deactivation reason %lu"), a3);
  return v3;
}

- (void)viewWillLayoutSubviews
{
  objc_super v3;

  v3.receiver = self;
  v3.super_class = (Class)CAMViewfinderViewController;
  -[CAMViewfinderViewController viewWillLayoutSubviews](&v3, sel_viewWillLayoutSubviews);
  -[CAMViewfinderViewController _updateLayoutStyle](self, "_updateLayoutStyle");
  -[CAMViewfinderViewController _updateDoneButtonIfNeeded](self, "_updateDoneButtonIfNeeded");
  -[CAMViewfinderViewController _applyTransformsForAutorotationStyle:](self, "_applyTransformsForAutorotationStyle:", -[CAMViewfinderViewController autorotationStyle](self, "autorotationStyle"));
}

- (void)_setLayoutStyle:(int64_t)a3
{
  int64_t layoutStyle;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  _BOOL4 v31;
  id v32;

  layoutStyle = self->__layoutStyle;
  if (layoutStyle == a3)
    return;
  self->__layoutStyle = a3;
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = v6;
  if (layoutStyle == 2)
  {
    objc_msgSend(v6, "captureConfiguration");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    +[CAMCaptureConfiguration configuration:withDevice:](CAMCaptureConfiguration, "configuration:withDevice:", v7, -[CAMViewfinderViewController _currentDevice](self, "_currentDevice"));
    v8 = objc_claimAutoreleasedReturnValue();
    goto LABEL_6;
  }
  if (a3 == 2)
  {
    objc_msgSend(v6, "captureConfiguration");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    +[CAMCaptureConfiguration tinyConfigurationForConfiguration:preserveFilters:](CAMCaptureConfiguration, "tinyConfigurationForConfiguration:preserveFilters:", v7, objc_msgSend(v32, "preserveEffectFilter"));
    v8 = objc_claimAutoreleasedReturnValue();
LABEL_6:
    v9 = (void *)v8;

    if (v9)
    {
      -[CAMViewfinderViewController changeToMode:device:](self, "changeToMode:device:", objc_msgSend(v9, "mode"), objc_msgSend(v9, "device"));
      objc_msgSend(v32, "conflictingControlConfiguration");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMViewfinderViewController applyCaptureConfiguration:conflictingControlConfiguration:](self, "applyCaptureConfiguration:conflictingControlConfiguration:", v9, v10);

      -[CAMViewfinderViewController _hideUtilityBarAnimated:](self, "_hideUtilityBarAnimated:", 0);
    }
  }
  -[CAMViewfinderViewController _panoramaViewController](self, "_panoramaViewController");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "setLayoutStyle:", a3);

  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setLayoutStyle:", a3);

  -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setLayoutStyle:", a3);

  -[CAMViewfinderViewController _bottomBar](self, "_bottomBar");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setLayoutStyle:", a3);

  -[CAMViewfinderViewController _flashButton](self, "_flashButton");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "setLayoutStyle:", a3);

  -[CAMViewfinderViewController _elapsedTimeView](self, "_elapsedTimeView");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "setLayoutStyle:", a3);

  -[CAMViewfinderViewController _HDRButton](self, "_HDRButton");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setLayoutStyle:", a3);

  -[CAMViewfinderViewController _livePhotoButton](self, "_livePhotoButton");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "setLayoutStyle:", a3);

  -[CAMViewfinderViewController _sharedLibraryButton](self, "_sharedLibraryButton");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "setLayoutStyle:", a3);

  -[CAMViewfinderViewController _flipButton](self, "_flipButton");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "setLayoutStyle:", a3);

  -[CAMViewfinderViewController _timerButton](self, "_timerButton");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "setLayoutStyle:", a3);

  -[CAMViewfinderViewController _modeDial](self, "_modeDial");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "setLayoutStyle:", a3);

  -[CAMViewfinderViewController _imageWell](self, "_imageWell");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "setLayoutStyle:", a3);

  -[CAMViewfinderViewController _zoomSlider](self, "_zoomSlider");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "setLayoutStyle:", a3);

  -[CAMViewfinderViewController _burstIndicatorView](self, "_burstIndicatorView");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "setLayoutStyle:", a3);

  -[CAMViewfinderViewController _shutterButton](self, "_shutterButton");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "setLayoutStyle:", a3);

  -[CAMViewfinderViewController _controlDrawer](self, "_controlDrawer");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "setLayoutStyle:", a3);

  -[CAMViewfinderViewController _creativeCameraButton](self, "_creativeCameraButton");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "setLayoutStyle:", a3);

  -[CAMViewfinderViewController _videoConfigurationStatusIndicator](self, "_videoConfigurationStatusIndicator");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "setLayoutStyle:", a3);

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updateBarBackgroundStyleForMode:capturing:animated:](self, "_updateBarBackgroundStyleForMode:capturing:animated:", objc_msgSend(v30, "mode"), 0, 0);
  -[CAMViewfinderViewController _embedAllControlsWithLayoutStyle:](self, "_embedAllControlsWithLayoutStyle:", a3);
  -[CAMViewfinderViewController _updateSwipeToModeSwitchGestureRecognizersWithDirectionsForLayoutStyle:](self, "_updateSwipeToModeSwitchGestureRecognizersWithDirectionsForLayoutStyle:", a3);
  -[CAMViewfinderViewController _updatePhysicalButtonCapturedEnabledResigningActiveOrDisappearing:](self, "_updatePhysicalButtonCapturedEnabledResigningActiveOrDisappearing:", 0);
  if (-[CAMViewfinderViewController automaticallyAdjustsAutorotationStyle](self, "automaticallyAdjustsAutorotationStyle"))
  {
    -[CAMViewfinderViewController _setInternalAutorotationStyle:](self, "_setInternalAutorotationStyle:", -[CAMViewfinderViewController _autorotationStyleForLayoutStyle:](self, "_autorotationStyleForLayoutStyle:", a3));
  }
  if (a3 == 2)
    -[CAMViewfinderViewController _resetZoom](self, "_resetZoom");
  -[CAMViewfinderViewController _updateForCurrentConfiguration](self, "_updateForCurrentConfiguration");
  v31 = -[CAMViewfinderViewController _canUseFilteringForLayoutStyle:](self, "_canUseFilteringForLayoutStyle:", layoutStyle);
  if (v31 != -[CAMViewfinderViewController _canUseFilteringForLayoutStyle:](self, "_canUseFilteringForLayoutStyle:", a3))-[CAMViewfinderViewController _updateCurrentPreviewFiltersOnCaptureController](self, "_updateCurrentPreviewFiltersOnCaptureController");

}

- (BOOL)shouldShiftPreviewForUtilityBar
{
  CAMViewfinderViewController *v2;
  void *v3;

  v2 = self;
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v2) = -[CAMViewfinderViewController _shouldHideUtilityBarForGraphConfiguration:](v2, "_shouldHideUtilityBarForGraphConfiguration:", v3);

  return v2 ^ 1;
}

- (void)viewDidAppear:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  void *v11;
  void *v12;
  objc_super v13;

  v3 = a3;
  v13.receiver = self;
  v13.super_class = (Class)CAMViewfinderViewController;
  -[CAMViewfinderViewController viewDidAppear:](&v13, sel_viewDidAppear_);
  -[CAMViewfinderViewController _createCameraCaseShutterNotifierIfNeeded](self, "_createCameraCaseShutterNotifierIfNeeded");
  -[CAMViewfinderViewController _createPhysicalCaptureInteractionIfNeeded](self, "_createPhysicalCaptureInteractionIfNeeded");
  -[CAMViewfinderViewController _createSystemOverlayIfNeeded](self, "_createSystemOverlayIfNeeded");
  -[CAMViewfinderViewController _updateDiskSpaceAlertViewVisibilityAnimated:](self, "_updateDiskSpaceAlertViewVisibilityAnimated:", 1);
  -[CAMViewfinderViewController _remoteShutterController](self, "_remoteShutterController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setShowingPreview:", 1);

  -[CAMViewfinderViewController _cameraRollController](self, "_cameraRollController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "presentingViewControllerViewDidAppear:", v3);

  -[CAMViewfinderViewController _updatePhysicalButtonCapturedEnabledResigningActiveOrDisappearing:](self, "_updatePhysicalButtonCapturedEnabledResigningActiveOrDisappearing:", 0);
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updatePairedVideoCaptureOnControllerForGraphConfiguration:isShowingCameraRoll:](self, "_updatePairedVideoCaptureOnControllerForGraphConfiguration:isShowingCameraRoll:", v7, 0);
  if (-[CAMViewfinderViewController isDisablingAdditionalCaptures](self, "isDisablingAdditionalCaptures"))
    -[CAMViewfinderViewController _setPreventingAdditionalCaptures:](self, "_setPreventingAdditionalCaptures:", 0);
  -[CAMViewfinderViewController setPerformingTileTransition:](self, "setPerformingTileTransition:", 0);
  -[CAMViewfinderViewController _librarySelectionController](self, "_librarySelectionController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = CAMSharedLibraryModeIsOn(objc_msgSend(v8, "sharedLibraryMode"));

  if (v9)
  {
    -[CAMViewfinderViewController _startTimer:](self, "_startTimer:", 1);
    -[CAMViewfinderViewController _updateBadgeVisibilityAnimated:](self, "_updateBadgeVisibilityAnimated:", 1);
  }
  -[CAMViewfinderViewController view](self, "view");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "window");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "windowScene");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "_setSystemVolumeHUDEnabled:", 0);

}

- (void)_updateDiskSpaceAlertViewVisibilityAnimated:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  int v6;
  void *v7;
  void *v8;
  int v9;
  uint64_t v10;
  void *v11;
  int v12;
  void *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  int v20;
  void *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  NSObject *v25;
  __CFString *v26;
  __CFString *v27;
  __CFString *v28;
  __CFString *v29;
  int v30;
  __CFString *v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  __CFString *v35;
  uint64_t v36;

  v3 = a3;
  v36 = *MEMORY[0x1E0C80C00];
  if (-[CAMViewfinderViewController _isShowingCameraRoll](self, "_isShowingCameraRoll"))
  {
    -[CAMViewfinderViewController _dismissDiskSpaceAlertViewAnimated:](self, "_dismissDiskSpaceAlertViewAnimated:", v3);
    return;
  }
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isCapturingBurst");
  -[CAMViewfinderViewController _storageController](self, "_storageController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v7, "hasDiskSpaceToAllowCaptureWithConfiguration:allowPurging:", v8, v6 ^ 1u);

  -[CAMViewfinderViewController _storageController](self, "_storageController");
  v10 = objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)v10, "purgeableStorageContainer");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "isPurging");

  LODWORD(v10) = -[CAMViewfinderViewController _hasInFlightConfiguration](self, "_hasInFlightConfiguration");
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "videoEncodingBehavior");

  v15 = v12 | v10;
  if (v14 != 2)
    v15 = 0;
  v16 = (v9 | v15) ^ 1u;
  if (-[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled"))
  {
    -[CAMViewfinderViewController _storageMonitor](self, "_storageMonitor");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(v17, "monitoringState");

    if (v18 == 2)
      v16 = 0;
    else
      v16 = v16;
  }
  if (-[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled"))
  {
    -[CAMViewfinderViewController _connectedStorage](self, "_connectedStorage");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v19, "connected");

    -[CAMViewfinderViewController _connectedStorage](self, "_connectedStorage");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(v21, "totalFreeBytes");

    v23 = v20 ^ 1;
    if (v22 < 0)
      v23 = 1;
    v24 = v16 & ~v23;
    if ((v23 & 1) != 0 || ((v16 ^ 1) & 1) != 0)
      goto LABEL_24;
    v25 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      if (v20)
        v26 = CFSTR("YES");
      else
        v26 = CFSTR("NO");
      v27 = v26;
      if (-[CAMViewfinderViewController _receivedOutOfDiskSpaceErrorDuringCapture](self, "_receivedOutOfDiskSpaceErrorDuringCapture"))
      {
        v28 = CFSTR("YES");
      }
      else
      {
        v28 = CFSTR("NO");
      }
      v29 = v28;
      v30 = 138543874;
      v31 = v27;
      v32 = 2048;
      v33 = v22;
      v34 = 2114;
      v35 = v29;
      _os_log_impl(&dword_1DB760000, v25, OS_LOG_TYPE_DEFAULT, "External storage: setting out of disk space alert, connected=%{public}@, totalFreeBytes=%lld, receivedOutOfDiskSpaceErrorDuringCapture=%{public}@", (uint8_t *)&v30, 0x20u);

    }
  }
  v24 = v16;
LABEL_24:
  if (-[CAMViewfinderViewController _receivedOutOfDiskSpaceErrorDuringCapture](self, "_receivedOutOfDiskSpaceErrorDuringCapture")|| (_DWORD)v24)
  {
    -[CAMViewfinderViewController _showDiskSpaceAlertView](self, "_showDiskSpaceAlertView");
  }
  else
  {
    -[CAMViewfinderViewController _dismissDiskSpaceAlertViewAnimated:](self, "_dismissDiskSpaceAlertViewAnimated:", v3);
  }
  -[CAMViewfinderViewController _setOutOfDiskSpace:](self, "_setOutOfDiskSpace:", v24);

}

- (CAMStorageController)_storageController
{
  return self->__storageController;
}

- (void)_dismissDiskSpaceAlertViewAnimated:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  void *v6;
  id v7;

  v3 = a3;
  -[CAMViewfinderViewController _diskSpaceAlertController](self, "_diskSpaceAlertController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v7 = v5;
    objc_msgSend(v5, "presentingViewController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "dismissViewControllerAnimated:completion:", v3, 0);

    -[CAMViewfinderViewController _setDiskSpaceAlertController:](self, "_setDiskSpaceAlertController:", 0);
    -[CAMViewfinderViewController _setReceivedOutOfDiskSpaceErrorDuringCapture:](self, "_setReceivedOutOfDiskSpaceErrorDuringCapture:", 0);
    v5 = v7;
  }

}

- (UIAlertController)_diskSpaceAlertController
{
  return self->__diskSpaceAlertController;
}

- (void)_setOutOfDiskSpace:(BOOL)a3
{
  _BOOL4 v3;
  const __CFString *v5;
  void *v6;
  id v7;

  if (self->__outOfDiskSpace != a3)
  {
    v3 = a3;
    self->__outOfDiskSpace = a3;
    if (a3)
      v5 = CFSTR("Out of disk space");
    else
      v5 = CFSTR("No longer out of disk space");
    -[CAMViewfinderViewController _updateEnabledControlsWithReason:](self, "_updateEnabledControlsWithReason:", v5);
    -[CAMViewfinderViewController _closedViewfinderController](self, "_closedViewfinderController");
    v7 = (id)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _disabledPreviewController](self, "_disabledPreviewController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v3)
    {
      objc_msgSend(v7, "addClosedViewfinderReason:", 6);
      objc_msgSend(v6, "addDisabledPreviewReason:", 0);
    }
    else
    {
      objc_msgSend(v7, "removeClosedViewfinderReason:", 6);
      objc_msgSend(v6, "removeDisabledPreviewReason:", 0);
    }

  }
}

- (void)_updatePhysicalButtonCapturedEnabledResigningActiveOrDisappearing:(BOOL)a3
{
  BOOL v5;
  int64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  void *v9;
  id v10;

  v5 = -[CAMViewfinderViewController _isShowingCameraRoll](self, "_isShowingCameraRoll");
  v6 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
  v7 = -[CAMViewfinderViewController _wantsVisualTextAnalysis](self, "_wantsVisualTextAnalysis");
  v8 = 0;
  if (!v5 && v6 != 2 && !a3)
    v8 = (-[CAMViewfinderViewController _shouldDisableUserInteractionForTransitioning](self, "_shouldDisableUserInteractionForTransitioning") | v7) ^ 1;
  -[CAMViewfinderViewController _cameraCaseShutterNotifier](self, "_cameraCaseShutterNotifier");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setEnabled:", v8);

  -[CAMViewfinderViewController _physicalButtonInteraction](self, "_physicalButtonInteraction");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setEnabled:", v8);

}

- (BOOL)_shouldDisableUserInteractionForTransitioning
{
  return (unint64_t)(-[CAMViewfinderViewController messagesTransitionState](self, "messagesTransitionState") - 1) < 4;
}

- (BOOL)isDisablingAdditionalCaptures
{
  return self->_disablingAdditionalCaptures;
}

- (void)setPerformingTileTransition:(BOOL)a3
{
  _BOOL4 v3;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  int64_t v9;
  id v10;

  if (self->_performingTileTransition != a3)
  {
    v3 = a3;
    self->_performingTileTransition = a3;
    -[CAMViewfinderViewController _closedViewfinderController](self, "_closedViewfinderController");
    v10 = (id)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _callStatusMonitor](self, "_callStatusMonitor");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v3)
    {
      +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      if (-[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle") == 2)
      {
        objc_msgSend(v6, "readPreferencesWithOverrides:emulationMode:callActive:shouldResetCaptureConfiguration:", 0, -[CAMViewfinderViewController emulationMode](self, "emulationMode"), objc_msgSend(v5, "isCallActive"), 0);
        objc_msgSend(v6, "captureConfiguration");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        -[CAMViewfinderViewController _writeUserPreferences](self, "_writeUserPreferences");
        objc_msgSend(v6, "captureConfiguration");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        +[CAMCaptureConfiguration tinyConfigurationForConfiguration:preserveFilters:](CAMCaptureConfiguration, "tinyConfigurationForConfiguration:preserveFilters:", v8, objc_msgSend(v6, "preserveEffectFilter"));
        v7 = (void *)objc_claimAutoreleasedReturnValue();

      }
      v9 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
      if (v9 != objc_msgSend(v7, "mode"))
        objc_msgSend(v10, "addClosedViewfinderReason:", 10);

    }
    else
    {
      objc_msgSend(v10, "removeClosedViewfinderReason:afterDelay:", 10, 0.0);
    }

  }
}

- (void)captureController:(id)a3 didOutputHDRSuggestion:(BOOL)a4
{
  -[CAMViewfinderViewController _updateBadgeVisibilityAnimated:](self, "_updateBadgeVisibilityAnimated:", 1, a4);
}

- (void)captureController:(id)a3 didChangeRampingVideoZoom:(BOOL)a4
{
  if (!a4)
    -[CAMViewfinderViewController _setShouldIgnoreZoomFactorKVOForRamping:](self, "_setShouldIgnoreZoomFactorKVOForRamping:", 0);
}

- (void)_setShouldIgnoreZoomFactorKVOForRamping:(BOOL)a3
{
  self->__shouldIgnoreZoomFactorKVOForRamping = a3;
}

- (void)captureController:(id)a3 didOutputMinAvailableVideoZoomFactor:(double)a4
{
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  _BOOL4 v10;
  void *v11;
  double v12;
  id v13;
  uint8_t buf[4];
  double v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (-[CAMViewfinderViewController _hasInFlightConfiguration](self, "_hasInFlightConfiguration", a3))
  {
    v6 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v15 = a4;
      _os_log_impl(&dword_1DB760000, v6, OS_LOG_TYPE_DEFAULT, "Ignoring didOutputMinAvailableVideoZoomFactor:%f because we are waiting on an in-flight configuration", buf, 0xCu);
    }

  }
  else
  {
    -[CAMViewfinderViewController _zoomControl](self, "_zoomControl");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "allowsContinuousZoom");

    if (v8)
    {
      if (a4 == 1.0)
      {
        -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = -[CAMViewfinderViewController _shouldEmulateAggregateCameraZoomForGraphConfiguration:](self, "_shouldEmulateAggregateCameraZoomForGraphConfiguration:", v9);

        a4 = 1.0;
        if (v10)
        {
          -[CAMViewfinderViewController _zoomControl](self, "_zoomControl");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "minimumZoomFactor");
          a4 = v12;

        }
      }
      -[CAMViewfinderViewController _zoomControl](self, "_zoomControl");
      v13 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "setMinAvailableZoomFactor:", a4);

    }
  }
}

- (BOOL)_hasInFlightConfiguration
{
  return -[CAMViewfinderViewController _lastConfigurationRequestID](self, "_lastConfigurationRequestID") != -1;
}

- (int)_lastConfigurationRequestID
{
  return self->__lastConfigurationRequestID;
}

- (void)captureController:(id)a3 didOutputVideoZoomFactor:(double)a4
{
  int v6;
  void *v7;
  int v8;
  double v10;
  int64_t v11;
  int64_t v12;
  int64_t v13;
  void *v14;
  _BOOL4 v15;
  double v16;
  id v17;

  if (!-[CAMViewfinderViewController _hasInFlightConfiguration](self, "_hasInFlightConfiguration", a3)
    && !-[CAMViewfinderViewController _shouldIgnoreZoomFactorKVOForRamping](self, "_shouldIgnoreZoomFactorKVOForRamping")&& !-[CAMViewfinderViewController _isPinchingForZoom](self, "_isPinchingForZoom"))
  {
    v6 = -[CAMZoomSlider isTracking](self->__zoomSlider, "isTracking");
    -[CAMViewfinderViewController _zoomSlider](self, "_zoomSlider");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "isAutozooming");

    if ((!v6 || v8 != 0) && (-[CAMZoomControl isTracking](self->__zoomControl, "isTracking") & 1) == 0)
    {
      -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
      if (vabdd_f64(a4, v10) >= 0.0001)
      {
        -[CAMViewfinderViewController _zoomControl](self, "_zoomControl");
        v17 = (id)objc_claimAutoreleasedReturnValue();
        v11 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
        v12 = -[CAMViewfinderViewController _currentDevice](self, "_currentDevice");
        v13 = -[CAMViewfinderViewController _currentVideoConfiguration](self, "_currentVideoConfiguration");
        -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = +[CAMZoomControlUtilities shouldApplyContinuousZoomForMode:device:videoConfiguration:videoStabilizationStrength:zoomFactors:displayZoomFactors:](CAMZoomControlUtilities, "shouldApplyContinuousZoomForMode:device:videoConfiguration:videoStabilizationStrength:zoomFactors:displayZoomFactors:", v11, v12, v13, objc_msgSend(v14, "videoStabilizationStrength"), 0, 0);

        if (v17 && v15 && (objc_msgSend(v17, "zoomButtonContentType") | 2) == 2)
        {
          objc_msgSend(v17, "maximumZoomFactor");
          if (v16 - a4 < 0.0001)
            a4 = v16;
        }
        -[CAMViewfinderViewController _setCachedVideoZoomFactor:](self, "_setCachedVideoZoomFactor:", a4);
        -[CAMViewfinderViewController _updateZoomUIWithZoomFactor:animated:](self, "_updateZoomUIWithZoomFactor:animated:", 0, a4);
        -[CAMViewfinderViewController _updateControlsRelatedToDepthSuggestionAnimated:](self, "_updateControlsRelatedToDepthSuggestionAnimated:", 0);

      }
    }
  }
}

- (BOOL)_shouldIgnoreZoomFactorKVOForRamping
{
  return self->__shouldIgnoreZoomFactorKVOForRamping;
}

- (BOOL)_isPinchingForZoom
{
  return -[UIPinchGestureRecognizer state](self->__zoomPinchGestureRecognizer, "state") == 2;
}

- (void)_setCachedVideoZoomFactor:(double)a3
{
  self->__cachedVideoZoomFactor = a3;
}

- (void)_updateZoomUIWithZoomFactor:(double)a3 animated:(BOOL)a4
{
  _BOOL8 v4;
  double v7;
  double v8;
  void *v9;
  int v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;

  v4 = a4;
  -[CAMViewfinderViewController _zoomSliderValueForZoomFactor:](self, "_zoomSliderValueForZoomFactor:");
  v8 = v7;
  *(float *)&v7 = v7;
  -[CAMZoomSlider setValue:animated:](self->__zoomSlider, "setValue:animated:", 0, v7);
  -[CAMViewfinderViewController _zoomControl](self, "_zoomControl");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "allowsContinuousZoom");

  if (v10)
  {
    -[CAMViewfinderViewController _zoomControl](self, "_zoomControl");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setZoomFactor:", a3);

  }
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v14 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updateZoomButtonSymbolForMode:device:videoConfiguration:zoomFactor:videoStabilizationStrength:animated:](self, "_updateZoomButtonSymbolForMode:device:videoConfiguration:zoomFactor:videoStabilizationStrength:animated:", objc_msgSend(v14, "mode"), objc_msgSend(v14, "device"), objc_msgSend(v14, "videoConfiguration"), objc_msgSend(v14, "videoStabilizationStrength"), v4, a3);
  -[CAMViewfinderViewController _remoteShutterController](self, "_remoteShutterController");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setZoomAmount:", v8);

  -[CAMViewfinderViewController _remoteShutterController](self, "_remoteShutterController");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setZoomFactor:", a3);

}

- (double)_zoomSliderValueForZoomFactor:(double)a3
{
  double v4;
  long double v5;
  double v6;

  -[CAMViewfinderViewController _currentMaximumZoomFactor](self, "_currentMaximumZoomFactor");
  v5 = v4;
  v6 = log(a3);
  return v6 / log(v5);
}

- (double)_currentMaximumZoomFactor
{
  void *v3;
  void *v4;
  double v5;
  double v6;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "maximumZoomFactorForMode:device:videoConfiguration:videoStabilizationStrength:", objc_msgSend(v4, "mode"), objc_msgSend(v4, "device"), objc_msgSend(v4, "videoConfiguration"), objc_msgSend(v4, "videoStabilizationStrength"));
  v6 = v5;

  return v6;
}

- (void)captureController:(id)a3 didOutputTorchAvailability:(BOOL)a4
{
  _BOOL4 v4;
  void *v6;
  unint64_t v7;

  v4 = a4;
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration", a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updateTorchModeForGraphConfiguration:animated:](self, "_updateTorchModeForGraphConfiguration:animated:", v6, 1);

  -[CAMViewfinderViewController _updateFlashButtonAvailability](self, "_updateFlashButtonAvailability");
  v7 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
  if (v7 <= 8 && ((1 << v7) & 0x186) != 0 && v4)
    -[CAMViewfinderViewController _dismissFlashOrTorchUnavailableAlertViewAnimated:](self, "_dismissFlashOrTorchUnavailableAlertViewAnimated:", 1);
}

- (int64_t)_desiredTorchMode
{
  return self->__desiredTorchMode;
}

- (void)_setResolvedTorchMode:(int64_t)a3
{
  self->__resolvedTorchMode = a3;
}

- (void)_updateFlashButtonAvailability
{
  void *v3;
  _BOOL4 v4;
  _BOOL8 v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  if (!-[CAMViewfinderViewController _hasInFlightConfiguration](self, "_hasInFlightConfiguration"))
  {
    -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = -[CAMViewfinderViewController _isFlashOrTorchSupportedForGraphConfiguration:](self, "_isFlashOrTorchSupportedForGraphConfiguration:", v3);

    if (v4)
    {
      v5 = -[CAMViewfinderViewController _isFlashUnavailableForMode:](self, "_isFlashUnavailableForMode:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"));
      -[CAMViewfinderViewController _flashButton](self, "_flashButton");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setUnavailable:", v5);

      -[CAMViewfinderViewController _controlDrawer](self, "_controlDrawer");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "flashButton");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setFlashUnavailable:", v5);

      -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
      v11 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "controlStatusBar");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "flashIndicator");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "setFlashUnavailable:", v5);

    }
  }
}

- (void)captureController:(id)a3 didOutputFlashAvailability:(BOOL)a4
{
  _BOOL4 v4;
  unint64_t v6;

  v4 = a4;
  -[CAMViewfinderViewController _resolveAndUpdatePotentiallyConflictingControls:animated:](self, "_resolveAndUpdatePotentiallyConflictingControls:animated:", 0, 1);
  -[CAMViewfinderViewController _updateFlashButtonAvailability](self, "_updateFlashButtonAvailability");
  v6 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
  if (v6 <= 9 && ((1 << v6) & 0x279) != 0 && v4)
    -[CAMViewfinderViewController _dismissFlashOrTorchUnavailableAlertViewAnimated:](self, "_dismissFlashOrTorchUnavailableAlertViewAnimated:", 1);
}

- (void)_dismissFlashOrTorchUnavailableAlertViewAnimated:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  id v6;
  id v7;

  v3 = a3;
  -[CAMViewfinderViewController _flashOrTorchUnavailableAlertController](self, "_flashOrTorchUnavailableAlertController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v7 = v5;
    -[CAMViewfinderViewController presentedViewController](self, "presentedViewController");
    v6 = (id)objc_claimAutoreleasedReturnValue();

    if (v6 == v7)
      -[CAMViewfinderViewController dismissViewControllerAnimated:completion:](self, "dismissViewControllerAnimated:completion:", v3, 0);
    -[CAMViewfinderViewController _setFlashOrTorchUnavailableAlertController:](self, "_setFlashOrTorchUnavailableAlertController:", 0);
    v5 = v7;
  }

}

- (UIAlertController)_flashOrTorchUnavailableAlertController
{
  return self->__flashOrTorchUnavailableAlertController;
}

- (void)captureController:(id)a3 didOutputTorchActive:(BOOL)a4
{
  -[CAMViewfinderViewController _updateBadgeVisibilityAnimated:](self, "_updateBadgeVisibilityAnimated:", 1, a4);
  -[CAMViewfinderViewController _updateFlashButtonForMode:animated:](self, "_updateFlashButtonForMode:animated:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), 1);
}

- (void)captureController:(id)a3 didOutputFlashActive:(BOOL)a4
{
  -[CAMViewfinderViewController _updateBadgeVisibilityAnimated:](self, "_updateBadgeVisibilityAnimated:", 1, a4);
  -[CAMViewfinderViewController _updateFlashButtonForMode:animated:](self, "_updateFlashButtonForMode:animated:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), 1);
}

- (void)_handleApplicationDidBecomeActive:(id)a3
{
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  double v9;
  double v10;
  void *v11;
  int64_t v12;
  uint8_t v13[16];

  v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_1DB760000, v4, OS_LOG_TYPE_DEFAULT, "Received UIApplicationDidBecomeActiveNotification", v13, 2u);
  }

  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "resetTimeoutDate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "dateByAddingTimeInterval:", -0.01);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "timeIntervalSinceDate:", v7);
  v10 = v9;

  if (v10 > 0.0
    && -[CAMViewfinderViewController _isAutoResumeCancelingWithoutBackgrounding](self, "_isAutoResumeCancelingWithoutBackgrounding"))
  {
    -[CAMViewfinderViewController _captureController](self, "_captureController");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "startCaptureSessionWithRetryCount:retryInterval:logReason:completion:", 3, CFSTR("became active with no auto-resume"), 0, 0.05);

  }
  -[CAMViewfinderViewController _setAutoResumeCancelingWithoutBackgrounding:](self, "_setAutoResumeCancelingWithoutBackgrounding:", 0);
  -[CAMViewfinderViewController _updateDiskSpaceAlertViewVisibilityAnimated:](self, "_updateDiskSpaceAlertViewVisibilityAnimated:", 0);
  -[CAMViewfinderViewController _updatePhysicalButtonCapturedEnabledResigningActiveOrDisappearing:](self, "_updatePhysicalButtonCapturedEnabledResigningActiveOrDisappearing:", 0);
  v12 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
  -[CAMViewfinderViewController _updateFlashModeOnControllerForMode:](self, "_updateFlashModeOnControllerForMode:", v12);
  -[CAMViewfinderViewController _updateTorchModeOnControllerForMode:](self, "_updateTorchModeOnControllerForMode:", v12);
  -[CAMViewfinderViewController _updateLevelMotionTracking](self, "_updateLevelMotionTracking");
  -[CAMViewfinderViewController _enableProactiveSuggestionsAnimated:](self, "_enableProactiveSuggestionsAnimated:", 0);

}

- (CAMDisabledPreviewController)_disabledPreviewController
{
  return self->__disabledPreviewController;
}

- (void)captureControllerDidStartRunning:(id)a3
{
  NSObject *v4;
  void *v5;
  void *v6;
  char v7;
  void *v8;
  int v9;
  void *v10;
  uint8_t v11[16];

  v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_1DB760000, v4, OS_LOG_TYPE_DEFAULT, "captureControllerDidStartRunning:", v11, 2u);
  }

  -[CAMViewfinderViewController _closedViewfinderController](self, "_closedViewfinderController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "removeClosedViewfinderReason:", 2);
  -[CAMViewfinderViewController _disabledPreviewController](self, "_disabledPreviewController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isPreviewDisabled");

  if ((v7 & 1) == 0)
    objc_msgSend(v5, "removeClosedViewfinderReason:afterDelay:", 3, 0.5);
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "shouldPreventConnectionHandover");

  if (v9)
  {
    -[CAMViewfinderViewController _preventConnectionHandoverAssertionController](self, "_preventConnectionHandoverAssertionController");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "requestAssertionIfUnheld");

  }
}

- (void)captureController:(id)a3 didChangeToGraphConfiguration:(id)a4 forDesiredConfiguration:(id)a5 requestID:(int)a6
{
  id v7;

  -[CAMViewfinderViewController _didChangeToGraphConfiguration:forDesiredConfiguration:requestID:](self, "_didChangeToGraphConfiguration:forDesiredConfiguration:requestID:", a4, a5, *(_QWORD *)&a6);
  -[CAMViewfinderViewController _callStatusMonitor](self, "_callStatusMonitor");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "removeDisabledReason:", 0);

}

- (void)_didChangeToGraphConfiguration:(id)a3 forDesiredConfiguration:(id)a4 requestID:(int)a5
{
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  void *v13;
  void *v14;
  int v15;
  int v16;
  NSObject *v17;
  double v18;
  double v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  void *v23;
  int64_t v24;
  _BOOL4 v25;
  char v26;
  BOOL v27;
  double v28;
  void *v29;
  void *v30;
  char v31;
  void *v32;
  char v33;
  void *v34;
  NSObject *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  char v42;
  void *v43;
  void *v44;
  uint8_t buf[4];
  NSObject *v46;
  __int16 v47;
  _WORD v48[9];

  *(_QWORD *)&v48[5] = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = -[NSObject mode](v7, "mode");
  v9 = -[NSObject device](v7, "device");
  v10 = v9;
  if ((unint64_t)(v9 - 8) < 3 || v9 == 11 || v9 == 1)
  {
    v11 = 0;
    v12 = 1;
  }
  else
  {
    v12 = 0;
    v11 = 1;
  }
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController set_completedInitialConfiguration:](self, "set_completedInitialConfiguration:", 1);
  -[CAMViewfinderViewController _configuredGraphConfiguration](self, "_configuredGraphConfiguration");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _setConfiguredGraphConfiguration:](self, "_setConfiguredGraphConfiguration:", v7);
  CAMSignpostWithIDAndArgs(10, 0xEEEEB0B5B2B2EEEELL, v8, v10, 0, 0);
  -[CAMViewfinderViewController _resetMachineReadableMetadataAndProcessing](self, "_resetMachineReadableMetadataAndProcessing");
  v15 = -[CAMViewfinderViewController _lastConfigurationRequestID](self, "_lastConfigurationRequestID");
  if (v15 == -1 || (v16 = v15, v15 == a5))
  {
    v42 = v11;
    -[CAMViewfinderViewController _setLastConfigurationRequestID:](self, "_setLastConfigurationRequestID:", 0xFFFFFFFFLL);
    -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
    v17 = objc_claimAutoreleasedReturnValue();
    if (-[CAMViewfinderViewController _needsDeferredGraphConfiguration](self, "_needsDeferredGraphConfiguration"))
    {
      -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
      v19 = v18;
      v20 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543618;
        v46 = v17;
        v47 = 2048;
        *(double *)v48 = v19;
        _os_log_impl(&dword_1DB760000, v20, OS_LOG_TYPE_DEFAULT, "Performing deferred change to: %{public}@ with zoom factor %.3f", buf, 0x16u);
      }

      -[CAMViewfinderViewController _changeToGraphConfiguration:zoomFactor:fromGraphConfiguration:](self, "_changeToGraphConfiguration:zoomFactor:fromGraphConfiguration:", v17, v7, v19);
    }
    else
    {
      -[CAMViewfinderViewController _captureController](self, "_captureController");
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      if (v8 == -[CAMViewfinderViewController _trueVideoDestinationCaptureMode](self, "_trueVideoDestinationCaptureMode")&& -[CAMViewfinderViewController _trueVideoIsTransitioningToCapture](self, "_trueVideoIsTransitioningToCapture"))
      {
        -[CAMViewfinderViewController _trueVideoStartCapture](self, "_trueVideoStartCapture");
      }
      -[CAMViewfinderViewController _setCurrentGraphConfiguration:](self, "_setCurrentGraphConfiguration:", v7);
      -[CAMViewfinderViewController _setReconfiguring:](self, "_setReconfiguring:", 0);
      if (-[CAMViewfinderViewController _isReconfiguringForZoomChange](self, "_isReconfiguringForZoomChange"))
      {
        -[CAMViewfinderViewController _setReconfiguringForZoomChange:](self, "_setReconfiguringForZoomChange:", 0);
        v21 = os_log_create("com.apple.camera", "Camera");
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
          *(_DWORD *)buf = 134217984;
          v46 = v22;
          _os_log_impl(&dword_1DB760000, v21, OS_LOG_TYPE_DEFAULT, "Changing to zoom factor %.3f after reconfig", buf, 0xCu);
        }

        -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
        objc_msgSend(v44, "changeToVideoZoomFactor:graphConfiguration:", v7);
      }
      -[CAMViewfinderViewController _setPerformingTopBarOrientationChange:](self, "_setPerformingTopBarOrientationChange:", 0);
      -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = -[CAMViewfinderViewController _aspectRatioForMode:devicePosition:](self, "_aspectRatioForMode:devicePosition:", v8, v12);
      objc_msgSend(v23, "setDesiredAspectRatio:", v24);
      v41 = v23;
      objc_msgSend(v23, "setMaskingAspectRatio:", v24);
      -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v40, "setViewportAspectRatio:animated:", v24, 1);
      -[CAMViewfinderViewController _createModeSpecificControlsForConfiguration:](self, "_createModeSpecificControlsForConfiguration:", v7);
      -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v39, "didChangeToGraphConfiguration:animated:", v7, 1);
      -[CAMViewfinderViewController _updatePanoramaSizeIfNeededForGraphConfiguration:](self, "_updatePanoramaSizeIfNeededForGraphConfiguration:", v7);
      v25 = +[CAMZoomSlider shouldFadeOutZoomSliderForLayoutStyle:](CAMZoomSlider, "shouldFadeOutZoomSliderForLayoutStyle:", -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle"));
      v26 = -[CAMZoomSlider isHidden](self->__zoomSlider, "isHidden");
      v27 = 0;
      if ((v26 & 1) == 0)
      {
        -[CAMZoomSlider alpha](self->__zoomSlider, "alpha");
        v27 = v28 != 0.0;
      }
      if (v25 && !v27)
        -[CAMZoomSlider makeInvisibleAnimated:](self->__zoomSlider, "makeInvisibleAnimated:", 0);
      -[CAMViewfinderViewController _resolveAndUpdatePotentiallyConflictingControls:animated:](self, "_resolveAndUpdatePotentiallyConflictingControls:animated:", 1, 1);
      -[CAMViewfinderViewController _hideControlsForGraphConfiguration:animated:](self, "_hideControlsForGraphConfiguration:animated:", v7, 0);
      -[CAMViewfinderViewController _showControlsForGraphConfiguration:animated:](self, "_showControlsForGraphConfiguration:animated:", v7, 1);
      -[CAMViewfinderViewController _updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:animated:](self, "_updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:animated:", v7, 1);
      -[CAMViewfinderViewController _updateVideoConfigurationStatusIndicatorForGraphConfiguration:animated:](self, "_updateVideoConfigurationStatusIndicatorForGraphConfiguration:animated:", v7, 1);
      -[CAMViewfinderViewController _updateZoomControlLayoutForGraphConfiguration:fromGraphConfiguration:animated:](self, "_updateZoomControlLayoutForGraphConfiguration:fromGraphConfiguration:animated:", v7, v17, 1);
      -[CAMViewfinderViewController _updateLightingControlFadesForGraphConfiguration:animated:](self, "_updateLightingControlFadesForGraphConfiguration:animated:", v17, 1);
      -[CAMViewfinderViewController _updateModeDisabledForCurrentStateAnimated:](self, "_updateModeDisabledForCurrentStateAnimated:", 1);
      -[CAMViewfinderViewController _updateFlashButtonAvailability](self, "_updateFlashButtonAvailability");
      if (!-[CAMViewfinderViewController _isControlDrawerShowingPersistentControl](self, "_isControlDrawerShowingPersistentControl"))-[CAMViewfinderViewController _collapseExpandedButtonsAnimated:](self, "_collapseExpandedButtonsAnimated:", 1);
      -[CAMViewfinderViewController _updateBarBackgroundStyleForMode:capturing:animated:](self, "_updateBarBackgroundStyleForMode:capturing:animated:", v8, 0, 0);
      -[CAMViewfinderViewController _topBar](self, "_topBar");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v38, "configureForMode:animated:", v8, 0);
      -[CAMViewfinderViewController _updateFilterScrubberForGraphConfiguration:](self, "_updateFilterScrubberForGraphConfiguration:", v7);
      +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = v29;
      v31 = v42 ^ 1;
      if (v8 != 6)
        v31 = 1;
      if ((v31 & 1) == 0)
      {
        objc_msgSend(v29, "setPortraitModeRearDevice:", v10);
        -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
        objc_msgSend(v30, "setPortraitModeRearZoomValue:");
      }
      v43 = v30;
      -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
      -[CAMViewfinderViewController _updateDepthEffectApertureForGraphConfiguration:fromGraphConfiguration:zoomFactor:](self, "_updateDepthEffectApertureForGraphConfiguration:fromGraphConfiguration:zoomFactor:", v7, v14);
      if (objc_msgSend(v13, "isPortraitEffectIntensitySupportedForMode:", v8))
      {
        -[CAMViewfinderViewController _portraitModeIntensityValue](self, "_portraitModeIntensityValue");
        objc_msgSend(v44, "changeToPortraitLightingEffectStrength:");
        -[CAMViewfinderViewController _updatePortraitIntensitySliderForCurrentState](self, "_updatePortraitIntensitySliderForCurrentState");
        -[CAMViewfinderViewController _updateIntensityButtonForCurrentState](self, "_updateIntensityButtonForCurrentState");
      }
      -[CAMViewfinderViewController _updateLightingUIForGraphConfiguration:animated:](self, "_updateLightingUIForGraphConfiguration:animated:", v7, -[CAMViewfinderViewController _wantsLightingControlForGraphConfiguration:](self, "_wantsLightingControlForGraphConfiguration:", v14));
      -[CAMViewfinderViewController _updatePortraitModeInstructionLabelForCurrentState](self, "_updatePortraitModeInstructionLabelForCurrentState");
      -[CAMViewfinderViewController _updateQRCodeInstructionLabelForCurrentState](self, "_updateQRCodeInstructionLabelForCurrentState");
      -[CAMViewfinderViewController _updateFilterButtonOnState](self, "_updateFilterButtonOnState");
      -[CAMViewfinderViewController _resetExposureClipping](self, "_resetExposureClipping");
      -[CAMViewfinderViewController _updateExposureSliderForCurrentState](self, "_updateExposureSliderForCurrentState");
      -[CAMViewfinderViewController _updateShutterButtonLegibility](self, "_updateShutterButtonLegibility");
      -[CAMViewfinderViewController _updateUIForCaptureOrientationAnimated:](self, "_updateUIForCaptureOrientationAnimated:", 0);
      -[CAMViewfinderViewController _configureZoomControlForGraphConfiguration:animated:](self, "_configureZoomControlForGraphConfiguration:animated:", v7, 0);
      -[CAMViewfinderViewController _updateMaxRecordingTimeInstructionLabelForGraphConfiguration:](self, "_updateMaxRecordingTimeInstructionLabelForGraphConfiguration:", v7);
      -[CAMViewfinderViewController _startOrCancelPurgeIfNecessary](self, "_startOrCancelPurgeIfNecessary");
      -[CAMViewfinderViewController _updateFreeResourcesInstructionLabelForCurrentState](self, "_updateFreeResourcesInstructionLabelForCurrentState");
      -[CAMViewfinderViewController _updateDiskSpaceAlertViewVisibilityAnimated:](self, "_updateDiskSpaceAlertViewVisibilityAnimated:", 1);
      -[CAMViewfinderViewController _enableProactiveSuggestionsAnimated:](self, "_enableProactiveSuggestionsAnimated:", 1);
      -[CAMViewfinderViewController _closedViewfinderController](self, "_closedViewfinderController");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v33 = objc_msgSend(v32, "isViewfinderClosed");

      if ((v33 & 1) == 0)
      {
        -[CAMViewfinderViewController _prepareDeferredProcessingIfNeeded](self, "_prepareDeferredProcessingIfNeeded");
        -[CAMViewfinderViewController _updateExternalStorageMonitoringState:](self, "_updateExternalStorageMonitoringState:", 1);
      }
      -[CAMViewfinderViewController _openViewfinderForAllModeAndDeviceChangeReasons](self, "_openViewfinderForAllModeAndDeviceChangeReasons");
      objc_msgSend(MEMORY[0x1E0DC3470], "sharedApplication");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        objc_msgSend(v34, "didChangeToMode:device:", v8, v10);
      v35 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543618;
        v46 = v7;
        v47 = 1024;
        *(_DWORD *)v48 = a5;
        _os_log_impl(&dword_1DB760000, v35, OS_LOG_TYPE_DEFAULT, "Did change to: %{public}@ (requestID=%d)", buf, 0x12u);
      }

      if (self->_configurationDelegateFlags.respondsToDidCompleteConfiguration)
      {
        -[CAMViewfinderViewController configurationDelegate](self, "configurationDelegate");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v36, "cameraViewControllerDidCompleteConfigurationForCaptureMode:captureDevice:", v8, v10);

      }
      -[CAMViewfinderViewController captureController:didOutputFaceResults:headResults:bodyResults:salientObjectResults:](self, "captureController:didOutputFaceResults:headResults:bodyResults:salientObjectResults:", v44, MEMORY[0x1E0C9AA60], MEMORY[0x1E0C9AA60], MEMORY[0x1E0C9AA60], MEMORY[0x1E0C9AA60]);
      -[CAMViewfinderViewController _resetObjectResults](self, "_resetObjectResults");
      -[CAMViewfinderViewController _updateInterfaceModulationForGraphConfiguration:animated:](self, "_updateInterfaceModulationForGraphConfiguration:animated:", v17, 1);
      -[CAMViewfinderViewController _setExternalStorageOutputEnabled:animated:](self, "_setExternalStorageOutputEnabled:animated:", -[CAMViewfinderViewController _wantsExternalStorageOutputEnabled](self, "_wantsExternalStorageOutputEnabled"), 1);
      if (-[CAMViewfinderViewController _shouldShowUnsupportedExternalStorageFormat](self, "_shouldShowUnsupportedExternalStorageFormat"))
      {
        -[CAMViewfinderViewController _showUnsupportedFormatAlert](self, "_showUnsupportedFormatAlert");
      }
      -[CAMViewfinderViewController _startFlashingTransientLightingBadgeIfNecessaryForGraphConfiguration:](self, "_startFlashingTransientLightingBadgeIfNecessaryForGraphConfiguration:", v17);
      -[CAMViewfinderViewController _updateTransientLightingBadgeVisibilityAnimated:](self, "_updateTransientLightingBadgeVisibilityAnimated:", 1);
      if (v8 == -[CAMViewfinderViewController _trueVideoSourceCaptureMode](self, "_trueVideoSourceCaptureMode")
        && -[CAMViewfinderViewController _trueVideoIsActive](self, "_trueVideoIsActive"))
      {
        -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v37, "setTrueVideoState:", 0);

        -[CAMViewfinderViewController _updateEnabledControlsWithReason:](self, "_updateEnabledControlsWithReason:", CFSTR("True video state changed to idle"));
      }

    }
  }
  else
  {
    v17 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543874;
      v46 = v7;
      v47 = 1024;
      *(_DWORD *)v48 = a5;
      v48[2] = 1024;
      *(_DWORD *)&v48[3] = v16;
      _os_log_impl(&dword_1DB760000, v17, OS_LOG_TYPE_DEFAULT, "Did change to: %{public}@ (requestID=%d) (waiting on another in-flight configuration before completing configuration changes (requestID=%d)", buf, 0x18u);
    }
  }

}

- (void)_setConfiguredGraphConfiguration:(id)a3
{
  objc_storeStrong((id *)&self->__configuredGraphConfiguration, a3);
}

- (void)_setBarcodeParsingSession:(id)a3
{
  objc_storeStrong((id *)&self->__barcodeParsingSession, a3);
}

- (void)_setLastConfigurationRequestID:(int)a3
{
  self->__lastConfigurationRequestID = a3;
}

- (void)_setCurrentGraphConfiguration:(id)a3
{
  void *v5;
  void *v6;
  CAMCaptureGraphConfiguration *v7;

  v7 = (CAMCaptureGraphConfiguration *)a3;
  if (self->__currentGraphConfiguration != v7)
  {
    objc_storeStrong((id *)&self->__currentGraphConfiguration, a3);
    -[CAMViewfinderViewController _storageController](self, "_storageController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setGraphConfiguration:", v7);

    -[CAMViewfinderViewController _remoteShutterController](self, "_remoteShutterController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setCurrentGraphConfiguration:", v7);

  }
}

- (void)_setPerformingTopBarOrientationChange:(BOOL)a3
{
  self->__performingTopBarOrientationChange = a3;
}

- (void)_hideControlsForGraphConfiguration:(id)a3 animated:(BOOL)a4
{
  _BOOL8 v4;
  id v6;
  void *v7;
  uint64_t v8;
  _BOOL4 v9;
  _BOOL4 v10;
  double v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  void *v21;
  void *v22;
  int v23;
  void *v24;
  void *v25;
  int v26;
  void *v27;
  void *v28;
  int v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  void *v34;
  int v35;
  void *v36;
  void *v37;
  int v38;
  void *v39;
  BOOL v40;
  _BOOL4 v41;
  _BOOL4 v42;
  _BOOL4 v43;
  _QWORD v44[5];
  id v45;
  uint64_t v46;
  BOOL v47;
  BOOL v48;

  v4 = a4;
  v6 = a3;
  -[CAMViewfinderViewController _motionController](self, "_motionController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "captureOrientation");

  v9 = -[CAMViewfinderViewController shouldLayoutLightingNameBadgeAtBottom](self, "shouldLayoutLightingNameBadgeAtBottom");
  v10 = -[CAMViewfinderViewController _shouldHideLightingNameBadgeForGraphConfiguration:orientation:](self, "_shouldHideLightingNameBadgeForGraphConfiguration:orientation:", v6, v8);
  if (v4)
    v11 = 0.25;
  else
    v11 = 0.0;
  v44[0] = MEMORY[0x1E0C809B0];
  v44[1] = 3221225472;
  v44[2] = __75__CAMViewfinderViewController__hideControlsForGraphConfiguration_animated___block_invoke;
  v44[3] = &unk_1EA32A6F8;
  v44[4] = self;
  v12 = v6;
  v45 = v12;
  v46 = v8;
  v41 = v10;
  v42 = v9;
  v47 = v10;
  v48 = v9;
  +[CAMView animateIfNeededWithDuration:animations:](CAMView, "animateIfNeededWithDuration:animations:", v44, v11);
  -[CAMViewfinderViewController _updateDescriptionOverlayVisibilityForMode:allowShow:allowHide:animated:](self, "_updateDescriptionOverlayVisibilityForMode:allowShow:allowHide:animated:", objc_msgSend(v12, "mode"), 0, 1, v4);
  if (-[CAMViewfinderViewController _shouldHideLightingControlBadgeForGraphConfiguration:orientation:](self, "_shouldHideLightingControlBadgeForGraphConfiguration:orientation:", v12, v8))
  {
    -[CEKLightingControl setNameBadgeHidden:animated:](self->__lightingControl, "setNameBadgeHidden:animated:", 1, v4);
  }
  v43 = v4;
  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = (void *)MEMORY[0x1E0C99E60];
  objc_msgSend(v13, "visibleTopBadges");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setWithArray:", v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  v17 = -[CAMViewfinderViewController _shouldHideFlashBadgeForGraphConfiguration:](self, "_shouldHideFlashBadgeForGraphConfiguration:", v12);
  v18 = -[CAMViewfinderViewController _shouldHideHDRBadgeForGraphConfiguration:](self, "_shouldHideHDRBadgeForGraphConfiguration:", v12);
  v19 = -[CAMViewfinderViewController _shouldHideLivePhotoBadgeForGraphConfiguration:](self, "_shouldHideLivePhotoBadgeForGraphConfiguration:", v12);
  v20 = -[CAMViewfinderViewController _shouldHideShallowDepthOfFieldBadgeForGraphConfiguration:](self, "_shouldHideShallowDepthOfFieldBadgeForGraphConfiguration:", v12);
  v40 = -[CAMViewfinderViewController _shouldHideFocusAndExposureLockBadgeForGraphConfiguration:](self, "_shouldHideFocusAndExposureLockBadgeForGraphConfiguration:", v12);
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v16, "count"));
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v17)
  {
    -[CAMViewfinderViewController _flashBadge](self, "_flashBadge");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = objc_msgSend(v16, "containsObject:", v22);

    if (v23)
    {
      -[CAMViewfinderViewController _flashBadge](self, "_flashBadge");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "addObject:", v24);

    }
  }
  if (!v18)
  {
    -[CAMViewfinderViewController _HDRBadge](self, "_HDRBadge");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = objc_msgSend(v16, "containsObject:", v25);

    if (v26)
    {
      -[CAMViewfinderViewController _HDRBadge](self, "_HDRBadge");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "addObject:", v27);

    }
  }
  if (!v19)
  {
    -[CAMViewfinderViewController _livePhotoBadge](self, "_livePhotoBadge");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = objc_msgSend(v16, "containsObject:", v28);

    if (v29)
    {
      -[CAMViewfinderViewController _livePhotoBadge](self, "_livePhotoBadge");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "addObject:", v30);

    }
  }
  if (!v20)
  {
    -[CAMViewfinderViewController _shallowDepthOfFieldBadge](self, "_shallowDepthOfFieldBadge");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v16, "containsObject:", v31);

    if (v32)
    {
      -[CAMViewfinderViewController _shallowDepthOfFieldBadge](self, "_shallowDepthOfFieldBadge");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "addObject:", v33);

    }
  }
  if (!v40)
  {
    -[CAMViewfinderViewController _focusAndExposureLockBadge](self, "_focusAndExposureLockBadge");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = objc_msgSend(v16, "containsObject:", v34);

    if (v35)
    {
      -[CAMViewfinderViewController _focusAndExposureLockBadge](self, "_focusAndExposureLockBadge");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "addObject:", v36);

    }
  }
  if (!v41 && !v42)
  {
    -[CAMViewfinderViewController _lightingNameBadge](self, "_lightingNameBadge");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    v38 = objc_msgSend(v16, "containsObject:", v37);

    if (v38)
    {
      -[CAMViewfinderViewController _lightingNameBadge](self, "_lightingNameBadge");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "addObject:", v39);

    }
  }
  objc_msgSend(v13, "setVisibleTopBadges:animated:", v21, v43);

}

- (void)_showControlsForGraphConfiguration:(id)a3 animated:(BOOL)a4
{
  _BOOL8 v4;
  id v6;
  void *v7;
  uint64_t v8;
  _BOOL4 v9;
  _BOOL4 v10;
  double v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  void *v23;
  void *v24;
  void *v25;
  int v26;
  void *v27;
  void *v28;
  int v29;
  void *v30;
  void *v31;
  int v32;
  void *v33;
  void *v34;
  int v35;
  void *v36;
  void *v37;
  int v38;
  void *v39;
  void *v40;
  int v41;
  void *v42;
  void *v43;
  int v44;
  void *v45;
  int v46;
  int v47;
  _BOOL4 v48;
  void *v49;
  _QWORD v50[5];
  id v51;
  uint64_t v52;
  BOOL v53;
  BOOL v54;
  BOOL v55;

  v4 = a4;
  v6 = a3;
  -[CAMViewfinderViewController _motionController](self, "_motionController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "captureOrientation");

  v9 = -[CAMViewfinderViewController shouldLayoutLightingNameBadgeAtBottom](self, "shouldLayoutLightingNameBadgeAtBottom");
  v10 = -[CAMViewfinderViewController _shouldHideLightingNameBadgeForGraphConfiguration:orientation:](self, "_shouldHideLightingNameBadgeForGraphConfiguration:orientation:", v6, v8);
  if (v4)
    v11 = 0.25;
  else
    v11 = 0.0;
  v50[0] = MEMORY[0x1E0C809B0];
  v50[1] = 3221225472;
  v50[2] = __75__CAMViewfinderViewController__showControlsForGraphConfiguration_animated___block_invoke;
  v50[3] = &unk_1EA32A720;
  v50[4] = self;
  v12 = v6;
  v51 = v12;
  v52 = v8;
  v53 = v10;
  v48 = v9;
  v54 = v9;
  v55 = v4;
  +[CAMView animateIfNeededWithDuration:animations:](CAMView, "animateIfNeededWithDuration:animations:", v50, v11);
  if (!-[CAMViewfinderViewController _shouldHideLightingControlBadgeForGraphConfiguration:orientation:](self, "_shouldHideLightingControlBadgeForGraphConfiguration:orientation:", v12, v8))-[CEKLightingControl setNameBadgeHidden:animated:](self->__lightingControl, "setNameBadgeHidden:animated:", 0, v4);
  -[CAMViewfinderViewController _updateDescriptionOverlayVisibilityForMode:allowShow:allowHide:animated:](self, "_updateDescriptionOverlayVisibilityForMode:allowShow:allowHide:animated:", objc_msgSend(v12, "mode"), 1, 0, v4);
  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = (void *)MEMORY[0x1E0C99E60];
  v49 = v13;
  objc_msgSend(v13, "visibleTopBadges");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setWithArray:", v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  -[CAMViewfinderViewController _flashBadge](self, "_flashBadge");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (v17)
    v18 = !-[CAMViewfinderViewController _shouldHideFlashBadgeForGraphConfiguration:](self, "_shouldHideFlashBadgeForGraphConfiguration:", v12);
  else
    v18 = 0;

  -[CAMViewfinderViewController _HDRBadge](self, "_HDRBadge");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  if (v19)
    v20 = !-[CAMViewfinderViewController _shouldHideHDRBadgeForGraphConfiguration:](self, "_shouldHideHDRBadgeForGraphConfiguration:", v12);
  else
    v20 = 0;

  -[CAMViewfinderViewController _livePhotoBadge](self, "_livePhotoBadge");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  if (v21)
    v22 = !-[CAMViewfinderViewController _shouldHideLivePhotoBadgeForGraphConfiguration:](self, "_shouldHideLivePhotoBadgeForGraphConfiguration:", v12);
  else
    v22 = 0;

  -[CAMViewfinderViewController _shallowDepthOfFieldBadge](self, "_shallowDepthOfFieldBadge");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  if (v23)
    v46 = !-[CAMViewfinderViewController _shouldHideShallowDepthOfFieldBadgeForGraphConfiguration:](self, "_shouldHideShallowDepthOfFieldBadgeForGraphConfiguration:", v12);
  else
    LOBYTE(v46) = 0;

  -[CAMViewfinderViewController _focusAndExposureLockBadge](self, "_focusAndExposureLockBadge");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  if (v24)
    v47 = !-[CAMViewfinderViewController _shouldHideFocusAndExposureLockBadgeForGraphConfiguration:](self, "_shouldHideFocusAndExposureLockBadgeForGraphConfiguration:", v12);
  else
    LOBYTE(v47) = 0;

  -[CAMViewfinderViewController _lightingNameBadge](self, "_lightingNameBadge");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  if (v25)
    v26 = v10;
  else
    v26 = 1;

  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v16, "count"));
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  if ((v18 & 1) != 0
    || (-[CAMViewfinderViewController _flashBadge](self, "_flashBadge"),
        v28 = (void *)objc_claimAutoreleasedReturnValue(),
        v29 = objc_msgSend(v16, "containsObject:", v28),
        v28,
        v29))
  {
    -[CAMViewfinderViewController _flashBadge](self, "_flashBadge");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "addObject:", v30);

  }
  if ((v20 & 1) != 0
    || (-[CAMViewfinderViewController _HDRBadge](self, "_HDRBadge"),
        v31 = (void *)objc_claimAutoreleasedReturnValue(),
        v32 = objc_msgSend(v16, "containsObject:", v31),
        v31,
        v32))
  {
    -[CAMViewfinderViewController _HDRBadge](self, "_HDRBadge");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "addObject:", v33);

  }
  if ((v22 & 1) != 0
    || (-[CAMViewfinderViewController _livePhotoBadge](self, "_livePhotoBadge"),
        v34 = (void *)objc_claimAutoreleasedReturnValue(),
        v35 = objc_msgSend(v16, "containsObject:", v34),
        v34,
        v35))
  {
    -[CAMViewfinderViewController _livePhotoBadge](self, "_livePhotoBadge");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "addObject:", v36);

  }
  if ((v46 & 1) != 0
    || (-[CAMViewfinderViewController _shallowDepthOfFieldBadge](self, "_shallowDepthOfFieldBadge"),
        v37 = (void *)objc_claimAutoreleasedReturnValue(),
        v38 = objc_msgSend(v16, "containsObject:", v37),
        v37,
        v38))
  {
    -[CAMViewfinderViewController _shallowDepthOfFieldBadge](self, "_shallowDepthOfFieldBadge");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "addObject:", v39);

  }
  if ((v47 & 1) != 0
    || (-[CAMViewfinderViewController _focusAndExposureLockBadge](self, "_focusAndExposureLockBadge"),
        v40 = (void *)objc_claimAutoreleasedReturnValue(),
        v41 = objc_msgSend(v16, "containsObject:", v40),
        v40,
        v41))
  {
    -[CAMViewfinderViewController _focusAndExposureLockBadge](self, "_focusAndExposureLockBadge");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "addObject:", v42);

  }
  if (!(v26 | v48)
    || (-[CAMViewfinderViewController _lightingNameBadge](self, "_lightingNameBadge"),
        v43 = (void *)objc_claimAutoreleasedReturnValue(),
        v44 = objc_msgSend(v16, "containsObject:", v43),
        v43,
        v44))
  {
    -[CAMViewfinderViewController _lightingNameBadge](self, "_lightingNameBadge");
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "addObject:", v45);

  }
  objc_msgSend(v49, "setVisibleTopBadges:animated:", v27, v4);

}

- (double)_cachedVideoZoomFactor
{
  return self->__cachedVideoZoomFactor;
}

- (void)_openViewfinderForAllModeAndDeviceChangeReasons
{
  id v2;

  -[CAMViewfinderViewController _closedViewfinderController](self, "_closedViewfinderController");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "removeClosedViewfinderReason:", 0);
  objc_msgSend(v2, "removeClosedViewfinderReason:", 1);

}

- (void)_previewDidStartRunning:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  int64_t v7;
  int64_t v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  CAMAnalyticsVisionSession *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  int v20;
  void *v21;
  void *v22;
  void *v23;
  uint8_t buf[4];
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  CAMSignpostWithIDAndArgs(7, 0xEEEEB0B5B2B2EEEELL, 0, 0, 0, 0);
  -[CAMViewfinderViewController _closedViewfinderController](self, "_closedViewfinderController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _locationController](self, "_locationController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _keepAliveController](self, "_keepAliveController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
  v8 = -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition");
  objc_msgSend(v4, "descriptionForTimeBetweenReferenceAndNow");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v25 = v9;
    _os_log_impl(&dword_1DB760000, v10, OS_LOG_TYPE_DEFAULT, "Received AVCaptureVideoPreviewLayerDidStartRunningNotification %{public}@", buf, 0xCu);
  }

  objc_msgSend(v4, "removeClosedViewfinderReason:", 5);
  objc_msgSend(v4, "removeClosedViewfinderReason:", 3);
  if (!-[CUCaptureController isCapturingTimelapse](self->__captureController, "isCapturingTimelapse"))
    objc_msgSend(v5, "setEnabled:", 1);
  objc_msgSend(v5, "setHeadingEnabled:", 1);
  if (-[CAMViewfinderViewController automaticallyAdjustsApplicationIdleTimer](self, "automaticallyAdjustsApplicationIdleTimer"))
  {
    -[CAMViewfinderViewController _idleController](self, "_idleController");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "startUpdatingIdleTimer");

  }
  -[CAMViewfinderViewController _cameraRollController](self, "_cameraRollController");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "preload");

  objc_msgSend(v6, "startKeepAliveSession");
  -[CAMViewfinderViewController _remoteShutterController](self, "_remoteShutterController");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "createConnectionIfNecessary");
  -[CAMViewfinderViewController _visionAnalyticsSession](self, "_visionAnalyticsSession");
  v14 = (CAMAnalyticsVisionSession *)objc_claimAutoreleasedReturnValue();
  if (!v14)
  {
    if (!objc_msgSend(v23, "isImageAnalysisSupportedForMode:devicePosition:", v7, v8))
      goto LABEL_11;
    +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v15, "isImageAnalysisEnabled");

    +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(v17, "shouldShowQRBanners");

    v14 = -[CAMAnalyticsVisionSession initWithTextDetectionEnabled:MRCDetectionEnabled:]([CAMAnalyticsVisionSession alloc], "initWithTextDetectionEnabled:MRCDetectionEnabled:", v16, v18);
    -[CAMViewfinderViewController _setVisionAnalyticsSession:](self, "_setVisionAnalyticsSession:", v14);
  }

LABEL_11:
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v19, "sharedLibraryAutoBehaviorEnabled");

  if (v20)
  {
    -[CAMViewfinderViewController _librarySelectionController](self, "_librarySelectionController");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "startAcquiringSignals");

  }
  if (+[CAMApplication appOrPlugInState](CAMApplication, "appOrPlugInState") != 2)
  {
    -[CAMViewfinderViewController _createAnalyticsSessionEventIfNeeded](self, "_createAnalyticsSessionEventIfNeeded");
    -[CAMViewfinderViewController _analyticsSessionEvent](self, "_analyticsSessionEvent");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "didStartPreview");

  }
  -[CAMViewfinderViewController _resetObjectResults](self, "_resetObjectResults");

}

- (CAMLocationController)_locationController
{
  return self->__locationController;
}

- (CAMKeepAliveController)_keepAliveController
{
  return self->__keepAliveController;
}

- (BOOL)automaticallyAdjustsApplicationIdleTimer
{
  return self->_automaticallyAdjustsApplicationIdleTimer;
}

- (CAMIdleController)_idleController
{
  return self->__idleController;
}

- (BOOL)gestureRecognizer:(id)a3 shouldReceiveTouch:(id)a4
{
  UISwipeGestureRecognizer *v6;
  id v7;
  UIPinchGestureRecognizer *zoomPinchGestureRecognizer;
  void *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  UISwipeGestureRecognizer *v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double v19;
  double v20;
  double v21;
  void *v22;
  void *v23;
  void *v24;
  _BOOL4 v25;
  char v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  BOOL v31;
  char v32;
  _BOOL4 v33;
  void *v34;
  _BOOL4 v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  void *v49;
  double v50;
  CGFloat v51;
  double v52;
  CGFloat v53;
  double v54;
  CGFloat v55;
  double v56;
  CGFloat v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  void *v66;
  double v67;
  CGFloat v68;
  double v69;
  CGFloat v70;
  double v71;
  CGFloat v72;
  double v73;
  CGFloat v74;
  double MaxY;
  double MinY;
  void *v77;
  double v78;
  double v79;
  void *v80;
  void *v81;
  double v82;
  CGFloat v83;
  double v84;
  CGFloat v85;
  void *v87;
  void *v88;
  int v89;
  int v90;
  char v91;
  unint64_t v92;
  void *v93;
  BOOL v94;
  double v95;
  CGFloat v96;
  double v97;
  CGFloat v98;
  double v99;
  double v100;
  int v101;
  double v102;
  CGFloat v103;
  double v104;
  CGFloat v105;
  double v106;
  CGFloat v107;
  double v108;
  CGFloat v109;
  CGFloat v110;
  CGFloat v111;
  double v112;
  double v113;
  CGFloat v114;
  CGFloat v115;
  double v116;
  double v117;
  double v118;
  CGFloat v119;
  BOOL v120;
  void *v121;
  void *v122;
  double v123;
  double v124;
  double v125;
  double v126;
  void *v127;
  double v128;
  double v129;
  CGFloat v130;
  CGFloat v131;
  _BOOL4 v132;
  double v133;
  double v134;
  CGFloat v135;
  CGFloat v136;
  _BOOL4 v137;
  CGPoint v139;
  CGPoint v140;
  CGPoint v141;
  CGPoint v142;
  CGPoint v143;
  CGPoint v144;
  CGPoint v145;
  CGPoint v146;
  CGRect v147;
  CGRect v148;
  CGRect v149;
  CGRect v150;
  CGRect v151;
  CGRect v152;
  CGRect v153;
  CGRect v154;
  CGRect v155;
  CGRect v156;
  CGRect v157;
  CGRect v158;

  v6 = (UISwipeGestureRecognizer *)a3;
  v7 = a4;
  zoomPinchGestureRecognizer = self->__zoomPinchGestureRecognizer;
  -[CAMViewfinderViewController _primaryShutterControl](self, "_primaryShutterControl");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "isTracking");

  if (v10 && zoomPinchGestureRecognizer != (UIPinchGestureRecognizer *)v6)
  {
    LOBYTE(v11) = 0;
    goto LABEL_58;
  }
  if (self->__nextModeGestureRecognizer == v6 || self->__previousModeGestureRecognizer == v6)
  {
    -[CAMPreviewViewController activeExposureBiasPanGestureRecognizer](self->__previewViewController, "activeExposureBiasPanGestureRecognizer");
    v11 = objc_claimAutoreleasedReturnValue();
    if (v11)
    {
      if (-[CAMViewfinderViewController _modeChangeSwipeMatchesExposureBiasPanDirection](self, "_modeChangeSwipeMatchesExposureBiasPanDirection"))
      {
        if (!self->__modeDial)
          goto LABEL_39;
        objc_msgSend(v7, "locationInView:");
        v16 = v15;
        v18 = v17;
        -[CAMModeDial bounds](self->__modeDial, "bounds");
        v147.origin.x = v19 + 0.0;
        v147.origin.y = v20 + -10.0;
        v147.size.height = v21 + 10.0;
        v139.x = v16;
        v139.y = v18;
        if (!CGRectContainsPoint(v147, v139))
        {
LABEL_39:
          v33 = 0;
LABEL_53:
          -[CAMViewfinderViewController _feedbackController](self, "_feedbackController");
          v81 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v81, "prepareDiscreteFeedback:", 0);

          LOBYTE(v11) = v33;
          goto LABEL_58;
        }
      }
    }
    objc_msgSend(v7, "view");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    if ((-[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle") | 4) != 4)
    {
      v33 = 1;
LABEL_50:
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        -[CAMViewfinderViewController _modeDial](self, "_modeDial");
        v80 = (void *)objc_claimAutoreleasedReturnValue();
        v33 = v22 == v80;

      }
      goto LABEL_53;
    }
    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = -[CAMViewfinderViewController _shouldHideUtilityBarForGraphConfiguration:](self, "_shouldHideUtilityBarForGraphConfiguration:", v24);

    if (objc_msgSend(v23, "isControlDrawerExpanded"))
      v26 = objc_msgSend(v23, "isControlDrawerAllowed");
    else
      v26 = 0;
    -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = -[CAMViewfinderViewController _shouldApplyTopBarRotationForGraphConfiguration:](self, "_shouldApplyTopBarRotationForGraphConfiguration:", v34);

    -[CAMViewfinderViewController _topBar](self, "_topBar");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v36 || v35)
    {
      objc_msgSend(v23, "controlStatusBar");
      v37 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      -[CAMViewfinderViewController _topBar](self, "_topBar");
      v37 = objc_claimAutoreleasedReturnValue();
    }
    v38 = (void *)v37;

    if ((v26 & 1) != 0)
    {
      objc_msgSend(v23, "controlDrawer");
      v39 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (v25)
        -[CAMViewfinderViewController _primaryShutterControl](self, "_primaryShutterControl");
      else
        -[CAMViewfinderViewController _utilityBar](self, "_utilityBar");
      v39 = objc_claimAutoreleasedReturnValue();
    }
    v40 = (void *)v39;
    objc_msgSend(v38, "bounds");
    v42 = v41;
    v44 = v43;
    v46 = v45;
    v48 = v47;
    -[CAMViewfinderViewController view](self, "view");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v38, "convertRect:toView:", v49, v42, v44, v46, v48);
    v51 = v50;
    v53 = v52;
    v55 = v54;
    v57 = v56;

    objc_msgSend(v40, "bounds");
    v59 = v58;
    v61 = v60;
    v63 = v62;
    v65 = v64;
    -[CAMViewfinderViewController view](self, "view");
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "convertRect:toView:", v66, v59, v61, v63, v65);
    v68 = v67;
    v70 = v69;
    v72 = v71;
    v74 = v73;

    if (v38)
    {
      v148.origin.x = v51;
      v148.origin.y = v53;
      v148.size.width = v55;
      v148.size.height = v57;
      MaxY = CGRectGetMaxY(v148);
      if (v40)
      {
LABEL_43:
        v149.origin.x = v68;
        v149.origin.y = v70;
        v149.size.width = v72;
        v149.size.height = v74;
        MinY = CGRectGetMinY(v149);
LABEL_46:
        -[CAMViewfinderViewController view](self, "view");
        v77 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "locationInView:", v77);
        v79 = v78;

        v33 = v79 > MaxY && v79 < MinY;
        goto LABEL_50;
      }
    }
    else
    {
      MaxY = 0.0;
      if (v40)
        goto LABEL_43;
    }
    MinY = 1.79769313e308;
    goto LABEL_46;
  }
  if (self->__nextFilterGestureRecognizer == v6 || self->__previousFilterGestureRecognizer == v6)
  {
    objc_msgSend(v7, "view");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _topBar](self, "_topBar");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _bottomBar](self, "_bottomBar");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _utilityBar](self, "_utilityBar");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
    v11 = objc_claimAutoreleasedReturnValue();
    v31 = -[CAMViewfinderViewController _shouldHideUtilityBarForGraphConfiguration:](self, "_shouldHideUtilityBarForGraphConfiguration:", v11);

    objc_opt_class();
    LOBYTE(v11) = 0;
    if ((objc_opt_isKindOfClass() & 1) == 0 && v27 != v28 && v27 != v29)
    {
      if (v30)
        v32 = v31;
      else
        v32 = 1;
      if ((v32 & 1) != 0)
      {
        LOBYTE(v11) = 1;
      }
      else
      {
        objc_msgSend(v7, "locationInView:", v30);
        v83 = v82;
        v85 = v84;
        objc_msgSend(v30, "bounds");
        v140.x = v83;
        v140.y = v85;
        LODWORD(v11) = !CGRectContainsPoint(v150, v140);
      }
    }

    goto LABEL_56;
  }
  if ((UISwipeGestureRecognizer *)self->__cameraRollSwipeUpGestureRecognizer == v6)
  {
    -[CAMViewfinderViewController _imageWell](self, "_imageWell");
    v87 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v87, "isHidden"))
    {
      objc_msgSend(v87, "isEnabled");
      LOBYTE(v11) = 0;
    }
    else
    {
      objc_msgSend(v87, "alpha");
      v100 = v99;
      v101 = objc_msgSend(v87, "isEnabled");
      LOBYTE(v11) = 0;
      if (v100 != 0.0 && v101)
      {
        objc_msgSend(v87, "bounds");
        v103 = v102 + -20.0;
        v105 = v104 + -20.0;
        v107 = v106 + 40.0;
        v109 = v108 + 40.0;
        objc_msgSend(v7, "locationInView:", v87);
        v142.x = v110;
        v142.y = v111;
        v152.origin.x = v103;
        v152.origin.y = v105;
        v152.size.width = v107;
        v152.size.height = v109;
        LOBYTE(v11) = CGRectContainsPoint(v152, v142);
      }
    }

  }
  else
  {
    -[CAMViewfinderViewController _swipeUpGestureRecognizer](self, "_swipeUpGestureRecognizer");
    v12 = objc_claimAutoreleasedReturnValue();
    if ((UISwipeGestureRecognizer *)v12 == v6)
    {

    }
    else
    {
      v13 = (void *)v12;
      -[CAMViewfinderViewController _swipeDownGestureRecognizer](self, "_swipeDownGestureRecognizer");
      v14 = (UISwipeGestureRecognizer *)objc_claimAutoreleasedReturnValue();

      if (v14 != v6)
      {
        if ((UISwipeGestureRecognizer *)self->__zoomPinchGestureRecognizer != v6)
        {
          LOBYTE(v11) = 1;
          goto LABEL_58;
        }
        -[CAMViewfinderViewController _topBar](self, "_topBar");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "locationInView:", v27);
        v118 = v117;
        if (v27)
        {
          v119 = v116;
          objc_msgSend(v27, "bounds");
          v144.x = v119;
          v144.y = v118;
          v120 = CGRectContainsPoint(v154, v144);
        }
        else
        {
          v120 = 0;
        }
        -[CAMViewfinderViewController _bottomBar](self, "_bottomBar");
        v121 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "locationInView:", v121);
        if (v121)
        {
          v135 = v133;
          v136 = v134;
          objc_msgSend(v121, "bounds");
          v146.x = v135;
          v146.y = v136;
          v137 = !CGRectContainsPoint(v158, v146);
        }
        else
        {
          LOBYTE(v137) = 1;
        }
        if (v120)
          LOBYTE(v11) = 0;
        else
          LOBYTE(v11) = (v118 >= 0.0 || v27 == 0) && v137;
LABEL_102:

        goto LABEL_57;
      }
    }
    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v88 = (void *)objc_claimAutoreleasedReturnValue();
    v89 = objc_msgSend(v88, "isCTMSupported");

    if (v89)
    {
      -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v90 = objc_msgSend(v27, "isControlDrawerAllowed");
      -[CAMViewfinderViewController _captureController](self, "_captureController");
      v11 = objc_claimAutoreleasedReturnValue();
      v91 = objc_msgSend((id)v11, "isCapturingLowLightImage");

      LOBYTE(v11) = 0;
      if (!v90 || (v91 & 1) != 0)
        goto LABEL_57;
      if ((objc_msgSend(v27, "isControlDrawerExpanded") & 1) != 0)
        objc_msgSend(v27, "controlDrawer");
      else
        objc_msgSend(v27, "modeDial");
      v121 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "controlStatusBar");
      v122 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "locationInView:", v122);
      v124 = v123;
      objc_msgSend(v122, "bounds");
      LOBYTE(v11) = v124 > CGRectGetMaxY(v155);
      objc_msgSend(v7, "locationInView:", v121);
      v126 = v125;
      objc_msgSend(v121, "bounds");
      if (v126 >= CGRectGetMaxY(v156))
        LOBYTE(v11) = 0;

      goto LABEL_102;
    }
    v92 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
    LOBYTE(v11) = 0;
    if (v92 <= 6 && ((1 << v92) & 0x51) != 0)
    {
      -[CAMViewfinderViewController _utilityBar](self, "_utilityBar");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
      v93 = (void *)objc_claimAutoreleasedReturnValue();
      v94 = -[CAMViewfinderViewController _shouldHideUtilityBarForGraphConfiguration:](self, "_shouldHideUtilityBarForGraphConfiguration:", v93);

      if (v27)
      {
        if (!v94)
        {
          objc_msgSend(v7, "locationInView:", v27);
          v96 = v95;
          v98 = v97;
          objc_msgSend(v27, "bounds");
          v141.x = v96;
          v141.y = v98;
          if (CGRectContainsPoint(v151, v141))
          {
            LOBYTE(v11) = 1;
            goto LABEL_57;
          }
        }
      }
      -[CAMViewfinderViewController _topBar](self, "_topBar");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "locationInView:", v28);
      if (v28)
      {
        v114 = v112;
        v115 = v113;
        objc_msgSend(v28, "bounds");
        v143.x = v114;
        v143.y = v115;
        LODWORD(v11) = !CGRectContainsPoint(v153, v143);
      }
      else
      {
        LOBYTE(v11) = 1;
      }
      -[CAMViewfinderViewController _bottomBar](self, "_bottomBar");
      v127 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "locationInView:", v127);
      if (v127)
      {
        v130 = v128;
        v131 = v129;
        objc_msgSend(v127, "bounds");
        v145.x = v130;
        v145.y = v131;
        v132 = !CGRectContainsPoint(v157, v145);
      }
      else
      {
        LOBYTE(v132) = 1;
      }
      LOBYTE(v11) = v11 & v132;

LABEL_56:
LABEL_57:

    }
  }
LABEL_58:

  return v11;
}

- (CAMUtilityBar)_utilityBar
{
  return self->__utilityBar;
}

- (CAMFeedbackController)_feedbackController
{
  return self->__feedbackController;
}

- (void)_handleShutterButtonPressed:(id)a3
{
  _QWORD v3[5];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __59__CAMViewfinderViewController__handleShutterButtonPressed___block_invoke;
  v3[3] = &unk_1EA32A8A8;
  v3[4] = self;
  -[CAMViewfinderViewController _attemptShutterPressWithBlock:](self, "_attemptShutterPressWithBlock:", v3);
}

- (void)_setLastShutterButtonTouchDownTime:(unint64_t)a3
{
  self->__lastShutterButtonTouchDownTime = a3;
}

- (unint64_t)_shutterButtonFeedbackForCurrentConfiguration
{
  unint64_t v3;
  void *v4;
  unint64_t v5;

  v3 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
  if (v3 > 9)
    return 0;
  if (((1 << v3) & 0x1AE) != 0)
  {
    -[CAMViewfinderViewController _captureController](self, "_captureController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v4, "isCapturingTimelapse") & 1) != 0 || (objc_msgSend(v4, "isCapturingVideo") & 1) != 0)
    {
      v5 = 2;
    }
    else if (objc_msgSend(v4, "isCapturingPanorama"))
    {
      v5 = 2;
    }
    else
    {
      v5 = 1;
    }

  }
  else if (-[CAMViewfinderViewController _isCapturingFromTimer](self, "_isCapturingFromTimer"))
  {
    return 2;
  }
  else
  {
    return -[CAMViewfinderViewController _shouldCaptureWithTimer](self, "_shouldCaptureWithTimer");
  }
  return v5;
}

- (BOOL)_shouldCaptureWithTimer
{
  BOOL v3;
  int64_t v4;
  int64_t v5;
  _BOOL4 v6;

  v3 = -[CAMViewfinderViewController _isCapturingFromTimer](self, "_isCapturingFromTimer");
  v4 = -[CAMViewfinderViewController _resolvedTimerDuration](self, "_resolvedTimerDuration");
  v5 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
  v6 = !-[CAMViewfinderViewController isEmulatingImagePicker](self, "isEmulatingImagePicker");
  if (v5 == 2)
    LOBYTE(v6) = 0;
  if (!v4)
    LOBYTE(v6) = 0;
  return !v3 && v6;
}

- (BOOL)_shouldReportUserInitiationTimeForCurrentSettings
{
  void *v3;
  unint64_t v4;
  void *v5;
  char v6;
  int v7;
  char v8;
  BOOL v9;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "hostProcess") & 0xFFFFFFFFFFFFFFFBLL;
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isCapturingBurst");
  if (-[CAMViewfinderViewController _isCapturingFromTimer](self, "_isCapturingFromTimer"))
    LOBYTE(v7) = 0;
  else
    v7 = !-[CAMViewfinderViewController _shouldCaptureWithTimer](self, "_shouldCaptureWithTimer");
  v8 = v7 & ~v6;
  if (v4)
    v9 = 0;
  else
    v9 = v8;

  return v9;
}

- (BOOL)isDisablingMultipleCaptureFeatures
{
  return self->_disablingMultipleCaptureFeatures;
}

- (void)_setupBurstTimerWithDelay:(double)a3
{
  CAMPreciseTimer *v5;
  CAMPreciseTimer *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, void *);
  void *v10;
  id v11;
  id location;

  objc_initWeak(&location, self);
  v5 = [CAMPreciseTimer alloc];
  v7 = MEMORY[0x1E0C809B0];
  v8 = 3221225472;
  v9 = __57__CAMViewfinderViewController__setupBurstTimerWithDelay___block_invoke;
  v10 = &unk_1EA32A920;
  objc_copyWeak(&v11, &location);
  v6 = -[CAMPreciseTimer initWithDelay:interval:handler:](v5, "initWithDelay:interval:handler:", &v7, a3, 1.79769313e308);
  -[CAMPreciseTimer start](v6, "start", v7, v8, v9, v10);
  -[CAMViewfinderViewController _setCurrentBurstTimer:](self, "_setCurrentBurstTimer:", v6);

  objc_destroyWeak(&v11);
  objc_destroyWeak(&location);
}

- (void)_setCurrentBurstTimer:(id)a3
{
  objc_storeStrong((id *)&self->__currentBurstTimer, a3);
}

- (void)_setLastPerformedShutterButtonFeedbackType:(unint64_t)a3
{
  self->__lastPerformedShutterButtonFeedbackType = a3;
}

- (unint64_t)_lastPerformedShutterButtonFeedbackType
{
  return self->__lastPerformedShutterButtonFeedbackType;
}

- (void)_handleShutterButtonReleased:(id)a3
{
  -[CAMViewfinderViewController _handleShutterButtonReleased:fromDragExit:](self, "_handleShutterButtonReleased:fromDragExit:", a3, 0);
}

- (void)_handleShutterButtonActionWithEventTriggerDescription:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  _BOOL4 v7;
  _BOOL4 v8;
  int v9;
  __CFString *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  __CFString *v17;
  __CFString *v18;
  uint8_t buf[4];
  id v20;
  __int16 v21;
  __CFString *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  switch(objc_msgSend(v6, "mode"))
  {
    case 0:
    case 4:
    case 6:
    case 9:
      -[CAMViewfinderViewController _teardownBurstTimer](self, "_teardownBurstTimer");
      v7 = -[CAMViewfinderViewController _shouldCaptureWithTimer](self, "_shouldCaptureWithTimer");
      v8 = -[CAMViewfinderViewController _isCapturingFromTimer](self, "_isCapturingFromTimer");
      v9 = objc_msgSend(v5, "isCapturingBurst");
      if (v8)
      {
        -[CAMViewfinderViewController _stopCountdownForCaptureTimer](self, "_stopCountdownForCaptureTimer");
        v10 = CFSTR("stop timer countdown");
        goto LABEL_18;
      }
      if (v9)
      {
        -[CAMViewfinderViewController _stopCapturingBurst](self, "_stopCapturingBurst");
        v10 = CFSTR("stop capturing burst");
        goto LABEL_18;
      }
      if (v7)
      {
        -[CAMViewfinderViewController _startCountdownForCaptureTimer](self, "_startCountdownForCaptureTimer");
        v10 = CFSTR("start timer countdown");
        goto LABEL_18;
      }
      -[CAMViewfinderViewController _captureStillImageWithCurrentSettings](self, "_captureStillImageWithCurrentSettings");
      v10 = CFSTR("capture still image");
      goto LABEL_9;
    case 1:
    case 2:
    case 7:
    case 8:
      if ((objc_msgSend(v5, "isCapturingVideo") & 1) != 0)
      {
        -[CAMViewfinderViewController _stopCapturingVideo](self, "_stopCapturingVideo");
        v10 = CFSTR("stop capturing video");
        goto LABEL_18;
      }
      -[CAMViewfinderViewController _videoCaptureRequestWithCurrentSettings](self, "_videoCaptureRequestWithCurrentSettings");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMViewfinderViewController _startCapturingVideoWithRequest:](self, "_startCapturingVideoWithRequest:", v11);

      v10 = CFSTR("start capturing video");
      goto LABEL_9;
    case 3:
      if ((objc_msgSend(v5, "isCapturingPanorama") & 1) != 0)
      {
        -[CAMViewfinderViewController _stopCapturingPanorama](self, "_stopCapturingPanorama");
        v10 = CFSTR("stop capturing panorama");
        goto LABEL_18;
      }
      -[CAMViewfinderViewController _panoramaCaptureRequestWithCurrentSettings](self, "_panoramaCaptureRequestWithCurrentSettings");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = objc_msgSend(v14, "captureOrientation");
      v16 = +[CAMOrientationUtilities captureOrientationFromPanoramaCaptureOrientation:](CAMOrientationUtilities, "captureOrientationFromPanoramaCaptureOrientation:", v15);
      if (v15 >= 5)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected:%ld"), v15);
        v17 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v17 = off_1EA32AE38[v15];
      }
      if (v16 >= 5)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected:%ld"), v16);
        v18 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v18 = off_1EA32AE38[v16];
      }
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("start capturing panorama (device in %@, image in %@)"), v18, v17);
      v10 = (__CFString *)objc_claimAutoreleasedReturnValue();
      -[CAMViewfinderViewController _startCapturingPanoramaWithRequest:](self, "_startCapturingPanoramaWithRequest:", v14);

      goto LABEL_9;
    case 5:
      if (-[CAMViewfinderViewController _isCapturingTimelapse](self, "_isCapturingTimelapse"))
      {
        -[CAMViewfinderViewController _stopTimelapse](self, "_stopTimelapse");
        v10 = CFSTR("stop capturing timelapse");
LABEL_18:
        v13 = os_log_create("com.apple.camera", "Camera");
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138543618;
          v20 = v4;
          v21 = 2114;
          v22 = v10;
          _os_log_impl(&dword_1DB760000, v13, OS_LOG_TYPE_DEFAULT, "%{public}@: %{public}@", buf, 0x16u);
        }

        goto LABEL_21;
      }
      -[CAMViewfinderViewController _startTimelapse](self, "_startTimelapse");
      v10 = CFSTR("start capturing timelapse");
LABEL_9:
      -[CAMViewfinderViewController _motionController](self, "_motionController");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "debugValidateCaptureOrientationForMode:", objc_msgSend(v6, "mode"));

      if (v10)
        goto LABEL_18;
LABEL_21:

      return;
    default:
      v10 = CFSTR("no context");
      goto LABEL_18;
  }
}

- (void)_teardownBurstTimer
{
  id v3;

  -[CAMViewfinderViewController _currentBurstTimer](self, "_currentBurstTimer");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "invalidate");
  -[CAMViewfinderViewController _setCurrentBurstTimer:](self, "_setCurrentBurstTimer:", 0);

}

- (CAMPreciseTimer)_currentBurstTimer
{
  return self->__currentBurstTimer;
}

- (BOOL)_captureStillImageWithCurrentSettings
{
  void *v3;
  void *v4;
  _BOOL4 v5;
  void *v6;
  void *v7;
  void *v8;

  -[CAMViewfinderViewController _setImageAnalyzer:](self, "_setImageAnalyzer:", 0);
  -[CAMViewfinderViewController _stillImageCaptureRequestWithCurrentSettingsAsBurst:maximumLength:](self, "_stillImageCaptureRequestWithCurrentSettingsAsBurst:maximumLength:", 0, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _generateAnalyticsCaptureEventWithRequest:burst:](self, "_generateAnalyticsCaptureEventWithRequest:burst:", v3, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setAnalyticsEvent:", v4);

  v5 = -[CAMViewfinderViewController _captureStillImageWithRequest:error:](self, "_captureStillImageWithRequest:error:", v3, 0);
  if (v5)
  {
    -[CAMViewfinderViewController stillImageCaptureTestDelegate](self, "stillImageCaptureTestDelegate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "viewfinderViewController:willCaptureStillImageForRequest:", self, v3);

    -[CAMViewfinderViewController _analyticsSessionEvent](self, "_analyticsSessionEvent");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "didCaptureWithRequest:currentConfiguration:", v3, v8);

  }
  return v5;
}

- (id)_stillImageCaptureRequestWithCurrentSettingsAsBurst:(BOOL)a3 maximumLength:(int64_t)a4
{
  _BOOL8 v4;
  void *v6;
  void *v7;
  void *v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  void *v14;
  CAMMutableStillImageCaptureRequest *v15;
  uint64_t v16;
  _BOOL8 v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int64_t v22;
  int64_t v23;
  int64_t v24;
  void *v25;
  uint64_t v26;
  int64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  BOOL v40;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  unsigned __int8 v49;

  v4 = a3;
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _motionController](self, "_motionController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _cameraRollController](self, "_cameraRollController");
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
  v10 = -[CAMViewfinderViewController _currentDevice](self, "_currentDevice");
  v43 = -[CAMViewfinderViewController persistenceBehavior](self, "persistenceBehavior");
  v45 = v6;
  v11 = objc_msgSend(v6, "isCapturingVideo");
  v12 = -[CAMViewfinderViewController _effectFilterTypeForMode:](self, "_effectFilterTypeForMode:", v9);
  -[CAMViewfinderViewController _currentCaptureFiltersForBurst:](self, "_currentCaptureFiltersForBurst:", v4);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _originalCaptureFiltersForMode:devicePosition:](self, "_originalCaptureFiltersForMode:devicePosition:", v9, -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"));
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  v44 = v7;
  v13 = objc_msgSend(v7, "captureOrientation");
  v40 = -[CAMViewfinderViewController isEmulatingImagePicker](self, "isEmulatingImagePicker");
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_alloc_init(CAMMutableStillImageCaptureRequest);
  -[CAMMutableStillImageCaptureRequest setDelegate:](v15, "setDelegate:", self);
  v42 = v13;
  -[CAMMutableStillImageCaptureRequest setCaptureOrientation:](v15, "setCaptureOrientation:", v13);
  if ((unint64_t)(v10 - 1) > 0xA)
    v16 = 0;
  else
    v16 = qword_1DB9A53B8[v10 - 1];
  -[CAMMutableStillImageCaptureRequest setCaptureMirrored:](v15, "setCaptureMirrored:", objc_msgSend(v14, "mirrorCameraCapturesForDevicePosition:mode:", v16, v9));
  -[CAMMutableStillImageCaptureRequest setCaptureDevice:](v15, "setCaptureDevice:", v10);
  -[CAMMutableStillImageCaptureRequest setCaptureMode:](v15, "setCaptureMode:", v9);
  -[CAMMutableStillImageCaptureRequest setWantsSquareCrop:](v15, "setWantsSquareCrop:", v9 == 4);
  -[CAMMutableStillImageCaptureRequest setAspectRatioCrop:](v15, "setAspectRatioCrop:", -[CAMViewfinderViewController _aspectRatioCropForMode:devicePosition:](self, "_aspectRatioCropForMode:devicePosition:", v9, -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition")));
  -[CAMMutableStillImageCaptureRequest setEffectFilterType:](v15, "setEffectFilterType:", v12);
  -[CAMMutableStillImageCaptureRequest setSessionIdentifier:](v15, "setSessionIdentifier:", objc_msgSend(v48, "sessionIdentifier"));
  -[CAMMutableStillImageCaptureRequest setAdjustmentFilters:](v15, "setAdjustmentFilters:", v47);
  -[CAMMutableStillImageCaptureRequest setOriginalFilters:](v15, "setOriginalFilters:", v46);
  -[CAMMutableStillImageCaptureRequest setWantsHighResolutionStills:](v15, "setWantsHighResolutionStills:", 1);
  -[CAMMutableStillImageCaptureRequest setStillDuringVideo:](v15, "setStillDuringVideo:", v11);
  -[CAMMutableStillImageCaptureRequest setWantsAutoDualCameraFusion:](v15, "setWantsAutoDualCameraFusion:", v4 ^ 1);
  if (objc_msgSend(v14, "semanticDevelopmentEnabled"))
    v17 = -[CAMViewfinderViewController _resolvedRAWMode](self, "_resolvedRAWMode") != 1;
  else
    v17 = 0;
  -[CAMMutableStillImageCaptureRequest setWantsSemanticSceneFilter:](v15, "setWantsSemanticSceneFilter:", v17);
  -[CAMViewfinderViewController _semanticStyleForCapture](self, "_semanticStyleForCapture");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMMutableStillImageCaptureRequest setSemanticStyle:](v15, "setSemanticStyle:", v18);

  if (v4)
  {
    v19 = objc_msgSend(v8, "isBurstSupportedForMode:device:", v9, v10) ^ 1;
  }
  else if ((v11 & 1) != 0)
  {
    v19 = 0;
  }
  else if (-[CAMViewfinderViewController _isBurstEndSoundPlaying](self, "_isBurstEndSoundPlaying"))
  {
    v19 = -[CAMViewfinderViewController _desiredLivePhotoMode](self, "_desiredLivePhotoMode") == 0;
  }
  else
  {
    v19 = 1;
  }
  -[CAMMutableStillImageCaptureRequest setWantsAudioForCapture:](v15, "setWantsAudioForCapture:", v19);
  -[CAMMutableStillImageCaptureRequest setLightingEffectType:](v15, "setLightingEffectType:", -[CAMViewfinderViewController _sanitizedLightingTypeForMode:device:](self, "_sanitizedLightingTypeForMode:device:", v9, v10));
  -[CAMMutableStillImageCaptureRequest setWantsWhiteBalanceLockedDuringVideoRecording:](v15, "setWantsWhiteBalanceLockedDuringVideoRecording:", objc_msgSend(v14, "shouldLockWhiteBalanceDuringVideoRecording"));
  if (v4)
  {
    -[CAMMutableStillImageCaptureRequest setFlashMode:](v15, "setFlashMode:", 0);
    -[CAMMutableStillImageCaptureRequest setHdrMode:](v15, "setHdrMode:", 0);
    -[CAMMutableStillImageCaptureRequest setIrisMode:](v15, "setIrisMode:", 0);
    -[CAMMutableStillImageCaptureRequest setPhotoQualityPrioritization:](v15, "setPhotoQualityPrioritization:", 0);
    -[CAMMutableStillImageCaptureRequest setLowLightMode:](v15, "setLowLightMode:", 0);
    if (a4 >= 1)
      -[CAMMutableStillImageCaptureRequest setMaximumBurstLength:](v15, "setMaximumBurstLength:");
    v20 = v43;
    if (objc_msgSend(v14, "burstFollowsEncoderSettings"))
      v21 = objc_msgSend(v14, "photoEncodingBehavior");
    else
      v21 = 0;
    -[CAMMutableStillImageCaptureRequest setPhotoEncodingBehavior:](v15, "setPhotoEncodingBehavior:", v21);
    -[CAMMutableStillImageCaptureRequest setPersistenceOptions:](v15, "setPersistenceOptions:", -[CAMViewfinderViewController _persistenceOptionsForBehavior:allowingOptionalLocalPersistence:](self, "_persistenceOptionsForBehavior:allowingOptionalLocalPersistence:", v43, 1));
  }
  else
  {
    v49 = 0;
    v22 = -[CAMViewfinderViewController _displayedFlashModeForMode:flashActive:](self, "_displayedFlashModeForMode:flashActive:", v9, &v49);
    -[CAMMutableStillImageCaptureRequest setFlashMode:](v15, "setFlashMode:", v49);
    if (v22)
      v23 = -[CAMViewfinderViewController _resolvedFlashMode](self, "_resolvedFlashMode");
    else
      v23 = 0;
    -[CAMMutableStillImageCaptureRequest setTorchMode:](v15, "setTorchMode:", +[CAMCaptureConversions torchModeForFlashMode:](CAMCaptureConversions, "torchModeForFlashMode:", v23));
    if (v40)
    {
      objc_msgSend(v8, "isSmartHDRSupported");
      v24 = 0;
      LOBYTE(v11) = 1;
    }
    else
    {
      v24 = -[CAMViewfinderViewController _resolvedHDRMode](self, "_resolvedHDRMode");
      if ((objc_msgSend(v8, "isSmartHDRSupported") & 1) != 0)
      {
        if (v24 == 1)
          v24 = 2;
      }
      else if (v24 == 2)
      {
        v24 = objc_msgSend(v45, "isHDRSuggested");
      }
    }
    -[CAMMutableStillImageCaptureRequest setHdrMode:](v15, "setHdrMode:", v24);
    -[CAMMutableStillImageCaptureRequest setWantsEV0ForHDR:](v15, "setWantsEV0ForHDR:", objc_msgSend(v14, "shouldCaptureHDREV0"));
    -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = objc_msgSend(v25, "photoQualityPrioritization");

    -[CAMMutableStillImageCaptureRequest setPhotoQualityPrioritization:](v15, "setPhotoQualityPrioritization:", v26);
    -[CAMMutableStillImageCaptureRequest setPhotoEncodingBehavior:](v15, "setPhotoEncodingBehavior:", -[CAMViewfinderViewController _currentPhotoEncodingBehavior](self, "_currentPhotoEncodingBehavior"));
    -[CAMMutableStillImageCaptureRequest setRawFileFormatBehavior:](v15, "setRawFileFormatBehavior:", -[CAMViewfinderViewController _currentRawFileFormatEncodingBehavior](self, "_currentRawFileFormatEncodingBehavior"));
    -[CAMMutableStillImageCaptureRequest setLowLightMode:](v15, "setLowLightMode:", -[CAMViewfinderViewController _lowLightModeForMode:captureMode:device:isBurst:](self, "_lowLightModeForMode:captureMode:device:isBurst:", -[CAMViewfinderViewController _resolvedLowLightMode](self, "_resolvedLowLightMode"), v9, v10, 0));
    -[CAMMutableStillImageCaptureRequest setDisablesCameraSwitchingDuringRecording:](v15, "setDisablesCameraSwitchingDuringRecording:", objc_msgSend(v14, "shouldDisableCameraSwitchingDuringVideoRecordingForMode:", v9));
    -[CAMMutableStillImageCaptureRequest setMaximumPhotoResolution:](v15, "setMaximumPhotoResolution:", -[CAMViewfinderViewController _currentMaxPhotoResolution](self, "_currentMaxPhotoResolution"));
    -[CAMMutableStillImageCaptureRequest setWantsDepthData:](v15, "setWantsDepthData:", -[CAMViewfinderViewController _shouldRequestDepthDeliveryForBurst:](self, "_shouldRequestDepthDeliveryForBurst:", 0));
    if ((v11 & 1) != 0)
      v27 = 0;
    else
      v27 = -[CAMViewfinderViewController _resolvedLivePhotoMode](self, "_resolvedLivePhotoMode");
    v20 = v43;
    -[CAMMutableStillImageCaptureRequest setIrisMode:](v15, "setIrisMode:", v27);
    -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMMutableStillImageCaptureRequest setVideoEncodingBehavior:](v15, "setVideoEncodingBehavior:", objc_msgSend(v28, "videoEncodingBehavior"));

    -[CAMMutableStillImageCaptureRequest setPersistenceOptions:](v15, "setPersistenceOptions:", -[CAMViewfinderViewController _persistenceOptionsForBehavior:allowingOptionalLocalPersistence:](self, "_persistenceOptionsForBehavior:allowingOptionalLocalPersistence:", v43, v27 == 0));
    -[CAMViewfinderViewController _updateUserInitiationTimeForRequest:](self, "_updateUserInitiationTimeForRequest:", v15);
  }
  -[CAMViewfinderViewController _locationController](self, "_locationController");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "currentLocation");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  if (v30)
    -[CAMMutableStillImageCaptureRequest setLocation:](v15, "setLocation:", v30);
  objc_msgSend(v29, "headingForOrientation:", v42);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  if (v31)
    -[CAMMutableStillImageCaptureRequest setHeading:](v15, "setHeading:", v31);
  if (objc_msgSend(v8, "isInternalInstall"))
    -[CAMMutableStillImageCaptureRequest setShouldDelayRemotePersistence:](v15, "setShouldDelayRemotePersistence:", objc_msgSend(v14, "shouldDelayRemotePersistence"));
  -[CAMMutableStillImageCaptureRequest setTemporaryPersistenceOptions:](v15, "setTemporaryPersistenceOptions:", -[CAMViewfinderViewController _temporaryPersistenceOptionsForBehavior:](self, "_temporaryPersistenceOptionsForBehavior:", v20));
  -[CAMViewfinderViewController _updateOriginForRequest:](self, "_updateOriginForRequest:", v15);
  -[CAMViewfinderViewController _desiredPreviewSizeForStillImageCapture](self, "_desiredPreviewSizeForStillImageCapture");
  -[CAMMutableStillImageCaptureRequest setDesiredPreviewSize:](v15, "setDesiredPreviewSize:");
  if (objc_msgSend(v14, "sharedLibraryEnabled"))
  {
    if (-[CAMViewfinderViewController _isCapturingFromTimer](self, "_isCapturingFromTimer"))
    {
      -[CAMMutableStillImageCaptureRequest setSharedLibraryMode:](v15, "setSharedLibraryMode:", -[CAMViewfinderViewController _cachedSharedLibraryTimerState](self, "_cachedSharedLibraryTimerState"));
    }
    else
    {
      -[CAMViewfinderViewController _librarySelectionController](self, "_librarySelectionController");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMMutableStillImageCaptureRequest setSharedLibraryMode:](v15, "setSharedLibraryMode:", objc_msgSend(v32, "sharedLibraryMode"));

    }
    if (objc_msgSend(v8, "isInternalInstall"))
    {
      -[CAMViewfinderViewController _librarySelectionController](self, "_librarySelectionController");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "librarySelectionDiagnostics");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMMutableStillImageCaptureRequest setSharedLibraryDiagnostics:](v15, "setSharedLibraryDiagnostics:", v34);

    }
    if (objc_msgSend(v8, "peopleProximityPersistenceSupported"))
    {
      -[CAMViewfinderViewController _librarySelectionController](self, "_librarySelectionController");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v35, "acquiredSignalResults");
      v36 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v36, "identitiesInProximity");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      CAMLibrarySelectionIdentityContactIdentifiersForIdentities(v37);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMMutableStillImageCaptureRequest setContactIDsInProximity:](v15, "setContactIDsInProximity:", v38);

    }
  }
  -[CAMMutableStillImageCaptureRequest setStereoCaptureStatus:](v15, "setStereoCaptureStatus:", -[CAMViewfinderViewController _stereoCaptureStatus](self, "_stereoCaptureStatus"));
  -[CAMMutableStillImageCaptureRequest setPressType:](v15, "setPressType:", -[CAMViewfinderViewController _currentlyPressedButton](self, "_currentlyPressedButton"));

  return v15;
}

- (unint64_t)persistenceBehavior
{
  return self->_persistenceBehavior;
}

- (int64_t)_resolvedLivePhotoMode
{
  return self->__resolvedLivePhotoMode;
}

- (int64_t)_persistenceOptionsForBehavior:(unint64_t)a3 allowingOptionalLocalPersistence:(BOOL)a4
{
  _BOOL4 v4;
  BOOL v6;
  int64_t v7;

  v4 = a4;
  v6 = -[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled");
  v7 = 2;
  if (a3 == 2)
    v7 = 1;
  if (a3 == 3)
    v7 = !v4;
  if (v6)
    return 3;
  else
    return v7;
}

- (void)_updateUserInitiationTimeForRequest:(id)a3
{
  unint64_t v4;
  id v5;

  v5 = a3;
  if (-[CAMViewfinderViewController _shouldReportUserInitiationTimeForCurrentSettings](self, "_shouldReportUserInitiationTimeForCurrentSettings"))
  {
    v4 = -[CAMViewfinderViewController _lastShutterButtonTouchDownTime](self, "_lastShutterButtonTouchDownTime");
  }
  else
  {
    v4 = 0;
  }
  objc_msgSend(v5, "setUserInitiationTime:", v4);

}

- (unint64_t)_lastShutterButtonTouchDownTime
{
  return self->__lastShutterButtonTouchDownTime;
}

- (int64_t)_temporaryPersistenceOptionsForBehavior:(unint64_t)a3
{
  if (a3 - 1 > 2)
    return 0;
  else
    return qword_1DB9A5228[a3 - 1];
}

- (void)_updateOriginForRequest:(id)a3
{
  id v4;

  v4 = a3;
  objc_msgSend(v4, "setOrigin:", -[CAMViewfinderViewController _currentCaptureRequestOrigin](self, "_currentCaptureRequestOrigin"));

}

- (int64_t)_currentCaptureRequestOrigin
{
  void *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
  v5 = objc_msgSend(v3, "hostProcess");
  v6 = 3;
  if (v4 != 2)
    v6 = 1;
  if (v5 != 1)
    v6 = 0;
  if (v5 == 2)
    v7 = 1;
  else
    v7 = v6;

  return v7;
}

- (int64_t)_lastZoomInteractionType
{
  return self->__lastZoomInteractionType;
}

- (BOOL)_captureStillImageWithRequest:(id)a3 error:(id *)a4
{
  id v6;
  void *v7;
  int v8;
  _BOOL4 v9;
  char v10;
  void *v11;
  char v12;
  unint64_t v13;

  v6 = a3;
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "captureStillImageWithRequest:error:", v6, a4);
  v9 = -[CAMViewfinderViewController isDisablingAdditionalCaptures](self, "isDisablingAdditionalCaptures");
  v10 = objc_msgSend(v7, "isCapturingVideo");
  if (v8 && v9 && (v10 & 1) == 0)
    -[CAMViewfinderViewController _setPreventingAdditionalCaptures:](self, "_setPreventingAdditionalCaptures:", 1);
  if (((v8 ^ 1 | objc_msgSend(v7, "isCaptureAvailable")) & 1) == 0)
  {
    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "portraitModeOverlappingCapturesSupported");

    if ((v12 & 1) == 0 && -[CAMViewfinderViewController _currentMode](self, "_currentMode") == 6)
    {
      v13 = -[CAMViewfinderViewController _shallowDepthOfFieldStatus](self, "_shallowDepthOfFieldStatus");
      if (v13 <= 0xE && ((1 << v13) & 0x6202) != 0 && !objc_msgSend(v6, "lowLightMode"))
        -[CAMViewfinderViewController _shutterButtonSetSpinning:](self, "_shutterButtonSetSpinning:", 1);
    }
  }
  -[CAMViewfinderViewController _updateUserPreferencesForFilterUsage](self, "_updateUserPreferencesForFilterUsage");
  -[CAMViewfinderViewController _updateFilterScrubberAfterCapture](self, "_updateFilterScrubberAfterCapture");

  return v8;
}

- (void)_updateUserPreferencesForFilterUsage
{
  int64_t v3;
  void *v4;
  void *v5;

  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
  if (v3 == 6)
  {
    objc_msgSend(v5, "setPortraitModeLastCapturedEffectFilterType:", -[CAMViewfinderViewController _portraitModeEffectFilterType](self, "_portraitModeEffectFilterType"));
    goto LABEL_7;
  }
  if (v3 == 4)
  {
    objc_msgSend(v5, "setSquareModeLastCapturedEffectFilterType:", -[CAMViewfinderViewController _squareModeEffectFilterType](self, "_squareModeEffectFilterType"));
    goto LABEL_7;
  }
  v4 = v5;
  if (!v3)
  {
    objc_msgSend(v5, "setPhotoModeLastCapturedEffectFilterType:", -[CAMViewfinderViewController _photoModeEffectFilterType](self, "_photoModeEffectFilterType"));
LABEL_7:
    v4 = v5;
  }

}

- (void)_updateFilterScrubberAfterCapture
{
  void *v3;
  id v4;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _targetFilterScrubberView](self, "_targetFilterScrubberView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "isLiveFilteringSupported"))
    objc_msgSend(v3, "setMarkedIndex:animated:", -[CAMViewfinderViewController _itemIndexForFilterType:](self, "_itemIndexForFilterType:", -[CAMViewfinderViewController _effectFilterTypeForMode:](self, "_effectFilterTypeForMode:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"))), 1);

}

- (void)stillImageRequestDidStartCapturing:(id)a3 resolvedSettings:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  char v10;
  _BOOL4 v11;
  double v12;
  double v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  void *v30;
  _QWORD *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  int v45;
  void *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  int v51;
  void *v52;
  unint64_t v53;
  int v54;
  int v55;
  int v56;
  void *v57;
  _QWORD v58[4];
  id v59;
  id location;

  v6 = a3;
  v7 = a4;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v7, "isCaptureBeforeResolvingSettingsEnabled");
  v11 = -[CAMViewfinderViewController _wantsCaptureAnimationForRequest:](self, "_wantsCaptureAnimationForRequest:", v6);
  objc_msgSend(v7, "lowLightCaptureTime");
  if (v11 && (v10 & 1) == 0)
  {
    v13 = v12;
    v14 = objc_msgSend(v6, "lowLightMode");
    if ((unint64_t)(v14 - 1) >= 2)
    {
      if (!v14)
        -[CAMViewfinderViewController _performCaptureAnimation](self, "_performCaptureAnimation");
    }
    else
    {
      if (v13 >= 2.0)
      {
        objc_msgSend(v9, "setPreviewAlignmentGuideVisible:animated:", 1, 1);
        -[CAMViewfinderViewController _motionController](self, "_motionController");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "previewAlignmentGuide");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "alignmentModel");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "beginUpdatingPreviewAlignmentModel:", v17);

        -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "presentControlDrawerModally:forReason:controlType:", 1, 2, 9);

        objc_initWeak(&location, self);
        -[CAMViewfinderViewController _controlDrawer](self, "_controlDrawer");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "lowLightSlider");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v58[0] = MEMORY[0x1E0C809B0];
        v58[1] = 3221225472;
        v58[2] = __83__CAMViewfinderViewController_stillImageRequestDidStartCapturing_resolvedSettings___block_invoke;
        v58[3] = &unk_1EA32A4A0;
        objc_copyWeak(&v59, &location);
        objc_msgSend(v20, "performCaptureAnimationWithDuration:completion:", v58, v13);

        -[CAMViewfinderViewController _setLowLightCaptureUIVisible:](self, "_setLowLightCaptureUIVisible:", 1);
        -[CAMViewfinderViewController updateControlVisibilityAnimated:](self, "updateControlVisibilityAnimated:", 1);
        objc_destroyWeak(&v59);
        objc_destroyWeak(&location);
      }
      v21 = objc_msgSend(v8, "lowLightPreviewOverlayStyleForDevicePosition:sensitiveToChangingDisplayFeedback:sensitiveToInitialFeedback:duration:", objc_msgSend(v6, "captureDevicePosition"), objc_msgSend(v7, "lowLightCaptureHasConstantPreviewFeedbackSensitivity"), objc_msgSend(v7, "lowLightCaptureHasInitialPreviewFeedbackSensitivity"), v13);
      objc_msgSend(MEMORY[0x1E0DC3658], "colorWithCGColor:", objc_msgSend(v7, "lowLightPreviewColorEstimate"));
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = v22;
      if (v22)
      {
        v24 = v22;
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0DC3658], "blackColor");
        v24 = (id)objc_claimAutoreleasedReturnValue();
      }
      v25 = v24;

      switch(v21)
      {
        case 0:
        case 1:
          v30 = (void *)MEMORY[0x1E0CD27D0];
          v31 = (_QWORD *)MEMORY[0x1E0CD3058];
          goto LABEL_16;
        case 2:
          LODWORD(v26) = 1.0;
          LODWORD(v27) = 0;
          LODWORD(v28) = 1.0;
          LODWORD(v29) = 1.0;
          objc_msgSend(MEMORY[0x1E0CD27D0], "functionWithControlPoints::::", v26, v27, v28, v29);
          v33 = objc_claimAutoreleasedReturnValue();
          goto LABEL_17;
        case 3:
          v30 = (void *)MEMORY[0x1E0CD27D0];
          v31 = (_QWORD *)MEMORY[0x1E0CD3038];
LABEL_16:
          objc_msgSend(v30, "functionWithName:", *v31);
          v33 = objc_claimAutoreleasedReturnValue();
LABEL_17:
          v32 = (void *)v33;
          goto LABEL_18;
        case 4:
          v32 = 0;
          v34 = 0;
          goto LABEL_19;
        default:
          v32 = 0;
LABEL_18:
          v34 = 1;
LABEL_19:
          -[CAMViewfinderViewController _performCaptureAnimationWithDuration:curve:color:fadeOut:](self, "_performCaptureAnimationWithDuration:curve:color:fadeOut:", v32, v25, v34, v13);
          -[CAMViewfinderViewController _feedbackController](self, "_feedbackController");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v35, "prepareDiscreteFeedback:", 0);

          break;
      }
    }
  }
  objc_msgSend(v6, "burstIdentifier");
  v36 = (void *)objc_claimAutoreleasedReturnValue();

  if (v36)
  {
    -[CAMViewfinderViewController _feedbackController](self, "_feedbackController");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "performDiscreteFeedback:", 1);

    -[CAMViewfinderViewController _feedbackController](self, "_feedbackController");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v38, "prepareDiscreteFeedback:", 1);

    -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
    v39 = (void *)objc_claimAutoreleasedReturnValue();

    if (v39)
    {
      -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      v41 = objc_msgSend(v40, "incrementCounter");
    }
    else
    {
      -[CAMViewfinderViewController _burstIndicatorView](self, "_burstIndicatorView");
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      v41 = objc_msgSend(v40, "incrementWithCaptureAnimation:", 1);
    }
    v42 = v41;

    -[CAMViewfinderViewController _remoteShutterController](self, "_remoteShutterController");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v43, "burstCaptureNumberOfPhotosDidChange:", v42);

  }
  v44 = v9;
  v56 = objc_msgSend(v7, "isHDREnabled");
  v57 = v7;
  v55 = objc_msgSend(v7, "isPortraitEffectEnabled");
  v45 = objc_msgSend(v8, "portraitModeOverlappingCapturesSupported");
  v46 = v8;
  v47 = objc_msgSend(v8, "isSmartHDRSupported");
  v48 = objc_msgSend(v6, "lowLightMode");
  v49 = objc_msgSend(v6, "maximumPhotoResolution");
  v50 = v46;
  v51 = objc_msgSend(v46, "supportsOverlappingCapturesForResolution:", 3);
  if (objc_msgSend(v6, "captureMode") == 9)
  {
    v52 = v6;
    v53 = ((unint64_t)objc_msgSend(v6, "stereoCaptureStatus") >> 1) & 1;
    if (v48)
      goto LABEL_34;
  }
  else
  {
    v52 = v6;
    LODWORD(v53) = 0;
    if (v48)
      goto LABEL_34;
  }
  if (v49 == 3)
    v54 = v51;
  else
    v54 = 1;
  if (((v47 | ~v56) & (v45 | ~v55) & v54 ^ 1 | v53) == 1)
    -[CAMViewfinderViewController _shutterButtonSetSpinning:](self, "_shutterButtonSetSpinning:", 1);
LABEL_34:
  -[CAMPreviewViewController notifyWillStartCapturing](self->__previewViewController, "notifyWillStartCapturing");

}

- (void)_performCaptureAnimation
{
  -[CAMViewfinderViewController _performCaptureAnimationWithDuration:](self, "_performCaptureAnimationWithDuration:", 0.25);
}

- (void)stillImageRequestDidCompleteCapture:(id)a3 error:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a3;
  v6 = a4;
  -[CAMViewfinderViewController stillImageCaptureTestDelegate](self, "stillImageCaptureTestDelegate");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    -[CAMViewfinderViewController stillImageCaptureTestDelegate](self, "stillImageCaptureTestDelegate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "viewfinderViewController:didReceiveStillImageRequestDidCompleteCapture:error:", self, v10, v6);

  }
  if (v6 && -[CAMViewfinderViewController isDisablingAdditionalCaptures](self, "isDisablingAdditionalCaptures"))
    -[CAMViewfinderViewController _setPreventingAdditionalCaptures:](self, "_setPreventingAdditionalCaptures:", 0);
  if ((objc_msgSend(v10, "isCTMVideo") & 1) == 0)
  {
    objc_msgSend(v10, "analyticsEvent");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "publish");

  }
}

- (void)stillImageRequestDidCompleteStillImageCapture:(id)a3 withResponse:(id)a4 error:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  int v16;
  void *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  int v30;
  void *v31;
  __int16 v32;
  void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  objc_msgSend(v8, "textAnalysisIdentifier");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    -[CAMViewfinderViewController _handleTextAnalysisStillImageResponse:error:forRequest:](self, "_handleTextAnalysisStillImageResponse:error:forRequest:", v9, v10, v8);
  }
  else
  {
    -[CAMViewfinderViewController stillImageCaptureTestDelegate](self, "stillImageCaptureTestDelegate");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12)
    {
      -[CAMViewfinderViewController stillImageCaptureTestDelegate](self, "stillImageCaptureTestDelegate");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "viewfinderViewController:didReceiveStillImageRequestDidCompleteStillImageCapture:withResponse:error:", self, v8, v9, v10);

    }
    objc_msgSend(v9, "coordinationInfo");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "isFinalExpectedStillImageResult");
    v16 = objc_msgSend(v14, "isEV0ForHDREV0Pair");
    -[CAMViewfinderViewController _cameraRollController](self, "_cameraRollController");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    if ((v10 || v15)
      && !-[CAMViewfinderViewController _isLowLightCaptureCanceling](self, "_isLowLightCaptureCanceling"))
    {
      -[CAMViewfinderViewController _shutterButtonSetSpinning:](self, "_shutterButtonSetSpinning:", 0);
    }
    if (v16)
    {
      v18 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend(v9, "persistenceUUID");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = 138543618;
        v31 = v19;
        v32 = 2114;
        v33 = v14;
        _os_log_impl(&dword_1DB760000, v18, OS_LOG_TYPE_DEFAULT, "ImageWell %{public}@: ignoring future updates for EV0 result from stillImageRequestDidCompleteStillImageCapture %{public}@", (uint8_t *)&v30, 0x16u);

      }
      objc_msgSend(v8, "EV0PersistenceUUID");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "persistenceUUID");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "ignoreImageWellChangeNotificationForEV0UUID:withHDRUUID:", v20, v21);

    }
    -[CAMViewfinderViewController _updateImageWellWithStillImageResponse:forRequest:error:](self, "_updateImageWellWithStillImageResponse:forRequest:error:", v9, v8, v10);
    if (!v10)
    {
      if (-[CAMViewfinderViewController _isPrimaryDisplayAssetForCoordinationInfo:](self, "_isPrimaryDisplayAssetForCoordinationInfo:", v14))
      {
        objc_msgSend(v17, "processTransientAssetUpdate:preventingInsertion:persistenceOptions:", v9, 0, objc_msgSend(v8, "persistenceOptions"));
      }
      objc_msgSend(v8, "analyticsEvent");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "populateFromStillImageCaptureResponse:", v9);

    }
    objc_msgSend(v8, "burstIdentifier");
    v23 = (void *)objc_claimAutoreleasedReturnValue();

    if (v23)
    {
      -[CAMViewfinderViewController _updateDiskSpaceAlertViewVisibilityAnimated:](self, "_updateDiskSpaceAlertViewVisibilityAnimated:", 1);
    }
    else
    {
      -[CAMViewfinderViewController _captureController](self, "_captureController");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMViewfinderViewController _currentBurstTimer](self, "_currentBurstTimer");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v24, "isCapturingBurst") & 1) == 0
        && (objc_msgSend(v24, "isCapturingStillImage") & 1) == 0
        && objc_msgSend(v25, "fired"))
      {
        v26 = os_log_create("com.apple.camera", "Camera");
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v30) = 0;
          _os_log_impl(&dword_1DB760000, v26, OS_LOG_TYPE_DEFAULT, "Starting burst because image capture finished after burst timer fired", (uint8_t *)&v30, 2u);
        }

        -[CAMViewfinderViewController _beginCapturingBurst](self, "_beginCapturingBurst");
      }

    }
    if (objc_msgSend(v8, "lowLightMode"))
    {
      -[CAMViewfinderViewController _setLowLightCaptureUIVisible:](self, "_setLowLightCaptureUIVisible:", 0);
      -[CAMViewfinderViewController _updateUIForCapturing:animated:](self, "_updateUIForCapturing:animated:", 0, 1);
      -[CAMViewfinderViewController _updateEnabledControlsWithReason:](self, "_updateEnabledControlsWithReason:", CFSTR("Night mode capture ended"));
      -[CAMViewfinderViewController _controlDrawer](self, "_controlDrawer");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "lowLightSlider");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "endCaptureAnimationAnimated:", 1);

      -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v29, "dismissModalControlDrawerIfNeededForReason:", 2);

    }
  }

}

- (void)_updateImageWellWithStillImageResponse:(id)a3 forRequest:(id)a4 error:(id)a5
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  NSObject *v21;
  NSObject *v22;
  int v23;
  void *v24;
  __int16 v25;
  void *v26;
  __int16 v27;
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  objc_msgSend(v8, "coordinationInfo");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "persistenceUUID");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v10, "representsFinalProcessedStillImage");
  if (a5)
  {
    -[CAMImageWell recoverFromFailedThumbnailUpdate](self->__imageWell, "recoverFromFailedThumbnailUpdate");
  }
  else if (v12)
  {
    objc_msgSend(v8, "imageWellImage");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if (v13)
    {
      -[CAMViewfinderViewController _cameraRollController](self, "_cameraRollController");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = objc_msgSend(v8, "sessionIdentifier");
      objc_msgSend(v8, "persistenceUUID");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v14, "isCaptureSessionCurrent:", v15))
      {
        objc_msgSend(v14, "willPersistAssetWithUUID:captureSession:", v16, v15);
        v17 = os_log_create("com.apple.camera", "Camera");
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          v23 = 138543874;
          v24 = v16;
          v25 = 2114;
          v26 = v13;
          v27 = 2114;
          v28 = v10;
          _os_log_impl(&dword_1DB760000, v17, OS_LOG_TYPE_DEFAULT, "ImageWell %{public}@: updating from still image capture %{public}@ %{public}@", (uint8_t *)&v23, 0x20u);
        }

        -[CAMImageWell prepareForThumbnailUpdateFromCapture](self->__imageWell, "prepareForThumbnailUpdateFromCapture");
        -[CAMViewfinderViewController _presentImageWellImage:uuid:animated:](self, "_presentImageWellImage:uuid:animated:", v13, v16, 1);
        CAMSignpostWithIDAndArgs(75, objc_msgSend(v8, "captureID"), objc_msgSend(v8, "captureID"), 0, 0, 0);
        if (!objc_msgSend(v9, "conformsToProtocol:", &unk_1F038ADF0)
          || (objc_msgSend(v9, "burstIdentifier"),
              v18 = (void *)objc_claimAutoreleasedReturnValue(),
              v18,
              !v18))
        {
          -[CAMViewfinderViewController _remoteShutterController](self, "_remoteShutterController");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "sendThumbnailImage:isVideo:", v13, 0);

        }
        -[CAMViewfinderViewController stillImageCaptureTestDelegate](self, "stillImageCaptureTestDelegate");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "viewfinderViewController:didUpdateImageWellWithRequest:response:error:", self, v9, v8, 0);

      }
    }
    else
    {
      v22 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        v23 = 138543618;
        v24 = v11;
        v25 = 2114;
        v26 = v10;
        _os_log_impl(&dword_1DB760000, v22, OS_LOG_TYPE_DEFAULT, "ImageWell %{public}@: no image well image found, so calling recoverFromFailedThumbnailUpdate for still image capture %{public}@", (uint8_t *)&v23, 0x16u);
      }

      -[CAMImageWell recoverFromFailedThumbnailUpdate](self->__imageWell, "recoverFromFailedThumbnailUpdate");
    }

  }
  else
  {
    v21 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      v23 = 138543618;
      v24 = v11;
      v25 = 2114;
      v26 = v10;
      _os_log_impl(&dword_1DB760000, v21, OS_LOG_TYPE_DEFAULT, "ImageWell %{public}@: ignoring non-final image well update from still image capture %{public}@", (uint8_t *)&v23, 0x16u);
    }

  }
}

- (void)stillImageRequestDidCompleteStillImageLocalPersistence:(id)a3 withResponse:(id)a4 error:(id)a5
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  __CFString *v19;
  __CFString *v20;
  NSObject *v21;
  void *v22;
  _BOOL4 v23;
  void *v24;

  v8 = a3;
  v9 = a4;
  v10 = v9;
  if (a5)
  {
    objc_msgSend(a5, "userInfo");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "objectForKeyedSubscript:", *MEMORY[0x1E0CB3388]);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v12, "domain");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v13, "isEqual:", *MEMORY[0x1E0CB2FE0]))
    {
      v14 = objc_msgSend(v12, "code");

      if (v14 != 28)
      {
LABEL_10:

        goto LABEL_13;
      }
      v15 = objc_msgSend(v8, "captureMode");
      v16 = objc_msgSend(v8, "captureDevice");
      -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMViewfinderViewController _graphConfigurationForChangeToMode:device:fromGraphConfiguration:](self, "_graphConfigurationForChangeToMode:device:fromGraphConfiguration:", v15, v16, v17);
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      -[CAMViewfinderViewController _storageController](self, "_storageController");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(v17) = objc_msgSend(v18, "hasDiskSpaceToAllowCaptureWithConfiguration:allowPurging:verbose:", v13, 1, 1);

      v19 = CFSTR("insufficient");
      if ((_DWORD)v17)
        v19 = CFSTR("sufficient");
      v20 = v19;
      v21 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        -[CAMViewfinderViewController stillImageRequestDidCompleteStillImageLocalPersistence:withResponse:error:].cold.1();

      -[CAMViewfinderViewController _setReceivedOutOfDiskSpaceErrorDuringCapture:](self, "_setReceivedOutOfDiskSpaceErrorDuringCapture:", 1);
      -[CAMViewfinderViewController _updateDiskSpaceAlertViewVisibilityAnimated:](self, "_updateDiskSpaceAlertViewVisibilityAnimated:", 1);

    }
    goto LABEL_10;
  }
  objc_msgSend(v9, "coordinationInfo");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = -[CAMViewfinderViewController _isPrimaryDisplayAssetForCoordinationInfo:](self, "_isPrimaryDisplayAssetForCoordinationInfo:", v22);

  if (v23)
  {
    -[CAMViewfinderViewController _cameraRollController](self, "_cameraRollController");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "processTransientAssetUpdate:preventingInsertion:persistenceOptions:", v10, 0, objc_msgSend(v8, "persistenceOptions"));

  }
LABEL_13:

}

- (void)stillImageRequestDidCompleteStillImageRemotePersistence:(id)a3 withResponse:(id)a4 error:(id)a5
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  if (!a5)
  {
    v7 = a4;
    v8 = a3;
    objc_msgSend(v7, "persistenceUUID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v7, "sessionIdentifier");
    -[CAMViewfinderViewController _cameraRollController](self, "_cameraRollController");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v8, "persistenceOptions");

    objc_msgSend(v11, "processTransientAssetUpdate:preventingInsertion:persistenceOptions:", v7, 1, v12);
    objc_msgSend(v11, "didPersistAssetWithUUID:captureSession:", v9, v10);

  }
  -[CAMViewfinderViewController _updateDiskSpaceAlertViewVisibilityAnimated:](self, "_updateDiskSpaceAlertViewVisibilityAnimated:", 1, a4);
}

- (BOOL)shouldHideElapsedTimeView
{
  CAMViewfinderViewController *v2;
  void *v3;
  void *v4;

  v2 = self;
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _motionController](v2, "_motionController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v2) = -[CAMViewfinderViewController _shouldHideElapsedTimeViewForGraphConfiguration:orientation:](v2, "_shouldHideElapsedTimeViewForGraphConfiguration:orientation:", v3, objc_msgSend(v4, "captureOrientation"));

  return (char)v2;
}

- (BOOL)shouldHideTopBar
{
  CAMViewfinderViewController *v2;
  void *v3;

  v2 = self;
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v2) = -[CAMViewfinderViewController _shouldHideTopBarForGraphConfiguration:](v2, "_shouldHideTopBarForGraphConfiguration:", v3);

  return (char)v2;
}

- (BOOL)shouldHidePortraitModeInstructionLabel
{
  CAMViewfinderViewController *v2;
  void *v3;

  v2 = self;
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v2) = -[CAMViewfinderViewController _shouldHidePortraitModeInstructionLabelForGraphConfiguration:](v2, "_shouldHidePortraitModeInstructionLabelForGraphConfiguration:", v3);

  return (char)v2;
}

- (BOOL)shouldHideQRCodeInstructionLabel
{
  CAMViewfinderViewController *v2;
  void *v3;

  v2 = self;
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v2) = -[CAMViewfinderViewController _shouldHideQRCodeInstructionLabelForGraphConfiguration:](v2, "_shouldHideQRCodeInstructionLabelForGraphConfiguration:", v3);

  return (char)v2;
}

- (void)_handleApplicationWillAddDeactivationReason:(id)a3
{
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a3, "userInfo");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E0DC5710]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "integerValue");

  -[CAMViewfinderViewController _debugStringForApplicationDeactivationReason:](self, "_debugStringForApplicationDeactivationReason:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v13 = 138543362;
    v14 = v7;
    _os_log_impl(&dword_1DB760000, v8, OS_LOG_TYPE_DEFAULT, "Will add deactivation reason %{public}@", (uint8_t *)&v13, 0xCu);
  }

  -[CAMViewfinderViewController _closedViewfinderController](self, "_closedViewfinderController");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  switch((int)v6)
  {
    case 0:
    case 4:
    case 5:
    case 12:
    case 15:
      break;
    case 1:
      v11 = 14;
      goto LABEL_22;
    case 2:
      objc_msgSend(v9, "addClosedViewfinderReason:", 15);
      if (!-[CAMViewfinderViewController _capturingFromPhysicalButton](self, "_capturingFromPhysicalButton"))
        break;
      goto LABEL_13;
    case 3:
      objc_msgSend(v9, "addClosedViewfinderReason:", 16);
      if (-[CAMViewfinderViewController _capturingFromPhysicalButton](self, "_capturingFromPhysicalButton"))
        -[CAMViewfinderViewController _stopRecordingForDeactivationReason:](self, "_stopRecordingForDeactivationReason:", v7);
      if (-[CAMViewfinderViewController _currentMode](self, "_currentMode") != 6)
        break;
      -[CAMViewfinderViewController _disabledPreviewController](self, "_disabledPreviewController");
      v12 = objc_claimAutoreleasedReturnValue();
      -[NSObject addDisabledPreviewReason:](v12, "addDisabledPreviewReason:", 2);
      goto LABEL_20;
    case 6:
      v11 = 18;
      goto LABEL_22;
    case 7:
      objc_msgSend(v9, "addClosedViewfinderReason:", 19);
LABEL_13:
      -[CAMViewfinderViewController _stopRecordingForDeactivationReason:](self, "_stopRecordingForDeactivationReason:", v7);
      break;
    case 8:
      v11 = 20;
      goto LABEL_22;
    case 10:
      v12 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        goto LABEL_16;
      goto LABEL_20;
    case 11:
      objc_msgSend(v9, "addClosedViewfinderReason:", 21);
      -[CAMViewfinderViewController _disabledPreviewController](self, "_disabledPreviewController");
      v12 = objc_claimAutoreleasedReturnValue();
      -[NSObject removeDisabledPreviewReason:](v12, "removeDisabledPreviewReason:", 2);
      goto LABEL_20;
    case 13:
      v11 = 22;
LABEL_22:
      objc_msgSend(v9, "addClosedViewfinderReason:", v11);
      break;
    default:
      v12 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
LABEL_16:
        -[CAMViewfinderViewController _handleApplicationWillAddDeactivationReason:].cold.1();
LABEL_20:

      break;
  }

}

- (void)_handleApplicationWillResignActive:(id)a3
{
  NSObject *v4;
  void *v5;
  BOOL v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  uint8_t v16[16];

  v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_1DB760000, v4, OS_LOG_TYPE_DEFAULT, "Received UIApplicationWillResignActiveNotification", v16, 2u);
  }

  -[CAMViewfinderViewController _writeUserPreferences](self, "_writeUserPreferences");
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v5, "preserveCaptureMode") & 1) != 0)
  {

  }
  else
  {
    v6 = -[CAMViewfinderViewController isEmulatingImagePicker](self, "isEmulatingImagePicker");

    if (!v6)
    {
      v7 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
      v8 = +[CAMUserPreferences defaultMode](CAMUserPreferences, "defaultMode");
      v9 = -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition");
      v10 = +[CAMUserPreferences defaultDevicePosition](CAMUserPreferences, "defaultDevicePosition");
      if (v7 != v8 || v9 != v10)
      {
        -[CAMViewfinderViewController _captureController](self, "_captureController");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "resetTimeoutDate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "cancelAutoResumeAfterDate:", v13);

        -[CAMViewfinderViewController _setAutoResumeCancelingWithoutBackgrounding:](self, "_setAutoResumeCancelingWithoutBackgrounding:", 1);
      }
    }
  }
  -[CAMViewfinderViewController _updatePhysicalButtonCapturedEnabledResigningActiveOrDisappearing:](self, "_updatePhysicalButtonCapturedEnabledResigningActiveOrDisappearing:", 1);
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "isImageAnalysisSupported");

  if (v15)
    -[CAMViewfinderViewController _resetMachineReadableMetadataAndProcessing](self, "_resetMachineReadableMetadataAndProcessing");
}

- (void)_writeUserPreferences
{
  BOOL v3;
  int64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  int64_t v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  char v20;
  BOOL v21;
  BOOL v22;
  void *v23;
  CAMConflictingControlConfiguration *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  int64_t v32;
  int64_t v33;
  void *v34;
  int64_t v35;
  int64_t v36;
  unsigned int v37;
  char v38;
  CAMCaptureConfiguration *v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  int64_t v43;
  int64_t v44;
  int64_t v45;
  int64_t v46;
  int64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  CAMCaptureConfiguration *v51;
  int64_t v52;
  void *v53;
  void *v54;

  v3 = -[CAMViewfinderViewController isEmulatingImagePicker](self, "isEmulatingImagePicker");
  v4 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
  if (!v3 && v4 != 2)
  {
    +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "mode");
    v7 = objc_msgSend(v5, "device");
    v53 = v5;
    v49 = objc_msgSend(v5, "videoConfiguration");
    v48 = -[CAMViewfinderViewController _resolvedFlashMode](self, "_resolvedFlashMode");
    v47 = -[CAMViewfinderViewController _desiredTorchMode](self, "_desiredTorchMode");
    v46 = -[CAMViewfinderViewController _resolvedHDRMode](self, "_resolvedHDRMode");
    v52 = -[CAMViewfinderViewController _desiredLivePhotoMode](self, "_desiredLivePhotoMode");
    v45 = -[CAMViewfinderViewController _resolvedTimerDuration](self, "_resolvedTimerDuration");
    v44 = -[CAMViewfinderViewController _photoModeEffectFilterType](self, "_photoModeEffectFilterType");
    v43 = -[CAMViewfinderViewController _squareModeEffectFilterType](self, "_squareModeEffectFilterType");
    v42 = -[CAMViewfinderViewController _portraitModeEffectFilterType](self, "_portraitModeEffectFilterType");
    -[CAMViewfinderViewController _callStatusMonitor](self, "_callStatusMonitor");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "isCallActive");

    v50 = v7;
    v41 = objc_msgSend(v54, "audioConfigurationForMode:device:emulationMode:duringCall:", v6, v7, -[CAMViewfinderViewController emulationMode](self, "emulationMode"), v9);
    v40 = v6;
    if (objc_msgSend(v54, "shouldMirrorFrontCameraCaptures"))
    {
      +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v38 = objc_msgSend(v10, "mirroredFrontCapturesSupportedForMode:", v6);

    }
    else
    {
      v38 = 0;
    }
    v39 = [CAMCaptureConfiguration alloc];
    v37 = objc_msgSend(v54, "shouldMixAudioWithOthers");
    v36 = -[CAMViewfinderViewController photoModeAspectRatioCrop](self, "photoModeAspectRatioCrop");
    v35 = -[CAMViewfinderViewController _portraitModeLightingEffectType](self, "_portraitModeLightingEffectType");
    -[CAMViewfinderViewController _portraitModeApertureValue](self, "_portraitModeApertureValue");
    v12 = v11;
    -[CAMViewfinderViewController _portraitModeIntensityValue](self, "_portraitModeIntensityValue");
    v14 = v13;
    -[CAMViewfinderViewController _exposureBiasesByMode](self, "_exposureBiasesByMode");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = -[CAMViewfinderViewController _resolvedMacroMode](self, "_resolvedMacroMode");
    v32 = -[CAMViewfinderViewController _resolvedPhotoResolution](self, "_resolvedPhotoResolution");
    v31 = -[CAMViewfinderViewController _resolvedRAWMode](self, "_resolvedRAWMode");
    v15 = -[CAMViewfinderViewController _desiredProResVideoMode](self, "_desiredProResVideoMode");
    -[CAMViewfinderViewController _semanticStyles](self, "_semanticStyles");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = -[CAMViewfinderViewController _selectedSemanticStyleIndex](self, "_selectedSemanticStyleIndex");
    v18 = -[CAMViewfinderViewController _smartStyleSystemStyleIndex](self, "_smartStyleSystemStyleIndex");
    v19 = -[CAMViewfinderViewController _desiredVideoStabilizationMode](self, "_desiredVideoStabilizationMode");
    v20 = objc_msgSend(v54, "isZoomPIPEnabled");
    v21 = -[CAMViewfinderViewController _isSpatialVideoEnabled](self, "_isSpatialVideoEnabled");
    v22 = -[CAMViewfinderViewController _depthEffectEnabledFromSuggestion](self, "_depthEffectEnabledFromSuggestion");
    -[CAMViewfinderViewController _librarySelectionController](self, "_librarySelectionController");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    BYTE2(v30) = v22;
    BYTE1(v30) = v21;
    LOBYTE(v30) = v20;
    LOBYTE(v29) = v38;
    v51 = -[CAMCaptureConfiguration initWithCaptureMode:captureDevice:videoConfiguration:audioConfiguration:mixAudioWithOthers:flashMode:torchMode:HDRMode:irisMode:timerDuration:photoModeAspectRatioCrop:photoModeEffectFilterType:squareModeEffectFilterType:portraitModeEffectFilterType:portraitModeLightingEffectType:portraitModeApertureValue:portraitModeIntensityValue:mirrorFrontCameraCaptures:exposureBiasesByMode:macroMode:photoResolution:rawMode:proResVideoMode:semanticStyles:selectedSemanticStyleIndex:smartStyleSystemStyleIndex:videoStabilizationMode:zoomPIPEnabled:spatialVideoEnabled:optionalDepthEffectEnabled:sharedLibraryMode:](v39, "initWithCaptureMode:captureDevice:videoConfiguration:audioConfiguration:mixAudioWithOthers:flashMode:torchMode:HDRMode:irisMode:timerDuration:photoModeAspectRatioCrop:photoModeEffectFilterType:squareModeEffectFilterType:portraitModeEffectFilterType:portraitModeLightingEffectType:portraitModeApertureValue:portraitModeIntensityValue:mirrorFrontCameraCaptures:exposureBiasesByMode:macroMode:photoResolution:rawMode:proResVideoMode:semanticStyles:selectedSemanticStyleIndex:smartStyleSystemStyleIndex:videoStabilizationMode:zoomPIPEnabled:spatialVideoEnabled:optionalDepthEffectEnabled:sharedLibraryMode:", v40, v50, v49, v41, v37, v48, v12, v14, v47, v46, v52, v45,
            v36,
            v44,
            v43,
            v42,
            v35,
            v29,
            v34,
            v33,
            v32,
            v31,
            v15,
            v16,
            v17,
            v18,
            v19,
            v30,
            objc_msgSend(v23, "sharedLibraryMode"));

    v24 = -[CAMConflictingControlConfiguration initWithDesiredFlashMode:desiredHDRMode:flashAndHDRConflictingControl:desiredLivePhotoMode:desiredRAWMode:desiredPhotoResolution:photoFormatConflicts:desiredLowLightControlMode:lowLightConflicts:desiredMacroMode:]([CAMConflictingControlConfiguration alloc], "initWithDesiredFlashMode:desiredHDRMode:flashAndHDRConflictingControl:desiredLivePhotoMode:desiredRAWMode:desiredPhotoResolution:photoFormatConflicts:desiredLowLightControlMode:lowLightConflicts:desiredMacroMode:", -[CAMViewfinderViewController _desiredFlashMode](self, "_desiredFlashMode"), -[CAMViewfinderViewController _desiredHDRMode](self, "_desiredHDRMode"), -[CAMViewfinderViewController _flashAndHDRConflictingControl](self, "_flashAndHDRConflictingControl"), v52, -[CAMViewfinderViewController _desiredRAWMode](self, "_desiredRAWMode"), -[CAMViewfinderViewController _desiredPhotoResolution](self, "_desiredPhotoResolution"), -[CAMViewfinderViewController _photoFormatConflicts](self, "_photoFormatConflicts"), -[CAMViewfinderViewController _desiredLowLightControlMode](self, "_desiredLowLightControlMode"), -[CAMViewfinderViewController _lowLightConflicts](self, "_lowLightConflicts"), -[CAMViewfinderViewController _desiredMacroMode](self, "_desiredMacroMode"));
    objc_msgSend(v54, "setCaptureConfiguration:", v51);
    objc_msgSend(v54, "setConflictingControlConfiguration:", v24);
    -[CAMViewfinderViewController _openHalfPressSpotlightControls](self, "_openHalfPressSpotlightControls");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    if (v25)
      objc_msgSend(v54, "setOpenHalfPressSpotlightControls:", v25);
    -[CAMViewfinderViewController _controlDrawer](self, "_controlDrawer");
    v26 = (void *)objc_claimAutoreleasedReturnValue();

    if (v26)
    {
      -[CAMViewfinderViewController _preferredControlToOpenInDrawerForMode](self, "_preferredControlToOpenInDrawerForMode");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = (void *)objc_msgSend(v27, "copy");
      objc_msgSend(v54, "setPreferredDrawerControlByMode:", v28);

    }
    objc_msgSend(v54, "writePreferences");

  }
}

- (int64_t)_desiredLivePhotoMode
{
  return self->__desiredLivePhotoMode;
}

- (int64_t)_squareModeEffectFilterType
{
  return self->__squareModeEffectFilterType;
}

- (int64_t)_portraitModeEffectFilterType
{
  return self->__portraitModeEffectFilterType;
}

- (int64_t)_portraitModeLightingEffectType
{
  return self->__portraitModeLightingEffectType;
}

- (void)closedViewfinderController:(id)a3 wantsViewfinderClosedForReason:(int64_t)a4
{
  id v6;
  void *v7;
  void *v8;
  id v9;
  _BOOL8 v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t);
  void *v21;
  id v22;
  id v23[2];
  id location;

  v6 = a3;
  -[CAMViewfinderViewController _viewfinderTransitionable](self, "_viewfinderTransitionable");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updateLevelMotionTracking](self, "_updateLevelMotionTracking");
  if (v7)
  {
    -[CAMViewfinderViewController _setClosingViewfinder:](self, "_setClosingViewfinder:", 1);
    -[CAMViewfinderViewController _updateEnabledControlsWithReason:](self, "_updateEnabledControlsWithReason:", CFSTR("Began closing viewfinder"));
    objc_msgSend(MEMORY[0x1E0DC3470], "sharedApplication");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v9 = v8;
      objc_msgSend(v9, "willCloseViewfinderForReason:", a4);
    }
    else
    {
      v9 = 0;
    }
    v10 = -[CAMViewfinderViewController _shouldAnimateViewfinderCloseForReason:](self, "_shouldAnimateViewfinderCloseForReason:", a4);
    objc_initWeak(&location, self);
    v18 = MEMORY[0x1E0C809B0];
    v19 = 3221225472;
    v20 = __89__CAMViewfinderViewController_closedViewfinderController_wantsViewfinderClosedForReason___block_invoke;
    v21 = &unk_1EA32A798;
    objc_copyWeak(v23, &location);
    v11 = v9;
    v22 = v11;
    v23[1] = (id)a4;
    v12 = _Block_copy(&v18);
    if ((unint64_t)a4 <= 0x16)
    {
      if (((1 << a4) & 0x5FCFFE) != 0)
      {
        -[CAMViewfinderViewController _transitionController](self, "_transitionController", v18, v19, v20, v21);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "closeWithBlur:animated:withCompletionHandler:", 1, v10, v12);
      }
      else if (((1 << a4) & 0x203000) != 0)
      {
        -[CAMViewfinderViewController _transitionController](self, "_transitionController", v18, v19, v20, v21);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "closeWithBlur:animated:withCompletionHandler:", 0, v10, v12);
      }
      else
      {
        -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration", v18, v19, v20, v21);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = objc_msgSend(v15, "device");

        if ((unint64_t)(v16 - 1) > 0xA)
          v17 = 0;
        else
          v17 = qword_1DB9A53B8[v16 - 1];
        -[CAMViewfinderViewController _transitionController](self, "_transitionController");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "closeAndRotateWithDirection:withCompletionHandler:", v17, v12);
      }

    }
    -[CAMViewfinderViewController _targetFilterScrubberView](self, "_targetFilterScrubberView", v18, v19, v20, v21);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (v14 && -[CAMViewfinderViewController _isShowingFilterScrubber](self, "_isShowingFilterScrubber"))
      objc_msgSend(v14, "setSuspended:", 1);
    -[CAMViewfinderViewController _updatePanoramaViewVisibilityForViewfinderTransition](self, "_updatePanoramaViewVisibilityForViewfinderTransition");

    objc_destroyWeak(v23);
    objc_destroyWeak(&location);

  }
  else
  {
    -[CAMViewfinderViewController _updateEnabledControlsWithReason:](self, "_updateEnabledControlsWithReason:", CFSTR("Began closing viewfinder"));
    -[CAMViewfinderViewController _updatePanoramaViewVisibilityForViewfinderTransition](self, "_updatePanoramaViewVisibilityForViewfinderTransition");
  }

}

- (void)_setClosingViewfinder:(BOOL)a3
{
  self->__closingViewfinder = a3;
}

- (BOOL)_shouldAnimateViewfinderCloseForReason:(int64_t)a3
{
  uint64_t v3;
  uint64_t v4;

  if ((unint64_t)(a3 - 12) < 2 || a3 == 21)
    return 0;
  if (a3 == 8)
    return !-[CAMViewfinderViewController _isShowingCameraRoll](self, "_isShowingCameraRoll", v3, v4);
  return 1;
}

- (void)_updatePanoramaViewVisibilityForViewfinderTransition
{
  void *v3;
  BOOL v4;
  void *v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  BOOL v10;

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = -[CAMViewfinderViewController _shouldHidePanoramaViewForGraphConfiguration:](self, "_shouldHidePanoramaViewForGraphConfiguration:", v3);
  -[CAMViewfinderViewController _panoramaViewController](self, "_panoramaViewController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x1E0DC3F10];
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __83__CAMViewfinderViewController__updatePanoramaViewVisibilityForViewfinderTransition__block_invoke;
  v8[3] = &unk_1EA328908;
  v9 = v5;
  v10 = v4;
  v7 = v5;
  objc_msgSend(v6, "animateWithDuration:animations:", v8, 0.25);

}

void __89__CAMViewfinderViewController_closedViewfinderController_wantsViewfinderClosedForReason___block_invoke(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_setClosingViewfinder:", 0);
  objc_msgSend(WeakRetained, "_updateEnabledControlsWithReason:", CFSTR("Finished closing viewfinder"));
  objc_msgSend(*(id *)(a1 + 32), "didCloseViewfinderForReason:", *(_QWORD *)(a1 + 48));

}

- (void)_handleApplicationDidEnterBackground:(id)a3
{
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  int v12;
  CAMAnalyticsSharedLibraryModeEvent *v13;
  void *v14;
  CAMAnalyticsSharedLibraryModeEvent *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint8_t v28[16];

  v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v28 = 0;
    _os_log_impl(&dword_1DB760000, v4, OS_LOG_TYPE_DEFAULT, "Received UIApplicationDidEnterBackgroundNotification", v28, 2u);
  }

  -[CAMViewfinderViewController _closedViewfinderController](self, "_closedViewfinderController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "addClosedViewfinderReason:", 7);
  -[CAMViewfinderViewController _setAutoResumeCancelingWithoutBackgrounding:](self, "_setAutoResumeCancelingWithoutBackgrounding:", 0);
  -[CAMViewfinderViewController _resetMachineReadableMetadataAndProcessing](self, "_resetMachineReadableMetadataAndProcessing");
  -[CAMViewfinderViewController _setImageAnalyzer:](self, "_setImageAnalyzer:", 0);
  -[CAMViewfinderViewController _analyticsSessionEvent](self, "_analyticsSessionEvent");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _visionAnalyticsSession](self, "_visionAnalyticsSession");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "countEventsFromAnalyticsVisionSession:", v7);

  -[CAMViewfinderViewController _visionAnalyticsSession](self, "_visionAnalyticsSession");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "publish");

  -[CAMViewfinderViewController _setVisionAnalyticsSession:](self, "_setVisionAnalyticsSession:", 0);
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "sharedLibraryAutoBehaviorEnabled");

  if (v10)
  {
    -[CAMViewfinderViewController _analyticsSessionEvent](self, "_analyticsSessionEvent");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "didCapture");

    if (v12)
    {
      v13 = [CAMAnalyticsSharedLibraryModeEvent alloc];
      -[CAMViewfinderViewController _librarySelectionController](self, "_librarySelectionController");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = -[CAMAnalyticsSharedLibraryModeEvent initWithLibrarySelectionController:](v13, "initWithLibrarySelectionController:", v14);

      -[CAMAnalyticsSharedLibraryModeEvent publish](v15, "publish");
    }
  }
  -[CAMViewfinderViewController _analyticsSessionEvent](self, "_analyticsSessionEvent");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _locationController](self, "_locationController");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "updateForLocationController:", v17);

  -[CAMViewfinderViewController _analyticsSessionEvent](self, "_analyticsSessionEvent");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "publish");

  -[CAMViewfinderViewController _setAnalyticsSessionEvent:](self, "_setAnalyticsSessionEvent:", 0);
  if (-[CAMViewfinderViewController _isCapturingFromTimer](self, "_isCapturingFromTimer"))
    -[CAMViewfinderViewController _stopCountdownForCaptureTimer](self, "_stopCountdownForCaptureTimer");
  -[CAMViewfinderViewController _setResolvedLowLightMode:](self, "_setResolvedLowLightMode:", 0);
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "changeToLowLightMode:", 0);

  -[CAMViewfinderViewController _collapseExpandedButtonsAnimated:](self, "_collapseExpandedButtonsAnimated:", 0);
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "setControlDrawerExpanded:forReason:animated:", 0, 6, 0);

  -[CAMViewfinderViewController _hideUtilityBarAnimated:](self, "_hideUtilityBarAnimated:", 0);
  if (+[CAMZoomSlider shouldFadeOutZoomSliderForLayoutStyle:](CAMZoomSlider, "shouldFadeOutZoomSliderForLayoutStyle:", -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle")))
  {
    -[CAMZoomSlider makeInvisibleAnimated:](self->__zoomSlider, "makeInvisibleAnimated:", 0);
  }
  -[CAMZoomControl setShouldShowZoomDial:animationDuration:](self->__zoomControl, "setShouldShowZoomDial:animationDuration:", 0, 0);
  -[CAMViewfinderViewController _cameraRollController](self, "_cameraRollController");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "dismissCameraRollViewControllerForced:animated:", 1, 0);
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v22, "hostProcess") | 4) == 4 && objc_msgSend(v22, "isImageAnalysisSupported"))
    -[CAMViewfinderViewController dismissViewControllerAnimated:completion:](self, "dismissViewControllerAnimated:completion:", 0, 0);
  if (v10)
  {
    -[CAMViewfinderViewController _librarySelectionController](self, "_librarySelectionController");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "stopAndClearAcquiredSignals");

  }
  -[CAMViewfinderViewController _dismissDiskSpaceAlertViewAnimated:](self, "_dismissDiskSpaceAlertViewAnimated:", 0);
  -[CAMViewfinderViewController _updateLevelMotionTracking](self, "_updateLevelMotionTracking");
  -[CAMViewfinderViewController _ensureSensitiveContentHidden](self, "_ensureSensitiveContentHidden");
  -[CAMViewfinderViewController _transitionController](self, "_transitionController");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "handleApplicationDidEnterBackground");

  -[CAMViewfinderViewController _viewfinderTransitionable](self, "_viewfinderTransitionable");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "prepareForResumingUsingCrossfade");

  -[CAMViewfinderViewController _updateExternalStorageMonitoringState:](self, "_updateExternalStorageMonitoringState:", 2);
  -[CAMViewfinderViewController _storageController](self, "_storageController");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "purgeableStorageContainer");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "cancelPurge");

}

- (void)_hideUtilityBarAnimated:(BOOL)a3
{
  _BOOL8 v3;

  v3 = a3;
  -[CAMViewfinderViewController _setWantsFilterScrubberVisible:animated:](self, "_setWantsFilterScrubberVisible:animated:", 0, a3);
  -[CAMViewfinderViewController _setShowingPortraitApertureSlider:animated:](self, "_setShowingPortraitApertureSlider:animated:", 0, v3);
  -[CAMViewfinderViewController _setShowingPortraitIntensitySlider:animated:](self, "_setShowingPortraitIntensitySlider:animated:", 0, v3);
}

- (void)_setWantsFilterScrubberVisible:(BOOL)a3 animated:(BOOL)a4
{
  _BOOL8 v4;
  _BOOL8 v5;
  unint64_t v7;
  id v8;

  if (self->__wantsFilterScrubberVisible != a3)
  {
    v4 = a4;
    v5 = a3;
    self->__wantsFilterScrubberVisible = a3;
    -[CAMViewfinderViewController _collapseExpandedButtonsAnimated:](self, "_collapseExpandedButtonsAnimated:", a4);
    -[CAMViewfinderViewController _setShouldShowFilterScrubberAfterNextRender:](self, "_setShouldShowFilterScrubberAfterNextRender:", v5 & v4);
    if (-[CAMViewfinderViewController _shouldShowFilterScrubberAfterNextRender](self, "_shouldShowFilterScrubberAfterNextRender"))
    {
      -[CAMViewfinderViewController _createFilterScrubberViewIfNecessary](self, "_createFilterScrubberViewIfNecessary");
    }
    else
    {
      -[CAMViewfinderViewController _setShowingFilterScrubber:animated:](self, "_setShowingFilterScrubber:animated:", v5, v4);
    }
    v7 = -[CAMViewfinderViewController _previewConfigurationForMode:devicePosition:videoThumbnailOutputEnabled:](self, "_previewConfigurationForMode:devicePosition:videoThumbnailOutputEnabled:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"), v5);
    -[CAMViewfinderViewController _captureController](self, "_captureController");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "changeToPreviewConfiguration:", v7);
    -[CAMViewfinderViewController _updateEnabledControlsWithReason:](self, "_updateEnabledControlsWithReason:", CFSTR("Filter scrubber desired visibility changed"));

  }
}

- (void)_ensureSensitiveContentHidden
{
  void *v3;
  id v4;

  -[CAMViewfinderViewController _imageWell](self, "_imageWell");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setThumbnailImage:uuid:animated:", 0, 0, 0);

  -[CAMViewfinderViewController _viewfinderTransitionable](self, "_viewfinderTransitionable");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "removeInflightBlurAnimations");

}

- (void)captureControllerWasInterrupted:(id)a3
{
  NSObject *v4;
  void *v5;
  void *v6;
  int64_t v7;
  uint8_t v8[16];

  v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_1DB760000, v4, OS_LOG_TYPE_DEFAULT, "captureControllerWasInterrupted:", v8, 2u);
  }

  -[CAMViewfinderViewController _closedViewfinderController](self, "_closedViewfinderController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "addClosedViewfinderReason:", 4);
  if (-[CAMViewfinderViewController _isCapturingFromTimer](self, "_isCapturingFromTimer"))
    -[CAMViewfinderViewController _stopCountdownForCaptureTimer](self, "_stopCountdownForCaptureTimer");
  -[CAMViewfinderViewController _handleGeneralCaptureControllerSuspension](self, "_handleGeneralCaptureControllerSuspension");
  -[CAMViewfinderViewController _updateModeDisabledForCurrentStateAnimated:](self, "_updateModeDisabledForCurrentStateAnimated:", 1);
  -[CAMViewfinderViewController _updateEnabledControlsWithReason:](self, "_updateEnabledControlsWithReason:", CFSTR("Capture Controller Interrupted"));
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v6, "isCTMSupported"))
  {
    v7 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");

    if (!v7)
      -[CAMViewfinderViewController _updateUIForCapturing:animated:](self, "_updateUIForCapturing:animated:", 0, 0);
  }
  else
  {

  }
}

- (void)captureControllerDidStopRunning:(id)a3
{
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  uint8_t v8[16];

  v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_1DB760000, v4, OS_LOG_TYPE_DEFAULT, "captureControllerDidStopRunning:", v8, 2u);
  }

  -[CAMViewfinderViewController _closedViewfinderController](self, "_closedViewfinderController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "addClosedViewfinderReason:", 2);
  objc_msgSend(v5, "cancelDelayedRemovalOfReason:", 3);
  objc_msgSend(v5, "addClosedViewfinderReason:", 3);
  -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "notifyCaptureSessionDidStopRunning");
  -[CAMViewfinderViewController _handleGeneralCaptureControllerSuspension](self, "_handleGeneralCaptureControllerSuspension");
  -[CAMViewfinderViewController _cameraRollController](self, "_cameraRollController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "beginAllowingStagedMediaLoading");

}

- (void)prepareForDefaultImageSnapshotForScreen:(id)a3
{
  NSObject *v4;
  uint8_t v5[16];

  v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1DB760000, v4, OS_LOG_TYPE_DEFAULT, "prepareForDefaultImageSnapshotForScreen:", v5, 2u);
  }

  -[CAMViewfinderViewController _ensureSensitiveContentHidden](self, "_ensureSensitiveContentHidden");
  -[CAMViewfinderViewController _forceHideBadgesAnimated:](self, "_forceHideBadgesAnimated:", 0);
  -[CAMViewfinderViewController _hideUtilityBarAnimated:](self, "_hideUtilityBarAnimated:", 0);
}

- (void)_forceHideBadgesAnimated:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  void *v6;
  void *v7;
  double v8;
  _QWORD v9[5];

  v3 = a3;
  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setVisibleTopBadges:animated:", MEMORY[0x1E0C9AA60], v3);
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "badgeTray");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setVisibleBadges:animated:", 0, v3);

  v8 = 0.25;
  if (!v3)
    v8 = 0.0;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __56__CAMViewfinderViewController__forceHideBadgesAnimated___block_invoke;
  v9[3] = &unk_1EA328868;
  v9[4] = self;
  +[CAMView animateIfNeededWithDuration:animations:](CAMView, "animateIfNeededWithDuration:animations:", v9, v8);

}

- (void)cameraRollController:(id)a3 didChangeImageWellImage:(id)a4 withUUID:(id)a5 animated:(BOOL)a6
{
  _BOOL8 v6;
  id v9;
  id v10;

  v6 = a6;
  v10 = a4;
  v9 = a5;
  if (!-[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled")
    || !-[CAMViewfinderViewController isRecording](self, "isRecording"))
  {
    -[CAMViewfinderViewController _presentImageWellImage:uuid:animated:](self, "_presentImageWellImage:uuid:animated:", v10, v9, v6);
  }

}

- (CAMViewfinderViewController)initWithCaptureController:(id)a3 captureConfiguration:(id)a4 conflictingControlConfiguration:(id)a5 locationController:(id)a6 motionController:(id)a7 timelapseController:(id)a8 keepAliveController:(id)a9 remoteShutterController:(id)a10 powerController:(id)a11 cameraRollController:(id)a12 librarySelectionController:(id)a13 callStatusMonitor:(id)a14 storageController:(id)a15 usingEmulationMode:(int64_t)a16 initialLayoutStyle:(int64_t)a17 options:(int64_t)a18
{
  id v23;
  id v24;
  CAMViewfinderViewController *v25;
  CAMViewfinderViewController *v26;
  void *v27;
  CAMPreviewViewController *v28;
  CAMPreviewViewController *previewViewController;
  CAMViewfinderTransitionController *v30;
  CAMViewfinderTransitionController *transitionController;
  CAMTorchPatternController *v32;
  CAMTorchPatternController *torchPatternController;
  CAMIdleController *v34;
  CAMIdleController *idleController;
  CAMClosedViewfinderController *v36;
  CAMClosedViewfinderController *closedViewfinderController;
  CAMDisabledPreviewController *v38;
  CAMDisabledPreviewController *disabledPreviewController;
  NSMutableDictionary *v40;
  NSMutableDictionary *preferredControlToOpenInDrawerForMode;
  uint64_t v42;
  CAMCaptureGraphConfiguration *configuredGraphConfiguration;
  void *v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  NSSet *availableCaptureModes;
  UIView *customOverlayView;
  uint64_t v50;
  __int128 v51;
  CAMMachineReadableCodeLoggingController *v52;
  CAMMachineReadableCodeLoggingController *machineReadableCodeLoggingController;
  CAMProminentObjectManager *v54;
  CAMProminentObjectManager *prominentObjectManager;
  CAMFeedbackController *v56;
  CAMFeedbackController *feedbackController;
  NSMutableDictionary *v58;
  NSMutableDictionary *descriptionOverlayViewByMode;
  CAMTimerCache *v60;
  CAMTimerCache *timerCache;
  CAMExternalStorageMonitor *v62;
  CAMExternalStorageMonitor *storageMonitor;
  void *v64;
  CAMPreventConnectionHandoverAssertionController *v65;
  CAMPreventConnectionHandoverAssertionController *preventConnectionHandoverAssertionController;
  CAMViewfinderViewController *v67;
  id v70;
  id v71;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  objc_super v83;

  v71 = a3;
  v23 = a4;
  v24 = a5;
  v80 = a6;
  v82 = a7;
  v70 = a8;
  v81 = a8;
  v79 = a9;
  v78 = a10;
  v77 = a11;
  v76 = a12;
  v75 = a13;
  v74 = a14;
  v73 = a15;
  v83.receiver = self;
  v83.super_class = (Class)CAMViewfinderViewController;
  v25 = -[CAMViewfinderViewController initWithNibName:bundle:](&v83, sel_initWithNibName_bundle_, 0, 0);
  v26 = v25;
  if (v25)
  {
    -[CAMViewfinderViewController _updateDuetSystemConstraintsIfNecessary](v25, "_updateDuetSystemConstraintsIfNecessary");
    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v26->__layoutStyle = a17;
    v26->__useCreativeCameraControls = a18 & 1;
    v26->__currentlyPressedButton = -1;
    objc_storeStrong((id *)&v26->__captureController, a3);
    objc_storeStrong((id *)&v26->__locationController, a6);
    objc_storeStrong((id *)&v26->__motionController, a7);
    objc_storeStrong((id *)&v26->__timelapseController, v70);
    objc_storeStrong((id *)&v26->__keepAliveController, a9);
    objc_storeStrong((id *)&v26->__remoteShutterController, a10);
    objc_storeStrong((id *)&v26->__powerController, a11);
    objc_storeStrong((id *)&v26->__cameraRollController, a12);
    objc_storeStrong((id *)&v26->__callStatusMonitor, a14);
    objc_storeStrong((id *)&v26->__storageController, a15);
    -[CAMStorageController setDelegate:](v26->__storageController, "setDelegate:", v26);
    v28 = -[CAMPreviewViewController initWithCaptureController:motionController:timelapseController:]([CAMPreviewViewController alloc], "initWithCaptureController:motionController:timelapseController:", v71, v82, v81);
    previewViewController = v26->__previewViewController;
    v26->__previewViewController = v28;

    -[CAMPreviewViewController setDelegate:](v26->__previewViewController, "setDelegate:", v26);
    -[CAMPreviewViewController setLayoutStyle:](v26->__previewViewController, "setLayoutStyle:", a17);
    -[CAMViewfinderViewController addChildViewController:](v26, "addChildViewController:", v26->__previewViewController);
    v30 = objc_alloc_init(CAMViewfinderTransitionController);
    transitionController = v26->__transitionController;
    v26->__transitionController = v30;

    v32 = -[CAMTorchPatternController initWithCaptureController:]([CAMTorchPatternController alloc], "initWithCaptureController:", v71);
    torchPatternController = v26->__torchPatternController;
    v26->__torchPatternController = v32;

    -[CAMCameraRollController setImageWellDelegate:](v26->__cameraRollController, "setImageWellDelegate:", v26);
    -[CAMCameraRollController setSessionDelegate:](v26->__cameraRollController, "setSessionDelegate:", v26);
    -[CAMCameraRollController setPresentationDelegate:](v26->__cameraRollController, "setPresentationDelegate:", v26);
    v34 = objc_alloc_init(CAMIdleController);
    idleController = v26->__idleController;
    v26->__idleController = v34;

    v36 = objc_alloc_init(CAMClosedViewfinderController);
    closedViewfinderController = v26->__closedViewfinderController;
    v26->__closedViewfinderController = v36;

    -[CAMClosedViewfinderController setDelegate:](v26->__closedViewfinderController, "setDelegate:", v26);
    v38 = objc_alloc_init(CAMDisabledPreviewController);
    disabledPreviewController = v26->__disabledPreviewController;
    v26->__disabledPreviewController = v38;

    -[CAMDisabledPreviewController setDelegate:](v26->__disabledPreviewController, "setDelegate:", v26);
    v40 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
    preferredControlToOpenInDrawerForMode = v26->__preferredControlToOpenInDrawerForMode;
    v26->__preferredControlToOpenInDrawerForMode = v40;

    -[CAMViewfinderViewController _updatePropertiesForCaptureConfiguration:conflictingControlConfiguration:](v26, "_updatePropertiesForCaptureConfiguration:conflictingControlConfiguration:", v23);
    +[CAMCaptureConfiguration captureGraphConfigurationUsingConfiguration:outputToExternalStorage:](CAMCaptureConfiguration, "captureGraphConfigurationUsingConfiguration:outputToExternalStorage:", v23, -[CAMViewfinderViewController _externalStorageOutputEnabled](v26, "_externalStorageOutputEnabled"));
    v42 = objc_claimAutoreleasedReturnValue();
    configuredGraphConfiguration = v26->__configuredGraphConfiguration;
    v26->__configuredGraphConfiguration = (CAMCaptureGraphConfiguration *)v42;

    v26->__lastConfigurationRequestID = -1;
    v26->__stereoCaptureStatus = 1;
    objc_msgSend(v71, "setFacesDelegate:", v26);
    objc_msgSend(v71, "setMachineReadableCodeDelegate:", v26);
    objc_msgSend(v71, "setHistogramDelegate:", v26);
    objc_msgSend(v71, "setTextRegionResultDelegate:", v26);
    objc_msgSend(v71, "setDocumentSceneResultDelegate:", v26);
    objc_msgSend(v71, "setConfigurationDelegate:", v26);
    objc_msgSend(v71, "setSuggestionDelegate:", v26);
    objc_msgSend(v71, "setAvailabilityDelegate:", v26);
    objc_msgSend(v71, "setBurstDelegate:", v26);
    objc_msgSend(v71, "setRecoveryDelegate:", v26);
    objc_msgSend(v71, "setInterruptionDelegate:", v26);
    objc_msgSend(v71, "setRunningDelegate:", v26);
    objc_msgSend(v71, "setZoomDelegate:", v26);
    objc_msgSend(v71, "setControlsDelegate:", v26);
    objc_msgSend(v71, "setStillImageCapturingVideoDelegate:", v26);
    objc_msgSend(v71, "setPreviewLayerOverCaptureStatusDelegate:", v26);
    objc_msgSend(v71, "setSystemPressureStateDelegate:", v26);
    objc_msgSend(v71, "setStereoCaptureStatusDelegate:", v26);
    v26->__shallowDepthOfFieldStatus = 0;
    objc_msgSend(v71, "setShallowDepthOfFieldStatusDelegate:", v26);
    if (objc_msgSend(v27, "librarySelectionSupported"))
    {
      objc_storeStrong((id *)&v26->__librarySelectionController, a13);
      -[CAMLibrarySelectionController setDelegate:](v26->__librarySelectionController, "setDelegate:", v26);
    }
    +[CAMPriorityNotificationCenter defaultCenter](CAMPriorityNotificationCenter, "defaultCenter");
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v44, "addObserver:selector:name:object:", v26, sel__previewDidStartRunning_, *MEMORY[0x1E0C8A1D8], 0);
    objc_msgSend(v44, "addObserver:selector:name:object:", v26, sel__captureOrientationChanged_, CFSTR("CAMMotionControllerCaptureOrientationChangedNotification"), 0);
    objc_msgSend(v44, "addObserver:selector:name:object:", v26, sel__deviceOrientationChanged_, CFSTR("CAMMotionControllerCaptureDeviceOrientationChangedNotification"), 0);
    objc_msgSend(v44, "addObserver:selector:name:object:", v26, sel__handleApplicationDidBecomeActive_, *MEMORY[0x1E0DC4750], 0);
    objc_msgSend(v44, "addObserver:selector:name:object:", v26, sel__handleApplicationWillResignActive_, *MEMORY[0x1E0DC4868], 0);
    objc_msgSend(v44, "addObserver:selector:name:object:", v26, sel__handleApplicationWillAddDeactivationReason_, *MEMORY[0x1E0DC5760], 0);
    objc_msgSend(v44, "addObserver:selector:name:object:", v26, sel__handleApplicationDidRemoveDeactivationReason_, *MEMORY[0x1E0DC5718], 0);
    objc_msgSend(v44, "addObserver:selector:name:object:", v26, sel__handleApplicationWillEnterForeground_, *MEMORY[0x1E0DC4860], 0);
    objc_msgSend(v44, "addObserver:selector:name:object:", v26, sel__handleApplicationDidEnterBackground_, *MEMORY[0x1E0DC4768], 0);
    objc_msgSend(v44, "addObserver:selector:name:object:", v26, sel__handleSceneDidEnterBackground_, *MEMORY[0x1E0DC5318], 0);
    objc_msgSend(v44, "addObserver:selector:name:object:", v26, sel__handleContentSizeCategoryDidChange_, *MEMORY[0x1E0DC48E8], 0);
    objc_msgSend(v44, "addObserver:selector:name:object:", v26, sel__handleCallStatusMonitorDidChangeCallActive_, CFSTR("CAMCallStatusMonitorDidChangeCallActiveNotification"), 0);
    objc_msgSend(v44, "addObserver:selector:name:object:", v26, sel__handleTimelapseLowDiskSpaceNotification_, CFSTR("CAMTimelapseLowDiskSpaceNotification"), 0);
    v26->__overCapturePreviewStatus = 0;
    v26->_emulationMode = a16;
    v45 = 3;
    if (!a16)
      v45 = 0;
    v26->_persistenceBehavior = v45;
    v46 = 1;
    if (!a16)
    {
      if (objc_msgSend(v27, "hostProcess"))
        v46 = objc_msgSend(v27, "hostProcess") != 4;
      else
        v46 = 0;
    }
    v26->_disablingMultipleCaptureFeatures = v46;
    v26->__internalAutorotationStyle = -[CAMViewfinderViewController _autorotationStyleForLayoutStyle:](v26, "_autorotationStyleForLayoutStyle:", v26->__layoutStyle);
    v26->_automaticallyAdjustsAutorotationStyle = a16 == 0;
    v26->_automaticallyAdjustsApplicationIdleTimer = 1;
    -[CAMViewfinderViewController _supportedCaptureModes](v26, "_supportedCaptureModes");
    v47 = objc_claimAutoreleasedReturnValue();
    availableCaptureModes = v26->_availableCaptureModes;
    v26->_availableCaptureModes = (NSSet *)v47;

    v26->_showingStandardControls = 1;
    v26->_maximumVideoRecordingDuration = 0.0;
    customOverlayView = v26->_customOverlayView;
    v26->_customOverlayView = 0;

    v50 = MEMORY[0x1E0C9BAA8];
    v51 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
    *(_OWORD *)&v26->_customPreviewViewTransform.a = *MEMORY[0x1E0C9BAA8];
    *(_OWORD *)&v26->_customPreviewViewTransform.c = v51;
    *(_OWORD *)&v26->_customPreviewViewTransform.tx = *(_OWORD *)(v50 + 32);
    v52 = objc_alloc_init(CAMMachineReadableCodeLoggingController);
    machineReadableCodeLoggingController = v26->__machineReadableCodeLoggingController;
    v26->__machineReadableCodeLoggingController = v52;

    if (objc_msgSend(v27, "isImageAnalysisSupported"))
    {
      v54 = objc_alloc_init(CAMProminentObjectManager);
      prominentObjectManager = v26->__prominentObjectManager;
      v26->__prominentObjectManager = v54;

      -[CAMProminentObjectManager setDelegate:](v26->__prominentObjectManager, "setDelegate:", v26);
    }
    if (objc_msgSend(v27, "allowHaptics"))
    {
      v56 = objc_alloc_init(CAMFeedbackController);
      feedbackController = v26->__feedbackController;
      v26->__feedbackController = v56;

    }
    v58 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
    descriptionOverlayViewByMode = v26->__descriptionOverlayViewByMode;
    v26->__descriptionOverlayViewByMode = v58;

    v60 = objc_alloc_init(CAMTimerCache);
    timerCache = v26->__timerCache;
    v26->__timerCache = v60;

    -[CAMTimerCache setDelegate:](v26->__timerCache, "setDelegate:", v26);
    -[CAMViewfinderViewController setOverrideUserInterfaceStyle:](v26, "setOverrideUserInterfaceStyle:", 2);
    -[CAMViewfinderViewController _createAnalyticsSessionEventIfNeeded](v26, "_createAnalyticsSessionEventIfNeeded");
    if (objc_msgSend(v27, "externalStorageSupported"))
    {
      v62 = objc_alloc_init(CAMExternalStorageMonitor);
      storageMonitor = v26->__storageMonitor;
      v26->__storageMonitor = v62;

      -[CAMViewfinderViewController _storageMonitor](v26, "_storageMonitor");
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v64, "setDelegate:", v26);

    }
    if (objc_msgSend(v27, "shouldPreventConnectionHandover"))
    {
      v65 = objc_alloc_init(CAMPreventConnectionHandoverAssertionController);
      preventConnectionHandoverAssertionController = v26->__preventConnectionHandoverAssertionController;
      v26->__preventConnectionHandoverAssertionController = v65;

    }
    v67 = v26;

  }
  return v26;
}

- (void)dealloc
{
  void *v3;
  void *v4;
  objc_super v5;

  +[CAMPriorityNotificationCenter defaultCenter](CAMPriorityNotificationCenter, "defaultCenter");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "removeObserver:", self);

  -[CAMViewfinderViewController _dismissDiskSpaceAlertViewAnimated:](self, "_dismissDiskSpaceAlertViewAnimated:", 0);
  -[CAMViewfinderViewController _dismissFlashOrTorchUnavailableAlertViewAnimated:](self, "_dismissFlashOrTorchUnavailableAlertViewAnimated:", 0);
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "invalidateController");

  v5.receiver = self;
  v5.super_class = (Class)CAMViewfinderViewController;
  -[CAMViewfinderViewController dealloc](&v5, sel_dealloc);
}

- (int64_t)_currentDevicePosition
{
  void *v2;
  int64_t v3;

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "devicePosition");

  return v3;
}

- (int64_t)_currentVideoConfiguration
{
  void *v2;
  int64_t v3;

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "videoConfiguration");

  return v3;
}

- (int64_t)_configuredMode
{
  void *v2;
  int64_t v3;

  -[CAMViewfinderViewController _configuredGraphConfiguration](self, "_configuredGraphConfiguration");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "mode");

  return v3;
}

- (int64_t)_configuredDevice
{
  void *v2;
  int64_t v3;

  -[CAMViewfinderViewController _configuredGraphConfiguration](self, "_configuredGraphConfiguration");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "device");

  return v3;
}

- (BOOL)_capturingFromPhysicalButton
{
  return -[CAMViewfinderViewController _currentlyPressedButton](self, "_currentlyPressedButton") != -1;
}

- (void)applyCaptureConfiguration:(id)a3 conflictingControlConfiguration:(id)a4
{
  -[CAMViewfinderViewController _updatePropertiesForCaptureConfiguration:conflictingControlConfiguration:](self, "_updatePropertiesForCaptureConfiguration:conflictingControlConfiguration:", a3, a4);
  -[CAMViewfinderViewController _updateForCurrentConfiguration](self, "_updateForCurrentConfiguration");
}

- (void)_reconfigureCaptureGraphWithCurrentMode
{
  -[CAMViewfinderViewController changeToMode:device:](self, "changeToMode:device:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevice](self, "_currentDevice"));
}

- (void)_updateLayoutStyle
{
  void *v3;
  uint64_t v4;

  -[CAMViewfinderViewController view](self, "view");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = CAMLayoutStyleForView(v3);

  -[CAMViewfinderViewController _setLayoutStyle:](self, "_setLayoutStyle:", v4);
}

- (CAMViewfinderTransitionable)_viewfinderTransitionable
{
  void *v3;
  void *v4;
  id v5;
  void *v6;

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    v5 = v3;
  }
  else
  {
    -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
    v5 = (id)objc_claimAutoreleasedReturnValue();
  }
  v6 = v5;

  return (CAMViewfinderTransitionable *)v6;
}

- (CAMFullscreenViewfinder)_fullscreenViewfinder
{
  void *v3;
  int v4;
  void *v5;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isCTMSupported");

  if (v4)
  {
    -[CAMViewfinderViewController view](self, "view");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = 0;
  }
  return (CAMFullscreenViewfinder *)v5;
}

- (CAMControlDrawer)_controlDrawer
{
  void *v2;
  void *v3;

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "controlDrawer");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (CAMControlDrawer *)v3;
}

- (BOOL)_canShowWhileLocked
{
  return 1;
}

- (void)viewWillDisappear:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  objc_super v14;

  v3 = a3;
  v14.receiver = self;
  v14.super_class = (Class)CAMViewfinderViewController;
  -[CAMViewfinderViewController viewWillDisappear:](&v14, sel_viewWillDisappear_);
  -[CAMViewfinderViewController _dismissDiskSpaceAlertViewAnimated:](self, "_dismissDiskSpaceAlertViewAnimated:", 1);
  -[CAMViewfinderViewController _dismissFlashOrTorchUnavailableAlertViewAnimated:](self, "_dismissFlashOrTorchUnavailableAlertViewAnimated:", 1);
  -[CAMViewfinderViewController _remoteShutterController](self, "_remoteShutterController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setShowingPreview:", 0);

  -[CAMViewfinderViewController _cameraRollController](self, "_cameraRollController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "presentingViewControllerViewWillDisappear:", v3);

  -[CAMViewfinderViewController _updatePhysicalButtonCapturedEnabledResigningActiveOrDisappearing:](self, "_updatePhysicalButtonCapturedEnabledResigningActiveOrDisappearing:", 1);
  if (!-[CAMViewfinderViewController isPerformingTileTransition](self, "isPerformingTileTransition"))
  {
    -[CAMViewfinderViewController _closedViewfinderController](self, "_closedViewfinderController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "addClosedViewfinderReason:", 8);

  }
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "sharedLibraryAutoBehaviorEnabled");

  if (v9)
  {
    -[CAMViewfinderViewController _librarySelectionController](self, "_librarySelectionController");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "stopAcquiringSignals");

  }
  -[CAMViewfinderViewController _writeUserPreferences](self, "_writeUserPreferences");
  -[CAMViewfinderViewController view](self, "view");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "window");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "windowScene");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "_setSystemVolumeHUDEnabled:", 1);

}

- (unint64_t)_supportedInterfaceOrientationsForLayoutStyle:(int64_t)a3 wantsTextAnalysis:(BOOL)a4
{
  _BOOL4 v4;
  void *v6;
  int v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  void *v17;
  unint64_t v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint8_t buf[4];
  void *v29;
  _BYTE v30[128];
  uint64_t v31;

  v4 = a4;
  v31 = *MEMORY[0x1E0C80C00];
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities", a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "forceAllowAllInterfaceOrientations");

  if (-[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle") == 4)
  {
    -[CAMViewfinderViewController view](self, "view");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "window");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "screen");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    objc_msgSend(MEMORY[0x1E0DC3BF8], "screens", 0);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v24, v30, 16);
    if (v12)
    {
      v13 = v12;
      v14 = *(_QWORD *)v25;
      while (2)
      {
        for (i = 0; i != v13; ++i)
        {
          if (*(_QWORD *)v25 != v14)
            objc_enumerationMutation(v11);
          v16 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * i);
          objc_msgSend(v16, "mirroredScreen");
          v17 = (void *)objc_claimAutoreleasedReturnValue();

          if (v10 && v17 == v10)
          {
            v19 = os_log_create("com.apple.camera", "Camera");
            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138543362;
              v29 = v16;
              _os_log_impl(&dword_1DB760000, v19, OS_LOG_TYPE_DEFAULT, "Detected mirrored screen, allowing all interface orientations (%{public}@)", buf, 0xCu);
            }

            v18 = 30;
            goto LABEL_18;
          }
        }
        v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v24, v30, 16);
        if (v13)
          continue;
        break;
      }
    }

    if (v4 | v7)
      v18 = 30;
    else
      v18 = 2;
LABEL_18:

  }
  else
  {
    v18 = 30;
  }
  if (-[CAMViewfinderViewController isRecording](self, "isRecording"))
  {
    -[CAMViewfinderViewController view](self, "view");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "window");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "windowScene");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 1 << objc_msgSend(v22, "interfaceOrientation");

  }
  return v18;
}

- (void)viewDidDisappear:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  void *v6;
  void *v7;
  objc_super v8;

  v3 = a3;
  v8.receiver = self;
  v8.super_class = (Class)CAMViewfinderViewController;
  -[CAMViewfinderViewController viewDidDisappear:](&v8, sel_viewDidDisappear_);
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setControlDrawerExpanded:forReason:animated:", 0, 7, 0);

  -[CAMViewfinderViewController _collapseExpandedButtonsAnimated:](self, "_collapseExpandedButtonsAnimated:", 0);
  -[CAMViewfinderViewController _cameraRollController](self, "_cameraRollController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "presentingViewControllerViewDidDisappear:", v3);

  -[CAMViewfinderViewController view](self, "view");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "_removeAllAnimations:", 1);

}

- (void)viewDidLayoutSubviews
{
  void *v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  void *v13;
  void *v14;
  double v15;
  void *v16;
  objc_super v17;

  v17.receiver = self;
  v17.super_class = (Class)CAMViewfinderViewController;
  -[CAMViewfinderViewController viewDidLayoutSubviews](&v17, sel_viewDidLayoutSubviews);
  -[CAMViewfinderViewController view](self, "view");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _textInteractionBackground](self, "_textInteractionBackground");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "bounds");
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  objc_msgSend(v4, "superview");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "convertRect:toView:", v13, v6, v8, v10, v12);
  objc_msgSend(v4, "setFrame:");

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (double)(-[CAMViewfinderViewController _shouldHideCreativeCameraButtonForGraphConfiguration:](self, "_shouldHideCreativeCameraButtonForGraphConfiguration:", v14) ^ 1);
  -[CAMViewfinderViewController _creativeCameraButton](self, "_creativeCameraButton");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "setAlpha:", v15);

}

- (void)viewWillTransitionToSize:(CGSize)a3 withTransitionCoordinator:(id)a4
{
  double height;
  double width;
  id v7;
  void *v8;
  _QWORD v9[5];
  objc_super v10;

  height = a3.height;
  width = a3.width;
  v10.receiver = self;
  v10.super_class = (Class)CAMViewfinderViewController;
  v7 = a4;
  -[CAMViewfinderViewController viewWillTransitionToSize:withTransitionCoordinator:](&v10, sel_viewWillTransitionToSize_withTransitionCoordinator_, v7, width, height);
  -[CAMViewfinderViewController view](self, "view");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setNeedsLayout");
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __82__CAMViewfinderViewController_viewWillTransitionToSize_withTransitionCoordinator___block_invoke;
  v9[3] = &unk_1EA32A478;
  v9[4] = self;
  objc_msgSend(v7, "animateAlongsideTransition:completion:", 0, v9);

}

uint64_t __82__CAMViewfinderViewController_viewWillTransitionToSize_withTransitionCoordinator___block_invoke(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setNeedsUpdateOfHomeIndicatorAutoHidden");
  return objc_msgSend(*(id *)(a1 + 32), "setNeedsUpdateOfScreenEdgesDeferringSystemGestures");
}

- (void)_setHomeIndicatorAutoHideOrientation:(int64_t)a3
{
  _BOOL4 v5;

  if (a3 != 2 && self->__homeIndicatorAutoHideOrientation != a3)
  {
    self->__homeIndicatorAutoHideOrientation = a3;
    v5 = -[CAMViewfinderViewController _autoHideHomeIndicatorForOrientation:](self, "_autoHideHomeIndicatorForOrientation:");
    if (v5 != -[CAMViewfinderViewController _autoHideHomeIndicatorForOrientation:](self, "_autoHideHomeIndicatorForOrientation:", a3))-[CAMViewfinderViewController setNeedsUpdateOfHomeIndicatorAutoHidden](self, "setNeedsUpdateOfHomeIndicatorAutoHidden");
  }
}

- (void)_commitCTMCaptureWithType:(int64_t)a3
{
  NSObject *v5;
  __CFString *v6;
  __CFString *v7;
  void *v8;
  NSObject *v9;
  unint64_t v10;
  uint64_t v11;
  __CFString *v12;
  NSObject *v13;
  unint64_t v14;
  __CFString *v15;
  NSObject *v16;
  void *v17;
  char v18;
  id v19;
  void *v20;
  NSObject *v21;
  void *v22;
  _BOOL4 v23;
  void *v24;
  char v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  uint8_t buf[4];
  __CFString *v32;
  __int16 v33;
  NSObject *v34;
  __int16 v35;
  void *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    -[CAMViewfinderViewController _currentStillImageCaptureMomentSettings](self, "_currentStillImageCaptureMomentSettings");
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = CFSTR("Photo");
    if (a3 != 1)
      v6 = 0;
    if (a3 == 2)
      v6 = CFSTR("Video");
    v7 = v6;
    if (!v5)
    {
      v13 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        -[CAMViewfinderViewController _commitCTMCaptureWithType:].cold.2();

      -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "resetAnimated:", 1);
      goto LABEL_38;
    }
    -[CAMViewfinderViewController _captureController](self, "_captureController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = -[NSObject lowLightMode](v5, "lowLightMode");
      v11 = objc_msgSend(v8, "lowLightStatus");
      if (v10 > 2)
        v12 = 0;
      else
        v12 = off_1EA32ACC0[v10];
      v14 = v11 + 1;
      if (v14 > 3)
        v15 = 0;
      else
        v15 = off_1EA32ACD8[v14];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("NightMode%@/%@"), v12, v15);
      v16 = objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v32 = v7;
      v33 = 2114;
      v34 = v16;
      _os_log_impl(&dword_1DB760000, v9, OS_LOG_TYPE_DEFAULT, "Commit CTM capture with type %{public}@, %{public}@", buf, 0x16u);

    }
    -[NSObject setCtmCaptureType:](v5, "setCtmCaptureType:", a3);
    -[CAMViewfinderViewController _generateAnalyticsCaptureEventWithRequest:burst:](self, "_generateAnalyticsCaptureEventWithRequest:burst:", v5, 0);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSObject setAnalyticsEvent:](v5, "setAnalyticsEvent:", v17);

    v30 = 0;
    v18 = objc_msgSend(v8, "commitCTMCaptureWithRequest:error:", v5, &v30);
    v19 = v30;
    if ((v18 & 1) == 0)
    {
      v21 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend(v19, "localizedDescription");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v32 = v7;
        v33 = 2114;
        v34 = v5;
        v35 = 2114;
        v36 = v29;
        _os_log_error_impl(&dword_1DB760000, v21, OS_LOG_TYPE_ERROR, "Failed to capture %{public}@ with request %{public}@ (%{public}@)", buf, 0x20u);

      }
      if (a3 == 2
        || -[CAMViewfinderViewController _isCurrentLowLightCaptureCancelable](self, "_isCurrentLowLightCaptureCancelable"))
      {
        -[CAMViewfinderViewController _setCurrentLowLightCaptureCancelable:](self, "_setCurrentLowLightCaptureCancelable:", 0);
        -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "resetAnimated:", 1);

      }
      -[CAMViewfinderViewController _cancelCTMCapture](self, "_cancelCTMCapture");
      goto LABEL_37;
    }
    if ((unint64_t)a3 > 1)
    {
      if (a3 == 2)
      {
        -[CAMViewfinderViewController _updateUIForCapturing:animated:](self, "_updateUIForCapturing:animated:", 1, 1);
LABEL_33:
        v23 = -[CAMViewfinderViewController isDisablingAdditionalCaptures](self, "isDisablingAdditionalCaptures");
        -[CAMViewfinderViewController _captureController](self, "_captureController");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = objc_msgSend(v24, "isCapturingVideo");

        if (v23 && (v25 & 1) == 0)
          -[CAMViewfinderViewController _setPreventingAdditionalCaptures:](self, "_setPreventingAdditionalCaptures:", 1);
        -[CAMViewfinderViewController _setCurrentStillImageCaptureMomentSettings:](self, "_setCurrentStillImageCaptureMomentSettings:", 0);
        -[CAMViewfinderViewController _updateResolvedLowLightModeAnimated:](self, "_updateResolvedLowLightModeAnimated:", 1);
        -[CAMViewfinderViewController _analyticsSessionEvent](self, "_analyticsSessionEvent");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v26, "didCaptureWithRequest:currentConfiguration:", v5, v27);

LABEL_37:
        -[CAMViewfinderViewController _motionController](self, "_motionController");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v28, "debugValidateCaptureOrientationForMode:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"));

LABEL_38:
        -[CAMViewfinderViewController _updateUserPreferencesForFilterUsage](self, "_updateUserPreferencesForFilterUsage");
        -[CAMViewfinderViewController _updateFilterScrubberAfterCapture](self, "_updateFilterScrubberAfterCapture");

        goto LABEL_39;
      }
    }
    else
    {
      -[CAMViewfinderViewController stillImageCaptureTestDelegate](self, "stillImageCaptureTestDelegate");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "viewfinderViewController:willCaptureStillImageForRequest:", self, v5);

    }
    if (-[NSObject lowLightMode](v5, "lowLightMode"))
    {
      -[CAMViewfinderViewController _updateUIForCapturing:animated:](self, "_updateUIForCapturing:animated:", 1, 1);
      -[CAMViewfinderViewController _updateEnabledControlsWithReason:](self, "_updateEnabledControlsWithReason:", CFSTR("Night mode capture began"));
    }
    goto LABEL_33;
  }
  v5 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    -[CAMViewfinderViewController _commitCTMCaptureWithType:].cold.1();
LABEL_39:

}

- (void)_initiateCTMCaptureWithCurrentSettingsAtSystemTime:(unint64_t)a3
{
  void *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  int v9;
  id v10;
  NSObject *v11;
  unint64_t v12;
  uint64_t v13;
  __CFString *v14;
  NSObject *v15;
  unint64_t v16;
  __CFString *v17;
  void *v18;
  id v19;
  uint8_t buf[4];
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  -[CAMViewfinderViewController _setImageAnalyzer:](self, "_setImageAnalyzer:", 0);
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _currentStillImageCaptureMomentSettings](self, "_currentStillImageCaptureMomentSettings");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    v6 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      -[CAMViewfinderViewController _initiateCTMCaptureWithCurrentSettingsAtSystemTime:].cold.1();

    -[CAMViewfinderViewController _currentStillImageCaptureMomentSettings](self, "_currentStillImageCaptureMomentSettings");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "cancelCTMCaptureForSettings:", v7);

    -[CAMViewfinderViewController _setCurrentStillImageCaptureMomentSettings:](self, "_setCurrentStillImageCaptureMomentSettings:", 0);
  }
  -[CAMViewfinderViewController _stillImageCaptureRequestWithCurrentSettingsAsBurst:maximumLength:](self, "_stillImageCaptureRequestWithCurrentSettingsAsBurst:maximumLength:", 0, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = 0;
  v9 = objc_msgSend(v4, "initiateCTMCaptureWithSettings:error:", v8, &v19);
  v10 = v19;
  if (v9)
  {
    -[CAMViewfinderViewController _setCurrentStillImageCaptureMomentSettings:](self, "_setCurrentStillImageCaptureMomentSettings:", v8);
    v11 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = objc_msgSend(v8, "lowLightMode");
      v13 = objc_msgSend(v4, "lowLightStatus");
      if (v12 > 2)
        v14 = 0;
      else
        v14 = off_1EA32ACC0[v12];
      v16 = v13 + 1;
      if (v16 > 3)
        v17 = 0;
      else
        v17 = off_1EA32ACD8[v16];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("NightMode%@/%@"), v14, v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v21 = v18;
      _os_log_impl(&dword_1DB760000, v11, OS_LOG_TYPE_DEFAULT, "Initiated moment with %{public}@", buf, 0xCu);

    }
  }
  else
  {
    v15 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      v21 = v10;
      _os_log_impl(&dword_1DB760000, v15, OS_LOG_TYPE_DEFAULT, "Failed to initiate CTM capture: %{public}@", buf, 0xCu);
    }

    if (v5)
      -[CAMViewfinderViewController _updateResolvedLowLightModeAnimated:](self, "_updateResolvedLowLightModeAnimated:", 1);
  }

}

- (int64_t)_currentPhotoEncodingBehavior
{
  void *v3;
  int64_t v4;
  int64_t v5;
  void *v6;
  int64_t v7;

  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
  v5 = -[CAMViewfinderViewController _resolvedRAWMode](self, "_resolvedRAWMode");
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v3, "photoEncodingBehaviorForMode:resolvedRAWMode:isCapturingVideo:", v4, v5, objc_msgSend(v6, "isCapturingVideo"));

  return v7;
}

- (int64_t)_currentRawFileFormatEncodingBehavior
{
  void *v2;
  int64_t v3;

  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "rawFileFormatBehavior");

  return v3;
}

- (int64_t)_currentMaxPhotoResolution
{
  void *v3;
  void *v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  void *v10;
  uint64_t v11;
  int64_t v12;

  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
  v6 = -[CAMViewfinderViewController _currentDevice](self, "_currentDevice");
  if (objc_msgSend(v3, "shouldUsePhotoFormatControlForMode:", v5))
  {
    v7 = -[CAMViewfinderViewController _resolvedPhotoResolution](self, "_resolvedPhotoResolution");
  }
  else if (-[CAMViewfinderViewController _resolvedRAWMode](self, "_resolvedRAWMode") == 1)
  {
    v7 = objc_msgSend(v3, "maximumRAWPhotoResolution");
  }
  else
  {
    v7 = objc_msgSend(v3, "preferredHEICPhotoResolutionForDevicePosition:", -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"));
  }
  v8 = v7;
  v9 = -[CAMViewfinderViewController _resolvedRAWMode](self, "_resolvedRAWMode");
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v3, "photoEncodingBehaviorForMode:resolvedRAWMode:isCapturingVideo:", v5, v9, objc_msgSend(v10, "isCapturingVideo"));

  if (!objc_msgSend(v4, "isPhotoResolutionSupported:forMode:device:photoEncoding:", v8, v5, v6, v11))
    v8 = 0;
  if (objc_msgSend(v4, "isPhotoResolutionSupported:forLightingType:", v8, -[CAMViewfinderViewController _sanitizedLightingTypeForMode:device:](self, "_sanitizedLightingTypeForMode:device:", v5, v6)))v12 = v8;
  else
    v12 = 0;

  return v12;
}

- (void)_stopCapturingCTMVideo
{
  void *v3;

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "endCTMVideoCapture");

  -[CAMViewfinderViewController _updateUIForCapturing:animated:](self, "_updateUIForCapturing:animated:", 0, 1);
  -[CAMViewfinderViewController _updateUIForCaptureOrientationAnimated:](self, "_updateUIForCaptureOrientationAnimated:", 1);
}

- (void)_cancelCTMCapture
{
  void *v3;
  _BOOL4 v4;
  NSObject *v5;
  _BOOL4 v6;
  const char *v7;
  uint8_t *v8;
  void *v9;
  __int16 v10;
  __int16 v11;

  -[CAMViewfinderViewController _currentStillImageCaptureMomentSettings](self, "_currentStillImageCaptureMomentSettings");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v4 = -[CAMViewfinderViewController _isReconfiguring](self, "_isReconfiguring");
    v5 = os_log_create("com.apple.camera", "Camera");
    v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (v6)
      {
        v11 = 0;
        v7 = "Cancelling CTM capture for reconfiguring";
        v8 = (uint8_t *)&v11;
LABEL_7:
        _os_log_impl(&dword_1DB760000, v5, OS_LOG_TYPE_DEFAULT, v7, v8, 2u);
      }
    }
    else if (v6)
    {
      v10 = 0;
      v7 = "Cancelling CTM capture";
      v8 = (uint8_t *)&v10;
      goto LABEL_7;
    }

    -[CAMViewfinderViewController _captureController](self, "_captureController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "cancelCTMCaptureForSettings:", v3);
    -[CAMViewfinderViewController _setCurrentStillImageCaptureMomentSettings:](self, "_setCurrentStillImageCaptureMomentSettings:", 0);
    -[CAMViewfinderViewController _updateResolvedLowLightModeAnimated:](self, "_updateResolvedLowLightModeAnimated:", 1);

  }
}

- (BOOL)_isCTMCaptureForType:(int64_t)a3
{
  return (unint64_t)(a3 - 1) < 2;
}

- (CGSize)_desiredPreviewSizeForStillImageCapture
{
  void *v2;
  void *v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  CGSize result;

  -[CAMViewfinderViewController view](self, "view");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "window");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "screen");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "_referenceBounds");
  v6 = v5;
  v8 = v7;
  objc_msgSend(v4, "scale");
  v10 = v9 * v8;
  v11 = v9 * v6;

  v12 = v10;
  v13 = v11;
  result.height = v13;
  result.width = v12;
  return result;
}

- (BOOL)_isPrimaryDisplayAssetForCoordinationInfo:(id)a3
{
  if (a3)
    return objc_msgSend(a3, "isUnfilteredImageForFilteredPair") ^ 1;
  else
    return 1;
}

- (BOOL)_wantsCaptureAnimationForRequest:(id)a3
{
  id v4;
  void *v5;
  char v6;
  char v7;
  void *v8;
  void *v9;
  char v10;
  BOOL v11;

  v4 = a3;
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "isCapturingVideo"))
    v6 = objc_msgSend(v5, "videoCapturePaused");
  else
    v6 = 1;
  v7 = objc_msgSend(v5, "isCapturingBurst");
  objc_msgSend(v4, "burstIdentifier");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "textAnalysisIdentifier");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
    v10 = 0;
  else
    v10 = v6;
  if (v8)
    v10 = 0;
  if ((v7 & 1) != 0)
    v11 = 0;
  else
    v11 = v10;

  return v11;
}

- (void)stillImageRequestDidBeginCaptureBeforeResolvingSettings:(id)a3
{
  if (-[CAMViewfinderViewController _wantsCaptureAnimationForRequest:](self, "_wantsCaptureAnimationForRequest:", a3))
    -[CAMViewfinderViewController _performCaptureAnimation](self, "_performCaptureAnimation");
}

void __83__CAMViewfinderViewController_stillImageRequestDidStartCapturing_resolvedSettings___block_invoke(uint64_t a1, int a2)
{
  id WeakRetained;

  if (a2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    objc_msgSend(WeakRetained, "_updateShutterButtonForEndOfLowLightCapture");

  }
}

- (void)stillImageRequestDidStopCapturingStillImage:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a3;
  -[CAMViewfinderViewController stillImageCaptureTestDelegate](self, "stillImageCaptureTestDelegate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    -[CAMViewfinderViewController stillImageCaptureTestDelegate](self, "stillImageCaptureTestDelegate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "viewfinderViewController:didReceiveStillImageRequestDidStopCapturingStillImage:", self, v10);

  }
  -[CAMPreviewViewController notifyDidStopCapture](self->__previewViewController, "notifyDidStopCapture");
  if (objc_msgSend(v10, "lowLightMode"))
  {
    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setPreviewAlignmentGuideVisible:animated:", 0, 1);
    -[CAMViewfinderViewController _motionController](self, "_motionController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "endUpdatingPreviewAlignmentModel");

    -[CAMViewfinderViewController _feedbackController](self, "_feedbackController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "performDiscreteFeedback:", 0);

    -[CAMViewfinderViewController _updateShutterButtonForEndOfLowLightCapture](self, "_updateShutterButtonForEndOfLowLightCapture");
  }
  -[CAMViewfinderViewController _idleController](self, "_idleController");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "stillImageRequestDidStopCapturingStillImage:", v10);

}

- (void)stillImageRequestDidCompleteVideoCapture:(id)a3 withResponse:(id)a4 error:(id)a5
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  id v12;

  v12 = a3;
  v8 = a4;
  v9 = a5;
  if (objc_msgSend(v12, "isCTMVideo"))
  {
    objc_msgSend(v12, "analyticsEvent");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _populateZoomForCaptureEvent:](self, "_populateZoomForCaptureEvent:", v10);

    -[CAMViewfinderViewController _captureRequest:didCompleteVideoCaptureWithResponse:error:](self, "_captureRequest:didCompleteVideoCaptureWithResponse:error:", v12, v8, v9);
  }
  else if (!v9)
  {
    -[CAMViewfinderViewController _cameraRollController](self, "_cameraRollController");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "processTransientPairedVideoUpdate:filterType:", v8, objc_msgSend(v12, "effectFilterType"));

  }
}

- (void)stillImageRequestsWillStartCapturingLivePhotoVideo
{
  _QWORD v3[5];

  -[CAMViewfinderViewController updateControlVisibilityAnimated:](self, "updateControlVisibilityAnimated:", 1);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __81__CAMViewfinderViewController_stillImageRequestsWillStartCapturingLivePhotoVideo__block_invoke;
  v3[3] = &unk_1EA328868;
  v3[4] = self;
  objc_msgSend(MEMORY[0x1E0DC3F10], "animateWithDuration:delay:options:animations:completion:", 2, v3, 0, 0.25, 0.0);
}

void __81__CAMViewfinderViewController_stillImageRequestsWillStartCapturingLivePhotoVideo__block_invoke(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "viewfinderView");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setNeedsLayout");
  objc_msgSend(v1, "layoutIfNeeded");

}

- (void)stillImageRequestsDidCompleteCapturingLivePhotoVideo
{
  _QWORD v3[5];

  -[CAMViewfinderViewController updateControlVisibilityAnimated:](self, "updateControlVisibilityAnimated:", 1);
  -[CAMViewfinderViewController _updateResolvedLowLightModeAnimated:](self, "_updateResolvedLowLightModeAnimated:", 1);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __83__CAMViewfinderViewController_stillImageRequestsDidCompleteCapturingLivePhotoVideo__block_invoke;
  v3[3] = &unk_1EA328868;
  v3[4] = self;
  objc_msgSend(MEMORY[0x1E0DC3F10], "animateWithDuration:delay:options:animations:completion:", 2, v3, 0, 0.25, 0.0);
}

void __83__CAMViewfinderViewController_stillImageRequestsDidCompleteCapturingLivePhotoVideo__block_invoke(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "viewfinderView");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setNeedsLayout");
  objc_msgSend(v1, "layoutIfNeeded");

}

- (void)stillImageRequestsWillRequestCTMVideoCaptureStart
{
  void *v3;
  char v4;
  void *v5;

  -[CAMViewfinderViewController videoCaptureTestDelegate](self, "videoCaptureTestDelegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_opt_respondsToSelector();

  if ((v4 & 1) != 0)
  {
    -[CAMViewfinderViewController videoCaptureTestDelegate](self, "videoCaptureTestDelegate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "stillImageRequestsWillRequestCTMVideoCaptureStartForViewfinderViewController:", self);

  }
  -[CAMViewfinderViewController updateControlVisibilityAnimated:](self, "updateControlVisibilityAnimated:", 1);
  -[CAMViewfinderViewController _updateSemanticStyleControlsForCurrentStateAnimated:](self, "_updateSemanticStyleControlsForCurrentStateAnimated:", 1);
  -[CAMViewfinderViewController _updateSmartStyleControlsForCurrentStateAnimateSliders:animateOtherControls:](self, "_updateSmartStyleControlsForCurrentStateAnimateSliders:animateOtherControls:", 0, 1);
  -[CAMViewfinderViewController _preparePhotoOutputForExpectedPhotoResolution](self, "_preparePhotoOutputForExpectedPhotoResolution");
}

- (void)stillImageRequestsWillRequestCTMVideoCaptureEnd
{
  void *v3;
  char v4;
  void *v5;

  -[CAMViewfinderViewController videoCaptureTestDelegate](self, "videoCaptureTestDelegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_opt_respondsToSelector();

  if ((v4 & 1) != 0)
  {
    -[CAMViewfinderViewController videoCaptureTestDelegate](self, "videoCaptureTestDelegate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "stillImageRequestsWillRequestCTMVideoCaptureEndForViewfinderViewController:", self);

  }
  -[CAMViewfinderViewController updateControlVisibilityAnimated:](self, "updateControlVisibilityAnimated:", 1);
  -[CAMViewfinderViewController _updateSemanticStyleControlsForCurrentStateAnimated:](self, "_updateSemanticStyleControlsForCurrentStateAnimated:", 1);
  -[CAMViewfinderViewController _updateSmartStyleControlsForCurrentStateAnimateSliders:animateOtherControls:](self, "_updateSmartStyleControlsForCurrentStateAnimateSliders:animateOtherControls:", 0, 1);
  -[CAMViewfinderViewController _preparePhotoOutputForExpectedPhotoResolution](self, "_preparePhotoOutputForExpectedPhotoResolution");
}

- (BOOL)_isCTMVideoSupportedForGraphConfiguration:(id)a3
{
  void *v4;
  char v5;

  if (objc_msgSend(a3, "mode"))
    return 0;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isCTMSupported");

  return v5;
}

- (void)stillImageRequestWillStartCapturingCTMVideoWithCaptureInFlight:(BOOL)a3
{
  void *v5;
  BOOL v6;
  void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  id v11;
  uint8_t buf[4];
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[CAMViewfinderViewController _isCTMVideoSupportedForGraphConfiguration:](self, "_isCTMVideoSupportedForGraphConfiguration:", v5);

  if (v6)
  {
    if (!a3)
    {
      -[CAMViewfinderViewController _idleController](self, "_idleController");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "stillImageRequestWillStartCapturingCTMVideoWithCaptureInFlight:", 0);

    }
    -[CAMViewfinderViewController _targetElapsedTimeView](self, "_targetElapsedTimeView");
    v11 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "startTimer");
    objc_msgSend(v11, "setBackgroundStyle:animated:", 1, 1);
    -[CAMViewfinderViewController _remoteShutterController](self, "_remoteShutterController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "didStartCaptureTimer");

    -[CAMViewfinderViewController _limitZoomRangeForRecordingIfNecessary](self, "_limitZoomRangeForRecordingIfNecessary");
  }
  else
  {
    v9 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v13 = v10;
      _os_log_impl(&dword_1DB760000, v9, OS_LOG_TYPE_DEFAULT, "Received stillImageRequestWillStartCapturingCTMVideoWithCaptureInFlight in unsupported configuration %{public}@", buf, 0xCu);

    }
  }
}

- (void)stillImageRequestsDidStopCapturingCTMVideo
{
  void *v3;
  BOOL v4;
  void *v5;
  char v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = -[CAMViewfinderViewController _isCTMVideoSupportedForGraphConfiguration:](self, "_isCTMVideoSupportedForGraphConfiguration:", v3);

  if (v4)
  {
    -[CAMViewfinderViewController _captureController](self, "_captureController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "isCapturingCTMVideo");

    if ((v6 & 1) != 0)
      return;
    -[CAMViewfinderViewController _updateUIForCapturing:animated:](self, "_updateUIForCapturing:animated:", 0, 1);
    if (-[CAMViewfinderViewController isDisablingAdditionalCaptures](self, "isDisablingAdditionalCaptures"))
      -[CAMViewfinderViewController _setPreventingAdditionalCaptures:](self, "_setPreventingAdditionalCaptures:", 1);
    -[CAMViewfinderViewController _restoreZoomRangeAfterRecordingIfNecessary](self, "_restoreZoomRangeAfterRecordingIfNecessary");
  }
  else
  {
    v7 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543362;
      v11 = v8;
      _os_log_impl(&dword_1DB760000, v7, OS_LOG_TYPE_DEFAULT, "Received stillImageRequestsDidStopCapturingCTMVideo in unsupported configuration %{public}@", (uint8_t *)&v10, 0xCu);

    }
  }
  -[CAMViewfinderViewController _idleController](self, "_idleController");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "stillImageRequestsDidStopCapturingCTMVideo");

}

- (void)_presentImageWellImage:(id)a3 uuid:(id)a4 animated:(BOOL)a5
{
  _BOOL8 v5;
  id v8;
  id v9;
  id v10;

  v5 = a5;
  v8 = a4;
  v9 = a3;
  -[CAMViewfinderViewController _imageWell](self, "_imageWell");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setThumbnailImage:uuid:animated:", v9, v8, v5);

}

- (id)_videoCaptureRequestWithCurrentSettings
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  CAMMutableVideoCaptureRequest *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  double v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v40;
  void *v41;
  void *v42;
  void *v43;

  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _motionController](self, "_motionController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _cameraRollController](self, "_cameraRollController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "mode");
  v8 = objc_msgSend(v6, "device");
  v9 = objc_msgSend(v6, "videoConfiguration");
  if (-[CAMViewfinderViewController _isProactiveFlashSuggestionSuppressed](self, "_isProactiveFlashSuggestionSuppressed"))
  {
    v10 = 0;
  }
  else
  {
    v10 = -[CAMViewfinderViewController _resolvedTorchMode](self, "_resolvedTorchMode");
  }
  v42 = v4;
  v11 = objc_msgSend(v4, "captureOrientation");
  v12 = objc_alloc_init(CAMMutableVideoCaptureRequest);
  -[CAMMutableVideoCaptureRequest setTorchMode:](v12, "setTorchMode:", v10);
  -[CAMMutableVideoCaptureRequest setCaptureOrientation:](v12, "setCaptureOrientation:", v11);
  if ((unint64_t)(v8 - 1) > 0xA)
    v13 = 0;
  else
    v13 = qword_1DB9A53B8[v8 - 1];
  -[CAMMutableVideoCaptureRequest setCaptureMirrored:](v12, "setCaptureMirrored:", objc_msgSend(v3, "mirrorCameraCapturesForDevicePosition:mode:", v13, v7));
  -[CAMMutableVideoCaptureRequest setCaptureDevice:](v12, "setCaptureDevice:", v8);
  -[CAMMutableVideoCaptureRequest setCaptureMode:](v12, "setCaptureMode:", v7);
  -[CAMMutableVideoCaptureRequest setCaptureVideoConfiguration:](v12, "setCaptureVideoConfiguration:", v9);
  -[CAMMutableVideoCaptureRequest setWantsWhiteBalanceLocked:](v12, "setWantsWhiteBalanceLocked:", objc_msgSend(v3, "shouldLockWhiteBalanceDuringVideoRecording"));
  -[CAMMutableVideoCaptureRequest setDelegate:](v12, "setDelegate:", self);
  -[CAMMutableVideoCaptureRequest setSessionIdentifier:](v12, "setSessionIdentifier:", objc_msgSend(v5, "sessionIdentifier"));
  -[CAMMutableVideoCaptureRequest setUserInitationTimestamp:](v12, "setUserInitationTimestamp:", CFAbsoluteTimeGetCurrent());
  -[CAMMutableVideoCaptureRequest setAudioConfiguration:](v12, "setAudioConfiguration:", objc_msgSend(v6, "audioConfiguration"));
  -[CAMMutableVideoCaptureRequest setTrueVideoEnabled:](v12, "setTrueVideoEnabled:", -[CAMViewfinderViewController _trueVideoIsActive](self, "_trueVideoIsActive"));
  -[CAMViewfinderViewController _locationController](self, "_locationController");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "currentLocation");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (v15)
    -[CAMMutableVideoCaptureRequest setLocation:](v12, "setLocation:", v15);
  objc_msgSend(v14, "headingForOrientation:", v11);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (v16)
    -[CAMMutableVideoCaptureRequest setHeading:](v12, "setHeading:", v16);
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v17, "isInternalInstall"))
    -[CAMMutableVideoCaptureRequest setShouldDelayRemotePersistence:](v12, "setShouldDelayRemotePersistence:", objc_msgSend(v3, "shouldDelayRemotePersistence"));
  v41 = v5;
  v43 = v3;
  -[CAMMutableVideoCaptureRequest setVideoEncodingBehavior:](v12, "setVideoEncodingBehavior:", objc_msgSend(v6, "videoEncodingBehavior"));
  -[CAMViewfinderViewController _storageController](self, "_storageController");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMMutableVideoCaptureRequest setRemainingDiskUsageThreshold:](v12, "setRemainingDiskUsageThreshold:", objc_msgSend(v18, "minimumDiskUsageThresholdInBytesForGraphConfiguration:", v6));
  -[CAMViewfinderViewController maximumVideoRecordingDuration](self, "maximumVideoRecordingDuration");
  if (v19 > 0.0)
    -[CAMMutableVideoCaptureRequest setMaximumRecordedDuration:](v12, "setMaximumRecordedDuration:");
  v20 = -[CAMViewfinderViewController persistenceBehavior](self, "persistenceBehavior");
  v21 = -[CAMViewfinderViewController _persistenceOptionsForBehavior:allowingOptionalLocalPersistence:](self, "_persistenceOptionsForBehavior:allowingOptionalLocalPersistence:", v20, 0);
  -[CAMMutableVideoCaptureRequest setPersistenceOptions:](v12, "setPersistenceOptions:", v21);
  -[CAMMutableVideoCaptureRequest setTemporaryPersistenceOptions:](v12, "setTemporaryPersistenceOptions:", -[CAMViewfinderViewController _temporaryPersistenceOptionsForBehavior:](self, "_temporaryPersistenceOptionsForBehavior:", v20));
  if (v21 == 3)
  {
    -[CAMViewfinderViewController _storageController](self, "_storageController");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "externalStorage");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "generateDestinationURLWithExtension:", CFSTR("MOV"));
    v40 = v6;
    v24 = v17;
    v25 = v14;
    v26 = v18;
    v27 = v16;
    v28 = v15;
    v29 = (void *)objc_claimAutoreleasedReturnValue();

    -[CAMMutableVideoCaptureRequest setLocalDestinationURL:](v12, "setLocalDestinationURL:", v29);
    v15 = v28;
    v16 = v27;
    v18 = v26;
    v14 = v25;
    v17 = v24;
    v6 = v40;
  }
  -[CAMViewfinderViewController _updateOriginForRequest:](self, "_updateOriginForRequest:", v12, v40);
  -[CAMMutableVideoCaptureRequest setPressType:](v12, "setPressType:", -[CAMViewfinderViewController _currentlyPressedButton](self, "_currentlyPressedButton"));
  -[CAMViewfinderViewController _generateAnalyticsCaptureEventWithRequest:burst:](self, "_generateAnalyticsCaptureEventWithRequest:burst:", v12, 0);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMMutableVideoCaptureRequest setAnalyticsEvent:](v12, "setAnalyticsEvent:", v30);

  v31 = v43;
  if (objc_msgSend(v43, "sharedLibraryEnabled")
    && !-[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled"))
  {
    -[CAMViewfinderViewController _librarySelectionController](self, "_librarySelectionController");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMMutableVideoCaptureRequest setSharedLibraryMode:](v12, "setSharedLibraryMode:", objc_msgSend(v32, "sharedLibraryMode"));

    if (objc_msgSend(v17, "isInternalInstall"))
    {
      -[CAMViewfinderViewController _librarySelectionController](self, "_librarySelectionController");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "librarySelectionDiagnostics");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMMutableVideoCaptureRequest setSharedLibraryDiagnostics:](v12, "setSharedLibraryDiagnostics:", v34);

      v31 = v43;
    }
    if (objc_msgSend(v17, "peopleProximityPersistenceSupported"))
    {
      -[CAMViewfinderViewController _librarySelectionController](self, "_librarySelectionController");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v35, "acquiredSignalResults");
      v36 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v36, "identitiesInProximity");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      CAMLibrarySelectionIdentityContactIdentifiersForIdentities(v37);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMMutableVideoCaptureRequest setContactIDsInProximity:](v12, "setContactIDsInProximity:", v38);

      v31 = v43;
    }
  }

  return v12;
}

- (BOOL)_startCapturingVideoWithRequest:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  id v13;

  v4 = a3;
  if (objc_msgSend(v4, "persistenceOptions") == 3
    && (objc_msgSend(v4, "localDestinationURL"), v5 = (void *)objc_claimAutoreleasedReturnValue(), v5, !v5))
  {
    v7 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      -[CAMViewfinderViewController _startCapturingVideoWithRequest:].cold.1();

    -[CAMViewfinderViewController _showExternalStorageRecordingFailedAlert](self, "_showExternalStorageRecordingFailedAlert");
    -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "resetAnimated:", 1);
    LOBYTE(v7) = 0;
  }
  else
  {
    -[CAMViewfinderViewController _captureController](self, "_captureController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 0;
    LODWORD(v7) = objc_msgSend(v6, "startCapturingVideoWithRequest:error:", v4, &v13);
    v8 = v13;
    if ((_DWORD)v7)
    {
      -[CAMViewfinderViewController _updateUIForCapturing:animated:](self, "_updateUIForCapturing:animated:", 1, 1);
      -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "notifyWillStartCapturing");
      -[CAMViewfinderViewController _analyticsSessionEvent](self, "_analyticsSessionEvent");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "didCaptureWithRequest:currentConfiguration:", v4, v11);

    }
  }

  return (char)v7;
}

- (BOOL)_stopCapturingVideo
{
  void *v3;
  int v4;
  void *v5;
  _BOOL4 v6;
  void *v7;

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "stopCapturingVideo");
  objc_msgSend(MEMORY[0x1E0DC3F20], "attemptRotationToDeviceOrientation");
  -[CAMViewfinderViewController _updateUIForCaptureOrientationAnimated:](self, "_updateUIForCaptureOrientationAnimated:", 1);
  -[CAMViewfinderViewController _updateUIForCapturing:animated:](self, "_updateUIForCapturing:animated:", 0, 1);
  -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "resetAnimated:", 1);

  v6 = -[CAMViewfinderViewController isDisablingAdditionalCaptures](self, "isDisablingAdditionalCaptures");
  if (v4 && v6)
    -[CAMViewfinderViewController _setPreventingAdditionalCaptures:](self, "_setPreventingAdditionalCaptures:", 1);
  if (v4 && -[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled"))
  {
    -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setSpinning:", 1);

  }
  return v4;
}

- (BOOL)_pauseCapturingVideo
{
  void *v3;
  int v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "pauseCapturingVideo");
  if (v4)
  {
    -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setPausedDuringVideo:animated:", 1, 1);

    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "elapsedTimeView");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setTimerPaused:", 1);

    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "elapsedTimeView");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setBackgroundStyle:animated:", 2, 1);

    -[CAMViewfinderViewController _idleController](self, "_idleController");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "updateForVideoPaused");

  }
  return v4;
}

- (BOOL)_resumeCaptureVideo
{
  void *v3;
  int v4;
  void *v5;
  void *v6;

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "resumeCaptureVideo");
  if (v4)
  {
    -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setPausedDuringVideo:animated:", 0, 1);

    -[CAMViewfinderViewController _idleController](self, "_idleController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "updateForVideoResumed");

  }
  return v4;
}

- (void)videoRequestDidStartCapturing:(id)a3
{
  void *v4;
  char v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a3;
  -[CAMViewfinderViewController videoCaptureTestDelegate](self, "videoCaptureTestDelegate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_opt_respondsToSelector();

  if ((v5 & 1) != 0)
  {
    -[CAMViewfinderViewController videoCaptureTestDelegate](self, "videoCaptureTestDelegate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "viewfinderViewController:didReceiveVideoRequestDidStartCapturing:", self, v11);

  }
  -[CAMViewfinderViewController _idleController](self, "_idleController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "videoRequestDidStartCapturing:", v11);
  -[CAMViewfinderViewController _targetElapsedTimeView](self, "_targetElapsedTimeView");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "startTimer");
  objc_msgSend(v8, "setBackgroundStyle:animated:", 1, 1);
  if (-[CAMViewfinderViewController _isSpatialVideoMode:devicePosition:](self, "_isSpatialVideoMode:devicePosition:", objc_msgSend(v11, "captureMode"), objc_msgSend(v11, "captureDevicePosition")))
  {
    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setSpatialCaptureRecordingIndicatorVisible:animated:", 1, 1);

  }
  -[CAMViewfinderViewController _remoteShutterController](self, "_remoteShutterController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "didStartCaptureTimer");

  -[CAMViewfinderViewController _limitZoomRangeForRecordingIfNecessary](self, "_limitZoomRangeForRecordingIfNecessary");
}

- (void)videoRequestDidStopCapturing:(id)a3
{
  void *v4;
  char v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a3;
  -[CAMViewfinderViewController videoCaptureTestDelegate](self, "videoCaptureTestDelegate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_opt_respondsToSelector();

  if ((v5 & 1) != 0)
  {
    -[CAMViewfinderViewController videoCaptureTestDelegate](self, "videoCaptureTestDelegate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "viewfinderViewController:didReceiveVideoRequestDidStopCapturing:", self, v11);

  }
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v7, "isCapturingVideo") & 1) == 0)
  {
    -[CAMViewfinderViewController _idleController](self, "_idleController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "videoRequestDidStopCapturing:", v11);
    -[CAMViewfinderViewController _updateUIForCapturing:animated:](self, "_updateUIForCapturing:animated:", 0, 1);
    if (-[CAMViewfinderViewController isDisablingAdditionalCaptures](self, "isDisablingAdditionalCaptures"))
      -[CAMViewfinderViewController _setPreventingAdditionalCaptures:](self, "_setPreventingAdditionalCaptures:", 1);
    objc_msgSend(v11, "analyticsEvent");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _populateZoomForCaptureEvent:](self, "_populateZoomForCaptureEvent:", v9);

    -[CAMViewfinderViewController _restoreZoomRangeAfterRecordingIfNecessary](self, "_restoreZoomRangeAfterRecordingIfNecessary");
    -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setSpinning:", 0);

    if (-[CAMViewfinderViewController _trueVideoIsCapturing](self, "_trueVideoIsCapturing"))
      -[CAMViewfinderViewController _trueVideoStopCapture](self, "_trueVideoStopCapture");

  }
}

- (void)videoRequestDidCompleteCapture:(id)a3 withResponse:(id)a4 error:(id)a5
{
  id v8;
  id v9;
  void *v10;
  char v11;
  void *v12;
  id v13;

  v13 = a3;
  v8 = a4;
  v9 = a5;
  -[CAMViewfinderViewController videoCaptureTestDelegate](self, "videoCaptureTestDelegate");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_opt_respondsToSelector();

  if ((v11 & 1) != 0)
  {
    -[CAMViewfinderViewController videoCaptureTestDelegate](self, "videoCaptureTestDelegate");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "viewfinderViewController:didReceiveVideoRequestDidCompleteCapture:withResponse:error:", self, v13, v8, v9);

  }
  -[CAMViewfinderViewController _captureRequest:didCompleteVideoCaptureWithResponse:error:](self, "_captureRequest:didCompleteVideoCaptureWithResponse:error:", v13, v8, v9);

}

- (void)_captureRequest:(id)a3 didCompleteVideoCaptureWithResponse:(id)a4 error:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  int v12;
  int v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  __CFString *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  NSObject *v36;
  uint8_t v37[16];

  v8 = a3;
  v9 = a4;
  v10 = a5;
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v11, "isCapturingBurst") & 1) == 0 && (objc_msgSend(v11, "isCapturingVideo") & 1) == 0)
  {
    v12 = objc_msgSend(v11, "isCapturingLowLightImage");
    if (v10)
      goto LABEL_4;
LABEL_6:
    v13 = 0;
    goto LABEL_7;
  }
  v12 = 1;
  if (!v10)
    goto LABEL_6;
LABEL_4:
  v13 = CAMErrorIsVideoCaptureRequestError(v10, -28003) ^ 1;
LABEL_7:
  if ((((objc_msgSend(v9, "stoppedUnexpectedly") | v13) ^ 1 | v12) & 1) == 0)
  {
    -[CAMViewfinderViewController _updateUIForCapturing:animated:](self, "_updateUIForCapturing:animated:", 0, 1);
    -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "resetAnimated:", 1);

    if (-[CAMViewfinderViewController isDisablingAdditionalCaptures](self, "isDisablingAdditionalCaptures"))
      -[CAMViewfinderViewController _setPreventingAdditionalCaptures:](self, "_setPreventingAdditionalCaptures:", 0);
  }
  objc_msgSend(v9, "coordinationInfo");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = v15;
  if (v15 && !objc_msgSend(v15, "representsFinalProcessedVideo"))
  {
    if (v10)
      goto LABEL_22;
  }
  else
  {
    if (v10)
    {
      -[CAMImageWell recoverFromFailedThumbnailUpdate](self->__imageWell, "recoverFromFailedThumbnailUpdate");
      goto LABEL_22;
    }
    -[CAMViewfinderViewController _cameraRollController](self, "_cameraRollController");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(v9, "sessionIdentifier");
    objc_msgSend(v9, "persistenceUUID");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v17, "isCaptureSessionCurrent:", v18))
    {
      objc_msgSend(v17, "willPersistAssetWithUUID:captureSession:", v19, v18);
      objc_msgSend(v9, "imageWellImage");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMViewfinderViewController _presentImageWellImage:uuid:animated:](self, "_presentImageWellImage:uuid:animated:", v20, v19, 1);
      -[CAMViewfinderViewController _remoteShutterController](self, "_remoteShutterController");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "sendThumbnailImage:isVideo:", v20, 1);

    }
  }
  if (-[CAMViewfinderViewController _isPrimaryDisplayAssetForCoordinationInfo:](self, "_isPrimaryDisplayAssetForCoordinationInfo:", v16))
  {
    -[CAMViewfinderViewController _cameraRollController](self, "_cameraRollController");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "processTransientAssetUpdate:preventingInsertion:persistenceOptions:", v9, 0, objc_msgSend(v8, "persistenceOptions"));

  }
  objc_msgSend(v8, "analyticsEvent");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "populateFromVideoCaptureResponse:", v9);
  objc_msgSend(v23, "publish");

LABEL_22:
  v24 = objc_msgSend(v9, "reason");
  if (v24 == 3)
  {
    v25 = CFSTR("MAX_RECORDING_FILE_SIZE_REACHED");
  }
  else
  {
    if (v24 != 2)
    {
      if (v24 == 1)
      {
        -[CAMViewfinderViewController _setReceivedOutOfDiskSpaceErrorDuringCapture:](self, "_setReceivedOutOfDiskSpaceErrorDuringCapture:", 1);
        -[CAMViewfinderViewController _updateDiskSpaceAlertViewVisibilityAnimated:](self, "_updateDiskSpaceAlertViewVisibilityAnimated:", 1);
      }
      goto LABEL_30;
    }
    v25 = CFSTR("MAX_RECORDING_DURATION_REACHED");
  }
  CAMLocalizedFrameworkString(v25, 0);
  v26 = objc_claimAutoreleasedReturnValue();
  if (v26)
  {
    v27 = (void *)v26;
    v28 = (void *)MEMORY[0x1E0DC3450];
    CAMLocalizedFrameworkString(CFSTR("RECORDING_STOPPED_TITLE"), 0);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "alertControllerWithTitle:message:preferredStyle:", v29, v27, 1);
    v30 = (void *)objc_claimAutoreleasedReturnValue();

    v31 = (void *)MEMORY[0x1E0DC3448];
    CAMLocalizedFrameworkString(CFSTR("OK"), 0);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "actionWithTitle:style:handler:", v32, 1, 0);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "addAction:", v33);

    -[CAMViewfinderViewController view](self, "view");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "window");
    v35 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v35, "pl_presentViewController:animated:", v30, 1);
    goto LABEL_32;
  }
LABEL_30:
  if (objc_msgSend(v9, "slowWriterFrameDrops"))
    -[CAMViewfinderViewController _showFrameDropsAlert](self, "_showFrameDropsAlert");
LABEL_32:
  if (-[CAMViewfinderViewController _resolvedTorchMode](self, "_resolvedTorchMode") == 2)
    -[CAMViewfinderViewController _updateTorchModeOnControllerForMode:](self, "_updateTorchModeOnControllerForMode:", -[CAMViewfinderViewController _configuredMode](self, "_configuredMode"));
  if (-[CAMViewfinderViewController _wantsExternalStorageOutputEnabled](self, "_wantsExternalStorageOutputEnabled")
    && !-[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled"))
  {
    v36 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v37 = 0;
      _os_log_impl(&dword_1DB760000, v36, OS_LOG_TYPE_DEFAULT, "External storage: enabling deferred SSD output on didCompleteVideoCaptureWithResponse", v37, 2u);
    }

    -[CAMViewfinderViewController _setExternalStorageOutputEnabled:animated:](self, "_setExternalStorageOutputEnabled:animated:", 1, 1);
  }

}

- (void)videoRequestDidCompleteLocalPersistence:(id)a3 withResponse:(id)a4 error:(id)a5
{
  id v8;
  id v9;
  void *v10;
  char v11;
  void *v12;
  void *v13;
  _BOOL4 v14;
  void *v15;
  id v16;

  v16 = a3;
  v8 = a4;
  v9 = a5;
  -[CAMViewfinderViewController videoCaptureTestDelegate](self, "videoCaptureTestDelegate");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_opt_respondsToSelector();

  if ((v11 & 1) != 0)
  {
    -[CAMViewfinderViewController videoCaptureTestDelegate](self, "videoCaptureTestDelegate");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "viewfinderViewController:didReceiveVideoRequestDidCompleteLocalPersistence:withResponse:error:", self, v16, v8, v9);

  }
  if (!v9)
  {
    objc_msgSend(v8, "coordinationInfo");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = -[CAMViewfinderViewController _isPrimaryDisplayAssetForCoordinationInfo:](self, "_isPrimaryDisplayAssetForCoordinationInfo:", v13);

    if (v14)
    {
      -[CAMViewfinderViewController _cameraRollController](self, "_cameraRollController");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "processTransientAssetUpdate:preventingInsertion:persistenceOptions:", v8, 0, objc_msgSend(v16, "persistenceOptions"));

    }
  }

}

- (void)videoRequestDidCompleteRemotePersistence:(id)a3 withResponse:(id)a4 error:(id)a5
{
  id v8;
  id v9;
  void *v10;
  char v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;

  v16 = a3;
  v8 = a4;
  v9 = a5;
  -[CAMViewfinderViewController videoCaptureTestDelegate](self, "videoCaptureTestDelegate");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_opt_respondsToSelector();

  if ((v11 & 1) != 0)
  {
    -[CAMViewfinderViewController videoCaptureTestDelegate](self, "videoCaptureTestDelegate");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "viewfinderViewController:didReceiveVideoRequestDidCompleteRemotePersistence:withResponse:error:", self, v16, v8, v9);

  }
  if (!v9)
  {
    objc_msgSend(v8, "persistenceUUID");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v8, "sessionIdentifier");
    -[CAMViewfinderViewController _cameraRollController](self, "_cameraRollController");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "processTransientAssetUpdate:preventingInsertion:persistenceOptions:", v8, 1, objc_msgSend(v16, "persistenceOptions"));
    objc_msgSend(v15, "didPersistAssetWithUUID:captureSession:", v13, v14);

  }
  -[CAMViewfinderViewController _updateDiskSpaceAlertViewVisibilityAnimated:](self, "_updateDiskSpaceAlertViewVisibilityAnimated:", 1);

}

- (void)videoRequestDidResumeCapturing:(id)a3
{
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint8_t v9[16];

  v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_1DB760000, v4, OS_LOG_TYPE_DEFAULT, "CAMViewfinderViewController videoRequestDidResumeCapturing", v9, 2u);
  }

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "elapsedTimeView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setTimerPaused:", 0);

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "elapsedTimeView");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setBackgroundStyle:animated:", 1, 1);

}

- (id)_panoramaCaptureRequestWithCurrentSettings
{
  void *v3;
  void *v4;
  uint64_t v5;
  CAMMutablePanoramaCaptureRequest *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v26;
  void *v27;

  -[CAMViewfinderViewController _motionController](self, "_motionController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _cameraRollController](self, "_cameraRollController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "panoramaCaptureOrientation");
  v6 = objc_alloc_init(CAMMutablePanoramaCaptureRequest);
  -[CAMMutablePanoramaCaptureRequest setCaptureOrientation:](v6, "setCaptureOrientation:", v5);
  -[CAMMutablePanoramaCaptureRequest setCaptureDevice:](v6, "setCaptureDevice:", -[CAMViewfinderViewController _currentDevice](self, "_currentDevice"));
  -[CAMMutablePanoramaCaptureRequest setCaptureMode:](v6, "setCaptureMode:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"));
  -[CAMMutablePanoramaCaptureRequest setDelegate:](v6, "setDelegate:", self);
  -[CAMMutablePanoramaCaptureRequest setSessionIdentifier:](v6, "setSessionIdentifier:", objc_msgSend(v4, "sessionIdentifier"));
  -[CAMViewfinderViewController _locationController](self, "_locationController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "currentLocation");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
    -[CAMMutablePanoramaCaptureRequest setLocation:](v6, "setLocation:", v8);
  objc_msgSend(v7, "headingForOrientation:", v5);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
    -[CAMMutablePanoramaCaptureRequest setHeading:](v6, "setHeading:", v9);
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v10, "isInternalInstall"))
  {
    +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMMutablePanoramaCaptureRequest setShouldDelayRemotePersistence:](v6, "setShouldDelayRemotePersistence:", objc_msgSend(v11, "shouldDelayRemotePersistence"));

  }
  v12 = -[CAMViewfinderViewController persistenceBehavior](self, "persistenceBehavior");
  -[CAMMutablePanoramaCaptureRequest setPersistenceOptions:](v6, "setPersistenceOptions:", -[CAMViewfinderViewController _persistenceOptionsForBehavior:allowingOptionalLocalPersistence:](self, "_persistenceOptionsForBehavior:allowingOptionalLocalPersistence:", v12, 0));
  -[CAMMutablePanoramaCaptureRequest setTemporaryPersistenceOptions:](v6, "setTemporaryPersistenceOptions:", -[CAMViewfinderViewController _temporaryPersistenceOptionsForBehavior:](self, "_temporaryPersistenceOptionsForBehavior:", v12));
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMMutablePanoramaCaptureRequest setPhotoEncodingBehavior:](v6, "setPhotoEncodingBehavior:", objc_msgSend(v13, "photoEncodingBehavior"));
  if (objc_msgSend(v13, "sharedLibraryEnabled"))
  {
    v27 = v8;
    -[CAMViewfinderViewController _librarySelectionController](self, "_librarySelectionController");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMMutablePanoramaCaptureRequest setSharedLibraryMode:](v6, "setSharedLibraryMode:", objc_msgSend(v14, "sharedLibraryMode"));

    if (objc_msgSend(v10, "isInternalInstall"))
    {
      -[CAMViewfinderViewController _librarySelectionController](self, "_librarySelectionController");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "librarySelectionDiagnostics");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMMutablePanoramaCaptureRequest setSharedLibraryDiagnostics:](v6, "setSharedLibraryDiagnostics:", v16);

    }
    v8 = v27;
    if (objc_msgSend(v10, "peopleProximityPersistenceSupported"))
    {
      -[CAMViewfinderViewController _librarySelectionController](self, "_librarySelectionController");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "acquiredSignalResults");
      v26 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v26, "identitiesInProximity");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      CAMLibrarySelectionIdentityContactIdentifiersForIdentities(v18);
      v19 = v9;
      v20 = v7;
      v21 = v4;
      v22 = v3;
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMMutablePanoramaCaptureRequest setContactIDsInProximity:](v6, "setContactIDsInProximity:", v23);

      v3 = v22;
      v4 = v21;
      v7 = v20;
      v9 = v19;

      v8 = v27;
    }
  }
  -[CAMViewfinderViewController _updateOriginForRequest:](self, "_updateOriginForRequest:", v6, v26);
  -[CAMMutablePanoramaCaptureRequest setPressType:](v6, "setPressType:", -[CAMViewfinderViewController _currentlyPressedButton](self, "_currentlyPressedButton"));
  -[CAMViewfinderViewController _generateAnalyticsCaptureEventWithRequest:burst:](self, "_generateAnalyticsCaptureEventWithRequest:burst:", v6, 0);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMMutablePanoramaCaptureRequest setAnalyticsEvent:](v6, "setAnalyticsEvent:", v24);

  return v6;
}

- (BOOL)_startCapturingPanoramaWithRequest:(id)a3
{
  id v4;
  void *v5;
  char v6;
  id v7;
  NSObject *v8;
  void *v9;
  id v11;

  v4 = a3;
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = 0;
  v6 = objc_msgSend(v5, "startCapturingPanoramaWithRequest:error:", v4, &v11);
  v7 = v11;
  if ((v6 & 1) != 0)
  {
    -[CAMViewfinderViewController _updateUIForCapturing:animated:](self, "_updateUIForCapturing:animated:", 1, 1);
    -[CAMViewfinderViewController _analyticsSessionEvent](self, "_analyticsSessionEvent");
    v8 = objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSObject didCaptureWithRequest:currentConfiguration:](v8, "didCaptureWithRequest:currentConfiguration:", v4, v9);

  }
  else
  {
    v8 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      -[CAMViewfinderViewController _startCapturingPanoramaWithRequest:].cold.1();
  }

  return v6;
}

- (BOOL)_stopCapturingPanorama
{
  void *v3;
  int v4;
  _BOOL4 v5;

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "stopCapturingPanoramaInterrupted:", 0);
  -[CAMViewfinderViewController _updateUIForCapturing:animated:](self, "_updateUIForCapturing:animated:", 0, 1);
  v5 = -[CAMViewfinderViewController isDisablingAdditionalCaptures](self, "isDisablingAdditionalCaptures");
  if (v4 && v5)
    -[CAMViewfinderViewController _setPreventingAdditionalCaptures:](self, "_setPreventingAdditionalCaptures:", 1);

  return v4;
}

- (void)panoramaRequestDidStartCapturing:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  void *v9;

  v4 = a3;
  -[CAMViewfinderViewController _beginDisablingInterfaceAutorotation](self, "_beginDisablingInterfaceAutorotation");
  -[CAMViewfinderViewController _idleController](self, "_idleController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "panoramaRequestDidStartCapturing:", v4);
  -[CAMViewfinderViewController _panoramaViewController](self, "_panoramaViewController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "analyticsCaptureEvent");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    v8 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      -[CAMViewfinderViewController panoramaRequestDidStartCapturing:].cold.1();

  }
  objc_msgSend(v4, "analyticsEvent");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setAnalyticsCaptureEvent:", v9);

}

- (void)panoramaRequest:(id)a3 didGeneratePaintingStatus:(id)a4
{
  id v5;
  id v6;

  v5 = a4;
  -[CAMViewfinderViewController _panoramaViewController](self, "_panoramaViewController");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "updateWithStatus:", v5);

}

- (void)panoramaRequestDidStopCapturing:(id)a3 interrupted:(BOOL)a4
{
  _BOOL8 v4;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v4 = a4;
  v10 = a3;
  -[CAMViewfinderViewController _panoramaViewController](self, "_panoramaViewController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "startProcessingPanorama");
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v7, "isCapturingPanorama") & 1) == 0)
  {
    objc_msgSend(v6, "setAnalyticsCaptureEvent:", 0);
    -[CAMViewfinderViewController _idleController](self, "_idleController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "panoramaRequestDidStopCapturing:interrupted:", v10, v4);
    -[CAMViewfinderViewController _updateUIForCapturing:animated:](self, "_updateUIForCapturing:animated:", 0, 1);
    if (v4)
    {
      -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "resetAnimated:", 1);

    }
    if (-[CAMViewfinderViewController isDisablingAdditionalCaptures](self, "isDisablingAdditionalCaptures"))
      -[CAMViewfinderViewController _setPreventingAdditionalCaptures:](self, "_setPreventingAdditionalCaptures:", 1);
    -[CAMViewfinderViewController _endDisablingInterfaceAutorotation](self, "_endDisablingInterfaceAutorotation");

  }
}

- (void)panoramaRequestDidCompleteCapture:(id)a3 withResponse:(id)a4 error:(id)a5
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  v13 = a3;
  v8 = a4;
  v9 = a5;
  -[CAMViewfinderViewController _panoramaViewController](self, "_panoramaViewController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "finishedProcessingPanorama");
  -[CAMViewfinderViewController _updateImageWellWithStillImageResponse:forRequest:error:](self, "_updateImageWellWithStillImageResponse:forRequest:error:", v8, v13, v9);

  if (v9)
  {
    if (-[CAMViewfinderViewController isDisablingAdditionalCaptures](self, "isDisablingAdditionalCaptures"))
      -[CAMViewfinderViewController _setPreventingAdditionalCaptures:](self, "_setPreventingAdditionalCaptures:", 0);
  }
  else
  {
    -[CAMViewfinderViewController _cameraRollController](self, "_cameraRollController");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "processTransientAssetUpdate:preventingInsertion:persistenceOptions:", v8, 0, objc_msgSend(v13, "persistenceOptions"));
    objc_msgSend(v13, "analyticsEvent");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "populateFromStillImageCaptureResponse:", v8);
    objc_msgSend(v12, "publish");

  }
}

- (void)panoramaRequestDidCompleteLocalPersistence:(id)a3 withResponse:(id)a4 error:(id)a5
{
  id v7;
  id v8;
  uint64_t v9;
  id v10;

  if (!a5)
  {
    v7 = a4;
    v8 = a3;
    -[CAMViewfinderViewController _cameraRollController](self, "_cameraRollController");
    v10 = (id)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "persistenceOptions");

    objc_msgSend(v10, "processTransientAssetUpdate:preventingInsertion:persistenceOptions:", v7, 0, v9);
  }
}

- (void)panoramaRequestDidCompleteRemotePersistence:(id)a3 withResponse:(id)a4 error:(id)a5
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  if (!a5)
  {
    v7 = a4;
    v8 = a3;
    objc_msgSend(v7, "persistenceUUID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v7, "sessionIdentifier");
    -[CAMViewfinderViewController _cameraRollController](self, "_cameraRollController");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v8, "persistenceOptions");

    objc_msgSend(v11, "processTransientAssetUpdate:preventingInsertion:persistenceOptions:", v7, 1, v12);
    objc_msgSend(v11, "didPersistAssetWithUUID:captureSession:", v9, v10);

  }
  -[CAMViewfinderViewController _updateDiskSpaceAlertViewVisibilityAnimated:](self, "_updateDiskSpaceAlertViewVisibilityAnimated:", 1, a4);
}

- (BOOL)_isCapturingTimelapse
{
  void *v3;
  char v4;

  if (-[CAMViewfinderViewController _currentMode](self, "_currentMode") != 5)
    return 0;
  -[CAMViewfinderViewController _timelapseController](self, "_timelapseController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isCapturing");

  return v4;
}

- (BOOL)_startTimelapse
{
  void *v3;
  void *v4;
  CAMViewfinderViewController *v5;
  int v6;
  void *v7;
  void *v8;

  -[CAMViewfinderViewController _timelapseController](self, "_timelapseController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _cameraRollController](self, "_cameraRollController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "delegate");
  v5 = (CAMViewfinderViewController *)objc_claimAutoreleasedReturnValue();

  if (v5 != self)
    objc_msgSend(v3, "setDelegate:", self);
  v6 = objc_msgSend(v3, "startCapturingWithCaptureDevice:captureSession:", -[CAMViewfinderViewController _currentDevice](self, "_currentDevice"), objc_msgSend(v4, "sessionIdentifier"));
  if (v6)
  {
    -[CAMViewfinderViewController _analyticsSessionEvent](self, "_analyticsSessionEvent");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "didCaptureTimelapseWithConfiguration:", v8);

  }
  return v6;
}

- (BOOL)_stopTimelapse
{
  void *v2;
  char v3;

  -[CAMViewfinderViewController _timelapseController](self, "_timelapseController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "stopCapturingWithReasons:", 1);

  return v3;
}

- (void)timelapseController:(id)a3 startedWithCaptureOrientation:(int64_t)a4
{
  void *v5;
  id v6;

  -[CAMViewfinderViewController _updateUIForCapturing:animated:](self, "_updateUIForCapturing:animated:", 1, 1);
  -[CAMPreviewViewController notifyWillStartCapturing](self->__previewViewController, "notifyWillStartCapturing");
  -[CAMViewfinderViewController _idleController](self, "_idleController");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "timelapseRequestDidStartCapturing");
  -[CAMViewfinderViewController _generateAnalyticsCaptureEventForTimelapse](self, "_generateAnalyticsCaptureEventForTimelapse");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController set_timelapseAnalyticsEvent:](self, "set_timelapseAnalyticsEvent:", v5);

}

- (void)timelapseControllerStopped:(id)a3
{
  _BOOL8 v4;
  void *v5;
  id v6;

  -[CAMViewfinderViewController _updateUIForCapturing:animated:](self, "_updateUIForCapturing:animated:", 0, 1);
  -[CAMPreviewViewController notifyDidStopCapture](self->__previewViewController, "notifyDidStopCapture");
  -[CAMViewfinderViewController _idleController](self, "_idleController");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "timelapseRequestDidStopCapturing");
  v4 = +[CAMApplication appOrPlugInState](CAMApplication, "appOrPlugInState") != 2;
  -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "resetAnimated:", v4);

  -[CAMViewfinderViewController set_timelapseAnalyticsEvent:](self, "set_timelapseAnalyticsEvent:", 0);
}

- (void)timelapseController:(id)a3 generatedPlaceholderResult:(id)a4 withThumbnailImage:(id)a5 forAssetUUID:(id)a6 inCaptureSession:(unsigned __int16)a7
{
  uint64_t v7;
  id v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;

  v7 = a7;
  v20 = a3;
  v12 = a4;
  v13 = a5;
  v14 = a6;
  if (v12)
  {
    -[CAMViewfinderViewController _cameraRollController](self, "_cameraRollController");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "processTransientAssetUpdate:preventingInsertion:persistenceOptions:", v12, 0, 2);

  }
  if (v13)
  {
    -[CAMViewfinderViewController _cameraRollController](self, "_cameraRollController");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v16, "isCaptureSessionCurrent:", v7))
    {
      objc_msgSend(v16, "willPersistAssetWithUUID:captureSession:", v14, v7);
      -[CAMViewfinderViewController _presentImageWellImage:uuid:animated:](self, "_presentImageWellImage:uuid:animated:", v13, v14, 1);
      -[CAMViewfinderViewController _remoteShutterController](self, "_remoteShutterController");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "sendThumbnailImage:isVideo:", v13, 1);

    }
    -[CAMViewfinderViewController _timelapseAnalyticsEvent](self, "_timelapseAnalyticsEvent");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "timelapseDuration");
    objc_msgSend(v18, "populateDuration:");

    -[CAMViewfinderViewController _timelapseAnalyticsEvent](self, "_timelapseAnalyticsEvent");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "publish");

  }
  else if (!-[CAMViewfinderViewController _isCapturingTimelapse](self, "_isCapturingTimelapse"))
  {
    -[CAMImageWell recoverFromFailedThumbnailUpdate](self->__imageWell, "recoverFromFailedThumbnailUpdate");
  }

}

- (void)timelapseController:(id)a3 persistedPlaceholderResult:(id)a4 error:(id)a5
{
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;

  if (!a5)
  {
    v6 = a4;
    objc_msgSend(v6, "assetUUID");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "sessionIdentifier");
    -[CAMViewfinderViewController _cameraRollController](self, "_cameraRollController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "processTransientAssetUpdate:preventingInsertion:persistenceOptions:", v6, 1, 2);

    objc_msgSend(v9, "didPersistAssetWithUUID:captureSession:", v7, v8);
  }
  -[CAMViewfinderViewController _updateDiskSpaceAlertViewVisibilityAnimated:](self, "_updateDiskSpaceAlertViewVisibilityAnimated:", 1, a4);
}

- (void)_createAnalyticsSessionEventIfNeeded
{
  void *v3;
  int64_t v4;
  int64_t v5;
  CAMAnalyticsSessionEvent *v6;
  void *v7;
  void *v8;
  CAMAnalyticsSessionEvent *v9;
  id v10;

  -[CAMViewfinderViewController _analyticsSessionEvent](self, "_analyticsSessionEvent");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
  {
    v4 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
    v5 = -[CAMViewfinderViewController _currentDevice](self, "_currentDevice");
    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v10 = (id)objc_claimAutoreleasedReturnValue();
    v6 = [CAMAnalyticsSessionEvent alloc];
    -[CAMViewfinderViewController _supportedCaptureModes](self, "_supportedCaptureModes");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _callStatusMonitor](self, "_callStatusMonitor");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[CAMAnalyticsSessionEvent initWithCapabilities:availableCaptureModes:currentCaptureMode:currentCaptureDevice:callStatusMonitor:](v6, "initWithCapabilities:availableCaptureModes:currentCaptureMode:currentCaptureDevice:callStatusMonitor:", v10, v7, v4, v5, v8);
    -[CAMViewfinderViewController _setAnalyticsSessionEvent:](self, "_setAnalyticsSessionEvent:", v9);

  }
}

- (void)generateAnalyticsForLaunchWithShortCutItem:(id)a3
{
  id v4;

  -[CAMViewfinderViewController _createAnalyticsSessionEventIfNeeded](self, "_createAnalyticsSessionEventIfNeeded", a3);
  -[CAMViewfinderViewController _analyticsSessionEvent](self, "_analyticsSessionEvent");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "didLaunchShortCutItemWithMode:device:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevice](self, "_currentDevice"));

}

- (BOOL)handleURLIfNeeded:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  BOOL v7;
  void *v8;
  NSObject *v9;
  unint64_t v10;
  unint64_t v11;
  __CFString *v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  _BOOL4 v21;
  void *v22;
  __CFString *v24;
  uint8_t buf[4];
  __CFString *v26;
  __int16 v27;
  __CFString *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (objc_msgSend(v4, "isConfigurationURL"))
  {
    objc_msgSend(v4, "configurationRequest");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    v7 = v5 != 0;
    if (v5)
    {
      if (objc_msgSend(v5, "wantsQRCodeForSession"))
      {
        +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "setForceEnableQRBanners:", 1);
        v9 = os_log_create("com.apple.camera", "Camera");
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1DB760000, v9, OS_LOG_TYPE_DEFAULT, "Launched with a URL request to force enable QR scanning", buf, 2u);
        }

      }
      v10 = objc_msgSend(v6, "requestedCaptureMode");
      if (v10 > 9)
        v24 = 0;
      else
        v24 = off_1EA32B058[v10];
      v11 = objc_msgSend(v6, "requestedCaptureDevice");
      if (v11 > 0xB)
        v12 = 0;
      else
        v12 = off_1EA32ACF8[v11];
      v13 = objc_msgSend(v6, "requestedCaptureMode");
      v14 = -[CAMViewfinderViewController currentCaptureMode](self, "currentCaptureMode");
      v15 = objc_msgSend(v6, "requestedCaptureDevice") - 1;
      if (v15 > 0xA)
        v16 = 0;
      else
        v16 = qword_1DB9A53B8[v15];
      v17 = -[CAMViewfinderViewController currentCaptureDevice](self, "currentCaptureDevice") - 1;
      if (v17 > 0xA)
        v18 = 0;
      else
        v18 = qword_1DB9A53B8[v17];
      if (-[CAMViewfinderViewController isRecording](self, "isRecording"))
      {
        v19 = os_log_create("com.apple.camera", "Camera");
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138543618;
          v26 = v24;
          v27 = 2114;
          v28 = v12;
          _os_log_impl(&dword_1DB760000, v19, OS_LOG_TYPE_DEFAULT, "Ignoring URL request mode:%{public}@ device:%{public}@ because device is recording", buf, 0x16u);
        }

      }
      else
      {
        v20 = os_log_create("com.apple.camera", "Camera");
        v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
        if (v13 == v14 && v16 == v18)
        {
          if (v21)
          {
            *(_DWORD *)buf = 138543618;
            v26 = v24;
            v27 = 2114;
            v28 = v12;
            _os_log_impl(&dword_1DB760000, v20, OS_LOG_TYPE_DEFAULT, "Ignoring URL request since already configured for mode:%{public}@ device:%{public}@", buf, 0x16u);
          }

        }
        else
        {
          if (v21)
          {
            *(_DWORD *)buf = 138543618;
            v26 = v24;
            v27 = 2114;
            v28 = v12;
            _os_log_impl(&dword_1DB760000, v20, OS_LOG_TYPE_DEFAULT, "Launched with a URL request for mode:%{public}@ device:%{public}@", buf, 0x16u);
          }

          -[CAMViewfinderViewController changeToMode:device:](self, "changeToMode:device:", objc_msgSend(v6, "requestedCaptureMode"), objc_msgSend(v6, "requestedCaptureDevice"));
        }
        -[CAMViewfinderViewController generateAnalyticsForLaunchWithURLConfigurationRequest:](self, "generateAnalyticsForLaunchWithURLConfigurationRequest:", v6);
      }
      -[CAMViewfinderViewController _cameraRollController](self, "_cameraRollController");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v22, "isCameraRollViewControllerPresented"))
        objc_msgSend(v22, "dismissCameraRollViewControllerForced:animated:", 1, 1);

    }
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

- (void)generateAnalyticsForLaunchWithURLConfigurationRequest:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  -[CAMViewfinderViewController _createAnalyticsSessionEventIfNeeded](self, "_createAnalyticsSessionEventIfNeeded");
  -[CAMViewfinderViewController _analyticsSessionEvent](self, "_analyticsSessionEvent");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "didLaunchWithURLConfigurationRequest:", v4);

}

- (void)_populateZoomForCaptureEvent:(id)a3
{
  void *v4;
  int64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  void *v9;
  id v10;

  v10 = a3;
  -[CAMViewfinderViewController _zoomControl](self, "_zoomControl");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = -[CAMViewfinderViewController _lastZoomInteractionType](self, "_lastZoomInteractionType");
  if (v4)
  {
    v6 = objc_msgSend(v4, "zoomButtonContentType");
    switch(v6)
    {
      case 2:
        goto LABEL_5;
      case 1:
        objc_msgSend(v10, "populateZoomFromZoomButtonSymbol:zoomInteractionType:", objc_msgSend(v4, "zoomButtonSymbol"), v5);
        break;
      case 0:
LABEL_5:
        objc_msgSend(v4, "displayZoomValue");
        v8 = v7;
        objc_msgSend(v4, "zoomPoints");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "populateZoomFromDisplayZoomValue:zoomPoints:zoomInteractionType:", v9, v5, v8);

        break;
    }
  }
  else
  {
    -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
    objc_msgSend(v10, "populateZoomFromDisplayZoomValue:zoomPoints:zoomInteractionType:", 0, v5);
  }

}

- (id)_generateAnalyticsCaptureEventWithRequest:(id)a3 burst:(BOOL)a4
{
  _BOOL8 v4;
  id v6;
  void *v7;
  CAMAnalyticsCaptureEvent *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  double v18;
  double v19;
  double v20;
  int64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void *v38;

  v4 = a4;
  v6 = a3;
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = -[CAMAnalyticsCaptureEvent initWithGraphConfiguration:outputToExternalStorage:]([CAMAnalyticsCaptureEvent alloc], "initWithGraphConfiguration:outputToExternalStorage:", v7, -[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled"));
  -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v6, "type");
  if (v10 == 2)
  {
    -[CAMAnalyticsCaptureEvent populateFromPanoramaCaptureRequest:](v8, "populateFromPanoramaCaptureRequest:", v6);
    -[CAMViewfinderViewController _panoramaViewController](self, "_panoramaViewController");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "panoramaView");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMAnalyticsCaptureEvent populatePanoramaDirection:](v8, "populatePanoramaDirection:", objc_msgSend(v12, "direction"));

  }
  else if (v10 == 1)
  {
    +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMAnalyticsCaptureEvent populateFromVideoCaptureRequest:preferences:](v8, "populateFromVideoCaptureRequest:preferences:", v6, v11);
  }
  else
  {
    if (v10)
      goto LABEL_8;
    +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMAnalyticsCaptureEvent populateFromStillImageCaptureRequest:burst:preferences:](v8, "populateFromStillImageCaptureRequest:burst:preferences:", v6, v4, v11);
  }

LABEL_8:
  -[CAMViewfinderViewController _populateZoomForCaptureEvent:](self, "_populateZoomForCaptureEvent:", v8);
  -[CAMAnalyticsCaptureEvent populateDesiredFlashMode:desiredLivePhotoMode:desiredHDRMode:timerDuration:](v8, "populateDesiredFlashMode:desiredLivePhotoMode:desiredHDRMode:timerDuration:", -[CAMViewfinderViewController _desiredFlashMode](self, "_desiredFlashMode"), -[CAMViewfinderViewController _desiredLivePhotoMode](self, "_desiredLivePhotoMode"), -[CAMViewfinderViewController _desiredHDRMode](self, "_desiredHDRMode"), -[CAMViewfinderViewController _resolvedTimerDuration](self, "_resolvedTimerDuration"));
  -[CAMAnalyticsCaptureEvent populateDesiredTorchMode:](v8, "populateDesiredTorchMode:", -[CAMViewfinderViewController _desiredTorchMode](self, "_desiredTorchMode"));
  objc_msgSend(v9, "baselineExposureBias");
  v14 = v13;
  objc_msgSend(v9, "cachedExposureTargetBias");
  v16 = v15;
  objc_msgSend(v9, "totalExposureBias");
  LODWORD(v18) = v17;
  LODWORD(v19) = v14;
  LODWORD(v20) = v16;
  -[CAMAnalyticsCaptureEvent populateExposureSliderBias:exposureTapAndBias:totalExposureBias:](v8, "populateExposureSliderBias:exposureTapAndBias:totalExposureBias:", v19, v20, v18);
  v21 = -[CAMViewfinderViewController _shallowDepthOfFieldStatus](self, "_shallowDepthOfFieldStatus");
  -[CAMViewfinderViewController _portraitModeIntensityValue](self, "_portraitModeIntensityValue");
  v23 = v22;
  -[CAMViewfinderViewController _portraitModeApertureValue](self, "_portraitModeApertureValue");
  v25 = v24;
  -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
  v38 = v6;
  -[CAMAnalyticsCaptureEvent populatePortraitStatus:lightingEffectIntensity:apertureValue:zoomFactor:isDepthSuggestionAllowed:request:](v8, "populatePortraitStatus:lightingEffectIntensity:apertureValue:zoomFactor:isDepthSuggestionAllowed:request:", v21, -[CAMViewfinderViewController _isDepthSuggestionAllowedForCurrentConfigurationIsBurst:](self, "_isDepthSuggestionAllowedForCurrentConfigurationIsBurst:", v4), v6, v23, v25, v26);
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMAnalyticsCaptureEvent populateDesiredNightModeControlMode:resolvedNightModeControlMode:resolvedNightModeMode:nightModeStatus:](v8, "populateDesiredNightModeControlMode:resolvedNightModeControlMode:resolvedNightModeMode:nightModeStatus:", -[CAMViewfinderViewController _desiredLowLightControlMode](self, "_desiredLowLightControlMode"), -[CAMViewfinderViewController _resolvedLowLightControlMode](self, "_resolvedLowLightControlMode"), -[CAMViewfinderViewController _resolvedLowLightMode](self, "_resolvedLowLightMode"), objc_msgSend(v27, "lowLightStatus"));
  v28 = objc_msgSend(v7, "mode");
  v29 = objc_msgSend(v7, "devicePosition");
  v30 = -[CAMViewfinderViewController _currentPhotoFormat](self, "_currentPhotoFormat");
  if (!+[CAMConflictingControlConfiguration shouldDisableMacroForLockedPortraitForMode:devicePosition:photoFormat:optionalDepthEffectEnabled:](CAMConflictingControlConfiguration, "shouldDisableMacroForLockedPortraitForMode:devicePosition:photoFormat:optionalDepthEffectEnabled:", v28, v29, v30, v31, -[CAMViewfinderViewController _depthEffectEnabledFromSuggestion](self, "_depthEffectEnabledFromSuggestion")))
  {
    v32 = objc_msgSend(v27, "isAutoMacroSuggested");
    if ((_DWORD)v32)
      v33 = objc_msgSend(v27, "isAutoMacroActive");
    else
      v33 = 0;
    -[CAMAnalyticsCaptureEvent populateDesiredMacroMode:isMacroCapture:isMacroSuggested:](v8, "populateDesiredMacroMode:isMacroCapture:isMacroSuggested:", -[CAMViewfinderViewController _desiredMacroMode](self, "_desiredMacroMode"), v33, v32);
  }
  if (!-[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled"))
  {
    -[CAMViewfinderViewController _librarySelectionController](self, "_librarySelectionController");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMAnalyticsCaptureEvent populateSharedLibraryMode:](v8, "populateSharedLibraryMode:", objc_msgSend(v34, "sharedLibraryMode"));

  }
  -[CAMAnalyticsCaptureEvent populateObjectResultsWithNumberOfFaces:numberOfCats:numberOfDogs:](v8, "populateObjectResultsWithNumberOfFaces:numberOfCats:numberOfDogs:", -[CAMViewfinderViewController _faceCount](self, "_faceCount"), -[CAMViewfinderViewController _catCount](self, "_catCount"), -[CAMViewfinderViewController _dogCount](self, "_dogCount"));
  -[CAMViewfinderViewController _motionController](self, "_motionController");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v36 = objc_msgSend(v35, "deviceOrientation");

  -[CAMAnalyticsCaptureEvent populateDeviceOrientation:isDeviceOrientationLocked:](v8, "populateDeviceOrientation:isDeviceOrientationLocked:", v36, CAMIsDeviceOrientationLocked());
  return v8;
}

- (id)_generateAnalyticsCaptureEventForTimelapse
{
  CAMAnalyticsCaptureEvent *v3;
  void *v4;
  CAMAnalyticsCaptureEvent *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  void *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  double v21;
  double v22;
  double v23;

  v3 = [CAMAnalyticsCaptureEvent alloc];
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = -[CAMAnalyticsCaptureEvent initWithGraphConfiguration:outputToExternalStorage:](v3, "initWithGraphConfiguration:outputToExternalStorage:", v4, 0);

  -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _motionController](self, "_motionController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "captureOrientation");

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v9, "device") - 1;
  if (v11 > 0xA)
    v12 = 0;
  else
    v12 = qword_1DB9A53B8[v11];
  v13 = objc_msgSend(v10, "mirrorCameraCapturesForDevicePosition:mode:", v12, 5);

  v14 = -[CAMViewfinderViewController _currentCaptureRequestOrigin](self, "_currentCaptureRequestOrigin");
  objc_msgSend(MEMORY[0x1E0C99D68], "now");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMAnalyticsCaptureEvent populateForTimelapseCaptureOrientation:captureMirrored:origin:pressType:startDate:](v5, "populateForTimelapseCaptureOrientation:captureMirrored:origin:pressType:startDate:", v8, v13, v14, -1, v15);

  -[CAMViewfinderViewController _populateZoomForCaptureEvent:](self, "_populateZoomForCaptureEvent:", v5);
  objc_msgSend(v6, "baselineExposureBias");
  v17 = v16;
  objc_msgSend(v6, "cachedExposureTargetBias");
  v19 = v18;
  objc_msgSend(v6, "totalExposureBias");
  LODWORD(v21) = v20;
  LODWORD(v22) = v17;
  LODWORD(v23) = v19;
  -[CAMAnalyticsCaptureEvent populateExposureSliderBias:exposureTapAndBias:totalExposureBias:](v5, "populateExposureSliderBias:exposureTapAndBias:totalExposureBias:", v22, v23, v21);

  return v5;
}

- (void)_setTimerDurationAndUpdateUI:(int64_t)a3 animated:(BOOL)a4
{
  _BOOL8 v4;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  v4 = a4;
  -[CAMTimerButton setDuration:](self->__timerButton, "setDuration:");
  -[CAMViewfinderViewController _setResolvedTimerDuration:](self, "_setResolvedTimerDuration:", a3);
  -[CAMViewfinderViewController _controlDrawer](self, "_controlDrawer");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "timerButton");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setTimerDuration:", a3);

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "controlStatusBar");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "timerIndicator");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "setTimerDuration:", a3);

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updateControlStatusBarContentsVisibilityForGraphConfiguration:animated:](self, "_updateControlStatusBarContentsVisibilityForGraphConfiguration:animated:", v12, v4);

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v13 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updateShutterButtonForGraphConfiguration:isCapturing:animated:](self, "_updateShutterButtonForGraphConfiguration:isCapturing:animated:", v13, -[CAMViewfinderViewController _isCapturing](self, "_isCapturing"), v4);

}

- (void)_setCapturingFromTimer:(BOOL)a3
{
  if (self->__capturingFromTimer != a3)
  {
    self->__capturingFromTimer = a3;
    -[CAMViewfinderViewController _updateEnabledControlsWithReason:](self, "_updateEnabledControlsWithReason:", CFSTR("Capturing from timer"));
  }
}

- (void)_startCountdownForCaptureTimer
{
  void *v3;
  void *v4;

  -[CAMViewfinderViewController _librarySelectionController](self, "_librarySelectionController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController set_cachedSharedLibraryTimerState:](self, "set_cachedSharedLibraryTimerState:", objc_msgSend(v3, "sharedLibraryMode"));

  -[CAMViewfinderViewController _setCapturingFromTimer:](self, "_setCapturingFromTimer:", 1);
  -[CAMViewfinderViewController updateControlVisibilityAnimated:](self, "updateControlVisibilityAnimated:", 1);
  -[CAMViewfinderViewController _setupAndStartSynchronizedCaptureTimerDelegate](self, "_setupAndStartSynchronizedCaptureTimerDelegate");
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updateShutterButtonForGraphConfiguration:isCapturing:animated:](self, "_updateShutterButtonForGraphConfiguration:isCapturing:animated:", v4, 1, 1);

  -[CAMViewfinderViewController _indicateCaptureTimerProgressUsingTorch](self, "_indicateCaptureTimerProgressUsingTorch");
}

- (void)_stopCountdownForCaptureTimer
{
  unint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  unint64_t v7;
  NSObject *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = -[CAMViewfinderViewController _remainingCaptureTimerTicks](self, "_remainingCaptureTimerTicks");
  -[CAMViewfinderViewController _setCapturingFromTimer:](self, "_setCapturingFromTimer:", 0);
  -[CAMViewfinderViewController _teardownSynchronizedCaptureTimerDelegate](self, "_teardownSynchronizedCaptureTimerDelegate");
  -[CAMViewfinderViewController _teardownBurstTimer](self, "_teardownBurstTimer");
  -[CAMViewfinderViewController _stopCapturingBurst](self, "_stopCapturingBurst");
  if (-[CAMViewfinderViewController _resetTimerDurationAfterDelayedCapture](self, "_resetTimerDurationAfterDelayedCapture"))
  {
    -[CAMViewfinderViewController _setTimerDurationAndUpdateUI:animated:](self, "_setTimerDurationAndUpdateUI:animated:", 0, 1);
  }
  -[CAMViewfinderViewController _setResetTimerDurationAfterDelayedCapture:](self, "_setResetTimerDurationAfterDelayedCapture:", 0);
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updateShutterButtonForGraphConfiguration:isCapturing:animated:](self, "_updateShutterButtonForGraphConfiguration:isCapturing:animated:", v4, 0, 1);

  if (!-[CAMViewfinderViewController _isCurrentLowLightCaptureCancelable](self, "_isCurrentLowLightCaptureCancelable"))
  {
    -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "resetAnimated:", 1);

  }
  -[CAMViewfinderViewController _librarySelectionController](self, "_librarySelectionController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "sharedLibraryMode");

  if (-[CAMViewfinderViewController _cachedSharedLibraryTimerState](self, "_cachedSharedLibraryTimerState") != v7)
  {
    v8 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      CAMSharedLibraryModeDescription(v7);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138543362;
      v12 = v9;
      _os_log_impl(&dword_1DB760000, v8, OS_LOG_TYPE_DEFAULT, "Updating library selection mode to %{public}@ after timer capture ended", (uint8_t *)&v11, 0xCu);

    }
    -[CAMViewfinderViewController librarySelectionDidChangeSharedLibraryMode:](self, "librarySelectionDidChangeSharedLibraryMode:", v7);
  }
  -[CAMViewfinderViewController updateControlVisibilityAnimated:](self, "updateControlVisibilityAnimated:", 1);
  -[CAMViewfinderViewController _stopCaptureTimerProgressUsingTorch](self, "_stopCaptureTimerProgressUsingTorch");
  if (v3)
  {
    -[CAMViewfinderViewController _remoteShutterController](self, "_remoteShutterController");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "countdownCanceled");

    -[CAMViewfinderViewController _cancelCTMCapture](self, "_cancelCTMCapture");
  }
}

- (BOOL)_shouldUseBurstForCaptureTimer
{
  void *v3;
  void *v4;
  int64_t v5;
  int v6;
  int64_t v7;
  int v8;
  int v9;
  int64_t v10;
  char v11;
  unint64_t v12;
  void *v13;
  char v14;
  int v15;
  int v16;
  char v17;
  BOOL v18;
  int64_t v19;
  int64_t v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  void *v24;
  void *v26;
  int64_t v27;
  int v28;

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = -[CAMViewfinderViewController _currentDevice](self, "_currentDevice");
  v5 = -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition");
  v6 = objc_msgSend(v4, "isFlashSupportedForDevicePosition:", v5);
  v7 = -[CAMViewfinderViewController _resolvedFlashMode](self, "_resolvedFlashMode");
  if (-[CAMViewfinderViewController _resolvedFlashMode](self, "_resolvedFlashMode") == 2)
    v8 = objc_msgSend(v3, "isFlashActive");
  else
    v8 = 0;
  v9 = objc_msgSend(v4, "isHDRSupportedForDevicePosition:", v5, v3);
  v10 = -[CAMViewfinderViewController _resolvedHDRMode](self, "_resolvedHDRMode");
  v11 = objc_msgSend(v4, "isLivePhotoSupportedForDevicePosition:", v5);
  v12 = -[CAMViewfinderViewController _resolvedLivePhotoMode](self, "_resolvedLivePhotoMode") - 1;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = objc_msgSend(v13, "isBurstSupportedForMode:device:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), v27);

  v14 = 0;
  if (v7 == 1)
    v15 = 1;
  else
    v15 = v8;
  v16 = v6 & v15;
  if (v9 && v10 == 1)
    v14 = objc_msgSend(v4, "isSmartHDRSupported") ^ 1;
  if (v12 < 2)
    v17 = v11;
  else
    v17 = 0;
  v18 = -[CAMViewfinderViewController _isLowLightActiveForCurrentSettings](self, "_isLowLightActiveForCurrentSettings");
  v19 = -[CAMViewfinderViewController _resolvedRAWMode](self, "_resolvedRAWMode");
  v20 = -[CAMViewfinderViewController _resolvedPhotoResolution](self, "_resolvedPhotoResolution");
  v21 = -[CAMViewfinderViewController isDisablingMultipleCaptureFeatures](self, "isDisablingMultipleCaptureFeatures");
  v22 = -[CAMViewfinderViewController _shouldUsePhotoModePortraitEffect](self, "_shouldUsePhotoModePortraitEffect");
  v23 = 0;
  if (((v28 ^ 1 | v16) & 1) != 0 || (v14 & 1) != 0 || (v17 & 1) != 0 || v21 || v18)
  {
    v24 = v26;
  }
  else
  {
    v24 = v26;
    if (v19 != 1)
      v23 = v20 != 3 && !v22;
  }

  return v23;
}

- (void)_setupAndStartSynchronizedCaptureTimerDelegate
{
  void *v3;
  CAMAnimationDelegate *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  void *v8;
  id v9;
  id v10;
  id from;
  id location;

  -[CAMViewfinderViewController _synchronizedCaptureTimerDelegate](self, "_synchronizedCaptureTimerDelegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
    -[CAMViewfinderViewController _teardownSynchronizedCaptureTimerDelegate](self, "_teardownSynchronizedCaptureTimerDelegate");
  v4 = objc_alloc_init(CAMAnimationDelegate);
  -[CAMViewfinderViewController _setSynchronizedCaptureTimerDelegate:](self, "_setSynchronizedCaptureTimerDelegate:", v4);
  objc_initWeak(&location, self);
  objc_initWeak(&from, v4);
  v5 = MEMORY[0x1E0C809B0];
  v6 = 3221225472;
  v7 = __77__CAMViewfinderViewController__setupAndStartSynchronizedCaptureTimerDelegate__block_invoke;
  v8 = &unk_1EA32A4C8;
  objc_copyWeak(&v9, &location);
  objc_copyWeak(&v10, &from);
  -[CAMAnimationDelegate setCompletion:](v4, "setCompletion:", &v5);
  -[CAMViewfinderViewController _startSynchronizedCaptureTimerDelegate](self, "_startSynchronizedCaptureTimerDelegate", v5, v6, v7, v8);
  objc_destroyWeak(&v10);
  objc_destroyWeak(&v9);
  objc_destroyWeak(&from);
  objc_destroyWeak(&location);

}

void __77__CAMViewfinderViewController__setupAndStartSynchronizedCaptureTimerDelegate__block_invoke(uint64_t a1)
{
  id v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_synchronizedCaptureTimerDelegateFired:", v2);

}

- (void)_startSynchronizedCaptureTimerDelegate
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;

  -[CAMViewfinderViewController _synchronizedCaptureTimerDelegate](self, "_synchronizedCaptureTimerDelegate");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  v3 = -[CAMViewfinderViewController _resolvedTimerDuration](self, "_resolvedTimerDuration") - 1;
  if (v3 > 2)
    v4 = 0;
  else
    v4 = qword_1DB9A5240[v3];
  -[CAMViewfinderViewController _setRemainingCaptureTimerTicks:](self, "_setRemainingCaptureTimerTicks:", v4);
  -[CAMViewfinderViewController _timerIndicatorView](self, "_timerIndicatorView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v5)
  {
    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "timerIndicator");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  objc_msgSend(v5, "stopCountdown");
  objc_msgSend(v5, "resetWithNumberOfTicks:", v4);
  objc_msgSend(v5, "startCountdownWithAnimationDelegate:", v7);

}

- (void)_teardownSynchronizedCaptureTimerDelegate
{
  void *v3;
  id v4;

  -[CAMViewfinderViewController _synchronizedCaptureTimerDelegate](self, "_synchronizedCaptureTimerDelegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v4 = v3;
    -[CAMViewfinderViewController _setSynchronizedCaptureTimerDelegate:](self, "_setSynchronizedCaptureTimerDelegate:", 0);
    v3 = v4;
  }

}

- (void)_synchronizedCaptureTimerDelegateFired:(id)a3
{
  id v4;
  _BOOL4 v5;
  void *v6;
  unint64_t v7;
  _BOOL4 v8;
  char v9;
  char v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;

  v4 = a3;
  v5 = -[CAMViewfinderViewController _isCapturingFromTimer](self, "_isCapturingFromTimer");
  -[CAMViewfinderViewController _synchronizedCaptureTimerDelegate](self, "_synchronizedCaptureTimerDelegate");
  v16 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v5 || v16 != v4)
    goto LABEL_17;
  v7 = -[CAMViewfinderViewController _remainingCaptureTimerTicks](self, "_remainingCaptureTimerTicks") - 1;
  -[CAMViewfinderViewController _setRemainingCaptureTimerTicks:](self, "_setRemainingCaptureTimerTicks:", v7);
  v8 = -[CAMViewfinderViewController _shouldUseBurstForCaptureTimer](self, "_shouldUseBurstForCaptureTimer");
  v9 = objc_msgSend(v6, "isCapturingBurst");
  if (v8 && v7 == 1)
  {
    -[CAMViewfinderViewController _setupBurstTimerWithDelay:](self, "_setupBurstTimerWithDelay:", 0.6);
LABEL_11:
    -[CAMViewfinderViewController _timerIndicatorView](self, "_timerIndicatorView");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "decrement");

    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "timerIndicator");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "decrement");

    -[CAMViewfinderViewController _currentBurstTimer](self, "_currentBurstTimer");
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v14)
      -[CAMViewfinderViewController _indicateCaptureTimerProgressUsingTorch](self, "_indicateCaptureTimerProgressUsingTorch");
    goto LABEL_17;
  }
  if (v7)
    v10 = 1;
  else
    v10 = v9;
  if ((v10 & 1) != 0)
  {
    if (!v7)
      goto LABEL_17;
    goto LABEL_11;
  }
  -[CAMViewfinderViewController _setCurrentLowLightCaptureCancelable:](self, "_setCurrentLowLightCaptureCancelable:", -[CAMViewfinderViewController _isExpectedLowLightDurationCancelable](self, "_isExpectedLowLightDurationCancelable"));
  -[CAMViewfinderViewController _currentStillImageCaptureMomentSettings](self, "_currentStillImageCaptureMomentSettings");
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (v15)
    -[CAMViewfinderViewController _commitCTMCaptureWithType:](self, "_commitCTMCaptureWithType:", 1);
  else
    -[CAMViewfinderViewController _captureStillImageWithCurrentSettings](self, "_captureStillImageWithCurrentSettings");
  -[CAMViewfinderViewController _stopCountdownForCaptureTimer](self, "_stopCountdownForCaptureTimer");
LABEL_17:

}

- (void)_indicateCaptureTimerProgressUsingTorch
{
  void *v3;
  int64_t v4;
  id v5;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "isTorchPatternSupportedForDevicePosition:", -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition")))
  {
    -[CAMViewfinderViewController _torchPatternController](self, "_torchPatternController");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = -[CAMViewfinderViewController _resolvedTimerDuration](self, "_resolvedTimerDuration");
    if ((unint64_t)(v4 - 2) >= 2)
    {
      if (v4 != 1)
        goto LABEL_7;
    }
    else if (-[CAMViewfinderViewController _remainingCaptureTimerTicks](self, "_remainingCaptureTimerTicks") > 3)
    {
      objc_msgSend(v3, "blink");
LABEL_7:

      goto LABEL_8;
    }
    objc_msgSend(v3, "doubleBlink");
    goto LABEL_7;
  }
LABEL_8:

}

- (void)_stopCaptureTimerProgressUsingTorch
{
  void *v3;
  id v4;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "isTorchPatternSupportedForDevicePosition:", -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition")))
  {
    -[CAMViewfinderViewController _torchPatternController](self, "_torchPatternController");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stopPerformingPattern");

  }
}

- (void)setConfigurationDelegate:(id)a3
{
  id WeakRetained;
  $78F321C64E912E36442355423732DF83 *p_configurationDelegateFlags;
  id obj;

  obj = a3;
  WeakRetained = objc_loadWeakRetained((id *)&self->_configurationDelegate);

  if (WeakRetained != obj)
  {
    objc_storeWeak((id *)&self->_configurationDelegate, obj);
    p_configurationDelegateFlags = &self->_configurationDelegateFlags;
    p_configurationDelegateFlags->respondsToWillBeginConfiguration = objc_opt_respondsToSelector() & 1;
    p_configurationDelegateFlags->respondsToDidCompleteConfiguration = objc_opt_respondsToSelector() & 1;
  }

}

- (void)_handleUserChangedToDevice:(int64_t)a3
{
  -[CAMViewfinderViewController _handleUserChangedToMode:device:](self, "_handleUserChangedToMode:device:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), a3);
}

- (void)_handleUserChangedToMode:(int64_t)a3
{
  _BOOL8 v5;
  void *v6;
  uint64_t v7;
  id v8;

  v5 = -[CAMViewfinderViewController _isSpatialVideoInVideoModeActiveForMode:devicePosition:](self, "_isSpatialVideoInVideoModeActiveForMode:devicePosition:", a3, -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"));
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "defaultDeviceForModeChange:devicePosition:spatialVideoEnabled:", a3, -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"), v5);

  -[CAMViewfinderViewController _handleUserChangedToMode:device:](self, "_handleUserChangedToMode:device:", a3, v7);
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setControlDrawerExpanded:forReason:animated:", 0, 3, 1);

}

- (void)_handleUserChangedToMode:(int64_t)a3 device:(int64_t)a4
{
  void *v7;
  uint64_t v8;
  void *v9;
  _BOOL4 v10;
  double v11;
  double v12;
  uint64_t v13;
  _BOOL4 v14;
  double v15;
  _BOOL8 v16;
  void *v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  void *v23;
  double v24;
  double v25;
  id v26;

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "mode");

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v26 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _graphConfigurationForChangeToMode:device:fromGraphConfiguration:](self, "_graphConfigurationForChangeToMode:device:fromGraphConfiguration:", a3, a4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = -[CAMViewfinderViewController _shouldResetZoomForChangeFromMode:toMode:](self, "_shouldResetZoomForChangeFromMode:toMode:", v8, a3);
  -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
  v12 = v11;
  if (objc_msgSend(v9, "trueVideoEnabled") && (objc_msgSend(v26, "trueVideoEnabled") & 1) == 0)
    -[CAMViewfinderViewController _setTrueVideoSourceZoomFactor:](self, "_setTrueVideoSourceZoomFactor:", v12);
  v14 = objc_msgSend(v26, "trueVideoEnabled")
     && (v13 = objc_msgSend(v9, "mode"),
         v13 == -[CAMViewfinderViewController _trueVideoSourceCaptureMode](self, "_trueVideoSourceCaptureMode"))
     && !objc_msgSend(v9, "mode")
     && objc_msgSend(v9, "devicePosition") == 1;
  if (v10)
  {
    -[CAMViewfinderViewController _defaultZoomFactorForGraphConfiguration:](self, "_defaultZoomFactorForGraphConfiguration:", v9);
LABEL_12:
    v12 = v15;
    goto LABEL_13;
  }
  if (v14)
  {
    -[CAMViewfinderViewController _trueVideoSourceZoomFactor](self, "_trueVideoSourceZoomFactor");
    goto LABEL_12;
  }
  if (-[CAMViewfinderViewController _trueVideoIsActive](self, "_trueVideoIsActive"))
  {
    v16 = -[CAMViewfinderViewController _isSpatialVideoInVideoModeActiveForMode:devicePosition:](self, "_isSpatialVideoInVideoModeActiveForMode:devicePosition:", objc_msgSend(v9, "mode"), objc_msgSend(v9, "devicePosition"));
    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(v17, "resolvedDeviceForDesiredDevice:mode:videoConfiguration:videoStabilizationStrength:spatialVideoEnabled:", a4, objc_msgSend(v9, "mode"), objc_msgSend(v9, "videoConfiguration"), objc_msgSend(v9, "videoStabilizationStrength"), v16);

    -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
    +[CAMZoomControlUtilities equivalentZoomFactor:forDevice:fromDevice:](CAMZoomControlUtilities, "equivalentZoomFactor:forDevice:fromDevice:", v18, objc_msgSend(v26, "device"), v19);
    a4 = +[CAMZoomControlUtilities deviceForEmulatingZoomFactor:fromDevice:mode:continuousZoomSupported:](CAMZoomControlUtilities, "deviceForEmulatingZoomFactor:fromDevice:mode:continuousZoomSupported:", v18, objc_msgSend(v9, "mode"), +[CAMZoomControlUtilities shouldApplyContinuousZoomForMode:device:videoConfiguration:videoStabilizationStrength:zoomFactors:displayZoomFactors:](CAMZoomControlUtilities, "shouldApplyContinuousZoomForMode:device:videoConfiguration:videoStabilizationStrength:zoomFactors:displayZoomFactors:", objc_msgSend(v9, "mode"), v18, objc_msgSend(v9, "videoConfiguration"), objc_msgSend(v9, "videoStabilizationStrength"), 0, 0), v20);
    -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
    +[CAMZoomControlUtilities equivalentZoomFactor:forDevice:fromDevice:](CAMZoomControlUtilities, "equivalentZoomFactor:forDevice:fromDevice:", a4, objc_msgSend(v26, "device"), v21);
    v12 = v22;
    if (-[CAMViewfinderViewController _useZoomFactorsOfTrueVideoDestinationModeForGraphConfiguration:](self, "_useZoomFactorsOfTrueVideoDestinationModeForGraphConfiguration:", v9))
    {
      +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "maximumZoomFactorForMode:device:videoConfiguration:videoStabilizationStrength:", objc_msgSend(v9, "mode"), a4, objc_msgSend(v9, "videoConfiguration"), objc_msgSend(v9, "videoStabilizationStrength"));
      v25 = v24;

      if (v12 >= v25)
        v12 = v25;
    }
  }
LABEL_13:
  -[CAMViewfinderViewController _handleUserChangedToMode:device:zoomFactor:](self, "_handleUserChangedToMode:device:zoomFactor:", a3, a4, v12);

}

- (void)_performChangeFromGraphConfiguration:(id)a3 toGraphConfiguration:(id)a4 zoomFactor:(double)a5 deferIfConfigurationInFlight:(BOOL)a6
{
  _BOOL4 v6;
  id v10;
  id v11;
  BOOL v12;
  NSObject *v13;
  int v14;
  id v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v6 = a6;
  v18 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a4;
  v12 = -[CAMViewfinderViewController _hasInFlightConfiguration](self, "_hasInFlightConfiguration");
  -[CAMViewfinderViewController _willChangeToGraphConfiguration:zoomFactor:fromGraphConfiguration:animated:](self, "_willChangeToGraphConfiguration:zoomFactor:fromGraphConfiguration:animated:", v11, v10, 1, a5);
  if (v6 && v12)
  {
    v13 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v14 = 138543618;
      v15 = v11;
      v16 = 2114;
      v17 = v10;
      _os_log_impl(&dword_1DB760000, v13, OS_LOG_TYPE_DEFAULT, "Deferring change to: %{public}@, from: %{public}@", (uint8_t *)&v14, 0x16u);
    }

    -[CAMViewfinderViewController _setNeedsDeferredGraphConfiguration:](self, "_setNeedsDeferredGraphConfiguration:", 1);
  }
  else
  {
    -[CAMViewfinderViewController _changeToGraphConfiguration:zoomFactor:fromGraphConfiguration:](self, "_changeToGraphConfiguration:zoomFactor:fromGraphConfiguration:", v11, v10, a5);
  }

}

- (void)_handleUserChangedToMode:(int64_t)a3 device:(int64_t)a4 zoomFactor:(double)a5
{
  uint64_t v9;
  uint64_t v10;
  double v11;
  void *v12;
  _BOOL8 v13;
  void *v14;
  id v15;

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v15 = (id)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v15, "mode");
  v10 = objc_msgSend(v15, "device");
  -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
  if (v9 != a3 || v10 != a4 || v11 != a5)
  {
    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "trueVideoState") == 0;

    -[CAMViewfinderViewController _graphConfigurationForChangeToMode:device:fromGraphConfiguration:](self, "_graphConfigurationForChangeToMode:device:fromGraphConfiguration:", a3, a4, v15);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _performChangeFromGraphConfiguration:toGraphConfiguration:zoomFactor:deferIfConfigurationInFlight:](self, "_performChangeFromGraphConfiguration:toGraphConfiguration:zoomFactor:deferIfConfigurationInFlight:", v15, v14, v13, a5);

  }
}

- (void)_willChangeToGraphConfiguration:(id)a3 zoomFactor:(double)a4 fromGraphConfiguration:(id)a5 animated:(BOOL)a6
{
  _BOOL8 v6;
  id v10;
  id v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  int64_t v25;
  BOOL v26;
  int v28;
  void *v29;
  _BOOL4 v30;
  void *v31;
  void *v32;
  double v33;
  _BOOL4 v35;
  int v37;
  _BOOL4 v39;
  _BOOL4 v40;
  _BOOL4 v41;
  void *v42;
  void *v43;
  int v44;
  int v45;
  void *v46;
  double v47;
  void *v48;
  _BOOL8 v49;
  void *v50;
  uint64_t v51;
  char v52;
  int v53;
  int64_t v54;
  _BOOL8 v55;
  void *v56;
  BOOL v57;
  _BOOL4 v58;
  _BOOL4 v59;
  uint64_t v60;
  void *v61;
  double v62;
  double v63;
  void *v64;
  double v65;
  _BOOL4 v66;
  uint64_t v67;
  _BOOL4 v68;
  uint64_t v69;
  int64_t v70;
  int64_t v71;
  double v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  _BOOL4 v81;
  id v82;
  int64_t v83;
  void *v84;
  void *v85;
  void (**v86)(void *, void *, _QWORD);
  void *v87;
  void *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD aBlock[4];
  BOOL v93;
  uint8_t buf[4];
  id v95;
  __int16 v96;
  id v97;
  __int16 v98;
  double v99;
  uint64_t v100;

  v6 = a6;
  v100 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a5;
  v12 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543874;
    v95 = v10;
    v96 = 2114;
    v97 = v11;
    v98 = 2048;
    v99 = a4;
    _os_log_impl(&dword_1DB760000, v12, OS_LOG_TYPE_DEFAULT, "Will change to: %{public}@ from: %{public}@ with zoomFactor=%.3f", buf, 0x20u);
  }

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v89 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v10, "mode");
  v91 = objc_msgSend(v10, "device");
  v14 = objc_msgSend(v11, "mode");
  v90 = objc_msgSend(v11, "device");
  -[CAMViewfinderViewController _livePhotoButton](self, "_livePhotoButton");
  v85 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v85, "interruptEnablingAnimation");
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "controlStatusBar");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "livePhotoIndicator");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "stopAnimating");

  -[CAMViewfinderViewController _timerCache](self, "_timerCache");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "cancelAllTimers");

  -[CAMViewfinderViewController _stopSmartStyleOnboardingControlRevealAnimation](self, "_stopSmartStyleOnboardingControlRevealAnimation");
  -[CAMViewfinderViewController updateControlVisibilityAnimated:](self, "updateControlVisibilityAnimated:", v6);
  -[CAMViewfinderViewController _setReconfiguring:](self, "_setReconfiguring:", 1);
  -[CAMViewfinderViewController _cancelCTMCapture](self, "_cancelCTMCapture");
  -[CAMViewfinderViewController _updateUIForCapturing:animated:](self, "_updateUIForCapturing:animated:", 0, v6);
  -[CAMViewfinderViewController _setCurrentGraphConfiguration:](self, "_setCurrentGraphConfiguration:", v10);
  if (v6)
    -[CAMViewfinderViewController _snapshotAndFadeDisappearingOverlayViewsForChangeToGraphConfiguration:](self, "_snapshotAndFadeDisappearingOverlayViewsForChangeToGraphConfiguration:", v10);
  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
  v87 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v87, "willChangeToGraphConfiguration:", v10);
  if (!-[CAMViewfinderViewController _trueVideoIsActive](self, "_trueVideoIsActive"))
    -[CAMViewfinderViewController _closeViewfinderForChangeFromMode:toMode:fromDevice:toDevice:](self, "_closeViewfinderForChangeFromMode:toMode:fromDevice:toDevice:", v14, v13, v90, v91);
  v20 = v89;
  if (!-[CAMViewfinderViewController _trueVideoIsTransitioningToCapture](self, "_trueVideoIsTransitioningToCapture"))
  {
    -[CAMViewfinderViewController _modeDial](self, "_modeDial");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "reloadData");
    objc_msgSend(v21, "setSelectedMode:animated:", v13, v6);

  }
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "modeIndicator");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "setSelectedMode:animated:", v13, v6);

  v84 = v22;
  objc_msgSend(v22, "modeSelector");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "setSelectedMode:", v13);

  -[CAMViewfinderViewController _updateVideoConfigurationStatusIndicatorForGraphConfiguration:animated:](self, "_updateVideoConfigurationStatusIndicatorForGraphConfiguration:animated:", v10, v6);
  -[CAMViewfinderViewController _updateShutterButtonForGraphConfiguration:isCapturing:animated:](self, "_updateShutterButtonForGraphConfiguration:isCapturing:animated:", v10, 0, v6);
  -[CAMViewfinderViewController _pausePairedVideoCaptureOnControllerIfNecessaryForGraphConfiguration:isShowingCameraRoll:](self, "_pausePairedVideoCaptureOnControllerIfNecessaryForGraphConfiguration:isShowingCameraRoll:", v10, -[CAMViewfinderViewController _isShowingCameraRoll](self, "_isShowingCameraRoll"));
  v25 = -[CAMViewfinderViewController _aspectRatioForMode:devicePosition:](self, "_aspectRatioForMode:devicePosition:", v13, objc_msgSend(v10, "devicePosition"));
  objc_msgSend(v19, "setDesiredAspectRatio:", v25);
  if (v13)
    v26 = v13 == 6;
  else
    v26 = 1;
  v28 = v26 && v14 == 4;
  if (v13 == 4 || v28)
    objc_msgSend(v19, "setMaskingAspectRatio:animated:", v25, v6);
  v83 = v25;
  -[CAMViewfinderViewController _hideControlsForGraphConfiguration:animated:](self, "_hideControlsForGraphConfiguration:animated:", v10, v6);
  -[CAMViewfinderViewController _updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:animated:](self, "_updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:animated:", v10, v6);
  -[CAMViewfinderViewController _updateZoomControlLayoutForGraphConfiguration:fromGraphConfiguration:animated:](self, "_updateZoomControlLayoutForGraphConfiguration:fromGraphConfiguration:animated:", v10, v11, v6);
  -[CAMViewfinderViewController _updateLightingControlFadesForGraphConfiguration:animated:](self, "_updateLightingControlFadesForGraphConfiguration:animated:", v10, v6);
  if (!-[CAMViewfinderViewController _isSpatialVideoMode:devicePosition:](self, "_isSpatialVideoMode:devicePosition:", objc_msgSend(v10, "mode"), objc_msgSend(v10, "devicePosition")))-[CAMViewfinderViewController _updateSpatialCaptureUIStateForGraphConfiguration:animated:](self, "_updateSpatialCaptureUIStateForGraphConfiguration:animated:", v10, v6);
  -[CAMViewfinderViewController _callStatusMonitor](self, "_callStatusMonitor");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = -[CAMViewfinderViewController _shouldDisableModeForGraphConfiguration:callActive:](self, "_shouldDisableModeForGraphConfiguration:callActive:", v10, objc_msgSend(v29, "isCallActive"));

  if (v30)
    -[CAMViewfinderViewController _updateModeDisabledForCurrentStateAnimated:](self, "_updateModeDisabledForCurrentStateAnimated:", v6);
  if (-[CAMViewfinderViewController _shouldShowDescriptionOverlayViewForGraphConfiguration:](self, "_shouldShowDescriptionOverlayViewForGraphConfiguration:", v10))
  {
    -[CAMViewfinderViewController _embedDescriptionOverlayViewIfNecessaryForGraphConfiguration:](self, "_embedDescriptionOverlayViewIfNecessaryForGraphConfiguration:", v10);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = v31;
    v33 = 0.25;
    if (!v6)
      v33 = 0.0;
    objc_msgSend(v31, "setVisible:animationDuration:completion:", 1, 0, v33);

  }
  if (objc_msgSend(v89, "isLivePhotoSupported"))
  {
    v35 = v13 == 4 && v14 == 0;
    v37 = v14 == 4 && v13 == 0 || v35;
  }
  else
  {
    v37 = 0;
  }
  v88 = v19;
  v39 = v14 != v13 && (v13 == 6 || v14 == 6);
  v40 = -[CAMViewfinderViewController _useCreativeCameraControls](self, "_useCreativeCameraControls");
  v41 = v14 != 3 && v40;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __106__CAMViewfinderViewController__willChangeToGraphConfiguration_zoomFactor_fromGraphConfiguration_animated___block_invoke;
  aBlock[3] = &__block_descriptor_33_e19_v20__0__UIView_8B16l;
  v93 = v6;
  v86 = (void (**)(void *, void *, _QWORD))_Block_copy(aBlock);
  if (((v37 | v39) & 1) != 0 || v41)
  {
    v81 = v41;
    v82 = v11;
    -[CAMViewfinderViewController _topBar](self, "_topBar");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v42, "_expandedMenuButton");
    v43 = (void *)objc_claimAutoreleasedReturnValue();

    v44 = objc_msgSend(v42, "_shouldExpandButtonsHorizontally");
    if (v43)
      v45 = v44;
    else
      v45 = 0;
    if ((v45 & 1) == 0
      && !-[CAMViewfinderViewController _shouldHideLivePhotoButtonForGraphConfiguration:](self, "_shouldHideLivePhotoButtonForGraphConfiguration:", v10))
    {
      v86[2](v86, v85, 0);
    }
    if ((objc_msgSend(v89, "isDepthEffectApertureSupported") & v39) == 1)
    {
      -[CAMViewfinderViewController _apertureButton](self, "_apertureButton");
      v46 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v46)
      {
        -[CAMViewfinderViewController _createApertureButtonIfNecessary](self, "_createApertureButtonIfNecessary");
        v47 = (double)(-[CAMViewfinderViewController _shouldHideApertureButtonForGraphConfiguration:](self, "_shouldHideApertureButtonForGraphConfiguration:", v82) ^ 1);
        -[CAMViewfinderViewController _apertureButton](self, "_apertureButton");
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v48, "setAlpha:", v47);

      }
      v49 = -[CAMViewfinderViewController _shouldHideApertureButtonForGraphConfiguration:](self, "_shouldHideApertureButtonForGraphConfiguration:", v10);
      -[CAMViewfinderViewController _apertureButton](self, "_apertureButton");
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      v86[2](v86, v50, v49);

      -[CAMViewfinderViewController _resetPortraitModeApertureValueIfNeededForGraphConfiguration:zoomFactor:](self, "_resetPortraitModeApertureValueIfNeededForGraphConfiguration:zoomFactor:", v10, a4);
      -[CAMViewfinderViewController _updatePortraitApertureSliderForGraphConfiguration:zoomFactor:](self, "_updatePortraitApertureSliderForGraphConfiguration:zoomFactor:", v10, a4);
      -[CAMViewfinderViewController _updatePortraitApertureButtonForGraphConfiguration:zoomFactor:animated:](self, "_updatePortraitApertureButtonForGraphConfiguration:zoomFactor:animated:", v10, 0, a4);
      v20 = v89;
    }
    v51 = v45 ^ 1u;
    v52 = objc_msgSend(v20, "isPortraitEffectIntensitySupportedForMode:", v13);
    v53 = objc_msgSend(v20, "isPortraitEffectIntensitySupportedForMode:", v14);
    v54 = -[CAMViewfinderViewController _sanitizedLightingTypeForMode:device:](self, "_sanitizedLightingTypeForMode:device:", v13, v91);
    if (((v52 & 1) != 0 || v53)
      && (objc_msgSend(v89, "isPortraitEffectIntensitySupportedForLightingType:", v54) & v39) == 1)
    {
      -[CAMViewfinderViewController _createIntensityButtonIfNecessary](self, "_createIntensityButtonIfNecessary");
      v55 = -[CAMViewfinderViewController _shouldHideIntensityButtonForGraphConfiguration:](self, "_shouldHideIntensityButtonForGraphConfiguration:", v10);
      -[CAMViewfinderViewController _intensityButton](self, "_intensityButton");
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      v86[2](v86, v56, v55);

    }
    if (v81)
    {
      -[CAMViewfinderViewController _createModeSpecificControlsForConfiguration:](self, "_createModeSpecificControlsForConfiguration:", v10);
      -[CAMViewfinderViewController _hideControlsForGraphConfiguration:animated:](self, "_hideControlsForGraphConfiguration:animated:", v10, 0);
      -[CAMViewfinderViewController _showControlsForGraphConfiguration:animated:](self, "_showControlsForGraphConfiguration:animated:", v10, v6);
    }
    objc_msgSend(v42, "configureForMode:animated:", v13, v51);

    v11 = v82;
    v20 = v89;
  }
  v57 = -[CAMViewfinderViewController _shouldResetZoomForChangeFromMode:toMode:](self, "_shouldResetZoomForChangeFromMode:toMode:", v14, v13);
  v58 = -[CAMViewfinderViewController _trueVideoIsActive](self, "_trueVideoIsActive");
  v59 = v58;
  if (v57 || v58)
  {
    if (+[CAMZoomSlider shouldFadeOutZoomSliderForLayoutStyle:](CAMZoomSlider, "shouldFadeOutZoomSliderForLayoutStyle:", -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle")))
    {
      v86[2](v86, self->__zoomSlider, 1);
    }
    if (!-[CAMViewfinderViewController _isReconfiguringForZoomChange](self, "_isReconfiguringForZoomChange") && !v59)
    {
      if (v6)
        v60 = 2;
      else
        v60 = 0;
      -[CAMZoomControl setShouldShowZoomDial:animationDuration:](self->__zoomControl, "setShouldShowZoomDial:animationDuration:", 0, v60);
    }
    -[CAMViewfinderViewController _setCachedVideoZoomFactor:](self, "_setCachedVideoZoomFactor:", a4);
    -[CAMViewfinderViewController _configureZoomControlForGraphConfiguration:animated:](self, "_configureZoomControlForGraphConfiguration:animated:", v10, v6);
    -[CAMViewfinderViewController _zoomSlider](self, "_zoomSlider");
    v61 = (void *)objc_claimAutoreleasedReturnValue();

    if (v61)
    {
      -[CAMViewfinderViewController _zoomSliderValueForZoomFactor:](self, "_zoomSliderValueForZoomFactor:", a4);
      v63 = v62;
      -[CAMViewfinderViewController _zoomSlider](self, "_zoomSlider");
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      *(float *)&v65 = v63;
      objc_msgSend(v64, "setValue:animated:", v6, v65);

    }
    if (!v59)
      -[CAMViewfinderViewController _setLastZoomInteractionType:](self, "_setLastZoomInteractionType:", 0);
  }
  -[CAMViewfinderViewController _updateBarBackgroundStyleForMode:capturing:animated:](self, "_updateBarBackgroundStyleForMode:capturing:animated:", v13, 0, v6);
  v66 = -[CAMViewfinderViewController _shouldApplyTopBarRotationForGraphConfiguration:](self, "_shouldApplyTopBarRotationForGraphConfiguration:", v11);
  if (v66 != -[CAMViewfinderViewController _shouldApplyTopBarRotationForGraphConfiguration:](self, "_shouldApplyTopBarRotationForGraphConfiguration:", v10))-[CAMViewfinderViewController _prepareTopBarForOrientationChangeDuringConfiguration](self, "_prepareTopBarForOrientationChangeDuringConfiguration");
  objc_msgSend(v88, "setAutomaticallyAdjustsTopBarOrientation:", -[CAMViewfinderViewController _shouldRotateTopBarForGraphConfiguration:](self, "_shouldRotateTopBarForGraphConfiguration:", v10));
  if (v14 != v13)
    -[CAMViewfinderViewController _hideUtilityBarAnimated:](self, "_hideUtilityBarAnimated:", 1);
  if ((unint64_t)(v90 - 1) > 0xA)
    v67 = 0;
  else
    v67 = qword_1DB9A53B8[v90 - 1];
  v68 = -[CAMViewfinderViewController _wantsLightingControlForMode:devicePosition:](self, "_wantsLightingControlForMode:devicePosition:", v14, v67);
  if ((unint64_t)(v91 - 1) > 0xA)
    v69 = 0;
  else
    v69 = qword_1DB9A53B8[v91 - 1];
  if ((v68 & -[CAMViewfinderViewController _wantsLightingControlForMode:devicePosition:](self, "_wantsLightingControlForMode:devicePosition:", v13, v69)) == 1)
  {
    v70 = -[CAMViewfinderViewController _sanitizedLightingTypeForMode:device:](self, "_sanitizedLightingTypeForMode:device:", objc_msgSend(v11, "mode"), objc_msgSend(v11, "device"));
    v71 = -[CAMViewfinderViewController _sanitizedLightingTypeForMode:device:](self, "_sanitizedLightingTypeForMode:device:", objc_msgSend(v10, "mode"), objc_msgSend(v10, "device"));
    if (v71 != v70)
    {
      -[CAMViewfinderViewController _setLightingType:forMode:](self, "_setLightingType:forMode:", v71, 6);
      -[CAMViewfinderViewController _updateControlDrawerContentsVisibilityAnimated:](self, "_updateControlDrawerContentsVisibilityAnimated:", 1);
    }
    -[CAMViewfinderViewController _updateLightingUIForGraphConfiguration:animated:](self, "_updateLightingUIForGraphConfiguration:animated:", v10, 1);
  }
  -[CAMViewfinderViewController _exposureBiasForMode:trueVideoEnabled:](self, "_exposureBiasForMode:trueVideoEnabled:", v13, objc_msgSend(v10, "trueVideoEnabled"));
  *(float *)&v72 = v72;
  objc_msgSend(v87, "setBaselineExposureBias:", v72);
  -[CAMViewfinderViewController _setWantsVisualTextAnalysis:animated:](self, "_setWantsVisualTextAnalysis:animated:", 0, v6);
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v73 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v73, "controlDrawer");
  v74 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v74, "setExpanded:forControlType:animated:updatePreferredDrawerControl:", 0, 10, 1, 0);

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v75 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v75, "controlDrawer");
  v76 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v76, "setExpanded:forControlType:animated:updatePreferredDrawerControl:", 0, 11, 1, 0);

  -[CAMViewfinderViewController _setImageAnalyzer:](self, "_setImageAnalyzer:", 0);
  -[CAMViewfinderViewController _analyticsSessionEvent](self, "_analyticsSessionEvent");
  v77 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _visionAnalyticsSession](self, "_visionAnalyticsSession");
  v78 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v77, "countEventsFromAnalyticsVisionSession:", v78);

  -[CAMViewfinderViewController _visionAnalyticsSession](self, "_visionAnalyticsSession");
  v79 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v79, "publish");

  -[CAMViewfinderViewController _setVisionAnalyticsSession:](self, "_setVisionAnalyticsSession:", 0);
  if ((v14 != v13 || v91 != v90) && self->_configurationDelegateFlags.respondsToWillBeginConfiguration)
  {
    -[CAMViewfinderViewController configurationDelegate](self, "configurationDelegate");
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v80, "cameraViewControllerWillBeginConfigurationForCaptureMode:captureDevice:", v13, v91);

  }
  if (-[CAMViewfinderViewController _trueVideoIsTransitioningToCapture](self, "_trueVideoIsTransitioningToCapture"))
    objc_msgSend(v84, "setViewportAspectRatio:animated:", v83, 1);
  -[CAMViewfinderViewController _startFlashingTransientLightingBadgeIfNecessaryForGraphConfiguration:](self, "_startFlashingTransientLightingBadgeIfNecessaryForGraphConfiguration:", v10);
  -[CAMViewfinderViewController _updateTransientLightingBadgeVisibilityAnimated:](self, "_updateTransientLightingBadgeVisibilityAnimated:", 1);

}

void __106__CAMViewfinderViewController__willChangeToGraphConfiguration_zoomFactor_fromGraphConfiguration_animated___block_invoke(uint64_t a1, void *a2, char a3)
{
  id v5;
  double v6;
  id v7;
  _QWORD v8[4];
  id v9;
  char v10;

  v5 = a2;
  if (*(_BYTE *)(a1 + 32))
    v6 = 0.25;
  else
    v6 = 0.0;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __106__CAMViewfinderViewController__willChangeToGraphConfiguration_zoomFactor_fromGraphConfiguration_animated___block_invoke_2;
  v8[3] = &unk_1EA328908;
  v9 = v5;
  v10 = a3;
  v7 = v5;
  +[CAMView animateIfNeededWithDuration:animations:](CAMView, "animateIfNeededWithDuration:animations:", v8, v6);

}

uint64_t __106__CAMViewfinderViewController__willChangeToGraphConfiguration_zoomFactor_fromGraphConfiguration_animated___block_invoke_2(uint64_t a1)
{
  double v1;

  v1 = 0.0;
  if (!*(_BYTE *)(a1 + 40))
    v1 = 1.0;
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", v1);
}

- (void)_closeViewfinderForChangeFromMode:(int64_t)a3 toMode:(int64_t)a4 fromDevice:(int64_t)a5 toDevice:(int64_t)a6
{
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v9;
  id v10;

  if ((unint64_t)(a5 - 1) > 0xA)
    v6 = 0;
  else
    v6 = qword_1DB9A53B8[a5 - 1];
  if ((unint64_t)(a6 - 1) > 0xA)
    v7 = 0;
  else
    v7 = qword_1DB9A53B8[a6 - 1];
  v9 = a3 != a4 || v6 == v7;
  -[CAMViewfinderViewController _closedViewfinderController](self, "_closedViewfinderController");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "addClosedViewfinderReason:", v9);

}

- (void)_updateDepthEffectApertureForGraphConfiguration:(id)a3 fromGraphConfiguration:(id)a4 zoomFactor:(double)a5
{
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  void *v19;
  char v20;
  char v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  void *v29;
  id v30;

  v30 = a3;
  v8 = a4;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v30, "device");
  v11 = objc_msgSend(v30, "devicePosition");
  v12 = objc_msgSend(v30, "mode");
  if (objc_msgSend(v9, "isDepthEffectApertureSupportedForMode:devicePosition:", v12, v11))
  {
    -[CAMViewfinderViewController _portraitModeApertureValue](self, "_portraitModeApertureValue");
    v14 = v13;
    -[CAMViewfinderViewController _lastDefaultApertureValue](self, "_lastDefaultApertureValue");
    v16 = v15;
    objc_msgSend(v9, "defaultDepthEffectApertureForMode:device:zoomFactor:", v12, v10, a5);
    v18 = v17;
    -[CAMViewfinderViewController _setLastDefaultApertureValue:](self, "_setLastDefaultApertureValue:");
    +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v9, "isDepthEffectApertureSupportedForMode:devicePosition:", objc_msgSend(v8, "mode"), objc_msgSend(v8, "devicePosition"));
    if ((objc_msgSend(v19, "preserveAperture") & 1) == 0)
    {
      v21 = vabdd_f64(v16, v14) >= 0.0001 ? v20 : 0;
      if ((v21 & 1) == 0)
        -[CAMViewfinderViewController _setPortraitModeApertureValue:](self, "_setPortraitModeApertureValue:", v18);
    }
    -[CAMViewfinderViewController _resetPortraitModeApertureValueIfNeededForGraphConfiguration:zoomFactor:](self, "_resetPortraitModeApertureValueIfNeededForGraphConfiguration:zoomFactor:", v30, a5);
    -[CAMViewfinderViewController _portraitModeApertureValue](self, "_portraitModeApertureValue");
    v23 = v22;
    objc_msgSend(v9, "minimumDepthEffectApertureForMode:device:", v12, v10);
    v25 = v24;
    objc_msgSend(v9, "maximumDepthEffectApertureForMode:device:", v12, v10);
    if (v25 >= v23)
      v27 = v25;
    else
      v27 = v23;
    if (v26 >= v27)
      v28 = v27;
    else
      v28 = v26;
    -[CAMViewfinderViewController _captureController](self, "_captureController");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "changeToPortraitAperture:", v28);

    -[CAMViewfinderViewController _updatePortraitApertureSliderForGraphConfiguration:zoomFactor:](self, "_updatePortraitApertureSliderForGraphConfiguration:zoomFactor:", v30, a5);
    -[CAMViewfinderViewController _updatePortraitApertureButtonForGraphConfiguration:zoomFactor:animated:](self, "_updatePortraitApertureButtonForGraphConfiguration:zoomFactor:animated:", v30, 0, a5);

  }
}

- (void)_prepareDeferredProcessingIfNeeded
{
  void *v3;
  void *v4;
  id v5;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "isDeferredProcessingSupportedForMode:devicePosition:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition")))
  {
    -[CAMViewfinderViewController _stillImageCaptureRequestWithCurrentSettingsAsBurst:maximumLength:](self, "_stillImageCaptureRequestWithCurrentSettingsAsBurst:maximumLength:", 0, 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _captureController](self, "_captureController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "prepareDeferredProcessingWithStillImageRequest:", v3);

  }
}

- (void)_updateInterfaceModulationForGraphConfiguration:(id)a3 animated:(BOOL)a4
{
  _BOOL8 v4;
  _BOOL8 v6;
  id v7;

  v4 = a4;
  v6 = objc_msgSend(a3, "colorSpace") == 2;
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setInterfaceModulation:animated:", v6, v4);

}

- (void)captureController:(id)a3 didOutputFaceResults:(id)a4 headResults:(id)a5 bodyResults:(id)a6 salientObjectResults:(id)a7
{
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  uint64_t v18;
  void *v19;
  id v20;

  v12 = a7;
  v13 = a6;
  v14 = a5;
  v15 = a4;
  v16 = a3;
  -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "captureController:didOutputFaceResults:headResults:bodyResults:salientObjectResults:", v16, v15, v14, v13, v12);

  objc_msgSend(v15, "firstObject");
  v20 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updateCaptureTimerIndicatorWithFaceResult:](self, "_updateCaptureTimerIndicatorWithFaceResult:", v20);
  v18 = objc_msgSend(v15, "count");
  -[CAMViewfinderViewController _targetPortraitModeInstructionLabel](self, "_targetPortraitModeInstructionLabel");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "setNumberOfPeopleFound:", v18);

  -[CAMViewfinderViewController _updateObjectResults:headResults:bodyResults:](self, "_updateObjectResults:headResults:bodyResults:", v15, v14, v13);
}

- (void)_updateCaptureTimerIndicatorWithFaceResult:(id)a3
{
  void *v4;
  void *v5;
  double v6;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v11;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  CGRect v17;
  CGRect v18;

  v16 = a3;
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _lastTimerIndicatorFaceUpdateDate](self, "_lastTimerIndicatorFaceUpdateDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "timeIntervalSinceDate:", v5);
  if (v6 >= 1.5)
  {
    objc_msgSend(v16, "bounds");
    x = v17.origin.x;
    y = v17.origin.y;
    width = v17.size.width;
    height = v17.size.height;
    CGRectGetMaxX(v17);
    v18.origin.x = x;
    v18.origin.y = y;
    v18.size.width = width;
    v18.size.height = height;
    CGRectGetMaxY(v18);
    UIDistanceBetweenPoints();
    if (v11 <= 0.35 || v16 == 0)
      v13 = 2;
    else
      v13 = 0;
    -[CAMViewfinderViewController _timerIndicatorView](self, "_timerIndicatorView");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v14)
    {
      -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "timerIndicator");
      v14 = (void *)objc_claimAutoreleasedReturnValue();

    }
    if (v13 != objc_msgSend(v14, "style"))
    {
      objc_msgSend(v14, "setStyle:animated:", v13, -[CAMViewfinderViewController _isCapturingFromTimer](self, "_isCapturingFromTimer"));
      -[CAMViewfinderViewController _setLastTimerIndicatorFaceUpdateDate:](self, "_setLastTimerIndicatorFaceUpdateDate:", v4);
    }

  }
}

- (void)_updateObjectResults:(id)a3 headResults:(id)a4 bodyResults:(id)a5
{
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t j;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t k;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t m;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  id v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v55;
  id v56;
  void *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  _BYTE v74[128];
  _BYTE v75[128];
  _BYTE v76[128];
  _BYTE v77[128];
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  v9 = a5;
  v10 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v70 = 0u;
  v71 = 0u;
  v72 = 0u;
  v73 = 0u;
  v11 = v7;
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v70, v77, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v71;
    do
    {
      for (i = 0; i != v13; ++i)
      {
        if (*(_QWORD *)v71 != v14)
          objc_enumerationMutation(v11);
        objc_msgSend(*(id *)(*((_QWORD *)&v70 + 1) + 8 * i), "underlyingMetadataObject");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "addObject:", v16);

      }
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v70, v77, 16);
    }
    while (v13);
  }

  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v17 = v8;
  v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v66, v76, 16);
  if (v18)
  {
    v19 = v18;
    v20 = *(_QWORD *)v67;
    do
    {
      for (j = 0; j != v19; ++j)
      {
        if (*(_QWORD *)v67 != v20)
          objc_enumerationMutation(v17);
        objc_msgSend(*(id *)(*((_QWORD *)&v66 + 1) + 8 * j), "underlyingMetadataObject");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "addObject:", v22);

      }
      v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v66, v76, 16);
    }
    while (v19);
  }

  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v23 = v9;
  v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v62, v75, 16);
  if (v24)
  {
    v25 = v24;
    v26 = *(_QWORD *)v63;
    do
    {
      for (k = 0; k != v25; ++k)
      {
        if (*(_QWORD *)v63 != v26)
          objc_enumerationMutation(v23);
        objc_msgSend(*(id *)(*((_QWORD *)&v62 + 1) + 8 * k), "underlyingMetadataObject");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "addObject:", v28);

      }
      v25 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v62, v75, 16);
    }
    while (v25);
  }
  v52 = v17;
  v53 = v11;
  v51 = v23;

  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v29 = v10;
  v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v58, v74, 16);
  if (v30)
  {
    v31 = v30;
    v55 = 0;
    v32 = 0;
    v33 = 0;
    v57 = 0;
    v34 = 0;
    v35 = 0;
    v36 = *(_QWORD *)v59;
    while (1)
    {
      for (m = 0; m != v31; ++m)
      {
        if (*(_QWORD *)v59 != v36)
          objc_enumerationMutation(v29);
        v38 = *(void **)(*((_QWORD *)&v58 + 1) + 8 * m);
        v39 = objc_msgSend(v38, "groupID");
        if (objc_msgSend(v38, "isHumanFace"))
        {
          if (v39 >= 1)
          {
            if (!v35)
              v35 = objc_alloc_init(MEMORY[0x1E0C99E20]);
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v39);
            v40 = (void *)objc_claimAutoreleasedReturnValue();
            v41 = v35;
LABEL_37:
            objc_msgSend(v41, "addObject:", v40);

            continue;
          }
          ++v33;
        }
        else if (objc_msgSend(v38, "isCat"))
        {
          if (v39 >= 1)
          {
            if (!v34)
              v34 = objc_alloc_init(MEMORY[0x1E0C99E20]);
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v39);
            v40 = (void *)objc_claimAutoreleasedReturnValue();
            v41 = v34;
            goto LABEL_37;
          }
          ++v32;
        }
        else if (objc_msgSend(v38, "isDog"))
        {
          if (v39 < 1)
          {
            ++v55;
          }
          else
          {
            v56 = v35;
            v42 = v29;
            v43 = v33;
            v44 = v32;
            v45 = v34;
            v46 = v57;
            if (!v57)
              v46 = objc_alloc_init(MEMORY[0x1E0C99E20]);
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v39);
            v47 = (void *)objc_claimAutoreleasedReturnValue();
            v57 = v46;
            objc_msgSend(v46, "addObject:", v47);

            v34 = v45;
            v32 = v44;
            v33 = v43;
            v29 = v42;
            v35 = v56;
          }
        }
      }
      v31 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v58, v74, 16);
      if (!v31)
        goto LABEL_50;
    }
  }
  v55 = 0;
  v32 = 0;
  v33 = 0;
  v57 = 0;
  v34 = 0;
  v35 = 0;
LABEL_50:

  v48 = objc_msgSend(v35, "count") + v33;
  v49 = objc_msgSend(v34, "count") + v32;
  v50 = objc_msgSend(v57, "count") + v55;
  -[CAMViewfinderViewController set_faceCount:](self, "set_faceCount:", v48);
  -[CAMViewfinderViewController set_catCount:](self, "set_catCount:", v49);
  -[CAMViewfinderViewController set_dogCount:](self, "set_dogCount:", v50);

}

- (void)_resetObjectResults
{
  -[CAMViewfinderViewController set_faceCount:](self, "set_faceCount:", 0);
  -[CAMViewfinderViewController set_catCount:](self, "set_catCount:", 0);
  -[CAMViewfinderViewController set_dogCount:](self, "set_dogCount:", 0);
}

- (void)captureController:(id)a3 didOutputTextRegionResults:(id)a4
{
  -[CAMViewfinderViewController _setCachedTextRegionResults:](self, "_setCachedTextRegionResults:", a4);
  -[CAMViewfinderViewController _processTextRegionResults](self, "_processTextRegionResults");
}

- (void)_processTextRegionResults
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  if (-[CAMViewfinderViewController _shouldProcessTextRegions](self, "_shouldProcessTextRegions"))
  {
    -[CAMViewfinderViewController _cachedTextRegionResults](self, "_cachedTextRegionResults");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _filteredTextResults:](self, "_filteredTextResults:", v3);
    v7 = (id)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v7 = (id)MEMORY[0x1E0C9AA60];
  }
  -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "cachedTextRegionResults");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v7, "count") || objc_msgSend(v5, "count"))
  {
    -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setCachedTextRegionResults:", v7);

    -[CAMViewfinderViewController _updateProminentObjectManagerWithCachedMetadataResults](self, "_updateProminentObjectManagerWithCachedMetadataResults");
  }

}

- (void)documentScanFlowControllerDidFinish:(id)a3
{
  -[CAMViewfinderViewController dismissViewControllerAnimated:completion:](self, "dismissViewControllerAnimated:completion:", 1, 0);
  -[CAMViewfinderViewController resumeCameraSessionWithCompletion:](self, "resumeCameraSessionWithCompletion:", 0);
}

- (void)documentScanFlowControllerDidCancel:(id)a3
{
  -[CAMViewfinderViewController dismissViewControllerAnimated:completion:](self, "dismissViewControllerAnimated:completion:", 1, 0);
  -[CAMViewfinderViewController resumeCameraSessionWithCompletion:](self, "resumeCameraSessionWithCompletion:", 0);
}

- (void)documentScanFlowControllerDidFail:(id)a3 withError:(id)a4
{
  -[CAMViewfinderViewController dismissViewControllerAnimated:completion:](self, "dismissViewControllerAnimated:completion:", 1, 0);
  -[CAMViewfinderViewController resumeCameraSessionWithCompletion:](self, "resumeCameraSessionWithCompletion:", 0);
}

- (void)captureController:(id)a3 didChangeDocumentSceneConfidenceResults:(float)a4
{
  void *v6;
  float v7;
  float v8;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities", a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "documentScanningMinimumConfidenceLevel");
  v8 = v7;

  -[CAMViewfinderViewController _setDocumentInScene:](self, "_setDocumentInScene:", v8 <= a4);
  -[CAMViewfinderViewController _updateDocumentScanningButtonIfNeeded](self, "_updateDocumentScanningButtonIfNeeded");
}

- (id)_filteredTextResults:(id)a3
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v3, "count"));
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v19;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v19 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * i);
        objc_msgSend(v10, "underlyingMetadataObject", (_QWORD)v18);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "bounds");
        v13 = v12;
        v15 = v14;

        v16 = v15 * 3.0 * 0.25;
        if (fmin(v13, v16) >= 0.03 && v13 * v16 >= 0.0025)
          objc_msgSend(v4, "addObject:", v10);
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v7);
  }

  return v4;
}

- (BOOL)_shouldProcessTextRegions
{
  void *v3;
  BOOL v4;
  BOOL v5;
  int64_t v6;
  int64_t v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;

  if (!-[CAMViewfinderViewController _shouldProcessMachineReadableMetadata](self, "_shouldProcessMachineReadableMetadata"))return 0;
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = -[CAMViewfinderViewController _wantsZoomControlForGraphConfiguration:](self, "_wantsZoomControlForGraphConfiguration:", v3);
  v5 = -[CAMViewfinderViewController _wantsLightingControlForGraphConfiguration:](self, "_wantsLightingControlForGraphConfiguration:", v3);
  v6 = -[CAMViewfinderViewController _zoomControlLayoutPositionForGraphConfiguration:](self, "_zoomControlLayoutPositionForGraphConfiguration:", v3);
  v7 = -[CAMViewfinderViewController _lightingControlLayoutPositionForGraphConfiguration:](self, "_lightingControlLayoutPositionForGraphConfiguration:", v3);
  v8 = v6 == 2 && v4;
  v9 = v7 == 2 && v5;
  v10 = !v8 && !v9;

  return v10;
}

- (BOOL)_shouldProcessMachineReadableMetadata
{
  void *v3;
  char v4;
  char v5;
  void *v6;
  BOOL v7;
  void *v8;
  void *v9;
  void *v10;
  int64_t v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  BOOL v18;
  char v19;

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isCapturingBurst");
  v5 = objc_msgSend(v3, "isCapturingVideo");
  if (-[CAMViewfinderViewController _wantsVisualTextAnalysis](self, "_wantsVisualTextAnalysis"))
  {
    -[CAMViewfinderViewController _textInteractionInsert](self, "_textInteractionInsert");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v6 != 0;

  }
  else
  {
    v7 = 0;
  }
  -[CAMViewfinderViewController _descriptionOverlayViewByMode](self, "_descriptionOverlayViewByMode");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "objectForKeyedSubscript:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = -[CAMViewfinderViewController _currentHalfPressSpotlight](self, "_currentHalfPressSpotlight");
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "imageAnalysisShowsInactiveTextRegions");

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "isSemanticStyleControlVisible");

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "isSmartStylePickerVisible");

  if ((v4 & 1) != 0)
  {
    v18 = 0;
  }
  else
  {
    v19 = v5 & (v13 ^ 1) | v7;
    if (v10)
      v19 = 1;
    v18 = (v11 == 0) & ~(v19 | v15 | v17);
  }

  return v18;
}

- (void)_resetMachineReadableMetadataAndProcessing
{
  void *v3;
  id v4;

  -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setCachedSignificantMRCResult:", 0);
  objc_msgSend(v4, "setCachedMRCResults:", 0);
  objc_msgSend(v4, "setCachedTextRegionResults:", 0);
  objc_msgSend(v4, "setCachedSignificantTextRegionResult:", 0);
  -[CAMViewfinderViewController _setLastMRCResultsCount:](self, "_setLastMRCResultsCount:", 0);
  -[CAMViewfinderViewController _setCachedQRCodeResults:](self, "_setCachedQRCodeResults:", 0);
  -[CAMViewfinderViewController _setCachedTextRegionResults:](self, "_setCachedTextRegionResults:", 0);
  -[CAMViewfinderViewController _setCachedAppClipCodeResults:](self, "_setCachedAppClipCodeResults:", 0);
  -[CAMViewfinderViewController _setBarcodeParsingSession:](self, "_setBarcodeParsingSession:", 0);
  -[CAMViewfinderViewController _prominentObjectManager](self, "_prominentObjectManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "reset");

}

- (id)_textInteractionInsert
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "textInteractionInsert");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v4)
  {
    v6 = v4;
  }
  else
  {
    -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "textInteractionInsert");
    v6 = (id)objc_claimAutoreleasedReturnValue();

  }
  return v6;
}

- (id)_imageAnalysisButton
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "imageAnalysisButton");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v4)
  {
    v6 = v4;
  }
  else
  {
    -[CAMViewfinderViewController _bottomBar](self, "_bottomBar");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "imageAnalysisButton");
    v6 = (id)objc_claimAutoreleasedReturnValue();

  }
  return v6;
}

- (id)_imageAnalysisInstructionLabel
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "imageAnalysisInstructionLabel");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v4)
  {
    v6 = v4;
  }
  else
  {
    -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "imageAnalysisInstructionLabel");
    v6 = (id)objc_claimAutoreleasedReturnValue();

  }
  return v6;
}

- (void)_createImageAnalysisInstructionLabelIfNeeded
{
  void *v3;
  CAMImageAnalysisInstructionLabel *v4;

  if (-[CAMViewfinderViewController _shouldCreateAndEmbedControls](self, "_shouldCreateAndEmbedControls"))
  {
    v4 = objc_alloc_init(CAMImageAnalysisInstructionLabel);
    -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setImageAnalysisInstructionLabel:", v4);

    -[CAMImageAnalysisInstructionLabel setAlpha:](v4, "setAlpha:", 0.0);
  }
}

- (void)_createImageAnalysisButtonIfNeeded
{
  void *v3;
  void *v4;
  CAMImageAnalysisButton *v5;
  void *v6;
  void *v7;
  double v8;
  double v9;
  void *v10;
  void *v11;
  id v12;
  _QWORD v13[4];
  id v14;

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _imageAnalysisButton](self, "_imageAnalysisButton");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v4)
  {
    v5 = objc_alloc_init(CAMImageAnalysisButton);
    -[CAMImageAnalysisButton setShowsMenuAsPrimaryAction:](v5, "setShowsMenuAsPrimaryAction:", 1);
    -[VKImageAnalysisButton setPrefersDarkGlyphWhenSelected:](v5, "setPrefersDarkGlyphWhenSelected:", 1);
    -[CAMImageAnalysisButton setAdjustsImageWhenHighlighted:](v5, "setAdjustsImageWhenHighlighted:", 0);
    -[CAMImageAnalysisButton setAdjustsImageWhenDisabled:](v5, "setAdjustsImageWhenDisabled:", 0);
    objc_msgSend(MEMORY[0x1E0DC3658], "systemYellowColor");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMImageAnalysisButton setTintColor:](v5, "setTintColor:", v6);

    -[CAMImageAnalysisButton setDelegate:](v5, "setDelegate:", self);
    if (v3)
    {
      objc_msgSend(v3, "setImageAnalysisButton:", v5);
    }
    else
    {
      -[CAMViewfinderViewController _bottomBar](self, "_bottomBar");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "setImageAnalysisButton:", v5);

    }
    +[CAMAnimationHelper highlightScaleForLayoutStyle:](CAMAnimationHelper, "highlightScaleForLayoutStyle:", -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle"));
    v9 = v8;
    +[CAMAnimationHelper highlightTransformAnimation](CAMAnimationHelper, "highlightTransformAnimation");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[VKImageAnalysisButton setHighlightedGlyphScaleFactor:animation:](v5, "setHighlightedGlyphScaleFactor:animation:", v10, v9);
    -[CAMImageAnalysisButton addTarget:action:forControlEvents:](v5, "addTarget:action:forControlEvents:", self, sel__handleImageAnalysisButtonTapped_, 64);
    -[CAMViewfinderViewController _prominentObjectManager](self, "_prominentObjectManager");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __65__CAMViewfinderViewController__createImageAnalysisButtonIfNeeded__block_invoke;
    v13[3] = &unk_1EA32A510;
    v14 = v11;
    v12 = v11;
    -[CAMImageAnalysisButton _setMenuProvider:](v5, "_setMenuProvider:", v13);
    -[CAMViewfinderViewController _updateImageAnalysisButton](self, "_updateImageAnalysisButton");

  }
}

id __65__CAMViewfinderViewController__createImageAnalysisButtonIfNeeded__block_invoke(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  objc_msgSend(*(id *)(a1 + 32), "currentMachineReadableCodeAction");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "menuElements");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    v3 = (void *)MEMORY[0x1E0DC39D0];
    objc_msgSend(v1, "contentPreviewString");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "menuWithTitle:children:", v4, v2);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

- (void)_handleImageAnalysisButtonTapped:(id)a3
{
  uint64_t v4;
  void *v5;
  unint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  if (!-[CAMViewfinderViewController _wantsVisualTextAnalysis](self, "_wantsVisualTextAnalysis", a3))
  {
    -[CAMViewfinderViewController _prominentObjectManager](self, "_prominentObjectManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "currentObjectType");
    objc_msgSend(v5, "currentMachineReadableCodeAction");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v7;
    if (v6 >= 2)
    {
      if (v6 != 2 || objc_msgSend(v7, "menuElementsCount") != 1)
      {
        v11 = 0;
        v4 = 0;
        goto LABEL_10;
      }
      v11 = v8;
      -[CAMViewfinderViewController _visionAnalyticsSession](self, "_visionAnalyticsSession");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "currentObject");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "countButtonPressForMRC:action:", v10, v11);

      v4 = 0;
    }
    else
    {
      -[CAMViewfinderViewController _visionAnalyticsSession](self, "_visionAnalyticsSession");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "countTextButtonPress");
      v11 = 0;
      v4 = 1;
    }

LABEL_10:
    goto LABEL_11;
  }
  v11 = 0;
  v4 = 0;
LABEL_11:
  -[CAMViewfinderViewController _setWantsVisualTextAnalysis:animated:](self, "_setWantsVisualTextAnalysis:animated:", v4, 1);
  objc_msgSend(v11, "performActionWithCompletion:", &__block_literal_global_11);

}

void __64__CAMViewfinderViewController__handleImageAnalysisButtonTapped___block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;

  v2 = a2;
  if (v2)
  {
    v3 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      __64__CAMViewfinderViewController__handleImageAnalysisButtonTapped___block_invoke_cold_1();

  }
}

- (void)_setWantsVisualTextAnalysis:(BOOL)a3
{
  -[CAMViewfinderViewController _setWantsVisualTextAnalysis:animated:](self, "_setWantsVisualTextAnalysis:animated:", a3, 0);
}

- (void)_setWantsVisualTextAnalysis:(BOOL)a3 animated:(BOOL)a4
{
  _BOOL8 v4;
  _BOOL4 v5;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  uint64_t v14;
  void *v15;
  int v16;
  void *v17;
  void *v18;
  int v19;
  __CFString *v20;
  void *v21;
  void *v22;
  int v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  __CFString *v29;
  __CFString *v30;
  NSObject *v31;
  _QWORD v32[5];
  _QWORD v33[5];
  id v34;

  if (self->__wantsVisualTextAnalysis != a3)
  {
    v4 = a4;
    v5 = a3;
    self->__wantsVisualTextAnalysis = a3;
    -[CAMViewfinderViewController _motionController](self, "_motionController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "captureOrientation");

    v9 = -[CAMViewfinderViewController _supportedInterfaceOrientationsForLayoutStyle:wantsTextAnalysis:](self, "_supportedInterfaceOrientationsForLayoutStyle:wantsTextAnalysis:", -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle"), 0);
    -[CAMViewfinderViewController view](self, "view");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "window");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    v12 = objc_msgSend(v11, "_windowOwnsInterfaceOrientation");
    if (!v5)
    {
      -[CAMViewfinderViewController _setCurrentStillImageCaptureTextAnalysisIdentifier:](self, "_setCurrentStillImageCaptureTextAnalysisIdentifier:", 0);
      -[CAMViewfinderViewController _setCurrentStillImageCaptureTextAnalysisStartDate:](self, "_setCurrentStillImageCaptureTextAnalysisStartDate:", 0);
      -[CAMViewfinderViewController _setCurrentStillImageCaptureTextAnalysisEndDate:](self, "_setCurrentStillImageCaptureTextAnalysisEndDate:", 0);
      -[CAMViewfinderViewController _setCurrentTextAnalysisDetectionEndDate:](self, "_setCurrentTextAnalysisDetectionEndDate:", 0);
      -[CAMViewfinderViewController _imageAnalyzer](self, "_imageAnalyzer");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "cancelAllRequests");

      -[CAMViewfinderViewController _textInteractionInsert](self, "_textInteractionInsert");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "imageInteraction");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "feedbackGestureRecognizer");
      v27 = (void *)objc_claimAutoreleasedReturnValue();

      -[CAMViewfinderViewController view](self, "view");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "removeGestureRecognizer:", v27);

      -[CAMViewfinderViewController _resetMachineReadableMetadataAndProcessing](self, "_resetMachineReadableMetadataAndProcessing");
      -[CAMViewfinderViewController _updateTextAnalysisWithInsert:instructions:animated:](self, "_updateTextAnalysisWithInsert:instructions:animated:", 0, 0, v4);
      -[CAMViewfinderViewController _updateImageAnalysisButton](self, "_updateImageAnalysisButton");
      if (v9 == 2)
      {
        if (v12)
        {
          objc_msgSend(v11, "_setRotatableViewOrientation:updateStatusBar:duration:force:", 1, 1, 1, 0.0);
        }
        else
        {
          v32[0] = MEMORY[0x1E0C809B0];
          v32[1] = 3221225472;
          v32[2] = __68__CAMViewfinderViewController__setWantsVisualTextAnalysis_animated___block_invoke_391;
          v32[3] = &unk_1EA328868;
          v32[4] = self;
          objc_msgSend(MEMORY[0x1E0DC3F10], "performWithoutAnimation:", v32);
        }
        -[CAMViewfinderViewController setNeedsUpdateOfHomeIndicatorAutoHidden](self, "setNeedsUpdateOfHomeIndicatorAutoHidden");
      }

      goto LABEL_25;
    }
    -[CAMViewfinderViewController _prominentObjectManager](self, "_prominentObjectManager");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "currentObjectType");

    if (v14 == 1
      || (+[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities"),
          v15 = (void *)objc_claimAutoreleasedReturnValue(),
          v16 = objc_msgSend(v15, "isImageAnalysisButtonAlwaysVisible"),
          v15,
          v16))
    {
      -[CAMViewfinderViewController _stillImageCaptureRequestForTextAnalysis](self, "_stillImageCaptureRequestForTextAnalysis");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMViewfinderViewController _captureController](self, "_captureController");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v34 = 0;
      v19 = objc_msgSend(v18, "captureStillImageWithRequest:error:", v17, &v34);
      v20 = (__CFString *)v34;

      if (v19)
      {
        objc_msgSend(MEMORY[0x1E0C99D68], "now");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        -[CAMViewfinderViewController _setCurrentStillImageCaptureTextAnalysisStartDate:](self, "_setCurrentStillImageCaptureTextAnalysisStartDate:", v21);

        objc_msgSend(v17, "textAnalysisIdentifier");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        -[CAMViewfinderViewController _setCurrentStillImageCaptureTextAnalysisIdentifier:](self, "_setCurrentStillImageCaptureTextAnalysisIdentifier:", v22);

        if (v9 == 2)
        {
          if ((unint64_t)(v8 - 3) < 2)
            v23 = v12;
          else
            v23 = 0;
          if (v23 == 1)
          {
            objc_msgSend(v11, "_setRotatableViewOrientation:updateStatusBar:duration:force:", v8, 1, 1, 0.0);
          }
          else if ((v12 & 1) == 0)
          {
            v33[0] = MEMORY[0x1E0C809B0];
            v33[1] = 3221225472;
            v33[2] = __68__CAMViewfinderViewController__setWantsVisualTextAnalysis_animated___block_invoke;
            v33[3] = &unk_1EA328868;
            v33[4] = self;
            objc_msgSend(MEMORY[0x1E0DC3F10], "performWithoutAnimation:", v33);
          }
        }
LABEL_21:

LABEL_25:
        -[CAMViewfinderViewController _updatePhysicalButtonCapturedEnabledResigningActiveOrDisappearing:](self, "_updatePhysicalButtonCapturedEnabledResigningActiveOrDisappearing:", 0);

        return;
      }
    }
    else
    {
      v20 = 0;
      v17 = 0;
    }
    v29 = CFSTR("no prominent text region");
    if (v14 == 1)
      v29 = v20;
    v30 = v29;
    v31 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      -[CAMViewfinderViewController _setWantsVisualTextAnalysis:animated:].cold.1();

    -[CAMViewfinderViewController _setWantsVisualTextAnalysis:](self, "_setWantsVisualTextAnalysis:", 0);
    goto LABEL_21;
  }
}

uint64_t __68__CAMViewfinderViewController__setWantsVisualTextAnalysis_animated___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_setNeedsUpdateOfSupportedInterfaceOrientations");
}

uint64_t __68__CAMViewfinderViewController__setWantsVisualTextAnalysis_animated___block_invoke_391(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_setNeedsUpdateOfSupportedInterfaceOrientations");
}

- (void)_handleTextAnalysisStillImageResponse:(id)a3 error:(id)a4 forRequest:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  double v20;
  void *v21;
  void *v22;
  NSObject *v23;
  CGRect v24;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  objc_msgSend(MEMORY[0x1E0C99D68], "now");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (-[CAMViewfinderViewController _wantsVisualTextAnalysis](self, "_wantsVisualTextAnalysis"))
  {
    objc_msgSend(v10, "textAnalysisIdentifier");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _currentStillImageCaptureTextAnalysisIdentifier](self, "_currentStillImageCaptureTextAnalysisIdentifier");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v12, "isEqualToString:", v13);

    if (v14)
    {
      objc_msgSend(v8, "textAnalysisImage");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      if (v15)
      {
        -[CAMViewfinderViewController _setCurrentStillImageCaptureTextAnalysisEndDate:](self, "_setCurrentStillImageCaptureTextAnalysisEndDate:", v11);
        -[CAMViewfinderViewController _imageAnalyzer](self, "_imageAnalyzer");
        v16 = (id)objc_claimAutoreleasedReturnValue();
        if (!v16)
        {
          v16 = objc_alloc_init(MEMORY[0x1E0DC6E00]);
          -[CAMViewfinderViewController _setImageAnalyzer:](self, "_setImageAnalyzer:", v16);
        }
        objc_msgSend(v10, "textAnalysisRegion");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "bounds");
        objc_msgSend(v10, "captureOrientation");
        _UIWindowConvertRectFromOrientationToOrientation();
        if (CGRectIsEmpty(v24))
        {
          +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "isImageAnalysisButtonAlwaysVisible");

        }
        objc_msgSend(v15, "size");
        CEKExpandNormalizedRect();
        objc_msgSend(MEMORY[0x1E0DC6E20], "quadFromCGRect:");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "baselineAngle");
        objc_msgSend(v19, "quadFromRotatingAroundCentroidWithAngle:", -v20);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DC6DF8]), "initWithImage:focusQuad:delegate:", v15, v21, self);
        objc_msgSend(v16, "processRequest:", v22);

      }
      else
      {
        v23 = os_log_create("com.apple.camera", "Camera");
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          -[CAMViewfinderViewController _handleTextAnalysisStillImageResponse:error:forRequest:].cold.1();

        -[CAMViewfinderViewController _setWantsVisualTextAnalysis:](self, "_setWantsVisualTextAnalysis:", 0);
      }

    }
  }

}

- (void)_updateTextAnalysisWithInsert:(id)a3 instructions:(BOOL)a4 animated:(BOOL)a5
{
  _BOOL8 v5;
  _BOOL8 v6;
  void *v8;
  void *v9;
  void *v10;
  CAMCounterRotatingView *v11;
  void *v12;
  void *v13;
  void *v14;
  CAMCounterRotatingView *v15;
  void *v16;
  void *v17;
  id v18;
  _QWORD v19[4];
  id v20;

  v5 = a5;
  v6 = a4;
  v18 = a3;
  -[CAMViewfinderViewController _setWantsVisualTextSelectionInstructions:](self, "_setWantsVisualTextSelectionInstructions:", v6);
  if (v6)
  {
    -[CAMViewfinderViewController _timerCache](self, "_timerCache");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "cancelTimerForKey:", &unk_1EA3B0388);

    -[CAMViewfinderViewController _createImageAnalysisInstructionLabelIfNeeded](self, "_createImageAnalysisInstructionLabelIfNeeded");
  }
  -[CAMViewfinderViewController _updateImageAnalysisButton](self, "_updateImageAnalysisButton");
  -[CAMViewfinderViewController _updateImageAnalysisInstructions](self, "_updateImageAnalysisInstructions");
  -[CAMViewfinderViewController updateControlVisibilityAnimated:](self, "updateControlVisibilityAnimated:", v5);
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v18)
  {
    -[CAMViewfinderViewController _textInteractionBackground](self, "_textInteractionBackground");
    v11 = (CAMCounterRotatingView *)objc_claimAutoreleasedReturnValue();
    if (!v11)
    {
      -[CAMViewfinderViewController _imageAnalysisButton](self, "_imageAnalysisButton");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_alloc_init(CAMCounterRotatingView);
      objc_msgSend(MEMORY[0x1E0DC3658], "colorWithWhite:alpha:", 0.0, 0.5);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMCounterRotatingView setBackgroundColor:](v11, "setBackgroundColor:", v13);

      -[CAMCounterRotatingView setAlpha:](v11, "setAlpha:", 0.0);
      -[CAMViewfinderViewController _setTextInteractionBackground:](self, "_setTextInteractionBackground:", v11);
      if (v9)
      {
        objc_msgSend(v12, "superview");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "insertSubview:belowSubview:", v11, v12);
      }
      else
      {
        -[CAMViewfinderViewController _bottomBar](self, "_bottomBar");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "setImageAnalysisButtonBackgroundOverlay:", v11);
      }

      v16 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DC3D80]), "initWithTarget:action:", self, sel__handleDismissLiftedTextGestureRecognizer_);
      -[CAMCounterRotatingView addGestureRecognizer:](v11, "addGestureRecognizer:", v16);

    }
    objc_msgSend(v9, "setTextInteractionInsert:", v18);
    objc_msgSend(v10, "setTextInteractionInsert:", v18);
    objc_msgSend(v18, "setDelegate:", self);
    if (v5)
    {
      objc_msgSend(v18, "performLiftAnimation");
    }
    else
    {
      v17 = (void *)MEMORY[0x1E0DC3F10];
      v19[0] = MEMORY[0x1E0C809B0];
      v19[1] = 3221225472;
      v19[2] = __83__CAMViewfinderViewController__updateTextAnalysisWithInsert_instructions_animated___block_invoke;
      v19[3] = &unk_1EA328868;
      v20 = v18;
      objc_msgSend(v17, "performWithoutAnimation:", v19);

    }
  }
  else
  {
    -[CAMViewfinderViewController _textInteractionInsert](self, "_textInteractionInsert");
    v15 = (CAMCounterRotatingView *)objc_claimAutoreleasedReturnValue();
    v11 = v15;
    if (v5)
    {
      -[CAMCounterRotatingView fadeOutAndRemoveFromSuperview](v15, "fadeOutAndRemoveFromSuperview");
    }
    else
    {
      -[CAMViewfinderViewController animateAlongsideFadeOutForTextLiftingView:](self, "animateAlongsideFadeOutForTextLiftingView:", v15);

      -[CAMViewfinderViewController _textInteractionInsert](self, "_textInteractionInsert");
      v11 = (CAMCounterRotatingView *)objc_claimAutoreleasedReturnValue();
      -[CAMViewfinderViewController fadeOutAnimationDidEndForView:](self, "fadeOutAnimationDidEndForView:", v11);
    }
  }

}

uint64_t __83__CAMViewfinderViewController__updateTextAnalysisWithInsert_instructions_animated___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "performLiftAnimation");
}

- (void)_handleDismissLiftedTextGestureRecognizer:(id)a3
{
  -[CAMViewfinderViewController _setWantsVisualTextAnalysis:animated:](self, "_setWantsVisualTextAnalysis:animated:", 0, 1);
}

- (void)_updateImageAnalysisButton
{
  void *v3;
  void *v4;
  _BOOL4 v5;
  char v6;
  char v7;
  _BOOL8 v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;

  -[CAMViewfinderViewController _prominentObjectManager](self, "_prominentObjectManager");
  v16 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _imageAnalysisButton](self, "_imageAnalysisButton");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = -[CAMViewfinderViewController _shouldShowImageAnalysisButtonForGraphConfiguration:](self, "_shouldShowImageAnalysisButtonForGraphConfiguration:", v4);

  v6 = objc_msgSend(v3, "isContextMenuDisplayed");
  v7 = v6;
  if (v5 && (v6 & 1) == 0)
  {
    v8 = -[CAMViewfinderViewController _wantsVisualTextAnalysis](self, "_wantsVisualTextAnalysis");
    v9 = objc_msgSend(v16, "currentObjectType");
    if (v8 || v9 != 2)
    {
      objc_msgSend(v3, "setMode:", 0);
    }
    else
    {
      objc_msgSend(v16, "currentObject");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v10, "mrcType");
      if (v11 > 2)
        v12 = 0;
      else
        v12 = qword_1DB9A5270[v11];

      objc_msgSend(v3, "setMode:", v12);
      v8 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle") == 1;
    }
    objc_msgSend(v3, "setSelected:", v8);
  }
  if ((v7 & 1) == 0)
  {
    objc_msgSend(v16, "currentMachineReadableCodeAction");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = v13;
    if (v13 && (unint64_t)objc_msgSend(v13, "menuElementsCount") >= 2)
      v15 = -[CAMViewfinderViewController _wantsVisualTextAnalysis](self, "_wantsVisualTextAnalysis") ^ 1;
    else
      v15 = 0;
    objc_msgSend(v3, "setContextMenuInteractionEnabled:", v15);

  }
}

- (void)_updateImageAnalysisInstructions
{
  uint64_t v3;
  _BOOL4 v4;
  void *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  -[CAMViewfinderViewController _imageAnalysisInstructionLabel](self, "_imageAnalysisInstructionLabel");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v9, "instruction");
  v4 = -[CAMViewfinderViewController _wantsVisualTextSelectionInstructions](self, "_wantsVisualTextSelectionInstructions");
  -[CAMViewfinderViewController _timerCache](self, "_timerCache");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isRunningTimerForKey:", &unk_1EA3B0388);

  if (v6)
    v7 = 1;
  else
    v7 = v3;
  if (v4)
    v8 = 0;
  else
    v8 = v7;
  objc_msgSend(v9, "setInstruction:", v8);

}

- (id)_stillImageCaptureRequestForTextAnalysis
{
  int64_t v3;
  CAMMutableStillImageCaptureRequest *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  double v12;
  double v13;

  v3 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
  v4 = objc_alloc_init(CAMMutableStillImageCaptureRequest);
  -[CAMMutableStillImageCaptureRequest setDelegate:](v4, "setDelegate:", self);
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "UUIDString");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMMutableStillImageCaptureRequest setTextAnalysisIdentifier:](v4, "setTextAnalysisIdentifier:", v6);

  -[CAMMutableStillImageCaptureRequest setCaptureMirrored:](v4, "setCaptureMirrored:", -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition") == 1);
  -[CAMViewfinderViewController _motionController](self, "_motionController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMMutableStillImageCaptureRequest setCaptureOrientation:](v4, "setCaptureOrientation:", objc_msgSend(v7, "captureOrientation"));

  -[CAMMutableStillImageCaptureRequest setCaptureDevice:](v4, "setCaptureDevice:", -[CAMViewfinderViewController _currentDevice](self, "_currentDevice"));
  -[CAMMutableStillImageCaptureRequest setCaptureMode:](v4, "setCaptureMode:", v3);
  -[CAMMutableStillImageCaptureRequest setAspectRatioCrop:](v4, "setAspectRatioCrop:", -[CAMViewfinderViewController _aspectRatioCropForMode:devicePosition:](self, "_aspectRatioCropForMode:devicePosition:", v3, -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition")));
  -[CAMMutableStillImageCaptureRequest setWantsAudioForCapture:](v4, "setWantsAudioForCapture:", 0);
  -[CAMMutableStillImageCaptureRequest setPhotoQualityPrioritization:](v4, "setPhotoQualityPrioritization:", 0);
  -[CAMMutableStillImageCaptureRequest setFlashMode:](v4, "setFlashMode:", 0);
  -[CAMMutableStillImageCaptureRequest setHdrMode:](v4, "setHdrMode:", 0);
  -[CAMMutableStillImageCaptureRequest setIrisMode:](v4, "setIrisMode:", 0);
  -[CAMMutableStillImageCaptureRequest setWantsAutoDualCameraFusion:](v4, "setWantsAutoDualCameraFusion:", 0);
  -[CAMMutableStillImageCaptureRequest setPersistenceOptions:](v4, "setPersistenceOptions:", 0);
  -[CAMMutableStillImageCaptureRequest setUserInitiationTime:](v4, "setUserInitiationTime:", mach_absolute_time());
  -[CAMMutableStillImageCaptureRequest setWantsSemanticSceneFilter:](v4, "setWantsSemanticSceneFilter:", 0);
  -[CAMViewfinderViewController _prominentObjectManager](self, "_prominentObjectManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "currentObject");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v8, "currentObjectType") == 1)
    v10 = v9;
  else
    v10 = 0;
  -[CAMMutableStillImageCaptureRequest setTextAnalysisRegion:](v4, "setTextAnalysisRegion:", v10);
  if (!v10)
  {
    v11 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      -[CAMViewfinderViewController _stillImageCaptureRequestForTextAnalysis].cold.1();

  }
  -[CAMViewfinderViewController _desiredPreviewSizeForStillImageCapture](self, "_desiredPreviewSizeForStillImageCapture");
  -[CAMMutableStillImageCaptureRequest setDesiredPreviewSize:](v4, "setDesiredPreviewSize:", round(v12 * 1.2), round(v13 * 1.2));

  return v4;
}

- (void)animateAlongsideTextLiftingForView:(id)a3
{
  id v3;

  -[CAMViewfinderViewController _textInteractionBackground](self, "_textInteractionBackground", a3);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setAlpha:", 1.0);

}

- (void)animateAlongsideFadeOutForTextLiftingView:(id)a3
{
  id v3;

  -[CAMViewfinderViewController _textInteractionBackground](self, "_textInteractionBackground", a3);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setAlpha:", 0.0);

}

- (void)fadeOutAnimationDidEndForView:(id)a3
{
  id v4;
  id v5;
  void *v6;
  id v7;

  v4 = a3;
  -[CAMViewfinderViewController _textInteractionInsert](self, "_textInteractionInsert");
  v5 = (id)objc_claimAutoreleasedReturnValue();

  if (v5 == v4)
  {
    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setTextInteractionInsert:", 0);

    -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setTextInteractionInsert:", 0);

  }
}

- (void)imageAnalysisButton:(id)a3 didChangeContextMenuDisplayed:(BOOL)a4
{
  void *v5;
  void *v6;
  void *v7;
  id v8;

  if (a4)
  {
    -[CAMViewfinderViewController _prominentObjectManager](self, "_prominentObjectManager", a3);
    v8 = (id)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _visionAnalyticsSession](self, "_visionAnalyticsSession");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "currentObject");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "currentMachineReadableCodeAction");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "countButtonPressForMRC:action:", v6, v7);

  }
  else
  {
    -[CAMViewfinderViewController _updateForCurrentMachineReadableCodeAction](self, "_updateForCurrentMachineReadableCodeAction", a3);
    -[CAMViewfinderViewController _dismissDockedMRCButtonIfNeededAnimated:](self, "_dismissDockedMRCButtonIfNeededAnimated:", 1);
  }
}

- (BOOL)imageAnalysisInteraction:(id)a3 shouldBeginAtPoint:(CGPoint)a4 forAnalysisType:(unint64_t)a5
{
  -[CAMViewfinderViewController _setWantsVisualTextSelectionInstructions:](self, "_setWantsVisualTextSelectionInstructions:", 0, a5, a4.x, a4.y);
  -[CAMViewfinderViewController updateControlVisibilityAnimated:](self, "updateControlVisibilityAnimated:", 1);
  return 1;
}

- (void)imageAnalysisInteraction:(id)a3 didRequestLiveTextButtonSelectedState:(BOOL)a4
{
  -[CAMViewfinderViewController _setWantsVisualTextAnalysis:animated:](self, "_setWantsVisualTextAnalysis:animated:", a4, 1);
}

- (unint64_t)feedbackTypeForImageAnalysisInteraction:(id)a3
{
  return 2;
}

- (void)request:(id)a3 didFailWithError:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  int v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  void *v18;
  id v19;
  id v20;

  v6 = a3;
  v7 = a4;
  v8 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    -[CAMViewfinderViewController request:didFailWithError:].cold.1();

  -[CAMViewfinderViewController _setWantsVisualTextAnalysis:animated:](self, "_setWantsVisualTextAnalysis:animated:", 0, 1);
  -[CAMViewfinderViewController _startTimer:](self, "_startTimer:", 2);
  -[CAMViewfinderViewController _createImageAnalysisInstructionLabelIfNeeded](self, "_createImageAnalysisInstructionLabelIfNeeded");
  -[CAMViewfinderViewController updateControlVisibilityAnimated:](self, "updateControlVisibilityAnimated:", 1);
  -[CAMViewfinderViewController _updateImageAnalysisInstructions](self, "_updateImageAnalysisInstructions");
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "isInternalInstall");

  if (v10)
  {
    objc_msgSend(MEMORY[0x1E0DC3450], "alertControllerWithTitle:message:preferredStyle:", CFSTR("Text Analysis Error"), CFSTR("An error occurred during text analysis request processing."), 1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = (void *)MEMORY[0x1E0DC3448];
    v15 = MEMORY[0x1E0C809B0];
    v16 = 3221225472;
    v17 = __56__CAMViewfinderViewController_request_didFailWithError___block_invoke;
    v18 = &unk_1EA32A598;
    v19 = v6;
    v20 = v7;
    objc_msgSend(v12, "actionWithTitle:style:handler:", CFSTR("File Radar"), 0, &v15);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "addAction:", v13, v15, v16, v17, v18);

    objc_msgSend(MEMORY[0x1E0DC3448], "actionWithTitle:style:handler:", CFSTR("Cancel"), 1, 0);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "addAction:", v14);

    -[CAMViewfinderViewController presentViewController:animated:completion:](self, "presentViewController:animated:completion:", v11, 1, 0);
  }

}

void __56__CAMViewfinderViewController_request_didFailWithError___block_invoke(uint64_t a1)
{
  id v2;

  v2 = objc_alloc_init(MEMORY[0x1E0DC6E08]);
  objc_msgSend(v2, "setAssetsProvider:", *(_QWORD *)(a1 + 32));
  objc_msgSend(v2, "setError:", *(_QWORD *)(a1 + 40));
  objc_msgSend(v2, "provideFeedbackWithType:options:metadata:promisedAttachments:userResponseHandler:", 2, -1, 0, 0, &__block_literal_global_409);

}

void __56__CAMViewfinderViewController_request_didFailWithError___block_invoke_2(uint64_t a1, char a2)
{
  NSObject *v2;
  uint8_t v3[16];

  if ((a2 & 1) == 0)
  {
    v2 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v3 = 0;
      _os_log_impl(&dword_1DB760000, v2, OS_LOG_TYPE_DEFAULT, "Launched TTR for text analysis failure", v3, 2u);
    }

  }
}

- (void)request:(id)a3 didDetectTextWithResult:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, void *);
  void *v16;
  id v17;
  id location;

  v6 = a3;
  v7 = a4;
  objc_msgSend(MEMORY[0x1E0C99D68], "now");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _setCurrentTextAnalysisDetectionEndDate:](self, "_setCurrentTextAnalysisDetectionEndDate:", v8);

  objc_msgSend(v7, "boundingPathWithPadding:cornerRadius:", 8.0, 8.0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_alloc(MEMORY[0x1E0DC6E28]);
  objc_msgSend(v6, "image");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "baselineAngle");
  v12 = (void *)objc_msgSend(v10, "initWithImage:cutoutPath:baselineAngle:", v11, v9);

  objc_msgSend(v12, "setMaxScale:", 4.0);
  objc_msgSend(v12, "setPresentsQuickActions:", 1);
  objc_initWeak(&location, self);
  v13 = MEMORY[0x1E0C809B0];
  v14 = 3221225472;
  v15 = __63__CAMViewfinderViewController_request_didDetectTextWithResult___block_invoke;
  v16 = &unk_1EA32A5E8;
  objc_copyWeak(&v17, &location);
  objc_msgSend(v12, "setQuickActionConfigurationUpdateHandler:", &v13);
  -[CAMViewfinderViewController _updateTextAnalysisWithInsert:instructions:animated:](self, "_updateTextAnalysisWithInsert:instructions:animated:", v12, 1, 1, v13, v14, v15, v16);
  objc_destroyWeak(&v17);
  objc_destroyWeak(&location);

}

void __63__CAMViewfinderViewController_request_didDetectTextWithResult___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v8[4];
  id v9;

  v3 = a2;
  objc_msgSend(v3, "configuration");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "state") == 4)
  {
    objc_msgSend(MEMORY[0x1E0DC3658], "blackColor");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setBaseForegroundColor:", v5);

    objc_msgSend(MEMORY[0x1E0DC3658], "systemYellowColor");
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0DC3658], "whiteColor");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setBaseForegroundColor:", v6);

    objc_msgSend(MEMORY[0x1E0DC3658], "colorWithWhite:alpha:", 0.0, 0.5);
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setBaseBackgroundColor:", v7);

  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __63__CAMViewfinderViewController_request_didDetectTextWithResult___block_invoke_2;
  v8[3] = &unk_1EA32A5C0;
  objc_copyWeak(&v9, (id *)(a1 + 32));
  objc_msgSend(v4, "setTitleTextAttributesTransformer:", v8);
  objc_msgSend(v3, "setConfiguration:", v4);
  objc_destroyWeak(&v9);

}

id __63__CAMViewfinderViewController_request_didDetectTextWithResult___block_invoke_2(uint64_t a1, void *a2)
{
  void *v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;

  v3 = (void *)objc_msgSend(a2, "mutableCopy");
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "traitCollection");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "preferredContentSizeCategory");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  +[CAMFont cameraModeDialFontForContentSize:](CAMFont, "cameraModeDialFontForContentSize:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v7, *MEMORY[0x1E0DC1138]);

  return v3;
}

- (void)request:(id)a3 didRecgonizeTextWithAnalysis:(id)a4
{
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  int v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = (void *)MEMORY[0x1E0C99D68];
  v6 = a4;
  objc_msgSend(v5, "now");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _currentStillImageCaptureTextAnalysisStateDate](self, "_currentStillImageCaptureTextAnalysisStateDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _currentStillImageCaptureTextAnalysisEndDate](self, "_currentStillImageCaptureTextAnalysisEndDate");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _currentTextAnalysisDetectionEndDate](self, "_currentTextAnalysisDetectionEndDate");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(v9, "timeIntervalSinceDate:", v8);
    v13 = v12;
    objc_msgSend(v10, "timeIntervalSinceDate:", v9);
    v15 = v14;
    objc_msgSend(v7, "timeIntervalSinceDate:", v10);
    v17 = v16;
    objc_msgSend(v7, "timeIntervalSinceDate:", v8);
    v24 = 134218752;
    v25 = v13;
    v26 = 2048;
    v27 = v15;
    v28 = 2048;
    v29 = v17;
    v30 = 2048;
    v31 = v18;
    _os_log_impl(&dword_1DB760000, v11, OS_LOG_TYPE_DEFAULT, "Text analysis completed with time for capture: %.3fs detection: %.3fs recognition: %.3fs total: %.3fs", (uint8_t *)&v24, 0x2Au);
  }

  v19 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DC6E10]), "initWithInteractionOptions:", 5);
  objc_msgSend(v19, "setActiveInteractionTypes:", 3);
  objc_msgSend(v19, "setDataDetectorTypes:", 4091);
  objc_msgSend(v19, "setAnalysis:", v6);

  objc_msgSend(v19, "setDelegate:", self);
  objc_msgSend(v19, "set_customAnalyticsIdentifier:", CFSTR("com.apple.camera.livetext"));
  -[CAMViewfinderViewController _textInteractionInsert](self, "_textInteractionInsert");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "setImageInteraction:", v19);

  -[CAMViewfinderViewController view](self, "view");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "setNeedsLayout");

  -[CAMViewfinderViewController view](self, "view");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "feedbackGestureRecognizer");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "addGestureRecognizer:", v23);

}

- (void)captureController:(id)a3 didOutputQRCodeResults:(id)a4
{
  -[CAMViewfinderViewController _setCachedQRCodeResults:](self, "_setCachedQRCodeResults:", a4);
  -[CAMViewfinderViewController _captureControllerDidOutputMRC](self, "_captureControllerDidOutputMRC");
}

- (void)captureController:(id)a3 didOutputAppClipCodeResults:(id)a4
{
  -[CAMViewfinderViewController _setCachedAppClipCodeResults:](self, "_setCachedAppClipCodeResults:", a4);
  -[CAMViewfinderViewController _captureControllerDidOutputMRC](self, "_captureControllerDidOutputMRC");
}

- (void)_captureControllerDidOutputMRC
{
  int v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  int64_t v15;
  void *v16;
  int v17;
  void *v18;
  void *v19;
  _QWORD v20[4];
  id v21;

  if (-[CAMViewfinderViewController _shouldProcessMachineReadableMetadata](self, "_shouldProcessMachineReadableMetadata"))
  {
    v3 = !-[CAMViewfinderViewController _wantsVisualTextAnalysis](self, "_wantsVisualTextAnalysis");
  }
  else
  {
    v3 = 0;
  }
  -[CAMViewfinderViewController _cachedQRCodeResults](self, "_cachedQRCodeResults");
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (void *)v4;
  v6 = (void *)MEMORY[0x1E0C9AA60];
  if (v4)
    v7 = (void *)v4;
  else
    v7 = (void *)MEMORY[0x1E0C9AA60];
  v8 = v7;

  -[CAMViewfinderViewController _cachedAppClipCodeResults](self, "_cachedAppClipCodeResults");
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = (void *)v9;
  if (v9)
    v11 = (void *)v9;
  else
    v11 = v6;
  v12 = v11;

  if (v3)
  {
    objc_msgSend(v8, "arrayByAddingObjectsFromArray:", v12);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }
  if (objc_msgSend(v6, "count") || -[CAMViewfinderViewController _lastMRCResultsCount](self, "_lastMRCResultsCount"))
  {
    -[CAMViewfinderViewController _setLastMRCResultsCount:](self, "_setLastMRCResultsCount:", objc_msgSend(v6, "count"));
    -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _machineReadableCodeLoggingController](self, "_machineReadableCodeLoggingController");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = +[CAMApplication appOrPlugInState](CAMApplication, "appOrPlugInState");
    if (objc_msgSend(v6, "count"))
    {
      if (v15)
        objc_msgSend(v14, "logMachineReadableCodeResultDuringInactiveAppState");
    }
    else
    {
      objc_msgSend(v14, "resetLoggingState");
    }
    -[CAMViewfinderViewController _updateCachedMRCResults:](self, "_updateCachedMRCResults:", v6);
    -[CAMViewfinderViewController updateControlVisibilityAnimated:](self, "updateControlVisibilityAnimated:", 1);
    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend(v16, "isImageAnalysisSupported");

    if (v17)
    {
      -[CAMViewfinderViewController _updateProminentObjectManagerWithCachedMetadataResults](self, "_updateProminentObjectManagerWithCachedMetadataResults");
    }
    else
    {
      -[CAMViewfinderViewController _acceptableSizeMRCResultsFromResults:](self, "_acceptableSizeMRCResultsFromResults:", v6);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = v18;
      if (!v15 && objc_msgSend(v18, "count"))
      {
        v20[0] = MEMORY[0x1E0C809B0];
        v20[1] = 3221225472;
        v20[2] = __61__CAMViewfinderViewController__captureControllerDidOutputMRC__block_invoke;
        v20[3] = &unk_1EA32A610;
        v21 = v13;
        -[CAMViewfinderViewController _processResults:completionHandler:](self, "_processResults:completionHandler:", v19, v20);

      }
    }

  }
}

void __61__CAMViewfinderViewController__captureControllerDidOutputMRC__block_invoke(uint64_t a1, void *a2)
{
  id v3;
  _QWORD v4[4];
  id v5;
  id v6;

  v3 = a2;
  if (v3)
  {
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 3221225472;
    v4[2] = __61__CAMViewfinderViewController__captureControllerDidOutputMRC__block_invoke_2;
    v4[3] = &unk_1EA328A40;
    v5 = *(id *)(a1 + 32);
    v6 = v3;
    dispatch_async(MEMORY[0x1E0C80D38], v4);

  }
}

uint64_t __61__CAMViewfinderViewController__captureControllerDidOutputMRC__block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setCachedSignificantMRCResult:", *(_QWORD *)(a1 + 40));
}

- (void)_updateCachedMRCResults:(id)a3
{
  id v4;
  void *v5;
  id v6;

  v4 = a3;
  -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setCachedMRCResults:", v4);

  -[CAMViewfinderViewController _targetQRCodeInstructionLabel](self, "_targetQRCodeInstructionLabel");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setMRCResults:", v4);

}

- (id)_acceptableSizeMRCResultsFromResults:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  _QWORD v11[4];
  id v12;

  v4 = a3;
  -[CAMViewfinderViewController _machineReadableCodeLoggingController](self, "_machineReadableCodeLoggingController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x1E0CB3880];
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __68__CAMViewfinderViewController__acceptableSizeMRCResultsFromResults___block_invoke;
  v11[3] = &unk_1EA32A638;
  v12 = v5;
  v7 = v5;
  objc_msgSend(v6, "predicateWithBlock:", v11);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "filteredArrayUsingPredicate:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

uint64_t __68__CAMViewfinderViewController__acceptableSizeMRCResultsFromResults___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;

  v3 = a2;
  v4 = objc_msgSend(v3, "isOfSignificantSize");
  objc_msgSend(*(id *)(a1 + 32), "logMachineReadableCodeResult:isOfSignificantSize:", v3, v4);

  return v4;
}

- (void)_processResults:(id)a3 completionHandler:(id)a4
{
  id v6;
  void (**v7)(id, _QWORD);
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  objc_class *v18;
  void (**v19)(id, _QWORD);
  _QWORD v20[4];
  id v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint8_t buf[8];
  uint64_t v27;
  void (*v28)(uint64_t);
  void *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = (void (**)(id, _QWORD))a4;
  if (!objc_msgSend(v6, "count"))
    v7[2](v7, 0);
  v8 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v9 = v6;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v22, v35, 16);
  if (v10)
  {
    v11 = *(_QWORD *)v23;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v23 != v11)
          objc_enumerationMutation(v9);
        objc_msgSend(*(id *)(*((_QWORD *)&v22 + 1) + 8 * v12), "underlyingMachineReadableCodeObject");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "addObject:", v13);

        ++v12;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v22, v35, 16);
    }
    while (v10);
  }

  -[CAMViewfinderViewController _barcodeParsingSession](self, "_barcodeParsingSession");
  v14 = (id)objc_claimAutoreleasedReturnValue();
  v15 = MEMORY[0x1E0C809B0];
  if (!v14)
  {
    v16 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1DB760000, v16, OS_LOG_TYPE_DEFAULT, "Recognized the first acceptable size QR Code, starting new barcode parsing session", buf, 2u);
    }

    v31 = 0;
    v32 = &v31;
    v33 = 0x2050000000;
    v17 = (void *)getBCSAVParsingSessionClass_softClass;
    v34 = getBCSAVParsingSessionClass_softClass;
    if (!getBCSAVParsingSessionClass_softClass)
    {
      *(_QWORD *)buf = v15;
      v27 = 3221225472;
      v28 = __getBCSAVParsingSessionClass_block_invoke;
      v29 = &unk_1EA329140;
      v30 = &v31;
      __getBCSAVParsingSessionClass_block_invoke((uint64_t)buf);
      v17 = (void *)v32[3];
    }
    v18 = objc_retainAutorelease(v17);
    _Block_object_dispose(&v31, 8);
    v14 = objc_alloc_init(v18);
    -[CAMViewfinderViewController _setBarcodeParsingSession:](self, "_setBarcodeParsingSession:", v14);
  }
  v20[0] = v15;
  v20[1] = 3221225472;
  v20[2] = __65__CAMViewfinderViewController__processResults_completionHandler___block_invoke;
  v20[3] = &unk_1EA32A660;
  v21 = v7;
  v19 = v7;
  objc_msgSend(v14, "updateSessionWithMetadataObjects:completionHandler:", v8, v20);

}

void __65__CAMViewfinderViewController__processResults_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  CAMMachineReadableCodeResult *v8;
  NSObject *v9;
  void *v10;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v5)
  {
    v8 = -[CAMMachineReadableCodeResult initWithMachineReadableCodeObject:]([CAMMachineReadableCodeResult alloc], "initWithMachineReadableCodeObject:", v5);
    if (!v7)
      goto LABEL_8;
  }
  else
  {
    v8 = 0;
    if (!v6)
      goto LABEL_8;
  }
  v9 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(v7, "description");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 138543362;
    v12 = v10;
    _os_log_impl(&dword_1DB760000, v9, OS_LOG_TYPE_DEFAULT, "There was an error updating the QR barcode parsing session: %{public}@", (uint8_t *)&v11, 0xCu);

  }
LABEL_8:
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

- (void)_dismissDockedMRCButtonIfNeededAnimated:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  void *v9;
  id v10;

  v3 = a3;
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _prominentObjectManager](self, "_prominentObjectManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "currentMachineReadableCodeAction");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "imageAnalysisButton");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isContextMenuDisplayed");

  if (!v6
    && (v8 & 1) == 0
    && !-[CAMViewfinderViewController _isDisplayingDocumentScanningButton](self, "_isDisplayingDocumentScanningButton"))
  {
    if (v10)
    {
      objc_msgSend(v10, "dismissMachineReadableCodeButtonAnimated:", v3);
    }
    else
    {
      -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "dismissMachineReadableCodeButtonAnimated:", v3);

    }
  }
  -[CAMViewfinderViewController _updateDocumentScanningButtonIfNeeded](self, "_updateDocumentScanningButtonIfNeeded");

}

- (void)machineReadableCodeButtonDidTapDismiss:(id)a3
{
  id v4;
  void *v5;
  id v6;
  NSObject *v7;
  uint8_t v8[16];

  v4 = a3;
  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "machineReadableCodeButton");
  v6 = (id)objc_claimAutoreleasedReturnValue();

  if (v6 == v4)
  {
    v7 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_1DB760000, v7, OS_LOG_TYPE_DEFAULT, "Tapped to dismiss MRC button", v8, 2u);
    }

    objc_msgSend(v5, "dismissMachineReadableCodeButtonAnimated:", 1);
    objc_msgSend(v4, "setDelegate:", 0);
  }
  -[CAMViewfinderViewController _updateDocumentScanningButtonIfNeeded](self, "_updateDocumentScanningButtonIfNeeded");

}

- (void)_updateProminentObjectManagerWithCachedMetadataResults
{
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  id v17;

  if (!+[CAMApplication appOrPlugInState](CAMApplication, "appOrPlugInState"))
  {
    -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
    v17 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "cachedTextRegionResults");
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = (void *)v3;
    v5 = (void *)MEMORY[0x1E0C9AA60];
    if (v3)
      v6 = (void *)v3;
    else
      v6 = (void *)MEMORY[0x1E0C9AA60];
    v7 = v6;

    objc_msgSend(v17, "cachedMRCResults");
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = (void *)v8;
    if (v8)
      v10 = (void *)v8;
    else
      v10 = v5;
    v11 = v10;

    -[CAMViewfinderViewController _acceptableSizeMRCResultsFromResults:](self, "_acceptableSizeMRCResultsFromResults:", v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "arrayByAddingObjectsFromArray:", v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _prominentObjectManager](self, "_prominentObjectManager");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "updateWithCandidateObjects:", v13);

    -[CAMViewfinderViewController _visionAnalyticsSession](self, "_visionAnalyticsSession");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "countObservedSignficantMRCs:", v12);
    v16 = objc_msgSend(v7, "count");

    objc_msgSend(v15, "countObservedSignficantTextRegionCount:", v16);
  }
}

- (void)_updateDocumentScanningButtonIfNeeded
{
  _BOOL4 v3;
  _BOOL4 v4;
  _BOOL4 v5;
  void *v6;
  int v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v13 = (id)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v13, "isDocumentScanningSupported"))
  {
LABEL_13:

    return;
  }
  v3 = +[CAMDocumentScanFlowController isSupported](CAMDocumentScanFlowController, "isSupported");

  if (v3)
  {
    -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
    v13 = (id)objc_claimAutoreleasedReturnValue();
    v4 = -[CAMViewfinderViewController _shouldShowDocumentScanningButton](self, "_shouldShowDocumentScanningButton");
    v5 = -[CAMViewfinderViewController _isDisplayingDocumentScanningButton](self, "_isDisplayingDocumentScanningButton");
    -[CAMViewfinderViewController _timerCache](self, "_timerCache");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "isRunningTimerForKey:", &unk_1EA3B03A0);

    if (v4)
    {
      if (v5)
      {
        -[CAMViewfinderViewController _timerCache](self, "_timerCache");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "cancelTimerForKey:", &unk_1EA3B03A0);

      }
      else
      {
        objc_msgSend(MEMORY[0x1E0DC3870], "systemImageNamed:", CFSTR("doc.viewfinder"));
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        CAMLocalizedFrameworkString(CFSTR("DOCUMENT_SCANNING_TITLE"), 0);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        +[CAMMachineReadableCodeButton buttonWithType:](CAMMachineReadableCodeButton, "buttonWithType:", 0);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "setAttributedTitleWithTitle:image:", v10, v9);
        objc_msgSend(v11, "addTarget:action:forControlEvents:", self, sel__handleDocumentScanningPillPress, 64);
        if (v13)
        {
          objc_msgSend(v13, "adoptMachineReadableCodeButton:animated:", v11, 1);
        }
        else
        {
          -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "adoptMachineReadableCodeButton:fromOriginalParent:animated:", v11, 0, 1);

        }
      }
    }
    else if (((!v5 | v7) & 1) == 0)
    {
      -[CAMViewfinderViewController _startTimer:](self, "_startTimer:", 3);
    }
    goto LABEL_13;
  }
}

- (void)_dismissDocumentScanningButton
{
  void *v3;
  void *v4;
  id v5;

  if (!-[CAMViewfinderViewController _shouldShowDocumentScanningButton](self, "_shouldShowDocumentScanningButton")
    && -[CAMViewfinderViewController _isDisplayingDocumentScanningButton](self, "_isDisplayingDocumentScanningButton"))
  {
    -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = v3;
    if (v3)
    {
      objc_msgSend(v3, "dismissMachineReadableCodeButtonAnimated:", 1);
    }
    else
    {
      -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "dismissMachineReadableCodeButtonAnimated:", 1);

    }
  }
}

- (BOOL)_shouldShowDocumentScanningButton
{
  int64_t v3;
  _BOOL4 v4;

  v3 = -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition");
  if ((-[CAMViewfinderViewController _currentMode](self, "_currentMode") | 4) != 4 || v3)
    goto LABEL_3;
  v4 = -[CAMViewfinderViewController _isDocumentInScene](self, "_isDocumentInScene");
  if (!v4)
    return v4;
  if (-[CAMViewfinderViewController _isDisplayingMRCButton](self, "_isDisplayingMRCButton"))
LABEL_3:
    LOBYTE(v4) = 0;
  else
    LOBYTE(v4) = !-[CAMViewfinderViewController _wantsVisualTextAnalysis](self, "_wantsVisualTextAnalysis");
  return v4;
}

- (BOOL)_isDisplayingDocumentScanningButton
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  char v9;

  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "machineReadableCodeButton");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "machineReadableCodeButton");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  objc_msgSend(v5, "title");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  CAMLocalizedFrameworkString(CFSTR("DOCUMENT_SCANNING_TITLE"), 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v7, "isEqualToString:", v8);

  return v9;
}

- (BOOL)_isDisplayingMRCButton
{
  void *v3;
  void *v4;
  void *v5;
  _BOOL4 v6;
  void *v7;

  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (!v3)
  {
    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "machineReadableCodeButton");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (v5)
      goto LABEL_3;
LABEL_5:
    LOBYTE(v6) = 0;
    goto LABEL_6;
  }
  objc_msgSend(v3, "machineReadableCodeButton");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v5)
    goto LABEL_5;
LABEL_3:
  v6 = !-[CAMViewfinderViewController _isDisplayingDocumentScanningButton](self, "_isDisplayingDocumentScanningButton");
LABEL_6:

  return v6;
}

- (CGPoint)prominentObjectManagerPointOfInterestInNormalizedDeviceSpace:(id)a3
{
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  CGPoint result;

  -[CAMViewfinderViewController _previewViewController](self, "_previewViewController", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "pointOfInterestInNormalizedCaptureDeviceSpace");
  v5 = v4;
  v7 = v6;

  v8 = v5;
  v9 = v7;
  result.y = v9;
  result.x = v8;
  return result;
}

- (void)prominentObjectManager:(id)a3 didChangeCurrentObject:(id)a4
{
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  int v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = a4;
  v6 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(v5, "metadataType");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138543362;
    v16 = v7;
    _os_log_impl(&dword_1DB760000, v6, OS_LOG_TYPE_DEFAULT, "Current prominent object metadata type: %{public}@", (uint8_t *)&v15, 0xCu);

  }
  -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _prominentObjectManager](self, "_prominentObjectManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "currentObjectType");

  v11 = 0;
  if (v10 == 2)
  {
    v13 = v5;
    goto LABEL_7;
  }
  v12 = 0;
  if (v10 == 1)
  {
    v13 = 0;
    v11 = v5;
LABEL_7:
    v12 = v11;
    v14 = v5;
    v11 = v13;
  }
  objc_msgSend(v8, "setCachedSignificantTextRegionResult:", v12);
  objc_msgSend(v8, "setCachedSignificantMRCResult:", v11);
  -[CAMViewfinderViewController updateControlVisibilityAnimated:](self, "updateControlVisibilityAnimated:", 1);
  -[CAMViewfinderViewController _dismissDockedMRCButtonIfNeededAnimated:](self, "_dismissDockedMRCButtonIfNeededAnimated:", 1);
  -[CAMViewfinderViewController _updateImageAnalysisButton](self, "_updateImageAnalysisButton");

}

- (void)prominentObjectManager:(id)a3 didChangeCurrentMachineReadableCodeAction:(id)a4
{
  id v5;
  void *v6;
  int v7;
  NSObject *v8;
  _BOOL4 v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a4;
  -[CAMViewfinderViewController _imageAnalysisButton](self, "_imageAnalysisButton");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isContextMenuDisplayed");
  v8 = os_log_create("com.apple.camera", "Camera");
  v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    if (!v9)
    {
LABEL_11:

      goto LABEL_12;
    }
    objc_msgSend(v5, "dataTypeDisplayString");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 138543362;
    v17 = v10;
    _os_log_impl(&dword_1DB760000, v8, OS_LOG_TYPE_DEFAULT, "Already showing MRC menu, ignoring new prominent MRC type: %{public}@", (uint8_t *)&v16, 0xCu);
LABEL_10:

    goto LABEL_11;
  }
  if (v9)
  {
    objc_msgSend(v5, "dataTypeDisplayString");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 138543362;
    v17 = v11;
    _os_log_impl(&dword_1DB760000, v8, OS_LOG_TYPE_DEFAULT, "Current prominent MRC type: %{public}@", (uint8_t *)&v16, 0xCu);

  }
  -[CAMViewfinderViewController _updateForCurrentMachineReadableCodeAction](self, "_updateForCurrentMachineReadableCodeAction");
  if (v5)
  {
    +[CAMMachineReadableCodeButton buttonWithType:](CAMMachineReadableCodeButton, "buttonWithType:", 0);
    v8 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "shortDescription");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "actionIcon");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSObject setAttributedTitleWithTitle:image:](v8, "setAttributedTitleWithTitle:image:", v12, v13);

    -[NSObject addTarget:action:forControlEvents:](v8, "addTarget:action:forControlEvents:", self, sel__handlePillPressForCurrentMRCAction, 64);
    -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v14;
    if (v14)
    {
      objc_msgSend(v14, "adoptMachineReadableCodeButton:animated:", v8, 1);
      -[NSObject setDelegate:](v8, "setDelegate:", self);
      -[NSObject setDismissable:](v8, "setDismissable:", 1);
    }
    else
    {
      -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "adoptMachineReadableCodeButton:fromOriginalParent:animated:", v8, 0, 1);

    }
    goto LABEL_10;
  }
LABEL_12:
  -[CAMViewfinderViewController _updateDocumentScanningButtonIfNeeded](self, "_updateDocumentScanningButtonIfNeeded");

}

- (void)prominentObjectManagerDidChangeIsCurrentObjectExpiring:(id)a3
{
  -[CAMViewfinderViewController _dismissDockedMRCButtonIfNeededAnimated:](self, "_dismissDockedMRCButtonIfNeededAnimated:", 1);
}

- (void)_updateMachineReadableCodeButtonForAction:(id)a3 animated:(BOOL)a4
{
  _BOOL4 v4;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  _QWORD v17[4];
  id v18;
  uint8_t buf[4];
  void *v20;
  uint64_t v21;

  v4 = a4;
  v21 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v7)
    v8 = v7;
  objc_msgSend(v8, "machineReadableCodeButton");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v10)
  {
    objc_msgSend(v6, "shortDescription");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      v20 = v11;
      _os_log_impl(&dword_1DB760000, v12, OS_LOG_TYPE_DEFAULT, "Updating MRC button with title: %{public}@", buf, 0xCu);
    }

    objc_msgSend(v6, "actionIcon");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setAttributedTitleWithTitle:image:", v11, v13);

    if (v7)
      v14 = v7;
    else
      v14 = v9;
    v15 = v14;
    objc_msgSend(v15, "setNeedsLayout");
    if (v4)
    {
      v16 = (void *)MEMORY[0x1E0DC3F10];
      v17[0] = MEMORY[0x1E0C809B0];
      v17[1] = 3221225472;
      v17[2] = __82__CAMViewfinderViewController__updateMachineReadableCodeButtonForAction_animated___block_invoke;
      v17[3] = &unk_1EA328868;
      v18 = v15;
      objc_msgSend(v16, "animateWithDuration:delay:usingSpringWithDamping:initialSpringVelocity:options:animations:completion:", 2, v17, 0, 0.5, 0.0, 1.0, 1.0);

    }
  }

}

uint64_t __82__CAMViewfinderViewController__updateMachineReadableCodeButtonForAction_animated___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
}

- (void)_updateForCurrentMachineReadableCodeAction
{
  void *v3;
  id v4;

  -[CAMViewfinderViewController _prominentObjectManager](self, "_prominentObjectManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "currentMachineReadableCodeAction");
  v4 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "setDelegate:", self);
  -[CAMViewfinderViewController updateControlVisibilityAnimated:](self, "updateControlVisibilityAnimated:", 1);
  -[CAMViewfinderViewController _updateImageAnalysisButton](self, "_updateImageAnalysisButton");

}

- (void)_handlePillPressForCurrentMRCAction
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  int v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "cachedSignificantMRCResult");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  -[CAMViewfinderViewController _prominentObjectManager](self, "_prominentObjectManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "currentMachineReadableCodeAction");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  -[CAMViewfinderViewController _visionAnalyticsSession](self, "_visionAnalyticsSession");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "countPillPressForMRC:action:", v4, v6);

  v8 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(v6, "detectedCode");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = 138543362;
    v11 = v9;
    _os_log_impl(&dword_1DB760000, v8, OS_LOG_TYPE_DEFAULT, "Performing action for MRC code: %{public}@", (uint8_t *)&v10, 0xCu);

  }
  objc_msgSend(v6, "performActionWithCompletion:", &__block_literal_global_437);

}

void __66__CAMViewfinderViewController__handlePillPressForCurrentMRCAction__block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;

  v2 = a2;
  if (v2)
  {
    v3 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      __66__CAMViewfinderViewController__handlePillPressForCurrentMRCAction__block_invoke_cold_1();

  }
}

- (void)_handleDocumentScanningPillPress
{
  uint64_t v3;
  void *v4;
  _QWORD v5[4];
  id v6;
  _QWORD aBlock[4];
  id v8;
  id location;

  objc_initWeak(&location, self);
  v3 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __63__CAMViewfinderViewController__handleDocumentScanningPillPress__block_invoke;
  aBlock[3] = &unk_1EA329490;
  objc_copyWeak(&v8, &location);
  v5[0] = v3;
  v5[1] = 3221225472;
  v5[2] = __63__CAMViewfinderViewController__handleDocumentScanningPillPress__block_invoke_4;
  v5[3] = &unk_1EA32A6A8;
  v4 = _Block_copy(aBlock);
  v6 = v4;
  -[CAMViewfinderViewController _requestPasscodeUnlockForDocumentScanningWithCompletionBlock:](self, "_requestPasscodeUnlockForDocumentScanningWithCompletionBlock:", v5);

  objc_destroyWeak(&v8);
  objc_destroyWeak(&location);
}

void __63__CAMViewfinderViewController__handleDocumentScanningPillPress__block_invoke(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  _QWORD v3[4];
  id v4;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __63__CAMViewfinderViewController__handleDocumentScanningPillPress__block_invoke_2;
  v3[3] = &unk_1EA329490;
  objc_copyWeak(&v4, v1);
  objc_msgSend(WeakRetained, "suspendCameraSessionWithCompletion:", v3);

  objc_destroyWeak(&v4);
}

void __63__CAMViewfinderViewController__handleDocumentScanningPillPress__block_invoke_2(uint64_t a1)
{
  _QWORD block[4];
  id v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __63__CAMViewfinderViewController__handleDocumentScanningPillPress__block_invoke_3;
  block[3] = &unk_1EA329490;
  objc_copyWeak(&v2, (id *)(a1 + 32));
  dispatch_async(MEMORY[0x1E0C80D38], block);
  objc_destroyWeak(&v2);
}

void __63__CAMViewfinderViewController__handleDocumentScanningPillPress__block_invoke_3(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "presentDocumentScanningViewControllerAnimated:", 1);

}

uint64_t __63__CAMViewfinderViewController__handleDocumentScanningPillPress__block_invoke_4(uint64_t result, int a2)
{
  if (a2)
    return (*(uint64_t (**)(void))(*(_QWORD *)(result + 32) + 16))();
  return result;
}

- (void)presentDocumentScanningViewControllerAnimated:(BOOL)a3
{
  _BOOL8 v3;
  CAMDocumentScanFlowController *v5;

  v3 = a3;
  v5 = objc_alloc_init(CAMDocumentScanFlowController);
  -[CAMDocumentScanFlowController setDocumentFlowDelegate:](v5, "setDocumentFlowDelegate:", self);
  -[CAMViewfinderViewController presentModalViewController:animated:](self, "presentModalViewController:animated:", v5, v3);

}

- (CGRect)sourceRectForPopoverActionPicker:(id)a3
{
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  CGRect result;

  -[CAMViewfinderViewController _imageAnalysisButton](self, "_imageAnalysisButton", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "bounds");
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  -[CAMViewfinderViewController view](self, "view");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "convertRect:toView:", v13, v6, v8, v10, v12);
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v21 = v20;

  v22 = v15;
  v23 = v17;
  v24 = v19;
  v25 = v21;
  result.size.height = v25;
  result.size.width = v24;
  result.origin.y = v23;
  result.origin.x = v22;
  return result;
}

- (void)actionDidUpdateTitle:(id)a3
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  NSObject *v14;
  uint8_t v15;
  _QWORD v16[5];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  v11 = a3;
  v17 = 0;
  v18 = &v17;
  v19 = 0x2050000000;
  v12 = (void *)getBCSActionClass_softClass;
  v20 = getBCSActionClass_softClass;
  if (!getBCSActionClass_softClass)
  {
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __getBCSActionClass_block_invoke;
    v16[3] = &unk_1EA329140;
    v16[4] = &v17;
    __getBCSActionClass_block_invoke((uint64_t)v16, v4, v5, v6, v7, v8, v9, v10, v15);
    v12 = (void *)v18[3];
  }
  v13 = objc_retainAutorelease(v12);
  _Block_object_dispose(&v17, 8);
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    -[CAMViewfinderViewController _updateMachineReadableCodeButtonForAction:animated:](self, "_updateMachineReadableCodeButtonForAction:animated:", v11, 1);
  }
  else
  {
    v14 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      -[CAMViewfinderViewController actionDidUpdateTitle:].cold.1();

  }
}

- (void)captureController:(id)a3 didOutputHistogramResult:(id)a4
{
  id v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;

  v5 = a4;
  -[CAMViewfinderViewController _shadowClippingValue](self, "_shadowClippingValue");
  v7 = v6;
  objc_msgSend(v5, "shadowClipping");
  -[CAMViewfinderViewController _setShadowClippingValue:](self, "_setShadowClippingValue:", v8 * 0.3 + v7 * 0.7);
  -[CAMViewfinderViewController _highlightClippingValue](self, "_highlightClippingValue");
  v10 = v9;
  objc_msgSend(v5, "highlightClipping");
  v12 = v11;

  -[CAMViewfinderViewController _setHighlightClippingValue:](self, "_setHighlightClippingValue:", v12 * 0.3 + v10 * 0.7);
  -[CAMViewfinderViewController _updateExposureButtonForCurrentState](self, "_updateExposureButtonForCurrentState");
}

- (void)_resetExposureClipping
{
  -[CAMViewfinderViewController _setShadowClippingValue:](self, "_setShadowClippingValue:", 0.0);
  -[CAMViewfinderViewController _setHighlightClippingValue:](self, "_setHighlightClippingValue:", 0.0);
  -[CAMViewfinderViewController _updateExposureButtonForCurrentState](self, "_updateExposureButtonForCurrentState");
}

- (void)_createVerticalSwipeGestureRecognizersIfNecessary
{
  UISwipeGestureRecognizer *v3;
  UISwipeGestureRecognizer *swipeDownGestureRecognizer;
  UISwipeGestureRecognizer *v5;
  UISwipeGestureRecognizer *swipeUpGestureRecognizer;
  id v7;

  -[CAMViewfinderViewController view](self, "view");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  if (!self->__swipeDownGestureRecognizer)
  {
    v3 = (UISwipeGestureRecognizer *)objc_msgSend(objc_alloc(MEMORY[0x1E0DC3D10]), "initWithTarget:action:", self, sel__handleSwipeDownGestureRecognizer_);
    swipeDownGestureRecognizer = self->__swipeDownGestureRecognizer;
    self->__swipeDownGestureRecognizer = v3;

    -[UISwipeGestureRecognizer setDirection:](self->__swipeDownGestureRecognizer, "setDirection:", 8);
    -[UISwipeGestureRecognizer setDelaysTouchesEnded:](self->__swipeDownGestureRecognizer, "setDelaysTouchesEnded:", 0);
    -[UISwipeGestureRecognizer setDelegate:](self->__swipeDownGestureRecognizer, "setDelegate:", self);
    objc_msgSend(v7, "addGestureRecognizer:", self->__swipeDownGestureRecognizer);
  }
  if (!self->__swipeUpGestureRecognizer)
  {
    v5 = (UISwipeGestureRecognizer *)objc_msgSend(objc_alloc(MEMORY[0x1E0DC3D10]), "initWithTarget:action:", self, sel__handleSwipeUpGestureRecognizer_);
    swipeUpGestureRecognizer = self->__swipeUpGestureRecognizer;
    self->__swipeUpGestureRecognizer = v5;

    -[UISwipeGestureRecognizer setDirection:](self->__swipeUpGestureRecognizer, "setDirection:", 4);
    -[UISwipeGestureRecognizer setDelaysTouchesEnded:](self->__swipeUpGestureRecognizer, "setDelaysTouchesEnded:", 0);
    -[UISwipeGestureRecognizer setDelegate:](self->__swipeUpGestureRecognizer, "setDelegate:", self);
    objc_msgSend(v7, "addGestureRecognizer:", self->__swipeUpGestureRecognizer);
  }

}

- (BOOL)_shouldCreateAndEmbedControls
{
  void *v2;
  char v3;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isCTMSupported");

  return v3 ^ 1;
}

- (void)_createOrDestroySharedLibraryControlsIfNecessary
{
  void *v3;
  id v4;

  -[CAMViewfinderViewController _createOrDestroySharedLibraryButtonIfNecessary](self, "_createOrDestroySharedLibraryButtonIfNecessary");
  -[CAMViewfinderViewController _createOrDestroySharedLibraryBadgeIfNecessary](self, "_createOrDestroySharedLibraryBadgeIfNecessary");
  -[CAMViewfinderViewController _remoteShutterController](self, "_remoteShutterController");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setSharedLibrarySupported:", objc_msgSend(v3, "sharedLibrarySwitchEnabled"));

}

- (void)_createModeSpecificControlsForConfiguration:(id)a3
{
  _BOOL4 v4;
  void *v5;
  id v6;
  void *v7;
  int v8;
  id v9;

  v9 = a3;
  v4 = -[CAMViewfinderViewController isShowingStandardControls](self, "isShowingStandardControls");
  v5 = v9;
  if (v4)
  {
    if (-[CAMViewfinderViewController _wantsZoomControlForGraphConfiguration:](self, "_wantsZoomControlForGraphConfiguration:", v9))
    {
      -[CAMViewfinderViewController _createZoomControlIfNecessary](self, "_createZoomControlIfNecessary");
    }
    if (-[CAMViewfinderViewController _wantsZoomSliderForGraphConfiguration:](self, "_wantsZoomSliderForGraphConfiguration:", v9)&& !+[CAMZoomSlider shouldFadeOutZoomSliderForLayoutStyle:](CAMZoomSlider, "shouldFadeOutZoomSliderForLayoutStyle:", -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle")))
    {
      -[CAMViewfinderViewController _createZoomSliderIfNecessary](self, "_createZoomSliderIfNecessary");
    }
    -[CAMViewfinderViewController _createOrDestroyLevelViewModelIfNecessary](self, "_createOrDestroyLevelViewModelIfNecessary");
    -[CAMViewfinderViewController _createGridViewIfNecessary](self, "_createGridViewIfNecessary");
    -[CAMViewfinderViewController _createOrDestroyLevelViewIfNecessary](self, "_createOrDestroyLevelViewIfNecessary");
    -[CAMViewfinderViewController _createOrDestroyHorizonLevelViewIfNecessary](self, "_createOrDestroyHorizonLevelViewIfNecessary");
    switch(objc_msgSend(v9, "mode"))
    {
      case 0:
      case 4:
      case 9:
        -[CAMViewfinderViewController _createStillImageControlsIfNecessary](self, "_createStillImageControlsIfNecessary");
        break;
      case 1:
      case 2:
      case 8:
        -[CAMViewfinderViewController _createVideoControlsIfNecessary](self, "_createVideoControlsIfNecessary");
        break;
      case 3:
        -[CAMViewfinderViewController _createPanoramaControlsIfNecessary](self, "_createPanoramaControlsIfNecessary");
        break;
      case 6:
      case 7:
        -[CAMViewfinderViewController _createPortraitModeControlsIfNecessary](self, "_createPortraitModeControlsIfNecessary");
        break;
      default:
        break;
    }
    v6 = -[CAMViewfinderViewController _embedDescriptionOverlayViewIfNecessaryForGraphConfiguration:](self, "_embedDescriptionOverlayViewIfNecessaryForGraphConfiguration:", v9);
    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "isImageAnalysisSupportedForMode:devicePosition:", objc_msgSend(v9, "mode"), objc_msgSend(v9, "devicePosition"));

    if (v8)
      -[CAMViewfinderViewController _createImageAnalysisButtonIfNeeded](self, "_createImageAnalysisButtonIfNeeded");
    -[CAMViewfinderViewController _updateEnabledControlsWithReason:](self, "_updateEnabledControlsWithReason:", CFSTR("Controls created"));
    v5 = v9;
  }

}

- (void)_createPortraitModeControlsIfNecessary
{
  void *v3;
  int v4;
  id v5;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _createTimerButtonIfNecessary](self, "_createTimerButtonIfNecessary");
  -[CAMViewfinderViewController _createTimerIndicatorViewIfNecessary](self, "_createTimerIndicatorViewIfNecessary");
  if (-[CAMViewfinderViewController _wantsHDRControlsVisible](self, "_wantsHDRControlsVisible"))
  {
    -[CAMViewfinderViewController _createHDRButtonIfNecessary](self, "_createHDRButtonIfNecessary");
    -[CAMViewfinderViewController _createHDRBadgeIfNecessary](self, "_createHDRBadgeIfNecessary");
  }
  if (objc_msgSend(v5, "isLivePhotoSupported"))
  {
    -[CAMViewfinderViewController _createLivePhotoButtonIfNecessary](self, "_createLivePhotoButtonIfNecessary");
    -[CAMViewfinderViewController _createLivePhotoBadgeIfNecessary](self, "_createLivePhotoBadgeIfNecessary");
  }
  -[CAMViewfinderViewController _createPortraitModeInstructionLabelIfNecessary](self, "_createPortraitModeInstructionLabelIfNecessary");
  if (objc_msgSend(v5, "isLiveFilteringSupported"))
  {
    -[CAMViewfinderViewController _createFilterButtonIfNecessary](self, "_createFilterButtonIfNecessary");
    -[CAMViewfinderViewController _createFilterScrubberGestureRecognizersIfNecessary](self, "_createFilterScrubberGestureRecognizersIfNecessary");
  }
  if (objc_msgSend(v5, "arePortraitEffectsSupported"))
  {
    -[CAMViewfinderViewController _createLightingControlIfNecessary](self, "_createLightingControlIfNecessary");
    -[CAMViewfinderViewController _createLightingNameBadgeIfNecessary](self, "_createLightingNameBadgeIfNecessary");
  }
  else
  {
    -[CAMViewfinderViewController _createShallowDepthOfFieldBadgeIfNecessary](self, "_createShallowDepthOfFieldBadgeIfNecessary");
  }
  if (objc_msgSend(v5, "isDepthEffectApertureSupported"))
    -[CAMViewfinderViewController _createApertureButtonIfNecessary](self, "_createApertureButtonIfNecessary");
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isPortraitEffectIntensitySupportedForLightingType:", -[CAMViewfinderViewController _portraitModeLightingEffectType](self, "_portraitModeLightingEffectType"));

  if (v4)
    -[CAMViewfinderViewController _createIntensityButtonIfNecessary](self, "_createIntensityButtonIfNecessary");

}

- (void)_createVideoControlsIfNecessary
{
  void *v3;
  int v4;

  -[CAMViewfinderViewController _createElapsedTimeViewIfNecessary](self, "_createElapsedTimeViewIfNecessary");
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isStillDuringVideoSupported");

  if (v4)
    -[CAMViewfinderViewController _createStillDuringVideoButtonIfNecessary](self, "_createStillDuringVideoButtonIfNecessary");
  -[CAMViewfinderViewController _createVideoConfigurationStatusIndicatorIfNecessary](self, "_createVideoConfigurationStatusIndicatorIfNecessary");
}

- (void)_createPanoramaControlsIfNecessary
{
  id v3;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v3, "isBackPanoramaSupported") & 1) != 0
    || objc_msgSend(v3, "isFrontPanoramaSupported"))
  {
    -[CAMViewfinderViewController _createPanoramaViewControllerIfNecessary](self, "_createPanoramaViewControllerIfNecessary");
  }

}

- (void)_createCreativeCameraButtonIfNecessary
{
  int64_t v3;
  CAMCreativeCameraButton *v4;
  CAMCreativeCameraButton *creativeCameraButton;

  if (!self->__creativeCameraButton)
  {
    if (-[CAMViewfinderViewController _shouldCreateAndEmbedControls](self, "_shouldCreateAndEmbedControls"))
    {
      v3 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
      v4 = -[CAMCreativeCameraButton initWithLayoutStyle:]([CAMCreativeCameraButton alloc], "initWithLayoutStyle:", v3);
      creativeCameraButton = self->__creativeCameraButton;
      self->__creativeCameraButton = v4;

      -[CAMCreativeCameraButton addTarget:action:forControlEvents:](self->__creativeCameraButton, "addTarget:action:forControlEvents:", self, sel__handleCreativeCameraButtonPressed_, 1);
      -[CAMCreativeCameraButton addTarget:action:forControlEvents:](self->__creativeCameraButton, "addTarget:action:forControlEvents:", self, sel__handleCreativeCameraButtonReleased_, 64);
      -[CAMCreativeCameraButton addTarget:action:forControlEvents:](self->__creativeCameraButton, "addTarget:action:forControlEvents:", self, sel__handleCreativeCameraButtonTouchAttemptedWhileDisabled_, 0x1000000);
      -[CAMViewfinderViewController _embedCreativeCameraButtonWithLayoutStyle:](self, "_embedCreativeCameraButtonWithLayoutStyle:", v3);
    }
  }
}

- (BOOL)_shouldCreatePhotosButton
{
  void *v2;
  BOOL v3;

  if (!-[CAMViewfinderViewController _useCreativeCameraControls](self, "_useCreativeCameraControls"))
    return 0;
  objc_msgSend(MEMORY[0x1E0DC3708], "currentDevice");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "userInterfaceIdiom") != 1;

  return v3;
}

- (void)_createPhotosButtonIfNecessary
{
  CAMMessagesPhotosButton *v3;
  CAMMessagesPhotosButton *photosButton;

  if (-[CAMViewfinderViewController _shouldCreatePhotosButton](self, "_shouldCreatePhotosButton")
    && !self->__photosButton)
  {
    if (-[CAMViewfinderViewController _shouldCreateAndEmbedControls](self, "_shouldCreateAndEmbedControls"))
    {
      +[CAMMessagesPhotosButton photosButton](CAMMessagesPhotosButton, "photosButton");
      v3 = (CAMMessagesPhotosButton *)objc_claimAutoreleasedReturnValue();
      photosButton = self->__photosButton;
      self->__photosButton = v3;

      -[CAMMessagesPhotosButton addTarget:action:forControlEvents:](self->__photosButton, "addTarget:action:forControlEvents:", self, sel__handlePhotosButtonReleased_, 64);
      -[CAMViewfinderViewController _embedPhotosButtonWithLayoutStyle:](self, "_embedPhotosButtonWithLayoutStyle:", -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle"));
    }
  }
}

- (void)_createDoneButtonIfNecessary
{
  PUReviewScreenDoneButton *v3;
  PUReviewScreenDoneButton *doneButton;

  if (!self->__doneButton)
  {
    objc_msgSend(MEMORY[0x1E0D7D238], "doneButton");
    v3 = (PUReviewScreenDoneButton *)objc_claimAutoreleasedReturnValue();
    doneButton = self->__doneButton;
    self->__doneButton = v3;

    -[PUReviewScreenDoneButton addTarget:action:forControlEvents:](self->__doneButton, "addTarget:action:forControlEvents:", self, sel__handleDoneButtonReleased_, 64);
    -[CAMViewfinderViewController _embedDoneButtonWithLayoutStyle:](self, "_embedDoneButtonWithLayoutStyle:", -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle"));
  }
}

- (void)_createApertureButtonIfNecessary
{
  id v3;
  CEKApertureButton *v4;
  CEKApertureButton *apertureButton;
  int64_t v6;
  void *v7;
  void *v8;

  if (!self->__apertureButton)
  {
    if (-[CAMViewfinderViewController _shouldCreateAndEmbedControls](self, "_shouldCreateAndEmbedControls"))
    {
      v3 = objc_alloc(MEMORY[0x1E0D0D010]);
      v4 = (CEKApertureButton *)objc_msgSend(v3, "initWithFrame:", *MEMORY[0x1E0C9D648], *(double *)(MEMORY[0x1E0C9D648] + 8), *(double *)(MEMORY[0x1E0C9D648] + 16), *(double *)(MEMORY[0x1E0C9D648] + 24));
      apertureButton = self->__apertureButton;
      self->__apertureButton = v4;

      -[CEKApertureButton addTarget:action:forControlEvents:](self->__apertureButton, "addTarget:action:forControlEvents:", self, sel__handleApertureButtonTapped_, 64);
      -[CEKApertureButton setExclusiveTouch:](self->__apertureButton, "setExclusiveTouch:", 1);
      v6 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
      -[CEKApertureButton setWantsBackground:](self->__apertureButton, "setWantsBackground:", v6 == 1);
      -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMViewfinderViewController _defaultZoomFactorForGraphConfiguration:](self, "_defaultZoomFactorForGraphConfiguration:", v8);
      -[CAMViewfinderViewController _updatePortraitApertureButtonForGraphConfiguration:zoomFactor:animated:](self, "_updatePortraitApertureButtonForGraphConfiguration:zoomFactor:animated:", v7, 0);

      -[CAMViewfinderViewController _embedApertureButtonWithLayoutStyle:](self, "_embedApertureButtonWithLayoutStyle:", v6);
    }
  }
}

- (void)_createIntensityButtonIfNecessary
{
  int64_t v3;
  CAMIntensityButton *v4;
  CAMIntensityButton *intensityButton;

  if (!self->__intensityButton)
  {
    if (-[CAMViewfinderViewController _shouldCreateAndEmbedControls](self, "_shouldCreateAndEmbedControls"))
    {
      v3 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
      v4 = -[CAMIntensityButton initWithLayoutStyle:]([CAMIntensityButton alloc], "initWithLayoutStyle:", v3);
      intensityButton = self->__intensityButton;
      self->__intensityButton = v4;

      -[CAMIntensityButton addTarget:action:forControlEvents:](self->__intensityButton, "addTarget:action:forControlEvents:", self, sel__handleIntensityButtonTapped_, 64);
      -[CAMIntensityButton setExclusiveTouch:](self->__intensityButton, "setExclusiveTouch:", 1);
      -[CAMViewfinderViewController _updateIntensityButtonForCurrentState](self, "_updateIntensityButtonForCurrentState");
      -[CAMViewfinderViewController _embedIntensityButtonWithLayoutStyle:](self, "_embedIntensityButtonWithLayoutStyle:", v3);
    }
  }
}

- (UIControl)_primaryShutterControl
{
  void *v3;
  void *v4;
  id v5;
  void *v6;

  -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    v5 = v3;
  }
  else
  {
    -[CAMViewfinderViewController _shutterButton](self, "_shutterButton");
    v5 = (id)objc_claimAutoreleasedReturnValue();
  }
  v6 = v5;

  return (UIControl *)v6;
}

- (void)_createStillDuringVideoButtonIfNecessary
{
  int64_t v3;
  CUShutterButton *v4;
  CUShutterButton *stillDuringVideoButton;

  if (!self->__stillDuringVideoButton)
  {
    if (-[CAMViewfinderViewController _shouldCreateAndEmbedControls](self, "_shouldCreateAndEmbedControls"))
    {
      v3 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
      +[CUShutterButton smallShutterButtonWithLayoutStyle:](CUShutterButton, "smallShutterButtonWithLayoutStyle:", v3);
      v4 = (CUShutterButton *)objc_claimAutoreleasedReturnValue();
      stillDuringVideoButton = self->__stillDuringVideoButton;
      self->__stillDuringVideoButton = v4;

      -[CUShutterButton addTarget:action:forControlEvents:](self->__stillDuringVideoButton, "addTarget:action:forControlEvents:", self, sel__handleStillDuringVideoButtonPressed_, 1);
      -[CUShutterButton addTarget:action:forControlEvents:](self->__stillDuringVideoButton, "addTarget:action:forControlEvents:", self, sel__handleStillDuringVideoButtonReleased_, 96);
      -[CUShutterButton setMode:](self->__stillDuringVideoButton, "setMode:", 0);
      -[CUShutterButton setExclusiveTouch:](self->__stillDuringVideoButton, "setExclusiveTouch:", 1);
      -[CAMViewfinderViewController _embedStillDuringVideoButtonWithLayoutStyle:](self, "_embedStillDuringVideoButtonWithLayoutStyle:", v3);
    }
  }
}

- (void)_createElapsedTimeViewIfNecessary
{
  int64_t v3;
  CAMElapsedTimeView *v4;
  CAMElapsedTimeView *elapsedTimeView;

  if (!self->__elapsedTimeView)
  {
    if (-[CAMViewfinderViewController _shouldCreateAndEmbedControls](self, "_shouldCreateAndEmbedControls"))
    {
      v3 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
      v4 = -[CAMElapsedTimeView initWithLayoutStyle:]([CAMElapsedTimeView alloc], "initWithLayoutStyle:", v3);
      elapsedTimeView = self->__elapsedTimeView;
      self->__elapsedTimeView = v4;

      -[CAMViewfinderViewController _embedElapsedTimeViewWithLayoutStyle:](self, "_embedElapsedTimeViewWithLayoutStyle:", v3);
    }
  }
}

- (CAMElapsedTimeView)_targetElapsedTimeView
{
  void *v3;
  void *v4;

  -[CAMViewfinderViewController _elapsedTimeView](self, "_elapsedTimeView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v3)
  {
    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "elapsedTimeView");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return (CAMElapsedTimeView *)v3;
}

- (void)_destroyHDRButtonIfNecessary
{
  void *v3;
  CAMHDRButton *HDRButton;
  id v5;

  if (self->__HDRButton)
  {
    -[CAMViewfinderViewController _bottomBar](self, "_bottomBar");
    v5 = (id)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _topBar](self, "_topBar");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setHDRButton:", 0);
    objc_msgSend(v5, "setHDRButton:", 0);
    HDRButton = self->__HDRButton;
    self->__HDRButton = 0;

    objc_msgSend(v3, "configureForMode:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"));
    -[CAMViewfinderViewController _resolveAndUpdatePotentiallyConflictingControls:animated:](self, "_resolveAndUpdatePotentiallyConflictingControls:animated:", 1, 0);

  }
}

- (void)_createOrDestroyHDRButtonIfNecessary
{
  if (-[CAMViewfinderViewController _wantsHDRControlsVisible](self, "_wantsHDRControlsVisible"))
    -[CAMViewfinderViewController _createHDRButtonIfNecessary](self, "_createHDRButtonIfNecessary");
  else
    -[CAMViewfinderViewController _destroyHDRButtonIfNecessary](self, "_destroyHDRButtonIfNecessary");
}

- (void)_destroyHDRBadgeIfNecessary
{
  CAMHDRBadge *HDRBadge;
  id v4;

  if (self->__HDRBadge)
  {
    -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
    v4 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setHDRBadge:", 0);
    HDRBadge = self->__HDRBadge;
    self->__HDRBadge = 0;

  }
}

- (void)_createOrDestroyHDRBadgeIfNecessary
{
  if (-[CAMViewfinderViewController _wantsHDRControlsVisible](self, "_wantsHDRControlsVisible"))
    -[CAMViewfinderViewController _createHDRBadgeIfNecessary](self, "_createHDRBadgeIfNecessary");
  else
    -[CAMViewfinderViewController _destroyHDRBadgeIfNecessary](self, "_destroyHDRBadgeIfNecessary");
}

- (void)_createLivePhotoButtonIfNecessary
{
  int64_t v3;
  void *v4;
  uint64_t v5;
  CAMLivePhotoButton *v6;
  CAMLivePhotoButton *livePhotoButton;

  if (!self->__livePhotoButton)
  {
    if (-[CAMViewfinderViewController _shouldCreateAndEmbedControls](self, "_shouldCreateAndEmbedControls"))
    {
      v3 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
      +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_msgSend(v4, "isLivePhotoAutoModeSupported");

      v6 = -[CAMLivePhotoButton initWithLayoutStyle:]([CAMLivePhotoButton alloc], "initWithLayoutStyle:", v3);
      livePhotoButton = self->__livePhotoButton;
      self->__livePhotoButton = v6;

      -[CAMLivePhotoButton setExclusiveTouch:](self->__livePhotoButton, "setExclusiveTouch:", 1);
      -[CAMLivePhotoButton addTarget:action:forControlEvents:](self->__livePhotoButton, "addTarget:action:forControlEvents:", self, sel__handleLivePhotoButtonChangedLivePhotoMode, 4096);
      -[CAMLivePhotoButton setAllowsAutomaticMode:needsReloadData:](self->__livePhotoButton, "setAllowsAutomaticMode:needsReloadData:", v5, 0);
      -[CAMLivePhotoButton reloadData](self->__livePhotoButton, "reloadData");
      -[CAMViewfinderViewController _resolveAndUpdatePotentiallyConflictingControls:animated:](self, "_resolveAndUpdatePotentiallyConflictingControls:animated:", 1, 0);
      -[CAMViewfinderViewController _embedLivePhotoButtonWithLayoutStyle:](self, "_embedLivePhotoButtonWithLayoutStyle:", v3);
    }
  }
}

- (void)_createLivePhotoBadgeIfNecessary
{
  CAMLivePhotoBadge *v3;
  CAMLivePhotoBadge *v4;
  CAMLivePhotoBadge *livePhotoBadge;

  if (!self->__livePhotoBadge
    && -[CAMViewfinderViewController _shouldCreateAndEmbedControls](self, "_shouldCreateAndEmbedControls"))
  {
    v3 = [CAMLivePhotoBadge alloc];
    v4 = -[CAMLivePhotoBadge initWithFrame:](v3, "initWithFrame:", *MEMORY[0x1E0C9D648], *(double *)(MEMORY[0x1E0C9D648] + 8), *(double *)(MEMORY[0x1E0C9D648] + 16), *(double *)(MEMORY[0x1E0C9D648] + 24));
    livePhotoBadge = self->__livePhotoBadge;
    self->__livePhotoBadge = v4;

  }
  -[CAMViewfinderViewController _embedLivePhotoBadgeWithLayoutStyle:](self, "_embedLivePhotoBadgeWithLayoutStyle:", -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle"));
}

- (void)_createOrDestroySharedLibraryButtonIfNecessary
{
  int64_t v3;
  void *v4;
  _BOOL4 v5;
  CAMSharedLibraryButton *v6;
  CAMSharedLibraryButton *sharedLibraryButton;
  void *v8;
  unsigned int v9;
  CAMSharedLibraryButton *v10;

  v3 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v4, "sharedLibrarySwitchEnabled") & 1) != 0)
  {
    v5 = -[CAMViewfinderViewController _shouldCreateAndEmbedControls](self, "_shouldCreateAndEmbedControls");

    if (v5)
    {
      if (self->__sharedLibraryButton)
        return;
      v6 = -[CAMSharedLibraryButton initWithLayoutStyle:]([CAMSharedLibraryButton alloc], "initWithLayoutStyle:", v3);
      sharedLibraryButton = self->__sharedLibraryButton;
      self->__sharedLibraryButton = v6;

      -[CAMSharedLibraryButton setExclusiveTouch:](self->__sharedLibraryButton, "setExclusiveTouch:", 1);
      -[CAMSharedLibraryButton addTarget:action:forControlEvents:](self->__sharedLibraryButton, "addTarget:action:forControlEvents:", self, sel__handleSharedLibraryButton, 4096);
      -[CAMExpandableMenuButton reloadData](self->__sharedLibraryButton, "reloadData");
      -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = -[CAMViewfinderViewController _shouldShowSharedLibraryButtonForGraphConfiguration:](self, "_shouldShowSharedLibraryButtonForGraphConfiguration:", v8);

      -[CAMSharedLibraryButton setAlpha:](self->__sharedLibraryButton, "setAlpha:", (double)v9);
      -[CAMViewfinderViewController _updateSharedLibraryButtonAnimated:](self, "_updateSharedLibraryButtonAnimated:", 0);
      goto LABEL_8;
    }
  }
  else
  {

  }
  v10 = self->__sharedLibraryButton;
  if (!v10)
    return;
  self->__sharedLibraryButton = 0;

LABEL_8:
  -[CAMViewfinderViewController _updateSharedLibraryButtonOnSubviewsForLayoutStyle:](self, "_updateSharedLibraryButtonOnSubviewsForLayoutStyle:", v3);
}

- (void)_createOrDestroySharedLibraryBadgeIfNecessary
{
  void *v3;
  _BOOL4 v4;
  CAMSharedLibraryBadge *v5;
  CAMSharedLibraryBadge *sharedLibraryBadge;
  void *v7;

  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v3, "sharedLibrarySwitchEnabled") & 1) != 0)
  {
    v4 = -[CAMViewfinderViewController _shouldCreateAndEmbedControls](self, "_shouldCreateAndEmbedControls");

    if (v4)
    {
      if (self->__sharedLibraryBadge)
        return;
      v5 = objc_alloc_init(CAMSharedLibraryBadge);
      sharedLibraryBadge = self->__sharedLibraryBadge;
      self->__sharedLibraryBadge = v5;

      -[CAMViewfinderViewController _librarySelectionController](self, "_librarySelectionController");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMSharedLibraryBadge setSharedLibraryMode:](self->__sharedLibraryBadge, "setSharedLibraryMode:", objc_msgSend(v7, "sharedLibraryMode"));
      goto LABEL_8;
    }
  }
  else
  {

  }
  v7 = self->__sharedLibraryBadge;
  if (!v7)
    return;
  self->__sharedLibraryBadge = 0;
LABEL_8:

  -[CAMViewfinderViewController _embedSharedLibraryBadgeWithLayoutStyle:](self, "_embedSharedLibraryBadgeWithLayoutStyle:", -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle"));
}

- (void)_createShallowDepthOfFieldBadgeIfNecessary
{
  int64_t v3;
  CAMShallowDepthOfFieldBadge *v4;
  CAMShallowDepthOfFieldBadge *v5;
  CAMShallowDepthOfFieldBadge *shallowDepthOfFieldBadge;

  if (!self->__shallowDepthOfFieldBadge)
  {
    v3 = -[CAMViewfinderViewController _shallowDepthOfFieldStatus](self, "_shallowDepthOfFieldStatus");
    v4 = [CAMShallowDepthOfFieldBadge alloc];
    v5 = -[CAMShallowDepthOfFieldBadge initWithFrame:](v4, "initWithFrame:", *MEMORY[0x1E0C9D648], *(double *)(MEMORY[0x1E0C9D648] + 8), *(double *)(MEMORY[0x1E0C9D648] + 16), *(double *)(MEMORY[0x1E0C9D648] + 24));
    shallowDepthOfFieldBadge = self->__shallowDepthOfFieldBadge;
    self->__shallowDepthOfFieldBadge = v5;

    -[CAMShallowDepthOfFieldBadge setShallowDepthOfFieldStatus:](self->__shallowDepthOfFieldBadge, "setShallowDepthOfFieldStatus:", v3);
    -[CAMViewfinderViewController _embedShallowDepthOfFieldBadgeWithLayoutStyle:](self, "_embedShallowDepthOfFieldBadgeWithLayoutStyle:", -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle"));
  }
}

- (void)_createPortraitModeInstructionLabelIfNecessary
{
  CAMPortraitModeInstructionLabel *v3;
  CAMPortraitModeInstructionLabel *v4;
  CAMPortraitModeInstructionLabel *portraitModeInstructionLabel;

  if (!self->__portraitModeInstructionLabel)
  {
    if (-[CAMViewfinderViewController _shouldCreateAndEmbedControls](self, "_shouldCreateAndEmbedControls"))
    {
      v3 = [CAMPortraitModeInstructionLabel alloc];
      v4 = -[CAMInstructionLabel initWithFrame:](v3, "initWithFrame:", *MEMORY[0x1E0C9D648], *(double *)(MEMORY[0x1E0C9D648] + 8), *(double *)(MEMORY[0x1E0C9D648] + 16), *(double *)(MEMORY[0x1E0C9D648] + 24));
      portraitModeInstructionLabel = self->__portraitModeInstructionLabel;
      self->__portraitModeInstructionLabel = v4;

      -[CAMInstructionLabel setUseModeDialFontSize:](self->__portraitModeInstructionLabel, "setUseModeDialFontSize:", 1);
      -[CAMViewfinderViewController _updatePortraitModeInstructionLabelForCurrentState](self, "_updatePortraitModeInstructionLabelForCurrentState");
      -[CAMViewfinderViewController _embedPortraitModeInstructionLabelWithLayoutStyle:](self, "_embedPortraitModeInstructionLabelWithLayoutStyle:", -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle"));
    }
  }
}

- (void)fullscreenViewfinderDidCreateControlDrawer:(id)a3
{
  void *v4;

  objc_msgSend(a3, "controlDrawer");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setDelegate:", self);

  -[CAMViewfinderViewController _updateControlDrawerContentsVisibilityAnimated:](self, "_updateControlDrawerContentsVisibilityAnimated:", 0);
}

- (void)fullscreenViewfinderDidCreateAutoMacroButton:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  -[CAMViewfinderViewController _updateAutoMacroButtonAnimated:](self, "_updateAutoMacroButtonAnimated:", 0);
  objc_msgSend(v4, "autoMacroButton");
  v5 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "addTarget:action:forControlEvents:", self, sel__handleAutoMacroButtonTapped_, 64);
}

- (void)fullscreenViewfinderDidCreateDepthEffectSuggestionButton:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  -[CAMViewfinderViewController _updateDepthEffectSuggestionButtonAnimated:](self, "_updateDepthEffectSuggestionButtonAnimated:", 0);
  objc_msgSend(v4, "depthEffectSuggestionButton");
  v5 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "addTarget:action:forControlEvents:", self, sel__handleDepthEffectSuggestionButtonTapped_, 64);
}

- (void)fullscreenViewfinderDidCreatePortraitControls:(id)a3
{
  void *v4;
  void *v5;
  void *v6;

  objc_msgSend(a3, "lightingControl");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setDelegate:", self);

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updateLightingUIForGraphConfiguration:animated:](self, "_updateLightingUIForGraphConfiguration:animated:", v5, 0);

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updateLightingControlFadesForGraphConfiguration:animated:](self, "_updateLightingControlFadesForGraphConfiguration:animated:", v6, 0);

  -[CAMViewfinderViewController _updatePortraitModeInstructionLabelForCurrentState](self, "_updatePortraitModeInstructionLabelForCurrentState");
}

- (void)fullscreenViewfinderDidCreateSpatialCaptureButton:(id)a3
{
  id v4;

  objc_msgSend(a3, "spatialCaptureButton");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addTarget:action:forControlEvents:", self, sel__handleSpatialCaptureButtonTapped_, 64);
  objc_msgSend(v4, "setActive:animated:", -[CAMViewfinderViewController _isSpatialVideoInVideoModeActiveForMode:devicePosition:](self, "_isSpatialVideoInVideoModeActiveForMode:devicePosition:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition")), 0);

}

- (void)fullscreenViewfinderDidCreateSemanticStyleControls:(id)a3
{
  -[CAMViewfinderViewController _updateSemanticStyleControlsForCurrentStateAnimated:](self, "_updateSemanticStyleControlsForCurrentStateAnimated:", 0);
}

- (void)fullscreenViewfinderDidChangeSemanticStyle:(id)a3
{
  void *v4;
  id v5;

  objc_msgSend(a3, "semanticStylePicker");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _setSelectedSemanticStyleIndex:](self, "_setSelectedSemanticStyleIndex:", objc_msgSend(v4, "selectedStyleIndex"));

  -[CAMViewfinderViewController _updateSemanticStyleControlsForCurrentStateAnimated:](self, "_updateSemanticStyleControlsForCurrentStateAnimated:", 1);
  -[CAMViewfinderViewController _analyticsControlDrawerEvent](self, "_analyticsControlDrawerEvent");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "didChangeValueForControlType:", 10);

}

- (void)_updateSelectedSmartStyleFromPicker
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0_4(&dword_1DB760000, v0, v1, "Received request to update style in mode that doesn't support picker", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

- (void)fullscreenViewfinder:(id)a3 didChangeControlDrawerVisibility:(BOOL)a4 animated:(BOOL)a5 forReason:(int64_t)a6
{
  _BOOL8 v7;
  void *v9;
  void *v10;
  void *v11;
  CAMAnalyticsControlDrawerEvent *v12;
  void *v13;
  void *v14;

  v7 = a5;
  if (a4)
  {
    -[CAMViewfinderViewController _dismissOverlays](self, "_dismissOverlays", a3);
    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "controlStatusBar");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "collapseExpandedIndicatorAnimated:", v7);

    -[CAMViewfinderViewController _analyticsControlDrawerEvent](self, "_analyticsControlDrawerEvent");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v11)
    {
      v12 = -[CAMAnalyticsControlDrawerEvent initWithReason:captureMode:devicePosition:]([CAMAnalyticsControlDrawerEvent alloc], "initWithReason:captureMode:devicePosition:", a6, -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"));
      -[CAMViewfinderViewController _setAnalyticsControlDrawerEvent:](self, "_setAnalyticsControlDrawerEvent:", v12);

    }
    -[CAMViewfinderViewController _analyticsSessionEvent](self, "_analyticsSessionEvent");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "didPresentControlDrawerForReason:", a6);

  }
  else
  {
    -[CAMViewfinderViewController _analyticsControlDrawerEvent](self, "_analyticsControlDrawerEvent", a3);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "dismissedControlDrawerWithReason:", a6);

    -[CAMViewfinderViewController _setAnalyticsControlDrawerEvent:](self, "_setAnalyticsControlDrawerEvent:", 0);
  }
  -[CAMViewfinderViewController updateControlVisibilityAnimated:](self, "updateControlVisibilityAnimated:", v7);
}

- (void)fullscreenViewFinder:(id)a3 willPresentControlDrawerModallyForControlType:(int64_t)a4 reason:(int64_t)a5
{
  void *v8;
  CAMAnalyticsControlDrawerEvent *v9;
  id v10;

  -[CAMViewfinderViewController _analyticsControlDrawerEvent](self, "_analyticsControlDrawerEvent", a3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v8)
  {
    v9 = -[CAMAnalyticsControlDrawerEvent initWithReason:captureMode:devicePosition:]([CAMAnalyticsControlDrawerEvent alloc], "initWithReason:captureMode:devicePosition:", a5, -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"));
    -[CAMViewfinderViewController _setAnalyticsControlDrawerEvent:](self, "_setAnalyticsControlDrawerEvent:", v9);

    -[CAMViewfinderViewController _analyticsControlDrawerEvent](self, "_analyticsControlDrawerEvent");
    v10 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setOpeningControlType:", a4);

  }
}

- (void)fullscreenViewFinder:(id)a3 willDismissControlDrawerModallyForControlType:(int64_t)a4 reason:(int64_t)a5
{
  id v6;

  -[CAMViewfinderViewController _analyticsControlDrawerEvent](self, "_analyticsControlDrawerEvent", a3, a4, a5);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setDismissingControlType:", a4);

}

- (void)fullscreenViewfinder:(id)a3 didCreateInstructionLabel:(int64_t)a4
{
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  _BOOL8 v12;
  void *v13;
  void *v14;
  id v15;

  v6 = a3;
  v15 = v6;
  switch(a4)
  {
    case 1:
      -[CAMViewfinderViewController _updatePortraitModeInstructionLabelForCurrentState](self, "_updatePortraitModeInstructionLabelForCurrentState");
      goto LABEL_11;
    case 2:
      -[CAMViewfinderViewController _updateQRCodeInstructionLabelForCurrentState](self, "_updateQRCodeInstructionLabelForCurrentState");
      goto LABEL_11;
    case 4:
      -[CAMViewfinderViewController _captureController](self, "_captureController");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend(v7, "flashCompromise");
      objc_msgSend(v15, "flashCompromisedInstructionLabel");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "setCompromise:", v8);

      goto LABEL_11;
    case 5:
      -[CAMViewfinderViewController _updateImageAnalysisInstructions](self, "_updateImageAnalysisInstructions");
      goto LABEL_11;
    case 6:
      -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMViewfinderViewController _updateMaxRecordingTimeInstructionLabelForGraphConfiguration:](self, "_updateMaxRecordingTimeInstructionLabelForGraphConfiguration:", v10);
      goto LABEL_8;
    case 7:
      v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DC3D80]), "initWithTarget:action:", self, sel__handleFreeResourcesLabelTapped_);
      objc_msgSend(v15, "freeResourcesInstructionLabel");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "addGestureRecognizer:", v10);

      -[CAMViewfinderViewController _updateFreeResourcesInstructionLabelForCurrentState](self, "_updateFreeResourcesInstructionLabelForCurrentState");
LABEL_8:

      goto LABEL_11;
    case 9:
      v12 = -[CAMViewfinderViewController _currentMode](self, "_currentMode") == 9;
      -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "setStereoCaptureStatus:useHoldStillStereoLowLightInstruction:animated:", -[CAMViewfinderViewController _stereoCaptureStatus](self, "_stereoCaptureStatus"), v12, 1);

      goto LABEL_11;
    case 10:
      objc_msgSend(v6, "smartStyleCategoryInstructionLabel");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "setStyle:", 2);

      -[CAMViewfinderViewController _updateSmartStyleControlsForCurrentStateAnimateSliders:animateOtherControls:](self, "_updateSmartStyleControlsForCurrentStateAnimateSliders:animateOtherControls:", 0, 0);
LABEL_11:
      v6 = v15;
      break;
    default:
      break;
  }

}

- (void)fullscreenViewfinder:(id)a3 didChangeExpanded:(BOOL)a4 forDrawerControlOfType:(int64_t)a5 animated:(BOOL)a6 updatePreferredDrawerControl:(BOOL)a7
{
  _BOOL4 v7;
  _BOOL8 v8;
  _BOOL4 v10;
  void *v12;
  void *v13;
  void *v14;
  id v15;

  v7 = a7;
  v8 = a6;
  v10 = a4;
  v15 = a3;
  switch(a5)
  {
    case 4:
      if (v10 || !-[CAMViewfinderViewController _wantsFilterScrubberVisible](self, "_wantsFilterScrubberVisible"))
        break;
      -[CAMViewfinderViewController _setWantsFilterScrubberVisible:animated:](self, "_setWantsFilterScrubberVisible:animated:", 0, v8);
      if (v7)
        goto LABEL_13;
      goto LABEL_16;
    case 6:
      -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
      -[CAMViewfinderViewController _updatePortraitApertureButtonForGraphConfiguration:zoomFactor:animated:](self, "_updatePortraitApertureButtonForGraphConfiguration:zoomFactor:animated:", v12, v8);
      goto LABEL_11;
    case 7:
      -[CAMViewfinderViewController _updateIntensityButtonForCurrentState](self, "_updateIntensityButtonForCurrentState");
      if (!v7)
        goto LABEL_16;
      goto LABEL_13;
    case 8:
      -[CAMViewfinderViewController _updateExposureButtonForCurrentState](self, "_updateExposureButtonForCurrentState");
      -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMViewfinderViewController _updateControlStatusBarContentsVisibilityForGraphConfiguration:animated:](self, "_updateControlStatusBarContentsVisibilityForGraphConfiguration:animated:", v13, v8);

      -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMViewfinderViewController _updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:animated:](self, "_updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:animated:", v12, v8);
      goto LABEL_11;
    case 10:
      -[CAMViewfinderViewController _updateSemanticStyleControlsForCurrentStateAnimated:](self, "_updateSemanticStyleControlsForCurrentStateAnimated:", 0);
      -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMViewfinderViewController _updateControlStatusBarContentsVisibilityForGraphConfiguration:animated:](self, "_updateControlStatusBarContentsVisibilityForGraphConfiguration:animated:", v14, v8);

      -[CAMViewfinderViewController updateControlVisibilityAnimated:](self, "updateControlVisibilityAnimated:", v8);
      -[CAMViewfinderViewController _updatePreviewControllerPortraitStatus](self, "_updatePreviewControllerPortraitStatus");
      -[CAMViewfinderViewController _updateEnabledControlsWithReason:](self, "_updateEnabledControlsWithReason:", CFSTR("Expanding SemanticStyles control"));
      -[CAMViewfinderViewController _updateViewfinderMaterialAnimated:](self, "_updateViewfinderMaterialAnimated:", v8);
      if (!v7)
        goto LABEL_16;
      goto LABEL_13;
    case 11:
      -[CAMViewfinderViewController _updateSmartStyleControlsForCurrentStateAnimateSliders:animateOtherControls:](self, "_updateSmartStyleControlsForCurrentStateAnimateSliders:animateOtherControls:", 0, 0);
      -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMViewfinderViewController _updateControlStatusBarContentsVisibilityForGraphConfiguration:animated:](self, "_updateControlStatusBarContentsVisibilityForGraphConfiguration:animated:", v12, v8);
LABEL_11:

      break;
    default:
      break;
  }
  if (v7)
  {
LABEL_13:
    if (!v10)
      a5 = -1;
    -[CAMViewfinderViewController _setPreferredControlToOpenInDrawer:forMode:](self, "_setPreferredControlToOpenInDrawer:forMode:", a5, -[CAMViewfinderViewController _currentMode](self, "_currentMode"));
  }
LABEL_16:

}

- (int64_t)expandedControlTypeForExpandingDrawerInFullscreenViewfinder:(id)a3
{
  void *v4;
  int v5;
  int64_t result;
  void *v7;
  void *v8;
  int v9;

  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "preservePreferredDrawerControl");

  result = -1;
  if (v5)
    result = -[CAMViewfinderViewController _preferredControlToOpenInDrawerForMode:](self, "_preferredControlToOpenInDrawerForMode:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"));
  if (result == 11)
  {
    -[CAMViewfinderViewController _controlDrawer](self, "_controlDrawer");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "smartStyleButton");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "showDisabled");

    result = -1;
    if (!v9)
      return 11;
  }
  if (result == 4)
  {
    -[CAMViewfinderViewController _setWantsFilterScrubberVisible:animated:](self, "_setWantsFilterScrubberVisible:animated:", 1, 1);
    return 4;
  }
  return result;
}

- (BOOL)fullscreenViewfinderCanUpdatePreviewSemanticStyles:(id)a3
{
  return !-[CAMViewfinderViewController _isReconfiguring](self, "_isReconfiguring", a3)
      && !-[CAMViewfinderViewController _hasInFlightConfiguration](self, "_hasInFlightConfiguration")
      && -[CAMViewfinderViewController _completedInitialConfiguration](self, "_completedInitialConfiguration");
}

- (void)fullscreenViewfinderDidCreateExternalStorageButton:(id)a3
{
  id v3;
  void *v4;
  id v5;

  v3 = a3;
  objc_msgSend(v3, "externalStorageButton");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setEnabled:", 0);

  objc_msgSend(v3, "externalStorageButton");
  v5 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "setSelected:", 1);
}

- (void)fullscreenViewfinderDidCreateSpotlightControlPanel:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a3, "spotlightControlPanel");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setDelegate:", self);
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "openHalfPressSpotlightControls");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = (void *)objc_msgSend(v6, "mutableCopy");
  -[CAMViewfinderViewController _setOpenHalfPressSpotlightControls:](self, "_setOpenHalfPressSpotlightControls:", v7);

  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v8 = v6;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v14;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v14 != v11)
          objc_enumerationMutation(v8);
        objc_msgSend(v4, "setControlType:open:animated:", objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * v12++), "integerValue", (_QWORD)v13), 1, 0);
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v10);
  }

}

- (void)fullscreenViewfinderDidCreateSpotlightSmartStyleStatusIndicator:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  -[CAMViewfinderViewController _updateSmartStyleControlsForCurrentStateAnimateSliders:animateOtherControls:](self, "_updateSmartStyleControlsForCurrentStateAnimateSliders:animateOtherControls:", 0, 0);
  objc_msgSend(v4, "spotlightSmartStyleStatusIndicator");
  v5 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "addTarget:action:forControlEvents:", self, sel__handleSpotlightSmartStyleStatusIndicatorTapped, 64);
}

- (void)_handleSpotlightSmartStyleStatusIndicatorTapped
{
  id v2;

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "presentControlDrawerModally:forReason:controlType:", 1, 1, 11);

}

- (void)fullscreenViewfinderDidCreateSmartStyleControls:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  UISwipeGestureRecognizer *v8;
  UISwipeGestureRecognizer *smartStylesSwipeLeftGestureRecognizer;
  UISwipeGestureRecognizer *v10;
  UISwipeGestureRecognizer *smartStylesSwipeRightGestureRecognizer;
  void *v12;
  void *v13;
  void *v14;
  double v15;
  void *v16;
  double v17;
  void *v18;
  _QWORD v19[4];
  id v20;
  _QWORD v21[4];
  id v22;
  id location;

  v4 = a3;
  objc_initWeak(&location, self);
  objc_msgSend(v4, "smartStyleSlider2D");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = MEMORY[0x1E0C809B0];
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = __79__CAMViewfinderViewController_fullscreenViewfinderDidCreateSmartStyleControls___block_invoke;
  v21[3] = &unk_1EA32A6D0;
  objc_copyWeak(&v22, &location);
  objc_msgSend(v5, "setOnValueChanged:", v21);

  objc_msgSend(v4, "smartStyleIntensitySlider");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addTarget:action:forControlEvents:", self, sel__handleSmartStyleIntensitySlider_, 4096);

  v8 = (UISwipeGestureRecognizer *)objc_msgSend(objc_alloc(MEMORY[0x1E0DC3D10]), "initWithTarget:action:", self, sel__handleSmartStylePickerSwipe_);
  smartStylesSwipeLeftGestureRecognizer = self->__smartStylesSwipeLeftGestureRecognizer;
  self->__smartStylesSwipeLeftGestureRecognizer = v8;

  v10 = (UISwipeGestureRecognizer *)objc_msgSend(objc_alloc(MEMORY[0x1E0DC3D10]), "initWithTarget:action:", self, sel__handleSmartStylePickerSwipe_);
  smartStylesSwipeRightGestureRecognizer = self->__smartStylesSwipeRightGestureRecognizer;
  self->__smartStylesSwipeRightGestureRecognizer = v10;

  -[UISwipeGestureRecognizer setDelegate:](self->__smartStylesSwipeLeftGestureRecognizer, "setDelegate:", self);
  -[UISwipeGestureRecognizer setDelegate:](self->__smartStylesSwipeRightGestureRecognizer, "setDelegate:", self);
  -[UISwipeGestureRecognizer setDirection:](self->__smartStylesSwipeLeftGestureRecognizer, "setDirection:", 2);
  -[UISwipeGestureRecognizer setDirection:](self->__smartStylesSwipeRightGestureRecognizer, "setDirection:", 1);
  -[CAMViewfinderViewController view](self, "view");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "addGestureRecognizer:", self->__smartStylesSwipeLeftGestureRecognizer);

  -[CAMViewfinderViewController view](self, "view");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "addGestureRecognizer:", self->__smartStylesSwipeRightGestureRecognizer);

  objc_msgSend(v4, "smartStyleIntensitySlider");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v15) = 0;
  objc_msgSend(v14, "setMinimumValue:", v15);

  objc_msgSend(v4, "smartStyleIntensitySlider");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v17) = 1.0;
  objc_msgSend(v16, "setMaximumValue:", v17);

  v19[0] = v6;
  v19[1] = 3221225472;
  v19[2] = __79__CAMViewfinderViewController_fullscreenViewfinderDidCreateSmartStyleControls___block_invoke_2;
  v19[3] = &unk_1EA329490;
  objc_copyWeak(&v20, &location);
  objc_msgSend(v4, "smartStyleValuesPlatterView");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "setResetAction:", v19);

  -[CAMViewfinderViewController _updateSmartStyleControlsForCurrentStateAnimateSliders:animateOtherControls:](self, "_updateSmartStyleControlsForCurrentStateAnimateSliders:animateOtherControls:", 0, 0);
  objc_destroyWeak(&v20);
  objc_destroyWeak(&v22);
  objc_destroyWeak(&location);

}

void __79__CAMViewfinderViewController_fullscreenViewfinderDidCreateSmartStyleControls___block_invoke(uint64_t a1, double a2, double a3)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_handleSmartStylePadValueChanged:", a2, a3);

}

void __79__CAMViewfinderViewController_fullscreenViewfinderDidCreateSmartStyleControls___block_invoke_2(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_handleSmartStyleResetButton");

}

- (void)addChildViewController:(id)a3 toView:(id)a4
{
  id v6;
  void *v7;
  id v8;

  v6 = a4;
  v8 = a3;
  -[CAMViewfinderViewController addChildViewController:](self, "addChildViewController:", v8);
  objc_msgSend(v8, "view");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addSubview:", v7);

  objc_msgSend(v8, "didMoveToParentViewController:", self);
}

- (void)_handleSmartStyleIntensitySlider:(id)a3
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  float v8;
  double v9;
  double v10;
  double v11;
  double v12;
  void *v13;
  NSObject *v14;

  v4 = a3;
  -[CAMViewfinderViewController _currentSmartStyle](self, "_currentSmartStyle");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = objc_alloc(MEMORY[0x1E0D0D098]);
    v7 = objc_msgSend(v5, "presetType");
    objc_msgSend(v4, "value");
    v9 = v8;
    objc_msgSend(v5, "toneBias");
    v11 = v10;
    objc_msgSend(v5, "colorBias");
    v13 = (void *)objc_msgSend(v6, "initWithPresetType:castIntensity:toneBias:colorBias:", v7, v9, v11, v12);
    -[CAMViewfinderViewController _updateSelectedSmartStyle:animateSliders:](self, "_updateSelectedSmartStyle:animateSliders:", v13, 0);

  }
  else
  {
    v14 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      -[CAMViewfinderViewController _handleSmartStyleIntensitySlider:].cold.1();

  }
}

- (void)_handleSmartStylePadValueChanged:(CGPoint)a3
{
  double y;
  double x;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;

  y = a3.y;
  x = a3.x;
  -[CAMViewfinderViewController _currentSmartStyle](self, "_currentSmartStyle");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    +[CAMSmartStyleUtilities colorAndToneBiasForSlider2DValue:limitRangeForSystemStyles:](CAMSmartStyleUtilities, "colorAndToneBiasForSlider2DValue:limitRangeForSystemStyles:", 0, x, y);
    v7 = objc_alloc(MEMORY[0x1E0D0D098]);
    v8 = objc_msgSend(v6, "presetType");
    objc_msgSend(v6, "castIntensity");
    v9 = (void *)objc_msgSend(v7, "initWithPresetType:castIntensity:toneBias:colorBias:", v8);
    -[CAMViewfinderViewController _updateSelectedSmartStyle:animateSliders:](self, "_updateSelectedSmartStyle:animateSliders:", v9, 0);

  }
  else
  {
    v10 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      -[CAMViewfinderViewController _handleSmartStyleIntensitySlider:].cold.1();

  }
}

- (void)_updateSelectedSmartStyle:(id)a3 animateSliders:(BOOL)a4
{
  _BOOL8 v4;
  void *v6;
  char v7;
  unint64_t v8;
  void *v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  void *v13;
  id v14;

  v4 = a4;
  v14 = a3;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "semanticStyleSupportForMode:devicePosition:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"));

  if ((v7 & 8) != 0)
  {
    -[CAMViewfinderViewController _semanticStyles](self, "_semanticStyles");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = -[CAMViewfinderViewController _selectedSemanticStyleIndex](self, "_selectedSemanticStyleIndex");
    goto LABEL_6;
  }
  if ((v7 & 1) != 0)
  {
    v8 = -[CAMViewfinderViewController _smartStyleSystemStyleIndex](self, "_smartStyleSystemStyleIndex");
    -[CAMViewfinderViewController _semanticStyles](self, "_semanticStyles");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "count");

    if (v8 < v10)
    {
      -[CAMViewfinderViewController _semanticStyles](self, "_semanticStyles");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = -[CAMViewfinderViewController _smartStyleSystemStyleIndex](self, "_smartStyleSystemStyleIndex");
LABEL_6:
      objc_msgSend(v11, "setObject:atIndexedSubscript:", v14, v12);

    }
  }
  -[CAMViewfinderViewController _updateSmartStyleControlsForCurrentStateAnimateSliders:animateOtherControls:](self, "_updateSmartStyleControlsForCurrentStateAnimateSliders:animateOtherControls:", v4, 1);
  -[CAMViewfinderViewController _updateSmartStyleOnSession](self, "_updateSmartStyleOnSession");
  -[CAMViewfinderViewController _analyticsControlDrawerEvent](self, "_analyticsControlDrawerEvent");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "didChangeValueForControlType:", 11);

}

- (void)_handleSmartStyleResetButton
{
  void *v3;
  void *v4;
  NSObject *v5;

  -[CAMViewfinderViewController _currentSmartStyle](self, "_currentSmartStyle");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    -[CAMViewfinderViewController _referenceStyleForSmartStyle:](self, "_referenceStyleForSmartStyle:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _updateSelectedSmartStyle:animateSliders:](self, "_updateSelectedSmartStyle:animateSliders:", v4, 1);

  }
  else
  {
    v5 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      -[CAMViewfinderViewController _handleSmartStyleIntensitySlider:].cold.1();

  }
}

- (void)_handleSmartStyleShutterButtonPressed:(id)a3
{
  NSObject *v4;
  void *v5;
  uint8_t v6[16];

  v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1DB760000, v4, OS_LOG_TYPE_DEFAULT, "Dynamic Shutter: SmartStyle shutter button pressed", v6, 2u);
  }

  -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "isEnabled"))
  {
    -[CAMViewfinderViewController dynamicShutterControlGesturesDidBegin:](self, "dynamicShutterControlGesturesDidBegin:", v5);
    -[CAMViewfinderViewController dynamicShutterControlDidShortPress:](self, "dynamicShutterControlDidShortPress:", v5);
  }
  else
  {
    -[CAMViewfinderViewController shutterControlTouchAttemptedWhileDisabled:](self, "shutterControlTouchAttemptedWhileDisabled:", v5);
  }

}

- (void)fullscreenViewfinder:(id)a3 didChangeSmartStyleControlsVisibility:(BOOL)a4 animated:(BOOL)a5
{
  _BOOL8 v5;
  _BOOL4 v6;
  void *v8;
  _BOOL4 v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;

  v5 = a5;
  v6 = a4;
  v16 = a3;
  if (v6)
  {
    -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[CAMViewfinderViewController _wantsLightingControlForGraphConfiguration:](self, "_wantsLightingControlForGraphConfiguration:", v8);

    if (v9)
      -[CAMViewfinderViewController _resetPortraitLightingToDefaultAnimated:](self, "_resetPortraitLightingToDefaultAnimated:", v5);
    if (-[CAMViewfinderViewController _useCreativeCameraControls](self, "_useCreativeCameraControls"))
    {
      objc_msgSend(v16, "controlStatusBar");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "secondaryAccessoryControl");
      v11 = (void *)objc_claimAutoreleasedReturnValue();

      if (v11)
      {
        objc_msgSend(v16, "controlStatusBar");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "setSecondaryAccessoryControl:animated:", 0, v5);
LABEL_10:

      }
    }
  }
  else if (-[CAMViewfinderViewController _useCreativeCameraControls](self, "_useCreativeCameraControls"))
  {
    objc_msgSend(v16, "controlStatusBar");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "secondaryAccessoryControl");
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v14)
    {
      objc_msgSend(v16, "controlStatusBar");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMViewfinderViewController _doneButton](self, "_doneButton");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "setSecondaryAccessoryControl:animated:", v15, v5);

      goto LABEL_10;
    }
  }
  -[CAMViewfinderViewController updateControlVisibilityAnimated:](self, "updateControlVisibilityAnimated:", v5);
  -[CAMViewfinderViewController _updatePreviewControllerPortraitStatus](self, "_updatePreviewControllerPortraitStatus");
  -[CAMViewfinderViewController _updateEnabledControlsWithReason:](self, "_updateEnabledControlsWithReason:", CFSTR("SmartStyles control visibility changed"));
  -[CAMViewfinderViewController _updateViewfinderMaterialAnimated:](self, "_updateViewfinderMaterialAnimated:", v5);
  -[CAMViewfinderViewController _updateSmartStyleControlsForCurrentStateAnimateSliders:animateOtherControls:](self, "_updateSmartStyleControlsForCurrentStateAnimateSliders:animateOtherControls:", 0, v5);

}

- (void)spotlightControlPanelDidCreateApertureSlider:(id)a3
{
  id v4;

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration", a3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
  -[CAMViewfinderViewController _updatePortraitApertureSliderForGraphConfiguration:zoomFactor:](self, "_updatePortraitApertureSliderForGraphConfiguration:zoomFactor:", v4);

}

- (void)spotlightControlPanel:(id)a3 didChangeValueForSpotlight:(int64_t)a4
{
  id v6;
  void *v7;
  id v8;

  v6 = a3;
  if (a4 == 2)
  {
    v8 = v6;
    objc_msgSend(v6, "exposureSlider");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _handleExposureSliderDidChangeValue:](self, "_handleExposureSliderDidChangeValue:", v7);
    goto LABEL_5;
  }
  if (a4 == 3)
  {
    v8 = v6;
    objc_msgSend(v6, "apertureSlider");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _apertureSliderDidChangeApertureValue:](self, "_apertureSliderDidChangeApertureValue:", v7);
LABEL_5:

    v6 = v8;
  }

}

- (void)spotlightControlPanel:(id)a3 didChangeOpenForSpotlight:(int64_t)a4
{
  int v6;
  void *v7;
  id v8;

  v6 = objc_msgSend(a3, "isControlTypeOpen:", a4);
  -[CAMViewfinderViewController _openHalfPressSpotlightControls](self, "_openHalfPressSpotlightControls");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
    objc_msgSend(v8, "addObject:", v7);
  else
    objc_msgSend(v8, "removeObject:", v7);

}

- (void)_createMetalContextIfNecessary
{
  CAMMetalContext *v3;
  CAMMetalContext *metalContext;

  if (!self->__metalContext)
  {
    v3 = objc_alloc_init(CAMMetalContext);
    metalContext = self->__metalContext;
    self->__metalContext = v3;

  }
}

- (CAMPortraitModeInstructionLabel)_targetPortraitModeInstructionLabel
{
  void *v3;
  void *v4;

  -[CAMViewfinderViewController _portraitModeInstructionLabel](self, "_portraitModeInstructionLabel");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v3)
  {
    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "portraitInstructionLabel");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return (CAMPortraitModeInstructionLabel *)v3;
}

- (CAMQRCodeInstructionLabel)_targetQRCodeInstructionLabel
{
  void *v3;
  void *v4;

  -[CAMViewfinderViewController _qrCodeInstructionLabel](self, "_qrCodeInstructionLabel");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v3)
  {
    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "qrCodeInstructionLabel");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return (CAMQRCodeInstructionLabel *)v3;
}

- (void)_createPanoramaViewControllerIfNecessary
{
  int64_t v3;
  CAMPanoramaViewController *v4;
  CAMPanoramaViewController *panoramaViewController;
  id v6;

  if (!self->__panoramaViewController)
  {
    v3 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
    -[CAMViewfinderViewController _captureController](self, "_captureController");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    v4 = -[CAMPanoramaViewController initWithCaptureController:layoutStyle:]([CAMPanoramaViewController alloc], "initWithCaptureController:layoutStyle:", v6, v3);
    panoramaViewController = self->__panoramaViewController;
    self->__panoramaViewController = v4;

    -[CAMViewfinderViewController addChildViewController:](self, "addChildViewController:", self->__panoramaViewController);
    -[CAMViewfinderViewController _embedPanoramaViewWithLayoutStyle:](self, "_embedPanoramaViewWithLayoutStyle:", v3);

  }
}

- (void)_createZoomSliderIfNecessary
{
  void *v3;
  _BOOL4 v4;
  int64_t v5;
  CAMZoomSlider *v6;
  CAMZoomSlider *zoomSlider;
  double v8;
  double v9;

  if (!self->__zoomSlider)
  {
    -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = -[CAMViewfinderViewController _wantsZoomSliderForGraphConfiguration:](self, "_wantsZoomSliderForGraphConfiguration:", v3);

    if (v4)
    {
      v5 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
      v6 = -[CAMZoomSlider initWithLayoutStyle:]([CAMZoomSlider alloc], "initWithLayoutStyle:", v5);
      zoomSlider = self->__zoomSlider;
      self->__zoomSlider = v6;

      -[CAMZoomSlider setExclusiveTouch:](self->__zoomSlider, "setExclusiveTouch:", 1);
      LODWORD(v8) = 0;
      -[CAMZoomSlider setMinimumValue:](self->__zoomSlider, "setMinimumValue:", v8);
      LODWORD(v9) = 1.0;
      -[CAMZoomSlider setMaximumValue:](self->__zoomSlider, "setMaximumValue:", v9);
      -[CAMZoomSlider addTarget:action:forControlEvents:](self->__zoomSlider, "addTarget:action:forControlEvents:", self, sel__handleTouchDownForZoomSlider_, 1);
      -[CAMZoomSlider addTarget:action:forControlEvents:](self->__zoomSlider, "addTarget:action:forControlEvents:", self, sel__zoomSliderValueDidChange_forEvent_, 4096);
      -[CAMZoomSlider setDelegate:](self->__zoomSlider, "setDelegate:", self);
      -[CAMZoomSlider setAlpha:](self->__zoomSlider, "setAlpha:", 0.0);
      -[CAMZoomSlider setEnabled:](self->__zoomSlider, "setEnabled:", -[CAMViewfinderViewController _shouldEnableZoomSlider](self, "_shouldEnableZoomSlider"));
      -[CAMViewfinderViewController _embedZoomSliderWithLayoutStyle:](self, "_embedZoomSliderWithLayoutStyle:", v5);
      -[CAMViewfinderViewController _updateUIForCaptureOrientationAnimated:](self, "_updateUIForCaptureOrientationAnimated:", 0);
    }
  }
}

- (void)_createZoomControlIfNecessary
{
  void *v3;
  _BOOL4 v4;
  int64_t v5;
  CAMZoomControl *v6;
  CAMZoomControl *zoomControl;
  void *v8;

  if (!self->__zoomControl
    && -[CAMViewfinderViewController _shouldCreateAndEmbedControls](self, "_shouldCreateAndEmbedControls"))
  {
    -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = -[CAMViewfinderViewController _wantsZoomControlForGraphConfiguration:](self, "_wantsZoomControlForGraphConfiguration:", v3);

    if (v4)
    {
      v5 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
      v6 = -[CAMZoomControl initWithLayoutStyle:]([CAMZoomControl alloc], "initWithLayoutStyle:", v5);
      zoomControl = self->__zoomControl;
      self->__zoomControl = v6;

      -[CAMZoomControl setDelegate:](self->__zoomControl, "setDelegate:", self);
      -[CAMZoomControl addTarget:action:forControlEvents:](self->__zoomControl, "addTarget:action:forControlEvents:", self, sel__handleTouchDownForZoomControl_, 1);
      -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMViewfinderViewController _configureZoomControlForGraphConfiguration:animated:](self, "_configureZoomControlForGraphConfiguration:animated:", v8, 0);

      -[CAMZoomControl setEnabled:](self->__zoomControl, "setEnabled:", -[CAMViewfinderViewController _shouldEnableZoomControl](self, "_shouldEnableZoomControl"));
      -[CAMViewfinderViewController _embedZoomControlWithLayoutStyle:](self, "_embedZoomControlWithLayoutStyle:", v5);
      -[CAMViewfinderViewController _updateUIForCaptureOrientationAnimated:](self, "_updateUIForCaptureOrientationAnimated:", 0);
    }
  }
}

- (void)_createOrDestroyLevelViewModelIfNecessary
{
  int v3;
  _BOOL4 v4;
  int v5;
  void *v6;
  char v8;
  CAMLevelViewModel *levelViewModel;
  CAMLevelViewModel *v10;
  id v11;

  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v11 = (id)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v11, "shouldShowHorizonLevelView");
  v4 = -[CAMViewfinderViewController _isSpatialVideoMode:devicePosition:](self, "_isSpatialVideoMode:devicePosition:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"));
  v5 = v3 | v4 | objc_msgSend(v11, "shouldShowLevelView");
  -[CAMViewfinderViewController _levelViewModel](self, "_levelViewModel");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5 == 1 && v6 == 0)
  {
    v10 = objc_alloc_init(CAMLevelViewModel);
    levelViewModel = self->__levelViewModel;
    self->__levelViewModel = v10;
    goto LABEL_11;
  }
  if (v6)
    v8 = v5;
  else
    v8 = 1;
  if ((v8 & 1) == 0)
  {
    levelViewModel = self->__levelViewModel;
    self->__levelViewModel = 0;
LABEL_11:

  }
}

- (void)_createLevelViewIfNecessary
{
  CAMLevelIndicatorView *v3;
  CAMLevelIndicatorView *levelView;

  if (!self->__levelView)
  {
    v3 = -[CAMLevelIndicatorView initWithViewModel:]([CAMLevelIndicatorView alloc], "initWithViewModel:", self->__levelViewModel);
    levelView = self->__levelView;
    self->__levelView = v3;

    -[CAMViewfinderViewController _embedLevelViewWithLayoutStyle:](self, "_embedLevelViewWithLayoutStyle:", -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle"));
  }
}

- (void)_createHorizonLevelViewIfNecessary
{
  CAMHorizonLevelView *v3;
  CAMHorizonLevelView *horizonLevelView;

  if (!self->__horizonLevelView)
  {
    v3 = -[CAMHorizonLevelView initWithViewModel:]([CAMHorizonLevelView alloc], "initWithViewModel:", self->__levelViewModel);
    horizonLevelView = self->__horizonLevelView;
    self->__horizonLevelView = v3;

    -[CAMHorizonLevelView setDelegate:](self->__horizonLevelView, "setDelegate:", self);
    -[CAMViewfinderViewController _embedHorizonLevelView](self, "_embedHorizonLevelView");
  }
}

- (void)_destroyHorizonLevelViewIfNecessary
{
  CAMHorizonLevelView *horizonLevelView;

  if (self->__horizonLevelView)
  {
    -[CAMViewfinderViewController _unembedHorizonLevelView](self, "_unembedHorizonLevelView");
    horizonLevelView = self->__horizonLevelView;
    self->__horizonLevelView = 0;

  }
}

- (void)_createVideoConfigurationStatusIndicatorIfNecessary
{
  int64_t v3;
  CAMVideoConfigurationStatusIndicator *v4;
  CAMVideoConfigurationStatusIndicator *videoConfigurationStatusIndicator;
  double v6;
  void *v7;
  id v8;

  if (!self->__videoConfigurationStatusIndicator
    && -[CAMViewfinderViewController _shouldCreateAndEmbedControls](self, "_shouldCreateAndEmbedControls"))
  {
    v3 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
    v4 = -[CAMVideoConfigurationStatusIndicator initWithLayoutStyle:]([CAMVideoConfigurationStatusIndicator alloc], "initWithLayoutStyle:", v3);
    videoConfigurationStatusIndicator = self->__videoConfigurationStatusIndicator;
    self->__videoConfigurationStatusIndicator = v4;

    -[CAMVideoConfigurationStatusIndicator setTouchDelegate:](self->__videoConfigurationStatusIndicator, "setTouchDelegate:", self);
    -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _updateVideoConfigurationStatusIndicatorForGraphConfiguration:animated:](self, "_updateVideoConfigurationStatusIndicatorForGraphConfiguration:animated:", v8, 0);
    -[CAMViewfinderViewController _embedVideoConfigurationStatusIndicatorWithLayoutStyle:](self, "_embedVideoConfigurationStatusIndicatorWithLayoutStyle:", v3);
    if (-[CAMViewfinderViewController _shouldHideVideoConfigurationStatusIndicatorForGraphConfiguration:](self, "_shouldHideVideoConfigurationStatusIndicatorForGraphConfiguration:", v8))
    {
      v6 = 0.0;
    }
    else
    {
      v6 = 1.0;
    }
    -[CAMViewfinderViewController _videoConfigurationStatusIndicator](self, "_videoConfigurationStatusIndicator");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setAlpha:", v6);

  }
}

- (CAMVideoConfigurationStatusIndicator)_targetVideoConfigurationStatusIndicator
{
  void *v3;
  void *v4;
  void *v5;

  -[CAMViewfinderViewController _videoConfigurationStatusIndicator](self, "_videoConfigurationStatusIndicator");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v3)
  {
    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "controlStatusBar");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "videoConfigurationIndicator");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return (CAMVideoConfigurationStatusIndicator *)v3;
}

- (void)_createUtilityBarIfNecessary
{
  CAMUtilityBar *v3;
  CAMUtilityBar *v4;
  CAMUtilityBar *utilityBar;
  void *v6;
  _BOOL4 v7;

  if (!self->__utilityBar)
  {
    v3 = [CAMUtilityBar alloc];
    v4 = -[CAMUtilityBar initWithFrame:](v3, "initWithFrame:", *MEMORY[0x1E0C9D648], *(double *)(MEMORY[0x1E0C9D648] + 8), *(double *)(MEMORY[0x1E0C9D648] + 16), *(double *)(MEMORY[0x1E0C9D648] + 24));
    utilityBar = self->__utilityBar;
    self->__utilityBar = v4;

    -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = -[CAMViewfinderViewController _shouldHideUtilityBarForGraphConfiguration:](self, "_shouldHideUtilityBarForGraphConfiguration:", v6);

    -[CAMUtilityBar setAlpha:](self->__utilityBar, "setAlpha:", (double)!v7);
    -[CAMViewfinderViewController _embedUtilityBarWithLayoutStyle:](self, "_embedUtilityBarWithLayoutStyle:", -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle"));
  }
}

- (void)_createFilterScrubberViewIfNecessary
{
  void *v3;
  char v4;
  id v5;
  CEKWheelScrubberView *v6;
  CEKWheelScrubberView *filterScrubberView;
  id v8;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isCTMSupported");

  if ((v4 & 1) == 0)
  {
    -[CAMViewfinderViewController _createUtilityBarIfNecessary](self, "_createUtilityBarIfNecessary");
    if (!self->__filterScrubberView)
    {
      v5 = objc_alloc(MEMORY[0x1E0D0D0B0]);
      v6 = (CEKWheelScrubberView *)objc_msgSend(v5, "initWithFrame:", *MEMORY[0x1E0C9D648], *(double *)(MEMORY[0x1E0C9D648] + 8), *(double *)(MEMORY[0x1E0C9D648] + 16), *(double *)(MEMORY[0x1E0C9D648] + 24));
      filterScrubberView = self->__filterScrubberView;
      self->__filterScrubberView = v6;

      -[CEKWheelScrubberView setDelegate:](self->__filterScrubberView, "setDelegate:", self);
      -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
      v8 = (id)objc_claimAutoreleasedReturnValue();
      -[CAMViewfinderViewController _updateFilterScrubberForGraphConfiguration:](self, "_updateFilterScrubberForGraphConfiguration:", v8);
      -[CAMViewfinderViewController _embedFilterScrubberViewWithLayoutStyle:](self, "_embedFilterScrubberViewWithLayoutStyle:", -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle"));
      -[CUCaptureController registerVideoThumbnailContentsDelegate:](self->__captureController, "registerVideoThumbnailContentsDelegate:", self);

    }
  }
}

- (void)_destroyFilterScrubberViewIfNecessary
{
  CEKWheelScrubberView *filterScrubberView;

  if (self->__filterScrubberView)
  {
    -[CUCaptureController unregisterVideoThumbnailContentsDelegate:](self->__captureController, "unregisterVideoThumbnailContentsDelegate:", self);
    -[CAMViewfinderViewController set_filterScrubberLayerContents:](self, "set_filterScrubberLayerContents:", 0);
    filterScrubberView = self->__filterScrubberView;
    self->__filterScrubberView = 0;

  }
}

- (void)_createFilterNameBadgeIfNecessary
{
  CAMFilterNameBadge *v3;
  CAMFilterNameBadge *v4;
  CAMFilterNameBadge *filterNameBadge;
  void *v6;
  _BOOL4 v7;

  if (!self->__filterNameBadge)
  {
    v3 = [CAMFilterNameBadge alloc];
    v4 = -[CAMFilterNameBadge initWithFrame:](v3, "initWithFrame:", *MEMORY[0x1E0C9D648], *(double *)(MEMORY[0x1E0C9D648] + 8), *(double *)(MEMORY[0x1E0C9D648] + 16), *(double *)(MEMORY[0x1E0C9D648] + 24));
    filterNameBadge = self->__filterNameBadge;
    self->__filterNameBadge = v4;

    -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = -[CAMViewfinderViewController _shouldHideFilterNameBadgeForGraphConfiguration:](self, "_shouldHideFilterNameBadgeForGraphConfiguration:", v6);

    -[CAMFilterNameBadge setAlpha:](self->__filterNameBadge, "setAlpha:", (double)!v7);
    -[CAMViewfinderViewController _updateFilterNameBadgeAnimated:](self, "_updateFilterNameBadgeAnimated:", 0);
    -[CAMViewfinderViewController _embedFilterNameBadgeWithLayoutStyle:](self, "_embedFilterNameBadgeWithLayoutStyle:", -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle"));
  }
}

- (void)_createPortraitApertureSliderIfNecessary
{
  CEKApertureSlider *v3;
  CEKApertureSlider *portraitApertureSlider;

  -[CAMViewfinderViewController _createUtilityBarIfNecessary](self, "_createUtilityBarIfNecessary");
  if (!self->__portraitApertureSlider)
  {
    v3 = (CEKApertureSlider *)objc_alloc_init(MEMORY[0x1E0D0D018]);
    portraitApertureSlider = self->__portraitApertureSlider;
    self->__portraitApertureSlider = v3;

    -[CEKApertureSlider addTarget:action:forControlEvents:](self->__portraitApertureSlider, "addTarget:action:forControlEvents:", self, sel__apertureSliderDidChangeApertureValue_, 4096);
    -[CAMViewfinderViewController _embedPortraitApertureSliderWithLayoutStyle:](self, "_embedPortraitApertureSliderWithLayoutStyle:", -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle"));
  }
}

- (void)_createPortraitIntensitySliderIfNecessary
{
  CEKSlider *v3;
  CEKSlider *portraitIntensitySlider;
  CEKSlider *v5;
  void *v6;
  id v7;

  -[CAMViewfinderViewController _createUtilityBarIfNecessary](self, "_createUtilityBarIfNecessary");
  if (!self->__portraitIntensitySlider)
  {
    CAMLocalizedFrameworkString(CFSTR("PORTRAIT_INTENSITY_SLIDER_TITLE"), 0);
    v7 = (id)objc_claimAutoreleasedReturnValue();
    v3 = (CEKSlider *)objc_msgSend(objc_alloc(MEMORY[0x1E0D0D090]), "initWithTitle:", v7);
    portraitIntensitySlider = self->__portraitIntensitySlider;
    self->__portraitIntensitySlider = v3;

    -[CEKSlider setSliderVerticalAlignment:](self->__portraitIntensitySlider, "setSliderVerticalAlignment:", 2);
    v5 = self->__portraitIntensitySlider;
    objc_msgSend(MEMORY[0x1E0DC3658], "blackColor");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[CEKSlider setOpaqueGradientsWithColor:](v5, "setOpaqueGradientsWithColor:", v6);

    -[CEKSlider setTitleAlignment:](self->__portraitIntensitySlider, "setTitleAlignment:", 0);
    -[CEKSlider setValueLabelVisibility:](self->__portraitIntensitySlider, "setValueLabelVisibility:", 2);
    -[CAMViewfinderViewController _updatePortraitIntensitySliderForCurrentState](self, "_updatePortraitIntensitySliderForCurrentState");
    -[CEKSlider addTarget:action:forControlEvents:](self->__portraitIntensitySlider, "addTarget:action:forControlEvents:", self, sel__handleIntensitySliderDidChangeValue_, 4096);
    -[CAMViewfinderViewController _embedPortraitIntensitySliderWithLayoutStyle:](self, "_embedPortraitIntensitySliderWithLayoutStyle:", -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle"));

  }
}

- (void)_createLightingControlIfNecessary
{
  id v3;
  CEKLightingControl *v4;
  CEKLightingControl *lightingControl;

  if (!self->__lightingControl)
  {
    if (-[CAMViewfinderViewController _shouldCreateAndEmbedControls](self, "_shouldCreateAndEmbedControls"))
    {
      v3 = objc_alloc(MEMORY[0x1E0D0D070]);
      v4 = (CEKLightingControl *)objc_msgSend(v3, "initWithFrame:", *MEMORY[0x1E0C9D648], *(double *)(MEMORY[0x1E0C9D648] + 8), *(double *)(MEMORY[0x1E0C9D648] + 16), *(double *)(MEMORY[0x1E0C9D648] + 24));
      lightingControl = self->__lightingControl;
      self->__lightingControl = v4;

      -[CEKLightingControl setDelegate:](self->__lightingControl, "setDelegate:", self);
      -[CEKLightingControl preloadEffectChangeAnimation](self->__lightingControl, "preloadEffectChangeAnimation");
      -[CAMViewfinderViewController _embedLightingControlWithLayoutStyle:](self, "_embedLightingControlWithLayoutStyle:", -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle"));
    }
  }
}

- (void)_createLightingNameBadgeIfNecessary
{
  id v3;
  CEKLightingNameBadge *v4;
  CEKLightingNameBadge *lightingNameBadge;

  if (!self->__lightingNameBadge)
  {
    if (-[CAMViewfinderViewController _shouldCreateAndEmbedControls](self, "_shouldCreateAndEmbedControls"))
    {
      v3 = objc_alloc(MEMORY[0x1E0D0D080]);
      v4 = (CEKLightingNameBadge *)objc_msgSend(v3, "initWithFrame:", *MEMORY[0x1E0C9D648], *(double *)(MEMORY[0x1E0C9D648] + 8), *(double *)(MEMORY[0x1E0C9D648] + 16), *(double *)(MEMORY[0x1E0C9D648] + 24));
      lightingNameBadge = self->__lightingNameBadge;
      self->__lightingNameBadge = v4;

      -[CAMViewfinderViewController _embedLightingNameBadgeWithLayoutStyle:](self, "_embedLightingNameBadgeWithLayoutStyle:", -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle"));
    }
  }
}

- (void)_unembedAndDestroyAllControls
{
  void *v3;
  void *v4;
  void *v5;
  CAMFlashButton *flashButton;
  CAMElapsedTimeView *elapsedTimeView;
  CAMHDRButton *HDRButton;
  CAMFilterButton *filterButton;
  CEKApertureButton *apertureButton;
  CAMTimerButton *timerButton;
  CAMLivePhotoButton *livePhotoButton;
  CAMSharedLibraryButton *sharedLibraryButton;
  CAMVideoConfigurationStatusIndicator *videoConfigurationStatusIndicator;
  CUShutterButton *shutterButton;
  CUShutterButton *stillDuringVideoButton;
  CAMModeDial *modeDial;
  CAMImageWell *imageWell;
  UIButton *reviewButton;
  CAMFlipButton *flipButton;
  CAMTopBar *topBar;
  CAMBottomBar *bottomBar;
  CAMUtilityBar *utilityBar;
  CAMFlashBadge *flashBadge;
  CAMHDRBadge *HDRBadge;
  CAMFocusLockBadge *focusAndExposureLockBadge;
  CAMLivePhotoBadge *livePhotoBadge;
  CAMShallowDepthOfFieldBadge *shallowDepthOfFieldBadge;
  CAMPortraitModeInstructionLabel *portraitModeInstructionLabel;
  CAMQRCodeInstructionLabel *qrCodeInstructionLabel;
  CAMBurstIndicatorView *burstIndicatorView;
  CAMTimerIndicatorView *timerIndicatorView;
  CEKWheelScrubberView *filterScrubberView;
  CAMFilterNameBadge *filterNameBadge;
  id v35;

  -[CAMViewfinderViewController _topBar](self, "_topBar");
  v35 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "setFlashButton:", 0);
  objc_msgSend(v35, "setElapsedTimeView:", 0);
  objc_msgSend(v35, "setHDRButton:", 0);
  objc_msgSend(v35, "setFilterButton:", 0);
  objc_msgSend(v35, "setApertureButton:", 0);
  objc_msgSend(v35, "setTimerButton:", 0);
  objc_msgSend(v35, "setLivePhotoButton:", 0);
  objc_msgSend(v35, "setVideoConfigurationStatusIndicator:", 0);
  -[CAMViewfinderViewController _utilityBar](self, "_utilityBar");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setFilterScrubberView:", 0);
  -[CAMViewfinderViewController _bottomBar](self, "_bottomBar");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setShutterButton:", 0);
  objc_msgSend(v4, "setStillDuringVideoButton:", 0);
  objc_msgSend(v4, "setModeDial:", 0);
  objc_msgSend(v4, "setImageWell:", 0);
  objc_msgSend(v4, "setReviewButton:", 0);
  objc_msgSend(v4, "setFlipButton:", 0);
  objc_msgSend(v4, "setFlashButton:", 0);
  objc_msgSend(v4, "setHDRButton:", 0);
  objc_msgSend(v4, "setTimerButton:", 0);
  objc_msgSend(v4, "setLivePhotoButton:", 0);
  objc_msgSend(v4, "setUtilityBar:", 0);
  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setTopBar:", 0);
  objc_msgSend(v5, "setBottomBar:", 0);
  objc_msgSend(v5, "setShutterButton:", 0);
  objc_msgSend(v5, "setFlipButton:", 0);
  objc_msgSend(v5, "setFlashBadge:", 0);
  objc_msgSend(v5, "setHDRBadge:", 0);
  objc_msgSend(v5, "setFocusAndExposureLockBadge:", 0);
  objc_msgSend(v5, "setLivePhotoBadge:", 0);
  objc_msgSend(v5, "setShallowDepthOfFieldBadge:", 0);
  objc_msgSend(v5, "setPortraitModeInstructionLabel:", 0);
  objc_msgSend(v5, "setQrCodeInstructionLabel:", 0);
  objc_msgSend(v5, "setElapsedTimeView:", 0);
  objc_msgSend(v5, "setBurstIndicatorView:", 0);
  objc_msgSend(v5, "setTimerIndicatorView:", 0);
  objc_msgSend(v5, "setPanoramaView:", 0);
  objc_msgSend(v5, "setZoomSlider:", 0);
  objc_msgSend(v5, "setZoomControl:", 0);
  objc_msgSend(v5, "setFilterNameBadge:", 0);
  flashButton = self->__flashButton;
  self->__flashButton = 0;

  elapsedTimeView = self->__elapsedTimeView;
  self->__elapsedTimeView = 0;

  HDRButton = self->__HDRButton;
  self->__HDRButton = 0;

  filterButton = self->__filterButton;
  self->__filterButton = 0;

  apertureButton = self->__apertureButton;
  self->__apertureButton = 0;

  timerButton = self->__timerButton;
  self->__timerButton = 0;

  livePhotoButton = self->__livePhotoButton;
  self->__livePhotoButton = 0;

  sharedLibraryButton = self->__sharedLibraryButton;
  self->__sharedLibraryButton = 0;

  videoConfigurationStatusIndicator = self->__videoConfigurationStatusIndicator;
  self->__videoConfigurationStatusIndicator = 0;

  shutterButton = self->__shutterButton;
  self->__shutterButton = 0;

  stillDuringVideoButton = self->__stillDuringVideoButton;
  self->__stillDuringVideoButton = 0;

  modeDial = self->__modeDial;
  self->__modeDial = 0;

  imageWell = self->__imageWell;
  self->__imageWell = 0;

  reviewButton = self->__reviewButton;
  self->__reviewButton = 0;

  flipButton = self->__flipButton;
  self->__flipButton = 0;

  topBar = self->__topBar;
  self->__topBar = 0;

  bottomBar = self->__bottomBar;
  self->__bottomBar = 0;

  utilityBar = self->__utilityBar;
  self->__utilityBar = 0;

  flashBadge = self->__flashBadge;
  self->__flashBadge = 0;

  HDRBadge = self->__HDRBadge;
  self->__HDRBadge = 0;

  focusAndExposureLockBadge = self->__focusAndExposureLockBadge;
  self->__focusAndExposureLockBadge = 0;

  livePhotoBadge = self->__livePhotoBadge;
  self->__livePhotoBadge = 0;

  shallowDepthOfFieldBadge = self->__shallowDepthOfFieldBadge;
  self->__shallowDepthOfFieldBadge = 0;

  portraitModeInstructionLabel = self->__portraitModeInstructionLabel;
  self->__portraitModeInstructionLabel = 0;

  qrCodeInstructionLabel = self->__qrCodeInstructionLabel;
  self->__qrCodeInstructionLabel = 0;

  burstIndicatorView = self->__burstIndicatorView;
  self->__burstIndicatorView = 0;

  timerIndicatorView = self->__timerIndicatorView;
  self->__timerIndicatorView = 0;

  filterScrubberView = self->__filterScrubberView;
  self->__filterScrubberView = 0;

  filterNameBadge = self->__filterNameBadge;
  self->__filterNameBadge = 0;

  -[CAMViewfinderViewController _destroyGridViewIfNecessary](self, "_destroyGridViewIfNecessary");
  -[CAMViewfinderViewController _destroyLevelViewIfNecessary](self, "_destroyLevelViewIfNecessary");
  -[CAMViewfinderViewController _destroyFilterScrubberViewIfNecessary](self, "_destroyFilterScrubberViewIfNecessary");

}

- (void)_destroyGestureRecognizersRequiringStandardControls
{
  void *v3;
  UISwipeGestureRecognizer *previousModeGestureRecognizer;
  void *v5;
  UISwipeGestureRecognizer *nextModeGestureRecognizer;
  void *v7;
  UISwipeGestureRecognizer *swipeUpGestureRecognizer;
  void *v9;
  UISwipeGestureRecognizer *swipeDownGestureRecognizer;
  void *v11;
  UISwipeGestureRecognizer *previousFilterGestureRecognizer;
  void *v13;
  UISwipeGestureRecognizer *nextFilterGestureRecognizer;
  void *v15;
  UIPanGestureRecognizer *cameraRollSwipeUpGestureRecognizer;
  void *v17;
  void *v18;
  void *v19;
  id v20;

  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v20 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _previousModeGestureRecognizer](self, "_previousModeGestureRecognizer");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "removeGestureRecognizer:", v3);
  previousModeGestureRecognizer = self->__previousModeGestureRecognizer;
  self->__previousModeGestureRecognizer = 0;

  -[CAMViewfinderViewController _nextModeGestureRecognizer](self, "_nextModeGestureRecognizer");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "removeGestureRecognizer:", v5);
  nextModeGestureRecognizer = self->__nextModeGestureRecognizer;
  self->__nextModeGestureRecognizer = 0;

  -[CAMViewfinderViewController _swipeUpGestureRecognizer](self, "_swipeUpGestureRecognizer");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "removeGestureRecognizer:", v7);
  swipeUpGestureRecognizer = self->__swipeUpGestureRecognizer;
  self->__swipeUpGestureRecognizer = 0;

  -[CAMViewfinderViewController _swipeDownGestureRecognizer](self, "_swipeDownGestureRecognizer");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "removeGestureRecognizer:", v9);
  swipeDownGestureRecognizer = self->__swipeDownGestureRecognizer;
  self->__swipeDownGestureRecognizer = 0;

  -[CAMViewfinderViewController _previousFilterGestureRecognizer](self, "_previousFilterGestureRecognizer");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "removeGestureRecognizer:", v11);
  previousFilterGestureRecognizer = self->__previousFilterGestureRecognizer;
  self->__previousFilterGestureRecognizer = 0;

  -[CAMViewfinderViewController _nextFilterGestureRecognizer](self, "_nextFilterGestureRecognizer");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "removeGestureRecognizer:", v13);
  nextFilterGestureRecognizer = self->__nextFilterGestureRecognizer;
  self->__nextFilterGestureRecognizer = 0;

  -[CAMViewfinderViewController _cameraRollSwipeUpGestureRecognizer](self, "_cameraRollSwipeUpGestureRecognizer");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "removeGestureRecognizer:", v15);
  cameraRollSwipeUpGestureRecognizer = self->__cameraRollSwipeUpGestureRecognizer;
  self->__cameraRollSwipeUpGestureRecognizer = 0;

  -[CAMViewfinderViewController _cameraRollController](self, "_cameraRollController");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "previewGestureRecognizer");
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v18, "view");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "removeGestureRecognizer:", v18);

}

- (void)_embedAllControlsWithLayoutStyle:(int64_t)a3
{
  -[CAMViewfinderViewController _embedFlashButtonWithLayoutStyle:](self, "_embedFlashButtonWithLayoutStyle:");
  -[CAMViewfinderViewController _embedFlashBadgeWithLayoutStyle:](self, "_embedFlashBadgeWithLayoutStyle:", a3);
  -[CAMViewfinderViewController _embedElapsedTimeViewWithLayoutStyle:](self, "_embedElapsedTimeViewWithLayoutStyle:", a3);
  -[CAMViewfinderViewController _embedHDRButtonWithLayoutStyle:](self, "_embedHDRButtonWithLayoutStyle:", a3);
  -[CAMViewfinderViewController _embedHDRBadgeWithLayoutStyle:](self, "_embedHDRBadgeWithLayoutStyle:", a3);
  -[CAMViewfinderViewController _embedFocusAndExposureLockBadgeWithLayoutStyle:](self, "_embedFocusAndExposureLockBadgeWithLayoutStyle:", a3);
  -[CAMViewfinderViewController _embedLivePhotoButtonWithLayoutStyle:](self, "_embedLivePhotoButtonWithLayoutStyle:", a3);
  -[CAMViewfinderViewController _updateSharedLibraryButtonOnSubviewsForLayoutStyle:](self, "_updateSharedLibraryButtonOnSubviewsForLayoutStyle:", a3);
  -[CAMViewfinderViewController _embedSharedLibraryBadgeWithLayoutStyle:](self, "_embedSharedLibraryBadgeWithLayoutStyle:", a3);
  -[CAMViewfinderViewController _embedLivePhotoBadgeWithLayoutStyle:](self, "_embedLivePhotoBadgeWithLayoutStyle:", a3);
  -[CAMViewfinderViewController _embedShallowDepthOfFieldBadgeWithLayoutStyle:](self, "_embedShallowDepthOfFieldBadgeWithLayoutStyle:", a3);
  -[CAMViewfinderViewController _embedPortraitModeInstructionLabelWithLayoutStyle:](self, "_embedPortraitModeInstructionLabelWithLayoutStyle:", a3);
  -[CAMViewfinderViewController _embedQRCodeInstructionLabelWithLayoutStyle:](self, "_embedQRCodeInstructionLabelWithLayoutStyle:", a3);
  -[CAMViewfinderViewController _embedFlipButtonWithLayoutStyle:](self, "_embedFlipButtonWithLayoutStyle:", a3);
  -[CAMViewfinderViewController _embedTimerButtonWithLayoutStyle:](self, "_embedTimerButtonWithLayoutStyle:", a3);
  -[CAMViewfinderViewController _embedTimerIndicatorViewWithLayoutStyle:](self, "_embedTimerIndicatorViewWithLayoutStyle:", a3);
  -[CAMViewfinderViewController _embedShutterButtonWithLayoutStyle:](self, "_embedShutterButtonWithLayoutStyle:", a3);
  -[CAMViewfinderViewController _embedStillDuringVideoButtonWithLayoutStyle:](self, "_embedStillDuringVideoButtonWithLayoutStyle:", a3);
  -[CAMViewfinderViewController _embedModeDialWithLayoutStyle:](self, "_embedModeDialWithLayoutStyle:", a3);
  -[CAMViewfinderViewController _embedImageWellWithLayoutStyle:](self, "_embedImageWellWithLayoutStyle:", a3);
  -[CAMViewfinderViewController _embedReviewButtonWithLayoutStyle:](self, "_embedReviewButtonWithLayoutStyle:", a3);
  -[CAMViewfinderViewController _embedCreativeCameraButtonWithLayoutStyle:](self, "_embedCreativeCameraButtonWithLayoutStyle:", a3);
  -[CAMViewfinderViewController _embedDoneButtonWithLayoutStyle:](self, "_embedDoneButtonWithLayoutStyle:", a3);
  -[CAMViewfinderViewController _embedFilterButtonWithLayoutStyle:](self, "_embedFilterButtonWithLayoutStyle:", a3);
  -[CAMViewfinderViewController _embedApertureButtonWithLayoutStyle:](self, "_embedApertureButtonWithLayoutStyle:", a3);
  -[CAMViewfinderViewController _embedBurstIndicatorViewWithLayoutStyle:](self, "_embedBurstIndicatorViewWithLayoutStyle:", a3);
  -[CAMViewfinderViewController _embedPanoramaViewWithLayoutStyle:](self, "_embedPanoramaViewWithLayoutStyle:", a3);
  -[CAMViewfinderViewController _embedZoomSliderWithLayoutStyle:](self, "_embedZoomSliderWithLayoutStyle:", a3);
  -[CAMViewfinderViewController _embedZoomControlWithLayoutStyle:](self, "_embedZoomControlWithLayoutStyle:", a3);
  -[CAMViewfinderViewController _embedGridViewWithLayoutStyle:](self, "_embedGridViewWithLayoutStyle:", a3);
  -[CAMViewfinderViewController _embedLevelViewWithLayoutStyle:](self, "_embedLevelViewWithLayoutStyle:", a3);
  -[CAMViewfinderViewController _embedVideoConfigurationStatusIndicatorWithLayoutStyle:](self, "_embedVideoConfigurationStatusIndicatorWithLayoutStyle:", a3);
  -[CAMViewfinderViewController _embedUtilityBarWithLayoutStyle:](self, "_embedUtilityBarWithLayoutStyle:", a3);
  -[CAMViewfinderViewController _embedFilterScrubberViewWithLayoutStyle:](self, "_embedFilterScrubberViewWithLayoutStyle:", a3);
  -[CAMViewfinderViewController _embedFilterNameBadgeWithLayoutStyle:](self, "_embedFilterNameBadgeWithLayoutStyle:", a3);
  -[CAMViewfinderViewController _embedLightingControlWithLayoutStyle:](self, "_embedLightingControlWithLayoutStyle:", a3);
  -[CAMViewfinderViewController _embedLightingNameBadgeWithLayoutStyle:](self, "_embedLightingNameBadgeWithLayoutStyle:", a3);
}

- (void)_embedElapsedTimeViewWithLayoutStyle:(int64_t)a3
{
  void *v5;
  void *v6;
  _BOOL4 v7;
  void *v8;
  void *v9;
  id v10;

  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _topBar](self, "_topBar");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _elapsedTimeView](self, "_elapsedTimeView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = +[CAMBottomBar wantsVerticalBarForLayoutStyle:](CAMBottomBar, "wantsVerticalBarForLayoutStyle:", a3);
  if (a3 == 2)
  {
    objc_msgSend(v5, "setElapsedTimeView:", 0);
    v8 = v10;
    v9 = 0;
  }
  else
  {
    if (v7)
    {
      objc_msgSend(v5, "setElapsedTimeView:", 0);
      v8 = v10;
    }
    else
    {
      objc_msgSend(v10, "setElapsedTimeView:", 0);
      v8 = v5;
    }
    v9 = v6;
  }
  objc_msgSend(v8, "setElapsedTimeView:", v9);

}

- (void)_embedLivePhotoButtonWithLayoutStyle:(int64_t)a3
{
  void *v5;
  void *v6;
  _BOOL4 v7;
  _BOOL4 v8;
  void *v9;
  id v10;
  id v11;

  -[CAMViewfinderViewController _livePhotoButton](self, "_livePhotoButton");
  v11 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _topBar](self, "_topBar");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _bottomBar](self, "_bottomBar");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = +[CAMBottomBar wantsVerticalBarForLayoutStyle:](CAMBottomBar, "wantsVerticalBarForLayoutStyle:", a3);
  v8 = -[CAMViewfinderViewController isEmulatingImagePicker](self, "isEmulatingImagePicker");
  if (a3 == 2 || v8)
  {
    objc_msgSend(v5, "setLivePhotoButton:", 0);
    v9 = v6;
    v10 = 0;
  }
  else
  {
    if (v7)
    {
      objc_msgSend(v5, "setLivePhotoButton:", 0);
      v9 = v6;
    }
    else
    {
      objc_msgSend(v6, "setLivePhotoButton:", 0);
      v9 = v5;
    }
    v10 = v11;
  }
  objc_msgSend(v9, "setLivePhotoButton:", v10);

}

- (void)_updateSharedLibraryButtonOnSubviewsForLayoutStyle:(int64_t)a3
{
  void *v5;
  void *v6;
  _BOOL4 v7;
  _BOOL4 v8;
  void *v9;
  id v10;
  id v11;

  -[CAMViewfinderViewController _sharedLibraryButton](self, "_sharedLibraryButton");
  v11 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _topBar](self, "_topBar");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _bottomBar](self, "_bottomBar");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = +[CAMBottomBar wantsVerticalBarForLayoutStyle:](CAMBottomBar, "wantsVerticalBarForLayoutStyle:", a3);
  v8 = -[CAMViewfinderViewController isEmulatingImagePicker](self, "isEmulatingImagePicker");
  if (a3 == 2 || v8)
  {
    objc_msgSend(v5, "setSharedLibraryButton:", 0);
    v9 = v6;
    v10 = 0;
  }
  else
  {
    if (v7)
    {
      objc_msgSend(v5, "setSharedLibraryButton:", 0);
      v9 = v6;
    }
    else
    {
      objc_msgSend(v6, "setSharedLibraryButton:", 0);
      v9 = v5;
    }
    v10 = v11;
  }
  objc_msgSend(v9, "setSharedLibraryButton:", v10);

}

- (void)_embedSharedLibraryBadgeWithLayoutStyle:(int64_t)a3
{
  BOOL v4;
  void *v5;
  id v6;

  v4 = -[CAMViewfinderViewController isEmulatingImagePicker](self, "isEmulatingImagePicker", a3);
  if (v4)
  {
    v6 = 0;
  }
  else
  {
    -[CAMViewfinderViewController _sharedLibraryBadge](self, "_sharedLibraryBadge");
    v6 = (id)objc_claimAutoreleasedReturnValue();
  }
  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setSharedLibraryBadge:", v6);

  if (!v4)
}

- (void)_embedLivePhotoBadgeWithLayoutStyle:(int64_t)a3
{
  void *v4;
  void *v5;
  id v6;

  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView", a3);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _livePhotoBadge](self, "_livePhotoBadge");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (-[CAMViewfinderViewController isEmulatingImagePicker](self, "isEmulatingImagePicker"))
    v5 = 0;
  else
    v5 = v4;
  objc_msgSend(v6, "setLivePhotoBadge:", v5);

}

- (void)_embedShallowDepthOfFieldBadgeWithLayoutStyle:(int64_t)a3
{
  void *v5;
  _BOOL4 v6;
  void *v8;
  id v9;

  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _shallowDepthOfFieldBadge](self, "_shallowDepthOfFieldBadge");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[CAMViewfinderViewController isEmulatingImagePicker](self, "isEmulatingImagePicker");
  if (a3 == 2 || v6)
    v8 = 0;
  else
    v8 = v5;
  objc_msgSend(v9, "setShallowDepthOfFieldBadge:", v8);

}

- (void)_embedPortraitModeInstructionLabelWithLayoutStyle:(int64_t)a3
{
  void *v5;
  _BOOL4 v6;
  void *v8;
  id v9;

  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _portraitModeInstructionLabel](self, "_portraitModeInstructionLabel");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[CAMViewfinderViewController isEmulatingImagePicker](self, "isEmulatingImagePicker");
  if (a3 == 2 || v6)
    v8 = 0;
  else
    v8 = v5;
  objc_msgSend(v9, "setPortraitModeInstructionLabel:", v8);

}

- (void)_embedStillDuringVideoButtonWithLayoutStyle:(int64_t)a3
{
  void *v5;
  void *v6;
  _BOOL4 v7;
  void *v9;
  id v10;

  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "bottomBar");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _stillDuringVideoButton](self, "_stillDuringVideoButton");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = -[CAMViewfinderViewController isEmulatingImagePicker](self, "isEmulatingImagePicker");
  if (a3 == 2 || v7)
    v9 = 0;
  else
    v9 = v6;
  objc_msgSend(v5, "setStillDuringVideoButton:", v9);

}

- (void)_embedReviewButtonWithLayoutStyle:(int64_t)a3
{
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;

  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "bottomBar");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _reviewButton](self, "_reviewButton");
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)v6;
  if (a3 == 2)
    v8 = 0;
  else
    v8 = v6;
  objc_msgSend(v5, "setReviewButton:", v8);
  if (v7)
    objc_msgSend(v5, "setImageWell:", 0);

}

- (void)_embedCreativeCameraButtonWithLayoutStyle:(int64_t)a3
{
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;

  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "bottomBar");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _creativeCameraButton](self, "_creativeCameraButton");
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)v6;
  if (a3 == 2)
    v8 = 0;
  else
    v8 = v6;
  objc_msgSend(v5, "setCreativeCameraButton:", v8);
  if (v7)
  {
    objc_msgSend(v5, "setReviewButton:", 0);
    objc_msgSend(v5, "setImageWell:", 0);
  }

}

- (void)_embedPhotosButtonWithLayoutStyle:(int64_t)a3
{
  void *v4;
  id v5;

  if ((unint64_t)(a3 - 1) < 3)
  {
    -[CAMViewfinderViewController _topBar](self, "_topBar");
    v5 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setPhotosButton:", 0);
LABEL_6:

    return;
  }
  if (a3 == 4 || !a3)
  {
    -[CAMViewfinderViewController _photosButton](self, "_photosButton");
    v5 = (id)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _topBar](self, "_topBar");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setPhotosButton:", v5);

    goto LABEL_6;
  }
}

- (void)_embedDoneButtonWithLayoutStyle:(int64_t)a3
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;

  -[CAMViewfinderViewController _doneButton](self, "_doneButton");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _topBar](self, "_topBar");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _bottomBar](self, "_bottomBar");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  switch(a3)
  {
    case 0:
    case 4:
      objc_msgSend(v6, "setDoneButton:", 0);
      v8 = v5;
      goto LABEL_5;
    case 1:
      objc_msgSend(v5, "setDoneButton:", 0);
      v8 = v7;
LABEL_5:
      v9 = v10;
      goto LABEL_6;
    case 2:
    case 3:
      objc_msgSend(v5, "setDoneButton:", 0);
      v8 = v7;
      v9 = 0;
LABEL_6:
      objc_msgSend(v8, "setDoneButton:", v9);
      break;
    default:
      break;
  }

}

- (void)_embedApertureButtonWithLayoutStyle:(int64_t)a3
{
  void *v5;
  void *v6;
  void *v7;
  _BOOL4 v8;
  _BOOL4 v9;
  void *v10;
  void *v11;
  id v12;

  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "topBar");
  v12 = (id)objc_claimAutoreleasedReturnValue();

  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "bottomBar");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = +[CAMBottomBar wantsVerticalBarForLayoutStyle:](CAMBottomBar, "wantsVerticalBarForLayoutStyle:", a3);
  v9 = -[CAMViewfinderViewController isEmulatingImagePicker](self, "isEmulatingImagePicker");
  if (a3 == 2 || v9)
  {
    objc_msgSend(v12, "setApertureButton:", 0);
LABEL_7:
    objc_msgSend(v7, "setApertureButton:", 0);
    goto LABEL_8;
  }
  if (!v8)
  {
    -[CAMViewfinderViewController _apertureButton](self, "_apertureButton");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "setApertureButton:", v11);

    goto LABEL_7;
  }
  objc_msgSend(v12, "setApertureButton:", 0);
  -[CAMViewfinderViewController _apertureButton](self, "_apertureButton");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setApertureButton:", v10);

LABEL_8:
}

- (void)_embedIntensityButtonWithLayoutStyle:(int64_t)a3
{
  void *v5;
  _BOOL4 v6;
  _BOOL4 v7;
  void *v8;
  id v9;

  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "topBar");
  v9 = (id)objc_claimAutoreleasedReturnValue();

  v6 = +[CAMBottomBar wantsVerticalBarForLayoutStyle:](CAMBottomBar, "wantsVerticalBarForLayoutStyle:", a3);
  v7 = -[CAMViewfinderViewController isEmulatingImagePicker](self, "isEmulatingImagePicker");
  if (a3 == 2 || v7 || v6)
  {
    objc_msgSend(v9, "setIntensityButton:", 0);
  }
  else
  {
    -[CAMViewfinderViewController _intensityButton](self, "_intensityButton");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setIntensityButton:", v8);

  }
}

- (void)_embedPanoramaViewWithLayoutStyle:(int64_t)a3
{
  void *v5;
  void *v6;
  _BOOL4 v7;
  int v8;
  void *v9;
  void *v10;
  id v11;

  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v11 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _panoramaViewController](self, "_panoramaViewController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "view");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = -[CAMViewfinderViewController isEmulatingImagePicker](self, "isEmulatingImagePicker");
  if (v11)
  {
    v8 = a3 == 2 || v7;
    if (v8 == 1)
      v9 = 0;
    else
      v9 = v6;
    objc_msgSend(v11, "setPanoramaView:", v9);
  }
  else
  {
    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setPanoramaView:", v6);

  }
}

- (void)_embedZoomSliderWithLayoutStyle:(int64_t)a3
{
  BOOL v5;
  CAMZoomSlider *zoomSlider;
  id v7;

  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  v5 = -[CAMViewfinderViewController _shouldUseZoomControlInsteadOfSlider](self, "_shouldUseZoomControlInsteadOfSlider");
  zoomSlider = 0;
  if (a3 != 2 && !v5)
    zoomSlider = self->__zoomSlider;
  objc_msgSend(v7, "setZoomSlider:", zoomSlider);

}

- (void)_embedZoomControlWithLayoutStyle:(int64_t)a3
{
  void *v5;
  CAMZoomControl *zoomControl;
  id v7;

  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (a3 == 2)
    zoomControl = 0;
  else
    zoomControl = self->__zoomControl;
  v7 = v5;
  objc_msgSend(v5, "setZoomControl:", zoomControl);

}

- (void)_embedGridViewWithLayoutStyle:(int64_t)a3
{
  void *v5;
  void *v6;
  _BOOL4 v7;
  void *v9;
  id v10;

  -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "previewView");
  v10 = (id)objc_claimAutoreleasedReturnValue();

  -[CAMViewfinderViewController _gridView](self, "_gridView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = -[CAMViewfinderViewController isEmulatingImagePicker](self, "isEmulatingImagePicker");
  if (a3 == 2 || v7)
    v9 = 0;
  else
    v9 = v6;
  objc_msgSend(v10, "setGridView:", v9);

}

- (void)_unembedGridView
{
  void *v3;
  void *v4;
  id v5;

  -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "previewView");
  v5 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "setGridView:", 0);
  -[CAMViewfinderViewController _gridView](self, "_gridView");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "removeFromSuperview");

}

- (void)_embedLevelViewWithLayoutStyle:(int64_t)a3
{
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;

  -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "previewView");
  v9 = (id)objc_claimAutoreleasedReturnValue();

  -[CAMViewfinderViewController _levelView](self, "_levelView");
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)v6;
  if (a3 == 2)
    v8 = 0;
  else
    v8 = v6;
  objc_msgSend(v9, "setLevelView:", v8);

}

- (void)_unembedLevelView
{
  void *v3;
  void *v4;
  id v5;

  -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "previewView");
  v5 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "setLevelView:", 0);
  -[CAMViewfinderViewController _levelView](self, "_levelView");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "removeFromSuperview");

}

- (void)_embedHorizonLevelView
{
  void *v3;
  void *v4;
  id v5;

  -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "previewView");
  v5 = (id)objc_claimAutoreleasedReturnValue();

  -[CAMViewfinderViewController _horizonLevelView](self, "_horizonLevelView");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setHorizonLevelView:", v4);

}

- (void)_unembedHorizonLevelView
{
  void *v3;
  void *v4;
  id v5;

  -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "previewView");
  v5 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "setHorizonLevelView:", 0);
  -[CAMViewfinderViewController _horizonLevelView](self, "_horizonLevelView");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "removeFromSuperview");

}

- (void)_embedVideoConfigurationStatusIndicatorWithLayoutStyle:(int64_t)a3
{
  void *v5;
  void *v6;
  _BOOL4 v7;
  _BOOL4 v8;
  int v9;
  id v10;
  id v11;
  id v12;
  id v13;

  -[CAMViewfinderViewController _videoConfigurationStatusIndicator](self, "_videoConfigurationStatusIndicator");
  v13 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _topBar](self, "_topBar");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = +[CAMBottomBar wantsVerticalBarForLayoutStyle:](CAMBottomBar, "wantsVerticalBarForLayoutStyle:", a3);
  v8 = -[CAMViewfinderViewController isEmulatingImagePicker](self, "isEmulatingImagePicker");
  v9 = a3 == 2 || v8;
  if (v7)
    v10 = v13;
  else
    v10 = 0;
  if (v9 | v7)
    v11 = 0;
  else
    v11 = v13;
  if (v9)
    v12 = 0;
  else
    v12 = v10;
  objc_msgSend(v6, "setVideoConfigurationStatusIndicator:", v11);
  objc_msgSend(v5, "setVideoConfigurationStatusIndicator:", v12);

}

- (void)_embedUtilityBarWithLayoutStyle:(int64_t)a3
{
  void *v5;
  _BOOL4 v6;
  id v8;
  id v9;

  -[CAMViewfinderViewController _utilityBar](self, "_utilityBar");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _bottomBar](self, "_bottomBar");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[CAMViewfinderViewController isEmulatingImagePicker](self, "isEmulatingImagePicker");
  if (a3 == 2 || v6)
    v8 = 0;
  else
    v8 = v9;
  objc_msgSend(v5, "setUtilityBar:", v8);

}

- (void)_embedFilterScrubberViewWithLayoutStyle:(int64_t)a3
{
  void *v5;
  _BOOL4 v6;
  _BOOL4 v7;
  void *v8;
  int v9;
  id v10;
  id v11;

  -[CAMViewfinderViewController _filterScrubberView](self, "_filterScrubberView");
  v11 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _utilityBar](self, "_utilityBar");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = +[CAMBottomBar wantsVerticalBarForLayoutStyle:](CAMBottomBar, "wantsVerticalBarForLayoutStyle:", a3);
  v7 = -[CAMViewfinderViewController isEmulatingImagePicker](self, "isEmulatingImagePicker");
  -[CAMViewfinderViewController _controlDrawer](self, "_controlDrawer");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v8)
  {
    v9 = a3 == 2 || v7;
    if (v9 | v6)
      v10 = 0;
    else
      v10 = v11;
    objc_msgSend(v5, "setFilterScrubberView:", v10);
  }

}

- (void)_embedFilterNameBadgeWithLayoutStyle:(int64_t)a3
{
  void *v5;
  _BOOL4 v6;
  void *v8;
  id v9;

  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _filterNameBadge](self, "_filterNameBadge");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[CAMViewfinderViewController isEmulatingImagePicker](self, "isEmulatingImagePicker");
  if (a3 == 2 || v6)
    v8 = 0;
  else
    v8 = v5;
  objc_msgSend(v9, "setFilterNameBadge:", v8);

}

- (void)_embedPortraitApertureSliderWithLayoutStyle:(int64_t)a3
{
  _BOOL4 v5;
  void *v6;
  id v7;

  -[CAMViewfinderViewController _utilityBar](self, "_utilityBar");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  v5 = -[CAMViewfinderViewController isEmulatingImagePicker](self, "isEmulatingImagePicker");
  if (a3 == 2 || v5)
  {
    objc_msgSend(v7, "setApertureSlider:", 0);
  }
  else
  {
    -[CAMViewfinderViewController _portraitApertureSlider](self, "_portraitApertureSlider");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setApertureSlider:", v6);

  }
}

- (void)_embedPortraitIntensitySliderWithLayoutStyle:(int64_t)a3
{
  _BOOL4 v5;
  void *v6;
  id v7;

  -[CAMViewfinderViewController _utilityBar](self, "_utilityBar");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  v5 = -[CAMViewfinderViewController isEmulatingImagePicker](self, "isEmulatingImagePicker");
  if (a3 == 2 || v5)
  {
    objc_msgSend(v7, "setIntensitySlider:", 0);
  }
  else
  {
    -[CAMViewfinderViewController _portraitIntensitySlider](self, "_portraitIntensitySlider");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setIntensitySlider:", v6);

  }
}

- (void)_embedLightingControlWithLayoutStyle:(int64_t)a3
{
  void *v5;
  _BOOL4 v6;
  void *v8;
  id v9;

  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _lightingControl](self, "_lightingControl");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[CAMViewfinderViewController isEmulatingImagePicker](self, "isEmulatingImagePicker");
  if (a3 == 2 || v6)
    v8 = 0;
  else
    v8 = v5;
  objc_msgSend(v9, "setLightingControl:", v8);

}

- (void)_embedLightingNameBadgeWithLayoutStyle:(int64_t)a3
{
  void *v5;
  _BOOL4 v6;
  void *v8;
  id v9;

  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _lightingNameBadge](self, "_lightingNameBadge");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[CAMViewfinderViewController isEmulatingImagePicker](self, "isEmulatingImagePicker");
  if (a3 == 2 || v6)
    v8 = 0;
  else
    v8 = v5;
  objc_msgSend(v9, "setLightingNameBadge:", v8);

}

- (BOOL)_shouldAllowControlDrawerForGraphConfiguration:(id)a3
{
  id v4;
  void *v5;
  char v6;
  char v7;
  char v8;
  BOOL v9;
  void *v10;
  BOOL v11;
  void *v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;

  v4 = a3;
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isCapturingVideo");
  v7 = objc_msgSend(v5, "isCapturingBurst");
  v8 = objc_msgSend(v5, "isCapturingTimelapse");
  v9 = -[CAMViewfinderViewController _isCapturingFromTimer](self, "_isCapturingFromTimer");
  -[CAMViewfinderViewController _callStatusMonitor](self, "_callStatusMonitor");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = -[CAMViewfinderViewController _shouldDisableModeForGraphConfiguration:callActive:](self, "_shouldDisableModeForGraphConfiguration:callActive:", v4, objc_msgSend(v10, "isCallActive"));

  -[CAMViewfinderViewController _controlTypesForGraphConfiguration:](self, "_controlTypesForGraphConfiguration:", v4);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  v13 = objc_msgSend(v12, "count");
  v14 = !v11;
  if (!v13)
    v14 = 0;
  if (v9)
    v14 = 0;
  if ((v8 & 1) != 0)
    v14 = 0;
  if ((v7 & 1) != 0)
    v14 = 0;
  v15 = (v6 & 1) == 0 && v14;

  return v15;
}

- (BOOL)_shouldAllowControlDrawerToggleForGraphConfiguration:(id)a3 orientation:(int64_t)a4
{
  id v6;
  _BOOL4 v7;
  BOOL v8;
  BOOL v9;
  void *v10;
  char v11;
  char v12;
  char v13;

  v6 = a3;
  v7 = -[CAMViewfinderViewController _shouldAllowControlDrawerForGraphConfiguration:](self, "_shouldAllowControlDrawerForGraphConfiguration:", v6);
  v8 = -[CAMViewfinderViewController _isLowLightCaptureUIVisible](self, "_isLowLightCaptureUIVisible");
  v9 = -[CAMViewfinderViewController _shouldHideElapsedTimeViewForGraphConfiguration:orientation:](self, "_shouldHideElapsedTimeViewForGraphConfiguration:orientation:", v6, a4);

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "smartStyleControlsVisible");

  v12 = (unint64_t)(a4 - 3) < 2 || v9;
  v13 = v12 & (v11 ^ 1);
  if (v8)
    v13 = 0;
  if (v7)
    return v13;
  else
    return 0;
}

- (BOOL)_isMenuButtonConflictingWithView:(id)a3
{
  id v4;
  void *v5;
  char v6;
  void *v7;
  void *v8;
  void *v9;
  char v10;
  BOOL v11;
  void *v12;
  id v13;
  unint64_t v14;
  void *v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  double v22;
  CGFloat v23;
  void *v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  double v31;
  CGFloat v32;
  CGRect v34;
  CGRect v35;

  v4 = a3;
  if (v4)
  {
    -[CAMViewfinderViewController _topBar](self, "_topBar");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "_shouldExpandButtonsHorizontally");
    objc_msgSend(v5, "_expandedMenuButton");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _bottomBar](self, "_bottomBar");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "_expandedMenuButton");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7)
    {
      if (v9)
        v10 = 0;
      else
        v10 = v6;
      if ((v10 & 1) != 0)
        goto LABEL_7;
    }
    else if (!v9)
    {
LABEL_7:
      v11 = 0;
LABEL_17:

      goto LABEL_18;
    }
    if (v9)
      v12 = v9;
    else
      v12 = v7;
    v13 = v12;
    v14 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
    v11 = 0;
    if (v14 <= 4 && ((1 << v14) & 0x13) != 0)
    {
      -[CAMViewfinderViewController view](self, "view");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "bounds");
      objc_msgSend(v15, "convertRect:fromView:", v13);
      v17 = v16;
      v19 = v18;
      v21 = v20;
      v23 = v22;

      -[CAMViewfinderViewController view](self, "view");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "bounds");
      objc_msgSend(v24, "convertRect:fromView:", v4);
      v26 = v25;
      v28 = v27;
      v30 = v29;
      v32 = v31;

      v34.origin.x = v17;
      v34.origin.y = v19;
      v34.size.width = v21;
      v34.size.height = v23;
      v35.origin.x = v26;
      v35.origin.y = v28;
      v35.size.width = v30;
      v35.size.height = v32;
      v11 = CGRectIntersectsRect(v34, v35);
    }

    goto LABEL_17;
  }
  v11 = 0;
LABEL_18:

  return v11;
}

- (BOOL)_shouldHideElapsedTimeViewForGraphConfiguration:(id)a3 orientation:(int64_t)a4
{
  id v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int64_t v10;
  void *v11;
  char v12;
  _BOOL4 v13;
  _BOOL4 v14;
  _BOOL4 v15;
  _BOOL4 v16;
  int v17;
  void *v18;
  void *v19;
  int v20;
  int v21;
  int v22;
  BOOL v23;
  void *v24;
  int v25;
  void *v26;
  void *v27;
  _BOOL4 v29;
  void *v30;
  _BOOL4 v31;
  int v32;

  v6 = a3;
  -[CAMViewfinderViewController _topBar](self, "_topBar");
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v6, "mode");
  v9 = 0;
  v30 = (void *)v7;
  if (v8 <= 8)
  {
    if (((1 << v8) & 0x186) != 0)
    {
      v10 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
      -[CAMViewfinderViewController _captureController](self, "_captureController");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "isCapturingVideo");
      v9 = 1;
      if ((unint64_t)(a4 - 3) >= 2 && (v12 & 1) == 0 && v10 != 1)
        v9 = !-[CAMViewfinderViewController _useCreativeCameraControls](self, "_useCreativeCameraControls");
    }
    else
    {
      if (v8)
        goto LABEL_10;
      -[CAMViewfinderViewController _captureController](self, "_captureController");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v11, "isCapturingVideo");
    }

  }
LABEL_10:
  v32 = v9;
  v13 = -[CAMViewfinderViewController _shouldShowIndicatorOfType:forGraphConfiguration:](self, "_shouldShowIndicatorOfType:forGraphConfiguration:", 13, v6);
  v31 = -[CAMViewfinderViewController _shouldShowIndicatorOfType:forGraphConfiguration:](self, "_shouldShowIndicatorOfType:forGraphConfiguration:", 7, v6);
  v29 = -[CAMViewfinderViewController _shouldShowIndicatorOfType:forGraphConfiguration:](self, "_shouldShowIndicatorOfType:forGraphConfiguration:", 8, v6);
  v14 = -[CAMViewfinderViewController _shouldShowIndicatorOfType:forGraphConfiguration:](self, "_shouldShowIndicatorOfType:forGraphConfiguration:", 5, v6);
  v15 = -[CAMViewfinderViewController _shouldShowIndicatorOfType:forGraphConfiguration:](self, "_shouldShowIndicatorOfType:forGraphConfiguration:", 14, v6);
  v16 = -[CAMViewfinderViewController _shouldShowIndicatorOfType:forGraphConfiguration:](self, "_shouldShowIndicatorOfType:forGraphConfiguration:", 15, v6);
  v17 = -[CAMViewfinderViewController _shouldHideVideoConfigurationStatusIndicatorForGraphConfiguration:](self, "_shouldHideVideoConfigurationStatusIndicatorForGraphConfiguration:", v6);
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "controlStatusBar");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v19, "isControlExpanded");

  v21 = 1;
  if (v13 && v31)
  {
    v24 = v30;
    v22 = v32;
  }
  else
  {
    v22 = v32;
    if (v29 && v14 || v13 && v15)
    {
      v24 = v30;
    }
    else
    {
      v23 = v13 && v16;
      v24 = v30;
      if (!v23)
        v21 = v16 & ~v17 & v15 | v20;
    }
  }
  v25 = v22 ^ 1 | v21;
  -[CAMViewfinderViewController _elapsedTimeView](self, "_elapsedTimeView");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "elapsedTimeView");
  v27 = (void *)objc_claimAutoreleasedReturnValue();

  if (v26 == v27)
    v25 |= objc_msgSend(v24, "shouldHideElapsedTimeViewForGraphConfiguration:", v6);

  return v25;
}

- (BOOL)_shouldHideModeDialForGraphConfiguration:(id)a3 isCapturingBurst:(BOOL)a4
{
  _BOOL4 v4;
  id v6;
  void *v7;
  int v8;
  int v9;
  int v10;
  _BOOL4 v11;
  _BOOL4 v12;
  int v13;
  void *v14;
  _BOOL4 v15;
  void *v16;
  _BOOL4 v17;
  _BOOL4 v18;
  int v19;
  int v21;

  v4 = a4;
  v6 = a3;
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend(MEMORY[0x1E0DC3470], "shouldMakeUIForDefaultPNG");
  v8 = objc_msgSend(v7, "isCapturingVideo");
  v9 = objc_msgSend(v7, "isCapturingPanorama");
  v10 = objc_msgSend(v7, "isCapturingTimelapse");
  v11 = -[CAMViewfinderViewController _isLowLightCaptureUIVisible](self, "_isLowLightCaptureUIVisible");
  v12 = -[CAMViewfinderViewController _shouldHideUtilityBarForGraphConfiguration:](self, "_shouldHideUtilityBarForGraphConfiguration:", v6);

  v13 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle") != 1 && !v12;
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (v14)
    v15 = v4;
  else
    v15 = 0;

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (v16)
    v17 = -[CAMViewfinderViewController _isCapturingFromTimer](self, "_isCapturingFromTimer");
  else
    v17 = 0;

  v18 = -[CAMViewfinderViewController _trueVideoIsTransitioningToCapture](self, "_trueVideoIsTransitioningToCapture");
  if (((v21 | v8 | v15 | v9 | v10 | v11 | v17 | v13) & 1) != 0)
    LOBYTE(v19) = 1;
  else
    v19 = -[CAMViewfinderViewController _isTransitioningToCreativeCamera](self, "_isTransitioningToCreativeCamera")
       || v18;

  return v19;
}

- (BOOL)_shouldHidePhotosButtonForGraphConfiguration:(id)a3
{
  id v4;
  void *v5;
  int v6;
  int v7;
  int v8;
  _BOOL4 v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  unsigned int v14;
  int v15;
  char v16;
  BOOL v18;

  v4 = a3;
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isCapturingVideo");
  v7 = objc_msgSend(v5, "isCapturingPanorama");
  v8 = objc_msgSend(v5, "isCapturingTimelapse");
  v9 = -[CAMViewfinderViewController _isLowLightCaptureUIVisible](self, "_isLowLightCaptureUIVisible");
  v18 = -[CAMViewfinderViewController _isCapturingFromTimer](self, "_isCapturingFromTimer");
  -[CAMViewfinderViewController _topBar](self, "_topBar");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _photosButton](self, "_photosButton");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "photosButton");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11 == v12)
  {
    v15 = objc_msgSend(v10, "shouldHidePhotosButtonForGraphConfiguration:", v4);
    v14 = v6 | v7 | v8;
    v13 = +[CAMTopBar isFloatingStyle:](CAMTopBar, "isFloatingStyle:", -[CAMViewfinderViewController _topBarStyleForGraphConfiguration:capturing:](self, "_topBarStyleForGraphConfiguration:capturing:", v4, v14)) | v15;
  }
  else
  {
    LOBYTE(v13) = 0;
    v14 = v6 | v7 | v8;
  }
  if (((v14 | v9) & 1) != 0)
    v16 = 1;
  else
    v16 = v18 | v13;

  return v16;
}

- (BOOL)_shouldHideApertureButtonForGraphConfiguration:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BOOL4 v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  int v20;
  void *v21;
  void *v22;

  v4 = a3;
  -[CAMViewfinderViewController _topBar](self, "_topBar");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isDepthEffectApertureSupportedForMode:devicePosition:", objc_msgSend(v4, "mode"), objc_msgSend(v4, "devicePosition"));

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v4, "mode");
  v10 = objc_msgSend(v4, "devicePosition");
  v11 = -[CAMViewfinderViewController _currentPhotoFormat](self, "_currentPhotoFormat");
  v13 = objc_msgSend(v8, "isDepthSuggestionSupportedForMode:devicePosition:photoFormat:", v9, v10, v11, v12);

  v14 = -[CAMViewfinderViewController _shouldUsePhotoModePortraitEffect](self, "_shouldUsePhotoModePortraitEffect");
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = -[CAMViewfinderViewController _currentPhotoFormat](self, "_currentPhotoFormat");
  v18 = objc_msgSend(v15, "isDepthEffectApertureSupportedForPhotoFormat:", v16, v17);

  v19 = -[CAMViewfinderViewController _isCapturingFromTimer](self, "_isCapturingFromTimer");
  v20 = 1;
  if (v7 && !v19)
    v20 = -[CAMViewfinderViewController _isTransitioningToCreativeCamera](self, "_isTransitioningToCreativeCamera") | v13 & !v14 | v18 ^ 1;
  -[CAMViewfinderViewController _apertureButton](self, "_apertureButton");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "apertureButton");
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  if (v21 == v22)
    v20 |= objc_msgSend(v5, "shouldHideApertureButtonForGraphConfiguration:", v4);

  return v20;
}

- (BOOL)_shouldHideIntensityButtonForGraphConfiguration:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  int64_t v7;
  int v8;
  BOOL v9;
  int v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BOOL4 v17;
  int v18;
  void *v19;
  void *v20;

  v4 = a3;
  -[CAMViewfinderViewController _topBar](self, "_topBar");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = -[CAMViewfinderViewController _sanitizedLightingTypeForMode:device:](self, "_sanitizedLightingTypeForMode:device:", objc_msgSend(v4, "mode"), objc_msgSend(v4, "device"));
  v8 = objc_msgSend(v6, "isPortraitEffectIntensitySupportedForMode:", objc_msgSend(v4, "mode"));
  v9 = -[CAMViewfinderViewController _isCapturingFromTimer](self, "_isCapturingFromTimer");
  v10 = objc_msgSend(v6, "isPortraitEffectIntensitySupportedForLightingType:", v7);
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v4, "mode");
  v13 = objc_msgSend(v4, "devicePosition");
  v14 = -[CAMViewfinderViewController _currentPhotoFormat](self, "_currentPhotoFormat");
  v16 = objc_msgSend(v11, "isDepthSuggestionSupportedForMode:devicePosition:photoFormat:", v12, v13, v14, v15);

  v17 = -[CAMViewfinderViewController _shouldUsePhotoModePortraitEffect](self, "_shouldUsePhotoModePortraitEffect");
  v18 = 1;
  if (v8 && !v9)
    v18 = -[CAMViewfinderViewController _isTransitioningToCreativeCamera](self, "_isTransitioningToCreativeCamera") | v10 ^ 1 | v16 & !v17;
  -[CAMViewfinderViewController _intensityButton](self, "_intensityButton");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "intensityButton");
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  if (v19 == v20)
    v18 |= objc_msgSend(v5, "shouldHideIntensityButtonForGraphConfiguration:", v4);

  return v18;
}

- (BOOL)_shouldShowExposureButtonForGraphConfiguration:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;

  v4 = a3;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v4, "mode");

  LODWORD(v4) = objc_msgSend(v5, "isExposureSliderSupportedForMode:", v6);
  if ((_DWORD)v4 && !-[CAMViewfinderViewController _isCapturingFromTimer](self, "_isCapturingFromTimer"))
    return !-[CAMViewfinderViewController _isTransitioningToCreativeCamera](self, "_isTransitioningToCreativeCamera");
  else
    return 0;
}

- (BOOL)_wantsZoomSliderForGraphConfiguration:(id)a3
{
  id v4;
  BOOL v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;

  v4 = a3;
  v5 = -[CAMViewfinderViewController _shouldUseZoomControlInsteadOfSlider](self, "_shouldUseZoomControlInsteadOfSlider");
  v6 = -[CAMViewfinderViewController _isZoomAllowedForGraphConfiguration:](self, "_isZoomAllowedForGraphConfiguration:", v4);
  v7 = objc_msgSend(v4, "devicePosition");

  v8 = v7 != 1 && v6;
  return !v5 && v8;
}

- (BOOL)_wantsZoomControlForGraphConfiguration:(id)a3
{
  id v4;
  BOOL v5;
  BOOL v6;

  v4 = a3;
  v5 = -[CAMViewfinderViewController _shouldUseZoomControlInsteadOfSlider](self, "_shouldUseZoomControlInsteadOfSlider");
  v6 = -[CAMViewfinderViewController _isZoomAllowedForGraphConfiguration:](self, "_isZoomAllowedForGraphConfiguration:", v4);
  LOBYTE(self) = -[CAMViewfinderViewController _shouldUseZoomButtonForCameraToggleForGraphConfiguration:](self, "_shouldUseZoomButtonForCameraToggleForGraphConfiguration:", v4);

  return v5 & (v6 | self);
}

- (BOOL)_shouldUseZoomButtonForCameraToggleForGraphConfiguration:(id)a3
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a3;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "mode");
  v6 = objc_msgSend(v3, "devicePosition");
  v7 = objc_msgSend(v3, "videoConfiguration");
  v8 = objc_msgSend(v3, "videoStabilizationStrength");

  LOBYTE(v3) = objc_msgSend(v4, "shouldAllowCameraToggleForMode:devicePosition:videoConfiguration:videoStabilizationStrength:", v5, v6, v7, v8);
  return (char)v3;
}

- (BOOL)_shouldUseZoomButtonForCameraToggleForCurrentModeAndDevice
{
  CAMViewfinderViewController *v2;
  void *v3;

  v2 = self;
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v2) = -[CAMViewfinderViewController _shouldUseZoomButtonForCameraToggleForGraphConfiguration:](v2, "_shouldUseZoomButtonForCameraToggleForGraphConfiguration:", v3);

  return (char)v2;
}

- (BOOL)_wantsLightingControlForGraphConfiguration:(id)a3
{
  id v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a3;
  v5 = objc_msgSend(v4, "mode");
  v6 = objc_msgSend(v4, "devicePosition");

  return -[CAMViewfinderViewController _wantsLightingControlForMode:devicePosition:](self, "_wantsLightingControlForMode:devicePosition:", v5, v6);
}

- (BOOL)_wantsLightingControlForMode:(int64_t)a3 devicePosition:(int64_t)a4
{
  void *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v7, "isLightingControlSupportedForMode:", a3))
    goto LABEL_6;
  if (!a3)
  {
    v9 = -[CAMViewfinderViewController _currentPhotoFormat](self, "_currentPhotoFormat");
    if (objc_msgSend(v7, "isDepthSuggestionSupportedForMode:devicePosition:photoFormat:", 0, a4, v9, v10))
    {
      v8 = -[CAMViewfinderViewController _depthEffectEnabledFromSuggestion](self, "_depthEffectEnabledFromSuggestion");
      goto LABEL_7;
    }
LABEL_6:
    v8 = 0;
    goto LABEL_7;
  }
  v8 = 1;
LABEL_7:

  return v8;
}

- (BOOL)_shouldShowExternalStorageButtonForGraphConfiguration:(id)a3
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;

  v4 = a3;
  v5 = objc_msgSend(v4, "mode");
  v6 = objc_msgSend(v4, "videoEncodingBehavior");

  v7 = -[CAMViewfinderViewController _wantsExternalStorageOutputEnabledForMode:videoEncodingBehavior:](self, "_wantsExternalStorageOutputEnabledForMode:videoEncodingBehavior:", v5, v6);
  if (v7)
    LOBYTE(v7) = -[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled");
  return v7;
}

- (BOOL)_wantsExternalStorageOutputEnabledForMode:(int64_t)a3 videoEncodingBehavior:(int64_t)a4
{
  void *v7;
  char v8;
  void *v9;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isExternalStorageOutputSupportedForMode:videoEncodingBehavior:", a3, a4);

  -[CAMViewfinderViewController _connectedStorage](self, "_connectedStorage");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v9)
    v8 = 0;

  return v8;
}

- (BOOL)_wantsExternalStorageOutputEnabledForMode:(int64_t)a3 videoConfiguration:(int64_t)a4 desiredProResVideoMode:(int64_t)a5
{
  void *v9;

  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(a5) = -[CAMViewfinderViewController _wantsExternalStorageOutputEnabledForMode:videoEncodingBehavior:](self, "_wantsExternalStorageOutputEnabledForMode:videoEncodingBehavior:", a3, objc_msgSend(v9, "videoEncodingBehaviorForConfiguration:mode:desiredProResVideoMode:outputToExternalStorage:spatialVideoEnabled:", a4, a3, a5, 1, -[CAMViewfinderViewController _isSpatialVideoInVideoModeActiveForMode:devicePosition:](self, "_isSpatialVideoInVideoModeActiveForMode:devicePosition:", a3, -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"))));

  return a5;
}

- (BOOL)_wantsExternalStorageOutputEnabled
{
  CAMViewfinderViewController *v2;
  void *v3;

  v2 = self;
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v2) = -[CAMViewfinderViewController _wantsExternalStorageOutputEnabledForMode:videoEncodingBehavior:](v2, "_wantsExternalStorageOutputEnabledForMode:videoEncodingBehavior:", -[CAMViewfinderViewController _currentMode](v2, "_currentMode"), objc_msgSend(v3, "videoEncodingBehavior"));

  return (char)v2;
}

- (BOOL)_shouldShowUnsupportedExternalStorageFormat
{
  void *v3;
  int64_t v4;
  void *v5;
  void *v6;
  char v7;
  void *v8;

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v4) = objc_msgSend(v5, "isExternalStorageOutputSupportedForMode:videoEncodingBehavior:", v4, objc_msgSend(v3, "videoEncodingBehavior"));

  if ((_DWORD)v4)
  {
    -[CAMViewfinderViewController _connectedStorage](self, "_connectedStorage");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      v7 = 0;
    }
    else
    {
      -[CAMViewfinderViewController _storageMonitor](self, "_storageMonitor");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v8, "hasExternalStorageNotRecommendedForCapture");

    }
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

- (BOOL)_shouldHideHorizonLevelViewForGraphConfiguration:(id)a3
{
  _BOOL4 v4;
  BOOL v5;

  v4 = -[CAMViewfinderViewController _shouldCreateHorizonLevelViewForMode:](self, "_shouldCreateHorizonLevelViewForMode:", objc_msgSend(a3, "mode"));
  v5 = -[CAMViewfinderViewController _isLowLightCaptureUIVisible](self, "_isLowLightCaptureUIVisible");
  return !v4
      || v5
      || -[CAMViewfinderViewController _isTransitioningToCreativeCamera](self, "_isTransitioningToCreativeCamera");
}

- (BOOL)_shouldCreateHorizonLevelViewForMode:(int64_t)a3
{
  return ((unint64_t)a3 < 0xA) & (0x3F7u >> a3);
}

- (BOOL)_shouldHideVideoConfigurationStatusIndicatorForGraphConfiguration:(id)a3
{
  id v4;
  char v5;
  void *v6;
  BOOL v7;
  void *v8;
  char v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  char v32;
  int64_t v33;
  char v34;
  BOOL v35;
  uint64_t v37;
  uint64_t v38;

  v4 = a3;
  v5 = objc_msgSend(MEMORY[0x1E0DC3470], "shouldMakeUIForDefaultPNG");
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v6, "isVideoConfigurationControlEnabled"))
  {

    v7 = 0;
  }
  else
  {
    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "interactiveVideoFormatControlAlwaysEnabled");

    if ((v9 & 1) != 0)
    {
      v7 = 0;
    }
    else
    {
      +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v4, "mode");
      v12 = objc_msgSend(v4, "device");
      v13 = objc_msgSend(v4, "videoEncodingBehavior");
      v14 = objc_msgSend(v4, "videoConfiguration");
      v15 = -[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled");
      v16 = objc_msgSend(v4, "enableStereoVideoCapture");
      LOBYTE(v37) = objc_msgSend(v4, "prefersHDR10BitVideo");
      v17 = objc_msgSend(v10, "resolvedVideoConfigurationForMode:device:videoEncodingBehavior:videoConfiguration:outputToExternalStorage:spatialVideoEnabled:prefersHDR10BitVideo:", v11, v12, v13, v14, v15, v16, v37);

      +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = objc_msgSend(v4, "mode");
      v20 = objc_msgSend(v4, "device");
      v21 = objc_msgSend(v4, "videoEncodingBehavior");
      v22 = -[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled");
      v23 = objc_msgSend(v4, "enableStereoVideoCapture");
      LOBYTE(v38) = objc_msgSend(v4, "prefersHDR10BitVideo");
      v24 = objc_msgSend(v18, "resolvedVideoConfigurationForMode:device:videoEncodingBehavior:videoConfiguration:outputToExternalStorage:spatialVideoEnabled:prefersHDR10BitVideo:", v19, v20, v21, 0, v22, v23, v38);

      v7 = v17 == v24;
    }
  }
  v25 = objc_msgSend(v4, "mode");
  v26 = (v25 > 8) | (0x79u >> v25);
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = objc_msgSend(v27, "isCapturingVideo");
  -[CAMViewfinderViewController _topBar](self, "_topBar");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _elapsedTimeView](self, "_elapsedTimeView");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "elapsedTimeView");
  v31 = (void *)objc_claimAutoreleasedReturnValue();

  if (v30 == v31)
  {
    v32 = objc_msgSend(v29, "shouldHideVideoConfigurationStatusIndicatorForGraphConfiguration:", v4);
    v33 = -[CAMViewfinderViewController _topBarStyleForGraphConfiguration:capturing:](self, "_topBarStyleForGraphConfiguration:capturing:", v4, v28);
    if (-[CAMViewfinderViewController _useCreativeCameraControls](self, "_useCreativeCameraControls"))
      v32 |= +[CAMTopBar isFloatingStyle:](CAMTopBar, "isFloatingStyle:", v33);
  }
  else
  {
    v32 = 0;
  }
  v34 = v7 | v26 | v5 | v28;
  v35 = 1;
  if ((v34 & 1) == 0 && (v32 & 1) == 0)
    v35 = -[CAMViewfinderViewController _isTransitioningToCreativeCamera](self, "_isTransitioningToCreativeCamera");

  return v35;
}

- (BOOL)_shouldShowLowLightControlForGraphConfiguration:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void *v9;
  void *v10;
  char v11;
  void *v12;
  uint64_t v13;
  char v14;
  char v15;

  v4 = a3;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v4, "mode");
  v7 = objc_msgSend(v4, "device");

  v8 = objc_msgSend(v5, "isLowLightSupportedForMode:device:", v6, v7);
  -[CAMViewfinderViewController _controlDrawer](self, "_controlDrawer");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "visibleControlTypes");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "containsObject:", &unk_1EA3B03D0);

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "lowLightStatus");

  if (v13 == -1)
    v14 = v11;
  else
    v14 = 0;
  if ((unint64_t)(v13 - 1) >= 2)
    v15 = v14;
  else
    v15 = 1;
  return v8 & v15;
}

- (BOOL)_shouldShowVideoConfigurationIndicatorForGraphConfiguration:(id)a3
{
  uint64_t v3;
  void *v6;
  char v7;

  v3 = objc_msgSend(a3, "mode");
  if ((unint64_t)(v3 - 1) < 2 || v3 == 8)
    return 1;
  if (v3 != 7)
    return 0;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "cinematic4KSupported");

  return v7;
}

- (BOOL)_shouldHideAspectRatioControlForGraphConfiguration:(id)a3
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "mode");
  v6 = objc_msgSend(v3, "devicePosition");

  LOBYTE(v3) = objc_msgSend(v4, "isAspectRatioCropSupportedForMode:devicePosition:", v5, v6);
  return v3 ^ 1;
}

- (BOOL)_shouldShowSemanticStyleControlForGraphConfiguration:(id)a3
{
  void *v4;
  char v5;
  _BOOL8 v6;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "smartStylesSupported");

  if ((v5 & 1) != 0)
    LOBYTE(v6) = 0;
  else
    return (-[CAMViewfinderViewController _currentSemanticStyleSupport](self, "_currentSemanticStyleSupport") >> 3) & 1;
  return v6;
}

- (BOOL)_shouldShowSmartStyleControlForGraphConfiguration:(id)a3
{
  void *v4;
  int v5;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "smartStylesSupported");

  return v5
      && (-[CAMViewfinderViewController _currentSemanticStyleSupport](self, "_currentSemanticStyleSupport") & 9) != 0;
}

- (BOOL)_shouldShowSmartStyleIndicatorForGraphConfiguration:(id)a3
{
  void *v4;
  int v5;
  _BOOL8 v6;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "smartStylesSupported");

  if (v5)
    return (-[CAMViewfinderViewController _currentSemanticStyleSupport](self, "_currentSemanticStyleSupport") >> 3) & 1;
  else
    LOBYTE(v6) = 0;
  return v6;
}

- (BOOL)_shouldShowSmartStyleCategoryInstructionLabelForGraphConfiguration:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  char v7;

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "isSmartStylePickerVisible"))
  {
    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "smartStylePicker");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "expanded");

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

- (BOOL)_shouldShowRAWButtonForGraphConfiguration:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  char v7;
  BOOL v8;
  BOOL v9;

  v4 = a3;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "rawControlEnabled");

  LODWORD(v6) = objc_msgSend(v5, "isLinearDNGSupportedForMode:", objc_msgSend(v4, "mode"));
  v8 = -[CAMViewfinderViewController _shouldShowPhotoFormatButtonForGraphConfiguration:](self, "_shouldShowPhotoFormatButtonForGraphConfiguration:", v4);

  if ((_DWORD)v6)
    v9 = v7 & !v8;
  else
    v9 = 0;

  return v9;
}

- (BOOL)_shouldShowPhotoFormatButtonForGraphConfiguration:(id)a3
{
  id v4;
  void *v5;
  int v6;
  void *v7;
  BOOL v8;

  v4 = a3;
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "shouldUsePhotoFormatControlForMode:", objc_msgSend(v4, "mode"));

  if (v6)
  {
    -[CAMViewfinderViewController _enabledPhotoFormatsForMode:device:](self, "_enabledPhotoFormatsForMode:device:", objc_msgSend(v4, "mode"), objc_msgSend(v4, "device"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (unint64_t)objc_msgSend(v7, "count") > 1;

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

- (BOOL)_shouldShowProResButtonForGraphConfiguration:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  BOOL v11;

  v4 = a3;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend((id)v6, "isProResControlEnabled");

  LODWORD(v6) = objc_msgSend(v5, "isProResVideoSupportedForMode:", objc_msgSend(v4, "mode"));
  v8 = objc_msgSend(v4, "mode");
  v9 = objc_msgSend(v4, "devicePosition");

  v10 = v6 & !-[CAMViewfinderViewController _isSpatialVideoInVideoModeActiveForMode:devicePosition:](self, "_isSpatialVideoInVideoModeActiveForMode:devicePosition:", v8, v9);
  if (v7)
    v11 = v10;
  else
    v11 = 0;

  return v11;
}

- (BOOL)_shouldShowVideoStabilizationButtonForGraphConfiguration:(id)a3
{
  id v4;
  void *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a3;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isVideoStabilizationControlSupportedForMode:device:videoConfiguration:videoEncodingBehavior:trueVideoEnabled:prefersHDR10BitVideo:", objc_msgSend(v4, "mode"), objc_msgSend(v4, "device"), objc_msgSend(v4, "videoConfiguration"), objc_msgSend(v4, "videoEncodingBehavior"), objc_msgSend(v4, "trueVideoEnabled"), objc_msgSend(v4, "prefersHDR10BitVideo"));
  v7 = objc_msgSend(v4, "mode");
  v8 = objc_msgSend(v4, "devicePosition");

  LOBYTE(self) = v6 & !-[CAMViewfinderViewController _isSpatialVideoInVideoModeActiveForMode:devicePosition:](self, "_isSpatialVideoInVideoModeActiveForMode:devicePosition:", v7, v8);
  return (char)self;
}

- (BOOL)_shouldShowMaxRecordTimeInstructionLabelForGraphConfiguration:(id)a3
{
  id v4;
  BOOL v5;
  uint64_t v6;
  void *v7;
  char v8;
  BOOL v9;

  v4 = a3;
  v5 = -[CAMViewfinderViewController _shouldShowProResButtonForGraphConfiguration:](self, "_shouldShowProResButtonForGraphConfiguration:", v4);
  v6 = objc_msgSend(v4, "videoEncodingBehavior");

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isCapturingVideo");

  v9 = v6 == 2 && v5;
  return v9 & (v8 ^ 1);
}

- (BOOL)_shouldShowDeviceTooHotInstructionLabelForGraphConfiguration:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = a3;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v4, "mode");
  v7 = objc_msgSend(v4, "devicePosition");

  v8 = -[CAMViewfinderViewController _currentPhotoFormat](self, "_currentPhotoFormat");
  v10 = objc_msgSend(v5, "isDepthSuggestionSupportedForMode:devicePosition:photoFormat:", v6, v7, v8, v9);

  if (-[CAMViewfinderViewController _shallowDepthOfFieldStatus](self, "_shallowDepthOfFieldStatus") == 6)
    return v10;
  else
    return 0;
}

- (BOOL)_shouldShowFreeResourcesInstructionLabelForGraphConfiguration:(id)a3
{
  id v4;
  BOOL v5;
  _BOOL4 v6;
  uint64_t v7;
  void *v8;
  int v9;
  int v10;

  v4 = a3;
  if (-[CAMViewfinderViewController _wantsExternalStorageOutputEnabled](self, "_wantsExternalStorageOutputEnabled"))
  {
    v5 = 0;
  }
  else
  {
    v6 = -[CAMViewfinderViewController _shouldShowProResButtonForGraphConfiguration:](self, "_shouldShowProResButtonForGraphConfiguration:", v4);
    v7 = objc_msgSend(v4, "videoEncodingBehavior");
    -[CAMViewfinderViewController _captureController](self, "_captureController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "isCapturingVideo");

    v10 = (v9 | -[CAMViewfinderViewController _hasSignificantAmountOfRecordingTimeForCurrentConfiguration](self, "_hasSignificantAmountOfRecordingTimeForCurrentConfiguration")) ^ 1;
    if (v7 != 2)
      LOBYTE(v10) = 0;
    if (v6)
      v5 = v10;
    else
      v5 = 0;
  }

  return v5;
}

- (BOOL)_shouldShowSharedLibraryBadgeForGraphConfiguration:(id)a3
{
  BOOL v4;
  void *v5;
  char v6;
  void *v7;
  BOOL v8;

  v4 = -[CAMViewfinderViewController _shouldHideBadgesForGraphConfiguration:](self, "_shouldHideBadgesForGraphConfiguration:", a3);
  -[CAMViewfinderViewController _timerCache](self, "_timerCache");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isRunningTimerForKey:", &unk_1EA3B03E8);

  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v7, "sharedLibrarySwitchEnabled"))
    v8 = v6 & !v4;
  else
    v8 = 0;

  return v8;
}

- (BOOL)_shouldShowVideoStabilizationBadgeForGraphConfiguration:(id)a3
{
  id v4;
  BOOL v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  v4 = a3;
  v5 = -[CAMViewfinderViewController _shouldHideBadgesForGraphConfiguration:](self, "_shouldHideBadgesForGraphConfiguration:", v4);
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v4, "mode");
  v8 = objc_msgSend(v4, "device");
  v9 = objc_msgSend(v4, "videoConfiguration");
  v10 = objc_msgSend(v4, "videoEncodingBehavior");
  v11 = objc_msgSend(v4, "trueVideoEnabled");
  v12 = objc_msgSend(v4, "prefersHDR10BitVideo");

  LODWORD(v4) = objc_msgSend(v6, "isVideoStabilizationControlSupportedForMode:device:videoConfiguration:videoEncodingBehavior:trueVideoEnabled:prefersHDR10BitVideo:", v7, v8, v9, v10, v11, v12);
  v13 = -[CAMViewfinderViewController _isFlashingVideoStabilizationBadge](self, "_isFlashingVideoStabilizationBadge");
  return (_DWORD)v4 && v13 && !v5;
}

- (BOOL)_shouldShowImageAnalysisButtonForGraphConfiguration:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  char v7;
  BOOL v8;
  void *v9;
  uint64_t v10;
  void *v11;
  char v12;
  BOOL v13;
  BOOL v14;
  int64_t v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  BOOL v20;
  int v22;
  void *v23;

  v4 = a3;
  -[CAMViewfinderViewController _imageAnalysisButton](self, "_imageAnalysisButton");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = objc_msgSend(v6, "isImageAnalysisSupportedForMode:devicePosition:", objc_msgSend(v4, "mode"), objc_msgSend(v4, "devicePosition"));
  v7 = objc_msgSend(v5, "isContextMenuDisplayed");
  v8 = -[CAMViewfinderViewController _wantsVisualTextAnalysis](self, "_wantsVisualTextAnalysis");
  -[CAMViewfinderViewController _prominentObjectManager](self, "_prominentObjectManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "currentObjectType");
  objc_msgSend(v9, "currentMachineReadableCodeAction");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v12 = 0;
  if (!v8 && v10 != 1 && !v11 && (v7 & 1) == 0)
    v12 = objc_msgSend(v6, "isImageAnalysisButtonAlwaysVisible") ^ 1;
  v23 = v6;
  v13 = -[CAMViewfinderViewController _wantsZoomControlForGraphConfiguration:](self, "_wantsZoomControlForGraphConfiguration:", v4);
  v14 = -[CAMViewfinderViewController _wantsLightingControlForGraphConfiguration:](self, "_wantsLightingControlForGraphConfiguration:", v4);
  v15 = -[CAMViewfinderViewController _zoomControlLayoutPositionForGraphConfiguration:](self, "_zoomControlLayoutPositionForGraphConfiguration:", v4);
  v16 = -[CAMViewfinderViewController _lightingControlLayoutPositionForGraphConfiguration:](self, "_lightingControlLayoutPositionForGraphConfiguration:", v4) != 2|| !v14;
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "isSystemOverlayVisible");

  v19 = 0;
  if (v5 && ((v22 ^ 1) & 1) == 0 && (v12 & 1) == 0)
  {
    v20 = v15 == 2 && v13;
    v19 = 0;
    if (-[CAMViewfinderViewController _shouldShowPreviewOverlayButtonForGraphConfiguration:](self, "_shouldShowPreviewOverlayButtonForGraphConfiguration:", v4)&& !v20)
    {
      v19 = v16 & (v18 ^ 1);
    }
  }

  return v19;
}

- (BOOL)_shouldShowImageAnalysisInstructionLabel
{
  void *v4;
  char v5;

  if (-[CAMViewfinderViewController _wantsVisualTextSelectionInstructions](self, "_wantsVisualTextSelectionInstructions"))
  {
    return 1;
  }
  -[CAMViewfinderViewController _timerCache](self, "_timerCache");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isRunningTimerForKey:", &unk_1EA3B0388);

  return v5;
}

- (BOOL)_shouldShowSharedLibraryIndicatorForGraphConfiguration:(id)a3
{
  void *v4;
  char v5;

  if (-[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled", a3))
    return 0;
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "sharedLibrarySwitchEnabled");

  return v5;
}

- (BOOL)_shouldShowSharedLibraryImageWellIndicatorForGraphConfiguration:(id)a3
{
  return 0;
}

- (BOOL)_shouldShowPreviewOverlayButtonForGraphConfiguration:(id)a3
{
  id v4;
  void *v5;
  char v6;
  void *v7;
  double v8;
  double v9;
  int64_t v10;
  char v11;
  char v12;
  void *v13;
  char v14;
  int64_t v15;
  void *v16;
  char v17;
  char v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  char v22;
  char v23;

  v4 = a3;
  -[CAMViewfinderViewController _zoomControl](self, "_zoomControl");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isShowingZoomDial");

  -[CAMViewfinderViewController _zoomSlider](self, "_zoomSlider");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "alpha");
  v9 = v8;

  v10 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
  if (v9 > 0.0)
    v11 = 1;
  else
    v11 = v6;
  if (v10 == 1)
    v12 = 0;
  else
    v12 = v11;
  -[CAMViewfinderViewController _targetLightingControl](self, "_targetLightingControl");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "isExpanded");

  v15 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "isCapturingVideo");
  v18 = objc_msgSend(v16, "isCapturingBurst");
  v19 = -[CAMViewfinderViewController _isLowLightCaptureUIVisible](self, "_isLowLightCaptureUIVisible");
  v20 = -[CAMViewfinderViewController _shouldShowDescriptionOverlayViewForGraphConfiguration:](self, "_shouldShowDescriptionOverlayViewForGraphConfiguration:", v4);

  v21 = -[CAMViewfinderViewController _isCapturingFromTimer](self, "_isCapturingFromTimer");
  if (v15 == 1)
    v22 = 0;
  else
    v22 = v14;
  v23 = v17 | v19 | v18 | v20 | v12 | v21 | v22;

  return (v23 & 1) == 0;
}

- (BOOL)_shouldShowAutoMacroButtonForGraphConfiguration:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  void *v12;
  int v13;
  void *v14;
  int v15;
  void *v16;
  BOOL v17;
  _BOOL4 v18;

  v4 = a3;
  v5 = objc_msgSend(v4, "mode");
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isSuperWideAutoMacroSupportedForMode:device:videoConfiguration:videoStabilizationStrength:spatialVideoEnabled:", v5, objc_msgSend(v4, "device"), objc_msgSend(v4, "videoConfiguration"), objc_msgSend(v4, "videoStabilizationStrength"), objc_msgSend(v4, "enableStereoVideoCapture"));

  v8 = objc_msgSend(v4, "devicePosition");
  v9 = -[CAMViewfinderViewController _currentPhotoFormat](self, "_currentPhotoFormat");
  v11 = +[CAMConflictingControlConfiguration shouldDisableMacroForLockedPortraitForMode:devicePosition:photoFormat:optionalDepthEffectEnabled:](CAMConflictingControlConfiguration, "shouldDisableMacroForLockedPortraitForMode:devicePosition:photoFormat:optionalDepthEffectEnabled:", v5, v8, v9, v10, -[CAMViewfinderViewController _depthEffectEnabledFromSuggestion](self, "_depthEffectEnabledFromSuggestion"));
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "isSuperWideAutoMacroControlAllowed");

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "isAutoMacroSuggested");

  if (-[CAMViewfinderViewController _wantsVisualTextAnalysis](self, "_wantsVisualTextAnalysis"))
  {
    -[CAMViewfinderViewController _textInteractionInsert](self, "_textInteractionInsert");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = v16 != 0;

  }
  else
  {
    v17 = 0;
  }
  LOBYTE(v18) = 0;
  if ((v7 & v13 & v15) == 1 && !v17)
    v18 = -[CAMViewfinderViewController _shouldShowPreviewOverlayButtonForGraphConfiguration:](self, "_shouldShowPreviewOverlayButtonForGraphConfiguration:", v4)&& !v11;

  return v18;
}

- (BOOL)_shouldShowDepthSuggestionButtonForGraphConfiguration:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL4 v12;
  void *v13;
  BOOL v14;
  int64_t v15;
  BOOL v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  BOOL v21;
  void *v22;
  void *v24;

  v4 = a3;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v4, "mode");
  v7 = objc_msgSend(v4, "device") - 1;
  if (v7 > 0xA)
    v8 = 0;
  else
    v8 = qword_1DB9A53B8[v7];
  v9 = -[CAMViewfinderViewController _currentPhotoFormat](self, "_currentPhotoFormat");
  v11 = objc_msgSend(v5, "isDepthSuggestionSupportedForMode:devicePosition:photoFormat:", v6, v8, v9, v10);
  v12 = -[CAMViewfinderViewController _isDepthSuggestedOrEnabledForShallowDepthOfFieldStatus:](self, "_isDepthSuggestedOrEnabledForShallowDepthOfFieldStatus:", -[CAMViewfinderViewController _shallowDepthOfFieldStatus](self, "_shallowDepthOfFieldStatus"));
  v24 = v5;
  if (-[CAMViewfinderViewController _wantsVisualTextAnalysis](self, "_wantsVisualTextAnalysis"))
  {
    -[CAMViewfinderViewController _textInteractionInsert](self, "_textInteractionInsert");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = v13 != 0;

  }
  else
  {
    v14 = 0;
  }
  v15 = -[CAMViewfinderViewController _resolvedRAWMode](self, "_resolvedRAWMode");
  v16 = -[CAMViewfinderViewController _shouldDisableDepthSuggestionForNightModeForConfiguration:](self, "_shouldDisableDepthSuggestionForNightModeForConfiguration:", v4);
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "isSemanticStyleControlVisible");

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v19, "isSmartStylePickerVisible");

  v21 = 0;
  if ((v11 & v12) != 1 || v14 || v15 == 1 || v16 || (v18 & 1) != 0)
  {
    v22 = v24;
  }
  else
  {
    v22 = v24;
    if ((v20 & 1) == 0)
      v21 = -[CAMViewfinderViewController _shouldShowPreviewOverlayButtonForGraphConfiguration:](self, "_shouldShowPreviewOverlayButtonForGraphConfiguration:", v4);
  }

  return v21;
}

- (int64_t)_visibleSuggestionButtonForGraphConfiguration:(id)a3
{
  id v4;
  _BOOL4 v5;
  void *v6;
  _BOOL4 v7;
  int64_t v8;
  _BOOL4 v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;

  v4 = a3;
  v5 = -[CAMViewfinderViewController _isReconfiguring](self, "_isReconfiguring");
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = -[CAMViewfinderViewController _shouldShowAutoMacroButtonForGraphConfiguration:](self, "_shouldShowAutoMacroButtonForGraphConfiguration:", v4);
  if (v7 && v5)
    v7 = objc_msgSend(v6, "visibleSuggestionButtonType") == 1;
  v8 = -[CAMViewfinderViewController _resolvedMacroMode](self, "_resolvedMacroMode");
  v9 = -[CAMViewfinderViewController _shouldShowDepthSuggestionButtonForGraphConfiguration:](self, "_shouldShowDepthSuggestionButtonForGraphConfiguration:", v4);
  if (v9 && v5)
    v9 = objc_msgSend(v6, "visibleSuggestionButtonType") == 2;
  v10 = -[CAMViewfinderViewController _shouldShowSpatialCaptureControlForGraphConfiguration:](self, "_shouldShowSpatialCaptureControlForGraphConfiguration:", v4);
  if (v10 && v5)
    v10 = objc_msgSend(v6, "visibleSuggestionButtonType") == 3;
  v11 = v7;
  if (v9)
    v11 = 2;
  v12 = 3;
  if (!v10 || v7)
    v12 = v11;
  if (v7 && v8 == 1)
    v13 = 1;
  else
    v13 = v12;

  return v13;
}

- (BOOL)_shouldShowViewfinderLegibilityBackgroundsForGraphConfiguration:(id)a3
{
  id v4;
  void *v5;
  int64_t v6;
  unint64_t v7;
  unsigned int v8;

  v4 = a3;
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
  v7 = objc_msgSend(v4, "mode");

  if (v7 > 9)
  {
    LOBYTE(v8) = 1;
  }
  else if (((1 << v7) & 0x3D7) == 0
         || -[CAMViewfinderViewController _isCapturingFromTimer](self, "_isCapturingFromTimer")
         || (objc_msgSend(v5, "isCapturingBurst") & 1) != 0)
  {
    LOBYTE(v8) = 0;
  }
  else
  {
    v8 = (v6 == 0) & ~objc_msgSend(v5, "isCapturingVideo");
  }

  return v8;
}

- (BOOL)_shouldHideControlStatusIndicatorsForCommonStateForType:(unint64_t)a3
{
  void *v5;
  BOOL v6;
  _BOOL4 v7;
  int v8;
  BOOL v9;

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[CAMViewfinderViewController _trueVideoIsActive](self, "_trueVideoIsActive");
  v7 = -[CAMViewfinderViewController _isLowLightCaptureUIVisible](self, "_isLowLightCaptureUIVisible");
  v9 = (-[CAMViewfinderViewController _isTransitioningToCreativeCamera](self, "_isTransitioningToCreativeCamera")
     || -[CAMViewfinderViewController _isCapturingFromTimer](self, "_isCapturingFromTimer")
     || (objc_msgSend(v5, "isCapturingBurst") & 1) != 0
     || objc_msgSend(v5, "isCapturingVideo") && ((v8 = objc_msgSend(v5, "videoCapturePaused"), a3) || !v8)
     || (objc_msgSend(v5, "isCapturingTimelapse") & 1) != 0
     || (objc_msgSend(v5, "isCapturingPanorama") | v7) == 1)
    && !v6;

  return v9;
}

- (BOOL)_shouldHideBadgesForGraphConfiguration:(id)a3
{
  BOOL v4;

  v4 = -[CAMViewfinderViewController _wantsVisualTextAnalysis](self, "_wantsVisualTextAnalysis", a3);
  return -[CAMViewfinderViewController _currentHalfPressSpotlight](self, "_currentHalfPressSpotlight") || v4;
}

- (BOOL)_shouldShowIndicatorOfType:(unint64_t)a3 forGraphConfiguration:(id)a4
{
  id v6;
  BOOL v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  BOOL v11;
  void *v12;
  int64_t v13;
  BOOL v14;
  double v15;
  double v16;
  double v17;
  double v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  double v26;
  double v27;
  void *v28;
  int v29;
  void *v30;
  int v31;
  _BOOL4 v32;
  void *v33;
  int v34;
  int v35;
  void *v36;
  int v37;
  void *v38;
  unsigned __int8 v39;
  void *v40;
  char v41;

  v6 = a4;
  if (-[CAMViewfinderViewController _shouldHideControlStatusIndicatorsForCommonStateForType:](self, "_shouldHideControlStatusIndicatorsForCommonStateForType:", a3))
  {
    v7 = 0;
  }
  else
  {
    switch(a3)
    {
      case 0uLL:
        if (-[CAMViewfinderViewController _isFlashOrTorchSupportedForGraphConfiguration:](self, "_isFlashOrTorchSupportedForGraphConfiguration:", v6))
        {
          goto LABEL_52;
        }
        goto LABEL_54;
      case 1uLL:
        if (!-[CAMViewfinderViewController _isLivePhotoSupportedForGraphConfiguration:](self, "_isLivePhotoSupportedForGraphConfiguration:", v6))goto LABEL_54;
        goto LABEL_52;
      case 2uLL:
        if (!-[CAMViewfinderViewController _isHDRSupportedForGraphConfiguration:](self, "_isHDRSupportedForGraphConfiguration:", v6)|| !-[CAMViewfinderViewController _wantsHDRControlsVisible](self, "_wantsHDRControlsVisible")|| -[CAMViewfinderViewController _shouldShowRAWButtonForGraphConfiguration:](self, "_shouldShowRAWButtonForGraphConfiguration:", v6))
        {
          goto LABEL_54;
        }
        goto LABEL_52;
      case 3uLL:
        +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v12, "isTimerSupportedForMode:", objc_msgSend(v6, "mode")) & 1) == 0)
          goto LABEL_53;
        v13 = -[CAMViewfinderViewController _resolvedTimerDuration](self, "_resolvedTimerDuration");

        if (!v13)
          goto LABEL_54;
        goto LABEL_52;
      case 4uLL:
        v8 = objc_msgSend(v6, "mode");
        v9 = -[CAMViewfinderViewController _effectFilterTypeForMode:](self, "_effectFilterTypeForMode:", v8);
        v10 = +[CAMUserPreferences defaultFilterTypeForMode:](CAMUserPreferences, "defaultFilterTypeForMode:", v8);
        v11 = 0;
        if (!-[CAMViewfinderViewController _shouldUseFiltersForGraphConfiguration:](self, "_shouldUseFiltersForGraphConfiguration:", v6)|| v9 == v10)
        {
          goto LABEL_55;
        }
        goto LABEL_52;
      case 5uLL:
        v14 = -[CAMViewfinderViewController _shouldHideApertureButtonForGraphConfiguration:](self, "_shouldHideApertureButtonForGraphConfiguration:", v6);
        -[CAMViewfinderViewController _lastDefaultApertureValue](self, "_lastDefaultApertureValue");
        v16 = v15;
        -[CAMViewfinderViewController _portraitModeApertureValue](self, "_portraitModeApertureValue");
        v18 = vabdd_f64(v16, v17);
        +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = objc_msgSend(v6, "mode");
        v21 = objc_msgSend(v6, "devicePosition");
        v22 = -[CAMViewfinderViewController _currentPhotoFormat](self, "_currentPhotoFormat");
        v24 = objc_msgSend(v19, "isDepthSuggestionSupportedForMode:devicePosition:photoFormat:", v20, v21, v22, v23);

        v11 = 0;
        if (v18 < 0.0001)
          v25 = v24;
        else
          v25 = 0;
        if ((v25 & 1) != 0 || v14)
          goto LABEL_55;
        goto LABEL_52;
      case 6uLL:
        if (-[CAMViewfinderViewController _shouldHideIntensityButtonForGraphConfiguration:](self, "_shouldHideIntensityButtonForGraphConfiguration:", v6))
        {
          goto LABEL_54;
        }
        goto LABEL_52;
      case 7uLL:
        -[CAMViewfinderViewController _exposureBiasForMode:trueVideoEnabled:](self, "_exposureBiasForMode:trueVideoEnabled:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), objc_msgSend(v6, "trueVideoEnabled"));
        v27 = v26;
        +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = objc_msgSend(v28, "preserveExposure");

        -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = objc_msgSend(v30, "isExposureSliderVisible");

        v32 = -[CAMViewfinderViewController _isExposureBiasNonDefault:](self, "_isExposureBiasNonDefault:", v27);
        +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        v34 = objc_msgSend(v33, "isExposureSliderSupportedForMode:", objc_msgSend(v6, "mode"));

        if (v34 ^ 1 | v29)
          v35 = v34;
        else
          v35 = v31 | v32;
        if (v35 != 1)
          goto LABEL_54;
        goto LABEL_52;
      case 8uLL:
        if (!-[CAMViewfinderViewController _shouldShowVideoConfigurationIndicatorForGraphConfiguration:](self, "_shouldShowVideoConfigurationIndicatorForGraphConfiguration:", v6))goto LABEL_54;
        goto LABEL_52;
      case 9uLL:
        if (!-[CAMViewfinderViewController _shouldShowLowLightControlForGraphConfiguration:](self, "_shouldShowLowLightControlForGraphConfiguration:", v6))goto LABEL_54;
        goto LABEL_52;
      case 0xAuLL:
        -[CAMViewfinderViewController _semanticStyleForPreview](self, "_semanticStyleForPreview");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = v36;
        if (v36)
          v37 = objc_msgSend(v36, "isNeutral") ^ 1;
        else
          LOBYTE(v37) = 0;
        -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        v39 = objc_msgSend(v38, "isSemanticStyleControlVisible");

        if (-[CAMViewfinderViewController _shouldShowSemanticStyleControlForGraphConfiguration:](self, "_shouldShowSemanticStyleControlForGraphConfiguration:", v6))
        {

          if (((v37 | v39) & 1) != 0)
          {
LABEL_52:
            v11 = -[CAMViewfinderViewController _canShowIndicatorDuringTrueVideoRecordingForType:withGraphConfiguration:](self, "_canShowIndicatorDuringTrueVideoRecordingForType:withGraphConfiguration:", a3, v6);
            goto LABEL_55;
          }
        }
        else
        {
LABEL_53:

        }
LABEL_54:
        v11 = 0;
LABEL_55:
        -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        v41 = objc_msgSend(v40, "smartStyleControlsVisible");

        v7 = ((a3 == 11) | ~v41) & v11;
        break;
      case 0xBuLL:
        if (!-[CAMViewfinderViewController _shouldShowSmartStyleIndicatorForGraphConfiguration:](self, "_shouldShowSmartStyleIndicatorForGraphConfiguration:", v6))goto LABEL_54;
        goto LABEL_52;
      case 0xCuLL:
        if (!-[CAMViewfinderViewController _shouldShowRAWButtonForGraphConfiguration:](self, "_shouldShowRAWButtonForGraphConfiguration:", v6))goto LABEL_54;
        goto LABEL_52;
      case 0xDuLL:
        if (!-[CAMViewfinderViewController _shouldShowProResButtonForGraphConfiguration:](self, "_shouldShowProResButtonForGraphConfiguration:", v6))goto LABEL_54;
        goto LABEL_52;
      case 0xEuLL:
        if (!-[CAMViewfinderViewController _shouldShowSharedLibraryIndicatorForGraphConfiguration:](self, "_shouldShowSharedLibraryIndicatorForGraphConfiguration:", v6))goto LABEL_54;
        goto LABEL_52;
      case 0xFuLL:
        if (!-[CAMViewfinderViewController _shouldShowVideoStabilizationButtonForGraphConfiguration:](self, "_shouldShowVideoStabilizationButtonForGraphConfiguration:", v6))goto LABEL_54;
        goto LABEL_52;
      case 0x10uLL:
        if (!-[CAMViewfinderViewController _shouldShowPhotoFormatButtonForGraphConfiguration:](self, "_shouldShowPhotoFormatButtonForGraphConfiguration:", v6))goto LABEL_54;
        goto LABEL_52;
      default:
        goto LABEL_54;
    }
  }

  return v7;
}

- (BOOL)_canShowIndicatorDuringTrueVideoRecordingForType:(unint64_t)a3 withGraphConfiguration:(id)a4
{
  int v5;

  v5 = objc_msgSend(a4, "trueVideoEnabled") ^ 1;
  if (a3 == 8)
    return 1;
  else
    return v5;
}

- (BOOL)_shouldShowDrawerControlOfType:(int64_t)a3 forGraphConfiguration:(id)a4
{
  id v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;

  v6 = a4;
  switch(a3)
  {
    case 0:
      v7 = -[CAMViewfinderViewController _shouldHideFlashButtonForGraphConfiguration:](self, "_shouldHideFlashButtonForGraphConfiguration:", v6);
      goto LABEL_11;
    case 1:
      v7 = -[CAMViewfinderViewController _shouldHideLivePhotoButtonForGraphConfiguration:](self, "_shouldHideLivePhotoButtonForGraphConfiguration:", v6);
      goto LABEL_11;
    case 2:
      v7 = -[CAMViewfinderViewController _shouldHideAspectRatioControlForGraphConfiguration:](self, "_shouldHideAspectRatioControlForGraphConfiguration:", v6);
      goto LABEL_11;
    case 3:
      v7 = -[CAMViewfinderViewController _shouldHideTimerButtonForGraphConfiguration:](self, "_shouldHideTimerButtonForGraphConfiguration:", v6);
      goto LABEL_11;
    case 4:
      v7 = -[CAMViewfinderViewController _shouldHideFilterButtonForGraphConfiguration:](self, "_shouldHideFilterButtonForGraphConfiguration:", v6);
      goto LABEL_11;
    case 5:
      v7 = -[CAMViewfinderViewController _shouldHideHDRButtonForGraphConfiguration:](self, "_shouldHideHDRButtonForGraphConfiguration:", v6);
      goto LABEL_11;
    case 6:
      v7 = -[CAMViewfinderViewController _shouldHideApertureButtonForGraphConfiguration:](self, "_shouldHideApertureButtonForGraphConfiguration:", v6);
      goto LABEL_11;
    case 7:
      v7 = -[CAMViewfinderViewController _shouldHideIntensityButtonForGraphConfiguration:](self, "_shouldHideIntensityButtonForGraphConfiguration:", v6);
LABEL_11:
      v8 = !v7;
      break;
    case 8:
      v9 = -[CAMViewfinderViewController _shouldShowExposureButtonForGraphConfiguration:](self, "_shouldShowExposureButtonForGraphConfiguration:", v6);
      goto LABEL_20;
    case 9:
      v9 = -[CAMViewfinderViewController _shouldShowLowLightControlForGraphConfiguration:](self, "_shouldShowLowLightControlForGraphConfiguration:", v6);
      goto LABEL_20;
    case 10:
      v9 = -[CAMViewfinderViewController _shouldShowSemanticStyleControlForGraphConfiguration:](self, "_shouldShowSemanticStyleControlForGraphConfiguration:", v6);
      goto LABEL_20;
    case 11:
      v9 = -[CAMViewfinderViewController _shouldShowSmartStyleControlForGraphConfiguration:](self, "_shouldShowSmartStyleControlForGraphConfiguration:", v6);
      goto LABEL_20;
    case 12:
      v9 = -[CAMViewfinderViewController _shouldShowRAWButtonForGraphConfiguration:](self, "_shouldShowRAWButtonForGraphConfiguration:", v6);
      goto LABEL_20;
    case 13:
      v9 = -[CAMViewfinderViewController _shouldShowProResButtonForGraphConfiguration:](self, "_shouldShowProResButtonForGraphConfiguration:", v6);
      goto LABEL_20;
    case 14:
      v9 = -[CAMViewfinderViewController _shouldShowSharedLibraryButtonForGraphConfiguration:](self, "_shouldShowSharedLibraryButtonForGraphConfiguration:", v6);
      goto LABEL_20;
    case 15:
      v9 = -[CAMViewfinderViewController _shouldShowVideoStabilizationButtonForGraphConfiguration:](self, "_shouldShowVideoStabilizationButtonForGraphConfiguration:", v6);
LABEL_20:
      v8 = v9;
      break;
    default:
      v8 = 0;
      break;
  }

  return v8;
}

void __75__CAMViewfinderViewController__hideControlsForGraphConfiguration_animated___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;

  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideBottomBarForGraphConfiguration:", *(_QWORD *)(a1 + 40)))
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1576), "setAlpha:", 0.0);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideTopBarForGraphConfiguration:", *(_QWORD *)(a1 + 40)))
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1568), "setAlpha:", 0.0);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideFlashButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)))objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1584), "setAlpha:", 0.0);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideHDRButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)))
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1600), "setAlpha:", 0.0);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideElapsedTimeViewForGraphConfiguration:orientation:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48)))objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1712), "setAlpha:", 0.0);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideLivePhotoButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)))objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1624), "setAlpha:", 0.0);
  if ((objc_msgSend(*(id *)(a1 + 32), "_shouldShowSharedLibraryButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)) & 1) == 0)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1632), "setAlpha:", 0.0);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHidePortraitModeInstructionLabelForGraphConfiguration:", *(_QWORD *)(a1 + 40)))objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1744), "setAlpha:", 0.0);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideQRCodeInstructionLabelForGraphConfiguration:", *(_QWORD *)(a1 + 40)))objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1752), "setAlpha:", 0.0);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideFlipButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)))
  {
    objc_msgSend(*(id *)(a1 + 32), "viewfinderView");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "flipButton");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setAlpha:", 0.0);

    objc_msgSend(*(id *)(a1 + 32), "_bottomBar");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "flipButton");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setAlpha:", 0.0);

  }
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideModeDialForGraphConfiguration:", *(_QWORD *)(a1 + 40)))
  {
    objc_msgSend(*(id *)(a1 + 32), "_bottomBar");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "modeDial");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setAlpha:", 0.0);

  }
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideImageWellForGraphConfiguration:", *(_QWORD *)(a1 + 40)))
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1816), "setAlpha:", 0.0);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideReviewButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)))objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1664), "setAlpha:", 0.0);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideCreativeCameraButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)))objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1672), "setAlpha:", 0.0);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHidePhotosButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)))objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1680), "setAlpha:", 0.0);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideDoneButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)))
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1688), "setAlpha:", 0.0);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideShutterButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)))objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1784), "setAlpha:", 0.0);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideStillDuringVideoButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)))objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1800), "setAlpha:", 0.0);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideFilterButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)))objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1824), "setAlpha:", 0.0);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideApertureButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)))objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1832), "setAlpha:", 0.0);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideIntensityButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)))objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1840), "setAlpha:", 0.0);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideUtilityBarForGraphConfiguration:", *(_QWORD *)(a1 + 40)))
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1912), "setAlpha:", 0.0);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideFilterNameBadgeForGraphConfiguration:", *(_QWORD *)(a1 + 40)))objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1696), "setAlpha:", 0.0);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHidePanoramaViewForGraphConfiguration:", *(_QWORD *)(a1 + 40)))
  {
    objc_msgSend(*(id *)(a1 + 32), "_panoramaViewController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "view");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setAlpha:", 0.0);

  }
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideZoomSliderForGraphConfiguration:", *(_QWORD *)(a1 + 40)))
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1864), "setAlpha:", 0.0);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideZoomControlForGraphConfiguration:", *(_QWORD *)(a1 + 40)))
  {
    objc_msgSend(*(id *)(a1 + 32), "viewfinderView");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "zoomControl");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setAlpha:", 0.0);

  }
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideLightingControlForGraphConfiguration:", *(_QWORD *)(a1 + 40)))objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1944), "setAlpha:", 0.0);
  if (*(_BYTE *)(a1 + 56) && *(_BYTE *)(a1 + 57))
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1952), "setAlpha:", 0.0);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideGridViewForGraphConfiguration:", *(_QWORD *)(a1 + 40)))
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1880), "setAlpha:", 0.0);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideLevelViewForGraphConfiguration:", *(_QWORD *)(a1 + 40)))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1888), "setAlpha:", 0.0);
    objc_msgSend(*(id *)(a1 + 32), "_updateLevelMotionTracking");
  }
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideHorizonLevelViewForGraphConfiguration:", *(_QWORD *)(a1 + 40)))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1896), "setAlpha:", 0.0);
    objc_msgSend(*(id *)(a1 + 32), "_updateLevelMotionTracking");
  }
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideVideoConfigurationStatusIndicatorForGraphConfiguration:", *(_QWORD *)(a1 + 40)))objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1960), "setAlpha:", 0.0);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideTimerButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)))objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1616), "setAlpha:", 0.0);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideTimerIndicatorViewForGraphConfiguration:", *(_QWORD *)(a1 + 40)))objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1856), "setAlpha:", 0.0);
  if ((objc_msgSend(*(id *)(a1 + 32), "_shouldShowImageAnalysisButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)) & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "_bottomBar");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "imageAnalysisButton");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "setAlpha:", 0.0);

  }
  if ((objc_msgSend(*(id *)(a1 + 32), "_shouldShowImageAnalysisInstructionLabel") & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "_imageAnalysisInstructionLabel");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "setAlpha:", 0.0);

  }
  if ((objc_msgSend(*(id *)(a1 + 32), "_shouldShowExternalStorageButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)) & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "_fullscreenViewfinder");
    v15 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "setExternalStorageButtonVisible:", 0);

  }
}

void __75__CAMViewfinderViewController__showControlsForGraphConfiguration_animated___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;

  if ((objc_msgSend(*(id *)(a1 + 32), "_shouldHideBottomBarForGraphConfiguration:", *(_QWORD *)(a1 + 40)) & 1) == 0)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1576), "setAlpha:", 1.0);
  if ((objc_msgSend(*(id *)(a1 + 32), "_shouldHideTopBarForGraphConfiguration:", *(_QWORD *)(a1 + 40)) & 1) == 0)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1568), "setAlpha:", 1.0);
  if ((objc_msgSend(*(id *)(a1 + 32), "_shouldHideFlashButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)) & 1) == 0)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1584), "setAlpha:", 1.0);
  if ((objc_msgSend(*(id *)(a1 + 32), "_shouldHideHDRButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)) & 1) == 0)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1600), "setAlpha:", 1.0);
  if ((objc_msgSend(*(id *)(a1 + 32), "_shouldHideElapsedTimeViewForGraphConfiguration:orientation:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48)) & 1) == 0)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1712), "setAlpha:", 1.0);
  if ((objc_msgSend(*(id *)(a1 + 32), "_shouldHideLivePhotoButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)) & 1) == 0)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1624), "setAlpha:", 1.0);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldShowSharedLibraryButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)))objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1632), "setAlpha:", 1.0);
  if ((objc_msgSend(*(id *)(a1 + 32), "_shouldHidePortraitModeInstructionLabelForGraphConfiguration:", *(_QWORD *)(a1 + 40)) & 1) == 0)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1744), "setAlpha:", 1.0);
  if ((objc_msgSend(*(id *)(a1 + 32), "_shouldHideQRCodeInstructionLabelForGraphConfiguration:", *(_QWORD *)(a1 + 40)) & 1) == 0)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1752), "setAlpha:", 1.0);
  if ((objc_msgSend(*(id *)(a1 + 32), "_shouldHideFlipButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)) & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "viewfinderView");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "flipButton");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setAlpha:", 1.0);

    objc_msgSend(*(id *)(a1 + 32), "_bottomBar");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "flipButton");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setAlpha:", 1.0);

  }
  if ((objc_msgSend(*(id *)(a1 + 32), "_shouldHideModeDialForGraphConfiguration:", *(_QWORD *)(a1 + 40)) & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "_bottomBar");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "modeDial");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setAlpha:", 1.0);

  }
  if ((objc_msgSend(*(id *)(a1 + 32), "_shouldHideImageWellForGraphConfiguration:", *(_QWORD *)(a1 + 40)) & 1) == 0)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1816), "setAlpha:", 1.0);
  if ((objc_msgSend(*(id *)(a1 + 32), "_shouldHideReviewButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)) & 1) == 0)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1664), "setAlpha:", 1.0);
  if ((objc_msgSend(*(id *)(a1 + 32), "_shouldHideCreativeCameraButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)) & 1) == 0)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1672), "setAlpha:", 1.0);
  if ((objc_msgSend(*(id *)(a1 + 32), "_shouldHidePhotosButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)) & 1) == 0)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1680), "setAlpha:", 1.0);
  if ((objc_msgSend(*(id *)(a1 + 32), "_shouldHideDoneButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)) & 1) == 0)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1688), "setAlpha:", 1.0);
  if ((objc_msgSend(*(id *)(a1 + 32), "_shouldHideShutterButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)) & 1) == 0)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1784), "setAlpha:", 1.0);
  if ((objc_msgSend(*(id *)(a1 + 32), "_shouldHideStillDuringVideoButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)) & 1) == 0)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1800), "setAlpha:", 1.0);
  if ((objc_msgSend(*(id *)(a1 + 32), "_shouldHideFilterButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)) & 1) == 0)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1824), "setAlpha:", 1.0);
  if ((objc_msgSend(*(id *)(a1 + 32), "_shouldHideApertureButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)) & 1) == 0)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1832), "setAlpha:", 1.0);
  if ((objc_msgSend(*(id *)(a1 + 32), "_shouldHideIntensityButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)) & 1) == 0)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1840), "setAlpha:", 1.0);
  if ((objc_msgSend(*(id *)(a1 + 32), "_shouldHideUtilityBarForGraphConfiguration:", *(_QWORD *)(a1 + 40)) & 1) == 0)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1912), "setAlpha:", 1.0);
  if ((objc_msgSend(*(id *)(a1 + 32), "_shouldHideFilterNameBadgeForGraphConfiguration:", *(_QWORD *)(a1 + 40)) & 1) == 0)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1696), "setAlpha:", 1.0);
  if ((objc_msgSend(*(id *)(a1 + 32), "_shouldHidePanoramaViewForGraphConfiguration:", *(_QWORD *)(a1 + 40)) & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "_panoramaViewController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "view");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setAlpha:", 1.0);

  }
  if ((objc_msgSend(*(id *)(a1 + 32), "_shouldHideZoomSliderForGraphConfiguration:", *(_QWORD *)(a1 + 40)) & 1) == 0)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1864), "setAlpha:", 1.0);
  if ((objc_msgSend(*(id *)(a1 + 32), "_shouldHideZoomControlForGraphConfiguration:", *(_QWORD *)(a1 + 40)) & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "viewfinderView");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "zoomControl");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setAlpha:", 1.0);

  }
  if ((objc_msgSend(*(id *)(a1 + 32), "_shouldHideLightingControlForGraphConfiguration:", *(_QWORD *)(a1 + 40)) & 1) == 0)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1944), "setAlpha:", 1.0);
  if (!*(_BYTE *)(a1 + 56) && *(_BYTE *)(a1 + 57))
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1952), "setAlpha:", 1.0);
  if ((objc_msgSend(*(id *)(a1 + 32), "_shouldHideGridViewForGraphConfiguration:", *(_QWORD *)(a1 + 40)) & 1) == 0)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1880), "setAlpha:", 1.0);
  if ((objc_msgSend(*(id *)(a1 + 32), "_shouldHideLevelViewForGraphConfiguration:", *(_QWORD *)(a1 + 40)) & 1) == 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1888), "setAlpha:", 1.0);
    objc_msgSend(*(id *)(a1 + 32), "_updateLevelMotionTracking");
  }
  if ((objc_msgSend(*(id *)(a1 + 32), "_shouldHideHorizonLevelViewForGraphConfiguration:", *(_QWORD *)(a1 + 40)) & 1) == 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1896), "setAlpha:", 1.0);
    objc_msgSend(*(id *)(a1 + 32), "_updateLevelMotionTracking");
  }
  if ((objc_msgSend(*(id *)(a1 + 32), "_shouldHideVideoConfigurationStatusIndicatorForGraphConfiguration:", *(_QWORD *)(a1 + 40)) & 1) == 0)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1960), "setAlpha:", 1.0);
  if ((objc_msgSend(*(id *)(a1 + 32), "_shouldHideTimerButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)) & 1) == 0)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1616), "setAlpha:", 1.0);
  if ((objc_msgSend(*(id *)(a1 + 32), "_shouldHideTimerIndicatorViewForGraphConfiguration:", *(_QWORD *)(a1 + 40)) & 1) == 0)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1856), "setAlpha:", 1.0);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldShowImageAnalysisButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)))
  {
    objc_msgSend(*(id *)(a1 + 32), "_bottomBar");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "imageAnalysisButton");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "setAlpha:", 1.0);

  }
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldShowImageAnalysisInstructionLabel"))
  {
    objc_msgSend(*(id *)(a1 + 32), "_imageAnalysisInstructionLabel");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "setAlpha:", 1.0);

  }
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldShowExternalStorageButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)))
  {
    objc_msgSend(*(id *)(a1 + 32), "_fullscreenViewfinder");
    v15 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "setExternalStorageButtonVisible:animated:", 1, *(unsigned __int8 *)(a1 + 58));

  }
}

void __63__CAMViewfinderViewController_updateControlVisibilityAnimated___block_invoke(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  void *v30;
  void *v31;
  double v32;
  double v33;
  void *v34;
  void *v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  void *v44;
  void *v45;
  double v46;
  void *v47;
  uint64_t v48;
  id v49;

  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideBottomBarForGraphConfiguration:", *(_QWORD *)(a1 + 40)))
    v2 = 0.0;
  else
    v2 = 1.0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1576), "setAlpha:", v2);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideTopBarForGraphConfiguration:", *(_QWORD *)(a1 + 40)))
    v3 = 0.0;
  else
    v3 = 1.0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1568), "setAlpha:", v3);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideFlashButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)))v4 = 0.0;
  else
    v4 = 1.0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1584), "setAlpha:", v4);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideHDRButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)))
    v5 = 0.0;
  else
    v5 = 1.0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1600), "setAlpha:", v5);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideElapsedTimeViewForGraphConfiguration:orientation:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48)))v6 = 0.0;
  else
    v6 = 1.0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1712), "setAlpha:", v6);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideLivePhotoButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)))v7 = 0.0;
  else
    v7 = 1.0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1624), "setAlpha:", v7);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldShowSharedLibraryButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)))v8 = 1.0;
  else
    v8 = 0.0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1632), "setAlpha:", v8);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideFlipButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)))
    v9 = 0.0;
  else
    v9 = 1.0;
  objc_msgSend(*(id *)(a1 + 32), "viewfinderView");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "flipButton");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "setAlpha:", v9);

  objc_msgSend(*(id *)(a1 + 32), "_bottomBar");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "flipButton");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setAlpha:", v9);

  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideModeDialForGraphConfiguration:", *(_QWORD *)(a1 + 40)))
    v14 = 0.0;
  else
    v14 = 1.0;
  objc_msgSend(*(id *)(a1 + 32), "_bottomBar");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "modeDial");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "setAlpha:", v14);

  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideImageWellForGraphConfiguration:", *(_QWORD *)(a1 + 40)))
    v17 = 0.0;
  else
    v17 = 1.0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1816), "setAlpha:", v17);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideReviewButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)))v18 = 0.0;
  else
    v18 = 1.0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1664), "setAlpha:", v18);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideCreativeCameraButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)))v19 = 0.0;
  else
    v19 = 1.0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1672), "setAlpha:", v19);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHidePhotosButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)))v20 = 0.0;
  else
    v20 = 1.0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1680), "setAlpha:", v20);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideDoneButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)))
    v21 = 0.0;
  else
    v21 = 1.0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1688), "setAlpha:", v21);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideShutterButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)))v22 = 0.0;
  else
    v22 = 1.0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1784), "setAlpha:", v22);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideStillDuringVideoButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)))v23 = 0.0;
  else
    v23 = 1.0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1800), "setAlpha:", v23);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideFilterButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)))v24 = 0.0;
  else
    v24 = 1.0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1824), "setAlpha:", v24);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideApertureButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)))v25 = 0.0;
  else
    v25 = 1.0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1832), "setAlpha:", v25);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideIntensityButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)))v26 = 0.0;
  else
    v26 = 1.0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1840), "setAlpha:", v26);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideUtilityBarForGraphConfiguration:", *(_QWORD *)(a1 + 40)))
    v27 = 0.0;
  else
    v27 = 1.0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1912), "setAlpha:", v27);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideFilterNameBadgeForGraphConfiguration:", *(_QWORD *)(a1 + 40)))v28 = 0.0;
  else
    v28 = 1.0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1696), "setAlpha:", v28);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHidePanoramaViewForGraphConfiguration:", *(_QWORD *)(a1 + 40)))v29 = 0.0;
  else
    v29 = 1.0;
  objc_msgSend(*(id *)(a1 + 32), "_panoramaViewController");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "view");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "setAlpha:", v29);

  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideZoomSliderForGraphConfiguration:", *(_QWORD *)(a1 + 40)))
    v32 = 0.0;
  else
    v32 = 1.0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1864), "setAlpha:", v32);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideZoomControlForGraphConfiguration:", *(_QWORD *)(a1 + 40)))v33 = 0.0;
  else
    v33 = 1.0;
  objc_msgSend(*(id *)(a1 + 32), "viewfinderView");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v34, "zoomControl");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "setAlpha:", v33);

  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideLightingControlForGraphConfiguration:", *(_QWORD *)(a1 + 40)))v36 = 0.0;
  else
    v36 = 1.0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1944), "setAlpha:", v36);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideGridViewForGraphConfiguration:", *(_QWORD *)(a1 + 40)))
    v37 = 0.0;
  else
    v37 = 1.0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1880), "setAlpha:", v37);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideLevelViewForGraphConfiguration:", *(_QWORD *)(a1 + 40)))
    v38 = 0.0;
  else
    v38 = 1.0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1888), "setAlpha:", v38);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideHorizonLevelViewForGraphConfiguration:", *(_QWORD *)(a1 + 40)))v39 = 0.0;
  else
    v39 = 1.0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1896), "setAlpha:", v39);
  objc_msgSend(*(id *)(a1 + 32), "_updateLevelMotionTracking");
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideVideoConfigurationStatusIndicatorForGraphConfiguration:", *(_QWORD *)(a1 + 40)))v40 = 0.0;
  else
    v40 = 1.0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1960), "setAlpha:", v40);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideTimerButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)))v41 = 0.0;
  else
    v41 = 1.0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1616), "setAlpha:", v41);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldHideTimerIndicatorViewForGraphConfiguration:", *(_QWORD *)(a1 + 40)))v42 = 0.0;
  else
    v42 = 1.0;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1856), "setAlpha:", v42);
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldShowImageAnalysisButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40)))v43 = 1.0;
  else
    v43 = 0.0;
  objc_msgSend(*(id *)(a1 + 32), "_bottomBar");
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v44, "imageAnalysisButton");
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v45, "setAlpha:", v43);

  if (objc_msgSend(*(id *)(a1 + 32), "_shouldShowImageAnalysisInstructionLabel"))
    v46 = 1.0;
  else
    v46 = 0.0;
  objc_msgSend(*(id *)(a1 + 32), "_imageAnalysisInstructionLabel");
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v47, "setAlpha:", v46);

  v48 = objc_msgSend(*(id *)(a1 + 32), "_shouldShowExternalStorageButtonForGraphConfiguration:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "_fullscreenViewfinder");
  v49 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v49, "setExternalStorageButtonVisible:animated:", v48, *(unsigned __int8 *)(a1 + 56));

}

- (void)_updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:(id)a3 animated:(BOOL)a4
{
  _BOOL8 v4;
  void *v6;
  _BOOL4 v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL4 v12;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  _BOOL4 v20;
  uint64_t v21;
  _BOOL4 v22;
  uint64_t v23;
  _BOOL4 v24;
  uint64_t v25;
  _BOOL4 v26;
  uint64_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  int64_t v35;
  uint64_t v36;
  int64_t v37;
  int64_t v38;
  id v39;

  v4 = a4;
  v39 = a3;
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = -[CAMViewfinderViewController _isReconfiguring](self, "_isReconfiguring");
  -[CAMViewfinderViewController _motionController](self, "_motionController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "captureOrientation");

  v10 = -[CAMViewfinderViewController _shouldAllowControlDrawerForGraphConfiguration:](self, "_shouldAllowControlDrawerForGraphConfiguration:", v39);
  v11 = !v7;
  if ((_DWORD)v10 && v7)
    v10 = objc_msgSend(v6, "isControlDrawerAllowed");
  v12 = -[CAMViewfinderViewController _shouldHideModeDialForGraphConfiguration:](self, "_shouldHideModeDialForGraphConfiguration:", v39);
  if (((v12 | v11) & 1) != 0)
    v13 = !v12;
  else
    v13 = objc_msgSend(v6, "isModeUIAllowed");
  objc_msgSend(v6, "setControlDrawerAllowed:modeUIAllowed:animated:", v10, v13, v4);
  v14 = -[CAMViewfinderViewController _shouldHideShutterButtonForGraphConfiguration:](self, "_shouldHideShutterButtonForGraphConfiguration:", v39);
  if (((v14 | v11) & 1) != 0)
    v15 = !v14;
  else
    v15 = objc_msgSend(v6, "isShutterButtonVisible");
  objc_msgSend(v6, "setShutterControlVisible:animated:", v15, v4);
  v16 = -[CAMViewfinderViewController _shouldAllowControlDrawerToggleForGraphConfiguration:orientation:](self, "_shouldAllowControlDrawerToggleForGraphConfiguration:orientation:", v39, v9);
  if ((v16 & v7) == 1)
  {
    objc_msgSend(v6, "controlStatusBar");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v17, "isDirectionIndicatorVisible");

  }
  objc_msgSend(v6, "controlStatusBar");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "setDirectionIndicatorVisible:animated:", v16, v4);

  v19 = -[CAMViewfinderViewController _shouldShowViewfinderLegibilityBackgroundsForGraphConfiguration:](self, "_shouldShowViewfinderLegibilityBackgroundsForGraphConfiguration:", v39);
  if ((v19 & v7) == 1)
    v19 = objc_msgSend(v6, "isLegibilityBackgroundsVisible", v19);
  objc_msgSend(v6, "setLegibilityBackgroundsVisible:animated:", v19, v4);
  v20 = -[CAMViewfinderViewController _shouldHideElapsedTimeViewForGraphConfiguration:orientation:](self, "_shouldHideElapsedTimeViewForGraphConfiguration:orientation:", v39, v9);
  if (((v20 | v11) & 1) != 0)
    v21 = !v20;
  else
    v21 = objc_msgSend(v6, "isElapsedTimeViewVisible");
  objc_msgSend(v6, "setElapsedTimeViewVisible:animated:", v21, v4);
  v22 = -[CAMViewfinderViewController _shouldHideTimerIndicatorViewForGraphConfiguration:](self, "_shouldHideTimerIndicatorViewForGraphConfiguration:", v39);
  if (((v22 | v11) & 1) != 0)
    v23 = !v22;
  else
    v23 = objc_msgSend(v6, "isTimerIndicatorVisible");
  objc_msgSend(v6, "setTimerIndicatorVisible:animated:", v23, v4);
  v24 = -[CAMViewfinderViewController _shouldHideLightingControlForGraphConfiguration:](self, "_shouldHideLightingControlForGraphConfiguration:", v39);
  if (((v24 | v11) & 1) != 0)
    v25 = !v24;
  else
    v25 = objc_msgSend(v6, "isPortraitControlsAllowed");
  objc_msgSend(v6, "setPortraitControlsAllowed:animated:", v25, v4);
  v26 = -[CAMViewfinderViewController _shouldHideZoomControlForGraphConfiguration:](self, "_shouldHideZoomControlForGraphConfiguration:", v39);
  if (((v26 | v11) & 1) != 0)
    v27 = !v26;
  else
    v27 = objc_msgSend(v6, "isZoomControlVisible");
  objc_msgSend(v6, "setZoomControlVisible:animated:", v27, v4);
  v28 = -[CAMViewfinderViewController _shouldHideFlipButtonForGraphConfiguration:](self, "_shouldHideFlipButtonForGraphConfiguration:", v39);
  if (((v28 | v11) & 1) != 0)
    v29 = !v28;
  else
    v29 = objc_msgSend(v6, "isFlipButtonVisible");
  objc_msgSend(v6, "setFlipButtonVisible:animated:", v29, v4);
  v30 = -[CAMViewfinderViewController _shouldShowImageAnalysisButtonForGraphConfiguration:](self, "_shouldShowImageAnalysisButtonForGraphConfiguration:", v39);
  if ((v30 & v7) == 1)
    v30 = objc_msgSend(v6, "isImageAnalysisButtonVisible", v30);
  objc_msgSend(v6, "setImageAnalysisButtonVisible:animated:", v30, v4);
  v31 = -[CAMViewfinderViewController _shouldShowPhotoVideoModeSwitchForGraphConfiguration:](self, "_shouldShowPhotoVideoModeSwitchForGraphConfiguration:", v39);
  if ((v31 & v7) == 1)
    v31 = objc_msgSend(v6, "isModeSwitchVisible", v31);
  objc_msgSend(v6, "setPhotoVideoModeSwitchVisible:animated:", v31, v4);
  v32 = -[CAMViewfinderViewController _shouldShowSharedLibraryImageWellIndicatorForGraphConfiguration:](self, "_shouldShowSharedLibraryImageWellIndicatorForGraphConfiguration:", v39);
  if ((v32 & v7) == 1)
    v32 = objc_msgSend(v6, "isSharedLibraryImageWellIndicatorVisible", v32);
  objc_msgSend(v6, "setSharedLibraryImageWellIndicatorVisible:animated:", v32, v4);
  -[CAMViewfinderViewController _updateSharedLibraryImageWellIndicatorForCurrentState](self, "_updateSharedLibraryImageWellIndicatorForCurrentState");
  objc_msgSend(v6, "setVisiblePreviewSuggestionButton:animated:", -[CAMViewfinderViewController _visibleSuggestionButtonForGraphConfiguration:](self, "_visibleSuggestionButtonForGraphConfiguration:", v39), v4);
  -[CAMViewfinderViewController _updateCurrentPreviewFiltersOnCaptureController](self, "_updateCurrentPreviewFiltersOnCaptureController");
  v33 = objc_msgSend(v6, "visibleInstructionLabel");
  v34 = -[CAMViewfinderViewController _primaryInstructionLabelForGraphConfiguration:](self, "_primaryInstructionLabelForGraphConfiguration:", v39);
  if (v7 && v34 != v33)
    v35 = 0;
  else
    v35 = v34;
  v36 = objc_msgSend(v6, "visibleSecondaryInstructionLabel");
  v37 = -[CAMViewfinderViewController _secondaryInstructionLabelForGraphConfiguration:](self, "_secondaryInstructionLabelForGraphConfiguration:", v39);
  if (v7 && v37 != v36)
    v38 = 0;
  else
    v38 = v37;
  objc_msgSend(v6, "setVisibleInstructionLabel:visibleSecondaryInstructionLabel:animated:", v35, v38, v4);
  -[CAMViewfinderViewController _updateControlDrawerContentsVisibilityForGraphConfiguration:animated:](self, "_updateControlDrawerContentsVisibilityForGraphConfiguration:animated:", v39, v4);
  -[CAMViewfinderViewController _updateControlStatusBarContentsVisibilityForGraphConfiguration:animated:](self, "_updateControlStatusBarContentsVisibilityForGraphConfiguration:animated:", v39, v4);

}

- (void)_updateControlsRelatedToDepthSuggestionAnimated:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  id v6;

  v3 = a3;
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setVisiblePreviewSuggestionButton:animated:", -[CAMViewfinderViewController _visibleSuggestionButtonForGraphConfiguration:](self, "_visibleSuggestionButtonForGraphConfiguration:", v6), v3);
  -[CAMViewfinderViewController _updateCurrentPreviewFiltersOnCaptureController](self, "_updateCurrentPreviewFiltersOnCaptureController");
  -[CAMViewfinderViewController _updateControlDrawerContentsVisibilityForGraphConfiguration:animated:](self, "_updateControlDrawerContentsVisibilityForGraphConfiguration:animated:", v6, v3);
  -[CAMViewfinderViewController _updateControlStatusBarContentsVisibilityForGraphConfiguration:animated:](self, "_updateControlStatusBarContentsVisibilityForGraphConfiguration:animated:", v6, v3);

}

- (id)_allControlDrawerTypes
{
  return &unk_1EA3B3050;
}

- (void)_updateControlDrawerContentsVisibilityAnimated:(BOOL)a3
{
  _BOOL8 v3;
  id v5;

  v3 = a3;
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updateControlDrawerContentsVisibilityForGraphConfiguration:animated:](self, "_updateControlDrawerContentsVisibilityForGraphConfiguration:animated:", v5, v3);

}

- (void)_updateControlDrawerContentsVisibilityForGraphConfiguration:(id)a3 animated:(BOOL)a4
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  _BOOL4 v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v18 = a4;
  v24 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  -[CAMViewfinderViewController _controlDrawer](self, "_controlDrawer");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)MEMORY[0x1E0C99E60];
  objc_msgSend(v6, "visibleControlTypes");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setWithArray:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = -[CAMViewfinderViewController _isReconfiguring](self, "_isReconfiguring");
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  -[CAMViewfinderViewController _controlTypesForGraphConfiguration:](self, "_controlTypesForGraphConfiguration:", v5);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v20;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v20 != v15)
          objc_enumerationMutation(v12);
        v17 = *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * v16);
        if (!v11 || objc_msgSend(v9, "containsObject:", *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * v16)))
          objc_msgSend(v10, "addObject:", v17);
        ++v16;
      }
      while (v14 != v16);
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v14);
  }

  objc_msgSend(v6, "setVisibleControlTypes:animated:", v10, v18);
}

- (id)_controlTypesForGraphConfiguration:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  -[CAMViewfinderViewController _allControlDrawerTypes](self, "_allControlDrawerTypes", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v14 != v9)
          objc_enumerationMutation(v6);
        v11 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
        if (-[CAMViewfinderViewController _shouldShowDrawerControlOfType:forGraphConfiguration:](self, "_shouldShowDrawerControlOfType:forGraphConfiguration:", objc_msgSend(v11, "integerValue"), v4))
        {
          objc_msgSend(v5, "addObject:", v11);
        }
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v8);
  }

  return v5;
}

- (int64_t)_primaryInstructionLabelForGraphConfiguration:(id)a3
{
  id v4;
  int64_t v5;

  v4 = a3;
  if (-[CAMViewfinderViewController _shouldShowImageAnalysisInstructionLabel](self, "_shouldShowImageAnalysisInstructionLabel"))
  {
    v5 = 5;
  }
  else if (-[CAMViewfinderViewController _isLowLightCaptureUIVisible](self, "_isLowLightCaptureUIVisible"))
  {
    v5 = 3;
  }
  else if (-[CAMViewfinderViewController _shouldHidePortraitModeInstructionLabelForGraphConfiguration:](self, "_shouldHidePortraitModeInstructionLabelForGraphConfiguration:", v4))
  {
    if (-[CAMViewfinderViewController _shouldShowFlashCompromisedInstructionsForGraphConfiguration:](self, "_shouldShowFlashCompromisedInstructionsForGraphConfiguration:", v4))
    {
      v5 = 4;
    }
    else if (-[CAMViewfinderViewController _shouldHideQRCodeInstructionLabelForGraphConfiguration:](self, "_shouldHideQRCodeInstructionLabelForGraphConfiguration:", v4))
    {
      if (-[CAMViewfinderViewController _shouldShowMaxRecordTimeInstructionLabelForGraphConfiguration:](self, "_shouldShowMaxRecordTimeInstructionLabelForGraphConfiguration:", v4))
      {
        v5 = 6;
      }
      else if (-[CAMViewfinderViewController _shouldShowDeviceTooHotInstructionLabelForGraphConfiguration:](self, "_shouldShowDeviceTooHotInstructionLabelForGraphConfiguration:", v4))
      {
        v5 = 8;
      }
      else if (-[CAMViewfinderViewController _shouldShowSpatialCaptureInstructionsForGraphConfiguration:](self, "_shouldShowSpatialCaptureInstructionsForGraphConfiguration:", v4))
      {
        v5 = 9;
      }
      else if (-[CAMViewfinderViewController _shouldShowSmartStyleCategoryInstructionLabelForGraphConfiguration:](self, "_shouldShowSmartStyleCategoryInstructionLabelForGraphConfiguration:", v4))
      {
        v5 = 10;
      }
      else
      {
        v5 = 0;
      }
    }
    else
    {
      v5 = 2;
    }
  }
  else
  {
    v5 = 1;
  }

  return v5;
}

- (int64_t)_secondaryInstructionLabelForGraphConfiguration:(id)a3
{
  if (-[CAMViewfinderViewController _shouldShowFreeResourcesInstructionLabelForGraphConfiguration:](self, "_shouldShowFreeResourcesInstructionLabelForGraphConfiguration:", a3))
  {
    return 7;
  }
  else
  {
    return 0;
  }
}

- (BOOL)_isVideoStabilizationIndicatorPrimary
{
  void *v2;
  int v3;

  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v2, "preserveExposure") & 1) != 0 || (objc_msgSend(v2, "isProResControlEnabled") & 1) != 0)
    LOBYTE(v3) = 0;
  else
    v3 = objc_msgSend(v2, "sharedLibraryEnabled") ^ 1;

  return v3;
}

- (id)_primaryControlStatusIndicatorTypes
{
  void *v3;

  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithArray:", &unk_1EA3B3068);
  if (-[CAMViewfinderViewController _isVideoStabilizationIndicatorPrimary](self, "_isVideoStabilizationIndicatorPrimary"))
  {
    objc_msgSend(v3, "addObject:", &unk_1EA3B05B0);
  }
  return v3;
}

- (id)_secondaryControlStatusIndicatorTypes
{
  void *v3;

  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithArray:", &unk_1EA3B3080);
  if (!-[CAMViewfinderViewController _isVideoStabilizationIndicatorPrimary](self, "_isVideoStabilizationIndicatorPrimary"))objc_msgSend(v3, "addObject:", &unk_1EA3B05B0);
  return v3;
}

- (void)_updateControlStatusBarContentsVisibilityAnimated:(BOOL)a3
{
  _BOOL8 v3;
  id v5;

  v3 = a3;
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updateControlStatusBarContentsVisibilityForGraphConfiguration:animated:](self, "_updateControlStatusBarContentsVisibilityForGraphConfiguration:animated:", v5, v3);

}

- (void)_updateControlStatusBarContentsVisibilityForGraphConfiguration:(id)a3 animated:(BOOL)a4
{
  id v5;
  void *v6;
  void *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t j;
  void *v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  _BOOL4 v25;
  void *v26;
  void *v27;
  id obj;
  id obja;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];
  _BYTE v39[128];
  uint64_t v40;

  v25 = a4;
  v40 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "controlStatusBar");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = !-[CAMViewfinderViewController _isReconfiguring](self, "_isReconfiguring");
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  -[CAMViewfinderViewController _primaryControlStatusIndicatorTypes](self, "_primaryControlStatusIndicatorTypes");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v34, v39, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v35;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v35 != v11)
          objc_enumerationMutation(obj);
        v13 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * i);
        v14 = objc_msgSend(v13, "integerValue");
        v15 = objc_msgSend(v7, "isIndicatorDesiredForType:", v14);
        if (-[CAMViewfinderViewController _shouldShowIndicatorOfType:forGraphConfiguration:](self, "_shouldShowIndicatorOfType:forGraphConfiguration:", v14, v5))
        {
          v16 = (v8 | v15) == 0;
        }
        else
        {
          v16 = 1;
        }
        if (!v16)
          objc_msgSend(v27, "addObject:", v13);
      }
      v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v34, v39, 16);
    }
    while (v10);
  }

  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  -[CAMViewfinderViewController _secondaryControlStatusIndicatorTypes](self, "_secondaryControlStatusIndicatorTypes");
  obja = (id)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
  if (v17)
  {
    v18 = v17;
    v19 = *(_QWORD *)v31;
    do
    {
      for (j = 0; j != v18; ++j)
      {
        if (*(_QWORD *)v31 != v19)
          objc_enumerationMutation(obja);
        v21 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * j);
        v22 = objc_msgSend(v21, "integerValue");
        v23 = objc_msgSend(v7, "isIndicatorDesiredForType:", v22);
        if (-[CAMViewfinderViewController _shouldShowIndicatorOfType:forGraphConfiguration:](self, "_shouldShowIndicatorOfType:forGraphConfiguration:", v22, v5))
        {
          v24 = (v8 | v23) == 0;
        }
        else
        {
          v24 = 1;
        }
        if (!v24)
          objc_msgSend(v26, "addObject:", v21);
      }
      v18 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
    }
    while (v18);
  }

  objc_msgSend(v7, "setPrimaryDesiredIndicatorTypes:secondaryDesiredIndicatorTypes:animated:", v27, v26, v25);
}

- (void)_updatePanoramaSizeIfNeededForGraphConfiguration:(id)a3
{
  void *v4;
  int v5;
  void *v6;
  double v7;
  double v8;
  void *v9;
  id v10;

  v10 = a3;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isPanoramaSupportedForDevice:", objc_msgSend(v10, "device"));

  if (v5 && objc_msgSend(v10, "mode") == 3)
  {
    +[CAMPanoramaConfiguration sharedInstance](CAMPanoramaConfiguration, "sharedInstance");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (double)objc_msgSend(v6, "maxWidthForDevice:", objc_msgSend(v10, "device"));
    v8 = (double)objc_msgSend(v6, "sampleBufferWidth");
    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setPanoramaCaptureSize:", v7, v8);

  }
}

- (int64_t)_zoomControlLayoutPositionForGraphConfiguration:(id)a3
{
  id v4;
  void *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a3;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (-[CAMViewfinderViewController _wantsLightingControlForGraphConfiguration:](self, "_wantsLightingControlForGraphConfiguration:", v4)&& !-[CAMViewfinderViewController _lightingControlLayoutPositionForGraphConfiguration:](self, "_lightingControlLayoutPositionForGraphConfiguration:", v4))
  {
    v7 = objc_msgSend(v4, "mode");
    v8 = objc_msgSend(v4, "devicePosition");
    v9 = -[CAMViewfinderViewController _currentPhotoFormat](self, "_currentPhotoFormat");
    if (objc_msgSend(v5, "isDepthSuggestionSupportedForMode:devicePosition:photoFormat:", v7, v8, v9, v10))v6 = 2;
    else
      v6 = 1;
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

- (int64_t)_lightingControlLayoutPositionForGraphConfiguration:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int64_t v11;

  v4 = a3;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v4, "mode");
  v7 = objc_msgSend(v4, "devicePosition");

  v8 = -[CAMViewfinderViewController _currentPhotoFormat](self, "_currentPhotoFormat");
  LODWORD(self) = objc_msgSend(v5, "isDepthSuggestionSupportedForMode:devicePosition:photoFormat:", v6, v7, v8, v9);
  v10 = objc_msgSend(v5, "portraitInPhotoModeBehavior");
  if ((_DWORD)self)
    v11 = ~v10 & 2;
  else
    v11 = 0;

  return v11;
}

- (void)_updateZoomControlLayoutForGraphConfiguration:(id)a3 fromGraphConfiguration:(id)a4 animated:(BOOL)a5
{
  _BOOL4 v5;
  id v8;
  _BOOL4 v9;
  int v10;
  int64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  void *v15;
  id v16;

  v5 = a5;
  v8 = a3;
  v9 = -[CAMViewfinderViewController _wantsZoomControlForGraphConfiguration:](self, "_wantsZoomControlForGraphConfiguration:", a4);
  v10 = -[CAMViewfinderViewController _wantsZoomControlForGraphConfiguration:](self, "_wantsZoomControlForGraphConfiguration:", v8);
  v11 = -[CAMViewfinderViewController _zoomControlLayoutPositionForGraphConfiguration:](self, "_zoomControlLayoutPositionForGraphConfiguration:", v8);

  if (!v9 || v10)
  {
    v12 = (v9 | ~v10) & v5;
    v13 = 0.0;
    if (v11 == 1)
      v13 = 14.0;
    if (v11 == 2)
      v14 = -14.0;
    else
      v14 = v13;
    -[CAMViewfinderViewController _zoomControl](self, "_zoomControl", v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "setEdgeMargin:animated:", v12, v14);

    -[CAMViewfinderViewController _zoomControl](self, "_zoomControl");
    v16 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setPlatterLayoutCompact:animated:", v14 != 0.0, v12);

  }
}

- (void)_snapshotAndFadeDisappearingOverlayViewsForChangeToGraphConfiguration:(id)a3
{
  _BOOL4 v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  void *v11;
  id v12;

  v12 = a3;
  v4 = -[CAMViewfinderViewController _shouldHidePanoramaViewForGraphConfiguration:](self, "_shouldHidePanoramaViewForGraphConfiguration:", v12);
  v5 = v12;
  if (v4)
  {
    -[CAMViewfinderViewController _panoramaViewController](self, "_panoramaViewController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "view");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v7;
    if (v7)
    {
      objc_msgSend(v7, "alpha");
      if (v9 > 0.0)
      {
        -[CAMViewfinderViewController _snapshotAndFadeDisappearingView:](self, "_snapshotAndFadeDisappearingView:", v8);
        objc_msgSend(v8, "instructionView");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "superview");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        -[CAMViewfinderViewController _snapshotAndFadeDisappearingView:parentViewOverride:shouldHideView:](self, "_snapshotAndFadeDisappearingView:parentViewOverride:shouldHideView:", v10, v11, 0);

      }
    }

    v5 = v12;
  }
  if (-[CAMViewfinderViewController _shouldHidePortraitModeInstructionLabelForGraphConfiguration:](self, "_shouldHidePortraitModeInstructionLabelForGraphConfiguration:", v5))
  {
    -[CAMViewfinderViewController _snapshotAndFadeDisappearingView:](self, "_snapshotAndFadeDisappearingView:", self->__portraitModeInstructionLabel);
  }
  if (-[CAMViewfinderViewController _shouldHideQRCodeInstructionLabelForGraphConfiguration:](self, "_shouldHideQRCodeInstructionLabelForGraphConfiguration:", v12))
  {
    -[CAMViewfinderViewController _snapshotAndFadeDisappearingView:](self, "_snapshotAndFadeDisappearingView:", self->__qrCodeInstructionLabel);
  }
  if (-[CAMViewfinderViewController _shouldHideFilterNameBadgeForGraphConfiguration:](self, "_shouldHideFilterNameBadgeForGraphConfiguration:", v12))
  {
    -[CAMViewfinderViewController _snapshotAndFadeDisappearingView:](self, "_snapshotAndFadeDisappearingView:", self->__filterNameBadge);
  }

}

- (void)_snapshotAndFadeDisappearingView:(id)a3
{
  -[CAMViewfinderViewController _snapshotAndFadeDisappearingView:parentViewOverride:shouldHideView:](self, "_snapshotAndFadeDisappearingView:parentViewOverride:shouldHideView:", a3, 0, 1);
}

- (void)_snapshotAndFadeDisappearingView:(id)a3 parentViewOverride:(id)a4 shouldHideView:(BOOL)a5
{
  id v7;
  id v8;
  double v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  _QWORD v19[4];
  id v20;
  _QWORD v21[4];
  id v22;
  _QWORD v23[4];
  id v24;
  id v25;
  id v26;
  BOOL v27;

  v7 = a3;
  v8 = a4;
  if (v7)
  {
    if ((objc_msgSend(v7, "isHidden") & 1) == 0)
    {
      objc_msgSend(v7, "alpha");
      if (v9 != 0.0)
      {
        if (v8)
        {
          v10 = v8;
        }
        else
        {
          objc_msgSend(v7, "superview");
          v10 = (id)objc_claimAutoreleasedReturnValue();
        }
        v11 = v10;
        objc_msgSend(v7, "snapshotViewAfterScreenUpdates:", 0);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = (void *)MEMORY[0x1E0DC3F10];
        v14 = MEMORY[0x1E0C809B0];
        v23[0] = MEMORY[0x1E0C809B0];
        v23[1] = 3221225472;
        v23[2] = __98__CAMViewfinderViewController__snapshotAndFadeDisappearingView_parentViewOverride_shouldHideView___block_invoke;
        v23[3] = &unk_1EA32A770;
        v24 = v7;
        v25 = v11;
        v15 = v12;
        v26 = v15;
        v27 = a5;
        v16 = v11;
        objc_msgSend(v13, "performWithoutAnimation:", v23);
        v17 = (void *)MEMORY[0x1E0DC3F10];
        v21[0] = v14;
        v21[1] = 3221225472;
        v21[2] = __98__CAMViewfinderViewController__snapshotAndFadeDisappearingView_parentViewOverride_shouldHideView___block_invoke_2;
        v21[3] = &unk_1EA328868;
        v22 = v15;
        v19[0] = v14;
        v19[1] = 3221225472;
        v19[2] = __98__CAMViewfinderViewController__snapshotAndFadeDisappearingView_parentViewOverride_shouldHideView___block_invoke_3;
        v19[3] = &unk_1EA328A68;
        v20 = v22;
        v18 = v22;
        objc_msgSend(v17, "animateWithDuration:animations:completion:", v21, v19, 0.25);

      }
    }
  }

}

void __98__CAMViewfinderViewController__snapshotAndFadeDisappearingView_parentViewOverride_shouldHideView___block_invoke(uint64_t a1)
{
  void *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  void *v7;
  void *v8;
  void *v9;
  _OWORD v10[3];

  objc_msgSend(*(id *)(a1 + 32), "superview");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "center");
  objc_msgSend(v2, "convertPoint:toView:", *(_QWORD *)(a1 + 40));
  v4 = v3;
  v6 = v5;
  v7 = *(void **)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "bounds");
  objc_msgSend(v7, "setBounds:");
  objc_msgSend(*(id *)(a1 + 48), "setCenter:", v4, v6);
  v8 = *(void **)(a1 + 48);
  v9 = *(void **)(a1 + 32);
  if (v9)
    objc_msgSend(v9, "transform");
  else
    memset(v10, 0, sizeof(v10));
  objc_msgSend(v8, "setTransform:", v10);
  objc_msgSend(*(id *)(a1 + 40), "addSubview:", *(_QWORD *)(a1 + 48));
  if (*(_BYTE *)(a1 + 56))
    objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 0.0);

}

uint64_t __98__CAMViewfinderViewController__snapshotAndFadeDisappearingView_parentViewOverride_shouldHideView___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 0.0);
}

uint64_t __98__CAMViewfinderViewController__snapshotAndFadeDisappearingView_parentViewOverride_shouldHideView___block_invoke_3(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "removeFromSuperview");
}

uint64_t __62__CAMViewfinderViewController__updateBadgeVisibilityAnimated___block_invoke(uint64_t a1)
{
  uint64_t result;
  double v3;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1744), "setAlpha:", (double)(objc_msgSend(*(id *)(a1 + 32), "_shouldHidePortraitModeInstructionLabelForGraphConfiguration:", *(_QWORD *)(a1 + 40)) ^ 1));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1752), "setAlpha:", (double)(objc_msgSend(*(id *)(a1 + 32), "_shouldHideQRCodeInstructionLabelForGraphConfiguration:", *(_QWORD *)(a1 + 40)) ^ 1));
  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1696), "setAlpha:", (double)(objc_msgSend(*(id *)(a1 + 32), "_shouldHideFilterNameBadgeForGraphConfiguration:", *(_QWORD *)(a1 + 40)) ^ 1));
  if (*(_BYTE *)(a1 + 48))
  {
    v3 = 0.0;
    if (!*(_BYTE *)(a1 + 49))
      v3 = 1.0;
    return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1952), "setAlpha:", v3);
  }
  return result;
}

uint64_t __56__CAMViewfinderViewController__forceHideBadgesAnimated___block_invoke(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1744), "setAlpha:", 0.0);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1752), "setAlpha:", 0.0);
}

- (void)_updateUIForCapturing:(BOOL)a3 animated:(BOOL)a4
{
  _BOOL8 v4;
  _BOOL8 v5;
  unint64_t v7;
  void *v8;
  int v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;

  v4 = a4;
  v5 = a3;
  -[CAMViewfinderViewController _setNeedsUpdateOfSupportedInterfaceOrientations](self, "_setNeedsUpdateOfSupportedInterfaceOrientations");
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v21 = (id)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v21, "mode");
  -[CAMViewfinderViewController _updateProResControlsForCurrentState](self, "_updateProResControlsForCurrentState");
  -[CAMViewfinderViewController updateControlVisibilityAnimated:](self, "updateControlVisibilityAnimated:", v4);
  -[CAMViewfinderViewController _updateBadgeVisibilityAnimated:](self, "_updateBadgeVisibilityAnimated:", v4);
  if (!-[CAMViewfinderViewController _isReconfiguring](self, "_isReconfiguring")
    || (+[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities"),
        v8 = (void *)objc_claimAutoreleasedReturnValue(),
        v9 = objc_msgSend(v8, "isSpatialModeTrueVideoSupported"),
        v8,
        v9))
  {
    -[CAMViewfinderViewController _updateSpatialCaptureUIStateForGraphConfiguration:animated:](self, "_updateSpatialCaptureUIStateForGraphConfiguration:animated:", v21, v4);
  }
  -[CAMViewfinderViewController _setSwipeToModeSwitchEnabled:](self, "_setSwipeToModeSwitchEnabled:", -[CAMViewfinderViewController _shouldEnableSwipeToModeSwitch](self, "_shouldEnableSwipeToModeSwitch"));
  -[CAMViewfinderViewController _updateTopBarStyleForGraphConfiguration:capturing:animated:](self, "_updateTopBarStyleForGraphConfiguration:capturing:animated:", v21, v5, v4);
  -[CAMViewfinderViewController _updateBarBackgroundStyleForMode:capturing:animated:](self, "_updateBarBackgroundStyleForMode:capturing:animated:", v7, v5, v4);
  if (!-[CAMViewfinderViewController _isReconfiguringForZoomChange](self, "_isReconfiguringForZoomChange"))
  {
    if (v4)
      v10 = 3;
    else
      v10 = 0;
    -[CAMViewfinderViewController _zoomControl](self, "_zoomControl");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setShouldShowZoomDial:animationDuration:", 0, v10);

  }
  -[CAMViewfinderViewController _updateShutterButtonForGraphConfiguration:isCapturing:animated:](self, "_updateShutterButtonForGraphConfiguration:isCapturing:animated:", v21, v5, v4);
  if (v7 <= 8)
  {
    if (((1 << v7) & 0x186) != 0)
    {
      if (v5)
      {
        -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        goto LABEL_22;
      }
      goto LABEL_19;
    }
    if (v7)
    {
      if (v7 != 3)
        goto LABEL_21;
      -[CAMViewfinderViewController _panoramaViewController](self, "_panoramaViewController");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = v13;
      if (v5)
        objc_msgSend(v13, "startPainting");
      else
        objc_msgSend(v13, "stopPainting");
      goto LABEL_20;
    }
    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v15, "isCTMSupported");

    if (v16 && !v5)
    {
LABEL_19:
      -[CAMViewfinderViewController _targetElapsedTimeView](self, "_targetElapsedTimeView");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "endTimer");
      objc_msgSend(v14, "setBackgroundStyle:animated:", -[CAMViewfinderViewController _elapsedTimeViewIdleBackgroundStyle](self, "_elapsedTimeViewIdleBackgroundStyle"), 1);
      -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "setSpatialCaptureRecordingIndicatorVisible:animated:", 0, 1);

LABEL_20:
    }
  }
LABEL_21:
  -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v18;
  if (!v5)
  {
    objc_msgSend(v18, "notifyDidStopCapture");
    -[CAMViewfinderViewController _remoteShutterController](self, "_remoteShutterController");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "didStopCapture");

    -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "setPausedDuringVideo:animated:", 0, v4);
    goto LABEL_24;
  }
LABEL_22:
  objc_msgSend(v12, "notifyWillStartCapturing");
  -[CAMViewfinderViewController _remoteShutterController](self, "_remoteShutterController");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "willStartCapturing");
LABEL_24:

}

- (int64_t)_elapsedTimeViewIdleBackgroundStyle
{
  void *v3;
  void *v4;
  _BOOL4 v5;

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    -[CAMViewfinderViewController _motionController](self, "_motionController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (unint64_t)(objc_msgSend(v4, "captureOrientation") - 3) < 2;

  }
  else
  {
    v5 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle") == 1;
  }
  if (v5)
    return 3;
  else
    return 0;
}

- (void)_startTimer:(unint64_t)a3
{
  double v5;
  double v6;
  void *v7;
  id v8;

  +[CAMLivePhotoButton enablingAnimationDuration](CAMLivePhotoButton, "enablingAnimationDuration");
  if (a3 - 2 > 2)
    v6 = v5;
  else
    v6 = dbl_1DB9A5288[a3 - 2];
  -[CAMViewfinderViewController _timerCache](self, "_timerCache");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "startTimerForKey:duration:", v7, v6);

}

- (void)timerCache:(id)a3 timerDidFireForKey:(id)a4
{
  uint64_t v5;
  id v6;

  v6 = a4;
  -[CAMViewfinderViewController updateControlVisibilityAnimated:](self, "updateControlVisibilityAnimated:", 1);
  v5 = objc_msgSend(v6, "unsignedIntegerValue");
  switch(v5)
  {
    case 4:
      -[CAMViewfinderViewController _updateTransientLightingBadgeVisibilityAnimated:](self, "_updateTransientLightingBadgeVisibilityAnimated:", 1);
      break;
    case 3:
      -[CAMViewfinderViewController _dismissDocumentScanningButton](self, "_dismissDocumentScanningButton");
      break;
    case 2:
      -[CAMViewfinderViewController _updateImageAnalysisInstructions](self, "_updateImageAnalysisInstructions");
      break;
  }

}

- (BOOL)shouldHideFlashButton
{
  CAMViewfinderViewController *v2;
  void *v3;

  v2 = self;
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v2) = -[CAMViewfinderViewController _shouldHideFlashButtonForGraphConfiguration:](v2, "_shouldHideFlashButtonForGraphConfiguration:", v3);

  return (char)v2;
}

- (BOOL)shouldHideHDRButton
{
  CAMViewfinderViewController *v2;
  void *v3;

  v2 = self;
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v2) = -[CAMViewfinderViewController _shouldHideHDRButtonForGraphConfiguration:](v2, "_shouldHideHDRButtonForGraphConfiguration:", v3);

  return (char)v2;
}

- (BOOL)shouldHideTimerButton
{
  CAMViewfinderViewController *v2;
  void *v3;

  v2 = self;
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v2) = -[CAMViewfinderViewController _shouldHideTimerButtonForGraphConfiguration:](v2, "_shouldHideTimerButtonForGraphConfiguration:", v3);

  return (char)v2;
}

- (BOOL)shouldHideFlipButton
{
  CAMViewfinderViewController *v2;
  void *v3;

  v2 = self;
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v2) = -[CAMViewfinderViewController _shouldHideFlipButtonForGraphConfiguration:](v2, "_shouldHideFlipButtonForGraphConfiguration:", v3);

  return (char)v2;
}

- (BOOL)shouldHideLivePhotoButton
{
  CAMViewfinderViewController *v2;
  void *v3;

  v2 = self;
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v2) = -[CAMViewfinderViewController _shouldHideLivePhotoButtonForGraphConfiguration:](v2, "_shouldHideLivePhotoButtonForGraphConfiguration:", v3);

  return (char)v2;
}

- (BOOL)shouldHideLightingNameBadgeForOrientation:(int64_t)a3
{
  void *v5;

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(a3) = -[CAMViewfinderViewController _shouldHideLightingNameBadgeForGraphConfiguration:orientation:](self, "_shouldHideLightingNameBadgeForGraphConfiguration:orientation:", v5, a3);

  return a3;
}

- (BOOL)shouldLayoutLightingNameBadgeAtBottom
{
  unint64_t v2;

  v2 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
  return (v2 < 5) & (0x1Du >> v2);
}

- (BOOL)_shouldEnableAspectRatioButton
{
  BOOL v3;
  BOOL v4;
  void *v5;
  char v6;

  v3 = -[CAMViewfinderViewController _isOutOfDiskSpace](self, "_isOutOfDiskSpace");
  v4 = -[CAMViewfinderViewController _isModeDisabled](self, "_isModeDisabled");
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isCapturingLowLightImage");

  return ((v3 || v4) | v6) ^ 1;
}

- (BOOL)_shouldEnableIntensityButton
{
  BOOL v3;
  BOOL v4;
  void *v5;
  char v6;

  v3 = -[CAMViewfinderViewController _isOutOfDiskSpace](self, "_isOutOfDiskSpace");
  v4 = -[CAMViewfinderViewController _isModeDisabled](self, "_isModeDisabled");
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isCapturingLowLightImage");

  return ((v3 || v4) | v6) ^ 1;
}

- (BOOL)_shouldEnableExposureControlButton
{
  BOOL v3;
  BOOL v4;
  void *v5;
  char v6;

  v3 = -[CAMViewfinderViewController _isOutOfDiskSpace](self, "_isOutOfDiskSpace");
  v4 = -[CAMViewfinderViewController _isModeDisabled](self, "_isModeDisabled");
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isCapturingLowLightImage");

  return ((v3 || v4) | v6) ^ 1;
}

- (BOOL)_shouldEnableVideoConfigurationControl
{
  void *v2;
  char v3;
  void *v4;
  char v5;
  void *v6;

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isConfigurationAvailable");

  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v4, "isVideoConfigurationControlEnabled") & 1) != 0)
  {
    v5 = 1;
  }
  else
  {
    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v6, "interactiveVideoFormatControlAlwaysEnabled");

  }
  return v3 & v5;
}

- (BOOL)_shouldEnableRAWButton
{
  BOOL v3;
  BOOL v4;
  void *v5;
  char v6;

  v3 = -[CAMViewfinderViewController _isOutOfDiskSpace](self, "_isOutOfDiskSpace");
  v4 = -[CAMViewfinderViewController _isModeDisabled](self, "_isModeDisabled");
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isCapturingLowLightImage");

  return ((v3 || v4) | v6) ^ 1;
}

- (BOOL)_shouldEnablePhotoFormatButton
{
  BOOL v3;
  BOOL v4;
  void *v5;
  char v6;

  v3 = -[CAMViewfinderViewController _isOutOfDiskSpace](self, "_isOutOfDiskSpace");
  v4 = -[CAMViewfinderViewController _isModeDisabled](self, "_isModeDisabled");
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isCapturingLowLightImage");

  return ((v3 || v4) | v6) ^ 1;
}

- (BOOL)_shouldEnableProResButton
{
  BOOL v3;
  void *v4;
  char v5;

  v3 = -[CAMViewfinderViewController _isModeDisabled](self, "_isModeDisabled");
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isCapturingLowLightImage");

  return (v3 | v5) ^ 1;
}

- (BOOL)_shouldEnableVideoStabilizationButton
{
  void *v2;
  char v3;

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isConfigurationAvailable");

  return v3;
}

- (BOOL)_shouldEnableCreativeCameraButton
{
  return -[CAMViewfinderViewController _reasonsToDisableCreativeCameraButton](self, "_reasonsToDisableCreativeCameraButton") == 0;
}

- (unint64_t)_reasonsToDisableCreativeCameraButton
{
  _BOOL4 v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int v8;

  v3 = -[CAMViewfinderViewController isPreventingAdditionalCaptures](self, "isPreventingAdditionalCaptures");
  v4 = -[CAMViewfinderViewController _capturingFromPhysicalButton](self, "_capturingFromPhysicalButton");
  v5 = 8;
  if (!v3)
    v5 = 0;
  if (v4)
    v6 = v5 | 0x20;
  else
    v6 = v5;
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isCaptureAvailable");

  return v6 | v8 ^ 1u;
}

- (BOOL)_shouldEnableApertureButton
{
  BOOL v3;
  BOOL v4;
  void *v5;
  char v6;

  v3 = -[CAMViewfinderViewController _isOutOfDiskSpace](self, "_isOutOfDiskSpace");
  v4 = -[CAMViewfinderViewController _isModeDisabled](self, "_isModeDisabled");
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isCapturingLowLightImage");

  return ((v3 || v4) | v6) ^ 1;
}

- (BOOL)_shouldEnableAutoMacroButton
{
  BOOL v3;
  void *v4;
  char v5;

  v3 = -[CAMViewfinderViewController _isOutOfDiskSpace](self, "_isOutOfDiskSpace");
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isCapturingLowLightImage");

  return (v3 | v5) ^ 1;
}

- (BOOL)_shouldEnableLowLightControl
{
  void *v2;
  char v3;

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isCapturingLowLightImage") ^ 1;

  return v3;
}

- (BOOL)_shouldEnableSemanticStyleControl
{
  void *v2;
  char v3;

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isCapturingLowLightImage") ^ 1;

  return v3;
}

- (BOOL)_shouldEnableSmartStyleControl
{
  void *v2;
  char v3;

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isCapturingLowLightImage") ^ 1;

  return v3;
}

- (BOOL)_shouldEnableSmartStylesSwipeGestures
{
  void *v4;
  char v5;

  if (-[CAMViewfinderViewController _currentHalfPressSpotlight](self, "_currentHalfPressSpotlight"))
    return 0;
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isSmartStylePickerVisible");

  return v5;
}

- (BOOL)_shouldEnableControlDrawerToggle
{
  void *v2;
  char v3;

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isCapturingLowLightImage") ^ 1;

  return v3;
}

- (BOOL)_shouldEnableTextAnalysisButton
{
  void *v2;
  char v3;

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isCapturingLowLightImage") ^ 1;

  return v3;
}

- (BOOL)_shouldEnableSharedLibraryButton
{
  void *v2;
  char v3;

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isCapturingLowLightImage");

  return v3 ^ 1;
}

- (BOOL)_shouldShowSharedLibraryButtonForGraphConfiguration:(id)a3
{
  id v4;
  void *v5;
  int v6;
  void *v7;
  char v8;
  void *v9;
  void *v10;
  void *v11;
  BOOL v12;
  int v13;
  void *v14;

  v4 = a3;
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "sharedLibrarySwitchEnabled");

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isCapturingVideo");

  -[CAMViewfinderViewController _sharedLibraryButton](self, "_sharedLibraryButton");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _topBar](self, "_topBar");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "sharedLibraryButton");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v12 = v9 == v11;
  if (v9 == v11)
    LOBYTE(v13) = 0;
  else
    LOBYTE(v13) = v6;
  if (v12 && v6)
  {
    -[CAMViewfinderViewController _topBar](self, "_topBar");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v14, "shouldHideSharedLibraryButtonForGraphConfiguration:", v4) ^ 1;

  }
  return v13 & (v8 ^ 1);
}

- (BOOL)_shouldEnableDrawerControl:(int64_t)a3
{
  BOOL result;

  switch(a3)
  {
    case 0:
      result = -[CAMViewfinderViewController _shouldEnableFlashButton](self, "_shouldEnableFlashButton");
      break;
    case 1:
      result = -[CAMViewfinderViewController _shouldEnableLivePhotoButton](self, "_shouldEnableLivePhotoButton");
      break;
    case 2:
      result = -[CAMViewfinderViewController _shouldEnableAspectRatioButton](self, "_shouldEnableAspectRatioButton");
      break;
    case 3:
      result = -[CAMViewfinderViewController _shouldEnableTimerButton](self, "_shouldEnableTimerButton");
      break;
    case 4:
      result = -[CAMViewfinderViewController _shouldEnableFilterButton](self, "_shouldEnableFilterButton");
      break;
    case 5:
      result = -[CAMViewfinderViewController _shouldEnableHDRButton](self, "_shouldEnableHDRButton");
      break;
    case 6:
      result = -[CAMViewfinderViewController _shouldEnableApertureButton](self, "_shouldEnableApertureButton");
      break;
    case 7:
      result = -[CAMViewfinderViewController _shouldEnableIntensityButton](self, "_shouldEnableIntensityButton");
      break;
    case 8:
      result = -[CAMViewfinderViewController _shouldEnableExposureControlButton](self, "_shouldEnableExposureControlButton");
      break;
    case 9:
      result = -[CAMViewfinderViewController _shouldEnableLowLightControl](self, "_shouldEnableLowLightControl");
      break;
    case 10:
      result = -[CAMViewfinderViewController _shouldEnableSemanticStyleControl](self, "_shouldEnableSemanticStyleControl");
      break;
    case 11:
      result = -[CAMViewfinderViewController _shouldEnableSmartStyleControl](self, "_shouldEnableSmartStyleControl");
      break;
    case 12:
      result = -[CAMViewfinderViewController _shouldEnableRAWButton](self, "_shouldEnableRAWButton");
      break;
    case 13:
      result = -[CAMViewfinderViewController _shouldEnableProResButton](self, "_shouldEnableProResButton");
      break;
    case 14:
      result = -[CAMViewfinderViewController _shouldEnableSharedLibraryButton](self, "_shouldEnableSharedLibraryButton");
      break;
    case 15:
      result = -[CAMViewfinderViewController _shouldEnableVideoStabilizationButton](self, "_shouldEnableVideoStabilizationButton");
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

- (BOOL)_shouldEnableControlStatusIndicator:(unint64_t)a3
{
  BOOL result;

  switch(a3)
  {
    case 0uLL:
      result = -[CAMViewfinderViewController _shouldEnableFlashButton](self, "_shouldEnableFlashButton");
      break;
    case 1uLL:
      result = -[CAMViewfinderViewController _shouldEnableLivePhotoButton](self, "_shouldEnableLivePhotoButton");
      break;
    case 2uLL:
      result = -[CAMViewfinderViewController _shouldEnableHDRButton](self, "_shouldEnableHDRButton");
      break;
    case 3uLL:
      result = -[CAMViewfinderViewController _shouldEnableTimerButton](self, "_shouldEnableTimerButton");
      break;
    case 4uLL:
      result = -[CAMViewfinderViewController _shouldEnableFilterButton](self, "_shouldEnableFilterButton");
      break;
    case 5uLL:
      result = -[CAMViewfinderViewController _shouldEnableApertureButton](self, "_shouldEnableApertureButton");
      break;
    case 6uLL:
      result = -[CAMViewfinderViewController _shouldEnableIntensityButton](self, "_shouldEnableIntensityButton");
      break;
    case 7uLL:
      result = -[CAMViewfinderViewController _shouldEnableExposureControlButton](self, "_shouldEnableExposureControlButton");
      break;
    case 8uLL:
      result = -[CAMViewfinderViewController _shouldEnableVideoConfigurationControl](self, "_shouldEnableVideoConfigurationControl");
      break;
    case 9uLL:
      result = -[CAMViewfinderViewController _shouldEnableLowLightControl](self, "_shouldEnableLowLightControl");
      break;
    case 0xAuLL:
      result = -[CAMViewfinderViewController _shouldEnableSemanticStyleControl](self, "_shouldEnableSemanticStyleControl");
      break;
    case 0xBuLL:
      result = -[CAMViewfinderViewController _shouldEnableSmartStyleControl](self, "_shouldEnableSmartStyleControl");
      break;
    case 0xCuLL:
      result = -[CAMViewfinderViewController _shouldEnableRAWButton](self, "_shouldEnableRAWButton");
      break;
    case 0xDuLL:
      result = -[CAMViewfinderViewController _shouldEnableProResButton](self, "_shouldEnableProResButton");
      break;
    case 0xEuLL:
      result = -[CAMViewfinderViewController _shouldEnableSharedLibraryButton](self, "_shouldEnableSharedLibraryButton");
      break;
    case 0xFuLL:
      result = -[CAMViewfinderViewController _shouldEnableVideoStabilizationButton](self, "_shouldEnableVideoStabilizationButton");
      break;
    case 0x10uLL:
      result = -[CAMViewfinderViewController _shouldEnablePhotoFormatButton](self, "_shouldEnablePhotoFormatButton");
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

- (void)setUserInteractionLoggingEnabled:(BOOL)a3
{
  if (self->_userInteractionLoggingEnabled != a3)
  {
    self->_userInteractionLoggingEnabled = a3;
    if (a3)
      -[CAMViewfinderViewController _updateEnabledControlsWithReason:forceLog:](self, "_updateEnabledControlsWithReason:forceLog:", CFSTR("User Interaction Logging Enabled"), 1);
  }
}

- (id)_debugEnabledDescriptionForControl:(id)a3 withReason:(id)a4
{
  id v6;
  id v7;
  char v8;
  void *v9;
  uint64_t v10;
  void *v11;

  v6 = a4;
  v7 = a3;
  v8 = objc_msgSend(v7, "isEnabled");
  v9 = (void *)MEMORY[0x1E0CB37A0];
  v10 = objc_opt_class();
  if ((v8 & 1) != 0)
  {
    objc_msgSend(v9, "stringWithFormat:", CFSTR("<%@: %p> is enabled. (%@)"), v10, v7, v6);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    objc_msgSend(v9, "stringWithFormat:", CFSTR("<%@: %p> is disabled. We're"), v10, v7);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (-[CAMViewfinderViewController _isOutOfDiskSpace](self, "_isOutOfDiskSpace"))
      objc_msgSend(v11, "appendString:", CFSTR(" out of disk space,"));
    objc_msgSend(v11, "replaceOccurrencesOfString:withString:options:range:", CFSTR(","), CFSTR("."), 1, objc_msgSend(v11, "length") - 1, 1);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(" (%@)"), v6);
    v7 = (id)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v11, "appendString:", v7);
  }

  return v11;
}

- (void)simulateImageWellTap
{
  id v3;

  -[CAMViewfinderViewController _imageWell](self, "_imageWell");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _handleImageWellReleased:](self, "_handleImageWellReleased:", v3);

}

- (BOOL)pressShutterButtonWithTouchUpDelay:(double)a3
{
  return -[CAMViewfinderViewController pressShutterButtonWithTouchUpDelay:shutterBehavior:](self, "pressShutterButtonWithTouchUpDelay:shutterBehavior:", 0, a3);
}

- (BOOL)pressShutterButtonWithTouchUpDelay:(double)a3 shutterBehavior:(int64_t)a4
{
  void *v7;
  int v8;
  void *v9;
  void *v10;
  int v11;
  NSObject *v12;
  void *v13;
  void *v14;
  char v15;
  uint8_t v17[8];
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  void *v21;
  CAMViewfinderViewController *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t);
  void *v27;
  CAMViewfinderViewController *v28;

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isCaptureAvailable");

  if (v8)
  {
    -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (v9)
    {
      -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v10, "externalButtonPressedWithBehavior:", a4);

      if (v11)
      {
        dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
        v24 = MEMORY[0x1E0C809B0];
        v25 = 3221225472;
        v26 = __82__CAMViewfinderViewController_pressShutterButtonWithTouchUpDelay_shutterBehavior___block_invoke;
        v27 = &unk_1EA328868;
        v28 = self;
        pl_dispatch_after();
        LOBYTE(v11) = 1;
      }
    }
    else
    {
      -[CAMViewfinderViewController _shutterButton](self, "_shutterButton");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v13, "isEnabled");
      if (v11)
      {
        -[CAMViewfinderViewController _handleShutterButtonPressed:](self, "_handleShutterButtonPressed:", v13);
        +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = objc_msgSend(v14, "captureOnTouchDown");

        if ((v15 & 1) != 0)
        {
          dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
          v18 = MEMORY[0x1E0C809B0];
          v19 = 3221225472;
          v20 = __82__CAMViewfinderViewController_pressShutterButtonWithTouchUpDelay_shutterBehavior___block_invoke_2;
          v21 = &unk_1EA328A40;
          v22 = self;
          v23 = v13;
          pl_dispatch_after();

        }
        else
        {
          -[CAMViewfinderViewController _handleShutterButtonReleased:](self, "_handleShutterButtonReleased:", v13);
        }
      }

    }
  }
  else
  {
    v12 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_1DB760000, v12, OS_LOG_TYPE_DEFAULT, "Capture not available for pressShutterButtonWithTouchUpDelay:shutterBehavior:", v17, 2u);
    }

    LOBYTE(v11) = 0;
  }
  return v11;
}

void __82__CAMViewfinderViewController_pressShutterButtonWithTouchUpDelay_shutterBehavior___block_invoke(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "_dynamicShutterControl");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "externalButtonReleased");

}

uint64_t __82__CAMViewfinderViewController_pressShutterButtonWithTouchUpDelay_shutterBehavior___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleShutterButtonReleased:", *(_QWORD *)(a1 + 40));
}

- (BOOL)takeStillDuringVideoWithTouchUpDelay:(double)a3
{
  void *v5;
  int v6;
  void *v7;
  int v8;
  void *v9;
  void *v10;
  char v11;
  BOOL v13;
  BOOL v14;

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isCaptureAvailable");

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "captureOnTouchDown");

  if (!v6)
    return 0;
  -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "externalLockButtonPressed");

    dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
    pl_dispatch_after();
    return v11;
  }
  v14 = -[CAMViewfinderViewController _stillDuringVideoButtonPressed:](self, "_stillDuringVideoButtonPressed:", self->__stillDuringVideoButton);
  if (v8)
  {
    v13 = v14;
    dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
    pl_dispatch_after();
    return v13;
  }
  return -[CAMViewfinderViewController _stillDuringVideoButtonReleased:](self, "_stillDuringVideoButtonReleased:", self->__stillDuringVideoButton);
}

void __68__CAMViewfinderViewController_takeStillDuringVideoWithTouchUpDelay___block_invoke(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "_dynamicShutterControl");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "externalLockButtonReleased");

}

uint64_t __68__CAMViewfinderViewController_takeStillDuringVideoWithTouchUpDelay___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_stillDuringVideoButtonReleased:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1800));
}

- (void)_updateAllControlsWithContentSize:(id)a3
{
  CAMTopBar *topBar;
  NSString *v5;
  void *v6;
  CAMBarsAccessibilityHUDManager *v7;
  CAMBarsAccessibilityHUDManager *v8;
  CAMBarsAccessibilityHUDManager *v9;
  CAMBarsAccessibilityHUDManager *v10;
  CAMBarsAccessibilityHUDManager *v11;
  void *v12;
  id v13;

  topBar = self->__topBar;
  v5 = (NSString *)a3;
  -[CAMTopBar invalidateIntrinsicContentSize](topBar, "invalidateIntrinsicContentSize");
  -[CAMTopBar setNeedsLayout](self->__topBar, "setNeedsLayout");
  -[CAMBottomBar setNeedsLayout](self->__bottomBar, "setNeedsLayout");
  -[CAMViewfinderViewController _accessibilityHUDManagers](self, "_accessibilityHUDManagers");
  v13 = (id)objc_claimAutoreleasedReturnValue();
  LODWORD(topBar) = UIContentSizeCategoryIsAccessibilityCategory(v5);

  if ((_DWORD)topBar && !objc_msgSend(v13, "count"))
  {
    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = [CAMBarsAccessibilityHUDManager alloc];
    v8 = v7;
    if (v6)
    {
      -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
      v9 = (CAMBarsAccessibilityHUDManager *)objc_claimAutoreleasedReturnValue();
      v10 = -[CAMBarsAccessibilityHUDManager initWithView:delegate:cancelsTouchesInView:](v8, "initWithView:delegate:cancelsTouchesInView:", v9, self, 1);
      objc_msgSend(v13, "addObject:", v10);

    }
    else
    {
      v11 = -[CAMBarsAccessibilityHUDManager initWithView:delegate:cancelsTouchesInView:](v7, "initWithView:delegate:cancelsTouchesInView:", self->__topBar, self, 1);
      objc_msgSend(v13, "addObject:", v11);

      v9 = -[CAMBarsAccessibilityHUDManager initWithView:delegate:cancelsTouchesInView:]([CAMBarsAccessibilityHUDManager alloc], "initWithView:delegate:cancelsTouchesInView:", self->__bottomBar, self, 0);
      objc_msgSend(v13, "addObject:", v9);
    }

  }
  -[CAMViewfinderViewController view](self, "view");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setNeedsLayout");

}

- (void)_handleContentSizeCategoryDidChange:(id)a3
{
  id v4;

  -[CAMViewfinderViewController currentContentSize](self, "currentContentSize", a3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updateAllControlsWithContentSize:](self, "_updateAllControlsWithContentSize:", v4);

}

void __83__CAMViewfinderViewController__updatePanoramaViewVisibilityForViewfinderTransition__block_invoke(uint64_t a1)
{
  double v1;
  id v2;

  if (*(_BYTE *)(a1 + 40))
    v1 = 0.0;
  else
    v1 = 1.0;
  objc_msgSend(*(id *)(a1 + 32), "view");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setAlpha:", v1);

}

- (void)closedViewfinderController:(id)a3 wantsViewfinderOpenForReason:(int64_t)a4
{
  id v6;
  void *v7;
  void *v8;
  id v9;
  _BOOL4 v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  void *v18;
  id v19;
  id v20[2];
  id location;

  v6 = a3;
  -[CAMViewfinderViewController _viewfinderTransitionable](self, "_viewfinderTransitionable");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updateLevelMotionTracking](self, "_updateLevelMotionTracking");
  if (v7)
  {
    -[CAMViewfinderViewController _setOpeningViewfinder:](self, "_setOpeningViewfinder:", 1);
    -[CAMViewfinderViewController _updateEnabledControlsWithReason:](self, "_updateEnabledControlsWithReason:", CFSTR("Began opening viewfinder"));
    objc_msgSend(MEMORY[0x1E0DC3470], "sharedApplication");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v9 = v8;
      objc_msgSend(v9, "willOpenViewfinderForReason:", a4);
    }
    else
    {
      v9 = 0;
    }
    v10 = -[CAMViewfinderViewController _isSpatialMode:devicePosition:](self, "_isSpatialMode:devicePosition:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"));
    if (-[CAMViewfinderViewController _isSpatialVideoInVideoModeActiveForMode:devicePosition:](self, "_isSpatialVideoInVideoModeActiveForMode:devicePosition:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"))|| v10)
    {
      -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMViewfinderViewController _updateSpatialCaptureUIStateForGraphConfiguration:animated:](self, "_updateSpatialCaptureUIStateForGraphConfiguration:animated:", v11, 0);

    }
    objc_initWeak(&location, self);
    -[CAMViewfinderViewController _transitionController](self, "_transitionController");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = MEMORY[0x1E0C809B0];
    v16 = 3221225472;
    v17 = __87__CAMViewfinderViewController_closedViewfinderController_wantsViewfinderOpenForReason___block_invoke;
    v18 = &unk_1EA32A798;
    objc_copyWeak(v20, &location);
    v13 = v9;
    v19 = v13;
    v20[1] = (id)a4;
    objc_msgSend(v12, "openForReason:animated:withCompletionHandler:", a4, 1, &v15);

    -[CAMViewfinderViewController _targetFilterScrubberView](self, "_targetFilterScrubberView", v15, v16, v17, v18);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "setSuspended:", 0);

    -[CAMViewfinderViewController _updatePanoramaViewVisibilityForViewfinderTransition](self, "_updatePanoramaViewVisibilityForViewfinderTransition");
    -[CAMViewfinderViewController _prepareDeferredProcessingIfNeeded](self, "_prepareDeferredProcessingIfNeeded");
    -[CAMViewfinderViewController _updateExternalStorageMonitoringState:](self, "_updateExternalStorageMonitoringState:", 1);

    objc_destroyWeak(v20);
    objc_destroyWeak(&location);

  }
  else
  {
    -[CAMViewfinderViewController _updateEnabledControlsWithReason:](self, "_updateEnabledControlsWithReason:", CFSTR("Finished opening viewfinder"));
    -[CAMViewfinderViewController _updatePanoramaViewVisibilityForViewfinderTransition](self, "_updatePanoramaViewVisibilityForViewfinderTransition");
  }

}

void __87__CAMViewfinderViewController_closedViewfinderController_wantsViewfinderOpenForReason___block_invoke(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_setOpeningViewfinder:", 0);
  objc_msgSend(WeakRetained, "_updateEnabledControlsWithReason:", CFSTR("Finished opening viewfinder"));
  objc_msgSend(*(id *)(a1 + 32), "didOpenViewfinderForReason:", *(_QWORD *)(a1 + 48));

}

- (void)disabledPreviewController:(id)a3 wantsPreviewDisabledForReason:(int64_t)a4
{
  id v4;

  -[CAMViewfinderViewController _captureController](self, "_captureController", a3, a4);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "changeToPreviewDisabled");

}

- (void)disabledPreviewController:(id)a3 wantsPreviewEnabledForReason:(int64_t)a4
{
  unint64_t v5;
  id v6;

  v5 = -[CAMViewfinderViewController _previewConfigurationForMode:devicePosition:videoThumbnailOutputEnabled:](self, "_previewConfigurationForMode:devicePosition:videoThumbnailOutputEnabled:", -[CAMViewfinderViewController _currentMode](self, "_currentMode", a3, a4), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"), -[CAMViewfinderViewController _wantsFilterScrubberVisible](self, "_wantsFilterScrubberVisible"));
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "changeToPreviewEnabledWithConfiguration:", v5);

}

- (void)captureController:(id)a3 didOutputOverCapturePreviewStatus:(int64_t)a4
{
  void *v6;
  uint64_t v7;
  int64_t v8;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities", a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "spatialOverCaptureSupportForMode:device:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevice](self, "_currentDevice"));

  v8 = -[CAMViewfinderViewController _overCapturePreviewStatus](self, "_overCapturePreviewStatus");
  -[CAMViewfinderViewController _setOverCapturePreviewStatus:](self, "_setOverCapturePreviewStatus:", a4 & (v7 << 62 >> 63));
  -[CAMViewfinderViewController _updateViewfinderMaterialFromStatus:animated:](self, "_updateViewfinderMaterialFromStatus:animated:", v8, 1);
}

- (void)_updateViewfinderMaterialAnimated:(BOOL)a3
{
  -[CAMViewfinderViewController _updateViewfinderMaterialFromStatus:animated:](self, "_updateViewfinderMaterialFromStatus:animated:", -[CAMViewfinderViewController _overCapturePreviewStatus](self, "_overCapturePreviewStatus"), a3);
}

- (void)_updateViewfinderMaterialFromStatus:(int64_t)a3 animated:(BOOL)a4
{
  _BOOL4 v4;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  char v14;
  _BOOL4 v15;
  _BOOL4 v16;
  void *v17;
  int v18;
  double v19;
  void *v20;
  int v22;
  int v23;
  double v24;
  double v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  _BOOL4 v32;
  id v33;

  v4 = a4;
  v7 = -[CAMViewfinderViewController _overCapturePreviewStatus](self, "_overCapturePreviewStatus");
  switch(v7)
  {
    case 0:
      v8 = a3;
      v32 = 0;
      goto LABEL_4;
    case 1:
      v32 = v4;
      v8 = a3;
      -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = objc_msgSend(v26, "isSemanticStyleControlVisible");

      -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = objc_msgSend(v28, "isSmartStylePickerVisible");

      v9 = 2;
      if ((v27 & 1) == 0 && (v29 & 1) == 0)
      {
        v30 = -[CAMViewfinderViewController _shallowDepthOfFieldStatus](self, "_shallowDepthOfFieldStatus");
        v31 = 2;
        if (((1 << v30) & 0x6202) == 0)
          v31 = 0;
        if (v30 <= 0xE)
          v9 = v31;
        else
          v9 = 0;
      }
      break;
    case 2:
    case 4:
    case 5:
      v32 = v4;
      v8 = a3;
LABEL_4:
      v9 = 4;
      break;
    case 3:
      v32 = v4;
      v8 = a3;
      v9 = 3;
      break;
    default:
      v32 = v4;
      v8 = a3;
      v9 = 0;
      break;
  }
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v10, "isSpatialOverCaptureSupported") & 1) != 0)
  {
    +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "isOverCapturePreviewEnabled");

    if (!v12)
      v9 = 4;
  }
  else
  {

    v9 = 4;
  }
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "spatialOverCaptureSupportForMode:device:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevice](self, "_currentDevice"));

  v15 = -[CAMViewfinderViewController _isZooming](self, "_isZooming");
  v16 = -[CAMViewfinderViewController _isReconfiguring](self, "_isReconfiguring");
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "isReticleAnimating");

  v19 = 3.0;
  if (v7 == 2)
  {
    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v20, "isBackQuadraSuperWideSupported"))
      v19 = 1.0;
    else
      v19 = 3.0;

  }
  v22 = v8 == 4 && v7 == 1 || v15;
  v23 = v22 | v16 | v18;
  if ((v14 & 2) == 0)
    v9 = 4;
  v24 = 0.35;
  if (!v23)
    v24 = v19;
  if (v32)
    v25 = v24;
  else
    v25 = 0.0;
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v33 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v33, "setMaterial:withDuration:", v9, v25);

}

- (int64_t)_topBarBackgroundStyleForMode:(int64_t)a3 capturing:(BOOL)a4
{
  _BOOL4 v4;
  int64_t v7;
  int64_t v8;
  _BOOL4 v9;
  void *v10;
  void *v11;
  void *v12;
  _BOOL4 v13;
  _BOOL4 v14;
  int v15;
  _BOOL4 v16;

  v4 = a4;
  v7 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
  if ((unint64_t)a3 > 9)
    goto LABEL_9;
  if (((1 << a3) & 0x1A6) != 0)
  {
    v8 = v4;
    goto LABEL_11;
  }
  v9 = +[CAMBottomBar wantsVerticalBarForLayoutStyle:](CAMBottomBar, "wantsVerticalBarForLayoutStyle:", v7);
  -[CAMViewfinderViewController view](self, "view");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "window");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "screen");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = CAMIsTallScreen(v12);

  v14 = -[CAMViewfinderViewController isEmulatingImagePicker](self, "isEmulatingImagePicker");
  if (v7)
  {
    v15 = 0;
  }
  else
  {
    v16 = -[CAMViewfinderViewController _isShowingFilterScrubber](self, "_isShowingFilterScrubber");
    v15 = v16 | -[CAMViewfinderViewController _isAnimatingFilterScrubberDismissal](self, "_isAnimatingFilterScrubberDismissal");
  }
  if (v9 || !v13 || (v14 | v15) == 1)
LABEL_9:
    v8 = 0;
  else
    v8 = 2;
LABEL_11:
  if (v7 == 2)
    return 1;
  else
    return v8;
}

- (void)_updateBarBackgroundStyleForMode:(int64_t)a3 capturing:(BOOL)a4 animated:(BOOL)a5
{
  _BOOL8 v5;
  _BOOL8 v6;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  void (**v15)(_QWORD);
  void *v16;
  _QWORD v17[4];
  id v18;
  void (**v19)(_QWORD);
  _QWORD aBlock[5];
  id v21;
  int64_t v22;

  v5 = a5;
  v6 = a4;
  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v5)
    objc_msgSend(v9, "layoutIfNeeded");
  -[CAMViewfinderViewController _topBar](self, "_topBar");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "setBackgroundStyle:animated:", -[CAMViewfinderViewController _topBarBackgroundStyleForMode:capturing:](self, "_topBarBackgroundStyleForMode:capturing:", a3, v6), v5);
  -[CAMViewfinderViewController _bottomBar](self, "_bottomBar");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setBackgroundStyle:animated:", -[CAMViewfinderViewController _bottomBarBackgroundStyleForMode:](self, "_bottomBarBackgroundStyleForMode:", a3), v5);
  v13 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __83__CAMViewfinderViewController__updateBarBackgroundStyleForMode_capturing_animated___block_invoke;
  aBlock[3] = &unk_1EA32A7C0;
  aBlock[4] = self;
  v22 = a3;
  v14 = v12;
  v21 = v14;
  v15 = (void (**)(_QWORD))_Block_copy(aBlock);
  objc_msgSend(v10, "setNeedsLayout");
  if (v5)
  {
    v16 = (void *)MEMORY[0x1E0DC3F10];
    v17[0] = v13;
    v17[1] = 3221225472;
    v17[2] = __83__CAMViewfinderViewController__updateBarBackgroundStyleForMode_capturing_animated___block_invoke_2;
    v17[3] = &unk_1EA328F80;
    v18 = v10;
    v19 = v15;
    objc_msgSend(v16, "animateWithDuration:delay:options:animations:completion:", 2, v17, 0, 0.3, 0.0);

  }
  else
  {
    v15[2](v15);
  }

}

void __83__CAMViewfinderViewController__updateBarBackgroundStyleForMode_capturing_animated___block_invoke(uint64_t a1)
{
  void *v2;
  int v3;
  void *v4;
  id v5;

  if (objc_msgSend(*(id *)(a1 + 32), "emulationMode") == 1 || objc_msgSend(*(id *)(a1 + 32), "emulationMode") == 2)
  {
    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "deviceSupportsCTM");

    if (v3)
    {
      if (*(_QWORD *)(a1 + 48))
        +[CAMFullscreenViewfinder darkControlBackgroundColor](CAMFullscreenViewfinder, "darkControlBackgroundColor");
      else
        +[CAMFullscreenViewfinder lightControlBackgroundColor](CAMFullscreenViewfinder, "lightControlBackgroundColor");
      v5 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "flipButton");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "setTintColor:", v5);

    }
  }
}

uint64_t __83__CAMViewfinderViewController__updateBarBackgroundStyleForMode_capturing_animated___block_invoke_2(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

- (int64_t)_preferredControlToOpenInDrawerForMode:(int64_t)a3
{
  void *v4;
  void *v5;
  void *v6;
  int64_t v7;

  -[CAMViewfinderViewController _preferredControlToOpenInDrawerForMode](self, "_preferredControlToOpenInDrawerForMode");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKeyedSubscript:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
    v7 = objc_msgSend(v6, "integerValue");
  else
    v7 = -1;

  return v7;
}

- (void)_setPreferredControlToOpenInDrawer:(int64_t)a3 forMode:(int64_t)a4
{
  void *v6;
  void *v7;
  id v8;

  if (a3 == -1)
  {
    v8 = 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:");
    v8 = (id)objc_claimAutoreleasedReturnValue();
  }
  -[CAMViewfinderViewController _preferredControlToOpenInDrawerForMode](self, "_preferredControlToOpenInDrawerForMode");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v8, v7);

}

- (BOOL)_isControlDrawerShowingPersistentControl
{
  void *v2;
  void *v3;
  char v4;

  -[CAMViewfinderViewController _controlDrawer](self, "_controlDrawer");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
  {
    if ((objc_msgSend(v2, "isControlExpandedForType:", 4) & 1) != 0
      || (objc_msgSend(v3, "isControlExpandedForType:", 6) & 1) != 0
      || (objc_msgSend(v3, "isControlExpandedForType:", 7) & 1) != 0
      || (objc_msgSend(v3, "isControlExpandedForType:", 9) & 1) != 0
      || (objc_msgSend(v3, "isControlExpandedForType:", 8) & 1) != 0
      || (objc_msgSend(v3, "isControlExpandedForType:", 10) & 1) != 0)
    {
      v4 = 1;
    }
    else
    {
      v4 = objc_msgSend(v3, "isControlExpandedForType:", 11);
    }
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

- (void)controlDrawer:(id)a3 didSelectMenuItemForControlType:(int64_t)a4
{
  id v4;

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder", a3, a4);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "dismissModalControlDrawerIfNeededForReason:", 5);

}

- (void)controlDrawer:(id)a3 didChangeHDRMode:(int64_t)a4
{
  -[CAMViewfinderViewController _handleUserChangedToHDRMode:](self, "_handleUserChangedToHDRMode:", a4);
}

- (void)controlDrawer:(id)a3 didChangeFlashMode:(int64_t)a4
{
  -[CAMViewfinderViewController _handleUserChangedToFlashMode:](self, "_handleUserChangedToFlashMode:", a4);
}

- (void)controlDrawer:(id)a3 didChangeAspectRatio:(int64_t)a4
{
  -[CAMViewfinderViewController _handleUserChangedToAspectRatioCrop:](self, "_handleUserChangedToAspectRatioCrop:", a4);
}

- (void)controlDrawer:(id)a3 didChangeLivePhotoMode:(int64_t)a4
{
  -[CAMViewfinderViewController _handleUserChangedToLivePhotoMode:](self, "_handleUserChangedToLivePhotoMode:", a4);
}

- (void)controlDrawer:(id)a3 didChangeTimerDuration:(int64_t)a4
{
  -[CAMViewfinderViewController _setTimerDurationAndUpdateUI:animated:](self, "_setTimerDurationAndUpdateUI:animated:", a4, 1);
}

- (void)controlDrawer:(id)a3 wantsFilterScrubberVisible:(BOOL)a4
{
  _BOOL4 v4;
  uint64_t v6;

  v4 = a4;
  -[CAMViewfinderViewController _setWantsFilterScrubberVisible:animated:](self, "_setWantsFilterScrubberVisible:animated:", a4, 1);
  if (v4)
    v6 = 4;
  else
    v6 = -1;
  -[CAMViewfinderViewController _setPreferredControlToOpenInDrawer:forMode:](self, "_setPreferredControlToOpenInDrawer:forMode:", v6, -[CAMViewfinderViewController _currentMode](self, "_currentMode"));
}

- (void)controlDrawer:(id)a3 didChangeRAWMode:(int64_t)a4
{
  -[CAMViewfinderViewController _handleUserChangedRAWMode:](self, "_handleUserChangedRAWMode:", a4);
}

- (void)controlDrawer:(id)a3 didChangeProResVideoMode:(int64_t)a4
{
  -[CAMViewfinderViewController _handleUserChangedProResMode:](self, "_handleUserChangedProResMode:", a4);
}

- (void)controlDrawer:(id)a3 didChangeVideoStabilizationMode:(int64_t)a4
{
  -[CAMViewfinderViewController _handleUserChangedVideoStabilizationMode:](self, "_handleUserChangedVideoStabilizationMode:", a4);
}

- (void)controlDrawer:(id)a3 didCreateControlForType:(int64_t)a4
{
  int64_t v6;
  void *v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  _BOOL8 v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;

  v19 = a3;
  switch(a4)
  {
    case 0:
      -[CAMViewfinderViewController _updateFlashButtonForMode:animated:](self, "_updateFlashButtonForMode:animated:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), 0);
      -[CAMViewfinderViewController _updateFlashButtonAvailability](self, "_updateFlashButtonAvailability");
      break;
    case 1:
      -[CAMViewfinderViewController _updateLivePhotoButtonAnimated:](self, "_updateLivePhotoButtonAnimated:", 0);
      break;
    case 2:
      v6 = -[CAMViewfinderViewController photoModeAspectRatioCrop](self, "photoModeAspectRatioCrop");
      objc_msgSend(v19, "aspectRatioButton");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "setAspectRatio:", v6);
      goto LABEL_9;
    case 3:
      v8 = -[CAMViewfinderViewController _resolvedTimerDuration](self, "_resolvedTimerDuration");
      objc_msgSend(v19, "timerButton");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "setTimerDuration:", v8);
      goto LABEL_9;
    case 4:
      v9 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
      v10 = -[CAMViewfinderViewController _effectFilterTypeForMode:](self, "_effectFilterTypeForMode:", v9);
      v11 = v10 != +[CAMUserPreferences defaultFilterTypeForMode:](CAMUserPreferences, "defaultFilterTypeForMode:", v9);
      objc_msgSend(v19, "filterButton");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "setOn:", v11);
      goto LABEL_9;
    case 5:
      -[CAMViewfinderViewController _updateHDRButtonAnimated:](self, "_updateHDRButtonAnimated:", 0);
      break;
    case 6:
      -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
      -[CAMViewfinderViewController _updatePortraitApertureButtonForGraphConfiguration:zoomFactor:animated:](self, "_updatePortraitApertureButtonForGraphConfiguration:zoomFactor:animated:", v7, 0);
LABEL_9:

      break;
    case 7:
      -[CAMViewfinderViewController _updateIntensityButtonForCurrentState](self, "_updateIntensityButtonForCurrentState");
      break;
    case 8:
      -[CAMViewfinderViewController _updateExposureButtonForCurrentState](self, "_updateExposureButtonForCurrentState");
      break;
    case 9:
      -[CAMViewfinderViewController _updateLowLightControlsAnimated:](self, "_updateLowLightControlsAnimated:", 0);
      break;
    case 10:
      -[CAMViewfinderViewController _updateSemanticStyleControlsForCurrentStateAnimated:](self, "_updateSemanticStyleControlsForCurrentStateAnimated:", 0);
      break;
    case 11:
      objc_msgSend(v19, "smartStyleButton");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "resetButton");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "addTarget:action:forControlEvents:", self, sel__handleSmartStyleResetButton, 64);

      objc_msgSend(v19, "smartStyleButton");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "shutterButton");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "addTarget:action:forControlEvents:", self, sel__handleSmartStyleShutterButtonPressed_, 1);

      -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = objc_msgSend(v16, "wantsSmartStyleResetButton");
      objc_msgSend(v19, "smartStyleButton");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "setResetButtonVisibleWhenExpanded:", v17);

      -[CAMViewfinderViewController _updateSmartStyleControlsForCurrentStateAnimateSliders:animateOtherControls:](self, "_updateSmartStyleControlsForCurrentStateAnimateSliders:animateOtherControls:", 0, 0);
      break;
    case 12:
      -[CAMViewfinderViewController _updateRAWButtonAnimated:](self, "_updateRAWButtonAnimated:", 0);
      break;
    case 13:
      -[CAMViewfinderViewController _updateProResButtonAnimated:](self, "_updateProResButtonAnimated:", 0);
      break;
    case 14:
      -[CAMViewfinderViewController _updateSharedLibraryButtonAnimated:](self, "_updateSharedLibraryButtonAnimated:", 0);
      break;
    case 15:
      -[CAMViewfinderViewController _updateVideoStabilizationButtonAnimated:](self, "_updateVideoStabilizationButtonAnimated:", 0);
      break;
    default:
      break;
  }

}

- (void)controlDrawerDidCreateFilterScrubber:(id)a3
{
  void *v4;
  void *v5;

  objc_msgSend(a3, "filterScrubberView");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setDelegate:", self);

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updateFilterScrubberForGraphConfiguration:](self, "_updateFilterScrubberForGraphConfiguration:", v5);

  -[CUCaptureController registerVideoThumbnailContentsDelegate:](self->__captureController, "registerVideoThumbnailContentsDelegate:", self);
}

- (void)controlDrawerDidCreateApertureSlider:(id)a3
{
  void *v4;
  id v5;

  objc_msgSend(a3, "apertureSlider");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addTarget:action:forControlEvents:", self, sel__apertureSliderDidChangeApertureValue_, 4096);

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
  -[CAMViewfinderViewController _updatePortraitApertureSliderForGraphConfiguration:zoomFactor:](self, "_updatePortraitApertureSliderForGraphConfiguration:zoomFactor:", v5);

}

- (void)controlDrawerDidCreateIntensitySlider:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;

  v4 = a3;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "intensitySlider");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "addTarget:action:forControlEvents:", self, sel__handleIntensitySliderDidChangeValue_, 4096);
  -[CAMViewfinderViewController _updatePortraitIntensitySliderForCurrentState](self, "_updatePortraitIntensitySliderForCurrentState");
  if ((objc_msgSend(v7, "isAspectRatioCropSupportedForMode:devicePosition:", 6, 0) & 1) != 0
    || objc_msgSend(v7, "isAspectRatioCropSupportedForMode:devicePosition:", 6, 1))
  {
    objc_msgSend(v5, "setTransparentGradients");
    objc_msgSend(v5, "tickMarksConfiguration");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setUseTickMarkLegibilityShadows:", 1);

  }
}

- (void)controlDrawerDidCreateExposureSlider:(id)a3
{
  id v4;

  objc_msgSend(a3, "exposureSlider");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addTarget:action:forControlEvents:", self, sel__handleExposureSliderDidChangeValue_, 4096);
  objc_msgSend(v4, "setUseTickMarkLegibilityShadows:", 1);
  -[CAMViewfinderViewController _updateExposureSliderForCurrentState](self, "_updateExposureSliderForCurrentState");

}

- (void)controlDrawerDidCreateLowLightSlider:(id)a3
{
  id v4;

  objc_msgSend(a3, "lowLightSlider");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addTarget:action:forControlEvents:", self, sel__handleLowLightSliderDidChangeValue_, 4096);
  objc_msgSend(v4, "setUseTickMarkLegibilityShadows:", 1);
  -[CAMViewfinderViewController _updateLowLightSlider](self, "_updateLowLightSlider");

}

- (void)controlDrawerDidCreateSemanticStyleControl:(id)a3
{
  id v4;

  objc_msgSend(a3, "semanticStyleControl");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addTarget:action:forControlEvents:", self, sel__handleSemanticStyleControlDidChangeValue_, 4096);
  -[CAMViewfinderViewController _updateSemanticStyleControlsForCurrentStateAnimated:](self, "_updateSemanticStyleControlsForCurrentStateAnimated:", 0);

}

- (void)controlDrawer:(id)a3 didChangeSharedLibraryMode:(int64_t)a4
{
  id v5;

  -[CAMViewfinderViewController _librarySelectionController](self, "_librarySelectionController", a3);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "userDidPickSharedLibraryMode:", a4);

}

- (void)controlDrawer:(id)a3 didChangeValueForControlType:(int64_t)a4
{
  id v5;

  -[CAMViewfinderViewController _analyticsControlDrawerEvent](self, "_analyticsControlDrawerEvent", a3);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "didChangeValueForControlType:", a4);

}

- (void)controlStatusBar:(id)a3 didCreateIndicatorForType:(unint64_t)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  char *v10;
  void *v11;
  void *v12;
  void *v13;
  int64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;

  v6 = a3;
  v19 = v6;
  switch(a4)
  {
    case 0uLL:
      objc_msgSend(v6, "flashIndicator");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "addTarget:action:forControlEvents:", self, sel__handleFlashIndicatorChangedMode_, 4096);

      -[CAMViewfinderViewController _updateFlashButtonForMode:animated:](self, "_updateFlashButtonForMode:animated:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), 0);
      objc_msgSend(v19, "flashIndicator");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = v8;
      v10 = sel__handleFlashIndicatorLongPressed_;
      goto LABEL_19;
    case 1uLL:
      -[CAMViewfinderViewController _updateLivePhotoButtonAnimated:](self, "_updateLivePhotoButtonAnimated:", 0);
      goto LABEL_21;
    case 2uLL:
      -[CAMViewfinderViewController _updateHDRButtonAnimated:](self, "_updateHDRButtonAnimated:", 0);
      goto LABEL_21;
    case 3uLL:
      v14 = -[CAMViewfinderViewController _resolvedTimerDuration](self, "_resolvedTimerDuration");
      objc_msgSend(v19, "timerIndicator");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "setTimerDuration:", v14);

      objc_msgSend(v19, "timerIndicator");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "setShowingValue:", 1);

      goto LABEL_21;
    case 4uLL:
      -[CAMViewfinderViewController _updateFilterButtonOnState](self, "_updateFilterButtonOnState");
      goto LABEL_21;
    case 5uLL:
      -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
      -[CAMViewfinderViewController _updatePortraitApertureButtonForGraphConfiguration:zoomFactor:animated:](self, "_updatePortraitApertureButtonForGraphConfiguration:zoomFactor:animated:", v9, 0);
      goto LABEL_20;
    case 7uLL:
      -[CAMViewfinderViewController _updateExposureButtonForCurrentState](self, "_updateExposureButtonForCurrentState");
      goto LABEL_21;
    case 8uLL:
      -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMViewfinderViewController _updateVideoConfigurationStatusIndicatorForGraphConfiguration:animated:](self, "_updateVideoConfigurationStatusIndicatorForGraphConfiguration:animated:", v17, 0);

      objc_msgSend(v19, "videoConfigurationIndicator");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "setTouchDelegate:", self);
      goto LABEL_20;
    case 9uLL:
      -[CAMViewfinderViewController _updateLowLightControlsAnimated:](self, "_updateLowLightControlsAnimated:", 0);
      goto LABEL_21;
    case 0xAuLL:
      -[CAMViewfinderViewController _updateSemanticStyleControlsForCurrentStateAnimated:](self, "_updateSemanticStyleControlsForCurrentStateAnimated:", 0);
      goto LABEL_21;
    case 0xBuLL:
      -[CAMViewfinderViewController _updateSmartStyleControlsForCurrentStateAnimateSliders:animateOtherControls:](self, "_updateSmartStyleControlsForCurrentStateAnimateSliders:animateOtherControls:", 0, 0);
      -[CAMViewfinderViewController _descriptionOverlayViewByMode](self, "_descriptionOverlayViewByMode");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"));
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "objectForKeyedSubscript:", v12);
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        objc_msgSend(v19, "smartStyleIndicator");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        -[CAMViewfinderViewController _startPulsingAnimationForSmartStyleIndicator:](self, "_startPulsingAnimationForSmartStyleIndicator:", v13);

      }
      goto LABEL_20;
    case 0xCuLL:
      -[CAMViewfinderViewController _updateRAWButtonAnimated:](self, "_updateRAWButtonAnimated:", 0);
      goto LABEL_21;
    case 0xDuLL:
      -[CAMViewfinderViewController _updateProResButtonAnimated:](self, "_updateProResButtonAnimated:", 0);
      goto LABEL_21;
    case 0xEuLL:
      -[CAMViewfinderViewController _updateSharedLibraryButtonAnimated:](self, "_updateSharedLibraryButtonAnimated:", 0);
      goto LABEL_21;
    case 0xFuLL:
      -[CAMViewfinderViewController _updateVideoStabilizationButtonAnimated:](self, "_updateVideoStabilizationButtonAnimated:", 0);
      goto LABEL_21;
    case 0x10uLL:
      objc_msgSend(v6, "photoFormatStatusIndicator");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "addTarget:action:forControlEvents:", self, sel__handlePhotoFormatPickerChangedPhotoFormat_, 4096);

      -[CAMViewfinderViewController _updatePhotoFormatPickerAnimated:](self, "_updatePhotoFormatPickerAnimated:", 0);
      objc_msgSend(v19, "photoFormatStatusIndicator");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = v8;
      v10 = sel__handlePhotoFormatPickerLongPressed_;
LABEL_19:
      objc_msgSend(v8, "addTarget:action:forControlEvents:", self, v10, 0x1000000);
LABEL_20:

LABEL_21:
      v6 = v19;
      break;
    default:
      break;
  }

}

- (void)controlStatusBar:(id)a3 didReceiveTapInIndicatorForType:(unint64_t)a4
{
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  void *v18;
  id v19;
  CAMViewfinderViewController *v20;

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder", a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = MEMORY[0x1E0C809B0];
  v16 = 3221225472;
  v17 = __80__CAMViewfinderViewController_controlStatusBar_didReceiveTapInIndicatorForType___block_invoke;
  v18 = &unk_1EA32A7E8;
  v19 = v6;
  v20 = self;
  v7 = v6;
  v8 = _Block_copy(&v15);
  v13 = v8;
  switch(a4)
  {
    case 0uLL:
      -[CAMViewfinderViewController _handleFlashIndicator](self, "_handleFlashIndicator", v15, v16, v17, v18, v19, v20);
      break;
    case 1uLL:
      -[CAMViewfinderViewController _handleLivePhotoIndicator](self, "_handleLivePhotoIndicator", v15, v16, v17, v18, v19, v20);
      break;
    case 2uLL:
      -[CAMViewfinderViewController _handleHDRIndicator](self, "_handleHDRIndicator", v15, v16, v17, v18, v19, v20);
      break;
    case 3uLL:
      (*((void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v8 + 2))(v8, 3, v9, v10, v11, v12);
      break;
    case 4uLL:
      (*((void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v8 + 2))(v8, 4, v9, v10, v11, v12);
      break;
    case 5uLL:
      (*((void (**)(void *, uint64_t))v8 + 2))(v8, 6);
      -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration", v15, v16, v17, v18, v19, v20);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
      -[CAMViewfinderViewController _updatePortraitApertureButtonForGraphConfiguration:zoomFactor:animated:](self, "_updatePortraitApertureButtonForGraphConfiguration:zoomFactor:animated:", v14, 1);

      break;
    case 6uLL:
      (*((void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v8 + 2))(v8, 7, v9, v10, v11, v12);
      break;
    case 7uLL:
      (*((void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v8 + 2))(v8, 8, v9, v10, v11, v12);
      break;
    case 9uLL:
      -[CAMViewfinderViewController _handleNightModeIndicator](self, "_handleNightModeIndicator", v15, v16, v17, v18, v19, v20);
      break;
    case 0xAuLL:
      (*((void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v8 + 2))(v8, 10, v9, v10, v11, v12);
      break;
    case 0xBuLL:
      (*((void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v8 + 2))(v8, 11, v9, v10, v11, v12);
      break;
    case 0xCuLL:
      -[CAMViewfinderViewController _handleRAWIndicator](self, "_handleRAWIndicator", v15, v16, v17, v18, v19, v20);
      break;
    case 0xDuLL:
      -[CAMViewfinderViewController _handleProResIndicator](self, "_handleProResIndicator", v15, v16, v17, v18, v19, v20);
      break;
    case 0xEuLL:
      -[CAMViewfinderViewController _handleSharedLibraryIndicator](self, "_handleSharedLibraryIndicator", v15, v16, v17, v18, v19, v20);
      break;
    case 0xFuLL:
      -[CAMViewfinderViewController _handleVideoStabilizationIndicator](self, "_handleVideoStabilizationIndicator", v15, v16, v17, v18, v19, v20);
      break;
    case 0x10uLL:
      -[CAMViewfinderViewController _handlePhotoFormatPickerTapped](self, "_handlePhotoFormatPickerTapped", v15, v16, v17, v18, v19, v20);
      break;
    default:
      break;
  }

}

void __80__CAMViewfinderViewController_controlStatusBar_didReceiveTapInIndicatorForType___block_invoke(uint64_t a1, uint64_t a2)
{
  id v4;

  objc_msgSend(*(id *)(a1 + 32), "controlDrawer");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(*(id *)(a1 + 32), "isControlDrawerPresentedModallyWithControlType:", a2))
  {
    objc_msgSend(*(id *)(a1 + 32), "dismissModalControlDrawerIfNeededForReason:", 1);
  }
  else if (objc_msgSend(v4, "isControlExpandedForType:", a2))
  {
    objc_msgSend(v4, "collapseExpandableButtonsAnimated:updatePreferredDrawerControl:", 1, 1);
  }
  else
  {
    if (a2 == 4)
      objc_msgSend(*(id *)(a1 + 40), "_setWantsFilterScrubberVisible:animated:", 1, 1);
    objc_msgSend(*(id *)(a1 + 32), "presentControlDrawerModally:forReason:controlType:", 1, 1, a2);
  }

}

- (void)controlStatusBar:(id)a3 didChangeExpandingControl:(id)a4 expanded:(BOOL)a5
{
  -[CAMViewfinderViewController updateControlVisibilityAnimated:](self, "updateControlVisibilityAnimated:", 0, a4, a5);
}

- (void)controlStatusBar:(id)a3 willChangeExpandingControl:(id)a4 expanded:(BOOL)a5
{
  id v5;

  if (a5)
  {
    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder", a3, a4);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setControlDrawerExpanded:forReason:animated:", 0, 9, 1);

  }
}

- (void)badgeTray:(id)a3 didCreateBadgeForType:(unint64_t)a4
{
  int64_t v6;
  void *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  void *v11;
  id v12;

  v12 = a3;
  if ((uint64_t)a4 > 15)
  {
    if (a4 == 16)
    {
      -[CAMViewfinderViewController _librarySelectionController](self, "_librarySelectionController");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v7, "sharedLibraryMode");
      objc_msgSend(v12, "sharedLibraryBadge");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "setSharedLibraryMode:", v10);

      goto LABEL_10;
    }
    if (a4 == 32)
    {
      v8 = -[CAMViewfinderViewController _desiredVideoStabilizationMode](self, "_desiredVideoStabilizationMode");
      objc_msgSend(v12, "videoStabilizationBadge");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "setVideoStabilizationMode:", v8);
      goto LABEL_10;
    }
  }
  else
  {
    if (a4 == 2)
    {
      v9 = -[CAMViewfinderViewController _resolvedLivePhotoMode](self, "_resolvedLivePhotoMode");
      objc_msgSend(v12, "livePhotoBadge");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "setIrisMode:", v9);
      goto LABEL_10;
    }
    if (a4 == 4)
    {
      v6 = -[CAMViewfinderViewController _focusAndExposureLockBadgeTypeForCurrentState](self, "_focusAndExposureLockBadgeTypeForCurrentState");
      objc_msgSend(v12, "focusLockBadge");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "setFocusLockType:", v6);
LABEL_10:

    }
  }

}

- (void)_handleFlashIndicator
{
  int64_t v3;
  void *v4;
  void *v5;
  int64_t v6;
  CAMViewfinderViewController *v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "controlStatusBar");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "flashIndicator");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v10, "isExpanded"))
  {
    objc_msgSend(v10, "setExpanded:animated:", 0, 1);
LABEL_10:
    v9 = v10;
    goto LABEL_11;
  }
  if (-[CAMViewfinderViewController _isFlashUnavailableForMode:](self, "_isFlashUnavailableForMode:", v3))
  {
    -[CAMViewfinderViewController _showFlashOrTorchUnavailableAlertView](self, "_showFlashOrTorchUnavailableAlertView");
    goto LABEL_10;
  }
  v6 = -[CAMViewfinderViewController _displayedFlashModeForMode:flashActive:](self, "_displayedFlashModeForMode:flashActive:", v3, 0);
  if ((unint64_t)(v6 - 1) < 2)
  {
    v7 = self;
    v8 = 0;
LABEL_9:
    -[CAMViewfinderViewController _handleUserChangedToFlashMode:](v7, "_handleUserChangedToFlashMode:", v8);
    goto LABEL_10;
  }
  v9 = v10;
  if (!v6)
  {
    v7 = self;
    v8 = 2;
    goto LABEL_9;
  }
LABEL_11:

}

- (void)_handleLivePhotoIndicator
{
  int64_t v3;
  uint64_t v4;
  void *v5;
  int v6;

  v3 = -[CAMViewfinderViewController _resolvedLivePhotoMode](self, "_resolvedLivePhotoMode");
  if (-[CAMViewfinderViewController _isLowLightActiveForCurrentSettings](self, "_isLowLightActiveForCurrentSettings")
    || !v3)
  {
    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "isLivePhotoAutoModeSupported");

    if (v6)
      v4 = 2;
    else
      v4 = 1;
  }
  else
  {
    v4 = 0;
  }
  -[CAMViewfinderViewController _handleUserChangedToLivePhotoMode:](self, "_handleUserChangedToLivePhotoMode:", v4);
}

- (void)_handleHDRIndicator
{
  uint64_t v3;
  void *v4;
  int v5;

  if (-[CAMViewfinderViewController _isLowLightActiveForCurrentSettings](self, "_isLowLightActiveForCurrentSettings")
    || !-[CAMViewfinderViewController _resolvedHDRMode](self, "_resolvedHDRMode"))
  {
    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "isAutomaticHDRSupportedForDevicePosition:", -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"));

    if (v5)
      v3 = 2;
    else
      v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  -[CAMViewfinderViewController _handleUserChangedToHDRMode:](self, "_handleUserChangedToHDRMode:", v3);
}

- (void)_handleNightModeIndicator
{
  -[CAMViewfinderViewController _handleUserChangedToNightMode:](self, "_handleUserChangedToNightMode:", -[CAMViewfinderViewController _resolvedLowLightControlMode](self, "_resolvedLowLightControlMode") == 0);
}

- (void)_handleFlashButtonChangedFlashMode
{
  void *v3;
  uint64_t v4;

  -[CAMViewfinderViewController _flashButton](self, "_flashButton");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "flashMode");

  -[CAMViewfinderViewController _handleUserChangedToFlashMode:](self, "_handleUserChangedToFlashMode:", v4);
}

- (void)_handleUserChangedToFlashMode:(int64_t)a3
{
  unint64_t v5;

  v5 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
  if (v5 <= 9)
  {
    if (((1 << v5) & 0x186) != 0)
    {
      -[CAMViewfinderViewController _setDesiredTorchMode:animated:](self, "_setDesiredTorchMode:animated:", +[CAMCaptureConversions torchModeForFlashMode:](CAMCaptureConversions, "torchModeForFlashMode:", a3), 1);
    }
    else if (((1 << v5) & 0x251) != 0)
    {
      -[CAMViewfinderViewController _setDesiredFlashMode:](self, "_setDesiredFlashMode:", a3);
      if (a3
        && -[CAMViewfinderViewController _shouldDisableCompromisedFlashForDevicePosition:](self, "_shouldDisableCompromisedFlashForDevicePosition:", -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition")))
      {
        -[CAMViewfinderViewController _setDidAcceptCompromisedFlash:](self, "_setDidAcceptCompromisedFlash:", 1);
      }
      -[CAMViewfinderViewController _setFlashAndHDRConflictingControl:](self, "_setFlashAndHDRConflictingControl:", 1);
      -[CAMViewfinderViewController _resolveAndUpdatePotentiallyConflictingControls:animated:](self, "_resolveAndUpdatePotentiallyConflictingControls:animated:", 1, 1);
      -[CAMViewfinderViewController _updateLowLightConflict:isConflicting:](self, "_updateLowLightConflict:isConflicting:", 1, -[CAMViewfinderViewController _resolvedFlashMode](self, "_resolvedFlashMode") != 0);
    }
  }
  -[CAMViewfinderViewController _enableProactiveSuggestionsAnimated:](self, "_enableProactiveSuggestionsAnimated:", 1);
}

- (int64_t)_resolvedVideoStabilizationMode
{
  void *v3;
  int64_t v4;

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = -[CAMViewfinderViewController _resolvedVideoStabilizationModeForVideoConfiguration:](self, "_resolvedVideoStabilizationModeForVideoConfiguration:", objc_msgSend(v3, "videoConfiguration"));

  return v4;
}

- (int64_t)_resolvedVideoStabilizationModeForVideoConfiguration:(int64_t)a3
{
  void *v5;
  void *v6;
  int64_t v7;

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v6, "isVideoStabilizationControlSupportedForMode:device:videoConfiguration:videoEncodingBehavior:trueVideoEnabled:prefersHDR10BitVideo:", objc_msgSend(v5, "mode"), objc_msgSend(v5, "device"), a3, objc_msgSend(v5, "videoEncodingBehavior"), objc_msgSend(v5, "trueVideoEnabled"), objc_msgSend(v5, "prefersHDR10BitVideo")))v7 = -[CAMViewfinderViewController _desiredVideoStabilizationMode](self, "_desiredVideoStabilizationMode");
  else
    v7 = 0;

  return v7;
}

- (void)_setDesiredTorchMode:(int64_t)a3
{
  -[CAMViewfinderViewController _setDesiredTorchMode:animated:](self, "_setDesiredTorchMode:animated:", a3, 0);
}

- (void)_setDesiredTorchMode:(int64_t)a3 animated:(BOOL)a4
{
  id v5;

  if (self->__desiredTorchMode != a3)
  {
    self->__desiredTorchMode = a3;
    -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
    v5 = (id)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _updateTorchModeForGraphConfiguration:animated:](self, "_updateTorchModeForGraphConfiguration:animated:", v5, 1);

  }
}

- (void)_updateTorchModeForGraphConfiguration:(id)a3 animated:(BOOL)a4
{
  -[CAMViewfinderViewController _setResolvedTorchMode:animated:](self, "_setResolvedTorchMode:animated:", -[CAMViewfinderViewController _resolvedTorchModeForGraphConfiguration:](self, "_resolvedTorchModeForGraphConfiguration:", a3), a4);
}

- (int64_t)_resolvedTorchModeForGraphConfiguration:(id)a3
{
  id v4;
  int64_t v5;
  void *v6;
  int v7;
  int64_t v8;

  v4 = a3;
  v5 = -[CAMViewfinderViewController _desiredTorchMode](self, "_desiredTorchMode");
  if (objc_msgSend(v4, "trueVideoEnabled"))
    v5 = +[CAMCaptureConversions torchModeForFlashMode:](CAMCaptureConversions, "torchModeForFlashMode:", -[CAMViewfinderViewController _resolvedFlashMode](self, "_resolvedFlashMode"));
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isTorchAvailable");
  if ((v7 & -[CAMViewfinderViewController _isFlashOrTorchSupportedForGraphConfiguration:](self, "_isFlashOrTorchSupportedForGraphConfiguration:", v4)) != 0)v8 = v5;
  else
    v8 = 0;

  return v8;
}

- (void)_setResolvedTorchMode:(int64_t)a3 animated:(BOOL)a4
{
  _BOOL8 v4;
  int64_t v6;

  if (self->__resolvedTorchMode != a3)
  {
    v4 = a4;
    self->__resolvedTorchMode = a3;
    v6 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
    -[CAMViewfinderViewController _updateFlashButtonForMode:animated:](self, "_updateFlashButtonForMode:animated:", v6, v4);
    -[CAMViewfinderViewController _updateBadgeVisibilityAnimated:](self, "_updateBadgeVisibilityAnimated:", v4);
    -[CAMViewfinderViewController _updateTorchModeOnControllerForMode:](self, "_updateTorchModeOnControllerForMode:", v6);
  }
}

- (void)_updateTorchModeOnControllerForMode:(int64_t)a3
{
  void *v5;
  void *v6;
  int v7;
  int64_t v8;
  int64_t v9;
  id v10;

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v5, "isCapturingVideo") & 1) != 0)
  {
    -[CAMViewfinderViewController _captureController](self, "_captureController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "videoCapturePaused");

    if (!v7)
      return;
  }
  else
  {

  }
  v8 = 0;
  if ((unint64_t)a3 <= 8 && ((1 << a3) & 0x186) != 0)
    v8 = -[CAMViewfinderViewController _resolvedTorchMode](self, "_resolvedTorchMode");
  if (-[CAMViewfinderViewController isPerformingReviewUsingOverlay](self, "isPerformingReviewUsingOverlay"))
    v9 = 0;
  else
    v9 = v8;
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "changeToTorchMode:", v9);

}

- (void)_handleFlashIndicatorChangedMode:(id)a3
{
  -[CAMViewfinderViewController _handleUserChangedToFlashMode:](self, "_handleUserChangedToFlashMode:", objc_msgSend(a3, "flashMode"));
}

- (void)_handleFlashIndicatorLongPressed:(id)a3
{
  id v3;

  v3 = a3;
  if ((objc_msgSend(v3, "isExpanded") & 1) == 0 && (objc_msgSend(v3, "isFlashUnavailable") & 1) == 0)
    objc_msgSend(v3, "setExpanded:animated:", 1, 1);

}

- (id)_flashOrTorchDisabledMessageForCurrentPowerPressure
{
  void *v2;
  int v3;
  const __CFString *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  -[CAMViewfinderViewController _powerController](self, "_powerController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "powerPressureLevel");

  if (v3)
    v4 = CFSTR("FLASH_DISABLED_POWER_PRESSURE_MESSAGE_%@");
  else
    v4 = CFSTR("FLASH_DISABLED_MESSAGE_%@");
  v5 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend(MEMORY[0x1E0DC3708], "currentDevice");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "model");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "stringWithValidatedFormat:validFormatSpecifiers:error:", v4, CFSTR("%@"), 0, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  CAMLocalizedFrameworkString(v8, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

- (void)_showFlashOrTorchUnavailableAlertView
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  void *v12;
  id v13;
  id location;

  -[CAMViewfinderViewController _flashOrTorchUnavailableAlertController](self, "_flashOrTorchUnavailableAlertController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v3)
  {
    CAMLocalizedFrameworkString(CFSTR("FLASH_DISABLED_TITLE"), 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    CAMLocalizedFrameworkString(CFSTR("OK_REPLY"), 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _flashOrTorchDisabledMessageForCurrentPowerPressure](self, "_flashOrTorchDisabledMessageForCurrentPowerPressure");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0DC3450], "alertControllerWithTitle:message:preferredStyle:", v4, v6, 1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_initWeak(&location, self);
    v7 = (void *)MEMORY[0x1E0DC3448];
    v9 = MEMORY[0x1E0C809B0];
    v10 = 3221225472;
    v11 = __68__CAMViewfinderViewController__showFlashOrTorchUnavailableAlertView__block_invoke;
    v12 = &unk_1EA32A810;
    objc_copyWeak(&v13, &location);
    objc_msgSend(v7, "actionWithTitle:style:handler:", v5, 0, &v9);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "addAction:", v8, v9, v10, v11, v12);
    objc_msgSend(v3, "setPreferredAction:", v8);
    -[CAMViewfinderViewController _setFlashOrTorchUnavailableAlertController:](self, "_setFlashOrTorchUnavailableAlertController:", v3);
    -[CAMViewfinderViewController presentViewController:animated:completion:](self, "presentViewController:animated:completion:", v3, 1, 0);

    objc_destroyWeak(&v13);
    objc_destroyWeak(&location);

  }
}

void __68__CAMViewfinderViewController__showFlashOrTorchUnavailableAlertView__block_invoke(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_setFlashOrTorchUnavailableAlertController:", 0);

}

- (void)_handleHDRButtonChangedHDRMode
{
  void *v3;
  uint64_t v4;

  -[CAMViewfinderViewController _HDRButton](self, "_HDRButton");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "HDRMode");

  -[CAMViewfinderViewController _handleUserChangedToHDRMode:](self, "_handleUserChangedToHDRMode:", v4);
}

- (void)_handleUserChangedToHDRMode:(int64_t)a3
{
  int64_t v4;
  void *v5;
  uint64_t v6;
  id v7;

  -[CAMViewfinderViewController _setDesiredHDRMode:](self, "_setDesiredHDRMode:", a3);
  -[CAMViewfinderViewController _setFlashAndHDRConflictingControl:](self, "_setFlashAndHDRConflictingControl:", 2);
  -[CAMViewfinderViewController _resolveAndUpdatePotentiallyConflictingControls:animated:](self, "_resolveAndUpdatePotentiallyConflictingControls:animated:", 1, 1);
  v4 = -[CAMViewfinderViewController _resolvedHDRMode](self, "_resolvedHDRMode");
  -[CAMViewfinderViewController _updateLowLightConflict:isConflicting:](self, "_updateLowLightConflict:isConflicting:", 2, v4 != 0);
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "shouldSuspendVideoHDRForHDRMode:captureMode:", v4, -[CAMViewfinderViewController _currentMode](self, "_currentMode"));

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "changeToVideoHDRSuspended:", v6);

}

- (void)_updateHDRButtonAnimated:(BOOL)a3
{
  _BOOL8 v3;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;

  v3 = a3;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v18 = (id)objc_claimAutoreleasedReturnValue();
  v5 = -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition");
  v6 = objc_msgSend(v18, "isHDROnSupportedForDevicePosition:", v5);
  v7 = objc_msgSend(v18, "isAutomaticHDRSupportedForDevicePosition:", v5);
  v8 = -[CAMViewfinderViewController _resolvedHDRMode](self, "_resolvedHDRMode");
  if (-[CAMViewfinderViewController _isLowLightActiveForCurrentSettings](self, "_isLowLightActiveForCurrentSettings"))
    v8 = 0;
  -[CAMViewfinderViewController _HDRButton](self, "_HDRButton");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setHDRMode:", v8);

  -[CAMViewfinderViewController _HDRButton](self, "_HDRButton");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setAllowsHDROn:", v6);

  -[CAMViewfinderViewController _HDRButton](self, "_HDRButton");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "setAllowsAutomaticHDR:needsReloadData:", v7, 1);

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "controlStatusBar");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "hdrIndicator");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  -[CAMViewfinderViewController _controlDrawer](self, "_controlDrawer");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "hdrButton");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v16, "setHDRMode:animated:", v8, v3);
  objc_msgSend(v16, "setAllowAutoHDR:", v7);
  objc_msgSend(v16, "setAllowHDROn:", v6);
  objc_msgSend(v14, "setHDRMode:animated:", v8, v3);
  objc_msgSend(v14, "setAutoHDRAllowed:", v7);
  -[CAMViewfinderViewController _remoteShutterController](self, "_remoteShutterController");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setHdrMode:", v8);

}

- (void)_resolvePotentiallyConflictingControlsForMode:(int64_t)a3 device:(int64_t)a4 resolvedFlashMode:(int64_t *)a5 resolvedHDRMode:(int64_t *)a6 resolvedLivePhotoMode:(int64_t *)a7 resolvedRAWMode:(int64_t *)a8 resolvedPhotoResolution:(int64_t *)a9
{
  void *v16;
  uint64_t v17;
  void *v18;
  _BOOL4 v19;
  int v20;
  int v21;
  _BOOL4 v22;
  int v23;
  _BOOL4 v24;
  int v25;
  void *v26;
  int64_t v27;
  int64_t v28;
  int64_t v29;
  int64_t v30;
  int64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  void *v36;
  void *v37;
  int64_t v38;
  int64_t v39;
  int v40;
  unint64_t v41;
  int v42;
  int64_t *v43;
  int64_t *v44;
  int64_t *v45;
  int64_t *v46;
  void *v47;
  void *v48;
  int64_t v49;
  int64_t v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  int64_t v54;

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v45 = a7;
  v46 = a8;
  v43 = a5;
  v44 = a6;
  if ((unint64_t)(a4 - 1) > 0xA)
    v17 = 0;
  else
    v17 = qword_1DB9A53B8[a4 - 1];
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v42 = objc_msgSend(v18, "isAutomaticHDRSupportedForDevicePosition:", v17);
  v40 = objc_msgSend(v18, "isHDROnSupportedForDevicePosition:", v17);
  v19 = -[CAMViewfinderViewController _isLivePhotoSupportedForMode:device:](self, "_isLivePhotoSupportedForMode:device:", a3, a4);
  v20 = objc_msgSend(v18, "isHDRSupportedForMode:devicePosition:", a3, v17);
  v21 = objc_msgSend(v18, "isFlashOrTorchSupportedForMode:devicePosition:", a3, v17);
  v22 = -[CAMViewfinderViewController isEmulatingImagePicker](self, "isEmulatingImagePicker");
  v48 = v16;
  v23 = objc_msgSend(v16, "isFlashAvailable");
  v24 = -[CAMViewfinderViewController _shouldDisableCompromisedFlashForDevicePosition:](self, "_shouldDisableCompromisedFlashForDevicePosition:", v17);
  if (v21)
    v25 = v23 & !v24;
  else
    v25 = 0;
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v47 = v26;
  if (objc_msgSend(v18, "isLinearDNGSupportedForMode:", a3)
    && objc_msgSend(v26, "rawControlEnabled"))
  {
    v27 = -[CAMViewfinderViewController _desiredRAWMode](self, "_desiredRAWMode");
  }
  else
  {
    v27 = 0;
  }
  v54 = v27;
  if (-[CAMViewfinderViewController _arePhotoFormatConflictsSupportedForMode:device:](self, "_arePhotoFormatConflictsSupportedForMode:device:", a3, a4))
  {
    v41 = -[CAMViewfinderViewController _photoFormatConflicts](self, "_photoFormatConflicts");
    if (!v25)
    {
LABEL_13:
      v28 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    v41 = 0;
    if (!v25)
      goto LABEL_13;
  }
  v28 = -[CAMViewfinderViewController _desiredFlashMode](self, "_desiredFlashMode");
LABEL_16:
  v53 = v28;
  if (((v20 ^ 1 | v22) & 1) != 0)
    v29 = 0;
  else
    v29 = -[CAMViewfinderViewController _desiredHDRMode](self, "_desiredHDRMode");
  if (!v19 || v22)
    v30 = 0;
  else
    v30 = -[CAMViewfinderViewController _desiredLivePhotoMode](self, "_desiredLivePhotoMode");
  v31 = -[CAMViewfinderViewController _desiredPhotoResolution](self, "_desiredPhotoResolution");
  if (objc_msgSend(v18, "isModernHDRSupported")
    && objc_msgSend(v47, "shouldUseModernHDRBehavior"))
  {
    if (objc_msgSend(v18, "isSmartHDRSupported"))
      v32 = 1;
    else
      v32 = 2;
  }
  else
  {
    if (v29 == 2)
      v33 = v42;
    else
      v33 = 1;
    if (v33 == 1)
    {
      if (v29 == 1)
        v34 = v40;
      else
        v34 = 1;
      v35 = 2;
      if (!v42)
        v35 = 0;
      if (v34)
        v32 = v29;
      else
        v32 = v35;
    }
    else
    {
      v32 = 0;
    }
  }
  v52 = v28;
  v50 = v30;
  v51 = v32;
  v49 = v31;
  if (objc_msgSend(v48, "isCapturingBurst"))
  {
    v52 = 0;
    v50 = 0;
    v51 = 0;
    v54 = 0;
    v49 = 0;
    v37 = v47;
    v36 = v48;
  }
  else
  {
    if (-[CAMViewfinderViewController _isBurstEndSoundPlaying](self, "_isBurstEndSoundPlaying"))
      v38 = 0;
    else
      v38 = v30;
    +[CAMConflictingControlConfiguration resolveDesiredRAWMode:photoFormatConflicts:desiredLivePhotoMode:desiredFlashMode:toRAWMode:toLivePhotoMode:toFlashMode:](CAMConflictingControlConfiguration, "resolveDesiredRAWMode:photoFormatConflicts:desiredLivePhotoMode:desiredFlashMode:toRAWMode:toLivePhotoMode:toFlashMode:", v27, v41, v38, v28, &v54, &v50, &v53);
    v39 = -[CAMViewfinderViewController _flashAndHDRConflictingControl](self, "_flashAndHDRConflictingControl");
    +[CAMConflictingControlConfiguration resolveDesiredFlashMode:desiredHDRMode:primaryConflictingControl:device:toFlashMode:HDRMode:](CAMConflictingControlConfiguration, "resolveDesiredFlashMode:desiredHDRMode:primaryConflictingControl:device:toFlashMode:HDRMode:", v53, v32, v39, a4, &v52, &v51);
    v37 = v47;
    objc_msgSend(v47, "resolveDesiredPhotoResolution:livePhotoMode:rawMode:conflicts:mode:device:resolvedPhotoResolution:resolvedLivePhotoMode:", v31, v50, v54, v41, a3, a4, &v49, &v50);
    v36 = v48;
  }
  if (v43)
    *v43 = v52;
  if (v44)
    *v44 = v51;
  if (v45)
    *v45 = v50;
  if (v46)
    *v46 = v54;
  if (a9)
    *a9 = v49;

}

- (void)_resolveAndUpdatePotentiallyConflictingControls:(BOOL)a3 animated:(BOOL)a4
{
  _BOOL8 v4;
  _BOOL4 v5;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a4;
  v5 = a3;
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "mode");
  v13 = 0;
  v14 = 0;
  v11 = 0;
  v12 = 0;
  v10 = 0;
  -[CAMViewfinderViewController _resolvePotentiallyConflictingControlsForMode:device:resolvedFlashMode:resolvedHDRMode:resolvedLivePhotoMode:resolvedRAWMode:resolvedPhotoResolution:](self, "_resolvePotentiallyConflictingControlsForMode:device:resolvedFlashMode:resolvedHDRMode:resolvedLivePhotoMode:resolvedRAWMode:resolvedPhotoResolution:", v8, objc_msgSend(v7, "device"), &v14, &v13, &v12, &v11, &v10);
  -[CAMViewfinderViewController _setResolvedFlashMode:](self, "_setResolvedFlashMode:", v14);
  -[CAMViewfinderViewController _setResolvedHDRMode:](self, "_setResolvedHDRMode:", v13);
  -[CAMViewfinderViewController _setResolvedLivePhotoMode:](self, "_setResolvedLivePhotoMode:", v12);
  -[CAMViewfinderViewController _setResolvedRAWMode:](self, "_setResolvedRAWMode:", v11);
  -[CAMViewfinderViewController _setResolvedPhotoResolution:](self, "_setResolvedPhotoResolution:", v10);
  -[CAMViewfinderViewController _updateResolvedMacroModeAndUpdateFallbackPrimaryConstituentDeviceSelection:](self, "_updateResolvedMacroModeAndUpdateFallbackPrimaryConstituentDeviceSelection:", 1);
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v9, "isProResVideoSupportedForMode:", v8)
    && (objc_msgSend(v9, "isProResVideoSupportedForMode:videoConfiguration:outputToExternalStorage:", v8, objc_msgSend(v7, "videoConfiguration"), -[CAMViewfinderViewController _wantsExternalStorageOutputEnabledForMode:videoEncodingBehavior:](self, "_wantsExternalStorageOutputEnabledForMode:videoEncodingBehavior:", v8, objc_msgSend(v7, "videoEncodingBehavior"))) & 1) == 0)
  {
    -[CAMViewfinderViewController _setDesiredProResVideoMode:](self, "_setDesiredProResVideoMode:", 0);
  }
  -[CAMViewfinderViewController _updateFlashButtonForMode:animated:](self, "_updateFlashButtonForMode:animated:", v8, v4);
  -[CAMViewfinderViewController _updateHDRButtonAnimated:](self, "_updateHDRButtonAnimated:", v4);
  -[CAMViewfinderViewController _updateLivePhotoButtonAnimated:](self, "_updateLivePhotoButtonAnimated:", v4);
  -[CAMViewfinderViewController _updateRAWButtonAnimated:](self, "_updateRAWButtonAnimated:", v4);
  -[CAMViewfinderViewController _updateProResButtonAnimated:](self, "_updateProResButtonAnimated:", v4);
  -[CAMViewfinderViewController _updateVideoStabilizationButtonAnimated:](self, "_updateVideoStabilizationButtonAnimated:", v4);
  -[CAMViewfinderViewController _updatePhotoFormatPickerAnimated:](self, "_updatePhotoFormatPickerAnimated:", v4);
  -[CAMViewfinderViewController _updatePreviewSemanticStyleAnimated:](self, "_updatePreviewSemanticStyleAnimated:", v4);
  -[CAMViewfinderViewController _updateSemanticStyleControlsForCurrentStateAnimated:](self, "_updateSemanticStyleControlsForCurrentStateAnimated:", v4);
  -[CAMViewfinderViewController _updateSmartStyleOnSession](self, "_updateSmartStyleOnSession");
  -[CAMViewfinderViewController _updateSmartStyleControlsForCurrentStateAnimateSliders:animateOtherControls:](self, "_updateSmartStyleControlsForCurrentStateAnimateSliders:animateOtherControls:", 0, v4);
  -[CAMViewfinderViewController _updatePortraitModeInstructionLabelForCurrentState](self, "_updatePortraitModeInstructionLabelForCurrentState");
  -[CAMViewfinderViewController _updatePairedVideoCaptureOnControllerForGraphConfiguration:isShowingCameraRoll:](self, "_updatePairedVideoCaptureOnControllerForGraphConfiguration:isShowingCameraRoll:", v7, -[CAMViewfinderViewController _isShowingCameraRoll](self, "_isShowingCameraRoll"));
  if (v5)
    -[CAMViewfinderViewController updateControlVisibilityAnimated:](self, "updateControlVisibilityAnimated:", 1);
  -[CAMViewfinderViewController _updateBadgeVisibilityAnimated:](self, "_updateBadgeVisibilityAnimated:", 1);
  -[CAMViewfinderViewController _updateFlashModeOnControllerForMode:](self, "_updateFlashModeOnControllerForMode:", v8);
  -[CAMViewfinderViewController _updateHDRSuggestionMonitoringForGraphConfiguration:](self, "_updateHDRSuggestionMonitoringForGraphConfiguration:", v7);
  -[CAMViewfinderViewController _updateCurrentPreviewFiltersOnCaptureController](self, "_updateCurrentPreviewFiltersOnCaptureController");
  -[CAMViewfinderViewController _updatePreviewControllerIndicatorStyle](self, "_updatePreviewControllerIndicatorStyle");
  -[CAMViewfinderViewController _updatePreviewControllerPortraitStatus](self, "_updatePreviewControllerPortraitStatus");
  -[CAMViewfinderViewController _preparePhotoOutputForExpectedPhotoResolution](self, "_preparePhotoOutputForExpectedPhotoResolution");

}

- (void)_updateFlashModeOnControllerForMode:(int64_t)a3
{
  int64_t v4;
  id v5;

  v4 = 0;
  if ((unint64_t)a3 <= 6 && ((1 << a3) & 0x51) != 0)
    v4 = -[CAMViewfinderViewController _resolvedFlashMode](self, "_resolvedFlashMode");
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "changeToFlashMode:", v4);

}

- (int64_t)_displayedFlashModeForMode:(int64_t)a3 flashActive:(BOOL *)a4
{
  void *v7;
  int v8;
  char v9;
  int64_t v10;
  int v11;
  int64_t v12;
  uint64_t v13;
  BOOL v14;
  int64_t v15;
  BOOL v16;

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isFlashActive");
  v9 = objc_msgSend(v7, "isTorchActive");
  v10 = -[CAMViewfinderViewController _resolvedFlashMode](self, "_resolvedFlashMode");
  if ((unint64_t)a3 > 9)
    goto LABEL_8;
  if (((1 << a3) & 0x186) != 0)
  {
    v10 = +[CAMCaptureConversions flashModeForTorchMode:](CAMCaptureConversions, "flashModeForTorchMode:", -[CAMViewfinderViewController _resolvedTorchMode](self, "_resolvedTorchMode"));
    goto LABEL_10;
  }
  if (((1 << a3) & 0x51) == 0)
  {
    v10 = 0;
LABEL_8:
    v9 = 0;
    goto LABEL_10;
  }
  v11 = objc_msgSend(v7, "isCapturingVideo");
  if (((v11 | v8) & 1) != 0)
    v9 |= v11 ^ 1;
  else
    v9 = -[CAMViewfinderViewController _resolvedFlashMode](self, "_resolvedFlashMode") == 1;
LABEL_10:
  v12 = -[CAMViewfinderViewController _resolvedLowLightMode](self, "_resolvedLowLightMode");
  v13 = 2;
  if (v10 != 1)
    v13 = v10;
  if (v12 == 1)
  {
    v14 = 0;
  }
  else
  {
    v13 = v10;
    v14 = v9;
  }
  if (v12 == 2)
    v15 = 0;
  else
    v15 = v13;
  if (v12 == 2)
    v16 = v9;
  else
    v16 = v14;
  if (a4)
    *a4 = v16;

  return v15;
}

- (void)_updateFlashButtonForMode:(int64_t)a3 animated:(BOOL)a4
{
  _BOOL8 v4;
  int64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  unsigned __int8 v14;

  v4 = a4;
  v14 = 0;
  v6 = -[CAMViewfinderViewController _displayedFlashModeForMode:flashActive:](self, "_displayedFlashModeForMode:flashActive:", a3, &v14);
  -[CAMViewfinderViewController _flashButton](self, "_flashButton");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setFlashMode:", v6);

  -[CAMViewfinderViewController _controlDrawer](self, "_controlDrawer");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "flashButton");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setFlashMode:animated:", v6, v4);

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "controlStatusBar");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "flashIndicator");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v12, "setFlashActive:", v14);
  objc_msgSend(v12, "setFlashMode:animated:", v6, v4);
  -[CAMViewfinderViewController _remoteShutterController](self, "_remoteShutterController");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setFlashMode:", v6);

}

- (void)_handleSharedLibraryIndicator
{
  uint64_t v3;
  id v4;

  -[CAMViewfinderViewController _librarySelectionController](self, "_librarySelectionController");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  if (CAMSharedLibraryModeIsOn(objc_msgSend(v4, "sharedLibraryMode")))
    v3 = 3;
  else
    v3 = 2;
  objc_msgSend(v4, "userDidPickSharedLibraryMode:", v3);
  -[CAMViewfinderViewController _startTimer:](self, "_startTimer:", 1);
  -[CAMViewfinderViewController _updateBadgeVisibilityAnimated:](self, "_updateBadgeVisibilityAnimated:", 1);

}

- (void)_updateSharedLibraryButtonAnimated:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  UILongPressGestureRecognizer *sharedLibraryLongPressGestureRecognizer;
  UILongPressGestureRecognizer *v14;
  UILongPressGestureRecognizer *v15;
  void *v16;
  id v17;

  v3 = a3;
  -[CAMViewfinderViewController _librarySelectionController](self, "_librarySelectionController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "sharedLibraryMode");

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "controlStatusBar");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "sharedLibraryIndicator");
  v17 = (id)objc_claimAutoreleasedReturnValue();

  -[CAMViewfinderViewController _controlDrawer](self, "_controlDrawer");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "sharedLibraryButton");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v17, "setSharedLibraryMode:animated:", v6, v3);
  objc_msgSend(v10, "setSharedLibraryMode:animated:", v6, v3);
  -[CAMViewfinderViewController _sharedLibraryButton](self, "_sharedLibraryButton");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "setSharedLibraryMode:", v6);

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v12, "isInternalInstall"))
  {
    sharedLibraryLongPressGestureRecognizer = self->__sharedLibraryLongPressGestureRecognizer;

    if (sharedLibraryLongPressGestureRecognizer)
      goto LABEL_5;
    v14 = (UILongPressGestureRecognizer *)objc_msgSend(objc_alloc(MEMORY[0x1E0DC39C8]), "initWithTarget:action:", self, sel__sharedLibraryTapToRadarAction);
    v15 = self->__sharedLibraryLongPressGestureRecognizer;
    self->__sharedLibraryLongPressGestureRecognizer = v14;

    -[UILongPressGestureRecognizer setDelegate:](self->__sharedLibraryLongPressGestureRecognizer, "setDelegate:", self);
    objc_msgSend(v17, "addGestureRecognizer:", self->__sharedLibraryLongPressGestureRecognizer);
    -[CAMViewfinderViewController _sharedLibraryButton](self, "_sharedLibraryButton");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "addGestureRecognizer:", self->__sharedLibraryLongPressGestureRecognizer);
  }

LABEL_5:
  -[CAMViewfinderViewController _remoteShutterController](self, "_remoteShutterController");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (-[CAMViewfinderViewController _isCapturingFromTimer](self, "_isCapturingFromTimer"))
    v6 = -[CAMViewfinderViewController _cachedSharedLibraryTimerState](self, "_cachedSharedLibraryTimerState");
  objc_msgSend(v16, "setSharedLibraryMode:", v6);

}

- (void)_updateSharedLibraryBadgeForCurrentState
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  -[CAMViewfinderViewController _librarySelectionController](self, "_librarySelectionController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "sharedLibraryMode");

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "badgeTray");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "sharedLibraryBadge");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setSharedLibraryMode:", v4);

  -[CAMViewfinderViewController _sharedLibraryBadge](self, "_sharedLibraryBadge");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setSharedLibraryMode:", v4);

  -[CAMViewfinderViewController _updateBadgeVisibilityAnimated:](self, "_updateBadgeVisibilityAnimated:", 1);
}

- (void)_updateSharedLibraryImageWellIndicatorForCurrentState
{
  void *v3;
  void *v4;
  id v5;

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "sharedLibraryImageWellIndicatorView");
  v5 = (id)objc_claimAutoreleasedReturnValue();

  -[CAMViewfinderViewController _librarySelectionController](self, "_librarySelectionController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setSharedLibraryMode:", objc_msgSend(v4, "sharedLibraryMode"));

}

- (void)_sharedLibraryTapToRadarAction
{
  void *v3;
  void *v4;
  void *v5;
  id v6;

  -[CAMViewfinderViewController _sharedLibraryButton](self, "_sharedLibraryButton");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "touchingGestureRecognizer");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "cancelGesture");

  -[CAMViewfinderViewController _librarySelectionController](self, "_librarySelectionController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "tapToRadarAlertController");
  v6 = (id)objc_claimAutoreleasedReturnValue();

  -[CAMViewfinderViewController presentViewController:animated:completion:](self, "presentViewController:animated:completion:", v6, 1, 0);
}

- (void)librarySelectionDidChangeSharedLibraryMode:(int64_t)a3
{
  NSObject *v4;
  uint8_t v5[16];

  if (-[CAMViewfinderViewController _isCapturingFromTimer](self, "_isCapturingFromTimer", a3))
  {
    v4 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_1DB760000, v4, OS_LOG_TYPE_DEFAULT, "Library selection controller changed shared library mode when timer was active, not updating shared library state", v5, 2u);
    }

  }
  else
  {
    -[CAMViewfinderViewController _startTimer:](self, "_startTimer:", 1);
    -[CAMViewfinderViewController _updateSharedLibraryButtonAnimated:](self, "_updateSharedLibraryButtonAnimated:", 1);
    -[CAMViewfinderViewController _updateSharedLibraryBadgeForCurrentState](self, "_updateSharedLibraryBadgeForCurrentState");
    -[CAMViewfinderViewController _updateSharedLibraryImageWellIndicatorForCurrentState](self, "_updateSharedLibraryImageWellIndicatorForCurrentState");
  }
}

- (void)_updateLivePhotoButtonAnimated:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  _BOOL4 v6;
  int64_t v7;
  _BOOL4 v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;

  v3 = a3;
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[CAMViewfinderViewController _isLivePhotoSupportedForGraphConfiguration:](self, "_isLivePhotoSupportedForGraphConfiguration:", v5);

  v7 = -[CAMViewfinderViewController _resolvedLivePhotoMode](self, "_resolvedLivePhotoMode");
  v8 = -[CAMViewfinderViewController _isLowLightActiveForCurrentSettings](self, "_isLowLightActiveForCurrentSettings");
  if (v6)
  {
    if (v8)
      v7 = 0;
    -[CAMViewfinderViewController _livePhotoButton](self, "_livePhotoButton");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setLivePhotoMode:", v7);

    -[CAMViewfinderViewController _livePhotoBadge](self, "_livePhotoBadge");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setIrisMode:", v7);

    -[CAMViewfinderViewController _controlDrawer](self, "_controlDrawer");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "livePhotoButton");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "setLivePhotoMode:animated:", v7, v3);

    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "badgeTray");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "livePhotoBadge");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "setIrisMode:", v7);

    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "controlStatusBar");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "livePhotoIndicator");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "setLivePhotoMode:animated:", v7, v3);

    -[CAMViewfinderViewController _remoteShutterController](self, "_remoteShutterController");
    v19 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "setIrisMode:", v7);

  }
}

- (void)_pausePairedVideoCaptureOnControllerIfNecessaryForGraphConfiguration:(id)a3 isShowingCameraRoll:(BOOL)a4
{
  _BOOL8 v4;
  id v6;
  id v7;

  v4 = a4;
  v6 = a3;
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  LODWORD(v4) = -[CAMViewfinderViewController _shouldPauseCapturingStillImagePairedVideoForGraphConfiguration:isShowingCameraRoll:](self, "_shouldPauseCapturingStillImagePairedVideoForGraphConfiguration:isShowingCameraRoll:", v6, v4);

  if (v4)
    objc_msgSend(v7, "pauseCapturingStillImagePairedVideo");

}

- (int64_t)_aspectRatioCropForMode:(int64_t)a3 devicePosition:(int64_t)a4
{
  void *v7;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(a4) = objc_msgSend(v7, "isAspectRatioCropSupportedForMode:devicePosition:", a3, a4);

  if ((_DWORD)a4 && (a3 == 6 || !a3))
    return -[CAMViewfinderViewController photoModeAspectRatioCrop](self, "photoModeAspectRatioCrop");
  else
    return 0;
}

- (void)_handleUserChangedToAspectRatioCrop:(int64_t)a3
{
  int64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  -[CAMViewfinderViewController setPhotoModeAspectRatioCrop:](self, "setPhotoModeAspectRatioCrop:");
  v5 = -[CAMViewfinderViewController _aspectRatioForMode:devicePosition:](self, "_aspectRatioForMode:devicePosition:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"));
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setViewportAspectRatio:animated:", v5, 1);
  -[CAMViewfinderViewController _prominentObjectManager](self, "_prominentObjectManager");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setViewportAspectRatio:", v5);

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "changeToAspectRatioCrop:", a3);

  -[CAMViewfinderViewController _updateExposureSliderForCurrentState](self, "_updateExposureSliderForCurrentState");
  -[CAMViewfinderViewController _updateShutterButtonLegibility](self, "_updateShutterButtonLegibility");
  objc_msgSend(v10, "controlDrawer");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "aspectRatioButton");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setAspectRatio:", a3);

}

- (void)_suppressProactiveSuggestionAnimated:(BOOL)a3
{
  -[CAMViewfinderViewController _setProactiveFlashSuggestionSuppressed:](self, "_setProactiveFlashSuggestionSuppressed:", 1);
}

- (void)_enableProactiveSuggestionsAnimated:(BOOL)a3
{
  -[CAMViewfinderViewController _setProactiveFlashSuggestionSuppressed:](self, "_setProactiveFlashSuggestionSuppressed:", 0);
}

- (int64_t)_videoConfigurationResolutionForGraphConfiguration:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v16;

  v4 = a3;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v4, "mode");
  v7 = objc_msgSend(v4, "device");
  v8 = objc_msgSend(v4, "videoEncodingBehavior");
  v9 = objc_msgSend(v4, "videoConfiguration");
  v10 = -[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled");
  v11 = objc_msgSend(v4, "enableStereoVideoCapture");
  LOBYTE(v16) = objc_msgSend(v4, "prefersHDR10BitVideo");
  v12 = objc_msgSend(v5, "resolvedVideoConfigurationForMode:device:videoEncodingBehavior:videoConfiguration:outputToExternalStorage:spatialVideoEnabled:prefersHDR10BitVideo:", v6, v7, v8, v9, v10, v11, v16);

  if (v12 > 0xE)
    goto LABEL_8;
  if (((1 << v12) & 0x7620) != 0)
  {
    v14 = objc_msgSend(v4, "videoStabilizationStrength");
    if (v14 <= 3)
    {
      v13 = qword_1DB9A52A0[v14];
      goto LABEL_9;
    }
LABEL_8:
    v13 = 0;
    goto LABEL_9;
  }
  if (((1 << v12) & 0x992) != 0)
    v13 = 2;
  else
    v13 = ((1 << v12) & 0x4C) != 0;
LABEL_9:

  return v13;
}

- (int64_t)_videoConfigurationFramerateForGraphConfiguration:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v15;

  v4 = a3;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v4, "mode");
  v7 = objc_msgSend(v4, "device");
  v8 = objc_msgSend(v4, "videoEncodingBehavior");
  v9 = objc_msgSend(v4, "videoConfiguration");
  v10 = -[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled");
  v11 = objc_msgSend(v4, "enableStereoVideoCapture");
  v12 = objc_msgSend(v4, "prefersHDR10BitVideo");

  LOBYTE(v15) = v12;
  v13 = objc_msgSend(v5, "resolvedVideoConfigurationForMode:device:videoEncodingBehavior:videoConfiguration:outputToExternalStorage:spatialVideoEnabled:prefersHDR10BitVideo:", v6, v7, v8, v9, v10, v11, v15);

  if ((unint64_t)(v13 - 1) > 0xD)
    return 0;
  else
    return qword_1DB9A52C0[v13 - 1];
}

- (void)_updateVideoConfigurationStatusIndicatorForGraphConfiguration:(id)a3 animated:(BOOL)a4
{
  _BOOL8 v4;
  id v6;
  int64_t v7;
  int64_t v8;
  id v9;

  v4 = a4;
  v6 = a3;
  v7 = -[CAMViewfinderViewController _videoConfigurationResolutionForGraphConfiguration:](self, "_videoConfigurationResolutionForGraphConfiguration:", v6);
  v8 = -[CAMViewfinderViewController _videoConfigurationFramerateForGraphConfiguration:](self, "_videoConfigurationFramerateForGraphConfiguration:", v6);

  if (v7)
  {
    if (v8)
    {
      -[CAMViewfinderViewController _targetVideoConfigurationStatusIndicator](self, "_targetVideoConfigurationStatusIndicator");
      v9 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "setResolution:framerate:animated:", v7, v8, v4);

    }
  }
}

- (void)_handleRAWIndicator
{
  -[CAMViewfinderViewController _handleUserChangedRAWMode:](self, "_handleUserChangedRAWMode:", -[CAMViewfinderViewController _resolvedRAWMode](self, "_resolvedRAWMode") == 0);
}

- (BOOL)_arePhotoFormatConflictsSupportedForMode:(int64_t)a3 device:(int64_t)a4
{
  void *v6;
  void *v7;
  char v8;
  int v9;
  char v10;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v6, "isLinearDNGSupportedForMode:", a3))
    v8 = objc_msgSend(v7, "rawControlEnabled");
  else
    v8 = 0;
  v9 = objc_msgSend(v6, "isPhotoResolutionSupported:forMode:device:photoEncoding:", 3, a3, a4, 1);
  if (v9)
    LOBYTE(v9) = objc_msgSend(v7, "photoFormatControlEnabled");
  v10 = v8 | v9;

  return v10;
}

- (void)_setPhotoFormatConflict:(unint64_t)a3 isConflicting:(BOOL)a4
{
  _BOOL4 v4;
  unint64_t v7;
  unint64_t v8;

  v4 = a4;
  if (-[CAMViewfinderViewController _arePhotoFormatConflictsSupportedForMode:device:](self, "_arePhotoFormatConflictsSupportedForMode:device:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevice](self, "_currentDevice")))
  {
    v7 = -[CAMViewfinderViewController _photoFormatConflicts](self, "_photoFormatConflicts");
    if (v4)
      v8 = v7 | a3;
    else
      v8 = v7 & ~a3;
    -[CAMViewfinderViewController _setPhotoFormatConflicts:](self, "_setPhotoFormatConflicts:", v8);
  }
}

- (void)_handleUserChangedRAWMode:(int64_t)a3
{
  void *v5;

  -[CAMViewfinderViewController _setDesiredRAWMode:](self, "_setDesiredRAWMode:");
  if (a3 == 1)
    -[CAMViewfinderViewController _setPhotoFormatConflicts:](self, "_setPhotoFormatConflicts:", 0);
  -[CAMViewfinderViewController _resolveAndUpdatePotentiallyConflictingControls:animated:](self, "_resolveAndUpdatePotentiallyConflictingControls:animated:", 0, 1);
  -[CAMViewfinderViewController _updateControlStatusBarContentsVisibilityAnimated:](self, "_updateControlStatusBarContentsVisibilityAnimated:", 1);
  -[CAMViewfinderViewController _updateControlDrawerContentsVisibilityAnimated:](self, "_updateControlDrawerContentsVisibilityAnimated:", 1);
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:animated:](self, "_updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:animated:", v5, 1);

  -[CAMViewfinderViewController _updatePhotoFormatPickerAnimated:](self, "_updatePhotoFormatPickerAnimated:", 1);
  -[CAMViewfinderViewController _prepareDeferredProcessingIfNeeded](self, "_prepareDeferredProcessingIfNeeded");
}

- (void)_updateRAWButtonAnimated:(BOOL)a3
{
  _BOOL8 v3;
  int64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v3 = a3;
  v5 = -[CAMViewfinderViewController _resolvedRAWMode](self, "_resolvedRAWMode");
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "controlStatusBar");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "rawIndicator");
  v10 = (id)objc_claimAutoreleasedReturnValue();

  -[CAMViewfinderViewController _controlDrawer](self, "_controlDrawer");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "rawButton");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v9, "setRAWMode:animated:", v5, v3);
  objc_msgSend(v10, "setRAWMode:animated:", v5, v3);

}

- (void)setPhotoResolution:(int64_t)a3
{
  -[CAMViewfinderViewController _handleUserChangedToPhotoFormat:](self, "_handleUserChangedToPhotoFormat:", -[CAMViewfinderViewController _currentPhotoFormat](self, "_currentPhotoFormat"), a3);
}

- ($0AC6E346AE4835514AAA8AC86D8F4844)_essentialPhotoFormat
{
  void *v3;
  uint64_t v4;
  int64_t v5;
  int64_t v6;
  int64_t v7;
  int64_t v8;
  $0AC6E346AE4835514AAA8AC86D8F4844 result;

  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "fallbackPhotoFormatForDesiredFormat:mode:device:", objc_msgSend(v3, "photoEncodingBehavior"), objc_msgSend(v3, "preferredHEICPhotoResolutionForDevicePosition:", -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition")), -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevice](self, "_currentDevice"));
  v6 = v5;

  v7 = v4;
  v8 = v6;
  result.var1 = v8;
  result.var0 = v7;
  return result;
}

- ($0AC6E346AE4835514AAA8AC86D8F4844)_advancedPhotoFormat
{
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  int64_t v6;
  int64_t v7;
  void *v8;
  char v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  int64_t v16;
  int64_t v17;
  _QWORD v18[6];
  uint64_t v19;
  int64_t v20;
  $0AC6E346AE4835514AAA8AC86D8F4844 result;

  v3 = -[CAMViewfinderViewController _desiredAdvancedPhotoFormat](self, "_desiredAdvancedPhotoFormat");
  v5 = v4;
  v6 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
  v7 = -[CAMViewfinderViewController _currentDevice](self, "_currentDevice");
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "isPhotoFormat:enabledForMode:device:", v3, v5, v6, v7);

  if ((v9 & 1) == 0)
  {
    -[CAMViewfinderViewController _enabledPhotoFormatsForMode:device:](self, "_enabledPhotoFormatsForMode:device:", v6, v7);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = -[CAMViewfinderViewController _essentialPhotoFormat](self, "_essentialPhotoFormat");
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = __51__CAMViewfinderViewController__advancedPhotoFormat__block_invoke;
    v18[3] = &__block_descriptor_48_e24_B32__0__NSValue_8Q16_B24l;
    v18[4] = v11;
    v18[5] = v12;
    v13 = objc_msgSend(v10, "indexOfObjectWithOptions:passingTest:", 2, v18);
    if (v13 == 0x7FFFFFFFFFFFFFFFLL)
      v14 = 0;
    else
      v14 = v13;
    objc_msgSend(v10, "objectAtIndexedSubscript:", v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = 0;
    v20 = 0;
    objc_msgSend(v15, "getValue:size:", &v19, 16);
    v3 = v19;
    v5 = v20;

  }
  v16 = v3;
  v17 = v5;
  result.var1 = v17;
  result.var0 = v16;
  return result;
}

BOOL __51__CAMViewfinderViewController__advancedPhotoFormat__block_invoke(uint64_t a1, void *a2)
{
  uint64_t v5;
  uint64_t v6;

  v5 = 0;
  v6 = 0;
  objc_msgSend(a2, "getValue:size:", &v5, 16);
  return v5 != *(_QWORD *)(a1 + 32) || v6 != *(_QWORD *)(a1 + 40);
}

- (void)_handlePhotoFormatPickerTapped
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "_currentGraphConfiguration");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_2_0(&dword_1DB760000, a2, v4, "Photo format picker tapped from unsupported configuration: %{public}@", v5);

  OUTLINED_FUNCTION_1();
}

- (void)_handlePhotoFormatPickerChangedPhotoFormat:(id)a3
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = objc_msgSend(a3, "photoFormat");
  v6 = v5;
  -[CAMViewfinderViewController _setDesiredPhotoFormat:](self, "_setDesiredPhotoFormat:", v4, v5);
  -[CAMViewfinderViewController _handleUserChangedToPhotoFormat:](self, "_handleUserChangedToPhotoFormat:", v4, v6);
}

- (void)_handleUserChangedToPhotoFormat:(id)a3
{
  int64_t var1;
  int64_t var0;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  int v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  void *v19;
  id v20;

  var1 = a3.var1;
  var0 = a3.var0;
  v6 = -[CAMViewfinderViewController _currentPhotoFormat](self, "_currentPhotoFormat");
  v8 = v7;
  v9 = var0 == 2;
  -[CAMViewfinderViewController _setDesiredPhotoResolution:](self, "_setDesiredPhotoResolution:", var1);
  -[CAMViewfinderViewController _setDesiredRAWMode:](self, "_setDesiredRAWMode:", v9);
  if (-[CAMViewfinderViewController _resolvedRAWMode](self, "_resolvedRAWMode") == v9)
  {
    if (var1 == 3)
      -[CAMViewfinderViewController _setPhotoFormatConflict:isConflicting:](self, "_setPhotoFormatConflict:isConflicting:", 2, 0);
    -[CAMViewfinderViewController _resolveAndUpdatePotentiallyConflictingControls:animated:](self, "_resolveAndUpdatePotentiallyConflictingControls:animated:", 1, 1);
    -[CAMViewfinderViewController _prepareDeferredProcessingIfNeeded](self, "_prepareDeferredProcessingIfNeeded");
  }
  else
  {
    -[CAMViewfinderViewController _handleUserChangedRAWMode:](self, "_handleUserChangedRAWMode:", v9);
  }
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updateZoomControlLayoutForGraphConfiguration:fromGraphConfiguration:animated:](self, "_updateZoomControlLayoutForGraphConfiguration:fromGraphConfiguration:animated:", v10, v11, 1);

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v20 = (id)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v20, "isDepthSuggestionSupportedForMode:devicePosition:photoFormat:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"), v6, v8);
  v13 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
  v14 = -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition");
  v15 = -[CAMViewfinderViewController _currentPhotoFormat](self, "_currentPhotoFormat");
  LODWORD(v14) = objc_msgSend(v20, "isDepthSuggestionSupportedForMode:devicePosition:photoFormat:", v13, v14, v15, v16);
  v17 = objc_msgSend(v20, "portraitInPhotoModeBehavior");
  if (v12 != (_DWORD)v14)
  {
    v18 = v17;
    if (-[CAMViewfinderViewController _depthEffectEnabledFromSuggestion](self, "_depthEffectEnabledFromSuggestion"))
    {
      if ((v18 & 4) != 0)
      {
        -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        -[CAMViewfinderViewController _configureZoomControlForGraphConfiguration:animated:](self, "_configureZoomControlForGraphConfiguration:animated:", v19, 1);

      }
    }
  }

}

- (void)_handlePhotoFormatPickerLongPressed:(id)a3
{
  id v3;

  v3 = a3;
  if ((objc_msgSend(v3, "isExpanded") & 1) == 0)
    objc_msgSend(v3, "setExpanded:animated:", 1, 1);

}

- (void)_updatePhotoFormatPickerAnimated:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  _BOOL4 v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = a3;
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[CAMViewfinderViewController _shouldShowPhotoFormatButtonForGraphConfiguration:](self, "_shouldShowPhotoFormatButtonForGraphConfiguration:", v5);

  if (v6)
  {
    -[CAMViewfinderViewController _enabledPhotoFormatsForMode:device:](self, "_enabledPhotoFormatsForMode:device:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevice](self, "_currentDevice"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "controlStatusBar");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "photoFormatStatusIndicator");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    v19 = -[CAMViewfinderViewController _essentialPhotoFormat](self, "_essentialPhotoFormat");
    v20 = v11;
    objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", &v19, "{?=qq}");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v7, "indexOfObject:", v12);

    v19 = -[CAMViewfinderViewController _advancedPhotoFormat](self, "_advancedPhotoFormat");
    v20 = v14;
    objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", &v19, "{?=qq}");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v7, "indexOfObject:", v15);

    objc_msgSend(v10, "setAllowedFormats:essentialFormatIndex:advancedFormatIndex:", v7, v13, v16);
    v17 = -[CAMViewfinderViewController _currentPhotoFormat](self, "_currentPhotoFormat");
    objc_msgSend(v10, "setPhotoFormat:animated:", v17, v18, v3);
    objc_msgSend(v10, "setLongPressEnabled:", (unint64_t)objc_msgSend(v7, "count") > 2);

  }
}

- ($0AC6E346AE4835514AAA8AC86D8F4844)_currentPhotoFormat
{
  void *v3;
  uint64_t v4;
  int64_t v5;
  int64_t v6;
  int64_t v7;
  int64_t v8;
  $0AC6E346AE4835514AAA8AC86D8F4844 result;

  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "resolvedPhotoFormatForResolvedResolution:rawMode:", -[CAMViewfinderViewController _resolvedPhotoResolution](self, "_resolvedPhotoResolution"), -[CAMViewfinderViewController _resolvedRAWMode](self, "_resolvedRAWMode"));
  v6 = v5;

  v7 = v4;
  v8 = v6;
  result.var1 = v8;
  result.var0 = v7;
  return result;
}

- (id)_enabledPhotoFormatsForMode:(int64_t)a3 device:(int64_t)a4
{
  void *v6;
  void *v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD v13[2];
  _QWORD v14[5];
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v14[0] = objc_msgSend(v6, "photoEncodingBehavior");
  v14[1] = 1;
  v14[2] = v14[0];
  v14[3] = 2;
  v14[4] = v14[0];
  v15 = xmmword_1DB9A5440;
  v16 = xmmword_1DB9A4FD0;
  v17 = 3;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  for (i = 0; i != 10; i += 2)
  {
    v9 = v14[i];
    v10 = v14[i + 1];
    if (objc_msgSend(v6, "isPhotoFormat:enabledForMode:device:", v9, v10, a3, a4))
    {
      v13[0] = v9;
      v13[1] = v10;
      objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", v13, "{?=qq}");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "addObject:", v11);

    }
  }

  return v7;
}

- (void)_handleProResIndicator
{
  -[CAMViewfinderViewController _handleUserChangedProResMode:](self, "_handleUserChangedProResMode:", -[CAMViewfinderViewController _desiredProResVideoMode](self, "_desiredProResVideoMode") == 0);
}

- (void)_handleUserChangedProResMode:(int64_t)a3
{
  void *v3;
  void *v6;
  _BOOL8 v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  const __CFString *v11;
  void *v12;
  __CFString *v13;
  __CFString *v14;
  __CFString *v15;
  void *v16;
  char v17;
  uint64_t v18;
  void *v19;
  int v20;
  const __CFString *v21;
  __int16 v22;
  __CFString *v23;
  __int16 v24;
  __CFString *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = -[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled");
  v8 = v7;
  if (a3 || !v7)
  {
    if (a3 == 1)
    {
      -[CAMViewfinderViewController _connectedStorage](self, "_connectedStorage");
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      if (v9)
        v8 = 1;
      else
        v8 = v8;
    }
  }
  else
  {
    v8 = 0;
  }
  v10 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    if (a3 == 1)
      v11 = CFSTR("ON");
    else
      v11 = CFSTR("OFF");
    -[CAMViewfinderViewController _connectedStorage](self, "_connectedStorage");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (v12)
    {
      -[CAMViewfinderViewController _connectedStorage](self, "_connectedStorage");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "displayName");
      v13 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v13 = CFSTR("NONE");
    }
    v14 = CFSTR("NO");
    if ((_DWORD)v8)
      v14 = CFSTR("YES");
    v15 = v14;
    v20 = 138543874;
    v21 = v11;
    v22 = 2114;
    v23 = v13;
    v24 = 2114;
    v25 = v15;
    _os_log_impl(&dword_1DB760000, v10, OS_LOG_TYPE_DEFAULT, "External storage: userChangedProResMode proResMode=%{public}@, connectedStorage=%{public}@, resolvedExternalStorageOutput=%{public}@", (uint8_t *)&v20, 0x20u);
    if (v12)
    {

    }
  }

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "isProResVideoSupportedForMode:videoConfiguration:outputToExternalStorage:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), objc_msgSend(v6, "videoConfiguration"), v8);

  if (a3 != 1 || (v17 & 1) != 0)
  {
    -[CAMViewfinderViewController _setDesiredProResVideoMode:](self, "_setDesiredProResVideoMode:", a3);
    v18 = objc_msgSend(v6, "device");
    -[CAMViewfinderViewController set_videoConfigurationOverride:](self, "set_videoConfigurationOverride:", -[CAMViewfinderViewController _mappedVideoConfigurationForVideoConfiguration:proResVideoMode:outputToExternalStorage:](self, "_mappedVideoConfigurationForVideoConfiguration:proResVideoMode:outputToExternalStorage:", objc_msgSend(v6, "videoConfiguration"), -[CAMViewfinderViewController _desiredProResVideoMode](self, "_desiredProResVideoMode"), v8));
    -[CAMViewfinderViewController _graphConfigurationForChangeToMode:device:fromGraphConfiguration:](self, "_graphConfigurationForChangeToMode:device:fromGraphConfiguration:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), v18, v6);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
    -[CAMViewfinderViewController _performChangeFromGraphConfiguration:toGraphConfiguration:zoomFactor:deferIfConfigurationInFlight:](self, "_performChangeFromGraphConfiguration:toGraphConfiguration:zoomFactor:deferIfConfigurationInFlight:", v6, v19, 1);
    -[CAMViewfinderViewController _setExternalStorageOutputEnabled:animated:](self, "_setExternalStorageOutputEnabled:animated:", v8, 1);

  }
  else
  {
    -[CAMViewfinderViewController _showProResUnsupportedAlertAndDisableRelevantControlsForVideoConfiguration:](self, "_showProResUnsupportedAlertAndDisableRelevantControlsForVideoConfiguration:", objc_msgSend(v6, "videoConfiguration"));
  }

}

- (void)_updateProResButtonAnimated:(BOOL)a3
{
  _BOOL8 v3;
  int64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _BOOL8 v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;

  v3 = a3;
  v5 = -[CAMViewfinderViewController _desiredProResVideoMode](self, "_desiredProResVideoMode");
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "controlStatusBar");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "proResIndicator");
  v16 = (id)objc_claimAutoreleasedReturnValue();

  -[CAMViewfinderViewController _controlDrawer](self, "_controlDrawer");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "proResButton");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v9, "setProResVideoMode:animated:", v5, v3);
  v10 = -[CAMViewfinderViewController _isSpatialVideoInVideoModeActiveForMode:devicePosition:](self, "_isSpatialVideoInVideoModeActiveForMode:devicePosition:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"));
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "videoConfiguration");
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v11, "colorSpaceForMode:videoConfiguration:videoEncodingBehavior:spatialVideoEnabled:device:", 1, v13, 2, v10, objc_msgSend(v14, "device"));

  objc_msgSend(v16, "setProResVideoMode:colorSpace:animated:", v5, v15, v3);
}

- (void)_showProResUnsupportedAlertAndDisableRelevantControlsForVideoConfiguration:(int64_t)a3
{
  void *v5;
  int v6;
  void *v7;
  BOOL v8;
  __CFString *v9;
  int64_t v10;
  int v11;
  const __CFString *v12;
  const __CFString *v13;
  int64_t v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;

  CAMLocalizedFrameworkString(CFSTR("PRO_RES_UNSUPPORTED_ALERT_TITLE"), 0);
  v22 = (id)objc_claimAutoreleasedReturnValue();
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isProResVideoSupportedForMode:videoConfiguration:outputToExternalStorage:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), 1, -[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled"));

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v7, "externalStorageSupported"))
  {
    v8 = (a3 & 0x7F) == 4 && (unint64_t)a3 < 7;
    if ((((unint64_t)a3 < 7) & (0x4Cu >> a3)) != 0)
      v9 = CFSTR("PRO_RES_UNSUPPORTED_ALERT_DESCRIPTION_720P");
    else
      v9 = CFSTR("PRO_RES_UNSUPPORTED_ALERT_DESCRIPTION_1080P_HFR");
    if ((((unint64_t)a3 < 7) & (0x4Cu >> a3)) != 0 || v8)
      goto LABEL_26;
    if (!v6)
    {
      v11 = objc_msgSend(v7, "isBack4k120VideoSupported");
      v12 = CFSTR("PRO_RES_UNSUPPORTED_EXTERNAL_STORAGE_ALERT_DESCRIPTION_1080P30_MAX");
      v13 = CFSTR("PRO_RES_UNSUPPORTED_EXTERNAL_STORAGE_ALERT_DESCRIPTION_1080P30_MAX_4k120");
LABEL_20:
      if (v11)
        v9 = (__CFString *)v13;
      else
        v9 = (__CFString *)v12;
      goto LABEL_26;
    }
    v10 = -[CAMViewfinderViewController _resolvedVideoStabilizationMode](self, "_resolvedVideoStabilizationMode");
    if (v10 != 1)
    {
      if (!v10)
      {
        v11 = objc_msgSend(v7, "isBack4k120VideoSupported");
        v12 = CFSTR("PRO_RES_UNSUPPORTED_EXTERNAL_STORAGE_ALERT_DESCRIPTION_4k30_MAX");
        v13 = CFSTR("PRO_RES_UNSUPPORTED_EXTERNAL_STORAGE_ALERT_DESCRIPTION_4k30_MAX_4k120");
        goto LABEL_20;
      }
LABEL_23:
      v15 = 0;
      goto LABEL_27;
    }
    v9 = CFSTR("PRO_RES_UNSUPPORTED_EXTERNAL_STORAGE_ALERT_DESCRIPTION_28K30_MAX");
  }
  else if (v6)
  {
    v14 = -[CAMViewfinderViewController _resolvedVideoStabilizationMode](self, "_resolvedVideoStabilizationMode");
    if (v14)
    {
      if (v14 != 1)
        goto LABEL_23;
      v9 = CFSTR("PRO_RES_UNSUPPORTED_ALERT_DESCRIPTION_28K30_MAX");
    }
    else
    {
      v9 = CFSTR("PRO_RES_UNSUPPORTED_ALERT_DESCRIPTION_4k30_MAX");
    }
  }
  else
  {
    v9 = CFSTR("PRO_RES_UNSUPPORTED_ALERT_DESCRIPTION_1080P30_MAX");
  }
LABEL_26:
  CAMLocalizedFrameworkString(v9, 0);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_27:
  objc_msgSend(MEMORY[0x1E0DC3450], "alertControllerWithTitle:message:preferredStyle:", v22, v15, 1);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = (void *)MEMORY[0x1E0DC3448];
  CAMLocalizedFrameworkString(CFSTR("PRO_RES_UNSUPPORTED_ALERT_OK"), 0);
  v18 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "actionWithTitle:style:handler:", v18, 0, 0);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "addAction:", v19);

  -[CAMViewfinderViewController presentViewController:animated:completion:](self, "presentViewController:animated:completion:", v16, 1, 0);
  -[CAMViewfinderViewController _setDesiredProResVideoMode:](self, "_setDesiredProResVideoMode:", 0);
  -[CAMViewfinderViewController _updateProResButtonAnimated:](self, "_updateProResButtonAnimated:", 1);
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v18) = -[CAMViewfinderViewController _shouldShowExternalStorageButtonForGraphConfiguration:](self, "_shouldShowExternalStorageButtonForGraphConfiguration:", v20);

  if ((v18 & 1) == 0)
  {
    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "setExternalStorageButtonVisible:animated:", 0, 1);

  }
}

- (void)_startOrCancelPurgeIfNecessary
{
  void *v3;
  int v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  BOOL v9;
  id v10;

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isProResVideoSupportedForMode:videoConfiguration:outputToExternalStorage:", objc_msgSend(v10, "mode"), objc_msgSend(v10, "videoConfiguration"), -[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled"));

  v5 = objc_msgSend(v10, "videoEncodingBehavior");
  -[CAMViewfinderViewController _storageController](self, "_storageController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "purgeableStorageContainer");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v4)
    v9 = v5 == 2;
  else
    v9 = 0;
  if (v9)
    objc_msgSend(v7, "purgeFastPurgeableSpaceWithRequestType:", 0);
  else
    objc_msgSend(v7, "cancelPurge");

}

- (void)_updateMaxRecordingTimeInstructionLabelForGraphConfiguration:(id)a3
{
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  int v8;
  uint64_t v9;
  void *v10;
  id v11;

  v11 = a3;
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "maxRecordingTimeInstructionLabel");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = objc_msgSend(v11, "videoConfiguration");
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isProResVideoSupportedForMode:videoConfiguration:outputToExternalStorage:", objc_msgSend(v11, "mode"), objc_msgSend(v11, "videoConfiguration"), -[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled"));

  v9 = objc_msgSend(v11, "videoEncodingBehavior");
  if (v8 && v6 && v9 == 2)
  {
    -[CAMViewfinderViewController _storageController](self, "_storageController");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "availableRecordingTimeInSecondsForGraphConfiguration:", v11);
    objc_msgSend(v5, "setRemainingTimeInSeconds:");

  }
}

- (void)_updateFreeResourcesInstructionLabelForCurrentState
{
  void *v3;
  void *v4;
  _BOOL4 v5;
  void *v6;
  int v7;
  void *v8;
  int v9;
  void *v10;
  int v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "freeResourcesInstructionLabel");
  v16 = (id)objc_claimAutoreleasedReturnValue();

  -[CAMViewfinderViewController _storageController](self, "_storageController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = -[CAMViewfinderViewController _urgentlyNeedsToPurgeDiskSpace](self, "_urgentlyNeedsToPurgeDiskSpace");
  objc_msgSend(v4, "purgeableStorageContainer");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isPurging");

  objc_msgSend(v4, "purgeableStorageContainer");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "isCancelingPurge");

  LODWORD(v8) = -[CAMViewfinderViewController _hasSignificantAmountOfRecordingTimeForCurrentConfiguration](self, "_hasSignificantAmountOfRecordingTimeForCurrentConfiguration");
  objc_msgSend(v4, "purgeableStorageContainer");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "hasPurgeableResources");

  v12 = -[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled");
  v13 = 3;
  if (v8 | v11 | v12)
    v13 = 0;
  v14 = 1;
  if (v5)
    v14 = 2;
  if (v9)
    v14 = 4;
  if (v7)
    v15 = v14;
  else
    v15 = v13;
  objc_msgSend(v16, "setFreeResourceInstructionState:", v15);

}

- (void)_handleFreeResourcesLabelTapped:(id)a3
{
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;

  -[CAMViewfinderViewController _storageController](self, "_storageController", a3);
  v8 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "freeResourcesInstructionLabel");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = objc_msgSend(v5, "freeResourceInstructionState");
  switch(v6)
  {
    case 3:
      CAMShowStorageUsageInSettings();
      break;
    case 1:
      objc_msgSend(v8, "purgeableStorageContainer");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "cancelPurge");
      goto LABEL_7;
    case 0:
      objc_msgSend(v8, "purgeableStorageContainer");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "purgeFastPurgeableSpaceWithRequestType:", 1);
LABEL_7:

      break;
  }

}

- (BOOL)_urgentlyNeedsToPurgeDiskSpace
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  double v7;
  double v8;
  BOOL v9;

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "videoConfiguration");

  if (!v4)
    return 0;
  -[CAMViewfinderViewController _storageController](self, "_storageController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "availableRecordingTimeInSecondsForGraphConfiguration:", v6);
  v8 = v7;

  v9 = v8 <= 10.0;
  return v9;
}

- (BOOL)_hasSignificantAmountOfRecordingTimeForCurrentConfiguration
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  double v7;
  double v8;
  BOOL v9;

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "videoConfiguration");

  if (!v4)
    return 1;
  -[CAMViewfinderViewController _storageController](self, "_storageController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "availableRecordingTimeInSecondsForGraphConfiguration:", v6);
  v8 = v7;

  v9 = v8 > 900.0;
  return v9;
}

- (int64_t)_mappedVideoConfigurationForVideoConfiguration:(int64_t)a3 proResVideoMode:(int64_t)a4 outputToExternalStorage:(BOOL)a5
{
  _BOOL8 v5;
  void *v9;
  char v10;
  void *v11;
  int v12;
  void *v13;
  int v14;
  int64_t v15;
  void *v16;
  int v17;

  v5 = a5;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "isProResVideoSupportedForMode:videoConfiguration:outputToExternalStorage:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), a3, v5);

  if (a4 && (v10 & 1) == 0)
  {
    switch(a3)
    {
      case 1:
      case 5:
      case 10:
        a3 = 7;
        break;
      case 9:
        +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = objc_msgSend(v16, "isProResVideoSupportedForMode:videoConfiguration:outputToExternalStorage:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), 1, -[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled"));

        if (v17)
          a3 = 1;
        else
          a3 = 7;
        break;
      case 12:
        a3 = 11;
        break;
      case 13:
      case 14:
        +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = objc_msgSend(v11, "isProResVideoSupportedForMode:videoConfiguration:outputToExternalStorage:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), 9, -[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled"));

        +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = objc_msgSend(v13, "isProResVideoSupportedForMode:videoConfiguration:outputToExternalStorage:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), 1, -[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled"));

        v15 = 7;
        if (v14)
          v15 = 1;
        if (v12)
          a3 = 9;
        else
          a3 = v15;
        break;
      default:
        return a3;
    }
  }
  return a3;
}

- (void)_updateVideoStabilizationButtonAnimated:(BOOL)a3
{
  _BOOL8 v3;
  int64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  v3 = a3;
  v5 = -[CAMViewfinderViewController _desiredVideoStabilizationMode](self, "_desiredVideoStabilizationMode");
  -[CAMViewfinderViewController _controlDrawer](self, "_controlDrawer");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "videoStabilizationButton");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setVideoStabilizationMode:animated:", v5, v3);

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "controlStatusBar");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "videoStabilizationIndicator");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setVideoStabilizationMode:animated:", v5, v3);

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v13 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "badgeTray");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "videoStabilizationBadge");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setVideoStabilizationMode:", v5);

}

- (void)_handleVideoStabilizationIndicator
{
  -[CAMViewfinderViewController _handleUserChangedVideoStabilizationMode:](self, "_handleUserChangedVideoStabilizationMode:", -[CAMViewfinderViewController _desiredVideoStabilizationMode](self, "_desiredVideoStabilizationMode") == 0);
}

- (void)_handleUserChangedVideoStabilizationMode:(int64_t)a3
{
  _BOOL8 v5;
  void *v6;
  uint64_t v7;
  void *v8;
  int64_t v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  void *v17;
  id v18;
  CAMViewfinderViewController *v19;
  int64_t v20;
  BOOL v21;

  -[CAMViewfinderViewController _setDesiredVideoStabilizationMode:](self, "_setDesiredVideoStabilizationMode:");
  -[CAMViewfinderViewController _startFlashingVideoStabilizationBadge](self, "_startFlashingVideoStabilizationBadge");
  -[CAMViewfinderViewController _updateBadgeVisibilityAnimated:](self, "_updateBadgeVisibilityAnimated:", 1);
  -[CAMViewfinderViewController _updateVideoStabilizationButtonAnimated:](self, "_updateVideoStabilizationButtonAnimated:", 1);
  v5 = -[CAMViewfinderViewController _isSpatialVideoInVideoModeActiveForMode:devicePosition:](self, "_isSpatialVideoInVideoModeActiveForMode:devicePosition:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"));
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "defaultDeviceForModeChange:devicePosition:spatialVideoEnabled:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"), v5);
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[CAMViewfinderViewController _currentVideoConfiguration](self, "_currentVideoConfiguration");
  v14 = MEMORY[0x1E0C809B0];
  v15 = 3221225472;
  v16 = __72__CAMViewfinderViewController__handleUserChangedVideoStabilizationMode___block_invoke;
  v17 = &unk_1EA32A858;
  v19 = self;
  v20 = a3;
  v18 = v6;
  v21 = v5;
  v10 = v6;
  v11 = objc_msgSend(v8, "validatedVideoConfigurationForVideoConfiguration:withBlock:", v9, &v14);
  -[CAMViewfinderViewController set_videoConfigurationOverride:](self, "set_videoConfigurationOverride:", v11, v14, v15, v16, v17);

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _graphConfigurationForChangeToMode:device:fromGraphConfiguration:](self, "_graphConfigurationForChangeToMode:device:fromGraphConfiguration:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), v7, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _defaultZoomFactorForGraphConfiguration:](self, "_defaultZoomFactorForGraphConfiguration:", v13);
  -[CAMViewfinderViewController _performChangeFromGraphConfiguration:toGraphConfiguration:zoomFactor:deferIfConfigurationInFlight:](self, "_performChangeFromGraphConfiguration:toGraphConfiguration:zoomFactor:deferIfConfigurationInFlight:", v12, v13, 1);

}

uint64_t __72__CAMViewfinderViewController__handleUserChangedVideoStabilizationMode___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void *v10;
  char v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v16 = objc_msgSend(*(id *)(a1 + 32), "videoStabilizationStrengthForVideoStabilizationMode:captureMode:spatialVideoEnabled:", *(_QWORD *)(a1 + 48), objc_msgSend(*(id *)(a1 + 40), "_currentMode"), *(unsigned __int8 *)(a1 + 56));
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(*(id *)(a1 + 40), "_currentMode");
  v5 = objc_msgSend(*(id *)(a1 + 40), "_currentDevice");
  objc_msgSend(*(id *)(a1 + 40), "_currentGraphConfiguration");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "videoEncodingBehavior");
  v8 = objc_msgSend(*(id *)(a1 + 40), "_externalStorageOutputEnabled");
  v9 = *(_BYTE *)(a1 + 56);
  objc_msgSend(*(id *)(a1 + 40), "_currentGraphConfiguration");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "trueVideoEnabled");
  objc_msgSend(*(id *)(a1 + 40), "_currentGraphConfiguration");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  BYTE2(v15) = objc_msgSend(v12, "prefersHDR10BitVideo");
  BYTE1(v15) = v11;
  LOBYTE(v15) = v9;
  v13 = objc_msgSend(v3, "isVideoStabilizationStrength:supportedForMode:device:videoConfiguration:videoEncodingBehavior:outputToExternalStorage:spatialVideoEnabled:trueVideoEnabled:prefersHDR10BitVideo:", v16, v4, v5, a2, v7, v8, v15);

  return v13;
}

- (void)_startFlashingVideoStabilizationBadge
{
  +[CAMViewfinderViewController cancelPreviousPerformRequestsWithTarget:selector:object:](CAMViewfinderViewController, "cancelPreviousPerformRequestsWithTarget:selector:object:", self, sel__stopFlashingVideoStabilizationBadge, 0);
  -[CAMViewfinderViewController _setFlashingVideoStabilizationBadge:](self, "_setFlashingVideoStabilizationBadge:", 1);
  +[CAMLivePhotoButton enablingAnimationDuration](CAMLivePhotoButton, "enablingAnimationDuration");
  -[CAMViewfinderViewController performSelector:withObject:afterDelay:](self, "performSelector:withObject:afterDelay:", sel__stopFlashingVideoStabilizationBadge, 0);
}

- (void)_stopFlashingVideoStabilizationBadge
{
  +[CAMViewfinderViewController cancelPreviousPerformRequestsWithTarget:selector:object:](CAMViewfinderViewController, "cancelPreviousPerformRequestsWithTarget:selector:object:", self, sel__stopFlashingVideoStabilizationBadge, 0);
  -[CAMViewfinderViewController _setFlashingVideoStabilizationBadge:](self, "_setFlashingVideoStabilizationBadge:", 0);
  -[CAMViewfinderViewController _updateBadgeVisibilityAnimated:](self, "_updateBadgeVisibilityAnimated:", 1);
}

- (BOOL)videoConfigurationStatusIndicatorShouldRespondToTap:(id)a3
{
  void *v3;
  char v4;

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "trueVideoEnabled");

  return v4 ^ 1;
}

- (void)_handleUserChangedToVideoConfiguration:(int64_t)a3
{
  void *v5;
  _BOOL8 v6;
  void *v7;
  uint64_t v8;
  int64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  int64_t v17;
  void *v18;
  char v19;
  double v20;
  double v21;
  double v22;
  id v23;
  void *v24;
  float v25;
  double v26;
  void *v27;
  float v28;
  float v29;
  void *v30;
  int v31;
  char v32;
  void *v33;
  id v34;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[CAMViewfinderViewController _isSpatialVideoInVideoModeActiveForMode:devicePosition:](self, "_isSpatialVideoInVideoModeActiveForMode:devicePosition:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"));
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "defaultDeviceForModeChange:devicePosition:spatialVideoEnabled:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"), v6);

  v9 = -[CAMViewfinderViewController _resolvedVideoStabilizationModeForVideoConfiguration:](self, "_resolvedVideoStabilizationModeForVideoConfiguration:", a3);
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "videoStabilizationStrengthForVideoStabilizationMode:captureMode:spatialVideoEnabled:", v9, -[CAMViewfinderViewController _currentMode](self, "_currentMode"), v6);

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "resolvedDeviceForDesiredDevice:mode:videoConfiguration:videoStabilizationStrength:spatialVideoEnabled:", v8, -[CAMViewfinderViewController _currentMode](self, "_currentMode"), a3, v11, v6);

  -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
  +[CAMZoomControlUtilities equivalentZoomFactor:forDevice:fromDevice:](CAMZoomControlUtilities, "equivalentZoomFactor:forDevice:fromDevice:", v13, -[CAMViewfinderViewController _currentDevice](self, "_currentDevice"), v14);
  v16 = v15;
  v17 = +[CAMZoomControlUtilities deviceForEmulatingZoomFactor:fromDevice:mode:continuousZoomSupported:](CAMZoomControlUtilities, "deviceForEmulatingZoomFactor:fromDevice:mode:continuousZoomSupported:", v13, -[CAMViewfinderViewController _currentMode](self, "_currentMode"), +[CAMZoomControlUtilities shouldApplyContinuousZoomForMode:device:videoConfiguration:videoStabilizationStrength:zoomFactors:displayZoomFactors:](CAMZoomControlUtilities, "shouldApplyContinuousZoomForMode:device:videoConfiguration:videoStabilizationStrength:zoomFactors:displayZoomFactors:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), v13, a3, v11, 0, 0), v15);
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend(v18, "isSupportedVideoConfiguration:forMode:device:", a3, -[CAMViewfinderViewController _currentMode](self, "_currentMode"), v17);

  if ((v19 & 1) != 0)
  {
    -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
    +[CAMZoomControlUtilities equivalentZoomFactor:forDevice:fromDevice:](CAMZoomControlUtilities, "equivalentZoomFactor:forDevice:fromDevice:", v17, -[CAMViewfinderViewController _currentDevice](self, "_currentDevice"), v20);
    v22 = v21;
    v13 = v17;
  }
  else
  {
    v34 = 0;
    +[CAMZoomControlUtilities shouldApplyContinuousZoomForMode:device:videoConfiguration:videoStabilizationStrength:zoomFactors:displayZoomFactors:](CAMZoomControlUtilities, "shouldApplyContinuousZoomForMode:device:videoConfiguration:videoStabilizationStrength:zoomFactors:displayZoomFactors:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), v13, a3, v11, &v34, 0);
    v23 = v34;
    objc_msgSend(v23, "lastObject");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "floatValue");
    v26 = v25;

    if (v16 >= v26)
      objc_msgSend(v23, "lastObject");
    else
      objc_msgSend(v23, "firstObject");
    v27 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v27, "floatValue");
    v29 = v28;

    v22 = v29;
  }
  switch(-[CAMViewfinderViewController _currentMode](self, "_currentMode"))
  {
    case 0:
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
    case 9:
      goto LABEL_16;
    case 1:
      -[CAMViewfinderViewController set_videoConfigurationOverride:](self, "set_videoConfigurationOverride:", a3);
      goto LABEL_11;
    case 2:
      -[CAMViewfinderViewController set_slomoConfigurationOverride:](self, "set_slomoConfigurationOverride:", a3);
      goto LABEL_11;
    case 7:
      -[CAMViewfinderViewController set_cinematicConfigurationOverride:](self, "set_cinematicConfigurationOverride:", a3);
      goto LABEL_11;
    default:
LABEL_11:
      -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v31 = objc_msgSend(v5, "isProResVideoSupportedForMode:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"));
      v32 = objc_msgSend(v5, "isProResVideoSupportedForMode:videoConfiguration:outputToExternalStorage:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), a3, -[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled"));
      if (v31
        && (v32 & 1) == 0
        && -[CAMViewfinderViewController _desiredProResVideoMode](self, "_desiredProResVideoMode") == 1)
      {
        -[CAMViewfinderViewController _showProResUnsupportedAlertAndDisableRelevantControlsForVideoConfiguration:](self, "_showProResUnsupportedAlertAndDisableRelevantControlsForVideoConfiguration:", a3);
      }
      -[CAMViewfinderViewController _graphConfigurationForChangeToMode:device:fromGraphConfiguration:](self, "_graphConfigurationForChangeToMode:device:fromGraphConfiguration:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), v13, v30);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMViewfinderViewController _updateVideoConfigurationStatusIndicatorForGraphConfiguration:animated:](self, "_updateVideoConfigurationStatusIndicatorForGraphConfiguration:animated:", v33, 1);
      -[CAMViewfinderViewController _performChangeFromGraphConfiguration:toGraphConfiguration:zoomFactor:deferIfConfigurationInFlight:](self, "_performChangeFromGraphConfiguration:toGraphConfiguration:zoomFactor:deferIfConfigurationInFlight:", v30, v33, 1, v22);

LABEL_16:
      return;
  }
}

- (void)videoConfigurationStatusIndicatorDidTapFramerate:(id)a3
{
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  int64_t v8;

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "videoConfiguration");

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "videoEncodingBehavior");

  v8 = -[CAMViewfinderViewController _nextFramerateVideoConfigurationForVideoConfiguration:videoEncodingBehavior:](self, "_nextFramerateVideoConfigurationForVideoConfiguration:videoEncodingBehavior:", v5, v7);
  if (v8 != v5)
    -[CAMViewfinderViewController _handleUserChangedToVideoConfiguration:](self, "_handleUserChangedToVideoConfiguration:", v8);
}

- (BOOL)_shouldSwitchToVideoConfiguration:(int64_t)a3 videoEncodingBehavior:(int64_t)a4
{
  void *v6;
  int64_t v7;
  _BOOL8 v8;
  uint64_t v9;
  void *v10;
  int v11;
  int v12;
  int v13;
  void *v14;
  int v15;
  void *v16;
  char v17;
  char v18;
  char v19;
  char v20;
  void *v21;
  int v22;
  char v23;
  char v24;
  void *v25;
  int64_t v26;
  int64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  char v31;

  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
  v8 = -[CAMViewfinderViewController _isSpatialVideoInVideoModeActiveForMode:devicePosition:](self, "_isSpatialVideoInVideoModeActiveForMode:devicePosition:", v7, -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"));
  v9 = objc_msgSend(v6, "defaultDeviceForModeChange:devicePosition:spatialVideoEnabled:", v7, -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"), v8);
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "isSupportedVideoConfiguration:forMode:device:", a3, v7, v9);

  v12 = objc_msgSend(v6, "isPALVideoEnabled");
  if ((objc_msgSend(v6, "usingMostCompatibleEncoding") & 1) != 0)
  {
    v13 = 1;
  }
  else
  {
    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v14, "isHEVCEncodingSupported") ^ 1;

  }
  LOBYTE(v15) = 0;
  switch(a3)
  {
    case 1:
    case 5:
    case 7:
    case 10:
      goto LABEL_5;
    case 3:
      +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = objc_msgSend(v16, "is1080p240SupportedForDevice:", v9);

      LOBYTE(v15) = v13 | v17 ^ 1;
      break;
    case 4:
      if (v7 != 2)
        goto LABEL_9;
      goto LABEL_5;
    case 6:
      +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = objc_msgSend(v21, "is4k30VideoSupportedForDevice:", v9);

      if (v22)
        LOBYTE(v15) = objc_msgSend(v6, "videoConfiguration") == 6;
      else
LABEL_5:
        LOBYTE(v15) = 1;
      break;
    case 8:
      v15 = v13 ^ 1 | objc_msgSend(v6, "didConfirmSlomo1080p240MostCompatible");
      break;
    case 9:
    case 13:
LABEL_9:
      v18 = objc_msgSend(v6, "didConfirmVideoMostCompatible");
      if (a4 == 2)
        v19 = 1;
      else
        v19 = v18;
      LOBYTE(v15) = v13 ^ 1 | v19;
      break;
    case 11:
    case 12:
      LOBYTE(v15) = v12;
      break;
    case 14:
      v20 = objc_msgSend(v6, "didConfirmVideoMostCompatible");
      if (a4 == 2)
        LOBYTE(v15) = 1;
      else
        LOBYTE(v15) = v20;
      if ((v12 & v13) == 0)
        LOBYTE(v15) = v12;
      break;
    default:
      break;
  }
  v23 = v15 & !v8;
  if (v11)
    v24 = v23;
  else
    v24 = 0;
  if (-[CAMViewfinderViewController _resolvedVideoStabilizationMode](self, "_resolvedVideoStabilizationMode") == 1)
  {
    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
    v27 = -[CAMViewfinderViewController _currentDevice](self, "_currentDevice");
    -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = objc_msgSend(v28, "trueVideoEnabled");
    -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = objc_msgSend(v25, "isVideoStabilizationControlSupportedForMode:device:videoConfiguration:videoEncodingBehavior:trueVideoEnabled:prefersHDR10BitVideo:", v26, v27, a3, a4, v29, objc_msgSend(v30, "prefersHDR10BitVideo"));

  }
  else
  {
    v31 = 1;
  }

  return v24 & v31;
}

- (int64_t)_nextFramerateVideoConfigurationForVideoConfiguration:(int64_t)a3 videoEncodingBehavior:(int64_t)a4
{
  int64_t v5;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  int64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v5 = a3;
  v19 = *MEMORY[0x1E0C80C00];
  if ((unint64_t)(a3 - 1) > 0xD)
    v7 = 0;
  else
    v7 = (void *)qword_1EA32AD58[a3 - 1];
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v15;
    while (2)
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v15 != v10)
          objc_enumerationMutation(v7);
        v12 = (int)objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * i), "intValue");
        if (-[CAMViewfinderViewController _shouldSwitchToVideoConfiguration:videoEncodingBehavior:](self, "_shouldSwitchToVideoConfiguration:videoEncodingBehavior:", v12, a4))
        {
          return v12;
        }
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      if (v9)
        continue;
      break;
    }
  }
  return v5;
}

- (void)videoConfigurationStatusIndicatorDidTapResolution:(id)a3
{
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  int64_t v8;

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "videoConfiguration");

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "videoEncodingBehavior");

  v8 = -[CAMViewfinderViewController _nextResolutionVideoConfigurationForVideoConfiguration:videoEncodingBehavior:](self, "_nextResolutionVideoConfigurationForVideoConfiguration:videoEncodingBehavior:", v5, v7);
  if (v8 != v5)
    -[CAMViewfinderViewController _handleUserChangedToVideoConfiguration:](self, "_handleUserChangedToVideoConfiguration:", v8);
}

- (int64_t)_nextResolutionVideoConfigurationForVideoConfiguration:(int64_t)a3 videoEncodingBehavior:(int64_t)a4
{
  int64_t v5;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  int64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v5 = a3;
  v19 = *MEMORY[0x1E0C80C00];
  if ((unint64_t)(a3 - 1) > 0xD)
    v7 = 0;
  else
    v7 = (void *)qword_1EA32ADC8[a3 - 1];
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v15;
    while (2)
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v15 != v10)
          objc_enumerationMutation(v7);
        v12 = (int)objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * i), "intValue");
        if (-[CAMViewfinderViewController _shouldSwitchToVideoConfiguration:videoEncodingBehavior:](self, "_shouldSwitchToVideoConfiguration:videoEncodingBehavior:", v12, a4))
        {
          return v12;
        }
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      if (v9)
        continue;
      break;
    }
  }
  return v5;
}

- (void)captureController:(id)a3 didOutputLowLightStatus:(int64_t)a4
{
  _BOOL4 v6;
  _BOOL4 v7;
  void *v8;

  -[CAMViewfinderViewController _updateControlDrawerContentsVisibilityAnimated:](self, "_updateControlDrawerContentsVisibilityAnimated:", 1);
  -[CAMViewfinderViewController _updateControlStatusBarContentsVisibilityAnimated:](self, "_updateControlStatusBarContentsVisibilityAnimated:", 1);
  v6 = -[CAMViewfinderViewController _isLowLightCaptureCanceling](self, "_isLowLightCaptureCanceling");
  if (a4 != -1)
  {
    v7 = v6;
    if (!a4)
      -[CAMViewfinderViewController _resetLowLightDurationMappingAnimated:](self, "_resetLowLightDurationMappingAnimated:", 1);
    if (v7)
    {
      -[CAMViewfinderViewController _closedViewfinderController](self, "_closedViewfinderController");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "removeClosedViewfinderReason:", 13);

      -[CAMViewfinderViewController _updateEnabledControlsWithReason:](self, "_updateEnabledControlsWithReason:", CFSTR("Night mode capture cancel ended"));
      -[CAMViewfinderViewController _shutterButtonSetSpinning:](self, "_shutterButtonSetSpinning:", 0);
    }
  }
  -[CAMViewfinderViewController _updateResolvedLowLightModeAnimated:](self, "_updateResolvedLowLightModeAnimated:", 1);
}

- (void)captureController:(id)a3 didOutputLowLightModeDurationMapping:(id)a4
{
  id v5;

  -[CAMViewfinderViewController _setLowLightDurationMapping:](self, "_setLowLightDurationMapping:", a3, a4.var0, a4.var1);
  -[CAMViewfinderViewController _updateLowLightControlsAnimated:](self, "_updateLowLightControlsAnimated:", 1);
  -[CAMViewfinderViewController _updateLowLightSlider](self, "_updateLowLightSlider");
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updateShutterButtonForGraphConfiguration:isCapturing:animated:](self, "_updateShutterButtonForGraphConfiguration:isCapturing:animated:", v5, 0, 1);

}

- (void)captureController:(id)a3 didChangeAutoMacroSuggested:(BOOL)a4
{
  void *v5;

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration", a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:animated:](self, "_updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:animated:", v5, 1);

  -[CAMViewfinderViewController _updateAutoMacroButtonAnimated:](self, "_updateAutoMacroButtonAnimated:", 1);
}

- (void)captureController:(id)a3 didOutputCaptureAvailability:(BOOL)a4
{
  -[CAMViewfinderViewController _updateEnabledControlsWithReason:](self, "_updateEnabledControlsWithReason:", CFSTR("Capture Availability Changed"), a4);
}

- (void)captureController:(id)a3 didOutputConfigurationAvailability:(BOOL)a4
{
  -[CAMViewfinderViewController _updateEnabledControlsWithReason:](self, "_updateEnabledControlsWithReason:", CFSTR("Configuration Availability Changed"), a4);
}

- (void)captureController:(id)a3 didOutputFlashCompromise:(unint64_t)a4
{
  void *v6;
  void *v7;
  id v8;

  -[CAMViewfinderViewController _resolveAndUpdatePotentiallyConflictingControls:animated:](self, "_resolveAndUpdatePotentiallyConflictingControls:animated:", 0, 1);
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:animated:](self, "_updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:animated:", v6, 1);

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "flashCompromisedInstructionLabel");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setCompromise:", a4);

}

- (BOOL)_isFlashUnavailableForMode:(int64_t)a3
{
  void *v4;
  unint64_t v5;
  char v6;
  char v7;

  -[CAMViewfinderViewController _captureController](self, "_captureController", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
  if (v5 > 9)
  {
    v7 = 0;
  }
  else
  {
    if (((1 << v5) & 0x279) != 0)
      v6 = objc_msgSend(v4, "isFlashAvailable");
    else
      v6 = objc_msgSend(v4, "isTorchAvailable");
    v7 = v6 ^ 1;
  }

  return v7;
}

- (BOOL)_isFlashCompromisedForDevicePosition:(int64_t)a3
{
  void *v4;
  uint64_t v5;
  BOOL v6;

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "flashCompromise");

  if (a3)
    v6 = 1;
  else
    v6 = (unint64_t)(v5 - 1) >= 2;
  return !v6;
}

- (BOOL)_shouldDisableCompromisedFlashForDevicePosition:(int64_t)a3
{
  BOOL v4;

  v4 = -[CAMViewfinderViewController _isFlashCompromisedForDevicePosition:](self, "_isFlashCompromisedForDevicePosition:", a3);
  return v4 & !-[CAMViewfinderViewController _didAcceptCompromisedFlash](self, "_didAcceptCompromisedFlash");
}

- (BOOL)_shouldShowFlashCompromisedInstructionsForGraphConfiguration:(id)a3
{
  id v4;
  uint64_t v5;
  BOOL v6;
  void *v7;
  char v8;

  v4 = a3;
  v5 = objc_msgSend(v4, "devicePosition");
  v6 = -[CAMViewfinderViewController _isFlashCompromisedForDevicePosition:](self, "_isFlashCompromisedForDevicePosition:", v5);
  if ((unint64_t)(-[CAMViewfinderViewController _displayedFlashModeForMode:flashActive:](self, "_displayedFlashModeForMode:flashActive:", objc_msgSend(v4, "mode"), 0)- 1) > 1)
  {
    v8 = 0;
  }
  else
  {
    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "isFlashSupportedForMode:devicePosition:", objc_msgSend(v4, "mode"), v5);

  }
  return v6 & v8;
}

- (void)_handleTimerButtonChangedTimerDuration
{
  id v3;

  -[CAMViewfinderViewController _timerButton](self, "_timerButton");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _setResolvedTimerDuration:](self, "_setResolvedTimerDuration:", objc_msgSend(v3, "duration"));

}

- (void)_handleUserChangedToLivePhotoMode:(int64_t)a3
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  -[CAMViewfinderViewController _setDesiredLivePhotoMode:](self, "_setDesiredLivePhotoMode:");
  -[CAMViewfinderViewController _startTimer:](self, "_startTimer:", 0);
  -[CAMViewfinderViewController _updateBadgeVisibilityAnimated:](self, "_updateBadgeVisibilityAnimated:", 1);
  -[CAMViewfinderViewController _setPhotoFormatConflict:isConflicting:](self, "_setPhotoFormatConflict:isConflicting:", 2, a3 != 0);
  -[CAMViewfinderViewController _resolveAndUpdatePotentiallyConflictingControls:animated:](self, "_resolveAndUpdatePotentiallyConflictingControls:animated:", 0, 1);
  -[CAMViewfinderViewController _updateLowLightConflict:isConflicting:](self, "_updateLowLightConflict:isConflicting:", 4, -[CAMViewfinderViewController _resolvedLivePhotoMode](self, "_resolvedLivePhotoMode") != 0);
  if ((unint64_t)(-[CAMViewfinderViewController _resolvedLivePhotoMode](self, "_resolvedLivePhotoMode") - 1) <= 1)
  {
    -[CAMViewfinderViewController _livePhotoButton](self, "_livePhotoButton");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "performEnablingAnimation");

    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "controlStatusBar");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "livePhotoIndicator");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "startAnimating");

  }
  if (+[CAMBottomBar wantsVerticalBarForLayoutStyle:](CAMBottomBar, "wantsVerticalBarForLayoutStyle:", -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle")))
  {
    -[CAMViewfinderViewController _collapseExpandedButtonsAnimated:](self, "_collapseExpandedButtonsAnimated:", 1);
  }
}

- (void)_handleLivePhotoButtonChangedLivePhotoMode
{
  id v3;

  -[CAMViewfinderViewController _livePhotoButton](self, "_livePhotoButton");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _handleUserChangedToLivePhotoMode:](self, "_handleUserChangedToLivePhotoMode:", objc_msgSend(v3, "livePhotoMode"));

}

- (void)_handleSharedLibraryButton
{
  uint64_t v3;
  id v4;

  -[CAMViewfinderViewController _sharedLibraryButton](self, "_sharedLibraryButton");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  if (CAMSharedLibraryModeIsOn(objc_msgSend(v4, "sharedLibraryMode")))
    v3 = 3;
  else
    v3 = 2;
  -[CAMViewfinderViewController _handleUserChangedToSharedLibraryMode:](self, "_handleUserChangedToSharedLibraryMode:", v3);

}

- (void)_handleUserChangedToSharedLibraryMode:(int64_t)a3
{
  void *v5;
  id v6;

  -[CAMViewfinderViewController _sharedLibraryButton](self, "_sharedLibraryButton");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setSharedLibraryMode:", a3);
  -[CAMViewfinderViewController _librarySelectionController](self, "_librarySelectionController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "userDidPickSharedLibraryMode:", a3);

  -[CAMViewfinderViewController _startTimer:](self, "_startTimer:", 1);
  -[CAMViewfinderViewController _updateBadgeVisibilityAnimated:](self, "_updateBadgeVisibilityAnimated:", 1);

}

- (void)_setExternalStorageOutputEnabled:(BOOL)a3
{
  -[CAMViewfinderViewController _setExternalStorageOutputEnabled:animated:](self, "_setExternalStorageOutputEnabled:animated:", a3, 0);
}

- (void)_setExternalStorageOutputEnabled:(BOOL)a3 animated:(BOOL)a4
{
  _BOOL8 v4;
  _BOOL8 v5;
  NSObject *v7;
  const __CFString *v8;
  void *v9;
  void *v10;
  int v11;
  const __CFString *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (self->__externalStorageOutputEnabled != a3)
  {
    v4 = a4;
    v5 = a3;
    v7 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = CFSTR("OFF");
      if (v5)
        v8 = CFSTR("ON");
      v11 = 138543362;
      v12 = v8;
      _os_log_impl(&dword_1DB760000, v7, OS_LOG_TYPE_DEFAULT, "External storage: changing external storage output to %{public}@.", (uint8_t *)&v11, 0xCu);
    }

    if (-[CAMViewfinderViewController _currentMode](self, "_currentMode") == 1 && !v5)
      -[CAMViewfinderViewController _fallbackToValidProResVideoConfigurationIfNeeded](self, "_fallbackToValidProResVideoConfigurationIfNeeded");
    self->__externalStorageOutputEnabled = v5;
    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setExternalStorageButtonVisible:animated:", v5, v4);

    if (!v5)
    {
      if (-[CAMViewfinderViewController _isShowingCameraRoll](self, "_isShowingCameraRoll"))
      {
        -[CAMViewfinderViewController _cameraRollController](self, "_cameraRollController");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "dismissCameraRollViewControllerForced:animated:", 1, 0);

      }
    }
    -[CAMViewfinderViewController _updateControlStatusBarContentsVisibilityAnimated:](self, "_updateControlStatusBarContentsVisibilityAnimated:", 1);
    -[CAMViewfinderViewController _updateExternalStorageDataSources](self, "_updateExternalStorageDataSources");
  }
}

- (void)_updateExternalStorageDataSources
{
  void *v3;
  void *v4;
  id v5;

  if (-[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled"))
  {
    -[CAMViewfinderViewController _connectedStorage](self, "_connectedStorage");
    v5 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = 0;
  }
  -[CAMViewfinderViewController _cameraRollController](self, "_cameraRollController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setExternalStorage:", v5);

  -[CAMViewfinderViewController _storageController](self, "_storageController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setExternalStorage:", v5);

}

- (void)_fallbackToValidProResVideoConfigurationIfNeeded
{
  int64_t v3;
  void *v4;
  id v5;
  uint64_t (**v6)(void *, int64_t);
  void *v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  _BOOL8 v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  void *v19;
  id v20;
  int64_t v21;

  v3 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
  if (-[CAMViewfinderViewController _desiredProResVideoMode](self, "_desiredProResVideoMode"))
  {
    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = MEMORY[0x1E0C809B0];
    v17 = 3221225472;
    v18 = __79__CAMViewfinderViewController__fallbackToValidProResVideoConfigurationIfNeeded__block_invoke;
    v19 = &unk_1EA32A880;
    v5 = v4;
    v20 = v5;
    v21 = v3;
    v6 = (uint64_t (**)(void *, int64_t))_Block_copy(&v16);
    if ((v6[2](v6, -[CAMViewfinderViewController _currentVideoConfiguration](self, "_currentVideoConfiguration", v16, v17, v18, v19)) & 1) == 0)
    {
      +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend(v7, "validatedVideoConfigurationForVideoConfiguration:withBlock:", -[CAMViewfinderViewController _currentVideoConfiguration](self, "_currentVideoConfiguration"), v6);

      -[CAMViewfinderViewController set_videoConfigurationOverride:](self, "set_videoConfigurationOverride:", v8);
      v9 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
      v10 = -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition");
      v11 = -[CAMViewfinderViewController _isSpatialVideoInVideoModeActiveForMode:devicePosition:](self, "_isSpatialVideoInVideoModeActiveForMode:devicePosition:", v9, v10);
      +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(v12, "defaultDeviceForModeChange:devicePosition:spatialVideoEnabled:", v9, v10, v11);

      -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMViewfinderViewController _graphConfigurationForChangeToMode:device:fromGraphConfiguration:](self, "_graphConfigurationForChangeToMode:device:fromGraphConfiguration:", v9, v13, v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMViewfinderViewController _defaultZoomFactorForGraphConfiguration:](self, "_defaultZoomFactorForGraphConfiguration:", v15);
      -[CAMViewfinderViewController _performChangeFromGraphConfiguration:toGraphConfiguration:zoomFactor:deferIfConfigurationInFlight:](self, "_performChangeFromGraphConfiguration:toGraphConfiguration:zoomFactor:deferIfConfigurationInFlight:", v14, v15, 1);

    }
  }
}

uint64_t __79__CAMViewfinderViewController__fallbackToValidProResVideoConfigurationIfNeeded__block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "isProResVideoSupportedForMode:videoConfiguration:outputToExternalStorage:", *(_QWORD *)(a1 + 40), a2, 0);
}

- (void)_showExternalStorageRecordingFailedAlert
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v3 = (void *)MEMORY[0x1E0DC3450];
  CAMLocalizedFrameworkString(CFSTR("EXTERNAL_RECORDING_FAILED_TITLE"), 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  CAMLocalizedFrameworkString(CFSTR("EXTERNAL_RECORDING_FAILED_MESSAGE"), 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "alertControllerWithTitle:message:preferredStyle:", v4, v5, 1);
  v11 = (id)objc_claimAutoreleasedReturnValue();

  v6 = (void *)MEMORY[0x1E0DC3448];
  CAMLocalizedFrameworkString(CFSTR("OK"), 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "actionWithTitle:style:handler:", v7, 1, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "addAction:", v8);

  -[CAMViewfinderViewController view](self, "view");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "window");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "pl_presentViewController:animated:", v11, 1);
}

- (void)_updateSwipeToModeSwitchGestureRecognizersWithDirectionsForLayoutStyle:(int64_t)a3
{
  void *v5;
  id v6;

  -[CAMViewfinderViewController _previousModeGestureRecognizer](self, "_previousModeGestureRecognizer");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setDirection:", -[CAMViewfinderViewController _previousModeSwipeDirectionForLayoutStyle:](self, "_previousModeSwipeDirectionForLayoutStyle:", a3));
  -[CAMViewfinderViewController _nextModeGestureRecognizer](self, "_nextModeGestureRecognizer");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setDirection:", -[CAMViewfinderViewController _nextModeSwitchDirectionForLayoutStyle:](self, "_nextModeSwitchDirectionForLayoutStyle:", a3));

}

- (BOOL)_isSwipeToModeSwitchEnabled
{
  int v3;

  v3 = -[UISwipeGestureRecognizer isEnabled](self->__nextModeGestureRecognizer, "isEnabled");
  if (v3)
    LOBYTE(v3) = -[UISwipeGestureRecognizer isEnabled](self->__previousModeGestureRecognizer, "isEnabled");
  return v3;
}

- (void)_swipedToNextCameraMode
{
  int64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v3 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
  -[CAMViewfinderViewController modesForModeDial:](self, "modesForModeDial:", 0);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v11, "indexOfObject:", v4);

  v6 = objc_msgSend(v11, "count");
  if (v5 + 1 < (unint64_t)(v6 - 1))
    v7 = v5 + 1;
  else
    v7 = v6 - 1;
  if (v5 != v7)
  {
    -[CAMViewfinderViewController _feedbackController](self, "_feedbackController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "performDiscreteFeedback:", 0);

    -[CAMViewfinderViewController _feedbackController](self, "_feedbackController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "prepareDiscreteFeedback:", 0);

    objc_msgSend(v11, "objectAtIndexedSubscript:", v7);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _handleUserChangedToMode:](self, "_handleUserChangedToMode:", objc_msgSend(v10, "integerValue"));

  }
}

- (void)_swipedToPreviousCameraMode
{
  int64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v3 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
  -[CAMViewfinderViewController modesForModeDial:](self, "modesForModeDial:", 0);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v11, "indexOfObject:", v4);

  if (v5 <= 1)
    v6 = 1;
  else
    v6 = v5;
  v7 = v6 - 1;
  if (v5 != v6 - 1)
  {
    -[CAMViewfinderViewController _feedbackController](self, "_feedbackController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "performDiscreteFeedback:", 0);

    -[CAMViewfinderViewController _feedbackController](self, "_feedbackController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "prepareDiscreteFeedback:", 0);

    objc_msgSend(v11, "objectAtIndexedSubscript:", v7);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _handleUserChangedToMode:](self, "_handleUserChangedToMode:", objc_msgSend(v10, "integerValue"));

  }
}

- (void)_handleSwipeToPreviousFilterRecognizer:(id)a3
{
  id v3;

  -[CAMViewfinderViewController _filterScrubberView](self, "_filterScrubberView", a3);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "switchToPreviousItem");

}

- (void)_handleSwipeToNextFilterRecognizer:(id)a3
{
  id v3;

  -[CAMViewfinderViewController _filterScrubberView](self, "_filterScrubberView", a3);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "switchToNextItem");

}

- (void)_handleModeDialTouchDown:(id)a3
{
  void *v4;
  id v5;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities", a3);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "allowHapticsOnConfigurationTaps"))
  {
    -[CAMViewfinderViewController _feedbackController](self, "_feedbackController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "prepareDiscreteFeedback:", 0);

  }
}

- (void)_handleModeDialValueChanged:(id)a3
{
  void *v4;
  void *v5;
  id v6;

  v6 = a3;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "allowHapticsOnConfigurationTaps"))
  {
    -[CAMViewfinderViewController _feedbackController](self, "_feedbackController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "performDiscreteFeedback:", 0);

  }
  -[CAMViewfinderViewController _handleUserChangedToMode:](self, "_handleUserChangedToMode:", objc_msgSend(v6, "selectedMode"));

}

- (void)_handleFlipButtonTouchDown:(id)a3
{
  id v3;

  -[CAMViewfinderViewController _feedbackController](self, "_feedbackController", a3);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "prepareDiscreteFeedback:", 0);

}

- (void)_handleFlipButtonReleased:(id)a3
{
  void *v4;
  _BOOL8 v5;
  _BOOL8 v6;
  void *v7;
  uint64_t v8;

  -[CAMViewfinderViewController _feedbackController](self, "_feedbackController", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "performDiscreteFeedback:", 0);

  v5 = -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition") == 0;
  v6 = -[CAMViewfinderViewController _isSpatialVideoInVideoModeActiveForMode:devicePosition:](self, "_isSpatialVideoInVideoModeActiveForMode:devicePosition:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), v5);
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "defaultDeviceForModeChange:devicePosition:spatialVideoEnabled:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), v5, v6);

  -[CAMViewfinderViewController _handleUserChangedToDevice:](self, "_handleUserChangedToDevice:", v8);
}

- (void)_attemptShutterPressWithBlock:(id)a3
{
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  void *v7;
  unsigned __int8 v8;
  char v9;
  void *v10;
  void *v11;
  void *v12;
  void (**v13)(id, uint64_t);

  v13 = (void (**)(id, uint64_t))a3;
  v4 = mach_absolute_time();
  -[CAMViewfinderViewController _setLastShutterButtonTouchDownTime:](self, "_setLastShutterButtonTouchDownTime:", v4);
  CAMSignpostWithIDAndArgs(11, 0xEEEEB0B5B2B2EEEELL, 0, 0, 0, 0);
  objc_msgSend(MEMORY[0x1E0DE7910], "cancelPreviousPerformRequestsWithTarget:selector:object:", self, sel_pressShutterForRemoteShutter, 0);
  v5 = -[CAMViewfinderViewController _shutterButtonFeedbackForCurrentConfiguration](self, "_shutterButtonFeedbackForCurrentConfiguration");
  v6 = -[CAMViewfinderViewController _capturingFromPhysicalButton](self, "_capturingFromPhysicalButton");
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isCameraButtonSupported");

  v9 = v6 & v8;
  if ((v6 & v8 & 1) == 0)
  {
    -[CAMViewfinderViewController _feedbackController](self, "_feedbackController");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "prepareButtonFeedback:", v5);

  }
  if (!-[CAMViewfinderViewController _isControlDrawerShowingPersistentControl](self, "_isControlDrawerShowingPersistentControl"))-[CAMViewfinderViewController _collapseExpandedButtonsAnimated:](self, "_collapseExpandedButtonsAnimated:", 1);
  -[CAMViewfinderViewController _dismissOverlays](self, "_dismissOverlays");
  if (-[CAMViewfinderViewController _redirectShutterEventIfNecessary:](self, "_redirectShutterEventIfNecessary:", 1))
  {
    -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "resetAnimated:", 1);

  }
  else
  {
    -[CAMPreviewViewController notifyShutterButtonPressed](self->__previewViewController, "notifyShutterButtonPressed");
    if (v13)
      v13[2](v13, v4);
  }
  if ((v9 & 1) == 0)
  {
    -[CAMViewfinderViewController _setLastPerformedShutterButtonFeedbackType:](self, "_setLastPerformedShutterButtonFeedbackType:", v5);
    -[CAMViewfinderViewController _feedbackController](self, "_feedbackController");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "performPressButtonFeedback:", -[CAMViewfinderViewController _lastPerformedShutterButtonFeedbackType](self, "_lastPerformedShutterButtonFeedbackType"));

  }
}

- (void)_attemptShutterReleaseWithBlock:(id)a3
{
  BOOL v4;
  void *v5;
  unsigned __int8 v6;
  char v7;
  void *v8;
  BOOL v9;
  void *v10;
  void (**v11)(void);

  v11 = (void (**)(void))a3;
  CAMSignpostWithIDAndArgs(12, 0xEEEEB0B5B2B2EEEELL, 0, 0, 0, 0);
  v4 = -[CAMViewfinderViewController _capturingFromPhysicalButton](self, "_capturingFromPhysicalButton");
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isCameraButtonSupported");

  v7 = v4 & v6;
  if ((v4 & v6 & 1) == 0)
  {
    -[CAMViewfinderViewController _feedbackController](self, "_feedbackController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "prepareButtonFeedback:", -[CAMViewfinderViewController _lastPerformedShutterButtonFeedbackType](self, "_lastPerformedShutterButtonFeedbackType"));

  }
  v9 = -[CAMViewfinderViewController _redirectShutterEventIfNecessary:](self, "_redirectShutterEventIfNecessary:", 64);
  if (v11 && !v9)
    v11[2]();
  if ((v7 & 1) == 0)
  {
    -[CAMViewfinderViewController _feedbackController](self, "_feedbackController");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "performReleaseButtonFeedback:", -[CAMViewfinderViewController _lastPerformedShutterButtonFeedbackType](self, "_lastPerformedShutterButtonFeedbackType"));

  }
}

- (BOOL)dynamicShutterControlCanStartOnTouchDown:(id)a3
{
  unint64_t v4;

  v4 = -[CAMViewfinderViewController _currentMode](self, "_currentMode", a3);
  return v4 > 9
      || ((1 << v4) & 0x211) == 0
      || -[CAMViewfinderViewController _shouldCaptureWithTimer](self, "_shouldCaptureWithTimer");
}

- (BOOL)dynamicShutterControlShouldBeginGesture:(id)a3
{
  return !-[CAMViewfinderViewController _isActiveZooming](self, "_isActiveZooming", a3);
}

- (void)dynamicShutterControlGesturesDidBegin:(id)a3
{
  NSObject *v4;
  _QWORD v5[5];
  uint8_t buf[16];

  v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DB760000, v4, OS_LOG_TYPE_DEFAULT, "Dynamic Shutter: GesturesDidBegin", buf, 2u);
  }

  -[CAMViewfinderViewController _stopSmartStyleOnboardingControlRevealAnimation](self, "_stopSmartStyleOnboardingControlRevealAnimation");
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __69__CAMViewfinderViewController_dynamicShutterControlGesturesDidBegin___block_invoke;
  v5[3] = &unk_1EA32A8A8;
  v5[4] = self;
  -[CAMViewfinderViewController _attemptShutterPressWithBlock:](self, "_attemptShutterPressWithBlock:", v5);
}

uint64_t __69__CAMViewfinderViewController_dynamicShutterControlGesturesDidBegin___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v4;
  int v5;
  void *v6;
  char v7;
  void *v8;
  char v9;
  char v10;
  uint64_t result;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isCTMVideoCaptureSupportedForMode:", objc_msgSend(*(id *)(a1 + 32), "_currentMode"));

  objc_msgSend(*(id *)(a1 + 32), "_captureController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isCapturingVideo");

  objc_msgSend(*(id *)(a1 + 32), "_captureController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "isCapturingLowLightImage");

  v10 = objc_msgSend(*(id *)(a1 + 32), "_isCapturingFromTimer");
  result = objc_msgSend(*(id *)(a1 + 32), "_resolvedTimerDuration");
  if (v5 && (v7 & 1) == 0 && (v10 & 1) == 0 && !result && (v9 & 1) == 0)
    return objc_msgSend(*(id *)(a1 + 32), "_initiateCTMCaptureWithCurrentSettingsAtSystemTime:", a2);
  return result;
}

- (void)dynamicShutterControlGesturesDidEnd:(id)a3
{
  id v4;
  NSObject *v5;
  int v6;
  int64_t v7;
  void *v8;
  uint8_t v9[16];

  v4 = a3;
  v5 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_1DB760000, v5, OS_LOG_TYPE_DEFAULT, "Dynamic Shutter: GesturesDidEnd", v9, 2u);
  }

  -[CAMViewfinderViewController _attemptShutterReleaseWithBlock:](self, "_attemptShutterReleaseWithBlock:", 0);
  -[CAMViewfinderViewController _cancelCTMCapture](self, "_cancelCTMCapture");
  v6 = objc_msgSend(v4, "isShutterStateDefault");

  if (v6
    && -[CAMViewfinderViewController _trueVideoIsTransitioningToCapture](self, "_trueVideoIsTransitioningToCapture"))
  {
    v7 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
    if (v7 == -[CAMViewfinderViewController _trueVideoDestinationCaptureMode](self, "_trueVideoDestinationCaptureMode"))
    {
      -[CAMViewfinderViewController _trueVideoStopCapture](self, "_trueVideoStopCapture");
    }
    else
    {
      -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setTrueVideoState:", 0);

      -[CAMViewfinderViewController _updateEnabledControlsWithReason:](self, "_updateEnabledControlsWithReason:", CFSTR("True video state changed to idle"));
    }
  }
}

- (void)dynamicShutterControlGesturesDidCancel:(id)a3
{
  const __CFString *v4;
  void *v5;
  NSObject *v6;
  int v7;
  const __CFString *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (-[CAMViewfinderViewController _currentMode](self, "_currentMode", a3))
  {
    v4 = CFSTR("no context");
  }
  else
  {
    -[CAMViewfinderViewController _currentStillImageCaptureMomentSettings](self, "_currentStillImageCaptureMomentSettings");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      -[CAMViewfinderViewController _cancelCTMCapture](self, "_cancelCTMCapture");
      v4 = CFSTR("cancel CTM capture");
    }
    else
    {
      v4 = CFSTR("no context");
    }

  }
  v6 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 138543362;
    v8 = v4;
    _os_log_impl(&dword_1DB760000, v6, OS_LOG_TYPE_DEFAULT, "Dynamic Shutter: GesturesDidCancel: %{public}@", (uint8_t *)&v7, 0xCu);
  }

}

- (void)dynamicShutterControlDidShortPress:(id)a3
{
  NSObject *v4;
  unint64_t v5;
  NSObject *v6;
  uint8_t v7[16];

  v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1DB760000, v4, OS_LOG_TYPE_DEFAULT, "Dynamic Shutter: DidShortPress", v7, 2u);
  }

  v5 = -[CAMViewfinderViewController currentCaptureMode](self, "currentCaptureMode");
  if (v5 <= 9)
  {
    if (((1 << v5) & 0x1BE) != 0)
    {
      -[CAMViewfinderViewController currentCaptureMode](self, "currentCaptureMode");
      v6 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        -[CAMViewfinderViewController dynamicShutterControlDidShortPress:].cold.1();

    }
    else if (((1 << v5) & 0x240) != 0)
    {
      -[CAMViewfinderViewController _captureStillImageWithCurrentSettings](self, "_captureStillImageWithCurrentSettings");
    }
    else
    {
      -[CAMViewfinderViewController _commitCTMCaptureWithType:](self, "_commitCTMCaptureWithType:", 1);
    }
  }
}

- (void)dynamicShutterControlDidStart:(id)a3 withGesture:(int64_t)a4
{
  NSObject *v6;
  NSObject *v7;
  void *v8;
  char v9;
  NSObject *v10;
  void *v11;
  void *v12;
  CAMViewfinderViewController *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  char v17;
  void *v18;
  int64_t v19;
  uint64_t v20;
  CAMViewfinderViewController *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  int64_t v25;
  uint8_t v26[16];
  uint8_t buf[16];

  v6 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DB760000, v6, OS_LOG_TYPE_DEFAULT, "Dynamic Shutter: DidStart", buf, 2u);
  }

  switch(-[CAMViewfinderViewController currentCaptureMode](self, "currentCaptureMode"))
  {
    case 0:
    case 4:
    case 6:
    case 9:
      if (-[CAMViewfinderViewController _shouldCaptureWithTimer](self, "_shouldCaptureWithTimer"))
      {
        v7 = os_log_create("com.apple.camera", "Camera");
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v26 = 0;
          _os_log_impl(&dword_1DB760000, v7, OS_LOG_TYPE_DEFAULT, "Dynamic Shutter: Starting timer countdown", v26, 2u);
        }

        -[CAMViewfinderViewController _cancelCTMCapture](self, "_cancelCTMCapture");
        -[CAMViewfinderViewController _startCountdownForCaptureTimer](self, "_startCountdownForCaptureTimer");
        return;
      }
      if (a4 == 1)
      {
        -[CAMViewfinderViewController _setCurrentLowLightCaptureCancelable:](self, "_setCurrentLowLightCaptureCancelable:", 1);
        -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        -[CAMViewfinderViewController _updateShutterButtonForGraphConfiguration:isCapturing:animated:](self, "_updateShutterButtonForGraphConfiguration:isCapturing:animated:", v11, 1, 1);

        -[CAMViewfinderViewController _currentStillImageCaptureMomentSettings](self, "_currentStillImageCaptureMomentSettings");
        v12 = (void *)objc_claimAutoreleasedReturnValue();

        v13 = self;
        if (!v12)
        {
          -[CAMViewfinderViewController _captureStillImageWithCurrentSettings](self, "_captureStillImageWithCurrentSettings");
          return;
        }
        v14 = 1;
        goto LABEL_39;
      }
      if (-[CAMViewfinderViewController currentCaptureMode](self, "currentCaptureMode") != 6)
      {
        +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v18, "isTrueVideoSupported"))
        {
          v19 = -[CAMViewfinderViewController currentCaptureMode](self, "currentCaptureMode");

          if (!v19)
          {
            -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            v20 = objc_msgSend(v15, "viewportAspectRatio");
            v21 = self;
            v22 = 0;
            v23 = 1;
LABEL_35:
            -[CAMViewfinderViewController _startTransitioningToTrueVideoCaptureFromSourceMode:sourceAspectRatio:toDestinationMode:](v21, "_startTransitioningToTrueVideoCaptureFromSourceMode:sourceAspectRatio:toDestinationMode:", v22, v20, v23);
            goto LABEL_36;
          }
        }
        else
        {

        }
        +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v24, "isSpatialModeTrueVideoSupported"))
        {
          v25 = -[CAMViewfinderViewController currentCaptureMode](self, "currentCaptureMode");

          if (v25 == 9)
          {
            -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            v20 = objc_msgSend(v15, "viewportAspectRatio");
            v21 = self;
            v22 = 9;
            v23 = 8;
            goto LABEL_35;
          }
        }
        else
        {

        }
        v13 = self;
        v14 = 2;
LABEL_39:
        -[CAMViewfinderViewController _commitCTMCaptureWithType:](v13, "_commitCTMCaptureWithType:", v14);
        return;
      }
      v10 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        -[CAMViewfinderViewController dynamicShutterControlDidStart:withGesture:].cold.1();
LABEL_24:

      return;
    case 1:
    case 2:
    case 7:
    case 8:
      -[CAMViewfinderViewController _captureController](self, "_captureController");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v8, "isCapturingVideo");

      if ((v9 & 1) == 0)
      {
        -[CAMViewfinderViewController _videoCaptureRequestWithCurrentSettings](self, "_videoCaptureRequestWithCurrentSettings");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        -[CAMViewfinderViewController _startCapturingVideoWithRequest:](self, "_startCapturingVideoWithRequest:", v15);
        goto LABEL_36;
      }
      v10 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        -[CAMViewfinderViewController dynamicShutterControlDidStart:withGesture:].cold.2();
      goto LABEL_24;
    case 3:
      -[CAMViewfinderViewController _captureController](self, "_captureController");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = objc_msgSend(v16, "isCapturingPanorama");

      if ((v17 & 1) != 0)
      {
        v10 = os_log_create("com.apple.camera", "Camera");
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          -[CAMViewfinderViewController dynamicShutterControlDidStart:withGesture:].cold.3();
        goto LABEL_24;
      }
      -[CAMViewfinderViewController _panoramaCaptureRequestWithCurrentSettings](self, "_panoramaCaptureRequestWithCurrentSettings");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMViewfinderViewController _startCapturingPanoramaWithRequest:](self, "_startCapturingPanoramaWithRequest:", v15);
LABEL_36:

      return;
    case 5:
      if (!-[CAMViewfinderViewController _isCapturingTimelapse](self, "_isCapturingTimelapse"))
      {
        -[CAMViewfinderViewController _startTimelapse](self, "_startTimelapse");
        return;
      }
      v10 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        -[CAMViewfinderViewController dynamicShutterControlDidStart:withGesture:].cold.4();
      goto LABEL_24;
    default:
      return;
  }
}

- (void)dynamicShutterControlDidStartZoomGesture:(id)a3
{
  NSObject *v4;
  uint8_t v5[16];

  v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1DB760000, v4, OS_LOG_TYPE_DEFAULT, "Dynamic Shutter: didStartZoomGesture", v5, 2u);
  }

  -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
  -[CAMViewfinderViewController _setVideoZoomFactorAtDynamicShutterStart:](self, "_setVideoZoomFactorAtDynamicShutterStart:");
}

- (void)dynamicShutterControl:(id)a3 didChangeRelativeZoomProgress:(double)a4
{
  NSObject *v6;
  void *v7;
  unint64_t v8;
  double v9;
  double v10;
  double v11;
  _QWORD v12[5];
  uint8_t buf[4];
  double v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v6 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v14 = a4;
    _os_log_impl(&dword_1DB760000, v6, OS_LOG_TYPE_DEFAULT, "Dynamic Shutter: didChangeRelativeZoomProgress: %f", buf, 0xCu);
  }

  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "defaultCustomLens");

  if (v8 > 5)
    v9 = NAN;
  else
    v9 = dbl_1DB9A5360[v8] / dbl_1DB9A5330[v8];
  v10 = pow(1.0 / (0.5 / v9), a4);
  -[CAMViewfinderViewController _videoZoomFactorAtDynamicShutterStart](self, "_videoZoomFactorAtDynamicShutterStart");
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __83__CAMViewfinderViewController_dynamicShutterControl_didChangeRelativeZoomProgress___block_invoke;
  v12[3] = &unk_1EA32A8D0;
  v12[4] = self;
  -[CAMViewfinderViewController _updateZoomFactorForZoomFactor:rampDuration:interactionType:didChangeDevice:](self, "_updateZoomFactorForZoomFactor:rampDuration:interactionType:didChangeDevice:", 5, v12, v11 * v10, 0.5);
  -[CAMViewfinderViewController _setLastZoomInteractionType:](self, "_setLastZoomInteractionType:", 5);
}

uint64_t __83__CAMViewfinderViewController_dynamicShutterControl_didChangeRelativeZoomProgress___block_invoke(uint64_t a1, double a2)
{
  void *v3;
  double v4;

  v3 = *(void **)(a1 + 32);
  objc_msgSend(v3, "_videoZoomFactorAtDynamicShutterStart");
  return objc_msgSend(v3, "_setVideoZoomFactorAtDynamicShutterStart:", v4 * a2);
}

- (void)dynamicShutterControlDidStop:(id)a3
{
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  _QWORD v11[4];
  id v12;
  uint8_t buf[16];

  v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DB760000, v4, OS_LOG_TYPE_DEFAULT, "Dynamic Shutter: DidStop", buf, 2u);
  }

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  switch(-[CAMViewfinderViewController currentCaptureMode](self, "currentCaptureMode"))
  {
    case 0:
    case 4:
    case 6:
    case 9:
      if (-[CAMViewfinderViewController _isCapturingFromTimer](self, "_isCapturingFromTimer"))
      {
        -[CAMViewfinderViewController _stopCountdownForCaptureTimer](self, "_stopCountdownForCaptureTimer");
      }
      else if (objc_msgSend(v5, "isCapturingLowLightImage"))
      {
        -[CAMViewfinderViewController _closedViewfinderController](self, "_closedViewfinderController");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "addClosedViewfinderReason:", 13);

        -[CAMViewfinderViewController _cancelCaptureAnimation](self, "_cancelCaptureAnimation");
        v11[0] = MEMORY[0x1E0C809B0];
        v11[1] = 3221225472;
        v11[2] = __60__CAMViewfinderViewController_dynamicShutterControlDidStop___block_invoke;
        v11[3] = &unk_1EA328868;
        v12 = v5;
        objc_msgSend(v12, "stopCaptureSessionWithCompletion:", v11);
        -[CAMViewfinderViewController _setCurrentLowLightCaptureCancelable:](self, "_setCurrentLowLightCaptureCancelable:", 0);
        -[CAMViewfinderViewController _updateEnabledControlsWithReason:](self, "_updateEnabledControlsWithReason:", CFSTR("Night mode capture cancel began"));
        -[CAMViewfinderViewController _controlDrawer](self, "_controlDrawer");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "lowLightSlider");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "endCaptureAnimationAnimated:", 1);

        -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "setSpinning:", 1);

      }
      else
      {
        if (-[CAMViewfinderViewController currentCaptureMode](self, "currentCaptureMode") == 6)
        {
          v10 = os_log_create("com.apple.camera", "Camera");
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            -[CAMViewfinderViewController dynamicShutterControlDidStop:].cold.1();
          goto LABEL_25;
        }
        -[CAMViewfinderViewController _stopCapturingCTMVideo](self, "_stopCapturingCTMVideo");
      }
      break;
    case 1:
    case 2:
    case 7:
    case 8:
      if (-[CAMViewfinderViewController _trueVideoIsCapturing](self, "_trueVideoIsCapturing"))
      {
        -[CAMViewfinderViewController _trueVideoStopCapture](self, "_trueVideoStopCapture");
      }
      else
      {
        if (!objc_msgSend(v5, "isCapturingVideo"))
        {
          v10 = os_log_create("com.apple.camera", "Camera");
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            -[CAMViewfinderViewController dynamicShutterControlDidStop:].cold.2();
          goto LABEL_25;
        }
        -[CAMViewfinderViewController _stopCapturingVideo](self, "_stopCapturingVideo");
      }
      break;
    case 3:
      if (!objc_msgSend(v5, "isCapturingPanorama"))
      {
        v10 = os_log_create("com.apple.camera", "Camera");
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          -[CAMViewfinderViewController dynamicShutterControlDidStop:].cold.3();
        goto LABEL_25;
      }
      -[CAMViewfinderViewController _stopCapturingPanorama](self, "_stopCapturingPanorama");
      break;
    case 5:
      if (-[CAMViewfinderViewController _isCapturingTimelapse](self, "_isCapturingTimelapse"))
      {
        -[CAMViewfinderViewController _stopTimelapse](self, "_stopTimelapse");
      }
      else
      {
        v10 = os_log_create("com.apple.camera", "Camera");
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          -[CAMViewfinderViewController dynamicShutterControlDidStop:].cold.4();
LABEL_25:

      }
      break;
    default:
      break;
  }

}

uint64_t __60__CAMViewfinderViewController_dynamicShutterControlDidStop___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "startCaptureSession");
}

- (void)dynamicShutterControlDidPressLockButton:(id)a3
{
  NSObject *v4;
  int64_t v5;
  void *v6;
  int v7;
  NSObject *v8;
  NSObject *v9;
  void *v11;
  char v12;
  NSObject *v13;
  uint8_t v14[16];

  v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_1DB760000, v4, OS_LOG_TYPE_DEFAULT, "Dynamic Shutter: DidPressLockButton", v14, 2u);
  }

  -[CAMViewfinderViewController _setLastShutterButtonTouchDownTime:](self, "_setLastShutterButtonTouchDownTime:", mach_absolute_time());
  CAMSignpostWithIDAndArgs(13, 0xEEEEB0B5B2B2EEEELL, 0, 0, 0, 0);
  CAMSignpostWithIDAndArgs(14, 0xEEEEB0B5B2B2EEEELL, 0, 0, 0, 0);
  v5 = -[CAMViewfinderViewController currentCaptureMode](self, "currentCaptureMode");
  if ((unint64_t)(v5 - 3) < 7)
  {
    -[CAMViewfinderViewController currentCaptureMode](self, "currentCaptureMode");
    v9 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      -[CAMViewfinderViewController dynamicShutterControlDidPressLockButton:].cold.3();

    return;
  }
  if ((unint64_t)(v5 - 1) >= 2)
  {
    if (v5)
      return;
    -[CAMViewfinderViewController _captureController](self, "_captureController");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "isCapturingVideo");

    if ((v12 & 1) == 0)
    {
      v13 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        -[CAMViewfinderViewController dynamicShutterControlDidPressLockButton:].cold.1();

    }
    goto LABEL_18;
  }
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isCapturingVideo");

  if (v7)
  {
LABEL_18:
    -[CAMViewfinderViewController _captureStillImageWithCurrentSettings](self, "_captureStillImageWithCurrentSettings");
    return;
  }
  v8 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    -[CAMViewfinderViewController dynamicShutterControlDidPressLockButton:].cold.2();

}

- (void)dynamicShutterControlDidPressPauseResumeButton:(id)a3
{
  void *v4;
  int v5;
  void *v6;
  int v7;
  void *v8;
  int v9;
  NSObject *v10;
  _BOOL4 v11;
  NSObject *v12;
  NSObject *v13;
  uint8_t v14[16];
  uint8_t buf[16];

  -[CAMViewfinderViewController _setLastShutterButtonTouchDownTime:](self, "_setLastShutterButtonTouchDownTime:", mach_absolute_time());
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isPauseVideoSupportedForMode:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"));

  if (v5)
  {
    -[CAMViewfinderViewController _captureController](self, "_captureController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "isCapturingVideo");

    if (v7)
    {
      -[CAMViewfinderViewController _captureController](self, "_captureController");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v8, "videoCapturePaused");

      v10 = os_log_create("com.apple.camera", "Camera");
      v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      if (v9)
      {
        if (v11)
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1DB760000, v10, OS_LOG_TYPE_DEFAULT, "Dynamic Shutter: DidPressResume", buf, 2u);
        }

        -[CAMViewfinderViewController _resumeCaptureVideo](self, "_resumeCaptureVideo");
      }
      else
      {
        if (v11)
        {
          *(_WORD *)v14 = 0;
          _os_log_impl(&dword_1DB760000, v10, OS_LOG_TYPE_DEFAULT, "Dynamic Shutter: DidPressPause", v14, 2u);
        }

        -[CAMViewfinderViewController _pauseCapturingVideo](self, "_pauseCapturingVideo");
      }
      -[CAMViewfinderViewController updateControlVisibilityAnimated:](self, "updateControlVisibilityAnimated:", 1);
    }
    else
    {
      v13 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        -[CAMViewfinderViewController dynamicShutterControlDidPressPauseResumeButton:].cold.1();

    }
  }
  else
  {
    v12 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      -[CAMViewfinderViewController dynamicShutterControlDidPressPauseResumeButton:].cold.2(self, v12);

  }
}

- (void)dynamicShutterControlDidPresentCounter:(id)a3
{
  NSObject *v4;
  void *v5;
  NSObject *v6;
  uint8_t v7[16];

  v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1DB760000, v4, OS_LOG_TYPE_DEFAULT, "Dynamic Shutter: DidPresentCounter", v7, 2u);
  }

  -[CAMViewfinderViewController _currentStillImageCaptureMomentSettings](self, "_currentStillImageCaptureMomentSettings");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    -[CAMViewfinderViewController _cancelCTMCapture](self, "_cancelCTMCapture");
  }
  else
  {
    v6 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      -[CAMViewfinderViewController dynamicShutterControlDidPresentCounter:].cold.1();

  }
  -[CAMViewfinderViewController _beginCapturingBurst](self, "_beginCapturingBurst");

}

- (void)dynamicShutterControlDidDismissCounter:(id)a3
{
  NSObject *v4;
  uint8_t v5[16];

  v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1DB760000, v4, OS_LOG_TYPE_DEFAULT, "Dynamic Shutter: DidDismissCounter", v5, 2u);
  }

  -[CAMViewfinderViewController _stopCapturingBurst](self, "_stopCapturingBurst");
}

- (void)shutterControlTouchAttemptedWhileDisabled:(id)a3
{
  NSObject *v4;
  uint8_t v5[16];

  v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1DB760000, v4, OS_LOG_TYPE_DEFAULT, "Dynamic Shutter: TouchAttemptedWhileDisabled", v5, 2u);
  }

  -[CAMViewfinderViewController _handleDisabledShutterTap](self, "_handleDisabledShutterTap");
}

- (BOOL)_redirectShutterEventIfNecessary:(unint64_t)a3
{
  void *v5;
  void *v6;
  _BOOL4 v7;
  void *v8;
  int v9;
  void *v10;
  int v11;
  NSObject *v12;
  NSObject *v13;
  uint8_t v15[16];
  uint8_t buf[16];

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _callStatusMonitor](self, "_callStatusMonitor");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = -[CAMViewfinderViewController _shouldDisableModeForGraphConfiguration:callActive:](self, "_shouldDisableModeForGraphConfiguration:callActive:", v5, objc_msgSend(v6, "isCallActive"));

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "isInterrupted");

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "captureOnTouchDown");

  if (a3 != 1)
  {
    if (a3 != 128 && a3 != 64)
    {
      LOBYTE(v9) = 0;
      goto LABEL_14;
    }
    v11 ^= 1u;
  }
  if (v7)
  {
    v12 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1DB760000, v12, OS_LOG_TYPE_DEFAULT, "Ignoring shutter button while current mode is disabled", buf, 2u);
    }
LABEL_12:

    LOBYTE(v9) = 1;
    goto LABEL_14;
  }
  if ((v9 & v11) == 1)
  {
    v13 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_1DB760000, v13, OS_LOG_TYPE_DEFAULT, "Ignoring capture from shutter button: we're interrupted, attempting to end interruption", v15, 2u);
    }

    -[CAMViewfinderViewController _captureController](self, "_captureController");
    v12 = objc_claimAutoreleasedReturnValue();
    -[NSObject attemptToEndInterruptions](v12, "attemptToEndInterruptions");
    goto LABEL_12;
  }
LABEL_14:

  return v9;
}

- (void)_handleDisabledShutterTap
{
  unint64_t v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  _BOOL8 v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CAMAnalyticsIgnoredShutterEvent *v13;
  void *v14;
  void *v15;
  _BYTE v16[24];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  CAMSignpostWithIDAndArgs(65, 0xEEEEB0B5B2B2EEEELL, 0, 0, 0, 0);
  v3 = -[CAMViewfinderViewController _reasonsToDisableShutterButton](self, "_reasonsToDisableShutterButton");
  v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    CAMDebugStringForControlDisableReasons(v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v16 = 138543362;
    *(_QWORD *)&v16[4] = v5;
    _os_log_impl(&dword_1DB760000, v4, OS_LOG_TYPE_DEFAULT, "Disabled shutter button was tapped, disabled for reasons: %{public}@", v16, 0xCu);

  }
  if ((v3 & 1) != 0)
  {
    -[CAMViewfinderViewController _captureController](self, "_captureController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "logCaptureAvailabilityDescription");

  }
  -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7 != 0;

  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "responsiveShutterEnabled");

  v11 = mach_absolute_time();
  v12 = v11 - -[CAMViewfinderViewController _lastShutterButtonTouchDownTime](self, "_lastShutterButtonTouchDownTime");
  *(_QWORD *)v16 = 0;
  mach_timebase_info((mach_timebase_info_t)v16);
  v13 = -[CAMAnalyticsIgnoredShutterEvent initWithReasons:timeSinceLastPress:dynamicShutterEnabled:responsiveShutterEnabled:]([CAMAnalyticsIgnoredShutterEvent alloc], "initWithReasons:timeSinceLastPress:dynamicShutterEnabled:responsiveShutterEnabled:", v3, v8, v10, (double)(v12 * *(unsigned int *)v16 / *(unsigned int *)&v16[4]) / 1000000000.0);
  -[CAMAnalyticsEvent publish](v13, "publish");
  if ((v3 & 0x80) != 0)
  {
    -[CAMViewfinderViewController _storageController](self, "_storageController");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "purgeableStorageContainer");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "cancelPurge");

  }
}

void __59__CAMViewfinderViewController__handleShutterButtonPressed___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v4;
  int v5;
  void *v6;
  void *v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  char v11;
  id v12;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "captureOnTouchDown");

  objc_msgSend(*(id *)(a1 + 32), "_captureController");
  v12 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "_currentGraphConfiguration");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v5)
  {
    objc_msgSend(*(id *)(a1 + 32), "_handleShutterButtonActionWithEventTriggerDescription:", CFSTR("Shutter button pressed"));
  }
  else
  {
    v8 = objc_msgSend(v6, "mode");
    v9 = v8 > 9 || ((1 << v8) & 0x251) == 0;
    if (!v9 && objc_msgSend(*(id *)(a1 + 32), "_shouldReportUserInitiationTimeForCurrentSettings"))
      objc_msgSend(v12, "prepareToCaptureStillImageAtSystemTime:", a2);
  }
  if ((objc_msgSend(v7, "mode") | 4) == 4)
  {
    v10 = objc_msgSend(*(id *)(a1 + 32), "_layoutStyle");
    v11 = objc_msgSend(*(id *)(a1 + 32), "isDisablingMultipleCaptureFeatures");
    if (v10 != 2 && (v11 & 1) == 0)
      objc_msgSend(*(id *)(a1 + 32), "_setupBurstTimerWithDelay:", 0.4);
  }

}

- (void)_handleShutterButtonDragExited:(id)a3
{
  -[CAMViewfinderViewController _handleShutterButtonReleased:fromDragExit:](self, "_handleShutterButtonReleased:fromDragExit:", a3, 1);
}

- (void)_handleShutterButtonDragEnter:(id)a3
{
  unint64_t v4;
  void *v5;
  id v6;

  v4 = -[CAMViewfinderViewController _shutterButtonFeedbackForCurrentConfiguration](self, "_shutterButtonFeedbackForCurrentConfiguration", a3);
  -[CAMViewfinderViewController _feedbackController](self, "_feedbackController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "prepareButtonFeedback:", v4);

  -[CAMViewfinderViewController _setLastPerformedShutterButtonFeedbackType:](self, "_setLastPerformedShutterButtonFeedbackType:", v4);
  -[CAMViewfinderViewController _feedbackController](self, "_feedbackController");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "performPressButtonFeedback:", -[CAMViewfinderViewController _lastPerformedShutterButtonFeedbackType](self, "_lastPerformedShutterButtonFeedbackType"));

}

- (void)_handleShutterButtonReleased:(id)a3 fromDragExit:(BOOL)a4
{
  __CFString *v5;
  __CFString *v6;
  __CFString *v7;
  _QWORD v8[5];
  __CFString *v9;

  v5 = CFSTR("Shutter button released");
  if (a4)
    v5 = CFSTR("Shutter button drag exit");
  v6 = v5;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __73__CAMViewfinderViewController__handleShutterButtonReleased_fromDragExit___block_invoke;
  v8[3] = &unk_1EA328A40;
  v8[4] = self;
  v9 = v6;
  v7 = v6;
  -[CAMViewfinderViewController _attemptShutterReleaseWithBlock:](self, "_attemptShutterReleaseWithBlock:", v8);

}

void __73__CAMViewfinderViewController__handleShutterButtonReleased_fromDragExit___block_invoke(uint64_t a1)
{
  void *v2;
  int v3;
  void *v4;
  void *v5;
  int v6;
  NSObject *v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "captureOnTouchDown");

  objc_msgSend(*(id *)(a1 + 32), "_captureController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = *(void **)(a1 + 32);
  if (v3)
  {
    objc_msgSend(v5, "_teardownBurstTimer");
    v6 = objc_msgSend(v4, "isCapturingBurst");
    v7 = os_log_create("com.apple.camera", "Camera");
    v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v6)
    {
      if (v8)
      {
        v9 = *(_QWORD *)(a1 + 40);
        v11 = 138543362;
        v12 = v9;
        _os_log_impl(&dword_1DB760000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@: Stop capturing burst", (uint8_t *)&v11, 0xCu);
      }

      objc_msgSend(*(id *)(a1 + 32), "_stopCapturingBurst");
    }
    else
    {
      if (v8)
      {
        v10 = *(_QWORD *)(a1 + 40);
        v11 = 138543362;
        v12 = v10;
        _os_log_impl(&dword_1DB760000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@", (uint8_t *)&v11, 0xCu);
      }

    }
  }
  else
  {
    objc_msgSend(v5, "_handleShutterButtonActionWithEventTriggerDescription:", *(_QWORD *)(a1 + 40));
  }

}

- (void)_handleShutterButtonCancelled:(id)a3
{
  void *v4;
  const __CFString *v5;
  NSObject *v6;
  int v7;
  const __CFString *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if ((-[CAMViewfinderViewController _currentMode](self, "_currentMode", a3) | 4) == 4)
  {
    -[CAMViewfinderViewController _teardownBurstTimer](self, "_teardownBurstTimer");
    -[CAMViewfinderViewController _captureController](self, "_captureController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "isCapturingBurst"))
    {
      -[CAMViewfinderViewController _stopCapturingBurst](self, "_stopCapturingBurst");
      v5 = CFSTR("stop capturing burst");
    }
    else
    {
      v5 = CFSTR("no context");
    }

  }
  else
  {
    v5 = CFSTR("no context");
  }
  v6 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 138543362;
    v8 = v5;
    _os_log_impl(&dword_1DB760000, v6, OS_LOG_TYPE_DEFAULT, "Shutter button cancelled: %{public}@", (uint8_t *)&v7, 0xCu);
  }

}

- (BOOL)_stillDuringVideoButtonPressed:(id)a3
{
  _BOOL4 v4;
  unint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  -[CAMViewfinderViewController _setLastShutterButtonTouchDownTime:](self, "_setLastShutterButtonTouchDownTime:", mach_absolute_time());
  CAMSignpostWithIDAndArgs(13, 0xEEEEB0B5B2B2EEEELL, 0, 0, 0, 0);
  v4 = -[CUCaptureController isCapturingVideo](self->__captureController, "isCapturingVideo");
  if (v4)
  {
    v5 = -[CAMViewfinderViewController _shutterButtonFeedbackForCurrentConfiguration](self, "_shutterButtonFeedbackForCurrentConfiguration");
    -[CAMViewfinderViewController _feedbackController](self, "_feedbackController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "prepareButtonFeedback:", v5);

    -[CAMViewfinderViewController _setLastPerformedShutterButtonFeedbackType:](self, "_setLastPerformedShutterButtonFeedbackType:", v5);
    -[CAMViewfinderViewController _feedbackController](self, "_feedbackController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "performPressButtonFeedback:", -[CAMViewfinderViewController _lastPerformedShutterButtonFeedbackType](self, "_lastPerformedShutterButtonFeedbackType"));

    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v6) = objc_msgSend(v8, "captureOnTouchDown");

    if ((_DWORD)v6)
      LOBYTE(v4) = -[CAMViewfinderViewController _captureStillImageWithCurrentSettings](self, "_captureStillImageWithCurrentSettings");
    else
      LOBYTE(v4) = 1;
  }
  return v4;
}

- (BOOL)_stillDuringVideoButtonReleased:(id)a3
{
  _BOOL4 v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;

  CAMSignpostWithIDAndArgs(14, 0xEEEEB0B5B2B2EEEELL, 0, 0, 0, 0);
  v4 = -[CUCaptureController isCapturingVideo](self->__captureController, "isCapturingVideo");
  if (v4)
  {
    -[CAMViewfinderViewController _feedbackController](self, "_feedbackController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "prepareButtonFeedback:", -[CAMViewfinderViewController _lastPerformedShutterButtonFeedbackType](self, "_lastPerformedShutterButtonFeedbackType"));

    -[CAMViewfinderViewController _feedbackController](self, "_feedbackController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "performReleaseButtonFeedback:", -[CAMViewfinderViewController _lastPerformedShutterButtonFeedbackType](self, "_lastPerformedShutterButtonFeedbackType"));

    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "captureOnTouchDown");

    LOBYTE(v4) = (v8 & 1) != 0
              || -[CAMViewfinderViewController _captureStillImageWithCurrentSettings](self, "_captureStillImageWithCurrentSettings");
  }
  return v4;
}

- (void)_createPhysicalCaptureInteractionIfNeeded
{
  void *v3;
  char v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  _QWORD v10[4];
  id v11;
  _QWORD v12[4];
  id v13;
  id location;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isHalfPressOverlayInProcess");

  if ((v4 & 1) == 0)
  {
    -[CAMViewfinderViewController _physicalButtonInteraction](self, "_physicalButtonInteraction");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v5)
    {
      objc_initWeak(&location, self);
      v6 = objc_alloc(MEMORY[0x1E0C8B400]);
      v7 = MEMORY[0x1E0C809B0];
      v12[0] = MEMORY[0x1E0C809B0];
      v12[1] = 3221225472;
      v12[2] = __72__CAMViewfinderViewController__createPhysicalCaptureInteractionIfNeeded__block_invoke;
      v12[3] = &unk_1EA32A8F8;
      objc_copyWeak(&v13, &location);
      v10[0] = v7;
      v10[1] = 3221225472;
      v10[2] = __72__CAMViewfinderViewController__createPhysicalCaptureInteractionIfNeeded__block_invoke_798;
      v10[3] = &unk_1EA32A8F8;
      objc_copyWeak(&v11, &location);
      v8 = (void *)objc_msgSend(v6, "initWithPrimaryEventHandler:secondaryEventHandler:", v12, v10);
      -[CAMViewfinderViewController view](self, "view");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "addInteraction:", v8);

      -[CAMViewfinderViewController set_physicalButtonInteraction:](self, "set_physicalButtonInteraction:", v8);
      objc_destroyWeak(&v11);
      objc_destroyWeak(&v13);
      objc_destroyWeak(&location);
    }
  }
}

void __72__CAMViewfinderViewController__createPhysicalCaptureInteractionIfNeeded__block_invoke(uint64_t a1, void *a2)
{
  unint64_t v3;
  NSObject *v4;
  __CFString *v5;
  id WeakRetained;
  int v7;
  __CFString *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = +[CAMCaptureConversions buttonPhaseForCaptureButtonPhase:](CAMCaptureConversions, "buttonPhaseForCaptureButtonPhase:", objc_msgSend(a2, "phase"));
  v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (v3 > 3)
      v5 = 0;
    else
      v5 = off_1EA32AE60[v3];
    v7 = 138543362;
    v8 = v5;
    _os_log_impl(&dword_1DB760000, v4, OS_LOG_TYPE_DEFAULT, "Primary button press stage: %{public}@", (uint8_t *)&v7, 0xCu);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_handlePhysicalCaptureInteractionDidChangePhase:forButton:", v3, 2);

}

void __72__CAMViewfinderViewController__createPhysicalCaptureInteractionIfNeeded__block_invoke_798(uint64_t a1, void *a2)
{
  unint64_t v3;
  NSObject *v4;
  __CFString *v5;
  id WeakRetained;
  int v7;
  __CFString *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = +[CAMCaptureConversions buttonPhaseForCaptureButtonPhase:](CAMCaptureConversions, "buttonPhaseForCaptureButtonPhase:", objc_msgSend(a2, "phase"));
  v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (v3 > 3)
      v5 = 0;
    else
      v5 = off_1EA32AE60[v3];
    v7 = 138543362;
    v8 = v5;
    _os_log_impl(&dword_1DB760000, v4, OS_LOG_TYPE_DEFAULT, "Secondary (volume-up) button press stage: %{public}@", (uint8_t *)&v7, 0xCu);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_handlePhysicalCaptureInteractionDidChangePhase:forButton:", v3, 1);

}

- (void)_handlePhysicalCaptureInteractionDidChangePhase:(unint64_t)a3 forButton:(int64_t)a4
{
  if (!-[CAMViewfinderViewController _isShowingCameraRoll](self, "_isShowingCameraRoll"))
  {
    switch(a3)
    {
      case 3uLL:
        -[CAMViewfinderViewController _handlePhysicalButtonCancelled:](self, "_handlePhysicalButtonCancelled:", a4);
        break;
      case 2uLL:
        -[CAMViewfinderViewController _handlePhysicalButtonReleased:](self, "_handlePhysicalButtonReleased:", a4);
        break;
      case 0uLL:
        -[CAMViewfinderViewController _handlePhysicalButtonPressed:](self, "_handlePhysicalButtonPressed:", a4);
        break;
    }
  }
}

- (void)_createCameraCaseShutterNotifierIfNeeded
{
  void *v3;
  CAMPhysicalCaptureNotifier *v4;
  void *v5;
  CAMPhysicalCaptureNotifier *v6;
  id v7;

  -[CAMViewfinderViewController _cameraCaseShutterNotifier](self, "_cameraCaseShutterNotifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
  {
    v4 = [CAMPhysicalCaptureNotifier alloc];
    -[CAMViewfinderViewController view](self, "view");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = -[CAMPhysicalCaptureNotifier initWithView:includeVolumeButtons:](v4, "initWithView:includeVolumeButtons:", v5, 0);
    -[CAMViewfinderViewController set_cameraCaseShutterNotifier:](self, "set_cameraCaseShutterNotifier:", v6);

    -[CAMViewfinderViewController _cameraCaseShutterNotifier](self, "_cameraCaseShutterNotifier");
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setDelegate:", self);

  }
}

- (void)physicalCaptureNotifierDidChangeState:(id)a3 forButton:(int64_t)a4
{
  uint64_t v6;

  v6 = objc_msgSend(a3, "cameraCaseButtonState");
  if (!-[CAMViewfinderViewController _isShowingCameraRoll](self, "_isShowingCameraRoll"))
  {
    if (v6)
    {
      if (v6 == 1)
        -[CAMViewfinderViewController _handlePhysicalButtonPressed:](self, "_handlePhysicalButtonPressed:", a4);
    }
    else
    {
      -[CAMViewfinderViewController _handlePhysicalButtonReleased:](self, "_handlePhysicalButtonReleased:", a4);
    }
  }
}

- (BOOL)_allowsPhysicalCaptureInteraction
{
  void *v2;
  char v3;

  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "BOOLForKey:", CFSTR("PLIgnoreVolumeButtons"));

  return v3 ^ 1;
}

- (void)_handlePhysicalButtonPressed:(int64_t)a3
{
  void *v5;
  int v6;
  char v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  uint8_t v15[16];

  if (-[CAMViewfinderViewController _allowsPhysicalCaptureInteraction](self, "_allowsPhysicalCaptureInteraction"))
  {
    -[CAMViewfinderViewController _primaryShutterControl](self, "_primaryShutterControl");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "isEnabled");
    v7 = objc_msgSend(v5, "isTracking");
    if (v6 && (v7 & 1) == 0)
    {
      v8 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v15 = 0;
        _os_log_impl(&dword_1DB760000, v8, OS_LOG_TYPE_DEFAULT, "Physical shutter button pressed", v15, 2u);
      }

      -[CAMViewfinderViewController _setCurrentlyPressedButton:](self, "_setCurrentlyPressedButton:", +[CAMViewfinderViewController _pressTypeForCaptureButton:](CAMViewfinderViewController, "_pressTypeForCaptureButton:", a3));
      objc_msgSend(v5, "setHighlighted:", 1);
      -[CAMViewfinderViewController _updateEnabledControlsWithReason:](self, "_updateEnabledControlsWithReason:", CFSTR("Physical capture button pressed"));
      -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      if (v9)
      {
        v10 = 0;
        switch(a3)
        {
          case 1:
            +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            if ((objc_msgSend(v12, "isBurstSupportedForMode:device:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevice](self, "_currentDevice")) & 1) == 0)
            {

              goto LABEL_8;
            }
            +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            v14 = objc_msgSend(v13, "shouldUseVolumeUpBurst");

            if (!v14
              || -[CAMViewfinderViewController isDisablingMultipleCaptureFeatures](self, "isDisablingMultipleCaptureFeatures"))
            {
              goto LABEL_8;
            }
            v10 = 2;
            break;
          case 2:
          case 4:
          case 5:
          case 6:
LABEL_8:
            v10 = 1;
            break;
          default:
            break;
        }
        -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "externalButtonPressedWithBehavior:", v10);
      }
      else
      {
        -[CAMViewfinderViewController _shutterButton](self, "_shutterButton");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        -[CAMViewfinderViewController _handleShutterButtonPressed:](self, "_handleShutterButtonPressed:", v11);
      }

    }
  }
}

- (void)_handlePhysicalButtonReleased:(int64_t)a3
{
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  uint8_t v8[16];

  if (-[CAMViewfinderViewController _allowsPhysicalCaptureInteraction](self, "_allowsPhysicalCaptureInteraction", a3)
    && -[CAMViewfinderViewController _capturingFromPhysicalButton](self, "_capturingFromPhysicalButton"))
  {
    v4 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_1DB760000, v4, OS_LOG_TYPE_DEFAULT, "Physical capture button released", v8, 2u);
    }

    -[CAMViewfinderViewController _primaryShutterControl](self, "_primaryShutterControl");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setHighlighted:", 0);
    -[CAMViewfinderViewController _updateEnabledControlsWithReason:](self, "_updateEnabledControlsWithReason:", CFSTR("Physical capture button released"));
    -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (v6)
    {
      -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "externalButtonReleased");
    }
    else
    {
      -[CAMViewfinderViewController _shutterButton](self, "_shutterButton");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMViewfinderViewController _handleShutterButtonReleased:](self, "_handleShutterButtonReleased:", v7);
    }

    -[CAMViewfinderViewController _setCurrentlyPressedButton:](self, "_setCurrentlyPressedButton:", -1);
  }
}

- (void)_handlePhysicalButtonCancelled:(int64_t)a3
{
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  uint8_t v8[16];

  if (-[CAMViewfinderViewController _allowsPhysicalCaptureInteraction](self, "_allowsPhysicalCaptureInteraction", a3)
    && -[CAMViewfinderViewController _capturingFromPhysicalButton](self, "_capturingFromPhysicalButton"))
  {
    v4 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_1DB760000, v4, OS_LOG_TYPE_DEFAULT, "Physical capture button cancelled", v8, 2u);
    }

    -[CAMViewfinderViewController _primaryShutterControl](self, "_primaryShutterControl");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setHighlighted:", 0);
    -[CAMViewfinderViewController _updateEnabledControlsWithReason:](self, "_updateEnabledControlsWithReason:", CFSTR("Physical capture button cancelled"));
    -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (v6)
    {
      -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "externalButtonCancelled");
    }
    else
    {
      -[CAMViewfinderViewController _shutterButton](self, "_shutterButton");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMViewfinderViewController _handleShutterButtonCancelled:](self, "_handleShutterButtonCancelled:", v7);
    }

    -[CAMViewfinderViewController _setCurrentlyPressedButton:](self, "_setCurrentlyPressedButton:", -1);
  }
}

- (void)handleVolumeButtonPressed
{
  -[CAMViewfinderViewController _handlePhysicalButtonPressed:](self, "_handlePhysicalButtonPressed:", 2);
}

- (void)handleVolumeButtonReleased
{
  -[CAMViewfinderViewController _handlePhysicalButtonReleased:](self, "_handlePhysicalButtonReleased:", 2);
}

- (void)cameraOverlayConnection:(id)a3 didChangeOverlayVisible:(BOOL)a4 activeControlIdentifier:(id)a5
{
  _BOOL8 v5;
  _BOOL8 v7;
  void *v8;
  void *v9;

  v5 = a4;
  v7 = a4;
  -[CAMViewfinderViewController _setCurrentHalfPressSpotlight:](self, "_setCurrentHalfPressSpotlight:", a4);
  -[CAMViewfinderViewController updateControlVisibilityAnimated:](self, "updateControlVisibilityAnimated:", 1);
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setSpotlightControl:animated:", v7, 1);

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setSystemOverlayVisible:animated:", v5, 1);

  -[CAMViewfinderViewController _updateEnabledControlsWithReason:](self, "_updateEnabledControlsWithReason:", CFSTR("Spotlight changed"));
}

- (void)cameraOverlayConnection:(id)a3 didChangeValue:(id)a4 forControlIdentifier:(id)a5
{
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;

  v11 = a4;
  v7 = a5;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v8 = v11;
  else
    v8 = 0;
  v9 = v8;
  if (objc_msgSend(v7, "isEqualToString:", CFSTR("zoom")))
  {
    -[CAMViewfinderViewController _captureController](self, "_captureController");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "isCapturingVideo");

    objc_msgSend(v9, "doubleValue");
    -[CAMViewfinderViewController _changeToZoomFactor:rampDuration:zoomRampTuning:shouldAnimate:updateOverlay:](self, "_changeToZoomFactor:rampDuration:zoomRampTuning:shouldAnimate:updateOverlay:", 3, 0, 0);
  }
  else if (objc_msgSend(v7, "isEqualToString:", CFSTR("exposure")))
  {
    objc_msgSend(v9, "doubleValue");
    -[CAMViewfinderViewController _handleUserChangedToExposureSliderBias:updateSystemOverlayValues:](self, "_handleUserChangedToExposureSliderBias:updateSystemOverlayValues:", 0);
  }
  else if (objc_msgSend(v7, "isEqualToString:", CFSTR("aperture")))
  {
    objc_msgSend(v11, "doubleValue");
    -[CAMViewfinderViewController _handleUserChangedToApertureValue:](self, "_handleUserChangedToApertureValue:");
  }

}

- (void)cameraOverlayConnection:(id)a3 didChangeStatus:(unint64_t)a4
{
  NSObject *v5;
  void *v6;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    CAMStringForOverlayServiceConnectionStatus();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = 138543362;
    v8 = v6;
    _os_log_impl(&dword_1DB760000, v5, OS_LOG_TYPE_DEFAULT, "Overlay connection output status %{public}@", (uint8_t *)&v7, 0xCu);

  }
  -[CAMViewfinderViewController _updateOverlayConnection](self, "_updateOverlayConnection");
}

- (void)cameraOverlayConnection:(id)a3 didApplyControlUpdate:(id)a4
{
  id v5;
  float v6;
  float v7;
  void *v8;
  double v9;
  id v10;

  v5 = a4;
  objc_msgSend(v5, "controlIdentifier");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "floatValue");
  v7 = v6;

  if (objc_msgSend(v10, "isEqualToString:", CFSTR("zoom")))
  {
    -[CAMViewfinderViewController _captureController](self, "_captureController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "isCapturingVideo"))
      v9 = 0.5;
    else
      v9 = 0.25;

    -[CAMViewfinderViewController _changeToZoomFactor:rampDuration:zoomRampTuning:shouldAnimate:updateOverlay:](self, "_changeToZoomFactor:rampDuration:zoomRampTuning:shouldAnimate:updateOverlay:", 3, 0, 0, v7, v9);
  }
  else if (objc_msgSend(v10, "isEqualToString:", CFSTR("exposure")))
  {
    -[CAMViewfinderViewController _handleUserChangedToExposureSliderBias:updateSystemOverlayValues:](self, "_handleUserChangedToExposureSliderBias:updateSystemOverlayValues:", 0, v7);
  }
  else if (objc_msgSend(v10, "isEqualToString:", CFSTR("aperture")))
  {
    -[CAMViewfinderViewController _handleUserChangedToApertureValue:](self, "_handleUserChangedToApertureValue:", v7);
  }

}

- (void)_createSystemOverlayIfNeeded
{
  CAMSystemOverlayViewController *v3;
  CAMSystemOverlayViewController *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _halfPressOverlay](self, "_halfPressOverlay");
  v3 = (CAMSystemOverlayViewController *)objc_claimAutoreleasedReturnValue();
  if (v3)
    goto LABEL_4;
  if (objc_msgSend(v9, "isHalfPressOverlayInProcess"))
  {
    v4 = [CAMSystemOverlayViewController alloc];
    -[CAMViewfinderViewController _motionController](self, "_motionController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = -[CAMSystemOverlayViewController initWithMotionController:](v4, "initWithMotionController:", v5);

    -[CAMSystemOverlayViewController overlayView](v3, "overlayView");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController view](self, "view");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController addChildViewController:](self, "addChildViewController:", v3);
    objc_msgSend(v7, "addSubview:", v6);
    -[CAMSystemOverlayViewController didMoveToParentViewController:](v3, "didMoveToParentViewController:", self);
    objc_msgSend(v7, "bounds");
    objc_msgSend(v6, "setFrame:");
    objc_msgSend(v6, "setAlignment:", objc_msgSend(v9, "allowHalfPressSimulation") ^ 1);
    -[CAMViewfinderViewController _setHalfPressOverlay:](self, "_setHalfPressOverlay:", v3);
    -[CAMViewfinderViewController _legacyOverlayControls](self, "_legacyOverlayControls");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _setOverlayControls:](self, "_setOverlayControls:", v8);

LABEL_4:
  }

}

- (void)systemOverlayViewController:(id)a3 didChangeSliderVisible:(BOOL)a4
{
  _BOOL8 v5;
  void *v6;

  v5 = a4;
  -[CAMViewfinderViewController _setCurrentHalfPressSpotlight:](self, "_setCurrentHalfPressSpotlight:", a4);
  -[CAMViewfinderViewController updateControlVisibilityAnimated:](self, "updateControlVisibilityAnimated:", 1);
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setSpotlightControl:animated:", v5, 1);

  -[CAMViewfinderViewController _updateEnabledControlsWithReason:](self, "_updateEnabledControlsWithReason:", CFSTR("Spotlight changed"));
}

- (void)systemOverlayViewController:(id)a3 didUpdateControl:(id)a4
{
  void *v5;
  float v6;
  float v7;
  float v8;
  id v9;

  v9 = a4;
  objc_msgSend(v9, "controlIdentifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "isEqualToString:", CFSTR("exposure")))
  {
    objc_msgSend(v9, "floatValue");
    -[CAMViewfinderViewController _handleUserChangedToExposureSliderBias:updateSystemOverlayValues:](self, "_handleUserChangedToExposureSliderBias:updateSystemOverlayValues:", 0, v6);
  }
  else if (objc_msgSend(v5, "isEqualToString:", CFSTR("zoom")))
  {
    objc_msgSend(v9, "floatValue");
    -[CAMViewfinderViewController _changeToZoomFactor:rampDuration:zoomRampTuning:shouldAnimate:](self, "_changeToZoomFactor:rampDuration:zoomRampTuning:shouldAnimate:", 0, 0, v7, 0.0);
  }
  else if (objc_msgSend(v5, "isEqualToString:", CFSTR("aperture")))
  {
    objc_msgSend(v9, "floatValue");
    -[CAMViewfinderViewController _handleUserChangedToApertureValue:](self, "_handleUserChangedToApertureValue:", v8);
  }

}

- (void)systemOverlayViewController:(id)a3 pressBeganForButton:(int64_t)a4
{
  -[CAMViewfinderViewController _handlePhysicalButtonPressed:](self, "_handlePhysicalButtonPressed:", a4);
}

- (void)systemOverlayViewController:(id)a3 pressEndedForButton:(int64_t)a4
{
  -[CAMViewfinderViewController _handlePhysicalButtonReleased:](self, "_handlePhysicalButtonReleased:", a4);
}

- (void)systemOverlayViewController:(id)a3 pressCancelledForButton:(int64_t)a4
{
  -[CAMViewfinderViewController _handlePhysicalButtonCancelled:](self, "_handlePhysicalButtonCancelled:", a4);
}

- (NSDictionary)_overlayControls
{
  NSDictionary *overlayControls;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  NSDictionary *v18;
  NSDictionary *v19;
  NSDictionary *v20;
  void *v21;
  void *v22;
  _QWORD v23[4];
  _QWORD v24[5];

  v24[4] = *MEMORY[0x1E0C80C00];
  overlayControls = self->__overlayControls;
  if (overlayControls)
    return overlayControls;
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D0D188]), "initWithIdentifier:sliderType:captureUniqueID:", CFSTR("zoom"), 5, CFSTR("device"));
  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D0D188]), "initWithIdentifier:sliderType:captureUniqueID:", CFSTR("exposure"), 1, CFSTR("device"));
  v7 = objc_alloc(MEMORY[0x1E0D0D150]);
  objc_msgSend(MEMORY[0x1E0D0D020], "validApertureValues");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = (void *)objc_msgSend(v7, "initWithValues:", v8);

  v9 = objc_alloc(MEMORY[0x1E0D0D150]);
  objc_msgSend(MEMORY[0x1E0D0D020], "validApertureValues");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (void *)objc_msgSend(v9, "initWithValues:", v10);

  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D0D188]), "initWithIdentifier:title:imageName:rangeScale:valueRange:primaryValues:", CFSTR("aperture"), CFSTR("APERTURE"), CFSTR("f.cursive"), 0, v22, v11);
  v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D0D170]), "initWithIdentifier:title:imageName:valueTitles:", CFSTR("wine"), CFSTR("wine"), CFSTR("wineglass"), &unk_1EA3B32F0);
  v21 = v5;
  objc_msgSend(v5, "identifier");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v23[0] = v14;
  v24[0] = v5;
  objc_msgSend(v6, "identifier");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v23[1] = v15;
  v24[1] = v6;
  objc_msgSend(v12, "identifier");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v23[2] = v16;
  v24[2] = v12;
  objc_msgSend(v13, "identifier");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v23[3] = v17;
  v24[3] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v24, v23, 4);
  v18 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
  v19 = self->__overlayControls;
  self->__overlayControls = v18;

  v20 = self->__overlayControls;
  return v20;
}

- (id)_initialUpdatesForControls:(id)a3
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  double v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v19;
  id obj;
  id v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v21 = (id)objc_claimAutoreleasedReturnValue();
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  obj = v4;
  v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v23;
    v19 = *(_QWORD *)v23;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v23 != v7)
          objc_enumerationMutation(obj);
        v9 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * v8);
        objc_msgSend(v9, "identifier");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v10, "isEqualToString:", CFSTR("zoom")))
        {
          -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
LABEL_8:
          *(float *)&v11 = v11;
          objc_msgSend(v9, "updateWithFloatValue:", v11);
          v12 = objc_claimAutoreleasedReturnValue();
LABEL_9:
          v13 = (void *)v12;
          goto LABEL_12;
        }
        if (objc_msgSend(v10, "isEqualToString:", CFSTR("exposure")))
        {
          -[CAMViewfinderViewController _exposureBiasesByMode](self, "_exposureBiasesByMode");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"));
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "objectForKeyedSubscript:", v15);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "floatValue");
          objc_msgSend(v9, "updateWithFloatValue:");
          v13 = (void *)objc_claimAutoreleasedReturnValue();

          v7 = v19;
        }
        else
        {
          if (objc_msgSend(v10, "isEqualToString:", CFSTR("aperture")))
          {
            -[CAMViewfinderViewController _portraitModeApertureValue](self, "_portraitModeApertureValue");
            goto LABEL_8;
          }
          if (objc_msgSend(v10, "isEqualToString:", CFSTR("wine")))
          {
            objc_msgSend(v9, "updateWithIndexValue:", 0);
            v12 = objc_claimAutoreleasedReturnValue();
            goto LABEL_9;
          }
          v13 = 0;
        }
LABEL_12:
        objc_msgSend(v21, "addObject:", v13);

        ++v8;
      }
      while (v6 != v8);
      v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
      v6 = v17;
    }
    while (v17);
  }

  return v21;
}

- (id)_legacyOverlayControls
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D0D168]), "initWithIdentifier:", CFSTR("zoom"));
  objc_msgSend(v3, "setRangeScale:", 1);
  objc_msgSend(v3, "setTitle:", CFSTR("ZOOM"));
  objc_msgSend(v3, "setImageName:", CFSTR("square.arrowtriangle.4.outward"));
  objc_msgSend(v3, "setCaptureDeviceUniqueID:", CFSTR("avCaptureDevice"));
  objc_msgSend(v3, "setCaptureDeviceProperty:", 1);
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D0D140]), "initWithMinimum:maximum:", 1.0, 30.0);
  objc_msgSend(v3, "setValueRange:", v4);

  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D0D150]), "initWithValues:", &unk_1EA3B3308);
  objc_msgSend(v3, "setPrimaryValues:", v5);

  objc_msgSend(v3, "identifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v3, v6);

  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D0D168]), "initWithIdentifier:", CFSTR("exposure"));
  objc_msgSend(v7, "setTitle:", CFSTR("EXPOSURE"));
  objc_msgSend(v7, "setImageName:", CFSTR("plusminus.circle"));
  objc_msgSend(v7, "setCaptureDeviceUniqueID:", CFSTR("avCaptureDevice"));
  objc_msgSend(v7, "setCaptureDeviceProperty:", 2);
  v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D0D150]), "initWithMinimum:maximum:step:", -2.0, 2.0, 0.333333333);
  objc_msgSend(v7, "setValueRange:", v8);

  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D0D150]), "initWithMinimum:maximum:step:", -2.0, 2.0, 1.0);
  objc_msgSend(v7, "setPrimaryValues:", v9);

  objc_msgSend(v7, "identifier");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v7, v10);

  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D0D168]), "initWithIdentifier:", CFSTR("aperture"));
  objc_msgSend(v11, "setTitle:", CFSTR("APERTURE"));
  objc_msgSend(v11, "setImageName:", CFSTR("f.cursive"));
  v12 = objc_alloc(MEMORY[0x1E0D0D150]);
  objc_msgSend(MEMORY[0x1E0D0D020], "validApertureValues");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = (void *)objc_msgSend(v12, "initWithValues:", v13);
  objc_msgSend(v11, "setValueRange:", v14);

  v15 = objc_alloc(MEMORY[0x1E0D0D150]);
  objc_msgSend(MEMORY[0x1E0D0D020], "validApertureValues");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = (void *)objc_msgSend(v15, "initWithValues:", v16);
  objc_msgSend(v11, "setPrimaryValues:", v17);

  objc_msgSend(v11, "identifier");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v11, v18);

  v19 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D0D168]), "initWithIdentifier:", CFSTR("wine"));
  objc_msgSend(v19, "setTitle:", CFSTR("WINE"));
  objc_msgSend(v19, "setImageName:", CFSTR("wineglass"));
  v20 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D0D198]), "initWithTitles:", &unk_1EA3B3320);
  objc_msgSend(v19, "setValueRange:", v20);

  objc_msgSend(v19, "identifier");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v19, v21);

  return v2;
}

- (id)_overlayValuesForControls:(id)a3
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  const __CFString *v8;
  unint64_t v9;
  uint64_t v10;
  const __CFString *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  const __CFString *v17;
  const __CFString *v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v26;
  id v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v27 = (id)objc_claimAutoreleasedReturnValue();
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v5 = v4;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
  if (v6)
  {
    v7 = v6;
    v8 = CFSTR("zoom");
    v9 = 0x1E0CB3000uLL;
    v10 = *(_QWORD *)v29;
    v11 = CFSTR("exposure");
    do
    {
      v12 = 0;
      v26 = v7;
      do
      {
        if (*(_QWORD *)v29 != v10)
          objc_enumerationMutation(v5);
        objc_msgSend(*(id *)(*((_QWORD *)&v28 + 1) + 8 * v12), "identifier", v26);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v13, "isEqualToString:", v8))
        {
          v14 = *(void **)(v9 + 2024);
          -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
          objc_msgSend(v14, "numberWithDouble:");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v27, "setObject:forKeyedSubscript:", v15, v13);
LABEL_10:

          goto LABEL_11;
        }
        if (objc_msgSend(v13, "isEqualToString:", v11))
        {
          -[CAMViewfinderViewController _exposureBiasesByMode](self, "_exposureBiasesByMode");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = v10;
          v17 = v11;
          v18 = v8;
          v19 = v5;
          objc_msgSend(*(id *)(v9 + 2024), "numberWithInteger:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"));
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "objectForKeyedSubscript:", v20);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v27, "setObject:forKeyedSubscript:", v21, v13);

          v9 = 0x1E0CB3000;
          v5 = v19;
          v8 = v18;
          v11 = v17;
          v10 = v16;
          v7 = v26;
          goto LABEL_10;
        }
        if (objc_msgSend(v13, "isEqualToString:", CFSTR("aperture")))
        {
          v22 = (void *)MEMORY[0x1E0CB37E8];
          -[CAMViewfinderViewController _portraitModeApertureValue](self, "_portraitModeApertureValue");
          objc_msgSend(v22, "numberWithDouble:");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v27, "setObject:forKeyedSubscript:", v23, v13);

          v9 = 0x1E0CB3000;
        }
        else if (objc_msgSend(v13, "isEqualToString:", CFSTR("wine")))
        {
          objc_msgSend(v27, "setObject:forKeyedSubscript:", CFSTR("CABERNET"), v13);
        }
LABEL_11:

        ++v12;
      }
      while (v7 != v12);
      v24 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
      v7 = v24;
    }
    while (v24);
  }

  return v27;
}

- (void)_updateFocusAndExposureLockBadgeAnimated:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  BOOL v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD v15[4];
  id v16;

  v3 = a3;
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[CAMViewfinderViewController _shouldHideFocusAndExposureLockBadgeForGraphConfiguration:](self, "_shouldHideFocusAndExposureLockBadgeForGraphConfiguration:", v5);

  if (!v6)
  {
    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "badgeTray");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "focusLockBadge");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v9;
    if (v9)
    {
      v11 = v9;
    }
    else
    {
      -[CAMViewfinderViewController _focusAndExposureLockBadge](self, "_focusAndExposureLockBadge");
      v11 = (id)objc_claimAutoreleasedReturnValue();
    }
    v12 = v11;

    objc_msgSend(v12, "setFocusLockType:", -[CAMViewfinderViewController _focusAndExposureLockBadgeTypeForCurrentState](self, "_focusAndExposureLockBadgeTypeForCurrentState"));
  }
  -[CAMViewfinderViewController _updateBadgeVisibilityAnimated:](self, "_updateBadgeVisibilityAnimated:", v3);
  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setNeedsLayout");
  if (v3)
  {
    v14 = (void *)MEMORY[0x1E0DC3F10];
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __72__CAMViewfinderViewController__updateFocusAndExposureLockBadgeAnimated___block_invoke;
    v15[3] = &unk_1EA328868;
    v16 = v13;
    objc_msgSend(v14, "animateWithDuration:delay:options:animations:completion:", 2, v15, 0, 0.25, 0.0);

  }
}

uint64_t __72__CAMViewfinderViewController__updateFocusAndExposureLockBadgeAnimated___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
}

- (int64_t)_focusAndExposureLockBadgeTypeForCurrentState
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;

  -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "badgeTray");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "focusLockBadge");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v6)
  {
    v8 = v6;
  }
  else
  {
    -[CAMViewfinderViewController _focusAndExposureLockBadge](self, "_focusAndExposureLockBadge");
    v8 = (id)objc_claimAutoreleasedReturnValue();
  }
  v9 = v8;

  v10 = objc_msgSend(v9, "focusLockType");
  v11 = objc_msgSend(v3, "isFocusLockedByUser");
  v12 = objc_msgSend(v3, "isExposureLockedByUser");
  v13 = objc_msgSend(v3, "isFocusLockedOnCinematicSubject");
  v14 = 2;
  if ((v12 & v11) == 0)
    v14 = 0;
  if (v12)
    v15 = 1;
  else
    v15 = v10;
  if (!v11)
    v14 = v15;
  if (v13)
    v16 = 3;
  else
    v16 = v14;

  return v16;
}

void __57__CAMViewfinderViewController__setupBurstTimerWithDelay___block_invoke(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_handleBurstTimerFired:", v3);
  objc_msgSend(v3, "invalidate");

}

- (void)_handleBurstTimerFired:(id)a3
{
  id v4;
  id v5;
  void *v6;
  char v7;
  void *v8;
  int v9;
  NSObject *v10;
  void *v11;
  uint8_t v12[16];

  v4 = a3;
  -[CAMViewfinderViewController _currentBurstTimer](self, "_currentBurstTimer");
  v5 = (id)objc_claimAutoreleasedReturnValue();

  if (v5 == v4)
  {
    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "captureOnTouchDown");

    -[CAMViewfinderViewController _captureController](self, "_captureController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "isCapturingStillImage");

    if (!v9 || (v7 & 1) == 0)
    {
      v10 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v12 = 0;
        _os_log_impl(&dword_1DB760000, v10, OS_LOG_TYPE_DEFAULT, "Starting burst because no still image was being captured when burst timer fired", v12, 2u);
      }

      -[CAMViewfinderViewController _beginCapturingBurst](self, "_beginCapturingBurst");
    }
    -[CAMViewfinderViewController _feedbackController](self, "_feedbackController");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "prepareDiscreteFeedback:", 1);

  }
}

- (void)_beginCapturingBurst
{
  void *v3;
  int v4;
  int64_t v5;
  NSObject *v6;
  void *v7;
  void *v8;
  int v9;
  int64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isBurstSupportedForMode:device:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevice](self, "_currentDevice"));

  if (v4)
  {
    if (-[CAMViewfinderViewController _isCapturingFromTimer](self, "_isCapturingFromTimer"))
    {
      v5 = -[CAMViewfinderViewController _maximumBurstLengthForTimer](self, "_maximumBurstLengthForTimer");
      v6 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v9 = 134217984;
        v10 = v5;
        _os_log_impl(&dword_1DB760000, v6, OS_LOG_TYPE_DEFAULT, "Starting burst capture of %ld shots for timer", (uint8_t *)&v9, 0xCu);
      }
    }
    else
    {
      v6 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v9) = 0;
        _os_log_impl(&dword_1DB760000, v6, OS_LOG_TYPE_DEFAULT, "Starting burst capture", (uint8_t *)&v9, 2u);
      }
      v5 = 0;
    }

    -[CAMViewfinderViewController _stillImageCaptureRequestWithCurrentSettingsAsBurst:maximumLength:](self, "_stillImageCaptureRequestWithCurrentSettingsAsBurst:maximumLength:", 1, v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _generateAnalyticsCaptureEventWithRequest:burst:](self, "_generateAnalyticsCaptureEventWithRequest:burst:", v7, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setAnalyticsEvent:", v8);

    -[CAMViewfinderViewController _startCapturingBurstWithRequest:](self, "_startCapturingBurstWithRequest:", v7);
  }
}

- (int64_t)_maximumBurstLengthForTimer
{
  void *v3;
  double v4;
  int64_t v5;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "captureIntervalForDevice:", -[CAMViewfinderViewController _currentDevice](self, "_currentDevice"));
  if (v4 * 10.0 <= 2.0)
    v5 = 10;
  else
    v5 = 5;

  return v5;
}

- (void)_startCapturingBurstWithRequest:(id)a3
{
  id v4;
  void *v5;
  char v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  id v12;

  v4 = a3;
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = 0;
  v6 = objc_msgSend(v5, "startCapturingBurstWithRequest:error:", v4, &v12);
  v7 = v12;
  if ((v6 & 1) != 0)
  {
    -[CAMViewfinderViewController _resolveAndUpdatePotentiallyConflictingControls:animated:](self, "_resolveAndUpdatePotentiallyConflictingControls:animated:", 1, 1);
    -[CAMViewfinderViewController _updateResolvedLowLightModeAnimated:](self, "_updateResolvedLowLightModeAnimated:", 1);
    -[CAMViewfinderViewController _updatePreviewSemanticStyleAnimated:](self, "_updatePreviewSemanticStyleAnimated:", 1);
    -[CAMViewfinderViewController _analyticsSessionEvent](self, "_analyticsSessionEvent");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "captureRequest");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "didCaptureWithRequest:currentConfiguration:", v9, v10);

  }
  else
  {
    v11 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      -[CAMViewfinderViewController _startCapturingBurstWithRequest:].cold.1();

    -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "resetAnimated:", 1);
  }

  -[CAMViewfinderViewController _updateUserPreferencesForFilterUsage](self, "_updateUserPreferencesForFilterUsage");
  -[CAMViewfinderViewController _updateFilterScrubberAfterCapture](self, "_updateFilterScrubberAfterCapture");

}

- (void)_stopCapturingBurst
{
  void *v3;
  id v4;

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stopCapturingBurst");
  -[CAMViewfinderViewController _cameraRollController](self, "_cameraRollController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "processPendingBursts");
  -[CAMViewfinderViewController _resolveAndUpdatePotentiallyConflictingControls:animated:](self, "_resolveAndUpdatePotentiallyConflictingControls:animated:", 1, 1);
  -[CAMViewfinderViewController _updateResolvedLowLightModeAnimated:](self, "_updateResolvedLowLightModeAnimated:", 1);
  -[CAMViewfinderViewController _updatePreviewSemanticStyleAnimated:](self, "_updatePreviewSemanticStyleAnimated:", 1);
  -[CAMViewfinderViewController _updateSmartStyleOnSession](self, "_updateSmartStyleOnSession");

}

- (void)captureControllerWillStartCapturingBurst:(id)a3
{
  void *v4;
  int v5;
  void *v6;

  -[CAMViewfinderViewController _updateSmartStyleOnSession](self, "_updateSmartStyleOnSession", a3);
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isBurstSupportedForMode:device:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevice](self, "_currentDevice"));

  if (v5)
  {
    -[CAMViewfinderViewController _showBurstIndicatorView](self, "_showBurstIndicatorView");
    -[CAMViewfinderViewController _remoteShutterController](self, "_remoteShutterController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "burstCaptureWillStart");

  }
  -[CAMPreviewViewController notifyWillStartCapturing](self->__previewViewController, "notifyWillStartCapturing");
  -[CAMViewfinderViewController _updatePreviewControllerPortraitStatus](self, "_updatePreviewControllerPortraitStatus");
  -[CAMViewfinderViewController _beginDisablingInterfaceAutorotation](self, "_beginDisablingInterfaceAutorotation");
}

- (void)captureControllerDidReachMaximumBurstLength:(id)a3
{
  if (-[CAMViewfinderViewController _isCapturingFromTimer](self, "_isCapturingFromTimer", a3))
    -[CAMViewfinderViewController _stopCountdownForCaptureTimer](self, "_stopCountdownForCaptureTimer");
}

- (void)captureControllerDidStopCapturingBurst:(id)a3
{
  void *v4;
  int v5;
  void *v6;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isBurstSupportedForMode:device:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevice](self, "_currentDevice"));

  if (v5)
  {
    -[CAMViewfinderViewController _hideBurstIndicatorView](self, "_hideBurstIndicatorView");
    -[CAMViewfinderViewController _remoteShutterController](self, "_remoteShutterController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "burstCaptureDidStop");

  }
  -[CAMPreviewViewController notifyDidStopCapture](self->__previewViewController, "notifyDidStopCapture");
  -[CAMViewfinderViewController _updatePreviewControllerPortraitStatus](self, "_updatePreviewControllerPortraitStatus");
  -[CAMViewfinderViewController _endDisablingInterfaceAutorotation](self, "_endDisablingInterfaceAutorotation");
}

- (void)captureControllerWillStartPlayingBurstEndSound:(id)a3
{
  id v4;

  -[CAMViewfinderViewController _setBurstEndSoundPlaying:](self, "_setBurstEndSoundPlaying:", 1);
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updatePairedVideoCaptureOnControllerForGraphConfiguration:isShowingCameraRoll:](self, "_updatePairedVideoCaptureOnControllerForGraphConfiguration:isShowingCameraRoll:", v4, -[CAMViewfinderViewController _isShowingCameraRoll](self, "_isShowingCameraRoll"));

}

- (void)captureControllerDidStopPlayingBurstEndSound:(id)a3
{
  id v4;

  -[CAMViewfinderViewController _setBurstEndSoundPlaying:](self, "_setBurstEndSoundPlaying:", 0);
  -[CAMViewfinderViewController _resolveAndUpdatePotentiallyConflictingControls:animated:](self, "_resolveAndUpdatePotentiallyConflictingControls:animated:", 0, 1);
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updatePairedVideoCaptureOnControllerForGraphConfiguration:isShowingCameraRoll:](self, "_updatePairedVideoCaptureOnControllerForGraphConfiguration:isShowingCameraRoll:", v4, -[CAMViewfinderViewController _isShowingCameraRoll](self, "_isShowingCameraRoll"));

}

- (void)_showBurstIndicatorView
{
  void *v3;
  id v4;

  -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
    v4 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "resetCounter");
  }
  else
  {
    -[CAMViewfinderViewController _burstIndicatorView](self, "_burstIndicatorView");
    v4 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "reset");
    objc_msgSend(v4, "setAlpha:", 1.0);
    -[CAMViewfinderViewController _updateBadgeVisibilityAnimated:](self, "_updateBadgeVisibilityAnimated:", 0);
  }

}

- (void)_hideBurstIndicatorView
{
  void *v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  CAMViewfinderViewController *v8;

  -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
  {
    -[CAMViewfinderViewController _burstIndicatorView](self, "_burstIndicatorView");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __54__CAMViewfinderViewController__hideBurstIndicatorView__block_invoke;
    v6[3] = &unk_1EA32A948;
    v7 = v4;
    v8 = self;
    v5 = v4;
    objc_msgSend(v5, "finishIncrementingWithCompletionHandler:", v6);

  }
}

void __54__CAMViewfinderViewController__hideBurstIndicatorView__block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  dispatch_time_t v4;
  _QWORD v5[5];
  _QWORD v6[4];
  id v7;

  v2 = MEMORY[0x1E0C809B0];
  v3 = (void *)MEMORY[0x1E0DC3F10];
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __54__CAMViewfinderViewController__hideBurstIndicatorView__block_invoke_2;
  v6[3] = &unk_1EA328868;
  v7 = *(id *)(a1 + 32);
  objc_msgSend(v3, "animateWithDuration:delay:options:animations:completion:", 327682, v6, 0, 0.415, 0.395);
  v4 = dispatch_time(0, (uint64_t)((0.81 - 0.25) * 1000000000.0));
  v5[0] = v2;
  v5[1] = 3221225472;
  v5[2] = __54__CAMViewfinderViewController__hideBurstIndicatorView__block_invoke_3;
  v5[3] = &unk_1EA328868;
  v5[4] = *(_QWORD *)(a1 + 40);
  dispatch_after(v4, MEMORY[0x1E0C80D38], v5);

}

uint64_t __54__CAMViewfinderViewController__hideBurstIndicatorView__block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 0.0);
}

uint64_t __54__CAMViewfinderViewController__hideBurstIndicatorView__block_invoke_3(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateBadgeVisibilityAnimated:", 1);
}

- (void)_performCaptureAnimationWithDuration:(double)a3
{
  void *v5;
  id v6;

  objc_msgSend(MEMORY[0x1E0CD27D0], "functionWithName:", *MEMORY[0x1E0CD3038]);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0DC3658], "blackColor");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _performCaptureAnimationWithDuration:curve:color:fadeOut:](self, "_performCaptureAnimationWithDuration:curve:color:fadeOut:", v6, v5, 1, a3);

}

- (void)_performCaptureAnimationWithDuration:(double)a3 curve:(id)a4 color:(id)a5 fadeOut:(BOOL)a6
{
  _BOOL4 v6;
  id v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  double v16;
  void *v17;
  void *v18;
  void *v19;
  double v20;
  float v21;
  CAMAnimationDelegate *v22;
  id v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t);
  void *v28;
  id v29;
  BOOL v30;

  v6 = a6;
  v10 = a5;
  v11 = a4;
  -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "previewView");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  v14 = objc_alloc(MEMORY[0x1E0DC3F10]);
  objc_msgSend(v13, "bounds");
  v15 = (void *)objc_msgSend(v14, "initWithFrame:");
  objc_msgSend(v15, "setBackgroundColor:", v10);

  objc_msgSend(v13, "addSubview:", v15);
  if (v6)
    v16 = 0.0;
  else
    v16 = 1.0;
  objc_msgSend(v15, "layer");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CD2710], "animationWithKeyPath:", CFSTR("opacity"));
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "setFromValue:", &unk_1EA3B1820);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v16);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "setToValue:", v19);

  objc_msgSend(v17, "convertTime:fromLayer:", 0, CACurrentMediaTime());
  objc_msgSend(v18, "setBeginTime:", v20 + 0.075);
  UIAnimationDragCoefficient();
  objc_msgSend(v18, "setDuration:", v21 * a3);
  objc_msgSend(v18, "setTimingFunction:", v11);

  objc_msgSend(v18, "setFillMode:", *MEMORY[0x1E0CD2B58]);
  v22 = objc_alloc_init(CAMAnimationDelegate);
  v25 = MEMORY[0x1E0C809B0];
  v26 = 3221225472;
  v27 = __88__CAMViewfinderViewController__performCaptureAnimationWithDuration_curve_color_fadeOut___block_invoke;
  v28 = &unk_1EA329A78;
  v30 = v6;
  v29 = v15;
  v23 = v15;
  -[CAMAnimationDelegate setCompletion:](v22, "setCompletion:", &v25);
  objc_msgSend(v18, "setDelegate:", v22, v25, v26, v27, v28);
  objc_msgSend(v17, "addAnimation:forKey:", v18, CFSTR("opacityAnimation"));
  *(float *)&v24 = v16;
  objc_msgSend(v17, "setOpacity:", v24);
  -[CAMViewfinderViewController _setCaptureAnimationPreviewOverlay:](self, "_setCaptureAnimationPreviewOverlay:", v23);

}

void __88__CAMViewfinderViewController__performCaptureAnimationWithDuration_curve_color_fadeOut___block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  _QWORD v4[4];
  id v5;
  _QWORD v6[4];
  id v7;

  if (*(_BYTE *)(a1 + 40))
  {
    objc_msgSend(*(id *)(a1 + 32), "removeFromSuperview");
  }
  else
  {
    v2 = (void *)MEMORY[0x1E0DC3F10];
    v3 = MEMORY[0x1E0C809B0];
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __88__CAMViewfinderViewController__performCaptureAnimationWithDuration_curve_color_fadeOut___block_invoke_2;
    v6[3] = &unk_1EA328868;
    v7 = *(id *)(a1 + 32);
    v4[0] = v3;
    v4[1] = 3221225472;
    v4[2] = __88__CAMViewfinderViewController__performCaptureAnimationWithDuration_curve_color_fadeOut___block_invoke_3;
    v4[3] = &unk_1EA328A68;
    v5 = *(id *)(a1 + 32);
    objc_msgSend(v2, "animateWithDuration:animations:completion:", v6, v4, 0.25);

  }
}

uint64_t __88__CAMViewfinderViewController__performCaptureAnimationWithDuration_curve_color_fadeOut___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 0.0);
}

uint64_t __88__CAMViewfinderViewController__performCaptureAnimationWithDuration_curve_color_fadeOut___block_invoke_3(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "removeFromSuperview");
}

- (void)_cancelCaptureAnimation
{
  void *v2;
  id v3;

  -[CAMViewfinderViewController _captureAnimationPreviewOverlay](self, "_captureAnimationPreviewOverlay");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "layer");
  v3 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "removeAllAnimations");
}

- (BOOL)_isScreenExternalDisplay
{
  void *v2;
  void *v3;
  void *v4;
  char v5;

  -[CAMViewfinderViewController view](self, "view");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "window");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "screen");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "_isEmbeddedScreen") ^ 1;

  return v5;
}

- (void)setAutorotationStyle:(int64_t)a3
{
  -[CAMViewfinderViewController _setInternalAutorotationStyle:](self, "_setInternalAutorotationStyle:", a3);
  -[CAMViewfinderViewController _updateForCurrentConfiguration](self, "_updateForCurrentConfiguration");
}

- (BOOL)_shouldUpdateCaptureOrientation
{
  void *v2;
  char v3;

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isCapturingVideo") ^ 1;

  return v3;
}

- (void)_captureOrientationChanged:(id)a3
{
  int64_t v4;
  void *v5;
  _BOOL4 v6;
  void *v7;
  int v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  uint64_t v15;
  id v16;

  v4 = +[CAMApplication appOrPlugInState](CAMApplication, "appOrPlugInState", a3);
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v16 = (id)objc_claimAutoreleasedReturnValue();
  if (-[CAMViewfinderViewController _shouldUpdateCaptureOrientation](self, "_shouldUpdateCaptureOrientation"))
  {
    -[CAMViewfinderViewController _updateUIForCaptureOrientationAnimated:](self, "_updateUIForCaptureOrientationAnimated:", v4 == 0);
    -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = -[CAMViewfinderViewController _isZoomAllowedForGraphConfiguration:](self, "_isZoomAllowedForGraphConfiguration:", v5);

    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "shouldAdjustZoomOnOrientationChangeForDevicePosition:", -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"));

    if (v6 && v8)
    {
      -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMViewfinderViewController _motionController](self, "_motionController");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMViewfinderViewController _defaultZoomFactorForGraphConfiguration:captureOrientation:](self, "_defaultZoomFactorForGraphConfiguration:captureOrientation:", v9, objc_msgSend(v10, "captureOrientation"));
      v12 = v11;

      -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
      if (v13 != v12)
        -[CAMViewfinderViewController _changeToZoomFactor:rampDuration:zoomRampTuning:shouldAnimate:](self, "_changeToZoomFactor:rampDuration:zoomRampTuning:shouldAnimate:", 0, v4 == 0, v12, 0.5);
      -[CAMViewfinderViewController _setLastZoomInteractionType:](self, "_setLastZoomInteractionType:", 0);
    }
  }
  else
  {
    -[CAMViewfinderViewController _motionController](self, "_motionController");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "captureOrientation");
    if (v15)
      objc_msgSend(v16, "changeToVideoRecordingCaptureOrientation:", v15);

  }
  -[CAMViewfinderViewController _updateHomeIndicatorBehaviorsForCaptureOrientation](self, "_updateHomeIndicatorBehaviorsForCaptureOrientation");

}

- (void)_deviceOrientationChanged:(id)a3
{
  void *v4;
  void *v5;
  void *v6;

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _motionController](self, "_motionController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setDeviceOrientation:animated:", objc_msgSend(v5, "deviceOrientation"), 1);

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updateSpatialCaptureUIStateForGraphConfiguration:animated:](self, "_updateSpatialCaptureUIStateForGraphConfiguration:animated:", v6, 1);

  -[CAMViewfinderViewController updateControlVisibilityAnimated:](self, "updateControlVisibilityAnimated:", 1);
}

uint64_t __70__CAMViewfinderViewController__updateUIForCaptureOrientationAnimated___block_invoke(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_applyTransformsForAutorotationStyle:", *(_QWORD *)(a1 + 48));
  return objc_msgSend(*(id *)(a1 + 40), "setNeedsLayout");
}

uint64_t __70__CAMViewfinderViewController__updateUIForCaptureOrientationAnimated___block_invoke_2(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  return objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
}

- (void)_beginDisablingInterfaceAutorotation
{
  void *v2;
  id v3;

  -[CAMViewfinderViewController view](self, "view");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "window");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "beginDisablingInterfaceAutorotation");

}

- (void)_endDisablingInterfaceAutorotation
{
  void *v2;
  id v3;

  -[CAMViewfinderViewController view](self, "view");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "window");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "endDisablingInterfaceAutorotation");

}

- (int64_t)_topBarStyleForGraphConfiguration:(id)a3 capturing:(BOOL)a4
{
  return -[CAMViewfinderViewController _shouldApplyTopBarRotationForGraphConfiguration:](self, "_shouldApplyTopBarRotationForGraphConfiguration:", a3, a4);
}

- (void)_prepareTopBarForOrientationChangeDuringConfiguration
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  void *v12;
  id v13;
  _QWORD v14[4];
  id v15;
  _OWORD v16[3];

  -[CAMViewfinderViewController _topBar](self, "_topBar");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "snapshotViewAfterScreenUpdates:", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "bounds");
  objc_msgSend(v4, "setBounds:");
  objc_msgSend(v3, "center");
  objc_msgSend(v4, "setCenter:");
  if (v3)
    objc_msgSend(v3, "transform");
  else
    memset(v16, 0, sizeof(v16));
  objc_msgSend(v4, "setTransform:", v16);
  objc_msgSend(v3, "superview");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "addSubview:", v4);

  objc_msgSend(v3, "setAlpha:", 0.0);
  v6 = (void *)MEMORY[0x1E0DC3F10];
  v7 = MEMORY[0x1E0C809B0];
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __84__CAMViewfinderViewController__prepareTopBarForOrientationChangeDuringConfiguration__block_invoke;
  v14[3] = &unk_1EA328868;
  v15 = v4;
  v9 = v7;
  v10 = 3221225472;
  v11 = __84__CAMViewfinderViewController__prepareTopBarForOrientationChangeDuringConfiguration__block_invoke_2;
  v12 = &unk_1EA328A68;
  v13 = v15;
  v8 = v15;
  objc_msgSend(v6, "animateWithDuration:delay:options:animations:completion:", 327682, v14, &v9, 0.3, 0.0);
  -[CAMViewfinderViewController _setPerformingTopBarOrientationChange:](self, "_setPerformingTopBarOrientationChange:", 1, v9, v10, v11, v12);

}

uint64_t __84__CAMViewfinderViewController__prepareTopBarForOrientationChangeDuringConfiguration__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 0.0);
}

uint64_t __84__CAMViewfinderViewController__prepareTopBarForOrientationChangeDuringConfiguration__block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "removeFromSuperview");
}

- (void)_handleImageWellPressed:(id)a3
{
  objc_msgSend(a3, "setScaledForInteraction:animated:", 1, 1);
}

- (void)_handleImageWellReleased:(id)a3
{
  -[CAMViewfinderViewController _presentCameraRollViewControllerIfPossibleAnimated:interactive:](self, "_presentCameraRollViewControllerIfPossibleAnimated:interactive:", 1, 0);
}

- (BOOL)_shouldDeferMediaLoadingForGraphConfiguration:(id)a3
{
  return (objc_msgSend(a3, "mode") & 0xFFFFFFFFFFFFFFFELL) == 6;
}

- (void)_presentCameraRollViewControllerIfPossibleAnimated:(BOOL)a3 interactive:(BOOL)a4
{
  _BOOL8 v4;
  _BOOL8 v5;
  void *v7;
  _QWORD v8[4];
  id v9;
  BOOL v10;
  BOOL v11;
  id location;

  v4 = a4;
  v5 = a3;
  -[CAMViewfinderViewController _cameraRollController](self, "_cameraRollController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v7, "canPresentCameraRollViewController"))
  {
    if (-[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled")
      && +[CAMFrameworkUtilities isPasscodeLocked](CAMFrameworkUtilities, "isPasscodeLocked"))
    {
      objc_initWeak(&location, self);
      v8[0] = MEMORY[0x1E0C809B0];
      v8[1] = 3221225472;
      v8[2] = __94__CAMViewfinderViewController__presentCameraRollViewControllerIfPossibleAnimated_interactive___block_invoke;
      v8[3] = &unk_1EA32A970;
      objc_copyWeak(&v9, &location);
      v10 = v5;
      v11 = v4;
      -[CAMViewfinderViewController _requestPasscodeUnlockForCameraRollController:forAction:completionBlock:](self, "_requestPasscodeUnlockForCameraRollController:forAction:completionBlock:", v7, 0, v8);
      objc_destroyWeak(&v9);
      objc_destroyWeak(&location);
    }
    else
    {
      -[CAMViewfinderViewController _presentCameraRollViewControllerAnimated:interactive:](self, "_presentCameraRollViewControllerAnimated:interactive:", v5, v4);
    }
  }

}

void __94__CAMViewfinderViewController__presentCameraRollViewControllerIfPossibleAnimated_interactive___block_invoke(uint64_t a1, int a2)
{
  id *v3;
  id WeakRetained;
  void *v5;
  id v6;

  if (a2)
  {
    v3 = (id *)(a1 + 32);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    objc_msgSend(WeakRetained, "_connectedStorage");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (v5)
    {
      v6 = objc_loadWeakRetained(v3);
      objc_msgSend(v6, "_presentCameraRollViewControllerAnimated:interactive:", *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 41));

    }
  }
}

- (void)_presentCameraRollViewControllerAnimated:(BOOL)a3 interactive:(BOOL)a4
{
  void *v5;
  uint64_t (**v6)(_QWORD);
  unint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  int v12;
  int v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  const __CFString *v17;
  void *v18;
  void *v19;
  void *v20;
  _BOOL4 v21;
  _BOOL4 v22;
  _BOOL4 v23;
  void *v24;
  _QWORD aBlock[6];
  _QWORD v26[3];
  char v27;
  _QWORD v28[3];
  char v29;
  uint8_t buf[4];
  const __CFString *v31;
  uint64_t v32;

  v22 = a3;
  v23 = a4;
  v32 = *MEMORY[0x1E0C80C00];
  -[CAMViewfinderViewController _motionController](self, "_motionController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setForceLandscapeOrientation:", 0);

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = -[CAMViewfinderViewController _shouldDeferMediaLoadingForGraphConfiguration:](self, "_shouldDeferMediaLoadingForGraphConfiguration:", v24);
  v28[0] = 0;
  v28[1] = v28;
  v28[2] = 0x2020000000;
  v29 = 0;
  v26[0] = 0;
  v26[1] = v26;
  v26[2] = 0x2020000000;
  v27 = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __84__CAMViewfinderViewController__presentCameraRollViewControllerAnimated_interactive___block_invoke;
  aBlock[3] = &unk_1EA32A998;
  aBlock[4] = v26;
  aBlock[5] = v28;
  v6 = (uint64_t (**)(_QWORD))_Block_copy(aBlock);
  v7 = -[CAMViewfinderViewController supportedInterfaceOrientations](self, "supportedInterfaceOrientations");
  -[CAMViewfinderViewController _motionController](self, "_motionController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "captureOrientation");

  -[CAMViewfinderViewController view](self, "view");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "window");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "_windowOwnsInterfaceOrientation");

  v13 = 0;
  if (v7 == 2 && v9 != 1 && v9 != 2 && ((v12 ^ 1) & 1) == 0)
    v13 = v6[2](v6) ^ 1;
  objc_msgSend(MEMORY[0x1E0DC3708], "currentDevice");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "orientation");
  if (v7 == 2 && v15 == 1 && v9 != 1 && (v6[2](v6) & 1) == 0)
  {
    v16 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      if (v9 == 3)
      {
        v17 = CFSTR("UIInterfaceOrientationLandscapeRight");
      }
      else if (v9 == 4)
      {
        v17 = CFSTR("UIInterfaceOrientationLandscapeLeft");
      }
      else
      {
        v17 = CFSTR("UIInterfaceOrientationPortraitUpsideDown");
        if (v9 != 2)
          v17 = 0;
      }
      *(_DWORD *)buf = 138543362;
      v31 = v17;
      _os_log_impl(&dword_1DB760000, v16, OS_LOG_TYPE_DEFAULT, "UIDevice has Portrait orientation, but capture orientation is %{public}@. Applying capture orientation to the device.", buf, 0xCu);
    }

    objc_msgSend(v14, "setOrientation:", v9);
  }
  if (v13)
    objc_msgSend((id)*MEMORY[0x1E0DC4730], "_setStatusBarOrientation:", v9);
  -[CAMViewfinderViewController _cameraRollController](self, "_cameraRollController");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "resetNavigation");
  objc_msgSend(v18, "presentCameraRollViewControllerAnimated:interactive:deferringStagedMediaLoading:", v22, v23, v21);
  -[CAMViewfinderViewController _updatePhysicalButtonCapturedEnabledResigningActiveOrDisappearing:](self, "_updatePhysicalButtonCapturedEnabledResigningActiveOrDisappearing:", 0);
  -[CAMViewfinderViewController _pausePairedVideoCaptureOnControllerIfNecessaryForGraphConfiguration:isShowingCameraRoll:](self, "_pausePairedVideoCaptureOnControllerIfNecessaryForGraphConfiguration:isShowingCameraRoll:", v24, 1);
  -[CAMViewfinderViewController _analyticsSessionEvent](self, "_analyticsSessionEvent");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "didPresentCameraRoll");

  -[CAMViewfinderViewController cameraRollControllerTestDelegate](self, "cameraRollControllerTestDelegate");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "viewfinderViewController:didPresentCameraRoll:", self, v18);

  _Block_object_dispose(v26, 8);
  _Block_object_dispose(v28, 8);

}

uint64_t __84__CAMViewfinderViewController__presentCameraRollViewControllerAnimated_interactive___block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_BYTE *)(v2 + 24))
  {
    v3 = a1 + 40;
  }
  else
  {
    *(_BYTE *)(v2 + 24) = 1;
    v4 = CAMIsDeviceOrientationLocked();
    v5 = *(_QWORD *)(a1 + 40);
    v3 = a1 + 40;
    *(_BYTE *)(*(_QWORD *)(v5 + 8) + 24) = v4;
  }
  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v3 + 8) + 24);
}

- (void)presentCameraRollViewControllerAnimated:(BOOL)a3 withAction:(unint64_t)a4 selectedAssetIndexFromEnd:(unint64_t)a5
{
  _QWORD v8[4];
  id v9[3];
  id location;

  -[CAMViewfinderViewController _presentCameraRollViewControllerAnimated:interactive:](self, "_presentCameraRollViewControllerAnimated:interactive:", a3, 1);
  objc_initWeak(&location, self);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __108__CAMViewfinderViewController_presentCameraRollViewControllerAnimated_withAction_selectedAssetIndexFromEnd___block_invoke;
  v8[3] = &unk_1EA32A9C0;
  objc_copyWeak(v9, &location);
  v9[1] = (id)a5;
  v9[2] = (id)a4;
  -[CAMViewfinderViewController set_cameraRollControllerAction:](self, "set_cameraRollControllerAction:", v8);
  objc_destroyWeak(v9);
  objc_destroyWeak(&location);
}

void __108__CAMViewfinderViewController_presentCameraRollViewControllerAnimated_withAction_selectedAssetIndexFromEnd___block_invoke(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  id v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));

  if (WeakRetained)
  {
    v4 = objc_loadWeakRetained(v2);
    objc_msgSend(v4, "_cameraRollController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (*(_QWORD *)(a1 + 40))
      objc_msgSend(v5, "setCurrentAssetIndexFromEnd:");
    if (*(_QWORD *)(a1 + 48))
    {
      v6 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v7 = *(_QWORD *)(a1 + 48);
        v11 = 134217984;
        v12 = v7;
        _os_log_impl(&dword_1DB760000, v6, OS_LOG_TYPE_DEFAULT, "CameraRoll: executing oneup action: %ld", (uint8_t *)&v11, 0xCu);
      }

      v8 = *(_QWORD *)(a1 + 48);
      objc_msgSend(v5, "oneUpViewController");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      +[CAMViewfinderLockScreenExtensionHelper executeUnlockOneUpAction:on:](CAMViewfinderLockScreenExtensionHelper, "executeUnlockOneUpAction:on:", v8, v9);

    }
    v10 = objc_loadWeakRetained(v2);
    objc_msgSend(v10, "set_cameraRollControllerAction:", 0);

  }
}

- (BOOL)_shouldResetZoomForChangeFromMode:(int64_t)a3 toMode:(int64_t)a4
{
  BOOL v6;
  BOOL v8;

  v6 = -[CAMViewfinderViewController _trueVideoIsActive](self, "_trueVideoIsActive");
  if (a3 == 4 && !a4)
    return 0;
  if (a3)
    v8 = 0;
  else
    v8 = a4 == 4;
  return !v8 && !v6;
}

- (id)_graphConfigurationForChangeToMode:(int64_t)a3 device:(int64_t)a4 fromGraphConfiguration:(id)a5
{
  id v8;
  void *v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  void *v13;
  int64_t v14;
  int64_t v15;
  void *v16;
  uint64_t v17;
  _BOOL8 v18;
  void *v19;
  char v20;
  _BOOL8 v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  CAMCaptureGraphConfiguration *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  int v47;
  int64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  char v52;
  char v53;
  char v54;
  uint64_t v55;
  int v56;
  void *v57;
  char v58;
  uint64_t v59;
  int64_t v60;
  char v61;
  char v62;
  void *v63;
  void *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BOOL4 v68;
  uint64_t v69;
  int64_t v70;
  void *v71;
  uint64_t v72;
  unsigned int v73;
  _BOOL4 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v8 = a5;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "sanitizeDesiredDevice:forMode:", a4, a3);
  v11 = -[CAMViewfinderViewController emulationMode](self, "emulationMode");
  v75 = v10;
  if ((unint64_t)(v10 - 1) > 0xA)
    v12 = 0;
  else
    v12 = qword_1DB9A53B8[v10 - 1];
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v67 = objc_msgSend(v13, "photoEncodingBehavior");
  v74 = -[CAMViewfinderViewController _isSpatialVideoInVideoModeActiveForMode:devicePosition:](self, "_isSpatialVideoInVideoModeActiveForMode:devicePosition:", a3, v12);
  v14 = -[CAMViewfinderViewController _sanitizedVideoConfigurationForMode:device:](self, "_sanitizedVideoConfigurationForMode:device:", a3, v75);
  if (-[CAMViewfinderViewController _trueVideoIsCapturing](self, "_trueVideoIsCapturing")
    || -[CAMViewfinderViewController _trueVideoIsTransitioningToCapture](self, "_trueVideoIsTransitioningToCapture"))
  {
    v15 = 0;
    v73 = 1;
  }
  else
  {
    v15 = -[CAMViewfinderViewController _desiredProResVideoMode](self, "_desiredProResVideoMode");
    v73 = 0;
  }
  v70 = v14;
  v68 = -[CAMViewfinderViewController _wantsExternalStorageOutputEnabledForMode:videoConfiguration:desiredProResVideoMode:](self, "_wantsExternalStorageOutputEnabledForMode:videoConfiguration:desiredProResVideoMode:", a3, v14, v15);
  v72 = objc_msgSend(v13, "videoEncodingBehaviorForConfiguration:mode:desiredProResVideoMode:outputToExternalStorage:spatialVideoEnabled:", v14, a3, v15);
  -[CAMViewfinderViewController _callStatusMonitor](self, "_callStatusMonitor");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "isCallActive");

  v66 = objc_msgSend(v13, "audioConfigurationForMode:device:emulationMode:duringCall:", a3, v75, v11, v17);
  if (-[CAMViewfinderViewController _wantsFilterScrubberVisible](self, "_wantsFilterScrubberVisible"))
    v18 = objc_msgSend(v8, "mode") == a3;
  else
    v18 = 0;
  v65 = -[CAMViewfinderViewController _previewConfigurationForMode:devicePosition:videoThumbnailOutputEnabled:](self, "_previewConfigurationForMode:devicePosition:videoThumbnailOutputEnabled:", a3, v12, v18);
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v19, "portraitInPhotoModeBehavior");

  v21 = (v20 & 1) != 0
     && -[CAMViewfinderViewController _depthEffectEnabledFromSuggestion](self, "_depthEffectEnabledFromSuggestion");
  -[CAMViewfinderViewController _previewFiltersForMode:device:wantsPhotoModePortraitEffect:](self, "_previewFiltersForMode:device:wantsPhotoModePortraitEffect:", a3, v75, v21);
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "videoThumbnailOutputConfigurationForMode:devicePosition:", a3, v12);
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  v76 = 0;
  v77 = 0;
  -[CAMViewfinderViewController _resolvePotentiallyConflictingControlsForMode:device:resolvedFlashMode:resolvedHDRMode:resolvedLivePhotoMode:resolvedRAWMode:resolvedPhotoResolution:](self, "_resolvePotentiallyConflictingControlsForMode:device:resolvedFlashMode:resolvedHDRMode:resolvedLivePhotoMode:resolvedRAWMode:resolvedPhotoResolution:", a3, v75, 0, &v77, 0, &v76, 0);
  v62 = objc_msgSend(v13, "isAutoFPSVideoEnabledForMode:device:videoConfiguration:encodingBehavior:outputToExternalStorage:spatialVideoEnabled:", a3, v75, v70, v72, v68, v74);
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v61 = objc_msgSend(v22, "shouldSuspendVideoHDRForHDRMode:captureMode:", v77, a3);

  v60 = -[CAMViewfinderViewController _aspectRatioCropForMode:devicePosition:](self, "_aspectRatioCropForMode:devicePosition:", a3, v12);
  v59 = objc_msgSend(v9, "maxSupportedPhotoQualityPrioritizationForMode:devicePosition:", a3, v12);
  v58 = objc_msgSend(v13, "mirrorCameraCapturesForDevicePosition:mode:", v12, a3);
  if (objc_msgSend(v13, "rawControlEnabled"))
    v56 = objc_msgSend(v9, "isLinearDNGSupportedForMode:", a3);
  else
    v56 = 0;
  v55 = objc_msgSend(v9, "semanticStyleSupportForMode:devicePosition:", a3, v12);
  -[CAMViewfinderViewController _semanticStyleForPreviewWithSupport:](self, "_semanticStyleForPreviewWithSupport:");
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v13, "shouldUseContentAwareDistortionCorrection"))
    v54 = objc_msgSend(v9, "isContentAwareDistortionCorrectionSupportedForMode:", a3);
  else
    v54 = 0;
  if (objc_msgSend(v13, "responsiveShutterEnabled"))
    v53 = objc_msgSend(v9, "isResponsiveShutterSupportedForMode:", a3);
  else
    v53 = 0;
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = objc_msgSend(v23, "prefersHDR10BitVideoForCapabilities:", v24);

  if (objc_msgSend(v9, "isVideoStabilizationControlSupportedForMode:device:videoConfiguration:videoEncodingBehavior:trueVideoEnabled:prefersHDR10BitVideo:", a3, v75, v70, v72, v73, v25))v26 = -[CAMViewfinderViewController _desiredVideoStabilizationMode](self, "_desiredVideoStabilizationMode");
  else
    v26 = 0;
  v27 = objc_msgSend(v13, "videoStabilizationStrengthForVideoStabilizationMode:captureMode:spatialVideoEnabled:", v26, a3, v74);
  v52 = v25;
  BYTE2(v38) = v25;
  BYTE1(v38) = v73;
  LOBYTE(v38) = v74;
  v71 = v9;
  v47 = objc_msgSend(v9, "isVideoStabilizationStrength:supportedForMode:device:videoConfiguration:videoEncodingBehavior:outputToExternalStorage:spatialVideoEnabled:trueVideoEnabled:prefersHDR10BitVideo:", v27, a3, v75, v70, v72, v68, v38);
  v69 = objc_msgSend(v13, "maximumPhotoResolutionForMode:device:", a3, v75);
  v28 = v76;
  v51 = objc_msgSend(v13, "colorSpaceForMode:videoConfiguration:videoEncodingBehavior:spatialVideoEnabled:device:", a3, v70, v72, v74, v75);
  v50 = objc_msgSend(v13, "shouldUseDepthSuggestionInPhotoMode");
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v29, "isZoomPIPEnabled"))
  {
    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v49 = objc_msgSend(v30, "isZoomPIPSupportedForMode:devicePosition:", a3, v12);

  }
  else
  {
    v49 = 0;
  }

  if (objc_msgSend(v71, "isCustomLensSupportedForMode:device:isTrueVideo:", a3, v75, v73))
  {
    objc_msgSend(v13, "customLensGroup");
    v46 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v46 = 0;
  }
  if (v28 == 1)
    v31 = v56;
  else
    v31 = 0;
  HIDWORD(v45) = v31;
  if (!v47)
    v27 = 0;
  v32 = -[CAMViewfinderViewController _currentPhotoFormat](self, "_currentPhotoFormat");
  v34 = v33;
  v35 = -[CAMViewfinderViewController _desiredMacroMode](self, "_desiredMacroMode");
  BYTE1(v40) = v74;
  LOBYTE(v40) = -[CAMViewfinderViewController _depthEffectEnabledFromSuggestion](self, "_depthEffectEnabledFromSuggestion");
  v48 = +[CAMConflictingControlConfiguration resolveDesiredMacroMode:forMode:device:videoConfiguration:videoStabilizationStrength:photoFormat:optionalDepthEffectEnabled:spatialVideoEnabled:](CAMConflictingControlConfiguration, "resolveDesiredMacroMode:forMode:device:videoConfiguration:videoStabilizationStrength:photoFormat:optionalDepthEffectEnabled:spatialVideoEnabled:", v35, a3, v75, v70, v27, v32, v34, v40);
  BYTE2(v45) = v52;
  BYTE1(v45) = v73;
  LOBYTE(v45) = v74;
  BYTE1(v44) = v49;
  LOBYTE(v44) = v50;
  BYTE2(v43) = BYTE4(v45);
  BYTE1(v43) = v53;
  LOBYTE(v43) = v54;
  BYTE1(v42) = v56;
  LOBYTE(v42) = v58;
  BYTE1(v41) = v61;
  LOBYTE(v41) = v62;
  LOBYTE(v39) = objc_msgSend(v13, "windRemovalEnabledForAudioConfiguration:", v66);
  v36 = -[CAMCaptureGraphConfiguration initWithCaptureMode:captureDevice:macroMode:videoConfiguration:audioConfiguration:mixAudioWithOthers:windNoiseRemovalEnabled:previewConfiguration:previewSampleBufferVideoFormat:previewFilters:videoThumbnailOutputConfiguration:photoEncodingBehavior:videoEncodingBehavior:enableAutoFPSVideo:videoHDRSuspended:aspectRatioCrop:photoQualityPrioritization:captureMirrored:enableRAWCaptureIfSupported:semanticStyleSupport:previewSemanticStyle:enableContentAwareDistortionCorrection:enableResponsiveShutter:suspendLivePhotoCapture:videoStabilizationStrength:maximumPhotoResolution:colorSpace:enableDepthSuggestion:enableZoomPIP:customLensGroup:enableStereoVideoCapture:trueVideoEnabled:prefersHDR10BitVideo:]([CAMCaptureGraphConfiguration alloc], "initWithCaptureMode:captureDevice:macroMode:videoConfiguration:audioConfiguration:mixAudioWithOthers:windNoiseRemovalEnabled:previewConfiguration:previewSampleBufferVideoFormat:previewFilters:videoThumbnailOutputConfiguration:photoEncodingBehavior:videoEncodingBehavior:enableAutoFPSVideo:videoHDRSuspended:aspectRatioCrop:photoQualityPrioritization:captureMirrored:enableRAWCaptureIfSupported:semanticStyleSupport:previewSemanticStyle:enableContentAwareDistortionCorrection:enableResponsiveShutter:suspendLivePhotoCapture:videoStabilizationStrength:maximumPhotoResolution:colorSpace:enableDepthSuggestion:enableZoomPIP:customLensGroup:enableStereoVideoCapture:trueVideoEnabled:prefersHDR10BitVideo:", a3, v75, v48, v70, v66, objc_msgSend(v13, "shouldMixAudioWithOthers"), v39, v65, 0, v64, v63,
          v67,
          v72,
          v41,
          v60,
          v59,
          v42,
          v55,
          v57,
          v43,
          v27,
          v69,
          v51,
          v44,
          v46,
          v45);

  return v36;
}

- (void)_changeToGraphConfiguration:(id)a3 zoomFactor:(double)a4 fromGraphConfiguration:(id)a5
{
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _BOOL4 v13;
  void *v14;
  _BOOL4 v15;
  double v16;
  double v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  void *v21;
  void *v22;
  int v23;
  id v24;
  __int16 v25;
  int v26;
  __int16 v27;
  double v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a5;
  v10 = objc_msgSend(v8, "mode");
  v11 = objc_msgSend(v8, "device");
  -[CAMViewfinderViewController _callStatusMonitor](self, "_callStatusMonitor");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = -[CAMViewfinderViewController _shouldSuspendCaptureSessionForGraphConfiguration:callActive:](self, "_shouldSuspendCaptureSessionForGraphConfiguration:callActive:", v9, objc_msgSend(v12, "isCallActive"));

  -[CAMViewfinderViewController _callStatusMonitor](self, "_callStatusMonitor");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = -[CAMViewfinderViewController _shouldSuspendCaptureSessionForGraphConfiguration:callActive:](self, "_shouldSuspendCaptureSessionForGraphConfiguration:callActive:", v8, objc_msgSend(v14, "isCallActive"));

  if (v15)
  {
    -[CAMViewfinderViewController suspendCameraSessionWithCompletion:](self, "suspendCameraSessionWithCompletion:", 0);
  }
  else
  {
    CAMSignpostWithIDAndArgs(9, 0xEEEEB0B5B2B2EEEELL, v10, v11, 0, 0);
    -[CAMViewfinderViewController _setNeedsDeferredGraphConfiguration:](self, "_setNeedsDeferredGraphConfiguration:", 0);
    -[CAMViewfinderViewController _minimumExecutionTimeForChangeToGraphConfiguration:fromGraphConfiguration:](self, "_minimumExecutionTimeForChangeToGraphConfiguration:fromGraphConfiguration:", v8, v9);
    v17 = v16;
    -[CAMViewfinderViewController _captureController](self, "_captureController");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend(v18, "changeToGraphConfiguration:zoomFactor:minimumExecutionTime:outputToExternalStorage:", v8, -[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled"), a4, v17);
    -[CAMViewfinderViewController _setLastConfigurationRequestID:](self, "_setLastConfigurationRequestID:", v19);
    v20 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      v23 = 138543874;
      v24 = v8;
      v25 = 1024;
      v26 = v19;
      v27 = 2048;
      v28 = a4;
      _os_log_impl(&dword_1DB760000, v20, OS_LOG_TYPE_DEFAULT, "Requested change to %{public}@ (requestID=%d) (zoom=%.3f)", (uint8_t *)&v23, 0x1Cu);
    }

    if (v13)
      -[CAMViewfinderViewController resumeCameraSessionWithCompletion:](self, "resumeCameraSessionWithCompletion:", 0);
    -[CAMViewfinderViewController _updateHDRSuggestionMonitoringForGraphConfiguration:](self, "_updateHDRSuggestionMonitoringForGraphConfiguration:", v8);
    -[CAMViewfinderViewController _updateTorchModeForGraphConfiguration:animated:](self, "_updateTorchModeForGraphConfiguration:animated:", v8, 1);
    -[CAMViewfinderViewController _updateFlashModeOnControllerForMode:](self, "_updateFlashModeOnControllerForMode:", v10);
    -[CAMViewfinderViewController _updateTorchModeOnControllerForMode:](self, "_updateTorchModeOnControllerForMode:", v10);
    -[CAMViewfinderViewController _remoteShutterController](self, "_remoteShutterController");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "setCaptureMode:", v10);

    -[CAMViewfinderViewController _remoteShutterController](self, "_remoteShutterController");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "setCaptureDevice:", v11);

  }
}

- (double)_minimumExecutionTimeForChangeToGraphConfiguration:(id)a3 fromGraphConfiguration:(id)a4
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  _BOOL4 v15;
  _BOOL4 v17;
  double result;

  v5 = a4;
  v6 = a3;
  v7 = objc_msgSend(v6, "mode");
  v8 = objc_msgSend(v5, "mode");
  v9 = objc_msgSend(v6, "device");

  if ((unint64_t)(v9 - 1) > 0xA)
    v10 = 0;
  else
    v10 = qword_1DB9A53B8[v9 - 1];
  v11 = objc_msgSend(v5, "device");

  if ((unint64_t)(v11 - 1) > 0xA)
  {
    v12 = 0;
    if (v8)
      goto LABEL_10;
  }
  else
  {
    v12 = qword_1DB9A53B8[v11 - 1];
    if (v8)
      goto LABEL_10;
  }
  if (v7 == 4)
  {
    v13 = 1;
    goto LABEL_19;
  }
LABEL_10:
  v13 = v8 == 4 && v7 == 0;
  if (v8 == 5 && v7 == 1)
  {
    v15 = 1;
    goto LABEL_25;
  }
LABEL_19:
  v15 = v8 == 1 && v7 == 5;
LABEL_25:
  v17 = v12 == v10;
  if (v8 == v7)
    v13 = 1;
  result = 0.285;
  if (!v17 || !v13 && !v15)
    return 0.0;
  return result;
}

- (int64_t)_aspectRatioForMode:(int64_t)a3 devicePosition:(int64_t)a4
{
  int64_t result;

  if ((unint64_t)a3 > 9)
    return 0;
  if (((1 << a3) & 0x1AE) != 0)
    return 1;
  if (((1 << a3) & 0x241) == 0)
    return 3;
  switch(-[CAMViewfinderViewController _aspectRatioCropForMode:devicePosition:](self, "_aspectRatioCropForMode:devicePosition:"))
  {
    case 0:
      result = 4 * (-[CAMViewfinderViewController emulationMode](self, "emulationMode") == 2);
      break;
    case 1:
      result = 3;
      break;
    case 2:
      result = 1;
      break;
    case 3:
      result = 2;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

- ($76EADD4ED24426C67044446678BAA581)_dynamicShutterSettingsForGraphConfiguration:(SEL)a3
{
  int64_t v6;
  BOOL v7;
  void *v8;
  _BOOL4 v9;
  unsigned int v10;
  BOOL v11;
  int64_t v12;
  int64x2_t v13;
  _BOOL4 v14;
  _BOOL4 v15;
  _BOOL4 v16;
  int64_t v17;
  int64_t v18;
  int64x2_t v19;
  int64_t v20;
  $76EADD4ED24426C67044446678BAA581 *result;
  void *v22;
  int v23;
  id v24;

  v24 = a4;
  *(_OWORD *)&retstr->var4 = xmmword_1DB9A7DC8;
  *(_OWORD *)&retstr->var6 = unk_1DB9A7DD8;
  retstr->var8 = 0;
  *(_OWORD *)&retstr->var0 = CAMDynamicShutterSettingsDefault;
  *(_OWORD *)&retstr->var2 = unk_1DB9A7DB8;
  v6 = -[CAMViewfinderViewController timerDuration](self, "timerDuration");
  v7 = -[CAMViewfinderViewController _useCreativeCameraControls](self, "_useCreativeCameraControls");
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[CAMViewfinderViewController _isSpatialVideoInVideoModeActiveForMode:devicePosition:](self, "_isSpatialVideoInVideoModeActiveForMode:devicePosition:", objc_msgSend(v24, "mode"), objc_msgSend(v24, "devicePosition"));
  if (v7
    || ((objc_msgSend(v8, "isStillDuringVideoSupportedForVideoEncodingBehavior:", objc_msgSend(v24, "videoEncodingBehavior")) ^ 1 | v9) & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    v10 = objc_msgSend(v8, "isStillDuringVideoSupportedForMode:", objc_msgSend(v24, "mode"));
  }
  v11 = -[CAMViewfinderViewController _isZoomAllowedForGraphConfiguration:](self, "_isZoomAllowedForGraphConfiguration:", v24);
  switch(objc_msgSend(v24, "mode"))
  {
    case 0:
      if (v6)
        goto LABEL_27;
      v14 = -[CAMViewfinderViewController _isCurrentLowLightCaptureCancelable](self, "_isCurrentLowLightCaptureCancelable");
      v15 = -[CAMViewfinderViewController _isExpectedLowLightDurationCancelable](self, "_isExpectedLowLightDurationCancelable");
      v16 = -[CAMViewfinderViewController isDisablingMultipleCaptureFeatures](self, "isDisablingMultipleCaptureFeatures");
      retstr->var0 = v15;
      retstr->var1 = 1;
      v17 = !v14;
      retstr->var2 = v17;
      retstr->var3 = !v16 && !v14;
      if (v16)
        v18 = 1;
      else
        v18 = 2;
      if (v14)
        v18 = 0;
      retstr->var5 = v18;
      retstr->var7 = v17;
      goto LABEL_23;
    case 1:
    case 7:
    case 8:
      v12 = 1;
      v13 = vdupq_n_s64(1uLL);
      *(int64x2_t *)&retstr->var0 = v13;
      retstr->var2 = 1;
      if (v10)
        v12 = 2;
      retstr->var5 = v12;
      *(int64x2_t *)&retstr->var7 = v13;
      goto LABEL_23;
    case 2:
      v19 = vdupq_n_s64(1uLL);
      *(int64x2_t *)&retstr->var0 = v19;
      retstr->var2 = v10;
      if (v10)
        v20 = 2;
      else
        v20 = 1;
      retstr->var5 = v20;
      retstr->var8 = 1;
      *(int64x2_t *)&retstr->var6 = v19;
      goto LABEL_23;
    case 3:
      *(int64x2_t *)&retstr->var0 = vdupq_n_s64(1uLL);
      goto LABEL_28;
    case 4:
    case 6:
      if (!v6)
        goto LABEL_10;
      goto LABEL_27;
    case 5:
      retstr->var0 = 1;
      retstr->var8 = 1;
      *(_OWORD *)&retstr->var6 = xmmword_1DB9A4FB0;
      goto LABEL_28;
    case 9:
      if (v6)
        goto LABEL_27;
      +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = objc_msgSend(v22, "isSpatialModeTrueVideoSupported");

      if (v23)
      {
        *(_OWORD *)&retstr->var0 = xmmword_1DB9A5000;
        *(_OWORD *)&retstr->var2 = xmmword_1DB9A5450;
        retstr->var5 = 1;
        retstr->var7 = 1;
LABEL_23:
        retstr->var4 = v11;
      }
      else
      {
LABEL_10:
        if (-[CAMViewfinderViewController _isExpectedLowLightDurationCancelable](self, "_isExpectedLowLightDurationCancelable"))
        {
LABEL_27:
          retstr->var0 = 1;
        }
      }
LABEL_28:

      return result;
    default:
      goto LABEL_28;
  }
}

- ($E5C720D6BB068A42F0C2CD001350366C)_dynamicShutterPrivateSettingsForGraphConfiguration:(id)a3
{
  id v3;
  void *v4;
  uint64_t v5;

  v3 = a3;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "mode");

  LOBYTE(v3) = objc_msgSend(v4, "isPauseVideoSupportedForMode:", v5);
  return ($E5C720D6BB068A42F0C2CD001350366C)v3;
}

- (void)_updateShutterButtonForGraphConfiguration:(id)a3 isCapturing:(BOOL)a4 animated:(BOOL)a5
{
  _BOOL8 v5;
  _BOOL8 v6;
  id v8;
  void *v9;
  $E5C720D6BB068A42F0C2CD001350366C v10;
  void *v11;
  uint64_t v12;
  id v13;
  _OWORD v14[4];
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v5 = a5;
  v6 = a4;
  v8 = a3;
  -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    v20 = 0;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    -[CAMViewfinderViewController _dynamicShutterSettingsForGraphConfiguration:](self, "_dynamicShutterSettingsForGraphConfiguration:", v8);
    v10.var0 = (BOOL)-[CAMViewfinderViewController _dynamicShutterPrivateSettingsForGraphConfiguration:](self, "_dynamicShutterPrivateSettingsForGraphConfiguration:", v8);

    -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v14[2] = v18;
    v14[3] = v19;
    v15 = v20;
    v14[0] = v16;
    v14[1] = v17;
    objc_msgSend(v11, "setSettings:privateSettings:animated:", v14, v10.var0, v5);

  }
  else
  {
    -[CAMViewfinderViewController _shutterButton](self, "_shutterButton");
    v13 = (id)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v8, "mode");

    objc_msgSend(v13, "setMode:animated:", -[CAMViewfinderViewController _shutterButtonModeForCameraMode:isCapturing:](self, "_shutterButtonModeForCameraMode:isCapturing:", v12, v6), v5);
  }
}

- (void)_shutterButtonSetSpinning:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  id v6;

  v3 = a3;
  -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
    -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
  else
    -[CAMViewfinderViewController _shutterButton](self, "_shutterButton");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setSpinning:", v3);

}

- (void)_updateShutterButtonForEndOfLowLightCapture
{
  void *v3;
  _BOOL8 v4;
  void *v5;
  id v6;

  -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (objc_msgSend(v3, "isCapturingLowLightImage") & 1) != 0
    || -[CAMViewfinderViewController _isLowLightCaptureCanceling](self, "_isLowLightCaptureCanceling");
  objc_msgSend(v6, "setSpinning:", v4);

  objc_msgSend(v6, "resetAnimated:", 1);
  if (-[CAMViewfinderViewController _isCurrentLowLightCaptureCancelable](self, "_isCurrentLowLightCaptureCancelable"))
  {
    -[CAMViewfinderViewController _setCurrentLowLightCaptureCancelable:](self, "_setCurrentLowLightCaptureCancelable:", 0);
    -[CAMViewfinderViewController _updateEnabledControlsWithReason:](self, "_updateEnabledControlsWithReason:", CFSTR("Night mode capture finished exposing"));
    -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _updateShutterButtonForGraphConfiguration:isCapturing:animated:](self, "_updateShutterButtonForGraphConfiguration:isCapturing:animated:", v5, 0, 1);

  }
}

- (void)_updateShutterButtonLegibility
{
  void *v3;
  uint64_t v4;
  _BOOL8 v6;
  id v7;

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "viewportAspectRatio");

  v6 = v4 == 4 || v4 == 1;
  -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setShowContrastBorder:", v6);

}

- (id)modesForModeSelector:(id)a3
{
  void *v4;
  void *v5;

  -[CAMViewfinderViewController _modeDial](self, "_modeDial", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController modesForModeDial:](self, "modesForModeDial:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

- (BOOL)_modeChangeSwipeMatchesExposureBiasPanDirection
{
  void *v3;
  void *v4;
  _BOOL4 v5;
  UISwipeGestureRecognizerDirection v6;
  _BOOL4 v8;
  int v9;

  -[CAMPreviewViewController activeExposureBiasPanGestureRecognizer](self->__previewViewController, "activeExposureBiasPanGestureRecognizer");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (unint64_t)(objc_msgSend(v4, "previewViewOrientation") - 3) < 2;
    v6 = -[UISwipeGestureRecognizer direction](self->__previousModeGestureRecognizer, "direction");
    v8 = v6 == 4 || v6 == 8;
    v9 = v8 ^ v5 ^ objc_msgSend(v3, "_canPanVertically") ^ 1;

  }
  else
  {
    LOBYTE(v9) = 0;
  }

  return v9;
}

- (BOOL)_filterScrubberSwipeMatchesExposureBiasPanDirection
{
  void *v3;
  void *v4;
  _BOOL4 v5;
  int v6;

  -[CAMPreviewViewController activeExposureBiasPanGestureRecognizer](self->__previewViewController, "activeExposureBiasPanGestureRecognizer");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (unint64_t)(objc_msgSend(v4, "previewViewOrientation") - 3) < 2;
    v6 = objc_msgSend(v3, "_canPanVertically") ^ v5;

  }
  else
  {
    LOBYTE(v6) = 0;
  }

  return v6;
}

- (BOOL)_smartStyleChangeSwipeMatchesExposureBiasPanDirection
{
  void *v3;
  void *v4;
  _BOOL4 v5;
  int v6;

  -[CAMPreviewViewController activeExposureBiasPanGestureRecognizer](self->__previewViewController, "activeExposureBiasPanGestureRecognizer");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (unint64_t)(objc_msgSend(v4, "previewViewOrientation") - 5) < 0xFFFFFFFFFFFFFFFELL;

    v6 = objc_msgSend(v3, "_canPanVertically") ^ v5;
  }
  else
  {
    LOBYTE(v6) = 0;
  }

  return v6;
}

- (BOOL)gestureRecognizer:(id)a3 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)a4
{
  UISwipeGestureRecognizer *v6;
  id v7;
  id v8;
  BOOL v9;
  char v10;
  void *v11;
  void *v12;
  UISwipeGestureRecognizer *v13;
  char v14;
  void *v15;
  id v16;

  v6 = (UISwipeGestureRecognizer *)a3;
  v7 = a4;
  if (-[CAMViewfinderViewController _modeChangeSwipeMatchesExposureBiasPanDirection](self, "_modeChangeSwipeMatchesExposureBiasPanDirection"))
  {
    -[CAMPreviewViewController activeExposureBiasPanGestureRecognizer](self->__previewViewController, "activeExposureBiasPanGestureRecognizer");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    v9 = v8 == v7 && (self->__previousModeGestureRecognizer == v6 || self->__nextModeGestureRecognizer == v6);

  }
  else
  {
    v9 = 0;
  }
  if ((UISwipeGestureRecognizer *)self->__zoomPinchGestureRecognizer == v6)
  {
    -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "gestureRecognizers");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v12, "containsObject:", v7);

  }
  else
  {
    v10 = 0;
  }
  -[CAMViewfinderViewController _sharedLibraryLongPressGestureRecognizer](self, "_sharedLibraryLongPressGestureRecognizer");
  v13 = (UISwipeGestureRecognizer *)objc_claimAutoreleasedReturnValue();

  if (v13 == v6)
  {
    -[CAMViewfinderViewController _sharedLibraryButton](self, "_sharedLibraryButton");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "touchingGestureRecognizer");
    v16 = (id)objc_claimAutoreleasedReturnValue();
    v14 = v16 == v7;

  }
  else
  {
    v14 = v9 | v10;
  }

  return v14;
}

- (BOOL)gestureRecognizerShouldBegin:(id)a3
{
  UISwipeGestureRecognizer *v4;
  void *v5;
  _BOOL4 v7;
  BOOL v8;
  int v9;
  int v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  _BOOL4 v16;
  void *v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  CGPoint v22;
  CGRect v23;

  v4 = (UISwipeGestureRecognizer *)a3;
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v5, "isCapturingLowLightImage") & 1) != 0
    || -[CAMViewfinderViewController _wantsVisualTextAnalysis](self, "_wantsVisualTextAnalysis"))
  {
    LOBYTE(self) = 0;
  }
  else
  {
    if ((UISwipeGestureRecognizer *)self->__zoomPinchGestureRecognizer != v4)
    {
      if (self->__nextModeGestureRecognizer == v4 || self->__previousModeGestureRecognizer == v4)
      {
        LODWORD(self) = objc_msgSend(v5, "isCapturingBurst") ^ 1;
        goto LABEL_4;
      }
      if ((UISwipeGestureRecognizer *)self->__cameraRollSwipeUpGestureRecognizer == v4)
      {
        -[CAMViewfinderViewController view](self, "view");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        -[UISwipeGestureRecognizer velocityInView:](v4, "velocityInView:", v11);
        v13 = v12;
        v15 = v14;

        v16 = fabs(v13) < fabs(v15) && v15 < 0.0;
        -[CAMViewfinderViewController _cameraRollController](self, "_cameraRollController");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(self) = v16 & objc_msgSend(v17, "canPresentCameraRollViewController");
      }
      else
      {
        if (self->__smartStylesSwipeLeftGestureRecognizer != v4 && self->__smartStylesSwipeRightGestureRecognizer != v4)
        {
          LOBYTE(self) = 1;
          goto LABEL_4;
        }
        -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
        self = (CAMViewfinderViewController *)objc_claimAutoreleasedReturnValue();
        -[CAMViewfinderViewController smartStylePicker](self, "smartStylePicker");
        v17 = (void *)objc_claimAutoreleasedReturnValue();

        -[UISwipeGestureRecognizer locationInView:](v4, "locationInView:", v17);
        v19 = v18;
        v21 = v20;
        objc_msgSend(v17, "bounds");
        v22.x = v19;
        v22.y = v21;
        LOBYTE(self) = CGRectContainsPoint(v23, v22);
      }

      goto LABEL_4;
    }
    v7 = -[CAMViewfinderViewController _isPinchToZoomAllowed](self, "_isPinchToZoomAllowed");
    v8 = -[CAMViewfinderViewController _isModeDisabled](self, "_isModeDisabled");
    v9 = objc_msgSend(v5, "isCapturingBurst");
    v10 = (v9 | -[CAMViewfinderViewController _isCapturingFromTimer](self, "_isCapturingFromTimer")) ^ 1;
    if (v8)
      LOBYTE(v10) = 0;
    if (v7)
      LOBYTE(self) = v10;
    else
      LOBYTE(self) = 0;
  }
LABEL_4:

  return (char)self;
}

- (BOOL)gestureRecognizer:(id)a3 shouldRequireFailureOfGestureRecognizer:(id)a4
{
  id v6;
  UISwipeGestureRecognizer *v7;
  id v8;
  void *v9;
  id v10;
  char v11;
  void *v12;
  void *v13;
  void *v14;
  UISwipeGestureRecognizer *v15;
  UISwipeGestureRecognizer *v16;
  BOOL v17;

  v6 = a3;
  v7 = (UISwipeGestureRecognizer *)a4;
  -[CAMPreviewViewController activeExposureBiasPanGestureRecognizer](self->__previewViewController, "activeExposureBiasPanGestureRecognizer");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  if (v8 == v6)
  {
    v11 = !-[CAMViewfinderViewController _modeChangeSwipeMatchesExposureBiasPanDirection](self, "_modeChangeSwipeMatchesExposureBiasPanDirection")&& (self->__previousModeGestureRecognizer == v7 || self->__nextModeGestureRecognizer == v7);
    if (!-[CAMViewfinderViewController _filterScrubberSwipeMatchesExposureBiasPanDirection](self, "_filterScrubberSwipeMatchesExposureBiasPanDirection"))
    {
      -[CAMViewfinderViewController _swipeDownGestureRecognizer](self, "_swipeDownGestureRecognizer");
      v15 = (UISwipeGestureRecognizer *)objc_claimAutoreleasedReturnValue();
      if (v15 == v7)
      {
        v17 = 1;
      }
      else
      {
        -[CAMViewfinderViewController _swipeUpGestureRecognizer](self, "_swipeUpGestureRecognizer");
        v16 = (UISwipeGestureRecognizer *)objc_claimAutoreleasedReturnValue();
        v17 = v16 == v7;

      }
      v11 |= v17;
    }
  }
  else
  {
    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "modeSelectorGestureRecognizer");
    v10 = (id)objc_claimAutoreleasedReturnValue();

    if (v10 == v6)
    {
      -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "previewView");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "gestureRecognizers");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v14, "containsObject:", v7);

    }
    else
    {
      v11 = 0;
    }
  }

  return v11;
}

- (void)previewViewControllerDidChangeFocusOrExposureLocked:(id)a3 shouldAnimate:(BOOL)a4
{
  uint64_t v4;
  id v6;
  id v7;

  v4 = a4;
  v6 = a3;
  -[CAMViewfinderViewController _updateFocusAndExposureLockBadgeAnimated:](self, "_updateFocusAndExposureLockBadgeAnimated:", v4);
  LODWORD(v4) = objc_msgSend(v6, "isFocusLockedByUser");

  if ((_DWORD)v4)
  {
    -[CAMViewfinderViewController _analyticsSessionEvent](self, "_analyticsSessionEvent");
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "didFocusLockInteraction");

  }
}

- (void)previewViewControllerDidChangeFocusOrExposure:(id)a3
{
  NSObject *v4;
  void *v5;
  void *v6;
  uint8_t v7[16];

  v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1DB760000, v4, OS_LOG_TYPE_DEFAULT, "previewViewControllerDidChangeFocusOrExposure", v7, 2u);
  }

  -[CAMViewfinderViewController _analyticsSessionEvent](self, "_analyticsSessionEvent");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "didFocusInteraction");

  -[CAMViewfinderViewController _updatePreviewControllerIndicatorStyle](self, "_updatePreviewControllerIndicatorStyle");
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:animated:](self, "_updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:animated:", v6, 1);

}

- (void)previewViewControllerWillResetFocusOrExposure:(id)a3
{
  id v4;

  -[CAMViewfinderViewController _updatePreviewControllerIndicatorStyle](self, "_updatePreviewControllerIndicatorStyle", a3);
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:animated:](self, "_updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:animated:", v4, 1);

}

- (BOOL)previewViewController:(id)a3 gestureRecognizer:(id)a4 shouldRequireFailureOfGestureRecognizer:(id)a5
{
  return -[CAMViewfinderViewController gestureRecognizer:shouldRequireFailureOfGestureRecognizer:](self, "gestureRecognizer:shouldRequireFailureOfGestureRecognizer:", a4, a5);
}

- (BOOL)previewViewControllerShouldRestrictExposureBiasPanToTouchesNearSlider:(id)a3
{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  int v8;
  int v9;

  -[CAMViewfinderViewController _motionController](self, "_motionController", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "captureOrientation");

  v6 = v5 - 1;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "allowControlDrawer");

  if (v6 < 2)
    v9 = v8;
  else
    v9 = 0;
  if (-[CAMViewfinderViewController _shouldEnableSmartStylesSwipeGestures](self, "_shouldEnableSmartStylesSwipeGestures"))
  {
    return -[CAMViewfinderViewController _smartStyleChangeSwipeMatchesExposureBiasPanDirection](self, "_smartStyleChangeSwipeMatchesExposureBiasPanDirection") | v9;
  }
  return v9;
}

- (void)previewViewControllerDidChangeVideoFillAspectRatio:(id)a3
{
  id v3;

  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView", a3);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setNeedsLayout");

}

- (int64_t)_itemIndexForFilterType:(int64_t)a3
{
  void *v4;
  void *v5;
  int64_t v6;
  NSObject *v7;
  int v9;
  int64_t v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  -[CAMViewfinderViewController _filterTypes](self, "_filterTypes");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v4, "indexOfObject:", v5);

  if (v6 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v7 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 134218242;
      v10 = a3;
      v11 = 2114;
      v12 = v4;
      _os_log_impl(&dword_1DB760000, v7, OS_LOG_TYPE_DEFAULT, "Tried to get index for filterType %ld; only filterTypes are %{public}@",
        (uint8_t *)&v9,
        0x16u);
    }

    v6 = 0;
  }

  return v6;
}

- (int64_t)_filterTypeForItemIndex:(int64_t)a3
{
  void *v4;
  void *v5;
  void *v6;
  int64_t v7;

  -[CAMViewfinderViewController _filterTypes](self, "_filterTypes");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (a3 < 0 || objc_msgSend(v4, "count") <= (unint64_t)a3)
  {
    v7 = 0;
  }
  else
  {
    objc_msgSend(v5, "objectAtIndexedSubscript:", a3);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "integerValue");

  }
  return v7;
}

- (void)_setEffectFilterType:(int64_t)a3 forMode:(int64_t)a4
{
  NSObject *v5;
  int v6;
  int64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  switch(a4)
  {
    case 0:
      -[CAMViewfinderViewController _setPhotoModeEffectFilterType:](self, "_setPhotoModeEffectFilterType:", a3);
      break;
    case 1:
    case 2:
    case 3:
    case 5:
    case 7:
    case 8:
    case 9:
      if (a3)
      {
        v5 = os_log_create("com.apple.camera", "Camera");
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          v6 = 134217984;
          v7 = a4;
          _os_log_impl(&dword_1DB760000, v5, OS_LOG_TYPE_DEFAULT, "Trying to set filter type on unhandled mode %ld", (uint8_t *)&v6, 0xCu);
        }

      }
      break;
    case 4:
      -[CAMViewfinderViewController _setSquareModeEffectFilterType:](self, "_setSquareModeEffectFilterType:", a3);
      break;
    case 6:
      -[CAMViewfinderViewController _setPortraitModeEffectFilterType:](self, "_setPortraitModeEffectFilterType:", a3);
      break;
    default:
      return;
  }
}

- (unint64_t)_previewConfigurationForMode:(int64_t)a3 devicePosition:(int64_t)a4 videoThumbnailOutputEnabled:(BOOL)a5
{
  _BOOL4 v5;
  _BOOL4 v7;
  int v8;
  unint64_t v9;

  v5 = a5;
  v7 = -[CAMViewfinderViewController isPerformingReviewUsingOverlay](self, "isPerformingReviewUsingOverlay", a3, a4);
  v8 = v7 | -[CAMViewfinderViewController _isOutOfDiskSpace](self, "_isOutOfDiskSpace");
  v9 = 5;
  if (!v5)
    v9 = 1;
  if (v8)
    return 0;
  else
    return v9;
}

- (id)_previewFiltersForMode:(int64_t)a3 device:(int64_t)a4 wantsPhotoModePortraitEffect:(BOOL)a5
{
  _BOOL4 v5;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  _BOOL4 v13;
  int64_t v14;
  uint64_t v15;

  v5 = a5;
  v9 = -[CAMViewfinderViewController _effectFilterTypeForMode:](self, "_effectFilterTypeForMode:");
  v10 = -[CAMViewfinderViewController _sanitizedLightingTypeForMode:device:](self, "_sanitizedLightingTypeForMode:device:", a3, a4);
  v11 = a3 - 6;
  if (v5)
    v12 = v10;
  else
    v12 = 0;
  if (a3)
  {
    v12 = v10;
    v13 = 0;
  }
  else
  {
    v13 = v5;
  }
  if (v11 >= 2)
    v14 = v12;
  else
    v14 = v10;
  v15 = v11 < 2 || v13;
  return +[CAMEffectFilterManager filtersForFilterType:lightingType:applyDepthEffect:](CAMEffectFilterManager, "filtersForFilterType:lightingType:applyDepthEffect:", v9, v14, v15);
}

- (void)_updateCurrentPreviewFiltersOnCaptureController
{
  void *v3;
  id v4;

  -[CAMViewfinderViewController _previewFiltersForMode:device:wantsPhotoModePortraitEffect:](self, "_previewFiltersForMode:device:wantsPhotoModePortraitEffect:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevice](self, "_currentDevice"), -[CAMViewfinderViewController _shouldUsePhotoModePortraitEffect](self, "_shouldUsePhotoModePortraitEffect"));
  v4 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "changeToPreviewFilters:captureMode:", v4, -[CAMViewfinderViewController _currentMode](self, "_currentMode"));

}

- (id)_currentCaptureFiltersForBurst:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  uint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  void *v11;

  v3 = a3;
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "mode");
  v7 = -[CAMViewfinderViewController _sanitizedLightingTypeForMode:device:](self, "_sanitizedLightingTypeForMode:device:", v6, objc_msgSend(v5, "device"));
  if (!v6)
  {
    if (-[CAMViewfinderViewController _shouldUsePhotoModePortraitEffectIsBurst:](self, "_shouldUsePhotoModePortraitEffectIsBurst:", v3))
    {
      v8 = -[CAMViewfinderViewController _photoModeEffectFilterType](self, "_photoModeEffectFilterType");
      goto LABEL_8;
    }
    v10 = 0;
    v7 = 0;
LABEL_12:
    v9 = 0;
    goto LABEL_13;
  }
  if (v6 != 7)
  {
    if (v6 == 6)
    {
      v8 = -[CAMViewfinderViewController _portraitModeEffectFilterType](self, "_portraitModeEffectFilterType");
LABEL_8:
      v9 = v8;
      goto LABEL_9;
    }
    v10 = 0;
    goto LABEL_12;
  }
  v9 = 0;
LABEL_9:
  v10 = 1;
LABEL_13:
  +[CAMEffectFilterManager filtersForFilterType:lightingType:applyDepthEffect:](CAMEffectFilterManager, "filtersForFilterType:lightingType:applyDepthEffect:", v9, v7, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

- (id)_originalCaptureFiltersForMode:(int64_t)a3 devicePosition:(int64_t)a4
{
  void *v7;
  void *v8;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v7, "isNaturalLightingAppliedToOriginal")
    && -[CAMViewfinderViewController _wantsLightingControlForMode:devicePosition:](self, "_wantsLightingControlForMode:devicePosition:", a3, a4))
  {
    objc_msgSend(MEMORY[0x1E0D0D078], "portraitOriginalPhotoFilters");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

- (id)_targetFilterScrubberView
{
  void *v3;
  void *v4;
  id v5;
  void *v6;

  -[CAMViewfinderViewController _filterScrubberView](self, "_filterScrubberView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    v5 = v3;
  }
  else
  {
    -[CAMViewfinderViewController _controlDrawer](self, "_controlDrawer");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "filterScrubberView");
    v5 = (id)objc_claimAutoreleasedReturnValue();

  }
  return v5;
}

- (void)_handleFilterButtonTapped:(id)a3
{
  NSObject *v4;
  CAMViewfinderViewController *v5;
  uint64_t v6;
  uint8_t v7[16];

  if (!-[CAMViewfinderViewController _wantsFilterScrubberVisible](self, "_wantsFilterScrubberVisible", a3))
  {
    v5 = self;
    v6 = 1;
LABEL_8:
    -[CAMViewfinderViewController _setWantsFilterScrubberVisible:animated:](v5, "_setWantsFilterScrubberVisible:animated:", v6, 1);
    return;
  }
  if (!-[CAMViewfinderViewController _shouldShowFilterScrubberAfterNextRender](self, "_shouldShowFilterScrubberAfterNextRender"))
  {
    v5 = self;
    v6 = 0;
    goto LABEL_8;
  }
  v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1DB760000, v4, OS_LOG_TYPE_DEFAULT, "Ignoring filter button tap since we are still waiting on thumbnail rendering before animating the filter scrubber into view", v7, 2u);
  }

}

- (void)_setWantsFilterScrubberVisible:(BOOL)a3
{
  -[CAMViewfinderViewController _setWantsFilterScrubberVisible:animated:](self, "_setWantsFilterScrubberVisible:animated:", a3, 0);
}

- (void)_setShowingFilterScrubber:(BOOL)a3
{
  -[CAMViewfinderViewController _setShowingFilterScrubber:animated:](self, "_setShowingFilterScrubber:animated:", a3, 0);
}

- (void)_setShowingFilterScrubber:(BOOL)a3 animated:(BOOL)a4
{
  _BOOL8 v4;
  _BOOL8 v5;
  void *v7;
  void *v8;
  void *v9;
  BOOL v10;
  BOOL v11;
  void *v12;
  void *v13;
  _BOOL4 v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  if (self->__showingFilterScrubber == a3)
    return;
  v4 = a4;
  v5 = a3;
  -[CAMViewfinderViewController _controlDrawer](self, "_controlDrawer");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v7)
  {
    -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = -[CAMViewfinderViewController _shouldHideUtilityBarForGraphConfiguration:](self, "_shouldHideUtilityBarForGraphConfiguration:", v9);
    if (v5)
    {
      v11 = v10;
      -[CAMViewfinderViewController _createFilterScrubberViewIfNecessary](self, "_createFilterScrubberViewIfNecessary");
      -[CAMViewfinderViewController _createFilterNameBadgeIfNecessary](self, "_createFilterNameBadgeIfNecessary");
      -[CAMViewfinderViewController _updateControlsForVisibleFilterScrubberAnimated:](self, "_updateControlsForVisibleFilterScrubberAnimated:", v4);
      -[CAMViewfinderViewController _utilityBar](self, "_utilityBar");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = v12;
      v14 = !v11 && objc_msgSend(v12, "visibleContent") != 0;
      objc_msgSend(v13, "setVisibleContent:animated:", 1, v4 & v14);

    }
    -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = v15;
    if (v4)
      objc_msgSend(v15, "layoutIfNeeded");

    goto LABEL_14;
  }
  -[CAMViewfinderViewController _controlDrawer](self, "_controlDrawer");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (!v5)
  {
    objc_msgSend(v8, "collapseExpandableButtonsAnimated:updatePreferredDrawerControl:", v4, 0);
LABEL_14:

    goto LABEL_15;
  }
  objc_msgSend(v8, "expandControlForType:animated:updatePreferredDrawerControl:", 4, v4, 0);

  -[CAMViewfinderViewController _updateControlsForVisibleFilterScrubberAnimated:](self, "_updateControlsForVisibleFilterScrubberAnimated:", v4);
LABEL_15:
  self->__showingFilterScrubber = v5;
  -[CAMViewfinderViewController _controlDrawer](self, "_controlDrawer");
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v17)
  {
    -[CAMViewfinderViewController _layoutViewfinderForShowingFilterScrubber:animated:](self, "_layoutViewfinderForShowingFilterScrubber:animated:", v5, v4);
    -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _updateBarBackgroundStyleForMode:capturing:animated:](self, "_updateBarBackgroundStyleForMode:capturing:animated:", objc_msgSend(v18, "mode"), 0, 0);

  }
  -[CAMViewfinderViewController _dismissOverlays](self, "_dismissOverlays");
  -[CAMViewfinderViewController updateControlVisibilityAnimated:](self, "updateControlVisibilityAnimated:", v4);
  -[CAMViewfinderViewController _updateEnabledControlsWithReason:](self, "_updateEnabledControlsWithReason:", CFSTR("Filter scrubber actual visibility changed"));
  if (v5)
  {
    -[CAMViewfinderViewController _setShowingPortraitApertureSlider:](self, "_setShowingPortraitApertureSlider:", 0);
    -[CAMViewfinderViewController _setShowingPortraitIntensitySlider:](self, "_setShowingPortraitIntensitySlider:", 0);
  }
}

- (void)_layoutViewfinderForShowingFilterScrubber:(BOOL)a3 animated:(BOOL)a4
{
  _BOOL4 v4;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  _BOOL8 v13;
  void *v14;
  void *v15;
  _QWORD v16[5];
  id v17;
  SEL v18;
  BOOL v19;
  _QWORD v20[4];
  id v21;

  v4 = a4;
  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setNeedsLayout");
  if (v4)
  {
    if (!a3)
    {
      -[CAMViewfinderViewController _setAnimatingFilterScrubberDismissal:](self, "_setAnimatingFilterScrubberDismissal:", 1);
      -[CAMViewfinderViewController _updateBarBackgroundStyleForMode:capturing:animated:](self, "_updateBarBackgroundStyleForMode:capturing:animated:", objc_msgSend(v9, "mode"), 0, 0);
    }
    v10 = (void *)MEMORY[0x1E0DC3F10];
    v11 = MEMORY[0x1E0C809B0];
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = __82__CAMViewfinderViewController__layoutViewfinderForShowingFilterScrubber_animated___block_invoke;
    v20[3] = &unk_1EA328868;
    v21 = v8;
    v16[0] = v11;
    v16[1] = 3221225472;
    v16[2] = __82__CAMViewfinderViewController__layoutViewfinderForShowingFilterScrubber_animated___block_invoke_2;
    v16[3] = &unk_1EA32A9E8;
    v19 = a3;
    v16[4] = self;
    v12 = v9;
    v17 = v12;
    v18 = a2;
    objc_msgSend(v10, "animateWithDuration:delay:options:animations:completion:", 6, v20, v16, 0.25, 0.0);

    -[CAMViewfinderViewController _setView:hidden:delayedInTotalAnimationTime:normalizedFadeoutDuration:](self, "_setView:hidden:delayedInTotalAnimationTime:normalizedFadeoutDuration:", self->__utilityBar, -[CAMViewfinderViewController _shouldHideUtilityBarForGraphConfiguration:](self, "_shouldHideUtilityBarForGraphConfiguration:", v12), 0.25, 0.7);
    -[CAMViewfinderViewController _setView:hidden:delayedInTotalAnimationTime:normalizedFadeoutDuration:](self, "_setView:hidden:delayedInTotalAnimationTime:normalizedFadeoutDuration:", self->__filterNameBadge, -[CAMViewfinderViewController _shouldHideFilterNameBadgeForGraphConfiguration:](self, "_shouldHideFilterNameBadgeForGraphConfiguration:", v12), 0.25, 0.7);
    v13 = -[CAMViewfinderViewController _shouldHideZoomControlForGraphConfiguration:](self, "_shouldHideZoomControlForGraphConfiguration:", v12);
    -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "zoomControl");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _setView:hidden:delayedInTotalAnimationTime:normalizedFadeoutDuration:](self, "_setView:hidden:delayedInTotalAnimationTime:normalizedFadeoutDuration:", v15, v13, 0.25, 0.7);

  }
}

uint64_t __82__CAMViewfinderViewController__layoutViewfinderForShowingFilterScrubber_animated___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
}

void __82__CAMViewfinderViewController__layoutViewfinderForShowingFilterScrubber_animated___block_invoke_2(uint64_t a1)
{
  void *v2;
  id v3;

  if (!*(_BYTE *)(a1 + 56))
  {
    objc_msgSend(*(id *)(a1 + 32), "_setAnimatingFilterScrubberDismissal:", 0);
    objc_msgSend(*(id *)(a1 + 32), "_updateBarBackgroundStyleForMode:capturing:animated:", objc_msgSend(*(id *)(a1 + 40), "mode"), 0, 0);
    v2 = *(void **)(a1 + 32);
    NSStringFromSelector(*(SEL *)(a1 + 48));
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "_clearFilterScrubberLayerContentsIfNotNeededFromCallsite:", v3);

  }
}

- (void)_updateControlsForVisibleFilterScrubberAnimated:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  int v6;
  void *v7;
  id v8;

  v3 = a3;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isLiveFilteringSupported");

  if (v6)
  {
    -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _updateFilterScrubberForGraphConfiguration:](self, "_updateFilterScrubberForGraphConfiguration:", v8);
    -[CAMViewfinderViewController _updateFilterNameBadgeAnimated:](self, "_updateFilterNameBadgeAnimated:", v3);
    -[CAMViewfinderViewController _zoomSlider](self, "_zoomSlider");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "makeInvisibleAnimated:", v3);

    -[CAMViewfinderViewController _resetPortraitLightingToDefaultAnimated:](self, "_resetPortraitLightingToDefaultAnimated:", v3);
  }
}

- (void)_resetPortraitLightingToDefaultAnimated:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  int v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  id v18;

  v3 = a3;
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v18 = (id)objc_claimAutoreleasedReturnValue();
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isLightingControlSupportedForMode:", objc_msgSend(v18, "mode"));

  if (v6)
  {
    -[CAMViewfinderViewController _targetLightingControl](self, "_targetLightingControl");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setSelectedLightingType:", objc_msgSend(v7, "defaultLightingType"));
    v8 = objc_msgSend(v7, "defaultLightingType");
    -[CAMViewfinderViewController _lightingNameBadge](self, "_lightingNameBadge");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setLightingType:", v8);

    v10 = objc_msgSend(v7, "defaultLightingType");
    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "lightingNameBadge");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "setLightingType:", v10);

    v13 = objc_msgSend(v7, "defaultLightingType");
    -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "setLightingType:", v13);

    v15 = objc_msgSend(v18, "mode");
    v16 = -[CAMViewfinderViewController _sanitizedLightingTypeForMode:device:](self, "_sanitizedLightingTypeForMode:device:", v15, objc_msgSend(v18, "device"));
    v17 = +[CAMUserPreferences defaultLightingTypeForMode:](CAMUserPreferences, "defaultLightingTypeForMode:", v15);
    if (v16 != v17)
    {
      -[CAMViewfinderViewController _setLightingType:forMode:](self, "_setLightingType:forMode:", v17, v15);
      -[CAMViewfinderViewController _updateCurrentPreviewFiltersOnCaptureController](self, "_updateCurrentPreviewFiltersOnCaptureController");
      -[CAMViewfinderViewController _updateControlDrawerContentsVisibilityAnimated:](self, "_updateControlDrawerContentsVisibilityAnimated:", v3);
      -[CAMViewfinderViewController _updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:animated:](self, "_updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:animated:", v18, v3);
    }
    -[CAMViewfinderViewController _updatePortraitModeInstructionLabelForCurrentState](self, "_updatePortraitModeInstructionLabelForCurrentState");

  }
}

- (void)_dismissOverlays
{
  void *v3;
  id v4;

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  if (-[CAMViewfinderViewController _shouldShowDescriptionOverlayViewForGraphConfiguration:](self, "_shouldShowDescriptionOverlayViewForGraphConfiguration:"))
  {
    -[CAMViewfinderViewController _embedDescriptionOverlayViewIfNecessaryForGraphConfiguration:](self, "_embedDescriptionOverlayViewIfNecessaryForGraphConfiguration:", v4);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _dismissDescriptionOverlayView:withDuration:](self, "_dismissDescriptionOverlayView:withDuration:", v3, 0.3);

  }
}

- (void)_resetPortraitModeApertureValueIfNeededForGraphConfiguration:(id)a3 zoomFactor:(double)a4
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  void *v10;
  id v11;

  v11 = a3;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v11, "mode");
  if (objc_msgSend(v6, "isDepthEffectApertureSupportedForMode:devicePosition:", v7, objc_msgSend(v11, "devicePosition")))
  {
    v8 = objc_msgSend(v11, "device");
    -[CAMViewfinderViewController _portraitModeApertureValue](self, "_portraitModeApertureValue");
    if (v9 <= 0.0)
    {
      +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "defaultDepthEffectApertureForMode:device:zoomFactor:", v7, v8, a4);
      -[CAMViewfinderViewController _setPortraitModeApertureValue:](self, "_setPortraitModeApertureValue:");

    }
  }

}

- (void)_setShowingPortraitApertureSlider:(BOOL)a3
{
  -[CAMViewfinderViewController _setShowingPortraitApertureSlider:animated:](self, "_setShowingPortraitApertureSlider:animated:", a3, 0);
}

- (void)_setShowingPortraitApertureSlider:(BOOL)a3 animated:(BOOL)a4
{
  _BOOL8 v4;
  _BOOL4 v5;
  void *v7;
  _BOOL4 v8;
  void *v9;
  void *v10;
  _BOOL4 v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD v15[4];
  id v16;

  if (self->__showingPortraitApertureSlider != a3)
  {
    v4 = a4;
    v5 = a3;
    -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = -[CAMViewfinderViewController _shouldHideUtilityBarForGraphConfiguration:](self, "_shouldHideUtilityBarForGraphConfiguration:", v7);
    if (v5)
    {
      -[CAMViewfinderViewController _createPortraitApertureSliderIfNecessary](self, "_createPortraitApertureSliderIfNecessary");
      -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
      -[CAMViewfinderViewController _updatePortraitApertureSliderForGraphConfiguration:zoomFactor:](self, "_updatePortraitApertureSliderForGraphConfiguration:zoomFactor:", v7);
      -[CAMViewfinderViewController _utilityBar](self, "_utilityBar");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = v9;
      v11 = !v8 && objc_msgSend(v9, "visibleContent") != 0;
      objc_msgSend(v10, "setVisibleContent:animated:", 2, v4 & v11);

    }
    -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v12;
    if (v4)
    {
      objc_msgSend(v12, "layoutIfNeeded");
      self->__showingPortraitApertureSlider = v5;
      -[CAMViewfinderViewController _collapseExpandedButtonsAnimated:](self, "_collapseExpandedButtonsAnimated:", 1);
      -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
      -[CAMViewfinderViewController _updatePortraitApertureButtonForGraphConfiguration:zoomFactor:animated:](self, "_updatePortraitApertureButtonForGraphConfiguration:zoomFactor:animated:", v7, 1);
      objc_msgSend(v13, "setNeedsLayout");
      v14 = (void *)MEMORY[0x1E0DC3F10];
      v15[0] = MEMORY[0x1E0C809B0];
      v15[1] = 3221225472;
      v15[2] = __74__CAMViewfinderViewController__setShowingPortraitApertureSlider_animated___block_invoke;
      v15[3] = &unk_1EA328868;
      v16 = v13;
      objc_msgSend(v14, "animateWithDuration:delay:options:animations:completion:", 6, v15, 0, 0.25, 0.0);

      if (v8)
        -[CAMViewfinderViewController _setView:hidden:delayedInTotalAnimationTime:normalizedFadeoutDuration:](self, "_setView:hidden:delayedInTotalAnimationTime:normalizedFadeoutDuration:", self->__utilityBar, -[CAMViewfinderViewController _shouldHideUtilityBarForGraphConfiguration:](self, "_shouldHideUtilityBarForGraphConfiguration:", v7), 0.25, 0.7);
    }
    else
    {
      self->__showingPortraitApertureSlider = v5;
      -[CAMViewfinderViewController _collapseExpandedButtonsAnimated:](self, "_collapseExpandedButtonsAnimated:", 0);
      -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
      -[CAMViewfinderViewController _updatePortraitApertureButtonForGraphConfiguration:zoomFactor:animated:](self, "_updatePortraitApertureButtonForGraphConfiguration:zoomFactor:animated:", v7, 0);
      objc_msgSend(v13, "setNeedsLayout");
    }
    -[CAMViewfinderViewController _dismissOverlays](self, "_dismissOverlays");
    -[CAMViewfinderViewController updateControlVisibilityAnimated:](self, "updateControlVisibilityAnimated:", v4);
    -[CAMViewfinderViewController _updateEnabledControlsWithReason:](self, "_updateEnabledControlsWithReason:", CFSTR("Portrait depth slider visibility changed"));
    if (v5)
    {
      -[CAMViewfinderViewController _setWantsFilterScrubberVisible:](self, "_setWantsFilterScrubberVisible:", 0);
      -[CAMViewfinderViewController _setShowingPortraitIntensitySlider:](self, "_setShowingPortraitIntensitySlider:", 0);
    }

  }
}

uint64_t __74__CAMViewfinderViewController__setShowingPortraitApertureSlider_animated___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
}

- (void)_updatePortraitApertureSliderForGraphConfiguration:(id)a3 zoomFactor:(double)a4
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (**v16)(void *, void *);
  void *v17;
  void *v18;
  void *v19;
  double v20;
  double v21;
  int64_t v22;
  void *v23;
  void *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  _QWORD v33[8];

  v5 = a3;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _portraitApertureSlider](self, "_portraitApertureSlider");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7
    || (-[CAMViewfinderViewController _controlDrawer](self, "_controlDrawer"),
        v8 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v8, "apertureSlider"),
        v7 = (void *)objc_claimAutoreleasedReturnValue(),
        v8,
        v7))
  {
    v9 = objc_msgSend(v5, "device");
    v10 = objc_msgSend(v5, "mode");
    objc_msgSend(v6, "minimumDepthEffectApertureForMode:device:", v10, v9);
    v12 = v11;
    objc_msgSend(v6, "maximumDepthEffectApertureForMode:device:", v10, v9);
    v14 = v13;
    -[CAMViewfinderViewController _lastDefaultApertureValue](self, "_lastDefaultApertureValue");
    v33[0] = MEMORY[0x1E0C809B0];
    v33[1] = 3221225472;
    v33[2] = __93__CAMViewfinderViewController__updatePortraitApertureSliderForGraphConfiguration_zoomFactor___block_invoke;
    v33[3] = &unk_1EA32AA10;
    v33[5] = v12;
    v33[6] = v14;
    v33[4] = self;
    v33[7] = v15;
    v16 = (void (**)(void *, void *))_Block_copy(v33);
    v16[2](v16, v7);
    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "spotlightControlPanel");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "apertureSlider");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v16[2](v16, v19);

    objc_msgSend(v7, "apertureValue");
    v21 = v20;
    v22 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
    if ((unint64_t)(v22 - 2) < 3)
      goto LABEL_6;
    if (v22 == 1)
    {
      objc_msgSend(v7, "removeGradients");
      v27 = 1;
      v26 = 1;
      goto LABEL_13;
    }
    if (!v22)
    {
LABEL_6:
      +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v23, "isCinematicModeSupported"))
      {

LABEL_9:
        objc_msgSend(v7, "setTransparentGradients");
        v26 = 0;
        v27 = 1;
LABEL_13:
        objc_msgSend(v7, "setUseTickMarkLegibilityShadows:", v27);
        objc_msgSend(v7, "setUseTextLegibilityBackgrounds:", v26);
        -[CAMViewfinderViewController _apertureButton](self, "_apertureButton");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "setApertureValue:", v21);
        -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v30, "controlStatusBar");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v31, "apertureIndicator");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v32, "setApertureValue:", v21);

        goto LABEL_14;
      }
      +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = objc_msgSend(v24, "photoModeDepthSuggestionSupported");

      if (v25)
        goto LABEL_9;
      objc_msgSend(MEMORY[0x1E0DC3658], "blackColor");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "setOpaqueGradientsWithColor:", v28);

    }
    v27 = 0;
    v26 = 0;
    goto LABEL_13;
  }
LABEL_14:

}

void __93__CAMViewfinderViewController__updatePortraitApertureSliderForGraphConfiguration_zoomFactor___block_invoke(uint64_t a1, void *a2)
{
  double v3;
  double v4;
  id v5;

  v3 = *(double *)(a1 + 40);
  v4 = *(double *)(a1 + 48);
  v5 = a2;
  objc_msgSend(v5, "setMinimumApertureValueClosestTo:maximumApertureValueClosestTo:", v3, v4);
  objc_msgSend(*(id *)(a1 + 32), "_portraitModeApertureValue");
  objc_msgSend(v5, "setApertureValueClosestTo:");
  objc_msgSend(v5, "setMarkedApertureValueClosestTo:", *(double *)(a1 + 56));

}

- (void)_updatePortraitApertureButtonForGraphConfiguration:(id)a3 zoomFactor:(double)a4 animated:(BOOL)a5
{
  _BOOL8 v5;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  void *v22;
  BOOL v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  v5 = a5;
  v7 = a3;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "mode");
  v9 = objc_msgSend(v7, "device");
  v10 = objc_msgSend(v7, "devicePosition");

  v11 = objc_msgSend(v33, "isDepthEffectApertureSupportedForMode:devicePosition:", v8, v10);
  v12 = v33;
  if (v11)
  {
    objc_msgSend(v33, "minimumDepthEffectApertureForMode:device:", v8, v9);
    v14 = v13;
    objc_msgSend(v33, "maximumDepthEffectApertureForMode:device:", v8, v9);
    v16 = v15;
    -[CAMViewfinderViewController _portraitModeApertureValue](self, "_portraitModeApertureValue");
    v18 = v17;
    -[CAMViewfinderViewController _lastDefaultApertureValue](self, "_lastDefaultApertureValue");
    v20 = v19;
    if (v16 >= v18)
      v21 = v18;
    else
      v21 = v16;
    if (v14 < v21)
      v14 = v21;
    -[CAMViewfinderViewController _apertureButton](self, "_apertureButton");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = -[CAMViewfinderViewController _isShowingPortraitApertureSlider](self, "_isShowingPortraitApertureSlider");
    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "controlDrawer");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    if (v23)
      v26 = 1;
    else
      v26 = objc_msgSend(v24, "isApertureSliderVisible");
    v27 = (vabdd_f64(v20, v14) >= 0.0001) & ~(_DWORD)v26;
    objc_msgSend(v22, "setActive:animated:", v26, v5);
    objc_msgSend(v22, "setShouldShowApertureValue:animated:", v27, v5);
    objc_msgSend(v22, "setApertureValue:", v14);
    objc_msgSend(v24, "controlStatusBar");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "apertureIndicator");
    v29 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v29, "setApertureValue:", v14);
    objc_msgSend(v29, "setShowingValue:animated:", v27, v5);
    objc_msgSend(v25, "apertureButton");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "setOn:", v27);

    objc_msgSend(v24, "controlStatusBar");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "apertureIndicator");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "setOn:", v26);

    v12 = v33;
  }

}

- (void)_apertureSliderDidChangeApertureValue:(id)a3
{
  double v4;
  double v5;
  void *v6;
  double v7;
  void *v8;
  void *v9;
  id v10;

  objc_msgSend(a3, "apertureValue");
  v5 = v4;
  -[CAMViewfinderViewController _handleUserChangedToApertureValue:](self, "_handleUserChangedToApertureValue:");
  -[CAMViewfinderViewController _overlayControls](self, "_overlayControls");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("aperture"));
  v10 = (id)objc_claimAutoreleasedReturnValue();

  *(float *)&v7 = v5;
  objc_msgSend(v10, "updateWithFloatValue:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _overlayServiceConnection](self, "_overlayServiceConnection");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "applyControlUpdate:completion:", v8, &__block_literal_global_894);

}

void __69__CAMViewfinderViewController__apertureSliderDidChangeApertureValue___block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;

  v2 = a2;
  if (v2)
  {
    v3 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      __69__CAMViewfinderViewController__apertureSliderDidChangeApertureValue___block_invoke_cold_1();

  }
}

- (void)_handleUserChangedToApertureValue:(double)a3
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;

  -[CAMViewfinderViewController _setPortraitModeApertureValue:](self, "_setPortraitModeApertureValue:");
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "changeToPortraitAperture:", a3);

  -[CAMViewfinderViewController _apertureButton](self, "_apertureButton");
  v16 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "setApertureValue:", a3);
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "controlStatusBar");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "apertureIndicator");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setApertureValue:", a3);

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updateControlStatusBarContentsVisibilityForGraphConfiguration:animated:](self, "_updateControlStatusBarContentsVisibilityForGraphConfiguration:animated:", v9, 1);

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
  -[CAMViewfinderViewController _updatePortraitApertureSliderForGraphConfiguration:zoomFactor:](self, "_updatePortraitApertureSliderForGraphConfiguration:zoomFactor:", v10);

  -[CAMViewfinderViewController _updateSystemOverlayValues](self, "_updateSystemOverlayValues");
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
  v13 = -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition");
  v14 = -[CAMViewfinderViewController _currentPhotoFormat](self, "_currentPhotoFormat");
  LODWORD(v12) = objc_msgSend(v11, "isDepthSuggestionSupportedForMode:devicePosition:photoFormat:", v12, v13, v14, v15);

  if ((_DWORD)v12)
    -[CAMViewfinderViewController _updateDepthEffectSuggestionEnabled:](self, "_updateDepthEffectSuggestionEnabled:", 1);

}

- (void)_handleApertureButtonTapped:(id)a3
{
  -[CAMViewfinderViewController _setShowingPortraitApertureSlider:animated:](self, "_setShowingPortraitApertureSlider:animated:", -[CAMViewfinderViewController _isShowingPortraitApertureSlider](self, "_isShowingPortraitApertureSlider", a3) ^ 1, 1);
}

- (void)_handleIntensityButtonTapped:(id)a3
{
  -[CAMViewfinderViewController _setShowingPortraitIntensitySlider:animated:](self, "_setShowingPortraitIntensitySlider:animated:", -[CAMViewfinderViewController _isShowingPortraitIntensitySlider](self, "_isShowingPortraitIntensitySlider", a3) ^ 1, 1);
}

- (void)_setShowingPortraitIntensitySlider:(BOOL)a3
{
  -[CAMViewfinderViewController _setShowingPortraitIntensitySlider:animated:](self, "_setShowingPortraitIntensitySlider:animated:", a3, 0);
}

- (void)_setShowingPortraitIntensitySlider:(BOOL)a3 animated:(BOOL)a4
{
  _BOOL8 v4;
  _BOOL4 v5;
  void *v7;
  _BOOL4 v8;
  void *v9;
  void *v10;
  _BOOL4 v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD v15[4];
  id v16;

  if (self->__showingPortraitIntensitySlider != a3)
  {
    v4 = a4;
    v5 = a3;
    -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = -[CAMViewfinderViewController _shouldHideUtilityBarForGraphConfiguration:](self, "_shouldHideUtilityBarForGraphConfiguration:", v7);
    if (v5)
    {
      -[CAMViewfinderViewController _createPortraitIntensitySliderIfNecessary](self, "_createPortraitIntensitySliderIfNecessary");
      -[CAMViewfinderViewController _updatePortraitIntensitySliderForCurrentState](self, "_updatePortraitIntensitySliderForCurrentState");
      -[CAMViewfinderViewController _utilityBar](self, "_utilityBar");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = v9;
      v11 = !v8 && objc_msgSend(v9, "visibleContent") != 0;
      objc_msgSend(v10, "setVisibleContent:animated:", 3, v4 & v11);

    }
    -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v12;
    if (v4)
    {
      objc_msgSend(v12, "layoutIfNeeded");
      self->__showingPortraitIntensitySlider = v5;
      -[CAMViewfinderViewController _collapseExpandedButtonsAnimated:](self, "_collapseExpandedButtonsAnimated:", 1);
      -[CAMViewfinderViewController _updateIntensityButtonForCurrentState](self, "_updateIntensityButtonForCurrentState");
      objc_msgSend(v13, "setNeedsLayout");
      v14 = (void *)MEMORY[0x1E0DC3F10];
      v15[0] = MEMORY[0x1E0C809B0];
      v15[1] = 3221225472;
      v15[2] = __75__CAMViewfinderViewController__setShowingPortraitIntensitySlider_animated___block_invoke;
      v15[3] = &unk_1EA328868;
      v16 = v13;
      objc_msgSend(v14, "animateWithDuration:delay:options:animations:completion:", 6, v15, 0, 0.25, 0.0);

      if (v8)
        -[CAMViewfinderViewController _setView:hidden:delayedInTotalAnimationTime:normalizedFadeoutDuration:](self, "_setView:hidden:delayedInTotalAnimationTime:normalizedFadeoutDuration:", self->__utilityBar, -[CAMViewfinderViewController _shouldHideUtilityBarForGraphConfiguration:](self, "_shouldHideUtilityBarForGraphConfiguration:", v7), 0.25, 0.7);
    }
    else
    {
      self->__showingPortraitIntensitySlider = v5;
      -[CAMViewfinderViewController _collapseExpandedButtonsAnimated:](self, "_collapseExpandedButtonsAnimated:", 0);
      -[CAMViewfinderViewController _updateIntensityButtonForCurrentState](self, "_updateIntensityButtonForCurrentState");
      objc_msgSend(v13, "setNeedsLayout");
    }
    -[CAMViewfinderViewController _dismissOverlays](self, "_dismissOverlays");
    -[CAMViewfinderViewController updateControlVisibilityAnimated:](self, "updateControlVisibilityAnimated:", v4);
    -[CAMViewfinderViewController _updateEnabledControlsWithReason:](self, "_updateEnabledControlsWithReason:", CFSTR("Portrait intensity slider visibility changed"));
    if (v5)
    {
      -[CAMViewfinderViewController _setWantsFilterScrubberVisible:](self, "_setWantsFilterScrubberVisible:", 0);
      -[CAMViewfinderViewController _setShowingPortraitApertureSlider:animated:](self, "_setShowingPortraitApertureSlider:animated:", 0, v4);
    }

  }
}

uint64_t __75__CAMViewfinderViewController__setShowingPortraitIntensitySlider_animated___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
}

- (void)_updatePortraitIntensitySliderForCurrentState
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  -[CAMViewfinderViewController _controlDrawer](self, "_controlDrawer");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "intensitySlider");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v4)
  {
    v6 = v4;
  }
  else
  {
    -[CAMViewfinderViewController _portraitIntensitySlider](self, "_portraitIntensitySlider");
    v6 = (id)objc_claimAutoreleasedReturnValue();
  }
  v10 = v6;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "minimumPortraitEffectIntensity");
  objc_msgSend(v10, "setMinimumValue:");
  objc_msgSend(v7, "defaultPortraitEffectIntensity");
  objc_msgSend(v10, "setDefaultValue:");
  objc_msgSend(v7, "maximumPortraitEffectIntensity");
  objc_msgSend(v10, "setMaximumValue:");
  -[CAMViewfinderViewController _portraitModeIntensityValue](self, "_portraitModeIntensityValue");
  objc_msgSend(v10, "setValue:");
  objc_msgSend(MEMORY[0x1E0DC3658], "clearColor");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setBackgroundColor:", v8);

  -[CAMViewfinderViewController _intensityButton](self, "_intensityButton");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _portraitModeIntensityValue](self, "_portraitModeIntensityValue");
  objc_msgSend(v9, "setIntensityValue:");

}

- (void)_handleIntensitySliderDidChangeValue:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  double v10;
  double v11;
  void *v12;
  id v13;

  v13 = a3;
  -[CAMViewfinderViewController _intensityButton](self, "_intensityButton");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _controlDrawer](self, "_controlDrawer");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "intensitySlider");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v6)
  {
    v8 = v6;
  }
  else
  {
    -[CAMViewfinderViewController _portraitIntensitySlider](self, "_portraitIntensitySlider");
    v8 = (id)objc_claimAutoreleasedReturnValue();
  }
  v9 = v8;

  if (v9 == v13)
  {
    objc_msgSend(v13, "value");
    v11 = v10;
    -[CAMViewfinderViewController _captureController](self, "_captureController");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "changeToPortraitLightingEffectStrength:", v11);

    -[CAMViewfinderViewController _setPortraitModeIntensityValue:](self, "_setPortraitModeIntensityValue:", v11);
    objc_msgSend(v4, "setIntensityValue:", v11);
  }

}

- (void)_updateIntensityButtonForCurrentState
{
  double v3;
  double v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  double v10;
  double v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;

  -[CAMViewfinderViewController _updateTopBarForLightingType:](self, "_updateTopBarForLightingType:", -[CAMViewfinderViewController _portraitModeLightingEffectType](self, "_portraitModeLightingEffectType"));
  -[CAMViewfinderViewController _portraitModeIntensityValue](self, "_portraitModeIntensityValue");
  v4 = v3;
  -[CAMViewfinderViewController _intensityButton](self, "_intensityButton");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setIntensityValue:", v4);

  -[CAMViewfinderViewController _intensityButton](self, "_intensityButton");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setActive:animated:", -[CAMViewfinderViewController _isShowingPortraitIntensitySlider](self, "_isShowingPortraitIntensitySlider"), 1);

  -[CAMViewfinderViewController _controlDrawer](self, "_controlDrawer");
  v17 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isIntensitySliderVisible");

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "defaultPortraitEffectIntensity");
  v11 = vabdd_f64(v4, v10);

  if (v11 > 0.005)
    v12 = v8 ^ 1;
  else
    v12 = 0;
  objc_msgSend(v17, "intensityButton");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setOn:", v12);

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "controlStatusBar");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "intensityIndicator");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "setOn:", v8);

}

- (double)_exposureBiasForMode:(int64_t)a3 trueVideoEnabled:(BOOL)a4
{
  int64_t v4;
  void *v6;
  void *v7;
  void *v8;
  float v9;
  double v10;

  v4 = a3;
  if (a4
    && -[CAMViewfinderViewController _trueVideoDestinationCaptureMode](self, "_trueVideoDestinationCaptureMode") == a3)
  {
    v4 = -[CAMViewfinderViewController _trueVideoSourceCaptureMode](self, "_trueVideoSourceCaptureMode");
  }
  -[CAMViewfinderViewController _exposureBiasesByMode](self, "_exposureBiasesByMode");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "objectForKeyedSubscript:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "floatValue");
  v10 = v9;

  return v10;
}

- (void)_setExposureBias:(double)a3 forMode:(int64_t)a4
{
  void *v6;
  void *v7;
  id v8;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a3);
  v8 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _exposureBiasesByMode](self, "_exposureBiasesByMode");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v8, v7);

}

- (BOOL)_isExposureBiasNonDefault:(double)a3
{
  return fabs(a3) > 0.005;
}

- (void)_updateExposureSliderForCurrentState
{
  void *v3;
  int64_t v4;
  void *v5;
  double v6;
  float v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  _BOOL8 v14;
  void *v15;
  double v16;
  id v17;

  -[CAMViewfinderViewController _controlDrawer](self, "_controlDrawer");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "exposureSlider");
  v17 = (id)objc_claimAutoreleasedReturnValue();

  v4 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _exposureBiasForMode:trueVideoEnabled:](self, "_exposureBiasForMode:trueVideoEnabled:", v4, objc_msgSend(v5, "trueVideoEnabled"));
  v7 = v6;

  objc_msgSend(v17, "setExposureValueClosestTo:", v7);
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "spotlightControlPanel");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "exposureSlider");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setExposureValueClosestTo:", v7);

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "viewportAspectRatio");

  v14 = v12 == 4 || v12 == 1;
  objc_msgSend(v17, "setUseTextLegibilityShadows:", v14);
  -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(float *)&v16 = v7;
  objc_msgSend(v15, "setBaselineExposureBias:", v16);

}

- (void)_handleExposureSliderDidChangeValue:(id)a3
{
  double v4;
  double v5;
  void *v6;
  double v7;
  void *v8;
  void *v9;
  id v10;

  objc_msgSend(a3, "exposureValue");
  v5 = v4;
  -[CAMViewfinderViewController _handleUserChangedToExposureSliderBias:updateSystemOverlayValues:](self, "_handleUserChangedToExposureSliderBias:updateSystemOverlayValues:", 1);
  -[CAMViewfinderViewController _overlayControls](self, "_overlayControls");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("exposure"));
  v10 = (id)objc_claimAutoreleasedReturnValue();

  *(float *)&v7 = v5;
  objc_msgSend(v10, "updateWithFloatValue:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _overlayServiceConnection](self, "_overlayServiceConnection");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "applyControlUpdate:completion:", v8, &__block_literal_global_897);

}

void __67__CAMViewfinderViewController__handleExposureSliderDidChangeValue___block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;

  v2 = a2;
  if (v2)
  {
    v3 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      __67__CAMViewfinderViewController__handleExposureSliderDidChangeValue___block_invoke_cold_1();

  }
}

- (void)_handleUserChangedToExposureSliderBias:(double)a3 updateSystemOverlayValues:(BOOL)a4
{
  _BOOL4 v4;
  double v6;
  void *v7;
  float v8;
  void *v9;
  double v10;
  void *v11;
  void *v12;
  id v13;

  v4 = a4;
  v6 = fmin(fmax(a3, -2.0), 2.0);
  -[CAMViewfinderViewController _setExposureBias:forMode:](self, "_setExposureBias:forMode:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), v6);
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updateControlStatusBarContentsVisibilityForGraphConfiguration:animated:](self, "_updateControlStatusBarContentsVisibilityForGraphConfiguration:animated:", v7, 1);

  -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v6;
  *(float *)&v10 = v8;
  objc_msgSend(v9, "setBaselineExposureBias:", v10);

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "controlStatusBar");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "exposureBiasIndicator");
  v13 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v13, "setExposureBiasValue:", v6);
  -[CAMViewfinderViewController _updateExposureSliderForCurrentState](self, "_updateExposureSliderForCurrentState");
  -[CAMViewfinderViewController _updateExposureButtonForCurrentState](self, "_updateExposureButtonForCurrentState");
  if (v4)
    -[CAMViewfinderViewController _updateSystemOverlayValues](self, "_updateSystemOverlayValues");

}

- (void)_updateExposureButtonForCurrentState
{
  int64_t v3;
  void *v4;
  double v5;
  double v6;
  void *v7;
  void *v8;
  int v9;
  int v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;

  v3 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _exposureBiasForMode:trueVideoEnabled:](self, "_exposureBiasForMode:trueVideoEnabled:", v3, objc_msgSend(v4, "trueVideoEnabled"));
  v6 = v5;

  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v3) = objc_msgSend(v7, "preserveExposure");

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "isExposureSliderVisible");

  LODWORD(v8) = -[CAMViewfinderViewController _isExposureBiasNonDefault:](self, "_isExposureBiasNonDefault:", v6);
  v10 = v9 ^ 1;
  -[CAMViewfinderViewController _controlDrawer](self, "_controlDrawer");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "exposureButton");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setOn:", v8 & (v9 ^ 1));

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "controlStatusBar");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "exposureBiasIndicator");
  v15 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v15, "setExposureBiasValue:", v6);
  objc_msgSend(v15, "setExposureValueVisible:", (v3 | v8) & v10);
  -[CAMViewfinderViewController _shadowClippingValue](self, "_shadowClippingValue");
  objc_msgSend(v15, "setShadowClipping:");
  -[CAMViewfinderViewController _highlightClippingValue](self, "_highlightClippingValue");
  objc_msgSend(v15, "setHighlightClipping:");

}

- (unint64_t)_currentSemanticStyleSupport
{
  void *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  int v10;
  unint64_t v11;
  void *v12;
  int v13;
  unint64_t v14;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "smartStylesSupported");
  v5 = objc_msgSend(v3, "semanticStyleSupportForMode:devicePosition:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"));
  if (v4)
  {
    if (-[CAMViewfinderViewController _wantsLightingControlForMode:devicePosition:](self, "_wantsLightingControlForMode:devicePosition:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"))&& -[CAMViewfinderViewController _sanitizedLightingTypeForMode:device:](self, "_sanitizedLightingTypeForMode:device:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevice](self, "_currentDevice")) != 1)
    {
      v5 &= 0xFFFFFFFFFFFFFFF8;
    }
    v6 = -16;
  }
  else
  {
    v6 = -15;
  }
  if (-[CAMViewfinderViewController _resolvedRAWMode](self, "_resolvedRAWMode") == 1)
    v7 = v6;
  else
    v7 = -1;
  v8 = v7 & v5;
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "isCapturingBurst");

  if (v10)
    v11 = v8 & 0xFFFFFFFFFFFFFFF8;
  else
    v11 = v8;
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "isCapturingCTMVideo");

  if (v13)
    v14 = v11 & 0xFFFFFFFFFFFFFFFDLL;
  else
    v14 = v11;

  return v14;
}

- (id)_semanticStyleForPreview
{
  return -[CAMViewfinderViewController _semanticStyleForPreviewWithSupport:](self, "_semanticStyleForPreviewWithSupport:", -[CAMViewfinderViewController _currentSemanticStyleSupport](self, "_currentSemanticStyleSupport"));
}

- (id)_semanticStyleForPreviewWithSupport:(unint64_t)a3
{
  void *v5;
  void *v6;
  void *v7;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _semanticStyles](self, "_semanticStyles");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "captureStyleForPreviewWithSupport:styles:selectedStyleIndex:smartStyleSystemStyleIndex:", a3, v6, -[CAMViewfinderViewController _selectedSemanticStyleIndex](self, "_selectedSemanticStyleIndex"), -[CAMViewfinderViewController _smartStyleSystemStyleIndex](self, "_smartStyleSystemStyleIndex"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (id)_semanticStyleForCapture
{
  return -[CAMViewfinderViewController _semanticStyleForCaptureWithSupport:](self, "_semanticStyleForCaptureWithSupport:", -[CAMViewfinderViewController _currentSemanticStyleSupport](self, "_currentSemanticStyleSupport"));
}

- (id)_semanticStyleForCaptureWithSupport:(unint64_t)a3
{
  void *v5;
  void *v6;
  void *v7;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _semanticStyles](self, "_semanticStyles");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "captureStyleForCaptureWithSupport:styles:selectedStyleIndex:smartStyleSystemStyleIndex:", a3, v6, -[CAMViewfinderViewController _selectedSemanticStyleIndex](self, "_selectedSemanticStyleIndex"), -[CAMViewfinderViewController _smartStyleSystemStyleIndex](self, "_smartStyleSystemStyleIndex"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (void)_updateSemanticStyleControlsForCurrentStateAnimated:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  char v6;
  void *v7;
  void *v8;
  unint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  int v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;

  v3 = a3;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "smartStylesSupported");

  if ((v6 & 1) == 0)
  {
    -[CAMViewfinderViewController _semanticStyleForCapture](self, "_semanticStyleForCapture");
    v20 = (id)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _controlDrawer](self, "_controlDrawer");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "semanticStyleControl");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setSemanticStyle:animated:", v20, v3);

    v9 = -[CAMViewfinderViewController _selectedSemanticStyleIndex](self, "_selectedSemanticStyleIndex");
    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "semanticStylePicker");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setSelectedStyleIndex:", v9);

    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "isSemanticStyleControlVisible");

    if (v20)
      v14 = objc_msgSend(v20, "isNeutral") ^ 1;
    else
      v14 = 0;
    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "controlStatusBar");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "semanticStyleIndicator");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "setSemanticStyle:animated:", v20, v3);

    objc_msgSend(v7, "semanticStyleButton");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "setSemanticStyle:animated:", v20, v3);

    objc_msgSend(v7, "semanticStyleButton");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "setOn:", v14 & (v13 ^ 1u));

  }
}

- (id)_currentSmartStyle
{
  void *v3;
  int v4;
  void *v5;
  uint64_t v6;
  void *v7;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "smartStylesSupported");

  if (v4)
  {
    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "semanticStyleSupportForMode:devicePosition:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"));

    -[CAMViewfinderViewController _semanticStyleForCaptureWithSupport:](self, "_semanticStyleForCaptureWithSupport:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v7 = 0;
  }
  return v7;
}

- (void)_updateSmartStyleControlsForCurrentStateAnimateSliders:(BOOL)a3 animateOtherControls:(BOOL)a4
{
  _BOOL8 v4;
  _BOOL8 v5;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  void *v11;
  void *v12;
  void *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  void *v22;
  void *v23;
  unint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  char v30;
  void *v31;
  void *v32;
  void *v33;
  int v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  double v40;
  void *v41;
  void *v42;
  void *v43;
  int v44;
  int v45;
  void *v46;
  void *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  int v57;
  int v58;
  unint64_t v59;
  unsigned int v60;
  void *v61;
  void *v62;
  id v63;

  v4 = a4;
  v5 = a3;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "semanticStyleSupportForMode:devicePosition:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"));

  if ((v8 & 9) != 0)
  {
    v59 = v8;
    -[CAMViewfinderViewController _currentSmartStyle](self, "_currentSmartStyle");
    v63 = (id)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _referenceStyleForSmartStyle:](self, "_referenceStyleForSmartStyle:", v63);
    v9 = objc_claimAutoreleasedReturnValue();
    HIDWORD(v56) = objc_msgSend(v63, "isEqualToSmartStyle:", v9);
    v10 = -[CAMViewfinderViewController _sanitizedLightingTypeForMode:device:](self, "_sanitizedLightingTypeForMode:device:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevice](self, "_currentDevice"));
    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v56) = objc_msgSend(v11, "smartStylesSupportedForLightingType:", v10);

    -[CAMViewfinderViewController _controlDrawer](self, "_controlDrawer");
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "smartStyleNameBadge");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "setSmartStyle:", v63);

    +[CAMSmartStyleUtilities slider2DValueForStyle:limitRangeForSystemStyles:](CAMSmartStyleUtilities, "slider2DValueForStyle:limitRangeForSystemStyles:", v63, 0);
    v15 = v14;
    v17 = v16;
    v62 = (void *)v9;
    +[CAMSmartStyleUtilities slider2DValueForStyle:limitRangeForSystemStyles:](CAMSmartStyleUtilities, "slider2DValueForStyle:limitRangeForSystemStyles:", v9, 0);
    v19 = v18;
    v21 = v20;
    v60 = objc_msgSend(MEMORY[0x1E0D0D098], "canCustomizeCastIntensityForCastType:", objc_msgSend(v63, "castType"));
    objc_msgSend(v12, "smartStylePicker");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _semanticStyles](self, "_semanticStyles");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "setNumberOfStyles:", objc_msgSend(v23, "count"));

    objc_msgSend(v22, "setSelectedStyleIndex:animated:", -[CAMViewfinderViewController _selectedSemanticStyleIndex](self, "_selectedSemanticStyleIndex"), 0);
    if (objc_msgSend(v22, "numberOfStyles"))
    {
      v24 = 0;
      do
      {
        if (v24 == -[CAMViewfinderViewController _smartStyleSystemStyleIndex](self, "_smartStyleSystemStyleIndex", v56))
        {
          objc_msgSend(MEMORY[0x1E0DC3870], "systemImageNamed:", CFSTR("dot.square.fill"));
          v25 = (void *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v25 = 0;
        }
        objc_msgSend(v22, "pageControl");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v26, "setIndicatorImage:forPage:", v25, v24);

        ++v24;
      }
      while (v24 < objc_msgSend(v22, "numberOfStyles"));
    }
    objc_msgSend(v12, "smartStyleSlider2D", v56);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "setValue:animated:", v5, v15, v17);

    objc_msgSend(v12, "smartStyleSlider2D");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "setDefaultValue:animated:", 0, v19, v21);

    objc_msgSend(v12, "smartStyleSlider2D");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = objc_opt_respondsToSelector();

    objc_msgSend(v12, "smartStyleSlider2D");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = v31;
    if ((v30 & 1) != 0)
    {
      objc_msgSend(v31, "gradientCast");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      v34 = objc_msgSend(v33, "isEqualToString:", CFSTR("None"));

      if (v34)
      {
        objc_msgSend(v12, "smartStyleSlider2D");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v35, "view");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v36, "layoutIfNeeded");

      }
      +[CAMCaptureConversions PISemanticStyleCastForCEKCastType:](CAMCaptureConversions, "PISemanticStyleCastForCEKCastType:", objc_msgSend(v63, "castType"));
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "smartStyleSlider2D");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v37, "setGradientCast:", v32);
    }
    else
    {
      objc_msgSend(v63, "castType");
      CEKSmartStyleRepresentativeColorForCastType();
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "setBackgroundColor:", v37);
    }
    v38 = v57 ^ 1u;

    objc_msgSend(v12, "smartStyleIntensitySlider");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v63, "castIntensity");
    *(float *)&v40 = v40;
    objc_msgSend(v39, "setValue:animated:", v5, v40);

    if (v60)
    {
      objc_msgSend(v63, "castType");
      CEKSmartStyleIntensitySliderGradientColorsForCastType();
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "smartStyleIntensitySlider");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v42, "setColors:", v41);

    }
    objc_msgSend(v12, "setWantsSmartStyleIntensitySlider:animated:", v60, v5);
    objc_msgSend(v12, "setWantsSmartStyleResetButton:animated:", 0, v4);
    objc_msgSend(v12, "setWantsSmartStylePicker:animated:", (v59 >> 3) & 1, v4);
    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    v44 = objc_msgSend(v43, "smartStyleControlsVisible");

    if (v63)
      v45 = objc_msgSend(v63, "isNeutral") ^ 1;
    else
      v45 = 0;
    objc_msgSend(v61, "smartStyleButton");
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "setSmartStyle:animated:", v63, v4);

    objc_msgSend(v61, "smartStyleButton");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v47, "setShowDisabled:animated:", v38, v4);

    v48 = v45 & (v44 ^ 1u);
    objc_msgSend(v61, "smartStyleButton");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v49, "setOn:", v48);

    objc_msgSend(v12, "controlStatusBar");
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v50, "smartStyleIndicator");
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _updateSmartStyleStatusIndicator:disableSmartStyles:animated:](self, "_updateSmartStyleStatusIndicator:disableSmartStyles:animated:", v51, v38, v4);

    objc_msgSend(v12, "spotlightSmartStyleStatusIndicator");
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _updateSmartStyleStatusIndicator:disableSmartStyles:animated:](self, "_updateSmartStyleStatusIndicator:disableSmartStyles:animated:", v52, v38, v4);

    objc_msgSend(v12, "smartStyleValuesPlatterView");
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v63, "toneBias");
    objc_msgSend(v53, "setTone:");
    objc_msgSend(v63, "colorBias");
    objc_msgSend(v53, "setColor:");
    objc_msgSend(v63, "castIntensity");
    objc_msgSend(v53, "setPalette:");
    objc_msgSend(v53, "setHidePaletteLabel:", v60 ^ 1);
    objc_msgSend(v53, "setHideResetButton:", 0);
    objc_msgSend(v53, "setIsResetButtonEnabled:", v58 ^ 1u);
    v54 = objc_msgSend(v63, "presetType");
    objc_msgSend(v12, "smartStyleCategoryInstructionLabel");
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v55, "setPresetType:", v54);

  }
}

- (void)_updateSmartStyleStatusIndicator:(id)a3 disableSmartStyles:(BOOL)a4 animated:(BOOL)a5
{
  _BOOL8 v5;
  _BOOL8 v6;
  id v8;
  void *v9;
  void *v10;
  int v11;
  _BOOL8 v12;
  id v13;

  v5 = a5;
  v6 = a4;
  v8 = a3;
  if (v8)
  {
    v13 = v8;
    -[CAMViewfinderViewController _currentSmartStyle](self, "_currentSmartStyle");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "smartStyleControlsVisible");

    objc_msgSend(v13, "setSmartStyle:animated:", v9, v5);
    objc_msgSend(v13, "setShowDisabled:animated:", v6, v5);
    objc_msgSend(v13, "setShowValueDot:", v11 ^ 1u);
    v12 = (v11 & 1) != 0
       || -[CAMViewfinderViewController _isAnimatingSmartStyleIndicator](self, "_isAnimatingSmartStyleIndicator");
    objc_msgSend(v13, "setActive:", v12);

    v8 = v13;
  }

}

- (id)_referenceStyleForSmartStyle:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v4 = a3;
  -[CAMViewfinderViewController _semanticStyles](self, "_semanticStyles");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "indexOfObject:", v4);

  if (v6 == 0x7FFFFFFFFFFFFFFFLL
    || v6 != -[CAMViewfinderViewController _smartStyleSystemStyleIndex](self, "_smartStyleSystemStyleIndex"))
  {
    v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D0D098]), "initWithPresetType:", objc_msgSend(v4, "presetType"));
  }
  else
  {
    +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "lastReadSystemStyle");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v8;
}

- (void)_handleSemanticStyleControlDidChangeValue:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  objc_msgSend(a3, "semanticStyle");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _semanticStyleForCapture](self, "_semanticStyleForCapture");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    -[CAMViewfinderViewController _semanticStyles](self, "_semanticStyles");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "replaceObjectAtIndex:withObject:", -[CAMViewfinderViewController _selectedSemanticStyleIndex](self, "_selectedSemanticStyleIndex"), v8);

  }
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "reloadSemanticStyleBadgesDelayIfNeeded:", 1);

  -[CAMViewfinderViewController _updateSemanticStyleControlsForCurrentStateAnimated:](self, "_updateSemanticStyleControlsForCurrentStateAnimated:", 0);
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "requestPreviewUpdateForSemanticStyleAnimated:", 0);

}

- (void)_updatePreviewSemanticStyleAnimated:(BOOL)a3
{
  _BOOL8 v3;
  id v4;

  v3 = a3;
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "requestPreviewUpdateForSemanticStyleAnimated:", v3);

}

- (void)_updateSmartStyleOnSession
{
  void *v3;
  void *v4;
  id v5;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "smartStylesSupported")
    && !-[CAMViewfinderViewController _isReconfiguring](self, "_isReconfiguring")
    && !-[CAMViewfinderViewController _hasInFlightConfiguration](self, "_hasInFlightConfiguration")
    && -[CAMViewfinderViewController _completedInitialConfiguration](self, "_completedInitialConfiguration"))
  {
    -[CAMViewfinderViewController _semanticStyleForPreview](self, "_semanticStyleForPreview");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _captureController](self, "_captureController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "changeToSmartStyle:", v3);

  }
}

- (void)_handleSmartStylePickerSwipe:(id)a3
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v9 = a3;
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "smartStylePicker");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = objc_msgSend(v5, "selectedStyleIndex");
  if (objc_msgSend(v9, "direction") == 1)
    v7 = -1;
  else
    v7 = objc_msgSend(v9, "direction") == 2;
  v8 = v6 + v7;
  if (v8 >= 0 && v8 < (unint64_t)objc_msgSend(v5, "numberOfStyles"))
  {
    objc_msgSend(v5, "setSelectedStyleIndex:animated:", v8, 1);
    -[CAMViewfinderViewController _updateSelectedSmartStyleFromPicker](self, "_updateSelectedSmartStyleFromPicker");
  }

}

- (void)_startPulsingAnimationForSmartStyleIndicator:(id)a3
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  CGAffineTransform v8;
  CGAffineTransform v9;

  v3 = a3;
  memset(&v9, 0, sizeof(v9));
  CGAffineTransformMakeScale(&v9, 1.3, 1.3);
  v6[1] = 3221225472;
  v8 = v9;
  v4 = (void *)MEMORY[0x1E0DC3F10];
  v6[0] = MEMORY[0x1E0C809B0];
  v6[2] = __76__CAMViewfinderViewController__startPulsingAnimationForSmartStyleIndicator___block_invoke;
  v6[3] = &unk_1EA32AA78;
  v7 = v3;
  v5 = v3;
  objc_msgSend(v4, "animateWithDuration:delay:options:animations:completion:", 30, v6, 0, 1.0, 0.8);

}

uint64_t __76__CAMViewfinderViewController__startPulsingAnimationForSmartStyleIndicator___block_invoke(uint64_t a1)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = *(_OWORD *)(a1 + 56);
  v4[0] = *(_OWORD *)(a1 + 40);
  v4[1] = v2;
  v4[2] = *(_OWORD *)(a1 + 72);
  objc_msgSend(*(id *)(a1 + 32), "setTransform:", v4);
  return objc_msgSend(*(id *)(a1 + 32), "setActive:", 1);
}

- (void)_stopPulsingAnimationForSmartStyleIndicator:(id)a3
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;

  v3 = a3;
  v4 = (void *)MEMORY[0x1E0DC3F10];
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __75__CAMViewfinderViewController__stopPulsingAnimationForSmartStyleIndicator___block_invoke;
  v6[3] = &unk_1EA328868;
  v7 = v3;
  v5 = v3;
  objc_msgSend(v4, "animateWithDuration:delay:options:animations:completion:", 6, v6, 0, 0.3, 0.0);

}

uint64_t __75__CAMViewfinderViewController__stopPulsingAnimationForSmartStyleIndicator___block_invoke(uint64_t a1)
{
  void *v2;
  __int128 v3;
  _OWORD v5[3];

  v2 = *(void **)(a1 + 32);
  v3 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  v5[0] = *MEMORY[0x1E0C9BAA8];
  v5[1] = v3;
  v5[2] = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
  objc_msgSend(v2, "setTransform:", v5);
  return objc_msgSend(*(id *)(a1 + 32), "setActive:", 0);
}

- (BOOL)_isAnimatingSmartStyleIndicator
{
  void *v2;
  void *v3;
  void *v4;
  BOOL v5;
  CGAffineTransform v7;
  CGAffineTransform t1;
  CGAffineTransform v9;

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "controlStatusBar");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "smartStyleIndicator");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  memset(&v9, 0, sizeof(v9));
  CGAffineTransformMakeScale(&v9, 1.3, 1.3);
  if (v4)
    objc_msgSend(v4, "transform");
  else
    memset(&t1, 0, sizeof(t1));
  v7 = v9;
  v5 = CGAffineTransformEqualToTransform(&t1, &v7);

  return v5;
}

- (void)_startSmartStyleOnboardingControlRevealAnimation
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  _QWORD v12[4];
  id v13;
  id location;
  _QWORD v15[5];
  _QWORD v16[5];
  _QWORD v17[5];
  _QWORD v18[4];

  v18[3] = *MEMORY[0x1E0C80C00];
  v3 = objc_alloc(MEMORY[0x1E0D0D088]);
  v4 = MEMORY[0x1E0C809B0];
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = __79__CAMViewfinderViewController__startSmartStyleOnboardingControlRevealAnimation__block_invoke;
  v17[3] = &unk_1EA328A68;
  v17[4] = self;
  v5 = (void *)objc_msgSend(v3, "initWithWithIdentifier:duration:updateHandler:completion:", CFSTR("OpenDrawerAfterDelay"), 0, v17, 0.55);
  v18[0] = v5;
  v16[0] = v4;
  v16[1] = 3221225472;
  v16[2] = __79__CAMViewfinderViewController__startSmartStyleOnboardingControlRevealAnimation__block_invoke_2;
  v16[3] = &unk_1EA328A68;
  v16[4] = self;
  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D0D088]), "initWithWithIdentifier:duration:updateHandler:completion:", CFSTR("ExpandStylesControlsAfterDelay"), 0, v16, 0.75);
  v18[1] = v6;
  v15[0] = v4;
  v15[1] = 3221225472;
  v15[2] = __79__CAMViewfinderViewController__startSmartStyleOnboardingControlRevealAnimation__block_invoke_3;
  v15[3] = &unk_1EA328A68;
  v15[4] = self;
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D0D088]), "initWithWithIdentifier:duration:updateHandler:completion:", CFSTR("StartPulsingAfterDelay"), 0, v15, 0.5);
  v18[2] = v7;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v18, 3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_initWeak(&location, self);
  v9 = objc_alloc(MEMORY[0x1E0D0D008]);
  v12[0] = v4;
  v12[1] = 3221225472;
  v12[2] = __79__CAMViewfinderViewController__startSmartStyleOnboardingControlRevealAnimation__block_invoke_4;
  v12[3] = &unk_1EA32A4A0;
  objc_copyWeak(&v13, &location);
  v10 = (void *)objc_msgSend(v9, "initWithAnimations:completionHandler:", v8, v12);
  -[CAMViewfinderViewController set_smartStyleOnboardingControlDrawerAnimationSequence:](self, "set_smartStyleOnboardingControlDrawerAnimationSequence:", v10);

  -[CAMViewfinderViewController _smartStyleOnboardingControlDrawerAnimationSequence](self, "_smartStyleOnboardingControlDrawerAnimationSequence");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "start");

  objc_destroyWeak(&v13);
  objc_destroyWeak(&location);

}

void __79__CAMViewfinderViewController__startSmartStyleOnboardingControlRevealAnimation__block_invoke(uint64_t a1, int a2)
{
  id v2;

  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "_fullscreenViewfinder");
    v2 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setControlDrawerExpanded:forReason:animated:", 1, 10, 1);

  }
}

void __79__CAMViewfinderViewController__startSmartStyleOnboardingControlRevealAnimation__block_invoke_2(uint64_t a1, int a2)
{
  id v2;

  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "_fullscreenViewfinder");
    v2 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "presentControlDrawerModally:forReason:controlType:", 1, 10, 11);

  }
}

void __79__CAMViewfinderViewController__startSmartStyleOnboardingControlRevealAnimation__block_invoke_3(uint64_t a1, int a2)
{
  void *v2;
  id v3;

  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "_fullscreenViewfinder");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "smartStyleSlider2D");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setPulsingValueIndicator:", 1);

  }
}

void __79__CAMViewfinderViewController__startSmartStyleOnboardingControlRevealAnimation__block_invoke_4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "set_smartStyleOnboardingControlDrawerAnimationSequence:", 0);

}

- (void)_stopSmartStyleOnboardingControlRevealAnimation
{
  void *v3;
  void *v4;

  -[CAMViewfinderViewController _smartStyleOnboardingControlDrawerAnimationSequence](self, "_smartStyleOnboardingControlDrawerAnimationSequence");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    -[CAMViewfinderViewController _smartStyleOnboardingControlDrawerAnimationSequence](self, "_smartStyleOnboardingControlDrawerAnimationSequence");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "stopAllAnimations");

    -[CAMViewfinderViewController set_smartStyleOnboardingControlDrawerAnimationSequence:](self, "set_smartStyleOnboardingControlDrawerAnimationSequence:", 0);
  }
}

- (id)_targetLightingControl
{
  void *v3;
  void *v4;

  -[CAMViewfinderViewController _lightingControl](self, "_lightingControl");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v3)
  {
    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "lightingControl");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v3;
}

- (void)_updateLightingUIForGraphConfiguration:(id)a3 animated:(BOOL)a4
{
  _BOOL8 v4;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  int64_t v15;
  uint64_t v16;
  id v17;

  v4 = a4;
  v17 = a3;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v17, "device") - 1;
  if (v7 > 0xA)
    v8 = 0;
  else
    v8 = qword_1DB9A53B8[v7];
  v9 = -[CAMViewfinderViewController _sanitizedLightingTypeForMode:device:](self, "_sanitizedLightingTypeForMode:device:", objc_msgSend(v17, "mode"), objc_msgSend(v17, "device"));
  if (objc_msgSend(v6, "isLightingControlSupportedForMode:", objc_msgSend(v17, "mode")))
  {
    -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setLightingType:", v9);

  }
  if (-[CAMViewfinderViewController _wantsLightingControlForGraphConfiguration:](self, "_wantsLightingControlForGraphConfiguration:", v17))
  {
    -[CAMViewfinderViewController _lightingNameBadge](self, "_lightingNameBadge");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _targetLightingControl](self, "_targetLightingControl");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = v13;
    if (v11)
    {
      if (!v9)
      {
LABEL_10:
        objc_msgSend(v12, "setLightingEffectSet:animated:", objc_msgSend(v6, "supportedEffectSetForDevicePosition:", v8), v4);
        objc_msgSend(v12, "setSelectedLightingType:animated:", v9, v4);
        v15 = -[CAMViewfinderViewController _lightingControlLayoutPositionForGraphConfiguration:](self, "_lightingControlLayoutPositionForGraphConfiguration:", v17);
        if (v15 == 2)
          v16 = 2;
        else
          v16 = v15 == 1;
        objc_msgSend(v12, "setCollapsedSelectionCenterPointEdgeInset:", 44.0);
        objc_msgSend(v12, "setCollapsedControlLocation:animated:", v16, v4);

        goto LABEL_14;
      }
    }
    else
    {
      objc_msgSend(v13, "lightingNameBadge");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v9)
        goto LABEL_10;
    }
    objc_msgSend(v11, "setLightingType:", v9);
    goto LABEL_10;
  }
LABEL_14:

}

- (int64_t)_sanitizedLightingTypeForMode:(int64_t)a3 device:(int64_t)a4
{
  uint64_t v6;
  void *v7;
  int64_t v8;
  unint64_t v9;
  void *v10;
  void *v12;
  char v13;

  if ((unint64_t)(a4 - 1) > 0xA)
    v6 = 0;
  else
    v6 = qword_1DB9A53B8[a4 - 1];
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (-[CAMViewfinderViewController _canUseFilteringForLayoutStyle:](self, "_canUseFilteringForLayoutStyle:", -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle"))&& -[CAMViewfinderViewController _wantsLightingControlForMode:devicePosition:](self, "_wantsLightingControlForMode:devicePosition:", a3, v6))
  {
    v8 = -[CAMViewfinderViewController _portraitModeLightingEffectType](self, "_portraitModeLightingEffectType");
    v9 = objc_msgSend(v7, "supportedEffectSetForDevicePosition:", v6);
    if (v9 > 3)
      v10 = 0;
    else
      v10 = (void *)qword_1EA32AE80[v9];
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v8);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v10, "containsObject:", v12);

    if ((v13 & 1) == 0)
      v8 = +[CAMUserPreferences defaultLightingTypeForMode:](CAMUserPreferences, "defaultLightingTypeForMode:", a3);
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

- (void)_setLightingType:(int64_t)a3 forMode:(int64_t)a4
{
  void *v7;
  int v8;
  NSObject *v9;
  int v10;
  int64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isLightingControlSupportedForMode:", a4);

  if (v8)
  {
    -[CAMViewfinderViewController _setPortraitModeLightingEffectType:](self, "_setPortraitModeLightingEffectType:", a3);
  }
  else if (a3)
  {
    v9 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = 134217984;
      v11 = a4;
      _os_log_impl(&dword_1DB760000, v9, OS_LOG_TYPE_DEFAULT, "Trying to set filter type on unhandled mode %ld", (uint8_t *)&v10, 0xCu);
    }

  }
  -[CAMViewfinderViewController _updateTopBarForLightingType:](self, "_updateTopBarForLightingType:", a3);
}

- (void)_updateTopBarForLightingType:(int64_t)a3
{
  void *v5;
  int v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  BOOL v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD v16[5];
  BOOL v17;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isPortraitEffectIntensitySupportedForLightingType:", a3);

  -[CAMViewfinderViewController _topBar](self, "_topBar");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v6)
  {
    -[CAMViewfinderViewController _intensityButton](self, "_intensityButton");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    -[CAMViewfinderViewController _createIntensityButtonIfNecessary](self, "_createIntensityButtonIfNecessary");
    -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = -[CAMViewfinderViewController _shouldHideIntensityButtonForGraphConfiguration:](self, "_shouldHideIntensityButtonForGraphConfiguration:", v10);

    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __60__CAMViewfinderViewController__updateTopBarForLightingType___block_invoke;
    v16[3] = &unk_1EA328908;
    v16[4] = self;
    v17 = v11;
    objc_msgSend(MEMORY[0x1E0DC3F10], "animateWithDuration:animations:", v16, 0.25);
    -[CAMViewfinderViewController _intensityButton](self, "_intensityButton");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (v9)
    {
      objc_msgSend(v8, "intensityButton");
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      -[CAMViewfinderViewController _intensityButton](self, "_intensityButton");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setIntensityButton:", v14);

      if (v12 == v13)
        goto LABEL_9;
    }
    else
    {
      objc_msgSend(v8, "setIntensityButton:", v12);

    }
  }
  else
  {
    objc_msgSend(v7, "intensityButton");
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v8, "setIntensityButton:", 0);
    -[CAMViewfinderViewController _setShowingPortraitIntensitySlider:animated:](self, "_setShowingPortraitIntensitySlider:animated:", 0, 1);
    if (!v15)
      goto LABEL_9;
  }
  objc_msgSend(v8, "configureForMode:animated:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), 1);
LABEL_9:

}

void __60__CAMViewfinderViewController__updateTopBarForLightingType___block_invoke(uint64_t a1)
{
  double v1;
  id v2;

  if (*(_BYTE *)(a1 + 40))
    v1 = 0.0;
  else
    v1 = 1.0;
  objc_msgSend(*(id *)(a1 + 32), "_intensityButton");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setAlpha:", v1);

}

- (void)_updateLightingControlFadesForGraphConfiguration:(id)a3 animated:(BOOL)a4
{
  _BOOL8 v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  id v12;

  v4 = a4;
  v12 = a3;
  -[CAMViewfinderViewController _targetLightingControl](self, "_targetLightingControl");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v12, "mode");
  if (v7 == 6)
  {
    if (-[CAMViewfinderViewController _wantsZoomControlForGraphConfiguration:](self, "_wantsZoomControlForGraphConfiguration:", v12))
    {
      -[CAMViewfinderViewController _zoomControl](self, "_zoomControl");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v10, "isPlatterExpanded");

      v9 = 0;
      if (v11)
        v8 = 2;
      else
        v8 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 0;
    }
  }
  else
  {
    if (v7)
      v8 = 0;
    else
      v8 = 2;
    if (v7)
      v9 = 0;
    else
      v9 = 2;
  }
  objc_msgSend(v6, "setCollapsedItemFading:animated:", v8, v9, v4);

}

- (void)wheelScrubberViewDidChangeSelectedIndex:(id)a3
{
  id v4;
  void *v5;
  id v6;

  v6 = a3;
  -[CAMViewfinderViewController _targetFilterScrubberView](self, "_targetFilterScrubberView");
  v4 = (id)objc_claimAutoreleasedReturnValue();

  v5 = v6;
  if (v4 == v6)
  {
    -[CAMViewfinderViewController _applySelectedEffectFilterType:](self, "_applySelectedEffectFilterType:", -[CAMViewfinderViewController _filterTypeForItemIndex:](self, "_filterTypeForItemIndex:", objc_msgSend(v6, "selectedIndex")));
    v5 = v6;
  }

}

- (void)_applySelectedEffectFilterType:(int64_t)a3
{
  -[CAMViewfinderViewController _setEffectFilterType:forMode:](self, "_setEffectFilterType:forMode:", a3, -[CAMViewfinderViewController _currentMode](self, "_currentMode"));
  -[CAMViewfinderViewController _updateCurrentPreviewFiltersOnCaptureController](self, "_updateCurrentPreviewFiltersOnCaptureController");
  -[CAMViewfinderViewController _updateFilterButtonOnState](self, "_updateFilterButtonOnState");
  -[CAMViewfinderViewController _updateFilterNameBadgeAnimated:](self, "_updateFilterNameBadgeAnimated:", 1);
}

- (void)wheelScrubberView:(id)a3 updateCell:(id)a4 forItemAtIndex:(unint64_t)a5
{
  id v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  id v20;

  v20 = a4;
  v8 = a3;
  v9 = objc_msgSend(v8, "itemCount") - 1;
  objc_msgSend(MEMORY[0x1E0D0D0B8], "defaultScreenScaleContentSize");
  v11 = v10;
  v13 = v12;
  objc_msgSend(v20, "itemView");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "layer");
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  -[CAMViewfinderViewController _filterScrubberLayerContents](self, "_filterScrubberLayerContents");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "setContents:", v16);

  objc_msgSend(MEMORY[0x1E0C8B178], "contentsRectForFilterAtIndex:thumbnailSize:filterCount:", a5, v9, v11, v13);
  objc_msgSend(v15, "setContentsRect:");
  -[CAMViewfinderViewController _controlDrawer](self, "_controlDrawer");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "filterScrubberView");
  v18 = (id)objc_claimAutoreleasedReturnValue();

  if (v18 == v8)
  {
    +[CAMEffectFilterManager displayNameForType:](CAMEffectFilterManager, "displayNameForType:", -[CAMViewfinderViewController _filterTypeForItemIndex:](self, "_filterTypeForItemIndex:", a5));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "setAccessibilityLabel:", v19);

  }
}

- (BOOL)_isLowLightUpdatingDeferred
{
  void *v3;
  BOOL result;

  -[CAMViewfinderViewController _currentStillImageCaptureMomentSettings](self, "_currentStillImageCaptureMomentSettings");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  result = -[CAMViewfinderViewController _isLowLightCaptureCanceling](self, "_isLowLightCaptureCanceling");
  if (v3)
    return 1;
  return result;
}

- (void)_updateLowLightSlider
{
  void *v3;
  id v4;

  if (!-[CAMViewfinderViewController _isLowLightUpdatingDeferred](self, "_isLowLightUpdatingDeferred"))
  {
    -[CAMViewfinderViewController _controlDrawer](self, "_controlDrawer");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "lowLightSlider");
    v4 = (id)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "setLowLightMode:", -[CAMViewfinderViewController _resolvedLowLightControlMode](self, "_resolvedLowLightControlMode"));
    -[CAMViewfinderViewController _lowLightDurationMapping](self, "_lowLightDurationMapping");
    objc_msgSend(v4, "setDurationMapping:");
    objc_msgSend(v4, "setLowLightActive:", -[CAMViewfinderViewController _isLowLightActiveForCurrentSettings](self, "_isLowLightActiveForCurrentSettings"));

  }
}

- (void)_updateLowLightControlsAnimated:(BOOL)a3
{
  _BOOL8 v3;
  int64_t v5;
  _BOOL8 v6;
  _BOOL8 v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  double v12;
  double v13;
  id v14;

  v3 = a3;
  if (!-[CAMViewfinderViewController _isLowLightUpdatingDeferred](self, "_isLowLightUpdatingDeferred"))
  {
    v5 = -[CAMViewfinderViewController _resolvedLowLightMode](self, "_resolvedLowLightMode");
    v6 = -[CAMViewfinderViewController _resolvedLowLightControlMode](self, "_resolvedLowLightControlMode") == 0;
    v7 = -[CAMViewfinderViewController _isLowLightActiveForCurrentSettings](self, "_isLowLightActiveForCurrentSettings");
    -[CAMViewfinderViewController _controlDrawer](self, "_controlDrawer");
    v14 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "lowLightButton");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setOn:", v7);
    objc_msgSend(v8, "setDisabled:animated:", v6, v3);
    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "controlStatusBar");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "lowLightIndicator");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v11, "setShowingValue:animated:", v7, v3);
    objc_msgSend(v11, "setLowLightMode:", v5);
    objc_msgSend(v11, "setLowLightDisabled:animated:", v6, v3);
    if (v7)
    {
      -[CAMViewfinderViewController _lowLightDurationMapping](self, "_lowLightDurationMapping");
      if (v5 != 1)
        v12 = 0.0;
      if (v5 == 2)
        v12 = v13;
      objc_msgSend(v11, "setDuration:", v12);
    }

  }
}

- (BOOL)_isLowLightActiveForCurrentSettings
{
  return (unint64_t)(-[CAMViewfinderViewController _resolvedLowLightMode](self, "_resolvedLowLightMode") - 1) < 2;
}

- (void)_handleLowLightSliderDidChangeValue:(id)a3
{
  -[CAMViewfinderViewController _handleUserChangedToNightMode:](self, "_handleUserChangedToNightMode:", objc_msgSend(a3, "lowLightMode"));
}

- (void)_handleUserChangedToNightMode:(unint64_t)a3
{
  -[CAMViewfinderViewController _setDesiredLowLightControlMode:](self, "_setDesiredLowLightControlMode:");
  if (a3)
    -[CAMViewfinderViewController _setLowLightConflicts:](self, "_setLowLightConflicts:", 0);
  -[CAMViewfinderViewController _updateResolvedLowLightModeAnimated:](self, "_updateResolvedLowLightModeAnimated:", 1);
}

- (void)_resetLowLightDurationMappingAnimated:(BOOL)a3
{
  _BOOL8 v3;
  id v5;

  v3 = a3;
  -[CAMViewfinderViewController _setLowLightDurationMapping:](self, "_setLowLightDurationMapping:", 1.0, 5.0);
  -[CAMViewfinderViewController _updateLowLightSlider](self, "_updateLowLightSlider");
  -[CAMViewfinderViewController _updateLowLightControlsAnimated:](self, "_updateLowLightControlsAnimated:", v3);
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updateShutterButtonForGraphConfiguration:isCapturing:animated:](self, "_updateShutterButtonForGraphConfiguration:isCapturing:animated:", v5, 0, v3);

}

- (BOOL)_isExpectedLowLightDurationCancelable
{
  int64_t v3;
  double v4;
  double v5;

  v3 = -[CAMViewfinderViewController _resolvedLowLightMode](self, "_resolvedLowLightMode");
  -[CAMViewfinderViewController _lowLightDurationMapping](self, "_lowLightDurationMapping");
  if (v3 != 1)
    v4 = 0.0;
  if (v3 == 2)
    v4 = v5;
  return v4 > 3.5;
}

- (void)_updateResolvedLowLightModeAnimated:(BOOL)a3
{
  _BOOL8 v3;
  uint64_t v5;
  int64_t v6;
  _BOOL4 v7;
  _BOOL4 v8;
  unint64_t v9;
  void *v10;
  int v11;
  int v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;

  v3 = a3;
  if (-[CAMViewfinderViewController _isLowLightUpdatingDeferred](self, "_isLowLightUpdatingDeferred"))
    return;
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v17 = (id)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v17, "lowLightStatus");
  if (v5 == 2)
  {
    v8 = 0;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5 == -1)
      {
        v6 = -[CAMViewfinderViewController _resolvedLowLightMode](self, "_resolvedLowLightMode");
        v7 = v6 != 0;
        v8 = v6 == 0;
      }
      else
      {
        v7 = 0;
        v8 = 1;
      }
      goto LABEL_10;
    }
    v8 = 1;
  }
  v7 = 1;
LABEL_10:
  v9 = +[CAMConflictingControlConfiguration resolveDesiredLowLightControlMode:lowLightConflicts:resolvedFlashMode:](CAMConflictingControlConfiguration, "resolveDesiredLowLightControlMode:lowLightConflicts:resolvedFlashMode:", -[CAMViewfinderViewController _desiredLowLightControlMode](self, "_desiredLowLightControlMode"), -[CAMViewfinderViewController _lowLightConflicts](self, "_lowLightConflicts"), -[CAMViewfinderViewController _resolvedFlashMode](self, "_resolvedFlashMode"));
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "isLowLightSupportedForMode:device:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevice](self, "_currentDevice"));

  v12 = 0;
  if (v11 && v7 && v9)
    v12 = objc_msgSend(v17, "isCapturingBurst") ^ 1;
  if (v9 == 2)
  {
    if (v12)
      v13 = 2;
    else
      v13 = 0;
  }
  else if (v9 == 1 && ((v12 ^ 1 | v8) & 1) == 0)
  {
    v13 = objc_msgSend(v17, "isCapturingLivePhotoVideo") ^ 1;
  }
  else
  {
    v13 = 0;
  }
  if (v13 != -[CAMViewfinderViewController _resolvedLowLightMode](self, "_resolvedLowLightMode"))
  {
    -[CAMViewfinderViewController _captureController](self, "_captureController");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "changeToLowLightMode:", v13);

  }
  -[CAMViewfinderViewController _setResolvedLowLightMode:](self, "_setResolvedLowLightMode:", v13);
  -[CAMViewfinderViewController _setResolvedLowLightControlMode:](self, "_setResolvedLowLightControlMode:", v9);
  -[CAMViewfinderViewController _updateLowLightSlider](self, "_updateLowLightSlider");
  -[CAMViewfinderViewController _updateLowLightControlsAnimated:](self, "_updateLowLightControlsAnimated:", v3);
  -[CAMViewfinderViewController _updateControlsDisabledByLowLightAnimated:](self, "_updateControlsDisabledByLowLightAnimated:", v3);
  -[CAMViewfinderViewController _updatePortraitModeInstructionLabelForCurrentState](self, "_updatePortraitModeInstructionLabelForCurrentState");
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:animated:](self, "_updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:animated:", v15, v3);

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updateShutterButtonForGraphConfiguration:isCapturing:animated:](self, "_updateShutterButtonForGraphConfiguration:isCapturing:animated:", v16, 0, v3);

}

- (int64_t)_lowLightModeForMode:(int64_t)a3 captureMode:(int64_t)a4 device:(int64_t)a5 isBurst:(BOOL)a6
{
  _BOOL4 v6;
  void *v11;
  int v12;
  void *v13;
  int v14;

  v6 = a6;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "isLowLightSupportedForMode:device:", a4, a5);

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v13, "isCapturingVideo") & 1) != 0
    || (objc_msgSend(v13, "isCapturingPanorama") & 1) != 0
    || (objc_msgSend(v13, "isCapturingBurst") & 1) != 0)
  {
    v14 = 1;
  }
  else
  {
    v14 = objc_msgSend(v13, "isCapturingTimelapse");
  }
  if (v12 ^ 1 | v14 | v6)
    a3 = 0;

  return a3;
}

- (void)_updateLowLightConflict:(unint64_t)a3 isConflicting:(BOOL)a4
{
  _BOOL4 v4;
  void *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;

  v4 = a4;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isLowLightSupportedForMode:device:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevice](self, "_currentDevice"));

  if (v8)
  {
    v9 = -[CAMViewfinderViewController _lowLightConflicts](self, "_lowLightConflicts");
    if (v4)
      v10 = v9 | a3;
    else
      v10 = v9 & ~a3;
    -[CAMViewfinderViewController _setLowLightConflicts:](self, "_setLowLightConflicts:", v10);
    -[CAMViewfinderViewController _updateResolvedLowLightModeAnimated:](self, "_updateResolvedLowLightModeAnimated:", 1);
  }
}

- (BOOL)_isLowLightCaptureCanceling
{
  void *v2;
  char v3;

  -[CAMViewfinderViewController _closedViewfinderController](self, "_closedViewfinderController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "hasClosedViewfinderReason:", 13);

  return v3;
}

- (void)_updateControlsDisabledByLowLightAnimated:(BOOL)a3
{
  _BOOL8 v3;

  v3 = a3;
  -[CAMViewfinderViewController _updateFlashButtonForMode:animated:](self, "_updateFlashButtonForMode:animated:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), a3);
  -[CAMViewfinderViewController _updateLivePhotoButtonAnimated:](self, "_updateLivePhotoButtonAnimated:", v3);
  -[CAMViewfinderViewController _updateHDRButtonAnimated:](self, "_updateHDRButtonAnimated:", v3);
}

- (void)_updateAutoMacroButtonAnimated:(BOOL)a3
{
  _BOOL8 v3;
  _BOOL8 v5;
  void *v6;
  id v7;

  v3 = a3;
  v5 = -[CAMViewfinderViewController _desiredMacroMode](self, "_desiredMacroMode") == 1;
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "autoMacroButton");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setActive:animated:", v5, v3);

}

- (void)_handleAutoMacroButtonTapped:(id)a3
{
  -[CAMViewfinderViewController _setDesiredMacroMode:](self, "_setDesiredMacroMode:", -[CAMViewfinderViewController _desiredMacroMode](self, "_desiredMacroMode", a3) == 0);
  -[CAMViewfinderViewController _resolveAndUpdatePotentiallyConflictingControls:animated:](self, "_resolveAndUpdatePotentiallyConflictingControls:animated:", 1, 1);
  -[CAMViewfinderViewController _updateAutoMacroButtonAnimated:](self, "_updateAutoMacroButtonAnimated:", 1);
}

- (void)_updateResolvedMacroModeAndUpdateFallbackPrimaryConstituentDeviceSelection:(BOOL)a3
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int64_t v13;
  uint64_t v14;
  int v15;
  id v16;

  HIDWORD(v14) = a3;
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v16 = (id)objc_claimAutoreleasedReturnValue();
  v4 = -[CAMViewfinderViewController _currentPhotoFormat](self, "_currentPhotoFormat");
  v6 = v5;
  v7 = -[CAMViewfinderViewController _desiredMacroMode](self, "_desiredMacroMode");
  v8 = objc_msgSend(v16, "mode");
  v9 = objc_msgSend(v16, "device");
  v10 = objc_msgSend(v16, "videoConfiguration");
  v11 = objc_msgSend(v16, "videoStabilizationStrength");
  v12 = -[CAMViewfinderViewController _depthEffectEnabledFromSuggestion](self, "_depthEffectEnabledFromSuggestion");
  BYTE1(v14) = objc_msgSend(v16, "enableStereoVideoCapture");
  LOBYTE(v14) = v12;
  v13 = +[CAMConflictingControlConfiguration resolveDesiredMacroMode:forMode:device:videoConfiguration:videoStabilizationStrength:photoFormat:optionalDepthEffectEnabled:spatialVideoEnabled:](CAMConflictingControlConfiguration, "resolveDesiredMacroMode:forMode:device:videoConfiguration:videoStabilizationStrength:photoFormat:optionalDepthEffectEnabled:spatialVideoEnabled:", v7, v8, v9, v10, v11, v4, v6, v14);
  if (v13 != -[CAMViewfinderViewController _resolvedMacroMode](self, "_resolvedMacroMode"))
  {
    -[CAMViewfinderViewController _setResolvedMacroMode:](self, "_setResolvedMacroMode:", v13);
    if (v15)
      -[CAMViewfinderViewController _updateFallbackPrimaryConstituentDeviceSelectionOnCaptureController](self, "_updateFallbackPrimaryConstituentDeviceSelectionOnCaptureController");
  }

}

- (void)_updateFallbackPrimaryConstituentDeviceSelectionOnCaptureController
{
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "fallbackPrimaryConstituentDeviceSelectionForMode:device:videoConfiguration:videoStabilizationStrength:macroMode:spatialVideoEnabled:", objc_msgSend(v6, "mode"), objc_msgSend(v6, "device"), objc_msgSend(v6, "videoConfiguration"), objc_msgSend(v6, "videoStabilizationStrength"), -[CAMViewfinderViewController _resolvedMacroMode](self, "_resolvedMacroMode"), objc_msgSend(v6, "enableStereoVideoCapture"));

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setFallbackPrimaryConstituentDeviceSelection:", v4);

}

- (BOOL)_depthEffectEnabledFromSuggestion
{
  void *v3;
  char v4;

  if (self->__depthEffectEnabledFromSuggestion)
    return 1;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "featureDevelopmentForceDepthEffectInPhotoMode");

  return v4;
}

- (void)_updateDepthEffectSuggestionButtonAnimated:(BOOL)a3
{
  _BOOL8 v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v3 = a3;
  if (-[CAMViewfinderViewController _depthEffectEnabledFromSuggestion](self, "_depthEffectEnabledFromSuggestion"))
  {
    v5 = -[CAMViewfinderViewController _shallowDepthOfFieldStatus](self, "_shallowDepthOfFieldStatus");
    v6 = 1;
    if (((1 << v5) & 0x6202) == 0)
      v6 = 2;
    if (v5 <= 0xE)
      v7 = v6;
    else
      v7 = 2;
  }
  else
  {
    v7 = 0;
  }
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "depthEffectSuggestionButton");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setMode:animated:", v7, v3);

}

- (void)_handleDepthEffectSuggestionButtonTapped:(id)a3
{
  -[CAMViewfinderViewController _updateDepthEffectSuggestionEnabled:](self, "_updateDepthEffectSuggestionEnabled:", -[CAMViewfinderViewController _depthEffectEnabledFromSuggestion](self, "_depthEffectEnabledFromSuggestion", a3) ^ 1);
}

- (void)_updateDepthEffectSuggestionEnabled:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v3 = a3;
  if (-[CAMViewfinderViewController _depthEffectEnabledFromSuggestion](self, "_depthEffectEnabledFromSuggestion") != a3)
  {
    -[CAMViewfinderViewController set_depthEffectEnabledFromSuggestion:](self, "set_depthEffectEnabledFromSuggestion:", v3);
    -[CAMViewfinderViewController _updateDepthEffectSuggestionButtonAnimated:](self, "_updateDepthEffectSuggestionButtonAnimated:", 1);
    -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
    v6 = objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _updateZoomControlLayoutForGraphConfiguration:fromGraphConfiguration:animated:](self, "_updateZoomControlLayoutForGraphConfiguration:fromGraphConfiguration:animated:", v5, v6, 1);

    -[CAMViewfinderViewController _resolveAndUpdatePotentiallyConflictingControls:animated:](self, "_resolveAndUpdatePotentiallyConflictingControls:animated:", 1, 1);
    -[CAMViewfinderViewController _processTextRegionResults](self, "_processTextRegionResults");
    -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _updateLightingUIForGraphConfiguration:animated:](self, "_updateLightingUIForGraphConfiguration:animated:", v7, 0);

    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v6) = objc_msgSend(v8, "portraitInPhotoModeBehavior");

    if ((v6 & 4) != 0)
    {
      -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMViewfinderViewController _configureZoomControlForGraphConfiguration:animated:](self, "_configureZoomControlForGraphConfiguration:animated:", v9, 1);

    }
    if (-[CAMViewfinderViewController _depthEffectEnabledFromSuggestion](self, "_depthEffectEnabledFromSuggestion"))
    {
      -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
      v10 = (id)objc_claimAutoreleasedReturnValue();
      -[CAMViewfinderViewController _startFlashingTransientLightingBadgeIfNecessaryForGraphConfiguration:](self, "_startFlashingTransientLightingBadgeIfNecessaryForGraphConfiguration:", v10);

    }
  }
}

- (BOOL)_shouldUsePhotoModePortraitEffect
{
  void *v3;
  uint64_t v4;

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isCapturingBurst");

  return -[CAMViewfinderViewController _shouldUsePhotoModePortraitEffectIsBurst:](self, "_shouldUsePhotoModePortraitEffectIsBurst:", v4);
}

- (BOOL)_shouldUsePhotoModePortraitEffectIsBurst:(BOOL)a3
{
  _BOOL8 v3;
  _BOOL4 v5;
  BOOL v6;
  void *v7;
  char v8;

  v3 = a3;
  v5 = -[CAMViewfinderViewController _depthEffectEnabledFromSuggestion](self, "_depthEffectEnabledFromSuggestion");
  v6 = -[CAMViewfinderViewController _shouldUseDepthFromSuggestionForCurrentConfigurationIsBurst:](self, "_shouldUseDepthFromSuggestionForCurrentConfigurationIsBurst:", v3);
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isSemanticStyleControlVisible");

  if (v5)
    return v6 & (v8 ^ 1);
  else
    return 0;
}

- (BOOL)_shouldUseDepthFromSuggestionForCurrentConfigurationIsBurst:(BOOL)a3
{
  BOOL v4;

  v4 = -[CAMViewfinderViewController _isDepthSuggestionAllowedForCurrentConfigurationIsBurst:](self, "_isDepthSuggestionAllowedForCurrentConfigurationIsBurst:", a3);
  return v4 & -[CAMViewfinderViewController _isDepthSuggestedOrEnabledForShallowDepthOfFieldStatus:](self, "_isDepthSuggestedOrEnabledForShallowDepthOfFieldStatus:", -[CAMViewfinderViewController _shallowDepthOfFieldStatus](self, "_shallowDepthOfFieldStatus"));
}

- (BOOL)_isDepthSuggestionAllowedForCurrentConfigurationIsBurst:(BOOL)a3
{
  void *v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void *v13;
  int v14;
  void *v15;
  int v16;
  void *v17;
  int v18;
  void *v19;
  int v20;
  int v21;
  int64_t v22;
  BOOL v23;
  BOOL v24;
  BOOL v26;

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "mode");
  v8 = objc_msgSend(v5, "device") - 1;
  v26 = a3;
  if (v8 > 0xA)
    v9 = 0;
  else
    v9 = qword_1DB9A53B8[v8];
  v10 = -[CAMViewfinderViewController _currentPhotoFormat](self, "_currentPhotoFormat");
  v12 = objc_msgSend(v6, "isDepthSuggestionSupportedForMode:devicePosition:photoFormat:", v7, v9, v10, v11);

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "isCapturingVideo");
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "isSuperWideAutoMacroSupportedForMode:device:videoConfiguration:videoStabilizationStrength:spatialVideoEnabled:", objc_msgSend(v5, "mode"), objc_msgSend(v5, "device"), objc_msgSend(v5, "videoConfiguration"), objc_msgSend(v5, "videoStabilizationStrength"), objc_msgSend(v5, "enableStereoVideoCapture"));

  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "isSuperWideAutoMacroControlAllowed");

  if (-[CAMViewfinderViewController _resolvedMacroMode](self, "_resolvedMacroMode") == 1)
  {
    -[CAMViewfinderViewController _captureController](self, "_captureController");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v19, "isAutoMacroSuggested");

    v21 = v20 ^ 1;
  }
  else
  {
    v21 = 1;
  }
  v22 = -[CAMViewfinderViewController _resolvedRAWMode](self, "_resolvedRAWMode");
  if ((v16 & v18) != 1 || v21)
  {
    v24 = -[CAMViewfinderViewController _shouldDisableDepthSuggestionForNightModeForConfiguration:](self, "_shouldDisableDepthSuggestionForNightModeForConfiguration:", v5);
    v23 = 0;
    if (((v12 ^ 1 | v14) & 1) == 0 && !v26)
      v23 = v22 != 1 && !v24;
  }
  else
  {
    v23 = 0;
  }

  return v23;
}

- (BOOL)_shouldDisableDepthSuggestionForNightModeForConfiguration:(id)a3
{
  id v4;
  void *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;

  v4 = a3;
  if (-[CAMViewfinderViewController _isLowLightActiveForCurrentSettings](self, "_isLowLightActiveForCurrentSettings"))
  {
    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "isNightModeWithDepthSupportedForMode:device:", objc_msgSend(v4, "mode"), objc_msgSend(v4, "device"));

    if (!v6)
    {
      LOBYTE(v9) = 1;
      goto LABEL_7;
    }
    v7 = objc_msgSend(v4, "mode");
    v8 = objc_msgSend(v4, "device");
    -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
    if (!-[CAMViewfinderViewController _isNightModePortraitAvailableForMode:device:zoomFactor:](self, "_isNightModePortraitAvailableForMode:device:zoomFactor:", v7, v8))
    {
      v9 = !-[CAMViewfinderViewController _depthEffectEnabledFromSuggestion](self, "_depthEffectEnabledFromSuggestion");
      goto LABEL_7;
    }
  }
  LOBYTE(v9) = 0;
LABEL_7:

  return v9;
}

- (BOOL)_isNightModePortraitAvailableForMode:(int64_t)a3 device:(int64_t)a4 zoomFactor:(double)a5
{
  void *v8;
  double v9;
  BOOL v10;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v8, "isNightModeWithDepthSupportedForMode:device:", a3, a4))
  {
    objc_msgSend(v8, "superWideToWideZoomFactorForDevicePosition:", 0);
    v10 = v9 * 1.1 > a5 && v9 <= a5;
  }
  else
  {
    v10 = 0;
  }

  return v10;
}

- (BOOL)_isDepthSuggestedOrEnabledForShallowDepthOfFieldStatus:(int64_t)a3
{
  _BOOL4 v4;
  unsigned int v5;
  unsigned int v6;
  void *v7;
  char v8;
  void *v9;
  BOOL v10;

  v4 = (unint64_t)a3 < 0xF;
  v5 = v4 & (0x6A02u >> a3);
  v6 = v4 & (0x7A02u >> a3);
  -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v6 & objc_msgSend(v7, "isShowingPointIndicator");

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v6) = objc_msgSend(v9, "portraitInPhotoModeBehavior");

  v10 = (v6 & 1) != 0
     && -[CAMViewfinderViewController _depthEffectEnabledFromSuggestion](self, "_depthEffectEnabledFromSuggestion");
  if ((v8 & 1) != 0)
    return 1;
  else
    return v5 | v10;
}

- (void)_updatePreviewControllerIndicatorStyle
{
  _BOOL8 v3;
  id v4;

  v3 = -[CAMViewfinderViewController _shouldUsePhotoModePortraitEffect](self, "_shouldUsePhotoModePortraitEffect");
  -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setShouldUsePortraitStyleIndicatorsInPhotoMode:", v3);

}

- (BOOL)_shouldRequestDepthDeliveryForBurst:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  uint64_t v6;
  char v8;
  void *v9;
  char v10;

  v3 = a3;
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "mode");
  if (v6 == 9 || v6 == 6)
  {
    v8 = 1;
  }
  else if (v6)
  {
    v8 = 0;
  }
  else
  {
    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v9, "featureDevelopmentForceDepthDataCaptureInPhotoMode");

  }
  v10 = v8 | -[CAMViewfinderViewController _shouldUseDepthFromSuggestionForCurrentConfigurationIsBurst:](self, "_shouldUseDepthFromSuggestionForCurrentConfigurationIsBurst:", v3);

  return v10;
}

- (BOOL)_shouldUseTransientLightingBadgesForGraphConfiguration:(id)a3
{
  void *v3;
  BOOL v4;

  -[CAMViewfinderViewController _targetLightingControl](self, "_targetLightingControl", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "collapsedControlLocation") != 0;

  return v4;
}

- (void)_updateTransientLightingBadgeVisibilityAnimated:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  char v6;
  void *v7;
  _BOOL4 v8;
  void *v9;
  int v10;
  uint64_t v11;
  id v12;

  v3 = a3;
  -[CAMViewfinderViewController _targetLightingControl](self, "_targetLightingControl");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isExpanded");

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = -[CAMViewfinderViewController _shouldUseTransientLightingBadgesForGraphConfiguration:](self, "_shouldUseTransientLightingBadgesForGraphConfiguration:", v7);

  -[CAMViewfinderViewController _timerCache](self, "_timerCache");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "isRunningTimerForKey:", &unk_1EA3B0628);

  if ((v6 & 1) != 0)
    v11 = 0;
  else
    v11 = v8 & (v10 ^ 1u);
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v12 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setLightingNameBadgesHidden:animated:", v11, v3);

}

- (void)_startFlashingTransientLightingBadgeIfNecessaryForGraphConfiguration:(id)a3
{
  if (-[CAMViewfinderViewController _shouldUseTransientLightingBadgesForGraphConfiguration:](self, "_shouldUseTransientLightingBadgesForGraphConfiguration:", a3))
  {
    -[CAMViewfinderViewController _startTimer:](self, "_startTimer:", 4);
    -[CAMViewfinderViewController _updateTransientLightingBadgeVisibilityAnimated:](self, "_updateTransientLightingBadgeVisibilityAnimated:", 1);
  }
}

- (void)_handlePhotoVideoModeSwitchValueChanged:(id)a3
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "photoVideoModeSwitch");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "mode");

  v7 = 9;
  if (v6)
    v7 = 0;
  if (v6 == 1)
    v8 = 8;
  else
    v8 = v7;
  -[CAMViewfinderViewController _setSpatialModeHasVideoSelected:](self, "_setSpatialModeHasVideoSelected:", v6 == 1);
  -[CAMViewfinderViewController _modeDial](self, "_modeDial");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "reloadData");
  objc_msgSend(v9, "setSelectedMode:animated:", v8, 0);
  -[CAMViewfinderViewController _handleUserChangedToMode:](self, "_handleUserChangedToMode:", v8);

}

- (void)_handleSpatialCaptureButtonTapped:(id)a3
{
  NSObject *v4;
  uint8_t v5[16];

  if (-[CAMViewfinderViewController _isActiveZooming](self, "_isActiveZooming", a3))
  {
    v4 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_1DB760000, v4, OS_LOG_TYPE_DEFAULT, "Ignoring action to toggle spatial capture because zooming is active", v5, 2u);
    }

  }
  else if (-[CAMViewfinderViewController _currentMode](self, "_currentMode") == 1)
  {
    -[CAMViewfinderViewController _handleUserChangedSpatialVideoEnabled:](self, "_handleUserChangedSpatialVideoEnabled:", -[CAMViewfinderViewController _isSpatialVideoEnabled](self, "_isSpatialVideoEnabled") ^ 1);
  }
}

- (void)_handleUserChangedSpatialVideoEnabled:(BOOL)a3
{
  _BOOL8 v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;

  -[CAMViewfinderViewController _setSpatialVideoEnabled:](self, "_setSpatialVideoEnabled:", a3);
  v4 = -[CAMViewfinderViewController _isSpatialVideoEnabled](self, "_isSpatialVideoEnabled");
  -[CAMViewfinderViewController _remoteShutterController](self, "_remoteShutterController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setSpatialEnabled:", v4);

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "spatialCaptureButton");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setActive:animated:", -[CAMViewfinderViewController _isSpatialVideoEnabled](self, "_isSpatialVideoEnabled"), 1);

  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "defaultDeviceForModeChange:devicePosition:spatialVideoEnabled:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"), -[CAMViewfinderViewController _isSpatialVideoEnabled](self, "_isSpatialVideoEnabled"));

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v11 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _graphConfigurationForChangeToMode:device:fromGraphConfiguration:](self, "_graphConfigurationForChangeToMode:device:fromGraphConfiguration:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), v9, v11);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _defaultZoomFactorForGraphConfiguration:](self, "_defaultZoomFactorForGraphConfiguration:", v10);
  -[CAMViewfinderViewController _performChangeFromGraphConfiguration:toGraphConfiguration:zoomFactor:deferIfConfigurationInFlight:](self, "_performChangeFromGraphConfiguration:toGraphConfiguration:zoomFactor:deferIfConfigurationInFlight:", v11, v10, 1);

}

- (BOOL)_shouldShowSpatialCaptureControlForGraphConfiguration:(id)a3
{
  id v4;
  void *v5;
  int v6;
  void *v7;
  int v8;
  _BOOL4 v9;
  BOOL v10;
  _BOOL4 v11;

  v4 = a3;
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "spatialVideoControlEnabled");

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isSpatialVideoInVideoModeSupportedForMode:devicePosition:", objc_msgSend(v4, "mode"), objc_msgSend(v4, "devicePosition"));

  v9 = -[CAMViewfinderViewController _trueVideoIsActive](self, "_trueVideoIsActive");
  if (v6)
    v10 = v8 == 0;
  else
    v10 = 1;
  if (v10)
    LOBYTE(v11) = 0;
  else
    v11 = -[CAMViewfinderViewController _shouldShowPreviewOverlayButtonForGraphConfiguration:](self, "_shouldShowPreviewOverlayButtonForGraphConfiguration:", v4)&& !v9;

  return v11;
}

- (BOOL)_isSpatialVideoInVideoModeActiveForMode:(int64_t)a3 devicePosition:(int64_t)a4
{
  void *v7;
  BOOL v8;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(a3) = objc_msgSend(v7, "isSpatialVideoInVideoModeSupportedForMode:devicePosition:", a3, a4);

  v8 = -[CAMViewfinderViewController _trueVideoIsActive](self, "_trueVideoIsActive");
  if ((_DWORD)a3)
    return -[CAMViewfinderViewController _isSpatialVideoEnabled](self, "_isSpatialVideoEnabled") && !v8;
  else
    return 0;
}

- (void)_updateSpatialCaptureUIStateForGraphConfiguration:(id)a3 animated:(BOOL)a4
{
  _BOOL8 v4;
  id v6;
  void *v7;
  _BOOL4 v8;
  uint64_t v9;
  void *v10;
  _BOOL8 v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  int v20;
  void *v21;
  id v22;

  v4 = a4;
  v6 = a3;
  -[CAMViewfinderViewController _motionController](self, "_motionController");
  v22 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = -[CAMViewfinderViewController _shouldShowDescriptionOverlayViewForGraphConfiguration:](self, "_shouldShowDescriptionOverlayViewForGraphConfiguration:", v6);
  v9 = -[CAMViewfinderViewController _spatialModeHasVideoSelected](self, "_spatialModeHasVideoSelected");
  objc_msgSend(v7, "photoVideoModeSwitch");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setMode:animated:", v9, v4);

  v11 = !v8;
  objc_msgSend(v7, "photoVideoModeSwitch");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setEnabled:", v11);

  LODWORD(v12) = -[CAMViewfinderViewController _isSpatialVideoInVideoModeActiveForMode:devicePosition:](self, "_isSpatialVideoInVideoModeActiveForMode:devicePosition:", objc_msgSend(v6, "mode"), objc_msgSend(v6, "devicePosition"));
  v13 = objc_msgSend(v6, "mode");
  v14 = objc_msgSend(v6, "devicePosition");

  v15 = v11 & (v12 | -[CAMViewfinderViewController _isSpatialMode:devicePosition:](self, "_isSpatialMode:devicePosition:", v13, v14));
  objc_msgSend(v7, "spatialCaptureButton");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "setActive:animated:", v15, v4);

  if ((_DWORD)v15 != 1)
  {
    -[CAMViewfinderViewController _motionController](self, "_motionController");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "setForceLandscapeOrientation:", 0);

    goto LABEL_7;
  }
  v17 = -[CAMViewfinderViewController _isShowingCameraRoll](self, "_isShowingCameraRoll") ^ 1;
  -[CAMViewfinderViewController _motionController](self, "_motionController");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "setForceLandscapeOrientation:", v17);

  v19 = objc_msgSend(v22, "deviceOrientation");
  if (v19 > 6)
    goto LABEL_8;
  if (((1 << v19) & 0x79) != 0)
  {
LABEL_7:
    objc_msgSend(v7, "setOrientationInstructionVisible:animated:", 0, v4);
    goto LABEL_8;
  }
  objc_msgSend(v7, "setOrientationInstructionVisible:animated:", 1, v4);
  if (-[CAMViewfinderViewController _trueVideoIsTransitioningToCapture](self, "_trueVideoIsTransitioningToCapture"))
    v20 = 0;
  else
    v20 = !-[CAMViewfinderViewController _trueVideoIsCapturing](self, "_trueVideoIsCapturing");
  objc_msgSend(v7, "setOrientationInstructionBackgroundBlurred:animated:", v20 & ~-[CAMViewfinderViewController isRecording](self, "isRecording"), v4);
LABEL_8:

}

- (BOOL)_shouldShowSpatialCaptureInstructionsForGraphConfiguration:(id)a3
{
  id v4;
  _BOOL4 v5;
  void *v6;
  uint64_t v7;
  char v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  BOOL result;

  v4 = a3;
  v5 = -[CAMViewfinderViewController _isSpatialVideoMode:devicePosition:](self, "_isSpatialVideoMode:devicePosition:", objc_msgSend(v4, "mode"), objc_msgSend(v4, "devicePosition"));
  -[CAMViewfinderViewController _motionController](self, "_motionController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "deviceOrientation");

  v8 = -[CAMViewfinderViewController _stereoCaptureStatus](self, "_stereoCaptureStatus");
  v9 = -[CAMViewfinderViewController _shouldShowDescriptionOverlayViewForGraphConfiguration:](self, "_shouldShowDescriptionOverlayViewForGraphConfiguration:", v4);
  v10 = objc_msgSend(v4, "mode");
  v11 = objc_msgSend(v4, "devicePosition");

  v12 = -[CAMViewfinderViewController _isSpatialMode:devicePosition:](self, "_isSpatialMode:devicePosition:", v10, v11);
  result = 0;
  if ((v5 || v12) && (unint64_t)(v7 - 1) >= 2 && (v8 & 6) != 0 && !v9)
    return !-[CAMViewfinderViewController _isReconfiguring](self, "_isReconfiguring");
  return result;
}

- (BOOL)_isSpatialVideoMode:(int64_t)a3 devicePosition:(int64_t)a4
{
  BOOL v5;
  void *v6;
  char v7;
  char v8;

  v5 = -[CAMViewfinderViewController _isSpatialVideoInVideoModeActiveForMode:devicePosition:](self, "_isSpatialVideoInVideoModeActiveForMode:devicePosition:", a3, a4);
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isSpatialModeSupported");

  if (a3 == 8)
    v8 = v7;
  else
    v8 = 0;
  return v8 | v5;
}

- (BOOL)_isSpatialMode:(int64_t)a3 devicePosition:(int64_t)a4
{
  BOOL result;

  result = -[CAMViewfinderViewController _isSpatialVideoMode:devicePosition:](self, "_isSpatialVideoMode:devicePosition:", a3, a4);
  if (a3 == 9)
    return 1;
  return result;
}

- (BOOL)_shouldShowPhotoVideoModeSwitchForGraphConfiguration:(id)a3
{
  uint64_t v4;
  BOOL v5;
  BOOL v6;
  BOOL result;

  v4 = objc_msgSend(a3, "mode");
  v5 = -[CAMViewfinderViewController _isCapturingFromTimer](self, "_isCapturingFromTimer");
  v6 = -[CAMViewfinderViewController _trueVideoIsActive](self, "_trueVideoIsActive");
  result = 0;
  if (!v5 && (v4 & 0xFFFFFFFFFFFFFFFELL) == 8)
    return !-[CAMViewfinderViewController isRecording](self, "isRecording") && !v6;
  return result;
}

- (void)captureController:(id)a3 didOutputStereoCaptureStatus:(int64_t)a4
{
  void *v5;
  int v6;
  void *v7;
  char v8;
  _BOOL8 v9;
  void *v10;

  -[CAMViewfinderViewController _setStereoCaptureStatus:](self, "_setStereoCaptureStatus:", a4);
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isSpatialVideoInVideoModeSupportedForMode:devicePosition:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"));

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isSpatialModeSupported");

  if ((v8 & 1) != 0 || v6)
  {
    v9 = -[CAMViewfinderViewController _currentMode](self, "_currentMode") == 9;
    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setStereoCaptureStatus:useHoldStillStereoLowLightInstruction:animated:", -[CAMViewfinderViewController _stereoCaptureStatus](self, "_stereoCaptureStatus"), v9, 1);

    if (!-[CAMViewfinderViewController _hasInFlightConfiguration](self, "_hasInFlightConfiguration"))
      -[CAMViewfinderViewController updateControlVisibilityAnimated:](self, "updateControlVisibilityAnimated:", 1);
  }
}

- (void)_setView:(id)a3 hidden:(BOOL)a4 delayedInTotalAnimationTime:(double)a5 normalizedFadeoutDuration:(double)a6
{
  _BOOL4 v8;
  id v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  _QWORD v15[4];
  id v16;
  double v17;

  v8 = a4;
  v9 = a3;
  v10 = v9;
  v11 = (double)!v8;
  if (a5 <= 0.0)
  {
    objc_msgSend(v9, "setAlpha:", (double)!v8);
  }
  else
  {
    v12 = a5 * a6;
    if (v8)
      v13 = 0.0;
    else
      v13 = a5 - v12;
    v14 = (void *)MEMORY[0x1E0DC3F10];
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __101__CAMViewfinderViewController__setView_hidden_delayedInTotalAnimationTime_normalizedFadeoutDuration___block_invoke;
    v15[3] = &unk_1EA328B18;
    v16 = v9;
    v17 = v11;
    objc_msgSend(v14, "animateWithDuration:delay:options:animations:completion:", 0, v15, 0, v12, v13);

  }
}

uint64_t __101__CAMViewfinderViewController__setView_hidden_delayedInTotalAnimationTime_normalizedFadeoutDuration___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", *(double *)(a1 + 40));
}

- (void)_handleSwipeDownGestureRecognizer:(id)a3
{
  _BOOL4 v4;
  _BOOL4 v5;
  _BOOL4 v6;
  void *v7;
  id v8;

  v4 = -[CAMViewfinderViewController _isShowingPortraitApertureSlider](self, "_isShowingPortraitApertureSlider", a3);
  v5 = -[CAMViewfinderViewController _wantsFilterScrubberVisible](self, "_wantsFilterScrubberVisible");
  v6 = -[CAMViewfinderViewController _isShowingPortraitIntensitySlider](self, "_isShowingPortraitIntensitySlider");
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7)
  {
    objc_msgSend(v7, "setControlDrawerExpanded:forReason:animated:", 0, 4, 1);
LABEL_9:
    v7 = v8;
    goto LABEL_10;
  }
  if (v4)
  {
    -[CAMViewfinderViewController _setShowingPortraitApertureSlider:animated:](self, "_setShowingPortraitApertureSlider:animated:", 0, 1);
    goto LABEL_9;
  }
  if (v5)
  {
    -[CAMViewfinderViewController _setWantsFilterScrubberVisible:animated:](self, "_setWantsFilterScrubberVisible:animated:", 0, 1);
    goto LABEL_9;
  }
  if (v6)
  {
    -[CAMViewfinderViewController _setShowingPortraitIntensitySlider:animated:](self, "_setShowingPortraitIntensitySlider:animated:", 0, 1);
    goto LABEL_9;
  }
LABEL_10:

}

- (void)_handleSwipeUpGestureRecognizer:(id)a3
{
  _BOOL4 v4;
  _BOOL4 v5;
  void *v6;
  int v7;
  void *v8;
  id v9;

  v4 = -[CAMViewfinderViewController _wantsFilterScrubberVisible](self, "_wantsFilterScrubberVisible", a3);
  v5 = -[CAMViewfinderViewController _isShowingPortraitApertureSlider](self, "_isShowingPortraitApertureSlider");
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isDepthEffectApertureSupportedForMode:devicePosition:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"));

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    v9 = v8;
    objc_msgSend(v8, "setControlDrawerExpanded:forReason:animated:", 1, 4, 1);
LABEL_7:
    v8 = v9;
    goto LABEL_8;
  }
  if (((v7 ^ 1 | (v4 || v5)) & 1) == 0)
  {
    v9 = 0;
    -[CAMViewfinderViewController _setShowingPortraitApertureSlider:animated:](self, "_setShowingPortraitApertureSlider:animated:", 1, 1);
    goto LABEL_7;
  }
  if (!v4 && !v5)
  {
    v9 = 0;
    -[CAMViewfinderViewController _setWantsFilterScrubberVisible:animated:](self, "_setWantsFilterScrubberVisible:animated:", 1, 1);
    goto LABEL_7;
  }
LABEL_8:

}

- (void)videoThumbnailOutputWillBeginRenderingThumbnailsWithContents:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  int v7;
  id v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 138543362;
    v8 = v4;
    _os_log_impl(&dword_1DB760000, v5, OS_LOG_TYPE_DEFAULT, "Setting thumbnail contents %{public}@", (uint8_t *)&v7, 0xCu);
  }

  -[CAMViewfinderViewController set_filterScrubberLayerContents:](self, "set_filterScrubberLayerContents:", v4);
  -[CAMViewfinderViewController _targetFilterScrubberView](self, "_targetFilterScrubberView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "updateItems");

  if (-[CAMViewfinderViewController _shouldShowFilterScrubberAfterNextRender](self, "_shouldShowFilterScrubberAfterNextRender"))
  {
    -[CAMViewfinderViewController _setShouldShowFilterScrubberAfterNextRender:](self, "_setShouldShowFilterScrubberAfterNextRender:", 0);
    -[CAMViewfinderViewController _setShowingFilterScrubber:animated:](self, "_setShowingFilterScrubber:animated:", 1, 1);
  }

}

- (void)videoThumbnailOutputWillEndRenderingThumbnails
{
  id v3;

  NSStringFromSelector(a2);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _clearFilterScrubberLayerContentsIfNotNeededFromCallsite:](self, "_clearFilterScrubberLayerContentsIfNotNeededFromCallsite:", v3);

}

- (void)_clearFilterScrubberLayerContentsIfNotNeededFromCallsite:(id)a3
{
  id v4;
  _BOOL4 v5;
  _BOOL4 v6;
  _BOOL4 v7;
  _BOOL4 v8;
  void *v9;
  NSObject *v10;
  NSObject *v11;
  __CFString *v12;
  __CFString *v13;
  __CFString *v14;
  __CFString *v15;
  __CFString *v16;
  __CFString *v17;
  int v18;
  id v19;
  __int16 v20;
  __CFString *v21;
  __int16 v22;
  __CFString *v23;
  __int16 v24;
  __CFString *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = -[CAMViewfinderViewController _isShowingFilterScrubber](self, "_isShowingFilterScrubber");
  v6 = -[CAMViewfinderViewController _wantsFilterScrubberVisible](self, "_wantsFilterScrubberVisible");
  v7 = -[CAMViewfinderViewController _isAnimatingFilterScrubberDismissal](self, "_isAnimatingFilterScrubberDismissal");
  v8 = v7;
  if (v5 || v6 || v7)
  {
    v11 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      if (v5)
        v12 = CFSTR("YES");
      else
        v12 = CFSTR("NO");
      v13 = v12;
      if (v6)
        v14 = CFSTR("YES");
      else
        v14 = CFSTR("NO");
      v15 = v14;
      if (v8)
        v16 = CFSTR("YES");
      else
        v16 = CFSTR("NO");
      v17 = v16;
      v18 = 138544130;
      v19 = v4;
      v20 = 2114;
      v21 = v13;
      v22 = 2114;
      v23 = v15;
      v24 = 2114;
      v25 = v17;
      _os_log_impl(&dword_1DB760000, v11, OS_LOG_TYPE_DEFAULT, "Not clearing thumbnail contents from %{public}@ because showingFilterScrubber=%{public}@, wantsFilterScrubberVisible=%{public}@, and animatingFilterScrubberDismissal=%{public}@", (uint8_t *)&v18, 0x2Au);

    }
    goto LABEL_19;
  }
  -[CAMViewfinderViewController _filterScrubberLayerContents](self, "_filterScrubberLayerContents");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    v10 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v18 = 138543362;
      v19 = v4;
      _os_log_impl(&dword_1DB760000, v10, OS_LOG_TYPE_DEFAULT, "Clearing thumbnail contents from %{public}@", (uint8_t *)&v18, 0xCu);
    }

    -[CAMViewfinderViewController set_filterScrubberLayerContents:](self, "set_filterScrubberLayerContents:", 0);
    -[CAMViewfinderViewController _targetFilterScrubberView](self, "_targetFilterScrubberView");
    v11 = objc_claimAutoreleasedReturnValue();
    -[NSObject updateItems](v11, "updateItems");
LABEL_19:

  }
}

- (BOOL)_isZoomAllowedCurrently
{
  CAMViewfinderViewController *v2;
  BOOL v3;
  void *v4;

  v2 = self;
  v3 = -[CAMViewfinderViewController _isPinchToZoomAllowed](self, "_isPinchToZoomAllowed");
  -[CAMViewfinderViewController _currentGraphConfiguration](v2, "_currentGraphConfiguration");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v2) = -[CAMViewfinderViewController _isZoomAllowedForGraphConfiguration:](v2, "_isZoomAllowedForGraphConfiguration:", v4);

  return v3 & v2;
}

- (BOOL)_zoomControlReconfiguresGraphConfiguration:(id)a3
{
  id v4;
  _BOOL4 v5;
  _BOOL4 v6;
  void *v7;
  uint64_t v8;

  v4 = a3;
  v5 = -[CAMViewfinderViewController _isZoomAllowedForGraphConfiguration:](self, "_isZoomAllowedForGraphConfiguration:", v4);
  v6 = -[CAMViewfinderViewController _shouldUseZoomButtonForCameraToggleForGraphConfiguration:](self, "_shouldUseZoomButtonForCameraToggleForGraphConfiguration:", v4)&& !v5;
  if (objc_msgSend(v4, "devicePosition") == 1)
  {
    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "frontZoomBehaviorForCaptureMode:", objc_msgSend(v4, "mode"));

    if ((v8 & 0xFFFFFFFFFFFFFFFELL) == 2)
      LOBYTE(v6) = 1;
  }

  return v6;
}

- (BOOL)_isPinchToZoomAllowed
{
  void *v3;
  int64_t v4;
  int64_t v5;
  int64_t v6;
  void *v7;
  void *v8;
  _BOOL4 v9;
  void *v10;
  BOOL v11;
  BOOL v12;
  void *v13;
  char v14;
  void *v15;
  int v16;
  void *v17;
  int v18;
  void *v19;
  int v20;
  int64_t v21;
  BOOL v22;
  int v24;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
  v5 = -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition");
  v6 = -[CAMViewfinderViewController _currentVideoConfiguration](self, "_currentVideoConfiguration");
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = objc_msgSend(v3, "shouldAllowCameraToggleForMode:devicePosition:videoConfiguration:videoStabilizationStrength:", v4, v5, v6, objc_msgSend(v7, "videoStabilizationStrength"));

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[CAMViewfinderViewController _isZoomAllowedForGraphConfiguration:](self, "_isZoomAllowedForGraphConfiguration:", v8);

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = -[CAMViewfinderViewController _zoomControlReconfiguresGraphConfiguration:](self, "_zoomControlReconfiguresGraphConfiguration:", v10);

  v12 = -[CAMViewfinderViewController _isOutOfDiskSpace](self, "_isOutOfDiskSpace");
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "isCapturingVideo");

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "isCapturingBurst");

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "isCapturingPanorama");

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v19, "isCapturingTimelapse");

  v21 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
  v22 = 0;
  if (!v12 && (((v9 | v24) ^ 1 | v16 | v18 | v20) & 1) == 0 && v21 != 2)
    v22 = v14 & v11 ^ 1;

  return v22;
}

- (double)_defaultZoomFactorForGraphConfiguration:(id)a3
{
  id v4;
  void *v5;
  double v6;
  double v7;

  v4 = a3;
  -[CAMViewfinderViewController _motionController](self, "_motionController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _defaultZoomFactorForGraphConfiguration:captureOrientation:](self, "_defaultZoomFactorForGraphConfiguration:captureOrientation:", v4, objc_msgSend(v5, "captureOrientation"));
  v7 = v6;

  return v7;
}

- (BOOL)_shouldEmulateAggregateCameraZoomForGraphConfiguration:(id)a3
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  v3 = a3;
  v4 = objc_msgSend(v3, "mode");
  v5 = objc_msgSend(v3, "device");
  v6 = objc_msgSend(v3, "videoConfiguration");
  v7 = +[CAMZoomControlUtilities shouldEmulateTripleCameraZoomForMode:device:videoConfiguration:videoStabilizationStrength:](CAMZoomControlUtilities, "shouldEmulateTripleCameraZoomForMode:device:videoConfiguration:videoStabilizationStrength:", v4, v5, v6, objc_msgSend(v3, "videoStabilizationStrength"));
  v8 = objc_msgSend(v3, "videoStabilizationStrength");

  return v7 | +[CAMZoomControlUtilities shouldEmulateWideDualCameraZoomForMode:device:videoConfiguration:videoStabilizationStrength:](CAMZoomControlUtilities, "shouldEmulateWideDualCameraZoomForMode:device:videoConfiguration:videoStabilizationStrength:", v4, v5, v6, v8);
}

- (void)_limitZoomRangeForRecordingIfNecessary
{
  void *v3;
  _BOOL4 v4;
  void *v5;
  double v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  void *v11;
  double v12;
  double v13;
  void *v14;
  double v15;
  void *v16;
  int v17;
  double v18;
  double v19;
  double v20;
  int64_t v21;
  int64_t v22;
  int64_t v23;
  void *v24;
  double v25;
  double v26;
  double v27;
  id v28;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v28 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = -[CAMViewfinderViewController _shouldEmulateAggregateCameraZoomForGraphConfiguration:](self, "_shouldEmulateAggregateCameraZoomForGraphConfiguration:", v3);

  if (v4)
  {
    -[CAMViewfinderViewController _zoomControl](self, "_zoomControl");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "minAvailableZoomFactor");
    if (v6 < 1.0)
      objc_msgSend(v5, "setMinAvailableZoomFactor:", 1.0);

  }
  v7 = -[CAMViewfinderViewController _currentDevice](self, "_currentDevice");
  if (v7 <= 0xB)
  {
    if (((1 << v7) & 0xF2B) != 0)
    {
      v8 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
      v9 = -[CAMViewfinderViewController _currentDevice](self, "_currentDevice");
      v10 = -[CAMViewfinderViewController _currentVideoConfiguration](self, "_currentVideoConfiguration");
      -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "maximumZoomFactorForMode:device:videoConfiguration:videoStabilizationStrength:", v8, v9, v10, objc_msgSend(v11, "videoStabilizationStrength"));
      v13 = v12;

    }
    else
    {
      if (((1 << v7) & 0xC0) != 0)
      {
        +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = objc_msgSend(v16, "shouldDisableCameraSwitchingDuringVideoRecordingForMode:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"));

        if (!v17)
          goto LABEL_12;
        objc_msgSend(v28, "wideDualCameraSwitchOverZoomFactorForDevicePosition:", 0);
        v19 = v18;
        -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
        v13 = 6.0;
        if (v20 >= v19)
          goto LABEL_12;
        goto LABEL_9;
      }
      if (v7 != 2)
        goto LABEL_12;
      v21 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
      v22 = -[CAMViewfinderViewController _currentDevice](self, "_currentDevice");
      v23 = -[CAMViewfinderViewController _currentVideoConfiguration](self, "_currentVideoConfiguration");
      -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "maximumZoomFactorForMode:device:videoConfiguration:videoStabilizationStrength:", v21, v22, v23, objc_msgSend(v24, "videoStabilizationStrength"));
      v13 = v25;

      if (objc_msgSend(v28, "isQuadraWideBinningReconfigurationSupportedForMode:devicePosition:videoConfiguration:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"), -[CAMViewfinderViewController _currentVideoConfiguration](self, "_currentVideoConfiguration")))
      {
        objc_msgSend(v28, "quadraWideRelativeZoomFactor");
        v13 = v13 * v26;
      }
      else if (objc_msgSend(v28, "isBackTelephotoSupported"))
      {
        objc_msgSend(v28, "wideToTelephotoZoomFactorForDevicePosition:", 0);
        if (v27 > v13)
          v13 = v27;
      }
    }
    if (v13 <= 0.0)
      goto LABEL_12;
LABEL_9:
    -[CAMViewfinderViewController _zoomControl](self, "_zoomControl");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "maxAvailableZoomFactor");
    if (v15 > v13)
      objc_msgSend(v14, "setMaxAvailableZoomFactor:", v13);

  }
LABEL_12:

}

- (void)_restoreZoomRangeAfterRecordingIfNecessary
{
  void *v3;
  _BOOL4 v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  id v11;

  -[CAMViewfinderViewController _zoomControl](self, "_zoomControl");
  v11 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = -[CAMViewfinderViewController _shouldEmulateAggregateCameraZoomForGraphConfiguration:](self, "_shouldEmulateAggregateCameraZoomForGraphConfiguration:", v3);

  if (v4)
  {
    objc_msgSend(v11, "minAvailableZoomFactor");
    v6 = v5;
    objc_msgSend(v11, "minimumZoomFactor");
    if (v6 > v7)
    {
      objc_msgSend(v11, "minimumZoomFactor");
      objc_msgSend(v11, "setMinAvailableZoomFactor:");
    }
    -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
    -[CAMViewfinderViewController _changeToZoomFactor:rampDuration:zoomRampTuning:shouldAnimate:](self, "_changeToZoomFactor:rampDuration:zoomRampTuning:shouldAnimate:", 0, 0);
  }
  objc_msgSend(v11, "maxAvailableZoomFactor");
  v9 = v8;
  objc_msgSend(v11, "maximumZoomFactor");
  if (v9 < v10)
  {
    objc_msgSend(v11, "maximumZoomFactor");
    objc_msgSend(v11, "setMaxAvailableZoomFactor:");
  }

}

- (void)_updateZoomButtonSymbolForMode:(int64_t)a3 device:(int64_t)a4 videoConfiguration:(int64_t)a5 zoomFactor:(double)a6 videoStabilizationStrength:(int64_t)a7 animated:(BOOL)a8
{
  _BOOL8 v8;
  void *v15;
  void *v16;
  unint64_t v17;
  void *v18;
  BOOL v19;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;

  v8 = a8;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v15, "resolvedDeviceForDesiredDevice:mode:videoConfiguration:videoStabilizationStrength:spatialVideoEnabled:", a4, a3, a5, a7, objc_msgSend(v16, "enableStereoVideoCapture"));

  -[CAMViewfinderViewController _zoomControl](self, "_zoomControl");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = v17 <= 0xB && ((0xFDu >> v17) & 1) == 0;
  if (v19 && v18 != 0)
  {
    v24 = v18;
    v19 = objc_msgSend(v18, "zoomButtonContentType") == 1;
    v18 = v24;
    if (v19)
    {
      v21 = objc_msgSend(v24, "zoomButtonSymbol");
      +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = objc_msgSend(v22, "frontZoomBehaviorForCaptureMode:", a3);

      if ((unint64_t)(v23 - 1) >= 2)
      {
        if (v23 == 3)
          v21 = v17 != 10;
      }
      else
      {
        v21 = fabs(a6 + -1.0) >= 0.001;
      }
      objc_msgSend(v24, "setZoomButtonSymbol:animated:", v21, v8);
      v18 = v24;
    }
  }

}

- (void)captureController:(id)a3 didChangePreviewZoomPIPRect:(CGRect)a4
{
  double height;
  double width;
  double y;
  double x;
  id v8;

  height = a4.size.height;
  width = a4.size.width;
  y = a4.origin.y;
  x = a4.origin.x;
  -[CAMViewfinderViewController _previewViewController](self, "_previewViewController", a3);
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setNormalizedZoomPIPRect:", x, y, width, height);

}

- (void)_changeToZoomFactor:(double)a3 rampDuration:(double)a4 zoomRampTuning:(int64_t)a5 shouldAnimate:(BOOL)a6
{
  -[CAMViewfinderViewController _changeToZoomFactor:rampDuration:zoomRampTuning:shouldAnimate:updateOverlay:](self, "_changeToZoomFactor:rampDuration:zoomRampTuning:shouldAnimate:updateOverlay:", a5, a6, 1, a3, a4);
}

- (void)_changeToZoomFactor:(double)a3 rampDuration:(double)a4 zoomRampTuning:(int64_t)a5 shouldAnimate:(BOOL)a6 updateOverlay:(BOOL)a7
{
  _BOOL4 v7;
  _BOOL8 v8;
  int64_t v13;
  void *v14;
  int v15;
  void *v16;
  _BOOL4 v17;
  void *v18;
  char v19;
  int64_t v20;
  void *v21;
  int64_t v22;
  _BOOL4 v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  int64_t v28;
  void *v29;
  _BOOL8 v30;
  int64_t v31;
  double v32;
  void *v33;
  void *v34;
  NSObject *v35;
  CUCaptureController *captureController;
  double v37;
  double v38;
  double v39;
  CUCaptureController *v40;
  void *v41;
  void *v42;
  void *v43;
  char v44;
  void *v45;
  void *v46;
  double v47;
  void *v48;
  void *v49;
  int64_t v50;
  uint8_t buf[4];
  double v52;
  uint64_t v53;

  v7 = a7;
  v8 = a6;
  v53 = *MEMORY[0x1E0C80C00];
  v13 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
  if (v13 == 6)
  {
    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "continuousZoomSupportedForPortraitMode");

    if (!v15)
      return;
  }
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = -[CAMViewfinderViewController _shouldEmulateAggregateCameraZoomForGraphConfiguration:](self, "_shouldEmulateAggregateCameraZoomForGraphConfiguration:", v16);

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend(v18, "isCapturingVideo");

  if (v17 && (v19 & 1) == 0)
  {
    v20 = -[CAMViewfinderViewController _currentDevice](self, "_currentDevice");
    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = -[CAMViewfinderViewController _currentVideoConfiguration](self, "_currentVideoConfiguration");
    -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
    v50 = a5;
    v23 = v7;
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = objc_msgSend(v24, "videoStabilizationStrength");
    -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = objc_msgSend(v21, "resolvedDeviceForDesiredDevice:mode:videoConfiguration:videoStabilizationStrength:spatialVideoEnabled:", v20, v13, v22, v25, objc_msgSend(v26, "enableStereoVideoCapture"));

    v28 = -[CAMViewfinderViewController _currentVideoConfiguration](self, "_currentVideoConfiguration");
    -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = +[CAMZoomControlUtilities shouldApplyContinuousZoomForMode:device:videoConfiguration:videoStabilizationStrength:zoomFactors:displayZoomFactors:](CAMZoomControlUtilities, "shouldApplyContinuousZoomForMode:device:videoConfiguration:videoStabilizationStrength:zoomFactors:displayZoomFactors:", v13, v27, v28, objc_msgSend(v29, "videoStabilizationStrength"), 0, 0);

    v31 = +[CAMZoomControlUtilities deviceForEmulatingZoomFactor:fromDevice:mode:continuousZoomSupported:](CAMZoomControlUtilities, "deviceForEmulatingZoomFactor:fromDevice:mode:continuousZoomSupported:", v27, v13, v30, a3);
    v7 = v23;
    a5 = v50;
    +[CAMZoomControlUtilities zoomScaleFromDevice:toDevice:](CAMZoomControlUtilities, "zoomScaleFromDevice:toDevice:", v27, v31);
    if (v31 != v27)
    {
      v37 = v32;
      -[CAMViewfinderViewController _videoZoomFactorAtPinchStart](self, "_videoZoomFactorAtPinchStart");
      -[CAMViewfinderViewController _setVideoZoomFactorAtPinchStart:](self, "_setVideoZoomFactorAtPinchStart:", v37 * v38);
      -[CAMViewfinderViewController _videoZoomFactorAtDynamicShutterStart](self, "_videoZoomFactorAtDynamicShutterStart");
      -[CAMViewfinderViewController _setVideoZoomFactorAtDynamicShutterStart:](self, "_setVideoZoomFactorAtDynamicShutterStart:", v37 * v39);
      -[CAMViewfinderViewController _setReconfiguringForZoomChange:](self, "_setReconfiguringForZoomChange:", 1);
      -[CAMViewfinderViewController _handleUserChangedToMode:device:zoomFactor:](self, "_handleUserChangedToMode:device:zoomFactor:", v13, v31, v37 * a3);
      return;
    }
  }
  -[CAMViewfinderViewController _setCachedVideoZoomFactor:](self, "_setCachedVideoZoomFactor:", a3);
  -[CAMViewfinderViewController _updateControlsRelatedToDepthSuggestionAnimated:](self, "_updateControlsRelatedToDepthSuggestionAnimated:", v8);
  -[CAMViewfinderViewController _updateZoomUIWithZoomFactor:animated:](self, "_updateZoomUIWithZoomFactor:animated:", v8, a3);
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updateDepthEffectApertureForGraphConfiguration:fromGraphConfiguration:zoomFactor:](self, "_updateDepthEffectApertureForGraphConfiguration:fromGraphConfiguration:zoomFactor:", v33, v34, a3);

  if (-[CAMViewfinderViewController _isReconfiguringForZoomChange](self, "_isReconfiguringForZoomChange"))
  {
    v35 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v52 = a3;
      _os_log_impl(&dword_1DB760000, v35, OS_LOG_TYPE_DEFAULT, "Ignoring zoom change to %.3f during reconfiguration", buf, 0xCu);
    }
    goto LABEL_12;
  }
  if (a4 <= 0.0 && !a5)
  {
    captureController = self->__captureController;
    -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
    v35 = objc_claimAutoreleasedReturnValue();
    -[CUCaptureController changeToVideoZoomFactor:graphConfiguration:](captureController, "changeToVideoZoomFactor:graphConfiguration:", v35, a3);
LABEL_12:

    goto LABEL_15;
  }
  -[CAMViewfinderViewController _setShouldIgnoreZoomFactorKVOForRamping:](self, "_setShouldIgnoreZoomFactorKVOForRamping:", 1);
  v40 = self->__captureController;
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  -[CUCaptureController startRampToVideoZoomFactor:withDuration:zoomRampTuning:graphConfiguration:](v40, "startRampToVideoZoomFactor:withDuration:zoomRampTuning:graphConfiguration:", a5, v41, a3, a4);

LABEL_15:
  if (v13 == 6 && !-[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"))
  {
    +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v42, "setPortraitModeRearDevice:", -[CAMViewfinderViewController _currentDevice](self, "_currentDevice"));
    -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
    objc_msgSend(v42, "setPortraitModeRearZoomValue:");

  }
  if (v7)
  {
    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    v44 = objc_msgSend(v43, "allowHalfPressSimulation");

    if ((v44 & 1) == 0)
    {
      -[CAMViewfinderViewController _overlayControls](self, "_overlayControls");
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v45, "objectForKeyedSubscript:", CFSTR("zoom"));
      v46 = (void *)objc_claimAutoreleasedReturnValue();

      *(float *)&v47 = a3;
      objc_msgSend(v46, "updateWithFloatValue:", v47);
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMViewfinderViewController _overlayServiceConnection](self, "_overlayServiceConnection");
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v49, "applyControlUpdate:completion:", v48, &__block_literal_global_915);

    }
  }
}

void __107__CAMViewfinderViewController__changeToZoomFactor_rampDuration_zoomRampTuning_shouldAnimate_updateOverlay___block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;

  v2 = a2;
  if (v2)
  {
    v3 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      __107__CAMViewfinderViewController__changeToZoomFactor_rampDuration_zoomRampTuning_shouldAnimate_updateOverlay___block_invoke_cold_1();

  }
}

- (void)_resetZoom
{
  void *v3;
  int64_t v4;
  int64_t v5;
  int64_t v6;
  void *v7;
  void *v8;
  double v9;
  double v10;
  id v11;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
  v5 = -[CAMViewfinderViewController _currentDevice](self, "_currentDevice");
  v6 = -[CAMViewfinderViewController _currentVideoConfiguration](self, "_currentVideoConfiguration");
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v4) = objc_msgSend(v3, "isZoomAllowedForMode:device:videoConfiguration:videoStabilizationStrength:", v4, v5, v6, objc_msgSend(v7, "videoStabilizationStrength"));

  if ((_DWORD)v4)
  {
    -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
    v11 = (id)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _motionController](self, "_motionController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _defaultZoomFactorForGraphConfiguration:captureOrientation:](self, "_defaultZoomFactorForGraphConfiguration:captureOrientation:", v11, objc_msgSend(v8, "captureOrientation"));
    v10 = v9;

    -[CAMViewfinderViewController _changeToZoomFactor:rampDuration:zoomRampTuning:shouldAnimate:](self, "_changeToZoomFactor:rampDuration:zoomRampTuning:shouldAnimate:", 0, 0, v10, 0.0);
    -[CAMViewfinderViewController _setLastZoomInteractionType:](self, "_setLastZoomInteractionType:", 0);

  }
}

- (double)_defaultZoomFactorForGraphConfiguration:(id)a3 captureOrientation:(int64_t)a4
{
  id v6;
  void *v7;
  double v8;
  double v9;

  v6 = a3;
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "defaultZoomFactorForGraphConfiguration:captureOrientation:outputToExternalStorage:", v6, a4, -[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled"));
  v9 = v8;

  return v9;
}

- (double)_zoomFactorForZoomSliderValue:(double)a3
{
  long double v4;

  -[CAMViewfinderViewController _currentMaximumZoomFactor](self, "_currentMaximumZoomFactor");
  return pow(v4, a3);
}

- (void)_handleTouchDownForZoomSlider:(id)a3
{
  void *v4;
  id v5;

  -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "cancelZoom");

  -[CAMViewfinderViewController _analyticsSessionEvent](self, "_analyticsSessionEvent");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "didZoomInteraction:", 2);

}

- (void)_zoomSliderValueDidChange:(id)a3 forEvent:(id)a4
{
  void *v5;
  char v6;
  float v7;

  -[CAMViewfinderViewController _zoomSlider](self, "_zoomSlider", a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isAutozooming");

  if ((v6 & 1) == 0)
  {
    -[CAMZoomSlider value](self->__zoomSlider, "value");
    -[CAMViewfinderViewController _zoomFactorForZoomSliderValue:](self, "_zoomFactorForZoomSliderValue:", v7);
    -[CAMViewfinderViewController _zoomUIDidChangeToFactor:](self, "_zoomUIDidChangeToFactor:");
    -[CAMViewfinderViewController _setLastZoomInteractionType:](self, "_setLastZoomInteractionType:", 2);
  }
}

- (void)_zoomUIDidChangeToFactor:(double)a3
{
  double v5;
  CUCaptureController *captureController;
  void *v7;
  double v8;
  double v9;
  void *v10;
  void *v11;
  id v12;

  -[CAMViewfinderViewController _setCachedVideoZoomFactor:](self, "_setCachedVideoZoomFactor:");
  -[CAMViewfinderViewController _updateControlsRelatedToDepthSuggestionAnimated:](self, "_updateControlsRelatedToDepthSuggestionAnimated:", 1);
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v12 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v12, "isCapturingVideo"))
    v5 = 0.5;
  else
    v5 = 0.25;
  -[CAMViewfinderViewController _setShouldIgnoreZoomFactorKVOForRamping:](self, "_setShouldIgnoreZoomFactorKVOForRamping:", 1);
  captureController = self->__captureController;
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[CUCaptureController startRampToVideoZoomFactor:withDuration:zoomRampTuning:graphConfiguration:](captureController, "startRampToVideoZoomFactor:withDuration:zoomRampTuning:graphConfiguration:", 3, v7, a3, v5);

  if (!-[CAMViewfinderViewController _shouldUseZoomButtonForCameraToggleForCurrentModeAndDevice](self, "_shouldUseZoomButtonForCameraToggleForCurrentModeAndDevice"))-[CAMZoomControl setZoomFactor:](self->__zoomControl, "setZoomFactor:", a3);
  -[CAMViewfinderViewController _zoomSliderValueForZoomFactor:](self, "_zoomSliderValueForZoomFactor:", a3);
  v9 = v8;
  -[CAMViewfinderViewController _remoteShutterController](self, "_remoteShutterController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setZoomAmount:", v9);

  -[CAMViewfinderViewController _remoteShutterController](self, "_remoteShutterController");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "setZoomFactor:", a3);

}

- (BOOL)_isActiveZooming
{
  char v3;
  void *v4;
  void *v5;
  void *v6;

  if (-[CAMViewfinderViewController _isPinchingForZoom](self, "_isPinchingForZoom"))
    return 1;
  -[CAMViewfinderViewController _zoomControl](self, "_zoomControl");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v4, "isTracking") & 1) != 0)
  {
    v3 = 1;
  }
  else
  {
    -[CAMViewfinderViewController _zoomSlider](self, "_zoomSlider");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v5, "isTracking") & 1) != 0)
    {
      v3 = 1;
    }
    else
    {
      -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = objc_msgSend(v6, "isZooming");

    }
  }

  return v3;
}

- (BOOL)_isZooming
{
  void *v4;
  char v5;

  if (-[CAMViewfinderViewController _isActiveZooming](self, "_isActiveZooming"))
    return 1;
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isRampingVideoZoom");

  return v5;
}

- (void)_handleZoomPinchGestureRecognizer:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  void *v11;
  BOOL v12;
  void *v13;
  _QWORD v14[5];

  v4 = a3;
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  switch(objc_msgSend(v4, "state"))
  {
    case 1:
      -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
      -[CAMViewfinderViewController _setVideoZoomFactorAtPinchStart:](self, "_setVideoZoomFactorAtPinchStart:");
      -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "cancelZoom");

      if (objc_msgSend(v5, "devicePosition") != 1)
      {
        if (-[CAMViewfinderViewController _shouldUseZoomControlInsteadOfSlider](self, "_shouldUseZoomControlInsteadOfSlider"))
        {
          -[CAMViewfinderViewController _createZoomControlIfNecessary](self, "_createZoomControlIfNecessary");
        }
        else
        {
          -[CAMViewfinderViewController _createZoomSliderIfNecessary](self, "_createZoomSliderIfNecessary");
        }
        -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = -[CAMViewfinderViewController _shouldHideZoomSliderForGraphConfiguration:ignoreExpiredVisibilityTimer:](self, "_shouldHideZoomSliderForGraphConfiguration:ignoreExpiredVisibilityTimer:", v11, 1);

        if (!v12)
        {
          -[CAMViewfinderViewController _zoomSlider](self, "_zoomSlider");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "makeVisibleAnimated:", 0);

          -[CAMViewfinderViewController _zoomSlider](self, "_zoomSlider");
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v7, "setVisibilityTimerSuspended:", 1);
          goto LABEL_11;
        }
      }
      break;
    case 2:
      -[CAMViewfinderViewController _videoZoomFactorAtPinchStart](self, "_videoZoomFactorAtPinchStart");
      v9 = v8;
      objc_msgSend(v4, "zoomScale");
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 3221225472;
      v14[2] = __65__CAMViewfinderViewController__handleZoomPinchGestureRecognizer___block_invoke;
      v14[3] = &unk_1EA32A8D0;
      v14[4] = self;
      -[CAMViewfinderViewController _updateZoomFactorForZoomFactor:rampDuration:interactionType:didChangeDevice:](self, "_updateZoomFactorForZoomFactor:rampDuration:interactionType:didChangeDevice:", 1, v14, v9 * v10, 0.0);
      break;
    case 3:
      -[CAMViewfinderViewController _updateFocusAfterZoomIfNecessary](self, "_updateFocusAfterZoomIfNecessary");
      -[CAMZoomSlider setVisibilityTimerSuspended:](self->__zoomSlider, "setVisibilityTimerSuspended:", 0);
      -[CAMViewfinderViewController _analyticsSessionEvent](self, "_analyticsSessionEvent");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "didZoomInteraction:", 1);
LABEL_11:

      break;
    case 4:
    case 5:
      -[CAMZoomSlider setVisibilityTimerSuspended:](self->__zoomSlider, "setVisibilityTimerSuspended:", 0);
      break;
    default:
      break;
  }

}

uint64_t __65__CAMViewfinderViewController__handleZoomPinchGestureRecognizer___block_invoke(uint64_t a1, double a2)
{
  void *v3;
  double v4;

  v3 = *(void **)(a1 + 32);
  objc_msgSend(v3, "_videoZoomFactorAtPinchStart");
  return objc_msgSend(v3, "_setVideoZoomFactorAtPinchStart:", v4 * a2);
}

- (void)_updateZoomFactorForZoomFactor:(double)a3 rampDuration:(double)a4 interactionType:(int64_t)a5 didChangeDevice:(id)a6
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  int v15;
  int v16;
  void *v17;
  void *v18;
  double v19;
  double v20;
  void *v21;
  int64_t v22;
  double v23;
  double v24;
  double v25;
  void (*v26)(void);
  double v27;
  double v28;
  void *v29;
  double v30;
  double v31;
  _BOOL4 v32;
  double v33;
  _BOOL4 v34;
  BOOL v35;
  uint64_t v36;
  double v37;
  CAMViewfinderViewController *v38;
  double v39;
  uint64_t v40;
  void *v41;
  void *v42;
  double v43;
  double v44;
  double v45;
  _QWORD *v46;

  v46 = a6;
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "mode");
  v12 = objc_msgSend(v10, "device");
  if (objc_msgSend(v10, "devicePosition") != 1)
    goto LABEL_56;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "frontZoomBehaviorForCaptureMode:", objc_msgSend(v10, "mode"));

  if (v14 == 1)
  {
    v16 = 0;
    v15 = 1;
    goto LABEL_15;
  }
  if (v14 == 3)
  {
    v34 = a3 > 0.5;
    if (v12 == 10)
      v34 = 1;
    v35 = !v34;
    v36 = 10;
    if (!v35)
      v36 = v12;
    if (a3 >= 2.0 && v12 == 10)
      v22 = 8;
    else
      v22 = v36;
    if (v22 == v12)
      goto LABEL_51;
    -[CAMViewfinderViewController _setReconfiguringForZoomChange:](self, "_setReconfiguringForZoomChange:", 1);
    -[CAMViewfinderViewController _handleUserChangedToMode:device:](self, "_handleUserChangedToMode:device:", v11, v22);
    goto LABEL_12;
  }
  if (v14 != 2)
  {
LABEL_56:
    if (-[CAMViewfinderViewController _isZoomAllowedCurrently](self, "_isZoomAllowedCurrently"))
    {
      -[CAMViewfinderViewController _zoomControl](self, "_zoomControl");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      if (v17)
      {
        -[CAMViewfinderViewController _zoomControl](self, "_zoomControl");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "minAvailableZoomFactor");
        v20 = v19;

      }
      else
      {
        v20 = 1.0;
      }

      -[CAMViewfinderViewController _zoomControl](self, "_zoomControl");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      if (v41)
      {
        -[CAMViewfinderViewController _zoomControl](self, "_zoomControl");
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v42, "maxAvailableZoomFactor");
        v44 = v43;

      }
      else
      {
        -[CAMViewfinderViewController _currentMaximumZoomFactor](self, "_currentMaximumZoomFactor");
        v44 = v45;
      }

      if (v44 >= a3)
        v39 = a3;
      else
        v39 = v44;
      if (v39 < v20)
        v39 = v20;
      if ((unint64_t)(a5 - 1) > 4)
        v40 = 0;
      else
        v40 = qword_1DB9A5390[a5 - 1];
      v38 = self;
      v37 = a4;
      goto LABEL_49;
    }
    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v21, "resolvedDeviceForDesiredDevice:mode:videoConfiguration:videoStabilizationStrength:spatialVideoEnabled:", v12, v11, objc_msgSend(v10, "videoConfiguration"), objc_msgSend(v10, "videoStabilizationStrength"), objc_msgSend(v10, "enableStereoVideoCapture"));

    v22 = +[CAMZoomControlUtilities deviceForEmulatingZoomFactor:fromDevice:mode:continuousZoomSupported:](CAMZoomControlUtilities, "deviceForEmulatingZoomFactor:fromDevice:mode:continuousZoomSupported:", v12, v11, 0, a3);
    -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
    +[CAMZoomControlUtilities appropriateSignificantZoomFactorForDevice:fromDevice:currentZoomFactor:targetZoomFactor:mode:](CAMZoomControlUtilities, "appropriateSignificantZoomFactorForDevice:fromDevice:currentZoomFactor:targetZoomFactor:mode:", v22, v12, v11);
    v24 = v23;
    if (v22 == v12)
    {
      -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
      if (v25 == v24)
        goto LABEL_51;
    }
    -[CAMViewfinderViewController _handleUserChangedToMode:device:zoomFactor:](self, "_handleUserChangedToMode:device:zoomFactor:", v11, v22, v24);
LABEL_12:
    +[CAMZoomControlUtilities zoomScaleFromDevice:toDevice:](CAMZoomControlUtilities, "zoomScaleFromDevice:toDevice:", v12, v22);
    v26 = (void (*)(void))v46[2];
    goto LABEL_13;
  }
  v15 = 0;
  v16 = 1;
LABEL_15:
  -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
  v28 = v27;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "maximumZoomFactorForMode:device:videoConfiguration:videoStabilizationStrength:", v11, v12, objc_msgSend(v10, "videoConfiguration"), objc_msgSend(v10, "videoStabilizationStrength"));
  v31 = v30;

  v32 = fabs(v28 + -1.0) < 0.001;
  if (v31 > a3)
    v32 = 0;
  if (!v32 && vabdd_f64(v28, v31) < 0.001)
  {
    v33 = 1.0;
    if (a3 > 1.0)
      goto LABEL_51;
    goto LABEL_34;
  }
  if (v32)
    v33 = v31;
  else
    v33 = -1.0;
  if (v33 > 0.0)
  {
LABEL_34:
    if (v15)
    {
      v37 = 0.25;
      v38 = self;
      v39 = v33;
      v40 = 1;
LABEL_49:
      -[CAMViewfinderViewController _changeToZoomFactor:rampDuration:zoomRampTuning:shouldAnimate:](v38, "_changeToZoomFactor:rampDuration:zoomRampTuning:shouldAnimate:", v40, 1, v39, v37);
      goto LABEL_50;
    }
    if (!v16)
      goto LABEL_50;
    -[CAMViewfinderViewController _setReconfiguringForZoomChange:](self, "_setReconfiguringForZoomChange:", 1);
    -[CAMViewfinderViewController _handleUserChangedToMode:device:zoomFactor:](self, "_handleUserChangedToMode:device:zoomFactor:", v11, v12, v33);
    v26 = (void (*)(void))v46[2];
LABEL_13:
    v26();
LABEL_50:
    -[CAMViewfinderViewController _setLastZoomInteractionType:](self, "_setLastZoomInteractionType:", a5);
  }
LABEL_51:

}

- (void)_handleCameraRollSwipeUpGestureRecognizer:(id)a3
{
  void *v4;
  id v5;

  v5 = a3;
  -[CAMViewfinderViewController _cameraRollController](self, "_cameraRollController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "state") == 1)
    -[CAMViewfinderViewController _presentCameraRollViewControllerAnimated:interactive:](self, "_presentCameraRollViewControllerAnimated:interactive:", 1, 1);
  else
    objc_msgSend(v4, "handlePresentingPanGestureRecognizer:", v5);

}

- (void)zoomSliderDidBeginAutozooming:(id)a3
{
  CUCaptureController *captureController;
  id v5;
  float v6;
  double v7;
  double v8;
  int v9;
  CUCaptureController *v10;
  void *v11;
  double v12;

  captureController = self->__captureController;
  v5 = a3;
  if (-[CUCaptureController isCapturingVideo](captureController, "isCapturingVideo"))
    v6 = 0.75;
  else
    v6 = 1.5;
  -[CAMViewfinderViewController _currentMaximumZoomFactor](self, "_currentMaximumZoomFactor");
  v8 = v7;
  v9 = objc_msgSend(v5, "isMinimumAutozooming");

  if (v9)
    v8 = 1.0;
  -[CAMViewfinderViewController _setShouldIgnoreZoomFactorKVOForRamping:](self, "_setShouldIgnoreZoomFactorKVOForRamping:", 0);
  v10 = self->__captureController;
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(float *)&v12 = v6;
  -[CUCaptureController startRampToVideoZoomFactor:withRate:graphConfiguration:](v10, "startRampToVideoZoomFactor:withRate:graphConfiguration:", v11, v8, v12);

  -[CAMViewfinderViewController _setLastZoomInteractionType:](self, "_setLastZoomInteractionType:", 3);
}

- (void)zoomSliderDidEndAutozooming:(id)a3
{
  -[CUCaptureController stopRampToVideoZoomFactor](self->__captureController, "stopRampToVideoZoomFactor", a3);
}

- (void)willShowZoomSlider:(id)a3 withAnimationDuration:(double)a4
{
  id v5;

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration", a3, a4);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:animated:](self, "_updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:animated:", v5, 1);

}

- (void)willHideZoomSlider:(id)a3 withAnimationDuration:(double)a4
{
  id v5;

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration", a3, a4);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:animated:](self, "_updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:animated:", v5, 1);

}

- (void)_updateFocusAfterZoomIfNecessary
{
  unint64_t v3;
  id v4;

  v3 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
  if (v3 <= 8 && ((1 << v3) & 0x107) != 0)
  {
    -[CAMViewfinderViewController _captureController](self, "_captureController");
    v4 = (id)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "isCapturingVideo"))
      objc_msgSend(v4, "focusAtCenterForVideoRecording");

  }
}

- (void)_configureZoomControlForGraphConfiguration:(id)a3 animated:(BOOL)a4
{
  _BOOL4 v4;
  id v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  int v15;
  int v16;
  _BOOL4 v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  int v23;
  int v24;
  int v25;
  double v26;
  double v27;
  int v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  BOOL v40;
  void *v41;
  _BOOL4 v42;
  id v43;
  id v44;
  void *v45;
  void *v46;
  _BOOL8 v47;
  uint64_t v48;
  _BOOL8 v49;
  double v50;
  void *v51;
  void *v52;
  unint64_t v53;
  int v54;
  _BOOL4 v55;
  unint64_t v56;
  _QWORD v57[5];
  id v58;
  id v59;

  v4 = a4;
  v6 = a3;
  if (-[CAMViewfinderViewController _wantsZoomControlForGraphConfiguration:](self, "_wantsZoomControlForGraphConfiguration:", v6))
  {
    -[CAMViewfinderViewController _zoomControl](self, "_zoomControl");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "videoStabilizationStrength");
    if (v8 <= 3)
      objc_msgSend(v7, "setHideFocalLengthLabels:", (0xCu >> (v8 & 0xF)) & 1);
    v9 = objc_msgSend(v6, "mode");
    v10 = objc_msgSend(v6, "device");
    v55 = v4;
    if ((unint64_t)(v10 - 1) > 0xA)
      v11 = 0;
    else
      v11 = qword_1DB9A53B8[v10 - 1];
    v12 = objc_msgSend(v6, "videoConfiguration");
    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "resolvedDeviceForDesiredDevice:mode:videoConfiguration:videoStabilizationStrength:spatialVideoEnabled:", v10, v9, v12, objc_msgSend(v6, "videoStabilizationStrength"), objc_msgSend(v6, "enableStereoVideoCapture"));
    v15 = objc_msgSend(v13, "isZoomAllowedForMode:device:videoConfiguration:videoStabilizationStrength:", v9, v14, v12, objc_msgSend(v6, "videoStabilizationStrength"));
    v16 = objc_msgSend(v13, "shouldAllowCameraToggleForMode:devicePosition:videoConfiguration:videoStabilizationStrength:", v9, v11, v12, objc_msgSend(v6, "videoStabilizationStrength"));
    v56 = v14;
    v17 = v14 > 0xB;
    -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
    v19 = v18;
    if (v15)
    {
      v20 = -[CAMViewfinderViewController _currentPhotoFormat](self, "_currentPhotoFormat");
      if (objc_msgSend(v13, "isDepthSuggestionSupportedForMode:devicePosition:photoFormat:", v9, v11, v20, v21)&& -[CAMViewfinderViewController _depthEffectEnabledFromSuggestion](self, "_depthEffectEnabledFromSuggestion"))
      {
        if ((objc_msgSend(v13, "portraitInPhotoModeBehavior") & 4) != 0)
          v22 = 6;
        else
          v22 = v9;
        v53 = ((unint64_t)objc_msgSend(v13, "portraitInPhotoModeBehavior") >> 1) & 1;
      }
      else
      {
        v53 = 0;
        v22 = v9;
      }
      v40 = -[CAMViewfinderViewController _useZoomFactorsOfTrueVideoDestinationModeForGraphConfiguration:](self, "_useZoomFactorsOfTrueVideoDestinationModeForGraphConfiguration:", v6);
      v41 = v7;
      if (objc_msgSend(v6, "trueVideoEnabled") && !v40)
        v22 = -[CAMViewfinderViewController _trueVideoSourceCaptureMode](self, "_trueVideoSourceCaptureMode");
      v58 = 0;
      v59 = 0;
      v42 = +[CAMZoomControlUtilities shouldApplyContinuousZoomForMode:device:videoConfiguration:videoStabilizationStrength:zoomFactors:displayZoomFactors:](CAMZoomControlUtilities, "shouldApplyContinuousZoomForMode:device:videoConfiguration:videoStabilizationStrength:zoomFactors:displayZoomFactors:", v22, v56, v12, objc_msgSend(v6, "videoStabilizationStrength"), &v59, &v58);
      v43 = v59;
      v44 = v58;
      if (v42)
      {
        +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        if (((objc_msgSend(v13, "isCustomLensSupportedForMode:device:isTrueVideo:", v9, v56, objc_msgSend(v6, "trueVideoEnabled")) ^ 1 | v53) & 1) != 0)
        {
          v46 = 0;
        }
        else
        {
          objc_msgSend(v45, "customLensGroup");
          v46 = (void *)objc_claimAutoreleasedReturnValue();
        }
        v7 = v41;
        +[CAMZoomPoint zoomPointsWithFactors:displayZoomFactors:customLensGroup:](CAMZoomPoint, "zoomPointsWithFactors:displayZoomFactors:customLensGroup:", v43, v44, v46);
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        if (v9 == 6 && (objc_msgSend(v13, "continuousZoomSupportedForPortraitMode") & 1) != 0)
          v53 = 1;
        objc_msgSend(v41, "setPreferredCustomLens:", objc_msgSend(v45, "defaultCustomLens"));
        objc_msgSend(v41, "configureForContinuousZoomWithZoomFactor:zoomPoints:createButtonForMaxZoomFactor:compactPlatterLayout:animated:", v51, 0, v53, v55, v19);

      }
      else
      {
        v7 = v41;
        if (((v17 | (0xFDu >> v56)) & 1) == 0)
        {
          v47 = objc_msgSend(v41, "zoomButtonContentType") == 1 && v55;
          objc_msgSend(v41, "configureForZoomSymbolToggle");
          v48 = objc_msgSend(v6, "videoStabilizationStrength");
          v49 = v47;
          v7 = v41;
          -[CAMViewfinderViewController _updateZoomButtonSymbolForMode:device:videoConfiguration:zoomFactor:videoStabilizationStrength:animated:](self, "_updateZoomButtonSymbolForMode:device:videoConfiguration:zoomFactor:videoStabilizationStrength:animated:", v9, v56, v12, v48, v49, v19);
        }
      }

    }
    else if (v16)
    {
      v54 = objc_msgSend(v13, "isSuperWideSupportedForDevicePosition:", v11);
      v23 = objc_msgSend(v13, "isTelephotoSupportedForDevicePosition:", v11);
      v24 = objc_msgSend(v13, "isDualDeviceDisparitySupportedForMode:devicePosition:", v9, v11);
      v25 = objc_msgSend(v13, "isQuadraWideZoomButtonSupportedForMode:devicePosition:videoConfiguration:", v9, v11, v12);
      objc_msgSend(v13, "quadraWideDisplayZoomFactor");
      v27 = v26;
      if (objc_msgSend(v13, "isZoomPlatterSupportedForMode:devicePosition:videoConfiguration:", v9, v11, v12))
      {
        v28 = v25;
        v52 = v7;
        v29 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 4);
        if (((v54 ^ 1 | v24) & 1) == 0)
        {
          v30 = (void *)MEMORY[0x1E0CB37E8];
          objc_msgSend(v13, "superWideDisplayZoomFactor");
          objc_msgSend(v30, "numberWithDouble:");
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v29, "addObject:", v31);

        }
        v32 = (void *)MEMORY[0x1E0CB37E8];
        objc_msgSend(v13, "wideDisplayZoomFactor");
        objc_msgSend(v32, "numberWithDouble:");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "addObject:", v33);

        if (v28)
        {
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v27);
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v29, "addObject:", v34);

        }
        if (v23)
        {
          v35 = (void *)MEMORY[0x1E0CB37E8];
          objc_msgSend(v13, "telephotoDisplayZoomFactor");
          objc_msgSend(v35, "numberWithDouble:");
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v29, "addObject:", v36);

        }
        +[CAMZoomControlUtilities zoomControlDisplayValueForZoomFactor:mode:device:videoConfiguration:videoStabilizationStrength:](CAMZoomControlUtilities, "zoomControlDisplayValueForZoomFactor:mode:device:videoConfiguration:videoStabilizationStrength:", v9, v56, v12, objc_msgSend(v6, "videoStabilizationStrength"), v19);
        v57[0] = MEMORY[0x1E0C809B0];
        v57[1] = 3221225472;
        v57[2] = __83__CAMViewfinderViewController__configureZoomControlForGraphConfiguration_animated___block_invoke;
        v57[3] = &__block_descriptor_40_e25_B32__0__NSNumber_8Q16_B24l;
        v57[4] = v37;
        v38 = objc_msgSend(v29, "indexOfObjectPassingTest:", v57);
        v7 = v52;
        v39 = (unint64_t)objc_msgSend(v29, "count") >= 2
           && -[CAMViewfinderViewController _wantsLightingControlForGraphConfiguration:](self, "_wantsLightingControlForGraphConfiguration:", v6);
        objc_msgSend(v52, "configureForSelectionOnlyWithDisplayZoomFactors:selectedIndex:compactPlatterLayout:animated:", v29, v38, v39, v55);

      }
      else
      {
        +[CAMZoomControlUtilities zoomControlDisplayValueForZoomFactor:mode:device:videoConfiguration:videoStabilizationStrength:](CAMZoomControlUtilities, "zoomControlDisplayValueForZoomFactor:mode:device:videoConfiguration:videoStabilizationStrength:", v9, v56, v12, objc_msgSend(v6, "videoStabilizationStrength"), 1.0);
        objc_msgSend(v7, "configureForToggleOnlyWithZoomFactor:displayZoomFactor:", 1.0, v50);
      }
    }

  }
}

BOOL __83__CAMViewfinderViewController__configureZoomControlForGraphConfiguration_animated___block_invoke(uint64_t a1, void *a2)
{
  double v3;

  objc_msgSend(a2, "doubleValue");
  return vabdd_f64(v3, *(double *)(a1 + 32)) < 0.001;
}

- (void)_updateZoomControlAccessoryStateAnimated:(BOOL)a3
{
  _BOOL8 v3;
  _BOOL8 v5;
  id v6;

  v3 = a3;
  v5 = (unint64_t)(-[CAMViewfinderViewController _shallowDepthOfFieldStatus](self, "_shallowDepthOfFieldStatus")
                        - 9) < 2;
  -[CAMViewfinderViewController _zoomControl](self, "_zoomControl");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setZoomButtonAccessoryState:animated:", v5, v3);

}

- (void)_handleTouchDownForZoomControl:(id)a3
{
  void *v4;
  void *v5;
  id v6;

  -[CAMViewfinderViewController _swipeUpGestureRecognizer](self, "_swipeUpGestureRecognizer", a3);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _swipeDownGestureRecognizer](self, "_swipeDownGestureRecognizer");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setEnabled:", 0);
  objc_msgSend(v6, "setEnabled:", 1);
  objc_msgSend(v4, "setEnabled:", 0);
  objc_msgSend(v4, "setEnabled:", 1);
  -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "cancelZoom");

}

- (void)zoomControl:(id)a3 didChangeZoomFactor:(double)a4 interactionType:(int64_t)a5
{
  -[CAMViewfinderViewController _zoomControlDidChangeZoomFactor:interactionType:](self, "_zoomControlDidChangeZoomFactor:interactionType:", a5, a4);
}

- (void)_zoomControlDidChangeZoomFactor:(double)a3 interactionType:(int64_t)a4
{
  void *v7;
  void *v8;
  int v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  __CFString *v14;
  __CFString *v15;
  double v16;
  double v17;
  void *v18;
  int v19;
  __CFString *v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (-[CAMViewfinderViewController _wantsZoomControlForGraphConfiguration:](self, "_wantsZoomControlForGraphConfiguration:", v7))
  {
    -[CAMViewfinderViewController _captureController](self, "_captureController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "isCapturingVideo");

    if (a4 == 1)
    {
      if (v9)
        v16 = 0.2;
      else
        v16 = 0.1;
      -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
      v10 = v16 * fabs(log(a3 / v17) / 0.693147181);
      v12 = 1;
      v11 = 3;
    }
    else
    {
      v10 = 0.25;
      if (v9)
        v10 = 0.5;
      if (a4)
      {
        v10 = 0.0;
        v11 = 0;
      }
      else
      {
        v11 = 2;
      }
      if (a4)
        v12 = 0;
      else
        v12 = 3;
    }
    -[CAMViewfinderViewController _changeToZoomFactor:rampDuration:zoomRampTuning:shouldAnimate:](self, "_changeToZoomFactor:rampDuration:zoomRampTuning:shouldAnimate:", v12, 0, a3, v10);
    -[CAMViewfinderViewController _setLastZoomInteractionType:](self, "_setLastZoomInteractionType:", v11);
    if (a4 == 1)
    {
      -[CAMViewfinderViewController _analyticsSessionEvent](self, "_analyticsSessionEvent");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "didZoomInteraction:", 3);

    }
  }
  else
  {
    v13 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v14 = CFSTR("tap");
      if (a4 != 1)
        v14 = 0;
      if (!a4)
        v14 = CFSTR("drag");
      v15 = v14;
      v19 = 138543618;
      v20 = v15;
      v21 = 2114;
      v22 = v7;
      _os_log_impl(&dword_1DB760000, v13, OS_LOG_TYPE_DEFAULT, "Ignoring zoom control %{public}@ because zoom control should not be enabled for %{public}@", (uint8_t *)&v19, 0x16u);

    }
  }

}

- (BOOL)canToggleBetweenZoomFactorsForZoomControl:(id)a3
{
  int v4;
  void *v5;

  if (-[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition", a3) == 1)
  {
    LOBYTE(v4) = 1;
  }
  else
  {
    -[CAMViewfinderViewController _captureController](self, "_captureController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v5, "isCapturingVideo") ^ 1;

  }
  return v4;
}

- (void)toggleBetweenZoomFactorsForZoomControl:(id)a3
{
  id v4;
  void *v5;
  BOOL v6;
  int64_t v7;
  NSObject *v8;
  void *v9;
  int v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[CAMViewfinderViewController _wantsZoomControlForGraphConfiguration:](self, "_wantsZoomControlForGraphConfiguration:", v5);

  if (v6)
  {
    v7 = -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition");
    if (v7 == 1)
    {
      -[CAMViewfinderViewController _toggleBetweenFrontFacingZoomFactorsForZoomControl:](self, "_toggleBetweenFrontFacingZoomFactorsForZoomControl:", v4);
    }
    else if (!v7)
    {
      -[CAMViewfinderViewController _toggleBetweenBackFacingZoomFactorsForZoomControl:](self, "_toggleBetweenBackFacingZoomFactorsForZoomControl:", v4);
    }
  }
  else
  {
    v8 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543362;
      v11 = v9;
      _os_log_impl(&dword_1DB760000, v8, OS_LOG_TYPE_DEFAULT, "Ignoring zoom control tap because zoom control should not be enabled for %{public}@", (uint8_t *)&v10, 0xCu);

    }
  }

}

- (void)_toggleBetweenBackFacingZoomFactorsForZoomControl:(id)a3
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  id v17;

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration", a3);
  v17 = (id)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v17, "mode");
  v5 = objc_msgSend(v17, "device");
  v6 = objc_msgSend(v17, "devicePosition");
  v7 = objc_msgSend(v17, "videoConfiguration");
  v8 = objc_msgSend(v17, "videoStabilizationStrength");
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "isTelephotoSupportedForDevicePosition:", v6);
  v11 = objc_msgSend(v9, "isDualSupportedForMode:devicePosition:videoConfiguration:videoStabilizationStrength:", v4, v6, v7, v8);
  v12 = objc_msgSend(v9, "isSuperWideSupportedForDevicePosition:", v6);
  v13 = objc_msgSend(v9, "isWideDualSupportedForMode:devicePosition:videoConfiguration:videoStabilizationStrength:", v4, v6, v7, v8);
  switch(v5)
  {
    case 0:
      v14 = 5;
      if (!v12)
        v14 = 0;
      if (v10)
        v14 = 3;
      v15 = (v13 & v11) == 0;
      goto LABEL_12;
    case 2:
      v14 = 2;
      if (v12)
        v14 = 5;
      v15 = v10 == 0;
      v16 = 3;
      goto LABEL_13;
    case 3:
      v15 = v12 == 0;
      v14 = 2;
      v16 = 5;
      goto LABEL_13;
    case 4:
      v15 = v13 == 0;
      v14 = 4;
LABEL_12:
      v16 = 6;
LABEL_13:
      if (v15)
        v5 = v14;
      else
        v5 = v16;
      break;
    case 5:
      v5 = 2;
      break;
    case 6:
      v5 = 4;
      break;
    default:
      break;
  }
  -[CAMViewfinderViewController _handleUserChangedToMode:device:](self, "_handleUserChangedToMode:device:", v4, v5);
  -[CAMViewfinderViewController _setLastZoomInteractionType:](self, "_setLastZoomInteractionType:", 3);

}

- (void)_toggleBetweenFrontFacingZoomFactorsForZoomControl:(id)a3
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  void *v12;
  void *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  id v18;

  v4 = a3;
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v18 = (id)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v18, "mode");
  v6 = objc_msgSend(v18, "device");
  v7 = objc_msgSend(v18, "devicePosition");
  v8 = objc_msgSend(v18, "videoConfiguration");
  v9 = objc_msgSend(v4, "zoomButtonSymbol");

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "isSuperWideSupportedForDevicePosition:", v7);

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v12;
  if (v11)
    objc_msgSend(v12, "superWideToWideZoomFactorForDevicePosition:", v7);
  else
    objc_msgSend(v12, "maximumZoomFactorForMode:device:videoConfiguration:videoStabilizationStrength:", v5, v6, v8, objc_msgSend(v18, "videoStabilizationStrength"));
  v15 = v14;

  v16 = v15 + 0.01;
  -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
  if (v9 == 1)
  {
    v17 = v17 / v16;
  }
  else if (!v9)
  {
    v17 = v17 * v16;
  }
  -[CAMViewfinderViewController _updateZoomFactorForZoomFactor:rampDuration:interactionType:didChangeDevice:](self, "_updateZoomFactorForZoomFactor:rampDuration:interactionType:didChangeDevice:", 3, &__block_literal_global_919, v17, 0.25);

}

- (void)zoomControl:(id)a3 didChangeSelectedButtonIndex:(unint64_t)a4 displayZoomFactor:(double)a5
{
  id v7;
  int64_t v8;
  int64_t v9;
  double v10;
  double v11;

  v7 = a3;
  v8 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
  v9 = -[CAMViewfinderViewController _deviceForSelectButtonZoomDisplayZoomFactor:](self, "_deviceForSelectButtonZoomDisplayZoomFactor:", a5);
  -[CAMViewfinderViewController _zoomFactorForSelectButtonDisplayZoomFactor:device:](self, "_zoomFactorForSelectButtonDisplayZoomFactor:device:", v9, a5);
  v11 = v10;
  objc_msgSend(v7, "setZoomButtonAccessoryState:animated:", 0, 1);

  -[CAMViewfinderViewController _handleUserChangedToMode:device:zoomFactor:](self, "_handleUserChangedToMode:device:zoomFactor:", v8, v9, v11);
  -[CAMViewfinderViewController _setLastZoomInteractionType:](self, "_setLastZoomInteractionType:", 3);
}

- (int64_t)_deviceForSelectButtonZoomDisplayZoomFactor:(double)a3
{
  int64_t v5;
  int64_t v6;
  int64_t v7;
  void *v8;
  int v9;
  int v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;

  v5 = -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition");
  v6 = -[CAMViewfinderViewController _currentDevice](self, "_currentDevice");
  v7 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "isDualDeviceDisparitySupportedForMode:devicePosition:", v7, v5);
  if (!v5)
  {
    v10 = v9;
    objc_msgSend(v8, "superWideDisplayZoomFactor");
    if (v11 == a3)
    {
      v6 = 5;
    }
    else
    {
      objc_msgSend(v8, "wideDisplayZoomFactor");
      if (v12 == a3)
      {
        if (v10)
          v6 = 6;
        else
          v6 = 2;
      }
      else
      {
        objc_msgSend(v8, "telephotoDisplayZoomFactor");
        if (v13 == a3)
        {
          if (v10)
            v6 = 4;
          else
            v6 = 3;
        }
        else
        {
          objc_msgSend(v8, "quadraWideDisplayZoomFactor");
          v15 = 2;
          if (v10)
            v15 = 6;
          if (v14 == a3)
            v6 = v15;
        }
      }
    }
  }

  return v6;
}

- (double)_zoomFactorForSelectButtonDisplayZoomFactor:(double)a3 device:(int64_t)a4
{
  void *v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;

  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
  if ((unint64_t)(a4 - 1) > 0xA)
    v9 = 0;
  else
    v9 = qword_1DB9A53B8[a4 - 1];
  v10 = -[CAMViewfinderViewController _currentVideoConfiguration](self, "_currentVideoConfiguration");
  if (objc_msgSend(v7, "isDualDeviceDisparitySupportedForMode:devicePosition:", v8, v9))
  {
    if (a4 == 4)
    {
      v11 = a3;
    }
    else
    {
      v11 = 1.0;
      if (a4 == 6)
      {
        objc_msgSend(v7, "superWideToWideZoomFactorForDevicePosition:", 0);
        v11 = v12 * a3;
      }
    }
  }
  else
  {
    v11 = 1.0;
    if (objc_msgSend(v7, "isQuadraWideZoomButtonSupportedForMode:devicePosition:videoConfiguration:", v8, v9, v10))
    {
      objc_msgSend(v7, "quadraWideDisplayZoomFactor");
      if (v13 == a3)
      {
        objc_msgSend(v7, "quadraWideRelativeZoomFactor");
        v11 = v14;
      }
    }
  }

  return v11;
}

- (BOOL)zoomControlShouldSnapDialToSwitchOverZoomFactors:(id)a3
{
  uint64_t v4;
  char v5;
  void *v6;

  -[CAMViewfinderViewController _captureController](self, "_captureController", a3);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend((id)v4, "isCapturingVideo");

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v4) = objc_msgSend(v6, "isCapturingLivePhotoVideo");

  return (v5 | v4) ^ 1;
}

- (BOOL)_shouldAllowHapticsForCurrentState
{
  void *v2;
  char v3;

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isCapturingVideo") ^ 1;

  return v3;
}

- (void)zoomControlDidChangeShowingZoomDial:(id)a3
{
  id v4;
  void *v5;
  id v6;

  v4 = a3;
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:animated:](self, "_updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:animated:", v5, 1);

  LODWORD(v5) = objc_msgSend(v4, "isShowingZoomDial");
  if ((_DWORD)v5)
  {
    -[CAMViewfinderViewController _analyticsSessionEvent](self, "_analyticsSessionEvent");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "didZoomInteraction:", 2);

  }
}

- (void)zoomControlDidChangePlatterExpanded:(id)a3
{
  id v4;

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration", a3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updateLightingControlFadesForGraphConfiguration:animated:](self, "_updateLightingControlFadesForGraphConfiguration:animated:", v4, 1);

}

- (unint64_t)zoomControl:(id)a3 accessoryButtonTapIndexInDisplayZoomFactors:(id)a4
{
  id v5;
  unint64_t v6;

  v5 = a4;
  if (objc_msgSend(a3, "zoomButtonAccessoryState") == 1)
  {
    if ((unint64_t)objc_msgSend(v5, "count") < 2)
      v6 = 0;
    else
      v6 = objc_msgSend(v5, "indexOfObject:", &unk_1EA3B1820);
  }
  else
  {
    v6 = 0x7FFFFFFFFFFFFFFFLL;
  }

  return v6;
}

- (void)zoomControlDidTapZoomButtonAccessory:(id)a3
{
  id v3;

  v3 = a3;
  if (objc_msgSend(v3, "zoomButtonAccessoryState") == 1)
    objc_msgSend(v3, "setZoomButtonAccessoryState:animated:", 0, 1);

}

- (void)lightingControlDidChangeSelectedLightingType:(id)a3
{
  uint64_t v4;
  int64_t v5;
  int64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  v4 = objc_msgSend(a3, "selectedLightingType");
  v5 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
  v6 = -[CAMViewfinderViewController _currentMaxPhotoResolution](self, "_currentMaxPhotoResolution");
  -[CAMViewfinderViewController _setLightingType:forMode:](self, "_setLightingType:forMode:", v4, v5);
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v13 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v13, "smartStylesSupported"))
  {
    -[CAMViewfinderViewController _updateSmartStyleControlsForCurrentStateAnimateSliders:animateOtherControls:](self, "_updateSmartStyleControlsForCurrentStateAnimateSliders:animateOtherControls:", 0, 1);
    -[CAMViewfinderViewController _updateSmartStyleOnSession](self, "_updateSmartStyleOnSession");
  }
  if (-[CAMViewfinderViewController _currentMaxPhotoResolution](self, "_currentMaxPhotoResolution") != v6)
  {
    -[CAMViewfinderViewController _prepareDeferredProcessingIfNeeded](self, "_prepareDeferredProcessingIfNeeded");
    -[CAMViewfinderViewController _preparePhotoOutputForExpectedPhotoResolution](self, "_preparePhotoOutputForExpectedPhotoResolution");
  }
  -[CAMViewfinderViewController _updateCurrentPreviewFiltersOnCaptureController](self, "_updateCurrentPreviewFiltersOnCaptureController");
  -[CAMViewfinderViewController _lightingNameBadge](self, "_lightingNameBadge");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setLightingType:", v4);

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "lightingNameBadge");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setLightingType:", v4);

  -[CAMViewfinderViewController _updateControlDrawerContentsVisibilityAnimated:](self, "_updateControlDrawerContentsVisibilityAnimated:", 1);
  -[CAMViewfinderViewController _updateControlStatusBarContentsVisibilityAnimated:](self, "_updateControlStatusBarContentsVisibilityAnimated:", 1);
  -[CAMViewfinderViewController _updatePortraitModeInstructionLabelForCurrentState](self, "_updatePortraitModeInstructionLabelForCurrentState");
  -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setLightingType:animated:", v4, 1);

  -[CAMViewfinderViewController _analyticsSessionEvent](self, "_analyticsSessionEvent");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "didChangePortraitLighting");

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _startFlashingTransientLightingBadgeIfNecessaryForGraphConfiguration:](self, "_startFlashingTransientLightingBadgeIfNecessaryForGraphConfiguration:", v12);

}

- (void)lightingControl:(id)a3 willChangeExpanded:(BOOL)a4
{
  _BOOL4 v4;
  void *v6;
  void *v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  void *v11;
  int64_t v12;
  double v13;
  double v14;
  id v15;

  v4 = a4;
  v15 = a3;
  -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "previewView");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    v8 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
    v9 = +[CAMUserPreferences defaultFilterTypeForMode:](CAMUserPreferences, "defaultFilterTypeForMode:", v8);
    v10 = -[CAMViewfinderViewController _effectFilterTypeForMode:](self, "_effectFilterTypeForMode:", v8);
    -[CAMViewfinderViewController _setEffectFilterType:forMode:](self, "_setEffectFilterType:forMode:", v9, v8);
    -[CAMViewfinderViewController _setLightingType:forMode:](self, "_setLightingType:forMode:", objc_msgSend(v15, "selectedLightingType"), v8);
    if (v10 != v9)
      -[CAMViewfinderViewController _updateCurrentPreviewFiltersOnCaptureController](self, "_updateCurrentPreviewFiltersOnCaptureController");
    -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _updateFilterScrubberForGraphConfiguration:](self, "_updateFilterScrubberForGraphConfiguration:", v11);

    -[CAMViewfinderViewController _updateFilterButtonOnState](self, "_updateFilterButtonOnState");
    -[CAMViewfinderViewController _updateFilterNameBadgeAnimated:](self, "_updateFilterNameBadgeAnimated:", 1);
  }
  v12 = -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle");
  v13 = 0.0;
  if ((v12 | 4) == 4 && v4)
  {
    objc_msgSend(v15, "frame", 0.0);
    objc_msgSend(v15, "alignmentRectForFrame:");
    v13 = v14;
  }
  objc_msgSend(v7, "setBottomContentInset:", v13);

}

- (void)lightingControlDidChangeExpanded:(id)a3
{
  -[CAMViewfinderViewController updateControlVisibilityAnimated:](self, "updateControlVisibilityAnimated:", 1);
  -[CAMViewfinderViewController _updateTransientLightingBadgeVisibilityAnimated:](self, "_updateTransientLightingBadgeVisibilityAnimated:", 1);
}

- (void)captureController:(id)a3 receivedOverlaySimulatedAperture:(float)a4
{
  -[CAMViewfinderViewController _handleUserChangedToApertureValue:](self, "_handleUserChangedToApertureValue:", a3, a4);
}

- (void)captureController:(id)a3 receivedOverlayChangeSmartStyle:(id)a4
{
  id v5;
  void *v6;
  char v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  void *v14;
  _QWORD v15[4];
  id v16;
  uint8_t buf[4];
  id v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a4;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "semanticStyleSupportForMode:devicePosition:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"));

  if ((v7 & 9) != 0)
  {
    if ((v7 & 8) != 0)
    {
      -[CAMViewfinderViewController _semanticStyles](self, "_semanticStyles");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v15[0] = MEMORY[0x1E0C809B0];
      v15[1] = 3221225472;
      v15[2] = __81__CAMViewfinderViewController_captureController_receivedOverlayChangeSmartStyle___block_invoke;
      v15[3] = &unk_1EA32A0C8;
      v10 = v5;
      v16 = v10;
      v11 = objc_msgSend(v9, "indexOfObjectPassingTest:", v15);

      if (v11 == 0x7FFFFFFFFFFFFFFFLL)
      {
        v12 = os_log_create("com.apple.camera", "Camera");
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          -[CAMViewfinderViewController _semanticStyles](self, "_semanticStyles");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v18 = v10;
          v19 = 2114;
          v20 = v13;
          _os_log_impl(&dword_1DB760000, v12, OS_LOG_TYPE_DEFAULT, "Received overlay update for style %{public}@ that is not in array of styles: %{public}@", buf, 0x16u);

        }
      }
      else
      {
        -[CAMViewfinderViewController _setSelectedSemanticStyleIndex:](self, "_setSelectedSemanticStyleIndex:", v11);
        -[CAMViewfinderViewController _semanticStyles](self, "_semanticStyles");
        v12 = objc_claimAutoreleasedReturnValue();
        -[NSObject setObject:atIndexedSubscript:](v12, "setObject:atIndexedSubscript:", v10, -[CAMViewfinderViewController _selectedSemanticStyleIndex](self, "_selectedSemanticStyleIndex"));
      }

    }
    else if ((v7 & 1) != 0)
    {
      -[CAMViewfinderViewController _semanticStyles](self, "_semanticStyles");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setObject:atIndexedSubscript:", v5, -[CAMViewfinderViewController _smartStyleSystemStyleIndex](self, "_smartStyleSystemStyleIndex"));

    }
    -[CAMViewfinderViewController _updateSmartStyleControlsForCurrentStateAnimateSliders:animateOtherControls:](self, "_updateSmartStyleControlsForCurrentStateAnimateSliders:animateOtherControls:", 0, 1);
    -[CAMViewfinderViewController _analyticsControlDrawerEvent](self, "_analyticsControlDrawerEvent");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "didChangeValueForControlType:", 11);

  }
}

BOOL __81__CAMViewfinderViewController_captureController_receivedOverlayChangeSmartStyle___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3;

  v3 = objc_msgSend(a2, "castType");
  return v3 == objc_msgSend(*(id *)(a1 + 32), "castType");
}

- (void)captureController:(id)a3 receivedOverlayUpdateSmartStyle:(id)a4
{
  void *v5;
  char v6;
  unint64_t v7;
  void *v8;
  unint64_t v9;
  void *v10;
  unint64_t v11;
  void *v12;
  id v13;

  v13 = a4;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "semanticStyleSupportForMode:devicePosition:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"));

  if ((v6 & 8) != 0)
  {
    -[CAMViewfinderViewController _semanticStyles](self, "_semanticStyles");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = -[CAMViewfinderViewController _selectedSemanticStyleIndex](self, "_selectedSemanticStyleIndex");
    goto LABEL_6;
  }
  if ((v6 & 1) != 0)
  {
    v7 = -[CAMViewfinderViewController _smartStyleSystemStyleIndex](self, "_smartStyleSystemStyleIndex");
    -[CAMViewfinderViewController _semanticStyles](self, "_semanticStyles");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "count");

    if (v7 < v9)
    {
      -[CAMViewfinderViewController _semanticStyles](self, "_semanticStyles");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = -[CAMViewfinderViewController _smartStyleSystemStyleIndex](self, "_smartStyleSystemStyleIndex");
LABEL_6:
      objc_msgSend(v10, "setObject:atIndexedSubscript:", v13, v11);

    }
  }
  -[CAMViewfinderViewController _updateSmartStyleControlsForCurrentStateAnimateSliders:animateOtherControls:](self, "_updateSmartStyleControlsForCurrentStateAnimateSliders:animateOtherControls:", 0, 1);
  -[CAMViewfinderViewController _analyticsControlDrawerEvent](self, "_analyticsControlDrawerEvent");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "didChangeValueForControlType:", 11);

}

- (void)captureController:(id)a3 receivedOverlayStyleControlActive:(BOOL)a4
{
  _BOOL8 v4;
  id v5;

  v4 = a4;
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder", a3);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setOverlayStyleControlActive:animated:", v4, 1);

}

- (void)captureController:(id)a3 receivedSystemOverlayUpdateExposureBias:(double)a4
{
  void *v6;
  float v7;
  float v8;
  float v9;

  -[CAMViewfinderViewController _previewViewController](self, "_previewViewController", a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "cachedExposureTargetBias");
  v8 = v7;

  v9 = a4 - v8;
  -[CAMViewfinderViewController _handleUserChangedToExposureSliderBias:updateSystemOverlayValues:](self, "_handleUserChangedToExposureSliderBias:updateSystemOverlayValues:", 0, v9);
}

- (void)captureController:(id)a3 receivedOverlayVisible:(BOOL)a4
{
  _BOOL8 v4;
  void *v6;

  v4 = a4;
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder", a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setSystemOverlayVisible:animated:", v4, 1);

  -[CAMViewfinderViewController updateControlVisibilityAnimated:](self, "updateControlVisibilityAnimated:", 1);
}

- (void)captureController:(id)a3 receivedQuietUIActive:(BOOL)a4
{
  _BOOL8 v5;
  void *v6;

  v5 = a4;
  -[CAMViewfinderViewController _setCurrentHalfPressSpotlight:](self, "_setCurrentHalfPressSpotlight:", a4);
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setSpotlightControl:animated:", v5, 1);

  -[CAMViewfinderViewController updateControlVisibilityAnimated:](self, "updateControlVisibilityAnimated:", 1);
  -[CAMViewfinderViewController _updateEnabledControlsWithReason:](self, "_updateEnabledControlsWithReason:", CFSTR("Spotlight changed"));
}

- (void)captureController:(id)a3 willRecoverFromRuntimeError:(id)a4
{
  id v4;

  -[CAMViewfinderViewController _closedViewfinderController](self, "_closedViewfinderController", a3, a4);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addClosedViewfinderReason:", 5);

}

- (void)_handleGeneralCaptureControllerSuspension
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  -[CAMViewfinderViewController _cancelCTMCapture](self, "_cancelCTMCapture");
  if (!-[CAMViewfinderViewController _isCapturingTimelapse](self, "_isCapturingTimelapse"))
  {
    -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "resetAnimated:", 1);

  }
  -[CAMViewfinderViewController _controlDrawer](self, "_controlDrawer");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "lowLightSlider");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "endCaptureAnimationAnimated:", 1);

  -[CAMViewfinderViewController _resetMachineReadableMetadataAndProcessing](self, "_resetMachineReadableMetadataAndProcessing");
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v5) = objc_msgSend(v6, "shouldPreventConnectionHandover");

  if ((_DWORD)v5)
  {
    -[CAMViewfinderViewController _preventConnectionHandoverAssertionController](self, "_preventConnectionHandoverAssertionController");
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "releaseAssertionIfHeld");

  }
}

- (void)captureControllerInterruptionEnded:(id)a3
{
  NSObject *v4;
  void *v5;
  int64_t v6;
  uint8_t v7[16];

  v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1DB760000, v4, OS_LOG_TYPE_DEFAULT, "captureControllerInterruptionEnded:", v7, 2u);
  }

  -[CAMViewfinderViewController _closedViewfinderController](self, "_closedViewfinderController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "removeClosedViewfinderReason:", 4);
  if (!+[CAMApplication appOrPlugInState](CAMApplication, "appOrPlugInState"))
  {
    v6 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
    -[CAMViewfinderViewController _updateFlashModeOnControllerForMode:](self, "_updateFlashModeOnControllerForMode:", v6);
    -[CAMViewfinderViewController _updateTorchModeOnControllerForMode:](self, "_updateTorchModeOnControllerForMode:", v6);
  }
  -[CAMViewfinderViewController _updateModeDisabledForCurrentStateAnimated:](self, "_updateModeDisabledForCurrentStateAnimated:", 1);
  -[CAMViewfinderViewController _updateEnabledControlsWithReason:](self, "_updateEnabledControlsWithReason:", CFSTR("Capture Controller Interruption Ended"));

}

- (void)_stopRecordingForDeactivationReason:(id)a3
{
  id v4;
  void *v5;
  unint64_t v6;
  NSObject *v7;
  void *v8;
  NSObject *v9;
  NSObject *v10;
  int v11;
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
  if (v6 <= 8)
  {
    if (((1 << v6) & 0x186) != 0)
    {
      if (objc_msgSend(v5, "isCapturingVideo"))
      {
        v7 = os_log_create("com.apple.camera", "Camera");
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          v11 = 138543362;
          v12 = v4;
          _os_log_impl(&dword_1DB760000, v7, OS_LOG_TYPE_DEFAULT, "Stopping video capture for deactivation reason %{public}@", (uint8_t *)&v11, 0xCu);
        }

        -[CAMViewfinderViewController _stopCapturingVideo](self, "_stopCapturingVideo");
LABEL_7:
        -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "resetAnimated:", 1);

      }
    }
    else
    {
      if (!v6)
      {
        if (!objc_msgSend(v5, "isCapturingCTMVideo"))
          goto LABEL_8;
        v10 = os_log_create("com.apple.camera", "Camera");
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          v11 = 138543362;
          v12 = v4;
          _os_log_impl(&dword_1DB760000, v10, OS_LOG_TYPE_DEFAULT, "Stopping video capture for deactivation reason %{public}@", (uint8_t *)&v11, 0xCu);
        }

        -[CAMViewfinderViewController _stopCapturingCTMVideo](self, "_stopCapturingCTMVideo");
        goto LABEL_7;
      }
      if (v6 == 3 && objc_msgSend(v5, "isCapturingPanorama"))
      {
        v9 = os_log_create("com.apple.camera", "Camera");
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          v11 = 138543362;
          v12 = v4;
          _os_log_impl(&dword_1DB760000, v9, OS_LOG_TYPE_DEFAULT, "Stopping panorama capture for deactivation reason %{public}@", (uint8_t *)&v11, 0xCu);
        }

        -[CAMViewfinderViewController _stopCapturingPanorama](self, "_stopCapturingPanorama");
        goto LABEL_7;
      }
    }
  }
LABEL_8:

}

- (void)_handleApplicationWillEnterForeground:(id)a3
{
  NSObject *v4;
  BOOL v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  uint8_t v11[16];

  v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_1DB760000, v4, OS_LOG_TYPE_DEFAULT, "Received UIApplicationWillEnterForegroundNotification", v11, 2u);
  }

  v5 = -[CAMViewfinderViewController _updateDuetSystemConstraintsIfNecessary](self, "_updateDuetSystemConstraintsIfNecessary");
  -[CAMViewfinderViewController _updateBadgeVisibilityAnimated:](self, "_updateBadgeVisibilityAnimated:", 0);
  if (!-[CAMViewfinderViewController isEmulatingImagePicker](self, "isEmulatingImagePicker"))
    -[CAMViewfinderViewController readUserPreferencesAndHandleChangesWithOverrides:](self, "readUserPreferencesAndHandleChangesWithOverrides:", 0);
  if (!v5)
    -[CAMViewfinderViewController _updateDuetSystemConstraintsIfNecessary](self, "_updateDuetSystemConstraintsIfNecessary");
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "startCaptureSessionWithRetryCount:retryInterval:logReason:completion:", 3, CFSTR("application will enter foreground"), 0, 0.05);
  -[CAMViewfinderViewController _resetZoom](self, "_resetZoom");
  if (-[CAMViewfinderViewController _shouldUpdateCaptureOrientation](self, "_shouldUpdateCaptureOrientation"))
    -[CAMViewfinderViewController _updateUIForCaptureOrientationAnimated:](self, "_updateUIForCaptureOrientationAnimated:", 0);
  -[CAMViewfinderViewController _updateDiskSpaceAlertViewVisibilityAnimated:](self, "_updateDiskSpaceAlertViewVisibilityAnimated:", 0);
  -[CAMViewfinderViewController _closedViewfinderController](self, "_closedViewfinderController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "removeClosedViewfinderReason:", 7);
  objc_msgSend(v7, "removeClosedViewfinderReason:", 21);
  objc_msgSend(v7, "removeClosedViewfinderReason:", 15);
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "sharedLibraryEnabled");

  if (v9)
  {
    -[CAMViewfinderViewController _librarySelectionController](self, "_librarySelectionController");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "startNewSession");

  }
  -[CAMViewfinderViewController _createAnalyticsSessionEventIfNeeded](self, "_createAnalyticsSessionEventIfNeeded");

}

- (void)_handleSceneDidEnterBackground:(id)a3
{
  id v4;
  void *v5;
  int v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  uint8_t v17[16];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (-[CAMViewfinderViewController isEmulatingImagePicker](self, "isEmulatingImagePicker"))
  {
    -[CAMViewfinderViewController _captureController](self, "_captureController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "isCapturingVideo");

    if (v6)
    {
      objc_msgSend(v4, "object");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v20 = 0u;
        v21 = 0u;
        v18 = 0u;
        v19 = 0u;
        objc_msgSend(v7, "windows");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
        if (v9)
        {
          v10 = v9;
          v11 = *(_QWORD *)v19;
          while (2)
          {
            v12 = 0;
            do
            {
              if (*(_QWORD *)v19 != v11)
                objc_enumerationMutation(v8);
              v13 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * v12);
              -[CAMViewfinderViewController view](self, "view");
              v14 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v14, "window");
              v15 = (void *)objc_claimAutoreleasedReturnValue();

              if (v13 == v15)
              {

                v16 = os_log_create("com.apple.camera", "Camera");
                if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)v17 = 0;
                  _os_log_impl(&dword_1DB760000, v16, OS_LOG_TYPE_DEFAULT, "Stop recording video for backgrounded scene", v17, 2u);
                }

                -[CAMViewfinderViewController _stopCapturingVideo](self, "_stopCapturingVideo");
                goto LABEL_16;
              }
              ++v12;
            }
            while (v10 != v12);
            v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
            if (v10)
              continue;
            break;
          }
        }

      }
LABEL_16:

    }
  }

}

- (void)_updateProResControlsForCurrentState
{
  id v3;

  -[CAMViewfinderViewController _updateFreeResourcesInstructionLabelForCurrentState](self, "_updateFreeResourcesInstructionLabelForCurrentState");
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updateMaxRecordingTimeInstructionLabelForGraphConfiguration:](self, "_updateMaxRecordingTimeInstructionLabelForGraphConfiguration:", v3);

}

- (void)availableDiskSpaceChanged:(id)a3
{
  void *v4;

  -[CAMViewfinderViewController _updateDiskSpaceAlertViewVisibilityAnimated:](self, "_updateDiskSpaceAlertViewVisibilityAnimated:", 1);
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:animated:](self, "_updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:animated:", v4, 1);

  -[CAMViewfinderViewController _updateProResControlsForCurrentState](self, "_updateProResControlsForCurrentState");
}

- (void)storageControllerDidChangePurgingState:(id)a3
{
  void *v4;

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:animated:](self, "_updateFullscreenViewfinderControlsVisibilityForGraphConfiguration:animated:", v4, 1);

  -[CAMViewfinderViewController _updateProResControlsForCurrentState](self, "_updateProResControlsForCurrentState");
  -[CAMViewfinderViewController _updateEnabledControlsWithReason:](self, "_updateEnabledControlsWithReason:", CFSTR("did change purging state"));
}

- (void)_handleTimelapseLowDiskSpaceNotification:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  _QWORD v22[5];
  _QWORD aBlock[4];
  id v24;
  id buf[2];

  v4 = a3;
  v5 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl(&dword_1DB760000, v5, OS_LOG_TYPE_DEFAULT, "Received CAMTimelapseLowDiskSpaceNotification", (uint8_t *)buf, 2u);
  }

  -[CAMViewfinderViewController _diskSpaceAlertController](self, "_diskSpaceAlertController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    objc_msgSend(v4, "userInfo");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("CAMTimelapseLowDiskSpaceTitleInfo"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("CAMTimelapseLowDiskSpaceMessageInfo"));
    v9 = objc_claimAutoreleasedReturnValue();
    objc_initWeak(buf, self);
    v10 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __72__CAMViewfinderViewController__handleTimelapseLowDiskSpaceNotification___block_invoke;
    aBlock[3] = &unk_1EA32A810;
    objc_copyWeak(&v24, buf);
    v11 = _Block_copy(aBlock);
    v21 = (void *)v9;
    objc_msgSend(MEMORY[0x1E0DC3450], "alertControllerWithTitle:message:preferredStyle:", v8, v9, 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = (void *)MEMORY[0x1E0DC3448];
    CAMStorageAlertDismissTitle(-[CAMViewfinderViewController _diskSpaceAlertType](self, "_diskSpaceAlertType"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v22[0] = v10;
    v22[1] = 3221225472;
    v22[2] = __72__CAMViewfinderViewController__handleTimelapseLowDiskSpaceNotification___block_invoke_2;
    v22[3] = &unk_1EA3299C8;
    v22[4] = self;
    objc_msgSend(v12, "actionWithTitle:style:handler:", v13, 0, v22);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "addAction:", v14);

    CAMStorageAlertResolveTitle(1);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if (v15)
    {
      v16 = (void *)MEMORY[0x1E0DC3448];
      CAMStorageAlertResolveTitle(1);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "actionWithTitle:style:handler:", v17, 0, v11);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "addAction:", v18);

    }
    -[CAMViewfinderViewController presentViewController:animated:completion:](self, "presentViewController:animated:completion:", v6, 1, 0);
    -[CAMViewfinderViewController _setDiskSpaceAlertController:](self, "_setDiskSpaceAlertController:", v6);
    -[CAMViewfinderViewController _storageController](self, "_storageController");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "purgeableStorageContainer");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "reportLowDiskEventWithIdentifier:", CFSTR("com.apple.camera.timelapse"));

    objc_destroyWeak(&v24);
    objc_destroyWeak(buf);

  }
}

void __72__CAMViewfinderViewController__handleTimelapseLowDiskSpaceNotification___block_invoke(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_dismissDiskSpaceAlertViewAnimated:", 1);

  CAMShowStorageUsageInSettings();
}

uint64_t __72__CAMViewfinderViewController__handleTimelapseLowDiskSpaceNotification___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_dismissDiskSpaceAlertViewAnimated:", 1);
}

- (int64_t)_diskSpaceAlertType
{
  _BOOL4 v3;
  int v4;
  int IsEnabled;
  int v6;

  v3 = -[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled");
  v4 = PLIsCPLDataclassEnabled();
  IsEnabled = PLCloudPhotoLibraryKeepOriginalsIsEnabled();
  v6 = -[CAMViewfinderViewController _hasBeenPromptedForICPLToday](self, "_hasBeenPromptedForICPLToday");
  if (v3)
    return 2;
  else
    return v4 & ~v6 & IsEnabled ^ 1u;
}

- (BOOL)_hasBeenPromptedForICPLToday
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  BOOL v7;

  CFPreferencesAppSynchronize(CFSTR("com.apple.mobileslideshow"));
  v2 = (void *)CFPreferencesCopyAppValue(CFSTR("CPLKeepOriginalsPromptShownDate"), CFSTR("com.apple.mobileslideshow"));
  if (v2
    && (objc_msgSend(MEMORY[0x1E0C99D68], "date"),
        v3 = (void *)objc_claimAutoreleasedReturnValue(),
        v4 = objc_msgSend(v3, "compare:", v2),
        v3,
        v4 != 1))
  {
    v7 = 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "dateByAddingTimeInterval:", 86400.0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    CFPreferencesSetAppValue(CFSTR("CPLKeepOriginalsPromptShownDate"), v6, CFSTR("com.apple.mobileslideshow"));
    CFPreferencesAppSynchronize(CFSTR("com.apple.mobileslideshow"));

    v7 = 0;
  }

  return v7;
}

- (void)_showDiskSpaceAlertView
{
  void *v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  id *v7;
  void *v8;
  uint64_t *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  _QWORD v23[5];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id location;

  -[CAMViewfinderViewController _diskSpaceAlertController](self, "_diskSpaceAlertController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
    goto LABEL_11;
  v4 = -[CAMViewfinderViewController _diskSpaceAlertType](self, "_diskSpaceAlertType");
  v5 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
  objc_initWeak(&location, self);
  v6 = MEMORY[0x1E0C809B0];
  if ((unint64_t)(v4 - 1) >= 2)
  {
    if (v4)
    {
      v10 = 0;
      goto LABEL_8;
    }
    v7 = (id *)&v27;
    v26 = MEMORY[0x1E0C809B0];
    v8 = __54__CAMViewfinderViewController__showDiskSpaceAlertView__block_invoke;
    v9 = &v26;
  }
  else
  {
    v7 = (id *)&v25;
    v24 = MEMORY[0x1E0C809B0];
    v8 = __54__CAMViewfinderViewController__showDiskSpaceAlertView__block_invoke_2;
    v9 = &v24;
  }
  v9[1] = 3221225472;
  v9[2] = (uint64_t)v8;
  v9[3] = (uint64_t)&unk_1EA32A810;
  objc_copyWeak(v7, &location);
  v10 = _Block_copy(v9);
  objc_destroyWeak(v7);
LABEL_8:
  v11 = (void *)MEMORY[0x1E0DC3450];
  CAMStorageAlertTitle(v4);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  CAMStorageAlertMessage(v4, v5);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "alertControllerWithTitle:message:preferredStyle:", v12, v13, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v14 = (void *)MEMORY[0x1E0DC3448];
  CAMStorageAlertDismissTitle(v4);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v23[0] = v6;
  v23[1] = 3221225472;
  v23[2] = __54__CAMViewfinderViewController__showDiskSpaceAlertView__block_invoke_3;
  v23[3] = &unk_1EA3299C8;
  v23[4] = self;
  objc_msgSend(v14, "actionWithTitle:style:handler:", v15, 0, v23);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addAction:", v16);

  CAMStorageAlertResolveTitle(v4);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (v17)
  {
    objc_msgSend(MEMORY[0x1E0DC3448], "actionWithTitle:style:handler:", v17, 0, v10);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "addAction:", v18);

  }
  objc_msgSend(v3, "actions");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "lastObject");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setPreferredAction:", v20);

  -[CAMViewfinderViewController presentViewController:animated:completion:](self, "presentViewController:animated:completion:", v3, 1, 0);
  -[CAMViewfinderViewController _setDiskSpaceAlertController:](self, "_setDiskSpaceAlertController:", v3);
  -[CAMViewfinderViewController _storageController](self, "_storageController");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "purgeableStorageContainer");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "reportLowDiskEventWithIdentifier:", CFSTR("com.apple.camera.generic"));

  objc_destroyWeak(&location);
LABEL_11:

}

uint64_t __54__CAMViewfinderViewController__showDiskSpaceAlertView__block_invoke(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_dismissDiskSpaceAlertViewAnimated:", 1);

  return PLCPLSetKeepOriginalsEnabled();
}

void __54__CAMViewfinderViewController__showDiskSpaceAlertView__block_invoke_2(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_dismissDiskSpaceAlertViewAnimated:", 1);

  CAMShowStorageUsageInSettings();
}

uint64_t __54__CAMViewfinderViewController__showDiskSpaceAlertView__block_invoke_3(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_dismissDiskSpaceAlertViewAnimated:", 1);
}

- (void)_showUnsupportedFormatAlert
{
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  _QWORD v17[4];
  id v18;
  _QWORD v19[4];
  id v20;
  uint8_t buf[16];

  v2 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DB760000, v2, OS_LOG_TYPE_DEFAULT, "External storage: cannot enable external storage output due to unsupported format", buf, 2u);
  }

  CAMLocalizedFrameworkString(CFSTR("EXTERNAL_STORAGE_UNSUPPORTED_FORMAT_TITLE"), 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  CAMLocalizedFrameworkString(CFSTR("EXTERNAL_STORAGE_UNSUPPORTED_FORMAT_MESSAGE"), 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  CAMLocalizedFrameworkString(CFSTR("OK"), 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  CAMLocalizedFrameworkString(CFSTR("EXTERNAL_STORAGE_LEARN_MORE_TITLE"), 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  CAMLocalizedFrameworkString(CFSTR("EXTERNAL_STORAGE_LEARN_MORE_URL"), 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0DC3450], "alertControllerWithTitle:message:preferredStyle:", v3, v4, 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = MEMORY[0x1E0C809B0];
  v10 = (void *)MEMORY[0x1E0DC3448];
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __58__CAMViewfinderViewController__showUnsupportedFormatAlert__block_invoke;
  v19[3] = &unk_1EA3299C8;
  v20 = v8;
  v11 = v8;
  objc_msgSend(v10, "actionWithTitle:style:handler:", v5, 0, v19);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (void *)MEMORY[0x1E0DC3448];
  v17[0] = v9;
  v17[1] = 3221225472;
  v17[2] = __58__CAMViewfinderViewController__showUnsupportedFormatAlert__block_invoke_2;
  v17[3] = &unk_1EA3299C8;
  v18 = v7;
  v14 = v7;
  objc_msgSend(v13, "actionWithTitle:style:handler:", v6, 0, v17);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "addAction:", v12);
  objc_msgSend(v11, "addAction:", v15);
  objc_msgSend(v11, "setPreferredAction:", v12);
  -[CAMViewfinderViewController presentViewController:animated:completion:](self, "presentViewController:animated:completion:", v11, 1, 0);

}

void __58__CAMViewfinderViewController__showUnsupportedFormatAlert__block_invoke(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "presentingViewController");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "dismissViewControllerAnimated:completion:", 1, 0);

}

void __58__CAMViewfinderViewController__showUnsupportedFormatAlert__block_invoke_2(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", *(_QWORD *)(a1 + 32));
  v1 = (id)objc_claimAutoreleasedReturnValue();
  CAMOpenURL(v1, MEMORY[0x1E0C9AA70]);

}

- (void)_showFrameDropsAlert
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  _QWORD v16[4];
  id v17;
  _QWORD v18[4];
  id v19;

  CAMLocalizedFrameworkString(CFSTR("EXTERNAL_STORAGE_FRAME_DROPS_ALERT_TITLE"), 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  CAMLocalizedFrameworkString(CFSTR("EXTERNAL_STORAGE_FRAME_DROPS_ALERT_MESSAGE"), 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  CAMLocalizedFrameworkString(CFSTR("OK"), 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  CAMLocalizedFrameworkString(CFSTR("EXTERNAL_STORAGE_LEARN_MORE_TITLE"), 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  CAMLocalizedFrameworkString(CFSTR("EXTERNAL_STORAGE_LEARN_MORE_URL"), 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0DC3450], "alertControllerWithTitle:message:preferredStyle:", v2, v3, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = MEMORY[0x1E0C809B0];
  v9 = (void *)MEMORY[0x1E0DC3448];
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = __51__CAMViewfinderViewController__showFrameDropsAlert__block_invoke;
  v18[3] = &unk_1EA3299C8;
  v19 = v7;
  v10 = v7;
  objc_msgSend(v9, "actionWithTitle:style:handler:", v4, 0, v18);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void *)MEMORY[0x1E0DC3448];
  v16[0] = v8;
  v16[1] = 3221225472;
  v16[2] = __51__CAMViewfinderViewController__showFrameDropsAlert__block_invoke_2;
  v16[3] = &unk_1EA3299C8;
  v17 = v6;
  v13 = v6;
  objc_msgSend(v12, "actionWithTitle:style:handler:", v5, 0, v16);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "addAction:", v11);
  objc_msgSend(v10, "addAction:", v14);
  objc_msgSend(v10, "setPreferredAction:", v11);
  -[CAMViewfinderViewController presentViewController:animated:completion:](self, "presentViewController:animated:completion:", v10, 1, 0);

}

void __51__CAMViewfinderViewController__showFrameDropsAlert__block_invoke(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "presentingViewController");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "dismissViewControllerAnimated:completion:", 1, 0);

}

void __51__CAMViewfinderViewController__showFrameDropsAlert__block_invoke_2(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", *(_QWORD *)(a1 + 32));
  v1 = (id)objc_claimAutoreleasedReturnValue();
  CAMOpenURL(v1, MEMORY[0x1E0C9AA70]);

}

- (void)pressShutterForRemoteShutter
{
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint8_t v8[16];

  v3 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_1DB760000, v3, OS_LOG_TYPE_DEFAULT, "Remote triggered shutter press and release", v8, 2u);
  }

  -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "externalButtonPressedWithBehavior:", 1);

    -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "externalButtonReleased");
  }
  else
  {
    -[CAMViewfinderViewController _shutterButton](self, "_shutterButton");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _handleShutterButtonPressed:](self, "_handleShutterButtonPressed:", v7);

    -[CAMViewfinderViewController _shutterButton](self, "_shutterButton");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _handleShutterButtonReleased:](self, "_handleShutterButtonReleased:", v6);
  }

}

- (void)pressStillDuringVideoForRemoteShutter
{
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  uint8_t v7[16];

  v3 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1DB760000, v3, OS_LOG_TYPE_DEFAULT, "Remote triggered still during video press and release", v7, 2u);
  }

  -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "externalLockButtonPressed");

    -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "externalLockButtonReleased");

  }
  else
  {
    -[CAMViewfinderViewController _handleStillDuringVideoButtonPressed:](self, "_handleStillDuringVideoButtonPressed:", self->__stillDuringVideoButton);
    -[CAMViewfinderViewController _handleStillDuringVideoButtonReleased:](self, "_handleStillDuringVideoButtonReleased:", self->__stillDuringVideoButton);
  }
}

- (void)remoteShutter:(id)a3 takePhotoWithCountdown:(unint64_t)a4
{
  double v6;
  CAMViewfinderViewController *v7;
  CAMViewfinderViewController *v8;
  unint64_t v9;
  CAMViewfinderViewController *v10;
  uint64_t v11;
  CAMViewfinderViewController *v12;
  uint64_t v13;
  id v14;

  v14 = a3;
  if (!-[CAMViewfinderViewController _isShowingCameraRoll](self, "_isShowingCameraRoll"))
  {
    if (!a4)
    {
      if (-[CAMViewfinderViewController isRecording](self, "isRecording"))
      {
        -[CAMViewfinderViewController pressStillDuringVideoForRemoteShutter](self, "pressStillDuringVideoForRemoteShutter");
        goto LABEL_23;
      }
      v10 = self;
      v11 = 0;
      goto LABEL_12;
    }
    if (a4 <= 2)
    {
      -[CAMViewfinderViewController _setResetTimerDurationAfterDelayedCapture:](self, "_setResetTimerDurationAfterDelayedCapture:", 0);
      -[CAMViewfinderViewController _setTimerDurationAndUpdateUI:animated:](self, "_setTimerDurationAndUpdateUI:animated:", 0, 1);
      v6 = (double)a4;
      v7 = self;
      v8 = 0;
LABEL_22:
      -[CAMViewfinderViewController performSelector:withObject:afterDelay:](v7, "performSelector:withObject:afterDelay:", sel_pressShutterForRemoteShutter, v8, v6);
      goto LABEL_23;
    }
    v9 = a4 - 3;
    if (a4 == 3)
    {
      -[CAMViewfinderViewController _setResetTimerDurationAfterDelayedCapture:](self, "_setResetTimerDurationAfterDelayedCapture:", 1);
      v10 = self;
      v11 = 1;
LABEL_12:
      -[CAMViewfinderViewController _setTimerDurationAndUpdateUI:animated:](v10, "_setTimerDurationAndUpdateUI:animated:", v11, 1);
LABEL_13:
      -[CAMViewfinderViewController pressShutterForRemoteShutter](self, "pressShutterForRemoteShutter");
      goto LABEL_23;
    }
    if (a4 > 4)
    {
      v9 = a4 - 5;
      if (a4 == 5)
      {
        -[CAMViewfinderViewController _setResetTimerDurationAfterDelayedCapture:](self, "_setResetTimerDurationAfterDelayedCapture:", 1);
        v10 = self;
        v11 = 2;
        goto LABEL_12;
      }
      if (a4 > 9)
      {
        -[CAMViewfinderViewController _setResetTimerDurationAfterDelayedCapture:](self, "_setResetTimerDurationAfterDelayedCapture:", 1);
        -[CAMViewfinderViewController _setTimerDurationAndUpdateUI:animated:](self, "_setTimerDurationAndUpdateUI:animated:", 3, 1);
        if (a4 == 10)
          goto LABEL_13;
        v6 = (double)(a4 - 10);
LABEL_21:
        v7 = self;
        v8 = self;
        goto LABEL_22;
      }
      -[CAMViewfinderViewController _setResetTimerDurationAfterDelayedCapture:](self, "_setResetTimerDurationAfterDelayedCapture:", 1);
      v12 = self;
      v13 = 2;
    }
    else
    {
      -[CAMViewfinderViewController _setResetTimerDurationAfterDelayedCapture:](self, "_setResetTimerDurationAfterDelayedCapture:", 1);
      v12 = self;
      v13 = 1;
    }
    -[CAMViewfinderViewController _setTimerDurationAndUpdateUI:animated:](v12, "_setTimerDurationAndUpdateUI:animated:", v13, 1);
    v6 = (double)v9;
    goto LABEL_21;
  }
  if (a4)
    objc_msgSend(v14, "countdownCanceled");
LABEL_23:

}

- (void)remoteShutterCancelCountdown:(id)a3
{
  objc_msgSend(MEMORY[0x1E0DE7910], "cancelPreviousPerformRequestsWithTarget:selector:object:", self, sel_pressShutterForRemoteShutter, 0);
  if (-[CAMViewfinderViewController _isCapturingFromTimer](self, "_isCapturingFromTimer"))
    -[CAMViewfinderViewController _stopCountdownForCaptureTimer](self, "_stopCountdownForCaptureTimer");
}

- (BOOL)remoteShutterBeginBurstCapture:(id)a3
{
  BOOL v4;
  void *v5;
  void *v6;

  if (!-[CAMViewfinderViewController _isShowingCameraRoll](self, "_isShowingCameraRoll", a3))
  {
    -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      v6 = v5;
      if (objc_msgSend(v5, "isEnabled") && (objc_msgSend(v6, "isTracking") & 1) == 0)
      {
        v4 = 1;
        objc_msgSend(v6, "externalButtonPressedWithBehavior:", 1);
LABEL_10:

        return v4;
      }
    }
    else
    {
      -[CAMViewfinderViewController _shutterButton](self, "_shutterButton");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v6, "isEnabled") && (objc_msgSend(v6, "isHighlighted") & 1) == 0)
      {
        v4 = 1;
        objc_msgSend(v6, "setHighlighted:", 1);
        -[CAMViewfinderViewController _handleShutterButtonPressed:](self, "_handleShutterButtonPressed:", v6);
        goto LABEL_10;
      }
    }
    v4 = 0;
    goto LABEL_10;
  }
  return 0;
}

- (BOOL)remoteShutterEndBurstCapture:(id)a3
{
  BOOL v4;
  void *v5;
  void *v6;

  if (!-[CAMViewfinderViewController _isShowingCameraRoll](self, "_isShowingCameraRoll", a3))
  {
    -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      v6 = v5;
      objc_msgSend(v5, "externalButtonReleased");
    }
    else
    {
      -[CAMViewfinderViewController _shutterButton](self, "_shutterButton");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      if (!objc_msgSend(v6, "isHighlighted"))
      {
        v4 = 0;
        goto LABEL_9;
      }
      objc_msgSend(v6, "setHighlighted:", 0);
      -[CAMViewfinderViewController _handleShutterButtonReleased:](self, "_handleShutterButtonReleased:", v6);
    }
    v4 = 1;
LABEL_9:

    return v4;
  }
  return 0;
}

- (void)remoteShutter:(id)a3 setMode:(int64_t)a4
{
  _BOOL8 v6;
  void *v7;
  uint64_t v8;

  if (-[CAMViewfinderViewController _isShowingCameraRoll](self, "_isShowingCameraRoll", a3))
    -[CAMViewfinderViewController dismissViewControllerAnimated:completion:](self, "dismissViewControllerAnimated:completion:", 1, 0);
  v6 = -[CAMViewfinderViewController _isSpatialVideoInVideoModeActiveForMode:devicePosition:](self, "_isSpatialVideoInVideoModeActiveForMode:devicePosition:", a4, -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"));
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "defaultDeviceForModeChange:devicePosition:spatialVideoEnabled:", a4, -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"), v6);

  -[CAMViewfinderViewController changeToMode:device:animated:](self, "changeToMode:device:animated:", a4, v8, 1);
}

- (void)remoteShutter:(id)a3 focusOn:(CGPoint)a4
{
  -[CAMPreviewViewController focusOnNormalizedPoint:](self->__previewViewController, "focusOnNormalizedPoint:", a3, a4.x, a4.y);
}

- (BOOL)remoteShutterStartCapture:(id)a3
{
  unint64_t v4;
  void *v5;
  void *v7;

  v4 = -[CAMViewfinderViewController _currentMode](self, "_currentMode", a3);
  LOBYTE(v5) = 0;
  if (v4 <= 8)
  {
    if (((1 << v4) & 0x1AE) != 0)
    {
      -[CAMViewfinderViewController pressShutterForRemoteShutter](self, "pressShutterForRemoteShutter");
      LOBYTE(v5) = 1;
    }
    else if (!v4)
    {
      -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
      v5 = (void *)objc_claimAutoreleasedReturnValue();

      if (v5)
      {
        -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        LOBYTE(v5) = 1;
        objc_msgSend(v7, "externalButtonPressedWithBehavior:", 1);

      }
    }
  }
  return (char)v5;
}

- (BOOL)remoteShutterStopCapture:(id)a3
{
  _BOOL4 v4;
  void *v5;
  void *v6;

  v4 = -[CAMViewfinderViewController isRecording](self, "isRecording", a3);
  if (v4)
  {
    if (-[CAMViewfinderViewController _currentMode](self, "_currentMode")
      || (-[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl"),
          v5 = (void *)objc_claimAutoreleasedReturnValue(),
          v5,
          !v5))
    {
      -[CAMViewfinderViewController pressShutterForRemoteShutter](self, "pressShutterForRemoteShutter");
    }
    else
    {
      -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "externalButtonReleased");

    }
  }
  return v4;
}

- (void)remoteShutter:(id)a3 setFlashMode:(int64_t)a4
{
  -[CAMViewfinderViewController _handleUserChangedToFlashMode:](self, "_handleUserChangedToFlashMode:", a4);
}

- (void)remoteShutter:(id)a3 setHDRMode:(int64_t)a4
{
  -[CAMViewfinderViewController _handleUserChangedToHDRMode:](self, "_handleUserChangedToHDRMode:", a4);
}

- (void)remoteShutter:(id)a3 setIrisMode:(int64_t)a4
{
  -[CAMViewfinderViewController _handleUserChangedToLivePhotoMode:](self, "_handleUserChangedToLivePhotoMode:", a4);
}

- (void)remoteShutter:(id)a3 setSharedLibraryMode:(int64_t)a4
{
  -[CAMViewfinderViewController _handleUserChangedToSharedLibraryMode:](self, "_handleUserChangedToSharedLibraryMode:", a4);
}

- (void)remoteShutter:(id)a3 setZoomAmount:(double)a4
{
  -[CAMViewfinderViewController _zoomFactorForZoomSliderValue:](self, "_zoomFactorForZoomSliderValue:", a3, a4);
  -[CAMViewfinderViewController _remoteShutterSetZoomFactor:](self, "_remoteShutterSetZoomFactor:");
}

- (void)_remoteShutterSetZoomFactor:(double)a3
{
  NSObject *v5;
  CAMZoomSlider *zoomSlider;
  double v7;
  uint8_t v8[16];

  if (-[CAMViewfinderViewController _isZoomAllowedCurrently](self, "_isZoomAllowedCurrently"))
  {
    if (-[CAMViewfinderViewController _shouldUseZoomControlInsteadOfSlider](self, "_shouldUseZoomControlInsteadOfSlider"))
    {
      -[CAMViewfinderViewController _createZoomControlIfNecessary](self, "_createZoomControlIfNecessary");
      -[CAMViewfinderViewController _zoomUIDidChangeToFactor:](self, "_zoomUIDidChangeToFactor:", a3);
    }
    else
    {
      -[CAMViewfinderViewController _createZoomSliderIfNecessary](self, "_createZoomSliderIfNecessary");
      zoomSlider = self->__zoomSlider;
      -[CAMViewfinderViewController _zoomSliderValueForZoomFactor:](self, "_zoomSliderValueForZoomFactor:", a3);
      *(float *)&v7 = v7;
      -[CAMZoomSlider setValue:animated:](zoomSlider, "setValue:animated:", 0, v7);
      -[CAMViewfinderViewController _zoomUIDidChangeToFactor:](self, "_zoomUIDidChangeToFactor:", a3);
      -[CAMViewfinderViewController zoomSliderDidEndZooming:](self, "zoomSliderDidEndZooming:", self->__zoomSlider);
    }
    -[CAMViewfinderViewController _setLastZoomInteractionType:](self, "_setLastZoomInteractionType:", 4);
  }
  else
  {
    v5 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_1DB760000, v5, OS_LOG_TYPE_DEFAULT, "Ignoring zoom change from Watch because not allowed at this time", v8, 2u);
    }

  }
}

- (void)remoteShutter:(id)a3 setCaptureDevice:(int64_t)a4
{
  int64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = -[CAMViewfinderViewController _currentDevice](self, "_currentDevice", a3);
  if ((unint64_t)(v6 - 1) > 0xA)
    v7 = 0;
  else
    v7 = qword_1DB9A53B8[v6 - 1];
  if ((unint64_t)(a4 - 1) > 0xA)
    v8 = 0;
  else
    v8 = qword_1DB9A53B8[a4 - 1];
  if (v7 != v8)
    -[CAMViewfinderViewController _handleFlipButtonReleased:](self, "_handleFlipButtonReleased:", self->__flipButton);
}

- (BOOL)remoteShutterShouldSuspendApp:(id)a3
{
  return !-[CAMViewfinderViewController isRecording](self, "isRecording", a3);
}

- (void)readUserPreferencesAndHandleChangesWithOverrides:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  int v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  void *v18;
  char v19;
  void *v20;
  int v21;
  void *v22;
  uint64_t v23;
  int v24;
  __CFString *v25;
  __CFString *v26;
  NSObject *v27;
  void *v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  BOOL v38;
  double v39;
  double v40;
  void *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  int64_t v46;
  __CFString *v47;
  void *v48;
  void *v49;
  void *v50;
  id v51;
  int64_t v52;
  void *v53;
  char v54;
  uint8_t buf[4];
  __CFString *v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  void *v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _callStatusMonitor](self, "_callStatusMonitor");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isCallActive");
  objc_msgSend(v5, "resetTimeoutDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v5, "isVideoConfigurationControlEnabled");
  v54 = 0;
  objc_msgSend(v5, "readPreferencesWithOverrides:emulationMode:callActive:shouldResetCaptureConfiguration:", v4, -[CAMViewfinderViewController emulationMode](self, "emulationMode"), v7, &v54);
  objc_msgSend(v5, "captureConfiguration");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "semanticStyles");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (void *)objc_msgSend(v17, "mutableCopy");
  -[CAMViewfinderViewController _setSemanticStyles:](self, "_setSemanticStyles:", v11);

  objc_msgSend(v5, "captureConfiguration");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _setSelectedSemanticStyleIndex:](self, "_setSelectedSemanticStyleIndex:", objc_msgSend(v12, "selectedSemanticStyleIndex"));

  objc_msgSend(v5, "captureConfiguration");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _setSmartStyleSystemStyleIndex:](self, "_setSmartStyleSystemStyleIndex:", objc_msgSend(v13, "smartStyleSystemStyleIndex"));

  -[CAMViewfinderViewController _updateSemanticStyleControlsForCurrentStateAnimated:](self, "_updateSemanticStyleControlsForCurrentStateAnimated:", 0);
  -[CAMViewfinderViewController _updateSmartStyleControlsForCurrentStateAnimateSliders:animateOtherControls:](self, "_updateSmartStyleControlsForCurrentStateAnimateSliders:animateOtherControls:", 0, 0);
  -[CAMViewfinderViewController _updateSmartStyleOnSession](self, "_updateSmartStyleOnSession");
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "reloadSemanticStyleBadgesDelayIfNeeded:", 0);

  -[CAMViewfinderViewController _updatePreviewSemanticStyleAnimated:](self, "_updatePreviewSemanticStyleAnimated:", 0);
  -[CAMViewfinderViewController _createOrDestroySharedLibraryControlsIfNecessary](self, "_createOrDestroySharedLibraryControlsIfNecessary");
  objc_msgSend(v5, "resetTimeoutDate");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v53 = v8;
  v16 = objc_msgSend(v8, "isEqual:", v15);
  LOBYTE(v17) = 0;
  if (v9)
    LODWORD(v17) = objc_msgSend(v5, "isVideoConfigurationControlEnabled") ^ 1;
  if (v54)
    goto LABEL_10;
  objc_msgSend(v4, "videoConfiguration");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  if (v18)
    v19 = 1;
  else
    v19 = (char)v17;
  if ((v19 & 1) != 0
    || (objc_msgSend(v4, "slomoConfiguration"), (v18 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {

LABEL_10:
    -[CAMViewfinderViewController set_videoConfigurationOverride:](self, "set_videoConfigurationOverride:", 0);
    -[CAMViewfinderViewController set_slomoConfigurationOverride:](self, "set_slomoConfigurationOverride:", 0);
    -[CAMViewfinderViewController set_cinematicConfigurationOverride:](self, "set_cinematicConfigurationOverride:", 0);
    goto LABEL_11;
  }
  objc_msgSend(v4, "cinematicConfiguration");
  v45 = (void *)objc_claimAutoreleasedReturnValue();

  if (v45)
    goto LABEL_10;
LABEL_11:
  objc_msgSend(v5, "captureConfiguration");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _setDesiredProResVideoMode:](self, "_setDesiredProResVideoMode:", objc_msgSend(v20, "proResVideoMode"));

  if (v54)
    v21 = 0;
  else
    v21 = v16;
  if (v21 != 1 || objc_msgSend(v4, "hasOverrides"))
  {
    v49 = v15;
    objc_msgSend(v5, "captureConfiguration");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "conflictingControlConfiguration");
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    +[CAMCaptureConfiguration captureGraphConfigurationUsingConfiguration:outputToExternalStorage:](CAMCaptureConfiguration, "captureGraphConfigurationUsingConfiguration:outputToExternalStorage:", v22, -[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled"));
    v23 = objc_claimAutoreleasedReturnValue();
    v51 = v4;
    v24 = objc_msgSend(v4, "hasOverrides");
    v25 = CFSTR("Reset");
    if (v24)
      v25 = CFSTR("Overrides");
    v26 = v25;
    v27 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v56 = v26;
      v57 = 2114;
      v58 = v23;
      v59 = 2114;
      v60 = v28;
      _os_log_impl(&dword_1DB760000, v27, OS_LOG_TYPE_DEFAULT, "%{public}@: will change to: %{public}@ from: %{public}@", buf, 0x20u);

    }
    v47 = v26;

    v52 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
    v46 = -[CAMViewfinderViewController _currentDevice](self, "_currentDevice");
    v29 = -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition");
    v30 = objc_msgSend(v22, "mode");
    v31 = objc_msgSend(v22, "device");
    v32 = v31;
    v50 = v6;
    v33 = (void *)v23;
    if ((unint64_t)(v31 - 1) > 0xA)
      v34 = 0;
    else
      v34 = qword_1DB9A53B8[v31 - 1];
    objc_msgSend(MEMORY[0x1E0C99D68], "now");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v53, "dateByAddingTimeInterval:", 0.01);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v37 = objc_msgSend(v35, "compare:", v36);
    v38 = v29 == v34 && v52 == v30;
    if (!v38 && v37 != 1)
      -[CAMViewfinderViewController _startCaptureSessionIfNecessaryIfVisibleAndInterrupted](self, "_startCaptureSessionIfNecessaryIfVisibleAndInterrupted");
    -[CAMViewfinderViewController _defaultZoomFactorForGraphConfiguration:](self, "_defaultZoomFactorForGraphConfiguration:", v33);
    v40 = v39;
    -[CAMViewfinderViewController _captureController](self, "_captureController");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    v42 = objc_msgSend(v41, "applyCaptureConfiguration:zoomFactor:outputToExternalStorage:", v22, -[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled"), v40);

    -[CAMViewfinderViewController _setLastConfigurationRequestID:](self, "_setLastConfigurationRequestID:", v42);
    -[CAMViewfinderViewController _remoteShutterController](self, "_remoteShutterController");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v43, "applyCaptureConfiguration:", v22);
    -[CAMViewfinderViewController applyCaptureConfiguration:conflictingControlConfiguration:](self, "applyCaptureConfiguration:conflictingControlConfiguration:", v22, v48);
    -[CAMViewfinderViewController _closeViewfinderForChangeFromMode:toMode:fromDevice:toDevice:](self, "_closeViewfinderForChangeFromMode:toMode:fromDevice:toDevice:", v52, v30, v46, v32);

    -[CAMViewfinderViewController _setWantsVisualTextAnalysis:](self, "_setWantsVisualTextAnalysis:", 0);
    v6 = v50;
    v4 = v51;
    v15 = v49;
  }
  -[CAMViewfinderViewController _createOrDestroyLevelViewModelIfNecessary](self, "_createOrDestroyLevelViewModelIfNecessary");
  -[CAMViewfinderViewController _createGridViewIfNecessary](self, "_createGridViewIfNecessary");
  -[CAMViewfinderViewController _createOrDestroyLevelViewIfNecessary](self, "_createOrDestroyLevelViewIfNecessary");
  -[CAMViewfinderViewController _createOrDestroyHorizonLevelViewIfNecessary](self, "_createOrDestroyHorizonLevelViewIfNecessary");
  -[CAMViewfinderViewController _createOrDestroyHDRBadgeIfNecessary](self, "_createOrDestroyHDRBadgeIfNecessary");
  -[CAMViewfinderViewController _createOrDestroyHDRButtonIfNecessary](self, "_createOrDestroyHDRButtonIfNecessary");
  -[CAMViewfinderViewController _updateViewfinderMaterialAnimated:](self, "_updateViewfinderMaterialAnimated:", 0);
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updateVideoConfigurationStatusIndicatorForGraphConfiguration:animated:](self, "_updateVideoConfigurationStatusIndicatorForGraphConfiguration:animated:", v44, 0);
  -[CAMViewfinderViewController _updateInterfaceModulationForGraphConfiguration:animated:](self, "_updateInterfaceModulationForGraphConfiguration:animated:", v44, 0);
  -[CAMViewfinderViewController updateControlVisibilityAnimated:](self, "updateControlVisibilityAnimated:", 1);

}

- (void)_startCaptureSessionIfNecessaryIfVisibleAndInterrupted
{
  int v3;
  void *v4;
  void *v5;
  int v6;
  id v7;

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v7, "isInterrupted");
  if (-[CAMViewfinderViewController isViewLoaded](self, "isViewLoaded"))
  {
    -[CAMViewfinderViewController view](self, "view");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "window");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (v5)
      v6 = v3;
    else
      v6 = 0;
    if (v6 == 1)
      objc_msgSend(v7, "startCaptureSessionWithRetryCount:retryInterval:logReason:completion:", 3, CFSTR("resetting graph configuration"), 0, 0.05);
  }

}

- (void)_createGridViewIfNecessary
{
  CAMGridView *v3;
  CAMGridView *v4;
  CAMGridView *gridView;
  id v6;

  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v6, "shouldShowGridView") && !self->__gridView)
  {
    v3 = [CAMGridView alloc];
    v4 = -[CAMGridView initWithFrame:](v3, "initWithFrame:", *MEMORY[0x1E0C9D648], *(double *)(MEMORY[0x1E0C9D648] + 8), *(double *)(MEMORY[0x1E0C9D648] + 16), *(double *)(MEMORY[0x1E0C9D648] + 24));
    gridView = self->__gridView;
    self->__gridView = v4;

    -[CAMViewfinderViewController _embedGridViewWithLayoutStyle:](self, "_embedGridViewWithLayoutStyle:", -[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle"));
  }
  -[CAMGridView setLevelViewModel:](self->__gridView, "setLevelViewModel:", self->__levelViewModel);

}

- (void)_createOrDestroyHorizonLevelViewIfNecessary
{
  int64_t v3;
  char v4;
  BOOL v5;
  _BOOL4 v6;
  id v7;

  v3 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v7, "shouldShowHorizonLevelView");
  v5 = -[CAMViewfinderViewController _isSpatialVideoMode:devicePosition:](self, "_isSpatialVideoMode:devicePosition:", v3, -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"));
  v6 = -[CAMViewfinderViewController _shouldCreateHorizonLevelViewForMode:](self, "_shouldCreateHorizonLevelViewForMode:", v3);
  if ((v4 & 1) != 0 || v5)
  {
    if (v6)
      -[CAMViewfinderViewController _createHorizonLevelViewIfNecessary](self, "_createHorizonLevelViewIfNecessary");
  }
  else
  {
    -[CAMViewfinderViewController _destroyHorizonLevelViewIfNecessary](self, "_destroyHorizonLevelViewIfNecessary");
  }

}

- (void)suspendCameraSessionWithCompletion:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;

  v4 = a3;
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "stopCaptureSessionWithCompletion:", v4);

  -[CAMViewfinderViewController _locationController](self, "_locationController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setEnabled:", 0);
  if (-[CAMViewfinderViewController automaticallyAdjustsApplicationIdleTimer](self, "automaticallyAdjustsApplicationIdleTimer"))
  {
    -[CAMViewfinderViewController _idleController](self, "_idleController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "stopUpdatingIdleTimer");

  }
}

- (void)resumeCameraSessionWithCompletion:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "startCaptureSessionWithRetryCount:retryInterval:logReason:completion:", 0, CFSTR("resumeCameraSession"), v4, 0.0);

}

- (void)cameraRollControllerDidFullyPresentCameraRoll:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  _BOOL4 v8;
  void *v9;
  void (**v10)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  void *v14;
  id v15;

  v4 = a3;
  -[CAMViewfinderViewController _resetMachineReadableMetadataAndProcessing](self, "_resetMachineReadableMetadataAndProcessing");
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "changeToTorchMode:", 0);
  -[CAMViewfinderViewController _imageWell](self, "_imageWell");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setScaledForInteraction:", 0);

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = -[CAMViewfinderViewController _shouldDeferMediaLoadingForGraphConfiguration:](self, "_shouldDeferMediaLoadingForGraphConfiguration:", v7);

  if (v8)
  {
    objc_msgSend(v4, "sessionIdentifier");
    dispatch_time(0, 500000000);
    v11 = MEMORY[0x1E0C809B0];
    v12 = 3221225472;
    v13 = __77__CAMViewfinderViewController_cameraRollControllerDidFullyPresentCameraRoll___block_invoke;
    v14 = &unk_1EA32AB20;
    v15 = v4;
    pl_dispatch_after();

  }
  -[CAMViewfinderViewController _cameraRollControllerAction](self, "_cameraRollControllerAction", v11, v12, v13, v14);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    -[CAMViewfinderViewController _cameraRollControllerAction](self, "_cameraRollControllerAction");
    v10 = (void (**)(void))objc_claimAutoreleasedReturnValue();
    v10[2]();

  }
}

uint64_t __77__CAMViewfinderViewController_cameraRollControllerDidFullyPresentCameraRoll___block_invoke(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1 + 32), "sessionIdentifier");
  if ((_DWORD)result == *(unsigned __int16 *)(a1 + 40))
    return objc_msgSend(*(id *)(a1 + 32), "beginAllowingStagedMediaLoading");
  return result;
}

- (void)cameraRollControllerDidDismissFullyPresentedCameraRoll:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  _BOOL4 v8;
  uint64_t v9;
  void *v10;
  uint8_t v11[16];

  v4 = a3;
  -[CAMViewfinderViewController _updateTorchModeOnControllerForMode:](self, "_updateTorchModeOnControllerForMode:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"));
  -[CAMViewfinderViewController _analyticsSessionEvent](self, "_analyticsSessionEvent");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "didDismissCameraRoll");

  -[CAMViewfinderViewController cameraRollControllerTestDelegate](self, "cameraRollControllerTestDelegate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "viewfinderViewController:didDismissPresentedCameraRoll:", self, v4);

  if (-[CAMViewfinderViewController _wantsExternalStorageOutputEnabled](self, "_wantsExternalStorageOutputEnabled")
    && !-[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled"))
  {
    v7 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_1DB760000, v7, OS_LOG_TYPE_DEFAULT, "External storage: enabling deferred SSD output on cameraRollControllerDidDismissFullyPresentedCameraRoll", v11, 2u);
    }

    -[CAMViewfinderViewController _setExternalStorageOutputEnabled:animated:](self, "_setExternalStorageOutputEnabled:animated:", 1, 1);
  }
  v8 = -[CAMViewfinderViewController _isSpatialMode:devicePosition:](self, "_isSpatialMode:devicePosition:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"));
  v9 = -[CAMViewfinderViewController _isSpatialVideoInVideoModeActiveForMode:devicePosition:](self, "_isSpatialVideoInVideoModeActiveForMode:devicePosition:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"), -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition")) | v8;
  -[CAMViewfinderViewController _motionController](self, "_motionController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setForceLandscapeOrientation:", v9);

}

- (void)cameraRollControllerRequestsCaptureSessionStopped:(id)a3
{
  void *v4;

  -[CAMViewfinderViewController _closedViewfinderController](self, "_closedViewfinderController", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addClosedViewfinderReason:", 8);

  -[CAMViewfinderViewController suspendCameraSessionWithCompletion:](self, "suspendCameraSessionWithCompletion:", 0);
}

- (void)cameraRollController:(id)a3 willShowPresentingViewControllerShouldStartCaptureSession:(BOOL)a4
{
  void *v5;
  void *v6;
  BOOL v7;

  if (a4)
  {
    -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration", a3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _callStatusMonitor](self, "_callStatusMonitor");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = -[CAMViewfinderViewController _shouldSuspendCaptureSessionForGraphConfiguration:callActive:](self, "_shouldSuspendCaptureSessionForGraphConfiguration:callActive:", v5, objc_msgSend(v6, "isCallActive"));

    if (!v7)
      -[CAMViewfinderViewController resumeCameraSessionWithCompletion:](self, "resumeCameraSessionWithCompletion:", 0);
  }
}

- (void)cameraRollControllerWillPresentPreviewController:(id)a3
{
  id v4;

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration", a3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _pausePairedVideoCaptureOnControllerIfNecessaryForGraphConfiguration:isShowingCameraRoll:](self, "_pausePairedVideoCaptureOnControllerIfNecessaryForGraphConfiguration:isShowingCameraRoll:", v4, 1);

}

- (void)cameraRollController:(id)a3 didDismissPreviewControllerShouldStartCaptureSession:(BOOL)a4
{
  _BOOL4 v4;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v4 = a4;
  v9 = a3;
  if (v4)
    -[CAMViewfinderViewController resumeCameraSessionWithCompletion:](self, "resumeCameraSessionWithCompletion:", 0);
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updatePairedVideoCaptureOnControllerForGraphConfiguration:isShowingCameraRoll:](self, "_updatePairedVideoCaptureOnControllerForGraphConfiguration:isShowingCameraRoll:", v6, 0);
  -[CAMViewfinderViewController _analyticsSessionEvent](self, "_analyticsSessionEvent");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "didDismissCameraRoll");

  -[CAMViewfinderViewController cameraRollControllerTestDelegate](self, "cameraRollControllerTestDelegate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "viewfinderViewController:didDismissPresentedCameraRoll:", self, v9);

}

- (BOOL)cameraRollControllerShouldRequestUnlock:(id)a3
{
  void *v3;

  -[CAMViewfinderViewController unlockDelegate](self, "unlockDelegate", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3 || +[CAMFrameworkUtilities isPasscodeLocked](CAMFrameworkUtilities, "isPasscodeLocked");
}

- (CGRect)cameraRollControllerSourceAssetRect:(id)a3
{
  void *v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  void *v23;
  void *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  CGRect result;

  -[CAMViewfinderViewController _imageWell](self, "_imageWell", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _imageWell](self, "_imageWell");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "bounds");
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  -[CAMViewfinderViewController _imageWell](self, "_imageWell");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "alignmentRectForFrame:scaledForInteraction:", objc_msgSend(v14, "isScaledForInteraction"), v7, v9, v11, v13);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  v22 = v21;

  -[CAMViewfinderViewController view](self, "view");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _imageWell](self, "_imageWell");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "convertRect:fromView:", v24, v16, v18, v20, v22);
  v26 = v25;
  v28 = v27;
  v30 = v29;
  v32 = v31;

  v33 = v26;
  v34 = v28;
  v35 = v30;
  v36 = v32;
  result.size.height = v36;
  result.size.width = v35;
  result.origin.y = v34;
  result.origin.x = v33;
  return result;
}

- (void)_imageWellSetContentHidden:(BOOL)a3
{
  _BOOL8 v3;
  id v4;

  v3 = a3;
  -[CAMViewfinderViewController _imageWell](self, "_imageWell");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setThumbnailImageHidden:", v3);

}

- (void)cameraRollController:(id)a3 shouldHideSourceAsset:(BOOL)a4
{
  -[CAMViewfinderViewController _imageWellSetContentHidden:](self, "_imageWellSetContentHidden:", a4);
}

- (CGRect)cameraRollControllerPreviewSourceRect:(id)a3
{
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  CGRect result;

  -[CAMViewfinderViewController _imageWell](self, "_imageWell", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "frame");
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;

  -[CAMViewfinderViewController _imageWell](self, "_imageWell");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "tappableEdgeInsets");
  v15 = v6 + v14;
  v17 = v8 + v16;
  v19 = v10 - (v14 + v18);
  v21 = v12 - (v16 + v20);

  -[CAMViewfinderViewController _imageWell](self, "_imageWell");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "window");
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  -[CAMViewfinderViewController _imageWell](self, "_imageWell");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "superview");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "convertRect:fromView:", v25, v15, v17, v19, v21);
  v27 = v26;
  v29 = v28;
  v31 = v30;
  v33 = v32;

  v34 = v27;
  v35 = v29;
  v36 = v31;
  v37 = v33;
  result.size.height = v37;
  result.size.width = v36;
  result.origin.y = v35;
  result.origin.x = v34;
  return result;
}

- (id)cameraRollControllerImageForReveal:(id)a3
{
  void *v3;
  void *v4;

  -[CAMViewfinderViewController _imageWell](self, "_imageWell", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "thumbnailImage");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (void)cameraRollControllerRevealWillBegin:(id)a3
{
  -[CAMViewfinderViewController _imageWellSetContentHidden:](self, "_imageWellSetContentHidden:", 1);
}

- (void)cameraRollControllerRevealDidEnd:(id)a3
{
  -[CAMViewfinderViewController _imageWellSetContentHidden:](self, "_imageWellSetContentHidden:", 0);
}

- (void)cameraRollControllerWillPresentCameraRoll:(id)a3 withOneUpController:(id)a4
{
  id v6;
  id v7;
  id v8;

  v6 = a4;
  v7 = a3;
  -[CAMViewfinderViewController cameraRollControllerTestDelegate](self, "cameraRollControllerTestDelegate");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "viewfinderViewController:willPresentCameraRoll:withOneUpController:", self, v7, v6);

}

- (int64_t)cameraRollControllerPreferredPresentationOrientation:(id)a3
{
  void *v4;
  void *v5;
  int64_t v6;
  int64_t homeIndicatorAutoHideOrientation;
  void *v8;
  uint64_t v9;
  _BOOL4 v10;
  void *v11;
  unint64_t v12;
  int v13;

  -[CAMViewfinderViewController view](self, "view", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "window");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = CAMInterfaceOrientationForWindow(v5);

  if (-[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle") == 4)
  {
    homeIndicatorAutoHideOrientation = self->__homeIndicatorAutoHideOrientation;
    -[CAMViewfinderViewController _motionController](self, "_motionController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "captureOrientation");
    v10 = CAMIsDeviceOrientationLocked();
    objc_msgSend(MEMORY[0x1E0DC3708], "currentDevice");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "orientation") - 5;

    v13 = v9 == 2 || v10;
    if (v12 < 2)
      v13 = 1;
    if (v13)
      v6 = 1;
    else
      v6 = homeIndicatorAutoHideOrientation;

  }
  return v6;
}

- (void)_handleCallStatusMonitorDidChangeCallActive:(id)a3
{
  NSObject *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  _BOOL4 v8;
  void *v9;
  int v10;
  unint64_t v11;
  void *v12;
  int v13;
  NSObject *v14;
  void *v15;
  uint8_t v16[16];
  uint8_t buf[16];

  v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DB760000, v4, OS_LOG_TYPE_DEFAULT, "Received CAMCallStatusMonitorDidChangeCallActiveNotification", buf, 2u);
  }

  -[CAMViewfinderViewController _callStatusMonitor](self, "_callStatusMonitor");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isCallActive");

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = -[CAMViewfinderViewController _shouldSuspendCaptureSessionForGraphConfiguration:callActive:](self, "_shouldSuspendCaptureSessionForGraphConfiguration:callActive:", v7, v6 ^ 1);

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = -[CAMViewfinderViewController _shouldSuspendCaptureSessionForGraphConfiguration:callActive:](self, "_shouldSuspendCaptureSessionForGraphConfiguration:callActive:", v9, v6);

  v11 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
  -[CAMViewfinderViewController _updateModeDisabledForCurrentStateAnimated:](self, "_updateModeDisabledForCurrentStateAnimated:", 0);
  if (v11 <= 9 && ((1 << v11) & 0x251) != 0 || (v8 & ~v10) == 1)
  {
    -[CAMViewfinderViewController _captureController](self, "_captureController");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "isCapturingCTMVideo");

    if (v13)
    {
      v14 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v16 = 0;
        _os_log_impl(&dword_1DB760000, v14, OS_LOG_TYPE_DEFAULT, "CAMCallStatusMonitorDidChangeCallActiveNotification: Ending quick take recording due to audio configuration update", v16, 2u);
      }

      -[CAMViewfinderViewController _stopCapturingCTMVideo](self, "_stopCapturingCTMVideo");
      -[CAMViewfinderViewController _dynamicShutterControl](self, "_dynamicShutterControl");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "resetAnimated:", 1);

    }
    -[CAMViewfinderViewController _reconfigureCaptureGraphWithCurrentMode](self, "_reconfigureCaptureGraphWithCurrentMode");
  }
}

- (void)setTorchMode:(int64_t)a3
{
  -[CAMViewfinderViewController _handleUserChangedToFlashMode:](self, "_handleUserChangedToFlashMode:", +[CAMCaptureConversions flashModeForTorchMode:](CAMCaptureConversions, "flashModeForTorchMode:", a3));
}

- (void)setHDRMode:(int64_t)a3
{
  id v5;

  -[CAMViewfinderViewController _HDRButton](self, "_HDRButton");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setHDRMode:", a3);
  -[CAMViewfinderViewController _handleHDRButtonChangedHDRMode](self, "_handleHDRButtonChangedHDRMode");

}

- (void)setTimerDuration:(int64_t)a3
{
  id v5;

  -[CAMViewfinderViewController _timerButton](self, "_timerButton");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setDuration:", a3);
  -[CAMViewfinderViewController _handleTimerButtonChangedTimerDuration](self, "_handleTimerButtonChangedTimerDuration");

}

- (void)changeToMode:(int64_t)a3 device:(int64_t)a4
{
  -[CAMViewfinderViewController changeToMode:device:animated:](self, "changeToMode:device:animated:", a3, a4, 0);
}

- (void)changeToMode:(int64_t)a3 device:(int64_t)a4 animated:(BOOL)a5
{
  _BOOL8 v5;
  void *v9;
  void *v10;
  int v11;
  unint64_t v12;
  NSObject *v13;
  _BOOL4 v14;
  __CFString *v15;
  __CFString *v16;
  __CFString *v17;
  uint64_t v18;
  void *v19;
  double v20;
  double v21;
  int v22;
  __CFString *v23;
  __int16 v24;
  __CFString *v25;
  uint64_t v26;

  v5 = a5;
  v26 = *MEMORY[0x1E0C80C00];
  -[CAMViewfinderViewController availableCaptureModes](self, "availableCaptureModes");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v9, "containsObject:", v10);

  if (v11)
  {
    v12 = a3;
  }
  else
  {
    v12 = -[CAMViewfinderViewController _availableDefaultCaptureMode](self, "_availableDefaultCaptureMode");
    v13 = os_log_create("com.apple.camera", "Camera");
    v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    if (v12 == -1)
    {
      if (v14)
      {
        if ((unint64_t)a3 > 9)
          v15 = 0;
        else
          v15 = off_1EA32B058[a3];
        v22 = 138543362;
        v23 = v15;
        _os_log_impl(&dword_1DB760000, v13, OS_LOG_TYPE_DEFAULT, "Ignoring request to change to unavailable mode %{public}@ because no valid mode is available", (uint8_t *)&v22, 0xCu);
      }
      goto LABEL_28;
    }
    if (v14)
    {
      if (v12 > 9)
        v16 = 0;
      else
        v16 = off_1EA32B058[v12];
      if ((unint64_t)a3 > 9)
        v17 = 0;
      else
        v17 = off_1EA32B058[a3];
      v22 = 138543618;
      v23 = v16;
      v24 = 2114;
      v25 = v17;
      _os_log_impl(&dword_1DB760000, v13, OS_LOG_TYPE_DEFAULT, "Falling back to mode %{public}@ because requested mode %{public}@ is unavailable", (uint8_t *)&v22, 0x16u);
    }

  }
  if (v12 != -1)
  {
    if (v12 == 8)
    {
      v18 = 1;
    }
    else
    {
      if (v12 != 9)
      {
LABEL_24:
        -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
        v13 = objc_claimAutoreleasedReturnValue();
        -[CAMViewfinderViewController _graphConfigurationForChangeToMode:device:fromGraphConfiguration:](self, "_graphConfigurationForChangeToMode:device:fromGraphConfiguration:", v12, a4, v13);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        if (-[CAMViewfinderViewController _shouldResetZoomForChangeFromMode:toMode:](self, "_shouldResetZoomForChangeFromMode:toMode:", -[NSObject mode](v13, "mode"), objc_msgSend(v19, "mode")))
        {
          -[CAMViewfinderViewController _defaultZoomFactorForGraphConfiguration:](self, "_defaultZoomFactorForGraphConfiguration:", v19);
        }
        else
        {
          -[CAMViewfinderViewController _cachedVideoZoomFactor](self, "_cachedVideoZoomFactor");
        }
        v21 = v20;
        -[CAMViewfinderViewController _willChangeToGraphConfiguration:zoomFactor:fromGraphConfiguration:animated:](self, "_willChangeToGraphConfiguration:zoomFactor:fromGraphConfiguration:animated:", v19, v13, v5);
        -[CAMViewfinderViewController _changeToGraphConfiguration:zoomFactor:fromGraphConfiguration:](self, "_changeToGraphConfiguration:zoomFactor:fromGraphConfiguration:", v19, v13, v21);

LABEL_28:
        goto LABEL_29;
      }
      v18 = 0;
    }
    -[CAMViewfinderViewController _setSpatialModeHasVideoSelected:](self, "_setSpatialModeHasVideoSelected:", v18);
    goto LABEL_24;
  }
LABEL_29:

}

- (BOOL)_isCapturing
{
  void *v3;
  BOOL v4;

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (objc_msgSend(v3, "isCapturingVideo") & 1) != 0
    || (objc_msgSend(v3, "isCapturingPanorama") & 1) != 0
    || (objc_msgSend(v3, "isCapturingTimelapse") & 1) != 0
    || (objc_msgSend(v3, "isCapturingLowLightImage") & 1) != 0
    || -[CAMViewfinderViewController _isCapturingFromTimer](self, "_isCapturingFromTimer");

  return v4;
}

- (BOOL)isRecording
{
  void *v2;
  char v3;

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v2, "isCapturingVideo") & 1) != 0 || (objc_msgSend(v2, "isCapturingPanorama") & 1) != 0)
    v3 = 1;
  else
    v3 = objc_msgSend(v2, "isCapturingTimelapse");

  return v3;
}

- (BOOL)isCapturingPhoto
{
  void *v2;
  char v3;

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isCapturingStillImage");

  return v3;
}

- (BOOL)isCapturingLivePhoto
{
  void *v2;
  char v3;

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isCapturingLivePhotoVideo");

  return v3;
}

- (BOOL)capturePhoto
{
  unint64_t v3;

  v3 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
  return v3 <= 9
      && ((1 << v3) & 0x253) != 0
      && -[CAMViewfinderViewController _captureStillImageWithCurrentSettings](self, "_captureStillImageWithCurrentSettings");
}

- (BOOL)startRecording
{
  void *v3;
  void *v4;
  _BOOL4 v5;
  NSObject *v6;
  BOOL v7;
  unint64_t v8;
  void *v9;
  BOOL v10;
  uint8_t v12[16];

  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _callStatusMonitor](self, "_callStatusMonitor");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = -[CAMViewfinderViewController _shouldDisableModeForGraphConfiguration:callActive:](self, "_shouldDisableModeForGraphConfiguration:callActive:", v3, objc_msgSend(v4, "isCallActive"));

  if (v5)
  {
    v6 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_1DB760000, v6, OS_LOG_TYPE_DEFAULT, "Ignoring startRecording while current mode is disabled", v12, 2u);
    }

    v7 = 0;
    goto LABEL_13;
  }
  v8 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
  v7 = 0;
  if (v8 > 8)
    goto LABEL_13;
  if (((1 << v8) & 0x186) != 0)
  {
    -[CAMViewfinderViewController _videoCaptureRequestWithCurrentSettings](self, "_videoCaptureRequestWithCurrentSettings");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = -[CAMViewfinderViewController _startCapturingVideoWithRequest:](self, "_startCapturingVideoWithRequest:", v9);
LABEL_12:
    v7 = v10;

    goto LABEL_13;
  }
  if (v8 == 3)
  {
    -[CAMViewfinderViewController _panoramaCaptureRequestWithCurrentSettings](self, "_panoramaCaptureRequestWithCurrentSettings");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = -[CAMViewfinderViewController _startCapturingPanoramaWithRequest:](self, "_startCapturingPanoramaWithRequest:", v9);
    goto LABEL_12;
  }
  if (v8 == 5)
    v7 = -[CAMViewfinderViewController _startTimelapse](self, "_startTimelapse");
LABEL_13:

  return v7;
}

- (BOOL)stopRecording
{
  unint64_t v3;

  v3 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
  if (v3 <= 8)
  {
    if (((1 << v3) & 0x186) != 0)
      return -[CAMViewfinderViewController _stopCapturingVideo](self, "_stopCapturingVideo");
    if (v3 == 3)
      return -[CAMViewfinderViewController _stopCapturingPanorama](self, "_stopCapturingPanorama");
    if (v3 == 5)
      return -[CAMViewfinderViewController _stopTimelapse](self, "_stopTimelapse");
  }
  return 0;
}

- (void)setAvailableCaptureModes:(id)a3
{
  NSSet *v4;
  NSSet *v5;
  NSSet *v6;
  NSSet *availableCaptureModes;
  int64_t v8;
  void *v9;
  char v10;
  void *v11;
  void *v12;
  void *v13;
  int64_t v14;
  _BOOL8 v15;
  char v16;
  _BOOL8 v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  uint8_t v21[16];

  v4 = (NSSet *)a3;
  v5 = v4;
  if (self->_availableCaptureModes != v4)
  {
    v6 = (NSSet *)-[NSSet copy](v4, "copy");
    availableCaptureModes = self->_availableCaptureModes;
    self->_availableCaptureModes = v6;

    v8 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = -[NSSet containsObject:](v5, "containsObject:", v9);

    if (-[CAMViewfinderViewController isViewLoaded](self, "isViewLoaded"))
    {
      -[CAMViewfinderViewController _modeDial](self, "_modeDial");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "reloadData");
      -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "modeSelector");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "reloadData");

      v14 = -[CAMViewfinderViewController _availableDefaultCaptureMode](self, "_availableDefaultCaptureMode");
      v15 = -[CAMViewfinderViewController _isSpatialVideoInVideoModeActiveForMode:devicePosition:](self, "_isSpatialVideoInVideoModeActiveForMode:devicePosition:", v14, -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"));
      if (v8 == v14)
        v16 = 1;
      else
        v16 = v10;
      if ((v16 & 1) == 0 && v14 != -1)
      {
        v17 = v15;
        +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v18, "defaultDeviceForModeChange:devicePosition:spatialVideoEnabled:", v14, -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition"), v17);

        -[CAMViewfinderViewController changeToMode:device:animated:](self, "changeToMode:device:animated:", v14, v19, 0);
      }

    }
    else if ((v10 & 1) == 0)
    {
      v20 = os_log_create("com.apple.camera", "Camera");
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v21 = 0;
        _os_log_impl(&dword_1DB760000, v20, OS_LOG_TYPE_DEFAULT, "Unable to automatically change to a valid mode – view isn't loaded yet", v21, 2u);
      }

    }
  }

}

- (void)setDisablingAdditionalCaptures:(BOOL)a3
{
  if (self->_disablingAdditionalCaptures != a3)
  {
    self->_disablingAdditionalCaptures = a3;
    if (!a3)
      -[CAMViewfinderViewController _setPreventingAdditionalCaptures:](self, "_setPreventingAdditionalCaptures:", 0);
  }
}

- (void)setMessagesTransitionState:(int64_t)a3 animated:(BOOL)a4
{
  _BOOL8 v4;
  NSObject *v7;
  __CFString *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  int64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  int v20;
  void *v21;
  void *v22;
  _BOOL4 v23;
  _BOOL8 v24;
  void *v25;
  void *v26;
  int v27;
  __CFString *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (self->_messagesTransitionState == a3)
    return;
  v4 = a4;
  self->_messagesTransitionState = a3;
  v7 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    if ((unint64_t)a3 > 4)
      v8 = 0;
    else
      v8 = off_1EA32AF98[a3];
    v27 = 138543362;
    v28 = v8;
    _os_log_impl(&dword_1DB760000, v7, OS_LOG_TYPE_DEFAULT, "MessagesTransitionState set to %{public}@", (uint8_t *)&v27, 0xCu);
  }

  v9 = -[CAMViewfinderViewController _shouldDisableUserInteractionForTransitioning](self, "_shouldDisableUserInteractionForTransitioning") ^ 1;
  -[CAMViewfinderViewController view](self, "view");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setUserInteractionEnabled:", v9);

  -[CAMViewfinderViewController _updatePhysicalButtonCapturedEnabledResigningActiveOrDisappearing:](self, "_updatePhysicalButtonCapturedEnabledResigningActiveOrDisappearing:", 0);
  -[CAMViewfinderViewController _closedViewfinderController](self, "_closedViewfinderController");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  switch(-[CAMViewfinderViewController messagesTransitionState](self, "messagesTransitionState"))
  {
    case 0:
    case 4:
      objc_msgSend(v11, "removeClosedViewfinderReason:", 12);
      objc_msgSend(v11, "removeClosedViewfinderReason:", 11);
      -[CAMViewfinderViewController _setPreventingAdditionalCaptures:](self, "_setPreventingAdditionalCaptures:", 0);
      break;
    case 1:
      v12 = v11;
      v13 = 11;
      goto LABEL_11;
    case 2:
      v12 = v11;
      v13 = 12;
LABEL_11:
      objc_msgSend(v12, "addClosedViewfinderReason:", v13);
      break;
    case 3:
      -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "setControlDrawerExpanded:forReason:animated:", 0, 7, 0);

      -[CAMViewfinderViewController _collapseExpandedButtonsAnimated:](self, "_collapseExpandedButtonsAnimated:", 0);
      break;
    default:
      break;
  }
  v15 = -[CAMViewfinderViewController messagesTransitionState](self, "messagesTransitionState");
  if ((unint64_t)(v15 - 2) < 3 || !v15)
  {
    -[CAMViewfinderViewController _creativeCameraButton](self, "_creativeCameraButton");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = v16;
    v18 = 0;
    goto LABEL_18;
  }
  if (v15 == 1)
  {
    -[CAMViewfinderViewController _creativeCameraButton](self, "_creativeCameraButton");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = v16;
    v18 = 1;
LABEL_18:
    objc_msgSend(v16, "setActive:", v18);

  }
  if (-[CAMViewfinderViewController messagesTransitionState](self, "messagesTransitionState") == 4)
  {
    -[CAMViewfinderViewController _closedViewfinderController](self, "_closedViewfinderController");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v19, "isViewfinderClosed");

    if (v20)
    {
      -[CAMViewfinderViewController _transitionController](self, "_transitionController");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "closeWithBlur:animated:withCompletionHandler:", 1, 0, 0);

    }
  }
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = -[CAMViewfinderViewController _shouldHideShutterButtonForGraphConfiguration:](self, "_shouldHideShutterButtonForGraphConfiguration:", v22);

  v24 = !v23;
  -[CAMViewfinderViewController _shutterButton](self, "_shutterButton");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "setAlpha:", (double)v24);

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "setShutterControlVisible:", v24);

  -[CAMViewfinderViewController updateControlVisibilityAnimated:](self, "updateControlVisibilityAnimated:", v4);
}

- (int64_t)_availableDefaultCaptureMode
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  int64_t v5;
  int v6;
  int v7;
  void *v8;

  -[CAMViewfinderViewController availableCaptureModes](self, "availableCaptureModes");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "count");
  if (v3 == 1)
  {
LABEL_8:
    objc_msgSend(v2, "anyObject");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v8, "integerValue");

    goto LABEL_10;
  }
  if (v3)
  {
    v6 = objc_msgSend(v2, "containsObject:", &unk_1EA3B0400);
    v7 = objc_msgSend(v2, "containsObject:", &unk_1EA3B0418);
    if ((v6 & 1) != 0 || v7)
    {
      v5 = v6 ^ 1u;
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    -[CAMViewfinderViewController _availableDefaultCaptureMode].cold.1();

  v5 = -1;
LABEL_10:

  return v5;
}

- (id)_supportedCaptureModes
{
  id v3;
  void *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  _BOOL4 v12;
  int v13;
  int v15;
  int v16;

  v3 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v4, "isCTMSupported");
  if ((objc_msgSend(v4, "isBackTimelapseSupported") & 1) != 0)
    v5 = 0;
  else
    v5 = objc_msgSend(v4, "isFrontTimelapseSupported") ^ 1;
  if ((objc_msgSend(v4, "isBackSlomoSupported") & 1) != 0)
    v6 = 0;
  else
    v6 = objc_msgSend(v4, "isFrontSlomoSupported") ^ 1;
  v7 = objc_msgSend(v4, "isVideoSupported");
  v8 = objc_msgSend(v4, "isSquareModeSupported");
  if ((objc_msgSend(v4, "isBackPanoramaSupported") & 1) != 0)
    v9 = 0;
  else
    v9 = objc_msgSend(v4, "isFrontPanoramaSupported") ^ 1;
  v10 = objc_msgSend(v4, "isPortraitModeSupported");
  v15 = objc_msgSend(v4, "isSpatialModeSupported");
  if ((objc_msgSend(v4, "portraitInPhotoModeBehavior") & 8) != 0)
    v11 = 0;
  else
    v11 = v10;
  v12 = -[CAMViewfinderViewController isEmulatingImagePicker](self, "isEmulatingImagePicker");
  v13 = objc_msgSend(v4, "isCinematicModeSupported");
  if (((v5 | v12) & 1) == 0)
    objc_msgSend(v3, "addObject:", &unk_1EA3B04F0);
  if (((v6 | v12) & 1) == 0)
    objc_msgSend(v3, "addObject:", &unk_1EA3B0478);
  if (v7)
    objc_msgSend(v3, "addObject:", &unk_1EA3B0418);
  objc_msgSend(v3, "addObject:", &unk_1EA3B0400);
  if (v11)
    objc_msgSend(v3, "addObject:", &unk_1EA3B0430);
  if (((v8 ^ 1 | v16 | v12) & 1) == 0)
    objc_msgSend(v3, "addObject:", &unk_1EA3B04C0);
  if (((v9 | v12) & 1) == 0)
    objc_msgSend(v3, "addObject:", &unk_1EA3B04A8);
  if (((v13 ^ 1 | v12) & 1) == 0)
    objc_msgSend(v3, "addObject:", &unk_1EA3B04D8);
  if (((v15 ^ 1 | v12) & 1) == 0)
  {
    objc_msgSend(v3, "addObject:", &unk_1EA3B03D0);
    objc_msgSend(v3, "addObject:", &unk_1EA3B0490);
  }

  return v3;
}

- (void)_setPreventingAdditionalCaptures:(BOOL)a3
{
  _BOOL4 v3;
  NSObject *v5;
  _DWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (self->_preventingAdditionalCaptures != a3)
  {
    v3 = a3;
    v5 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6[0] = 67109120;
      v6[1] = v3;
      _os_log_impl(&dword_1DB760000, v5, OS_LOG_TYPE_DEFAULT, "Preventing additional captures %d", (uint8_t *)v6, 8u);
    }

    self->_preventingAdditionalCaptures = v3;
    -[CAMViewfinderViewController _updateEnabledControlsWithReason:](self, "_updateEnabledControlsWithReason:", CFSTR("Preventing Multiple Captures for Single-Capture-Only Client"));
  }
}

- (void)setAutomaticallyAdjustsApplicationIdleTimer:(BOOL)a3
{
  _BOOL4 v3;
  void *v4;
  id v5;

  if (self->_automaticallyAdjustsApplicationIdleTimer != a3)
  {
    v3 = a3;
    self->_automaticallyAdjustsApplicationIdleTimer = a3;
    -[CAMViewfinderViewController _idleController](self, "_idleController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = v4;
    if (v3)
      objc_msgSend(v4, "startUpdatingIdleTimer");
    else
      objc_msgSend(v4, "stopUpdatingIdleTimer");

  }
}

- (void)setPersistenceBehavior:(unint64_t)a3
{
  _BOOL4 v5;
  unint64_t v6;

  if (self->_persistenceBehavior != a3)
  {
    v5 = -[CAMViewfinderViewController isEmulatingImagePicker](self, "isEmulatingImagePicker");
    v6 = 3;
    if (!v5)
      v6 = a3;
    self->_persistenceBehavior = v6;
  }
}

- (void)setShowingStandardControls:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  id v6;

  if (self->_showingStandardControls != a3)
  {
    v3 = a3;
    self->_showingStandardControls = a3;
    -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setShowingStandardControls:", v3);
    if (v3)
    {
      -[CAMViewfinderViewController _createCommonControlsIfNecessary](self, "_createCommonControlsIfNecessary");
      -[CAMViewfinderViewController _createCommonGestureRecognizersIfNecessary](self, "_createCommonGestureRecognizersIfNecessary");
      -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMViewfinderViewController _createModeSpecificControlsForConfiguration:](self, "_createModeSpecificControlsForConfiguration:", v5);

    }
    else
    {
      -[CAMViewfinderViewController _destroyGestureRecognizersRequiringStandardControls](self, "_destroyGestureRecognizersRequiringStandardControls");
      -[CAMViewfinderViewController _unembedAndDestroyAllControls](self, "_unembedAndDestroyAllControls");
    }

  }
}

- (void)setImagePickerVideoConfiguration:(int64_t)a3
{
  _BOOL4 v4;
  int64_t v5;

  if (self->_imagePickerVideoConfiguration != a3)
  {
    self->_imagePickerVideoConfiguration = a3;
    v4 = -[CAMViewfinderViewController isEmulatingImagePicker](self, "isEmulatingImagePicker");
    v5 = -[CAMViewfinderViewController _currentMode](self, "_currentMode");
    if (v4 && v5 == 1)
      -[CAMViewfinderViewController _reconfigureCaptureGraphWithCurrentMode](self, "_reconfigureCaptureGraphWithCurrentMode");
  }
}

- (void)setCustomPreviewViewTransform:(CGAffineTransform *)a3
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  CGAffineTransform v9;
  CGAffineTransform t1;

  if (-[CAMViewfinderViewController emulationMode](self, "emulationMode"))
  {
    v5 = *(_OWORD *)&self->_customPreviewViewTransform.c;
    *(_OWORD *)&t1.a = *(_OWORD *)&self->_customPreviewViewTransform.a;
    *(_OWORD *)&t1.c = v5;
    *(_OWORD *)&t1.tx = *(_OWORD *)&self->_customPreviewViewTransform.tx;
    v6 = *(_OWORD *)&a3->c;
    *(_OWORD *)&v9.a = *(_OWORD *)&a3->a;
    *(_OWORD *)&v9.c = v6;
    *(_OWORD *)&v9.tx = *(_OWORD *)&a3->tx;
    if (!CGAffineTransformEqualToTransform(&t1, &v9))
    {
      v7 = *(_OWORD *)&a3->a;
      v8 = *(_OWORD *)&a3->tx;
      *(_OWORD *)&self->_customPreviewViewTransform.c = *(_OWORD *)&a3->c;
      *(_OWORD *)&self->_customPreviewViewTransform.tx = v8;
      *(_OWORD *)&self->_customPreviewViewTransform.a = v7;
      -[CAMViewfinderViewController _applyTransformsForAutorotationStyle:](self, "_applyTransformsForAutorotationStyle:", -[CAMViewfinderViewController autorotationStyle](self, "autorotationStyle"));
    }
  }
}

- (void)setPerformingReviewUsingOverlay:(BOOL)a3
{
  _BOOL4 v3;
  void *v5;
  id v6;

  if (self->_performingReviewUsingOverlay != a3)
  {
    v3 = a3;
    self->_performingReviewUsingOverlay = a3;
    -[CAMViewfinderViewController updateControlVisibilityAnimated:](self, "updateControlVisibilityAnimated:", 1);
    -[CAMViewfinderViewController _updateTorchModeOnControllerForMode:](self, "_updateTorchModeOnControllerForMode:", -[CAMViewfinderViewController _currentMode](self, "_currentMode"));
    -[CAMViewfinderViewController _closedViewfinderController](self, "_closedViewfinderController");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _disabledPreviewController](self, "_disabledPreviewController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v3)
    {
      objc_msgSend(v6, "addClosedViewfinderReason:", 9);
      objc_msgSend(v5, "addDisabledPreviewReason:", 1);
    }
    else
    {
      objc_msgSend(v6, "removeClosedViewfinderReason:", 9);
      objc_msgSend(v5, "removeDisabledPreviewReason:", 1);
      if (-[CAMViewfinderViewController isDisablingAdditionalCaptures](self, "isDisablingAdditionalCaptures"))
        -[CAMViewfinderViewController _setPreventingAdditionalCaptures:](self, "_setPreventingAdditionalCaptures:", 0);
    }

  }
}

- (CGRect)reviewUsingOverlayFrame
{
  void *v3;
  void *v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat Width;
  void *v13;
  void *v14;
  int64_t v15;
  CGFloat MinX;
  CGFloat MinY;
  CGFloat Height;
  CGFloat v19;
  CGFloat v20;
  double v21;
  double v22;
  double v23;
  double v24;
  CGRect v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;
  CGRect result;

  -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "previewView");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "bounds");
  v6 = v5;
  v8 = v7;
  v10 = v9;
  Width = v11;
  -[CAMViewfinderViewController view](self, "view");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "window");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = CAMInterfaceOrientationForWindow(v14);

  if ((unint64_t)(v15 - 3) <= 1)
  {
    v25.origin.x = v6;
    v25.origin.y = v8;
    v25.size.width = v10;
    v25.size.height = Width;
    MinX = CGRectGetMinX(v25);
    v26.origin.x = v6;
    v26.origin.y = v8;
    v26.size.width = v10;
    v26.size.height = Width;
    MinY = CGRectGetMinY(v26);
    v27.origin.x = v6;
    v27.origin.y = v8;
    v27.size.width = v10;
    v27.size.height = Width;
    Height = CGRectGetHeight(v27);
    v28.origin.x = v6;
    v28.origin.y = v8;
    v28.size.width = v10;
    v28.size.height = Width;
    Width = CGRectGetWidth(v28);
    v10 = Height;
    v8 = MinY;
    v6 = MinX;
  }
  v29.origin.x = v6;
  v29.origin.y = v8;
  v29.size.width = v10;
  v29.size.height = Width;
  v19 = CGRectGetWidth(v29);
  v30.origin.x = v6;
  v30.origin.y = v8;
  v30.size.width = v10;
  v30.size.height = Width;
  v20 = CGRectGetHeight(v30);

  v21 = 0.0;
  v22 = 0.0;
  v23 = v19;
  v24 = v20;
  result.size.height = v24;
  result.size.width = v23;
  result.origin.y = v22;
  result.origin.x = v21;
  return result;
}

- (int64_t)_videoConfigurationForImagePickerQualityType:(int64_t)a3
{
  if ((unint64_t)a3 >= 6)
    return 0;
  else
    return a3 + 10000;
}

- (void)captureController:(id)a3 didOutputShallowDepthOfFieldStatus:(int64_t)a4 stagePreviewStatus:(int64_t)a5
{
  unint64_t v8;
  void *v9;
  void *v10;
  unint64_t v11;
  unsigned int v12;
  int64_t v13;
  int64_t v15;
  NSObject *v16;
  __CFString *v17;
  __CFString *v18;
  __CFString *v19;
  int v20;
  __CFString *v21;
  __int16 v22;
  __CFString *v23;
  __int16 v24;
  __CFString *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v8 = -[CAMViewfinderViewController _currentMode](self, "_currentMode", a3);
  switch(v8)
  {
    case 0uLL:
      +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v9, "isPhotoModeDepthSuggestionSupportedForDevicePosition:", -[CAMViewfinderViewController _currentDevicePosition](self, "_currentDevicePosition")))
      {
        +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v10, "featureDevelopmentIgnoreDepthSuggestionInPhotoMode"))
          a4 = 0;

      }
      else
      {
        a4 = 0;
      }

      break;
    case 1uLL:
      v11 = a4 - 1;
      v12 = 32239;
      goto LABEL_9;
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 8uLL:
    case 9uLL:
      a4 = 0;
      break;
    case 7uLL:
      v11 = a4 - 1;
      v12 = 32231;
LABEL_9:
      if (((v12 >> v11) & 1) != 0)
        v13 = 0;
      else
        v13 = a4;
      if (v11 < 0xF)
        a4 = v13;
      break;
    default:
      break;
  }
  if ((unint64_t)(-[CAMViewfinderViewController _portraitModeLightingEffectType](self, "_portraitModeLightingEffectType")- 7) < 0xFFFFFFFFFFFFFFFDLL|| a4 == 0)
  {
    a5 = 0;
  }
  v15 = +[CAMApplication appOrPlugInState](CAMApplication, "appOrPlugInState");
  v16 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    if (v8 > 9)
      v17 = 0;
    else
      v17 = off_1EA32B058[v8];
    if ((unint64_t)a4 > 0xF)
      v18 = 0;
    else
      v18 = off_1EA32AFC0[a4];
    if ((unint64_t)a5 > 2)
      v19 = 0;
    else
      v19 = off_1EA32B040[a5];
    v20 = 138543874;
    v21 = v17;
    v22 = 2114;
    v23 = v18;
    v24 = 2114;
    v25 = v19;
    _os_log_impl(&dword_1DB760000, v16, OS_LOG_TYPE_DEFAULT, "Updating shallow depth of field status in %{public}@ Mode: %{public}@/%{public}@", (uint8_t *)&v20, 0x20u);
  }

  -[CAMViewfinderViewController _setShallowDepthOfFieldStatus:stagePreviewStatus:animated:](self, "_setShallowDepthOfFieldStatus:stagePreviewStatus:animated:", a4, a5, v15 != 2);
}

- (void)_setShallowDepthOfFieldStatus:(int64_t)a3 stagePreviewStatus:(int64_t)a4
{
  -[CAMViewfinderViewController _setShallowDepthOfFieldStatus:stagePreviewStatus:animated:](self, "_setShallowDepthOfFieldStatus:stagePreviewStatus:animated:", a3, a4, 0);
}

- (void)_setShallowDepthOfFieldStatus:(int64_t)a3 stagePreviewStatus:(int64_t)a4 animated:(BOOL)a5
{
  _BOOL8 v5;
  id v7;

  v5 = a5;
  if (self->__shallowDepthOfFieldStatus != a3 || self->__stagePreviewStatus != a4)
  {
    self->__stagePreviewStatus = a4;
    self->__shallowDepthOfFieldStatus = a3;
    -[CAMViewfinderViewController _updateForShallowDepthOfFieldStatusChangedAnimated:](self, "_updateForShallowDepthOfFieldStatusChangedAnimated:", a5);
    -[CAMViewfinderViewController _updateViewfinderMaterialAnimated:](self, "_updateViewfinderMaterialAnimated:", v5);
    -[CAMViewfinderViewController _remoteShutterController](self, "_remoteShutterController");
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setShallowDepthOfFieldStatus:", self->__shallowDepthOfFieldStatus);

  }
}

- (void)_updateForShallowDepthOfFieldStatusChangedAnimated:(BOOL)a3
{
  _BOOL8 v3;
  unint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;

  v3 = a3;
  v5 = -[CAMViewfinderViewController _shallowDepthOfFieldStatus](self, "_shallowDepthOfFieldStatus");
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setShallowDepthOfFieldStatus:animated:", v5, v3);

  -[CAMViewfinderViewController _updatePreviewControllerPortraitStatus](self, "_updatePreviewControllerPortraitStatus");
  -[CAMViewfinderViewController _updatePortraitModeInstructionLabelForCurrentState](self, "_updatePortraitModeInstructionLabelForCurrentState");
  -[CAMViewfinderViewController _shallowDepthOfFieldBadge](self, "_shallowDepthOfFieldBadge");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setShallowDepthOfFieldStatus:animated:", v5, v3);

  -[CAMViewfinderViewController _updatePreviewControllerIndicatorStyle](self, "_updatePreviewControllerIndicatorStyle");
  -[CAMViewfinderViewController _updateDepthEffectSuggestionButtonAnimated:](self, "_updateDepthEffectSuggestionButtonAnimated:", v3);
  v8 = (v5 < 0xF) & (0x6202u >> v5);
  -[CAMViewfinderViewController _lightingControl](self, "_lightingControl");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setHighlighted:animated:", v8, v3);
  -[CAMViewfinderViewController _lightingNameBadge](self, "_lightingNameBadge");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setHighlighted:animated:", v8, v3);

  if (!-[CAMViewfinderViewController _hasInFlightConfiguration](self, "_hasInFlightConfiguration"))
    -[CAMViewfinderViewController updateControlVisibilityAnimated:](self, "updateControlVisibilityAnimated:", v3);
  -[CAMViewfinderViewController _updateZoomControlAccessoryStateAnimated:](self, "_updateZoomControlAccessoryStateAnimated:", v3);

}

- (void)_updatePreviewControllerPortraitStatus
{
  int64_t v3;
  void *v4;
  _BOOL4 v5;
  int64_t v6;
  void *v7;
  int v8;
  void *v9;
  int v10;
  void *v11;
  int v12;
  int64_t v13;
  id v14;

  v3 = -[CAMViewfinderViewController _stagePreviewStatus](self, "_stagePreviewStatus");
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = -[CAMViewfinderViewController _wantsLightingControlForGraphConfiguration:](self, "_wantsLightingControlForGraphConfiguration:", v4);

  if (v5)
    v6 = v3;
  else
    v6 = 0;
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isCapturingBurst");

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "isSemanticStyleControlVisible");

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "isSmartStylePickerVisible");

  if (v12 | v10 | v8)
    v13 = 0;
  else
    v13 = v6;
  -[CAMViewfinderViewController _previewViewController](self, "_previewViewController");
  v14 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setShallowDepthOfFieldStatus:stagePreviewStatus:", -[CAMViewfinderViewController _shallowDepthOfFieldStatus](self, "_shallowDepthOfFieldStatus"), v13);

}

- (BOOL)_shouldShowDescriptionOverlayViewForGraphConfiguration:(id)a3
{
  return -[CAMViewfinderViewController _shouldShowDescriptionOverlayViewForGraphConfiguration:viewClass:](self, "_shouldShowDescriptionOverlayViewForGraphConfiguration:viewClass:", a3, 0);
}

- (BOOL)_shouldShowDescriptionOverlayViewForGraphConfiguration:(id)a3 viewClass:(Class *)a4
{
  id v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  char v10;
  int v11;
  objc_class *v12;
  char v13;
  int v14;
  char v15;

  v5 = a3;
  +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "bypassWelcomeScreens");
  v9 = objc_msgSend(v5, "mode");
  if (objc_msgSend(v6, "hostProcess"))
  {
    if (objc_msgSend(v6, "hostProcess") == 4)
      v10 = v8;
    else
      v10 = 1;
    if ((v10 & 1) == 0)
      goto LABEL_9;
LABEL_8:
    LOBYTE(v11) = 0;
    v12 = 0;
    goto LABEL_30;
  }
  if ((v8 & 1) != 0)
    goto LABEL_8;
LABEL_9:
  v12 = 0;
  LOBYTE(v11) = 0;
  switch(v9)
  {
    case 0:
      v13 = objc_msgSend(v6, "semanticStylesSupport");
      if ((objc_msgSend(v6, "isDepthEffectApertureSupportedForMode:devicePosition:", 0, 0) & 1) != 0)
      {
        if ((v13 & 8) == 0 || !objc_msgSend(v6, "smartStylesSupported"))
          goto LABEL_28;
LABEL_26:
        v11 = objc_msgSend(v7, "didAcknowledgeSmartStylesDescription") ^ 1;
        goto LABEL_29;
      }
      v14 = objc_msgSend(v6, "isDepthEffectApertureSupportedForMode:devicePosition:", 0, 1);
      v15 = v14;
      if ((v13 & 8) == 0)
      {
        if (!v14)
        {
          if (objc_msgSend(v6, "isCTMSupported"))
            v11 = objc_msgSend(v7, "didAcknowledgeCTMDescription") ^ 1;
          else
            LOBYTE(v11) = 0;
          goto LABEL_29;
        }
        goto LABEL_28;
      }
      if ((objc_msgSend(v6, "smartStylesSupported") & 1) != 0)
        goto LABEL_26;
      if ((v15 & 1) == 0)
      {
        v11 = objc_msgSend(v7, "didAcknowledgeSemanticStylesDescription") ^ 1;
        goto LABEL_29;
      }
LABEL_28:
      v11 = objc_msgSend(v7, "didAcknowledgeDepthInPhotoModeDescription") ^ 1;
LABEL_29:
      v12 = (objc_class *)objc_opt_class();
LABEL_30:
      if (a4)
        *a4 = v12;

      return v11;
    case 1:
      if (!objc_msgSend(v5, "enableStereoVideoCapture"))
        goto LABEL_8;
      v11 = objc_msgSend(v7, "didAcknowledgeSpatialVideoOverlayDescription") ^ 1;
      goto LABEL_29;
    case 6:
      if (objc_msgSend(v6, "allowPortraitDescriptionOverlay"))
        v11 = objc_msgSend(v7, "didAcknowledgePortraitModeDescription") ^ 1;
      else
        LOBYTE(v11) = 0;
      goto LABEL_29;
    case 7:
      v11 = objc_msgSend(v7, "didAcknowledgeCinematicModeDescription") ^ 1;
      goto LABEL_29;
    case 8:
    case 9:
      v11 = objc_msgSend(v7, "didAcknowledgeSpatialModeOverlayDescription") ^ 1;
      goto LABEL_29;
    default:
      goto LABEL_30;
  }
}

- (void)_acknowledgeDescriptionOverlayViewForMode:(int64_t)a3
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  char v9;
  void *v10;
  void *v11;
  int v12;
  char v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;

  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  v17 = v5;
  switch(a3)
  {
    case 0:
      +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v8, "semanticStylesSupport");

      +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v10, "isDepthEffectApertureSupportedForMode:devicePosition:", 0, 0) & 1) != 0)
      {

        v11 = v17;
        if ((v9 & 8) != 0)
        {
          LOBYTE(v12) = 1;
          goto LABEL_13;
        }
LABEL_16:
        objc_msgSend(v11, "setDidAcknowledgeDepthInPhotoModeDescription:", 1);
        goto LABEL_18;
      }
      +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v14, "isDepthEffectApertureSupportedForMode:devicePosition:", 0, 1);

      v11 = v17;
      if ((v9 & 8) == 0)
      {
        if (!v12)
        {
          objc_msgSend(v17, "setDidAcknowledgeCTMDescription:", 1);
          goto LABEL_18;
        }
        goto LABEL_16;
      }
LABEL_13:
      +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = objc_msgSend(v15, "smartStylesSupported");

      v11 = v17;
      if (v16)
      {
        objc_msgSend(v17, "setDidAcknowledgeSmartStylesDescription:", 1);
        goto LABEL_18;
      }
      if ((v12 & 1) != 0)
        goto LABEL_16;
      objc_msgSend(v17, "setDidAcknowledgeSemanticStylesDescription:", 1);
LABEL_18:
      v6 = v17;
LABEL_19:

      return;
    case 1:
      v13 = objc_msgSend(v5, "didAcknowledgeSpatialVideoOverlayDescription");
      v6 = v17;
      if ((v13 & 1) != 0)
        goto LABEL_19;
      objc_msgSend(v17, "setDidAcknowledgeSpatialVideoOverlayDescription:", 1);
      objc_msgSend(v17, "setSpatialVideoControlEnabled:", 0);
      -[CAMViewfinderViewController _handleUserChangedSpatialVideoEnabled:](self, "_handleUserChangedSpatialVideoEnabled:", 0);
      goto LABEL_18;
    case 6:
      objc_msgSend(v5, "setDidAcknowledgePortraitModeDescription:", 1);
      goto LABEL_18;
    case 7:
      objc_msgSend(v5, "setDidAcknowledgeCinematicModeDescription:", 1);
      goto LABEL_18;
    case 8:
    case 9:
      objc_msgSend(v5, "setDidAcknowledgeSpatialModeOverlayDescription:", 1);
      -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMViewfinderViewController _updateSpatialCaptureUIStateForGraphConfiguration:animated:](self, "_updateSpatialCaptureUIStateForGraphConfiguration:animated:", v7, 1);

      goto LABEL_18;
    default:
      goto LABEL_19;
  }
}

- (id)_embedDescriptionOverlayViewIfNecessaryForGraphConfiguration:(id)a3
{
  id v4;
  uint64_t v5;
  BOOL v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  Class v14;

  v4 = a3;
  v5 = objc_msgSend(v4, "mode");
  v14 = 0;
  v6 = -[CAMViewfinderViewController _shouldShowDescriptionOverlayViewForGraphConfiguration:viewClass:](self, "_shouldShowDescriptionOverlayViewForGraphConfiguration:viewClass:", v4, &v14);

  if (!v6)
  {
    -[CAMViewfinderViewController _embedDescriptionOverlayView:forMode:](self, "_embedDescriptionOverlayView:forMode:", 0, v5);
    -[CAMViewfinderViewController _descriptionOverlayViewByMode](self, "_descriptionOverlayViewByMode");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v5);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setObject:forKeyedSubscript:", 0, v12);
    v9 = 0;
    goto LABEL_5;
  }
  -[CAMViewfinderViewController _descriptionOverlayViewByMode](self, "_descriptionOverlayViewByMode");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectForKeyedSubscript:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v9)
  {
    v10 = [v14 alloc];
    v9 = (void *)objc_msgSend(v10, "initWithFrame:", *MEMORY[0x1E0C9D648], *(double *)(MEMORY[0x1E0C9D648] + 8), *(double *)(MEMORY[0x1E0C9D648] + 16), *(double *)(MEMORY[0x1E0C9D648] + 24));
    objc_msgSend(v9, "setVisible:animationDuration:completion:", 0, 0, 0.0);
    objc_msgSend(v9, "setDelegate:", self);
    -[CAMViewfinderViewController _embedDescriptionOverlayView:forMode:](self, "_embedDescriptionOverlayView:forMode:", v9, v5);
    -[CAMViewfinderViewController _descriptionOverlayViewByMode](self, "_descriptionOverlayViewByMode");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v5);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setObject:forKeyedSubscript:", v9, v12);
LABEL_5:

  }
  return v9;
}

- (void)_embedDescriptionOverlayView:(id)a3 forMode:(int64_t)a4
{
  id v6;
  void *v7;
  uint64_t v8;
  id v9;

  v6 = a3;
  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a4);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setDescriptionOverlayView:forKey:", v6, v7);
  }
  else
  {
    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a4);
    v8 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setDescriptionOverlayView:forKey:", v6, v8);

    v6 = (id)v8;
  }

}

- (void)_dismissDescriptionOverlayView:(id)a3 withDuration:(double)a4
{
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  _QWORD v12[6];
  _QWORD v13[4];
  id v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v6 = a3;
  if (v6)
  {
    v16 = 0;
    v17 = &v16;
    v18 = 0x2020000000;
    v19 = 0;
    -[CAMViewfinderViewController _descriptionOverlayViewByMode](self, "_descriptionOverlayViewByMode");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = MEMORY[0x1E0C809B0];
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __75__CAMViewfinderViewController__dismissDescriptionOverlayView_withDuration___block_invoke;
    v13[3] = &unk_1EA32AB48;
    v9 = v6;
    v14 = v9;
    v15 = &v16;
    objc_msgSend(v7, "enumerateKeysAndObjectsUsingBlock:", v13);

    -[CAMViewfinderViewController _acknowledgeDescriptionOverlayViewForMode:](self, "_acknowledgeDescriptionOverlayViewForMode:", v17[3]);
    -[CAMViewfinderViewController _descriptionOverlayViewByMode](self, "_descriptionOverlayViewByMode");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v17[3]);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setObject:forKeyedSubscript:", 0, v11);

    -[CAMViewfinderViewController updateControlVisibilityAnimated:](self, "updateControlVisibilityAnimated:", 1);
    v12[0] = v8;
    v12[1] = 3221225472;
    v12[2] = __75__CAMViewfinderViewController__dismissDescriptionOverlayView_withDuration___block_invoke_2;
    v12[3] = &unk_1EA32AB70;
    v12[4] = self;
    v12[5] = &v16;
    objc_msgSend(v9, "setVisible:animationDuration:completion:", 0, v12, a4);
    objc_msgSend(v9, "setDelegate:", 0);

    _Block_object_dispose(&v16, 8);
  }

}

uint64_t __75__CAMViewfinderViewController__dismissDescriptionOverlayView_withDuration___block_invoke(uint64_t result, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v5;

  if (*(_QWORD *)(result + 32) == a3)
  {
    v5 = result;
    result = objc_msgSend(a2, "integerValue");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 40) + 8) + 24) = result;
    *a4 = 1;
  }
  return result;
}

uint64_t __75__CAMViewfinderViewController__dismissDescriptionOverlayView_withDuration___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_embedDescriptionOverlayView:forMode:", 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
}

- (void)_updateDescriptionOverlayVisibilityForMode:(int64_t)a3 allowShow:(BOOL)a4 allowHide:(BOOL)a5 animated:(BOOL)a6
{
  id v10;
  _QWORD v11[5];
  BOOL v12;
  BOOL v13;
  BOOL v14;

  -[CAMViewfinderViewController _descriptionOverlayViewByMode](self, "_descriptionOverlayViewByMode");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __103__CAMViewfinderViewController__updateDescriptionOverlayVisibilityForMode_allowShow_allowHide_animated___block_invoke;
  v11[3] = &__block_descriptor_43_e52_v32__0__NSNumber_8__CAMDescriptionOverlayView_16_B24l;
  v11[4] = a3;
  v12 = a4;
  v13 = a5;
  v14 = a6;
  objc_msgSend(v10, "enumerateKeysAndObjectsUsingBlock:", v11);

}

void __103__CAMViewfinderViewController__updateDescriptionOverlayVisibilityForMode_allowShow_allowHide_animated___block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  double v9;
  id v10;

  v10 = a3;
  v5 = objc_msgSend(a2, "integerValue");
  v6 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(a1 + 40))
    v7 = v5 == v6;
  else
    v7 = 0;
  if (v7 || (*(_BYTE *)(a1 + 41) ? (v8 = v5 == v6) : (v8 = 1), !v8))
  {
    v9 = 0.25;
    if (!*(_BYTE *)(a1 + 42))
      v9 = 0.0;
    objc_msgSend(v10, "setVisible:animationDuration:completion:", v5 == v6, 0, v9);
  }

}

- (void)descriptionOverlayView:(id)a3 willBecomeVisible:(BOOL)a4
{
  _BOOL4 v4;
  id v6;
  int v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v4 = a4;
  v6 = a3;
  v7 = objc_msgSend(v6, "isMemberOfClass:", objc_opt_class());

  if (v7)
  {
    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "controlStatusBar");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "smartStyleIndicator");
    v11 = (id)objc_claimAutoreleasedReturnValue();

    v10 = v11;
    if (v11)
    {
      if (v4)
        -[CAMViewfinderViewController _startPulsingAnimationForSmartStyleIndicator:](self, "_startPulsingAnimationForSmartStyleIndicator:", v11);
      else
        -[CAMViewfinderViewController _stopPulsingAnimationForSmartStyleIndicator:](self, "_stopPulsingAnimationForSmartStyleIndicator:", v11);
      v10 = v11;
    }

  }
}

- (void)descriptionOverlayViewDidSelectDetail:(id)a3
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  CAMSemanticStyleSettingsController *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, void *, uint64_t, _BYTE *);
  void *v14;
  id v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  v4 = a3;
  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v20 = 0;
  -[CAMViewfinderViewController _descriptionOverlayViewByMode](self, "_descriptionOverlayViewByMode");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = MEMORY[0x1E0C809B0];
  v12 = 3221225472;
  v13 = __69__CAMViewfinderViewController_descriptionOverlayViewDidSelectDetail___block_invoke;
  v14 = &unk_1EA32AB48;
  v6 = v4;
  v15 = v6;
  v16 = &v17;
  objc_msgSend(v5, "enumerateKeysAndObjectsUsingBlock:", &v11);

  v7 = v18[3];
  if (v7)
  {
    if (v7 == 1)
    {
      +[CAMUserPreferences preferences](CAMUserPreferences, "preferences", v11, v12, v13, v14);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setDidAcknowledgeSpatialVideoOverlayDescription:", 1);

      -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMViewfinderViewController _updateSpatialCaptureUIStateForGraphConfiguration:animated:](self, "_updateSpatialCaptureUIStateForGraphConfiguration:animated:", v9, 1);

      -[CAMViewfinderViewController _dismissDescriptionOverlayView:withDuration:](self, "_dismissDescriptionOverlayView:withDuration:", v6, 0.3);
    }
  }
  else
  {
    if (objc_msgSend(v6, "isMemberOfClass:", objc_opt_class(), v11, v12, v13, v14))
    {
      v10 = objc_alloc_init(CAMSemanticStyleSettingsController);
      -[CAMSemanticStyleSettingsController setControllerDelegate:](v10, "setControllerDelegate:", self);
      if (!-[CAMViewfinderViewController _layoutStyle](self, "_layoutStyle"))
        -[CAMSemanticStyleSettingsController setModalPresentationStyle:](v10, "setModalPresentationStyle:", 0);
      if (v10)
      {
        -[CAMViewfinderViewController presentViewController:animated:completion:](self, "presentViewController:animated:completion:", v10, 1, 0);
        -[CAMViewfinderViewController _dismissDescriptionOverlayView:withDuration:](self, "_dismissDescriptionOverlayView:withDuration:", v6, 0.3);
      }
    }
    else
    {
      if (objc_msgSend(v6, "isMemberOfClass:", objc_opt_class()))
      {
        -[CAMViewfinderViewController _dismissDescriptionOverlayView:withDuration:](self, "_dismissDescriptionOverlayView:withDuration:", v6, 0.3);
        -[CAMViewfinderViewController _startSmartStyleOnboardingControlRevealAnimation](self, "_startSmartStyleOnboardingControlRevealAnimation");
      }
      v10 = 0;
    }

  }
  _Block_object_dispose(&v17, 8);

}

uint64_t __69__CAMViewfinderViewController_descriptionOverlayViewDidSelectDetail___block_invoke(uint64_t result, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v5;

  if (*(_QWORD *)(result + 32) == a3)
  {
    v5 = result;
    result = objc_msgSend(a2, "integerValue");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 40) + 8) + 24) = result;
    *a4 = 1;
  }
  return result;
}

- (void)descriptionOverlayViewDidAcknowledge:(id)a3
{
  -[CAMViewfinderViewController _dismissDescriptionOverlayView:withDuration:](self, "_dismissDescriptionOverlayView:withDuration:", a3, 0.3);
}

- (void)semanticStyleSettingsControllerDidDismiss:(id)a3
{
  -[CAMViewfinderViewController readUserPreferencesAndHandleChangesWithOverrides:](self, "readUserPreferencesAndHandleChangesWithOverrides:", 0);
}

- (BOOL)_shouldDisableModeForGraphConfiguration:(id)a3 callActive:(BOOL)a4
{
  void *v4;
  BOOL v5;

  -[CAMViewfinderViewController _disabledModeReasonsForGraphConfiguration:callActive:](self, "_disabledModeReasonsForGraphConfiguration:callActive:", a3, a4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "count") != 0;

  return v5;
}

- (id)_disabledModeReasonsForGraphConfiguration:(id)a3 callActive:(BOOL)a4
{
  _BOOL4 v4;
  id v6;
  unint64_t v7;
  _BOOL4 v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  void (**v14)(_QWORD, _QWORD);
  id v15;
  _QWORD aBlock[5];
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  void (*v22)(uint64_t);
  id v23;

  v4 = a4;
  v6 = a3;
  v7 = objc_msgSend(v6, "mode");
  v9 = v7 <= 8 && ((1 << v7) & 0x186) != 0 && v4;
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v10, "isInterrupted"))
  {
    objc_msgSend(v10, "currentCameraSystemPressureState");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "isCameraTooHot");

  }
  else
  {
    v12 = 0;
  }
  v18 = 0;
  v19 = &v18;
  v20 = 0x3032000000;
  v21 = __Block_byref_object_copy__4;
  v22 = __Block_byref_object_dispose__4;
  v23 = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __84__CAMViewfinderViewController__disabledModeReasonsForGraphConfiguration_callActive___block_invoke;
  aBlock[3] = &unk_1EA32ABB8;
  aBlock[4] = &v18;
  v13 = _Block_copy(aBlock);
  v14 = (void (**)(_QWORD, _QWORD))v13;
  if (v9)
    (*((void (**)(void *, _QWORD))v13 + 2))(v13, 0);
  if (v12)
    v14[2](v14, 1);
  v15 = (id)v19[5];

  _Block_object_dispose(&v18, 8);
  return v15;
}

void __84__CAMViewfinderViewController__disabledModeReasonsForGraphConfiguration_callActive___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;

  v3 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  if (!v3)
  {
    v5 = objc_alloc_init(MEMORY[0x1E0C99E20]);
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

    v3 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a2);
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObject:", v8);

}

- (BOOL)_shouldSuspendCaptureSessionForGraphConfiguration:(id)a3 callActive:(BOOL)a4
{
  CAMViewfinderViewController *v4;
  void *v5;

  v4 = self;
  -[CAMViewfinderViewController _disabledModeReasonsForGraphConfiguration:callActive:](self, "_disabledModeReasonsForGraphConfiguration:callActive:", a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v4) = -[CAMViewfinderViewController _shouldSuspendCaptureSessionForModeDisabledReasons:](v4, "_shouldSuspendCaptureSessionForModeDisabledReasons:", v5);

  return (char)v4;
}

- (BOOL)_shouldSuspendCaptureSessionForModeDisabledReasons:(id)a3
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  BOOL v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v4 = a3;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v12;
    while (2)
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v12 != v7)
          objc_enumerationMutation(v4);
        if (-[CAMViewfinderViewController _shouldSuspendCaptureSessionForModeDisabledReason:](self, "_shouldSuspendCaptureSessionForModeDisabledReason:", objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * i), "integerValue", (_QWORD)v11)))
        {
          v9 = 1;
          goto LABEL_11;
        }
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v6)
        continue;
      break;
    }
  }
  v9 = 0;
LABEL_11:

  return v9;
}

- (BOOL)_shouldSuspendCaptureSessionForModeDisabledReason:(int64_t)a3
{
  return a3 == 0;
}

- (id)_debugStringForDisabledModeReasons:(id)a3
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const __CFString *v11;
  const __CFString *v12;
  __CFString *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  if (objc_msgSend(v3, "count"))
  {
    v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v3, "count"));
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v5 = v3;
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v16;
      do
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v16 != v8)
            objc_enumerationMutation(v5);
          v10 = objc_msgSend(*(id *)(*((_QWORD *)&v15 + 1) + 8 * v9), "integerValue", (_QWORD)v15);
          if (v10 == 1)
            v11 = CFSTR("CameraTooHot");
          else
            v11 = 0;
          if (v10)
            v12 = v11;
          else
            v12 = CFSTR("ActiveCall");
          objc_msgSend(v4, "addObject:", v12);
          ++v9;
        }
        while (v7 != v9);
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      }
      while (v7);
    }

    objc_msgSend(v4, "componentsJoinedByString:", CFSTR(","));
    v13 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v13 = CFSTR("<none>");
  }

  return v13;
}

- (void)_embedDisabledModeOverlayView:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;

  v4 = a3;
  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v7;
  if (!v7)
    v6 = v5;
  objc_msgSend(v6, "setDisabledModeOverlayView:", v4);

}

- (void)_unembedDisabledModeOverlayView:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  id v10;

  v10 = a3;
  -[CAMViewfinderViewController viewfinderView](self, "viewfinderView");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v4)
  {
    objc_msgSend(v4, "disabledModeOverlayView");
    v7 = (id)objc_claimAutoreleasedReturnValue();

    if (v7 == v10)
    {
      v8 = v4;
LABEL_6:
      objc_msgSend(v8, "setDisabledModeOverlayView:", v10);
    }
  }
  else
  {
    objc_msgSend(v5, "disabledModeOverlayView");
    v9 = (id)objc_claimAutoreleasedReturnValue();

    if (v9 == v10)
    {
      v8 = v6;
      goto LABEL_6;
    }
  }

}

uint64_t __61__CAMViewfinderViewController__updateDisabledModeUIAnimated___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 1.0);
}

uint64_t __61__CAMViewfinderViewController__updateDisabledModeUIAnimated___block_invoke_3(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 0.0);
}

uint64_t __61__CAMViewfinderViewController__updateDisabledModeUIAnimated___block_invoke_4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_unembedDisabledModeOverlayView:", *(_QWORD *)(a1 + 40));
}

- (void)_updateModeDisabledForCurrentStateAnimated:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  id v6;

  v3 = a3;
  -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _callStatusMonitor](self, "_callStatusMonitor");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _updateModeDisabledForGraphConfiguration:callActive:animated:](self, "_updateModeDisabledForGraphConfiguration:callActive:animated:", v6, objc_msgSend(v5, "isCallActive"), v3);

}

- (void)_updateModeDisabledForGraphConfiguration:(id)a3 callActive:(BOOL)a4 animated:(BOOL)a5
{
  _BOOL8 v5;
  _BOOL8 v6;
  id v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  _BOOL4 v12;
  unint64_t v13;
  __CFString *v14;
  void *v15;
  int v16;
  __CFString *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v5 = a5;
  v6 = a4;
  v20 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  -[CAMViewfinderViewController _disabledModeReasonsForGraphConfiguration:callActive:](self, "_disabledModeReasonsForGraphConfiguration:callActive:", v8, v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "count");
  if (-[CAMViewfinderViewController _isModeDisabled](self, "_isModeDisabled") != (v10 != 0))
  {
    -[CAMViewfinderViewController _setModeDisabled:](self, "_setModeDisabled:", v10 != 0);
    v11 = os_log_create("com.apple.camera", "Camera");
    v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      if (v12)
      {
        v13 = objc_msgSend(v8, "mode");
        if (v13 > 9)
          v14 = 0;
        else
          v14 = off_1EA32B058[v13];
        -[CAMViewfinderViewController _debugStringForDisabledModeReasons:](self, "_debugStringForDisabledModeReasons:", v9);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = 138543618;
        v17 = v14;
        v18 = 2114;
        v19 = v15;
        _os_log_impl(&dword_1DB760000, v11, OS_LOG_TYPE_DEFAULT, "Disabling %{public}@ mode for reasons: %{public}@", (uint8_t *)&v16, 0x16u);

      }
    }
    else if (v12)
    {
      LOWORD(v16) = 0;
      _os_log_impl(&dword_1DB760000, v11, OS_LOG_TYPE_DEFAULT, "Re-enabling mode", (uint8_t *)&v16, 2u);
    }

    -[CAMViewfinderViewController _updateEnabledControlsWithReason:](self, "_updateEnabledControlsWithReason:", CFSTR("ModeDisabled"));
    -[CAMViewfinderViewController _updateDisabledModeUIAnimated:](self, "_updateDisabledModeUIAnimated:", v5);
  }

}

- (void)_updateDisabledModeOverlayViewForCurrentState
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;

  -[CAMViewfinderViewController _disabledModeOverlayView](self, "_disabledModeOverlayView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v8 = v3;
    -[CAMViewfinderViewController _currentGraphConfiguration](self, "_currentGraphConfiguration");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _callStatusMonitor](self, "_callStatusMonitor");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _disabledModeReasonsForGraphConfiguration:callActive:](self, "_disabledModeReasonsForGraphConfiguration:callActive:", v4, objc_msgSend(v5, "isCallActive"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if ((objc_msgSend(v6, "containsObject:", &unk_1EA3B0418) & 1) != 0)
    {
      v7 = 1;
    }
    else
    {
      objc_msgSend(v6, "containsObject:", &unk_1EA3B0400);
      v7 = 0;
    }
    objc_msgSend(v8, "setDisabledModeReason:", v7);

    v3 = v8;
  }

}

- (void)accessibilityHUDManager:(id)a3 wantsToShowHUDItem:(id)a4
{
  -[CAMViewfinderViewController _showAccessibilityHUDItem:](self, "_showAccessibilityHUDItem:", a4);
}

- (void)_updateDoneButtonIfNeeded
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  id v16;

  if (-[CAMViewfinderViewController _useCreativeCameraControls](self, "_useCreativeCameraControls"))
  {
    -[CAMViewfinderViewController view](self, "view");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "window");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (v4)
    {
      -[CAMViewfinderViewController view](self, "view");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "window");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "bounds");
      v8 = v7;
      v10 = v9;
      v12 = v11;
      v14 = v13;

      v15 = objc_msgSend(MEMORY[0x1E0D7D240], "doneButtonStyleForReferenceBounds:", v8, v10, v12, v14);
      -[CAMViewfinderViewController _doneButton](self, "_doneButton");
      v16 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "setPreferredStyle:", v15);

    }
  }
}

- (void)_handleCreativeCameraButtonPressed:(id)a3
{
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;

  -[CAMViewfinderViewController creativeCameraDelegate](self, "creativeCameraDelegate", a3);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)v3;
  if (v3)
  {
    v6 = (void *)v3;
    v5 = objc_opt_respondsToSelector();
    v4 = v6;
    if ((v5 & 1) != 0)
    {
      objc_msgSend(v6, "cameraViewControllerCreativeCameraButtonWasPressed");
      v4 = v6;
    }
  }

}

- (void)_handleCreativeCameraButtonReleased:(id)a3
{
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;

  -[CAMViewfinderViewController creativeCameraDelegate](self, "creativeCameraDelegate", a3);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)v3;
  if (v3)
  {
    v6 = (void *)v3;
    v5 = objc_opt_respondsToSelector();
    v4 = v6;
    if ((v5 & 1) != 0)
    {
      objc_msgSend(v6, "cameraViewControllerCreativeCameraButtonWasReleased");
      v4 = v6;
    }
  }

}

- (void)_handlePhotosButtonReleased:(id)a3
{
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;

  -[CAMViewfinderViewController creativeCameraDelegate](self, "creativeCameraDelegate", a3);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)v3;
  if (v3)
  {
    v6 = (void *)v3;
    v5 = objc_opt_respondsToSelector();
    v4 = v6;
    if ((v5 & 1) != 0)
    {
      objc_msgSend(v6, "cameraViewControllerDidRequestPhotosExtension");
      v4 = v6;
    }
  }

}

- (void)_handleDoneButtonReleased:(id)a3
{
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;

  -[CAMViewfinderViewController creativeCameraDelegate](self, "creativeCameraDelegate", a3);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)v3;
  if (v3)
  {
    v6 = (void *)v3;
    v5 = objc_opt_respondsToSelector();
    v4 = v6;
    if ((v5 & 1) != 0)
    {
      objc_msgSend(v6, "cameraViewControllerDidRequestDismissal");
      v4 = v6;
    }
  }

}

- (void)_handleCreativeCameraButtonTouchAttemptedWhileDisabled:(id)a3
{
  unint64_t v3;
  NSObject *v4;
  void *v5;
  int v6;
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = -[CAMViewfinderViewController _reasonsToDisableCreativeCameraButton](self, "_reasonsToDisableCreativeCameraButton", a3);
  v4 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    CAMDebugStringForControlDisableReasons(v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = 138543362;
    v7 = v5;
    _os_log_impl(&dword_1DB760000, v4, OS_LOG_TYPE_DEFAULT, "Creative camera button was tapped while disabled for reasons: %{public}@", (uint8_t *)&v6, 0xCu);

  }
}

- (BOOL)_trueVideoIsCapturing
{
  void *v2;
  uint64_t v3;

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "trueVideoState");

  return v3 == 2;
}

- (BOOL)_trueVideoIsTransitioningToCapture
{
  void *v2;
  uint64_t v3;

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "trueVideoState");

  return v3 == 1;
}

- (BOOL)_trueVideoIsTransitioningFromCapture
{
  void *v2;
  uint64_t v3;

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "trueVideoState");

  return v3 == 3;
}

- (BOOL)_trueVideoIsActive
{
  void *v2;
  uint64_t v3;

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "trueVideoState");

  return (unint64_t)(v3 - 1) < 3;
}

- (void)_trueVideoStopCapture
{
  void *v3;
  int v4;
  void *v5;

  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isCapturingVideo");

  if (v4)
    -[CAMViewfinderViewController _stopCapturingVideo](self, "_stopCapturingVideo");
  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setTrueVideoState:", 3);

  -[CAMViewfinderViewController _handleUserChangedToMode:](self, "_handleUserChangedToMode:", -[CAMViewfinderViewController _trueVideoSourceCaptureMode](self, "_trueVideoSourceCaptureMode"));
}

- (void)_startTransitioningToTrueVideoCaptureFromSourceMode:(int64_t)a3 sourceAspectRatio:(int64_t)a4 toDestinationMode:(int64_t)a5
{
  NSObject *v9;
  __CFString *v10;
  __CFString *v11;
  void *v12;
  int v13;
  __CFString *v14;
  __int16 v15;
  __CFString *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v9 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    if ((unint64_t)a3 > 9)
      v10 = 0;
    else
      v10 = off_1EA32B058[a3];
    if ((unint64_t)a5 > 9)
      v11 = 0;
    else
      v11 = off_1EA32B058[a5];
    v13 = 138543618;
    v14 = v10;
    v15 = 2114;
    v16 = v11;
    _os_log_impl(&dword_1DB760000, v9, OS_LOG_TYPE_DEFAULT, "True Video starting transition to capture. Source: %{public}@ destination: %{public}@", (uint8_t *)&v13, 0x16u);
  }

  -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[CAMViewfinderViewController _setTrueVideoSourceCaptureMode:](self, "_setTrueVideoSourceCaptureMode:", a3);
  -[CAMViewfinderViewController _setTrueVideoDestinationCaptureMode:](self, "_setTrueVideoDestinationCaptureMode:", a5);
  objc_msgSend(v12, "setUseSlowerTrueVideoTransitionAnimationDuration:", a4 == 3);
  objc_msgSend(v12, "setTrueVideoState:", 1);
  -[CAMViewfinderViewController _cancelCTMCapture](self, "_cancelCTMCapture");
  -[CAMViewfinderViewController _handleUserChangedToMode:](self, "_handleUserChangedToMode:", a5);

}

- (void)_trueVideoStartCapture
{
  void *v3;
  void *v4;
  NSObject *v5;
  unint64_t v6;
  __CFString *v7;
  unint64_t v8;
  __CFString *v9;
  void *v10;
  int v11;
  __CFString *v12;
  __int16 v13;
  __CFString *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  -[CAMViewfinderViewController _videoCaptureRequestWithCurrentSettings](self, "_videoCaptureRequestWithCurrentSettings");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (-[CAMViewfinderViewController _startCapturingVideoWithRequest:](self, "_startCapturingVideoWithRequest:", v3))
  {
    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setTrueVideoState:", 2);

  }
  else
  {
    v5 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = -[CAMViewfinderViewController _trueVideoSourceCaptureMode](self, "_trueVideoSourceCaptureMode");
      if (v6 > 9)
        v7 = 0;
      else
        v7 = off_1EA32B058[v6];
      v8 = -[CAMViewfinderViewController _trueVideoDestinationCaptureMode](self, "_trueVideoDestinationCaptureMode");
      if (v8 > 9)
        v9 = 0;
      else
        v9 = off_1EA32B058[v8];
      v11 = 138543618;
      v12 = v7;
      v13 = 2114;
      v14 = v9;
      _os_log_impl(&dword_1DB760000, v5, OS_LOG_TYPE_DEFAULT, "True Video failed to start capture. Source: %{public}@ destination: %{public}@", (uint8_t *)&v11, 0x16u);
    }

    -[CAMViewfinderViewController _fullscreenViewfinder](self, "_fullscreenViewfinder");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setTrueVideoState:", 3);

    -[CAMViewfinderViewController _handleUserChangedToMode:](self, "_handleUserChangedToMode:", -[CAMViewfinderViewController _trueVideoSourceCaptureMode](self, "_trueVideoSourceCaptureMode"));
  }

}

- (BOOL)_useZoomFactorsOfTrueVideoDestinationModeForGraphConfiguration:(id)a3
{
  id v3;
  BOOL v4;

  v3 = a3;
  v4 = objc_msgSend(v3, "trueVideoEnabled")
    && objc_msgSend(v3, "mode") == 1
    && objc_msgSend(v3, "devicePosition") == 1;

  return v4;
}

- (BOOL)_updateDuetSystemConstraintsIfNecessary
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  BOOL v6;
  void *v7;
  void *v8;
  uint64_t v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v2, "isProResControlEnabled") & 1) != 0)
  {
    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend(v3, "hostProcess"))
    {

LABEL_8:
      objc_msgSend(MEMORY[0x1E0D1D938], "sharedInstance");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = *MEMORY[0x1E0D1DA60];
      v11[0] = &unk_1EA3B06A0;
      v6 = 1;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v11, &v10, 1);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "updateSystemConstraintsWithParameters:", v8);

      return v6;
    }
    +[CAMCaptureCapabilities capabilities](CAMCaptureCapabilities, "capabilities");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "hostProcess");

    if (v5 == 4)
      goto LABEL_8;
  }
  else
  {

  }
  return 0;
}

- (void)externalStorageMonitor:(id)a3 didChangeConnectedStorageDevices:(id)a4
{
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  const char *v10;
  void *v11;
  int v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  _BYTE v20[12];
  __int16 v21;
  void *v22;
  __int16 v23;
  void *v24;
  __int16 v25;
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = a4;
  -[CAMViewfinderViewController _connectedStorage](self, "_connectedStorage");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "count");
  if (v7)
  {
    if ((objc_msgSend(v5, "containsObject:", v6) & 1) == 0)
    {
      objc_msgSend(v5, "firstObject");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      -[CAMViewfinderViewController _setConnectedStorage:](self, "_setConnectedStorage:", v8);

    }
    if (-[CAMViewfinderViewController _wantsExternalStorageOutputEnabled](self, "_wantsExternalStorageOutputEnabled"))
    {
      if (-[CAMViewfinderViewController _isShowingCameraRoll](self, "_isShowingCameraRoll"))
      {
        v9 = os_log_create("com.apple.camera", "Camera");
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v20 = 0;
          v10 = "External storage: device connected when Camera Roll is visible, deferring SSD enablement";
LABEL_13:
          _os_log_impl(&dword_1DB760000, v9, OS_LOG_TYPE_DEFAULT, v10, v20, 2u);
          goto LABEL_14;
        }
        goto LABEL_14;
      }
      -[CAMViewfinderViewController _captureController](self, "_captureController");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "isCapturingVideo");

      if (v12)
      {
        v9 = os_log_create("com.apple.camera", "Camera");
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v20 = 0;
          v10 = "External storage: device connected during recording for internal storage, deferring SSD enablement";
          goto LABEL_13;
        }
LABEL_14:

        goto LABEL_15;
      }
      if (-[CAMViewfinderViewController _externalStorageOutputEnabled](self, "_externalStorageOutputEnabled"))
        -[CAMViewfinderViewController _updateExternalStorageDataSources](self, "_updateExternalStorageDataSources");
      else
        -[CAMViewfinderViewController _setExternalStorageOutputEnabled:animated:](self, "_setExternalStorageOutputEnabled:animated:", 1, 1);
    }
  }
  else if (v6)
  {
    -[CAMViewfinderViewController _setExternalStorageOutputEnabled:animated:](self, "_setExternalStorageOutputEnabled:animated:", 0, 1);
    -[CAMViewfinderViewController _setConnectedStorage:](self, "_setConnectedStorage:", 0);
  }
LABEL_15:
  if ((v6 != 0) != (v7 != 0))
    -[CAMViewfinderViewController updateControlVisibilityAnimated:](self, "updateControlVisibilityAnimated:", 1);
  if (-[CAMViewfinderViewController _shouldShowUnsupportedExternalStorageFormat](self, "_shouldShowUnsupportedExternalStorageFormat", *(_QWORD *)v20))
  {
    -[CAMViewfinderViewController _showUnsupportedFormatAlert](self, "_showUnsupportedFormatAlert");
  }
  v13 = os_log_create("com.apple.camera", "Camera");
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(v6, "description");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "uniqueIdentifier");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _connectedStorage](self, "_connectedStorage");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "description");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[CAMViewfinderViewController _connectedStorage](self, "_connectedStorage");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "uniqueIdentifier");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v20 = 138544130;
    *(_QWORD *)&v20[4] = v14;
    v21 = 2114;
    v22 = v15;
    v23 = 2114;
    v24 = v17;
    v25 = 2114;
    v26 = v19;
    _os_log_impl(&dword_1DB760000, v13, OS_LOG_TYPE_DEFAULT, "External storage: available storage devices changed. Connected device (%{public}@/%{public}@) updated to  (%{public}@/%{public}@).", v20, 0x2Au);

  }
}

- (void)_updateExternalStorageMonitoringState:(unint64_t)a3
{
  void *v5;
  void *v6;
  int v7;
  id v8;

  -[CAMViewfinderViewController _storageMonitor](self, "_storageMonitor");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    +[CAMUserPreferences preferences](CAMUserPreferences, "preferences");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "isProResControlEnabled");

    if (v7)
    {
      -[CAMViewfinderViewController _storageMonitor](self, "_storageMonitor");
      v8 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setMonitoringState:", a3);

    }
  }
}

- (void)captureController:(id)a3 didChangeCameraSystemPressureState:(id)a4
{
  -[CAMViewfinderViewController _updateModeDisabledForCurrentStateAnimated:](self, "_updateModeDisabledForCurrentStateAnimated:", 1, a4);
}

- (BOOL)isInCameraRollView
{
  void *v2;
  char v3;

  -[CAMViewfinderViewController _cameraRollController](self, "_cameraRollController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isCameraRollViewControllerPresented");

  return v3;
}

- (BOOL)navigateToViewfinderView
{
  void *v2;
  char v3;

  -[CAMViewfinderViewController _cameraRollController](self, "_cameraRollController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "isCameraRollViewControllerPresented"))
    v3 = objc_msgSend(v2, "dismissCameraRollViewControllerForced:animated:", 0, 1);
  else
    v3 = 1;

  return v3;
}

- (void)setSingleUseTimerWithDuration:(int64_t)a3
{
  -[CAMViewfinderViewController _setResetTimerDurationAfterDelayedCapture:](self, "_setResetTimerDurationAfterDelayedCapture:", 1);
  -[CAMViewfinderViewController _setTimerDurationAndUpdateUI:animated:](self, "_setTimerDurationAndUpdateUI:animated:", a3, 1);
}

- (void)_requestPasscodeUnlockForCameraRollController:(id)a3 forAction:(unint64_t)a4 completionBlock:(id)a5
{
  id v8;
  void (**v9)(id, _QWORD);
  void *v10;
  void *v11;
  void (**v12)(id, _QWORD);

  v8 = a3;
  v9 = (void (**)(id, _QWORD))a5;
  -[CAMViewfinderViewController unlockDelegate](self, "unlockDelegate");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v9[2](v9, 0);
    -[CAMViewfinderViewController unlockDelegate](self, "unlockDelegate");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "viewfinderViewController:didRequestUnlockForCameraRollController:withCameraRollActionType:completionHandler:", self, v8, a4, &__block_literal_global_1033);

  }
  else
  {
    v12 = v9;
    SBSRequestPasscodeUnlockUI();

  }
}

void __103__CAMViewfinderViewController__requestPasscodeUnlockForCameraRollController_forAction_completionBlock___block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;

  v2 = a2;
  if (v2)
  {
    v3 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      __103__CAMViewfinderViewController__requestPasscodeUnlockForCameraRollController_forAction_completionBlock___block_invoke_cold_1();

  }
}

void __103__CAMViewfinderViewController__requestPasscodeUnlockForCameraRollController_forAction_completionBlock___block_invoke_1034(uint64_t a1, char a2)
{
  _QWORD v3[4];
  id v4;
  char v5;

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __103__CAMViewfinderViewController__requestPasscodeUnlockForCameraRollController_forAction_completionBlock___block_invoke_2;
  v3[3] = &unk_1EA32AC40;
  v4 = *(id *)(a1 + 32);
  v5 = a2;
  dispatch_async(MEMORY[0x1E0C80D38], v3);

}

uint64_t __103__CAMViewfinderViewController__requestPasscodeUnlockForCameraRollController_forAction_completionBlock___block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, BOOL))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40) != 0);
}

- (void)_requestPasscodeUnlockForDocumentScanningWithCompletionBlock:(id)a3
{
  void (**v4)(id, _QWORD);
  void *v5;
  void *v6;
  void (**v7)(id, _QWORD);

  v4 = (void (**)(id, _QWORD))a3;
  -[CAMViewfinderViewController unlockDelegate](self, "unlockDelegate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    v4[2](v4, 0);
    -[CAMViewfinderViewController unlockDelegate](self, "unlockDelegate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "viewfinderViewControllerDidRequestUnlockForDocumentScanning:completionHandler:", self, &__block_literal_global_1036);

  }
  else
  {
    v7 = v4;
    SBSRequestPasscodeUnlockUI();

  }
}

void __92__CAMViewfinderViewController__requestPasscodeUnlockForDocumentScanningWithCompletionBlock___block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;

  v2 = a2;
  if (v2)
  {
    v3 = os_log_create("com.apple.camera", "Camera");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      __103__CAMViewfinderViewController__requestPasscodeUnlockForCameraRollController_forAction_completionBlock___block_invoke_cold_1();

  }
}

void __92__CAMViewfinderViewController__requestPasscodeUnlockForDocumentScanningWithCompletionBlock___block_invoke_1037(uint64_t a1, char a2)
{
  _QWORD v3[4];
  id v4;
  char v5;

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __92__CAMViewfinderViewController__requestPasscodeUnlockForDocumentScanningWithCompletionBlock___block_invoke_2;
  v3[3] = &unk_1EA32AC40;
  v4 = *(id *)(a1 + 32);
  v5 = a2;
  dispatch_async(MEMORY[0x1E0C80D38], v3);

}

uint64_t __92__CAMViewfinderViewController__requestPasscodeUnlockForDocumentScanningWithCompletionBlock___block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, BOOL))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40) != 0);
}

- (void)_requestPasscodeUnlockWithCompletionBlock:(id)a3
{
  id v3;
  id v4;

  v4 = a3;
  v3 = v4;
  SBSRequestPasscodeUnlockUI();

}

void __73__CAMViewfinderViewController__requestPasscodeUnlockWithCompletionBlock___block_invoke(uint64_t a1, char a2)
{
  _QWORD v3[4];
  id v4;
  char v5;

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __73__CAMViewfinderViewController__requestPasscodeUnlockWithCompletionBlock___block_invoke_2;
  v3[3] = &unk_1EA32AC40;
  v4 = *(id *)(a1 + 32);
  v5 = a2;
  dispatch_async(MEMORY[0x1E0C80D38], v3);

}

uint64_t __73__CAMViewfinderViewController__requestPasscodeUnlockWithCompletionBlock___block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, BOOL))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40) != 0);
}

- (void)_preparePhotoOutputForExpectedPhotoResolution
{
  int64_t v3;
  id v4;

  v3 = -[CAMViewfinderViewController _currentMaxPhotoResolution](self, "_currentMaxPhotoResolution");
  -[CAMViewfinderViewController _captureController](self, "_captureController");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "preparePhotoOutputForExpectedPhotoResolution:", v3);

}

+ (int64_t)_pressTypeForCaptureButton:(int64_t)a3
{
  if ((unint64_t)(a3 - 1) > 5)
    return -1;
  else
    return qword_1DB9A5410[a3 - 1];
}

- (int64_t)photoModeAspectRatioCrop
{
  return self->_photoModeAspectRatioCrop;
}

- (void)setPhotoModeAspectRatioCrop:(int64_t)a3
{
  self->_photoModeAspectRatioCrop = a3;
}

- (int64_t)configuredCaptureMode
{
  return self->_configuredCaptureMode;
}

- (int64_t)configuredCaptureDevice
{
  return self->_configuredCaptureDevice;
}

- (void)setReviewButtonSource:(id)a3
{
  objc_storeWeak((id *)&self->_reviewButtonSource, a3);
}

- (CAMCreativeCameraDelegate)creativeCameraDelegate
{
  return (CAMCreativeCameraDelegate *)objc_loadWeakRetained((id *)&self->_creativeCameraDelegate);
}

- (void)setCreativeCameraDelegate:(id)a3
{
  objc_storeWeak((id *)&self->_creativeCameraDelegate, a3);
}

- (void)_setOpeningViewfinder:(BOOL)a3
{
  self->__openingViewfinder = a3;
}

- (BOOL)_isAutoResumeCancelingWithoutBackgrounding
{
  return self->__autoResumeCancelingWithoutBackgrounding;
}

- (void)_setAutoResumeCancelingWithoutBackgrounding:(BOOL)a3
{
  self->__autoResumeCancelingWithoutBackgrounding = a3;
}

- (CAMTimelapseController)_timelapseController
{
  return self->__timelapseController;
}

- (CAMPowerController)_powerController
{
  return self->__powerController;
}

- (CAMExternalStorageMonitor)_storageMonitor
{
  return self->__storageMonitor;
}

- (CAMAnalyticsCaptureEvent)_timelapseAnalyticsEvent
{
  return self->__timelapseAnalyticsEvent;
}

- (void)set_timelapseAnalyticsEvent:(id)a3
{
  objc_storeStrong((id *)&self->__timelapseAnalyticsEvent, a3);
}

- (int64_t)_videoConfigurationOverride
{
  return self->__videoConfigurationOverride;
}

- (void)set_videoConfigurationOverride:(int64_t)a3
{
  self->__videoConfigurationOverride = a3;
}

- (int64_t)_slomoConfigurationOverride
{
  return self->__slomoConfigurationOverride;
}

- (void)set_slomoConfigurationOverride:(int64_t)a3
{
  self->__slomoConfigurationOverride = a3;
}

- (int64_t)_cinematicConfigurationOverride
{
  return self->__cinematicConfigurationOverride;
}

- (void)set_cinematicConfigurationOverride:(int64_t)a3
{
  self->__cinematicConfigurationOverride = a3;
}

- (CAMCaptureGraphConfiguration)_configuredGraphConfiguration
{
  return self->__configuredGraphConfiguration;
}

- (BOOL)_isReconfiguring
{
  return self->__reconfiguring;
}

- (void)_setReconfiguring:(BOOL)a3
{
  self->__reconfiguring = a3;
}

- (BOOL)_isReconfiguringForZoomChange
{
  return self->__reconfiguringForZoomChange;
}

- (void)_setReconfiguringForZoomChange:(BOOL)a3
{
  self->__reconfiguringForZoomChange = a3;
}

- (BOOL)_completedInitialConfiguration
{
  return self->__completedInitialConfiguration;
}

- (void)set_completedInitialConfiguration:(BOOL)a3
{
  self->__completedInitialConfiguration = a3;
}

- (int64_t)_resolvedTorchMode
{
  return self->__resolvedTorchMode;
}

- (void)_setDesiredFlashMode:(int64_t)a3
{
  self->__desiredFlashMode = a3;
}

- (void)_setDesiredHDRMode:(int64_t)a3
{
  self->__desiredHDRMode = a3;
}

- (void)_setDesiredLivePhotoMode:(int64_t)a3
{
  self->__desiredLivePhotoMode = a3;
}

- (unint64_t)_desiredLowLightControlMode
{
  return self->__desiredLowLightControlMode;
}

- (void)_setDesiredLowLightControlMode:(unint64_t)a3
{
  self->__desiredLowLightControlMode = a3;
}

- (unint64_t)_resolvedLowLightControlMode
{
  return self->__resolvedLowLightControlMode;
}

- (void)_setResolvedLowLightControlMode:(unint64_t)a3
{
  self->__resolvedLowLightControlMode = a3;
}

- (int64_t)_resolvedLowLightMode
{
  return self->__resolvedLowLightMode;
}

- (void)_setResolvedLowLightMode:(int64_t)a3
{
  self->__resolvedLowLightMode = a3;
}

- ($F24F406B2B787EFB06265DBA3D28CBD5)_lowLightDurationMapping
{
  double minimumDuration;
  double maximumDuration;
  $F24F406B2B787EFB06265DBA3D28CBD5 result;

  minimumDuration = self->minimumDuration;
  maximumDuration = self->maximumDuration;
  result.var1 = maximumDuration;
  result.var0 = minimumDuration;
  return result;
}

- (void)_setLowLightDurationMapping:(id)a3
{
  self->2616 = ($9A58E5929C033B40A174D578711F86A7)a3;
}

- (unint64_t)_lowLightConflicts
{
  return self->__lowLightConflicts;
}

- (void)_setLowLightConflicts:(unint64_t)a3
{
  self->__lowLightConflicts = a3;
}

- (BOOL)_isLowLightCaptureUIVisible
{
  return self->__lowLightCaptureUIVisible;
}

- (void)_setLowLightCaptureUIVisible:(BOOL)a3
{
  self->__lowLightCaptureUIVisible = a3;
}

- (BOOL)_isCurrentLowLightCaptureCancelable
{
  return self->__currentLowLightCaptureCancelable;
}

- (void)_setCurrentLowLightCaptureCancelable:(BOOL)a3
{
  self->__currentLowLightCaptureCancelable = a3;
}

- (int64_t)_desiredMacroMode
{
  return self->__desiredMacroMode;
}

- (void)_setDesiredMacroMode:(int64_t)a3
{
  self->__desiredMacroMode = a3;
}

- (int64_t)_resolvedMacroMode
{
  return self->__resolvedMacroMode;
}

- (void)_setResolvedMacroMode:(int64_t)a3
{
  self->__resolvedMacroMode = a3;
}

- (void)set_depthEffectEnabledFromSuggestion:(BOOL)a3
{
  self->__depthEffectEnabledFromSuggestion = a3;
}

- (int64_t)_desiredRAWMode
{
  return self->__desiredRAWMode;
}

- (void)_setDesiredRAWMode:(int64_t)a3
{
  self->__desiredRAWMode = a3;
}

- (int64_t)_resolvedRAWMode
{
  return self->__resolvedRAWMode;
}

- (void)_setResolvedRAWMode:(int64_t)a3
{
  self->__resolvedRAWMode = a3;
}

- (unint64_t)_photoFormatConflicts
{
  return self->__photoFormatConflicts;
}

- (void)_setPhotoFormatConflicts:(unint64_t)a3
{
  self->__photoFormatConflicts = a3;
}

- (int64_t)_desiredPhotoResolution
{
  return self->__desiredPhotoResolution;
}

- (void)_setDesiredPhotoResolution:(int64_t)a3
{
  self->__desiredPhotoResolution = a3;
}

- (int64_t)_resolvedPhotoResolution
{
  return self->__resolvedPhotoResolution;
}

- (void)_setResolvedPhotoResolution:(int64_t)a3
{
  self->__resolvedPhotoResolution = a3;
}

- ($0AC6E346AE4835514AAA8AC86D8F4844)_desiredAdvancedPhotoFormat
{
  $B1CBF1B9C19084F159A2126E2D211268 *v2;
  int64_t encoding;
  int64_t resolution;
  $0AC6E346AE4835514AAA8AC86D8F4844 result;

  v2 = &self->2632;
  encoding = self->encoding;
  resolution = v2->resolution;
  result.var1 = resolution;
  result.var0 = encoding;
  return result;
}

- (void)_setDesiredPhotoFormat:(id)a3
{
  self->2632 = ($B1CBF1B9C19084F159A2126E2D211268)a3;
}

- (int64_t)_desiredProResVideoMode
{
  return self->__desiredProResVideoMode;
}

- (void)_setDesiredProResVideoMode:(int64_t)a3
{
  self->__desiredProResVideoMode = a3;
}

- (int64_t)_desiredVideoStabilizationMode
{
  return self->__desiredVideoStabilizationMode;
}

- (void)_setDesiredVideoStabilizationMode:(int64_t)a3
{
  self->__desiredVideoStabilizationMode = a3;
}

- (BOOL)_isFlashingVideoStabilizationBadge
{
  return self->__flashingVideoStabilizationBadge;
}

- (void)_setFlashingVideoStabilizationBadge:(BOOL)a3
{
  self->__flashingVideoStabilizationBadge = a3;
}

- (BOOL)_isSpatialVideoEnabled
{
  return self->__spatialVideoEnabled;
}

- (void)_setSpatialVideoEnabled:(BOOL)a3
{
  self->__spatialVideoEnabled = a3;
}

- (int64_t)_stereoCaptureStatus
{
  return self->__stereoCaptureStatus;
}

- (void)_setStereoCaptureStatus:(int64_t)a3
{
  self->__stereoCaptureStatus = a3;
}

- (BOOL)_spatialModeHasVideoSelected
{
  return self->__spatialModeHasVideoSelected;
}

- (void)_setSpatialModeHasVideoSelected:(BOOL)a3
{
  self->__spatialModeHasVideoSelected = a3;
}

- (void)_setPhotoModeEffectFilterType:(int64_t)a3
{
  self->__photoModeEffectFilterType = a3;
}

- (void)_setSquareModeEffectFilterType:(int64_t)a3
{
  self->__squareModeEffectFilterType = a3;
}

- (void)_setPortraitModeEffectFilterType:(int64_t)a3
{
  self->__portraitModeEffectFilterType = a3;
}

- (void)_setPortraitModeLightingEffectType:(int64_t)a3
{
  self->__portraitModeLightingEffectType = a3;
}

- (double)_portraitModeApertureValue
{
  return self->__portraitModeApertureValue;
}

- (void)_setPortraitModeApertureValue:(double)a3
{
  self->__portraitModeApertureValue = a3;
}

- (double)_portraitModeIntensityValue
{
  return self->__portraitModeIntensityValue;
}

- (void)_setPortraitModeIntensityValue:(double)a3
{
  self->__portraitModeIntensityValue = a3;
}

- (double)_lastDefaultApertureValue
{
  return self->__lastDefaultApertureValue;
}

- (void)_setLastDefaultApertureValue:(double)a3
{
  self->__lastDefaultApertureValue = a3;
}

- (NSMutableDictionary)_exposureBiasesByMode
{
  return self->__exposureBiasesByMode;
}

- (double)_shadowClippingValue
{
  return self->__shadowClippingValue;
}

- (void)_setShadowClippingValue:(double)a3
{
  self->__shadowClippingValue = a3;
}

- (double)_highlightClippingValue
{
  return self->__highlightClippingValue;
}

- (void)_setHighlightClippingValue:(double)a3
{
  self->__highlightClippingValue = a3;
}

- (NSMutableArray)_semanticStyles
{
  return self->__semanticStyles;
}

- (void)_setSemanticStyles:(id)a3
{
  objc_storeStrong((id *)&self->__semanticStyles, a3);
}

- (unint64_t)_selectedSemanticStyleIndex
{
  return self->__selectedSemanticStyleIndex;
}

- (void)_setSelectedSemanticStyleIndex:(unint64_t)a3
{
  self->__selectedSemanticStyleIndex = a3;
}

- (unint64_t)_smartStyleSystemStyleIndex
{
  return self->__smartStyleSystemStyleIndex;
}

- (void)_setSmartStyleSystemStyleIndex:(unint64_t)a3
{
  self->__smartStyleSystemStyleIndex = a3;
}

- (CAMMutableStillImageCaptureRequest)_currentStillImageCaptureMomentSettings
{
  return self->__currentStillImageCaptureMomentSettings;
}

- (void)_setCurrentStillImageCaptureMomentSettings:(id)a3
{
  objc_storeStrong((id *)&self->__currentStillImageCaptureMomentSettings, a3);
}

- (BOOL)_needsDeferredGraphConfiguration
{
  return self->__needsDeferredGraphConfiguration;
}

- (void)_setNeedsDeferredGraphConfiguration:(BOOL)a3
{
  self->__needsDeferredGraphConfiguration = a3;
}

- (void)_setInternalAutorotationStyle:(int64_t)a3
{
  self->__internalAutorotationStyle = a3;
}

- (CAMViewfinderTransitionController)_transitionController
{
  return self->__transitionController;
}

- (CAMSharedLibraryButton)_sharedLibraryButton
{
  return self->__sharedLibraryButton;
}

- (CAMSharedLibraryBadge)_sharedLibraryBadge
{
  return self->__sharedLibraryBadge;
}

- (void)set_reviewButton:(id)a3
{
  objc_storeStrong((id *)&self->__reviewButton, a3);
}

- (CAMMessagesPhotosButton)_photosButton
{
  return self->__photosButton;
}

- (void)_setShallowDepthOfFieldStatus:(int64_t)a3
{
  self->__shallowDepthOfFieldStatus = a3;
}

- (int64_t)_stagePreviewStatus
{
  return self->__stagePreviewStatus;
}

- (void)_setStagePreviewStatus:(int64_t)a3
{
  self->__stagePreviewStatus = a3;
}

- (NSMutableDictionary)_descriptionOverlayViewByMode
{
  return self->__descriptionOverlayViewByMode;
}

- (CEKAnimationSequence)_smartStyleOnboardingControlDrawerAnimationSequence
{
  return self->__smartStyleOnboardingControlDrawerAnimationSequence;
}

- (void)set_smartStyleOnboardingControlDrawerAnimationSequence:(id)a3
{
  objc_storeStrong((id *)&self->__smartStyleOnboardingControlDrawerAnimationSequence, a3);
}

- (CAMMetalContext)_metalContext
{
  return self->__metalContext;
}

- (CAMDynamicShutterControl)_dynamicShutterControl
{
  return self->__dynamicShutterControl;
}

- (CUShutterButton)_stillDuringVideoButton
{
  return self->__stillDuringVideoButton;
}

- (CEKApertureButton)_apertureButton
{
  return self->__apertureButton;
}

- (CAMIntensityButton)_intensityButton
{
  return self->__intensityButton;
}

- (CAMGridView)_gridView
{
  return self->__gridView;
}

- (CAMLevelIndicatorView)_levelView
{
  return self->__levelView;
}

- (CAMHorizonLevelView)_horizonLevelView
{
  return self->__horizonLevelView;
}

- (CEKApertureSlider)_portraitApertureSlider
{
  return self->__portraitApertureSlider;
}

- (CEKSlider)_portraitIntensitySlider
{
  return self->__portraitIntensitySlider;
}

- (CAMVideoConfigurationStatusIndicator)_videoConfigurationStatusIndicator
{
  return self->__videoConfigurationStatusIndicator;
}

- (UIView)_captureAnimationPreviewOverlay
{
  return (UIView *)objc_loadWeakRetained((id *)&self->__captureAnimationPreviewOverlay);
}

- (void)_setCaptureAnimationPreviewOverlay:(id)a3
{
  objc_storeWeak((id *)&self->__captureAnimationPreviewOverlay, a3);
}

- (BOOL)_isProactiveFlashSuggestionSuppressed
{
  return self->__proactiveFlashSuggestionSuppressed;
}

- (void)_setProactiveFlashSuggestionSuppressed:(BOOL)a3
{
  self->__proactiveFlashSuggestionSuppressed = a3;
}

- (void)_setFlashAndHDRConflictingControl:(int64_t)a3
{
  self->__flashAndHDRConflictingControl = a3;
}

- (int64_t)_currentlyPressedButton
{
  return self->__currentlyPressedButton;
}

- (void)_setCurrentlyPressedButton:(int64_t)a3
{
  self->__currentlyPressedButton = a3;
}

- (UISwipeGestureRecognizer)_previousModeGestureRecognizer
{
  return self->__previousModeGestureRecognizer;
}

- (UISwipeGestureRecognizer)_nextModeGestureRecognizer
{
  return self->__nextModeGestureRecognizer;
}

- (AVCaptureEventInteraction)_physicalButtonInteraction
{
  return self->__physicalButtonInteraction;
}

- (void)set_physicalButtonInteraction:(id)a3
{
  objc_storeStrong((id *)&self->__physicalButtonInteraction, a3);
}

- (CAMPhysicalCaptureNotifier)_cameraCaseShutterNotifier
{
  return self->__cameraCaseShutterNotifier;
}

- (void)set_cameraCaseShutterNotifier:(id)a3
{
  objc_storeStrong((id *)&self->__cameraCaseShutterNotifier, a3);
}

- (UIPinchGestureRecognizer)_zoomPinchGestureRecognizer
{
  return self->__zoomPinchGestureRecognizer;
}

- (UIPanGestureRecognizer)_cameraRollSwipeUpGestureRecognizer
{
  return self->__cameraRollSwipeUpGestureRecognizer;
}

- (UISwipeGestureRecognizer)_swipeDownGestureRecognizer
{
  return self->__swipeDownGestureRecognizer;
}

- (UISwipeGestureRecognizer)_swipeUpGestureRecognizer
{
  return self->__swipeUpGestureRecognizer;
}

- (UISwipeGestureRecognizer)_previousFilterGestureRecognizer
{
  return self->__previousFilterGestureRecognizer;
}

- (UISwipeGestureRecognizer)_nextFilterGestureRecognizer
{
  return self->__nextFilterGestureRecognizer;
}

- (UISwipeGestureRecognizer)_smartStylesSwipeLeftGestureRecognizer
{
  return self->__smartStylesSwipeLeftGestureRecognizer;
}

- (void)set_smartStylesSwipeLeftGestureRecognizer:(id)a3
{
  objc_storeStrong((id *)&self->__smartStylesSwipeLeftGestureRecognizer, a3);
}

- (UISwipeGestureRecognizer)_smartStylesSwipeRightGestureRecognizer
{
  return self->__smartStylesSwipeRightGestureRecognizer;
}

- (void)set_smartStylesSwipeRightGestureRecognizer:(id)a3
{
  objc_storeStrong((id *)&self->__smartStylesSwipeRightGestureRecognizer, a3);
}

- (UILongPressGestureRecognizer)_sharedLibraryLongPressGestureRecognizer
{
  return self->__sharedLibraryLongPressGestureRecognizer;
}

- (double)_videoZoomFactorAtPinchStart
{
  return self->__videoZoomFactorAtPinchStart;
}

- (void)_setVideoZoomFactorAtPinchStart:(double)a3
{
  self->__videoZoomFactorAtPinchStart = a3;
}

- (double)_videoZoomFactorAtDynamicShutterStart
{
  return self->__videoZoomFactorAtDynamicShutterStart;
}

- (void)_setVideoZoomFactorAtDynamicShutterStart:(double)a3
{
  self->__videoZoomFactorAtDynamicShutterStart = a3;
}

- (CAMAnimationDelegate)_synchronizedCaptureTimerDelegate
{
  return self->__synchronizedCaptureTimerDelegate;
}

- (void)_setSynchronizedCaptureTimerDelegate:(id)a3
{
  objc_storeStrong((id *)&self->__synchronizedCaptureTimerDelegate, a3);
}

- (unint64_t)_remainingCaptureTimerTicks
{
  return self->__remainingCaptureTimerTicks;
}

- (void)_setRemainingCaptureTimerTicks:(unint64_t)a3
{
  self->__remainingCaptureTimerTicks = a3;
}

- (NSDate)_lastTimerIndicatorFaceUpdateDate
{
  return self->__lastTimerIndicatorFaceUpdateDate;
}

- (CAMTorchPatternController)_torchPatternController
{
  return self->__torchPatternController;
}

- (void)_setDiskSpaceAlertController:(id)a3
{
  objc_storeStrong((id *)&self->__diskSpaceAlertController, a3);
}

- (void)_setBurstEndSoundPlaying:(BOOL)a3
{
  self->__burstEndSoundPlaying = a3;
}

- (void)_setFlashOrTorchUnavailableAlertController:(id)a3
{
  objc_storeStrong((id *)&self->__flashOrTorchUnavailableAlertController, a3);
}

- (BOOL)_didAcceptCompromisedFlash
{
  return self->__didAcceptCompromisedFlash;
}

- (void)_setDidAcceptCompromisedFlash:(BOOL)a3
{
  self->__didAcceptCompromisedFlash = a3;
}

- (BOOL)_resetTimerDurationAfterDelayedCapture
{
  return self->__resetTimerDurationAfterDelayedCapture;
}

- (void)_setResetTimerDurationAfterDelayedCapture:(BOOL)a3
{
  self->__resetTimerDurationAfterDelayedCapture = a3;
}

- (CAMPreventConnectionHandoverAssertionController)_preventConnectionHandoverAssertionController
{
  return self->__preventConnectionHandoverAssertionController;
}

- (BOOL)_receivedOutOfDiskSpaceErrorDuringCapture
{
  return self->__receivedOutOfDiskSpaceErrorDuringCapture;
}

- (void)_setReceivedOutOfDiskSpaceErrorDuringCapture:(BOOL)a3
{
  self->__receivedOutOfDiskSpaceErrorDuringCapture = a3;
}

- (CAMTimerCache)_timerCache
{
  return self->__timerCache;
}

- (BOOL)_wantsFilterScrubberVisible
{
  return self->__wantsFilterScrubberVisible;
}

- (BOOL)_shouldShowFilterScrubberAfterNextRender
{
  return self->__shouldShowFilterScrubberAfterNextRender;
}

- (void)_setShouldShowFilterScrubberAfterNextRender:(BOOL)a3
{
  self->__shouldShowFilterScrubberAfterNextRender = a3;
}

- (BOOL)_isShowingPortraitApertureSlider
{
  return self->__showingPortraitApertureSlider;
}

- (BOOL)_isShowingPortraitIntensitySlider
{
  return self->__showingPortraitIntensitySlider;
}

- (void)_setAnimatingFilterScrubberDismissal:(BOOL)a3
{
  self->__animatingFilterScrubberDismissal = a3;
}

- (int64_t)_overCapturePreviewStatus
{
  return self->__overCapturePreviewStatus;
}

- (void)_setOverCapturePreviewStatus:(int64_t)a3
{
  self->__overCapturePreviewStatus = a3;
}

- (int64_t)_cachedSharedLibraryTimerState
{
  return self->__cachedSharedLibraryTimerState;
}

- (void)set_cachedSharedLibraryTimerState:(int64_t)a3
{
  self->__cachedSharedLibraryTimerState = a3;
}

- (NSMutableDictionary)_preferredControlToOpenInDrawerForMode
{
  return self->__preferredControlToOpenInDrawerForMode;
}

- (void)set_preferredControlToOpenInDrawerForMode:(id)a3
{
  objc_storeStrong((id *)&self->__preferredControlToOpenInDrawerForMode, a3);
}

- (BOOL)_isModeDisabled
{
  return self->__modeDisabled;
}

- (void)_setModeDisabled:(BOOL)a3
{
  self->__modeDisabled = a3;
}

- (void)_setDisabledModeOverlayView:(id)a3
{
  objc_storeStrong((id *)&self->__disabledModeOverlayView, a3);
}

- (void)_setLastZoomInteractionType:(int64_t)a3
{
  self->__lastZoomInteractionType = a3;
}

- (unint64_t)_faceCount
{
  return self->__faceCount;
}

- (void)set_faceCount:(unint64_t)a3
{
  self->__faceCount = a3;
}

- (unint64_t)_catCount
{
  return self->__catCount;
}

- (void)set_catCount:(unint64_t)a3
{
  self->__catCount = a3;
}

- (unint64_t)_dogCount
{
  return self->__dogCount;
}

- (void)set_dogCount:(unint64_t)a3
{
  self->__dogCount = a3;
}

- (NSMutableArray)_accessibilityHUDManagers
{
  return self->__accessibilityHUDManagers;
}

- (void)_setAccessibilityHUDManagers:(id)a3
{
  objc_storeStrong((id *)&self->__accessibilityHUDManagers, a3);
}

- (id)_filterScrubberLayerContents
{
  return self->__filterScrubberLayerContents;
}

- (void)set_filterScrubberLayerContents:(id)a3
{
  objc_storeStrong(&self->__filterScrubberLayerContents, a3);
}

- (NSArray)_filterTypes
{
  return self->__filterTypes;
}

- (void)set_filterTypes:(id)a3
{
  objc_storeStrong((id *)&self->__filterTypes, a3);
}

- (int64_t)_lastMRCResultsCount
{
  return self->__lastMRCResultsCount;
}

- (void)_setLastMRCResultsCount:(int64_t)a3
{
  self->__lastMRCResultsCount = a3;
}

- (BCSAVParsingSession)_barcodeParsingSession
{
  return self->__barcodeParsingSession;
}

- (CAMMachineReadableCodeLoggingController)_machineReadableCodeLoggingController
{
  return self->__machineReadableCodeLoggingController;
}

- (NSArray)_cachedQRCodeResults
{
  return self->__cachedQRCodeResults;
}

- (void)_setCachedQRCodeResults:(id)a3
{
  objc_storeStrong((id *)&self->__cachedQRCodeResults, a3);
}

- (NSArray)_cachedAppClipCodeResults
{
  return self->__cachedAppClipCodeResults;
}

- (void)_setCachedAppClipCodeResults:(id)a3
{
  objc_storeStrong((id *)&self->__cachedAppClipCodeResults, a3);
}

- (UIView)_textInteractionBackground
{
  return self->__textInteractionBackground;
}

- (void)_setTextInteractionBackground:(id)a3
{
  objc_storeStrong((id *)&self->__textInteractionBackground, a3);
}

- (BOOL)_wantsVisualTextAnalysis
{
  return self->__wantsVisualTextAnalysis;
}

- (BOOL)_wantsVisualTextSelectionInstructions
{
  return self->__wantsVisualTextSelectionInstructions;
}

- (void)_setWantsVisualTextSelectionInstructions:(BOOL)a3
{
  self->__wantsVisualTextSelectionInstructions = a3;
}

- (NSString)_currentStillImageCaptureTextAnalysisIdentifier
{
  return self->__currentStillImageCaptureTextAnalysisIdentifier;
}

- (void)_setCurrentStillImageCaptureTextAnalysisIdentifier:(id)a3
{
  objc_storeStrong((id *)&self->__currentStillImageCaptureTextAnalysisIdentifier, a3);
}

- (NSDate)_currentStillImageCaptureTextAnalysisStateDate
{
  return self->__currentStillImageCaptureTextAnalysisStateDate;
}

- (void)_setCurrentStillImageCaptureTextAnalysisStartDate:(id)a3
{
  objc_storeStrong((id *)&self->__currentStillImageCaptureTextAnalysisStateDate, a3);
}

- (NSDate)_currentStillImageCaptureTextAnalysisEndDate
{
  return self->__currentStillImageCaptureTextAnalysisEndDate;
}

- (void)_setCurrentStillImageCaptureTextAnalysisEndDate:(id)a3
{
  objc_storeStrong((id *)&self->__currentStillImageCaptureTextAnalysisEndDate, a3);
}

- (NSDate)_currentTextAnalysisDetectionEndDate
{
  return self->__currentTextAnalysisDetectionEndDate;
}

- (void)_setCurrentTextAnalysisDetectionEndDate:(id)a3
{
  objc_storeStrong((id *)&self->__currentTextAnalysisDetectionEndDate, a3);
}

- (VKCaptureTextAnalyzer)_imageAnalyzer
{
  return self->__imageAnalyzer;
}

- (void)_setImageAnalyzer:(id)a3
{
  objc_storeStrong((id *)&self->__imageAnalyzer, a3);
}

- (CAMProminentObjectManager)_prominentObjectManager
{
  return self->__prominentObjectManager;
}

- (void)_setProminentObjectManager:(id)a3
{
  objc_storeStrong((id *)&self->__prominentObjectManager, a3);
}

- (NSArray)_cachedTextRegionResults
{
  return self->__cachedTextRegionResults;
}

- (void)_setCachedTextRegionResults:(id)a3
{
  objc_storeStrong((id *)&self->__cachedTextRegionResults, a3);
}

- (CAMAnalyticsVisionSession)_visionAnalyticsSession
{
  return self->__visionAnalyticsSession;
}

- (void)_setVisionAnalyticsSession:(id)a3
{
  objc_storeStrong((id *)&self->__visionAnalyticsSession, a3);
}

- (CAMAnalyticsSessionEvent)_analyticsSessionEvent
{
  return self->__analyticsSessionEvent;
}

- (void)_setAnalyticsSessionEvent:(id)a3
{
  objc_storeStrong((id *)&self->__analyticsSessionEvent, a3);
}

- (CAMAnalyticsControlDrawerEvent)_analyticsControlDrawerEvent
{
  return self->__analyticsControlDrawerEvent;
}

- (void)_setAnalyticsControlDrawerEvent:(id)a3
{
  objc_storeStrong((id *)&self->__analyticsControlDrawerEvent, a3);
}

- (CAMExternalStorage)_connectedStorage
{
  return self->__connectedStorage;
}

- (void)_setConnectedStorage:(id)a3
{
  objc_storeStrong((id *)&self->__connectedStorage, a3);
}

- (BOOL)_externalStorageOutputEnabled
{
  return self->__externalStorageOutputEnabled;
}

- (CAMSystemOverlayViewController)_halfPressOverlay
{
  return self->__halfPressOverlay;
}

- (void)_setHalfPressOverlay:(id)a3
{
  objc_storeStrong((id *)&self->__halfPressOverlay, a3);
}

- (int64_t)_currentHalfPressSpotlight
{
  return self->__currentHalfPressSpotlight;
}

- (void)_setCurrentHalfPressSpotlight:(int64_t)a3
{
  self->__currentHalfPressSpotlight = a3;
}

- (NSMutableSet)_openHalfPressSpotlightControls
{
  return self->__openHalfPressSpotlightControls;
}

- (void)_setOpenHalfPressSpotlightControls:(id)a3
{
  objc_storeStrong((id *)&self->__openHalfPressSpotlightControls, a3);
}

- (CAMOverlayServiceConnection)_overlayServiceConnection
{
  return self->__overlayServiceConnection;
}

- (void)_setOverlayServiceConnection:(id)a3
{
  objc_storeStrong((id *)&self->__overlayServiceConnection, a3);
}

- (void)_setOverlayControls:(id)a3
{
  objc_storeStrong((id *)&self->__overlayControls, a3);
}

- (BOOL)_isDocumentInScene
{
  return self->__documentInScene;
}

- (void)_setDocumentInScene:(BOOL)a3
{
  self->__documentInScene = a3;
}

- (int64_t)_trueVideoSourceCaptureMode
{
  return self->__trueVideoSourceCaptureMode;
}

- (void)_setTrueVideoSourceCaptureMode:(int64_t)a3
{
  self->__trueVideoSourceCaptureMode = a3;
}

- (int64_t)_trueVideoDestinationCaptureMode
{
  return self->__trueVideoDestinationCaptureMode;
}

- (void)_setTrueVideoDestinationCaptureMode:(int64_t)a3
{
  self->__trueVideoDestinationCaptureMode = a3;
}

- (double)_trueVideoSourceZoomFactor
{
  return self->__trueVideoSourceZoomFactor;
}

- (void)_setTrueVideoSourceZoomFactor:(double)a3
{
  self->__trueVideoSourceZoomFactor = a3;
}

- (id)_cameraRollControllerAction
{
  return self->__cameraRollControllerAction;
}

- (void)set_cameraRollControllerAction:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 2504);
}

- (BOOL)isUserInteractionLoggingEnabled
{
  return self->_userInteractionLoggingEnabled;
}

- (CAMLibrarySelectionController)_librarySelectionController
{
  return self->__librarySelectionController;
}

- (CAMViewfinderViewControllerStillImageCaptureRequestTestingDelegate)stillImageCaptureTestDelegate
{
  return (CAMViewfinderViewControllerStillImageCaptureRequestTestingDelegate *)objc_loadWeakRetained((id *)&self->_stillImageCaptureTestDelegate);
}

- (void)setStillImageCaptureTestDelegate:(id)a3
{
  objc_storeWeak((id *)&self->_stillImageCaptureTestDelegate, a3);
}

- (CAMViewfinderViewControllerVideoCaptureRequestTestingDelegate)videoCaptureTestDelegate
{
  return (CAMViewfinderViewControllerVideoCaptureRequestTestingDelegate *)objc_loadWeakRetained((id *)&self->_videoCaptureTestDelegate);
}

- (void)setVideoCaptureTestDelegate:(id)a3
{
  objc_storeWeak((id *)&self->_videoCaptureTestDelegate, a3);
}

- (CAMViewfinderViewControllerCameraRollTestingDelegate)cameraRollControllerTestDelegate
{
  return (CAMViewfinderViewControllerCameraRollTestingDelegate *)objc_loadWeakRetained((id *)&self->_cameraRollControllerTestDelegate);
}

- (void)setCameraRollControllerTestDelegate:(id)a3
{
  objc_storeWeak((id *)&self->_cameraRollControllerTestDelegate, a3);
}

- (CAMViewfinderViewControllerUnlockDelegate)unlockDelegate
{
  return (CAMViewfinderViewControllerUnlockDelegate *)objc_loadWeakRetained((id *)&self->_unlockDelegate);
}

- (void)setUnlockDelegate:(id)a3
{
  objc_storeWeak((id *)&self->_unlockDelegate, a3);
}

- (BOOL)automaticallyAdjustsAutorotationStyle
{
  return self->_automaticallyAdjustsAutorotationStyle;
}

- (void)setAutomaticallyAdjustsAutorotationStyle:(BOOL)a3
{
  self->_automaticallyAdjustsAutorotationStyle = a3;
}

- (CAMCameraConfigurationDelegate)configurationDelegate
{
  return (CAMCameraConfigurationDelegate *)objc_loadWeakRetained((id *)&self->_configurationDelegate);
}

- (BOOL)isPerformingTileTransition
{
  return self->_performingTileTransition;
}

- (void)setDisablingMultipleCaptureFeatures:(BOOL)a3
{
  self->_disablingMultipleCaptureFeatures = a3;
}

- (BOOL)isPreventingAdditionalCaptures
{
  return self->_preventingAdditionalCaptures;
}

- (int64_t)imagePickerVideoConfiguration
{
  return self->_imagePickerVideoConfiguration;
}

- (double)maximumVideoRecordingDuration
{
  return self->_maximumVideoRecordingDuration;
}

- (void)setMaximumVideoRecordingDuration:(double)a3
{
  self->_maximumVideoRecordingDuration = a3;
}

- (UIView)customOverlayView
{
  return self->_customOverlayView;
}

- (void)setCustomOverlayView:(id)a3
{
  objc_storeStrong((id *)&self->_customOverlayView, a3);
}

- (void).cxx_destruct
{
  objc_storeStrong((id *)&self->_customOverlayView, 0);
  objc_destroyWeak((id *)&self->_configurationDelegate);
  objc_storeStrong((id *)&self->_availableCaptureModes, 0);
  objc_destroyWeak((id *)&self->_unlockDelegate);
  objc_destroyWeak((id *)&self->_cameraRollControllerTestDelegate);
  objc_destroyWeak((id *)&self->_videoCaptureTestDelegate);
  objc_destroyWeak((id *)&self->_stillImageCaptureTestDelegate);
  objc_storeStrong((id *)&self->__librarySelectionController, 0);
  objc_storeStrong(&self->__cameraRollControllerAction, 0);
  objc_storeStrong((id *)&self->__overlayControls, 0);
  objc_storeStrong((id *)&self->__overlayServiceConnection, 0);
  objc_storeStrong((id *)&self->__openHalfPressSpotlightControls, 0);
  objc_storeStrong((id *)&self->__halfPressOverlay, 0);
  objc_storeStrong((id *)&self->__connectedStorage, 0);
  objc_storeStrong((id *)&self->__analyticsControlDrawerEvent, 0);
  objc_storeStrong((id *)&self->__analyticsSessionEvent, 0);
  objc_storeStrong((id *)&self->__visionAnalyticsSession, 0);
  objc_storeStrong((id *)&self->__cachedTextRegionResults, 0);
  objc_storeStrong((id *)&self->__prominentObjectManager, 0);
  objc_storeStrong((id *)&self->__imageAnalyzer, 0);
  objc_storeStrong((id *)&self->__currentTextAnalysisDetectionEndDate, 0);
  objc_storeStrong((id *)&self->__currentStillImageCaptureTextAnalysisEndDate, 0);
  objc_storeStrong((id *)&self->__currentStillImageCaptureTextAnalysisStateDate, 0);
  objc_storeStrong((id *)&self->__currentStillImageCaptureTextAnalysisIdentifier, 0);
  objc_storeStrong((id *)&self->__textInteractionBackground, 0);
  objc_storeStrong((id *)&self->__cachedAppClipCodeResults, 0);
  objc_storeStrong((id *)&self->__cachedQRCodeResults, 0);
  objc_storeStrong((id *)&self->__machineReadableCodeLoggingController, 0);
  objc_storeStrong((id *)&self->__barcodeParsingSession, 0);
  objc_storeStrong((id *)&self->__filterTypes, 0);
  objc_storeStrong(&self->__filterScrubberLayerContents, 0);
  objc_storeStrong((id *)&self->__feedbackController, 0);
  objc_storeStrong((id *)&self->__accessibilityHUDManagers, 0);
  objc_storeStrong((id *)&self->__disabledModeOverlayView, 0);
  objc_storeStrong((id *)&self->__preferredControlToOpenInDrawerForMode, 0);
  objc_storeStrong((id *)&self->__timerCache, 0);
  objc_storeStrong((id *)&self->__preventConnectionHandoverAssertionController, 0);
  objc_storeStrong((id *)&self->__flashOrTorchUnavailableAlertController, 0);
  objc_storeStrong((id *)&self->__diskSpaceAlertController, 0);
  objc_storeStrong((id *)&self->__torchPatternController, 0);
  objc_storeStrong((id *)&self->__lastTimerIndicatorFaceUpdateDate, 0);
  objc_storeStrong((id *)&self->__synchronizedCaptureTimerDelegate, 0);
  objc_storeStrong((id *)&self->__currentBurstTimer, 0);
  objc_storeStrong((id *)&self->__sharedLibraryLongPressGestureRecognizer, 0);
  objc_storeStrong((id *)&self->__smartStylesSwipeRightGestureRecognizer, 0);
  objc_storeStrong((id *)&self->__smartStylesSwipeLeftGestureRecognizer, 0);
  objc_storeStrong((id *)&self->__nextFilterGestureRecognizer, 0);
  objc_storeStrong((id *)&self->__previousFilterGestureRecognizer, 0);
  objc_storeStrong((id *)&self->__swipeUpGestureRecognizer, 0);
  objc_storeStrong((id *)&self->__swipeDownGestureRecognizer, 0);
  objc_storeStrong((id *)&self->__cameraRollSwipeUpGestureRecognizer, 0);
  objc_storeStrong((id *)&self->__zoomPinchGestureRecognizer, 0);
  objc_storeStrong((id *)&self->__cameraCaseShutterNotifier, 0);
  objc_storeStrong((id *)&self->__physicalButtonInteraction, 0);
  objc_storeStrong((id *)&self->__nextModeGestureRecognizer, 0);
  objc_storeStrong((id *)&self->__previousModeGestureRecognizer, 0);
  objc_destroyWeak((id *)&self->__captureAnimationPreviewOverlay);
  objc_storeStrong((id *)&self->__videoConfigurationStatusIndicator, 0);
  objc_storeStrong((id *)&self->__lightingNameBadge, 0);
  objc_storeStrong((id *)&self->__lightingControl, 0);
  objc_storeStrong((id *)&self->__portraitIntensitySlider, 0);
  objc_storeStrong((id *)&self->__portraitApertureSlider, 0);
  objc_storeStrong((id *)&self->__filterScrubberView, 0);
  objc_storeStrong((id *)&self->__utilityBar, 0);
  objc_storeStrong((id *)&self->__levelViewModel, 0);
  objc_storeStrong((id *)&self->__horizonLevelView, 0);
  objc_storeStrong((id *)&self->__levelView, 0);
  objc_storeStrong((id *)&self->__gridView, 0);
  objc_storeStrong((id *)&self->__zoomControl, 0);
  objc_storeStrong((id *)&self->__zoomSlider, 0);
  objc_storeStrong((id *)&self->__timerIndicatorView, 0);
  objc_storeStrong((id *)&self->__burstIndicatorView, 0);
  objc_storeStrong((id *)&self->__intensityButton, 0);
  objc_storeStrong((id *)&self->__apertureButton, 0);
  objc_storeStrong((id *)&self->__filterButton, 0);
  objc_storeStrong((id *)&self->__imageWell, 0);
  objc_storeStrong((id *)&self->__modeDial, 0);
  objc_storeStrong((id *)&self->__stillDuringVideoButton, 0);
  objc_storeStrong((id *)&self->__dynamicShutterControl, 0);
  objc_storeStrong((id *)&self->__shutterButton, 0);
  objc_storeStrong((id *)&self->__metalContext, 0);
  objc_storeStrong((id *)&self->__smartStyleOnboardingControlDrawerAnimationSequence, 0);
  objc_storeStrong((id *)&self->__descriptionOverlayViewByMode, 0);
  objc_storeStrong((id *)&self->__qrCodeInstructionLabel, 0);
  objc_storeStrong((id *)&self->__portraitModeInstructionLabel, 0);
  objc_storeStrong((id *)&self->__shallowDepthOfFieldBadge, 0);
  objc_storeStrong((id *)&self->__elapsedTimeView, 0);
  objc_storeStrong((id *)&self->__livePhotoBadge, 0);
  objc_storeStrong((id *)&self->__filterNameBadge, 0);
  objc_storeStrong((id *)&self->__doneButton, 0);
  objc_storeStrong((id *)&self->__photosButton, 0);
  objc_storeStrong((id *)&self->__creativeCameraButton, 0);
  objc_storeStrong((id *)&self->__reviewButton, 0);
  objc_storeStrong((id *)&self->__focusAndExposureLockBadge, 0);
  objc_storeStrong((id *)&self->__flipButton, 0);
  objc_storeStrong((id *)&self->__sharedLibraryBadge, 0);
  objc_storeStrong((id *)&self->__sharedLibraryButton, 0);
  objc_storeStrong((id *)&self->__livePhotoButton, 0);
  objc_storeStrong((id *)&self->__timerButton, 0);
  objc_storeStrong((id *)&self->__HDRBadge, 0);
  objc_storeStrong((id *)&self->__HDRButton, 0);
  objc_storeStrong((id *)&self->__flashBadge, 0);
  objc_storeStrong((id *)&self->__flashButton, 0);
  objc_storeStrong((id *)&self->__bottomBar, 0);
  objc_storeStrong((id *)&self->__topBar, 0);
  objc_storeStrong((id *)&self->__transitionController, 0);
  objc_storeStrong((id *)&self->__currentStillImageCaptureMomentSettings, 0);
  objc_storeStrong((id *)&self->__semanticStyles, 0);
  objc_storeStrong((id *)&self->__exposureBiasesByMode, 0);
  objc_storeStrong((id *)&self->__configuredGraphConfiguration, 0);
  objc_storeStrong((id *)&self->__currentGraphConfiguration, 0);
  objc_storeStrong((id *)&self->__timelapseAnalyticsEvent, 0);
  objc_storeStrong((id *)&self->__storageMonitor, 0);
  objc_storeStrong((id *)&self->__storageController, 0);
  objc_storeStrong((id *)&self->__powerController, 0);
  objc_storeStrong((id *)&self->__keepAliveController, 0);
  objc_storeStrong((id *)&self->__remoteShutterController, 0);
  objc_storeStrong((id *)&self->__timelapseController, 0);
  objc_storeStrong((id *)&self->__motionController, 0);
  objc_storeStrong((id *)&self->__locationController, 0);
  objc_storeStrong((id *)&self->__callStatusMonitor, 0);
  objc_storeStrong((id *)&self->__disabledPreviewController, 0);
  objc_storeStrong((id *)&self->__closedViewfinderController, 0);
  objc_storeStrong((id *)&self->__idleController, 0);
  objc_storeStrong((id *)&self->__cameraRollController, 0);
  objc_storeStrong((id *)&self->__panoramaViewController, 0);
  objc_storeStrong((id *)&self->__previewViewController, 0);
  objc_storeStrong((id *)&self->__captureController, 0);
  objc_destroyWeak((id *)&self->_creativeCameraDelegate);
  objc_destroyWeak((id *)&self->_reviewButtonSource);
}

- (void)_commitCTMCaptureWithType:.cold.1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0_4(&dword_1DB760000, v0, v1, "Commit CTM Capture called with capture type None", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

- (void)_commitCTMCaptureWithType:.cold.2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_3(&dword_1DB760000, v0, v1, "Did not find cached initiation settings for %{public}@ gesture", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1_0();
}

- (void)_initiateCTMCaptureWithCurrentSettingsAtSystemTime:.cold.1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0_4(&dword_1DB760000, v0, v1, "Tried to initiate CTM capture before canceling or commiting previous capture! Forcibly canceling last capture.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

- (void)stillImageRequestDidCompleteStillImageLocalPersistence:withResponse:error:.cold.1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_3(&dword_1DB760000, v0, v1, "Photo capture failed due to insufficient disk space. The storage controller reports %{public}@ disk space.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1_0();
}

- (void)_startCapturingVideoWithRequest:.cold.1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0_4(&dword_1DB760000, v0, v1, "External storage: failed to capture to external storage since no destination URL was set", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

- (void)_startCapturingPanoramaWithRequest:.cold.1()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_7(&dword_1DB760000, v0, v1, "Failed to start panorama capture for request %{public}@ (%{public}@)");
  OUTLINED_FUNCTION_1_0();
}

- (void)panoramaRequestDidStartCapturing:.cold.1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0_4(&dword_1DB760000, v0, v1, "Started tracking a new panorama analytics capture event before clearing the last one! panoramaRequestDidStartCapturing was called twice before panoramaRequestDidStopCapturing", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void __64__CAMViewfinderViewController__handleImageAnalysisButtonTapped___block_invoke_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_3(&dword_1DB760000, v0, v1, "Error performing single-item action: %{public}@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1_0();
}

- (void)_setWantsVisualTextAnalysis:animated:.cold.1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_3(&dword_1DB760000, v0, v1, "Failed to capture photo for text analysis: %{public}@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1_0();
}

- (void)_handleTextAnalysisStillImageResponse:error:forRequest:.cold.1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_3(&dword_1DB760000, v0, v1, "No image received for text analysis: %{public}@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1_0();
}

- (void)_stillImageCaptureRequestForTextAnalysis
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0_4(&dword_1DB760000, v0, v1, "Attempting to analyze text without a selected text region!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

- (void)request:didFailWithError:.cold.1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_3(&dword_1DB760000, v0, v1, "Image analysis failed: %{public}@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1_0();
}

void __66__CAMViewfinderViewController__handlePillPressForCurrentMRCAction__block_invoke_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_3(&dword_1DB760000, v0, v1, "Failed to perform action for MRC: %{public}@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1_0();
}

- (void)actionDidUpdateTitle:.cold.1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_3(&dword_1DB760000, v0, v1, "Expecting class type of BCSAction for action: %{public}@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1_0();
}

- (void)_handleSmartStyleIntensitySlider:.cold.1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0_4(&dword_1DB760000, v0, v1, "_currentSmartStyle was nil when slider2D was changed.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

- (void)dynamicShutterControlDidShortPress:.cold.1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_3(&dword_1DB760000, v0, v1, "Dynamic Shutter: Attempted to short press capture in a mode that doesn't support it: %{public}@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1_0();
}

- (void)dynamicShutterControlDidStart:withGesture:.cold.1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0_4(&dword_1DB760000, v0, v1, "Dynamic Shutter: Attempted to start timer countdown for portrait capture without available timer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

- (void)dynamicShutterControlDidStart:withGesture:.cold.2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0_4(&dword_1DB760000, v0, v1, "Dynamic Shutter: Attempted to start video capture with video capture already in progress", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

- (void)dynamicShutterControlDidStart:withGesture:.cold.3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0_4(&dword_1DB760000, v0, v1, "Dynamic Shutter: Attempted to start pano capture with pano capture already in progress", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

- (void)dynamicShutterControlDidStart:withGesture:.cold.4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0_4(&dword_1DB760000, v0, v1, "Dynamic Shutter: Attempted to start timelapse capture with timelapse capture already in progress", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

- (void)dynamicShutterControlDidStop:.cold.1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0_4(&dword_1DB760000, v0, v1, "Dynamic Shutter: Attempted to stop timer countdown for portrait capture with a timer capture in progress", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

- (void)dynamicShutterControlDidStop:.cold.2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0_4(&dword_1DB760000, v0, v1, "Dynamic Shutter: Attempted to stop video capture with no video capture in progress", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

- (void)dynamicShutterControlDidStop:.cold.3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0_4(&dword_1DB760000, v0, v1, "Dynamic Shutter: Attempted to stop pano capture with no pano capture in progress", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

- (void)dynamicShutterControlDidStop:.cold.4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0_4(&dword_1DB760000, v0, v1, "Dynamic Shutter: Attempted to stop timelapse capture with no timelapse capture in progress", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

- (void)dynamicShutterControlDidPressLockButton:.cold.1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0_4(&dword_1DB760000, v0, v1, "Dynamic Shutter: Attempted to capture still during video with no CTM video capture in progress", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

- (void)dynamicShutterControlDidPressLockButton:.cold.2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0_4(&dword_1DB760000, v0, v1, "Dynamic Shutter: Attempted to capture still during video with no video capture in progress", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

- (void)dynamicShutterControlDidPressLockButton:.cold.3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_3(&dword_1DB760000, v0, v1, "Dynamic Shutter: Attempted to capture still during video in a mode that doesn't support it: %{public}@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1_0();
}

- (void)dynamicShutterControlDidPressPauseResumeButton:.cold.1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0_4(&dword_1DB760000, v0, v1, "Dynamic Shutter: Attempted to pause video while not recording video", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

- (void)dynamicShutterControlDidPressPauseResumeButton:(void *)a1 .cold.2(void *a1, NSObject *a2)
{
  unint64_t v3;
  uint64_t v4;
  __CFString *v5;
  int v6;
  __CFString *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = objc_msgSend(a1, "_currentMode");
  if (v3 > 9)
    v5 = 0;
  else
    v5 = off_1EA32B058[v3];
  v6 = 138543362;
  v7 = v5;
  OUTLINED_FUNCTION_2_0(&dword_1DB760000, a2, v4, "Dynamic Shutter: Attempted pause video in a mode that doesn't support it: %{public}@", (uint8_t *)&v6);
  OUTLINED_FUNCTION_1();
}

- (void)dynamicShutterControlDidPresentCounter:.cold.1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0_4(&dword_1DB760000, v0, v1, "Expected to cancel touch-down initiation settings when burst starts", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

- (void)_startCapturingBurstWithRequest:.cold.1()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_7(&dword_1DB760000, v0, v1, "Failed to start capturing a burst with request %{public}@ (%{public}@)");
  OUTLINED_FUNCTION_1_0();
}

void __69__CAMViewfinderViewController__apertureSliderDidChangeApertureValue___block_invoke_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_3(&dword_1DB760000, v0, v1, "Failed sending aperture %{public}@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1_0();
}

void __67__CAMViewfinderViewController__handleExposureSliderDidChangeValue___block_invoke_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_3(&dword_1DB760000, v0, v1, "Failed sending exposure %{public}@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1_0();
}

void __107__CAMViewfinderViewController__changeToZoomFactor_rampDuration_zoomRampTuning_shouldAnimate_updateOverlay___block_invoke_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_3(&dword_1DB760000, v0, v1, "%{public}@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1_0();
}

- (void)_handleApplicationWillAddDeactivationReason:.cold.1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_3(&dword_1DB760000, v0, v1, "Not handling unexpected deactivation reason: %{public}@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1_0();
}

- (void)_availableDefaultCaptureMode
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0_4(&dword_1DB760000, v0, v1, "Attempting to find an available capture mode, but there are no available capture modes!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void __103__CAMViewfinderViewController__requestPasscodeUnlockForCameraRollController_forAction_completionBlock___block_invoke_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_3(&dword_1DB760000, v0, v1, "Failed to unlock: %{public}@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1_0();
}

@end
