void __destroy_helper_block_ea8_32c59_ZTSNSt3__18weak_ptrIN2as6server17DeviceLatencyPoll4ImplEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

uint64_t __copy_helper_block_ea8_32c59_ZTSNSt3__18weak_ptrIN2as6server17DeviceLatencyPoll4ImplEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_ea8_32c142_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP7NSArrayEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E_(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

}

unsigned int *as::server::AudioSessionInfo::AudioSessionInfo(unsigned int *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  as *v10;
  id **MXNotificationNames;
  id *v12;
  id *v13;
  NSString *v14;
  uint64_t SpecialMXNotificationNames;
  id *v16;
  id *v17;
  NSString *v18;
  const __CFString **v19;
  const __CFString **v20;
  const __CFString *v21;
  __CFNotificationCenter *LocalCenter;
  CFTypeRef cf;

  v7 = a3;
  v8 = a4;
  as::server::ConstAudioSessionInfo::ConstAudioSessionInfo((uint64_t)a1, a2, v8);
  *(_QWORD *)a1 = &off_1E8205858;
  *((_QWORD *)a1 + 31) = 0;
  v9 = v7;
  *((_QWORD *)a1 + 32) = v9;
  *((_QWORD *)a1 + 33) = 0;
  *((_BYTE *)a1 + 272) = 0;
  *(_OWORD *)(a1 + 69) = 0u;
  *(_OWORD *)(a1 + 73) = 0u;
  *(_QWORD *)(a1 + 77) = 0;
  strcpy((char *)a1 + 316, "llcp");
  strcpy((char *)a1 + 324, "iprs");
  a1[107] = 0;
  *((_BYTE *)a1 + 432) = 0;
  *((_BYTE *)a1 + 440) = 0;
  *((_BYTE *)a1 + 448) = 0;
  *((_QWORD *)a1 + 57) = 0;
  *((_QWORD *)a1 + 58) = 0;
  *((_QWORD *)a1 + 61) = 0;
  *((_QWORD *)a1 + 62) = 0;
  *(_OWORD *)(a1 + 95) = 0u;
  *((_OWORD *)a1 + 22) = 0u;
  *((_OWORD *)a1 + 23) = 0u;
  *((_OWORD *)a1 + 21) = 0u;
  *((_QWORD *)a1 + 51) = 0;
  *((_QWORD *)a1 + 52) = 0;
  *((_QWORD *)a1 + 50) = 0;
  *((_BYTE *)a1 + 424) = 0;
  *((_QWORD *)a1 + 59) = 0;
  *((_QWORD *)a1 + 60) = a1 + 122;
  a1[126] = 0;
  *((_QWORD *)a1 + 66) = 0;
  *(_QWORD *)((char *)a1 + 533) = 0;
  *((_QWORD *)a1 + 64) = 0;
  *((_QWORD *)a1 + 65) = 0;
  *((_QWORD *)a1 + 68) = a1 + 136;
  *((_QWORD *)a1 + 69) = a1 + 136;
  *((_OWORD *)a1 + 35) = xmmword_1C89BA3F0;
  *((_OWORD *)a1 + 36) = 0u;
  *((_OWORD *)a1 + 37) = 0u;
  *((_OWORD *)a1 + 38) = 0u;
  *(_OWORD *)(a1 + 155) = 0u;
  as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(a1, &cf);
  if (cf)
  {
    CFRelease(cf);
    MXNotificationNames = (id **)as::GetMXNotificationNames(v10);
    v12 = *MXNotificationNames;
    v13 = MXNotificationNames[1];
    while (v12 != v13)
    {
      v14 = (NSString *)*v12;
      as::server::AudioSessionInfo::AddMXNotificationListener((as::server::AudioSessionInfo *)a1, v14, 0);

      ++v12;
    }
    SpecialMXNotificationNames = as::GetSpecialMXNotificationNames((as *)MXNotificationNames);
    v16 = *(id **)SpecialMXNotificationNames;
    v17 = *(id **)(SpecialMXNotificationNames + 8);
    while (v16 != v17)
    {
      v18 = (NSString *)*v16;
      as::server::AudioSessionInfo::AddMXNotificationListener((as::server::AudioSessionInfo *)a1, v18, 0);

      ++v16;
    }
    {
      do
      {
        v21 = *v19;
        LocalCenter = CFNotificationCenterGetLocalCenter();
        CFNotificationCenterAddObserver(LocalCenter, (const void *)a1[2], (CFNotificationCallback)as::server::HandleCFNotification, v21, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
        ++v19;
      }
      while (v19 != v20);
    }
  }

  return a1;
}

void sub_1C895D8DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id **a10, void *a11, uint64_t a12)
{
  uint64_t v12;
  void *v13;
  uint64_t *v14;
  std::mutex *v15;
  _QWORD **v16;
  void *v18;

  std::mutex::~mutex(v15);
  std::__list_imp<NSDictionary * {__strong}>::clear(v14);
  a12 = v12 + 512;
  std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::__tree<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::__map_value_compare<void const*,std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::less<void const*>,true>,std::allocator<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>>>::destroy(v12 + 480, *v16);
  v18 = *(void **)(v12 + 456);
  if (v18)
  {
    *(_QWORD *)(v12 + 464) = v18;
    operator delete(v18);
  }
  if (*(_BYTE *)(v12 + 448))

  as::server::AudioSessionInfo::DebugState::~DebugState((void **)(v12 + 344));
  std::unique_ptr<as::server::PickableRoute>::reset[abi:ne180100](a10, 0);

  as::server::ConstAudioSessionInfo::~ConstAudioSessionInfo((as::server::ConstAudioSessionInfo *)v12);
  _Unwind_Resume(a1);
}

uint64_t as::server::AudioSessionInfo::AddMXNotificationListener(as::server::AudioSessionInfo *this, NSString *a2, int a3)
{
  NSString *v5;
  NSString *v6;
  as::server *v7;
  NSObject *v8;
  int v9;
  int v10;
  as::server *v11;
  NSObject *v12;
  int v13;
  uint64_t v14;
  as::server *v15;
  NSObject *v16;
  _BYTE cf[12];
  __int16 v19;
  int v20;
  __int16 v21;
  _BYTE v22[14];
  __int16 v23;
  int v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (a3)
  {
    v25[0] = v5;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v25, 1);
    v7 = (as::server *)objc_claimAutoreleasedReturnValue();
    v8 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v7));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      v9 = *((_DWORD *)this + 2);
      *(_DWORD *)cf = 136315906;
      *(_QWORD *)&cf[4] = "AudioSessionInfo.mm";
      v19 = 1024;
      v20 = 1053;
      v21 = 1024;
      *(_DWORD *)v22 = v9;
      *(_WORD *)&v22[4] = 2112;
      *(_QWORD *)&v22[6] = v7;
      _os_log_impl(&dword_1C895C000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Session 0x%x setting kMXSessionProperty_SubscribeToNotifications for notification: %@", cf, 0x22u);
    }
    as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(this, cf);
    v10 = MXSessionSetProperty();
    v11 = *(as::server **)cf;
    if (*(_QWORD *)cf)
      CFRelease(*(CFTypeRef *)cf);
    if (v10)
    {
      v12 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v11));
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        v13 = *((_DWORD *)this + 2);
        *(_DWORD *)cf = 136316162;
        *(_QWORD *)&cf[4] = "AudioSessionInfo.mm";
        v19 = 1024;
        v20 = 1058;
        v21 = 1024;
        *(_DWORD *)v22 = v13;
        *(_WORD *)&v22[4] = 2112;
        *(_QWORD *)&v22[6] = v7;
        v23 = 1024;
        v24 = v10;
        _os_log_impl(&dword_1C895C000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d Session 0x%x failed to set SubscribeToNotifications for: %@ with a status: %d", cf, 0x28u);
      }
    }

  }
  CMNotificationCenterGetDefaultLocalCenter();
  as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(this, cf);
  v14 = CMNotificationCenterAddListener();
  v15 = *(as::server **)cf;
  if (*(_QWORD *)cf)
    CFRelease(*(CFTypeRef *)cf);
  if ((_DWORD)v14)
  {
    v16 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v15));
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)cf = 136315650;
      *(_QWORD *)&cf[4] = "AudioSessionInfo.mm";
      v19 = 1024;
      v20 = 1065;
      v21 = 2112;
      *(_QWORD *)v22 = v6;
      _os_log_impl(&dword_1C895C000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d AddMXNotificationListener failed for %@", cf, 0x1Cu);
    }
  }

  return v14;
}

void sub_1C895DC34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

CFTypeRef as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef@<X0>(CFTypeRef this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 14);
  if (v3)
    this = CFRetain(*((CFTypeRef *)this + 14));
  *a2 = v3;
  return this;
}

void as::server::forbid_acq::GetPropertyMX(as::server::forbid_acq *this@<X0>, audit_token_t *a2@<X2>, NSString *a3@<X3>, audit_token_t *a4@<X1>, uint64_t a5@<X8>)
{
  char v5;
  unsigned int v7;
  audit_token_t *v9;
  as::server::ConstAudioSessionInfo *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  as::server *HasMXPropertyPipeEntitlement;
  int v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  as::server::ConstAudioSessionInfo *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  NSObject *v27;
  int v28;
  unint64_t *v29;
  unint64_t v30;
  as::server::ConstAudioSessionInfo *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  as::server *v44;
  NSObject *v45;
  int v46;
  std::string::size_type v47;
  std::string *v48;
  void **v49;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  as::server *v53;
  int v54;
  std::string::size_type v55;
  std::string *v56;
  void **v57;
  OS::CF *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  NSObject *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t *v70;
  char *v71;
  char v72[8];
  uint64_t *v73;
  int v74;
  OS::CF *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  std::string v78;
  as::server::ConstAudioSessionInfo *v79;
  std::__shared_weak_count *v80;
  _BYTE v81[16];
  _BYTE *v82;
  char v83;
  _BYTE v84[8];
  uint64_t *v85;
  _BYTE *v86;
  char v87;
  void *__p[2];
  void **v89;
  char v90;
  _BYTE v91[16];
  uint64_t v92;
  char v93;
  _BYTE buf[28];
  __int16 v95;
  std::string *v96;
  __int16 v97;
  void **v98;
  char *v99;
  char v100;
  char v101[16];
  uint64_t v102;

  v5 = (char)a3;
  v7 = this;
  v102 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  as::server::ConstAudioSessionInfoAccessor::ConstAudioSessionInfoAccessor((as::server::ConstAudioSessionInfoAccessor *)&v79, v7, a4, 1);
  v10 = v79;
  if (!v79)
  {
    v27 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(0));
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AudioSessionServerImpCommon.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 213;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v7;
      _os_log_impl(&dword_1C895C000, v27, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cannot get session info for session ID: 0x%x", buf, 0x18u);
    }
    v28 = 561210739;
    goto LABEL_90;
  }
  if ((v5 & 1) != 0)
  {
    v11 = v80;
    *(_QWORD *)buf = v79;
    *(_QWORD *)&buf[8] = v80;
    if (v80)
    {
      p_shared_owners = (unint64_t *)&v80->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    HasMXPropertyPipeEntitlement = (as::server *)as::server::ConstAudioSessionInfo::HasMXPropertyPipeEntitlement(v10, a4);
    v15 = (int)HasMXPropertyPipeEntitlement;
    if (!v11)
      goto LABEL_10;
    v16 = (unint64_t *)&v11->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v15)
      {
LABEL_11:
        v10 = v79;
        if (!v79)
        {
          v66 = _os_crash();
          as::server::require_acq::AudioSessionServerSetClientPlayState(v66);
        }
        goto LABEL_12;
      }
    }
    else
    {
LABEL_10:
      if ((_DWORD)HasMXPropertyPipeEntitlement)
        goto LABEL_11;
    }
    v62 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(HasMXPropertyPipeEntitlement));
    if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "AudioSessionServerImpCommon.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 221;
      *(_WORD *)&buf[18] = 2112;
      *(_QWORD *)&buf[20] = v9;
      v95 = 1024;
      LODWORD(v96) = v7;
      _os_log_impl(&dword_1C895C000, v62, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to get MXProperty: %@ on generic pipe for session: 0x%x due to missing entitlement.", buf, 0x22u);
    }
    v28 = 1701737535;
LABEL_90:
    *(_DWORD *)a5 = v28;
    *(_QWORD *)(a5 + 8) = 0;
    goto LABEL_91;
  }
LABEL_12:
  v18 = v80;
  if (v80)
  {
    v19 = (unint64_t *)&v80->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v10, buf);
  if (*(_QWORD *)buf)
    CFRelease(*(CFTypeRef *)buf);
  if (v18)
  {
    v21 = (unint64_t *)&v18->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v23 = v79;
  if (!v79)
  {
    v67 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v67);
  }
  v24 = v80;
  *(_QWORD *)buf = v79;
  *(_QWORD *)&buf[8] = v80;
  if (v80)
  {
    v25 = (unint64_t *)&v80->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  if (*((char *)v23 + 223) < 0)
    std::string::__init_copy_ctor_external(&v78, *((const std::string::value_type **)v23 + 25), *((_QWORD *)v23 + 26));
  else
    v78 = *(std::string *)((char *)v23 + 200);
  if (v24)
  {
    v29 = (unint64_t *)&v24->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v31 = v79;
  if (!v79)
  {
    v68 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v68);
  }
  v32 = v80;
  if (v80)
  {
    v33 = (unint64_t *)&v80->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  v36 = *((_QWORD *)v31 + 28);
  v35 = (std::__shared_weak_count *)*((_QWORD *)v31 + 29);
  v76 = v36;
  v77 = v35;
  if (v35)
  {
    v37 = (unint64_t *)&v35->__shared_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  if (v32)
  {
    v39 = (unint64_t *)&v32->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  strcpy(v101, "get_property");
  as::server::MXAccessor<as::server::ForbidACQ>::GetProperty(v9, (uint64_t)&v74);
  if (v74)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[4],char [4],0>((uint64_t)__p, "key");
    v89 = __p;
    v90 = 1;
    v69 = (char *)-[audit_token_t UTF8String](objc_retainAutorelease(v9), "UTF8String");
    v92 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v91, &v69);
    v93 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)buf, (uint64_t)__p, 2, 1, 2);
    *(_QWORD *)&buf[16] = buf;
    buf[24] = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>((uint64_t)v81, "error");
    v82 = v81;
    v83 = 1;
    v84[0] = 5;
    v85 = (uint64_t *)v74;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v84);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v84);
    v86 = v84;
    v87 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v96 + 2, (uint64_t)v81, 2, 1, 2);
    v99 = (char *)&v96 + 2;
    v100 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v72, (uint64_t)buf, 2, 1, 2);
    for (i = 0; i != -8; i -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v96 + i * 8 + 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&(&v98)[i], *((unsigned __int8 *)&v96 + i * 8 + 2));
    }
    for (j = 0; j != -8; j -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v84[j * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v85)[j], v84[j * 8]);
    }
    for (k = 0; k != -64; k -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v91[k]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v91[k + 8], v91[k]);
    }
    v45 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v44));
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      v46 = SHIBYTE(v78.__r_.__value_.__r.__words[2]);
      v47 = v78.__r_.__value_.__r.__words[0];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v72, -1, 0x20u, 0, 0, __p);
      v48 = &v78;
      if (v46 < 0)
        v48 = (std::string *)v47;
      if (SHIBYTE(v89) >= 0)
        v49 = __p;
      else
        v49 = (void **)__p[0];
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "AudioSessionServerImpCommon.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 237;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v101;
      v95 = 2080;
      v96 = v48;
      v97 = 2080;
      v98 = v49;
      _os_log_impl(&dword_1C895C000, v45, OS_LOG_TYPE_ERROR, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
      if (SHIBYTE(v89) < 0)
        operator delete(__p[0]);
    }
  }
  else
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[4],char [4],0>((uint64_t)__p, "key");
    v89 = __p;
    v90 = 1;
    v71 = (char *)-[audit_token_t UTF8String](objc_retainAutorelease(v9), "UTF8String");
    v92 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v91, &v71);
    v93 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)buf, (uint64_t)__p, 2, 1, 2);
    *(_QWORD *)&buf[16] = buf;
    buf[24] = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>((uint64_t)v81, "value");
    v82 = v81;
    v83 = 1;
    OS::CF::ToJSON((uint64_t *)&v69, (__CFString *)v75);
    v84[0] = (_BYTE)v69;
    v85 = v70;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v69);
    LOBYTE(v69) = 0;
    v70 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v84);
    v86 = v84;
    v87 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v96 + 2, (uint64_t)v81, 2, 1, 2);
    v99 = (char *)&v96 + 2;
    v100 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v72, (uint64_t)buf, 2, 1, 2);
    for (m = 0; m != -8; m -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v96 + m * 8 + 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&(&v98)[m], *((unsigned __int8 *)&v96 + m * 8 + 2));
    }
    for (n = 0; n != -8; n -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v84[n * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v85)[n], v84[n * 8]);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v69);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v70, v69);
    for (ii = 0; ii != -64; ii -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v91[ii]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v91[ii + 8], v91[ii]);
    }
    v45 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v53));
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
    {
      v54 = SHIBYTE(v78.__r_.__value_.__r.__words[2]);
      v55 = v78.__r_.__value_.__r.__words[0];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v72, -1, 0x20u, 0, 0, __p);
      v56 = &v78;
      if (v54 < 0)
        v56 = (std::string *)v55;
      if (SHIBYTE(v89) >= 0)
        v57 = __p;
      else
        v57 = (void **)__p[0];
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "AudioSessionServerImpCommon.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 234;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v101;
      v95 = 2080;
      v96 = v56;
      v97 = 2080;
      v98 = v57;
      _os_log_impl(&dword_1C895C000, v45, OS_LOG_TYPE_DEBUG, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
      if (SHIBYTE(v89) < 0)
        operator delete(__p[0]);
    }
  }

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v72);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v73, v72[0]);
  *(_DWORD *)a5 = v74;
  v58 = v75;
  *(_QWORD *)(a5 + 8) = v58;

  v59 = v77;
  if (v77)
  {
    v60 = (unint64_t *)&v77->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
LABEL_91:
  v63 = v80;
  if (v80)
  {
    v64 = (unint64_t *)&v80->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }

}

void sub_1C895E674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t a14, uint64_t a15, void *a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  void *v36;
  void *v37;

  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&a13);
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  if (a24 < 0)
    operator delete(__p);
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a26);

  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(uint64_t a1, uint64_t a2)
{
  _BYTE v4[8];
  uint64_t *v5;

  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::moved_or_copied(a2, (uint64_t)v4);
  *(_BYTE *)a1 = v4[0];
  *(_QWORD *)(a1 + 8) = v5;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  v4[0] = 0;
  v5 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v5, v4[0]);
  return a1;
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(uint64_t **a1, int a2)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  unint64_t i;
  uint64_t v11;
  char v12;
  uint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  void *v20;
  void *v21;
  void **v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;

  v24 = 0;
  v25 = 0;
  v26 = 0;
  v3 = a2 - 1;
  if (a2 == 1)
  {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(&v24, (*a1)[2]);
    v4 = (uint64_t)(*a1 + 1);
    v5 = (_QWORD *)**a1;
    if (v5 != (_QWORD *)v4)
    {
      v6 = v25;
      do
      {
        if (v6 >= v26)
        {
          v6 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(&v24, (uint64_t)(v5 + 7));
        }
        else
        {
          *(_BYTE *)v6 = *((_BYTE *)v5 + 56);
          *(_QWORD *)(v6 + 8) = v5[8];
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(v5 + 7));
          *((_BYTE *)v5 + 56) = 0;
          v5[8] = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
          v6 += 16;
        }
        v25 = v6;
        v7 = (_QWORD *)v5[1];
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = (_QWORD *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v5[2];
            v9 = *v8 == (_QWORD)v5;
            v5 = v8;
          }
          while (!v9);
        }
        v5 = v8;
      }
      while (v8 != (_QWORD *)v4);
    }
  }
  else if (a2 == 2)
  {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(&v24, ((*a1)[1] - **a1) >> 4);
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>((uint64_t)&v22, **a1, (*a1)[1], &v24);
  }
  for (i = v25; v24 != v25; i = v25)
  {
    v12 = *(_BYTE *)(i - 16);
    v11 = i - 16;
    LOBYTE(v22) = v12;
    v23 = *(uint64_t **)(v11 + 8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
    *(_BYTE *)v11 = 0;
    *(_QWORD *)(v11 + 8) = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v22);
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)&v24, v25 - 16);
    if (v22 == 1)
    {
      v13 = v23;
      v14 = v23 + 1;
      v15 = (_QWORD *)*v23;
      if ((uint64_t *)*v23 != v23 + 1)
      {
        v16 = v25;
        do
        {
          if (v16 >= v26)
          {
            v16 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(&v24, (uint64_t)(v15 + 7));
          }
          else
          {
            *(_BYTE *)v16 = *((_BYTE *)v15 + 56);
            *(_QWORD *)(v16 + 8) = v15[8];
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(v15 + 7));
            *((_BYTE *)v15 + 56) = 0;
            v15[8] = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v16);
            v16 += 16;
          }
          v25 = v16;
          v17 = (_QWORD *)v15[1];
          if (v17)
          {
            do
            {
              v18 = v17;
              v17 = (_QWORD *)*v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              v18 = (_QWORD *)v15[2];
              v9 = *v18 == (_QWORD)v15;
              v15 = v18;
            }
            while (!v9);
          }
          v15 = v18;
        }
        while (v18 != v14);
        v13 = v23;
      }
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy((uint64_t)v13, (char *)v13[1]);
      *v13 = (uint64_t)(v13 + 1);
      v13[2] = 0;
      v13[1] = 0;
    }
    else if (v22 == 2)
    {
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>((uint64_t)&v27, *v23, v23[1], &v24);
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::clear[abi:ne180100](v23);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v22);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22);
  }
  switch(v3)
  {
    case 0:
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy((uint64_t)*a1, (char *)(*a1)[1]);
      goto LABEL_41;
    case 1:
      v22 = (void **)*a1;
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&v22);
      goto LABEL_41;
    case 2:
      v19 = *a1;
      if ((*((char *)*a1 + 23) & 0x80000000) == 0)
        goto LABEL_42;
      v20 = (void *)*v19;
      break;
    case 7:
      v19 = *a1;
      v21 = (void *)**a1;
      if (!v21)
        goto LABEL_42;
      v19[1] = (uint64_t)v21;
      v20 = v21;
      break;
    default:
      goto LABEL_43;
  }
  operator delete(v20);
LABEL_41:
  v19 = *a1;
LABEL_42:
  operator delete(v19);
LABEL_43:
  v22 = (void **)&v24;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&v22);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(uint64_t result)
{
  const char *v1;
  int v2;

  switch(*(_BYTE *)result)
  {
    case 1:
      if (*(_QWORD *)(result + 8))
        return result;
      v1 = "m_type != value_t::object or m_value.object != nullptr";
      v2 = 1220;
      break;
    case 2:
      if (*(_QWORD *)(result + 8))
        return result;
      v1 = "m_type != value_t::array or m_value.array != nullptr";
      v2 = 1221;
      break;
    case 3:
      if (*(_QWORD *)(result + 8))
        return result;
      v1 = "m_type != value_t::string or m_value.string != nullptr";
      v2 = 1222;
      break;
    case 8:
      if (*(_QWORD *)(result + 8))
        return result;
      v1 = "m_type != value_t::binary or m_value.binary != nullptr";
      v2 = 1223;
      break;
    default:
      return result;
  }
  __assert_rtn("assert_invariant", "json.hpp", v2, v1);
}

void std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(a1, *((_QWORD *)a2 + 1));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(a2 + 56));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a2 + 64, a2[56]);
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::moved_or_copied@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(a1 + 24))
    return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(a2, v3);
  *(_BYTE *)a2 = *(_BYTE *)v3;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(v3 + 8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v3);
  *(_BYTE *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 16 * v6;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1C895EE40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5)
{
  uint64_t v10;
  _BYTE **v11;
  _BYTE *v12;
  int v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  nlohmann::detail::exception *exception;
  uint64_t v19;
  uint64_t v20[3];

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (!a3)
  {
LABEL_7:
    v13 = 1;
    if ((a4 & 1) != 0)
      goto LABEL_17;
    goto LABEL_10;
  }
  v10 = 32 * a3;
  v11 = (_BYTE **)(a2 + 16);
  while (1)
  {
    v12 = *v11;
    if (**v11 != 2
      || *(_QWORD *)(*((_QWORD *)v12 + 1) + 8) - **((_QWORD **)v12 + 1) != 32
      || *(_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]((uint64_t)v12, 0) != 3)
    {
      break;
    }
    v11 += 4;
    v10 -= 32;
    if (!v10)
      goto LABEL_7;
  }
  v13 = 0;
  if ((a4 & 1) == 0)
  {
LABEL_10:
    if (a5 == 2)
      v14 = 0;
    else
      v14 = v13;
    if (a5 != 1)
      LOBYTE(v13) = 1;
    if ((v13 & 1) == 0)
    {
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v20, "cannot create object from initializer list");
      nlohmann::detail::type_error::create(301, (uint64_t)v20, exception);
    }
    v13 = v14;
  }
LABEL_17:
  v15 = a2 + 32 * a3;
  if (v13)
  {
    *(_BYTE *)a1 = 1;
    v16 = operator new(0x18uLL);
    v16[2] = 0;
    v16[1] = 0;
    *v16 = v16 + 1;
    *(_QWORD *)(a1 + 8) = v16;
    std::for_each[abi:ne180100]<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::(std::initializer_list<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>,BOOL,nlohmann::detail::value_t)::{lambda(nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&)#2}>(a2, v15, a1);
  }
  else
  {
    *(_BYTE *)a1 = 2;
    v19 = v15;
    v20[0] = a2;
    *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*>(v20, &v19);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_1C895F084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*>(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = operator new(0x18uLL);
  v5 = *a1;
  v6 = *a2;
  v7 = (*a2 - *a1) >> 5;
  v4[1] = 0;
  v4[2] = 0;
  *v4 = 0;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*>(v4, v5, v6, v7);
  return v4;
}

void sub_1C895F110(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](uint64_t a1, uint64_t a2)
{
  nlohmann::detail::exception *exception;
  char *v5;
  std::string v6;
  std::string v7;

  if (*(_BYTE *)a1 != 2)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v5 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
    std::string::basic_string[abi:ne180100]<0>(&v6, v5);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use operator[] with a numeric argument with ", &v6, &v7);
    nlohmann::detail::type_error::create(305, (uint64_t)&v7, exception);
  }
  return **(_QWORD **)(a1 + 8) + 16 * a2;
}

void sub_1C895F1D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(uint64_t **a1, void **a2, uint64_t a3, uint64_t a4)
{
  uint64_t **v7;
  uint64_t *result;
  uint64_t *v9;
  uint64_t v10;

  v7 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  result = *v7;
  if (!*v7)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((uint64_t)a1, a3, a4, (uint64_t)&v9);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v10, v7, v9);
    return v9;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

_QWORD *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, void **a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, (void **)v4 + 4) & 0x80) == 0)
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a3) & 0x80) == 0)
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _OWORD *v8;
  char v9;
  uint64_t v10;
  uint64_t result;

  v7 = a1 + 8;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  v8[2] = *(_OWORD *)a2;
  *((_QWORD *)v8 + 6) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v9 = *(_BYTE *)a3;
  *((_QWORD *)v8 + 8) = *(_QWORD *)(a3 + 8);
  *((_BYTE *)v8 + 56) = v9;
  v10 = (uint64_t)v8 + 56;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v10);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

std::string *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1C895F5A4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>(uint64_t a1, char **a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const* const&>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const* const&>(char **a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, *a1);
  return v2;
}

void sub_1C895F63C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[6]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[6]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1C895F6D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void as::server::HandleMXNotification(uint64_t a1, AudioSession *a2, void *a3, uint64_t a4, const void *a5)
{
  id v7;
  as::server *DeepCopy;
  NSObject *v9;
  std::string *v10;
  id v11;
  as::server *v12;
  as::server *v13;
  void *v14;
  as::server *v15;
  id v16;
  int v17;
  as::server *v18;
  NSObject *v19;
  uint64_t v20;
  as::server *v21;
  as::server *v22;
  as::server *v23;
  void *v24;
  void *v25;
  as::server::LegacySessionManager *v26;
  unsigned int v27;
  const char *v28;
  id v29;
  as::server *v30;
  NSObject *v31;
  NSObject *v32;
  NSDictionary *v33;
  void **v34;
  void *v35;
  os_unfair_lock_s *v36;
  as::server::ConstAudioSessionInfo *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  as::server *v41;
  unint64_t v42;
  uint64_t i;
  as::server *v44;
  as::server::ConstAudioSessionInfo *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  NSObject *v51;
  int v52;
  std::string::size_type v53;
  std::string *v54;
  void **v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  NSMutableDictionary *v59;
  void *v60;
  os_unfair_lock_s *v61;
  as::server::ConstAudioSessionInfo *v62;
  std::__shared_weak_count *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  as::server *DefaultSubsessionRef;
  unint64_t v67;
  NSObject *v68;
  void *v69;
  const void *v70;
  NSObject *v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  id v77;
  as::server *v78;
  void *__p[2];
  char v80;
  char v81[8];
  uint64_t *v82;
  as::server::ConstAudioSessionInfo *v83;
  std::__shared_weak_count *v84;
  _BYTE buf[40];
  id v86;
  uint64_t v87;
  int v88;
  std::string v89;
  char v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  DeepCopy = (as::server *)CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a5, 2uLL);
  v9 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(DeepCopy));
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    AudioSession::FormatSessionIDAsHex(a2, &v89);
    v10 = (v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v89
        : (std::string *)v89.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136316162;
    *(_QWORD *)&buf[4] = "AudioSessionServerImpNotificationHandlers.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 686;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = v10;
    *(_WORD *)&buf[28] = 2112;
    *(_QWORD *)&buf[30] = v7;
    *(_WORD *)&buf[38] = 2112;
    v86 = DeepCopy;
    _os_log_impl(&dword_1C895C000, v9, OS_LOG_TYPE_INFO, "%25s:%-5d HandleMXNotification, session ID = %s, name = %@, payload = %@", buf, 0x30u);
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v89.__r_.__value_.__l.__data_);
  }

  LODWORD(v76) = (_DWORD)a2;
  v11 = v7;
  v77 = v11;
  v12 = DeepCopy;
  v78 = v12;
  if (objc_msgSend(v11, "isEqualToString:", *MEMORY[0x1E0D49368], v76))
  {
    v13 = v12;
    as::server::GetAudioControlQueue(v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = ___ZN12_GLOBAL__N_132HandleAppStateChangeNotificationEjP12NSDictionary_block_invoke;
    *(_QWORD *)&buf[24] = &unk_1E8205598;
    LODWORD(v86) = (_DWORD)a2;
    v15 = v13;
    *(_QWORD *)&buf[32] = v15;
    as::server::DispatchBlock(v14, buf, 0, (uint64_t)"HandleAppStateChangeNotification", (uint64_t)"AudioSessionServerImpNotificationHandlers.mm", 572, 0, 0);

    v16 = v11;
    goto LABEL_74;
  }
  if ((objc_msgSend(v11, "isEqualToString:", *MEMORY[0x1E0D493C8]) & 1) != 0)
  {
    v17 = 32770;
LABEL_11:
    v16 = v11;
    v15 = v12;
    goto LABEL_74;
  }
  v18 = (as::server *)objc_msgSend(v11, "isEqualToString:", *MEMORY[0x1E0D493E0]);
  if (!(_DWORD)v18)
  {
    if (objc_msgSend(v11, "isEqualToString:", *MEMORY[0x1E0D49370]))
    {
      v17 = 32771;
      goto LABEL_11;
    }
    if (objc_msgSend(v11, "isEqualToString:", *MEMORY[0x1E0D49350]))
    {
      v29 = v11;
      v30 = v12;
      as::server::GetASCallbackQueue(v30);
      v31 = objc_claimAutoreleasedReturnValue();
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = ___ZN12_GLOBAL__N_129HandleRouteChangeNotificationEjP8NSStringP19NSMutableDictionary_block_invoke;
      *(_QWORD *)&buf[24] = &unk_1E8205698;
      LODWORD(v87) = (_DWORD)a2;
      *(_QWORD *)&buf[32] = v30;
      v86 = v29;
      v15 = v30;
      v16 = v29;
      dispatch_async(v31, buf);

      goto LABEL_74;
    }
    if (objc_msgSend(v11, "isEqualToString:", *MEMORY[0x1E0D49380]))
    {
      as::server::HandleMXNotification(opaqueCMNotificationCenter *,void const*,__CFString const*,void const*,void const*)::$_0::operator()(&v76, 0);
      v34 = (void **)MEMORY[0x1E0D492D8];
    }
    else
    {
      if (!objc_msgSend(v11, "isEqualToString:", *MEMORY[0x1E0D49378]))
      {
        if ((objc_msgSend(v11, "isEqualToString:", *MEMORY[0x1E0D493E8]) & 1) != 0
          || !objc_msgSend(v11, "isEqualToString:", *MEMORY[0x1E0D493F8]))
        {
          as::server::HandleMXNotification(opaqueCMNotificationCenter *,void const*,__CFString const*,void const*,void const*)::$_0::operator()(&v76, 1);
          v16 = v11;
          v15 = v12;
        }
        else
        {
          as::server::HandleMXNotification(opaqueCMNotificationCenter *,void const*,__CFString const*,void const*,void const*)::$_0::operator()(&v76, 1);
          v16 = v11;
          v15 = v12;
        }
        goto LABEL_74;
      }
      as::server::HandleMXNotification(opaqueCMNotificationCenter *,void const*,__CFString const*,void const*,void const*)::$_0::operator()(&v76, 0);
      v34 = (void **)MEMORY[0x1E0D492D0];
    }
    v16 = v11;
    v15 = v12;
    goto LABEL_74;
  }
  as::server::GetASCallbackQueue(v18);
  v19 = objc_claimAutoreleasedReturnValue();
  v20 = MEMORY[0x1E0C809B0];
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 3221225472;
  *(_QWORD *)&buf[16] = ___ZZN2as6server20HandleMXNotificationEP26opaqueCMNotificationCenterPKvPK10__CFStringS4_S4_ENK3__0clEb_block_invoke;
  *(_QWORD *)&buf[24] = &unk_1E8205638;
  LODWORD(v87) = (_DWORD)a2;
  *(_QWORD *)&buf[32] = v11;
  v21 = v12;
  v86 = v21;
  BYTE4(v87) = 0;
  dispatch_async(v19, buf);

  v22 = v21;
  v23 = (as::server *)as::server::ConstAudioSessionInfoAccessor::ConstAudioSessionInfoAccessor((as::server::ConstAudioSessionInfoAccessor *)&v83, a2);
  if (!v83)
  {
    v32 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v23));
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AudioSessionServerImpNotificationHandlers.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 305;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = (_DWORD)a2;
      _os_log_impl(&dword_1C895C000, v32, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Did not find matching audio session 0x%x. Bailing.", buf, 0x18u);
    }
    goto LABEL_68;
  }
  -[as::server objectForKey:](v22, "objectForKey:", *MEMORY[0x1E0D49260]);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = v24;
  if (v24)
  {
    v26 = (as::server::LegacySessionManager *)objc_msgSend(v24, "intValue");
    v27 = (_DWORD)v26 - 2;
    if (((_DWORD)v26 - 2) >= 6)
    {
      if ((_DWORD)v26 == 1)
      {
        v60 = as::server::LegacySessionManager::Instance(v26);
        v61 = (os_unfair_lock_s *)*((_QWORD *)v60 + 31);
        if (v61)
        {
          os_unfair_lock_lock(*((os_unfair_lock_t *)v60 + 31));
          as::server::DeviceTimeObserver::sessionIsActive((as::server::DeviceTimeObserver *)&v61[2], a2, 1);
          os_unfair_lock_unlock(v61);
        }
        v62 = v83;
        if (!v83)
        {
          v74 = _os_crash();
          as::server::require_acq::AudioSessionServerSetClientPlayState(v74);
        }
        v63 = v84;
        if (v84)
        {
          p_shared_owners = (unint64_t *)&v84->__shared_owners_;
          do
            v65 = __ldxr(p_shared_owners);
          while (__stxr(v65 + 1, p_shared_owners));
          DefaultSubsessionRef = (as::server *)as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v62, &v89);
          do
            v67 = __ldaxr(p_shared_owners);
          while (__stlxr(v67 - 1, p_shared_owners));
          if (!v67)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        else
        {
          DefaultSubsessionRef = (as::server *)as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v83, &v89);
        }
        as::server::GetASCallbackQueue(DefaultSubsessionRef);
        v68 = objc_claimAutoreleasedReturnValue();
        *(_QWORD *)buf = v20;
        *(_QWORD *)&buf[8] = 3321888768;
        *(_QWORD *)&buf[16] = ___ZN12_GLOBAL__N_130HandleInterruptionNotificationEjP12NSDictionary_block_invoke_59;
        *(_QWORD *)&buf[24] = &unk_1E8205660;
        v88 = (int)a2;
        v69 = (void *)v89.__r_.__value_.__r.__words[0];
        if (v89.__r_.__value_.__r.__words[0])
          CFRetain(v89.__r_.__value_.__l.__data_);
        v86 = v69;
        *(_QWORD *)&buf[32] = v22;
        v87 = 0;
        dispatch_async(v68, buf);

        if (v86)
          CFRelease(v86);
        v70 = (const void *)v89.__r_.__value_.__r.__words[0];
        if (!v89.__r_.__value_.__r.__words[0])
          goto LABEL_67;
      }
      else
      {
        if ((_DWORD)v26)
          goto LABEL_67;
        v35 = as::server::LegacySessionManager::Instance(v26);
        v36 = (os_unfair_lock_s *)*((_QWORD *)v35 + 31);
        if (v36)
        {
          os_unfair_lock_lock(*((os_unfair_lock_t *)v35 + 31));
          as::server::DeviceTimeObserver::sessionIsActive((as::server::DeviceTimeObserver *)&v36[2], a2, 0);
          os_unfair_lock_unlock(v36);
        }
        v37 = v83;
        if (!v83)
        {
          v75 = _os_crash();
          as::server::require_acq::AudioSessionServerSetClientPlayState(v75);
        }
        v38 = v84;
        if (v84)
        {
          v39 = (unint64_t *)&v84->__shared_owners_;
          do
            v40 = __ldxr(v39);
          while (__stxr(v40 + 1, v39));
          v41 = (as::server *)as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v37, &v89);
          do
            v42 = __ldaxr(v39);
          while (__stlxr(v42 - 1, v39));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        else
        {
          v41 = (as::server *)as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v83, &v89);
        }
        as::server::GetASCallbackQueue(v41);
        v71 = objc_claimAutoreleasedReturnValue();
        *(_QWORD *)buf = v20;
        *(_QWORD *)&buf[8] = 3321888768;
        *(_QWORD *)&buf[16] = ___ZN12_GLOBAL__N_130HandleInterruptionNotificationEjP12NSDictionary_block_invoke;
        *(_QWORD *)&buf[24] = &unk_1E8205660;
        v88 = (int)a2;
        v72 = (void *)v89.__r_.__value_.__r.__words[0];
        if (v89.__r_.__value_.__r.__words[0])
          CFRetain(v89.__r_.__value_.__l.__data_);
        v86 = v72;
        *(_QWORD *)&buf[32] = v22;
        v87 = 0;
        dispatch_async(v71, buf);

        if (v86)
          CFRelease(v86);
        v70 = (const void *)v89.__r_.__value_.__r.__words[0];
        if (!v89.__r_.__value_.__r.__words[0])
          goto LABEL_67;
      }
      CFRelease(v70);
    }
    else
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[8],char [8],0>((uint64_t)buf, "command");
      *(_QWORD *)&buf[16] = buf;
      buf[24] = 1;
      if (v27 > 5)
        v28 = "Unknown Interruption";
      else
        v28 = off_1E82056B8[v27];
      __p[0] = (void *)v28;
      v87 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)&buf[32], (char **)__p);
      LOBYTE(v88) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v89, (uint64_t)buf, 2, 1, 2);
      v89.__r_.__value_.__r.__words[2] = (std::string::size_type)&v89;
      v90 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v81, (uint64_t)&v89, 1, 1, 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v89);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v89.__r_.__value_.__l.__size_, v89.__r_.__value_.__s.__data_[0]);
      for (i = 0; i != -64; i -= 32)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&buf[i + 32]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&buf[i + 40], buf[i + 32]);
      }
      v45 = v83;
      if (!v83)
      {
        v73 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v73);
      }
      v46 = v84;
      *(_QWORD *)buf = v83;
      *(_QWORD *)&buf[8] = v84;
      if (v84)
      {
        v47 = (unint64_t *)&v84->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      if (*((char *)v45 + 223) < 0)
        std::string::__init_copy_ctor_external(&v89, *((const std::string::value_type **)v45 + 25), *((_QWORD *)v45 + 26));
      else
        v89 = *(std::string *)((char *)v45 + 200);
      if (v46)
      {
        v49 = (unint64_t *)&v46->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      v51 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v44));
      if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
      {
        v52 = SHIBYTE(v89.__r_.__value_.__r.__words[2]);
        v53 = v89.__r_.__value_.__r.__words[0];
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v81, -1, 0x20u, 0, 0, __p);
        v54 = &v89;
        if (v52 < 0)
          v54 = (std::string *)v53;
        if (v80 >= 0)
          v55 = __p;
        else
          v55 = (void **)__p[0];
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = "AudioSessionServerImpNotificationHandlers.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 355;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "cm_session_callback";
        *(_WORD *)&buf[28] = 2080;
        *(_QWORD *)&buf[30] = v54;
        *(_WORD *)&buf[38] = 2080;
        v86 = v55;
        _os_log_impl(&dword_1C895C000, v51, OS_LOG_TYPE_INFO, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
        if (v80 < 0)
          operator delete(__p[0]);
      }

      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v89.__r_.__value_.__l.__data_);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v81);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v82, v81[0]);
    }
  }
LABEL_67:

LABEL_68:
  v56 = v84;
  if (v84)
  {
    v57 = (unint64_t *)&v84->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }

  v16 = v77;
  v15 = v78;
LABEL_74:

}

void sub_1C89601AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void *as::server::gSessionServerLog(as::server *this)
{
  unsigned __int8 v1;

  {
    caulk::log_category::log_category((caulk::log_category *)&as::server::gSessionServerLog(void)::sLogCat, "com.apple.coreaudio", "as_server");
  }
  return &as::server::gSessionServerLog(void)::sLogCat;
}

void sub_1C89603B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *AudioSession::FormatSessionIDAsHex@<X0>(AudioSession *this@<X0>, _QWORD *a2@<X8>)
{
  char __str[32];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  snprintf(__str, 0x20uLL, "0x%x", (_DWORD)this);
  return std::string::basic_string[abi:ne180100]<0>(a2, __str);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[4],char [4],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[4]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[4]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1C89604C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

id applesauce::dispatch::v1::queue::operator*(id *a1)
{
  return *a1;
}

uint64_t __copy_helper_block_ea8_32c142_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP7NSArrayEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E_(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  result = MEMORY[0x1CAA39148](*(_QWORD *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

uint64_t __copy_helper_block_ea8_32c177_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongPU25objcproto14NSSecureCoding11objc_objectjEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_jE_(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  result = MEMORY[0x1CAA39148](*(_QWORD *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_ea8_32c177_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongPU25objcproto14NSSecureCoding11objc_objectjEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_jE_(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

}

void sub_1C8960694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  v19 = v17;

  _Unwind_Resume(a1);
}

void sub_1C89607E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongPU25objcproto14NSSecureCoding11objc_objectjEEEU13block_pointerFvDpT_ESC_i_block_invoke(uint64_t a1, void *a2, void *a3)
{
  caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},objc_object  {objcproto14NSSecureCoding}* {__strong},unsigned int>(void ()(NSError * {__strong},objc_object  {objcproto14NSSecureCoding}* {__strong},unsigned int),int)::{lambda(NSError *,objc_object  {objcproto14NSSecureCoding},unsigned int)#1}::operator()(a1 + 32, a2, a3);
}

void caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},objc_object  {objcproto14NSSecureCoding}* {__strong},unsigned int>(void ()(NSError * {__strong},objc_object  {objcproto14NSSecureCoding}* {__strong},unsigned int),int)::{lambda(NSError *,objc_object  {objcproto14NSSecureCoding},unsigned int)#1}::operator()(uint64_t a1, void *a2, void *a3)
{
  id v5;
  NSObject *v6;
  id v7;

  v5 = a3;
  v7 = a2;
  applesauce::dispatch::v1::queue::operator*((id *)a1);
  v6 = objc_claimAutoreleasedReturnValue();
  dispatch_source_cancel(v6);

  (*(void (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

void sub_1C89608A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},objc_object  {objcproto14NSSecureCoding}* {__strong},unsigned int>(caulk::xpc::reply_watchdog_factory *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v8;
  void *v9;
  _QWORD v10[4];
  id v11;
  id v12;

  v3 = a2;
  v4 = v3;
  if (*(_BYTE *)a1)
  {
    v5 = (void *)MEMORY[0x1CAA39148](v3);
  }
  else
  {
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3321888768;
    v10[2] = ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongPU25objcproto14NSSecureCoding11objc_objectjEEEU13block_pointerFvDpT_ESC_i_block_invoke;
    v10[3] = &__block_descriptor_48_ea8_32c177_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongPU25objcproto14NSSecureCoding11objc_objectjEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_jE__e41_v28__0__NSError_8___NSSecureCoding__16I24l;
    caulk::xpc::reply_watchdog_factory::make_timer(a1);
    v9 = (void *)MEMORY[0x1CAA39148](v4);
    v11 = v8;
    v12 = (id)MEMORY[0x1CAA39148](v9);
    v5 = (void *)MEMORY[0x1CAA39148](v10);

    v6 = v11;
    v11 = 0;

  }
  return v5;
}

void sub_1C89609B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor(os_unfair_lock_s **this)
{
  if (*((_BYTE *)this + 16) && *this)
  {
    os_unfair_lock_unlock(*this + 158);
    *((_BYTE *)this + 16) = 0;
  }
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void sub_1C8960DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  uint64_t *v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, uint64_t *);
  v9 = va_arg(va1, _QWORD);

  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)va);
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1C896114C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  uint64_t *v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, uint64_t *);
  v9 = va_arg(va1, _QWORD);

  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)va);
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<nlohmann::detail::output_string_adapter<char,std::string>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void sub_1C8961310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1C8961514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  void *v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);

  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)va);
  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)va1);

  _Unwind_Resume(a1);
}

void as::ScopedTrace::~ScopedTrace(as::ScopedTrace *this)
{
  if (*(_BYTE *)this)
    kdebug_trace();
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP7NSArrayEEEU13block_pointerFvDpT_ESC_i_block_invoke(uint64_t a1, void *a2, void *a3)
{
  caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},NSArray * {__strong}>(void({block_pointer})(NSError * {__strong},NSArray * {__strong}),int)::{lambda(NSError *,NSArray *)#1}::operator()(a1 + 32, a2, a3);
}

void caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},NSArray * {__strong}>(void({block_pointer})(NSError * {__strong},NSArray * {__strong}),int)::{lambda(NSError *,NSArray *)#1}::operator()(uint64_t a1, void *a2, void *a3)
{
  id v5;
  NSObject *v6;
  id v7;

  v5 = a3;
  v7 = a2;
  applesauce::dispatch::v1::queue::operator*((id *)a1);
  v6 = objc_claimAutoreleasedReturnValue();
  dispatch_source_cancel(v6);

  (*(void (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

void sub_1C8961658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},NSArray * {__strong}>(caulk::xpc::reply_watchdog_factory *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v8;
  void *v9;
  _QWORD v10[4];
  id v11;
  id v12;

  v3 = a2;
  v4 = v3;
  if (*(_BYTE *)a1)
  {
    v5 = (void *)MEMORY[0x1CAA39148](v3);
  }
  else
  {
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3321888768;
    v10[2] = ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP7NSArrayEEEU13block_pointerFvDpT_ESC_i_block_invoke;
    v10[3] = &__block_descriptor_48_ea8_32c142_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP7NSArrayEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E__e29_v24__0__NSError_8__NSArray_16l;
    caulk::xpc::reply_watchdog_factory::make_timer(a1);
    v9 = (void *)MEMORY[0x1CAA39148](v4);
    v11 = v8;
    v12 = (id)MEMORY[0x1CAA39148](v9);
    v5 = (void *)MEMORY[0x1CAA39148](v10);

    v6 = v11;
    v11 = 0;

  }
  return v5;
}

void sub_1C8961770(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void as::server::AudioSessionInfo::GetDeferredMessages(as::server::AudioSessionInfo *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  std::mutex *v4;

  v2 = (uint64_t *)this;
  v4 = (std::mutex *)((char *)this + 568);
  std::mutex::lock((std::mutex *)((char *)this + 568));
  v2 += 68;
  std::list<NSDictionary * {__strong}>::list(a2, (uint64_t)v2);
  std::__list_imp<NSDictionary * {__strong}>::clear(v2);
  std::mutex::unlock(v4);
}

void sub_1C89617D0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__list_imp<NSDictionary * {__strong}>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];

        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t *std::list<NSDictionary * {__strong}>::list(uint64_t *a1, uint64_t a2)
{
  uint64_t i;

  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  for (i = a2; ; std::list<NSDictionary * {__strong}>::push_back(a1, (id *)(i + 16)))
  {
    i = *(_QWORD *)(i + 8);
    if (i == a2)
      break;
  }
  return a1;
}

void sub_1C89618A4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::__list_imp<NSDictionary * {__strong}>::clear(v1);
  _Unwind_Resume(a1);
}

id std::list<NSDictionary * {__strong}>::push_back(uint64_t *a1, id *a2)
{
  _QWORD *v4;
  id result;
  uint64_t v6;

  v4 = operator new(0x18uLL);
  result = *a2;
  v4[1] = a1;
  v4[2] = result;
  v6 = *a1;
  *v4 = *a1;
  *(_QWORD *)(v6 + 8) = v4;
  *a1 = (uint64_t)v4;
  ++a1[2];
  return result;
}

BOOL VerifySessionOwnership(as::server::LegacySessionManager *a1, const audit_token_t *a2, char a3)
{
  int v5;
  os_unfair_lock_s *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v5 = (int)a1;
  v6 = (os_unfair_lock_s *)as::server::LegacySessionManager::Instance(a1);
  as::server::LegacySessionManager::FindSessionAndVerifyOwnership(v6, a2, v5, a3, &v12);
  v8 = v12;
  v7 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v8 != 0;
}

as::server::ConstAudioSessionInfoAccessor *as::server::ConstAudioSessionInfoAccessor::ConstAudioSessionInfoAccessor(as::server::ConstAudioSessionInfoAccessor *this, int a2, const audit_token_t *a3, char a4)
{
  os_unfair_lock_s *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v13;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v8 = (os_unfair_lock_s *)as::server::LegacySessionManager::Instance(this);
  as::server::LegacySessionManager::FindSessionAndVerifyOwnership(v8, a3, a2, a4, &v13);
  std::shared_ptr<as::WorkloopPool>::operator=[abi:ne180100]((uint64_t)this, &v13);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return this;
}

void sub_1C8961A3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void as::server::LegacySessionManager::FindSessionAndVerifyOwnership(os_unfair_lock_s *this@<X0>, const audit_token_t *a2@<X2>, int a3@<W1>, char a4@<W3>, _QWORD *a5@<X8>)
{
  os_unfair_lock_s *v10;
  __int128 v11;
  uint64_t v12;
  _QWORD *SessionAndVerifyOwnershipPriv;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17[2];
  char v18;
  int v19;
  _QWORD v20[2];
  audit_token_t atoken;

  v10 = this + 2;
  os_unfair_lock_lock(this);
  v20[0] = this;
  v20[1] = v10;
  v11 = *(_OWORD *)&a2->val[4];
  v17[0] = *(_OWORD *)a2->val;
  v17[1] = v11;
  v18 = 1;
  *(_OWORD *)atoken.val = v17[0];
  *(_OWORD *)&atoken.val[4] = v11;
  v12 = audit_token_to_pid(&atoken);
  v19 = v12;
  SessionAndVerifyOwnershipPriv = (_QWORD *)as::server::LegacySessionManager::FindSessionAndVerifyOwnershipPriv(v12, (uint64_t)v20, a3, v17, a4);
  if (*(_QWORD **)&this[4]._os_unfair_lock_opaque == SessionAndVerifyOwnershipPriv)
  {
    *a5 = 0;
    a5[1] = 0;
  }
  else
  {
    v14 = SessionAndVerifyOwnershipPriv[1];
    *a5 = *SessionAndVerifyOwnershipPriv;
    a5[1] = v14;
    if (v14)
    {
      v15 = (unint64_t *)(v14 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
  }
  os_unfair_lock_unlock(this);
}

void sub_1C8961B14(_Unwind_Exception *exception_object)
{
  os_unfair_lock_s *v1;

  if (v1)
    os_unfair_lock_unlock(v1);
  _Unwind_Resume(exception_object);
}

uint64_t as::server::LegacySessionManager::FindSessionAndVerifyOwnershipPriv(uint64_t a1, uint64_t a2, int a3, __int128 *a4, char a5)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  _BOOL8 v10;
  void *v11;
  as::server *v12;
  NSObject *v13;
  char v14;
  NSObject *v15;
  __int128 v17;
  _OWORD v19[2];
  uint64_t v20;
  char v21;
  SecTaskRef task;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v5 = *(uint64_t **)(a2 + 8);
  v6 = *v5;
  v7 = v5[1];
  v8 = *a4;
  v9 = a4[1];
  v19[0] = *a4;
  v19[1] = v9;
  v20 = *((_QWORD *)a4 + 4);
  v21 = a5;
  if (v6 != v7)
  {
    *(_QWORD *)&v8 = 136315650;
    v17 = v8;
    do
    {
      if (*(_DWORD *)(*(_QWORD *)v6 + 8) == a3)
      {
        v10 = as::server::ProcessIdentity::operator==((uint64_t)v19, *(_QWORD *)v6 + 12);
        if (v10)
          return v6;
        if (v21)
        {
          as::server::ProcessIdentity::SecurityTask((as::server::ProcessIdentity *)v19, &task);
          if (task)
          {
            v11 = (void *)SecTaskCopyValueForEntitlement(task, CFSTR("com.apple.private.coreaudio.borrowaudiosession.allow"), 0);
            v12 = (as::server *)objc_msgSend(v11, "BOOLValue");
            if ((v12 & 1) == 0)
            {
              v13 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v12));
              if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = v17;
                v24 = "ServerSessionManager.mm";
                v25 = 1024;
                v26 = 382;
                v27 = 1024;
                v28 = a3;
                _os_log_impl(&dword_1C895C000, v13, OS_LOG_TYPE_INFO, "%25s:%-5d Lookup of sessionID:0x%x succeeded, but calling client does not have entitlement to use it", buf, 0x18u);
              }
            }
            v14 = objc_msgSend(v11, "BOOLValue", v17);

            if (task)
              CFRelease(task);
            if ((v14 & 1) != 0)
              return v6;
          }
        }
        else
        {
          v15 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v10));
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315906;
            v24 = "ServerSessionManager.mm";
            v25 = 1024;
            v26 = 389;
            v27 = 1024;
            v28 = a3;
            v29 = 1024;
            v30 = HIDWORD(v20);
            _os_log_impl(&dword_1C895C000, v15, OS_LOG_TYPE_INFO, "%25s:%-5d Lookup of sessionID:0x%x succeeded, but the provided process PID or audit token does not match the owner of the session. Provided PID: %d", buf, 0x1Eu);
          }
        }
      }
      v6 += 16;
    }
    while (v6 != v7);
    return v7;
  }
  return v6;
}

void sub_1C8961D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, CFTypeRef cf)
{
  void *v20;

  if (cf)
    CFRelease(cf);
  _Unwind_Resume(a1);
}

BOOL as::server::ProcessIdentity::operator==(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  __int128 v4;
  int v5;
  __int128 v6;
  audit_token_t v8;
  audit_token_t atoken;

  if (*(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
    return 0;
  if (*(_BYTE *)(a1 + 32))
    v3 = *(_BYTE *)(a2 + 32) == 0;
  else
    v3 = 1;
  if (v3)
    return 1;
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)atoken.val = *(_OWORD *)a1;
  *(_OWORD *)&atoken.val[4] = v4;
  v5 = audit_token_to_pidversion(&atoken);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v8.val = *(_OWORD *)a2;
  *(_OWORD *)&v8.val[4] = v6;
  return v5 == audit_token_to_pidversion(&v8);
}

os_unfair_lock_s **as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor(os_unfair_lock_s **this, int a2)
{
  os_unfair_lock_s *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v9;

  *this = 0;
  this[1] = 0;
  *((_BYTE *)this + 16) = 0;
  v4 = (os_unfair_lock_s *)as::server::LegacySessionManager::Instance((as::server::LegacySessionManager *)this);
  as::server::LegacySessionManager::FindSession(v4, a2, &v9);
  std::shared_ptr<as::WorkloopPool>::operator=[abi:ne180100]((uint64_t)this, &v9);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (*this)
  {
    os_unfair_lock_lock(*this + 158);
    *((_BYTE *)this + 16) = 1;
  }
  return this;
}

void sub_1C8961EC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

as::server::ConstAudioSessionInfoAccessor *as::server::ConstAudioSessionInfoAccessor::ConstAudioSessionInfoAccessor(as::server::ConstAudioSessionInfoAccessor *this, int a2)
{
  os_unfair_lock_s *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v9;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v4 = (os_unfair_lock_s *)as::server::LegacySessionManager::Instance(this);
  as::server::LegacySessionManager::FindSession(v4, a2, &v9);
  std::shared_ptr<as::WorkloopPool>::operator=[abi:ne180100]((uint64_t)this, &v9);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return this;
}

void sub_1C8961F60(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *as::server::LegacySessionManager::Instance(as::server::LegacySessionManager *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    as::server::LegacySessionManager::LegacySessionManager((as::server::LegacySessionManager *)&as::server::LegacySessionManager::Instance(void)::sManager);
  }
  return &as::server::LegacySessionManager::Instance(void)::sManager;
}

void sub_1C8961FD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void as::server::LegacySessionManager::FindSession(os_unfair_lock_s *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  os_unfair_lock_lock(this);
  v6 = *(_QWORD **)&this[2]._os_unfair_lock_opaque;
  v7 = *(_QWORD **)&this[4]._os_unfair_lock_opaque;
  if (v6 != v7)
  {
    while (*(_DWORD *)(*v6 + 8) != a2)
    {
      v6 += 2;
      if (v6 == v7)
        goto LABEL_11;
    }
  }
  if (v6 == v7)
  {
LABEL_11:
    *a3 = 0;
    a3[1] = 0;
    if (this)
LABEL_10:
      os_unfair_lock_unlock(this);
  }
  else
  {
    v9 = *v6;
    v8 = v6[1];
    *a3 = v9;
    a3[1] = v8;
    if (v8)
    {
      v10 = (unint64_t *)(v8 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    if (this)
      goto LABEL_10;
  }
}

void as::server::DispatchBlock(void *a1, void *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NSObject *v15;
  as::server *v16;
  NSObject *v17;
  void *v18;
  const char *v19;
  _QWORD v20[4];
  as::server *v21;
  __int128 v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  uint64_t v31;

  v15 = a1;
  v16 = a2;
  as::server::GetAudioControlQueue(v16);
  v17 = objc_claimAutoreleasedReturnValue();

  if (v17 == v15)
  {
    v30 = 0uLL;
    v31 = 0;
    CreateACQDispatchID();
    v20[0] = MEMORY[0x1E0C809B0];
    v20[2] = ___ZN2as6server13DispatchBlockEPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvvENS0_12DispatchTypeEPKcS8_iyy_block_invoke;
    v20[3] = &unk_1E8205058;
    v20[1] = 3221225472;
    if (a3)
      v19 = "dispatch_async_and_wait";
    else
      v19 = "dispatch_async";
    v22 = v30;
    v23 = v31;
    v24 = v19;
    v25 = a4;
    v26 = a5;
    v29 = a6;
    v27 = a7;
    v28 = a8;
    v21 = v16;
    v18 = (void *)MEMORY[0x1CAA39148](v20);
    MEMORY[0x1CAA38650](&v30, 0, v19, a4, a5, a6, a7, a8);

  }
  else
  {
    v18 = (void *)MEMORY[0x1CAA39148](v16);
  }
  if (a3)
    dispatch_async_and_wait(v15, v18);
  else
    dispatch_async(v15, v18);

}

void sub_1C89621F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

id as::server::GetAudioControlQueue(as::server *this)
{
  if (!gAudioControlQueue)
    as::server::GetAudioControlQueue();
  return (id)gAudioControlQueue;
}

void as::server::AudioSessionInfo::SetSpatialPreferences(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  std::optional<AVAudioSessionSpatialPreferences * {__strong}>::operator=[abi:ne180100]<AVAudioSessionSpatialPreferences * {__strong}&,void>(a1 + 440, &v3);

}

void sub_1C8962284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void as::server::LegacySessionManager::PrivateFindOrCreatePrimaryApplication(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  as::server *v9;
  void *v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  NSObject *v16;
  as::server *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  NSObject *v21;
  unsigned int v22;
  as::server *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  NSObject *v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v30;
  _OWORD v31[2];
  int v32;
  audit_token_t buf;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v9 = a4;
  v10 = v9;
  if ((v11 & 1) == 0)
  {
    if ((_DWORD)v9)
    {
      *(_OWORD *)algn_1ED83E8F0 = 0u;
      byte_1ED83E900 = 1;
      memset(&buf, 0, sizeof(buf));
      dword_1ED83E904 = audit_token_to_pid(&buf);
    }
  }
  if ((v12 & 1) == 0)
  {
    if ((_DWORD)v9)
    {
      *(_QWORD *)&v30 = -1;
      *((_QWORD *)&v30 + 1) = -1;
      unk_1ED83E918 = v30;
      byte_1ED83E928 = 1;
      *(_OWORD *)buf.val = v30;
      *(_OWORD *)&buf.val[4] = v30;
      dword_1ED83E92C = audit_token_to_pid(&buf);
    }
  }
  v13 = (_OWORD *)(a3 + 56);
  if (*(_BYTE *)(a3 + 88))
  {
    v14 = *(_OWORD *)(a3 + 72);
    *(_OWORD *)buf.val = *v13;
    *(_OWORD *)&buf.val[4] = v14;
    v34 = *(_DWORD *)(a3 + 88);
    if ((_DWORD)v9)
      goto LABEL_6;
    v15 = *(_OWORD *)(a3 + 72);
    v31[0] = *v13;
    v31[1] = v15;
    v32 = *(_DWORD *)(a3 + 88);
    if ((v9 & 1) != 0)
      goto LABEL_6;
  }
  else if (!*(_DWORD *)(a3 + 92))
  {
LABEL_6:
    v16 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v9));
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      buf.val[0] = 136315394;
      *(_QWORD *)&buf.val[1] = "ServerSessionManager.mm";
      LOWORD(buf.val[3]) = 1024;
      *(unsigned int *)((char *)&buf.val[3] + 2) = 874;
      _os_log_impl(&dword_1C895C000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d error - missing valid source process identity / audit token", (uint8_t *)&buf, 0x12u);
    }
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
LABEL_14:
    *(_BYTE *)(a5 + 16) = 0;
    goto LABEL_15;
  }
  v17 = (as::server *)std::__tree<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::__map_value_compare<as::server::ProcessIdentity,std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::less<as::server::ProcessIdentity>,true>,std::allocator<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>>>::find<as::server::ProcessIdentity>(a1 + 32, a3 + 56);
  if ((as::server *)(a1 + 40) != v17)
  {
    v18 = *((_QWORD *)v17 + 10);
    *(_QWORD *)a5 = *((_QWORD *)v17 + 9);
    *(_QWORD *)(a5 + 8) = v18;
    if (v18)
    {
      v19 = (unint64_t *)(v18 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    goto LABEL_14;
  }
  v21 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v17));
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    v22 = *(_DWORD *)(a3 + 92);
    buf.val[0] = 136315650;
    *(_QWORD *)&buf.val[1] = "ServerSessionManager.mm";
    LOWORD(buf.val[3]) = 1024;
    *(unsigned int *)((char *)&buf.val[3] + 2) = 881;
    HIWORD(buf.val[4]) = 1024;
    buf.val[5] = v22;
    _os_log_impl(&dword_1C895C000, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating implicit audio app instance for %d", (uint8_t *)&buf, 0x18u);
  }
  as::server::LegacySessionManager::PrivateCreateAudioAppImpl(a1, a2, a3, v10, v31);
  if (*(_QWORD *)&v31[0])
  {
    v24 = (std::__shared_weak_count *)*((_QWORD *)&v31[0] + 1);
    *(_QWORD *)a5 = *(_QWORD *)&v31[0];
    *(_QWORD *)(a5 + 8) = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(p_shared_owners);
      while (__stxr(v26 + 1, p_shared_owners));
    }
    *(_BYTE *)(a5 + 16) = 1;
    if (!v24)
      goto LABEL_15;
LABEL_27:
    v28 = (unint64_t *)&v24->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    goto LABEL_15;
  }
  v27 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v23));
  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
  {
    buf.val[0] = 136315394;
    *(_QWORD *)&buf.val[1] = "ServerSessionManager.mm";
    LOWORD(buf.val[3]) = 1024;
    *(unsigned int *)((char *)&buf.val[3] + 2) = 884;
    _os_log_impl(&dword_1C895C000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to create primary audio app instance", (uint8_t *)&buf, 0x12u);
  }
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_BYTE *)(a5 + 16) = 0;
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v31[0] + 1);
  if (*((_QWORD *)&v31[0] + 1))
    goto LABEL_27;
LABEL_15:

}

void sub_1C8962640(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t as::server::ConstAudioSessionInfo::HasMXPropertyPipeEntitlement(as::server::ConstAudioSessionInfo *this, audit_token_t *a2)
{
  _BOOL8 v4;
  __int128 v5;
  __SecTask *v6;
  __SecTask *v7;
  CFTypeRef v8;
  audit_token_t v10;
  __SecTask *v11;
  CFTypeRef v12;
  char v13;

  if (as::server::ProcessIdentity::operator==((uint64_t)this + 12, a2))
    return *((unsigned __int8 *)this + 123);
  v5 = *(_OWORD *)&a2->val[4];
  *(_OWORD *)v10.val = *(_OWORD *)a2->val;
  *(_OWORD *)&v10.val[4] = v5;
  v6 = SecTaskCreateWithAuditToken(0, &v10);
  v11 = v6;
  if (!v6)
    return 0;
  v7 = v6;
  v8 = SecTaskCopyValueForEntitlement(v6, CFSTR("com.apple.private.coreaudio.mxsessionPropertyPipe"), 0);
  v12 = v8;
  v13 = 1;
  if (v8)
    v4 = CFEqual(v8, (CFTypeRef)*MEMORY[0x1E0C9AE50]) != 0;
  else
    v4 = 0;
  CACFBoolean::~CACFBoolean((CACFBoolean *)&v12);
  CFRelease(v7);
  return v4;
}

void sub_1C8962754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  CACFBoolean::~CACFBoolean((CACFBoolean *)(v6 - 32));
  applesauce::CF::ObjectRef<__SecTask *>::~ObjectRef((const void **)va);
  _Unwind_Resume(a1);
}

BOOL as::server::ProcessIdentity::operator==(uint64_t a1, _OWORD *a2)
{
  __int128 v4;
  pid_t v5;
  __int128 v6;
  __int128 v7;
  int v8;
  __int128 v9;
  audit_token_t v11;
  audit_token_t v12;
  audit_token_t v13;
  audit_token_t atoken;

  if (!*(_BYTE *)(a1 + 32))
    return 0;
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)atoken.val = *(_OWORD *)a1;
  *(_OWORD *)&atoken.val[4] = v4;
  v5 = audit_token_to_pid(&atoken);
  v6 = a2[1];
  *(_OWORD *)v13.val = *a2;
  *(_OWORD *)&v13.val[4] = v6;
  if (v5 != audit_token_to_pid(&v13))
    return 0;
  v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v12.val = *(_OWORD *)a1;
  *(_OWORD *)&v12.val[4] = v7;
  v8 = audit_token_to_pidversion(&v12);
  v9 = a2[1];
  *(_OWORD *)v11.val = *a2;
  *(_OWORD *)&v11.val[4] = v9;
  return v8 == audit_token_to_pidversion(&v11);
}

_QWORD *std::__tree<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::__map_value_compare<as::server::ProcessIdentity,std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::less<as::server::ProcessIdentity>,true>,std::allocator<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>>>::find<as::server::ProcessIdentity>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _BOOL4 v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = as::server::ProcessIdentity::operator<((uint64_t)(v3 + 4), a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || as::server::ProcessIdentity::operator<(a2, (uint64_t)(v5 + 4)))
    return v2;
  return v5;
}

_QWORD *std::__tree<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::__map_value_compare<as::server::ProcessIdentity,std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::less<as::server::ProcessIdentity>,true>,std::allocator<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>>>::__find_equal<as::server::ProcessIdentity>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (uint64_t)(v4 + 4);
        if (!as::server::ProcessIdentity::operator<(a3, (uint64_t)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!as::server::ProcessIdentity::operator<(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

BOOL as::server::ProcessIdentity::operator<(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  __int128 v6;
  int v7;
  __int128 v8;
  audit_token_t v11;
  audit_token_t atoken;

  v2 = *(_DWORD *)(a1 + 36);
  v3 = *(_DWORD *)(a2 + 36);
  if (v2 != v3)
    return v2 < v3;
  if (!*(_BYTE *)(a1 + 32) || *(_BYTE *)(a2 + 32) == 0)
  {
    return v2 < v3;
  }
  else
  {
    v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)atoken.val = *(_OWORD *)a1;
    *(_OWORD *)&atoken.val[4] = v6;
    v7 = audit_token_to_pidversion(&atoken);
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v11.val = *(_OWORD *)a2;
    *(_OWORD *)&v11.val[4] = v8;
    return v7 < audit_token_to_pidversion(&v11);
  }
}

uint64_t std::list<NSDictionary * {__strong}>::erase(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)(v3 + 8) = v4;
  *(_QWORD *)a2[1] = v3;
  --*(_QWORD *)(a1 + 16);

  operator delete(a2);
  return v4;
}

_QWORD *std::__shared_ptr_emplace<as::server::DeviceLatencyPoll::Impl>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t __copy_helper_block_ea8_32c120_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorEEEU13block_pointerFvDpT_ES9_iEUlS4_E_(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  result = MEMORY[0x1CAA39148](*(_QWORD *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

_QWORD *as::AudioAppState::AudioAppState(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  id v6;

  v5 = a2;
  v6 = a3;
  *a1 = objc_msgSend(v5, "mutableCopy");
  a1[1] = objc_msgSend(v6, "mutableCopy");
  a1[2] = objc_opt_new();
  a1[3] = objc_opt_new();

  return a1;
}

void sub_1C8962ACC(_Unwind_Exception *a1)
{
  void *v1;
  id *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void as::server::GetSpatialPreferences(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  as::server *v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a3;
  v19 = v8;
  if (!v7)
  {
    v18 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v18);
  }
  if (objc_msgSend(v8, "isEqualToString:", *MEMORY[0x1E0D49108]))
    v9 = 1836019574;
  else
    v9 = 1936684398;
  objc_msgSend(v7, "spatialPreferencesForSession:contentType:", a2, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  objc_msgSend(v10, "spatialAudioSources");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = 0;
  v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v20, v32, 16);
  if (v13)
  {
    v14 = *(_QWORD *)v21;
    do
    {
      for (i = 0; i != v13; ++i)
      {
        if (*(_QWORD *)v21 != v14)
          objc_enumerationMutation(v11);
        if (objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * i), "unsignedIntValue") == 1835824233)
          v12 = 1;
      }
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v20, v32, 16);
    }
    while (v13);
  }

  v17 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v16));
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    v25 = "AudioSessionServerImpNotificationHandlers.mm";
    v26 = 1024;
    v27 = 883;
    v28 = 1024;
    v29 = v12;
    v30 = 1024;
    v31 = a2;
    _os_log_impl(&dword_1C895C000, v17, OS_LOG_TYPE_INFO, "%25s:%-5d spatialEnabled is %d SessionID is 0x%x", buf, 0x1Eu);
  }
  *(_QWORD *)a4 = v10;
  *(_BYTE *)(a4 + 8) = v12;

}

void sub_1C8962D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

id as::server::getMXPropertiesInLegacyOrder(void *a1)
{
  id v1;
  NSObject *v2;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  void *v25;
  void *v26;
  void *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  void *v38;
  _BYTE v39[128];
  id v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint8_t buf[4];
  const char *v51;
  __int16 v52;
  int v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (!v1)
  {
    v2 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(0));
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v51 = "AudioSessionServerImp.mm";
      v52 = 1024;
      v53 = 280;
      _os_log_impl(&dword_1C895C000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d propertiesToSet is nil", buf, 0x12u);
    }
  }
  v3 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if (v3)
  {
    v4 = (void *)objc_msgSend(v1, "mutableCopy");
    v5 = (id)*MEMORY[0x1E0D494F8];
    v29 = (id)*MEMORY[0x1E0D49528];
    v30 = (id)*MEMORY[0x1E0D495C0];
    v31 = (id)*MEMORY[0x1E0D495B0];
    v32 = (id)*MEMORY[0x1E0D49BE8];
    v28 = v5;
    objc_msgSend(v4, "valueForKey:", v5);
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = (void *)v6;
    if (v6)
    {
      v48 = v5;
      v49 = v6;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v49, &v48, 1);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "addObject:", v8);

      objc_msgSend(v4, "removeObjectForKey:", v28);
    }

    objc_msgSend(v4, "valueForKey:", v29);
    v9 = objc_claimAutoreleasedReturnValue();
    v10 = (void *)v9;
    if (v9)
    {
      v46 = v29;
      v47 = v9;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v47, &v46, 1);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "addObject:", v11);

      objc_msgSend(v4, "removeObjectForKey:", v29);
    }

    objc_msgSend(v4, "valueForKey:", v30);
    v12 = objc_claimAutoreleasedReturnValue();
    v13 = (void *)v12;
    if (v12)
    {
      v44 = v30;
      v45 = v12;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v45, &v44, 1);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "addObject:", v14);

      objc_msgSend(v4, "removeObjectForKey:", v30);
    }

    objc_msgSend(v4, "valueForKey:", v31);
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = (void *)v15;
    if (v15)
    {
      v42 = v31;
      v43 = v15;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v43, &v42, 1);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "addObject:", v17);

      objc_msgSend(v4, "removeObjectForKey:", v31);
    }

    objc_msgSend(v4, "valueForKey:", v32);
    v18 = objc_claimAutoreleasedReturnValue();
    v19 = (void *)v18;
    if (v18)
    {
      v40 = v32;
      v41 = v18;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v41, &v40, 1);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "addObject:", v20);

      objc_msgSend(v4, "removeObjectForKey:", v32);
    }

    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v21 = v4;
    v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v33, v39, 16);
    if (v22)
    {
      v23 = *(_QWORD *)v34;
      do
      {
        for (i = 0; i != v22; ++i)
        {
          if (*(_QWORD *)v34 != v23)
            objc_enumerationMutation(v21);
          v37 = *(_QWORD *)(*((_QWORD *)&v33 + 1) + 8 * i);
          objc_msgSend(v21, "objectForKeyedSubscript:");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v38 = v25;
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v38, &v37, 1);
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v3, "addObject:", v26);

        }
        v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v33, v39, 16);
      }
      while (v22);
    }

  }
  return v3;
}

void sub_1C89631A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

uint64_t as::server::forbid_acq::SetPropertiesOnMXSession(unsigned int a1, const audit_token_t *a2, void *a3, int a4, id *a5)
{
  as::server *v9;
  as::server::ConstAudioSessionInfo *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  NSObject *v14;
  NSObject *v15;
  unint64_t *v16;
  unint64_t v17;
  as::server::ConstAudioSessionInfo *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  as::server *DefaultSubsessionRef;
  void *v23;
  unint64_t *v24;
  unint64_t v25;
  void *v26;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  as::server *v30;
  NSObject *v31;
  int v32;
  std::string::size_type v33;
  std::string *v34;
  void **v35;
  id v36;
  as::server *v37;
  uint64_t v38;
  void *v39;
  NSObject *v40;
  NSObject *v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  NSObject *v51;
  std::string *v52;
  uint64_t v53;
  void *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t n;
  void *v59;
  void *v60;
  uint64_t v61;
  as::server *v62;
  NSObject *v63;
  as::server *v64;
  void *v65;
  as::server *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v71;
  void *v72;
  __CFString *v73;
  id v74;
  __CFString *v75;
  unsigned int v76;
  id obj;
  uint64_t v78;
  uint64_t v79;
  uint64_t m;
  unsigned int v81;
  id v82;
  _QWORD v83[4];
  as::server *v84;
  unsigned int v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  char v98[8];
  uint64_t *v99;
  char *v100;
  char v101[8];
  uint64_t *v102;
  std::string v103;
  as::server::ConstAudioSessionInfo *v104;
  std::__shared_weak_count *v105;
  _BYTE v106[128];
  _BYTE v107[128];
  _BYTE v108[128];
  _BYTE v109[16];
  _BYTE *v110;
  char v111;
  _BYTE v112[8];
  _QWORD v113[2];
  char v114;
  void *__p[2];
  void **v116;
  char v117;
  _BYTE v118[16];
  uint64_t v119;
  char v120;
  _BYTE buf[28];
  __int16 v122;
  uint64_t v123;
  __int16 v124;
  _QWORD v125[2];
  char v126;
  char v127[16];
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  v82 = a3;
  v81 = a1;
  v9 = (as::server *)as::server::ConstAudioSessionInfoAccessor::ConstAudioSessionInfoAccessor((as::server::ConstAudioSessionInfoAccessor *)&v104, a1, a2, 1);
  v10 = v104;
  if (v104)
  {
    if (v82)
    {
      v11 = v105;
      *(_QWORD *)buf = v104;
      *(_QWORD *)&buf[8] = v105;
      if (v105)
      {
        p_shared_owners = (unint64_t *)&v105->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      if (*((char *)v10 + 223) < 0)
        std::string::__init_copy_ctor_external(&v103, *((const std::string::value_type **)v10 + 25), *((_QWORD *)v10 + 26));
      else
        v103 = *(std::string *)((char *)v10 + 200);
      if (v11)
      {
        v16 = (unint64_t *)&v11->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v18 = v104;
      if (!v104)
      {
        v71 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v71);
      }
      v19 = v105;
      if (v105)
      {
        v20 = (unint64_t *)&v105->__shared_owners_;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      DefaultSubsessionRef = (as::server *)as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v18, buf);
      v23 = *(void **)buf;
      if (*(_QWORD *)buf)
        CFRelease(*(CFTypeRef *)buf);
      if (!v19)
        goto LABEL_29;
      v24 = (unint64_t *)&v19->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
        if (v23)
          goto LABEL_30;
      }
      else
      {
LABEL_29:
        if (v23)
        {
LABEL_30:
          strcpy(v127, "set_property");
          if (objc_msgSend(v82, "count") == 1)
          {
            objc_msgSend(v82, "allKeys");
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v26, "objectAtIndexedSubscript:", 0);
            v75 = (__CFString *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v82, "objectForKeyedSubscript:", v75);
            v74 = (id)objc_claimAutoreleasedReturnValue();
          }
          else
          {
            v74 = v82;
            v75 = CFSTR("batch_properties");
          }
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[4],char [4],0>((uint64_t)__p, "key");
          v116 = __p;
          v117 = 1;
          v73 = objc_retainAutorelease(v75);
          v100 = (char *)-[__CFString UTF8String](v73, "UTF8String");
          v119 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v118, &v100);
          v120 = 1;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)buf, (uint64_t)__p, 2, 1, 2);
          *(_QWORD *)&buf[16] = buf;
          buf[24] = 1;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>((uint64_t)v109, "value");
          v110 = v109;
          v111 = 1;
          AudioSession::PropertyValueToJSON(v74, (uint64_t)v98);
          v112[0] = v98[0];
          v113[0] = v99;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v98);
          v98[0] = 0;
          v99 = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v112);
          v113[1] = v112;
          v114 = 1;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v123 + 2, (uint64_t)v109, 2, 1, 2);
          v125[1] = (char *)&v123 + 2;
          v126 = 1;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v101, (uint64_t)buf, 2, 1, 2);
          for (i = 0; i != -8; i -= 4)
          {
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v123 + i * 8 + 2);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v125[i], *((unsigned __int8 *)&v123 + i * 8 + 2));
          }
          for (j = 0; j != -8; j -= 4)
          {
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v112[j * 8]);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v113[j], v112[j * 8]);
          }
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v98);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v99, v98[0]);
          for (k = 0; k != -64; k -= 32)
          {
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v118[k]);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v118[k + 8], v118[k]);
          }
          v31 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v30));
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
          {
            v32 = SHIBYTE(v103.__r_.__value_.__r.__words[2]);
            v33 = v103.__r_.__value_.__r.__words[0];
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v101, -1, 0x20u, 0, 0, __p);
            v34 = &v103;
            if (v32 < 0)
              v34 = (std::string *)v33;
            if (SHIBYTE(v116) >= 0)
              v35 = __p;
            else
              v35 = (void **)__p[0];
            *(_DWORD *)buf = 136316162;
            *(_QWORD *)&buf[4] = "AudioSessionServerImp.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 400;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = v127;
            v122 = 2080;
            v123 = (uint64_t)v34;
            v124 = 2080;
            v125[0] = v35;
            _os_log_impl(&dword_1C895C000, v31, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
            if (SHIBYTE(v116) < 0)
              operator delete(__p[0]);
          }

          v36 = v23;
          v72 = v36;
          if (a4 == 2)
          {
            v37 = (as::server *)objc_msgSend(v36, "setProperties:usingErrorHandlingStrategy:outPropertiesErrors:", v82, 2, a5);
            v38 = (uint64_t)v37;
          }
          else
          {
            as::server::getMXPropertiesInLegacyOrder(v82);
            v39 = (void *)objc_claimAutoreleasedReturnValue();
            if (!v39)
            {
              v40 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(0));
              if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "AudioSessionServerImp.mm";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 418;
                _os_log_impl(&dword_1C895C000, v40, OS_LOG_TYPE_DEFAULT, "%25s:%-5d orderedPropertyValues not valid.", buf, 0x12u);
              }
            }
            v38 = objc_msgSend(v72, "setOrderedProperties:usingErrorHandlingStrategy:outPropertiesErrors:", v39, 1, a5);

          }
          if ((_DWORD)v38 == -15687)
          {
            v41 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v37));
            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "AudioSessionServerImp.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 428;
              _os_log_impl(&dword_1C895C000, v41, OS_LOG_TYPE_DEFAULT, "%25s:%-5d MX returned OperationFailed while setting batch properties", buf, 0x12u);
            }
            v42 = *a5;
            if (*a5)
            {
              v96 = 0u;
              v97 = 0u;
              v94 = 0u;
              v95 = 0u;
              v43 = v42;
              v44 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v94, v108, 16);
              if (v44)
              {
                v45 = *(_QWORD *)v95;
LABEL_59:
                v46 = 0;
                while (1)
                {
                  if (*(_QWORD *)v95 != v45)
                    objc_enumerationMutation(v43);
                  v47 = *(void **)(*((_QWORD *)&v94 + 1) + 8 * v46);
                  objc_msgSend(v47, "allKeys");
                  v48 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v48, "firstObject");
                  v49 = (void *)objc_claimAutoreleasedReturnValue();

                  objc_msgSend(v47, "objectForKeyedSubscript:", v49);
                  v50 = (void *)objc_claimAutoreleasedReturnValue();
                  v38 = objc_msgSend(v50, "intValue");

                  if ((_DWORD)v38)
                    break;
                  if (v44 == ++v46)
                  {
                    v44 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v94, v108, 16);
                    if (v44)
                      goto LABEL_59;
                    v38 = 0;
                    break;
                  }
                }
              }
              else
              {
                v38 = 4294951609;
              }

            }
            else
            {
              v38 = 4294951609;
            }
          }
          v76 = as::server::TranslateCMSessionErrorCode((uint64_t)v127, (uint64_t *)&v103, 441, v38);
          v92 = 0u;
          v93 = 0u;
          v90 = 0u;
          v91 = 0u;
          obj = *a5;
          v79 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v90, v107, 16);
          if (v79)
          {
            v78 = *(_QWORD *)v91;
            v53 = *MEMORY[0x1E0D494F8];
            do
            {
              for (m = 0; m != v79; ++m)
              {
                if (*(_QWORD *)v91 != v78)
                  objc_enumerationMutation(obj);
                v54 = *(void **)(*((_QWORD *)&v90 + 1) + 8 * m);
                v86 = 0u;
                v87 = 0u;
                v88 = 0u;
                v89 = 0u;
                v55 = v54;
                v56 = objc_msgSend(v55, "countByEnumeratingWithState:objects:count:", &v86, v106, 16);
                if (v56)
                {
                  v57 = *(_QWORD *)v87;
                  do
                  {
                    for (n = 0; n != v56; ++n)
                    {
                      if (*(_QWORD *)v87 != v57)
                        objc_enumerationMutation(v55);
                      v59 = *(void **)(*((_QWORD *)&v86 + 1) + 8 * n);
                      objc_msgSend(v55, "objectForKeyedSubscript:", v59);
                      v60 = (void *)objc_claimAutoreleasedReturnValue();
                      v61 = objc_msgSend(v60, "longValue");

                      if (v61)
                      {
                        v63 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v62));
                        if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)buf = 136315906;
                          *(_QWORD *)&buf[4] = "AudioSessionServerImp.mm";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 448;
                          *(_WORD *)&buf[18] = 2112;
                          *(_QWORD *)&buf[20] = v59;
                          v122 = 2048;
                          v123 = v61;
                          _os_log_impl(&dword_1C895C000, v63, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Error in setting property: %@ with code %ld", buf, 0x26u);
                        }
                      }
                      else if (objc_msgSend(v59, "isEqualToString:", v53))
                      {
                        objc_msgSend(v82, "objectForKeyedSubscript:", v53);
                        v64 = (as::server *)objc_claimAutoreleasedReturnValue();
                        as::server::GetAudioControlQueue(v64);
                        v65 = (void *)objc_claimAutoreleasedReturnValue();
                        v83[0] = MEMORY[0x1E0C809B0];
                        v83[1] = 3221225472;
                        v83[2] = ___ZN2as6server10forbid_acq24SetPropertiesOnMXSessionEjRK13audit_token_tP12NSDictionaryIP8NSStringPU25objcproto14NSSecureCoding11objc_objectENS_30AVAudioSessionBatchSetStrategyEPU15__autoreleasingP7NSArrayIPS5_IS7_P8NSNumberEE_block_invoke;
                        v83[3] = &unk_1E8205598;
                        v85 = v81;
                        v66 = v64;
                        v84 = v66;
                        as::server::DispatchBlock(v65, v83, 1, (uint64_t)"SetPropertiesOnMXSession", (uint64_t)"AudioSessionServerImp.mm", 462, 0, 0);

                      }
                    }
                    v56 = objc_msgSend(v55, "countByEnumeratingWithState:objects:count:", &v86, v106, 16);
                  }
                  while (v56);
                }

              }
              v79 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v90, v107, 16);
            }
            while (v79);
          }

          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v101);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v102, v101[0]);

          goto LABEL_94;
        }
      }
      v76 = 2003329396;
      v51 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(DefaultSubsessionRef));
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
      {
        v52 = &v103;
        if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v52 = (std::string *)v103.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "AudioSessionServerImp.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 383;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = v52;
        _os_log_impl(&dword_1C895C000, v51, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cannot get MXSessionRef for session: %s", buf, 0x1Cu);
      }
LABEL_94:
      if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v103.__r_.__value_.__l.__data_);
      goto LABEL_96;
    }
    v15 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v9));
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AudioSessionServerImp.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 376;
      _os_log_impl(&dword_1C895C000, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Invalid propertiesToSet", buf, 0x12u);
    }
    v76 = -50;
  }
  else
  {
    v76 = 561210739;
    v14 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v9));
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AudioSessionServerImp.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 371;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = a1;
      _os_log_impl(&dword_1C895C000, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cannot get session info for session ID: 0x%x", buf, 0x18u);
    }
  }
LABEL_96:
  v67 = v105;
  if (v105)
  {
    v68 = (unint64_t *)&v105->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }

  return v76;
}

void sub_1C8963E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t *a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  char a66;
  void *v66;

  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&a57);
  if (a64 < 0)
    operator delete(__p);
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a66);

  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump@<X0>(uint64_t a1@<X0>, int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, _QWORD *a6@<X8>)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  void (***v24[81])(void);

  v24[80] = *(void (****)(void))MEMORY[0x1E0C80C00];
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  v12 = (std::__shared_weak_count *)operator new(0x28uLL);
  v12->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  v12->__shared_weak_owners_ = 0;
  v12[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E8204E58;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8204E20;
  v12[1].__shared_owners_ = (uint64_t)a6;
  v21 = v12;
  v22 = &v12[1].__vftable;
  v23 = v12;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::serializer((uint64_t)v24, (uint64_t)&v22, a3, a5);
  v15 = v23;
  if (v23)
  {
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v21)
  {
    v18 = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(v24, a1, a2 >= 0, a4, a2 & ~(a2 >> 31), 0);
  return nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~serializer((uint64_t)v24);
}

void sub_1C8964264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~serializer((uint64_t)va);
  if (*(char *)(v6 + 23) < 0)
    operator delete(*(void **)v6);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(void (****a1)(void), uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t (*v11)(void);
  void (**v12)(void);
  unsigned int v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  void (**v22)(void);
  unsigned int v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD **v29;
  uint64_t *v30;
  _QWORD **v31;
  uint64_t (*v32)(void);
  void (*v34)(void);
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t (***v38)(void);
  _QWORD **v39;
  unsigned __int8 **v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  BOOL v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  unsigned __int8 **v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  unsigned int v62;
  _QWORD **v63;
  uint64_t v64;
  void (*v65)(void);
  unint64_t v66;
  _QWORD **v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD **v74;

  switch(*(_BYTE *)a2)
  {
    case 0:
      v11 = (uint64_t (*)(void))(**a1)[1];
      return v11();
    case 1:
      v12 = **a1;
      if (!*(_QWORD *)(*(_QWORD *)(a2 + 8) + 16))
      {
        v11 = (uint64_t (*)(void))v12[1];
        return v11();
      }
      if (a3)
      {
        v12[1]();
        v13 = a6 + a5;
        v14 = a1 + 76;
        if (*((char *)a1 + 631) < 0)
        {
          v15 = (unint64_t)a1[77];
          if (v15 >= v13)
            goto LABEL_7;
        }
        else
        {
          v15 = *((unsigned __int8 *)a1 + 631);
          if (v13 <= v15)
          {
LABEL_7:
            v16 = *(_QWORD **)(a2 + 8);
            v17 = (_QWORD *)*v16;
            if (v16[2] == 1)
            {
              v18 = (_QWORD *)*v16;
            }
            else
            {
              v66 = 0;
              do
              {
                v67 = a1 + 76;
                if (*((char *)a1 + 631) < 0)
                  v67 = (_QWORD **)*v14;
                ((void (*)(void (***)(void), _QWORD **, _QWORD))(**a1)[1])(*a1, v67, (a6 + a5));
                ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 34);
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v17 + 4, a4);
                ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "\": ", 3);
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v17 + 7, 1, a4, a5, (a6 + a5));
                ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, ",\n", 2);
                v68 = (_QWORD *)v17[1];
                if (v68)
                {
                  do
                  {
                    v18 = v68;
                    v68 = (_QWORD *)*v68;
                  }
                  while (v68);
                }
                else
                {
                  do
                  {
                    v18 = (_QWORD *)v17[2];
                    v50 = *v18 == (_QWORD)v17;
                    v17 = v18;
                  }
                  while (!v50);
                }
                ++v66;
                v16 = *(_QWORD **)(a2 + 8);
                v17 = v18;
              }
              while (v66 < v16[2] - 1);
            }
            v69 = v16 + 1;
            if (v18 == v69)
              nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
            v70 = (_QWORD *)v18[1];
            if (v70)
            {
              do
              {
                v71 = v70;
                v70 = (_QWORD *)*v70;
              }
              while (v70);
            }
            else
            {
              v73 = v18;
              do
              {
                v71 = (_QWORD *)v73[2];
                v50 = *v71 == (_QWORD)v73;
                v73 = v71;
              }
              while (!v50);
            }
            if (v71 != v69)
              nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
            v74 = a1 + 76;
            if (*((char *)a1 + 631) < 0)
              v74 = (_QWORD **)*v14;
            ((void (*)(void (***)(void), _QWORD **, _QWORD))(**a1)[1])(*a1, v74, (a6 + a5));
            ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 34);
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v18 + 4, a4);
            ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "\": ", 3);
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v18 + 7, 1, a4, a5, (a6 + a5));
            ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 10);
            v65 = (**a1)[1];
            goto LABEL_108;
          }
        }
        std::string::resize((std::string *)(a1 + 76), 2 * v15, 32);
        goto LABEL_7;
      }
      (*v12)();
      v45 = *(_QWORD *)(a2 + 8);
      v46 = *(_QWORD **)v45;
      if (*(_QWORD *)(v45 + 16) != 1)
      {
        v47 = 0;
        do
        {
          ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 34);
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v46 + 4, a4);
          ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "\":", 2);
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v46 + 7, 0, a4, a5, a6);
          ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 44);
          v48 = (_QWORD *)v46[1];
          v49 = v46;
          if (v48)
          {
            do
            {
              v46 = v48;
              v48 = (_QWORD *)*v48;
            }
            while (v48);
          }
          else
          {
            do
            {
              v46 = (_QWORD *)v49[2];
              v50 = *v46 == (_QWORD)v49;
              v49 = v46;
            }
            while (!v50);
          }
          ++v47;
          v45 = *(_QWORD *)(a2 + 8);
        }
        while (v47 < *(_QWORD *)(v45 + 16) - 1);
      }
      v51 = (_QWORD *)(v45 + 8);
      if (v46 == v51)
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
      v52 = (_QWORD *)v46[1];
      if (v52)
      {
        do
        {
          v53 = v52;
          v52 = (_QWORD *)*v52;
        }
        while (v52);
      }
      else
      {
        v72 = v46;
        do
        {
          v53 = (_QWORD *)v72[2];
          v50 = *v53 == (_QWORD)v72;
          v72 = v53;
        }
        while (!v50);
      }
      if (v53 != v51)
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
      ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 34);
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v46 + 4, a4);
      ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "\":", 2);
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v46 + 7, 0, a4, a5, a6);
LABEL_109:
      v32 = (uint64_t (*)(void))***a1;
      return v32();
    case 2:
      v19 = *(uint64_t **)(a2 + 8);
      v20 = *v19;
      v21 = v19[1];
      v22 = **a1;
      if (v20 == v21)
      {
        v11 = (uint64_t (*)(void))v22[1];
        return v11();
      }
      if (a3)
      {
        v22[1]();
        v23 = a6 + a5;
        v24 = a1 + 76;
        if (*((char *)a1 + 631) < 0)
        {
          v25 = (unint64_t)a1[77];
          if (v25 >= v23)
            goto LABEL_13;
        }
        else
        {
          v25 = *((unsigned __int8 *)a1 + 631);
          if (v23 <= v25)
          {
LABEL_13:
            v26 = *(uint64_t **)(a2 + 8);
            v28 = *v26;
            v27 = v26[1];
            if (v28 != v27 - 16)
            {
              do
              {
                v29 = a1 + 76;
                if (*((char *)a1 + 631) < 0)
                  v29 = (_QWORD **)*v24;
                ((void (*)(void (***)(void), _QWORD **, _QWORD))(**a1)[1])(*a1, v29, (a6 + a5));
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v28, 1, a4, a5, (a6 + a5));
                ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, ",\n", 2);
                v28 += 16;
                v30 = *(uint64_t **)(a2 + 8);
                v27 = v30[1];
              }
              while (v28 != v27 - 16);
              v28 = *v30;
            }
            if (v28 == v27)
              nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
            v31 = a1 + 76;
            if (*((char *)a1 + 631) < 0)
              v31 = (_QWORD **)*v24;
            ((void (*)(void (***)(void), _QWORD **, _QWORD))(**a1)[1])(*a1, v31, (a6 + a5));
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 16, 1, a4, a5, (a6 + a5));
            ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 10);
            if (*((char *)a1 + 631) < 0)
              v24 = (_QWORD *)*v24;
            ((void (*)(void (***)(void), _QWORD *, _QWORD))(**a1)[1])(*a1, v24, a6);
            goto LABEL_95;
          }
        }
        std::string::resize((std::string *)(a1 + 76), 2 * v25, 32);
        goto LABEL_13;
      }
      (*v22)();
      v54 = *(uint64_t **)(a2 + 8);
      v56 = *v54;
      v55 = v54[1];
      if (v56 == v55 - 16)
      {
        v57 = v56;
      }
      else
      {
        v57 = v56;
        do
        {
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v57, 0, a4, a5, a6);
          ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 44);
          v57 += 16;
          v58 = *(uint64_t **)(a2 + 8);
          v55 = v58[1];
        }
        while (v57 != v55 - 16);
        v56 = *v58;
      }
      if (v56 == v55)
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v57, 0, a4, a5, a6);
LABEL_95:
      v32 = (uint64_t (*)(void))***a1;
      return v32();
    case 3:
      (***a1)();
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, *(uint64_t **)(a2 + 8), a4);
      v32 = (uint64_t (*)(void))***a1;
      return v32();
    case 4:
      v11 = (uint64_t (*)(void))(**a1)[1];
      return v11();
    case 5:
      return nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>(a1, *(_QWORD *)(a2 + 8));
    case 6:
      return nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(a1, *(_QWORD *)(a2 + 8));
    case 7:
      return nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_float((char *)a1, *(double *)(a2 + 8));
    case 8:
      v34 = (**a1)[1];
      if (a3)
      {
        v34();
        v35 = (a6 + a5);
        v36 = a1 + 76;
        if (*((char *)a1 + 631) < 0)
        {
          v37 = (unint64_t)a1[77];
          if (v37 >= v35)
          {
            v38 = (uint64_t (***)(void))*a1;
            goto LABEL_62;
          }
        }
        else
        {
          v37 = *((unsigned __int8 *)a1 + 631);
          if (v35 <= v37)
          {
            v38 = (uint64_t (***)(void))*a1;
            v39 = a1 + 76;
            goto LABEL_63;
          }
        }
        std::string::resize((std::string *)(a1 + 76), 2 * v37, 32);
        v38 = (uint64_t (***)(void))*a1;
        v39 = a1 + 76;
        if ((*((char *)a1 + 631) & 0x80000000) == 0)
        {
LABEL_63:
          ((void (*)(uint64_t (***)(void), _QWORD **, uint64_t))(*v38)[1])(v38, v39, v35);
          ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "\"bytes\": [", 10);
          v59 = *(unsigned __int8 ***)(a2 + 8);
          v61 = *v59;
          v60 = v59[1];
          if (v61 != v60)
          {
            if (v61 != v60 - 1)
            {
              do
              {
                v62 = *v61++;
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, v62);
                ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, ", ", 2);
              }
              while (v61 != (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 1));
            }
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, *v61);
          }
          ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "],\n", 3);
          v63 = a1 + 76;
          if (*((char *)a1 + 631) < 0)
            v63 = (_QWORD **)*v36;
          ((void (*)(void (***)(void), _QWORD **, uint64_t))(**a1)[1])(*a1, v63, v35);
          ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "\"subtype\": ", 11);
          v64 = *(_QWORD *)(a2 + 8);
          if (*(_BYTE *)(v64 + 25))
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, *(unsigned __int8 *)(v64 + 24));
          else
            ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "null", 4);
          ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 10);
          v65 = (**a1)[1];
LABEL_108:
          v65();
          goto LABEL_109;
        }
LABEL_62:
        v39 = (_QWORD **)*v36;
        goto LABEL_63;
      }
      v34();
      v40 = *(unsigned __int8 ***)(a2 + 8);
      v42 = *v40;
      v41 = v40[1];
      if (v42 != v41)
      {
        while (v42 != v41 - 1)
        {
          v43 = *v42++;
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, v43);
          ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 44);
          v41 = *(unsigned __int8 **)(*(_QWORD *)(a2 + 8) + 8);
        }
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, *v42);
      }
      ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "],\"subtype\":", 12);
      v44 = *(_QWORD *)(a2 + 8);
      if (*(_BYTE *)(v44 + 25))
      {
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, *(unsigned __int8 *)(v44 + 24));
        goto LABEL_109;
      }
      v11 = (uint64_t (*)(void))(**a1)[1];
      return v11();
    case 9:
      v11 = (uint64_t (*)(void))(**a1)[1];
      return v11();
    default:
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
  }
}

void nlohmann::detail::output_string_adapter<char,std::string>::write_character(uint64_t a1, std::string::value_type a2)
{
  std::string::push_back(*(std::string **)(a1 + 8), a2);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped(uint64_t result, uint64_t *a2, int a3)
{
  unsigned int v3;
  uint64_t v4;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  __int16 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  uint64_t *v21;
  int v22;
  unint64_t v23;
  char *v24;
  uint64_t (*v25)(void);
  int v26;
  nlohmann::detail::exception *exception;
  char *v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  uint64_t *v32;
  nlohmann::detail::exception *v33;
  std::string v34;
  std::string v35;
  std::string v36;
  __int128 v37;
  std::string::size_type v38;
  char __str[8];
  std::string::size_type v40;
  char v41;
  char v42;
  unsigned int v43[3];

  v42 = 0;
  LOBYTE(v3) = *((char *)a2 + 23) < 0;
  v4 = *((unsigned __int8 *)a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = a2[1];
  if (!v4)
    return result;
  v7 = (_QWORD *)result;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v43[0] = 0;
  v12 = result + 90;
  do
  {
    if ((v3 & 1) != 0)
      v13 = (uint64_t *)*a2;
    else
      v13 = a2;
    v14 = *((unsigned __int8 *)v13 + v8);
    result = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(&v42, v43, v14);
    if ((_DWORD)result == 1)
    {
      v16 = *((_DWORD *)v7 + 158);
      if ((v16 - 1) >= 2)
      {
        if (!v16)
        {
          v41 = 3;
          *(_DWORD *)__str = 0;
          snprintf(__str, 3uLL, "%.2X", v14);
          exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
          std::to_string(&v34, v8);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("invalid UTF-8 byte at index ", &v34, &v35);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(": 0x", &v35, &v36);
          if (v41 >= 0)
            v28 = __str;
          else
            v28 = *(char **)__str;
          if (v41 >= 0)
            v29 = v41;
          else
            v29 = v40;
          v30 = std::string::append(&v36, v28, v29);
          v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
          v38 = v30->__r_.__value_.__r.__words[2];
          v37 = v31;
          v30->__r_.__value_.__l.__size_ = 0;
          v30->__r_.__value_.__r.__words[2] = 0;
          v30->__r_.__value_.__r.__words[0] = 0;
          nlohmann::detail::type_error::create(316, (uint64_t)&v37, exception);
        }
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped();
      }
      v17 = v9 != 0;
      if (v16 == 1)
      {
        v18 = v12 + v10;
        if (a3)
        {
          *(_DWORD *)v18 = 1717990748;
          *(_WORD *)(v18 + 4) = 25702;
          v10 += 6;
        }
        else
        {
          v10 += 3;
          *(_WORD *)v18 = -16401;
          *(_BYTE *)(v18 + 2) = -67;
        }
        if ((unint64_t)(v10 - 500) <= 0xC)
        {
          result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v7 + 8))(*v7, v12, v10);
          v10 = 0;
        }
      }
      v9 = 0;
      v8 -= v17;
      v42 = 0;
      v11 = v10;
    }
    else if ((_DWORD)result)
    {
      if ((a3 & 1) == 0)
      {
        if (*((char *)a2 + 23) >= 0)
          v19 = a2;
        else
          v19 = (uint64_t *)*a2;
        *(_BYTE *)(v12 + v11++) = *((_BYTE *)v19 + v8);
      }
      ++v9;
    }
    else
    {
      switch(v43[0])
      {
        case 8u:
          v15 = 25180;
          goto LABEL_43;
        case 9u:
          v15 = 29788;
          goto LABEL_43;
        case 0xAu:
          v15 = 28252;
          goto LABEL_43;
        case 0xBu:
          goto LABEL_29;
        case 0xCu:
          v15 = 26204;
          goto LABEL_43;
        case 0xDu:
          v15 = 29276;
          goto LABEL_43;
        default:
          if (v43[0] == 34)
          {
            v15 = 8796;
            goto LABEL_43;
          }
          if (v43[0] == 92)
          {
            v15 = 23644;
LABEL_43:
            *(_WORD *)(v12 + v11) = v15;
            v11 += 2;
            goto LABEL_44;
          }
LABEL_29:
          if (v43[0] > 0x7E)
            v20 = a3;
          else
            v20 = 0;
          if (v43[0] < 0x20 || v20)
          {
            v24 = (char *)(v12 + v11);
            if (HIWORD(v43[0]))
            {
              result = snprintf(v24, 0xDuLL, "\\u%04x\\u%04x", (unsigned __int16)((v43[0] >> 10) - 10304), v43[0] & 0x3FF | 0xDC00);
              v11 += 12;
            }
            else
            {
              result = snprintf(v24, 7uLL, "\\u%04x", v43[0]);
              v11 += 6;
            }
          }
          else
          {
            if (*((char *)a2 + 23) >= 0)
              v21 = a2;
            else
              v21 = (uint64_t *)*a2;
            *(_BYTE *)(v12 + v11++) = *((_BYTE *)v21 + v8);
          }
LABEL_44:
          if ((unint64_t)(v11 - 500) > 0xC)
          {
            v9 = 0;
            v10 = v11;
          }
          else
          {
            result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v7 + 8))(*v7, v12, v11);
            v11 = 0;
            v10 = 0;
            v9 = 0;
          }
          break;
      }
    }
    ++v8;
    v22 = *((char *)a2 + 23);
    v3 = v22 >> 31;
    v23 = a2[1];
    if (v22 >= 0)
      v23 = *((unsigned __int8 *)a2 + 23);
  }
  while (v8 < v23);
  if (v42)
  {
    v26 = *((_DWORD *)v7 + 158);
    switch(v26)
    {
      case 1:
        (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v7 + 8))(*v7, v12, v10);
        v25 = *(uint64_t (**)(void))(*(_QWORD *)*v7 + 8);
        break;
      case 2:
        v25 = *(uint64_t (**)(void))(*(_QWORD *)*v7 + 8);
        break;
      case 0:
        v41 = 3;
        *(_DWORD *)__str = 0;
        v32 = (uint64_t *)*a2;
        if (v22 >= 0)
          v32 = a2;
        snprintf(__str, 3uLL, "%.2X", *((unsigned __int8 *)v32 + v23 - 1));
        v33 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
        std::operator+<char>();
        nlohmann::detail::type_error::create(316, (uint64_t)&v37, v33);
      default:
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped();
    }
    return v25();
  }
  else if (v11)
  {
    v25 = *(uint64_t (**)(void))(*(_QWORD *)*v7 + 8);
    return v25();
  }
  return result;
}

void sub_1C896522C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  void *v37;
  int v38;
  uint64_t v39;

  if (a37 < 0)
  {
    operator delete(__p);
    if ((v38 & 1) == 0)
    {
LABEL_6:
      if (*(char *)(v39 - 97) < 0)
        operator delete(*(void **)(v39 - 120));
      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v37);
  goto LABEL_6;
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(_BYTE *a1, unsigned int *a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;

  v3 = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(unsigned char &,unsigned int &,unsigned char)::utf8d[a3];
  if (*a1)
    v4 = a3 & 0x3F | (*a2 << 6);
  else
    v4 = (0xFFu >> v3) & a3;
  *a2 = v4;
  v5 = 16 * *a1 + v3 + 256;
  if (v5 >= 0x190)
    __assert_rtn("decode", "serializer.hpp", 892, "index < 400");
  v6 = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(unsigned char &,unsigned int &,unsigned char)::utf8d[v5];
  *a1 = v6;
  return v6;
}

std::string *nlohmann::detail::output_string_adapter<char,std::string>::write_characters(uint64_t a1, const std::string::value_type *a2, std::string::size_type a3)
{
  return std::string::append(*(std::string **)(a1 + 8), a2, a3);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~serializer(uint64_t a1)
{
  if (*(char *)(a1 + 631) < 0)
    operator delete(*(void **)(a1 + 608));
  return std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100](a1);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::serializer(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  lconv *v7;
  char *thousands_sep;
  char *decimal_point;
  int8x16_t *v10;
  int8x16_t v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v7 = localeconv();
  *(_QWORD *)(a1 + 80) = v7;
  thousands_sep = v7->thousands_sep;
  if (thousands_sep)
    LOBYTE(thousands_sep) = *thousands_sep;
  *(_BYTE *)(a1 + 88) = (_BYTE)thousands_sep;
  decimal_point = v7->decimal_point;
  if (v7->decimal_point)
    LOBYTE(decimal_point) = *decimal_point;
  *(_OWORD *)(a1 + 90) = 0u;
  *(_BYTE *)(a1 + 89) = (_BYTE)decimal_point;
  *(_OWORD *)(a1 + 106) = 0u;
  *(_OWORD *)(a1 + 122) = 0u;
  *(_OWORD *)(a1 + 138) = 0u;
  *(_OWORD *)(a1 + 154) = 0u;
  *(_OWORD *)(a1 + 170) = 0u;
  *(_OWORD *)(a1 + 186) = 0u;
  *(_OWORD *)(a1 + 202) = 0u;
  *(_OWORD *)(a1 + 218) = 0u;
  *(_OWORD *)(a1 + 234) = 0u;
  *(_OWORD *)(a1 + 250) = 0u;
  *(_OWORD *)(a1 + 266) = 0u;
  *(_OWORD *)(a1 + 282) = 0u;
  *(_OWORD *)(a1 + 298) = 0u;
  *(_OWORD *)(a1 + 314) = 0u;
  *(_OWORD *)(a1 + 330) = 0u;
  *(_OWORD *)(a1 + 346) = 0u;
  *(_OWORD *)(a1 + 362) = 0u;
  *(_OWORD *)(a1 + 378) = 0u;
  *(_OWORD *)(a1 + 394) = 0u;
  *(_OWORD *)(a1 + 410) = 0u;
  *(_OWORD *)(a1 + 426) = 0u;
  *(_OWORD *)(a1 + 442) = 0u;
  *(_OWORD *)(a1 + 458) = 0u;
  *(_OWORD *)(a1 + 474) = 0u;
  *(_OWORD *)(a1 + 490) = 0u;
  *(_OWORD *)(a1 + 506) = 0u;
  *(_OWORD *)(a1 + 522) = 0u;
  *(_OWORD *)(a1 + 538) = 0u;
  *(_OWORD *)(a1 + 554) = 0u;
  *(_OWORD *)(a1 + 570) = 0u;
  *(_OWORD *)(a1 + 586) = 0u;
  *(_BYTE *)(a1 + 602) = a3;
  v10 = (int8x16_t *)operator new(0x208uLL);
  *(_QWORD *)(a1 + 608) = v10;
  *(_QWORD *)(a1 + 624) = 0x8000000000000208;
  v11 = vdupq_n_s8(a3);
  *(_QWORD *)(a1 + 616) = 512;
  *v10 = v11;
  v10[1] = v11;
  v10[2] = v11;
  v10[3] = v11;
  v10[4] = v11;
  v10[5] = v11;
  v10[6] = v11;
  v10[7] = v11;
  v10[8] = v11;
  v10[9] = v11;
  v10[10] = v11;
  v10[11] = v11;
  v10[12] = v11;
  v10[13] = v11;
  v10[14] = v11;
  v10[15] = v11;
  v10[16] = v11;
  v10[17] = v11;
  v10[18] = v11;
  v10[19] = v11;
  v10[20] = v11;
  v10[21] = v11;
  v10[22] = v11;
  v10[23] = v11;
  v10[24] = v11;
  v10[25] = v11;
  v10[26] = v11;
  v10[27] = v11;
  v10[28] = v11;
  v10[29] = v11;
  v10[30] = v11;
  v10[31] = v11;
  v10[32].i8[0] = 0;
  *(_DWORD *)(a1 + 632) = a4;
  return a1;
}

void sub_1C89654E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  _BYTE *v3;
  char *v4;
  int v6;
  unsigned int v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  if (!a2)
    return (**(uint64_t (***)(_QWORD, uint64_t))*a1)(*a1, 48);
  v2 = a2;
  v3 = a1 + 2;
  if ((v2 & 0x8000000000000000) != 0)
  {
    *v3 = 45;
    v2 = -(uint64_t)v2;
    if (v2 >= 0xA)
    {
      v6 = 4;
      v10 = v2;
      while (1)
      {
        if (v10 <= 0x63)
        {
          v6 -= 2;
          goto LABEL_24;
        }
        if (v10 <= 0x3E7)
          break;
        if (v10 >> 4 < 0x271)
          goto LABEL_24;
        v6 += 4;
        v9 = v10 >= 0x186A0;
        v10 /= 0x2710uLL;
        if (!v9)
        {
          v6 -= 3;
          goto LABEL_24;
        }
      }
      --v6;
    }
    else
    {
      v6 = 1;
    }
LABEL_24:
    v7 = v6 + 1;
  }
  else
  {
    if (v2 < 0xA)
    {
      v4 = (char *)a1 + 17;
LABEL_33:
      *(v4 - 1) = v2 + 48;
      return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
    }
    v7 = 4;
    v8 = v2;
    while (1)
    {
      if (v8 <= 0x63)
      {
        v7 -= 2;
        goto LABEL_25;
      }
      if (v8 <= 0x3E7)
        break;
      if (v8 >> 4 < 0x271)
        goto LABEL_25;
      v7 += 4;
      v9 = v8 >= 0x186A0;
      v8 /= 0x2710uLL;
      if (!v9)
      {
        v7 -= 3;
        goto LABEL_25;
      }
    }
    --v7;
  }
LABEL_25:
  if (v7 >= 0x3F)
    nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>();
  v4 = &v3[v7];
  if (v2 < 0x64)
  {
    v11 = v2;
  }
  else
  {
    do
    {
      v11 = v2 / 0x64;
      *((_WORD *)v4 - 1) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>(long long)::digits_to_99[v2 % 0x64];
      v4 -= 2;
      v12 = v2 >> 4;
      v2 /= 0x64uLL;
    }
    while (v12 > 0x270);
  }
  if (v11 < 0xA)
  {
    LOBYTE(v2) = v11;
    goto LABEL_33;
  }
  *((_WORD *)v4 - 1) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>(long long)::digits_to_99[v11];
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
}

void AudioSession::PropertyValueToJSON(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  uint64_t *v4;
  id v5;
  objc_class *v6;
  void *v7;
  id v8;
  uint64_t i;
  char *v10;
  unsigned __int8 v11[8];
  uint64_t *v12;
  unsigned __int8 *v13;
  char v14;
  _BYTE v15[16];
  uint64_t v16;
  char v17;
  char *v18;
  uint64_t *v19[2];
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (!v3)
  {
    *(_BYTE *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
    goto LABEL_17;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v3, "doubleValue");
    v11[0] = 7;
    v12 = v4;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    v13 = v11;
    v14 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(a2, (uint64_t)v11, 1, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
LABEL_4:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
    goto LABEL_17;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v5 = objc_retainAutorelease(v3);
    v18 = (char *)objc_msgSend(v5, "UTF8String");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v11, &v18);
    v13 = v11;
    v14 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(a2, (uint64_t)v11, 1, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);

    goto LABEL_17;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    OS::CF::ToJSON((OS::CF *)v3, a2);
    goto LABEL_17;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    OS::CF::ToJSON((OS::CF *)v3, a2);
    goto LABEL_17;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[7],char [7],0>((uint64_t)v11, "NSData");
    v13 = v11;
    v14 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(a2, (uint64_t)v11, 1, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    goto LABEL_4;
  }
  v6 = (objc_class *)objc_opt_class();
  NSStringFromClass(v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[22],char [22],0>((uint64_t)v11, "Unsupported data type");
  v13 = v11;
  v14 = 1;
  v8 = objc_retainAutorelease(v7);
  v10 = (char *)objc_msgSend(v8, "UTF8String");
  v16 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v15, &v10);
  v17 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v18, (uint64_t)v11, 2, 1, 2);
  v19[1] = (uint64_t *)&v18;
  v20 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(a2, (uint64_t)&v18, 1, 1, 2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v18);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v19, v18);
  for (i = 0; i != -64; i -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v15[i]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v15[i + 8], v15[i]);
  }

LABEL_17:
}

void sub_1C8965A08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  uint64_t i;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)va1);
  for (i = 32; i != -32; i -= 32)
    nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)(va + i));

  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_float(char *a1, double a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, const char *, uint64_t);
  uint64_t v5;
  const char *v6;

  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    v5 = *(_QWORD *)a1;
    v4 = *(uint64_t (**)(uint64_t, const char *, uint64_t))(**(_QWORD **)a1 + 8);
    v6 = "null";
    v3 = 4;
  }
  else
  {
    v3 = nlohmann::detail::to_chars<double>(a1 + 16, (uint64_t)(a1 + 80), a2) - (a1 + 16);
    v4 = *(uint64_t (**)(uint64_t, const char *, uint64_t))(**(_QWORD **)a1 + 8);
    v5 = *(_QWORD *)a1;
    v6 = a1 + 16;
  }
  return v4(v5, v6, v3);
}

char *nlohmann::detail::to_chars<double>(char *a1, uint64_t a2, double a3)
{
  char *v3;
  char *result;
  unint64_t v5;
  char *v6;

  if ((*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    nlohmann::detail::to_chars<double>();
  v3 = a1;
  if ((*(_QWORD *)&a3 & 0x8000000000000000) != 0)
  {
    a3 = -a3;
    *a1 = 45;
    v3 = a1 + 1;
  }
  if (a3 == 0.0)
  {
    *(_WORD *)v3 = 11824;
    result = v3 + 3;
    v3[2] = 48;
  }
  else
  {
    v5 = a2 - (_QWORD)v3;
    if (a2 - (uint64_t)v3 <= 16)
      nlohmann::detail::to_chars<double>();
    v6 = 0;
    nlohmann::detail::dtoa_impl::grisu2<double>((uint64_t)v3, (unsigned int *)&v6 + 1, &v6, a3);
    if (SHIDWORD(v6) >= 18)
      nlohmann::detail::to_chars<double>();
    if (v5 <= 0x15)
      nlohmann::detail::to_chars<double>();
    if (v5 == 22)
      nlohmann::detail::to_chars<double>();
    return nlohmann::detail::dtoa_impl::format_buffer((nlohmann::detail::dtoa_impl *)v3, (char *)HIDWORD(v6), (int)v6, -4, 15);
  }
  return result;
}

uint64_t nlohmann::detail::dtoa_impl::grisu2<double>(uint64_t a1, unsigned int *a2, _DWORD *a3, double a4)
{
  uint64_t v7;
  uint64_t v9[6];

  if ((*(_QWORD *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    nlohmann::detail::dtoa_impl::grisu2<double>();
  if (a4 <= 0.0)
    nlohmann::detail::dtoa_impl::grisu2<double>();
  nlohmann::detail::dtoa_impl::compute_boundaries<double>((uint64_t)v9, a4);
  return nlohmann::detail::dtoa_impl::grisu2(a1, a2, a3, v9[2], v9[3], v9[0], v9[1], v7, v9[4], (nlohmann::detail::dtoa_impl *)v9[5]);
}

uint64_t nlohmann::detail::dtoa_impl::grisu2(uint64_t a1, unsigned int *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, nlohmann::detail::dtoa_impl *a10)
{
  uint64_t cached_power_for_binary_exponent;
  int v14;
  int v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v27;
  int v28;
  _QWORD v29[2];
  _QWORD v30[2];
  _QWORD v31[2];

  v31[0] = a4;
  v31[1] = a5;
  v30[0] = a6;
  v30[1] = a7;
  v29[0] = a9;
  v29[1] = a10;
  if ((_DWORD)a10 != (_DWORD)a5)
    nlohmann::detail::dtoa_impl::grisu2();
  if ((_DWORD)a10 != (_DWORD)a7)
    nlohmann::detail::dtoa_impl::grisu2();
  cached_power_for_binary_exponent = nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent(a10);
  v15 = v14;
  v27 = cached_power_for_binary_exponent;
  v28 = v16;
  v17 = nlohmann::detail::dtoa_impl::diyfp::mul(v30, &v27);
  v19 = v18;
  v20 = nlohmann::detail::dtoa_impl::diyfp::mul(v31, &v27);
  v22 = v21;
  v23 = nlohmann::detail::dtoa_impl::diyfp::mul(v29, &v27);
  *a3 = -v15;
  return nlohmann::detail::dtoa_impl::grisu2_digit_gen(a1, a2, a3, v20 + 1, v22, v17, v19, v25, v23 - 1, v24);
}

unint64_t nlohmann::detail::dtoa_impl::diyfp::mul(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = HIDWORD(*a1);
  v3 = HIDWORD(*a2);
  v4 = v3 * (unint64_t)*a1;
  v5 = *a2 * (unint64_t)v2;
  return HIDWORD(v5)
       + v3 * (unint64_t)v2
       + HIDWORD(v4)
       + ((((*a2 * (unint64_t)*a1) >> 32)
         + v4
         + v5
         + 0x80000000) >> 32);
}

uint64_t nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent(nlohmann::detail::dtoa_impl *this)
{
  int v1;
  unsigned int v2;
  _QWORD *v3;
  int v4;

  if ((int)this <= -1501)
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  if ((int)this >= 1501)
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  v1 = 78913 * (-61 - (int)this) / 0x40000;
  if ((int)this < -61)
    ++v1;
  if (v1 <= -315)
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  v2 = (int)((v1 + 307 + (((__int16)(v1 + 307) >> 28) & 7)) << 16) >> 19;
  if (v2 >= 0x4F)
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  v3 = (_QWORD *)((char *)&nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent(int)::kCachedPowers
                + 16 * (unsigned __int16)v2);
  v4 = v3[1] + (_DWORD)this;
  if (v4 <= -125)
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  if (v4 >= -95)
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  return *v3;
}

uint64_t nlohmann::detail::dtoa_impl::compute_boundaries<double>@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  int v25;

  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    nlohmann::detail::dtoa_impl::compute_boundaries<double>();
  if (a2 <= 0.0)
    nlohmann::detail::dtoa_impl::compute_boundaries<double>();
  v4 = *(_QWORD *)&a2 >> 52;
  v5 = *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
  v6 = 2 * v5;
  v7 = *(_QWORD *)&a2 >> 53;
  v8 = 4 * v5;
  v9 = (*(_QWORD *)&a2 >> 52) - 1077;
  v10 = 0x10000000000000;
  if ((*(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL) != 0)
  {
    v8 = 2 * v5;
    v9 = (*(_QWORD *)&a2 >> 52) - 1076;
    v10 = *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
  }
  v11 = v7 == 0;
  if (v7)
    v12 = v8;
  else
    v12 = 2 * v5;
  if (v11)
    v9 = (*(_QWORD *)&a2 >> 52) - 1076;
  else
    v5 = v10;
  v3 = *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (v4)
  {
    v13 = (*(_QWORD *)&a2 >> 52) - 1076;
  }
  else
  {
    v12 = 2 * v3;
    v9 = -1075;
    v13 = 4294966221;
  }
  if (v4)
  {
    v14 = (*(_QWORD *)&a2 >> 52) - 1075;
  }
  else
  {
    v6 = 2 * v3;
    v14 = 4294966222;
  }
  if (v4)
    v15 = v5;
  else
    v15 = *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL;
  v24 = v12 - 1;
  v25 = v9;
  v16 = nlohmann::detail::dtoa_impl::diyfp::normalize(v6 | 1, v13);
  v18 = v17;
  v19 = nlohmann::detail::dtoa_impl::diyfp::normalize_to(&v24, v17);
  v21 = v20;
  result = nlohmann::detail::dtoa_impl::diyfp::normalize(v15, v14);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v23;
  *(_QWORD *)(a1 + 16) = v19;
  *(_DWORD *)(a1 + 24) = v21;
  *(_QWORD *)(a1 + 32) = v16;
  *(_DWORD *)(a1 + 40) = v18;
  return result;
}

uint64_t nlohmann::detail::dtoa_impl::diyfp::normalize(uint64_t result, unint64_t a2)
{
  if (!result)
    __assert_rtn("normalize", "to_chars.hpp", 143, "x.f != 0");
  for (; (result & 0x8000000000000000) == 0; a2 = (a2 - 1) | a2 & 0xFFFFFFFF00000000)
    result *= 2;
  return result;
}

unint64_t nlohmann::detail::dtoa_impl::diyfp::normalize_to(uint64_t *a1, int a2)
{
  int v2;
  uint64_t v3;
  unint64_t result;
  const char *v5;
  int v6;

  v2 = *((_DWORD *)a1 + 2) - a2;
  if (v2 < 0)
  {
    v5 = "delta >= 0";
    v6 = 162;
    goto LABEL_6;
  }
  v3 = *a1;
  result = *a1 << v2;
  if (result >> v2 != v3)
  {
    v5 = "((x.f << delta) >> delta) == x.f";
    v6 = 163;
LABEL_6:
    __assert_rtn("normalize_to", "to_chars.hpp", v6, v5);
  }
  return result;
}

char *nlohmann::detail::dtoa_impl::format_buffer(nlohmann::detail::dtoa_impl *this, char *a2, int a3, int a4, int a5)
{
  int v5;
  uint64_t v7;
  char *result;
  _BYTE *v9;
  size_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  unsigned int v14;
  char v15;
  uint64_t v16;
  unsigned __int8 v17;

  if ((a4 & 0x80000000) == 0)
    nlohmann::detail::dtoa_impl::format_buffer();
  if (a5 <= 0)
    nlohmann::detail::dtoa_impl::format_buffer();
  v5 = (int)a2;
  v7 = a3 + (uint64_t)(int)a2;
  if ((a3 & 0x80000000) == 0 && (int)v7 <= a5)
  {
    memset((char *)this + (int)a2, 48, a3);
    *((_BYTE *)this + v7) = 46;
    result = (char *)this + v7 + 2;
    *((_BYTE *)this + (int)v7 + 1) = 48;
    return result;
  }
  if ((int)v7 < 1 || (int)v7 > a5)
  {
    if ((int)v7 > a4 && (int)v7 <= 0)
    {
      v10 = -(int)v7;
      memmove((char *)this + v10 + 2, this, (int)a2);
      *(_WORD *)this = 11824;
      memset((char *)this + 2, 48, v10);
      return (char *)this + v10 + v5 + 2;
    }
    if ((_DWORD)a2 == 1)
    {
      v11 = 1;
    }
    else
    {
      memmove((char *)this + 2, (char *)this + 1, (int)a2 - 1);
      *((_BYTE *)this + 1) = 46;
      v11 = v5 + 1;
    }
    v12 = (char *)this + v11;
    *v12 = 101;
    if ((int)v7 <= -999)
      nlohmann::detail::dtoa_impl::format_buffer();
    if ((int)v7 >= 1001)
      nlohmann::detail::dtoa_impl::format_buffer();
    if ((int)v7 >= 1)
      v13 = 43;
    else
      v13 = 45;
    if ((int)v7 - 1 >= 0)
      v14 = v7 - 1;
    else
      v14 = 1 - v7;
    v12[1] = v13;
    if (v14 > 9)
    {
      if (v14 > 0x63)
      {
        v12[2] = (unsigned __int16)v14 / 0x64u + 48;
        v17 = (unsigned __int16)v14 % 0x64u;
        v12[3] = (v17 / 0xAu) | 0x30;
        v12[4] = (v17 % 0xAu) | 0x30;
        v16 = 2;
        return &v12[v16 + 3];
      }
      v12[2] = v14 / 0xAu + 48;
      v15 = (v14 % 0xAu) | 0x30;
    }
    else
    {
      v12[2] = 48;
      v15 = v14 + 48;
    }
    v12[3] = v15;
    v16 = 1;
    return &v12[v16 + 3];
  }
  if ((a3 & 0x80000000) == 0)
    nlohmann::detail::dtoa_impl::format_buffer();
  v9 = (char *)this + v7;
  memmove(v9 + 1, v9, (int)a2 - (unint64_t)v7);
  *v9 = 46;
  return (char *)this + v5 + 1;
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  if (!a2)
    return (**(uint64_t (***)(_QWORD, uint64_t))*a1)(*a1, 48);
  v2 = a2;
  if (a2 < 0xA)
  {
    v3 = (uint64_t)a1 + 17;
LABEL_21:
    *(_BYTE *)(v3 - 1) = v2 + 48;
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
  }
  v5 = 4;
  v6 = a2;
  while (1)
  {
    if (v6 <= 0x63)
    {
      v5 -= 2;
      goto LABEL_13;
    }
    if (v6 <= 0x3E7)
      break;
    if (v6 >> 4 < 0x271)
      goto LABEL_13;
    v7 = v6 >> 5;
    v6 /= 0x2710uLL;
    v5 += 4;
    if (v7 <= 0xC34)
    {
      v5 -= 3;
      goto LABEL_13;
    }
  }
  --v5;
LABEL_13:
  if (v5 >= 0x3F)
    nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>();
  v3 = (uint64_t)a1 + v5 + 16;
  if (a2 < 0x64)
  {
    v8 = a2;
  }
  else
  {
    do
    {
      v8 = v2 / 0x64;
      *(_WORD *)(v3 - 2) = *(_WORD *)&nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[2 * (v2 % 0x64)];
      v3 -= 2;
      v9 = v2 >> 4;
      v2 /= 0x64uLL;
    }
    while (v9 > 0x270);
  }
  if (v8 < 0xA)
  {
    LOBYTE(v2) = v8;
    goto LABEL_21;
  }
  *(_WORD *)(v3 - 2) = *(_WORD *)&nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[2 * v8];
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[22],char [22],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[22]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[22]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1C896643C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_32c120_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorEEEU13block_pointerFvDpT_ES9_iEUlS4_E_(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

}

void as::server::ConstAudioSessionInfo::CreateCMSession(as::server::ConstAudioSessionInfo *this, const as::server::SessionCreationDescription *a2)
{
  const void *v4;
  const void *v5;
  __int128 v6;
  NSString *v7;
  as::server *v8;
  unsigned int v9;
  NSObject *v10;
  const __CFAllocator *v11;
  CFNumberRef v12;
  as::server *v13;
  unsigned int v14;
  NSObject *v15;
  CFNumberRef v16;
  int v17;
  as::server *v18;
  __SecTask *v19;
  NSObject *v20;
  unsigned int v21;
  __int128 v22;
  CFTypeRef cf;
  int v24;
  int valuePtr;
  _OWORD v26[2];
  int v27;
  uint64_t v28;
  audit_token_t buf;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 13))
    as::server::ConstAudioSessionInfo::CreateCMSession(this);
  v28 = 0;
  if (CMSessionCreateForRemoteDeviceID())
  {
    v4 = (const void *)*((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = 0;
    if (v4)
      CFRelease(v4);
  }
  else
  {
    v5 = (const void *)*((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = v28;
    if (v5)
      CFRelease(v5);
    v6 = *((_OWORD *)a2 + 1);
    v26[0] = *(_OWORD *)a2;
    v26[1] = v6;
    v27 = *((_DWORD *)a2 + 8);
    as::server::ConstAudioSessionInfo::CreateMXSession((uint64_t)this, 2, (uint64_t)v26, (uint64_t)a2);
    as::server::ConstAudioSessionInfo::buildClientNameString(this);
    v7 = (NSString *)objc_claimAutoreleasedReturnValue();
    as::server::ConstAudioSessionInfo::SetClientName(this, v7);

    v8 = (as::server *)MXSessionSetProperty();
    v9 = v8;
    if ((_DWORD)v8)
    {
      v10 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v8));
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        buf.val[0] = 136315650;
        *(_QWORD *)&buf.val[1] = "AudioSessionInfo.mm";
        LOWORD(buf.val[3]) = 1024;
        *(unsigned int *)((char *)&buf.val[3] + 2) = 429;
        HIWORD(buf.val[4]) = 1024;
        buf.val[5] = v9;
        _os_log_impl(&dword_1C895C000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Set of kMXSessionProperty_IsAudioSession failed: %d", (uint8_t *)&buf, 0x18u);
      }
    }
    valuePtr = *((_DWORD *)this + 2);
    v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v12 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
    v13 = (as::server *)MXSessionSetProperty();
    v14 = v13;
    if ((_DWORD)v13)
    {
      v15 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v13));
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        buf.val[0] = 136315650;
        *(_QWORD *)&buf.val[1] = "AudioSessionInfo.mm";
        LOWORD(buf.val[3]) = 1024;
        *(unsigned int *)((char *)&buf.val[3] + 2) = 437;
        HIWORD(buf.val[4]) = 1024;
        buf.val[5] = v14;
        _os_log_impl(&dword_1C895C000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d Set of kMXSessionProperty_CoreSessionID failed: %d", (uint8_t *)&buf, 0x18u);
      }
    }
    CFRelease(v12);
    v24 = *((_DWORD *)a2 + 9);
    v16 = CFNumberCreate(v11, kCFNumberSInt32Type, &v24);
    v17 = MXSessionSetProperty();
    CFRelease(v16);
    if (v17)
      as::server::ConstAudioSessionInfo::CreateCMSession();
    as::server::ProcessIdentity::SecurityTask(a2, (SecTaskRef *)&cf);
    v19 = (__SecTask *)cf;
    if (!cf)
    {
      v20 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v18));
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        v21 = *((_DWORD *)a2 + 9);
        buf.val[0] = 136315650;
        *(_QWORD *)&buf.val[1] = "AudioSessionInfo.mm";
        LOWORD(buf.val[3]) = 1024;
        *(unsigned int *)((char *)&buf.val[3] + 2) = 451;
        HIWORD(buf.val[4]) = 1024;
        buf.val[5] = v21;
        _os_log_impl(&dword_1C895C000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d PID %d of description has an invalid audit token", (uint8_t *)&buf, 0x18u);
      }
      v19 = (__SecTask *)cf;
    }
    as::server::ConstAudioSessionInfo::SetSecurityTask(this, v19);
    v22 = *((_OWORD *)a2 + 1);
    *(_OWORD *)buf.val = *(_OWORD *)a2;
    *(_OWORD *)&buf.val[4] = v22;
    v30 = *((_DWORD *)a2 + 8);
    if ((_BYTE)v30)
      as::server::ConstAudioSessionInfo::SetAuditToken(this, &buf);
    if (cf)
      CFRelease(cf);
  }
}

void sub_1C89667E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  applesauce::CF::ObjectRef<__SecTask *>::~ObjectRef(&a9);
  _Unwind_Resume(a1);
}

uint64_t as::server::ConstAudioSessionInfo::ConstAudioSessionInfo(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  id v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  std::string *v17;
  std::string::size_type size;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  const char *v22;
  size_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  const char *v27;
  size_t v28;
  _QWORD *v29;
  _QWORD *v30;
  AudioSession *v31;
  uint64_t v32;
  std::string *v33;
  void *v34;
  void *v35;
  id v36;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t v40;
  char *v41;
  int v42;
  std::string *v43;
  __int128 v44;
  void **v45;
  std::string::size_type v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  std::string::size_type v52;
  std::string *v53;
  __int128 v54;
  std::string *v55;
  __int128 v56;
  uint64_t *v57;
  std::string::value_type v58;
  std::string::size_type v59;
  int v60;
  uint64_t *v61;
  std::string::value_type v62;
  std::string::size_type v63;
  _QWORD *v64;
  as::server *v65;
  NSObject *v66;
  int v67;
  __SecTask *v68;
  NSObject *v69;
  int v70;
  __SecTask *v71;
  CFTypeRef v72;
  BOOL v73;
  CFTypeRef v74;
  BOOL v75;
  BOOL v76;
  CFTypeRef v77;
  CFTypeRef v78;
  int v79;
  NSObject *v80;
  unsigned int v81;
  int v82;
  NSObject *v83;
  int v84;
  const void *v85;
  char *v86;
  NSObject *v87;
  int v88;
  std::string *v89;
  __int128 v90;
  const void **v92;
  char v93;
  char v94;
  void *v95[2];
  unsigned __int8 v96;
  void *v97[2];
  std::string::size_type v98;
  unsigned __int8 v99[8];
  uint64_t *v100;
  std::string v101;
  std::string v102;
  std::string v103;
  _BYTE v104[28];
  _BYTE v105[16];
  _BYTE *v106;
  char v107;
  void *__p;
  char v109;
  uint64_t v110;
  std::string v111;
  char v112;
  _BYTE v113[16];
  uint64_t v114;
  char v115;
  std::string v116;
  char v117;
  _BYTE v118[16];
  uint64_t v119;
  char v120;
  uint64_t v121;

  v121 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  BaseOpaqueObject::BaseOpaqueObject((BaseOpaqueObject *)a1);
  *(_QWORD *)a1 = &off_1E8205828;
  v6 = *(_OWORD *)a2;
  v7 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 44) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 28) = v7;
  *(_OWORD *)(a1 + 12) = v6;
  v8 = *(_QWORD *)(a2 + 88);
  if (v8)
    v9 = v8 + 52;
  else
    v9 = a2;
  if (*(_DWORD *)(a2 + 40) == 1935830119)
    v10 = v9;
  else
    v10 = a2;
  v11 = *(_OWORD *)v10;
  v12 = *(_OWORD *)(v10 + 16);
  *(_QWORD *)(a1 + 84) = *(_QWORD *)(v10 + 32);
  *(_OWORD *)(a1 + 68) = v12;
  *(_OWORD *)(a1 + 52) = v11;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 40);
  v13 = v5;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 96) = v13;
  v92 = (const void **)(a1 + 104);
  *(_QWORD *)(a1 + 112) = 0;
  v14 = *(void **)(a2 + 56);
  if (v14)
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 152), (char *)objc_msgSend(v14, "UTF8String"));
  else
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 152), "");
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v104);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)"sid:0x", 6);
  *(_DWORD *)((char *)v15 + *(_QWORD *)(*v15 - 24) + 8) = *(_DWORD *)((_BYTE *)v15 + *(_QWORD *)(*v15 - 24) + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)", ", 2);
  if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = &v116;
  else
    v17 = (std::string *)v116.__r_.__value_.__r.__words[0];
  if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v116.__r_.__value_.__r.__words[2]);
  else
    size = v116.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, size);
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)"(", 1);
  *(_DWORD *)((char *)v19 + *(_QWORD *)(*v19 - 24) + 8) = *(_DWORD *)((_BYTE *)v19 + *(_QWORD *)(*v19 - 24) + 8) & 0xFFFFFFB5 | 2;
  v20 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)")", 1);
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)", ", 2);
  CAX4CCString::CAX4CCString((CAX4CCString *)&v111, *(_DWORD *)(a2 + 40));
  v23 = strlen(v22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)&v111, v23);
  if (*(_QWORD *)(a2 + 88))
  {
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)"; srcid:0x", 10);
    *(_DWORD *)((char *)v24 + *(_QWORD *)(*v24 - 24) + 8) = *(_DWORD *)((_BYTE *)v24 + *(_QWORD *)(*v24 - 24) + 8) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)", ", 2);
    v26 = *(_QWORD *)(a2 + 88);
    v27 = (const char *)(v26 + 128);
    if (*(char *)(v26 + 151) < 0)
      v27 = *(const char **)v27;
    v28 = strlen(v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v27, v28);
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)"(", 1);
    *(_DWORD *)((char *)v29 + *(_QWORD *)(*v29 - 24) + 8) = *(_DWORD *)((_BYTE *)v29 + *(_QWORD *)(*v29 - 24) + 8) & 0xFFFFFFB5 | 2;
    v30 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)")", 1);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v104[8], (_QWORD *)(a1 + 176));
  *(_QWORD *)v104 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)&v104[*(_QWORD *)(*(_QWORD *)v104 - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *(_QWORD *)&v104[8] = MEMORY[0x1E0DE4FB8] + 16;
  if (v109 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CAA38CB0](&v110);
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v116.__r_.__value_.__l.__data_);
  v31 = (AudioSession *)*(unsigned int *)(a1 + 8);
  v32 = *(unsigned int *)(a2 + 36);
  if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v33 = &v102;
  else
    v33 = (std::string *)v102.__r_.__value_.__r.__words[0];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", v33, 1);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@(%d)"), v34, v32);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[3],char [3],0>((uint64_t)&v116, "ID");
  v116.__r_.__value_.__r.__words[2] = (std::string::size_type)&v116;
  v117 = 1;
  AudioSession::FormatSessionIDAsHex(v31, &v103);
  v119 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>((uint64_t)v118, (uint64_t)&v103);
  v120 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v104, (uint64_t)&v116, 2, 1, 2);
  *(_QWORD *)&v104[16] = v104;
  v104[24] = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)&v111, "name");
  v111.__r_.__value_.__r.__words[2] = (std::string::size_type)&v111;
  v112 = 1;
  v36 = objc_retainAutorelease(v35);
  v101.__r_.__value_.__r.__words[0] = objc_msgSend(v36, "UTF8String");
  v114 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v113, &v101.__r_.__value_.__l.__data_);
  v115 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v105, (uint64_t)&v111, 2, 1, 2);
  v106 = v105;
  v107 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v99, (uint64_t)v104, 2, 1, 2);
  for (i = 0; i != -64; i -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v105[i]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v105[i + 8], v105[i]);
  }
  for (j = 0; j != -64; j -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v113[j]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v113[j + 8], v113[j]);
  }
  for (k = 0; k != -64; k -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v118[k]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v118[k + 8], v118[k]);
  }
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v103.__r_.__value_.__l.__data_);

  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v102.__r_.__value_.__l.__data_);
  v40 = *(_QWORD *)(a2 + 88);
  if (v40)
  {
    v41 = (char *)(v40 + 128);
    if (*(char *)(v40 + 151) < 0)
      v41 = *(char **)v41;
    v42 = *(_DWORD *)(v40 + 88);
    std::string::basic_string[abi:ne180100]<0>(v95, v41);
    AudioSession::FormatSessionIDAsHex((AudioSession *)*(unsigned int *)(*(_QWORD *)(a2 + 88) + 8), &v102);
    v43 = std::string::append(&v102, " ", 1uLL);
    v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v103.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    if ((v96 & 0x80u) == 0)
      v45 = v95;
    else
      v45 = (void **)v95[0];
    if ((v96 & 0x80u) == 0)
      v46 = v96;
    else
      v46 = (std::string::size_type)v95[1];
    v47 = std::string::append(&v103, (const std::string::value_type *)v45, v46);
    v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v111.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    v49 = std::string::append(&v111, "(", 1uLL);
    v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    v116.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v101, v42);
    if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v51 = &v101;
    else
      v51 = (std::string *)v101.__r_.__value_.__r.__words[0];
    if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v52 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
    else
      v52 = v101.__r_.__value_.__l.__size_;
    v53 = std::string::append(&v116, (const std::string::value_type *)v51, v52);
    v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    *(_QWORD *)&v104[16] = *((_QWORD *)&v53->__r_.__value_.__l + 2);
    *(_OWORD *)v104 = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    v55 = std::string::append((std::string *)v104, ")", 1uLL);
    v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v98 = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)v97 = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    if ((v104[23] & 0x80000000) != 0)
      operator delete(*(void **)v104);
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v101.__r_.__value_.__l.__data_);
    if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v116.__r_.__value_.__l.__data_);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v111.__r_.__value_.__l.__data_);
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v103.__r_.__value_.__l.__data_);
    if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v102.__r_.__value_.__l.__data_);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>((uint64_t)&v116, (uint64_t)v97);
    v57 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v99, "sibling_of");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v116);
    v58 = *(_BYTE *)v57;
    *(_BYTE *)v57 = v116.__r_.__value_.__s.__data_[0];
    v116.__r_.__value_.__s.__data_[0] = v58;
    v59 = v57[1];
    v57[1] = v116.__r_.__value_.__l.__size_;
    v116.__r_.__value_.__l.__size_ = v59;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v57);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v116);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v116.__r_.__value_.__l.__size_, v116.__r_.__value_.__s.__data_[0]);
    if (SHIBYTE(v98) < 0)
      operator delete(v97[0]);
    if ((char)v96 < 0)
      operator delete(v95[0]);
  }
  v60 = *(_DWORD *)(a2 + 40);
  if (v60 != 1886546285 && v60 != 1935830119)
  {
    AudioSession::GetSessionTypeName(v60, v104);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>((uint64_t)&v111, (uint64_t)v104);
    v61 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v99, "type");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v111);
    v62 = *(_BYTE *)v61;
    *(_BYTE *)v61 = v111.__r_.__value_.__s.__data_[0];
    v111.__r_.__value_.__s.__data_[0] = v62;
    v63 = v61[1];
    v61[1] = v111.__r_.__value_.__l.__size_;
    v111.__r_.__value_.__l.__size_ = v63;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v61);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v111);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v111.__r_.__value_.__l.__size_, v111.__r_.__value_.__s.__data_[0]);
    if ((v104[23] & 0x80000000) != 0)
      operator delete(*(void **)v104);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v99, -1, 0x20u, 0, 2, (_QWORD *)(a1 + 200));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v99);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v100, v99[0]);
  v64 = operator new(0x20uLL);
  v64[1] = 0;
  v64[2] = 0;
  *v64 = &off_1E82058E8;
  *(_QWORD *)(a1 + 224) = v64 + 3;
  *(_QWORD *)(a1 + 232) = v64;
  *(_QWORD *)(a1 + 240) = 0;
  as::server::ProcessIdentity::SecurityTask((as::server::ProcessIdentity *)(a1 + 12), (SecTaskRef *)&v111);
  as::server::ProcessIdentity::SecurityTask((as::server::ProcessIdentity *)(a1 + 52), (SecTaskRef *)&v103);
  if (!v111.__r_.__value_.__r.__words[0])
  {
    v66 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v65));
    if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
    {
      v67 = *(_DWORD *)(a1 + 48);
      *(_DWORD *)v104 = 136315650;
      *(_QWORD *)&v104[4] = "AudioSessionInfo.mm";
      *(_WORD *)&v104[12] = 1024;
      *(_DWORD *)&v104[14] = 261;
      *(_WORD *)&v104[18] = 1024;
      *(_DWORD *)&v104[20] = v67;
      _os_log_impl(&dword_1C895C000, v66, OS_LOG_TYPE_ERROR, "%25s:%-5d Creator PID %d has an invalid audit token", v104, 0x18u);
    }

  }
  v68 = (__SecTask *)v103.__r_.__value_.__r.__words[0];
  if (!v103.__r_.__value_.__r.__words[0])
  {
    v69 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v65));
    if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
    {
      v70 = *(_DWORD *)(a1 + 88);
      *(_DWORD *)v104 = 136315650;
      *(_QWORD *)&v104[4] = "AudioSessionInfo.mm";
      *(_WORD *)&v104[12] = 1024;
      *(_DWORD *)&v104[14] = 263;
      *(_WORD *)&v104[18] = 1024;
      *(_DWORD *)&v104[20] = v70;
      _os_log_impl(&dword_1C895C000, v69, OS_LOG_TYPE_ERROR, "%25s:%-5d Source PID %d has an invalid audit token", v104, 0x18u);
    }

    v68 = (__SecTask *)v103.__r_.__value_.__r.__words[0];
  }
  v71 = (__SecTask *)v111.__r_.__value_.__r.__words[0];
  if (v111.__r_.__value_.__r.__words[0])
  {
    v72 = SecTaskCopyValueForEntitlement((SecTaskRef)v111.__r_.__value_.__l.__data_, CFSTR("com.apple.private.coreaudio.viewInterruptorName.allow"), 0);
    *(_QWORD *)v104 = v72;
    v104[8] = 1;
    if (v72)
      v73 = CFEqual(v72, (CFTypeRef)*MEMORY[0x1E0C9AE50]) != 0;
    else
      v73 = 0;
    CACFBoolean::~CACFBoolean((CACFBoolean *)v104);
  }
  else
  {
    v73 = 0;
  }
  *(_BYTE *)(a1 + 120) = v73;
  if (v68)
  {
    v74 = SecTaskCopyValueForEntitlement(v68, CFSTR("com.apple.coreaudio.untrackedSpatialization.allow"), 0);
    *(_QWORD *)v104 = v74;
    v104[8] = 1;
    if (v74)
      v75 = CFEqual(v74, (CFTypeRef)*MEMORY[0x1E0C9AE50]) != 0;
    else
      v75 = 0;
    CACFBoolean::~CACFBoolean((CACFBoolean *)v104);
    *(_BYTE *)(a1 + 121) = v75;
    v77 = SecTaskCopyValueForEntitlement(v68, CFSTR("com.apple.developer.coreaudio.untrackedHeadphoneSpatialization"), 0);
    *(_QWORD *)v104 = v77;
    v104[8] = 1;
    if (v77)
      v76 = CFEqual(v77, (CFTypeRef)*MEMORY[0x1E0C9AE50]) != 0;
    else
      v76 = 0;
    CACFBoolean::~CACFBoolean((CACFBoolean *)v104);
  }
  else
  {
    v76 = 0;
    *(_BYTE *)(a1 + 121) = 0;
  }
  *(_BYTE *)(a1 + 122) = v76;
  if (v71)
  {
    v78 = SecTaskCopyValueForEntitlement(v71, CFSTR("com.apple.private.coreaudio.mxsessionPropertyPipe"), 0);
    *(_QWORD *)v104 = v78;
    v104[8] = 1;
    if (v78)
      LOBYTE(v71) = CFEqual(v78, (CFTypeRef)*MEMORY[0x1E0C9AE50]) != 0;
    else
      LOBYTE(v71) = 0;
    CACFBoolean::~CACFBoolean((CACFBoolean *)v104);
  }
  *(_BYTE *)(a1 + 123) = (_BYTE)v71;
  v79 = *(_DWORD *)(a2 + 40);
  if (v79 == 1935830119)
  {
    if (*(_QWORD *)(a2 + 88))
    {
      v83 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v65));
      if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
      {
        v84 = *(_DWORD *)(*(_QWORD *)(a2 + 88) + 88);
        *(_DWORD *)v104 = 136315650;
        *(_QWORD *)&v104[4] = "AudioSessionInfo.mm";
        *(_WORD *)&v104[12] = 1024;
        *(_DWORD *)&v104[14] = 290;
        *(_WORD *)&v104[18] = 1024;
        *(_DWORD *)&v104[20] = v84;
        _os_log_impl(&dword_1C895C000, v83, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to create sibling for core session created by PID %d", v104, 0x18u);
      }

      as::server::ConstAudioSessionInfo::GetCMSessionRef(*(CFTypeRef *)(a2 + 88), v104);
      v85 = *v92;
      *v92 = *(const void **)v104;
      *(_QWORD *)v104 = v85;
      if (v85)
        CFRelease(v85);
      v86 = &v93;
      goto LABEL_123;
    }
  }
  else if (v79 == 1935897189)
  {
    v80 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v65));
    if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
    {
      v81 = *(_DWORD *)(a2 + 64);
      v82 = bswap32(v81);
      *(_DWORD *)&v104[1] = v82;
      if (((char)v82 - 32) > 0x5E
        || (((__int16)v82 >> 8) - 32) > 0x5E
        || ((v82 << 8 >> 24) - 32) > 0x5E
        || ((v82 >> 24) - 32) > 0x5E)
      {
        std::to_string(&v116, v81);
      }
      else
      {
        strcpy(&v104[5], "'");
        v104[0] = 39;
        std::string::basic_string[abi:ne180100]<0>(&v116, v104);
      }
      v89 = &v116;
      if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v89 = (std::string *)v116.__r_.__value_.__r.__words[0];
      *(_DWORD *)v104 = 136315650;
      *(_QWORD *)&v104[4] = "AudioSessionInfo.mm";
      *(_WORD *)&v104[12] = 1024;
      *(_DWORD *)&v104[14] = 279;
      *(_WORD *)&v104[18] = 2080;
      *(_QWORD *)&v104[20] = v89;
      _os_log_impl(&dword_1C895C000, v80, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to create secure session with use case ID  %s", v104, 0x1Cu);
      if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v116.__r_.__value_.__l.__data_);
    }

    v86 = &v94;
LABEL_123:
    v90 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v86 = *(_OWORD *)a2;
    *((_OWORD *)v86 + 1) = v90;
    *((_DWORD *)v86 + 8) = *(_DWORD *)(a2 + 32);
    as::server::ConstAudioSessionInfo::CreateMXSession(a1, 1, (uint64_t)v86, a2);
    goto LABEL_124;
  }
  v87 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v65));
  if (os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG))
  {
    v88 = *(_DWORD *)(a1 + 88);
    *(_DWORD *)v104 = 136315650;
    *(_QWORD *)&v104[4] = "AudioSessionInfo.mm";
    *(_WORD *)&v104[12] = 1024;
    *(_DWORD *)&v104[14] = 296;
    *(_WORD *)&v104[18] = 1024;
    *(_DWORD *)&v104[20] = v88;
    _os_log_impl(&dword_1C895C000, v87, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to create a new core session for client with PID %d", v104, 0x18u);
  }

  as::server::ConstAudioSessionInfo::CreateCMSession((as::server::ConstAudioSessionInfo *)a1, (const as::server::SessionCreationDescription *)a2);
LABEL_124:
  if (v103.__r_.__value_.__r.__words[0])
    CFRelease(v103.__r_.__value_.__l.__data_);
  if (v111.__r_.__value_.__r.__words[0])
    CFRelease(v111.__r_.__value_.__l.__data_);

  return a1;
}

void sub_1C8967684(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void CACFBoolean::~CACFBoolean(CACFBoolean *this)
{
  const void *v2;

  if (*((_BYTE *)this + 8))
  {
    v2 = *(const void **)this;
    if (*(_QWORD *)this)
      CFRelease(v2);
  }
}

void as::server::ProcessIdentity::SecurityTask(as::server::ProcessIdentity *this@<X0>, SecTaskRef *a2@<X8>)
{
  __int128 v2;
  NSObject *v3;
  audit_token_t v4;
  uint8_t buf[4];
  const char *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *a2 = 0;
  if (*((_BYTE *)this + 32))
  {
    v2 = *((_OWORD *)this + 1);
    *(_OWORD *)v4.val = *(_OWORD *)this;
    *(_OWORD *)&v4.val[4] = v2;
    *a2 = SecTaskCreateWithAuditToken(0, &v4);
  }
  else
  {
    v3 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(this));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v6 = "AudioSessionInfo.h";
      v7 = 1024;
      v8 = 242;
      _os_log_impl(&dword_1C895C000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Error while getting SecTask: token not valid", buf, 0x12u);
    }
  }
}

void sub_1C8967B28(_Unwind_Exception *a1)
{
  const void **v1;

  applesauce::CF::ObjectRef<__SecTask *>::~ObjectRef(v1);
  _Unwind_Resume(a1);
}

_QWORD *`anonymous namespace'::GetClientProcessNameString@<X0>(_anonymous_namespace_ *this@<X0>, _QWORD *a2@<X8>)
{
  void *v4;

  v4 = (void *)*((_QWORD *)this + 6);
  if (v4)
    return std::string::basic_string[abi:ne180100]<0>(a2, (char *)objc_msgSend(v4, "UTF8String"));
  else
    return (_QWORD *)caulk::platform::process_name((caulk::platform *)*((unsigned int *)this + 9));
}

void OS::CF::ToJSON(OS::CF *this@<X0>, uint64_t a2@<X8>)
{
  CFArrayRef Count;
  CFArrayRef v6;
  CFArrayRef v7;
  CFIndex v8;
  const void *v11;
  CFTypeRef cf;
  uint64_t v13;
  uint64_t *v14;
  CFArrayRef v15;
  const __CFArray *v16;
  CFArrayRef v17;
  CFArrayRef v18;

  if (this)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(a2, 0, 0, 0, 2);
    CFRetain(this);
    applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v18, this);
    Count = v18;
    v15 = v18;
    v16 = 0;
    if (v18)
      Count = (CFArrayRef)CFArrayGetCount(v18);
    v6 = 0;
    v17 = Count;
    while (1)
    {
      v7 = v18;
      if (v18)
      {
        v8 = CFArrayGetCount(v18);
        v6 = v16;
      }
      else
      {
        v8 = 0;
      }
      if (!v15 || v6 == v17)
        break;
      if (v15 == v7 && v6 == (CFArrayRef)v8)
        break;
      applesauce::CF::ArrayRef_iterator<applesauce::CF::TypeRef>::operator->((uint64_t)&v15, &cf);
      OS::CF::ToJSON(&v13, (OS::CF *)cf, v11);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::push_back(a2, (uint64_t)&v13);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v13);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v14, v13);
      if (cf)
        CFRelease(cf);
      v6 = (const __CFArray *)((char *)v16 + 1);
      v16 = (const __CFArray *)((char *)v16 + 1);
    }
    if (v18)
      CFRelease(v18);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  }
}

{
  void *v5;
  _BOOL4 v6;
  CFTypeRef v8;
  uint64_t *v9;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  CFTypeRef v14;
  CFTypeRef v15;
  char v16;
  CFTypeRef v17;
  CFTypeRef cf;
  std::string v19;
  void *v20;
  void *__p;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  void *v27;
  void *v28;
  CFDictionaryRef v29;

  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  if (this)
  {
    CFRetain(this);
    applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v29, this);
    applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::DictionaryRef_iterator((uint64_t)&v23, v29);
    while (1)
    {
      applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::DictionaryRef_iterator((uint64_t)&v19, v29);
      v5 = (void *)v19.__r_.__value_.__r.__words[2];
      v19.__r_.__value_.__l.__size_ = (int64_t)((int64_t)v20 - v19.__r_.__value_.__r.__words[2]) >> 3;
      v6 = !v23
        || v24 == (v26 - v25) >> 3
        || v23 == v19.__r_.__value_.__r.__words[0]
        && v24 == (int64_t)((int64_t)v20 - v19.__r_.__value_.__r.__words[2]) >> 3;
      if (__p)
      {
        v22 = __p;
        operator delete(__p);
        v5 = (void *)v19.__r_.__value_.__r.__words[2];
      }
      if (v5)
      {
        v20 = v5;
        operator delete(v5);
      }
      if (v6)
        break;
      applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::operator->(&v23, &v17);
      v8 = v17;
      std::string::basic_string[abi:ne180100]<0>(&v14, "bad_key");
      applesauce::CF::convert_or<std::string>((CFTypeID)v8, (uint64_t)&v14, &v19);
      if (v16 < 0)
        operator delete((void *)v14);
      if (cf)
        CFRelease(cf);
      if (v17)
        CFRelease(v17);
      applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::operator->(&v23, &v14);
      OS::CF::ToJSON(&v12, (__CFString *)v15);
      v9 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]((unsigned __int8 *)a2, (void **)&v19.__r_.__value_.__l.__data_);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v12);
      v10 = *(_BYTE *)v9;
      *(_BYTE *)v9 = v12;
      LOBYTE(v12) = v10;
      v11 = (uint64_t *)v9[1];
      v9[1] = (uint64_t)v13;
      v13 = v11;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v12);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v13, v12);
      if (v15)
        CFRelease(v15);
      if (v14)
        CFRelease(v14);
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
      ++v24;
    }
    if (v27)
    {
      v28 = v27;
      operator delete(v27);
    }
    if (v25)
    {
      v26 = v25;
      operator delete(v25);
    }
    if (v29)
      CFRelease(v29);
  }
}

void sub_1C8967CD4(_Unwind_Exception *a1)
{
  uint64_t **v1;

  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(v1);
  _Unwind_Resume(a1);
}

void applesauce::CF::ArrayRef_iterator<applesauce::CF::TypeRef>::operator->(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  CFTypeRef cf;

  applesauce::CF::details::at_to<applesauce::CF::TypeRef>(*(const __CFArray **)a1, *(_QWORD *)(a1 + 8), &cf);
  applesauce::CF::ArrayRef_iterator<applesauce::CF::TypeRef>::iterator_proxy::iterator_proxy(a2, &cf);
  if (cf)
    CFRelease(cf);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::push_back(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t result;
  nlohmann::detail::exception *exception;
  char *v9;
  std::string v10;
  std::string v11;

  if (*(_BYTE *)a1)
  {
    if (*(_BYTE *)a1 != 2)
    {
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      v9 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
      std::string::basic_string[abi:ne180100]<0>(&v10, v9);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use push_back() with ", &v10, &v11);
      nlohmann::detail::type_error::create(308, (uint64_t)&v11, exception);
    }
  }
  else
  {
    *(_BYTE *)a1 = 2;
    v4 = operator new(0x18uLL);
    v4[1] = 0;
    v4[2] = 0;
    *v4 = 0;
    *(_QWORD *)(a1 + 8) = v4;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  }
  v5 = *(uint64_t **)(a1 + 8);
  v6 = v5[1];
  if (v6 >= v5[2])
  {
    result = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v5, a2);
  }
  else
  {
    *(_BYTE *)v6 = *(_BYTE *)a2;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(a2 + 8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
    *(_BYTE *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
    result = v6 + 16;
  }
  v5[1] = result;
  return result;
}

void sub_1C8967E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

CFTypeRef applesauce::CF::details::at_to<applesauce::CF::TypeRef>@<X0>(const __CFArray *a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  const void *ValueAtIndex;
  const void *v7;
  CFTypeRef result;
  applesauce::CF *exception;

  if (!a1 || CFArrayGetCount(a1) <= a2 || (ValueAtIndex = CFArrayGetValueAtIndex(a1, a2), (v7 = ValueAtIndex) == 0))
  {
    exception = (applesauce::CF *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }
  result = CFRetain(ValueAtIndex);
  *a3 = v7;
  return result;
}

void sub_1C8967F64()
{
  void *v0;

}

void sub_1C8967F88(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *applesauce::CF::ArrayRef_iterator<applesauce::CF::TypeRef>::iterator_proxy::iterator_proxy(_QWORD *a1, CFTypeRef *a2)
{
  CFTypeRef v3;

  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  *a1 = v3;
  return a1;
}

void sub_1C89681F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t **v21;

  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(v21);
  _Unwind_Resume(a1);
}

void applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::operator->(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  CFTypeRef v3;
  CFTypeRef cf;

  applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::dereference(a1, &v3);
  std::pair<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::pair[abi:ne180100](a2, (uint64_t)&v3);
  if (cf)
    CFRelease(cf);
  if (v3)
    CFRelease(v3);
}

_QWORD *applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::dereference@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::logic_error *exception;

  v3 = result[1];
  if ((v3 & 0x8000000000000000) != 0 || (v4 = result, v5 = result[2], v3 >= (result[3] - v5) >> 3))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "DictionaryRef_iterator iterator out of range.");
  }
  v6 = *(_QWORD *)(v5 + 8 * v3);
  if (v6)
  {
    result = CFRetain(*(CFTypeRef *)(v5 + 8 * v3));
    v3 = v4[1];
  }
  v7 = v4[5];
  v8 = *(_QWORD *)(v7 + 8 * v3);
  if (v8)
    result = CFRetain(*(CFTypeRef *)(v7 + 8 * v3));
  *a2 = v6;
  a2[1] = v8;
  return result;
}

void sub_1C8968374(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void OS::CF::ToJSON(uint64_t *__return_ptr a1@<X8>, __CFString *this@<X0>)
{
  CFTypeID v5;
  const __CFDictionary *v6;
  uint64_t i;
  CFTypeID v8;
  _BYTE v9[16];
  _BYTE *v10;
  char v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t *v14[2];
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (this)
  {
    v5 = CFGetTypeID(this);
    v8 = v5;
    if (v5 == CFBooleanGetTypeID())
    {
      OS::CF::ToJSON((OS::CF *)this, (uint64_t)a1);
    }
    else if (v5 == CFNumberGetTypeID())
    {
      OS::CF::ToJSON((OS::CF *)this, (uint64_t)a1);
    }
    else if (v5 == CFStringGetTypeID())
    {
      OS::CF::ToJSON(this, (uint64_t)a1);
    }
    else if (v5 == CFArrayGetTypeID())
    {
      OS::CF::ToJSON((OS::CF *)this, (uint64_t)a1);
    }
    else if (v5 == CFDictionaryGetTypeID())
    {
      OS::CF::ToJSON((OS::CF *)this, v6);
    }
    else
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[32],char [32],0>((uint64_t)v9, "Unsupported CoreFoundation type");
      v10 = v9;
      v11 = 1;
      nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::json_ref<unsigned long const&,0>((uint64_t)v12, (uint64_t *)&v8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v13, (uint64_t)v9, 2, 1, 2);
      v14[1] = (uint64_t *)v13;
      v15 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)a1, (uint64_t)v13, 1, 1, 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v14, v13[0]);
      for (i = 0; i != -64; i -= 32)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v12[i]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v12[i + 8], v12[i]);
      }
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    a1[1] = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a1);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a1);
  }
}

void sub_1C8968624(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t i;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)va1);
  for (i = 32; i != -32; i -= 32)
    nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)(va + i));
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::DictionaryRef_iterator(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t v3;
  CFIndex Count;

  *(_QWORD *)a1 = theDict;
  *(_OWORD *)(a1 + 40) = 0u;
  v3 = a1 + 40;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  if (theDict)
  {
    Count = CFDictionaryGetCount(theDict);
    std::vector<void const*>::resize(a1 + 16, Count);
    std::vector<void const*>::resize(v3, Count);
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)a1, *(const void ***)(a1 + 16), *(const void ***)(a1 + 40));
  }
  return a1;
}

void std::vector<void const*>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<void const*>::__append((void **)a1, a2 - v2);
  }
}

void std::vector<void const*>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<as::server::ObjectDescription>>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

uint64_t *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](unsigned __int8 *a1, void **a2)
{
  int v4;
  _QWORD *v5;
  uint64_t **v6;
  nlohmann::detail::exception *exception;
  char *v9;
  std::string v10;
  std::string v11;

  v4 = *a1;
  if (!*a1)
  {
    *a1 = 1;
    v5 = operator new(0x18uLL);
    v5[2] = 0;
    v5[1] = 0;
    *v5 = v5 + 1;
    *((_QWORD *)a1 + 1) = v5;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a1);
    v4 = *a1;
  }
  if (v4 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v9 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
    std::string::basic_string[abi:ne180100]<0>(&v10, v9);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use operator[] with a string argument with ", &v10, &v11);
    nlohmann::detail::type_error::create(305, (uint64_t)&v11, exception);
  }
  v6 = (uint64_t **)*((_QWORD *)a1 + 1);
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  return std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v11)+ 7;
}

void sub_1C8968920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

void applesauce::CF::convert_or<std::string>(CFTypeID a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  void *__p[2];
  std::string::size_type v6;
  char v7;

  applesauce::CF::convert_as<std::string,0>(a1, (uint64_t)__p);
  if (v7)
  {
    if (SHIBYTE(v6) < 0)
    {
      std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      if (v7)
      {
        if (SHIBYTE(v6) < 0)
          operator delete(__p[0]);
      }
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      a3->__r_.__value_.__r.__words[2] = v6;
    }
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
  }
}

CFTypeID applesauce::CF::convert_as<std::string,0>@<X0>(CFTypeID result@<X0>, uint64_t a2@<X8>)
{
  const __CFString *v3;
  CFTypeID TypeID;
  __int128 v5;
  uint64_t v6;

  if (result
    && (v3 = (const __CFString *)result, TypeID = CFStringGetTypeID(), result = CFGetTypeID(v3), TypeID == result))
  {
    result = (CFTypeID)applesauce::CF::details::CFString_get_value<false>(v3, (uint64_t)&v5);
    *(_OWORD *)a2 = v5;
    *(_QWORD *)(a2 + 16) = v6;
    *(_BYTE *)(a2 + 24) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }
  return result;
}

_QWORD *applesauce::CF::details::CFString_get_value<false>@<X0>(const __CFString *a1@<X0>, uint64_t a2@<X8>)
{
  char *CStringPtr;
  CFIndex Length;
  UInt8 *v7;
  CFIndex maxBufLen;
  CFRange v9;
  CFRange v10;

  CStringPtr = (char *)CFStringGetCStringPtr(a1, 0x8000100u);
  if (CStringPtr)
    return std::string::basic_string[abi:ne180100]<0>((_QWORD *)a2, CStringPtr);
  Length = CFStringGetLength(a1);
  maxBufLen = 0;
  v9.location = 0;
  v9.length = Length;
  CFStringGetBytes(a1, v9, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
  std::string::basic_string[abi:ne180100]((_QWORD *)a2, maxBufLen, 0);
  if (*(char *)(a2 + 23) >= 0)
    v7 = (UInt8 *)a2;
  else
    v7 = *(UInt8 **)a2;
  v10.location = 0;
  v10.length = Length;
  return (_QWORD *)CFStringGetBytes(a1, v10, 0x8000100u, 0, 0, v7, maxBufLen, &maxBufLen);
}

void OS::CF::ToJSON(const __CFString *this@<X0>, uint64_t a2@<X8>)
{
  void *__p[2];
  char v5;

  if (this)
  {
    applesauce::CF::convert_to<std::string,0>(this, (uint64_t)__p);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>(a2, (uint64_t)__p);
    if (v5 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  }
}

void sub_1C8968BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  v4 = operator new(0x18uLL);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  v4[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 8) = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *applesauce::CF::details::CFString_get_value<true>@<X0>(const __CFString *a1@<X0>, uint64_t a2@<X8>)
{
  char *CStringPtr;
  CFIndex Length;
  UInt8 *v7;
  CFIndex maxBufLen;
  CFRange v9;
  CFRange v10;

  CStringPtr = (char *)CFStringGetCStringPtr(a1, 0x8000100u);
  if (CStringPtr)
    return std::string::basic_string[abi:ne180100]<0>((_QWORD *)a2, CStringPtr);
  Length = CFStringGetLength(a1);
  maxBufLen = 0;
  v9.location = 0;
  v9.length = Length;
  CFStringGetBytes(a1, v9, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
  std::string::basic_string[abi:ne180100]((_QWORD *)a2, maxBufLen, 0);
  if (*(char *)(a2 + 23) >= 0)
    v7 = (UInt8 *)a2;
  else
    v7 = *(UInt8 **)a2;
  v10.location = 0;
  v10.length = Length;
  return (_QWORD *)CFStringGetBytes(a1, v10, 0x8000100u, 0, 0, v7, maxBufLen, &maxBufLen);
}

void sub_1C8968D44(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *applesauce::CF::convert_to<std::string,0>@<X0>(const __CFString *a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeID TypeID;
  applesauce::CF *exception;

  if (!a1 || (TypeID = CFStringGetTypeID(), TypeID != CFGetTypeID(a1)))
  {
    exception = (applesauce::CF *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
  }
  return applesauce::CF::details::CFString_get_value<true>(a1, a2);
}

void sub_1C8968DC0()
{
  void *v0;

}

void sub_1C8968DD8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t OS::CF::ToJSON@<X0>(OS::CF *this@<X0>, uint64_t a2@<X8>)
{
  double v5;
  const __CFBoolean *v6;

  if (this)
  {
    if (CFNumberIsFloatType(this))
    {
      v5 = applesauce::CF::convert_to<double,0>(this);
      *(_BYTE *)a2 = 7;
      *(double *)(a2 + 8) = v5;
    }
    else
    {
      v6 = applesauce::CF::convert_to<long long,0>(this);
      *(_BYTE *)a2 = 5;
      *(_QWORD *)(a2 + 8) = v6;
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
}

{
  _BOOL8 v4;

  if (this)
  {
    v4 = CFBooleanGetValue(this) != 0;
    *(_BYTE *)a2 = 4;
    *(_QWORD *)(a2 + 8) = v4;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
}

const __CFBoolean *applesauce::CF::convert_to<long long,0>(const __CFNumber *a1)
{
  const __CFBoolean *result;
  char v2;
  applesauce::CF *exception;

  result = applesauce::CF::convert_as<long long,0>(a1);
  if (!v2)
  {
    exception = (applesauce::CF *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
  }
  return result;
}

void sub_1C8968E94()
{
  void *v0;

}

void sub_1C8968EAC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const __CFBoolean *applesauce::CF::convert_as<long long,0>(const __CFNumber *a1)
{
  CFTypeID TypeID;

  if (a1 && (TypeID = CFNumberGetTypeID(), TypeID == CFGetTypeID(a1)))
    return (const __CFBoolean *)applesauce::CF::details::number_convert_as<long long>(a1);
  else
    return applesauce::CF::details::treat_as_BOOL_for_convert_as<long long>(a1);
}

unint64_t applesauce::CF::details::number_convert_as<long long>(const __CFNumber *a1)
{
  const __CFNumber *v2;
  CFNumberType v3;
  unint64_t v4;
  uint64_t v5;
  const __CFNumber *v6;
  CFNumberType v7;
  const __CFNumber *v8;
  CFNumberType v9;
  const __CFNumber *v10;
  CFNumberType v11;
  const __CFNumber *v12;
  CFNumberType v13;
  const __CFNumber *v14;
  CFNumberType v15;
  int Value;
  char v17;
  BOOL v18;
  unsigned __int8 v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  double valuePtr;

  switch(CFNumberGetType(a1))
  {
    case kCFNumberSInt8Type:
      LOBYTE(valuePtr) = 0;
      v2 = a1;
      v3 = kCFNumberSInt8Type;
      goto LABEL_10;
    case kCFNumberSInt16Type:
      LOWORD(valuePtr) = 0;
      v6 = a1;
      v7 = kCFNumberSInt16Type;
      goto LABEL_18;
    case kCFNumberSInt32Type:
      LODWORD(valuePtr) = 0;
      v8 = a1;
      v9 = kCFNumberSInt32Type;
      goto LABEL_20;
    case kCFNumberSInt64Type:
      valuePtr = 0.0;
      v10 = a1;
      v11 = kCFNumberSInt64Type;
      goto LABEL_31;
    case kCFNumberFloat32Type:
      LODWORD(valuePtr) = 0;
      v12 = a1;
      v13 = kCFNumberFloat32Type;
      goto LABEL_27;
    case kCFNumberFloat64Type:
      valuePtr = 0.0;
      v14 = a1;
      v15 = kCFNumberFloat64Type;
      goto LABEL_33;
    case kCFNumberCharType:
      LOBYTE(valuePtr) = 0;
      v2 = a1;
      v3 = kCFNumberCharType;
LABEL_10:
      Value = CFNumberGetValue(v2, v3, &valuePtr);
      if (Value)
        v17 = LOBYTE(valuePtr);
      else
        v17 = 0;
      if (Value != 0 && SLOBYTE(valuePtr) < 0)
        v4 = -256;
      else
        v4 = 0;
      LOBYTE(v5) = v17;
      return v5 | v4;
    case kCFNumberShortType:
      LOWORD(valuePtr) = 0;
      v6 = a1;
      v7 = kCFNumberShortType;
LABEL_18:
      v18 = CFNumberGetValue(v6, v7, &valuePtr) == 0;
      v19 = LOBYTE(valuePtr);
      v20 = SLOWORD(valuePtr);
      goto LABEL_21;
    case kCFNumberIntType:
      LODWORD(valuePtr) = 0;
      v8 = a1;
      v9 = kCFNumberIntType;
LABEL_20:
      v18 = CFNumberGetValue(v8, v9, &valuePtr) == 0;
      v19 = LOBYTE(valuePtr);
      v20 = SLODWORD(valuePtr);
LABEL_21:
      v21 = v20 & 0xFFFFFFFFFFFFFF00 | v19;
      if (v18)
        v5 = 0;
      else
        v5 = v21;
      goto LABEL_37;
    case kCFNumberLongType:
      valuePtr = 0.0;
      v10 = a1;
      v11 = kCFNumberLongType;
      goto LABEL_31;
    case kCFNumberLongLongType:
      valuePtr = 0.0;
      v10 = a1;
      v11 = kCFNumberLongLongType;
      goto LABEL_31;
    case kCFNumberFloatType:
      LODWORD(valuePtr) = 0;
      v12 = a1;
      v13 = kCFNumberFloatType;
LABEL_27:
      v22 = CFNumberGetValue(v12, v13, &valuePtr) == 0;
      v5 = (uint64_t)*(float *)&valuePtr;
      goto LABEL_34;
    case kCFNumberDoubleType:
      valuePtr = 0.0;
      v14 = a1;
      v15 = kCFNumberDoubleType;
      goto LABEL_33;
    case kCFNumberCFIndexType:
      valuePtr = 0.0;
      v10 = a1;
      v11 = kCFNumberCFIndexType;
      goto LABEL_31;
    case kCFNumberNSIntegerType:
      valuePtr = 0.0;
      v10 = a1;
      v11 = kCFNumberNSIntegerType;
LABEL_31:
      v22 = CFNumberGetValue(v10, v11, &valuePtr) == 0;
      v5 = *(_QWORD *)&valuePtr;
      goto LABEL_34;
    case kCFNumberCGFloatType:
      valuePtr = 0.0;
      v14 = a1;
      v15 = kCFNumberCGFloatType;
LABEL_33:
      v22 = CFNumberGetValue(v14, v15, &valuePtr) == 0;
      v5 = (uint64_t)valuePtr;
LABEL_34:
      if (v22)
        v5 = 0;
LABEL_37:
      v4 = v5 & 0xFFFFFFFFFFFFFF00;
      break;
    default:
      v4 = 0;
      LOBYTE(v5) = 0;
      break;
  }
  return v5 | v4;
}

applesauce::CF::DictionaryRef *applesauce::CF::DictionaryRef::DictionaryRef(applesauce::CF::DictionaryRef *this, CFTypeRef cf)
{
  CFTypeID v3;
  void *exception;

  *(_QWORD *)this = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFDictionaryGetTypeID())
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1CAA38B30](exception, "Could not construct");
    }
  }
  return this;
}

void sub_1C8969224(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

applesauce::CF::ArrayRef *applesauce::CF::ArrayRef::ArrayRef(applesauce::CF::ArrayRef *this, CFTypeRef cf)
{
  CFTypeID v3;
  void *exception;

  *(_QWORD *)this = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFArrayGetTypeID())
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1CAA38B30](exception, "Could not construct");
    }
  }
  return this;
}

void sub_1C89692D0(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[5]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[5]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1C896937C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double applesauce::CF::convert_to<double,0>(const __CFNumber *a1)
{
  const __CFBoolean *v1;
  char v2;
  applesauce::CF *exception;

  v1 = applesauce::CF::convert_as<double,0>(a1);
  if (!v2)
  {
    exception = (applesauce::CF *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
  }
  return *(double *)&v1;
}

void sub_1C89693CC()
{
  void *v0;

}

void sub_1C89693E4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const __CFBoolean *applesauce::CF::convert_as<double,0>(const __CFNumber *a1)
{
  CFTypeID TypeID;

  if (a1 && (TypeID = CFNumberGetTypeID(), TypeID == CFGetTypeID(a1)))
    return (const __CFBoolean *)applesauce::CF::details::number_convert_as<double>(a1);
  else
    return applesauce::CF::details::treat_as_BOOL_for_convert_as<double>(a1);
}

unint64_t applesauce::CF::details::number_convert_as<double>(const __CFNumber *a1)
{
  const __CFNumber *v2;
  CFNumberType v3;
  unint64_t v4;
  double v5;
  const __CFNumber *v6;
  CFNumberType v7;
  const __CFNumber *v8;
  CFNumberType v9;
  const __CFNumber *v10;
  CFNumberType v11;
  const __CFNumber *v12;
  CFNumberType v13;
  const __CFNumber *v14;
  CFNumberType v15;
  BOOL v16;
  int v17;
  double v18;
  uint64_t valuePtr;

  switch(CFNumberGetType(a1))
  {
    case kCFNumberSInt8Type:
      LOBYTE(valuePtr) = 0;
      v2 = a1;
      v3 = kCFNumberSInt8Type;
      goto LABEL_10;
    case kCFNumberSInt16Type:
      LOWORD(valuePtr) = 0;
      v6 = a1;
      v7 = kCFNumberSInt16Type;
      goto LABEL_12;
    case kCFNumberSInt32Type:
      LODWORD(valuePtr) = 0;
      v8 = a1;
      v9 = kCFNumberSInt32Type;
      goto LABEL_14;
    case kCFNumberSInt64Type:
      valuePtr = 0;
      v10 = a1;
      v11 = kCFNumberSInt64Type;
      goto LABEL_23;
    case kCFNumberFloat32Type:
      LODWORD(valuePtr) = 0;
      v12 = a1;
      v13 = kCFNumberFloat32Type;
      goto LABEL_19;
    case kCFNumberFloat64Type:
      valuePtr = 0;
      v14 = a1;
      v15 = kCFNumberFloat64Type;
      goto LABEL_31;
    case kCFNumberCharType:
      LOBYTE(valuePtr) = 0;
      v2 = a1;
      v3 = kCFNumberCharType;
LABEL_10:
      v16 = CFNumberGetValue(v2, v3, &valuePtr) == 0;
      v17 = (char)valuePtr;
      goto LABEL_15;
    case kCFNumberShortType:
      LOWORD(valuePtr) = 0;
      v6 = a1;
      v7 = kCFNumberShortType;
LABEL_12:
      v16 = CFNumberGetValue(v6, v7, &valuePtr) == 0;
      v17 = (__int16)valuePtr;
      goto LABEL_15;
    case kCFNumberIntType:
      LODWORD(valuePtr) = 0;
      v8 = a1;
      v9 = kCFNumberIntType;
LABEL_14:
      v16 = CFNumberGetValue(v8, v9, &valuePtr) == 0;
      v17 = valuePtr;
LABEL_15:
      v18 = (double)v17;
      goto LABEL_24;
    case kCFNumberLongType:
      valuePtr = 0;
      v10 = a1;
      v11 = kCFNumberLongType;
      goto LABEL_23;
    case kCFNumberLongLongType:
      valuePtr = 0;
      v10 = a1;
      v11 = kCFNumberLongLongType;
      goto LABEL_23;
    case kCFNumberFloatType:
      LODWORD(valuePtr) = 0;
      v12 = a1;
      v13 = kCFNumberFloatType;
LABEL_19:
      v16 = CFNumberGetValue(v12, v13, &valuePtr) == 0;
      v18 = *(float *)&valuePtr;
      goto LABEL_24;
    case kCFNumberDoubleType:
      valuePtr = 0;
      v14 = a1;
      v15 = kCFNumberDoubleType;
      goto LABEL_31;
    case kCFNumberCFIndexType:
      valuePtr = 0;
      v10 = a1;
      v11 = kCFNumberCFIndexType;
      goto LABEL_23;
    case kCFNumberNSIntegerType:
      valuePtr = 0;
      v10 = a1;
      v11 = kCFNumberNSIntegerType;
LABEL_23:
      v16 = CFNumberGetValue(v10, v11, &valuePtr) == 0;
      v18 = (double)valuePtr;
LABEL_24:
      v5 = v18;
      goto LABEL_25;
    case kCFNumberCGFloatType:
      valuePtr = 0;
      v14 = a1;
      v15 = kCFNumberCGFloatType;
LABEL_31:
      v16 = CFNumberGetValue(v14, v15, &valuePtr) == 0;
      v5 = *(double *)&valuePtr;
LABEL_25:
      if (v16)
        v5 = 0.0;
      v4 = *(_QWORD *)&v5 & 0xFFFFFFFFFFFFFF00;
      break;
    default:
      v4 = 0;
      LOBYTE(v5) = 0;
      break;
  }
  return LOBYTE(v5) | v4;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[3],char [3],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1C89696E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void as::server::ConstAudioSessionInfo::SetAuditToken(as::server::ConstAudioSessionInfo *this, const audit_token_t *a2)
{
  CFDataRef v2;
  applesauce::CF::DataRef *v3;
  uint64_t v4;
  NSObject *v5;
  CFTypeRef cf;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = CFDataCreate(0, (const UInt8 *)a2, 32);
  v3 = applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&cf, v2);
  if (cf)
  {
    if (MXSessionSetProperty())
    {
      v4 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v4);
    }
  }
  else
  {
    v5 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v3));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v8 = "AudioSessionInfo.mm";
      v9 = 1024;
      v10 = 593;
      _os_log_impl(&dword_1C895C000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid client token", buf, 0x12u);
    }
  }
  if (cf)
    CFRelease(cf);
}

void sub_1C8969808(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::DataRef::~DataRef((const void **)va);
  _Unwind_Resume(a1);
}

void BaseOpaqueObject::BaseOpaqueObject(BaseOpaqueObject *this)
{
  OpaqueObjectMgr *v2;

  *(_QWORD *)this = off_1E82054E8;
  v2 = (OpaqueObjectMgr *)OpaqueObjectMgrInstance();
  *((_DWORD *)this + 2) = OpaqueObjectMgr::add(v2, this);
}

void CAX4CCString::CAX4CCString(CAX4CCString *this, unsigned int a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v4 = bswap32(a2);
  *(_DWORD *)((char *)this + 1) = v4;
  v5 = MEMORY[0x1E0C80978];
  if ((v4 & 0x80) != 0)
  {
    if (!__maskrune((char)v4, 0x40000uLL))
      goto LABEL_17;
  }
  else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * (char)v4 + 60) & 0x40000) == 0)
  {
    goto LABEL_17;
  }
  v6 = *((char *)this + 2);
  if ((v6 & 0x80000000) != 0)
  {
    if (!__maskrune(v6, 0x40000uLL))
      goto LABEL_17;
  }
  else if ((*(_DWORD *)(v5 + 4 * v6 + 60) & 0x40000) == 0)
  {
    goto LABEL_17;
  }
  v7 = *((char *)this + 3);
  if ((v7 & 0x80000000) != 0)
  {
    if (!__maskrune(v7, 0x40000uLL))
      goto LABEL_17;
LABEL_13:
    v8 = *((char *)this + 4);
    if ((v8 & 0x80000000) != 0)
    {
      if (!__maskrune(v8, 0x40000uLL))
        goto LABEL_17;
    }
    else if ((*(_DWORD *)(v5 + 4 * v8 + 60) & 0x40000) == 0)
    {
      goto LABEL_17;
    }
    *(_WORD *)((char *)this + 5) = 39;
    *(_BYTE *)this = 39;
    return;
  }
  if ((*(_DWORD *)(v5 + 4 * v7 + 60) & 0x40000) != 0)
    goto LABEL_13;
LABEL_17:
  if (a2 + 199999 > 0x61A7E)
    snprintf((char *)this, 0x10uLL, "0x%x");
  else
    snprintf((char *)this, 0x10uLL, "%d");
}

applesauce::CF::DataRef *applesauce::CF::DataRef::DataRef(applesauce::CF::DataRef *this, CFTypeRef cf)
{
  CFTypeID v3;
  void *exception;

  *(_QWORD *)this = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFDataGetTypeID())
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1CAA38B30](exception, "Could not construct");
    }
  }
  return this;
}

void sub_1C8969A20(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

uint64_t OpaqueObjectMgrInstance(void)
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&OpaqueObjectMgrInstance(void)::onceflag);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&OpaqueObjectMgrInstance(void)::onceflag, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OpaqueObjectMgrInstance(void)::$_0 &&>>);
  }
  return OpaqueObjectMgr::sInstance;
}

as::server *as::server::ConstAudioSessionInfo::SetSecurityTask(as::server *this, __SecTask *a2)
{
  NSObject *v3;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  __SecTask *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v3 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(this));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      v4 = 136315650;
      v5 = "AudioSessionInfo.mm";
      v6 = 1024;
      v7 = 575;
      v8 = 2112;
      v9 = a2;
      _os_log_impl(&dword_1C895C000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d setting SecTaskRef: %@", (uint8_t *)&v4, 0x1Cu);
    }
    this = (as::server *)MXSessionSetProperty();
    if ((_DWORD)this)
      as::server::ConstAudioSessionInfo::CreateCMSession();
  }
  return this;
}

uint64_t nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::json_ref<unsigned long const&,0>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = *a2;
  *(_BYTE *)a1 = 6;
  *(_QWORD *)(a1 + 8) = v3;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  *(_QWORD *)(a1 + 16) = a1;
  *(_BYTE *)(a1 + 24) = 1;
  return a1;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[32],char [32],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[32]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[32]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1C8969C68(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C8969D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1C896A104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, id a17, char a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  void *v31;
  id *v32;

  objc_destroyWeak(v32);

  as::server::ProcessInfo::~ProcessInfo(&__p);
  _Unwind_Resume(a1);
}

void as::CreateFixedPriorityDispatchQueue(const void **a1@<X0>, dispatch_qos_class_t a2@<W2>, id *a3@<X8>)
{
  size_t v6;
  void **v7;
  const void *v8;
  void **v9;
  NSObject *inactive;
  NSObject *v11;
  NSObject *v12;
  const char *v13;
  NSObject *v14;
  NSObject *v15;
  void *__p[2];
  char v17;

  if (*((char *)a1 + 23) >= 0)
    v6 = *((unsigned __int8 *)a1 + 23);
  else
    v6 = (size_t)a1[1];
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v6 + 5);
  if (v17 >= 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if (v6)
  {
    if (*((char *)a1 + 23) >= 0)
      v8 = a1;
    else
      v8 = *a1;
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, " (WL)");
  if (v17 >= 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  inactive = dispatch_workloop_create_inactive((const char *)v9);
  dispatch_workloop_set_scheduler_priority();
  dispatch_activate(inactive);
  dispatch_queue_attr_make_initially_inactive(0);
  v11 = objc_claimAutoreleasedReturnValue();
  dispatch_queue_attr_make_with_autorelease_frequency(v11, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v12 = objc_claimAutoreleasedReturnValue();

  if (*((char *)a1 + 23) >= 0)
    v13 = (const char *)a1;
  else
    v13 = (const char *)*a1;
  *a3 = dispatch_queue_create_with_target_V2(v13, v12, inactive);
  applesauce::dispatch::v1::queue::operator*(a3);
  v14 = objc_claimAutoreleasedReturnValue();
  dispatch_set_qos_class_floor(v14, a2, 0);

  applesauce::dispatch::v1::queue::operator*(a3);
  v15 = objc_claimAutoreleasedReturnValue();
  dispatch_activate(v15);

  if (v17 < 0)
    operator delete(__p[0]);
}

void sub_1C896A360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  id *v14;
  void *v15;
  void *v16;

  applesauce::dispatch::v1::queue::~queue(v14);

  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1C896A6A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id location, id a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  void *v23;
  void *v24;
  void *v25;

  objc_destroyWeak(&location);
  objc_destroyWeak(&a12);

  _Unwind_Resume(a1);
}

void sub_1C896A7DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  os_unfair_lock_s *v3;

  os_unfair_lock_unlock(v3);

  _Unwind_Resume(a1);
}

void sub_1C896A94C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void as::server::LegacySessionManager::RemoveApplicationForInvalidatedXPCConnection(as::server::LegacySessionManager *this, NSXPCConnection *a2)
{
  NSXPCConnection *v3;
  uint64_t *v4;
  char *v5;
  _BOOL8 v6;
  char *v7;
  char *v8;
  BOOL v9;
  NSObject *v10;
  os_unfair_lock_s *v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  os_unfair_lock_s *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  os_unfair_lock_lock((os_unfair_lock_t)this);
  v4 = (uint64_t *)*((_QWORD *)this + 4);
  v5 = (char *)this + 40;
  if (v4 == (uint64_t *)((char *)this + 40))
    goto LABEL_15;
  while (1)
  {
    v6 = as::server::AudioApplicationInfo::HandleXPCConnectionInvalidated((as::server::AudioApplicationInfo *)v4[9], v3);
    if (v6)
      break;
    v7 = (char *)v4[1];
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = *(char **)v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        v8 = (char *)v4[2];
        v9 = *(_QWORD *)v8 == (_QWORD)v4;
        v4 = (uint64_t *)v8;
      }
      while (!v9);
    }
    v4 = (uint64_t *)v8;
    if (v8 == v5)
      goto LABEL_14;
  }
  if (v4 != (uint64_t *)v5)
  {
    v10 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v6));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = as::server::AudioApplicationInfo::DebugString((os_unfair_lock_s *)v4[9]);
      v12 = 136315650;
      v13 = "ServerSessionManager.mm";
      v14 = 1024;
      v15 = 904;
      v16 = 2080;
      v17 = v11;
      _os_log_impl(&dword_1C895C000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Removing audio application since all owning remote clients gone (app: %s)", (uint8_t *)&v12, 0x1Cu);
    }

    std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::__remove_node_pointer((uint64_t **)this + 4, v4);
    std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)(v4 + 9));
    operator delete(v4);
  }
LABEL_14:
  if (this)
LABEL_15:
    os_unfair_lock_unlock((os_unfair_lock_t)this);

}

void sub_1C896AB00(_Unwind_Exception *a1)
{
  void *v1;
  os_unfair_lock_s *v2;
  void *v3;

  if (v2)
    os_unfair_lock_unlock(v2);

  _Unwind_Resume(a1);
}

BOOL as::server::AudioApplicationInfo::HandleXPCConnectionInvalidated(as::server::AudioApplicationInfo *this, NSXPCConnection *a2)
{
  os_unfair_lock_s *v2;
  as::server::AudioAppInfoImpl *v3;
  NSXPCConnection *v4;
  _BOOL8 v5;

  v2 = (os_unfair_lock_s *)((char *)this + 16);
  v3 = (as::server::AudioApplicationInfo *)((char *)this + 24);
  v4 = a2;
  os_unfair_lock_lock(v2);
  v5 = as::server::AudioAppInfoImpl::HandleXPCConnectionInvalidated(v3, v4);

  os_unfair_lock_unlock(v2);
  return v5;
}

void sub_1C896AB8C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

BOOL as::server::AudioAppInfoImpl::HandleXPCConnectionInvalidated(as::server::AudioAppInfoImpl *this, NSXPCConnection *a2)
{
  NSXPCConnection *v3;
  _QWORD *v4;
  uint64_t v5;
  NSXPCConnection *v6;
  NSXPCConnection *v7;
  as::server::AudioAppInfoImpl *v8;
  char *v9;
  NSXPCConnection *v10;
  _BOOL4 v11;
  as::server *v12;
  as::server::AudioAppInfoImpl *v13;
  as::server::AudioAppInfoImpl *v14;
  BOOL v15;
  NSObject *v16;
  _QWORD *v17;
  uint64_t v18;
  _BOOL8 v20;
  uint64_t v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  NSXPCConnection *v28;
  __int16 v29;
  _QWORD *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (_QWORD *)((char *)this + 136);
  v5 = *((_QWORD *)this + 17);
  v6 = v3;
  v7 = v6;
  v8 = (as::server::AudioAppInfoImpl *)*((_QWORD *)this + 14);
  if (v8 == (as::server::AudioAppInfoImpl *)((char *)this + 120))
  {

LABEL_24:
    v20 = 0;
    goto LABEL_25;
  }
  v22 = *((_QWORD *)this + 16);
  do
  {
    v9 = (char *)v8 + 40;
    as::server::AudioAppRemoteClient::GetXPCConnection(*((id **)v8 + 5));
    v10 = (NSXPCConnection *)objc_claimAutoreleasedReturnValue();
    v11 = v10 == v7;

    if (v11)
    {
      v16 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v12));
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        v17 = (_QWORD *)(*(_QWORD *)v9 + 176);
        if (*(char *)(*(_QWORD *)v9 + 199) < 0)
          v17 = (_QWORD *)*v17;
        *(_DWORD *)buf = 136315906;
        v24 = "AudioApplicationInfoImpl.mm";
        v25 = 1024;
        v26 = 296;
        v27 = 2112;
        v28 = v7;
        v29 = 2080;
        v30 = v17;
        _os_log_impl(&dword_1C895C000, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Removing audio app client due to invalidated xpc connection: %@ { %s }", buf, 0x26u);
      }
      if (*(_QWORD *)v9 == *v4)
        std::shared_ptr<as::server::AudioAppRemoteClient>::reset[abi:ne180100]((_QWORD *)this + 17);
      v14 = (as::server::AudioAppInfoImpl *)std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::__remove_node_pointer((uint64_t **)this + 14, (uint64_t *)v8);
      std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)v8 + 40);
      operator delete(v8);
    }
    else
    {
      v13 = (as::server::AudioAppInfoImpl *)*((_QWORD *)v8 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(as::server::AudioAppInfoImpl **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (as::server::AudioAppInfoImpl *)*((_QWORD *)v8 + 2);
          v15 = *(_QWORD *)v14 == (_QWORD)v8;
          v8 = v14;
        }
        while (!v15);
      }
    }
    v8 = v14;
  }
  while (v14 != (as::server::AudioAppInfoImpl *)((char *)this + 120));
  v18 = *((_QWORD *)this + 16);

  if (v22 == v18 || v5 == 0)
    goto LABEL_24;
  v20 = *v4 == 0;
LABEL_25:

  return v20;
}

void sub_1C896ADC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id as::server::AudioAppRemoteClient::GetXPCConnection(id *this)
{
  std::mutex *v2;
  id v3;

  v2 = (std::mutex *)(this + 2);
  std::mutex::lock((std::mutex *)(this + 2));
  v3 = this[14];
  std::mutex::unlock(v2);
  return v3;
}

void as::server::LegacySessionManager::RemoveSessionsForInvalidatedXPCConnection(os_unfair_lock_s *this, NSXPCConnection *a2)
{
  NSXPCConnection *v3;
  void ***v4;
  void ***v5;
  void **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v12[3];
  void **v13[3];

  v3 = a2;
  as::server::LegacySessionManager::FindSessionsForConnection(this, v3, (uint64_t)v12);
  v4 = (void ***)v12[0];
  v5 = (void ***)v12[1];
  while (v4 != v5)
  {
    v6 = *v4;
    v7 = (std::__shared_weak_count *)v4[1];
    v13[0] = *v4;
    v13[1] = (void **)&v7->__vftable;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    as::server::LegacySessionManager::RemoveSession((as::server::LegacySessionManager *)this, *((_DWORD *)v6 + 2), (const as::server::ProcessIdentity *)((char *)v6 + 12));
    if (v7)
    {
      v10 = (unint64_t *)&v7->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v4 += 2;
  }
  v13[0] = (void **)v12;
  std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100](v13);

}

void sub_1C896AEF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void as::server::LegacySessionManager::FindSessionsForConnection(os_unfair_lock_s *this@<X0>, NSXPCConnection *a2@<X1>, uint64_t a3@<X8>)
{
  NSXPCConnection *v5;
  uint64_t *v6;
  uint64_t *v7;
  NSXPCConnection *v8;
  NSXPCConnection *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;

  v5 = a2;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  os_unfair_lock_lock(this);
  v6 = *(uint64_t **)&this[2]._os_unfair_lock_opaque;
  v7 = *(uint64_t **)&this[4]._os_unfair_lock_opaque;
  v8 = v5;
  v9 = v8;
  if (v6 == v7)
  {

LABEL_16:
    os_unfair_lock_unlock(this);
    goto LABEL_17;
  }
  do
  {
    v10 = *v6;
    v11 = v6[1];
    *(_QWORD *)&v17 = *v6;
    *((_QWORD *)&v17 + 1) = v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    if (*(NSXPCConnection **)(v10 + 256) == v9)
      std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::push_back[abi:ne180100]((char **)a3, &v17);
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
    if (*((_QWORD *)&v17 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v6 += 2;
  }
  while (v6 != v7);

  if (this)
    goto LABEL_16;
LABEL_17:

}

void sub_1C896B020(_Unwind_Exception *a1, uint64_t a2, ...)
{
  os_unfair_lock_s *v2;
  void *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)va);

  if (v2)
    os_unfair_lock_unlock(v2);
  std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);

  _Unwind_Resume(a1);
}

void sub_1C896B0B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  void *v10;

  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c176_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorjU8__strongPU24objcproto13OS_xpc_object8NSObjectjjEEEU13block_pointerFvDpT_ESD_iEUlS4_jS8_jjE_(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  result = MEMORY[0x1CAA39148](*(_QWORD *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_1C896B204(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t as::server::DeviceTimeObserver::createDevice(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  as::server::DeviceTimeObserver *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *exception;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  void *v46;
  _BYTE v47[24];
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  _QWORD v51[2];

  v5 = (as::server::DeviceTimeObserver *)a1;
  v7 = a1[6];
  v8 = a1[7];
  v6 = a1 + 6;
  if (v7 != v8)
  {
    while (1)
    {
      a1 = (uint64_t *)applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((CFTypeRef *)(v7 + 8), (const __CFString **)(a2 + 8));
      if (!a1 || *(_DWORD *)v7 == *(_DWORD *)a2)
        break;
      v7 += 96;
      if (v7 == v8)
      {
        v7 = v8;
        break;
      }
    }
    if (v7 != *((_QWORD *)v5 + 7))
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1CAA38B30](exception, "DeviceTimeObserver: duplicate DeviceKey");
    }
  }
  v9 = *(_QWORD *)v5;
  v10 = *((_QWORD *)v5 + 1);
  if (*(_QWORD *)v5 != v10)
  {
    v11 = *(_QWORD *)v5;
    while (2)
    {
      v12 = 0;
      v13 = v11 + 40;
      do
      {
        v14 = *(_QWORD *)(v13 + 8 * (v12 >> 6));
        if (((1 << v12) & v14) == 0)
        {
          *(_QWORD *)(v13 + 8 * (v12 >> 6)) = (1 << v12) | v14;
          goto LABEL_31;
        }
        ++v12;
      }
      while (v12 != 66);
      v11 += 128;
      if (v11 != v10)
        continue;
      break;
    }
  }
  v15 = (uint64_t)(v10 - v9) >> 7;
  v16 = *((_QWORD *)v5 + 2);
  if (v10 >= v16)
  {
    v18 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 57)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v19 = v16 - v9;
    if (v19 >> 6 > v18)
      v18 = v19 >> 6;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFF80)
      v20 = 0x1FFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    *(_QWORD *)v47 = (char *)v5 + 16;
    if (v20)
      v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<as::server::DeviceTimeObserver::SharedBlockOwner>>((uint64_t)v5 + 16, v20);
    else
      v21 = 0;
    *(_QWORD *)&v44 = v21;
    *((_QWORD *)&v44 + 1) = &v21[128 * v15];
    v46 = &v21[128 * v20];
    as::server::DeviceTimeObserver::SharedBlockOwner::SharedBlockOwner(*((as::server::DeviceTimeObserver::SharedBlockOwner **)&v44 + 1), v5, v15);
    v45 = *((_QWORD *)&v44 + 1) + 128;
    std::vector<as::server::DeviceTimeObserver::SharedBlockOwner>::__swap_out_circular_buffer((uint64_t *)v5, &v44);
    v17 = *((_QWORD *)v5 + 1);
    a1 = (uint64_t *)std::__split_buffer<as::server::DeviceTimeObserver::SharedBlockOwner>::~__split_buffer((uint64_t)&v44);
  }
  else
  {
    a1 = (uint64_t *)as::server::DeviceTimeObserver::SharedBlockOwner::SharedBlockOwner(*((as::server::DeviceTimeObserver::SharedBlockOwner **)v5 + 1), v5, (uint64_t)(v10 - v9) >> 7);
    v17 = v10 + 128;
    *((_QWORD *)v5 + 1) = v17;
  }
  v12 = 0;
  *((_QWORD *)v5 + 1) = v17;
  v11 = v17 - 128;
  v22 = v17 - 88;
  while (1)
  {
    v23 = *(_QWORD *)(v22 + 8 * (v12 >> 6));
    if (((1 << v12) & v23) == 0)
      break;
    if (++v12 == 66)
      as::server::DeviceTimeObserver::createDevice();
  }
  *(_QWORD *)(v22 + 8 * (v12 >> 6)) = (1 << v12) | v23;
LABEL_31:
  v51[0] = v11;
  v51[1] = v12;
  v24 = 66 * *(_QWORD *)(v11 + 8) + v12;
  if (v24 >= 0x100)
    gsl::details::terminate((gsl::details *)a1);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v5 + 7) - *((_QWORD *)v5 + 6)) >> 5) <= v24)
    std::vector<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>>::resize(v6, v24 + 1);
  _ZNSt3__115allocate_sharedB8ne180100IN2as6server18DeviceTimeObserver8TimeInfoENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v42);
  *(_OWORD *)v47 = 0uLL;
  v25 = v42;
  v48 = 0u;
  LODWORD(v44) = *(_DWORD *)a2;
  *((_QWORD *)&v44 + 1) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  LOBYTE(v45) = *(_BYTE *)(a2 + 16);
  v46 = 0;
  v49 = v25;
  v43 = 0;
  v42 = 0uLL;
  v26 = *((_QWORD *)v5 + 6);
  v27 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v5 + 7) - v26) >> 5);
  *(_QWORD *)&v47[16] = 0;
  v50 = 0;
  if (v27 <= v24)
    std::vector<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>>::__throw_out_of_range[abi:ne180100]();
  std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>::operator=[abi:ne180100](v26 + 96 * v24, (uint64_t)&v44);
  v28 = v50;
  v50 = 0;
  if (v28)
  {
    v29 = std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100](v28);
    MEMORY[0x1CAA38D28](v29, 0x20C40A4A59CD2);
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
  if (*((_QWORD *)&v49 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (*((_QWORD *)&v48 + 1))
    operator delete(*(void **)&v47[16]);
  if (*(_QWORD *)&v47[8])
    operator delete(v46);
  if (*((_QWORD *)&v44 + 1))
    CFRelease(*((CFTypeRef *)&v44 + 1));
  v33 = v43;
  v43 = 0;
  if (v33)
  {
    v34 = std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100](v33);
    MEMORY[0x1CAA38D28](v34, 0x20C40A4A59CD2);
  }
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (*((_QWORD *)&v42 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  *(_QWORD *)&v44 = 0;
  *((_QWORD *)&v44 + 1) = a3;
  v38 = __udivti3();
  v46 = 0;
  *(_QWORD *)v47 = 0;
  v45 = v38;
  *(_OWORD *)&v47[8] = xmmword_1C89B9F10;
  v39 = as::server::DeviceTimeObserver::DeviceSlot::timestamp((as::server::DeviceTimeObserver::DeviceSlot *)v51);
  caulk::concurrent::atomic_value<as::MinimalTimeStamp,2,3>::store(v39, &v44);
  return v51[0];
}

void sub_1C896B6B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)(v18 + 8) = v19;
  _Unwind_Resume(exception_object);
}

_QWORD *as::server::DeviceLatencyPoll::DeviceLatencyPoll(_QWORD *a1, int a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  _QWORD v8[2];
  int v9;

  v9 = a2;
  std::allocate_shared[abi:ne180100]<as::server::DeviceLatencyPoll::Impl,std::allocator<as::server::DeviceLatencyPoll::Impl>,unsigned int &,std::function<void ()(unsigned long long)> &,void>(&v9, a3, a1);
  v4 = (std::__shared_weak_count *)a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    as::server::DeviceLatencyPoll::dispatch(v8, 3);
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    as::server::DeviceLatencyPoll::dispatch(v8, 3);
  }
  return a1;
}

void ___ZN2as6server17DeviceLatencyPoll8dispatchENSt3__18weak_ptrINS1_4ImplEEENS1_9ELoopModeE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  AudioObjectID *v4;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD v11[2];
  AudioObjectID *v12;
  std::__shared_weak_count *v13;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    v13 = v3;
    if (v3)
    {
      v4 = *(AudioObjectID **)(a1 + 32);
      v12 = v4;
      if (v4)
      {
        as::server::DeviceLatencyPoll::Impl::process(v4);
        if (atomic_load(v4 + 10))
        {
          v6 = v13;
          v11[0] = v12;
          v11[1] = v13;
          if (!v13)
          {
            as::server::DeviceLatencyPoll::dispatch(v11);
            return;
          }
          p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
          do
            v8 = __ldxr(p_shared_weak_owners);
          while (__stxr(v8 + 1, p_shared_weak_owners));
          as::server::DeviceLatencyPoll::dispatch(v11);
          std::__shared_weak_count::__release_weak(v6);
        }
        else
        {
          v6 = v13;
          if (!v13)
            return;
        }
      }
      else
      {
        v6 = v3;
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_1C896B884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void as::server::DeviceLatencyPoll::dispatch(_QWORD *a1, int a2)
{
  uint64_t v3;
  int64_t v4;
  dispatch_time_t v5;
  NSObject *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  _QWORD v10[5];
  std::__shared_weak_count *v11;

  v3 = 500000000;
  if (a2 == 2)
    v3 = 100000000;
  if (a2 == 3)
    v4 = 0;
  else
    v4 = v3;
  v5 = dispatch_time(0, v4);
  dispatch_get_global_queue(33, 0);
  v6 = objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3321888768;
  v10[2] = ___ZN2as6server17DeviceLatencyPoll8dispatchENSt3__18weak_ptrINS1_4ImplEEENS1_9ELoopModeE_block_invoke;
  v10[3] = &__block_descriptor_48_ea8_32c59_ZTSNSt3__18weak_ptrIN2as6server17DeviceLatencyPoll4ImplEEE_e5_v8__0l;
  v7 = (std::__shared_weak_count *)a1[1];
  v10[4] = *a1;
  v11 = v7;
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }
  dispatch_after(v5, v6, v10);

  if (v11)
    std::__shared_weak_count::__release_weak(v11);
}

void as::server::DeviceLatencyPoll::Impl::process(AudioObjectID *this)
{
  double v2;
  char v3;
  uint64_t v4;
  unsigned int v5;
  as::server *v6;
  NSObject *v7;
  _BYTE v8[12];
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  as::server::DeviceLatencyPoll::Impl::getLatency(this);
  if (v3)
  {
    *(_QWORD *)v8 = llround(v2);
    v4 = *((_QWORD *)this + 4);
    if (!v4)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v4 + 48))(v4, v8);
    mach_absolute_time();
    *((_QWORD *)this + 6) = __udivti3();
    v5 = 1;
  }
  else
  {
    mach_absolute_time();
    v6 = (as::server *)__udivti3();
    if ((unint64_t)v6 - *((_QWORD *)this + 6) < 0x3B9ACA01)
    {
      v5 = 2;
    }
    else
    {
      v7 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v6));
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)v8 = 136315394;
        *(_QWORD *)&v8[4] = "DeviceLatencyPoll.mm";
        v9 = 1024;
        v10 = 68;
        _os_log_impl(&dword_1C895C000, v7, OS_LOG_TYPE_INFO, "%25s:%-5d warning - over one second since last successful device latency read, stopping", v8, 0x12u);
      }
      v5 = 0;
    }
  }
  atomic_store(v5, this + 10);
}

double as::server::DeviceLatencyPoll::Impl::getLatency(AudioObjectID *this)
{
  double result;
  NSObject *v2;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  _BYTE outData[8];
  double v6;
  double v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  double v13;
  __int16 v14;
  double v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"tptbbolg";
  inAddress.mElement = 0;
  ioDataSize = 40;
  if (!AudioObjectGetPropertyData(*this, &inAddress, 0, 0, &ioDataSize, outData))
  {
    if (v7 <= v6)
    {
      return v6 - v7;
    }
    else
    {
      v2 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(0));
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        v9 = "DeviceLatencyPoll.mm";
        v10 = 1024;
        v11 = 52;
        v12 = 2048;
        v13 = v6;
        v14 = 2048;
        v15 = v7;
        _os_log_impl(&dword_1C895C000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d sample time (%.2f) is unexpectedly greater than presentation time (%.2f), ignoring value", buf, 0x26u);
      }
    }
  }
  return result;
}

void sub_1C896BCA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void as::server::DeviceTimeObserver::sessionsObservingDeviceEvent(uint64_t *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  BOOL v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  char v26;
  _DWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  int v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  unsigned __int128 *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unsigned __int128 *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  unsigned __int128 *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  _QWORD v61[2];
  uint64_t v62[3];
  uint64_t *v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v8 = a1[6];
  v7 = a1[7];
  if (v8 != v7)
  {
    while (*(_DWORD *)v8 != a2)
    {
      v8 += 96;
      if (v8 == v7)
        return;
    }
  }
  if (v8 == v7)
    return;
  v9 = *(unsigned __int8 *)(v8 + 16);
  *(_BYTE *)(a4 + 24) = v9;
  v10 = v8 + 24;
  v14 = v9 == 0;
  v11 = 24;
  if (v14)
  {
    v11 = 48;
    v10 = v8 + 48;
  }
  v12 = *(int **)(v8 + v11);
  v13 = *(_QWORD *)(v10 + 8);
  if (v12)
    v14 = 1;
  else
    v14 = v13 == 0;
  if (!v14)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  if (v13)
  {
    v15 = &v12[v13];
    while (1)
    {
      if (!v12)
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      v16 = *v12;
      LODWORD(v61[0]) = *v12;
      boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::find(a1 + 3, (unsigned int *)v61, v62);
      v17 = a1[3];
      v18 = a1[4];
      if (v17)
        v19 = 1;
      else
        v19 = v18 == 0;
      if (!v19)
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      v20 = v62[0];
      if (v62[0] == v17 + 32 * v18)
        goto LABEL_54;
      if (*(_BYTE *)(v8 + 16))
        v21 = 25;
      else
        v21 = 24;
      if (!*(_BYTE *)(v62[0] + v21))
        goto LABEL_48;
      v22 = *(_QWORD *)(v62[0] + 8);
      if (*(_BYTE *)(v22 + 12))
        goto LABEL_27;
      if (a3 == 1)
      {
        v26 = 1;
        goto LABEL_53;
      }
      if (a3 == 2)
        break;
LABEL_54:
      if (++v12 == v15)
        goto LABEL_57;
    }
    v26 = *(_BYTE *)(v22 + 13);
    if (!v26)
      goto LABEL_53;
LABEL_27:
    v24 = *(_DWORD **)(a4 + 8);
    v23 = *(_QWORD *)(a4 + 16);
    if ((unint64_t)v24 >= v23)
    {
      v27 = *(_DWORD **)a4;
      v28 = ((uint64_t)v24 - *(_QWORD *)a4) >> 2;
      v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 62)
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      v30 = v23 - (_QWORD)v27;
      if (v30 >> 1 > v29)
        v29 = v30 >> 1;
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
        v31 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v31 = v29;
      if (v31)
      {
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a4 + 16, v31);
        v27 = *(_DWORD **)a4;
        v24 = *(_DWORD **)(a4 + 8);
      }
      else
      {
        v32 = 0;
      }
      v33 = &v32[4 * v28];
      *(_DWORD *)v33 = v16;
      v25 = v33 + 4;
      while (v24 != v27)
      {
        v34 = *--v24;
        *((_DWORD *)v33 - 1) = v34;
        v33 -= 4;
      }
      *(_QWORD *)a4 = v33;
      *(_QWORD *)(a4 + 8) = v25;
      *(_QWORD *)(a4 + 16) = &v32[4 * v31];
      if (v27)
        operator delete(v27);
    }
    else
    {
      *v24 = v16;
      v25 = v24 + 1;
    }
    *(_QWORD *)(a4 + 8) = v25;
LABEL_48:
    if (a3 == 1)
    {
      v26 = 1;
LABEL_52:
      v22 = *(_QWORD *)(v20 + 8);
LABEL_53:
      *(_BYTE *)(v22 + 13) = v26;
      goto LABEL_54;
    }
    if (a3 == 2)
    {
      v26 = 0;
      goto LABEL_52;
    }
    goto LABEL_54;
  }
LABEL_57:
  if (a3 != 1)
  {
    if (a3 != 2)
      return;
    v35 = *(_QWORD *)(v8 + 72);
    v36 = *(std::__shared_weak_count **)(v8 + 80);
    if (v36)
    {
      p_shared_owners = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(p_shared_owners);
      while (__stxr(v38 + 1, p_shared_owners));
      v39 = (unsigned __int128 *)(v35 + 32);
      do
        __ldaxp(v39);
      while (__stlxp(0, v39));
      std::unique_ptr<as::server::DeviceLatencyPoll>::reset[abi:ne180100]((uint64_t *)(v8 + 88), 0);
      do
        v40 = __ldaxr(p_shared_owners);
      while (__stlxr(v40 - 1, p_shared_owners));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        v41 = v36;
LABEL_98:
        std::__shared_weak_count::__release_weak(v41);
        return;
      }
    }
    else
    {
      v55 = (unsigned __int128 *)(v35 + 32);
      do
        __ldaxp(v55);
      while (__stlxp(0, v55));
      std::unique_ptr<as::server::DeviceLatencyPoll>::reset[abi:ne180100]((uint64_t *)(v8 + 88), 0);
    }
    return;
  }
  v43 = *(_QWORD *)(v8 + 72);
  v42 = *(std::__shared_weak_count **)(v8 + 80);
  if (v42)
  {
    v44 = (unint64_t *)&v42->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  v46 = (unsigned __int128 *)(v43 + 32);
  do
    __ldaxp(v46);
  while (__stlxp(0, v46));
  if (!*(_BYTE *)(v8 + 16))
  {
    if (v42)
    {
      v47 = (unint64_t *)&v42->__shared_owners_;
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
    }
    v49 = operator new();
    v50 = v49;
    if (v42)
    {
      v51 = (unint64_t *)&v42->__shared_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    v62[0] = (uint64_t)&off_1E8205470;
    v62[1] = v43;
    v61[0] = 0;
    v61[1] = 0;
    v62[2] = (uint64_t)v42;
    v63 = v62;
    as::server::DeviceLatencyPoll::DeviceLatencyPoll(v49, a2, v62);
    v53 = v63;
    if (v63 == v62)
    {
      v54 = 4;
      v53 = v62;
    }
    else
    {
      if (!v63)
      {
LABEL_88:
        std::unique_ptr<as::server::DeviceLatencyPoll>::reset[abi:ne180100]((uint64_t *)(v8 + 88), v50);
        if (v42)
        {
          v56 = (unint64_t *)&v42->__shared_owners_;
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        goto LABEL_93;
      }
      v54 = 5;
    }
    (*(void (**)(void))(*v53 + 8 * v54))();
    goto LABEL_88;
  }
LABEL_93:
  if (v42)
  {
    v58 = (unint64_t *)&v42->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      v41 = v42;
      goto LABEL_98;
    }
  }
}

void sub_1C896C19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v25;
  uint64_t v26;
  void *v27;

  v25 = a21;
  if (a21 == v23)
  {
    v26 = 4;
    v25 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  MEMORY[0x1CAA38D28](v22, 0x20C40A4A59CD2);
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  v27 = *(void **)v21;
  if (*(_QWORD *)v21)
  {
    *(_QWORD *)(v21 + 8) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(a1);
}

uint64_t as::server::DeviceLatencyPoll::Impl::Impl(uint64_t a1, int a2, uint64_t a3)
{
  *(_DWORD *)a1 = a2;
  std::__function::__value_func<void ()(unsigned long long)>::__value_func[abi:ne180100](a1 + 8, a3);
  *(_DWORD *)(a1 + 40) = 2;
  mach_absolute_time();
  *(_QWORD *)(a1 + 48) = __udivti3();
  return a1;
}

void sub_1C896C2B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v1 + 32);
  if (v4 == v2)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v2 = *(_QWORD **)(v1 + 32);
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v5))(v2);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::Data::operator=(_QWORD *a1, _QWORD *a2)
{
  if (a2 != a1)
    boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::priv_move_assign<boost::container::new_allocator<unsigned int>>(a1, a2);
  return a1;
}

__n128 boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::priv_move_assign<boost::container::new_allocator<unsigned int>>(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  __n128 result;

  if (a1 == a2 && a2[1])
    boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::priv_move_assign<boost::container::new_allocator<unsigned int>>();
  a1[1] = 0;
  v4 = (void *)*a1;
  if (*a1)
    operator delete(v4);
  *a1 = *a2;
  result = *(__n128 *)(a2 + 1);
  *(__n128 *)(a1 + 1) = result;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void std::__shared_ptr_emplace<as::server::DeviceTimeObserver::TimeInfo>::__on_zero_shared_weak()
{
  JUMPOUT(0x1CAA38D1CLL);
}

id as::server::DeviceTimeObserver::DeviceSlot::timestampWriter(as::server::DeviceTimeObserver::DeviceSlot *this)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD v20[6];
  std::__shared_weak_count *v21;

  v2 = as::server::DeviceTimeObserver::DeviceSlot::timestamp(this);
  v3 = **(_QWORD **)this;
  v4 = *(_QWORD *)(v3 + 48);
  v5 = *((unsigned int *)this + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v3 + 56) - v4) >> 5) <= v5)
    std::vector<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>>::__throw_out_of_range[abi:ne180100]();
  v6 = v4 + 96 * v5;
  v7 = *(_QWORD *)(v6 + 72);
  v8 = *(std::__shared_weak_count **)(v6 + 80);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3321888768;
  v20[2] = ___ZN2as6server18DeviceTimeObserver10DeviceSlot15timestampWriterEv_block_invoke;
  v20[3] = &__block_descriptor_56_ea8_40c67_ZTSNSt3__110shared_ptrIN2as6server18DeviceTimeObserver8TimeInfoEEE_e53_v16__0r__AudioTimeStamp_dQdQ_SMPTETime_ssIIIssss_II_8l;
  v20[4] = v2;
  v20[5] = v7;
  v21 = v8;
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = (void *)MEMORY[0x1CAA39148](v20);
  v14 = v21;
  if (v21)
  {
    v15 = (unint64_t *)&v21->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v8)
  {
    v17 = (unint64_t *)&v8->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v13;
}

unint64_t as::server::DeviceTimeObserver::DeviceSlot::timestamp(as::server::DeviceTimeObserver::DeviceSlot *this)
{
  unint64_t v2;
  unsigned int v3;

  v2 = caulk::ipc::mapped_memory::get_ptr<as::DTSharedBlock>((caulk::ipc::mapped_memory *)(*(_QWORD *)this + 16), 0);
  v3 = *((_DWORD *)this + 2);
  if (v3 >= 0x42)
    std::__throw_out_of_range[abi:ne180100]("array::at");
  return v2 + 136 * v3 + 56480;
}

id caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},unsigned int,NSObject  {objcproto13OS_xpc_object}* {__strong},unsigned int,unsigned int>(caulk::xpc::reply_watchdog_factory *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v8;
  void *v9;
  _QWORD v10[4];
  id v11;
  id v12;

  v3 = a2;
  v4 = v3;
  if (*(_BYTE *)a1)
  {
    v5 = (void *)MEMORY[0x1CAA39148](v3);
  }
  else
  {
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3321888768;
    v10[2] = ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorjU8__strongPU24objcproto13OS_xpc_object8NSObjectjjEEEU13block_pointerFvDpT_ESD_i_block_invoke;
    v10[3] = &__block_descriptor_48_ea8_32c176_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorjU8__strongPU24objcproto13OS_xpc_object8NSObjectjjEEEU13block_pointerFvDpT_ESD_iEUlS4_jS8_jjE__e54_v36__0__NSError_8I16__NSObject_OS_xpc_object__20I28I32l;
    caulk::xpc::reply_watchdog_factory::make_timer(a1);
    v9 = (void *)MEMORY[0x1CAA39148](v4);
    v11 = v8;
    v12 = (id)MEMORY[0x1CAA39148](v9);
    v5 = (void *)MEMORY[0x1CAA39148](v10);

    v6 = v11;
    v11 = 0;

  }
  return v5;
}

void sub_1C896C630(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorjU8__strongPU24objcproto13OS_xpc_object8NSObjectjjEEEU13block_pointerFvDpT_ESD_i_block_invoke(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},unsigned int,NSObject  {objcproto13OS_xpc_object}* {__strong},unsigned int,unsigned int>(void({block_pointer})(NSError * {__strong},unsigned int,NSObject  {objcproto13OS_xpc_object}* {__strong},unsigned int,unsigned int),int)::{lambda(NSError *,unsigned int,NSObject  {objcproto13OS_xpc_object}*,unsigned int,unsigned int)#1}::operator()(a1 + 32, a2, a3, a4);
}

void caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},unsigned int,NSObject  {objcproto13OS_xpc_object}* {__strong},unsigned int,unsigned int>(void({block_pointer})(NSError * {__strong},unsigned int,NSObject  {objcproto13OS_xpc_object}* {__strong},unsigned int,unsigned int),int)::{lambda(NSError *,unsigned int,NSObject  {objcproto13OS_xpc_object}*,unsigned int,unsigned int)#1}::operator()(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  NSObject *v7;
  id v8;

  v6 = a4;
  v8 = a2;
  applesauce::dispatch::v1::queue::operator*((id *)a1);
  v7 = objc_claimAutoreleasedReturnValue();
  dispatch_source_cancel(v7);

  (*(void (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

void sub_1C896C6DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void as::server::LegacySessionManager::BuildCreationDescription(__int128 *a1@<X1>, unsigned int a2@<W2>, void *a3@<X3>, void *a4@<X4>, uint64_t *a5@<X5>, void *a6@<X6>, int a7@<W7>, uint64_t a8@<X8>)
{
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  id v23;
  __int128 v24;
  id v25;
  __int128 v26;
  _BYTE v27[28];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  audit_token_t atoken;

  v15 = a3;
  v16 = a4;
  v17 = a6;
  v26 = *a1;
  *(_OWORD *)v27 = a1[1];
  v27[16] = 1;
  *(_OWORD *)atoken.val = *a1;
  *(_OWORD *)&atoken.val[4] = *(_OWORD *)v27;
  *(_QWORD *)&v27[20] = __PAIR64__(a2, audit_token_to_pid(&atoken));
  v18 = v15;
  *(_QWORD *)&v28 = v18;
  v19 = v16;
  v20 = v19;
  *((_QWORD *)&v28 + 1) = v19;
  v21 = 0uLL;
  v29 = 0u;
  v30 = 0u;
  if (a2 == 1936286827)
  {
    v25 = v17;
    v24 = 0uLL;
    v21 = (unint64_t)v25;
    v22 = (uint64_t)v20;
    v23 = v18;
  }
  else
  {
    v22 = (uint64_t)v19;
    v23 = v18;
    v24 = 0uLL;
    if (a2 == 1935830119)
    {
      v22 = *a5;
      if (!*a5)
      {
        *(_BYTE *)a8 = 0;
        goto LABEL_7;
      }
      std::shared_ptr<as::server::AudioSessionInfo>::operator=[abi:ne180100](&v30, a5);
      objc_storeStrong((id *)&v29 + 1, a6);
      v22 = *((_QWORD *)&v28 + 1);
      v23 = v18;
      v21 = v29;
      v24 = v30;
    }
  }
  *(_OWORD *)a8 = v26;
  *(_OWORD *)(a8 + 16) = *(_OWORD *)v27;
  *(_OWORD *)(a8 + 28) = *(_OWORD *)&v27[12];
  v28 = 0u;
  *(_QWORD *)(a8 + 48) = v23;
  *(_QWORD *)(a8 + 56) = v22;
  *(_DWORD *)(a8 + 64) = a7;
  v29 = 0u;
  *(_OWORD *)(a8 + 72) = v21;
  *(_OWORD *)(a8 + 88) = v24;
  LOBYTE(v22) = 1;
  v30 = 0u;
LABEL_7:
  *(_BYTE *)(a8 + 104) = v22;

}

void sub_1C896C898(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id as::server::DeviceTimeObserver::xpcSharedMemoryObject(as::server::DeviceTimeObserver *this)
{
  uint64_t v2;
  _QWORD *v3;
  as::server::DeviceTimeObserver::SharedBlockOwner *v4;
  void *v5;

  v3 = (_QWORD *)((char *)this + 8);
  v2 = *((_QWORD *)this + 1);
  v4 = *(as::server::DeviceTimeObserver::SharedBlockOwner **)this;
  if (v2 - (_QWORD)v4 == 128)
  {
    as::server::DeviceTimeObserver::SharedBlockOwner::xpcSharedMemoryObject(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      as::server::DeviceTimeObserver::xpcSharedMemoryObject(v3, this);
    v5 = 0;
  }
  return v5;
}

xpc_object_t as::server::DeviceTimeObserver::SharedBlockOwner::xpcSharedMemoryObject(as::server::DeviceTimeObserver::SharedBlockOwner *this)
{
  void *raw_ptr;

  raw_ptr = (void *)caulk::ipc::mapped_memory::get_raw_ptr((as::server::DeviceTimeObserver::SharedBlockOwner *)((char *)this + 16), 0);
  return xpc_shmem_create(raw_ptr, *((_QWORD *)this + 3));
}

void as::server::LegacySessionManager::CreateSession(os_unfair_lock_s *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, __int128 *a5@<X8>)
{
  id v9;
  id v10;

  v10 = a3;
  v9 = a4;
  if (*(_DWORD *)(a2 + 40) == 1886546285)
  {
    as::server::LegacySessionManager::FindOrCreatePrimarySession((uint64_t)a1, (__int128 *)a2, v10, v9, 1, (uint64_t)a5);
  }
  else
  {
    os_unfair_lock_lock(a1 + 60);
    as::server::LegacySessionManager::CreateSessionPriv((uint64_t)a1, (as::server::SessionCreationDescription *)a2, v10, v9, a5);
    os_unfair_lock_unlock(a1 + 60);
  }

}

void sub_1C896CA00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  os_unfair_lock_s *v11;

  os_unfair_lock_unlock(v11);

  _Unwind_Resume(a1);
}

void as::server::LegacySessionManager::FindOrCreatePrimarySession(uint64_t a1@<X0>, __int128 *a2@<X1>, void *a3@<X2>, void *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  id v11;
  _QWORD *v12;
  _QWORD *v13;
  __int128 v14;
  id v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  as::server *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  id v28;
  NSObject *v29;
  _BOOL8 v30;
  NSObject *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  NSXPCConnection *v39;
  __int128 v40;
  _OWORD v41[2];
  id v42;
  id v43;
  int v44;
  id v45;
  id v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint8_t buf[4];
  const char *v50;
  __int16 v51;
  int v52;
  __int16 v53;
  _QWORD *v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v39 = a3;
  v11 = a4;
  if (*((_DWORD *)a2 + 10) != 1886546285)
  {
    v38 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v38);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 240));
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v13 = *(_QWORD **)(a1 + 8);
  v12 = *(_QWORD **)(a1 + 16);
  v14 = a2[1];
  v40 = *a2;
  v41[0] = v14;
  *(_OWORD *)((char *)v41 + 12) = *(__int128 *)((char *)a2 + 28);
  v42 = *((id *)a2 + 6);
  v43 = *((id *)a2 + 7);
  v44 = *((_DWORD *)a2 + 16);
  v45 = *((id *)a2 + 9);
  v15 = *((id *)a2 + 10);
  v17 = *((_QWORD *)a2 + 11);
  v16 = (std::__shared_weak_count *)*((_QWORD *)a2 + 12);
  v46 = v15;
  v47 = v17;
  v48 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  if (v13 != v12)
  {
    while (!as::server::ProcessIdentity::operator==(*v13 + 12, (uint64_t)&v40)
         || *(_DWORD *)(*v13 + 92) != 1886546285)
    {
      v13 += 2;
      if (v13 == v12)
      {
        v13 = v12;
        break;
      }
    }
  }
  v20 = v48;
  if (v48)
  {
    v21 = (unint64_t *)&v48->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

  if (v13 == *(_QWORD **)(a1 + 16))
  {
    os_unfair_lock_unlock((os_unfair_lock_t)a1);
    if (a5 == 1)
    {
      as::server::LegacySessionManager::CreateSessionPriv(a1, (as::server::SessionCreationDescription *)a2, v39, v11, (__int128 *)a6);
    }
    else
    {
      *(_QWORD *)a6 = 0;
      *(_QWORD *)(a6 + 8) = 0;
    }
  }
  else
  {
    v25 = *v13;
    v24 = (std::__shared_weak_count *)v13[1];
    if (v24)
    {
      v26 = (unint64_t *)&v24->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    v28 = v11;
    v29 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v23));
    v30 = os_log_type_enabled(v29, OS_LOG_TYPE_INFO);
    if (v30)
    {
      *(_DWORD *)buf = 136315394;
      v50 = "ServerSessionManager.mm";
      v51 = 1024;
      v52 = 529;
      _os_log_impl(&dword_1C895C000, v29, OS_LOG_TYPE_INFO, "%25s:%-5d Found an existing primary session for the client process.", buf, 0x12u);
    }
    v11 = v28;
    if (a5 == 1 && !*(_QWORD *)(v25 + 256))
    {
      v31 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v30));
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        v32 = (_QWORD *)(v25 + 176);
        if (*(char *)(v25 + 199) < 0)
          v32 = (_QWORD *)*v32;
        *(_DWORD *)buf = 136315650;
        v50 = "ServerSessionManager.mm";
        v51 = 1024;
        v52 = 531;
        v53 = 2080;
        v54 = v32;
        _os_log_impl(&dword_1C895C000, v31, OS_LOG_TYPE_INFO, "%25s:%-5d Setting the XPC connection for %s", buf, 0x1Cu);
      }
      as::server::AudioSessionInfo::SetXPCConnection((as::server::AudioSessionInfo *)v25, v39);
    }
    *(_QWORD *)a6 = *v13;
    v33 = v13[1];
    *(_QWORD *)(a6 + 8) = v33;
    if (v33)
    {
      v34 = (unint64_t *)(v33 + 8);
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    if (v24)
    {
      v36 = (unint64_t *)&v24->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 240));

}

void sub_1C896CDE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, char a11, uint64_t a12, char a13)
{
  os_unfair_lock_s *v13;
  void *v14;

  os_unfair_lock_unlock(v13);

  _Unwind_Resume(a1);
}

void as::server::LegacySessionManager::FindSourceSessionForSibling(os_unfair_lock_s *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X3>, _QWORD *a5@<X8>)
{
  id v9;
  as::server *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  __int128 v14;
  _BOOL8 v15;
  _BOOL4 v16;
  NSObject *v17;
  __int128 v18;
  pid_t v19;
  const char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  audit_token_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  audit_token_t atoken;
  _BYTE buf[34];
  __int16 v32;
  pid_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v9 = a4;
  if (a3 == -1)
  {
    v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)buf = *(_OWORD *)a2;
    *(_OWORD *)&buf[16] = v14;
    buf[32] = 1;
    *(_OWORD *)atoken.val = *(_OWORD *)buf;
    *(_OWORD *)&atoken.val[4] = v14;
    v33 = audit_token_to_pid(&atoken);
    as::server::LegacySessionManager::FindOrCreatePrimarySession((uint64_t)a1, (uint64_t)buf, 0, v9, 1, (uint64_t)&v28);
    a3 = v28 ? *(_DWORD *)(v28 + 8) : -1;
    v24 = v29;
    if (v29)
    {
      p_shared_owners = (unint64_t *)&v29->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  as::server::LegacySessionManager::FindSessionAndVerifyOwnership(a1, (const audit_token_t *)a2, a3, 1, &atoken);
  v11 = *(_QWORD *)atoken.val;
  if (*(_QWORD *)atoken.val)
  {
    v12 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v10));
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "ServerSessionManager.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 152;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = a3;
      _os_log_impl(&dword_1C895C000, v12, OS_LOG_TYPE_INFO, "%25s:%-5d Found source session with ID 0x%x. Proceeding to create sibling session.", buf, 0x18u);
    }
    v13 = *(_QWORD *)&atoken.val[2];
    *a5 = v11;
    a5[1] = v13;
  }
  else
  {
    v15 = as::server::LegacySessionManager::SessionIDIsValid(a1, a3);
    v16 = v15;
    v17 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v15));
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)v27.val = *(_OWORD *)a2;
      *(_OWORD *)&v27.val[4] = v18;
      v19 = audit_token_to_pid(&v27);
      v20 = "not valid";
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "ServerSessionManager.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 147;
      if (v16)
        v20 = "valid";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = a3;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = v20;
      v32 = 1024;
      v33 = v19;
      _os_log_impl(&dword_1C895C000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d Sibling session creation failed. Source sessionID: 0x%x. SessionID is %s. Source PID: %d", buf, 0x28u);
    }

    *a5 = 0;
    a5[1] = 0;
    v21 = *(std::__shared_weak_count **)&atoken.val[2];
    if (*(_QWORD *)&atoken.val[2])
    {
      v22 = (unint64_t *)(*(_QWORD *)&atoken.val[2] + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }

}

void sub_1C896D0FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a7);

  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void as::server::DeviceTimeObserver::SessionSlot::setDeviceIndex(as::server::DeviceTimeObserver::SessionSlot *this, int a2, char a3, unsigned int a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27[8];
  unint64_t v28;
  char v29;
  char v30[8];
  unint64_t v31;
  char v32;
  __int128 v33[2];
  char v34;
  _BYTE v35[16];
  uint64_t v36;

  v10 = as::server::DeviceTimeObserver::SessionSlot::sessionState(this);
  caulk::concurrent::atomic_value<as::SessionSharedState,2,3>::load(v10, (uint64_t)v33);
  if (a2)
    v12 = 0;
  else
    v12 = 1;
  v13 = LOBYTE(v33[v12]);
  if ((_DWORD)v13 != a4)
  {
    if ((_DWORD)v13 == 255)
    {
      v14 = 0;
      v30[0] = 0;
    }
    else
    {
      v15 = as::server::DeviceTimeObserver::SharedBlockOwner::deviceTimeAtIdx(*(as::server::DeviceTimeObserver::SharedBlockOwner **)this, v13);
      caulk::concurrent::atomic_value<as::MinimalTimeStamp,2,3>::load(v15, (uint64_t)v30);
      v14 = 1;
    }
    v32 = v14;
    if (a4 == 255)
    {
      v16 = 0;
      v27[0] = 0;
    }
    else
    {
      v17 = as::server::DeviceTimeObserver::SharedBlockOwner::deviceTimeAtIdx(*(as::server::DeviceTimeObserver::SharedBlockOwner **)this, a4);
      caulk::concurrent::atomic_value<as::MinimalTimeStamp,2,3>::load(v17, (uint64_t)v27);
      v16 = 1;
      v11 = v28;
    }
    v18 = v31;
    if (v31 <= a5)
      v18 = a5;
    if ((_DWORD)v13 == 255)
      v19 = a5;
    else
      v19 = v18;
    if (v19 <= v11)
      v20 = v11;
    else
      v20 = v19;
    if (a4 == 255)
      v21 = v19;
    else
      v21 = v20;
    v29 = v16;
    if ((_DWORD)v13 == 255)
    {
      v22 = __udivti3();
    }
    else
    {
      as::util::interpolateTimeStamp((uint64_t)v30, v21, (uint64_t)v35);
      v22 = v36;
    }
    if (a2)
      v23 = 8;
    else
      v23 = 24;
    v24 = *(_QWORD *)((char *)v33 + v23) + v22;
    if (a4 == 255)
    {
      v25 = __udivti3();
    }
    else
    {
      as::util::interpolateTimeStamp((uint64_t)v27, v20, (uint64_t)v35);
      v25 = v36;
    }
    LOBYTE(v33[v12]) = a4;
    *(_QWORD *)((char *)v33 + v23) = v24 - v25;
    if (a2)
      v34 = a3;
    v26 = as::server::DeviceTimeObserver::SessionSlot::sessionState(this);
    caulk::concurrent::atomic_value<as::SessionSharedState,2,3>::store(v26, v33);
  }
}

uint64_t ___ZN2as6server18DeviceTimeObserver10DeviceSlot15timestampWriterEv_block_invoke(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned __int128 *v5;
  unint64_t v6;
  unsigned __int128 v7;
  double v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  double v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  double *v20;
  unint64_t v21;
  __int128 v22;
  unint64_t v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v2 = result;
  v3 = *(_DWORD *)(a2 + 56);
  if ((~v3 & 3) == 0)
  {
    v28 = 0;
    v26 = 0u;
    v27 = 0u;
    v25 = 0u;
    caulk::concurrent::atomic_value<as::MinimalTimeStamp,2,3>::load(*(_QWORD *)(result + 32), (uint64_t)&v25);
    LOBYTE(v25) = 1;
    v5 = (unsigned __int128 *)(*(_QWORD *)(v2 + 40) + 32);
    do
    {
      v7 = __ldaxp(v5);
      v6 = v7;
    }
    while (__stlxp(v7, v5));
    if (BYTE8(v7))
    {
      BYTE1(v25) = 1;
      v8 = 1.0;
    }
    else
    {
      v6 = atomic_load((unint64_t *)(*(_QWORD *)(v2 + 40) + 16));
      BYTE1(v25) = 0;
      v8 = 1.0;
      if ((*(_BYTE *)(a2 + 56) & 4) != 0)
        v8 = *(double *)(a2 + 16);
    }
    v28 = *(_QWORD *)&v8;
    v13 = *(_QWORD **)(v2 + 40);
    *((_QWORD *)&v27 + 1) = *v13;
    *(_QWORD *)&v27 = v6;
    v14 = atomic_load(v13 + 1);
    *((_QWORD *)&v26 + 1) = v14;
    caulk::concurrent::atomic_value<std::optional<as::server::DeviceTimeObserver::AnchorInfo>,2,6>::load(*(_QWORD *)(v2 + 40) + 64, (uint64_t)&v22);
    if (v24)
    {
      v15 = *(double *)a2;
      if (*(double *)a2 >= (double)*((unint64_t *)&v22 + 1) && v15 >= (double)v23)
      {
        if (v23 < *((_QWORD *)&v22 + 1))
          ___ZN2as6server18DeviceTimeObserver10DeviceSlot15timestampWriterEv_block_invoke_cold_2();
        *((_QWORD *)&v25 + 1) = *(_QWORD *)(a2 + 8);
        v23 = (unint64_t)v15;
        v20 = *(double **)(v2 + 40);
        if (*v20 == 0.0)
          v21 = 0;
        else
          v21 = llround(1000000000.0 / *v20 * (double)((unint64_t)v15 - *((_QWORD *)&v22 + 1)));
        *(_QWORD *)&v26 = v21 + v22;
        goto LABEL_16;
      }
      v24 = 0;
    }
    v16 = *(_QWORD *)(a2 + 8);
    if (v16 < *((_QWORD *)&v25 + 1))
      ___ZN2as6server18DeviceTimeObserver10DeviceSlot15timestampWriterEv_block_invoke_cold_1();
    v17 = v26;
    v18 = __udivti3();
    *((_QWORD *)&v25 + 1) = v16;
    *(_QWORD *)&v26 = v17 + v18;
    v19 = (unint64_t)*(double *)a2;
    *(_QWORD *)&v22 = v17 + v18;
    *((_QWORD *)&v22 + 1) = v19;
    v23 = v19;
    v24 = 1;
    v20 = *(double **)(v2 + 40);
LABEL_16:
    caulk::concurrent::atomic_value<std::optional<as::server::DeviceTimeObserver::AnchorInfo>,2,6>::store((uint64_t)(v20 + 8), &v22);
    return caulk::concurrent::atomic_value<as::MinimalTimeStamp,2,3>::store(*(_QWORD *)(v2 + 32), &v25);
  }
  if (!v3)
  {
    v28 = 0;
    v26 = 0u;
    v27 = 0u;
    v25 = 0u;
    caulk::concurrent::atomic_value<as::MinimalTimeStamp,2,3>::load(*(_QWORD *)(result + 32), (uint64_t)&v25);
    LOWORD(v25) = 0;
    v28 = 0x3FF0000000000000;
    v9 = *(_QWORD *)(v2 + 32);
    v10 = atomic_load((unint64_t *)(*(_QWORD *)(v2 + 40) + 16));
    *(_QWORD *)&v27 = v10;
    v11 = atomic_load((unint64_t *)(*(_QWORD *)(v2 + 40) + 8));
    *((_QWORD *)&v26 + 1) = v11;
    caulk::concurrent::atomic_value<as::MinimalTimeStamp,2,3>::store(v9, &v25);
    v12 = *(_QWORD *)(v2 + 40) + 64;
    LOBYTE(v22) = 0;
    v24 = 0;
    return caulk::concurrent::atomic_value<std::optional<as::server::DeviceTimeObserver::AnchorInfo>,2,6>::store(v12, &v22);
  }
  return result;
}

__n128 caulk::concurrent::atomic_value<as::MinimalTimeStamp,2,3>::load@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3;
  __n128 result;
  unsigned __int8 v6;
  char v7;
  char v8;
  char v9;
  char v10;
  unint64_t v11;
  unsigned int v12;
  __int128 v13;
  unsigned __int8 v14;
  int v15;

  v3 = atomic_load((unsigned __int8 *)a1);
  if ((v3 & 1) != 0)
  {
    v15 = 0;
    v6 = atomic_load((unsigned __int8 *)a1);
    if ((v6 & 1) == 0)
LABEL_12:
      caulk::concurrent::atomic_value<as::MinimalTimeStamp,2,3>::load();
    while (1)
    {
      v7 = atomic_load((unsigned int *)(a1 + 4));
      v8 = v7 - 1;
      v9 = 1;
      while (1)
      {
        v10 = v9;
        v11 = a1 + 8 + ((unint64_t)(v8 & 1) << 6);
        v12 = atomic_load((unsigned int *)v11);
        if ((v12 & 1) != 0)
          break;
        v9 = 0;
        --v8;
        if ((v10 & 1) == 0)
          goto LABEL_11;
      }
      v13 = *(_OWORD *)(v11 + 24);
      *(_OWORD *)a2 = *(_OWORD *)(v11 + 8);
      *(_OWORD *)(a2 + 16) = v13;
      result = *(__n128 *)(v11 + 40);
      *(__n128 *)(a2 + 32) = result;
      *(_QWORD *)(a2 + 48) = *(_QWORD *)(v11 + 56);
      __dmb(9u);
      if (v12 == *(_DWORD *)v11)
        break;
      caulk::concurrent::details::spinloop::spin((uint64_t)&v15);
LABEL_11:
      v14 = atomic_load((unsigned __int8 *)a1);
      if ((v14 & 1) == 0)
        goto LABEL_12;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 48) = 0;
    result.n128_u64[0] = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
  return result;
}

uint64_t caulk::concurrent::atomic_value<as::MinimalTimeStamp,2,3>::store(uint64_t result, __int128 *a2)
{
  unsigned __int8 *v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unsigned int v20;
  unsigned int v21;
  int v22;

  v3 = (unsigned __int8 *)result;
  v22 = 0;
  v4 = (unsigned int *)(result + 4);
  v5 = result + 8;
  do
    v6 = __ldaxr(v4);
  while (__stlxr(v6 + 1, v4));
  v7 = v5 + ((unint64_t)(v6 & 1) << 6);
  v8 = 2 * v6;
  atomic_store(2 * v6, (unsigned int *)v7);
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  *(_QWORD *)(v7 + 56) = *((_QWORD *)a2 + 6);
  *(_OWORD *)(v7 + 40) = v11;
  *(_OWORD *)(v7 + 24) = v10;
  *(_OWORD *)(v7 + 8) = v9;
  __dmb(0xBu);
  v12 = (2 * v6) | 1;
  do
  {
    v13 = __ldaxr((unsigned int *)v7);
    if (v13 != v8)
    {
      while (1)
      {
        __clrex();
        result = caulk::concurrent::details::spinloop::spin((uint64_t)&v22);
        do
          v14 = __ldaxr(v4);
        while (__stlxr(v14 + 1, v4));
        v15 = v5 + ((unint64_t)(v14 & 1) << 6);
        v16 = 2 * v14;
        atomic_store(2 * v14, (unsigned int *)v15);
        v17 = *a2;
        v18 = a2[1];
        v19 = a2[2];
        *(_QWORD *)(v15 + 56) = *((_QWORD *)a2 + 6);
        *(_OWORD *)(v15 + 40) = v19;
        *(_OWORD *)(v15 + 24) = v18;
        *(_OWORD *)(v15 + 8) = v17;
        __dmb(0xBu);
        v20 = (2 * v14) | 1;
        while (1)
        {
          v21 = __ldaxr((unsigned int *)v15);
          if (v21 != v16)
            break;
          if (!__stlxr(v20, (unsigned int *)v15))
            goto LABEL_12;
        }
      }
    }
  }
  while (__stlxr(v12, (unsigned int *)v7));
LABEL_12:
  atomic_store(1u, v3);
  return result;
}

uint64_t caulk::concurrent::atomic_value<std::optional<as::server::DeviceTimeObserver::AnchorInfo>,2,6>::store(uint64_t result, __int128 *a2)
{
  unsigned __int8 *v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  int v8;
  __int128 v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  int v14;
  __int128 v15;
  unsigned int v16;
  unsigned int v17;
  int v18;

  v3 = (unsigned __int8 *)result;
  v18 = 0;
  v4 = (unsigned int *)(result + 4);
  v5 = result + 64;
  do
    v6 = __ldaxr(v4);
  while (__stlxr(v6 + 1, v4));
  v7 = v5 + ((unint64_t)(v6 & 1) << 6);
  v8 = 2 * v6;
  atomic_store(2 * v6, (unsigned int *)v7);
  v9 = *a2;
  *(_OWORD *)(v7 + 17) = *(__int128 *)((char *)a2 + 9);
  *(_OWORD *)(v7 + 8) = v9;
  __dmb(0xBu);
  v10 = (2 * v6) | 1;
  do
  {
    v11 = __ldaxr((unsigned int *)v7);
    if (v11 != v8)
    {
      while (1)
      {
        __clrex();
        result = caulk::concurrent::details::spinloop::spin((uint64_t)&v18);
        do
          v12 = __ldaxr(v4);
        while (__stlxr(v12 + 1, v4));
        v13 = v5 + ((unint64_t)(v12 & 1) << 6);
        v14 = 2 * v12;
        atomic_store(2 * v12, (unsigned int *)v13);
        v15 = *a2;
        *(_OWORD *)(v13 + 17) = *(__int128 *)((char *)a2 + 9);
        *(_OWORD *)(v13 + 8) = v15;
        __dmb(0xBu);
        v16 = (2 * v12) | 1;
        while (1)
        {
          v17 = __ldaxr((unsigned int *)v13);
          if (v17 != v14)
            break;
          if (!__stlxr(v16, (unsigned int *)v13))
            goto LABEL_12;
        }
      }
    }
  }
  while (__stlxr(v10, (unsigned int *)v7));
LABEL_12:
  atomic_store(1u, v3);
  return result;
}

__n128 caulk::concurrent::atomic_value<std::optional<as::server::DeviceTimeObserver::AnchorInfo>,2,6>::load@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3;
  unsigned __int8 v5;
  char v6;
  char v7;
  char v8;
  char v9;
  unint64_t v10;
  unsigned int v11;
  __n128 result;
  __int128 v13;
  unsigned __int8 v14;
  int v15;

  v3 = atomic_load((unsigned __int8 *)a1);
  if ((v3 & 1) != 0)
  {
    v15 = 0;
    v5 = atomic_load((unsigned __int8 *)a1);
    if ((v5 & 1) == 0)
LABEL_12:
      caulk::concurrent::atomic_value<as::MinimalTimeStamp,2,3>::load();
    while (1)
    {
      v6 = atomic_load((unsigned int *)(a1 + 4));
      v7 = v6 - 1;
      v8 = 1;
      while (1)
      {
        v9 = v8;
        v10 = a1 + 64 + ((unint64_t)(v7 & 1) << 6);
        v11 = atomic_load((unsigned int *)v10);
        if ((v11 & 1) != 0)
          break;
        v8 = 0;
        --v7;
        if ((v9 & 1) == 0)
          goto LABEL_11;
      }
      result = *(__n128 *)(v10 + 8);
      v13 = *(_OWORD *)(v10 + 24);
      *(__n128 *)a2 = result;
      *(_OWORD *)(a2 + 16) = v13;
      __dmb(9u);
      if (v11 == *(_DWORD *)v10)
        break;
      caulk::concurrent::details::spinloop::spin((uint64_t)&v15);
LABEL_11:
      v14 = atomic_load((unsigned __int8 *)a1);
      if ((v14 & 1) == 0)
        goto LABEL_12;
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }
  return result;
}

unint64_t as::server::DeviceTimeObserver::SessionSlot::sessionState(as::server::DeviceTimeObserver::SessionSlot *this)
{
  unint64_t v2;
  unsigned int v3;

  v2 = caulk::ipc::mapped_memory::get_ptr<as::DTSharedBlock>((caulk::ipc::mapped_memory *)(*(_QWORD *)this + 16), 0);
  v3 = *((_DWORD *)this + 2);
  if (v3 >= 0x21F)
    std::__throw_out_of_range[abi:ne180100]("array::at");
  return v2 + 104 * v3 + 8;
}

unint64_t caulk::ipc::mapped_memory::get_raw_ptr(caulk::ipc::mapped_memory *this, unint64_t a2)
{
  uint64_t v3;

  if (*((_QWORD *)this + 1) <= a2)
  {
    _os_assert_log();
    v3 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v3);
  }
  return *(_QWORD *)this + a2;
}

unint64_t caulk::ipc::mapped_memory::get_ptr<as::DTSharedBlock>(caulk::ipc::mapped_memory *a1, unint64_t a2)
{
  uint64_t v3;

  if (a2 + 65456 > *((_QWORD *)a1 + 1))
  {
    _os_assert_log();
    v3 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v3);
  }
  return caulk::ipc::mapped_memory::get_raw_ptr(a1, a2);
}

BOOL as::server::LegacySessionManager::SessionIDIsValid(os_unfair_lock_s *this, int a2)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;

  as::server::LegacySessionManager::FindSession(this, a2, &v7);
  v3 = v7;
  v2 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v3 != 0;
}

uint64_t caulk::concurrent::atomic_value<as::SessionSharedState,2,3>::store(uint64_t result, __int128 *a2)
{
  unsigned __int8 *v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  __int128 v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  unsigned int v19;
  int v20;

  v3 = (unsigned __int8 *)result;
  v20 = 0;
  v4 = (unsigned int *)(result + 4);
  v5 = result + 8;
  do
    v6 = __ldaxr(v4);
  while (__stlxr(v6 + 1, v4));
  v7 = v5 + 48 * (v6 & 1);
  v8 = 2 * v6;
  atomic_store(2 * v6, (unsigned int *)v7);
  v9 = *a2;
  v10 = a2[1];
  *(_BYTE *)(v7 + 40) = *((_BYTE *)a2 + 32);
  *(_OWORD *)(v7 + 24) = v10;
  *(_OWORD *)(v7 + 8) = v9;
  __dmb(0xBu);
  v11 = (2 * v6) | 1;
  do
  {
    v12 = __ldaxr((unsigned int *)v7);
    if (v12 != v8)
    {
      while (1)
      {
        __clrex();
        result = caulk::concurrent::details::spinloop::spin((uint64_t)&v20);
        do
          v13 = __ldaxr(v4);
        while (__stlxr(v13 + 1, v4));
        v14 = v5 + 48 * (v13 & 1);
        v15 = 2 * v13;
        atomic_store(2 * v13, (unsigned int *)v14);
        v16 = *a2;
        v17 = a2[1];
        *(_BYTE *)(v14 + 40) = *((_BYTE *)a2 + 32);
        *(_OWORD *)(v14 + 24) = v17;
        *(_OWORD *)(v14 + 8) = v16;
        __dmb(0xBu);
        v18 = (2 * v13) | 1;
        while (1)
        {
          v19 = __ldaxr((unsigned int *)v14);
          if (v19 != v15)
            break;
          if (!__stlxr(v18, (unsigned int *)v14))
            goto LABEL_12;
        }
      }
    }
  }
  while (__stlxr(v11, (unsigned int *)v7));
LABEL_12:
  atomic_store(1u, v3);
  return result;
}

unint64_t as::server::DeviceTimeObserver::SharedBlockOwner::deviceTimeAtIdx(as::server::DeviceTimeObserver::SharedBlockOwner *this, unint64_t a2)
{
  unint64_t v3;

  v3 = caulk::ipc::mapped_memory::get_ptr<as::DTSharedBlock>((as::server::DeviceTimeObserver::SharedBlockOwner *)((char *)this + 16), 0);
  if (a2 >= 0x42)
    std::__throw_out_of_range[abi:ne180100]("array::at");
  return v3 + 136 * a2 + 56480;
}

uint64_t as::util::interpolateTimeStamp@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  __int128 v6;
  double v7;
  uint64_t v8;
  unint64_t v9;

  v3 = *(_QWORD *)(result + 8);
  v4 = a2 >= v3;
  v5 = a2 - v3;
  if (v4)
  {
    v7 = 1.0;
    v8 = *(_QWORD *)(result + 40);
    if (*(_BYTE *)result)
      v7 = *(double *)(result + 48);
    v9 = llround((double)v5 * 41.6666667 * v7) + *(_QWORD *)(result + 16);
    *(_BYTE *)a3 = *(_BYTE *)result;
    *(_BYTE *)(a3 + 1) = *(_BYTE *)(result + 1);
    *(_QWORD *)(a3 + 8) = a2;
    *(_QWORD *)(a3 + 16) = v9;
    *(_OWORD *)(a3 + 24) = *(_OWORD *)(result + 24);
    *(_QWORD *)(a3 + 40) = v8;
    *(double *)(a3 + 48) = v7;
  }
  else
  {
    v6 = *(_OWORD *)(result + 16);
    *(_OWORD *)a3 = *(_OWORD *)result;
    *(_OWORD *)(a3 + 16) = v6;
    *(_OWORD *)(a3 + 32) = *(_OWORD *)(result + 32);
    *(_QWORD *)(a3 + 48) = *(_QWORD *)(result + 48);
  }
  return result;
}

void __destroy_helper_block_ea8_32c176_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorjU8__strongPU24objcproto13OS_xpc_object8NSObjectjjEEEU13block_pointerFvDpT_ESD_iEUlS4_jS8_jjE_(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

}

uint64_t OpaqueObjectMgr::add(OpaqueObjectMgr *this, BaseOpaqueObject *a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  char v9;

  v4 = (unsigned int *)((char *)this + 144);
  do
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    if ((v5 & 0x80000000) != 0)
    {
      v6 = (v5 - 2147479552);
      while (1)
      {
        v7 = __ldaxr(v4);
        if (v7 != (_DWORD)v5)
          break;
        if (!__stlxr(v6, v4))
          goto LABEL_10;
      }
      __clrex();
    }
    else
    {
      v6 = v5;
    }
LABEL_10:
    v8 = caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::lookup<(caulk::concurrent::guarded_lookup_hash_table_options)0,void>((uint64_t)this, v6);
  }
  while (v9 && v8);
  caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::_addOrReplace((uint64_t)this, v6, (uint64_t)a2, 0);
  return v6;
}

uint64_t *caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned int)>>::lookup<(caulk::concurrent::guarded_lookup_hash_table_options)0,void>(uint64_t a1, int a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t *result;
  uint64_t v5;
  unsigned int v6;

  v2 = (unsigned int *)(a1 + 48);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  result = (uint64_t *)atomic_load((unint64_t *)(a1 + 40));
  if (result)
  {
    caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::table_impl::findSlotForKey(result, a2);
    if (v5)
      result = *(uint64_t **)(v5 + 8);
    else
      result = 0;
  }
  do
    v6 = __ldaxr(v2);
  while (__stlxr(v6 - 1, v2));
  return result;
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned int)>>::table_impl::findSlotForKey(uint64_t *a1, int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  int v17;

  v3 = *((_DWORD *)a1 + 2);
  v4 = *a1;
  v17 = a2;
  v5 = *(_QWORD *)(v4 + 24);
  if (!v5)
    goto LABEL_24;
  v7 = (*(unsigned int (**)(uint64_t, int *))(*(_QWORD *)v5 + 48))(v5, &v17) % *((_DWORD *)a1 + 2);
  if ((int)v7 >= 3)
    v8 = 0;
  else
    v8 = v3;
  v9 = (v7 + v8 - 3);
  v10 = 0xFFFFFFFFLL;
  v11 = 1;
  v12 = v7;
  while (1)
  {
    v13 = v9;
    v14 = atomic_load((unint64_t *)&a1[v12 + 2]);
    if (v14 != -1)
      break;
    if ((int)v10 >= 0)
      v10 = v10;
    else
      v10 = v12;
LABEL_13:
    if ((int)v9 >= 3)
      v15 = 0;
    else
      v15 = v3;
    v9 = (v9 + v15 - 3);
    v12 = v13;
    if ((_DWORD)v13 == (_DWORD)v7)
    {
      if ((v10 & 0x80000000) == 0)
      {
        v11 = 0;
        v12 = v10;
        return v11 | (v12 << 32);
      }
      __break(1u);
LABEL_24:
      std::__throw_bad_function_call[abi:ne180100]();
    }
  }
  if (v14)
  {
    if (*(_DWORD *)(v14 + 4) == a2)
      return v11 | (v12 << 32);
    goto LABEL_13;
  }
  v11 = 0;
  if ((int)v10 >= 0)
    v12 = v10;
  else
    v12 = v12;
  return v11 | (v12 << 32);
}

uint64_t std::__function::__func<OpaqueObjectMgr::OpaqueObjectMgr(void)::$_0,std::allocator<OpaqueObjectMgr::OpaqueObjectMgr(void)::$_0>,unsigned int ()(unsigned int)>::operator()(uint64_t a1, unsigned int *a2)
{
  return *a2;
}

BOOL caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned int)>>::_addOrReplace(uint64_t a1, int a2, uint64_t a3, int a4)
{
  std::mutex *v8;
  uint64_t *v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  _BOOL8 v14;

  v8 = (std::mutex *)(a1 + 80);
  std::mutex::lock((std::mutex *)(a1 + 80));
  v9 = (uint64_t *)atomic_load((unint64_t *)(a1 + 40));
  v10 = *(_DWORD *)(a1 + 32) + 1;
  *(_DWORD *)(a1 + 32) = v10;
  if (v9)
  {
    v11 = 16 * v10;
    v12 = *((_DWORD *)v9 + 2);
    if (v11 / v12 < 0xB)
      goto LABEL_6;
    v13 = 2 * v12;
  }
  else
  {
    v13 = 8;
  }
  v9 = (uint64_t *)caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::rehash((unint64_t *)a1, v13);
LABEL_6:
  v14 = caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::table_impl::addOrReplace(v9, a2, a3, a4);
  if (v14)
    caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::emptyReleasePool(a1);
  else
    --*(_DWORD *)(a1 + 32);
  std::mutex::unlock(v8);
  return v14;
}

void sub_1C896DEFC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned int)>>::emptyReleasePool(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t *i;
  uint64_t *v4;

  v1 = atomic_load((unsigned int *)(result + 48));
  if (v1 <= 0)
  {
    v2 = result;
    v4 = *(uint64_t **)(result + 56);
    for (i = *(uint64_t **)(result + 64);
          i != v4;
          result = std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::table_impl>>::reset[abi:ne180100](i, 0))
    {
      --i;
    }
    *(_QWORD *)(v2 + 64) = v4;
  }
  return result;
}

BOOL caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned int)>>::table_impl::addOrReplace(uint64_t *a1, int a2, uint64_t a3, int a4)
{
  uint64_t v8;
  unint64_t SlotForKey;
  unint64_t v10;

  SlotForKey = caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::table_impl::findSlotForKey(a1, a2);
  if ((SlotForKey & 1) != 0)
  {
    if (a4)
      *(_QWORD *)(v8 + 8) = a3;
  }
  else
  {
    v10 = operator new();
    *(_DWORD *)v10 = 0x10000;
    *(_DWORD *)(v10 + 4) = a2;
    *(_QWORD *)(v10 + 8) = a3;
    atomic_store(v10, (unint64_t *)&a1[HIDWORD(SlotForKey) + 2]);
  }
  return (SlotForKey & 1) == 0;
}

void as::server::AudioSessionInfo::~AudioSessionInfo(as::server::AudioSessionInfo *this)
{
  as *v2;
  uint64_t MXNotificationNames;
  id *v4;
  id *v5;
  NSString *v6;
  const __CFString **v7;
  const __CFString **v8;
  const __CFString *v9;
  __CFNotificationCenter *LocalCenter;
  void *v11;
  CFTypeRef cf;

  *(_QWORD *)this = &off_1E8205858;
  as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(this, &cf);
  if (cf)
  {
    CFRelease(cf);
    MXNotificationNames = as::GetMXNotificationNames(v2);
    v4 = *(id **)MXNotificationNames;
    v5 = *(id **)(MXNotificationNames + 8);
    while (v4 != v5)
    {
      v6 = (NSString *)*v4;
      as::server::AudioSessionInfo::RemoveMXNotificationListener(this, v6);

      ++v4;
    }
    while (v7 != v8)
    {
      v9 = *v7;
      LocalCenter = CFNotificationCenterGetLocalCenter();
      CFNotificationCenterRemoveObserver(LocalCenter, (const void *)*((unsigned int *)this + 2), v9, 0);
      ++v7;
    }
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 568));
  std::__list_imp<NSDictionary * {__strong}>::clear((uint64_t *)this + 68);
  cf = (char *)this + 512;
  std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)&cf);
  std::__tree<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::__map_value_compare<void const*,std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::less<void const*>,true>,std::allocator<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>>>::destroy((uint64_t)this + 480, *((_QWORD **)this + 61));
  v11 = (void *)*((_QWORD *)this + 57);
  if (v11)
  {
    *((_QWORD *)this + 58) = v11;
    operator delete(v11);
  }
  if (*((_BYTE *)this + 448))

  if (*((char *)this + 423) < 0)
    operator delete(*((void **)this + 50));
  if (*((char *)this + 391) < 0)
    operator delete(*((void **)this + 46));
  if (*((char *)this + 367) < 0)
    operator delete(*((void **)this + 43));
  std::unique_ptr<as::server::PickableRoute>::reset[abi:ne180100]((id **)this + 42, 0);

  as::server::ConstAudioSessionInfo::~ConstAudioSessionInfo(this);
}

{
  as::server::AudioSessionInfo::~AudioSessionInfo(this);
  JUMPOUT(0x1CAA38D28);
}

uint64_t as::server::AudioSessionInfo::RemoveMXNotificationListener(as::server::AudioSessionInfo *this, NSString *a2)
{
  NSString *v3;
  uint64_t v4;
  CFTypeRef cf;

  v3 = a2;
  CMNotificationCenterGetDefaultLocalCenter();
  as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(this, &cf);
  v4 = CMNotificationCenterRemoveListener();
  if (cf)
    CFRelease(cf);

  return v4;
}

void sub_1C896E1FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  applesauce::CF::ObjectRef<void const*>::~ObjectRef((const void **)va);

  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::dtoa_impl::grisu2_digit_gen(uint64_t a1, unsigned int *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10)
{
  unint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v44;
  uint64_t v45;
  _QWORD v46[2];
  _QWORD v47[2];

  v47[0] = a4;
  v47[1] = a5;
  v46[0] = a6;
  v46[1] = a7;
  v44 = a9;
  v45 = a10;
  if ((int)a10 <= -61)
    nlohmann::detail::dtoa_impl::grisu2_digit_gen();
  if ((int)a10 >= -31)
    nlohmann::detail::dtoa_impl::grisu2_digit_gen();
  v13 = nlohmann::detail::dtoa_impl::diyfp::sub((uint64_t)&v44, (uint64_t)v47);
  v14 = nlohmann::detail::dtoa_impl::diyfp::sub((uint64_t)&v44, (uint64_t)v46);
  v15 = -(int)v45;
  v16 = v44 >> -(char)v45;
  if (!(_DWORD)v16)
    nlohmann::detail::dtoa_impl::grisu2_digit_gen();
  v17 = v14;
  v18 = 1 << v15;
  v19 = (1 << v15) - 1;
  v20 = v19 & v44;
  if (v16 <= 0x3B9AC9FF)
  {
    if (v16 <= 0x5F5E0FF)
    {
      if (v16 <= 0x98967F)
      {
        if (v16 <= 0xF423F)
        {
          v23 = v16 >> 5;
          v24 = v16 >> 4;
          if (v16 <= 9)
            v25 = 1;
          else
            v25 = 10;
          if (v16 <= 9)
            v26 = 1;
          else
            v26 = 2;
          if (v16 <= 0x63)
            v27 = v26;
          else
            v27 = 3;
          if (v16 <= 0x63)
            v28 = v25;
          else
            v28 = 100;
          if (v16 <= 0x3E7)
            v29 = v27;
          else
            v29 = 4;
          if (v16 <= 0x3E7)
            v30 = v28;
          else
            v30 = 1000;
          if (v24 <= 0x270)
            v31 = v29;
          else
            v31 = 5;
          if (v24 <= 0x270)
            v32 = v30;
          else
            v32 = 10000;
          if (v23 <= 0xC34)
            v22 = v31;
          else
            v22 = 6;
          if (v23 > 0xC34)
            v21 = 100000;
          else
            v21 = v32;
        }
        else
        {
          v21 = 1000000;
          v22 = 7;
        }
      }
      else
      {
        v21 = 10000000;
        v22 = 8;
      }
    }
    else
    {
      v21 = 100000000;
      v22 = 9;
    }
  }
  else
  {
    v21 = 1000000000;
    v22 = 10;
  }
  v33 = v22 + 1;
  do
  {
    v34 = v16 / v21;
    if (v16 / v21 >= 0xA)
      nlohmann::detail::dtoa_impl::grisu2_digit_gen();
    v16 = v16 % v21;
    v35 = (int)*a2;
    *a2 = v35 + 1;
    *(_BYTE *)(a1 + v35) = v34 + 48;
    if ((v16 << v15) + v20 <= v13)
    {
      *a3 = *a3 + v33 - 2;
      v18 = (unint64_t)v21 << v15;
      v40 = (char *)*a2;
      v41 = a1;
      v42 = v13;
      v20 += v16 << v15;
      return nlohmann::detail::dtoa_impl::grisu2_round(v41, v40, v17, v42, v20, v18);
    }
    v21 /= 0xAu;
    --v33;
  }
  while (v33 > 1);
  if (v20 <= v13)
    nlohmann::detail::dtoa_impl::grisu2_digit_gen();
  v36 = 0;
  do
  {
    if (v20 >= 0x199999999999999ALL)
      nlohmann::detail::dtoa_impl::grisu2_digit_gen();
    v37 = (10 * v20) >> v15;
    if (v37 >= 0xA)
      nlohmann::detail::dtoa_impl::grisu2_digit_gen();
    v38 = (int)*a2;
    *a2 = v38 + 1;
    *(_BYTE *)(a1 + v38) = v37 + 48;
    v39 = 5 * v13;
    v20 = (10 * v20) & v19;
    v13 *= 10;
    v17 *= 10;
    --v36;
  }
  while (v20 > 2 * v39);
  *a3 += v36;
  v40 = (char *)*a2;
  v41 = a1;
  v42 = v13;
  return nlohmann::detail::dtoa_impl::grisu2_round(v41, v40, v17, v42, v20, v18);
}

uint64_t nlohmann::detail::dtoa_impl::diyfp::sub(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t result;
  const char *v4;
  int v5;

  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
  {
    v4 = "x.e == y.e";
    v5 = 66;
LABEL_6:
    __assert_rtn("sub", "to_chars.hpp", v5, v4);
  }
  v2 = *(_QWORD *)a1 >= *(_QWORD *)a2;
  result = *(_QWORD *)a1 - *(_QWORD *)a2;
  if (!v2)
  {
    v4 = "x.f >= y.f";
    v5 = 67;
    goto LABEL_6;
  }
  return result;
}

uint64_t nlohmann::detail::dtoa_impl::grisu2_round(uint64_t this, char *a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;

  if ((int)a2 <= 0)
    nlohmann::detail::dtoa_impl::grisu2_round();
  if (a3 > a4)
    nlohmann::detail::dtoa_impl::grisu2_round();
  if (a4 < a5)
    nlohmann::detail::dtoa_impl::grisu2_round();
  if (!a6)
    nlohmann::detail::dtoa_impl::grisu2_round();
  if (a5 < a3 && a4 - a5 >= a6)
  {
    v6 = ((_DWORD)a2 - 1);
    v7 = -(uint64_t)a5;
    v8 = a6 + a5;
    do
    {
      if (v8 >= a3 && a3 + v7 <= v8 - a3)
        break;
      v9 = *(unsigned __int8 *)(this + v6);
      if (v9 == 48)
        nlohmann::detail::dtoa_impl::grisu2_round();
      *(_BYTE *)(this + v6) = v9 - 1;
      if (v8 >= a3)
        break;
      v10 = a4 - a6 + v7;
      v7 -= a6;
      v8 += a6;
    }
    while (v10 >= a6);
  }
  return this;
}

uint64_t __copy_helper_block_ea8_32c154_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP12NSDictionaryS8_EEEU13block_pointerFvDpT_ESC_iEUlS4_S7_S7_E_(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  result = MEMORY[0x1CAA39148](*(_QWORD *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

uint64_t __copy_helper_block_ea8_32c168_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP32AVAudioSessionSpatialPreferencesEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E_(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  result = MEMORY[0x1CAA39148](*(_QWORD *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_ea8_32c168_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP32AVAudioSessionSpatialPreferencesEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E_(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

}

void __destroy_helper_block_ea8_32c154_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP12NSDictionaryS8_EEEU13block_pointerFvDpT_ESC_iEUlS4_S7_S7_E_(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

}

void as::server::AudioAppInfoImpl::GetSessions(as::server::AudioAppInfoImpl *this@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  char *v3;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v12;
  char *v13;
  BOOL v14;
  __int128 v15;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v2 = (char *)*((_QWORD *)this + 11);
  v3 = (char *)this + 96;
  if (v2 != (char *)this + 96)
  {
    while (1)
    {
      v5 = (std::__shared_weak_count *)*((_QWORD *)v2 + 6);
      if (v5)
        break;
LABEL_16:
      v12 = (char *)*((_QWORD *)v2 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(char **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (char *)*((_QWORD *)v2 + 2);
          v14 = *(_QWORD *)v13 == (_QWORD)v2;
          v2 = v13;
        }
        while (!v14);
      }
      v2 = v13;
      if (v13 == v3)
        return;
    }
    v6 = *((_QWORD *)v2 + 5);
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    *(_QWORD *)&v15 = 0;
    v9 = std::__shared_weak_count::lock(v5);
    *((_QWORD *)&v15 + 1) = v9;
    if (v9)
    {
      *(_QWORD *)&v15 = v6;
      if (!v6)
      {
LABEL_10:
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        std::__shared_weak_count::__release_weak(v5);
        goto LABEL_16;
      }
    }
    else if (!(_QWORD)v15)
    {
      goto LABEL_10;
    }
    std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::push_back[abi:ne180100]((char **)a2, &v15);
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
    goto LABEL_10;
  }
}

void sub_1C896E7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__shared_weak_count *v9;

  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::__shared_weak_count::__release_weak(v9);
  std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::shared_ptr<as::server::AudioAppRemoteClient>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t boost::container::vector<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,void>::erase@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v9;
  unint64_t i;
  uint64_t result;

  v4 = *a2;
  v5 = *a1;
  if (*a1 > *a2)
    goto LABEL_12;
  v7 = a1[1];
  if (!v5 && v7 != 0)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v9 = v5 + 32 * v7;
  if (v4 >= v9)
LABEL_12:
    boost::container::vector<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,void>::erase();
  for (i = v4 + 32; i != v9; i += 32)
  {
    *(_DWORD *)(i - 32) = *(_DWORD *)i;
    std::shared_ptr<as::WorkloopPool>::operator=[abi:ne180100](i - 24, (__int128 *)(i + 8));
    *(_WORD *)(i - 8) = *(_WORD *)(i + 24);
    *(_BYTE *)(i - 6) = *(_BYTE *)(i + 26);
  }
  result = std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100](v9 - 24);
  --a1[1];
  *a3 = v4;
  return result;
}

void sub_1C896E9D8(_Unwind_Exception *a1)
{
  void *v1;
  os_unfair_lock_s *v2;
  void *v3;

  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

applesauce::CF::StringRef *applesauce::CF::StringRef::StringRef(applesauce::CF::StringRef *this, CFTypeRef cf)
{
  CFTypeID v3;
  void *exception;

  *(_QWORD *)this = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFStringGetTypeID())
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1CAA38B30](exception, "Could not construct");
    }
  }
  return this;
}

void sub_1C896EA88(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

uint64_t as::server::DeviceTimeObserver::mapSessionToDevice(uint64_t *a1, unsigned int a2, int a3, const __CFString **a4, unint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  const __CFString *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  gsl::details *v23;
  uint64_t *v24;
  _QWORD **v26;
  _QWORD *v27;
  _QWORD **v28;
  uint64_t v29;
  unsigned int v30;
  _QWORD v31[2];
  _QWORD **v32;
  _QWORD *v33[2];
  uint64_t v34[2];
  uint64_t v35;
  const __CFString *v36;
  _BYTE v37[28];
  unsigned int v38;

  v38 = a2;
  as::server::DeviceTimeObserver::findSessionSlot((as::server::DeviceTimeObserver *)a1, a2, (uint64_t)v37);
  if (!v37[16])
    return 0;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::find(a1 + 3, &v38, v34);
  v9 = a1[3];
  v10 = a1[4];
  if (v9)
    v11 = 1;
  else
    v11 = v10 == 0;
  if (!v11)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v12 = v34[0];
  if (v34[0] == v9 + 32 * v10)
    return 0;
  v13 = *a4;
  if (v13)
    CFRetain(v13);
  v36 = v13;
  v14 = a1[6];
  v15 = a1[7];
  if (v14 != v15)
  {
    while (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((CFTypeRef *)(v14 + 8), &v36))
    {
      v14 += 96;
      if (v14 == v15)
      {
        v14 = v15;
        break;
      }
    }
    v13 = v36;
  }
  if (v13)
    CFRelease(v13);
  if (v14 == a1[7])
    return 0;
  v16 = as::server::DeviceTimeObserver::SessionSlot::sessionState((as::server::DeviceTimeObserver::SessionSlot *)v37);
  caulk::concurrent::atomic_value<as::SessionSharedState,2,3>::load(v16, (uint64_t)v34);
  v17 = *(std::__shared_weak_count **)(v12 + 16);
  v31[0] = *(_QWORD *)(v12 + 8);
  v31[1] = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  as::server::DeviceTimeObserver::getSourceAndSiblingIDs((uint64_t)v31, (uint64_t *)&v32);
  if (v17)
  {
    v20 = (unint64_t *)&v17->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v22 = v34;
  if (!a3)
    v22 = &v35;
  v23 = (gsl::details *)as::server::DeviceTimeObserver::removeReferringSessionsFromDevice((uint64_t)a1, a3, *(unsigned __int8 *)v22, &v32);
  if (0xAAAAAAAAAAAAAAABLL * ((v14 - a1[6]) >> 5) >= 0x100)
    gsl::details::terminate(v23);
  if (a3)
  {
    as::server::DeviceTimeObserver::SessionSlot::setDeviceIndex((as::server::DeviceTimeObserver::SessionSlot *)v37, 1, *(_BYTE *)(v14 + 16), (-85 * ((v14 - a1[6]) >> 5)), a5);
    v24 = (uint64_t *)(v14 + 24);
  }
  else
  {
    as::server::DeviceTimeObserver::SessionSlot::setDeviceIndex((as::server::DeviceTimeObserver::SessionSlot *)v37, 0, 0, (-85 * ((v14 - a1[6]) >> 5)), a5);
    v24 = (uint64_t *)(v14 + 48);
  }
  v26 = v32;
  if (v32 != v33)
  {
    do
    {
      v30 = *((_DWORD *)v26 + 7);
      boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::insert_unique(v24, &v30, (uint64_t)&v29);
      v27 = v26[1];
      if (v27)
      {
        do
        {
          v28 = (_QWORD **)v27;
          v27 = (_QWORD *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (_QWORD **)v26[2];
          v11 = *v28 == v26;
          v26 = v28;
        }
        while (!v11);
      }
      v26 = v28;
    }
    while (v28 != v33);
  }
  std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::destroy((uint64_t)&v32, v33[0]);
  return 1;
}

void sub_1C896ED38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15)
{
  std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::destroy((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

void std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::destroy(a1, *a2);
    std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

CFComparisonResult applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(CFTypeRef *a1, const __CFString **a2)
{
  const __CFString *v3;
  const __CFString *v4;
  CFComparisonResult v5;

  v3 = (const __CFString *)*a1;
  if (*a1)
  {
    CFRetain(*a1);
    v4 = *a2;
    if (!v4)
    {
      v5 = kCFCompareGreaterThan;
LABEL_9:
      CFRelease(v3);
      return v5;
    }
  }
  else
  {
    v4 = *a2;
    if (!*a2)
      return 0;
  }
  CFRetain(v4);
  if (v3)
    v5 = CFStringCompare(v3, v4, 0);
  else
    v5 = kCFCompareLessThan;
  CFRelease(v4);
  if (v3)
    goto LABEL_9;
  return v5;
}

void boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::insert_unique(uint64_t *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  char *v4;
  uint64_t v5;
  BOOL v6;
  _BOOL4 inserted;
  unsigned int *v10;
  char *v11;
  unsigned int *v12;
  char *v13;

  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 0;
  v11 = 0;
  v4 = (char *)*a1;
  v5 = a1[1];
  v13 = v4;
  if (v4)
    v6 = 1;
  else
    v6 = v5 == 0;
  if (!v6)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v12 = (unsigned int *)&v4[4 * v5];
  inserted = boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::priv_insert_unique_prepare((uint64_t)a1, (uint64_t *)&v13, &v12, a2, (unsigned int **)&v11);
  *(_BYTE *)(a3 + 8) = inserted;
  if (inserted)
  {
    v13 = v11;
    boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::emplace<unsigned int const&>(a1, &v13, a2, (char **)&v12);
    v10 = v12;
  }
  else
  {
    v10 = (unsigned int *)v11;
    if (!*a1 && v11)
      __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
  }
  *(_QWORD *)a3 = v10;
}

{
  char *v4;
  uint64_t v5;
  BOOL v6;
  _BOOL4 inserted;
  unsigned int *v10;
  char *v11;
  unsigned int *v12;
  char *v13;

  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 0;
  v11 = 0;
  v4 = (char *)*a1;
  v5 = a1[1];
  v13 = v4;
  if (v4)
    v6 = 1;
  else
    v6 = v5 == 0;
  if (!v6)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v12 = (unsigned int *)&v4[4 * v5];
  inserted = boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::priv_insert_unique_prepare((uint64_t)a1, (uint64_t *)&v13, &v12, a2, (unsigned int **)&v11);
  *(_BYTE *)(a3 + 8) = inserted;
  if (inserted)
  {
    v13 = v11;
    boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::emplace<unsigned int>(a1, &v13, a2, (char **)&v12);
    v10 = v12;
  }
  else
  {
    v10 = (unsigned int *)v11;
    if (!*a1 && v11)
      __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
  }
  *(_QWORD *)a3 = v10;
}

void boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::emplace<unsigned int const&>(uint64_t *a1@<X0>, char **a2@<X1>, _DWORD *a3@<X2>, char **a4@<X8>)
{
  char *v4;
  uint64_t v5;
  unint64_t v7;
  BOOL v8;
  char *v9;
  unint64_t v10;
  char *v12;

  v4 = *a2;
  v5 = *a1;
  if (*a1 > (unint64_t)*a2)
    goto LABEL_16;
  v7 = a1[1];
  if (v5)
    v8 = 1;
  else
    v8 = v7 == 0;
  if (!v8)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v9 = (char *)(v5 + 4 * v7);
  if (v4 > v9)
LABEL_16:
    boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::insert_unique();
  v10 = a1[2];
  if (v10 < v7)
    boost::container::vector<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>((uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
  if (v10 == v7)
  {
    boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int const&>>(a1, *a2, (const char *)1, a3, a4);
  }
  else
  {
    if (v9 == v4)
    {
      *(_DWORD *)v4 = *a3;
      a1[1] = v7 + 1;
    }
    else
    {
      *(_DWORD *)v9 = *((_DWORD *)v9 - 1);
      a1[1] = v7 + 1;
      v12 = v4;
      if (v9 - 4 != v4)
      {
        memmove(v4 + 4, v4, v9 - 4 - v4);
        v12 = *a2;
      }
      *(_DWORD *)v4 = *a3;
      v4 = v12;
    }
    *a4 = v4;
  }
}

BOOL boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::priv_insert_unique_prepare(uint64_t a1, uint64_t *a2, unsigned int **a3, unsigned int *a4, unsigned int **a5)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;

  v8 = *a2;
  v11 = *a3;
  v12 = v8;
  boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::priv_lower_bound<boost::container::vec_iterator<unsigned int *,true>,unsigned int>(&v12, &v11, a4, &v13);
  v9 = v13;
  *a5 = v13;
  if (v9 == *a3)
    return 1;
  if (!v9)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  return *a4 < *v9;
}

void boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::priv_lower_bound<boost::container::vec_iterator<unsigned int *,true>,unsigned int>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, unsigned int *a3@<X3>, _QWORD *a4@<X8>)
{
  _DWORD *v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int *v8;

  v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    v5 = (uint64_t)(*a2 - *a1) >> 2;
    v6 = *a3;
    v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4)
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      if (!v4)
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      v7 = v5 >> 1;
      v8 = &v4[v5 >> 1];
      if (*v8 < v6)
      {
        v4 = v8 + 1;
        *a1 = v8 + 1;
        v7 = v5 + ~v7;
      }
      v5 = v7;
    }
    while (v7);
  }
  *a4 = v4;
}

__n128 caulk::concurrent::atomic_value<as::SessionSharedState,2,3>::load@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3;
  unsigned __int8 v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  __n128 result;
  __int128 v15;
  unsigned __int8 v16;
  int v17;

  v3 = atomic_load((unsigned __int8 *)a1);
  if ((v3 & 1) != 0)
  {
    v17 = 0;
    v5 = atomic_load((unsigned __int8 *)a1);
    if ((v5 & 1) == 0)
LABEL_13:
      caulk::concurrent::atomic_value<as::MinimalTimeStamp,2,3>::load();
    v6 = a1 + 8;
    while (1)
    {
      v7 = atomic_load((unsigned int *)(a1 + 4));
      v8 = v7 - 1;
      v9 = 1;
      while (1)
      {
        v10 = v9;
        v11 = (unsigned int *)(v6 + 48 * (v8 & 1));
        v12 = atomic_load(v11);
        if ((v12 & 1) != 0)
          break;
        v9 = 0;
        --v8;
        if ((v10 & 1) == 0)
          goto LABEL_12;
      }
      v13 = v6 + 48 * (v8 & 1);
      result = *(__n128 *)(v13 + 8);
      v15 = *(_OWORD *)(v13 + 24);
      *(__n128 *)a2 = result;
      *(_OWORD *)(a2 + 16) = v15;
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(v13 + 40);
      __dmb(9u);
      if (v12 == *v11)
        break;
      caulk::concurrent::details::spinloop::spin((uint64_t)&v17);
LABEL_12:
      v16 = atomic_load((unsigned __int8 *)a1);
      if ((v16 & 1) == 0)
        goto LABEL_13;
    }
  }
  else
  {
    *(_BYTE *)a2 = -1;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = -1;
    *(_QWORD *)(a2 + 24) = 0;
    *(_BYTE *)(a2 + 32) = 0;
  }
  return result;
}

void as::server::LegacySessionManager::CreateSessionPriv(uint64_t a1@<X0>, as::server::SessionCreationDescription *a2@<X1>, void *a3@<X2>, void *a4@<X3>, __int128 *a5@<X8>)
{
  char *v9;
  NSObject *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  id v26;
  uint64_t v27;
  as::server *v28;
  uint64_t v29;
  gsl::details *v30;
  unint64_t v31;
  NSObject *v32;
  int v33;
  NSObject *v34;
  char *v35;
  std::string *v36;
  void **v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  _QWORD v43[2];
  char v44[8];
  uint64_t *v45;
  void *__p[2];
  char v47;
  void *v48;
  char v49;
  char v50[8];
  id v51;
  CFTypeRef cf;
  __int128 v53;
  id v54;
  id v55;
  _BYTE buf[18];
  __int16 v57;
  _BYTE v58[10];
  std::string *v59;
  __int16 v60;
  void **v61;
  std::string v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v55 = a3;
  v54 = a4;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 240));
  std::allocate_shared[abi:ne180100]<as::server::AudioSessionInfo,std::allocator<as::server::AudioSessionInfo>,as::server::SessionCreationDescription const&,NSXPCConnection * {__strong}&,objc_object  {objcproto28AVAudioSessionServerDelegate}* {__strong}&,void>((uint64_t)a2, &v55, &v54, a5);
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v9 = std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::emplace_back<std::shared_ptr<as::server::AudioSessionInfo>&>((char **)(a1 + 8), a5);
  if (a1)
    os_unfair_lock_unlock((os_unfair_lock_t)a1);
  if (*((_QWORD *)a2 + 11))
  {
    v10 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v9));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *(_DWORD *)(*(_QWORD *)a5 + 8);
      v12 = *(_DWORD *)(*((_QWORD *)a2 + 11) + 8);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "ServerSessionManager.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 256;
      v57 = 1024;
      *(_DWORD *)v58 = v11;
      *(_WORD *)&v58[4] = 1024;
      *(_DWORD *)&v58[6] = v12;
      _os_log_impl(&dword_1C895C000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Adding sibling session 0x%x for source session 0x%x", buf, 0x1Eu);
    }
    v13 = *((_QWORD *)a2 + 11);
    v14 = *((_QWORD *)a5 + 1);
    *(_QWORD *)&v53 = *(_QWORD *)a5;
    *((_QWORD *)&v53 + 1) = v14;
    if (v14)
    {
      v15 = (unint64_t *)(v14 + 16);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    as::server::AudioSessionInfo::AddSiblingSession(v13, &v53);
    if (*((_QWORD *)&v53 + 1))
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v53 + 1));
    v17 = *(_DWORD *)(*((_QWORD *)a2 + 11) + 8);
    v18 = v17 & 0xFFFFFF00;
    v19 = 0x100000000;
  }
  else
  {
    v19 = 0;
    LOBYTE(v17) = 0;
    v18 = 0;
  }
  as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(*(CFTypeRef *)a5, &cf);
  v20 = *(_QWORD *)(*(_QWORD *)a5 + 232);
  *(_QWORD *)buf = *(_QWORD *)(*(_QWORD *)a5 + 224);
  *(_QWORD *)&buf[8] = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  as::server::MXAccessor<as::server::ForbidACQ>::GetProperty((void *)*MEMORY[0x1E0D49528], (uint64_t)v50);
  v23 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v24 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v51;
  as::server::GetSpatialPreferences(v54, *(unsigned int *)(*(_QWORD *)a5 + 8), v26, (uint64_t)&v48);
  v27 = *(_QWORD *)a5;
  *(_BYTE *)(v27 + 432) = v49;
  as::server::AudioSessionInfo::SetSpatialPreferences(v27, v48);
  v29 = *(_QWORD *)(a1 + 248);
  if (v29)
  {
    os_unfair_lock_lock(*(os_unfair_lock_t *)(a1 + 248));
    as::server::DeviceTimeObserver::createSession((uint64_t *)(v29 + 8), *(_DWORD *)(*(_QWORD *)a5 + 8), v19 | v18 | v17, buf);
    if (buf[16])
    {
      v31 = *(unsigned int *)&buf[8] + 543 * *(_QWORD *)(*(_QWORD *)buf + 8);
      if (HIDWORD(v31))
        gsl::details::terminate(v30);
      *(_DWORD *)(*(_QWORD *)a5 + 536) = v31;
    }
    else
    {
      v32 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v30));
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        v33 = *(_DWORD *)(*(_QWORD *)a5 + 8);
        LODWORD(v62.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)v62.__r_.__value_.__r.__words + 4) = (std::string::size_type)"ServerSessionManager.mm";
        WORD2(v62.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&v62.__r_.__value_.__r.__words[1] + 6) = 290;
        WORD1(v62.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v62.__r_.__value_.__r.__words[2]) = v33;
        _os_log_impl(&dword_1C895C000, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d Session creation in DTO failed, session ID = 0x%x", (uint8_t *)&v62, 0x18u);
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)v29);
  }
  v34 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v28));
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    v35 = *(char **)a5;
    if (*(char *)(*(_QWORD *)a5 + 223) < 0)
      std::string::__init_copy_ctor_external(&v62, *((const std::string::value_type **)v35 + 25), *((_QWORD *)v35 + 26));
    else
      v62 = *(std::string *)(v35 + 200);
    if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = &v62;
    else
      v36 = (std::string *)v62.__r_.__value_.__r.__words[0];
    as::server::SessionCreationDescription::AsJSON(a2, (uint64_t)v44);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v44, -1, 0x20u, 0, 0, __p);
    if (v47 >= 0)
      v37 = __p;
    else
      v37 = (void **)__p[0];
    *(_DWORD *)buf = 136316162;
    *(_QWORD *)&buf[4] = "ServerSessionManager.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 296;
    v57 = 2080;
    *(_QWORD *)v58 = "create_session";
    *(_WORD *)&v58[8] = 2080;
    v59 = v36;
    v60 = 2080;
    v61 = v37;
    _os_log_impl(&dword_1C895C000, v34, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
    if (v47 < 0)
      operator delete(__p[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v44);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v45, v44[0]);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
  }

  if (!as::server::AudioApplicationInfo::IsSessionTypeIgnored(*(_DWORD *)(*(_QWORD *)a5 + 92)))
  {
    os_unfair_lock_lock((os_unfair_lock_t)a1);
    *(_QWORD *)buf = a1;
    *(_QWORD *)&buf[8] = a1 + 8;
    v38 = (std::__shared_weak_count *)*((_QWORD *)a5 + 1);
    v43[0] = *(_QWORD *)a5;
    v43[1] = v38;
    if (v38)
    {
      p_shared_owners = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldxr(p_shared_owners);
      while (__stxr(v40 + 1, p_shared_owners));
    }
    as::server::LegacySessionManager::PrivateAddSessionToApplication(a1, (uint64_t)buf, v43);
    if (v38)
    {
      v41 = (unint64_t *)&v38->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    if (*(_QWORD *)buf)
      os_unfair_lock_unlock(*(os_unfair_lock_t *)buf);
    as::server::LegacySessionManager::StartProcessMonitoring((os_unfair_lock_s *)a1, *(unsigned int *)(*(_QWORD *)a5 + 48));
  }

  if (cf)
    CFRelease(cf);

}

void sub_1C896F828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, const void *a20,uint64_t a21,std::__shared_weak_count *a22,void *a23,void *a24,char a25)
{
  uint64_t v25;
  void *v26;
  void *v27;

  applesauce::CF::ObjectRef<void const*>::~ObjectRef(&a20);
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100](v25);

  _Unwind_Resume(a1);
}

BOOL as::server::AudioApplicationInfo::IsSessionTypeIgnored(int a1)
{
  return a1 == 1702392942 || a1 == 1935830119;
}

char *std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::emplace_back<std::shared_ptr<as::server::AudioSessionInfo>&>(char **a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  uint64_t v29;
  int64x2_t v30;
  char *v31;
  uint64_t v32;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v32 = v4;
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v4, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = *a1;
    v22 = a1[1];
    if (v22 == *a1)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v16[16 * v12];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
      }
      while (v22 != v23);
      v26 = *(int64x2_t *)a1;
    }
    v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    v30 = v26;
    v27 = a1[2];
    a1[2] = &v16[16 * v17];
    v31 = v27;
    v29 = v26.i64[0];
    std::__split_buffer<std::shared_ptr<as::server::AudioAppRemoteClient>>::~__split_buffer((uint64_t)&v29);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
  return v11 - 16;
}

void as::server::LegacySessionManager::PrivateAddSessionToApplication(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  __CFString *v9;
  const __CFString *v10;
  __CFString *v11;
  __CFString *v12;
  os_unfair_lock_s *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  _BOOL8 v20;
  BOOL v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  NSObject *v25;
  _QWORD *v26;
  os_unfair_lock_s *v27;
  const char *v28;
  NSObject *v29;
  os_log_type_t v30;
  _QWORD *v31;
  os_unfair_lock_s *v32;
  os_unfair_lock_s *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  os_unfair_lock_s *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  as::server::AudioApplicationInfo *v54;
  std::__shared_weak_count *v55;
  char v56;
  id v57;
  __CFString *v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint8_t buf[4];
  const char *v70;
  __int16 v71;
  int v72;
  __int16 v73;
  _QWORD *v74;
  __int16 v75;
  os_unfair_lock_s *v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v6 = *a3;
  v7 = *(_OWORD *)(*a3 + 68);
  v66 = *(_OWORD *)(*a3 + 52);
  v67 = v7;
  v68 = *(_QWORD *)(v6 + 84);
  v8 = (_QWORD *)(v6 + 128);
  if (*(char *)(v6 + 151) < 0 && (v8 = (_QWORD *)*v8) == 0)
  {
    v11 = CFSTR("[implicit] (?)");
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v8);
    v9 = (__CFString *)objc_claimAutoreleasedReturnValue();
    v10 = CFSTR("(non-UTF8)");
    if (v9)
      v10 = v9;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("[implicit] %@"), v10);
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
  v57 = 0;
  v12 = v11;
  v58 = v12;
  v59 = v66;
  v60 = v67;
  v62 = v66;
  v63 = v67;
  v61 = v68;
  v64 = v68;
  v65 = 1886546285;
  as::server::LegacySessionManager::PrivateFindOrCreatePrimaryApplication(a1, a2, (uint64_t)&v57, 0, (uint64_t)&v54);
  v13 = (os_unfair_lock_s *)v54;
  if (!v54)
  {
    v47 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v47);
  }
  if (!v56)
  {
    v17 = (std::__shared_weak_count *)a3[1];
    v52 = *a3;
    v53 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    v20 = as::server::AudioApplicationInfo::AddSession(v13, &v52);
    v21 = v20;
    v22 = v53;
    if (!v53)
      goto LABEL_21;
    v23 = (unint64_t *)&v53->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
      if (v21)
      {
LABEL_22:
        v25 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v20));
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          v26 = (_QWORD *)(*a3 + 176);
          if (*(char *)(*a3 + 199) < 0)
            v26 = (_QWORD *)*v26;
          v27 = as::server::AudioApplicationInfo::DebugString((os_unfair_lock_s *)v54);
          *(_DWORD *)buf = 136315906;
          v70 = "ServerSessionManager.mm";
          v71 = 1024;
          v72 = 837;
          v73 = 2080;
          v74 = v26;
          v75 = 2080;
          v76 = v27;
          v28 = "%25s:%-5d Success - added newly-created session (%s) to app instance (%s)";
          v29 = v25;
          v30 = OS_LOG_TYPE_DEFAULT;
LABEL_32:
          _os_log_impl(&dword_1C895C000, v29, v30, v28, buf, 0x26u);
          goto LABEL_33;
        }
        goto LABEL_33;
      }
    }
    else
    {
LABEL_21:
      if (v20)
        goto LABEL_22;
    }
    v25 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v20));
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      v31 = (_QWORD *)(*a3 + 176);
      if (*(char *)(*a3 + 199) < 0)
        v31 = (_QWORD *)*v31;
      v32 = as::server::AudioApplicationInfo::DebugString((os_unfair_lock_s *)v54);
      *(_DWORD *)buf = 136315906;
      v70 = "ServerSessionManager.mm";
      v71 = 1024;
      v72 = 834;
      v73 = 2080;
      v74 = v31;
      v75 = 2080;
      v76 = v32;
      v28 = "%25s:%-5d Error - failed to add newly-created session (%s) to app instance (%s)";
      v29 = v25;
      v30 = OS_LOG_TYPE_ERROR;
      goto LABEL_32;
    }
LABEL_33:

    v33 = (os_unfair_lock_s *)v54;
    v34 = (std::__shared_weak_count *)a3[1];
    v50 = *a3;
    v51 = v34;
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    as::server::AudioApplicationInfo::ApplyMXProperties(v33, &v50);
    v37 = v51;
    if (v51)
    {
      v38 = (unint64_t *)&v51->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v40 = (os_unfair_lock_s *)v54;
    v41 = (std::__shared_weak_count *)a3[1];
    v48 = *a3;
    v49 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    as::server::AudioApplicationInfo::ApplyAppProperties(v40, &v48);
    v44 = v49;
    if (v49)
    {
      v45 = (unint64_t *)&v49->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
  }
  v14 = v55;
  if (v55)
  {
    v15 = (unint64_t *)&v55->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }

}

void sub_1C896FEBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, id a20,id a21)
{
  void *v21;
  void *v22;

  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void as::server::LegacySessionManager::StartProcessMonitoring(os_unfair_lock_s *this, uint64_t a2)
{
  os_unfair_lock_s *v4;
  char *v5;
  uint64_t **v6;
  char *v7;
  uint64_t **v8;
  int v9;
  BOOL v10;
  char **v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  as::server *v18;
  as::server *v19;
  NSObject *v20;
  void *v21;
  NSObject *v22;
  _QWORD v23[4];
  int v24;
  id v25;
  uint8_t buf[4];
  _BYTE v27[14];
  __int16 v28;
  int v29;
  __int16 v30;
  id v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = this + 14;
  os_unfair_lock_lock(this + 14);
  v7 = *(char **)&this[18]._os_unfair_lock_opaque;
  v6 = (uint64_t **)&this[18];
  v5 = v7;
  if (v7)
  {
    v8 = v6;
    do
    {
      v9 = *((_DWORD *)v5 + 8);
      v10 = v9 < (int)a2;
      if (v9 >= (int)a2)
        v11 = (char **)v5;
      else
        v11 = (char **)(v5 + 8);
      if (!v10)
        v8 = (uint64_t **)v5;
      v5 = *v11;
    }
    while (*v11);
    if (v8 != v6 && *((_DWORD *)v8 + 8) <= (int)a2)
    {
      v16 = 0;
      v17 = 0;
LABEL_19:
      os_unfair_lock_unlock(v4);
      goto LABEL_20;
    }
  }
  v12 = (void *)MEMORY[0x1E0D87D68];
  v13 = (void *)MEMORY[0x1E0D87DA0];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "predicateMatchingIdentifier:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = 0;
  objc_msgSend(v12, "handleForPredicate:error:", v15, &v25);
  v16 = (id)objc_claimAutoreleasedReturnValue();
  v17 = v25;

  if (!v16 || v17)
  {
    v22 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v18));
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)v27 = "ServerSessionManager.mm";
      *(_WORD *)&v27[8] = 1024;
      *(_DWORD *)&v27[10] = 1043;
      v28 = 1024;
      v29 = a2;
      v30 = 2112;
      v31 = v17;
      _os_log_impl(&dword_1C895C000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d Could not create process handle for PID %d, error = %@", buf, 0x22u);
    }
    goto LABEL_19;
  }
  *(_DWORD *)buf = a2;
  v16 = v16;
  *(_QWORD *)&v27[4] = v16;
  std::__tree<std::__value_type<int,RBSProcessHandle * {__strong}>,std::__map_value_compare<int,std::__value_type<int,RBSProcessHandle * {__strong}>,std::less<int>,true>,std::allocator<std::__value_type<int,RBSProcessHandle * {__strong}>>>::__emplace_unique_key_args<int,std::pair<int,RBSProcessHandle * {__strong}>>(v6 - 1, (int *)buf, (uint64_t)buf);

  os_unfair_lock_unlock(v4);
  v20 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v19));
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(v16, "name");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)v27 = "ServerSessionManager.mm";
    *(_WORD *)&v27[8] = 1024;
    *(_DWORD *)&v27[10] = 1049;
    v28 = 1024;
    v29 = a2;
    v30 = 2112;
    v31 = v21;
    _os_log_impl(&dword_1C895C000, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Start process monitoring, pid = %d, name = %@", buf, 0x22u);

  }
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 3221225472;
  v23[2] = ___ZN2as6server20LegacySessionManager22StartProcessMonitoringEi_block_invoke;
  v23[3] = &__block_descriptor_36_e52_v24__0__RBSProcessHandle_8__RBSProcessExitContext_16l;
  v24 = a2;
  objc_msgSend(v16, "monitorForDeath:", v23);
  v17 = 0;
LABEL_20:

}

void sub_1C897021C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void as::server::DeviceTimeObserver::createSession(uint64_t *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  gsl::details *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  as::server::DeviceTimeObserver::SharedBlockOwner *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *exception;
  uint64_t v53;
  std::__shared_weak_count *v54;
  __int16 v55;
  BOOL v56;
  as::server::DeviceTimeObserver::SharedBlockOwner *v57;
  std::__shared_weak_count *v58;
  __int128 v59;
  uint64_t v60;
  unsigned int v61;
  char *v62;
  as::server::DeviceTimeObserver::SharedBlockOwner *v63;
  as::server::DeviceTimeObserver::SharedBlockOwner *v64;
  char *v65;
  uint64_t *v66;
  char v67[16];

  v61 = a2;
  as::server::DeviceTimeObserver::findSessionSlot((as::server::DeviceTimeObserver *)a1, a2, (uint64_t)&v62);
  if ((_BYTE)v64)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1CAA38B30](exception, "DeviceTimeObserver: duplicate sessionID");
  }
  v8 = a3 & 0xFF00000000;
  v9 = (a3 & 0xFF00000000) != 0;
  if ((a3 & 0xFF00000000) == 0)
  {
    v21 = *a1;
    v22 = a1[1];
    if (*a1 != v22)
    {
      v23 = *a1;
      while (2)
      {
        v24 = 0;
        v25 = v23 + 56;
        do
        {
          v26 = *(_QWORD *)(v25 + 8 * (v24 >> 6));
          if (((1 << v24) & v26) == 0)
          {
            *(_QWORD *)(v25 + 8 * (v24 >> 6)) = (1 << v24) | v26;
            goto LABEL_42;
          }
          ++v24;
        }
        while (v24 != 543);
        v23 += 128;
        if (v23 != v22)
          continue;
        break;
      }
    }
    v27 = (uint64_t)(v22 - v21) >> 7;
    v28 = a1[2];
    if (v22 >= v28)
    {
      v30 = v27 + 1;
      if ((unint64_t)(v27 + 1) >> 57)
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      v31 = v28 - v21;
      if (v31 >> 6 > v30)
        v30 = v31 >> 6;
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFF80)
        v32 = 0x1FFFFFFFFFFFFFFLL;
      else
        v32 = v30;
      v66 = a1 + 2;
      if (v32)
        v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<as::server::DeviceTimeObserver::SharedBlockOwner>>((uint64_t)(a1 + 2), v32);
      else
        v33 = 0;
      v62 = v33;
      v63 = (as::server::DeviceTimeObserver::SharedBlockOwner *)&v33[128 * v27];
      v64 = v63;
      v65 = &v33[128 * v32];
      as::server::DeviceTimeObserver::SharedBlockOwner::SharedBlockOwner(v63, (as::server::DeviceTimeObserver *)a1, v27);
      v64 = (as::server::DeviceTimeObserver::SharedBlockOwner *)((char *)v64 + 128);
      std::vector<as::server::DeviceTimeObserver::SharedBlockOwner>::__swap_out_circular_buffer(a1, &v62);
      v29 = a1[1];
      v7 = (gsl::details *)std::__split_buffer<as::server::DeviceTimeObserver::SharedBlockOwner>::~__split_buffer((uint64_t)&v62);
    }
    else
    {
      v7 = as::server::DeviceTimeObserver::SharedBlockOwner::SharedBlockOwner((as::server::DeviceTimeObserver::SharedBlockOwner *)a1[1], (as::server::DeviceTimeObserver *)a1, (uint64_t)(v22 - v21) >> 7);
      v29 = v22 + 128;
      a1[1] = v29;
    }
    v24 = 0;
    a1[1] = v29;
    v23 = v29 - 128;
    v34 = v29 - 72;
    while (1)
    {
      v35 = *(_QWORD *)(v34 + 8 * (v24 >> 6));
      if (((1 << v24) & v35) == 0)
        break;
      if (++v24 == 543)
        as::server::DeviceTimeObserver::createDevice();
    }
    *(_QWORD *)(v34 + 8 * (v24 >> 6)) = (1 << v24) | v35;
LABEL_42:
    *(_QWORD *)&v59 = v23;
    DWORD2(v59) = v24;
    LOBYTE(v60) = 1;
    v36 = 543 * *(_QWORD *)(v23 + 8) + v24;
    if (!HIDWORD(v36))
    {
      v19 = operator new(0x40uLL);
      v19[1] = 0;
      v19[2] = 0;
      *v19 = &off_1E8205400;
      *((_DWORD *)v19 + 6) = v36;
      v20 = (as::server::DeviceTimeObserver::SharedBlockOwner *)(v19 + 3);
      v37 = v61;
      *((_BYTE *)v19 + 28) = 1;
      *((_DWORD *)v19 + 8) = v37;
      *((_WORD *)v19 + 18) = 0;
      v19[7] = 0;
      v19[6] = 0;
      v19[5] = v19 + 6;
      v10 = a1 + 3;
      v57 = (as::server::DeviceTimeObserver::SharedBlockOwner *)(v19 + 3);
      v58 = (std::__shared_weak_count *)v19;
LABEL_44:
      v38 = v19 + 1;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
      goto LABEL_46;
    }
LABEL_72:
    gsl::details::terminate(v7);
  }
  as::server::DeviceTimeObserver::findSessionSlot((as::server::DeviceTimeObserver *)a1, a3, (uint64_t)&v59);
  if (!(_BYTE)v60)
  {
    *a4 = 0;
    a4[16] = 0;
    return;
  }
  LODWORD(v53) = a3;
  v10 = a1 + 3;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::find(a1 + 3, (unsigned int *)&v53, (uint64_t *)&v62);
  v11 = a1[3];
  v12 = a1[4];
  if (!v11 && v12)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  if (v62 == (char *)(v11 + 32 * v12))
    as::server::DeviceTimeObserver::createSession();
  v13 = *((_QWORD *)v62 + 1);
  v14 = (std::__shared_weak_count *)*((_QWORD *)v62 + 2);
  v57 = (as::server::DeviceTimeObserver::SharedBlockOwner *)v13;
  v58 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  if (!v13)
  {
    v49 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v49);
  }
  if (!*(_BYTE *)(v13 + 4))
    std::__throw_bad_optional_access[abi:ne180100]();
  v17 = DWORD2(v59) + 543 * *(_QWORD *)(v59 + 8);
  if (HIDWORD(v17))
    goto LABEL_72;
  if (*(_DWORD *)v13 != (_DWORD)v17)
  {
    v50 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v50);
  }
  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)(v13 + 16), &v61, &v61);
  if (!v18)
  {
    v51 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v51);
  }
  v20 = v57;
  v19 = &v58->__vftable;
  if (v58)
    goto LABEL_44;
LABEL_46:
  v55 = 0;
  v56 = v9;
  LODWORD(v62) = v61;
  v63 = v20;
  v64 = (as::server::DeviceTimeObserver::SharedBlockOwner *)v19;
  v53 = 0;
  v54 = 0;
  LOWORD(v65) = 0;
  BYTE2(v65) = v9;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::insert_unique(v10, (unsigned int *)&v62, (uint64_t)v67);
  v40 = (std::__shared_weak_count *)v64;
  if (v64)
  {
    v41 = (unint64_t *)((char *)v64 + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = v54;
  if (!v54)
    goto LABEL_55;
  v44 = (unint64_t *)&v54->__shared_owners_;
  do
    v45 = __ldaxr(v44);
  while (__stlxr(v45 - 1, v44));
  if (!v45)
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
    if (v8)
      goto LABEL_56;
  }
  else
  {
LABEL_55:
    if (v8)
    {
LABEL_56:
      if (!(_BYTE)v60)
        std::__throw_bad_optional_access[abi:ne180100]();
      as::server::DeviceTimeObserver::addSiblingToSameReferringSessionListsAsSource((as::server::DeviceTimeObserver *)a1, v61, (const as::server::DeviceTimeObserver::SessionSlot *)&v59);
    }
  }
  *(_OWORD *)a4 = v59;
  *((_QWORD *)a4 + 2) = v60;
  v46 = v58;
  if (v58)
  {
    v47 = (unint64_t *)&v58->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
}

void sub_1C8970748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)(v18 + 8) = v19;
  _Unwind_Resume(exception_object);
}

void as::server::DeviceTimeObserver::findSessionSlot(as::server::DeviceTimeObserver *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int *v8;
  unsigned int v9;
  unint64_t v10;
  char v11;
  unsigned int v12;
  uint64_t v13;

  v12 = a2;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::find((uint64_t *)this + 3, &v12, &v13);
  v5 = *((_QWORD *)this + 3);
  v6 = *((_QWORD *)this + 4);
  if (v5)
    v7 = 1;
  else
    v7 = v6 == 0;
  if (!v7)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  if (v13 == v5 + 32 * v6)
    goto LABEL_10;
  v8 = *(int **)(v13 + 8);
  if (!*((_BYTE *)v8 + 4))
    std::__throw_bad_optional_access[abi:ne180100]();
  v9 = *v8;
  v10 = v9 / 0x21FuLL;
  if (v10 >= (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 7)
  {
LABEL_10:
    v11 = 0;
    *(_BYTE *)a3 = 0;
  }
  else
  {
    *(_QWORD *)a3 = *(_QWORD *)this + (v10 << 7);
    *(_DWORD *)(a3 + 8) = v9 % 0x21F;
    v11 = 1;
  }
  *(_BYTE *)(a3 + 16) = v11;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::find(uint64_t *a1@<X0>, unsigned int *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *a1;
  v5 = a1[1];
  v14 = v4;
  if (v4)
    v6 = 1;
  else
    v6 = v5 == 0;
  if (!v6)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v13 = v4 + 32 * v5;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,false>,unsigned int>(&v14, &v13, a2, a3);
  v9 = a1[1];
  if (*a1)
    v10 = 1;
  else
    v10 = v9 == 0;
  if (!v10)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v11 = *a1 + 32 * v9;
  v12 = (unsigned int *)*a3;
  if (*a3 != v11)
  {
    if (!v12)
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    if (*a2 < *v12)
      *a3 = v11;
  }
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,false>,unsigned int>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, unsigned int *a3@<X3>, _QWORD *a4@<X8>)
{
  _DWORD *v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int *v8;

  v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    v5 = (uint64_t)(*a2 - *a1) >> 5;
    v6 = *a3;
    v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4)
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      if (!v4)
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      v7 = v5 >> 1;
      v8 = &v4[8 * (v5 >> 1)];
      if (*v8 < v6)
      {
        v4 = v8 + 8;
        *a1 = v8 + 8;
        v7 = v5 + ~v7;
      }
      v5 = v7;
    }
    while (v7);
  }
  *a4 = v4;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::insert_unique(uint64_t *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  _BOOL4 inserted;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;

  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 0;
  v13 = 0;
  v4 = *a1;
  v5 = a1[1];
  v15 = (unsigned int *)v4;
  if (v4)
    v6 = 1;
  else
    v6 = v5 == 0;
  if (!v6)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v14 = (unsigned int *)(v4 + 32 * v5);
  inserted = boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::priv_insert_unique_prepare((uint64_t)a1, (uint64_t *)&v15, &v14, a2, &v13);
  *(_BYTE *)(a3 + 8) = inserted;
  if (inserted)
  {
    v15 = v13;
    v10 = *a1;
    if (*a1 > (unint64_t)v13)
      goto LABEL_15;
    v11 = a1[1];
    if (!v10 && v11)
      __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
    if ((unint64_t)v13 > v10 + 32 * v11)
LABEL_15:
      boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::insert_unique();
    boost::container::vector<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>(a1, (uint64_t *)&v15, (const char *)1, (uint64_t)a2, (uint64_t *)&v14);
    v12 = v14;
  }
  else
  {
    v12 = v13;
    if (!*a1 && v13)
      __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
  }
  *(_QWORD *)a3 = v12;
}

void boost::container::vector<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char v15;
  __int16 v16;

  v6 = a1[1];
  v7 = a1[2];
  if (v7 < v6)
    boost::container::vector<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>((uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
  v10 = *a2;
  if (v7 - v6 < (unint64_t)a3)
  {
    boost::container::vector<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>(a1, *a2, a3, a4, a5);
  }
  else
  {
    if (v7 == v6)
      boost::container::vector<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>();
    v11 = *a1 + 32 * v6;
    if (v11 == v10)
    {
      *(_DWORD *)v10 = *(_DWORD *)a4;
      *(_OWORD *)(v11 + 8) = *(_OWORD *)(a4 + 8);
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      v16 = *(_WORD *)(a4 + 24);
      *(_BYTE *)(v11 + 26) = *(_BYTE *)(a4 + 26);
      *(_WORD *)(v11 + 24) = v16;
      ++a1[1];
    }
    else
    {
      v12 = v11 - 32;
      *(_DWORD *)v11 = *(_DWORD *)(v11 - 32);
      *(_OWORD *)(v11 + 8) = *(_OWORD *)(v11 - 24);
      *(_QWORD *)(v11 - 24) = 0;
      *(_QWORD *)(v11 - 16) = 0;
      *(_WORD *)(v11 + 24) = *(_WORD *)(v11 - 8);
      *(_BYTE *)(v11 + 26) = *(_BYTE *)(v11 - 6);
      ++a1[1];
      if (v11 - 32 != v10)
      {
        v13 = v11 - 32;
        do
        {
          v14 = *(_DWORD *)(v13 - 32);
          v13 -= 32;
          *(_DWORD *)v12 = v14;
          std::shared_ptr<as::WorkloopPool>::operator=[abi:ne180100](v12 + 8, (__int128 *)(v12 - 24));
          *(_WORD *)(v12 + 24) = *(_WORD *)(v12 - 8);
          *(_BYTE *)(v12 + 26) = *(_BYTE *)(v12 - 6);
          v12 = v13;
        }
        while (v13 != v10);
      }
      *(_DWORD *)v10 = *(_DWORD *)a4;
      std::shared_ptr<as::WorkloopPool>::operator=[abi:ne180100](v10 + 8, (__int128 *)(a4 + 8));
      v15 = *(_BYTE *)(a4 + 26);
      *(_WORD *)(v10 + 24) = *(_WORD *)(a4 + 24);
      *(_BYTE *)(v10 + 26) = v15;
    }
    *a5 = *a2;
  }
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::priv_insert_unique_prepare(uint64_t a1, uint64_t *a2, unsigned int **a3, unsigned int *a4, unsigned int **a5)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;

  v8 = *a2;
  v11 = *a3;
  v12 = v8;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,true>,unsigned int>(&v12, &v11, a4, &v13);
  v9 = v13;
  *a5 = v13;
  if (v9 == *a3)
    return 1;
  if (!v9)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  return *a4 < *v9;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,true>,unsigned int>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, unsigned int *a3@<X3>, _QWORD *a4@<X8>)
{
  _DWORD *v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int *v8;

  v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    v5 = (uint64_t)(*a2 - *a1) >> 5;
    v6 = *a3;
    v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4)
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      if (!v4)
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      v7 = v5 >> 1;
      v8 = &v4[8 * (v5 >> 1)];
      if (*v8 < v6)
      {
        v4 = v8 + 8;
        *a1 = v8 + 8;
        v7 = v5 + ~v7;
      }
      v5 = v7;
    }
    while (v7);
  }
  *a4 = v4;
}

uint64_t **std::__tree<std::__value_type<int,RBSProcessHandle * {__strong}>,std::__map_value_compare<int,std::__value_type<int,RBSProcessHandle * {__strong}>,std::less<int>,true>,std::allocator<std::__value_type<int,RBSProcessHandle * {__strong}>>>::__emplace_unique_key_args<int,std::pair<int,RBSProcessHandle * {__strong}>>(uint64_t **a1, int *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  _DWORD *v10;
  uint64_t v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = operator new(0x30uLL);
    v10[8] = *(_DWORD *)a3;
    v11 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    *((_QWORD *)v10 + 5) = v11;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void as::server::LegacySessionManager::PrivateCreateAudioAppImpl(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, _QWORD *a5@<X8>)
{
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;
  as::server *v12;
  char v13;
  char v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  NSObject *v18;
  int v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  _DWORD *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  id v47[2];
  std::__shared_weak_count *v48;
  _BYTE buf[40];
  __int128 v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v47[0] = a4;
  std::allocate_shared[abi:ne180100]<as::server::AudioApplicationInfo,std::allocator<as::server::AudioApplicationInfo>,as::server::ApplicationCreationDescription const&,NSXPCConnection * {__strong}&,void>(a3, v47, &v46);
  v9 = *(_OWORD *)(a3 + 72);
  *(_OWORD *)buf = *(_OWORD *)(a3 + 56);
  *(_OWORD *)&buf[16] = v9;
  *(_QWORD *)&buf[32] = *(_QWORD *)(a3 + 88);
  v50 = v46;
  if (*((_QWORD *)&v46 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = (as::server *)std::__tree<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::__map_value_compare<as::server::ProcessIdentity,std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::less<as::server::ProcessIdentity>,true>,std::allocator<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>>>::__emplace_unique_key_args<as::server::ProcessIdentity,std::pair<as::server::ProcessIdentity const,std::shared_ptr<as::server::AudioApplicationInfo>>>((uint64_t **)(a1 + 32), (uint64_t)buf, (uint64_t)buf);
  v14 = v13;
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
  if (!*((_QWORD *)&v50 + 1))
    goto LABEL_8;
  v16 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if ((v14 & 1) == 0)
      goto LABEL_9;
  }
  else
  {
LABEL_8:
    if ((v13 & 1) == 0)
    {
LABEL_9:
      v18 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v12));
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        v19 = *(_DWORD *)(a3 + 92);
        v20 = *(_QWORD *)(a3 + 8);
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "ServerSessionManager.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 666;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v19;
        *(_WORD *)&buf[24] = 2112;
        *(_QWORD *)&buf[26] = v20;
        _os_log_impl(&dword_1C895C000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d Error - failed to add process (pid: %d, process: %@) to audio app map", buf, 0x22u);
      }
      *a5 = 0;
      a5[1] = 0;
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
      if (*((_QWORD *)&v46 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      goto LABEL_47;
    }
  }
  v24 = *(_QWORD *)(a2 + 8);
  v25 = *(_QWORD **)v24;
  v26 = *(_QWORD **)(v24 + 8);
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
  v44 = v46;
  if (*((_QWORD *)&v46 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v45 = a3;
  if (v25 != v26)
  {
    do
    {
      v31 = (_DWORD *)*v25;
      v30 = (std::__shared_weak_count *)v25[1];
      v47[1] = *(id *)v25;
      v48 = v30;
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v33 = __ldxr(p_shared_owners);
        while (__stxr(v33 + 1, p_shared_owners));
      }
      if (as::server::ProcessIdentity::operator==((uint64_t)(v31 + 13), v45 + 56)
        && !as::server::AudioApplicationInfo::IsSessionTypeIgnored(v31[23]))
      {
        *(_QWORD *)buf = v31;
        *(_QWORD *)&buf[8] = v30;
        if (v30)
        {
          v34 = (unint64_t *)&v30->__shared_owners_;
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
        }
        as::server::AudioApplicationInfo::AddSession((os_unfair_lock_s *)v44, (uint64_t *)buf);
        v36 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v37 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      v39 = v48;
      if (v48)
      {
        v40 = (unint64_t *)&v48->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v25 += 2;
    }
    while (v25 != v26);
    v27 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
  }
  if (v27)
  {
    v42 = (unint64_t *)&v27->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  *(_OWORD *)a5 = v46;
LABEL_47:

}

void sub_1C89712B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, id a16)
{
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a13);

  _Unwind_Resume(a1);
}

BOOL as::server::AudioApplicationInfo::AddSession(os_unfair_lock_s *a1, uint64_t *a2)
{
  os_unfair_lock_s *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BOOL8 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v3 = a1 + 4;
  v4 = (uint64_t)&a1[6];
  os_unfair_lock_lock(a1 + 4);
  v5 = (std::__shared_weak_count *)a2[1];
  v13 = *a2;
  v14 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = as::server::AudioAppInfoImpl::AddSession(v4, &v13);
  v9 = v14;
  if (v14)
  {
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  os_unfair_lock_unlock(v3);
  return v8;
}

void sub_1C89713C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  os_unfair_lock_s *v9;

  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  os_unfair_lock_unlock(v9);
  _Unwind_Resume(a1);
}

BOOL as::server::AudioAppInfoImpl::AddSession(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  __int128 v5;
  _BOOL8 v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  int v11;
  unint64_t v12;
  NSObject *v13;
  int v14;
  _BOOL8 v15;
  char v16;
  char v17;
  _OWORD v19[2];
  uint64_t v20;
  uint8_t buf[4];
  _BYTE v22[20];
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = *(_OWORD *)(*a2 + 68);
  v19[0] = *(_OWORD *)(*a2 + 52);
  v19[1] = v5;
  v20 = *(_QWORD *)(v4 + 84);
  v6 = as::server::ProcessIdentity::operator==((uint64_t)v19, a1 + 16);
  if (v6)
  {
    v7 = *a2;
    v8 = (std::__shared_weak_count *)a2[1];
    if (v8)
    {
      p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
      do
        v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
      v11 = *(_DWORD *)(*a2 + 8);
      *(_QWORD *)&v22[12] = v8;
      do
        v12 = __ldxr(p_shared_weak_owners);
      while (__stxr(v12 + 1, p_shared_weak_owners));
    }
    else
    {
      v11 = *(_DWORD *)(v7 + 8);
      *(_QWORD *)&v22[12] = 0;
    }
    *(_DWORD *)buf = v11;
    *(_QWORD *)&v22[4] = v7;
    v23 = 0;
    std::__tree<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,as::server::AudioAppInfoImpl::SessionDetails>>((uint64_t **)(a1 + 88), (unsigned int *)buf, (uint64_t)buf);
    v17 = v16;
    if (*(_QWORD *)&v22[12])
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v22[12]);
    v15 = v17 != 0;
    if (v8)
      std::__shared_weak_count::__release_weak(v8);
  }
  else
  {
    v13 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v6));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = *(_DWORD *)(a1 + 52);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)v22 = "AudioApplicationInfoImpl.mm";
      *(_WORD *)&v22[8] = 1024;
      *(_DWORD *)&v22[10] = 419;
      *(_WORD *)&v22[14] = 1024;
      *(_DWORD *)&v22[16] = HIDWORD(v20);
      v23 = 1024;
      v24 = v14;
      _os_log_impl(&dword_1C895C000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d Error - session (source pid:%d) does not match that of app (pid:%d) being added to", buf, 0x1Eu);
    }
    return 0;
  }
  return v15;
}

void sub_1C8971574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  std::__shared_weak_count *v17;

  if (a17)
    std::__shared_weak_count::__release_weak(a17);
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,as::server::AudioAppInfoImpl::SessionDetails>>(uint64_t **a1, unsigned int *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  char *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (char *)operator new(0x40uLL);
    *((_DWORD *)v10 + 8) = *(_DWORD *)a3;
    *(_OWORD *)(v10 + 40) = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *((_WORD *)v10 + 28) = *(_WORD *)(a3 + 24);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

_OWORD *std::__tree<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::__map_value_compare<as::server::ProcessIdentity,std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::less<as::server::ProcessIdentity>,true>,std::allocator<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>>>::__emplace_unique_key_args<as::server::ProcessIdentity,std::pair<as::server::ProcessIdentity const,std::shared_ptr<as::server::AudioApplicationInfo>>>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  __int128 v8;
  _QWORD v10[2];
  char v11;
  uint64_t v12;

  v5 = (void **)std::__tree<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::__map_value_compare<as::server::ProcessIdentity,std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::less<as::server::ProcessIdentity>,true>,std::allocator<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>>>::__find_equal<as::server::ProcessIdentity>((uint64_t)a1, &v12, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x58uLL);
    v10[1] = a1 + 1;
    v8 = *(_OWORD *)(a3 + 16);
    v6[2] = *(_OWORD *)a3;
    v6[3] = v8;
    *((_QWORD *)v6 + 8) = *(_QWORD *)(a3 + 32);
    *(_OWORD *)((char *)v6 + 72) = *(_OWORD *)(a3 + 40);
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    v11 = 1;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v12, v7, (uint64_t *)v6);
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v6;
}

uint64_t as::server::AudioApplicationInfo::AudioApplicationInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  as::server::AudioAppInfoImpl::AudioAppInfoImpl(a1 + 24, a2, a3, a1);
  return a1;
}

void sub_1C897175C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

uint64_t as::server::AudioAppInfoImpl::AudioAppInfoImpl(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  id v10;
  __CFString *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  id v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20[2];

  v17 = a3;
  *(_QWORD *)a1 = a4;
  *(_QWORD *)(a1 + 8) = 0;
  v7 = *(_QWORD *)(a2 + 88);
  v8 = *(_OWORD *)(a2 + 72);
  v9 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 16) = v9;
  *(_OWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = CFSTR("?");
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 112) = a1 + 120;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  if (as::server::DefaultAudioAppState(void)::onceToken != -1)
    dispatch_once(&as::server::DefaultAudioAppState(void)::onceToken, &__block_literal_global);
  v10 = (id)as::server::DefaultAudioAppState(void)::sDefaultState;
  if (as::server::DefaultMXState(void)::onceToken != -1)
    dispatch_once(&as::server::DefaultMXState(void)::onceToken, &__block_literal_global_77);
  as::AudioAppState::AudioAppState((_QWORD *)(a1 + 152), v10, (void *)as::server::DefaultMXState(void)::sDefaultState);

  if (*(_QWORD *)(a2 + 96) == 1886546285)
  {
    if (*(_QWORD *)(a2 + 8))
      v11 = *(__CFString **)(a2 + 8);
    else
      v11 = CFSTR("?");
    objc_storeStrong((id *)(a1 + 56), v11);
  }
  v20[0] = 0;
  v20[1] = 0;
  as::server::AudioAppInfoImpl::UpdateDebugString(a1, v20);
  v12 = *(_QWORD *)(a2 + 96);
  if (v12 == 1684825972)
  {
    as::server::AudioAppInfoImpl::AddDelegateAudioApp(a1, a2, v17, &v18);
    v13 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  else if (v12 == 1886546285 && v17)
  {
    as::server::AudioAppInfoImpl::SetPrimaryClient(a1, a2, v17);
  }

  return a1;
}

void sub_1C897197C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id *v17;
  void **v18;

  as::AudioAppState::~AudioAppState(v17);
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100](v16);
  std::__tree<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>>>::destroy(v15, *(_QWORD **)(v13 + 120));
  std::__tree<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>>>::destroy(v14, *(_QWORD **)(v13 + 96));
  if (*(char *)(v13 + 87) < 0)
    operator delete(*v18);

  _Unwind_Resume(a1);
}

void as::server::AudioAppInfoImpl::UpdateDebugString(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  char v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned __int8 v9;
  uint64_t *v10;
  id v11;
  void *v12;
  uint64_t *v13;
  char v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  __CFString *v18;
  __CFString *v19;
  int v20;
  void **v21;
  uint64_t *v22;
  uint64_t *v23;
  char v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  unsigned __int8 v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  unsigned __int8 v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  char v38;
  uint64_t *v39;
  void **v40;
  NSObject *v41;
  _QWORD *v42;
  _BYTE v43[8];
  uint64_t *v44;
  unsigned __int8 v45[8];
  uint64_t *v46;
  unsigned __int8 v47[8];
  uint64_t *v48;
  _BYTE v49[8];
  uint64_t *v50;
  _BYTE v51[8];
  uint64_t *v52;
  unsigned __int8 v53[8];
  uint64_t *v54;
  _BYTE v55[8];
  uint64_t *v56;
  unsigned __int8 v57[8];
  uint64_t *v58;
  _BYTE v59[28];
  char __s;
  int v61;
  __int16 v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v57[0] = 0;
  v58 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v57);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v57);
  *(_QWORD *)v59 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v55, (char **)v59);
  v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v57, "name");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v55);
  v5 = *(_BYTE *)v4;
  *(_BYTE *)v4 = v55[0];
  v55[0] = v5;
  v6 = (uint64_t *)v4[1];
  v4[1] = (uint64_t)v56;
  v56 = v6;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v55);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v56, v55[0]);
  v7 = (uint64_t *)*(int *)(a1 + 52);
  v53[0] = 5;
  v54 = v7;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v53);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v53);
  v8 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v57, "pid");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v53);
  v9 = *(_BYTE *)v8;
  *(_BYTE *)v8 = v53[0];
  v53[0] = v9;
  v10 = (uint64_t *)v8[1];
  v8[1] = (uint64_t)v54;
  v54 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v53);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v54, v53[0]);
  v11 = *(id *)(a1 + 8);
  v12 = v11;
  if (v11)
  {
    *(_QWORD *)v59 = objc_msgSend(objc_retainAutorelease(v11), "UTF8String");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v51, (char **)v59);
    v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v57, "attribution");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v51);
    v14 = *(_BYTE *)v13;
    *(_BYTE *)v13 = v51[0];
    v51[0] = v14;
    v15 = (uint64_t *)v13[1];
    v13[1] = (uint64_t)v52;
    v52 = v15;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v51);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v52, v51[0]);
  }
  v16 = *a2;
  if (*a2)
  {
    v17 = *(_QWORD *)(v16 + 80);
    if (v17 == 1684825972 || v17 == 1886546285)
    {
      v18 = (__CFString *)*(id *)(v16 + 168);
      if (v18)
        v19 = v18;
      else
        v19 = CFSTR("?");
      v20 = bswap32(v17);
      v61 = v20;
      if (((char)v20 - 32) > 0x5E
        || (((__int16)v20 >> 8) - 32) > 0x5E
        || ((v20 << 8 >> 24) - 32) > 0x5E
        || ((v20 >> 24) - 32) > 0x5E)
      {
        std::to_string((std::string *)v59, v17);
      }
      else
      {
        v62 = 39;
        __s = 39;
        std::string::basic_string[abi:ne180100]<0>(v59, &__s);
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>((uint64_t)v49, (uint64_t)v59);
      v22 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v57, "rclient");
      v23 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v22, "type");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v49);
      v24 = *(_BYTE *)v23;
      *(_BYTE *)v23 = v49[0];
      v49[0] = v24;
      v25 = (uint64_t *)v23[1];
      v23[1] = (uint64_t)v50;
      v50 = v25;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v49);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v50, v49[0]);
      if ((v59[23] & 0x80000000) != 0)
        operator delete(*(void **)v59);
      v26 = (uint64_t *)*(unsigned int *)(*a2 + 8);
      v47[0] = 6;
      v48 = v26;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v47);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v47);
      v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v57, "rclient");
      v28 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v27, "client_id");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v47);
      v29 = *(_BYTE *)v28;
      *(_BYTE *)v28 = v47[0];
      v47[0] = v29;
      v30 = (uint64_t *)v28[1];
      v28[1] = (uint64_t)v48;
      v48 = v30;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v47);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v48, v47[0]);
      v31 = (uint64_t *)*(int *)(*a2 + 156);
      v45[0] = 5;
      v46 = v31;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v45);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v45);
      v32 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v57, "rclient");
      v33 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v32, "creator_pid");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v45);
      v34 = *(_BYTE *)v33;
      *(_BYTE *)v33 = v45[0];
      v45[0] = v34;
      v35 = (uint64_t *)v33[1];
      v33[1] = (uint64_t)v46;
      v46 = v35;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v33);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v45);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v46, v45[0]);
      *(_QWORD *)v59 = -[__CFString UTF8String](objc_retainAutorelease(v19), "UTF8String");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v43, (char **)v59);
      v36 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v57, "rclient");
      v37 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v36, "creator_name");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v43);
      v38 = *(_BYTE *)v37;
      *(_BYTE *)v37 = v43[0];
      v43[0] = v38;
      v39 = (uint64_t *)v37[1];
      v37[1] = (uint64_t)v44;
      v44 = v39;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v37);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v43);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v44, v43[0]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v57, -1, 0x20u, 0, 0, v59);
      v40 = (void **)(a1 + 64);
      if (*(char *)(a1 + 87) < 0)
        operator delete(*v40);
      *(_OWORD *)v40 = *(_OWORD *)v59;
      *(_QWORD *)(a1 + 80) = *(_QWORD *)&v59[16];

    }
    else
    {
      v41 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v11));
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        v42 = (_QWORD *)(a1 + 64);
        if (*(char *)(a1 + 87) < 0)
          v42 = (_QWORD *)*v42;
        *(_DWORD *)v59 = 136315650;
        *(_QWORD *)&v59[4] = "AudioApplicationInfoImpl.mm";
        *(_WORD *)&v59[12] = 1024;
        *(_DWORD *)&v59[14] = 556;
        *(_WORD *)&v59[18] = 2080;
        *(_QWORD *)&v59[20] = v42;
        _os_log_impl(&dword_1C895C000, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d error - will only update debug string for primary or delegate clients (app: %s)", v59, 0x1Cu);
      }
    }
  }
  else
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v57, -1, 0x20u, 0, 0, v59);
    v21 = (void **)(a1 + 64);
    if (*(char *)(a1 + 87) < 0)
      operator delete(*v21);
    *(_OWORD *)v21 = *(_OWORD *)v59;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)&v59[16];
  }

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v57);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v58, v57[0]);
}

void sub_1C8972038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  void *v15;
  va_list va;

  va_start(va, a15);

  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)va);
  _Unwind_Resume(a1);
}

void as::server::SessionCreationDescription::AsJSON(as::server::SessionCreationDescription *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  char v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned __int8 v9;
  uint64_t *v10;
  void *v11;
  uint64_t *v12;
  char v13;
  uint64_t *v14;
  void *v15;
  uint64_t *v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  char v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  unsigned __int8 v25;
  uint64_t *v26;
  unsigned __int8 v27[8];
  uint64_t *v28;
  _BYTE v29[8];
  uint64_t *v30;
  _BYTE v31[8];
  uint64_t *v32;
  _BYTE v33[8];
  uint64_t *v34;
  unsigned __int8 v35[8];
  uint64_t *v36;
  char *v37[2];
  char v38;
  _BYTE v39[8];
  uint64_t *v40;

  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  AudioSession::GetSessionTypeName(*((_DWORD *)this + 10), v37);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>((uint64_t)v39, (uint64_t)v37);
  v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)a2, "session_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v39);
  v5 = *(_BYTE *)v4;
  *(_BYTE *)v4 = v39[0];
  v39[0] = v5;
  v6 = (uint64_t *)v4[1];
  v4[1] = (uint64_t)v40;
  v40 = v6;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v39);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v40, v39[0]);
  if (v38 < 0)
    operator delete(v37[0]);
  v7 = (uint64_t *)*((int *)this + 9);
  v35[0] = 5;
  v36 = v7;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v35);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v35);
  v8 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)a2, "PID");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v35);
  v9 = *(_BYTE *)v8;
  *(_BYTE *)v8 = v35[0];
  v35[0] = v9;
  v10 = (uint64_t *)v8[1];
  v8[1] = (uint64_t)v36;
  v36 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v35);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v36, v35[0]);
  v11 = (void *)*((_QWORD *)this + 9);
  if (v11)
  {
    v37[0] = (char *)objc_msgSend(v11, "UTF8String");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v33, v37);
    v12 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)a2, "device_UUID");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v33);
    v13 = *(_BYTE *)v12;
    *(_BYTE *)v12 = v33[0];
    v33[0] = v13;
    v14 = (uint64_t *)v12[1];
    v12[1] = (uint64_t)v34;
    v34 = v14;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v33);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v34, v33[0]);
  }
  v15 = (void *)*((_QWORD *)this + 10);
  if (v15)
  {
    v37[0] = (char *)objc_msgSend(v15, "UTF8String");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v31, v37);
    v16 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)a2, "name");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v31);
    v17 = *(_BYTE *)v16;
    *(_BYTE *)v16 = v31[0];
    v31[0] = v17;
    v18 = (uint64_t *)v16[1];
    v16[1] = (uint64_t)v32;
    v32 = v18;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v31);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v32, v31[0]);
  }
  v19 = *((_QWORD *)this + 11);
  if (v19)
  {
    AudioSession::FormatSessionIDAsHex((AudioSession *)*(unsigned int *)(v19 + 8), v37);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>((uint64_t)v29, (uint64_t)v37);
    v20 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)a2, "source_session_ID");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
    v21 = *(_BYTE *)v20;
    *(_BYTE *)v20 = v29[0];
    v29[0] = v21;
    v22 = (uint64_t *)v20[1];
    v20[1] = (uint64_t)v30;
    v30 = v22;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v30, v29[0]);
    if (v38 < 0)
      operator delete(v37[0]);
    v23 = (uint64_t *)*(int *)(*((_QWORD *)this + 11) + 88);
    v27[0] = 5;
    v28 = v23;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
    v24 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)a2, "source_session_PID");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
    v25 = *(_BYTE *)v24;
    *(_BYTE *)v24 = v27[0];
    v27[0] = v25;
    v26 = (uint64_t *)v24[1];
    v24[1] = (uint64_t)v28;
    v28 = v26;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v28, v27[0]);
  }
}

void sub_1C8972460(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t **v2;
  va_list va;

  va_start(va, a2);
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)va);
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(v2);
  _Unwind_Resume(a1);
}

uint64_t *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(unsigned __int8 *a1, char *__s)
{
  int v4;
  _QWORD *v5;
  uint64_t **v6;
  uint64_t *v7;
  nlohmann::detail::exception *exception;
  char *v10;
  std::string v11;
  std::string __p;

  v4 = *a1;
  if (!*a1)
  {
    *a1 = 1;
    v5 = operator new(0x18uLL);
    v5[2] = 0;
    v5[1] = 0;
    *v5 = v5 + 1;
    *((_QWORD *)a1 + 1) = v5;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a1);
    v4 = *a1;
  }
  if (v4 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v10 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
    std::string::basic_string[abi:ne180100]<0>(&v11, v10);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use operator[] with a string argument with ", &v11, &__p);
    nlohmann::detail::type_error::create(305, (uint64_t)&__p, exception);
  }
  v6 = (uint64_t **)*((_QWORD *)a1 + 1);
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v7 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v7 + 7;
}

void sub_1C8972610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, _OWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _OWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  v7 = *a2;
  v8 = *((_QWORD *)*a2 + 2);
  v6[2] = **a2;
  *((_QWORD *)v6 + 6) = v8;
  *v7 = 0;
  v7[1] = 0;
  v7[2] = 0;
  *((_QWORD *)v6 + 8) = 0;
  *((_BYTE *)v6 + 56) = 0;
  v9 = (uint64_t)v6 + 56;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v6 + 56);
  result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v9);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

_QWORD *AudioSession::GetSessionTypeName@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 <= 1718183794)
  {
    if (a1 > 1668314225)
    {
      if (a1 == 1668314226)
      {
        v2 = "Fig Capture";
        return std::string::basic_string[abi:ne180100]<0>(a2, v2);
      }
      if (a1 == 1702392942)
      {
        v2 = "Proxy";
        return std::string::basic_string[abi:ne180100]<0>(a2, v2);
      }
    }
    else
    {
      if (a1 == 1635088489)
      {
        v2 = "Auxiliary";
        return std::string::basic_string[abi:ne180100]<0>(a2, v2);
      }
      if (a1 == 1635148646)
      {
        v2 = "AV Conference";
        return std::string::basic_string[abi:ne180100]<0>(a2, v2);
      }
    }
LABEL_23:
    v2 = "Unknown session type";
    return std::string::basic_string[abi:ne180100]<0>(a2, v2);
  }
  if (a1 <= 1935830118)
  {
    if (a1 == 1718183795)
    {
      v2 = "Fig Player";
      return std::string::basic_string[abi:ne180100]<0>(a2, v2);
    }
    if (a1 == 1886546285)
    {
      v2 = "Primary";
      return std::string::basic_string[abi:ne180100]<0>(a2, v2);
    }
    goto LABEL_23;
  }
  if (a1 == 1935830119)
  {
    v2 = "Sibling";
    return std::string::basic_string[abi:ne180100]<0>(a2, v2);
  }
  if (a1 == 1935897189)
  {
    v2 = "Secure";
    return std::string::basic_string[abi:ne180100]<0>(a2, v2);
  }
  if (a1 != 1936286827)
    goto LABEL_23;
  v2 = "Sidekick";
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

void as::server::AudioApplicationInfo::ApplyMXProperties(os_unfair_lock_s *a1, uint64_t *a2)
{
  os_unfair_lock_s *v4;
  id *v5;
  void *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  id v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  as::server *v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::string v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  _QWORD v30[4];
  id v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  std::string __p;

  v4 = a1 + 4;
  v5 = (id *)&a1[6];
  os_unfair_lock_lock(a1 + 4);
  as::server::AudioAppInfoImpl::GetMXPropertiesExplicitlySet(v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  os_unfair_lock_unlock(v4);
  v8 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  v28 = v8;
  v29 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = (char *)as::server::AudioApplicationInfo::DebugString(a1);
  std::string::basic_string[abi:ne180100]<0>(&v27, v11);
  v12 = v6;
  if (objc_msgSend(v12, "count"))
  {
    if (v7)
    {
      p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
    }
    v30[0] = MEMORY[0x1E0C809B0];
    v30[1] = 3321888768;
    v30[2] = ___ZN2as6serverL24PrivateApplyMXPropertiesENSt3__110shared_ptrINS0_16AudioSessionInfoEEEP12NSDictionaryIP8NSStringPU25objcproto14NSSecureCoding11objc_objectENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke;
    v30[3] = &unk_1E8205718;
    v32 = v8;
    v33 = v7;
    if (v7)
    {
      v15 = (unint64_t *)&v7->__shared_weak_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
      v31 = v12;
      v34 = v8;
      v35 = v7;
      v17 = (unint64_t *)&v7->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    else
    {
      v31 = v12;
      v34 = v8;
      v35 = 0;
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
    else
      __p = v27;
    v19 = (as::server *)MEMORY[0x1CAA39148](v30);
    as::server::GetAudioControlQueue(v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    as::server::DispatchBlock(v20, v19, 0, (uint64_t)"PrivateApplyMXProperties", (uint64_t)"AudioApplicationInfo.mm", 173, 0, 0);

    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v21 = v35;
    if (v35)
    {
      v22 = (unint64_t *)&v35->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }

    if (v33)
      std::__shared_weak_count::__release_weak(v33);
    if (v7)
      std::__shared_weak_count::__release_weak(v7);
  }

  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  v24 = v29;
  if (v29)
  {
    v25 = (unint64_t *)&v29->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }

}

void sub_1C8972B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;
  std::__shared_weak_count *v33;
  void *v34;
  uint64_t v35;

  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100](v35);

  if (a24)
    std::__shared_weak_count::__release_weak(a24);
  if (v33)
    std::__shared_weak_count::__release_weak(v33);

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a16);

  _Unwind_Resume(a1);
}

os_unfair_lock_s *as::server::AudioApplicationInfo::DebugString(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;

  v2 = this + 4;
  os_unfair_lock_lock(this + 4);
  v3 = this + 22;
  if (SHIBYTE(this[27]._os_unfair_lock_opaque) < 0)
    v3 = *(os_unfair_lock_s **)&v3->_os_unfair_lock_opaque;
  os_unfair_lock_unlock(v2);
  return v3;
}

id as::server::AudioAppInfoImpl::GetMXPropertiesExplicitlySet(id *this)
{
  return as::AudioAppState::getMXPropertiesExplicitlySet(this + 19);
}

id as::AudioAppState::getMXPropertiesExplicitlySet(id *this)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_opt_new();
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = this[3];
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v3);
        v7 = *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * i);
        objc_msgSend(this[1], "valueForKey:", v7, (_QWORD)v10);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "setValue:forKey:", v8, v7);

      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v4);
  }

  return v2;
}

void sub_1C8972D6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZN2as6server13DispatchBlockEPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvvENS0_12DispatchTypeEPKcS8_iyy_block_invoke(uint64_t a1)
{
  MEMORY[0x1CAA38650](a1 + 40, 1, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(unsigned int *)(a1 + 104), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96));
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  JUMPOUT(0x1CAA38650);
}

void sub_1C8972DFC(void *a1, int a2)
{
  uint64_t v2;
  void *v4;
  as::server *v5;

  v4 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    v5 = (as::server *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 16))(v4);
    as::server::HandleDispatchBlockException(v5, *(const char **)(v2 + 72), *(const char **)(v2 + 80), (const char *)*(unsigned int *)(v2 + 104), *(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 96));
  }
  else
  {
    as::server::HandleDispatchBlockException((as::server *)"Unknown", *(const char **)(v2 + 72), *(const char **)(v2 + 80), (const char *)*(unsigned int *)(v2 + 104), *(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 96));
  }
  __break(1u);
}

void sub_1C8972E48(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void ___ZN2as6server10forbid_acq24SetPropertiesOnMXSessionEjRK13audit_token_tP12NSDictionaryIP8NSStringPU25objcproto14NSSecureCoding11objc_objectENS_30AVAudioSessionBatchSetStrategyEPU15__autoreleasingP7NSArrayIPS5_IS7_P8NSNumberEE_block_invoke(uint64_t a1, uint64_t a2, NSString *a3)
{
  as::server *v3;
  NSObject *v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = (as::server *)as::server::require_acq::AudioSessionServerUpdatePhoneCallDummyPlayerState((as::server::require_acq *)*(unsigned int *)(a1 + 40), *(void **)(a1 + 32), a3);
  if ((_DWORD)v3)
  {
    v4 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v3));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 136315394;
      v6 = "AudioSessionServerImp.mm";
      v7 = 1024;
      v8 = 460;
      _os_log_impl(&dword_1C895C000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AudioSessionServerUpdatePhoneCallDummyPlayerState failed", (uint8_t *)&v5, 0x12u);
    }
  }
}

uint64_t as::server::require_acq::AudioSessionServerUpdatePhoneCallDummyPlayerState(as::server::require_acq *this, void *a2, NSString *a3)
{
  id v4;
  as::server::ConstAudioSessionInfo *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  as::server *DefaultSubsessionRef;
  as::server *v10;
  unint64_t *v11;
  unint64_t v12;
  as::server::ConstAudioSessionInfo *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  id v17;
  unint64_t v18;
  uint64_t v19;
  NSObject *v20;
  const char *v21;
  NSObject *v22;
  os_log_type_t v23;
  uint32_t v24;
  NSObject *v25;
  as::server::ConstAudioSessionInfo *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  as::server::ConstAudioSessionInfo *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  int *v38;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  as::server *v42;
  NSObject *v43;
  int v44;
  std::string::size_type v45;
  std::string *v46;
  _BYTE *v47;
  as::server *v48;
  int v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  as::server *v55;
  NSObject *v56;
  int v57;
  std::string::size_type v58;
  std::string *v59;
  _BYTE *v60;
  unsigned __int8 *v61;
  unsigned __int8 v62;
  void *v63;
  NSObject *v64;
  int v65;
  int v66;
  uint64_t jj;
  uint64_t kk;
  uint64_t mm;
  as::server *v70;
  NSObject *v71;
  int v72;
  std::string::size_type v73;
  std::string *v74;
  _BYTE *v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  _BYTE v81[8];
  uint64_t *v82;
  std::string v83;
  as::server::ConstAudioSessionInfo *v84;
  std::__shared_weak_count *v85;
  char v86;
  _QWORD v87[2];
  _QWORD *v88;
  char v89;
  _BYTE v90[16];
  uint64_t v91;
  char v92;
  _BYTE __p[12];
  __int16 v94;
  __int128 v95;
  _DWORD v96[4];
  uint64_t v97;
  char v98;
  CFTypeRef buf[5];
  _BYTE *v100;
  CFTypeRef *v101;
  char v102;
  char v103[16];
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor((as::server::AudioSessionInfoAccessor *)&v84, this);
  v5 = v84;
  if (!v84)
  {
    v19 = 561210739;
    v20 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(0));
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      goto LABEL_117;
    LODWORD(buf[0]) = 136315650;
    *(CFTypeRef *)((char *)buf + 4) = "AudioSessionServerImpPlayState.mm";
    WORD2(buf[1]) = 1024;
    *(_DWORD *)((char *)&buf[1] + 6) = 748;
    WORD1(buf[2]) = 1024;
    HIDWORD(buf[2]) = (_DWORD)this;
    v21 = "%25s:%-5d Cannot get session info for session ID: 0x%x";
    v22 = v20;
    v23 = OS_LOG_TYPE_DEFAULT;
    v24 = 24;
LABEL_25:
    _os_log_impl(&dword_1C895C000, v22, v23, v21, (uint8_t *)buf, v24);
    goto LABEL_117;
  }
  v6 = v85;
  if (v85)
  {
    p_shared_owners = (unint64_t *)&v85->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  DefaultSubsessionRef = (as::server *)as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v5, buf);
  v10 = (as::server *)buf[0];
  if (buf[0])
    CFRelease(buf[0]);
  if (!v6)
    goto LABEL_11;
  v11 = (unint64_t *)&v6->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (v12)
  {
LABEL_11:
    if (v10)
      goto LABEL_12;
    goto LABEL_23;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (!v10)
  {
LABEL_23:
    v19 = 2003329396;
    v25 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(DefaultSubsessionRef));
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      goto LABEL_117;
    LODWORD(buf[0]) = 136315394;
    *(CFTypeRef *)((char *)buf + 4) = "AudioSessionServerImpPlayState.mm";
    WORD2(buf[1]) = 1024;
    *(_DWORD *)((char *)&buf[1] + 6) = 753;
    v21 = "%25s:%-5d No valid CMSession";
    v22 = v25;
    v23 = OS_LOG_TYPE_DEBUG;
    v24 = 18;
    goto LABEL_25;
  }
LABEL_12:
  v13 = v84;
  if (!v84)
  {
    v77 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v77);
  }
  v14 = v85;
  if (v85)
  {
    v15 = (unint64_t *)&v85->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    v17 = *((id *)v13 + 12);
    do
      v18 = __ldaxr(v15);
    while (__stlxr(v18 - 1, v15));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  else
  {
    v17 = *((id *)v84 + 12);
  }
  if (!v17)
  {
    v78 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v78);
  }
  v26 = v84;
  if (!v84)
  {
    v79 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v79);
  }
  v27 = v85;
  if (v85)
  {
    v28 = (unint64_t *)&v85->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
    do
      v30 = __ldaxr(v28);
    while (__stlxr(v30 - 1, v28));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
    v31 = v84;
    if (!v84)
    {
      v32 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v32);
    }
  }
  else
  {
    v31 = v84;
  }
  v33 = v85;
  buf[0] = v31;
  buf[1] = v85;
  if (v85)
  {
    v34 = (unint64_t *)&v85->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  if (*((char *)v31 + 223) < 0)
    std::string::__init_copy_ctor_external(&v83, *((const std::string::value_type **)v31 + 25), *((_QWORD *)v31 + 26));
  else
    v83 = *(std::string *)((char *)v31 + 200);
  if (v33)
  {
    v36 = (unint64_t *)&v33->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (v84)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)v84 + 158);
    v86 = 0;
  }
  strcpy(v103, "set_property");
  v38 = (int *)((char *)v26 + 316);
  if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0D48F38]) & 1) != 0
    || objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0D48FC8]))
  {
    if (as::server::IsSessionActive(v10, (const void *)1))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)__p, "primary_action");
      *(_QWORD *)((char *)&v95 + 2) = __p;
      BYTE10(v95) = 1;
      v97 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)v96 + 2, "set category");
      v98 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)buf, (uint64_t)__p, 2, 1, 2);
      buf[2] = buf;
      LOBYTE(buf[3]) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v87, "side_effect");
      v88 = v87;
      v89 = 1;
      v91 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[44],char [44],0>((uint64_t)v90, "Setting Play state to Running for Phone/TTY");
      v92 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&buf[4], (uint64_t)v87, 2, 1, 2);
      v101 = &buf[4];
      v102 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v81, (uint64_t)buf, 2, 1, 2);
      for (i = 0; i != -8; i -= 4)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&buf[i + 4]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&buf[i + 5], LOBYTE(buf[i + 4]));
      }
      for (j = 0; j != -64; j -= 32)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v90[j]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v90[j + 8], v90[j]);
      }
      for (k = 0; k != -16; k -= 8)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v96[k] + 2);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&v96[k + 2] + 2), BYTE2(v96[k]));
      }
      v43 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v42));
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      {
        v80 = v17;
        v44 = SHIBYTE(v83.__r_.__value_.__r.__words[2]);
        v45 = v83.__r_.__value_.__r.__words[0];
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v81, -1, 0x20u, 0, 0, __p);
        v46 = &v83;
        if (v44 < 0)
          v46 = (std::string *)v45;
        if ((SBYTE9(v95) & 0x80u) == 0)
          v47 = __p;
        else
          v47 = *(_BYTE **)__p;
        LODWORD(buf[0]) = 136316162;
        *(CFTypeRef *)((char *)buf + 4) = "AudioSessionServerImpPlayState.mm";
        WORD2(buf[1]) = 1024;
        *(_DWORD *)((char *)&buf[1] + 6) = 772;
        WORD1(buf[2]) = 2080;
        *(CFTypeRef *)((char *)&buf[2] + 4) = v103;
        WORD2(buf[3]) = 2080;
        *(CFTypeRef *)((char *)&buf[3] + 6) = v46;
        HIWORD(buf[4]) = 2080;
        v100 = v47;
        _os_log_impl(&dword_1C895C000, v43, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", (uint8_t *)buf, 0x30u);
        if (SBYTE9(v95) < 0)
          operator delete(*(void **)__p);
        v17 = v80;
      }

      LOBYTE(buf[0]) = 1;
      HIDWORD(buf[0]) = 3975;
      buf[1] = (CFTypeRef)this;
      memset(&buf[2], 0, 24);
      kdebug_trace();
      atomic_store(1u, (unsigned __int8 *)v26 + 320);
      v87[0] = 0;
      v48 = (as::server *)_MXSessionCopyProperty();
      v49 = (int)v48;
      if ((_DWORD)v48)
      {
        v50 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v48));
        if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__p = 136315906;
          *(_QWORD *)&__p[4] = "AudioSessionServerImpPlayState.mm";
          v94 = 1024;
          LODWORD(v95) = 172;
          WORD2(v95) = 2048;
          *(_QWORD *)((char *)&v95 + 6) = v10;
          HIWORD(v95) = 1024;
          v96[0] = v49;
          _os_log_impl(&dword_1C895C000, v50, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ShouldSessionInputBeMuted _MXSessionCopyProperty for property kMXSessionProperty_ShouldInputBeMuted for subsession ref %p returned error %d", __p, 0x22u);
        }
        v51 = 3;
      }
      else
      {
        v63 = (void *)v87[0];
        v64 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v48));
        if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
        {
          v65 = objc_msgSend(v63, "BOOLValue");
          *(_DWORD *)__p = 136315906;
          *(_QWORD *)&__p[4] = "AudioSessionServerImpPlayState.mm";
          v94 = 1024;
          LODWORD(v95) = 176;
          WORD2(v95) = 1024;
          *(_DWORD *)((char *)&v95 + 6) = (_DWORD)this;
          WORD5(v95) = 1024;
          HIDWORD(v95) = v65;
          _os_log_impl(&dword_1C895C000, v64, OS_LOG_TYPE_DEFAULT, "%25s:%-5d MX set session 0x%x to input muted=%d", __p, 0x1Eu);
        }

        v66 = objc_msgSend(v63, "BOOLValue");
        if (v66)
          v51 = 67;
        else
          v51 = 3;
      }
      v19 = as::server::require_acq::AudioSessionServerSetClientPlayState(this, *v38, (AudioSession *)v38, (AudioSession *)v51, 1u, 0, 0);
      objc_msgSend(v17, "setTelephonyClientSessionID:", this);
LABEL_113:
      as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)buf);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v81);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v82, v81[0]);
      goto LABEL_114;
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)__p, "primary_action");
    *(_QWORD *)((char *)&v95 + 2) = __p;
    BYTE10(v95) = 1;
    v97 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)v96 + 2, "set category");
    v98 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)buf, (uint64_t)__p, 2, 1, 2);
    buf[2] = buf;
    LOBYTE(buf[3]) = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v87, "side_effect");
    v88 = v87;
    v89 = 1;
    v91 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[89],char [89],0>((uint64_t)v90, "NOT setting Play state to Running for Phone/TTY since the session is not already active.");
    v92 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&buf[4], (uint64_t)v87, 2, 1, 2);
    v101 = &buf[4];
    v102 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v81, (uint64_t)buf, 2, 1, 2);
    for (m = 0; m != -8; m -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&buf[m + 4]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&buf[m + 5], LOBYTE(buf[m + 4]));
    }
    for (n = 0; n != -64; n -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v90[n]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v90[n + 8], v90[n]);
    }
    for (ii = 0; ii != -16; ii -= 8)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v96[ii] + 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&v96[ii + 2] + 2), BYTE2(v96[ii]));
    }
    v56 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v55));
    if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
    {
      v57 = SHIBYTE(v83.__r_.__value_.__r.__words[2]);
      v58 = v83.__r_.__value_.__r.__words[0];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v81, -1, 0x20u, 0, 0, __p);
      v59 = &v83;
      if (v57 < 0)
        v59 = (std::string *)v58;
      if ((SBYTE9(v95) & 0x80u) == 0)
        v60 = __p;
      else
        v60 = *(_BYTE **)__p;
      LODWORD(buf[0]) = 136316162;
      *(CFTypeRef *)((char *)buf + 4) = "AudioSessionServerImpPlayState.mm";
      WORD2(buf[1]) = 1024;
      *(_DWORD *)((char *)&buf[1] + 6) = 790;
      WORD1(buf[2]) = 2080;
      *(CFTypeRef *)((char *)&buf[2] + 4) = v103;
      WORD2(buf[3]) = 2080;
      *(CFTypeRef *)((char *)&buf[3] + 6) = v59;
      HIWORD(buf[4]) = 2080;
      v100 = v60;
      _os_log_impl(&dword_1C895C000, v56, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", (uint8_t *)buf, 0x30u);
      if (SBYTE9(v95) < 0)
        operator delete(*(void **)__p);
    }

    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v81);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v82, v81[0]);
  }
  else
  {
    v61 = (unsigned __int8 *)v26 + 320;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(0, v61));
    if ((v62 & 1) != 0)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)__p, "primary_action");
      *(_QWORD *)((char *)&v95 + 2) = __p;
      BYTE10(v95) = 1;
      v97 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)v96 + 2, "set category");
      v98 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)buf, (uint64_t)__p, 2, 1, 2);
      buf[2] = buf;
      LOBYTE(buf[3]) = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v87, "side_effect");
      v88 = v87;
      v89 = 1;
      v91 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[44],char [44],0>((uint64_t)v90, "Setting Play state to Stopped for Phone/TTY");
      v92 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&buf[4], (uint64_t)v87, 2, 1, 2);
      v101 = &buf[4];
      v102 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v81, (uint64_t)buf, 2, 1, 2);
      for (jj = 0; jj != -8; jj -= 4)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&buf[jj + 4]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&buf[jj + 5], LOBYTE(buf[jj + 4]));
      }
      for (kk = 0; kk != -64; kk -= 32)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v90[kk]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v90[kk + 8], v90[kk]);
      }
      for (mm = 0; mm != -16; mm -= 8)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v96[mm] + 2);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&v96[mm + 2] + 2), BYTE2(v96[mm]));
      }
      v71 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v70));
      if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
      {
        v72 = SHIBYTE(v83.__r_.__value_.__r.__words[2]);
        v73 = v83.__r_.__value_.__r.__words[0];
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v81, -1, 0x20u, 0, 0, __p);
        v74 = &v83;
        if (v72 < 0)
          v74 = (std::string *)v73;
        if ((SBYTE9(v95) & 0x80u) == 0)
          v75 = __p;
        else
          v75 = *(_BYTE **)__p;
        LODWORD(buf[0]) = 136316162;
        *(CFTypeRef *)((char *)buf + 4) = "AudioSessionServerImpPlayState.mm";
        WORD2(buf[1]) = 1024;
        *(_DWORD *)((char *)&buf[1] + 6) = 799;
        WORD1(buf[2]) = 2080;
        *(CFTypeRef *)((char *)&buf[2] + 4) = v103;
        WORD2(buf[3]) = 2080;
        *(CFTypeRef *)((char *)&buf[3] + 6) = v74;
        HIWORD(buf[4]) = 2080;
        v100 = v75;
        _os_log_impl(&dword_1C895C000, v71, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", (uint8_t *)buf, 0x30u);
        if (SBYTE9(v95) < 0)
          operator delete(*(void **)__p);
      }

      LOBYTE(buf[0]) = 1;
      HIDWORD(buf[0]) = 3975;
      buf[1] = (CFTypeRef)this;
      memset(&buf[2], 0, 24);
      kdebug_trace();
      v19 = as::server::require_acq::AudioSessionServerSetClientPlayState(this, *v38, (AudioSession *)v38, (AudioSession *)3, 0, 0, 0);
      objc_msgSend(v17, "setTelephonyClientSessionID:", 0);
      goto LABEL_113;
    }
  }
  v19 = 0;
LABEL_114:
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v83.__r_.__value_.__l.__data_);

LABEL_117:
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)&v84);

  return v19;
}

void sub_1C8973C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, os_unfair_lock_s *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  void *v30;
  void *v31;
  void *v32;

  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&a11);
  if (a18 < 0)
    operator delete(__p);

  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor(&a19);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::BuildActivationDetailsJSON(unsigned int a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  char *v8;
  uint64_t *v9;
  char v10;
  uint64_t *v11;
  uint64_t *v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t *v15;
  unsigned __int8 v16;
  uint64_t *v17;
  unsigned __int8 v18[8];
  uint64_t *v19;
  unsigned __int8 v20[8];
  unint64_t v21;
  char *v22;
  _BYTE v23[8];
  uint64_t *v24;

  *(_BYTE *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a4);
  v8 = "exit";
  if (a3)
    v8 = "entry";
  v22 = v8;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v23, &v22);
  v9 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)a4, "->");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
  v10 = *(_BYTE *)v9;
  *(_BYTE *)v9 = v23[0];
  v23[0] = v10;
  v11 = (uint64_t *)v9[1];
  v9[1] = (uint64_t)v24;
  v24 = v11;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v24, v23[0]);
  if (a1)
  {
    v20[0] = 6;
    v21 = a1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
    v12 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)a4, "flags");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
    v13 = *(_BYTE *)v12;
    *(_BYTE *)v12 = v20[0];
    v20[0] = v13;
    v14 = (uint64_t *)v12[1];
    v12[1] = v21;
    v21 = (unint64_t)v14;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v21, v20[0]);
  }
  if ((a2 & 0xFF00000000) != 0)
  {
    v18[0] = 5;
    v19 = (uint64_t *)(int)a2;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
    v15 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)a4, "controlling_PID");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
    v16 = *(_BYTE *)v15;
    *(_BYTE *)v15 = v18[0];
    v18[0] = v16;
    v17 = (uint64_t *)v15[1];
    v15[1] = (uint64_t)v19;
    v19 = v17;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v19, v18[0]);
  }
}

void sub_1C8974280(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t **v2;
  va_list va;

  va_start(va, a2);
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)va);
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(v2);
  _Unwind_Resume(a1);
}

void as::server::DeviceTimeObserver::sessionIsActive(as::server::DeviceTimeObserver *this, unsigned int a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unsigned int v8;
  uint64_t v9;

  v8 = a2;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::find((uint64_t *)this + 3, &v8, &v9);
  v5 = *((_QWORD *)this + 3);
  v6 = *((_QWORD *)this + 4);
  if (v5)
    v7 = 1;
  else
    v7 = v6 == 0;
  if (!v7)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  if (v9 != v5 + 32 * v6)
    *(_BYTE *)(*(_QWORD *)(v9 + 8) + 12) = a3;
}

uint64_t `anonymous namespace'::GetProxyProcessPID(_anonymous_namespace_ *this, as::server::AudioSessionInfoAccessor *a2, const audit_token_t *a3)
{
  __int128 v4;
  pid_t v5;
  uint64_t v6;
  pid_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  audit_token_t v17;

  v4 = *((_OWORD *)a2 + 1);
  *(_OWORD *)v17.val = *(_OWORD *)a2;
  *(_OWORD *)&v17.val[4] = v4;
  v5 = audit_token_to_pid(&v17);
  v6 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    as::server::require_acq::AudioSessionSetClientPlayState_Inner(unsigned int,AVAudioSessionClientPlayerType,void *,unsigned int,AVAudioSessionClientPlayState,AudioSessionDuckingInfo *,void const*)::$_0::operator()();
  v7 = v5;
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v11 = *(_DWORD *)(v6 + 88);
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    if (v7 == v11)
      goto LABEL_10;
LABEL_12:
    v14 = v7 & 0xFFFFFF00;
    v13 = v7;
    v15 = 0x100000000;
    return v15 | v14 | v13;
  }
  if (v5 != *(_DWORD *)(v6 + 88))
    goto LABEL_12;
LABEL_10:
  v13 = 0;
  v14 = 0;
  v15 = 0;
  return v15 | v14 | v13;
}

void sub_1C89746A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a6);

  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_1C8974998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a6);

  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

id caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong}>(caulk::xpc::reply_watchdog_factory *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v8;
  void *v9;
  _QWORD v10[4];
  id v11;
  id v12;

  v3 = a2;
  v4 = v3;
  if (*(_BYTE *)a1)
  {
    v5 = (void *)MEMORY[0x1CAA39148](v3);
  }
  else
  {
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3321888768;
    v10[2] = ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorEEEU13block_pointerFvDpT_ES9_i_block_invoke;
    v10[3] = &__block_descriptor_48_ea8_32c120_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorEEEU13block_pointerFvDpT_ES9_iEUlS4_E__e17_v16__0__NSError_8l;
    caulk::xpc::reply_watchdog_factory::make_timer(a1);
    v9 = (void *)MEMORY[0x1CAA39148](v4);
    v11 = v8;
    v12 = (id)MEMORY[0x1CAA39148](v9);
    v5 = (void *)MEMORY[0x1CAA39148](v10);

    v6 = v11;
    v11 = 0;

  }
  return v5;
}

void sub_1C8974B04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorEEEU13block_pointerFvDpT_ES9_i_block_invoke(uint64_t a1, void *a2)
{
  id *v3;
  NSObject *v4;
  id v5;

  v3 = (id *)(a1 + 32);
  v5 = a2;
  applesauce::dispatch::v1::queue::operator*(v3);
  v4 = objc_claimAutoreleasedReturnValue();
  dispatch_source_cancel(v4);

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1C8974B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id BuildInvalidSessionError(as::server *a1, int a2)
{
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v9;
  const __CFString *v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  as::server *v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(a1));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315906;
    v12 = "AVAudioSessionXPCServer.mm";
    v13 = 1024;
    v14 = 371;
    v15 = 2080;
    v16 = a1;
    v17 = 1024;
    v18 = a2;
    _os_log_impl(&dword_1C895C000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d %s failed due to session lookup failure for SessionID 0x%x", buf, 0x22u);
  }
  v5 = (void *)MEMORY[0x1E0CB35C8];
  v9 = *MEMORY[0x1E0CB2D50];
  v10 = CFSTR("Session lookup failed");
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v10, &v9, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -50, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

void sub_1C8974CC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t as::server::AddMXNotificationListener(as::server *this, audit_token_t *a2, audit_token_t *a3, NSString *a4)
{
  unsigned int v5;
  audit_token_t *v6;
  as::server::ConstAudioSessionInfo *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  as::server *HasMXPropertyPipeEntitlement;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  as::server::ConstAudioSessionInfo *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  NSObject *v22;
  const char *v23;
  NSObject *v24;
  os_log_type_t v25;
  uint32_t v26;
  NSObject *v27;
  uint64_t v29;
  as::server::ConstAudioSessionInfo *v30;
  std::__shared_weak_count *v31;
  _BYTE buf[18];
  __int16 v33;
  unsigned int v34;
  uint64_t v35;

  v5 = this;
  v35 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor((as::server::AudioSessionInfoAccessor *)&v30, v5, a2, 0);
  v7 = v30;
  if (!v30)
  {
    v19 = 561210739;
    v22 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(0));
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      goto LABEL_25;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AudioSessionServerImpCommon.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 159;
    v33 = 1024;
    v34 = v5;
    v23 = "%25s:%-5d Cannot get session info for session ID: 0x%x";
    v24 = v22;
    v25 = OS_LOG_TYPE_DEFAULT;
    v26 = 24;
LABEL_24:
    _os_log_impl(&dword_1C895C000, v24, v25, v23, buf, v26);
    goto LABEL_25;
  }
  v8 = v31;
  *(_QWORD *)buf = v30;
  *(_QWORD *)&buf[8] = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  HasMXPropertyPipeEntitlement = (as::server *)as::server::ConstAudioSessionInfo::HasMXPropertyPipeEntitlement(v7, a2);
  v12 = (int)HasMXPropertyPipeEntitlement;
  if (v8)
  {
    v13 = (unint64_t *)&v8->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if (v12)
        goto LABEL_10;
      goto LABEL_22;
    }
  }
  if (!(_DWORD)HasMXPropertyPipeEntitlement)
  {
LABEL_22:
    v19 = 1701737535;
    v27 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(HasMXPropertyPipeEntitlement));
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      goto LABEL_25;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AudioSessionServerImpCommon.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 164;
    v23 = "%25s:%-5d Error - missing entitlement";
    v24 = v27;
    v25 = OS_LOG_TYPE_ERROR;
    v26 = 18;
    goto LABEL_24;
  }
LABEL_10:
  v15 = v30;
  if (!v30)
  {
    v29 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v29);
  }
  v16 = v31;
  *(_QWORD *)buf = v30;
  *(_QWORD *)&buf[8] = v31;
  if (v31)
  {
    v17 = (unint64_t *)&v31->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = as::server::AudioSessionInfo::AddMXNotificationListener(v15, (NSString *)v6, 1);
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
LABEL_25:
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)&v30);

  return v19;
}

void sub_1C8974F44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)va);

  _Unwind_Resume(a1);
}

os_unfair_lock_s **as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor(os_unfair_lock_s **this, int a2, const audit_token_t *a3, char a4)
{
  os_unfair_lock_s *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v13;

  *this = 0;
  this[1] = 0;
  *((_BYTE *)this + 16) = 0;
  v8 = (os_unfair_lock_s *)as::server::LegacySessionManager::Instance((as::server::LegacySessionManager *)this);
  as::server::LegacySessionManager::FindSessionAndVerifyOwnership(v8, a3, a2, a4, &v13);
  std::shared_ptr<as::WorkloopPool>::operator=[abi:ne180100]((uint64_t)this, &v13);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (*this)
  {
    os_unfair_lock_lock(*this + 158);
    *((_BYTE *)this + 16) = 1;
  }
  return this;
}

void sub_1C8975040(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::TranslateGetter_DetailedAudioRoute(_anonymous_namespace_ *this@<X0>, NSDictionary *a2@<X1>, uint64_t a3@<X8>)
{
  void *v5;
  void *v6;
  _anonymous_namespace_ *v7;

  v7 = this;
  v5 = (void *)-[_anonymous_namespace_ mutableCopy](v7, "mutableCopy");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setObject:forKey:", v6, *MEMORY[0x1E0CFF318]);

  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = v5;

}

void sub_1C89750DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

double as::server::require_acq::GetAudioQueueOptions(as::server::require_acq *this, char *a2, AudioSessionDuckingInfo *a3)
{
  double result;

  _MXSessionCopyProperty();
  result = 0.0078125;
  *(_QWORD *)(a2 + 4) = 0x3F80000000000000;
  *a2 = 0;
  return result;
}

void sub_1C8975228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  _Unwind_Resume(a1);
}

float applesauce::CF::at_or<float,__CFString const* const&>(const __CFDictionary *a1, const void **a2, uint64_t a3)
{
  const __CFDictionary *v4;
  uint64_t v5;
  float result;

  v4 = applesauce::CF::details::at_key<__CFString const* const&>(a1, a2);
  if (!v4)
    return *(float *)a3;
  v5 = applesauce::CF::convert_as<float,0>(v4);
  result = *(float *)&v5;
  if ((v5 & 0xFF00000000) == 0)
    return *(float *)a3;
  return result;
}

const __CFDictionary *applesauce::CF::details::at_key<__CFString const* const&>(const __CFDictionary *result, const void **a2)
{
  const void *v2;

  if (result)
  {
    v2 = *a2;
    if (v2)
      return (const __CFDictionary *)CFDictionaryGetValue(result, v2);
    else
      return 0;
  }
  return result;
}

uint64_t applesauce::CF::convert_as<float,0>(const __CFNumber *a1)
{
  CFTypeID TypeID;

  if (a1 && (TypeID = CFNumberGetTypeID(), TypeID == CFGetTypeID(a1)))
    return applesauce::CF::details::number_convert_as<float>(a1);
  else
    return applesauce::CF::details::treat_as_BOOL_for_convert_as<float>(a1);
}

uint64_t applesauce::CF::details::number_convert_as<float>(const __CFNumber *a1)
{
  const __CFNumber *v2;
  CFNumberType v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  const __CFNumber *v7;
  CFNumberType v8;
  const __CFNumber *v9;
  CFNumberType v10;
  const __CFNumber *v11;
  CFNumberType v12;
  const __CFNumber *v13;
  CFNumberType v14;
  const __CFNumber *v15;
  CFNumberType v16;
  int Value;
  int v18;
  float v19;
  uint64_t v20;
  double valuePtr;

  switch(CFNumberGetType(a1))
  {
    case kCFNumberSInt8Type:
      LOBYTE(valuePtr) = 0;
      v2 = a1;
      v3 = kCFNumberSInt8Type;
      goto LABEL_10;
    case kCFNumberSInt16Type:
      LOWORD(valuePtr) = 0;
      v7 = a1;
      v8 = kCFNumberSInt16Type;
      goto LABEL_12;
    case kCFNumberSInt32Type:
      LODWORD(valuePtr) = 0;
      v9 = a1;
      v10 = kCFNumberSInt32Type;
      goto LABEL_15;
    case kCFNumberSInt64Type:
      valuePtr = 0.0;
      v11 = a1;
      v12 = kCFNumberSInt64Type;
      goto LABEL_23;
    case kCFNumberFloat32Type:
      LODWORD(valuePtr) = 0;
      v13 = a1;
      v14 = kCFNumberFloat32Type;
      goto LABEL_19;
    case kCFNumberFloat64Type:
      valuePtr = 0.0;
      v15 = a1;
      v16 = kCFNumberFloat64Type;
      goto LABEL_25;
    case kCFNumberCharType:
      LOBYTE(valuePtr) = 0;
      v2 = a1;
      v3 = kCFNumberCharType;
LABEL_10:
      Value = CFNumberGetValue(v2, v3, &valuePtr);
      v18 = SLOBYTE(valuePtr);
      goto LABEL_13;
    case kCFNumberShortType:
      LOWORD(valuePtr) = 0;
      v7 = a1;
      v8 = kCFNumberShortType;
LABEL_12:
      Value = CFNumberGetValue(v7, v8, &valuePtr);
      v18 = SLOWORD(valuePtr);
LABEL_13:
      v19 = (float)v18;
      goto LABEL_26;
    case kCFNumberIntType:
      LODWORD(valuePtr) = 0;
      v9 = a1;
      v10 = kCFNumberIntType;
LABEL_15:
      Value = CFNumberGetValue(v9, v10, &valuePtr);
      v19 = (float)SLODWORD(valuePtr);
      goto LABEL_26;
    case kCFNumberLongType:
      valuePtr = 0.0;
      v11 = a1;
      v12 = kCFNumberLongType;
      goto LABEL_23;
    case kCFNumberLongLongType:
      valuePtr = 0.0;
      v11 = a1;
      v12 = kCFNumberLongLongType;
      goto LABEL_23;
    case kCFNumberFloatType:
      LODWORD(valuePtr) = 0;
      v13 = a1;
      v14 = kCFNumberFloatType;
LABEL_19:
      Value = CFNumberGetValue(v13, v14, &valuePtr);
      v20 = LODWORD(valuePtr);
      goto LABEL_27;
    case kCFNumberDoubleType:
      valuePtr = 0.0;
      v15 = a1;
      v16 = kCFNumberDoubleType;
      goto LABEL_25;
    case kCFNumberCFIndexType:
      valuePtr = 0.0;
      v11 = a1;
      v12 = kCFNumberCFIndexType;
      goto LABEL_23;
    case kCFNumberNSIntegerType:
      valuePtr = 0.0;
      v11 = a1;
      v12 = kCFNumberNSIntegerType;
LABEL_23:
      Value = CFNumberGetValue(v11, v12, &valuePtr);
      v19 = (float)*(uint64_t *)&valuePtr;
      goto LABEL_26;
    case kCFNumberCGFloatType:
      valuePtr = 0.0;
      v15 = a1;
      v16 = kCFNumberCGFloatType;
LABEL_25:
      Value = CFNumberGetValue(v15, v16, &valuePtr);
      v19 = valuePtr;
LABEL_26:
      v20 = LODWORD(v19);
LABEL_27:
      v6 = v20 | 0x100000000;
      if (!Value)
        v6 = 0;
      v4 = v6 & 0xFFFFFF00;
      v5 = v6 & 0x100000000;
      break;
    default:
      v4 = 0;
      v5 = 0;
      LOBYTE(v6) = 0;
      break;
  }
  return v5 | v4 & 0xFFFFFF00 | v6;
}

uint64_t **as::server::DeviceTimeObserver::getSourceAndSiblingIDs@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v3;

  v3 = std::set<unsigned int>::set[abi:ne180100](a2, *(_QWORD *)a1 + 16);
  return std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)v3, (unsigned int *)(*(_QWORD *)a1 + 8), (_DWORD *)(*(_QWORD *)a1 + 8));
}

void sub_1C8975558(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(uint64_t **a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t *std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>(uint64_t **a1, uint64_t *a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<unsigned int>::__find_equal<unsigned int>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<unsigned int>::__find_equal<unsigned int>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t as::server::DeviceTimeObserver::removeReferringSessionsFromDevice(uint64_t result, int a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned int *v11;
  unsigned int *v12;
  BOOL v13;

  if (a3 != 255)
  {
    v4 = *(_QWORD *)(result + 48);
    v5 = *(_QWORD *)(result + 56);
    result += 48;
    if (0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 5) <= a3)
      std::vector<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>>::__throw_out_of_range[abi:ne180100]();
    v6 = (unsigned int *)(a4 + 1);
    v7 = (unsigned int *)*a4;
    if ((_QWORD *)*a4 != a4 + 1)
    {
      v8 = v4 + 96 * a3;
      v9 = 48;
      if (a2)
        v9 = 24;
      v10 = (uint64_t *)(v8 + v9);
      do
      {
        result = boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::erase_unique(v10, v7 + 7);
        if (result != 1)
          as::server::DeviceTimeObserver::removeReferringSessionsFromDevice();
        v11 = (unsigned int *)*((_QWORD *)v7 + 1);
        if (v11)
        {
          do
          {
            v12 = v11;
            v11 = *(unsigned int **)v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            v12 = (unsigned int *)*((_QWORD *)v7 + 2);
            v13 = *(_QWORD *)v12 == (_QWORD)v7;
            v7 = v12;
          }
          while (!v13);
        }
        v7 = v12;
      }
      while (v12 != v6);
    }
  }
  return result;
}

BOOL boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::erase_unique(uint64_t *a1, unsigned int *a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::find(a1, a2, (uint64_t *)&v9);
  v3 = a1[1];
  if (*a1)
    v4 = 1;
  else
    v4 = v3 == 0;
  if (!v4)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v5 = *a1 + 4 * v3;
  v6 = v9;
  if (v9 != v5)
  {
    v10 = v9;
    boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::erase((unint64_t *)a1, &v10, &v8);
  }
  return v6 != v5;
}

unint64_t *boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::erase@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;

  v3 = *a2;
  v4 = *result;
  if (*result > *a2)
    goto LABEL_12;
  v5 = result;
  v7 = result[1];
  if (v4)
    v8 = 1;
  else
    v8 = v7 == 0;
  if (!v8)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v9 = v4 + 4 * v7;
  if (v3 >= v9)
LABEL_12:
    boost::container::vector<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,void>::erase();
  if (v3 && v3 + 4 != v9)
  {
    result = (unint64_t *)memmove((void *)v3, (const void *)(v3 + 4), v9 - (v3 + 4));
    v7 = v5[1];
  }
  v5[1] = v7 - 1;
  *a3 = v3;
  return result;
}

void boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::find(uint64_t *a1@<X0>, unsigned int *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *a1;
  v5 = a1[1];
  v14 = v4;
  if (v4)
    v6 = 1;
  else
    v6 = v5 == 0;
  if (!v6)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v13 = v4 + 4 * v5;
  boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::priv_lower_bound<boost::container::vec_iterator<unsigned int *,false>,unsigned int>(&v14, &v13, a2, a3);
  v9 = a1[1];
  if (*a1)
    v10 = 1;
  else
    v10 = v9 == 0;
  if (!v10)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v11 = *a1 + 4 * v9;
  v12 = (unsigned int *)*a3;
  if (*a3 != v11)
  {
    if (!v12)
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    if (*a2 < *v12)
      *a3 = v11;
  }
}

void boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::priv_lower_bound<boost::container::vec_iterator<unsigned int *,false>,unsigned int>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, unsigned int *a3@<X3>, _QWORD *a4@<X8>)
{
  _DWORD *v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int *v8;

  v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    v5 = (uint64_t)(*a2 - *a1) >> 2;
    v6 = *a3;
    v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4)
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      if (!v4)
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      v7 = v5 >> 1;
      v8 = &v4[v5 >> 1];
      if (*v8 < v6)
      {
        v4 = v8 + 1;
        *a1 = v8 + 1;
        v7 = v5 + ~v7;
      }
      v5 = v7;
    }
    while (v7);
  }
  *a4 = v4;
}

void sub_1C8975D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  void *v7;
  va_list va;

  va_start(va, a6);

  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP32AVAudioSessionSpatialPreferencesEEEU13block_pointerFvDpT_ESC_i_block_invoke(uint64_t a1, void *a2, void *a3)
{
  caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},AVAudioSessionSpatialPreferences * {__strong}>(void({block_pointer})(NSError * {__strong},AVAudioSessionSpatialPreferences * {__strong}),int)::{lambda(NSError *,AVAudioSessionSpatialPreferences *)#1}::operator()(a1 + 32, a2, a3);
}

void caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},AVAudioSessionSpatialPreferences * {__strong}>(void({block_pointer})(NSError * {__strong},AVAudioSessionSpatialPreferences * {__strong}),int)::{lambda(NSError *,AVAudioSessionSpatialPreferences *)#1}::operator()(uint64_t a1, void *a2, void *a3)
{
  id v5;
  NSObject *v6;
  id v7;

  v5 = a3;
  v7 = a2;
  applesauce::dispatch::v1::queue::operator*((id *)a1);
  v6 = objc_claimAutoreleasedReturnValue();
  dispatch_source_cancel(v6);

  (*(void (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

void sub_1C8975E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},AVAudioSessionSpatialPreferences * {__strong}>(caulk::xpc::reply_watchdog_factory *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v8;
  void *v9;
  _QWORD v10[4];
  id v11;
  id v12;

  v3 = a2;
  v4 = v3;
  if (*(_BYTE *)a1)
  {
    v5 = (void *)MEMORY[0x1CAA39148](v3);
  }
  else
  {
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3321888768;
    v10[2] = ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP32AVAudioSessionSpatialPreferencesEEEU13block_pointerFvDpT_ESC_i_block_invoke;
    v10[3] = &__block_descriptor_48_ea8_32c168_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP32AVAudioSessionSpatialPreferencesEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E__e54_v24__0__NSError_8__AVAudioSessionSpatialPreferences_16l;
    caulk::xpc::reply_watchdog_factory::make_timer(a1);
    v9 = (void *)MEMORY[0x1CAA39148](v4);
    v11 = v8;
    v12 = (id)MEMORY[0x1CAA39148](v9);
    v5 = (void *)MEMORY[0x1CAA39148](v10);

    v6 = v11;
    v11 = 0;

  }
  return v5;
}

void sub_1C8975F54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c67_ZTSNSt3__110shared_ptrIN2as6server18DeviceTimeObserver8TimeInfoEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t as::server::require_acq::AudioSessionServerSetClientMuteState(AudioSession *a1, int a2, void *a3, int a4)
{
  as::server *v8;
  unsigned __int8 *v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  uint32_t v13;
  uint64_t i;
  as::server *v15;
  NSObject *v16;
  void **v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void **PlayerState;
  void **v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  AudioSession *v27;
  unsigned int v28;
  void **v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t v36;
  unsigned __int8 v37;
  NSObject *v38;
  NSObject *v39;
  void *__p[2];
  char v42;
  char v43[8];
  uint64_t *v44;
  as::server::AudioSessionInfo *v45;
  std::__shared_weak_count *v46;
  char v47;
  _BYTE buf[30];
  const char *v49;
  __int16 v50;
  unint64_t v51;
  _BYTE v52[10];
  void *v53;
  uint64_t *v54;
  void **v55;
  char v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v8 = (as::server *)as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor((as::server::AudioSessionInfoAccessor *)&v45, a1);
  v9 = (unsigned __int8 *)v45;
  if (v45)
  {
    if (a2 == 1885564012)
    {
      if (a3)
      {
        v10 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v8));
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "AudioSessionServerImp.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 699;
          v11 = "%25s:%-5d Player ref should be nullptr if player type is PhoneCall";
          v12 = v10;
          v13 = 18;
LABEL_48:
          _os_log_impl(&dword_1C895C000, v12, OS_LOG_TYPE_ERROR, v11, buf, v13);
          goto LABEL_49;
        }
        goto LABEL_49;
      }
      v33 = v46;
      if (v46)
      {
        p_shared_owners = (unint64_t *)&v46->__shared_owners_;
        do
          v35 = __ldxr(p_shared_owners);
        while (__stxr(v35 + 1, p_shared_owners));
        do
          v36 = __ldaxr(p_shared_owners);
        while (__stlxr(v36 - 1, p_shared_owners));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v27 = (AudioSession *)(v9 + 316);
      if (a4)
        v32 = 67;
      else
        v32 = 3;
      v37 = atomic_load(v9 + 320);
      v28 = v37 & 1;
LABEL_40:
      if (v45)
      {
        os_unfair_lock_unlock((os_unfair_lock_t)v45 + 158);
        v47 = 0;
      }
      v18 = as::server::require_acq::AudioSessionServerSetClientPlayState(a1, a2, v27, (AudioSession *)v32, v28, 0, 0);
      goto LABEL_50;
    }
    v19 = v46;
    *(_QWORD *)buf = v45;
    *(_QWORD *)&buf[8] = v46;
    if (v46)
    {
      v20 = (unint64_t *)&v46->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    PlayerState = as::server::AudioSessionInfo::GetPlayerState((as::server::AudioSessionInfo *)v9, a3);
    v23 = PlayerState;
    if (!v19)
      goto LABEL_24;
    v24 = (unint64_t *)&v19->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      if (v23)
        goto LABEL_25;
    }
    else
    {
LABEL_24:
      if (PlayerState)
      {
LABEL_25:
        v26 = *((_DWORD *)v23 + 4);
        if (v26 != a2)
        {
          v38 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)PlayerState));
          if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "AudioSessionServerImp.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 722;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = a2;
            *(_WORD *)&buf[24] = 1024;
            *(_DWORD *)&buf[26] = v26;
            v11 = "%25s:%-5d Supplied player type %u does not match with player type %u";
            v12 = v38;
            v13 = 30;
            goto LABEL_48;
          }
LABEL_49:
          v18 = 4294967246;
          goto LABEL_50;
        }
        v27 = (AudioSession *)*v23;
        v29 = v23 + 1;
        v28 = *((_DWORD *)v23 + 2);
        v30 = *((_DWORD *)v29 + 1) & 0xFFFFFFBF;
        if (a4)
          v31 = 64;
        else
          v31 = 0;
        v32 = v30 | v31;
        goto LABEL_40;
      }
    }
    v39 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)PlayerState));
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AudioSessionServerImp.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 715;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = a3;
      v11 = "%25s:%-5d Can't find supplied player %p";
      v12 = v39;
      v13 = 28;
      goto LABEL_48;
    }
    goto LABEL_49;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)buf, "sessionID");
  *(_QWORD *)&buf[16] = buf;
  buf[24] = 1;
  BYTE2(v49) = 6;
  v51 = a1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v49 + 2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v49 + 2);
  *(_QWORD *)v52 = (char *)&v49 + 2;
  v52[8] = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v53, (uint64_t)buf, 2, 1, 2);
  v55 = &v53;
  v56 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v43, (uint64_t)&v53, 1, 1, 2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v53);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v54, v53);
  for (i = 0; i != -64; i -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v49 + i + 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v52[i - 8], *((unsigned __int8 *)&v49 + i + 2));
  }
  v16 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v15));
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    v53 = 0;
    v54 = 0;
    v55 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v43, -1, 0x20u, 0, 0, __p);
    if (v42 >= 0)
      v17 = __p;
    else
      v17 = (void **)__p[0];
    *(_DWORD *)buf = 136316418;
    *(_QWORD *)&buf[4] = "AudioSessionServerImp.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 689;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = "set_mute_state";
    *(_WORD *)&buf[28] = 2080;
    v49 = "Session lookup failed";
    v50 = 2080;
    v51 = (unint64_t)&v53;
    *(_WORD *)v52 = 2080;
    *(_QWORD *)&v52[2] = v17;
    _os_log_impl(&dword_1C895C000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d { \"action\":\"%s\", \"error\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x3Au);
    if (v42 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v55) < 0)
      operator delete(v53);
  }

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v43);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v44, v43[0]);
  v18 = 561210739;
LABEL_50:
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)&v45);
  return v18;
}

void sub_1C89764AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)va);
  _Unwind_Resume(a1);
}

uint64_t as::server::require_acq::AudioSessionServerSetClientPlayState(AudioSession *a1, int a2, AudioSession *a3, AudioSession *a4, unsigned int a5, char *a6, uint64_t a7)
{
  unsigned int v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  as::server::ConstAudioSessionInfo *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  int v16;
  unint64_t v17;
  as::server::ConstAudioSessionInfo *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unsigned int v23;
  unint64_t *v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  _BOOL4 v28;
  unint64_t v29;
  unsigned __int8 v30;
  as::server::ConstAudioSessionInfo *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  const void *v35;
  int IsRemoteDeviceInputControlAllowed;
  unint64_t *v37;
  unint64_t v38;
  as::server::ConstAudioSessionInfo *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  _BOOL8 v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  void **v52;
  uint64_t i;
  as::server *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  as::server::ConstAudioSessionInfo *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  int v63;
  _BOOL4 v64;
  unint64_t *v65;
  unint64_t v66;
  NSObject *v67;
  int v68;
  std::string::size_type v69;
  std::string *v70;
  void **v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  as::server::ConstAudioSessionInfo *v82;
  std::__shared_weak_count *v83;
  void *__p[2];
  char v85;
  _BYTE v86[8];
  uint64_t *v87;
  void *v88[2];
  uint64_t v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  _BYTE cf[12];
  __int16 v93;
  _BYTE v94[14];
  __int16 v95;
  std::string *v96;
  __int16 v97;
  _QWORD v98[2];
  char v99;
  std::string v100;
  char v101;
  uint64_t v102;

  v7 = a1;
  v102 = *MEMORY[0x1E0C80C00];
  v8 = as::server::require_acq::AudioSessionSetClientPlayState_Inner(a1, a2, a3, a4, a5, a6, a7);
  +[AVAudioMicrophoneMonitor sharedInstance](AVAudioMicrophoneMonitor, "sharedInstance");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v9)
  {
    v11 = v9;
    as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor((as::server::AudioSessionInfoAccessor *)&v82, v7);
    v12 = v82;
    if (v82)
    {
      v13 = v83;
      if (v83)
      {
        p_shared_owners = (unint64_t *)&v83->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        v16 = *((_DWORD *)v12 + 67);
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        if (v16 == 3)
          goto LABEL_108;
      }
      else if (*((_DWORD *)v82 + 67) == 3)
      {
LABEL_108:
        as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)&v82);

        goto LABEL_109;
      }
      v18 = v82;
      if (!v82)
      {
        v78 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v78);
      }
      v19 = v83;
      if (v83)
      {
        v20 = (unint64_t *)&v83->__shared_owners_;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
        v22 = v83;
        v23 = *((_DWORD *)v18 + 71);
        if (v83)
        {
          v24 = (unint64_t *)&v83->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
          v26 = *((_DWORD *)v18 + 74);
          do
            v27 = __ldaxr(v24);
          while (__stlxr(v27 - 1, v24));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        else
        {
          v26 = *((_DWORD *)v18 + 74);
        }
        v28 = v23 > v26;
        do
          v29 = __ldaxr(v20);
        while (__stlxr(v29 - 1, v20));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      else
      {
        v28 = *((_DWORD *)v82 + 71) > *((_DWORD *)v82 + 74);
      }
      if ((v30 & 1) == 0
      {
        as::RemoteDeviceControlEnabled(void)::remoteDeviceControlEnabled = _os_feature_enabled_impl();
      }
      if (!as::RemoteDeviceControlEnabled(void)::remoteDeviceControlEnabled)
      {
        if (!v28)
          goto LABEL_53;
        goto LABEL_78;
      }
      v31 = v82;
      if (!v82)
      {
        v79 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v79);
      }
      v32 = v83;
      if (v83)
      {
        v33 = (unint64_t *)&v83->__shared_owners_;
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v31, cf);
      if (*(_QWORD *)cf)
        CFRelease(*(CFTypeRef *)cf);
      if (v32)
      {
        v37 = (unint64_t *)&v32->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      if (!IsRemoteDeviceInputControlAllowed)
      {
LABEL_52:
        if (!v28)
          goto LABEL_53;
LABEL_78:
        v59 = v82;
        if (!v82)
        {
          v80 = _os_crash();
          as::server::require_acq::AudioSessionServerSetClientPlayState(v80);
        }
        v60 = v83;
        if (v83)
        {
          v61 = (unint64_t *)&v83->__shared_owners_;
          do
            v62 = __ldxr(v61);
          while (__stxr(v62 + 1, v61));
        }
        v63 = *((_DWORD *)v59 + 73);
        if (v63)
          v64 = *((_DWORD *)v59 + 70) == v63;
        else
          v64 = 0;
        v45 = !v64;
        if (v60)
        {
          v76 = (unint64_t *)&v60->__shared_owners_;
          do
            v77 = __ldaxr(v76);
          while (__stlxr(v77 - 1, v76));
          if (!v77)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        goto LABEL_54;
      }
      if (v28)
      {
        v39 = v82;
        if (!v82)
        {
          v81 = _os_crash();
          as::server::require_acq::AudioSessionServerSetClientPlayState(v81);
        }
        v40 = v83;
        if (!v83)
        {
          if (*((_DWORD *)v82 + 107))
            goto LABEL_53;
          goto LABEL_78;
        }
        v41 = (unint64_t *)&v83->__shared_owners_;
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
        v43 = *((_DWORD *)v39 + 107);
        v28 = v43 == 0;
        do
          v44 = __ldaxr(v41);
        while (__stlxr(v44 - 1, v41));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
          if (v43)
            goto LABEL_53;
          goto LABEL_78;
        }
        goto LABEL_52;
      }
    }
LABEL_53:
    v45 = 0;
LABEL_54:
    as::server::ConstAudioSessionInfoAccessor::ConstAudioSessionInfoAccessor((as::server::ConstAudioSessionInfoAccessor *)&v90, v7);
    v46 = v90;
    if (v90)
    {
      v47 = v91;
      if (v91)
      {
        v48 = (unint64_t *)&v91->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
      caulk::platform::process_name((caulk::platform *)*(unsigned int *)(v46 + 88));
      if (v47)
      {
        v50 = (unint64_t *)&v47->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      if (v89 >= 0)
        v52 = v88;
      else
        v52 = (void **)v88[0];
    }
    else
    {
      v88[0] = 0;
      v88[1] = 0;
      v52 = v88;
      v89 = 0;
    }
    if (objc_msgSend(v11, "setState:clientType:clientID:clientDescription:", v45, 0, v7, v52))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[17],char [17],0>((uint64_t)cf, "microphone_state");
      *(_QWORD *)&v94[2] = cf;
      v94[10] = 1;
      BYTE2(v96) = 4;
      v98[0] = v45;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v96 + 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v96 + 2);
      v98[1] = (char *)&v96 + 2;
      v99 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v100, (uint64_t)cf, 2, 1, 2);
      v100.__r_.__value_.__r.__words[2] = (std::string::size_type)&v100;
      v101 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v86, (uint64_t)&v100, 1, 1, 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v100);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v100.__r_.__value_.__l.__size_, v100.__r_.__value_.__s.__data_[0]);
      for (i = 0; i != -8; i -= 4)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v96 + i * 8 + 2);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v98[i], *((unsigned __int8 *)&v96 + i * 8 + 2));
      }
      v55 = v90;
      if (v90)
      {
        v56 = v91;
        if (v91)
        {
          v57 = (unint64_t *)&v91->__shared_owners_;
          do
            v58 = __ldxr(v57);
          while (__stxr(v58 + 1, v57));
        }
        if (*(char *)(v55 + 223) < 0)
          std::string::__init_copy_ctor_external(&v100, *(const std::string::value_type **)(v55 + 200), *(_QWORD *)(v55 + 208));
        else
          v100 = *(std::string *)(v55 + 200);
        if (v56)
        {
          v65 = (unint64_t *)&v56->__shared_owners_;
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
      }
      else
      {
        memset(&v100, 0, sizeof(v100));
      }
      v67 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v54));
      if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
      {
        v68 = SHIBYTE(v100.__r_.__value_.__r.__words[2]);
        v69 = v100.__r_.__value_.__r.__words[0];
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v86, -1, 0x20u, 0, 0, __p);
        v70 = &v100;
        if (v68 < 0)
          v70 = (std::string *)v69;
        if (v85 >= 0)
          v71 = __p;
        else
          v71 = (void **)__p[0];
        *(_DWORD *)cf = 136316162;
        *(_QWORD *)&cf[4] = "AudioSessionServerImpPlayState.mm";
        v93 = 1024;
        *(_DWORD *)v94 = 126;
        *(_WORD *)&v94[4] = 2080;
        *(_QWORD *)&v94[6] = "setMicrophoneMonitorState";
        v95 = 2080;
        v96 = v70;
        v97 = 2080;
        v98[0] = v71;
        _os_log_impl(&dword_1C895C000, v67, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", cf, 0x30u);
        if (v85 < 0)
          operator delete(__p[0]);
      }

      if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v100.__r_.__value_.__l.__data_);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v86);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v87, v86[0]);
    }
    if (SHIBYTE(v89) < 0)
      operator delete(v88[0]);
    v72 = v91;
    if (v91)
    {
      v73 = (unint64_t *)&v91->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
    goto LABEL_108;
  }
LABEL_109:

  return v8;
}

void sub_1C8976CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_s *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,CFTypeRef cf)
{
  void *v26;

  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor(&a10);

  _Unwind_Resume(a1);
}

void sub_1C89770F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  std::mutex *v11;

  std::mutex::unlock(v11);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::find<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  BOOL v10;

  v3 = (_QWORD *)(a1 + 8);
  result = std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::__lower_bound<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>(a1, a2, *(_QWORD **)(a1 + 8), (_QWORD *)(a1 + 8));
  if (v3 == result)
    return v3;
  v5 = result[4];
  if (*a2 >= v5)
    v6 = 1;
  else
    v6 = -1;
  if (*a2 == v5)
  {
    v7 = a2[1];
    v8 = result[5];
    v9 = v7 >= v8;
    v10 = v7 == v8;
    v6 = -1;
    if (v9)
      v6 = 1;
    if (v10)
      v6 = 0;
  }
  if (v6 < 0)
    return v3;
  return result;
}

_QWORD *std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::__lower_bound<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  _QWORD *v13;

  result = a4;
  if (a3)
  {
    v5 = *a2;
    v6 = a2[1];
    do
    {
      v7 = a3[4];
      v8 = v7 == v5;
      if (v7 >= v5)
        v9 = 1;
      else
        v9 = -1;
      if (v8)
      {
        v10 = a3[5];
        v11 = v10 == v6;
        v9 = v10 >= v6 ? 1 : -1;
        if (v11)
          v9 = 0;
      }
      v12 = (v9 & 0x80) == 0;
      if (v9 < 0)
        v13 = a3 + 1;
      else
        v13 = a3;
      if (v12)
        result = a3;
      a3 = (_QWORD *)*v13;
    }
    while (*v13);
  }
  return result;
}

void sub_1C8977254(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8977380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  v19 = v17;

  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP12NSDictionaryS8_EEEU13block_pointerFvDpT_ESC_i_block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},NSDictionary * {__strong},NSDictionary * {__strong}>(void({block_pointer})(NSError * {__strong},NSDictionary * {__strong},NSDictionary * {__strong}),int)::{lambda(NSError *,NSDictionary *,NSDictionary *)#1}::operator()(a1 + 32, a2, a3, a4);
}

void caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},NSDictionary * {__strong},NSDictionary * {__strong}>(void({block_pointer})(NSError * {__strong},NSDictionary * {__strong},NSDictionary * {__strong}),int)::{lambda(NSError *,NSDictionary *,NSDictionary *)#1}::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  NSObject *v9;
  id v10;

  v7 = a4;
  v8 = a3;
  v10 = a2;
  applesauce::dispatch::v1::queue::operator*((id *)a1);
  v9 = objc_claimAutoreleasedReturnValue();
  dispatch_source_cancel(v9);

  (*(void (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

void sub_1C8977448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

id caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},NSDictionary * {__strong},NSDictionary * {__strong}>(caulk::xpc::reply_watchdog_factory *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v8;
  void *v9;
  _QWORD v10[4];
  id v11;
  id v12;

  v3 = a2;
  v4 = v3;
  if (*(_BYTE *)a1)
  {
    v5 = (void *)MEMORY[0x1CAA39148](v3);
  }
  else
  {
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3321888768;
    v10[2] = ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP12NSDictionaryS8_EEEU13block_pointerFvDpT_ESC_i_block_invoke;
    v10[3] = &__block_descriptor_48_ea8_32c154_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP12NSDictionaryS8_EEEU13block_pointerFvDpT_ESC_iEUlS4_S7_S7_E__e51_v32__0__NSError_8__NSDictionary_16__NSDictionary_24l;
    caulk::xpc::reply_watchdog_factory::make_timer(a1);
    v9 = (void *)MEMORY[0x1CAA39148](v4);
    v11 = v8;
    v12 = (id)MEMORY[0x1CAA39148](v9);
    v5 = (void *)MEMORY[0x1CAA39148](v10);

    v6 = v11;
    v11 = 0;

  }
  return v5;
}

void sub_1C8977564(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void as::server::forbid_acq::GetPropertiesFromMXSession(unsigned int a1@<W0>, const audit_token_t *a2@<X1>, void *a3@<X2>, id *a4@<X3>, uint64_t a5@<X8>)
{
  as::server *v8;
  as::server::ConstAudioSessionInfo *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  NSObject *v13;
  int v14;
  NSObject *v15;
  unint64_t *v16;
  unint64_t v17;
  as::server::ConstAudioSessionInfo *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  as::server *DefaultSubsessionRef;
  void *v23;
  unint64_t *v24;
  unint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  void *v31;
  int v32;
  as::server *v33;
  NSObject *v34;
  uint64_t j;
  as::server *v36;
  NSObject *v37;
  int v38;
  std::string::size_type v39;
  std::string *v40;
  uint64_t *v41;
  NSObject *v42;
  std::string *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  id v51;
  unsigned int v52;
  _BYTE v53[8];
  uint64_t *v54;
  _BYTE v55[8];
  uint64_t *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  std::string v61;
  as::server::ConstAudioSessionInfo *v62;
  std::__shared_weak_count *v63;
  _BYTE buf[40];
  uint64_t *v65;
  _BYTE *v66;
  char v67;
  void *__p;
  uint64_t *v69;
  void **p_p;
  char v71;
  _BYTE v72[128];
  char v73[24];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v51 = a3;
  v52 = a1;
  v8 = (as::server *)as::server::ConstAudioSessionInfoAccessor::ConstAudioSessionInfoAccessor((as::server::ConstAudioSessionInfoAccessor *)&v62, a1, a2, 1);
  v9 = v62;
  if (!v62)
  {
    v13 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v8));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AudioSessionServerImpCommon.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 279;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = a1;
      _os_log_impl(&dword_1C895C000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cannot get session info for session ID: 0x%x", buf, 0x18u);
    }
    v14 = 561210739;
    goto LABEL_14;
  }
  if (!v51)
  {
    v15 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v8));
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AudioSessionServerImpCommon.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 284;
      _os_log_impl(&dword_1C895C000, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Invalid propertiesToGet", buf, 0x12u);
    }
    v14 = -50;
LABEL_14:
    *(_DWORD *)a5 = v14;
    *(_QWORD *)(a5 + 8) = 0;
    goto LABEL_61;
  }
  v10 = v63;
  *(_QWORD *)buf = v62;
  *(_QWORD *)&buf[8] = v63;
  if (v63)
  {
    p_shared_owners = (unint64_t *)&v63->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (*((char *)v9 + 223) < 0)
    std::string::__init_copy_ctor_external(&v61, *((const std::string::value_type **)v9 + 25), *((_QWORD *)v9 + 26));
  else
    v61 = *(std::string *)((char *)v9 + 200);
  if (v10)
  {
    v16 = (unint64_t *)&v10->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v18 = v62;
  if (!v62)
  {
    v47 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v47);
  }
  v19 = v63;
  if (v63)
  {
    v20 = (unint64_t *)&v63->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  DefaultSubsessionRef = (as::server *)as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v18, buf);
  v23 = *(void **)buf;
  if (*(_QWORD *)buf)
    CFRelease(*(CFTypeRef *)buf);
  if (v19)
  {
    v24 = (unint64_t *)&v19->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      if (v23)
        goto LABEL_32;
LABEL_54:
      v42 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(DefaultSubsessionRef));
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
      {
        v43 = &v61;
        if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v43 = (std::string *)v61.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "AudioSessionServerImpCommon.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 291;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = v43;
        _os_log_impl(&dword_1C895C000, v42, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cannot get MXSessionRef for session: %s", buf, 0x1Cu);
      }
      *(_DWORD *)a5 = 2003329396;
      *(_QWORD *)(a5 + 8) = 0;
      goto LABEL_59;
    }
  }
  if (!v23)
    goto LABEL_54;
LABEL_32:
  strcpy(v73, "get_properties_pipe");
  v48 = v23;
  v49 = (void *)objc_msgSend(v48, "copyProperties:outPropertyErrors:", v51, a4);
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v26 = *a4;
  v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v57, v72, 16);
  if (v27)
  {
    v28 = *(_QWORD *)v58;
    do
    {
      for (i = 0; i != v27; ++i)
      {
        if (*(_QWORD *)v58 != v28)
          objc_enumerationMutation(v26);
        v30 = *(_QWORD *)(*((_QWORD *)&v57 + 1) + 8 * i);
        objc_msgSend(*a4, "objectForKey:", v30);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        v32 = objc_msgSend(v31, "intValue");

        if (v32)
        {
          v34 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v33));
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136316162;
            *(_QWORD *)&buf[4] = "AudioSessionServerImpCommon.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 335;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v52;
            *(_WORD *)&buf[24] = 2112;
            *(_QWORD *)&buf[26] = v30;
            *(_WORD *)&buf[34] = 1024;
            *(_DWORD *)&buf[36] = v32;
            _os_log_impl(&dword_1C895C000, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d Session 0x%x failed to get property %@ with an error: %d", buf, 0x28u);
          }
        }
      }
      v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v57, v72, 16);
    }
    while (v27);
  }

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[11],char [11],0>((uint64_t)buf, "properties");
  *(_QWORD *)&buf[16] = buf;
  buf[24] = 1;
  AudioSession::PropertyValueToJSON(v49, (uint64_t)v53);
  buf[32] = v53[0];
  v65 = v54;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v53);
  v53[0] = 0;
  v54 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&buf[32]);
  v66 = &buf[32];
  v67 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&__p, (uint64_t)buf, 2, 1, 2);
  p_p = &__p;
  v71 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v55, (uint64_t)&__p, 1, 1, 2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&__p);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v69, __p);
  for (j = 0; j != -64; j -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&buf[j + 32]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&buf[j + 40], buf[j + 32]);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v53);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v54, v53[0]);
  v37 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v36));
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
  {
    v38 = SHIBYTE(v61.__r_.__value_.__r.__words[2]);
    v39 = v61.__r_.__value_.__r.__words[0];
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v55, -1, 0x20u, 0, 0, &__p);
    v40 = &v61;
    if (v38 < 0)
      v40 = (std::string *)v39;
    if (SHIBYTE(p_p) >= 0)
      v41 = (uint64_t *)&__p;
    else
      v41 = (uint64_t *)__p;
    *(_DWORD *)buf = 136316162;
    *(_QWORD *)&buf[4] = "AudioSessionServerImpCommon.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 340;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = v73;
    *(_WORD *)&buf[28] = 2080;
    *(_QWORD *)&buf[30] = v40;
    *(_WORD *)&buf[38] = 2080;
    v65 = v41;
    _os_log_impl(&dword_1C895C000, v37, OS_LOG_TYPE_DEBUG, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
    if (SHIBYTE(p_p) < 0)
      operator delete(__p);
  }

  *(_DWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = v49;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v55);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v56, v55[0]);

LABEL_59:
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
LABEL_61:
  v44 = v63;
  if (v63)
  {
    v45 = (unint64_t *)&v63->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }

}

void sub_1C8977CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,char a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  void *v46;

  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&a19);
  if (a34 < 0)
    operator delete(__p);
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a36);

  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[11],char [11],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[11]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[11]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1C8977E44(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void as::server::AudioSessionInfo::SetCachedMode(as::server::AudioSessionInfo *this, CFTypeRef cf)
{
  void **v4;
  std::string v5;
  _QWORD v6[2];

  if (cf)
    CFRetain(cf);
  v6[0] = &off_1E82058A8;
  v6[1] = cf;
  OS::CF::String::AsStdString((OS::CF::String *)v6, &v5);
  v4 = (void **)((char *)this + 368);
  if (*((char *)this + 391) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = *(_OWORD *)&v5.__r_.__value_.__l.__data_;
  *((_QWORD *)this + 48) = *((_QWORD *)&v5.__r_.__value_.__l + 2);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v6);
}

uint64_t as::server::require_acq::AudioSessionSetClientPlayState_Inner(AudioSession *a1, int a2, AudioSession *a3, AudioSession *a4, unsigned int a5, char *a6, uint64_t a7)
{
  as::server::ConstAudioSessionInfo *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  AudioSessionDuckingInfo *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  as::server::ConstAudioSessionInfo *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  BOOL v24;
  NSObject *v25;
  const char *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t i;
  as::server *v30;
  NSObject *v31;
  uint64_t **v32;
  NSObject *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  as::server::require_acq *v41;
  id v42;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  as::server *v49;
  NSObject *v50;
  int v51;
  std::string::size_type v52;
  std::string *v53;
  void **v54;
  as::server::ConstAudioSessionInfo *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  as::server *v59;
  int v60;
  unint64_t *v61;
  unint64_t v62;
  NSObject *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  int Value;
  as::server::ConstAudioSessionInfo *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  NSObject *v75;
  std::string *v76;
  uint64_t v77;
  void **v78;
  as::server *v79;
  NSObject *v80;
  int IsSessionActive;
  const char *v82;
  void *v83;
  as::server *v84;
  char v85;
  NSObject *v86;
  int v87;
  std::string::size_type v88;
  std::string *v89;
  void **v90;
  NSObject *v91;
  as::server::ConstAudioSessionInfo *v92;
  unint64_t *v93;
  unint64_t v94;
  as::server *v95;
  int v96;
  std::string::size_type v97;
  std::string *v98;
  void **v99;
  as::server::ConstAudioSessionInfo *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  void **PlayerState;
  int v105;
  unint64_t *v106;
  unint64_t v107;
  BOOL v108;
  as::server::ConstAudioSessionInfo *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  int v113;
  unint64_t v114;
  as::server::ConstAudioSessionInfo *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  int v119;
  unint64_t v120;
  as::server::ConstAudioSessionInfo *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  as::server::ConstAudioSessionInfo *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  int v131;
  unint64_t v132;
  as::server::ConstAudioSessionInfo *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t v137;
  as::server::ConstAudioSessionInfo *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  int v142;
  unint64_t v143;
  as::server::ConstAudioSessionInfo *v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  unsigned int v148;
  unint64_t v149;
  as::server::ConstAudioSessionInfo *v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  as::server::ConstAudioSessionInfo *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  int v159;
  BOOL v160;
  unint64_t *v161;
  unint64_t v162;
  as::server::ConstAudioSessionInfo *v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  unint64_t v167;
  as::server::ConstAudioSessionInfo *v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  unint64_t v176;
  const char *v177;
  as::server::ConstAudioSessionInfo *v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  int v182;
  unint64_t v183;
  as::server::ConstAudioSessionInfo *v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  int v188;
  unint64_t v189;
  const void *v190;
  id v191;
  as::server::ConstAudioSessionInfo *v192;
  unint64_t *v193;
  unint64_t v194;
  void *v195;
  as::server::ConstAudioSessionInfo *v196;
  unint64_t *v197;
  unint64_t v198;
  uint64_t *v199;
  as::server::ConstAudioSessionInfo *v200;
  unint64_t *v201;
  unint64_t v202;
  uint64_t v203;
  as::server::ConstAudioSessionInfo *v204;
  unint64_t *v205;
  unint64_t v206;
  uint64_t v207;
  as::server::ConstAudioSessionInfo *v208;
  unint64_t *v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t kk;
  uint64_t mm;
  uint64_t nn;
  uint64_t *v215;
  unint64_t v216;
  uint64_t *v217;
  unint64_t v218;
  uint64_t *v219;
  unint64_t v220;
  uint64_t *v221;
  unint64_t v222;
  uint64_t *v223;
  unint64_t v224;
  uint64_t i1;
  uint64_t i2;
  uint64_t i3;
  uint64_t i4;
  uint64_t v229;
  NSObject *v230;
  uint64_t i5;
  uint64_t i6;
  uint64_t i7;
  as::server *v234;
  NSObject *v235;
  int v236;
  std::string::size_type v237;
  std::string *v238;
  void **v239;
  uint64_t v240;
  int v241;
  NSObject *v242;
  uint64_t *v243;
  unsigned __int8 v244;
  uint64_t *v245;
  NSObject *v246;
  const char *v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  unint64_t v251;
  uint64_t v252;
  int v253;
  NSObject *v254;
  as::server *v255;
  const void *v256;
  unsigned int v257;
  NSObject *v258;
  as *IsRemoteDeviceInputControlAllowed;
  char v260;
  uint64_t v261;
  char v263;
  NSObject *v264;
  uint64_t *v265;
  _BOOL4 v267;
  BOOL v269;
  NSObject *v270;
  uint64_t *v271;
  uint64_t v272;
  as::server::ConstAudioSessionInfo *v273;
  unint64_t *v274;
  unint64_t v275;
  as::server::ConstAudioSessionInfo *v276;
  unint64_t *v277;
  unint64_t v278;
  uint64_t i8;
  uint64_t **v280;
  NSObject *v281;
  int v282;
  std::string::size_type v283;
  std::string *v284;
  void **v285;
  as::server::LegacySessionManager *v286;
  int v287;
  as::server::ConstAudioSessionInfo *v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  as::server::ConstAudioSessionInfo *v292;
  unint64_t *v293;
  unint64_t v294;
  uint64_t *v295;
  uint64_t **v296;
  NSObject *v297;
  int v298;
  std::string::size_type v299;
  std::string *v300;
  void **v301;
  AudioSessionDuckingInfo *v302;
  NSObject *v303;
  as::server::ConstAudioSessionInfo *v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  unint64_t *v308;
  unint64_t v309;
  as::server::ConstAudioSessionInfo *v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  int v314;
  unint64_t v315;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  void *v320;
  os_unfair_lock_s *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  int v351;
  int v352;
  unsigned int v353;
  int v354;
  unsigned int v355;
  const char *v356;
  BOOL v357;
  int v358;
  int v359;
  int v360;
  OS::CF *v361;
  uint64_t *v365[2];
  _QWORD v366[2];
  uint64_t *v367[2];
  uint64_t *v368[2];
  unsigned __int8 v369[8];
  uint64_t *v370[2];
  std::__shared_weak_count *v371;
  as::server::ConstAudioSessionInfo *v372;
  std::__shared_weak_count *v373;
  as::server::ConstAudioSessionInfo *v374;
  std::__shared_weak_count *v375;
  as::server::ConstAudioSessionInfo *v376;
  std::__shared_weak_count *v377;
  char *v378;
  std::__shared_weak_count *v379;
  char *v380;
  uint64_t *v381;
  char *v382;
  char *v383;
  void *v384;
  uint64_t *v385;
  char v386;
  char *v387;
  char *v388;
  uint64_t *v389;
  BOOL v390;
  BOOL v391;
  std::string v392;
  as::server::ConstAudioSessionInfo *v393;
  std::__shared_weak_count *v394;
  char v395;
  int v396[3];
  void *__p[3];
  char v398;
  _BYTE v399[8];
  uint64_t *v400;
  _BYTE *v401;
  char v402;
  char v403[8];
  uint64_t v404;
  char *v405;
  char v406;
  char v407[8];
  uint64_t v408;
  char *v409;
  char v410;
  _BYTE v411[8];
  _QWORD v412[2];
  char v413;
  std::string v414;
  char v415;
  _BYTE v416[8];
  _QWORD v417[2];
  char v418;
  _BYTE v419[8];
  uint64_t *v420;
  _BYTE *v421;
  char v422;
  _BYTE v423[8];
  uint64_t v424;
  _BYTE *v425;
  char v426;
  _BYTE v427[8];
  uint64_t *v428;
  _BYTE *v429;
  char v430;
  _BYTE v431[16];
  uint64_t v432;
  char v433;
  _BYTE v434[8];
  uint64_t *v435;
  _BYTE *v436;
  char v437;
  _BYTE v438[16];
  uint64_t v439;
  char v440;
  _BYTE cf[40];
  std::string *v442;
  _BYTE v443[10];
  _BYTE v444[16];
  _BYTE *v445;
  char v446;
  _BYTE v447[16];
  _BYTE *v448;
  char v449;
  _BYTE v450[16];
  _BYTE *v451;
  char v452;
  uint64_t *v453;
  uint64_t *v454;
  uint64_t **v455;
  char v456;
  _BYTE v457[8];
  uint64_t *v458;
  _BYTE *v459;
  char v460;
  uint64_t v461;

  v461 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v396[1] = a7;
  v396[0] = 0;
  as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor((as::server::AudioSessionInfoAccessor *)&v393, a1);
  if (a7)
  {
    v11 = v393;
    if (!v393)
    {
LABEL_33:
      if (a5)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[3],char [3],0>((uint64_t)cf, "ID");
        *(_QWORD *)&cf[16] = cf;
        cf[24] = 1;
        AudioSession::FormatSessionIDAsHex(a1, &v453);
        *(_QWORD *)v443 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>((uint64_t)&cf[32], (uint64_t)&v453);
        v443[8] = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)__p, (uint64_t)cf, 2, 1, 2);
        __p[2] = __p;
        v398 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v434, (uint64_t)__p, 1, 1, 2);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)__p);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&__p[1], LOBYTE(__p[0]));
        for (i = 0; i != -64; i -= 32)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&cf[i + 32]);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&cf[i + 40], cf[i + 32]);
        }
        if (SHIBYTE(v455) < 0)
          operator delete(v453);
        v31 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v30));
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        {
          memset(__p, 0, sizeof(__p));
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v434, -1, 0x20u, 0, 0, &v453);
          if (SHIBYTE(v455) >= 0)
            v32 = &v453;
          else
            v32 = (uint64_t **)v453;
          *(_DWORD *)cf = 136316418;
          *(_QWORD *)&cf[4] = "AudioSessionServerImpPlayState.mm";
          *(_WORD *)&cf[12] = 1024;
          *(_DWORD *)&cf[14] = 308;
          *(_WORD *)&cf[18] = 2080;
          *(_QWORD *)&cf[20] = "set_play_state";
          *(_WORD *)&cf[28] = 2080;
          *(_QWORD *)&cf[30] = "session lookup failed";
          *(_WORD *)&cf[38] = 2080;
          v442 = (std::string *)__p;
          *(_WORD *)v443 = 2080;
          *(_QWORD *)&v443[2] = v32;
          _os_log_impl(&dword_1C895C000, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d { \"action\":\"%s\", \"error\":\"%s\", \"session\":%s, \"details\":%s }", cf, 0x3Au);
          if (SHIBYTE(v455) < 0)
            operator delete(v453);
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
        }

        v23 = 561210739;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v434);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v435, v434[0]);
        goto LABEL_566;
      }
      v23 = 561210739;
      v33 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v11));
      if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
        goto LABEL_566;
      *(_DWORD *)cf = 136315650;
      *(_QWORD *)&cf[4] = "AudioSessionServerImpPlayState.mm";
      *(_WORD *)&cf[12] = 1024;
      *(_DWORD *)&cf[14] = 303;
      *(_WORD *)&cf[18] = 1024;
      *(_DWORD *)&cf[20] = (_DWORD)a1;
      v26 = "%25s:%-5d sessionID = 0x%x: session lookup failed  (client exited?)";
      v27 = v33;
      v28 = OS_LOG_TYPE_DEBUG;
LABEL_49:
      _os_log_impl(&dword_1C895C000, v27, v28, v26, cf, 0x18u);
      goto LABEL_566;
    }
    v12 = v394;
    if (v394)
    {
      p_shared_owners = (unint64_t *)&v394->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v11, cf);
    v16 = *(_QWORD *)cf;
    if (*(_QWORD *)cf)
      CFRelease(*(CFTypeRef *)cf);
    if (v12)
    {
      v17 = (unint64_t *)&v12->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (v16 != a7)
    {
      v19 = v393;
      if (!v393)
      {
        v318 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v318);
      }
      v20 = v394;
      *(_QWORD *)cf = v393;
      *(_QWORD *)&cf[8] = v394;
      if (v394)
      {
        v21 = (unint64_t *)&v394->__shared_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      if (*((char *)v19 + 223) < 0)
        std::string::__init_copy_ctor_external(&v414, *((const std::string::value_type **)v19 + 25), *((_QWORD *)v19 + 26));
      else
        v414 = *(std::string *)((char *)v19 + 200);
      if (v20)
      {
        v39 = (unint64_t *)&v20->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      if (a6)
      {
        v41 = *(as::server::require_acq **)&v396[1];
        if (*(_QWORD *)&v396[1])
        {
          if (v393)
          {
            os_unfair_lock_unlock((os_unfair_lock_t)v393 + 158);
            v395 = 0;
            v41 = *(as::server::require_acq **)&v396[1];
          }
          as::server::require_acq::GetAudioQueueOptions(v41, a6, v15);
        }
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)__p, "type");
      __p[2] = __p;
      v398 = 1;
      v388 = (char *)AudioSession::ClientPlayerAsCString(a2);
      v401 = (_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v399, &v388);
      v402 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)cf, (uint64_t)__p, 2, 1, 2);
      *(_QWORD *)&cf[16] = cf;
      cf[24] = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[7],char [7],0>((uint64_t)&v453, "player");
      v455 = &v453;
      v456 = 1;
      AudioSession::FormatPointerAsHex(a3, &v392);
      v459 = (_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>((uint64_t)v457, (uint64_t)&v392);
      v460 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&cf[32], (uint64_t)&v453, 2, 1, 2);
      *(_QWORD *)v443 = &cf[32];
      v443[8] = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>((uint64_t)v434, "modes");
      v436 = v434;
      v437 = 1;
      AudioSession::ClientActiveModesToString(a4);
      v42 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v380 = (char *)objc_msgSend(v42, "UTF8String");
      v439 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v438, &v380);
      v440 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v444, (uint64_t)v434, 2, 1, 2);
      v445 = v444;
      v446 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>((uint64_t)v427, "state");
      v429 = v427;
      v430 = 1;
      v378 = (char *)AudioSession::PlayStateToString(a5);
      v432 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v431, &v378);
      v433 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v447, (uint64_t)v427, 2, 1, 2);
      v448 = v447;
      v449 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[26],char [26],0>((uint64_t)v419, "FigPlayer-owned MXSession");
      v421 = v419;
      v422 = 1;
      v423[0] = 4;
      v424 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v423);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v423);
      v425 = v423;
      v426 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v450, (uint64_t)v419, 2, 1, 2);
      v451 = v450;
      v452 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v384, (uint64_t)cf, 5, 1, 2);
      for (j = 0; j != -160; j -= 32)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v450[j]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v450[j + 8], v450[j]);
      }
      for (k = 0; k != -64; k -= 32)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v423[k]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&v424 + k), v423[k]);
      }
      for (m = 0; m != -64; m -= 32)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v431[m]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v431[m + 8], v431[m]);
      }
      for (n = 0; n != -64; n -= 32)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v438[n]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v438[n + 8], v438[n]);
      }

      for (ii = 0; ii != -8; ii -= 4)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v457[ii * 8]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v458)[ii], v457[ii * 8]);
      }
      if (SHIBYTE(v392.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v392.__r_.__value_.__l.__data_);
      for (jj = 0; jj != -8; jj -= 4)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v399[jj * 8]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v400)[jj], v399[jj * 8]);
      }
      v50 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v49));
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
      {
        v51 = SHIBYTE(v414.__r_.__value_.__r.__words[2]);
        v52 = v414.__r_.__value_.__r.__words[0];
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&v384, -1, 0x20u, 0, 0, __p);
        v53 = &v414;
        if (v51 < 0)
          v53 = (std::string *)v52;
        if (SHIBYTE(__p[2]) >= 0)
          v54 = __p;
        else
          v54 = (void **)__p[0];
        *(_DWORD *)cf = 136316162;
        *(_QWORD *)&cf[4] = "AudioSessionServerImpPlayState.mm";
        *(_WORD *)&cf[12] = 1024;
        *(_DWORD *)&cf[14] = 275;
        *(_WORD *)&cf[18] = 2080;
        *(_QWORD *)&cf[20] = "set_play_state";
        *(_WORD *)&cf[28] = 2080;
        *(_QWORD *)&cf[30] = v53;
        *(_WORD *)&cf[38] = 2080;
        v442 = (std::string *)v54;
        _os_log_impl(&dword_1C895C000, v50, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", cf, 0x30u);
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
      }

      v55 = v393;
      if (!v393)
      {
        v319 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v319);
      }
      v56 = v394;
      *(_QWORD *)cf = v393;
      *(_QWORD *)&cf[8] = v394;
      if (v394)
      {
        v57 = (unint64_t *)&v394->__shared_owners_;
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      v59 = (as::server *)as::server::AudioSessionInfo::SetSiblingPlayerState((uint64_t)v55, *(unint64_t *)&v396[1], (uint64_t)a3, (int)a4, a5, a2);
      v60 = (int)v59;
      if (v56)
      {
        v61 = (unint64_t *)&v56->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
      v63 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v59));
      if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
      {
        v64 = "true";
        *(_QWORD *)&cf[4] = "AudioSessionServerImpPlayState.mm";
        *(_DWORD *)cf = 136315650;
        if (!v60)
          v64 = "false";
        *(_WORD *)&cf[12] = 1024;
        *(_DWORD *)&cf[14] = 282;
        *(_WORD *)&cf[18] = 2080;
        *(_QWORD *)&cf[20] = v64;
        _os_log_impl(&dword_1C895C000, v63, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting kMXSessionProperty IsPlayingOutput/AudioToolboxIsPlaying for FigPlayer-owned MXSession to: %s", cf, 0x1Cu);
      }
      v65 = _MXSessionSetProperty();
      v396[0] = v65;
      if ((_DWORD)v65)
        v396[0] = as::server::TranslateCMSessionErrorCode((uint64_t)"set_mx_IsPlayingOutput_property", (uint64_t *)&v414, 288, v65);
      v66 = _MXSessionSetProperty();
      v396[0] = v66;
      if ((_DWORD)v66)
      {
        v23 = as::server::TranslateCMSessionErrorCode((uint64_t)"set_mx_AudioToolboxIsPlaying_property", (uint64_t *)&v414, 295, v66);
        v396[0] = v23;
      }
      else
      {
        v23 = 0;
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v384);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v385, v384);
      if (SHIBYTE(v414.__r_.__value_.__r.__words[2]) < 0)
      {
        v67 = (void *)v414.__r_.__value_.__r.__words[0];
LABEL_565:
        operator delete(v67);
        goto LABEL_566;
      }
      goto LABEL_566;
    }
  }
  v11 = v393;
  if (!v393)
    goto LABEL_33;
  if (!*(_QWORD *)&v396[1])
  {
    v34 = v394;
    if (v394)
    {
      v35 = (unint64_t *)&v394->__shared_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v11, cf);
    v11 = *(as::server::ConstAudioSessionInfo **)cf;
    *(_QWORD *)&v396[1] = *(_QWORD *)cf;
    if (*(_QWORD *)cf)
      CFRelease(*(CFTypeRef *)cf);
    if (v34)
    {
      v37 = (unint64_t *)&v34->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
  }
  if (!a5 || (a4 & 0x11) == 0 || (a4 & 2) != 0)
    goto LABEL_115;
  __p[0] = 0;
  v23 = _MXSessionCopyProperty();
  if ((_DWORD)v23)
    v24 = 1;
  else
    v24 = __p[0] == 0;
  if (v24)
  {
    if (!(_DWORD)v23)
      goto LABEL_566;
    v25 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)__p[0]));
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      goto LABEL_566;
    *(_DWORD *)cf = 136315650;
    *(_QWORD *)&cf[4] = "AudioSessionServerImpPlayState.mm";
    *(_WORD *)&cf[12] = 1024;
    *(_DWORD *)&cf[14] = 336;
    *(_WORD *)&cf[18] = 1024;
    *(_DWORD *)&cf[20] = v23;
    v26 = "%25s:%-5d kMXSessionProperty_SystemHasAudioInputDevice failed: %d";
    v27 = v25;
    v28 = OS_LOG_TYPE_ERROR;
    goto LABEL_49;
  }
  Value = CFBooleanGetValue((CFBooleanRef)__p[0]);
  CFRelease(__p[0]);
  if (!Value)
  {
    if ((v11 & 1) == 0)
    {
      v23 = 561145203;
      goto LABEL_566;
    }
  }
LABEL_115:
  v69 = v393;
  if (!v393)
  {
    v317 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v317);
  }
  v70 = v394;
  *(_QWORD *)cf = v393;
  *(_QWORD *)&cf[8] = v394;
  if (v394)
  {
    v71 = (unint64_t *)&v394->__shared_owners_;
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  if (*((char *)v69 + 223) < 0)
    std::string::__init_copy_ctor_external(&v392, *((const std::string::value_type **)v69 + 25), *((_QWORD *)v69 + 26));
  else
    v392 = *(std::string *)((char *)v69 + 200);
  if (v70)
  {
    v73 = (unint64_t *)&v70->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v75 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v11));
  if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
  {
    if ((v392.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v76 = &v392;
    else
      v76 = (std::string *)v392.__r_.__value_.__r.__words[0];
    v77 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>((uint64_t)&v453, "entry");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(v77, -1, 0x20u, 0, 0, __p);
    if (SHIBYTE(__p[2]) >= 0)
      v78 = __p;
    else
      v78 = (void **)__p[0];
    *(_DWORD *)cf = 136316162;
    *(_QWORD *)&cf[4] = "AudioSessionServerImpPlayState.mm";
    *(_WORD *)&cf[12] = 1024;
    *(_DWORD *)&cf[14] = 342;
    *(_WORD *)&cf[18] = 2080;
    *(_QWORD *)&cf[20] = "set_play_state";
    *(_WORD *)&cf[28] = 2080;
    *(_QWORD *)&cf[30] = v76;
    *(_WORD *)&cf[38] = 2080;
    v442 = (std::string *)v78;
    _os_log_impl(&dword_1C895C000, v75, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", cf, 0x30u);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v453);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v454, v453);
  }

  if (*(_QWORD *)&v396[1])
  {
    v80 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v79));
    if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
    {
      IsSessionActive = as::server::IsSessionActive(*(as::server **)&v396[1], (const void *)1);
      v82 = "true";
      *(_QWORD *)&cf[4] = "AudioSessionServerImpPlayState.mm";
      *(_DWORD *)cf = 136315650;
      if (!IsSessionActive)
        v82 = "false";
      *(_WORD *)&cf[12] = 1024;
      *(_DWORD *)&cf[14] = 353;
      *(_WORD *)&cf[18] = 2080;
      *(_QWORD *)&cf[20] = v82;
      _os_log_impl(&dword_1C895C000, v80, OS_LOG_TYPE_DEBUG, "%25s:%-5d   IsSessionActive() = %s", cf, 0x1Cu);
    }

    if (a5)
    {
      *(_QWORD *)cf = 0;
      _MXSessionCopyProperty();
      v83 = *(void **)cf;
      v84 = (as::server *)objc_msgSend(*(id *)cf, "isEqualToString:", *MEMORY[0x1E0D48EB0]);
      v85 = v84 ^ 1;
      if ((a4 & 0x13) == 0)
        v85 = 1;
      if ((v85 & 1) == 0)
      {
        v86 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v84));
        if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
        {
          v87 = SHIBYTE(v392.__r_.__value_.__r.__words[2]);
          v88 = v392.__r_.__value_.__r.__words[0];
          LOBYTE(v453) = 0;
          v454 = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v453);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v453);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&v453, -1, 0x20u, 0, 0, __p);
          v89 = &v392;
          if (v87 < 0)
            v89 = (std::string *)v88;
          if (SHIBYTE(__p[2]) >= 0)
            v90 = __p;
          else
            v90 = (void **)__p[0];
          *(_DWORD *)cf = 136316418;
          *(_QWORD *)&cf[4] = "AudioSessionServerImpPlayState.mm";
          *(_WORD *)&cf[12] = 1024;
          *(_DWORD *)&cf[14] = 364;
          *(_WORD *)&cf[18] = 2080;
          *(_QWORD *)&cf[20] = "set_play_state";
          *(_WORD *)&cf[28] = 2080;
          *(_QWORD *)&cf[30] = "Error adding running client - category is processing only but input/output requested";
          *(_WORD *)&cf[38] = 2080;
          v442 = v89;
          *(_WORD *)v443 = 2080;
          *(_QWORD *)&v443[2] = v90;
LABEL_170:
          _os_log_impl(&dword_1C895C000, v86, OS_LOG_TYPE_ERROR, "%25s:%-5d { \"action\":\"%s\", \"error\":\"%s\", \"session\":%s, \"details\":%s }", cf, 0x3Au);
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&v453);
          goto LABEL_173;
        }
        goto LABEL_173;
      }
      v92 = v393;
      if (!v393)
      {
        v341 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v341);
      }
      *(_QWORD *)cf = v393;
      *(_QWORD *)&cf[8] = v394;
      if (v394)
      {
        v93 = (unint64_t *)&v394->__shared_owners_;
        do
          v94 = __ldxr(v93);
        while (__stxr(v94 + 1, v93));
      }
      if (*((_DWORD *)v92 + 23) == 1935830119)
      {
        if ((objc_msgSend(v83, "isEqualToString:", *MEMORY[0x1E0D48F38]) & 1) != 0
          || (objc_msgSend(v83, "isEqualToString:", *MEMORY[0x1E0D48FC8]) & 1) != 0)
        {
          v95 = (as::server *)std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)cf);
          goto LABEL_163;
        }
        v95 = (as::server *)std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)cf);
        if (a2 == 1885564012)
        {
LABEL_163:
          v86 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v95));
          if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
          {
            v96 = SHIBYTE(v392.__r_.__value_.__r.__words[2]);
            v97 = v392.__r_.__value_.__r.__words[0];
            LOBYTE(v453) = 0;
            v454 = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v453);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v453);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&v453, -1, 0x20u, 0, 0, __p);
            v98 = &v392;
            if (v96 < 0)
              v98 = (std::string *)v97;
            if (SHIBYTE(__p[2]) >= 0)
              v99 = __p;
            else
              v99 = (void **)__p[0];
            *(_DWORD *)cf = 136316418;
            *(_QWORD *)&cf[4] = "AudioSessionServerImpPlayState.mm";
            *(_WORD *)&cf[12] = 1024;
            *(_DWORD *)&cf[14] = 375;
            *(_WORD *)&cf[18] = 2080;
            *(_QWORD *)&cf[20] = "set_play_state";
            *(_WORD *)&cf[28] = 2080;
            *(_QWORD *)&cf[30] = "Error adding running client on a sibling session with PhoneCall / TTY category or Phone"
                                 "Call player type";
            *(_WORD *)&cf[38] = 2080;
            v442 = v98;
            *(_WORD *)v443 = 2080;
            *(_QWORD *)&v443[2] = v99;
            goto LABEL_170;
          }
LABEL_173:

          v23 = 560161140;
          goto LABEL_563;
        }
      }
      else
      {
        std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)cf);
      }

    }
    v100 = v393;
    if (!v393)
    {
      v322 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v322);
    }
    v101 = v394;
    *(_QWORD *)cf = v393;
    *(_QWORD *)&cf[8] = v394;
    if (v394)
    {
      v102 = (unint64_t *)&v394->__shared_owners_;
      do
        v103 = __ldxr(v102);
      while (__stxr(v103 + 1, v102));
    }
    PlayerState = as::server::AudioSessionInfo::GetPlayerState(v100, a3);
    v105 = a4 & (a5 == 1);
    if (v101)
    {
      v106 = (unint64_t *)&v101->__shared_owners_;
      do
        v107 = __ldaxr(v106);
      while (__stlxr(v107 - 1, v106));
      if (!v107)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
      }
    }
    v108 = 0;
    if (PlayerState)
    {
      if ((a4 & 0x10) != 0 && a5 == 1)
        v108 = *((_DWORD *)PlayerState + 2) == 1 && (*((_BYTE *)PlayerState + 12) & 0x10) == 0;
      if ((*((_BYTE *)PlayerState + 12) & 1) != 0 && *((_DWORD *)PlayerState + 2) == 1)
        v105 = 0;
    }
    v109 = v393;
    if (!v393)
    {
      v323 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v323);
    }
    v110 = v394;
    if (v394)
    {
      v111 = (unint64_t *)&v394->__shared_owners_;
      do
        v112 = __ldxr(v111);
      while (__stxr(v112 + 1, v111));
      v113 = *((_DWORD *)v109 + 67);
      do
        v114 = __ldaxr(v111);
      while (__stlxr(v114 - 1, v111));
      if (!v114)
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
      }
    }
    else
    {
      v113 = *((_DWORD *)v393 + 67);
    }
    v115 = v393;
    if (!v393)
    {
      v324 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v324);
    }
    v116 = v394;
    if (v394)
    {
      v117 = (unint64_t *)&v394->__shared_owners_;
      do
        v118 = __ldxr(v117);
      while (__stxr(v118 + 1, v117));
      v119 = *((_DWORD *)v115 + 76);
      do
        v120 = __ldaxr(v117);
      while (__stlxr(v120 - 1, v117));
      if (!v120)
      {
        ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
        std::__shared_weak_count::__release_weak(v116);
      }
    }
    else
    {
      v119 = *((_DWORD *)v393 + 76);
    }
    v121 = v393;
    if (!v393)
    {
      v325 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v325);
    }
    v122 = v394;
    *(_QWORD *)cf = v393;
    *(_QWORD *)&cf[8] = v394;
    if (v394)
    {
      v123 = (unint64_t *)&v394->__shared_owners_;
      do
        v124 = __ldxr(v123);
      while (__stxr(v124 + 1, v123));
    }
    as::server::AudioSessionInfo::SetPlayerState((uint64_t)v121, (uint64_t)a3, (int)a4, a5, a2);
    if (v122)
    {
      v125 = (unint64_t *)&v122->__shared_owners_;
      do
        v126 = __ldaxr(v125);
      while (__stlxr(v126 - 1, v125));
      if (!v126)
      {
        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
        std::__shared_weak_count::__release_weak(v122);
      }
    }
    v127 = v393;
    if (!v393)
    {
      v326 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v326);
    }
    v128 = v394;
    if (v394)
    {
      v129 = (unint64_t *)&v394->__shared_owners_;
      do
        v130 = __ldxr(v129);
      while (__stxr(v130 + 1, v129));
      v131 = *((_DWORD *)v127 + 67);
      do
        v132 = __ldaxr(v129);
      while (__stlxr(v132 - 1, v129));
      if (!v132)
      {
        ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
        std::__shared_weak_count::__release_weak(v128);
      }
    }
    else
    {
      v131 = *((_DWORD *)v393 + 67);
    }
    v133 = v393;
    if (!v393)
    {
      v327 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v327);
    }
    v134 = v394;
    if (v394)
    {
      v135 = (unint64_t *)&v394->__shared_owners_;
      do
        v136 = __ldxr(v135);
      while (__stxr(v136 + 1, v135));
      v360 = *((_DWORD *)v133 + 76);
      do
        v137 = __ldaxr(v135);
      while (__stlxr(v137 - 1, v135));
      if (!v137)
      {
        ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
        std::__shared_weak_count::__release_weak(v134);
      }
    }
    else
    {
      v360 = *((_DWORD *)v393 + 76);
    }
    v138 = v393;
    if (!v393)
    {
      v328 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v328);
    }
    v139 = v394;
    if (v394)
    {
      v140 = (unint64_t *)&v394->__shared_owners_;
      do
        v141 = __ldxr(v140);
      while (__stxr(v141 + 1, v140));
      v142 = *((unsigned __int8 *)v138 + 272);
      do
        v143 = __ldaxr(v140);
      while (__stlxr(v143 - 1, v140));
      if (!v143)
      {
        ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
        std::__shared_weak_count::__release_weak(v139);
      }
    }
    else
    {
      v142 = *((unsigned __int8 *)v393 + 272);
    }
    v144 = v393;
    if (!v393)
    {
      v329 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v329);
    }
    v145 = v394;
    v359 = v119;
    if (v394)
    {
      v146 = (unint64_t *)&v394->__shared_owners_;
      do
        v147 = __ldxr(v146);
      while (__stxr(v147 + 1, v146));
      v148 = *((_DWORD *)v144 + 71);
      do
        v149 = __ldaxr(v146);
      while (__stlxr(v149 - 1, v146));
      if (!v149)
      {
        ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
        std::__shared_weak_count::__release_weak(v145);
      }
    }
    else
    {
      v148 = *((_DWORD *)v393 + 71);
    }
    v150 = v393;
    if (!v393)
    {
      v330 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v330);
    }
    v151 = v394;
    if (v394)
    {
      v152 = (unint64_t *)&v394->__shared_owners_;
      do
        v153 = __ldxr(v152);
      while (__stxr(v153 + 1, v152));
      v355 = *((_DWORD *)v150 + 74);
      do
        v154 = __ldaxr(v152);
      while (__stlxr(v154 - 1, v152));
      if (!v154)
      {
        ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
        std::__shared_weak_count::__release_weak(v151);
      }
    }
    else
    {
      v355 = *((_DWORD *)v393 + 74);
    }
    v391 = 0;
    v155 = v393;
    if (!v393)
    {
      v331 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v331);
    }
    v156 = v394;
    if (v394)
    {
      v157 = (unint64_t *)&v394->__shared_owners_;
      do
        v158 = __ldxr(v157);
      while (__stxr(v158 + 1, v157));
    }
    v353 = v148;
    v159 = *((_DWORD *)v155 + 73);
    if (v159)
    {
      v160 = *((_DWORD *)v155 + 70) == v159;
      if (!v156)
        goto LABEL_278;
    }
    else
    {
      v160 = 0;
      if (!v156)
        goto LABEL_278;
    }
    v161 = (unint64_t *)&v156->__shared_owners_;
    do
      v162 = __ldaxr(v161);
    while (__stlxr(v162 - 1, v161));
    if (!v162)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
LABEL_278:
    v391 = v160;
    v163 = v393;
    if (!v393)
    {
      v332 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v332);
    }
    v164 = v394;
    if (v394)
    {
      v165 = (unint64_t *)&v394->__shared_owners_;
      do
        v166 = __ldxr(v165);
      while (__stxr(v166 + 1, v165));
      v352 = *((_DWORD *)v163 + 107);
      do
        v167 = __ldaxr(v165);
      while (__stlxr(v167 - 1, v165));
      if (!v167)
      {
        ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
        std::__shared_weak_count::__release_weak(v164);
      }
    }
    else
    {
      v352 = *((_DWORD *)v393 + 107);
    }
    v168 = v393;
    if (!v393)
    {
      v333 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v333);
    }
    v169 = v394;
    if (v394)
    {
      v170 = (unint64_t *)&v394->__shared_owners_;
      do
        v171 = __ldxr(v170);
      while (__stxr(v171 + 1, v170));
      v354 = *((_DWORD *)v168 + 77);
      do
        v172 = __ldaxr(v170);
      while (__stlxr(v172 - 1, v170));
      if (!v172)
      {
        ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
        std::__shared_weak_count::__release_weak(v169);
      }
    }
    else
    {
      v354 = *((_DWORD *)v393 + 77);
    }
    if (!v393)
    {
      v334 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v334);
    }
    v173 = v394;
    v351 = v105;
    v357 = v108;
    if (v394)
    {
      v174 = (unint64_t *)&v394->__shared_owners_;
      do
        v175 = __ldxr(v174);
      while (__stxr(v175 + 1, v174));
      do
        v176 = __ldaxr(v174);
      while (__stlxr(v176 - 1, v174));
      if (!v176)
      {
        ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
        std::__shared_weak_count::__release_weak(v173);
      }
    }
    v390 = 0;
    v361 = 0;
    v177 = 0;
    if (v113 || !(v131 | v142))
    {
LABEL_333:
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)&v453, "type");
      v455 = &v453;
      v456 = 1;
      v387 = (char *)AudioSession::ClientPlayerAsCString(a2);
      v459 = (_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v457, &v387);
      v460 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)cf, (uint64_t)&v453, 2, 1, 2);
      *(_QWORD *)&cf[16] = cf;
      cf[24] = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[7],char [7],0>((uint64_t)v434, "player");
      v436 = v434;
      v437 = 1;
      AudioSession::FormatPointerAsHex(a3, &v384);
      v439 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>((uint64_t)v438, (uint64_t)&v384);
      v440 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&cf[32], (uint64_t)v434, 2, 1, 2);
      *(_QWORD *)v443 = &cf[32];
      v443[8] = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>((uint64_t)v427, "modes");
      v356 = v177;
      v358 = v131;
      v429 = v427;
      v430 = 1;
      AudioSession::ClientActiveModesToString(a4);
      v191 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v383 = (char *)objc_msgSend(v191, "UTF8String");
      v432 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v431, &v383);
      v433 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v444, (uint64_t)v427, 2, 1, 2);
      v445 = v444;
      v446 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>((uint64_t)v419, "state");
      v421 = v419;
      v422 = 1;
      v382 = (char *)AudioSession::PlayStateToString(a5);
      v425 = (_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v423, &v382);
      v426 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v447, (uint64_t)v419, 2, 1, 2);
      v448 = v447;
      v449 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[4],char [4],0>((uint64_t)&v414, "IOs");
      v414.__r_.__value_.__r.__words[2] = (std::string::size_type)&v414;
      v415 = 1;
      v192 = v393;
      if (!v393)
      {
        v335 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v335);
      }
      v378 = (char *)v393;
      v379 = v394;
      if (v394)
      {
        v193 = (unint64_t *)&v394->__shared_owners_;
        do
          v194 = __ldxr(v193);
        while (__stxr(v194 + 1, v193));
      }
      v195 = (void *)*((int *)v192 + 71);
      LOBYTE(__p[0]) = 5;
      __p[1] = v195;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)__p);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)__p);
      __p[2] = __p;
      v398 = 1;
      v196 = v393;
      if (!v393)
      {
        v336 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v336);
      }
      v376 = v393;
      v377 = v394;
      if (v394)
      {
        v197 = (unint64_t *)&v394->__shared_owners_;
        do
          v198 = __ldxr(v197);
        while (__stxr(v198 + 1, v197));
      }
      v199 = (uint64_t *)*((int *)v196 + 69);
      v399[0] = 5;
      v400 = v199;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v399);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v399);
      v401 = v399;
      v402 = 1;
      v200 = v393;
      if (!v393)
      {
        v337 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v337);
      }
      v374 = v393;
      v375 = v394;
      if (v394)
      {
        v201 = (unint64_t *)&v394->__shared_owners_;
        do
          v202 = __ldxr(v201);
        while (__stxr(v202 + 1, v201));
      }
      v203 = *((int *)v200 + 75);
      v403[0] = 5;
      v404 = v203;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v403);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v403);
      v405 = v403;
      v406 = 1;
      v204 = v393;
      if (!v393)
      {
        v338 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v338);
      }
      v372 = v393;
      v373 = v394;
      if (v394)
      {
        v205 = (unint64_t *)&v394->__shared_owners_;
        do
          v206 = __ldxr(v205);
        while (__stxr(v206 + 1, v205));
      }
      v207 = *((int *)v204 + 76);
      v407[0] = 5;
      v408 = v207;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v407);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v407);
      v409 = v407;
      v410 = 1;
      v208 = v393;
      if (!v393)
      {
        v339 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v339);
      }
      v370[1] = (uint64_t *)v393;
      v371 = v394;
      if (v394)
      {
        v209 = (unint64_t *)&v394->__shared_owners_;
        do
          v210 = __ldxr(v209);
        while (__stxr(v210 + 1, v209));
      }
      v211 = *((int *)v208 + 72);
      v411[0] = 5;
      v412[0] = v211;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v411);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v411);
      v412[1] = v411;
      v413 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v380, (uint64_t)__p, 5, 1, 2);
      v416[0] = (_BYTE)v380;
      v417[0] = v381;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v380);
      LOBYTE(v380) = 0;
      v381 = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v416);
      v417[1] = v416;
      v418 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v450, (uint64_t)&v414, 2, 1, 2);
      v451 = v450;
      v452 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v388, (uint64_t)cf, 5, 1, 2);
      for (kk = 0; kk != -160; kk -= 32)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v450[kk]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v450[kk + 8], v450[kk]);
      }
      for (mm = 0; mm != -8; mm -= 4)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v416[mm * 8]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v417[mm], v416[mm * 8]);
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v380);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v381, v380);
      for (nn = 0; nn != -20; nn -= 4)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v411[nn * 8]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v412[nn], v411[nn * 8]);
      }
      if (v371)
      {
        v215 = &v371->__shared_owners_;
        do
          v216 = __ldaxr((unint64_t *)v215);
        while (__stlxr(v216 - 1, (unint64_t *)v215));
        if (!v216)
        {
          ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
          std::__shared_weak_count::__release_weak(v371);
        }
      }
      if (v373)
      {
        v217 = &v373->__shared_owners_;
        do
          v218 = __ldaxr((unint64_t *)v217);
        while (__stlxr(v218 - 1, (unint64_t *)v217));
        if (!v218)
        {
          ((void (*)(std::__shared_weak_count *))v373->__on_zero_shared)(v373);
          std::__shared_weak_count::__release_weak(v373);
        }
      }
      if (v375)
      {
        v219 = &v375->__shared_owners_;
        do
          v220 = __ldaxr((unint64_t *)v219);
        while (__stlxr(v220 - 1, (unint64_t *)v219));
        if (!v220)
        {
          ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
          std::__shared_weak_count::__release_weak(v375);
        }
      }
      if (v377)
      {
        v221 = &v377->__shared_owners_;
        do
          v222 = __ldaxr((unint64_t *)v221);
        while (__stlxr(v222 - 1, (unint64_t *)v221));
        if (!v222)
        {
          ((void (*)(std::__shared_weak_count *))v377->__on_zero_shared)(v377);
          std::__shared_weak_count::__release_weak(v377);
        }
      }
      if (v379)
      {
        v223 = &v379->__shared_owners_;
        do
          v224 = __ldaxr((unint64_t *)v223);
        while (__stlxr(v224 - 1, (unint64_t *)v223));
        if (!v224)
        {
          ((void (*)(std::__shared_weak_count *))v379->__on_zero_shared)(v379);
          std::__shared_weak_count::__release_weak(v379);
        }
      }
      for (i1 = 0; i1 != -64; i1 -= 32)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v423[i1]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&v424 + i1), v423[i1]);
      }
      for (i2 = 0; i2 != -64; i2 -= 32)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v431[i2]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v431[i2 + 8], v431[i2]);
      }

      for (i3 = 0; i3 != -64; i3 -= 32)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v438[i3]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v438[i3 + 8], v438[i3]);
      }
      if (v386 < 0)
        operator delete(v384);
      for (i4 = 0; i4 != -8; i4 -= 4)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v457[i4 * 8]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v458)[i4], v457[i4 * 8]);
      }
      if (v393)
      {
        os_unfair_lock_unlock((os_unfair_lock_t)v393 + 158);
        v395 = 0;
      }
      if (v361)
      {
        v230 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v229));
        if (os_log_type_enabled(v230, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)cf = 136315650;
          *(_QWORD *)&cf[4] = "AudioSessionServerImpPlayState.mm";
          *(_WORD *)&cf[12] = 1024;
          *(_DWORD *)&cf[14] = 472;
          *(_WORD *)&cf[18] = 2080;
          *(_QWORD *)&cf[20] = v356;
          _os_log_impl(&dword_1C895C000, v230, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting default category %s", cf, 0x1Cu);
        }

        strcpy((char *)&v414, "set_category");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[4],char [4],0>((uint64_t)__p, "key");
        __p[2] = __p;
        v398 = 1;
        OS::CF::ToJSON((const __CFString *)*MEMORY[0x1E0D494F8], (uint64_t)v427);
        v399[0] = v427[0];
        v400 = v428;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v427);
        v427[0] = 0;
        v428 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v399);
        v401 = v399;
        v402 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)cf, (uint64_t)__p, 2, 1, 2);
        *(_QWORD *)&cf[16] = cf;
        cf[24] = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>((uint64_t)&v453, "value");
        v455 = &v453;
        v456 = 1;
        OS::CF::ToJSON((const __CFString *)v361, (uint64_t)v419);
        v457[0] = v419[0];
        v458 = v420;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v419);
        v419[0] = 0;
        v420 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v457);
        v459 = v457;
        v460 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&cf[32], (uint64_t)&v453, 2, 1, 2);
        *(_QWORD *)v443 = &cf[32];
        v443[8] = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v434, (uint64_t)cf, 2, 1, 2);
        for (i5 = 0; i5 != -64; i5 -= 32)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&cf[i5 + 32]);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&cf[i5 + 40], cf[i5 + 32]);
        }
        for (i6 = 0; i6 != -8; i6 -= 4)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v457[i6 * 8]);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v458)[i6], v457[i6 * 8]);
        }
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v419);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v420, v419[0]);
        for (i7 = 0; i7 != -8; i7 -= 4)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v399[i7 * 8]);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v400)[i7], v399[i7 * 8]);
        }
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v427);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v428, v427[0]);
        v235 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v234));
        if (os_log_type_enabled(v235, OS_LOG_TYPE_DEFAULT))
        {
          v236 = SHIBYTE(v392.__r_.__value_.__r.__words[2]);
          v237 = v392.__r_.__value_.__r.__words[0];
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v434, -1, 0x20u, 0, 0, __p);
          v238 = &v392;
          if (v236 < 0)
            v238 = (std::string *)v237;
          if (SHIBYTE(__p[2]) >= 0)
            v239 = __p;
          else
            v239 = (void **)__p[0];
          *(_DWORD *)cf = 136316162;
          *(_QWORD *)&cf[4] = "AudioSessionServerImpPlayState.mm";
          *(_WORD *)&cf[12] = 1024;
          *(_DWORD *)&cf[14] = 216;
          *(_WORD *)&cf[18] = 2080;
          *(_QWORD *)&cf[20] = &v414;
          *(_WORD *)&cf[28] = 2080;
          *(_QWORD *)&cf[30] = v238;
          *(_WORD *)&cf[38] = 2080;
          v442 = (std::string *)v239;
          _os_log_impl(&dword_1C895C000, v235, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", cf, 0x30u);
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
        }

        v240 = _MXSessionSetProperty();
        v241 = as::server::TranslateCMSessionErrorCode((uint64_t)&v414, (uint64_t *)&v392, 218, v240);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v434);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v435, v434[0]);
        v396[0] = v241;
        if (v241)
        {
LABEL_536:
          v303 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v229));
          if (os_log_type_enabled(v303, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)cf = 136315650;
            *(_QWORD *)&cf[4] = "AudioSessionServerImpPlayState.mm";
            *(_WORD *)&cf[12] = 1024;
            *(_DWORD *)&cf[14] = 706;
            *(_WORD *)&cf[18] = 1024;
            *(_DWORD *)&cf[20] = v396[0];
            _os_log_impl(&dword_1C895C000, v303, OS_LOG_TYPE_DEBUG, "%25s:%-5d Bailing with error %d -- setting player state to Stopped", cf, 0x18u);
          }

          if (!v393 || (os_unfair_lock_lock((os_unfair_lock_t)v393 + 158), v395 = 1, (v304 = v393) == 0))
          {
            v349 = _os_crash();
            as::server::require_acq::AudioSessionServerSetClientPlayState(v349);
          }
          v305 = v394;
          *(_QWORD *)cf = v393;
          *(_QWORD *)&cf[8] = v394;
          if (v394)
          {
            v306 = (unint64_t *)&v394->__shared_owners_;
            do
              v307 = __ldxr(v306);
            while (__stxr(v307 + 1, v306));
          }
          as::server::AudioSessionInfo::SetPlayerState((uint64_t)v304, (uint64_t)a3, (int)a4, 0, a2);
          if (v305)
          {
            v308 = (unint64_t *)&v305->__shared_owners_;
            do
              v309 = __ldaxr(v308);
            while (__stlxr(v309 - 1, v308));
            if (!v309)
            {
              ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
              std::__shared_weak_count::__release_weak(v305);
            }
          }
          v310 = v393;
          if (!v393)
          {
            v340 = _os_crash();
            as::server::require_acq::AudioSessionServerSetClientPlayState(v340);
          }
          v311 = v394;
          if (v394)
          {
            v312 = (unint64_t *)&v394->__shared_owners_;
            do
              v313 = __ldxr(v312);
            while (__stxr(v313 + 1, v312));
            v314 = *((_DWORD *)v310 + 67);
            do
              v315 = __ldaxr(v312);
            while (__stlxr(v315 - 1, v312));
            if (!v315)
            {
              ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
              std::__shared_weak_count::__release_weak(v311);
            }
            if (v314 == 1)
              goto LABEL_562;
            goto LABEL_559;
          }
          if (*((_DWORD *)v393 + 67) != 1)
          {
LABEL_559:
            if (v393)
            {
              os_unfair_lock_unlock((os_unfair_lock_t)v393 + 158);
              v395 = 0;
            }
            _MXSessionSetProperty();
            _MXSessionSetProperty();
            _MXSessionSetProperty();
            _MXSessionSetProperty();
            _MXSessionSetProperty();
          }
LABEL_562:
          v23 = v396[0];
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v388);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v389, v388);

          goto LABEL_563;
        }
      }
      if ((v359 == 0) == (v360 != 0))
      {
        v242 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v229));
        if (os_log_type_enabled(v242, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)cf = 136315650;
          *(_QWORD *)&cf[4] = "AudioSessionServerImpPlayState.mm";
          *(_WORD *)&cf[12] = 1024;
          *(_DWORD *)&cf[14] = 482;
          *(_WORD *)&cf[18] = 1024;
          *(_DWORD *)&cf[20] = v360 != 0;
          _os_log_impl(&dword_1C895C000, v242, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting kCMSessionProperty_DoesInterAppAudio to %d", cf, 0x18u);
        }

        v229 = _MXSessionSetProperty();
        v396[0] = v229;
        if ((_DWORD)v229)
        {
          v343 = _os_crash();
          as::server::require_acq::AudioSessionServerSetClientPlayState(v343);
        }
      }
      if ((a4 & 0x10) == 0)
        goto LABEL_420;
      v369[0] = 4;
      v370[0] = (uint64_t *)1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v369);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v369);
      v243 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v388, "siri_listening");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v369);
      v244 = *(_BYTE *)v243;
      *(_BYTE *)v243 = v369[0];
      v369[0] = v244;
      v245 = (uint64_t *)v243[1];
      v243[1] = (uint64_t)v370[0];
      v370[0] = v245;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v243);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v369);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v370, v369[0]);
      if (v357)
      {
LABEL_420:
        if (*(_QWORD *)&v396[1])
        {
          v246 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v229));
          if (os_log_type_enabled(v246, OS_LOG_TYPE_DEFAULT))
          {
            v247 = "false";
            *(_QWORD *)&cf[4] = "AudioSessionServerImpPlayState.mm";
            *(_WORD *)&cf[12] = 1024;
            *(_DWORD *)cf = 136315906;
            if (v358 == 1)
              v247 = "true";
            *(_DWORD *)&cf[14] = 497;
            *(_WORD *)&cf[18] = 2048;
            *(_QWORD *)&cf[20] = *(_QWORD *)&v396[1];
            *(_WORD *)&cf[28] = 2080;
            *(_QWORD *)&cf[30] = v247;
            _os_log_impl(&dword_1C895C000, v246, OS_LOG_TYPE_DEFAULT, "%25s:%-5d subsession %p setting kMXSessionProperty_AudioToolboxIsPlaying and kMXSessionProperty_IsPlayingOutput to %s", cf, 0x26u);
          }

          if (!v393)
          {
            v344 = _os_crash();
            as::server::require_acq::AudioSessionServerSetClientPlayState(v344);
          }
          v248 = v394;
          if (v394)
          {
            v249 = (unint64_t *)&v394->__shared_owners_;
            do
              v250 = __ldxr(v249);
            while (__stxr(v250 + 1, v249));
            do
              v251 = __ldaxr(v249);
            while (__stlxr(v251 - 1, v249));
            if (!v251)
            {
              ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
              std::__shared_weak_count::__release_weak(v248);
            }
          }
          v252 = _MXSessionSetProperty();
          v396[0] = v252;
          if ((_DWORD)v252)
          {
            v253 = as::server::TranslateCMSessionErrorCode((uint64_t)"set_mx_is_playing_output_property", (uint64_t *)&v392, 505, v252);
LABEL_479:
            v396[0] = v253;
LABEL_534:
            v229 = v396[0];
LABEL_535:
            if (!(_DWORD)v229)
              goto LABEL_562;
            goto LABEL_536;
          }
          v229 = _MXSessionSetProperty();
          v396[0] = v229;
          if ((_DWORD)v229)
          {
            v253 = as::server::TranslateCMSessionErrorCode((uint64_t)"set_mx_is_playing_property", (uint64_t *)&v392, 514, v229);
            goto LABEL_479;
          }
        }
        v254 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v229));
        if (os_log_type_enabled(v254, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)cf = 136315650;
          *(_QWORD *)&cf[4] = "AudioSessionServerImpPlayState.mm";
          *(_WORD *)&cf[12] = 1024;
          *(_DWORD *)&cf[14] = 521;
          *(_WORD *)&cf[18] = 1024;
          *(_DWORD *)&cf[20] = v354 != 0;
          _os_log_impl(&dword_1C895C000, v254, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting kCMSessionProperty_HapticEngineIsPlaying to %d", cf, 0x18u);
        }

        v255 = (as::server *)_MXSessionSetProperty();
        v396[0] = (int)v255;
        if ((_DWORD)v255)
        {
          v229 = as::server::TranslateCMSessionErrorCode((uint64_t)"set_HapticEngineIsPlaying_property", (uint64_t *)&v392, 527, (uint64_t)v255);
LABEL_440:
          v396[0] = v229;
          goto LABEL_535;
        }
        if (v142)
        {
          if ((a5 | 2) != 2 && !v357)
          {
            v255 = (as::server *)as::server::IsSessionActive(*(as::server **)&v396[1], (const void *)1);
            if (!(_DWORD)v255)
            {
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)cf, "side_effect");
              *(_QWORD *)&cf[16] = cf;
              cf[24] = 1;
              *(_QWORD *)v443 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[77],char [77],0>((uint64_t)&cf[32], "Attempt implicit activation by calling _CMSessionBeginInterruption_WithFlags");
              v443[8] = 1;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)__p, (uint64_t)cf, 2, 1, 2);
              __p[2] = __p;
              v398 = 1;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v453, (uint64_t)__p, 1, 1, 2);
              nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)__p);
              for (i8 = 32; i8 != -32; i8 -= 32)
                v280 = nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)&cf[i8]);
              v281 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v280));
              if (os_log_type_enabled(v281, OS_LOG_TYPE_DEFAULT))
              {
                v282 = SHIBYTE(v392.__r_.__value_.__r.__words[2]);
                v283 = v392.__r_.__value_.__r.__words[0];
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&v453, -1, 0x20u, 0, 0, __p);
                v284 = &v392;
                if (v282 < 0)
                  v284 = (std::string *)v283;
                if (SHIBYTE(__p[2]) >= 0)
                  v285 = __p;
                else
                  v285 = (void **)__p[0];
                *(_DWORD *)cf = 136316162;
                *(_QWORD *)&cf[4] = "AudioSessionServerImpPlayState.mm";
                *(_WORD *)&cf[12] = 1024;
                *(_DWORD *)&cf[14] = 542;
                *(_WORD *)&cf[18] = 2080;
                *(_QWORD *)&cf[20] = "set_play_state";
                *(_WORD *)&cf[28] = 2080;
                *(_QWORD *)&cf[30] = v284;
                *(_WORD *)&cf[38] = 2080;
                v442 = (std::string *)v285;
                _os_log_impl(&dword_1C895C000, v281, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", cf, 0x30u);
                if (SHIBYTE(__p[2]) < 0)
                  operator delete(__p[0]);
              }

              v286 = (as::server::LegacySessionManager *)_MXSessionBeginInterruption_WithSecTaskAndFlags();
              v396[0] = (int)v286;
              if ((_DWORD)v286)
              {
                v396[0] = as::server::TranslateCMSessionErrorCode((uint64_t)"cm_session_begin_interruption", (uint64_t *)&v392, 552, (uint64_t)v286);
                *(_QWORD *)cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                *(_WORD *)&cf[8] = 257;
                CACFDictionary::AddSInt32((CFMutableDictionaryRef *)cf, CFSTR("cm_session_begin_interruption"), v396[0]);
                CAReportingClientSendMessage();
                CACFDictionary::~CACFDictionary((CACFDictionary *)cf);
                nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&v453);
                goto LABEL_534;
              }
              v320 = as::server::LegacySessionManager::Instance(v286);
              v321 = (os_unfair_lock_s *)*((_QWORD *)v320 + 31);
              if (v321)
              {
                os_unfair_lock_lock(*((os_unfair_lock_t *)v320 + 31));
                as::server::DeviceTimeObserver::sessionIsActive((as::server::DeviceTimeObserver *)&v321[2], a1, 1);
                os_unfair_lock_unlock(v321);
              }
              v255 = (as::server *)nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&v453);
            }
          }
        }
        v257 = v353;
        if (v355 && v353 <= v355)
        {
          v258 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v255));
          if (os_log_type_enabled(v258, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)cf = 136315394;
            *(_QWORD *)&cf[4] = "AudioSessionServerImpPlayState.mm";
            *(_WORD *)&cf[12] = 1024;
            *(_DWORD *)&cf[14] = 577;
            _os_log_impl(&dword_1C895C000, v258, OS_LOG_TYPE_DEBUG, "%25s:%-5d Record permission not granted, so kCMSessionProperty_IsRecording will be overriden to false.", cf, 0x12u);
          }

          v257 = v353;
        }
        v260 = (char)IsRemoteDeviceInputControlAllowed;
        v261 = as::RemoteDeviceControlEnabled(IsRemoteDeviceInputControlAllowed);
        if ((_DWORD)v261)
        {
          if (v257 <= v355 || v352 == 0)
            v263 = 0;
          else
            v263 = v260;
          LOBYTE(__p[0]) = v263;
          v264 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v261));
          if (os_log_type_enabled(v264, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)cf = 136315650;
            *(_QWORD *)&cf[4] = "AudioSessionServerImpPlayState.mm";
            *(_WORD *)&cf[12] = 1024;
            *(_DWORD *)&cf[14] = 602;
            *(_WORD *)&cf[18] = 1024;
            *(_DWORD *)&cf[20] = LOBYTE(__p[0]);
            _os_log_impl(&dword_1C895C000, v264, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting kMXSessionProperty_IsRecordingMutedForRemoteDevice to %d", cf, 0x18u);
          }

          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<BOOL const&,BOOL,0>((uint64_t)v368, (unsigned __int8 *)__p);
          v265 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v388, "IsRecordingMutedForRemoteDevice");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=((uint64_t)v265, (uint64_t)v368);
          nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(v368);
          v261 = _MXSessionSetProperty();
          v257 = v353;
          v396[0] = v261;
          if ((_DWORD)v261)
          {
            v229 = as::server::TranslateCMSessionErrorCode((uint64_t)"set_is_recording_muted_for_remote_device_property", (uint64_t *)&v392, 610, v261);
            goto LABEL_440;
          }
        }
        *(_QWORD *)cf = &v388;
        *(_QWORD *)&cf[8] = &v391;
        *(_QWORD *)&cf[16] = v396;
        *(_QWORD *)&cf[24] = &v393;
        *(_QWORD *)&cf[32] = &v396[1];
        v442 = &v392;
        v267 = v257 > v355 && v391;
        if ((a4 & 1) != 0 && v267 && !v352)
        {
          v261 = as::server::require_acq::AudioSessionSetClientPlayState_Inner(unsigned int,AVAudioSessionClientPlayerType,void *,unsigned int,AVAudioSessionClientPlayState,AudioSessionDuckingInfo *,void const*)::$_0::operator()((uint64_t)cf);
          if ((v261 & 1) == 0)
            goto LABEL_534;
        }
        v269 = v257 > v355 && v352 == 0;
        LOBYTE(v453) = v269;
        v270 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v261));
        if (os_log_type_enabled(v270, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(__p[0]) = 136315650;
          *(void **)((char *)__p + 4) = "AudioSessionServerImpPlayState.mm";
          WORD2(__p[1]) = 1024;
          *(_DWORD *)((char *)&__p[1] + 6) = 649;
          WORD1(__p[2]) = 1024;
          HIDWORD(__p[2]) = v453;
          _os_log_impl(&dword_1C895C000, v270, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting kMXSessionProperty_IsRecording to %d", (uint8_t *)__p, 0x18u);
        }

        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<BOOL const&,BOOL,0>((uint64_t)v367, (unsigned __int8 *)&v453);
        v271 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v388, "IsRecording");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=((uint64_t)v271, (uint64_t)v367);
        nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(v367);
        v272 = _MXSessionSetProperty();
        v396[0] = v272;
        if ((_DWORD)v272)
        {
          v253 = as::server::TranslateCMSessionErrorCode((uint64_t)"set_is_recording_property", (uint64_t *)&v392, 655, v272);
          goto LABEL_479;
        }
        if ((a4 & 1) != 0
          && !v267
          && !v352
          && !as::server::require_acq::AudioSessionSetClientPlayState_Inner(unsigned int,AVAudioSessionClientPlayerType,void *,unsigned int,AVAudioSessionClientPlayState,AudioSessionDuckingInfo *,void const*)::$_0::operator()((uint64_t)cf))
        {
          goto LABEL_534;
        }
        if (v353 == 1)
          v287 = v351;
        else
          v287 = 0;
        if ((a4 & 1) != 0 && v353)
        {
          v288 = v393;
          if (!v393)
          {
            v348 = _os_crash();
            as::server::require_acq::AudioSessionServerSetClientPlayState(v348);
          }
          v289 = v394;
          __p[0] = v393;
          __p[1] = v394;
          if (v394)
          {
            v290 = (unint64_t *)&v394->__shared_owners_;
            do
              v291 = __ldxr(v290);
            while (__stxr(v291 + 1, v290));
            v289 = (std::__shared_weak_count *)__p[1];
          }
          v366[0] = v288;
          v366[1] = v289;
          __p[0] = 0;
          __p[1] = 0;
          std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)v366);
          std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        }
      }
      v390 = as::server::IsSessionActive(*(as::server **)&v396[1], (const void *)1) != 0;
      if (!v393 || (os_unfair_lock_lock((os_unfair_lock_t)v393 + 158), v395 = 1, (v292 = v393) == 0))
      {
        v350 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v350);
      }
      *(_QWORD *)cf = v393;
      *(_QWORD *)&cf[8] = v394;
      if (v394)
      {
        v293 = (unint64_t *)&v394->__shared_owners_;
        do
          v294 = __ldxr(v293);
        while (__stxr(v294 + 1, v293));
      }
      as::server::AudioSessionInfo::UpdateCachedActivationState(v292, v390);
      std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)cf);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<BOOL const&,BOOL,0>((uint64_t)v365, (unsigned __int8 *)&v390);
      v295 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)&v388, "active");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=((uint64_t)v295, (uint64_t)v365);
      v296 = nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(v365);
      v297 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v296));
      if (os_log_type_enabled(v297, OS_LOG_TYPE_DEFAULT))
      {
        v298 = SHIBYTE(v392.__r_.__value_.__r.__words[2]);
        v299 = v392.__r_.__value_.__r.__words[0];
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&v388, -1, 0x20u, 0, 0, __p);
        v300 = &v392;
        if (v298 < 0)
          v300 = (std::string *)v299;
        if (SHIBYTE(__p[2]) >= 0)
          v301 = __p;
        else
          v301 = (void **)__p[0];
        *(_DWORD *)cf = 136316162;
        *(_QWORD *)&cf[4] = "AudioSessionServerImpPlayState.mm";
        *(_WORD *)&cf[12] = 1024;
        *(_DWORD *)&cf[14] = 697;
        *(_WORD *)&cf[18] = 2080;
        *(_QWORD *)&cf[20] = "set_play_state";
        *(_WORD *)&cf[28] = 2080;
        *(_QWORD *)&cf[30] = v300;
        *(_WORD *)&cf[38] = 2080;
        v442 = (std::string *)v301;
        _os_log_impl(&dword_1C895C000, v297, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", cf, 0x30u);
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
      }

      if (a6)
        as::server::require_acq::GetAudioQueueOptions(*(as::server::require_acq **)&v396[1], a6, v302);
      goto LABEL_534;
    }
    v178 = v393;
    if (!v393)
    {
      v342 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v342);
    }
    v179 = v394;
    if (v394)
    {
      v180 = (unint64_t *)&v394->__shared_owners_;
      do
        v181 = __ldxr(v180);
      while (__stxr(v181 + 1, v180));
      v182 = *((unsigned __int8 *)v178 + 312);
      do
        v183 = __ldaxr(v180);
      while (__stlxr(v183 - 1, v180));
      if (!v183)
      {
        ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
        std::__shared_weak_count::__release_weak(v179);
      }
      if (v182)
        goto LABEL_332;
    }
    else if (*((_BYTE *)v393 + 312))
    {
      goto LABEL_332;
    }
    v184 = v393;
    if (!v393)
    {
      v345 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v345);
    }
    v185 = v394;
    if (v394)
    {
      v186 = (unint64_t *)&v394->__shared_owners_;
      do
        v187 = __ldxr(v186);
      while (__stxr(v187 + 1, v186));
      v188 = *((_DWORD *)v184 + 70);
      do
        v189 = __ldaxr(v186);
      while (__stlxr(v189 - 1, v186));
      if (!v189)
      {
        ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
        std::__shared_weak_count::__release_weak(v185);
      }
      if (v188)
        goto LABEL_325;
    }
    else if (*((_DWORD *)v393 + 70))
    {
LABEL_325:
      *(_QWORD *)cf = 0;
      _MXSessionCopyProperty();
      v190 = *(const void **)cf;
      if (*(_QWORD *)cf)
      {
        if (CFEqual(*(CFTypeRef *)cf, (CFTypeRef)*MEMORY[0x1E0D48F90]))
        {
          v361 = (OS::CF *)(id)*MEMORY[0x1E0D48F48];
          v177 = "PlayAndRecord";
        }
        else
        {
          v273 = v393;
          if (!v393)
          {
            v346 = _os_crash();
            as::server::require_acq::AudioSessionServerSetClientPlayState(v346);
          }
          *(_QWORD *)cf = v393;
          *(_QWORD *)&cf[8] = v394;
          if (v394)
          {
            v274 = (unint64_t *)&v394->__shared_owners_;
            do
              v275 = __ldxr(v274);
            while (__stxr(v275 + 1, v274));
          }
          *((_BYTE *)v273 + 312) = 1;
          std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)cf);
          v276 = v393;
          if (!v393)
          {
            v347 = _os_crash();
            as::server::require_acq::AudioSessionServerSetClientPlayState(v347);
          }
          *(_QWORD *)cf = v393;
          *(_QWORD *)&cf[8] = v394;
          if (v394)
          {
            v277 = (unint64_t *)&v394->__shared_owners_;
            do
              v278 = __ldxr(v277);
            while (__stxr(v278 + 1, v277));
          }
          as::server::AudioSessionInfo::SetCachedCategory(v276, v190);
          std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)cf);
          v177 = 0;
          v361 = 0;
        }
        CFRelease(v190);
      }
      else
      {
        v361 = (OS::CF *)(id)*MEMORY[0x1E0D48F48];
        v177 = "PlayAndRecord";
      }
      goto LABEL_333;
    }
LABEL_332:
    v361 = 0;
    v177 = 0;
    goto LABEL_333;
  }
  v23 = 2003329396;
  v91 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v79));
  if (os_log_type_enabled(v91, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)cf = 136315650;
    *(_QWORD *)&cf[4] = "AudioSessionServerImpPlayState.mm";
    *(_WORD *)&cf[12] = 1024;
    *(_DWORD *)&cf[14] = 348;
    *(_WORD *)&cf[18] = 1024;
    *(_DWORD *)&cf[20] = (_DWORD)a1;
    _os_log_impl(&dword_1C895C000, v91, OS_LOG_TYPE_DEBUG, "%25s:%-5d sessionID = 0x%x no MXSession for this client (client exited?)", cf, 0x18u);
  }
LABEL_563:
  if (SHIBYTE(v392.__r_.__value_.__r.__words[2]) < 0)
  {
    v67 = (void *)v392.__r_.__value_.__r.__words[0];
    goto LABEL_565;
  }
LABEL_566:
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)&v393);
  return v23;
}

void sub_1C897B3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t *a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58,os_unfair_lock_s *a59)
{
  os_unfair_lock_s *v59;
  uint64_t v60;

  os_unfair_lock_unlock(v59);
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)(v60 - 168));
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&a50);

  if (a58 < 0)
    operator delete(__p);
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor(&a59);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  v4 = *(_BYTE *)a1;
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)a2 = v4;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v5;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

uint64_t **nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(uint64_t **a1)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a1 + 1, *(unsigned __int8 *)a1);
  return a1;
}

void **as::server::AudioSessionInfo::GetPlayerState(as::server::AudioSessionInfo *this, void *a2)
{
  void **v2;
  void **v3;

  v2 = (void **)*((_QWORD *)this + 57);
  v3 = (void **)*((_QWORD *)this + 58);
  if (v2 != v3)
  {
    while (*v2 != a2)
    {
      v2 += 3;
      if (v2 == v3)
        return 0;
    }
  }
  if (v2 == v3)
    return 0;
  else
    return v2;
}

void as::server::AudioSessionInfo::SetCachedActivationState(uint64_t a1, int a2, CFTypeRef cf)
{
  void **v6;
  std::string v7;
  _QWORD v8[2];

  if (cf)
    CFRetain(cf);
  v8[0] = &off_1E82058A8;
  v8[1] = cf;
  *(_DWORD *)(a1 + 392) = a2;
  OS::CF::String::AsStdString((OS::CF::String *)v8, &v7);
  v6 = (void **)(a1 + 400);
  if (*(char *)(a1 + 423) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = *(_OWORD *)&v7.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 416) = *((_QWORD *)&v7.__r_.__value_.__l + 2);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v8);
}

void as::server::AudioSessionInfo::SetCachedCategory(as::server::AudioSessionInfo *this, CFTypeRef cf)
{
  void **v4;
  std::string v5;
  _QWORD v6[2];

  if (cf)
    CFRetain(cf);
  v6[0] = &off_1E82058A8;
  v6[1] = cf;
  OS::CF::String::AsStdString((OS::CF::String *)v6, &v5);
  v4 = (void **)((char *)this + 344);
  if (*((char *)this + 367) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = *(_OWORD *)&v5.__r_.__value_.__l.__data_;
  *((_QWORD *)this + 45) = *((_QWORD *)&v5.__r_.__value_.__l + 2);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v6);
}

void OS::CF::String::AsStdString(OS::CF::String *this@<X0>, std::string *a2@<X8>)
{
  const __CFString *v3;
  const char *CStringPtr;
  const __CFString *v6;
  const __CFString *v7;
  std::vector<char> v8;
  CFIndex maxBufLen;
  CFRange v10;
  CFRange v11;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v3 = (const __CFString *)*((_QWORD *)this + 1);
  if (v3)
  {
    CStringPtr = CFStringGetCStringPtr(v3, 0x8000100u);
    if (CStringPtr)
    {
      std::string::__assign_external(a2, CStringPtr);
    }
    else
    {
      maxBufLen = 0;
      v6 = (const __CFString *)*((_QWORD *)this + 1);
      v10.length = CFStringGetLength(v6);
      v10.location = 0;
      CFStringGetBytes(v6, v10, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
      std::vector<char>::vector(&v8, maxBufLen + 1);
      v7 = (const __CFString *)*((_QWORD *)this + 1);
      v11.length = CFStringGetLength(v7);
      v11.location = 0;
      CFStringGetBytes(v7, v11, 0x8000100u, 0, 0, (UInt8 *)v8.__begin_, maxBufLen, &maxBufLen);
      v8.__begin_[maxBufLen] = 0;
      std::string::__assign_external(a2, v8.__begin_);
      if (v8.__begin_)
      {
        v8.__end_ = v8.__begin_;
        operator delete(v8.__begin_);
      }
    }
  }
}

void OS::CF::UntypedObject::~UntypedObject(OS::CF::UntypedObject *this)
{
  const void *v1;

  *(_QWORD *)this = &off_1E82058C8;
  v1 = (const void *)*((_QWORD *)this + 1);
  if (v1)
    CFRelease(v1);
}

{
  OS::CF::UntypedObject::~UntypedObject(this);
  JUMPOUT(0x1CAA38D28);
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  unint64_t v6;
  std::string *v7;
  std::string::size_type size;
  unint64_t v9;
  unint64_t v10;

  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = this->__r_.__value_.__r.__words[2];
    v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    v6 = HIBYTE(v10);
    v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = this;
    if (__n > 0x16)
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    this->__r_.__value_.__l.__size_ = __n;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[7],char [7],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<BOOL const&,BOOL,0>(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = *a2;
  *(_BYTE *)a1 = 4;
  *(_QWORD *)(a1 + 8) = v3;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1C897C140(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void as::server::AudioSessionInfo::UpdateCachedActivationState(as::server::AudioSessionInfo *this, int a2)
{
  int v2;

  if (a2)
  {
    v2 = 1;
  }
  else
  {
    if (*((_DWORD *)this + 98) == 2)
      return;
    v2 = 0;
  }
  as::server::AudioSessionInfo::SetCachedActivationState((uint64_t)this, v2, 0);
}

void as::server::AudioSessionInfo::SetPlayerState(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  void **v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  int64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  char *v29;
  char v30;
  char v31;
  char v32;
  int v33;
  unsigned __int8 v34;
  int v35;
  int v36;

  v10 = *(char **)(a1 + 456);
  v11 = *(char **)(a1 + 464);
  if (v10 != v11)
  {
    v12 = 0;
    while (*(_QWORD *)&v10[v12] != a2)
    {
      v12 += 24;
      if (&v10[v12] == v11)
        goto LABEL_5;
    }
    if (a4)
    {
      v14 = &v10[v12];
      *((_DWORD *)v14 + 2) = a4;
      *((_DWORD *)v14 + 3) = a3;
      goto LABEL_28;
    }
    v21 = &v10[v12];
    v22 = &v10[v12 + 24];
    v23 = v11 - v22;
    if (v11 != v22)
      memmove(&v10[v12], v22, v23 - 4);
    v11 = &v21[v23];
LABEL_27:
    *(_QWORD *)(a1 + 464) = v11;
    goto LABEL_28;
  }
LABEL_5:
  if (a4)
  {
    v13 = *(_QWORD *)(a1 + 472);
    if ((unint64_t)v11 >= v13)
    {
      v15 = (void **)(a1 + 456);
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v10) >> 3);
      if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v10) >> 3);
      v18 = 2 * v17;
      if (2 * v17 <= v16 + 1)
        v18 = v16 + 1;
      if (v17 >= 0x555555555555555)
        v19 = 0xAAAAAAAAAAAAAAALL;
      else
        v19 = v18;
      if (v19)
        v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<as::server::AudioSessionInfo::PlayerState>>(a1 + 472, v19);
      else
        v20 = 0;
      v24 = &v20[24 * v16];
      v25 = &v20[24 * v19];
      *(_QWORD *)v24 = a2;
      *((_DWORD *)v24 + 2) = a4;
      *((_DWORD *)v24 + 3) = a3;
      *((_DWORD *)v24 + 4) = a5;
      v11 = v24 + 24;
      v27 = *(char **)(a1 + 456);
      v26 = *(char **)(a1 + 464);
      if (v26 != v27)
      {
        do
        {
          v28 = *(_OWORD *)(v26 - 24);
          *((_DWORD *)v24 - 2) = *((_DWORD *)v26 - 2);
          *(_OWORD *)(v24 - 24) = v28;
          v24 -= 24;
          v26 -= 24;
        }
        while (v26 != v27);
        v26 = (char *)*v15;
      }
      *(_QWORD *)(a1 + 456) = v24;
      *(_QWORD *)(a1 + 464) = v11;
      *(_QWORD *)(a1 + 472) = v25;
      if (v26)
        operator delete(v26);
    }
    else
    {
      *(_QWORD *)v11 = a2;
      *((_DWORD *)v11 + 2) = a4;
      *((_DWORD *)v11 + 3) = a3;
      *((_DWORD *)v11 + 4) = a5;
      v11 += 24;
    }
    goto LABEL_27;
  }
LABEL_28:
  *(_DWORD *)(a1 + 428) = 0;
  *(_DWORD *)(a1 + 308) = 0;
  *(_OWORD *)(a1 + 276) = 0u;
  *(_OWORD *)(a1 + 292) = 0u;
  v29 = *(char **)(a1 + 456);
  if (v29 == v11)
  {
    v30 = 0;
LABEL_70:
    v36 = 0;
    goto LABEL_71;
  }
  v30 = 0;
  v31 = 0;
  v32 = 0;
  do
  {
    v33 = *((_DWORD *)v29 + 3);
    if ((v33 & 1) != 0)
    {
      ++*(_DWORD *)(a1 + 280);
      if (*((_DWORD *)v29 + 2) == 1)
      {
        ++*(_DWORD *)(a1 + 284);
        if ((v33 & 0x80) != 0)
        {
          if ((v34 & 1) == 0
          {
            as::RemoteDeviceControlEnabled(void)::remoteDeviceControlEnabled = _os_feature_enabled_impl();
          }
          if (as::RemoteDeviceControlEnabled(void)::remoteDeviceControlEnabled)
            ++*(_DWORD *)(a1 + 428);
        }
      }
      v33 = *((_DWORD *)v29 + 3);
      if ((v33 & 0x40) != 0)
        ++*(_DWORD *)(a1 + 292);
    }
    if ((v33 & 2) != 0 && *((_DWORD *)v29 + 4) == 1751477863)
      ++*(_DWORD *)(a1 + 308);
    v35 = *((_DWORD *)v29 + 2);
    if ((v33 & 2) != 0 && v35 == 1)
      ++*(_DWORD *)(a1 + 276);
    if ((v33 & 4) != 0)
    {
      ++*(_DWORD *)(a1 + 300);
      if ((v33 & 8) == 0)
      {
LABEL_46:
        if ((v33 & 0x10) == 0)
          goto LABEL_47;
        goto LABEL_54;
      }
    }
    else if ((v33 & 8) == 0)
    {
      goto LABEL_46;
    }
    ++*(_DWORD *)(a1 + 304);
    if ((v33 & 0x10) == 0)
    {
LABEL_47:
      if ((v33 & 0x20) == 0)
        goto LABEL_49;
LABEL_48:
      ++*(_DWORD *)(a1 + 296);
      goto LABEL_49;
    }
LABEL_54:
    ++*(_DWORD *)(a1 + 288);
    if ((v33 & 0x20) != 0)
      goto LABEL_48;
LABEL_49:
    switch(v35)
    {
      case 1:
        if ((v33 & 0x10) == 0)
          v32 = 1;
        break;
      case 3:
        v30 = 1;
        break;
      case 2:
        v31 = 1;
        break;
    }
    v29 += 24;
  }
  while (v29 != *(char **)(a1 + 464));
  if ((v32 & 1) != 0)
    v36 = 1;
  else
    v36 = 2;
  if (((v32 | v31) & 1) == 0)
    goto LABEL_70;
LABEL_71:
  *(_DWORD *)(a1 + 268) = v36;
  *(_BYTE *)(a1 + 272) = v30 & 1;
}

void sub_1C897C4EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFString *AudioSession::ClientActiveModesToString(AudioSession *this)
{
  char v1;
  __CFString *v2;
  __CFString *v3;
  const __CFString *v4;

  if ((_DWORD)this)
  {
    v1 = (char)this;
    objc_msgSend(MEMORY[0x1E0CB37A0], "string");
    v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
    v3 = v2;
    if ((v1 & 8) != 0)
      -[__CFString appendString:](v2, "appendString:", CFSTR("Active inter-app node "));
    if ((v1 & 0x20) != 0)
      -[__CFString appendString:](v3, "appendString:", CFSTR("TCC Muted"));
    if ((v1 & 0x10) != 0)
      -[__CFString appendString:](v3, "appendString:", CFSTR("Siri Listening "));
    if ((v1 & 4) != 0)
      -[__CFString appendString:](v3, "appendString:", CFSTR("Processing "));
    if ((v1 & 0x40) != 0)
      -[__CFString appendString:](v3, "appendString:", CFSTR("Muted"));
    if (v1 < 0)
      -[__CFString appendString:](v3, "appendString:", CFSTR("Oneness Muted"));
    if ((v1 & 3) == 3)
    {
      v4 = CFSTR(" Input/Output");
LABEL_21:
      -[__CFString appendString:](v3, "appendString:", v4);
      return v3;
    }
    if ((v1 & 1) != 0)
      v4 = CFSTR(" Input");
    else
      v4 = CFSTR(" Output");
    if ((v1 & 3) != 0)
      goto LABEL_21;
  }
  else
  {
    v3 = CFSTR("Unknown");
  }
  return v3;
}

void sub_1C897C5FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

const char *AudioSession::ClientPlayerAsCString(int a1)
{
  if (a1 > 1885888882)
  {
    if (a1 > 1920231790)
    {
      if (a1 == 1936879721)
        return "Siri Plugin";
      if (a1 == 1920231791)
        return "Remote IO";
    }
    else
    {
      if (a1 == 1885888883)
        return "Phase";
      if (a1 == 1903519093)
        return "Queue";
    }
    return "unknown player type";
  }
  if (a1 == 1668707442)
    return "Converter";
  if (a1 != 1751477863)
  {
    if (a1 == 1885564012)
      return "Phone";
    return "unknown player type";
  }
  return "Haptic Engine";
}

_QWORD *AudioSession::FormatPointerAsHex@<X0>(AudioSession *this@<X0>, _QWORD *a2@<X8>)
{
  char __str[32];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  snprintf(__str, 0x20uLL, "%p", this);
  return std::string::basic_string[abi:ne180100]<0>(a2, __str);
}

const char *AudioSession::PlayStateToString(unsigned int a1)
{
  if (a1 > 3)
    return "Unknown";
  else
    return off_1E8205928[a1];
}

void boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int const&>>(uint64_t *a1@<X0>, char *a2@<X1>, const char *a3@<X2>, _DWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  const char *v12;
  uint64_t v13;
  char *v14;

  v10 = *a1;
  v11 = boost::container::vector_alloc_holder<boost::container::new_allocator<unsigned int>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >> 61)
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  v13 = v11;
  v14 = (char *)operator new(4 * v11);
  boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int const&>>((uint64_t)a1, v14, v13, a2, (uint64_t)a3, a4);
  *a5 = &a2[*a1 - v10];
}

unint64_t boost::container::vector_alloc_holder<boost::container::new_allocator<unsigned int>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>(uint64_t a1, const char *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  const char *v9;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 - v2 >= (unint64_t)a2)
    boost::container::vector_alloc_holder<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>();
  v4 = 0x1FFFFFFFFFFFFFFFLL;
  if (0x1FFFFFFFFFFFFFFFLL - v3 < (unint64_t)&a2[v2 - v3])
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  v5 = v3 >> 61;
  v6 = 8 * v3;
  if (v5 > 4)
    v7 = -1;
  else
    v7 = v6;
  v8 = v6 / 5;
  if (v5)
    v8 = v7;
  v9 = &a2[v2];
  if (v8 < 0x1FFFFFFFFFFFFFFFLL)
    v4 = v8;
  if ((unint64_t)v9 <= v4)
    return v4;
  else
    return (unint64_t)v9;
}

void boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int const&>>(uint64_t a1, char *__dst, uint64_t a3, char *__src, uint64_t a5, _DWORD *a6)
{
  char *v10;
  uint64_t v11;

  v10 = *(char **)a1;
  boost::container::uninitialized_move_and_insert_alloc<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int *,boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int const&>>(a1, *(char **)a1, __src, (char *)(*(_QWORD *)a1 + 4 * *(_QWORD *)(a1 + 8)), __dst, a5, a6);
  if (v10)
    operator delete(*(void **)a1);
  v11 = *(_QWORD *)(a1 + 8) + a5;
  *(_QWORD *)a1 = __dst;
  *(_QWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 16) = a3;
}

void sub_1C897C92C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void *boost::container::uninitialized_move_and_insert_alloc<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int *,boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int const&>>(int a1, char *a2, char *__src, char *a4, char *__dst, uint64_t a6, _DWORD *a7)
{
  char *v9;
  char *v12;
  void *result;

  v9 = __dst;
  if (a2 && a2 != __src && __dst)
  {
    v12 = (char *)(__src - a2);
    result = memmove(__dst, a2, __src - a2);
    v9 = &v12[(_QWORD)v9];
  }
  if (a6 != 1)
    boost::container::uninitialized_move_and_insert_alloc<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int *,boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int const&>>();
  *(_DWORD *)v9 = *a7;
  if (__src)
  {
    if (__src != a4)
      return memmove(v9 + 4, __src, a4 - __src);
  }
  return result;
}

void as::server::ConstAudioSessionInfo::CreateMXSession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  int v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  _QWORD v22[3];
  _QWORD v23[4];

  v23[3] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a4 + 40) != 1935897189)
  {
    v13 = MXSessionCreate();
    v12 = v13;
    if (!(_DWORD)v13)
      goto LABEL_6;
    goto LABEL_4;
  }
  if (!*(_BYTE *)(a3 + 32))
    as::server::ConstAudioSessionInfo::CreateMXSession();
  v6 = (id)*MEMORY[0x1E0D49250];
  v22[0] = v6;
  v23[0] = &unk_1E82082A0;
  v7 = (id)*MEMORY[0x1E0D49240];
  v22[1] = v7;
  objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", a3, 32);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v23[1] = v8;
  v9 = (id)*MEMORY[0x1E0D49248];
  v22[2] = v9;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *(unsigned int *)(a4 + 64));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v23[2] = v10;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v23, v22, 3);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v12 = MXSessionCreateWithOptions();
  if (v12)
  {
LABEL_4:
    v14 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v13));
    v13 = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
    if ((_DWORD)v13)
    {
      *(_DWORD *)buf = 136315650;
      v17 = "AudioSessionInfo.mm";
      v18 = 1024;
      v19 = 499;
      v20 = 1024;
      LODWORD(v21) = v12;
      _os_log_impl(&dword_1C895C000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d MXSessionCreate failed: %d", buf, 0x18u);
    }
  }
LABEL_6:
  v15 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v13));
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    v17 = "AudioSessionInfo.mm";
    v18 = 1024;
    v19 = 569;
    v20 = 2048;
    v21 = 0;
    _os_log_impl(&dword_1C895C000, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d subsession created with ref %p", buf, 0x1Cu);
  }
}

void sub_1C897CEE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C897D1A0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t as::server::DeviceTimeObserver::setFixedLatency(uint64_t this, int a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int128 *v6;

  v4 = *(_QWORD *)(this + 48);
  v5 = *(_QWORD *)(this + 56);
  if (v4 != v5)
  {
    while (*(_DWORD *)v4 != a2)
    {
      v4 += 96;
      if (v4 == v5)
        return this;
    }
  }
  if (v4 != v5)
  {
    atomic_store(a3, (unint64_t *)(*(_QWORD *)(v4 + 72) + 8));
    atomic_store(a4, (unint64_t *)(*(_QWORD *)(v4 + 72) + 16));
    v6 = (unsigned __int128 *)(*(_QWORD *)(v4 + 72) + 32);
    do
      __ldaxp(v6);
    while (__stlxp(0, v6));
  }
  return this;
}

uint64_t as::server::DeviceTimeObserver::setSampleRate(uint64_t this, int a2, double a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(this + 48);
  v4 = *(_QWORD *)(this + 56);
  if (v3 != v4)
  {
    while (*(_DWORD *)v3 != a2)
    {
      v3 += 96;
      if (v3 == v4)
        return this;
    }
  }
  if (v3 != v4)
    **(double **)(v3 + 72) = a3;
  return this;
}

void sub_1C897D57C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  uint64_t *v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, uint64_t *);
  v9 = va_arg(va1, _QWORD);

  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)va);
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL as::server::ConstAudioSessionInfo::HasBooleanEntitlement(as::server::ConstAudioSessionInfo *this, const char *a2)
{
  return as::server::ProcessIdentity::ProcessHasEntitlement((as::server::ConstAudioSessionInfo *)((char *)this + 52), a2);
}

BOOL as::server::ProcessIdentity::ProcessHasEntitlement(as::server::ProcessIdentity *this, const char *a2)
{
  as::server *v4;
  __SecTask *v5;
  NSObject *v6;
  int v7;
  __CFString *v8;
  CFTypeRef v9;
  _BOOL8 v10;
  CFTypeRef cf;
  _BYTE buf[12];
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  as::server::ProcessIdentity::SecurityTask(this, (SecTaskRef *)&cf);
  v5 = (__SecTask *)cf;
  if (cf)
    goto LABEL_6;
  v6 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v4));
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    v7 = *((_DWORD *)this + 9);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AudioSessionInfo.mm";
    v14 = 1024;
    v15 = 195;
    v16 = 1024;
    v17 = v7;
    _os_log_impl(&dword_1C895C000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d Entitlements could not be checked for PID %d. No audit token provided.", buf, 0x18u);
  }
  v5 = (__SecTask *)cf;
  if (!cf)
    return 0;
LABEL_6:
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a2);
  v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v9 = SecTaskCopyValueForEntitlement(v5, v8, 0);
  *(_QWORD *)buf = v9;
  buf[8] = 1;
  if (v9)
    v10 = CFEqual(v9, (CFTypeRef)*MEMORY[0x1E0C9AE50]) != 0;
  else
    v10 = 0;
  CACFBoolean::~CACFBoolean((CACFBoolean *)buf);

  if (cf)
    CFRelease(cf);
  return v10;
}

void sub_1C897D778(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::ObjectRef<__SecTask *>::~ObjectRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1C897DAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  uint64_t *v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, uint64_t *);
  v9 = va_arg(va1, _QWORD);

  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)va);
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

CFTypeRef as::server::ConstAudioSessionInfo::GetCMSessionRef@<X0>(CFTypeRef this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 13);
  if (v3)
    this = CFRetain(*((CFTypeRef *)this + 13));
  *a2 = v3;
  return this;
}

void as::server::DeferredMessageState::~DeferredMessageState(as::server::DeferredMessageState *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v6;

  v6 = (void **)((char *)this + 216);
  std::vector<as::server::ControlValue>::__destroy_vector::operator()[abi:ne180100](&v6);
  v2 = (void *)*((_QWORD *)this + 24);
  if (v2)
  {
    *((_QWORD *)this + 25) = v2;
    operator delete(v2);
  }
  v6 = (void **)((char *)this + 168);
  std::vector<std::pair<unsigned int,NSDictionary * {__strong}>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v3 = (void *)*((_QWORD *)this + 18);
  if (v3)
  {
    *((_QWORD *)this + 19) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 15);
  if (v4)
  {
    *((_QWORD *)this + 16) = v4;
    operator delete(v4);
  }
  v6 = (void **)((char *)this + 96);
  std::vector<as::RouteIdentifier>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (*((_BYTE *)this + 88))
    as::server::ConfigChangeSummary::~ConfigChangeSummary((as::server::DeferredMessageState *)((char *)this + 48));
  v5 = (void *)*((_QWORD *)this + 3);
  if (v5)
  {
    *((_QWORD *)this + 4) = v5;
    operator delete(v5);
  }

}

void sub_1C897DD18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _Unwind_Resume(exception_object);
}

void sub_1C897E108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v12;
  void *v13;
  va_list va;

  va_start(va, a12);

  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

BOOL as::server::LegacySessionManager::RemoveSession(as::server::LegacySessionManager *this, unsigned int a2, const as::server::ProcessIdentity *a3)
{
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t SessionAndVerifyOwnershipPriv;
  uint64_t v8;
  os_unfair_lock_s *v9;
  as::server *v10;
  NSObject *v11;
  os_unfair_lock_s *v12;
  int v13;
  std::string::size_type v14;
  std::string *v15;
  void **v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *i;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *p_shared_weak_owners;
  unint64_t v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  unsigned int v38;
  NSObject *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v44[2];
  _BYTE v45[8];
  uint64_t *v46;
  void *__p[2];
  char v48;
  os_unfair_lock_t lock;
  char *v50;
  __int128 v51;
  uint64_t v52;
  _BYTE buf[40];
  void **v54;
  std::string v55;
  __int16 v56;
  unsigned int v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v5 = (os_unfair_lock_s *)*((_QWORD *)this + 31);
  if (v5)
  {
    os_unfair_lock_lock(*((os_unfair_lock_t *)this + 31));
    mach_absolute_time();
    as::server::DeviceTimeObserver::removeSession((as::server::DeviceTimeObserver *)&v5[2], a2);
    os_unfair_lock_unlock(v5);
  }
  v51 = 0uLL;
  v52 = 0;
  os_unfair_lock_lock((os_unfair_lock_t)this);
  lock = (os_unfair_lock_t)this;
  v50 = (char *)this + 8;
  SessionAndVerifyOwnershipPriv = as::server::LegacySessionManager::FindSessionAndVerifyOwnershipPriv(v6, (uint64_t)&lock, a2, (__int128 *)a3, 0);
  v8 = *((_QWORD *)this + 2);
  v9 = (os_unfair_lock_s *)this;
  if (v8 == SessionAndVerifyOwnershipPriv)
    goto LABEL_33;
  as::server::AudioSessionInfo::GetSiblingSessions(*(os_unfair_lock_s **)SessionAndVerifyOwnershipPriv, buf);
  std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::__vdeallocate((uint64_t *)&v51);
  v51 = *(_OWORD *)buf;
  v52 = *(_QWORD *)&buf[16];
  memset(buf, 0, 24);
  v55.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
  std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
  v11 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v10));
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *(os_unfair_lock_s **)SessionAndVerifyOwnershipPriv;
    if (*(char *)(*(_QWORD *)SessionAndVerifyOwnershipPriv + 223) < 0)
      std::string::__init_copy_ctor_external(&v55, *(const std::string::value_type **)&v12[50]._os_unfair_lock_opaque, *(_QWORD *)&v12[52]._os_unfair_lock_opaque);
    else
      v55 = *(std::string *)&v12[50]._os_unfair_lock_opaque;
    v13 = SHIBYTE(v55.__r_.__value_.__r.__words[2]);
    v14 = v55.__r_.__value_.__r.__words[0];
    v45[0] = 0;
    v46 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v45);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v45);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v45, -1, 0x20u, 0, 0, __p);
    v15 = &v55;
    if (v13 < 0)
      v15 = (std::string *)v14;
    if (v48 >= 0)
      v16 = __p;
    else
      v16 = (void **)__p[0];
    *(_DWORD *)buf = 136316162;
    *(_QWORD *)&buf[4] = "ServerSessionManager.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 424;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = "destroy_session";
    *(_WORD *)&buf[28] = 2080;
    *(_QWORD *)&buf[30] = v15;
    *(_WORD *)&buf[38] = 2080;
    v54 = v16;
    _os_log_impl(&dword_1C895C000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
    if (v48 < 0)
      operator delete(__p[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v45);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v46, v45[0]);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
  }

  v18 = *(std::__shared_weak_count **)(SessionAndVerifyOwnershipPriv + 8);
  v44[0] = *(_QWORD *)SessionAndVerifyOwnershipPriv;
  v44[1] = (uint64_t)v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  as::server::LegacySessionManager::PrivateRemoveSessionFromApplication((uint64_t)this, v17, v44);
  if (v18)
  {
    v21 = (unint64_t *)&v18->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v23 = v50;
  v24 = SessionAndVerifyOwnershipPriv + 16;
  v25 = *((_QWORD *)v50 + 1);
  if (SessionAndVerifyOwnershipPriv + 16 == v25)
  {
    v27 = SessionAndVerifyOwnershipPriv;
  }
  else
  {
    v26 = SessionAndVerifyOwnershipPriv;
    do
    {
      v27 = v26 + 16;
      std::shared_ptr<as::WorkloopPool>::operator=[abi:ne180100](v26, (__int128 *)(v26 + 16));
      v28 = v26 + 32;
      v26 += 16;
    }
    while (v28 != v25);
    v24 = *((_QWORD *)v23 + 1);
  }
  while (v24 != v27)
    v24 = std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100](v24 - 16);
  *((_QWORD *)v23 + 1) = v27;
  as::server::LegacySessionManager::RemoveSessionFromMicrophoneInjectionModeMap((os_unfair_lock_s *)this, a2);
  v9 = lock;
  if (lock)
LABEL_33:
    os_unfair_lock_unlock(v9);
  v29 = v8;
  v30 = (uint64_t *)*((_QWORD *)&v51 + 1);
  for (i = (uint64_t *)v51; i != v30; i += 2)
  {
    v32 = (std::__shared_weak_count *)i[1];
    if (v32)
    {
      v33 = *i;
      p_shared_weak_owners = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v35 = __ldxr(p_shared_weak_owners);
      while (__stxr(v35 + 1, p_shared_weak_owners));
      v36 = std::__shared_weak_count::lock(v32);
      __p[1] = v36;
      if (v36)
      {
        v37 = v36;
        __p[0] = (void *)v33;
        if (v33)
        {
          v38 = *(_DWORD *)(v33 + 8);
          *(_OWORD *)buf = *(_OWORD *)(v33 + 12);
          *(_OWORD *)&buf[16] = *(_OWORD *)(v33 + 28);
          *(_QWORD *)&buf[32] = *(_QWORD *)(v33 + 44);
          v39 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v36));
          if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(v55.__r_.__value_.__l.__data_) = 136315906;
            *(std::string::size_type *)((char *)v55.__r_.__value_.__r.__words + 4) = (std::string::size_type)"ServerSessionManager.mm";
            WORD2(v55.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&v55.__r_.__value_.__r.__words[1] + 6) = 446;
            WORD1(v55.__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(v55.__r_.__value_.__r.__words[2]) = v38;
            v56 = 1024;
            v57 = a2;
            _os_log_impl(&dword_1C895C000, v39, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Removing sibling session 0x%x, because its source session 0x%x is being removed", (uint8_t *)&v55, 0x1Eu);
          }
          as::server::LegacySessionManager::RemoveSession(this, v38, (const as::server::ProcessIdentity *)buf);
        }
        v40 = (unint64_t *)&v37->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  *(_QWORD *)buf = &v51;
  std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  return v29 != SessionAndVerifyOwnershipPriv;
}

void sub_1C897E644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25)
{
  os_unfair_lock_s *v25;
  void *v26;

  os_unfair_lock_unlock(v25);
  a25 = (void **)&a21;
  std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100](&a25);
  _Unwind_Resume(a1);
}

BOOL as::server::DeviceTimeObserver::removeSession(as::server::DeviceTimeObserver *this, unsigned int a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unsigned int *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23[3];
  unint64_t v24[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int *v29;
  std::__shared_weak_count *v30;
  unsigned int v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v31 = a2;
  v3 = (uint64_t *)((char *)this + 24);
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::find((uint64_t *)this + 3, &v31, (uint64_t *)&v32);
  v4 = *((_QWORD *)this + 3);
  v5 = *((_QWORD *)this + 4);
  if (v4)
    v6 = 1;
  else
    v6 = v5 == 0;
  if (!v6)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v7 = v32;
  v8 = v4 + 32 * v5;
  if ((_QWORD)v32 != v8)
  {
    v10 = *(unsigned int **)(v32 + 8);
    v9 = *(std::__shared_weak_count **)(v32 + 16);
    v29 = v10;
    v30 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    v13 = *(unsigned __int8 *)(v7 + 26);
    if (*((_BYTE *)v10 + 4))
    {
      v14 = *v10;
      v15 = *v10 / 0x21FuLL;
      if (v15 >= (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 7)
      {
        LOBYTE(v26) = 0;
        v28 = 0;
        v22 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v22);
      }
      v26 = *(_QWORD *)this + (v15 << 7);
      LODWORD(v27) = v14 % 0x21F;
      v28 = 1;
      v16 = as::server::DeviceTimeObserver::SessionSlot::sessionState((as::server::DeviceTimeObserver::SessionSlot *)&v26);
      caulk::concurrent::atomic_value<as::SessionSharedState,2,3>::load(v16, (uint64_t)v24);
      LODWORD(v32) = v31;
      std::set<unsigned int>::set[abi:ne180100]((uint64_t)v23, (unsigned int *)&v32, 1);
      if (!v13)
        std::set<unsigned int>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>(v23, *((unsigned int **)v10 + 2), v10 + 6);
      as::server::DeviceTimeObserver::removeReferringSessionsFromDevice((uint64_t)this, 0, v25, v23);
      as::server::DeviceTimeObserver::removeReferringSessionsFromDevice((uint64_t)this, 1, LOBYTE(v24[0]), v23);
      if (!v13)
      {
        v17 = as::server::DeviceTimeObserver::SessionSlot::sessionState((as::server::DeviceTimeObserver::SessionSlot *)&v26);
        v32 = 0u;
        v33 = 0u;
        v34 = 0;
        LOBYTE(v32) = -1;
        LOBYTE(v33) = -1;
        caulk::concurrent::atomic_value<as::SessionSharedState,2,3>::store(v17, &v32);
        if (*((_BYTE *)v10 + 4))
          *((_BYTE *)v10 + 4) = 0;
        as::server::DeviceTimeObserver::SharedBlockOwner::deallocateSessionSlot(v26, v26, v27);
      }
      std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::destroy((uint64_t)v23, (_QWORD *)v23[1]);
    }
    if (v13 && std::__tree<unsigned int>::__erase_unique<unsigned int>((uint64_t)(v10 + 4), &v31) != 1)
    {
      v21 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v21);
    }
    *(_QWORD *)&v32 = v7;
    boost::container::vector<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,void>::erase(v3, (unint64_t *)&v32, v24);
    if (v9)
    {
      v18 = (unint64_t *)&v9->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  return v7 != v8;
}

void sub_1C897E940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C897EAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  void *v16;
  void *v17;

  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)&a16);

  _Unwind_Resume(a1);
}

void sub_1C897EB34()
{
  JUMPOUT(0x1C897EB28);
}

void ___ZN2as6server21ConstAudioSessionInfo16CleanupCMSessionEv_block_invoke(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

uint64_t std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::erase(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  char v10;

  if ((__int128 *)a2 != a3)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::weak_ptr<as::server::AudioSessionInfo> *,std::weak_ptr<as::server::AudioSessionInfo> *,std::weak_ptr<as::server::AudioSessionInfo> *>((uint64_t)&v10, a3, *(__int128 **)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v8 = *(std::__shared_weak_count **)(v7 - 8);
        if (v8)
          std::__shared_weak_count::__release_weak(v8);
        v7 -= 16;
      }
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

uint64_t std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::weak_ptr<as::server::AudioSessionInfo>>,std::reverse_iterator<std::weak_ptr<as::server::AudioSessionInfo>*>,std::reverse_iterator<std::weak_ptr<as::server::AudioSessionInfo>*>,std::reverse_iterator<std::weak_ptr<as::server::AudioSessionInfo>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t std::__tree<unsigned int>::__erase_unique<unsigned int>(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = *(_DWORD *)(v2 + 28);
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 28))
    return 0;
  std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::__remove_node_pointer((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

uint64_t *std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::__emplace_unique_key_args<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>,std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>(uint64_t **a1, uint64_t *a2, _OWORD *a3)
{
  void **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::__find_equal<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>((uint64_t)a1, &v9, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v6 + 2) = *a3;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

_QWORD *std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::__find_equal<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *result;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  char v12;
  char v13;

  v5 = *(_QWORD **)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *a3;
    v7 = a3[1];
    while (1)
    {
      v8 = v4;
      v9 = v4[4];
      if (v6 == v9)
      {
        v10 = v8[5];
        if (v7 >= v10)
        {
          v11 = v10 == v7;
          if (v10 >= v7)
            v12 = 1;
          else
            v12 = -1;
          if (v11)
            v12 = 0;
          if ((v12 & 0x80) == 0)
            goto LABEL_22;
          goto LABEL_19;
        }
LABEL_13:
        v4 = (_QWORD *)*v8;
        result = v8;
        if (!*v8)
          goto LABEL_22;
      }
      else
      {
        if (v6 < v9)
          goto LABEL_13;
        if (v9 >= v6)
          v13 = 1;
        else
          v13 = -1;
        if ((v13 & 0x80) == 0)
          goto LABEL_22;
LABEL_19:
        result = v8 + 1;
        v4 = (_QWORD *)v8[1];
        if (!v4)
          goto LABEL_22;
      }
    }
  }
  v8 = result;
LABEL_22:
  *a2 = v8;
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>>>::erase(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;

  v3 = std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::__remove_node_pointer(a1, a2);
  v4 = (std::__shared_weak_count *)a2[6];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a2);
  return v3;
}

void std::__tree<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::__map_value_compare<void const*,std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::less<void const*>,true>,std::allocator<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    std::__tree<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::__map_value_compare<void const*,std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::less<void const*>,true>,std::allocator<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::__map_value_compare<void const*,std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::less<void const*>,true>,std::allocator<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>>>::destroy(a1, a2[1]);
    v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

void std::__shared_ptr_emplace<as::server::DeviceTimeObserver::CommonSessionInfo>::__on_zero_shared(uint64_t a1)
{
  std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::destroy(a1 + 40, *(_QWORD **)(a1 + 48));
}

uint64_t std::__shared_ptr_emplace<as::server::AudioSessionInfo>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void **std::__split_buffer<std::weak_ptr<as::server::AudioSessionInfo>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::weak_ptr<as::server::AudioSessionInfo>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void as::server::ConstAudioSessionInfo::DisableMicrophoneMonitor(as::server::ConstAudioSessionInfo *this)
{
  caulk::platform *v2;
  void *v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  int v7;
  uint64_t i;
  as::server *v9;
  NSObject *v10;
  int v11;
  std::string::size_type v12;
  std::string *v13;
  void **v14;
  void *v15[2];
  char v16;
  _BYTE v17[8];
  uint64_t *v18;
  _BYTE __p[12];
  __int16 v20;
  _BYTE v21[14];
  __int16 v22;
  std::string *v23;
  __int16 v24;
  _QWORD v25[2];
  char v26;
  std::string v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = (caulk::platform *)*((unsigned int *)this + 22);
  +[AVAudioMicrophoneMonitor sharedInstance](AVAudioMicrophoneMonitor, "sharedInstance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v4 = *((unsigned int *)this + 2);
    caulk::platform::process_name(v2);
    if (v21[9] >= 0)
      v5 = __p;
    else
      v5 = *(_BYTE **)__p;
    v6 = objc_msgSend(v3, "setState:clientType:clientID:clientDescription:", 0, 0, v4, v5);
    v7 = v6;
    if ((v21[9] & 0x80000000) != 0)
    {
      operator delete(*(void **)__p);
      if (!v7)
        goto LABEL_25;
    }
    else if (!v6)
    {
      goto LABEL_25;
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[17],char [17],0>((uint64_t)__p, "microphone_state");
    *(_QWORD *)&v21[2] = __p;
    v21[10] = 1;
    BYTE2(v23) = 4;
    v25[0] = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v23 + 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v23 + 2);
    v25[1] = (char *)&v23 + 2;
    v26 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v27, (uint64_t)__p, 2, 1, 2);
    v27.__r_.__value_.__r.__words[2] = (std::string::size_type)&v27;
    v28 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v17, (uint64_t)&v27, 1, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v27);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v27.__r_.__value_.__l.__size_, v27.__r_.__value_.__s.__data_[0]);
    for (i = 0; i != -8; i -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v23 + i * 8 + 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v25[i], *((unsigned __int8 *)&v23 + i * 8 + 2));
    }
    v10 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v9));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)this + 223) < 0)
        std::string::__init_copy_ctor_external(&v27, *((const std::string::value_type **)this + 25), *((_QWORD *)this + 26));
      else
        v27 = *(std::string *)((char *)this + 200);
      v11 = SHIBYTE(v27.__r_.__value_.__r.__words[2]);
      v12 = v27.__r_.__value_.__r.__words[0];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v17, -1, 0x20u, 0, 0, v15);
      v13 = &v27;
      if (v11 < 0)
        v13 = (std::string *)v12;
      if (v16 >= 0)
        v14 = v15;
      else
        v14 = (void **)v15[0];
      *(_DWORD *)__p = 136316162;
      *(_QWORD *)&__p[4] = "AudioSessionInfo.mm";
      v20 = 1024;
      *(_DWORD *)v21 = 696;
      *(_WORD *)&v21[4] = 2080;
      *(_QWORD *)&v21[6] = "setMicrophoneMonitorState";
      v22 = 2080;
      v23 = v13;
      v24 = 2080;
      v25[0] = v14;
      _os_log_impl(&dword_1C895C000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", __p, 0x30u);
      if (v16 < 0)
        operator delete(v15[0]);
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v27.__r_.__value_.__l.__data_);
    }

    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v18, v17[0]);
  }
LABEL_25:

}

void sub_1C897F210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;

  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&a13);
  _Unwind_Resume(a1);
}

BOOL as::server::AudioApplicationInfo::HasStrongClientOwner(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v1;
  as::server::AudioAppInfoImpl *v2;
  _BOOL8 HasStrongClientOwner;

  v1 = this + 4;
  v2 = (as::server::AudioAppInfoImpl *)&this[6];
  os_unfair_lock_lock(this + 4);
  HasStrongClientOwner = as::server::AudioAppInfoImpl::HasStrongClientOwner(v2);
  os_unfair_lock_unlock(v1);
  return HasStrongClientOwner;
}

void sub_1C897F2EC(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void as::server::AudioApplicationInfo::GetSessions(os_unfair_lock_s *this@<X0>, uint64_t a2@<X8>)
{
  os_unfair_lock_s *v3;
  as::server::AudioAppInfoImpl *v4;

  v3 = this + 4;
  v4 = (as::server::AudioAppInfoImpl *)&this[6];
  os_unfair_lock_lock(this + 4);
  as::server::AudioAppInfoImpl::GetSessions(v4, a2);
  os_unfair_lock_unlock(v3);
}

void sub_1C897F344(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

BOOL as::server::AudioAppInfoImpl::HasStrongClientOwner(as::server::AudioAppInfoImpl *this)
{
  return *((_QWORD *)this + 17) != 0;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[17],char [17],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[17]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[17]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1C897F3E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned int *caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned int)>>::element_t::release(unsigned int *result)
{
  unsigned int v1;

  do
    v1 = __ldaxr(result);
  while (__stlxr(v1 - 0x10000, result));
  if ((v1 & 0xFFFF0000) == 0x10000)
  {
    if (!atomic_load(result))
      JUMPOUT(0x1CAA38D28);
    caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::element_t::release();
  }
  return result;
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned int)>>::remove(uint64_t a1, int a2)
{
  unint64_t v4;
  unint64_t SlotForKey;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v18;
  std::unique_lock<std::mutex> v19;

  v19.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 80);
  v19.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 80));
  v4 = atomic_load((unint64_t *)(a1 + 40));
  if (v4
    && (SlotForKey = caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::table_impl::findSlotForKey((uint64_t *)v4, a2), (SlotForKey & 1) != 0))
  {
    v7 = v6;
    atomic_store(0xFFFFFFFFFFFFFFFFLL, (unint64_t *)(v4 + 8 * HIDWORD(SlotForKey) + 16));
    if (v6)
    {
      v8 = atomic_load((unsigned int *)(a1 + 48));
      if (v8 >= 1)
      {
        do
        {
          v18 = 50;
          std::this_thread::sleep_for[abi:ne180100]<long long,std::ratio<1l,1000000l>>(&v18);
          v9 = atomic_load((unsigned int *)(a1 + 48));
        }
        while (v9 > 0);
      }
      if ((unsigned __int16)atomic_load((unsigned int *)v7))
      {
        std::unique_lock<std::mutex>::unlock(&v19);
        while ((unsigned __int16)atomic_load((unsigned int *)v7))
        {
          v18 = 500;
          std::this_thread::sleep_for[abi:ne180100]<long long,std::ratio<1l,1000000l>>(&v18);
        }
        std::unique_lock<std::mutex>::lock(&v19);
        v4 = atomic_load((unint64_t *)(a1 + 40));
      }
      caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::element_t::release((unsigned int *)v7);
      v13 = *(_DWORD *)(a1 + 32) - 1;
      *(_DWORD *)(a1 + 32) = v13;
      if (v4)
      {
        v14 = 16 * v13;
        v15 = *(_DWORD *)(v4 + 8);
        if (v14 / v15 <= 2 && v15 >= 9)
          caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::rehash((unint64_t *)a1, v15 >> 1);
      }
      v7 = 1;
    }
  }
  else
  {
    v7 = 0;
  }
  caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::emptyReleasePool(a1);
  if (v19.__owns_)
    std::mutex::unlock(v19.__m_);
  return v7;
}

void sub_1C897F5A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(exception_object);
}

void as::server::ConstAudioSessionInfo::~ConstAudioSessionInfo(as::server::ConstAudioSessionInfo *this)
{
  const void *v2;
  const void *v3;

  *(_QWORD *)this = &off_1E8205828;
  as::server::ConstAudioSessionInfo::CleanupCMSession((CFTypeRef *)this);

  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)this + 224);
  if (*((char *)this + 223) < 0)
    operator delete(*((void **)this + 25));
  if (*((char *)this + 199) < 0)
    operator delete(*((void **)this + 22));
  if (*((char *)this + 175) < 0)
    operator delete(*((void **)this + 19));
  if (*((char *)this + 151) < 0)
    operator delete(*((void **)this + 16));
  v2 = (const void *)*((_QWORD *)this + 14);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 13);
  if (v3)
    CFRelease(v3);

  BaseOpaqueObject::~BaseOpaqueObject(this);
}

{
  as::server::ConstAudioSessionInfo::~ConstAudioSessionInfo(this);
  JUMPOUT(0x1CAA38D28);
}

void as::server::ConstAudioSessionInfo::CleanupCMSession(CFTypeRef *this)
{
  CFTypeRef v2;
  CFTypeRef v3;
  NSObject *v4;
  _QWORD block[5];

  as::server::ConstAudioSessionInfo::DisableMicrophoneMonitor((as::server::ConstAudioSessionInfo *)this);
  v2 = this[13];
  if (v2)
  {
    CFRetain(this[13]);
    v3 = this[13];
    this[13] = 0;
    if (v3)
      CFRelease(v3);
    dispatch_get_global_queue(0, 0);
    v4 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___ZN2as6server21ConstAudioSessionInfo16CleanupCMSessionEv_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = v2;
    dispatch_async(v4, block);

  }
}

void as::server::LegacySessionManager::PrivateRemoveSessionFromApplication(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t **v5;
  _QWORD *v6;
  uint64_t *v7;
  os_unfair_lock_s *v8;
  os_unfair_lock_s **v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  as::server *v18;
  NSObject *v19;
  os_unfair_lock_s *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  void **v23;
  _BYTE buf[18];
  __int16 v25;
  os_unfair_lock_s *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = (uint64_t **)(a1 + 32);
  v6 = std::__tree<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::__map_value_compare<as::server::ProcessIdentity,std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::less<as::server::ProcessIdentity>,true>,std::allocator<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>>>::find<as::server::ProcessIdentity>(a1 + 32, *a3 + 52);
  if ((_QWORD *)(a1 + 40) != v6)
  {
    v7 = v6;
    v9 = (os_unfair_lock_s **)(v6 + 9);
    v8 = (os_unfair_lock_s *)v6[9];
    v10 = (std::__shared_weak_count *)a3[1];
    v21 = *a3;
    v22 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    as::server::AudioApplicationInfo::RemoveSession(v8, &v21);
    v13 = v22;
    if (v22)
    {
      v14 = (unint64_t *)&v22->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (!as::server::AudioApplicationInfo::HasStrongClientOwner(*v9))
    {
      as::server::AudioApplicationInfo::GetSessions(*v9, (uint64_t)buf);
      v17 = *(_QWORD *)buf;
      v16 = *(_QWORD *)&buf[8];
      v23 = (void **)buf;
      std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100](&v23);
      if (v16 == v17)
      {
        v19 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v18));
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          v20 = as::server::AudioApplicationInfo::DebugString(*v9);
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "ServerSessionManager.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 863;
          v25 = 2080;
          v26 = v20;
          _os_log_impl(&dword_1C895C000, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d destroy audio app instance since was created implicitly by session creation and all sessions now gone (audio app: %s)", buf, 0x1Cu);
        }

        std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::__remove_node_pointer(v5, v7);
        std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)v9);
        operator delete(v7);
      }
    }
  }
}

void sub_1C897F8D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void as::server::LegacySessionManager::FindOrCreatePrimarySession(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10[2];
  uint64_t v11;
  int v12;
  id v13;
  id v14;
  int v15;
  __int128 v16;
  __int128 v17;

  v6 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v6;
  v11 = *(_QWORD *)(a2 + 32);
  v12 = 1886546285;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0u;
  v17 = 0u;
  as::server::LegacySessionManager::FindOrCreatePrimarySession(a1, v10, a3, a4, a5, a6);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }

}

void sub_1C897F9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  as::server::SessionCreationDescription::~SessionCreationDescription(&a9);
  _Unwind_Resume(a1);
}

void as::server::GetAudioControlQueue()
{
  _os_crash();
  __break(1u);
}

BOOL as::server::AudioApplicationInfo::RemoveSession(os_unfair_lock_s *a1, uint64_t *a2)
{
  os_unfair_lock_s *v3;
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BOOL8 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v3 = a1 + 4;
  v4 = (uint64_t *)&a1[6];
  os_unfair_lock_lock(a1 + 4);
  v5 = (std::__shared_weak_count *)a2[1];
  v13 = *a2;
  v14 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = as::server::AudioAppInfoImpl::RemoveSession(v4, (uint64_t)&v13);
  v9 = v14;
  if (v14)
  {
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  os_unfair_lock_unlock(v3);
  return v8;
}

void sub_1C897FA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  os_unfair_lock_s *v9;

  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  os_unfair_lock_unlock(v9);
  _Unwind_Resume(a1);
}

void as::server::DeviceTimeObserver::addSiblingToSameReferringSessionListsAsSource(as::server::DeviceTimeObserver *this, unsigned int a2, const as::server::DeviceTimeObserver::SessionSlot *a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _BYTE v9[16];
  unsigned __int8 v10;
  unsigned int v11;

  v11 = a2;
  v4 = as::server::DeviceTimeObserver::SessionSlot::sessionState(a3);
  caulk::concurrent::atomic_value<as::SessionSharedState,2,3>::load(v4, (uint64_t)v9);
  if (v10 != 255)
  {
    v5 = *((_QWORD *)this + 6);
    if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 7) - v5) >> 5) <= v10)
      std::vector<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>>::__throw_out_of_range[abi:ne180100]();
    boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::insert_unique((uint64_t *)(v5 + 96 * v10 + 48), &v11, (uint64_t)&v7);
    if (!v8)
      as::server::DeviceTimeObserver::addSiblingToSameReferringSessionListsAsSource();
  }
  if (v9[0] != 255)
  {
    v6 = *((_QWORD *)this + 6);
    if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 7) - v6) >> 5) <= v9[0])
      std::vector<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>>::__throw_out_of_range[abi:ne180100]();
    boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::insert_unique((uint64_t *)(v6 + 96 * v9[0] + 24), &v11, (uint64_t)&v7);
    if (!v8)
      as::server::DeviceTimeObserver::addSiblingToSameReferringSessionListsAsSource();
  }
}

uint64_t as::server::DeviceTimeObserver::SharedBlockOwner::deallocateSessionSlot(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t v5;
  uint64_t result;
  __int128 v7;
  char v8;
  uint64_t v9;
  char v10;

  v5 = caulk::ipc::mapped_memory::get_ptr<as::DTSharedBlock>((caulk::ipc::mapped_memory *)(a1 + 16), 0);
  if (a3 >= 0x21FuLL)
    std::__throw_out_of_range[abi:ne180100]("array::at");
  LOBYTE(v7) = -1;
  *((_QWORD *)&v7 + 1) = 0;
  v8 = -1;
  v9 = 0;
  v10 = 0;
  result = caulk::concurrent::atomic_value<as::SessionSharedState,2,3>::store(v5 + 104 * a3 + 8, &v7);
  *(_QWORD *)(a1 + (((unint64_t)a3 >> 3) & 0x1FFFFFF8) + 56) &= ~(1 << a3);
  return result;
}

void as::server::AudioSessionInfo::GetSiblingSessions(os_unfair_lock_s *this@<X0>, _QWORD *a2@<X8>)
{
  os_unfair_lock_s *v4;

  v4 = this + 126;
  os_unfair_lock_lock(this + 126);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::__init_with_size[abi:ne180100]<std::weak_ptr<as::server::AudioSessionInfo>*,std::weak_ptr<as::server::AudioSessionInfo>*>(a2, *(_QWORD **)&this[128]._os_unfair_lock_opaque, *(_QWORD **)&this[130]._os_unfair_lock_opaque, (uint64_t)(*(_QWORD *)&this[130]._os_unfair_lock_opaque - *(_QWORD *)&this[128]._os_unfair_lock_opaque) >> 4);
  os_unfair_lock_unlock(v4);
}

void sub_1C897FC8C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void as::server::AudioSessionInfo::AddSiblingSession(uint64_t a1, __int128 *a2)
{
  os_unfair_lock_s *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  uint64_t shared_owners;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  std::__shared_weak_count *v19;

  v4 = (os_unfair_lock_s *)(a1 + 504);
  v5 = (uint64_t *)(a1 + 512);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 504));
  std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::push_back[abi:ne180100](v5, a2);
  v6 = *(_QWORD *)(a1 + 512);
  v7 = *(_QWORD *)(a1 + 520);
  if (v6 != v7)
  {
    while (1)
    {
      v8 = *(std::__shared_weak_count **)(v6 + 8);
      if (!v8)
        break;
      p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
      do
        v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
      shared_owners = v8->__shared_owners_;
      std::__shared_weak_count::__release_weak(v8);
      if (shared_owners == -1)
        break;
      v6 += 16;
      if (v6 == v7)
      {
        v6 = v7;
        goto LABEL_19;
      }
    }
    if (v6 != v7)
    {
      v12 = v6 + 16;
      if (v6 + 16 != v7)
      {
        v13 = v6;
        do
        {
          v14 = *(std::__shared_weak_count **)(v13 + 24);
          v13 = v12;
          if (v14)
          {
            v15 = (unint64_t *)&v14->__shared_weak_owners_;
            do
              v16 = __ldxr(v15);
            while (__stxr(v16 + 1, v15));
            v17 = v14->__shared_owners_;
            std::__shared_weak_count::__release_weak(v14);
            if (v17 != -1)
            {
              v18 = *(_OWORD *)v13;
              *(_QWORD *)v13 = 0;
              *(_QWORD *)(v13 + 8) = 0;
              v19 = *(std::__shared_weak_count **)(v6 + 8);
              *(_OWORD *)v6 = v18;
              if (v19)
                std::__shared_weak_count::__release_weak(v19);
              v6 += 16;
            }
          }
          v12 = v13 + 16;
        }
        while (v13 + 16 != v7);
      }
    }
  }
LABEL_19:
  std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::erase((uint64_t)v5, v6, *(__int128 **)(a1 + 520));
  os_unfair_lock_unlock(v4);
}

void sub_1C897FDC8(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

BOOL as::server::AudioSessionInfo::SetXPCConnection(as::server::AudioSessionInfo *this, NSXPCConnection *a2)
{
  NSXPCConnection *v4;
  NSXPCConnection *v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD *v8;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v5 = v4;
  v6 = *((_QWORD *)this + 32);
  if (v6)
  {
    v7 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v4));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = (_QWORD *)((char *)this + 176);
      if (*((char *)this + 199) < 0)
        v8 = (_QWORD *)*v8;
      v10 = 136315650;
      v11 = "AudioSessionInfo.h";
      v12 = 1024;
      v13 = 486;
      v14 = 2080;
      v15 = v8;
      _os_log_impl(&dword_1C895C000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d Session %s already had a valid XPC Connection. Ignoring request to set it.", (uint8_t *)&v10, 0x1Cu);
    }
  }
  else
  {
    objc_storeStrong((id *)this + 32, a2);
  }

  return v6 == 0;
}

void sub_1C897FEF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL as::server::AudioAppInfoImpl::RemoveSession(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  int v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  BOOL v9;
  NSObject *v10;
  _BOOL8 result;
  _QWORD *v12;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  _QWORD *v20;
  uint64_t v21;

  v2 = a1;
  v21 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  v5 = (uint64_t **)(a1 + 11);
  v4 = (uint64_t *)a1[11];
  v6 = a1 + 12;
  if (v4 != a1 + 12)
  {
    v7 = a1[13];
    do
    {
      if (*((_DWORD *)v4 + 8) == v3)
      {
        a1 = std::__tree<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>>>::erase(v5, v4);
      }
      else
      {
        v8 = (uint64_t *)v4[1];
        if (v8)
        {
          do
          {
            a1 = v8;
            v8 = (uint64_t *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            a1 = (uint64_t *)v4[2];
            v9 = *a1 == (_QWORD)v4;
            v4 = a1;
          }
          while (!v9);
        }
      }
      v4 = a1;
    }
    while (a1 != v6);
    if (v7 != v2[13])
      return 1;
  }
  v10 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)a1));
  result = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v12 = v2 + 8;
    if (*((char *)v2 + 87) < 0)
      v12 = (_QWORD *)*v12;
    v13 = 136315906;
    v14 = "AudioApplicationInfoImpl.mm";
    v15 = 1024;
    v16 = 442;
    v17 = 1024;
    v18 = v3;
    v19 = 2080;
    v20 = v12;
    _os_log_impl(&dword_1C895C000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Session 0x%x not found in app's known sessions (app: %s)", (uint8_t *)&v13, 0x22u);
    return 0;
  }
  return result;
}

void BaseOpaqueObject::~BaseOpaqueObject(BaseOpaqueObject *this)
{
  int v2;

  *(_QWORD *)this = off_1E82054E8;
  v2 = *((_DWORD *)this + 2);
  if (v2)
  {
    caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::remove(OpaqueObjectMgr::sInstance, v2);
    *((_DWORD *)this + 2) = 0;
  }
}

void `anonymous namespace'::MSNSetMicrophoneState(_anonymous_namespace_ *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v2 = getMSNMonitorSetMicrophoneStateSymbolLoc(void)::ptr;
  v9 = getMSNMonitorSetMicrophoneStateSymbolLoc(void)::ptr;
  if (!getMSNMonitorSetMicrophoneStateSymbolLoc(void)::ptr)
  {
    v3 = MediaSafetyNetLibrary();
    v2 = dlsym(v3, "MSNMonitorSetMicrophoneState");
    v7[3] = (uint64_t)v2;
    getMSNMonitorSetMicrophoneStateSymbolLoc(void)::ptr = v2;
  }
  _Block_object_dispose(&v6, 8);
  if (v2)
  {
    ((void (*)(_anonymous_namespace_ *))v2)(this);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void ATMSNMonitorSetMicrophoneState(BOOL)");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("MSNSoftLink.h"), 21, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_1C89801B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C8980268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1C89802F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::deviceSupportsAudioReturnChannel(_anonymous_namespace_ *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
  }
}

void sub_1C8980360(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::IsRemoteDeviceInputControlAllowed(_anonymous_namespace_ *this, const void *a2)
{
  as::server *v3;
  int v4;
  NSObject *v5;
  uint64_t v6;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  _anonymous_namespace_ *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!this)
  v3 = (as::server *)_MXSessionCopyProperty();
  v4 = (int)v3;
  if ((_DWORD)v3)
  {
    v5 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v3));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v9 = "AudioSessionServerImpPlayState.mm";
      v10 = 1024;
      v11 = 83;
      v12 = 2048;
      v13 = this;
      v14 = 1024;
      v15 = v4;
      _os_log_impl(&dword_1C895C000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d IsRemoteDeviceInputControlAllowed _MXSessionCopyProperty for property kMXSessionProperty_IsRemoteDeviceInputControlAllowed for subsession ref %p returned error %d", buf, 0x22u);
    }
    return 0;
  }
  else
  {
    v6 = objc_msgSend(0, "BOOLValue");

  }
  return v6;
}

void sub_1C8980498(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t as::RemoteDeviceControlEnabled(as *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    as::RemoteDeviceControlEnabled(void)::remoteDeviceControlEnabled = _os_feature_enabled_impl();
  }
  return as::RemoteDeviceControlEnabled(void)::remoteDeviceControlEnabled;
}

void sub_1C8980518(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL as::server::require_acq::AudioSessionSetClientPlayState_Inner(unsigned int,AVAudioSessionClientPlayerType,void *,unsigned int,AVAudioSessionClientPlayState,AudioSessionDuckingInfo *,void const*)::$_0::operator()(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  unsigned __int8 v4;
  uint64_t *v5;
  unsigned __int8 v6;
  uint64_t v7;
  as::server::AudioSessionInfo *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  unsigned __int8 v17[8];
  uint64_t *v18;

  v2 = (uint64_t *)**(unsigned __int8 **)(a1 + 8);
  v17[0] = 4;
  v18 = v2;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
  v3 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(*(unsigned __int8 **)a1, "IsRecordingMuted");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
  v4 = *(_BYTE *)v3;
  *(_BYTE *)v3 = v17[0];
  v17[0] = v4;
  v5 = (uint64_t *)v3[1];
  v3[1] = (uint64_t)v18;
  v18 = v5;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v3);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v18, v17[0]);
  {
    as::AudioSessionMuteEnabled(void)::enabled = _os_feature_enabled_impl();
  }
  if (as::AudioSessionMuteEnabled(void)::enabled)
  {
    v7 = *(_QWORD *)(a1 + 24);
    v8 = *(as::server::AudioSessionInfo **)v7;
    if (!*(_QWORD *)v7)
      as::server::require_acq::AudioSessionSetClientPlayState_Inner(unsigned int,AVAudioSessionClientPlayerType,void *,unsigned int,AVAudioSessionClientPlayState,AudioSessionDuckingInfo *,void const*)::$_0::operator()();
    v9 = *(std::__shared_weak_count **)(v7 + 8);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    **(_DWORD **)(a1 + 16) = as::server::AudioSessionInfo::SetSessionInputMuted(v8, **(unsigned __int8 **)(a1 + 8));
    if (v9)
    {
      v12 = (unint64_t *)&v9->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v14 = **(unsigned int **)(a1 + 16);
    if ((_DWORD)v14)
      goto LABEL_13;
  }
  else
  {
    v14 = _MXSessionSetProperty();
    **(_DWORD **)(a1 + 16) = v14;
    if ((_DWORD)v14)
    {
LABEL_13:
      v15 = as::server::TranslateCMSessionErrorCode((uint64_t)"set_is_recording_muted_property", *(uint64_t **)(a1 + 40), 627, v14);
      **(_DWORD **)(a1 + 16) = v15;
      return v15 == 0;
    }
  }
  return 1;
}

void sub_1C8980730(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void `anonymous namespace'::UpdateAudioAppMuteState(as::server::LegacySessionManager *a1, uint64_t a2, int a3)
{
  os_unfair_lock_s *v6;
  unsigned int v7;
  as::server *v8;
  unsigned __int8 v9;
  as::server::AudioApplicationInfo *v10;
  NSObject *v11;
  void *v12;
  unsigned int updated;
  as::server *v14;
  NSObject *v15;
  os_unfair_lock_s *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  as::server::AudioApplicationInfo *v20;
  std::__shared_weak_count *v21;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  unsigned int v27;
  __int16 v28;
  unsigned int v29;
  __int16 v30;
  os_unfair_lock_s *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v6 = (os_unfair_lock_s *)as::server::LegacySessionManager::Instance(a1);
  v7 = *(_DWORD *)(*(_QWORD *)a1 + 8);
  as::server::LegacySessionManager::FindAudioApplicationForSession(v6, v7, &v20);
  if (v20)
  {
    {
      as::AudioSessionMuteEnabled(void)::enabled = _os_feature_enabled_impl();
    }
    v10 = v20;
    if (as::AudioSessionMuteEnabled(void)::enabled)
    {
      as::server::AudioApplicationInfo::HandleSessionInputMuteChange((os_unfair_lock_s *)v20, v7, a2);
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      updated = as::server::AudioApplicationInfo::UpdateProperty((uint64_t)v10, CFSTR("InputMute"), v12, 1634744890, a3);

      if (updated)
      {
        v15 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v14));
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          v16 = as::server::AudioApplicationInfo::DebugString((os_unfair_lock_s *)v20);
          *(_DWORD *)buf = 136316162;
          v23 = "AudioSessionServerImpPlayState.mm";
          v24 = 1024;
          v25 = 66;
          v26 = 1024;
          v27 = updated;
          v28 = 1024;
          v29 = v7;
          v30 = 2080;
          v31 = v16;
          _os_log_impl(&dword_1C895C000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d error (code: %d) updating inputMuted for session: 0x%x, audioApp: %s", buf, 0x28u);
        }

      }
    }
  }
  else
  {
    v11 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v8));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v23 = "AudioSessionServerImpPlayState.mm";
      v24 = 1024;
      v25 = 55;
      v26 = 1024;
      v27 = v7;
      _os_log_impl(&dword_1C895C000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d error - no audioApp instances found for session: 0x%x", buf, 0x18u);
    }
  }
  v17 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1C89809DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void applesauce::CF::DictionaryRef::~DictionaryRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t applesauce::CF::details::treat_as_BOOL_for_convert_as<float>(const __CFBoolean *a1)
{
  CFTypeID TypeID;
  uint64_t v3;
  uint64_t v4;

  if (a1 && (TypeID = CFBooleanGetTypeID(), TypeID == CFGetTypeID(a1)))
  {
    v3 = COERCE_UNSIGNED_INT((float)CFBooleanGetValue(a1));
    v4 = 0x100000000;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  return v3 | v4;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
}

void sub_1C8980BF8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[26],char [26],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[26]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[26]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1C8980CAC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void nlohmann::detail::exception::name(int a1@<W1>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  std::string *p_p;
  std::string::size_type size;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  std::string __p;
  std::string v12;
  std::string v13;
  std::string v14;

  std::operator+<char>();
  v4 = std::string::append(&v12, ".", 1uLL);
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v8 = std::string::append(&v13, (const std::string::value_type *)p_p, size);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v14, "] ", 2uLL);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
}

void sub_1C8980DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (*(char *)(v26 - 41) < 0)
    operator delete(*(void **)(v26 - 64));
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(char *__s@<X1>, std::string *a2@<X0>, std::string *a3@<X8>)
{
  size_t v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(__s);
  v7 = (__n128 *)std::string::append(a2, __s, v6);
  result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

nlohmann::detail::exception *nlohmann::detail::exception::exception(nlohmann::detail::exception *this, int a2, const char *a3)
{
  *(_QWORD *)this = &off_1E8204DB8;
  *((_DWORD *)this + 2) = a2;
  MEMORY[0x1CAA38B30]((char *)this + 16, a3);
  return this;
}

void sub_1C8980EE0(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

const char *nlohmann::detail::exception::what(const std::runtime_error *this)
{
  return std::runtime_error::what(this + 1);
}

void nlohmann::detail::exception::~exception(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&off_1E8204DB8;
  MEMORY[0x1CAA38B3C](&this[2]);
  std::exception::~exception(this);
}

{
  this->__vftable = (std::exception_vtbl *)&off_1E8204DB8;
  MEMORY[0x1CAA38B3C](&this[2]);
  std::exception::~exception(this);
  JUMPOUT(0x1CAA38D28);
}

void nlohmann::detail::type_error::create(int a1@<W0>, uint64_t a2@<X1>, nlohmann::detail::exception *a3@<X8>)
{
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  void *__p;
  char v13;
  std::string v14;
  void *v15[2];
  int64_t v16;

  std::string::basic_string[abi:ne180100]<0>(&__p, "type_error");
  nlohmann::detail::exception::name(a1, &v14);
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a2;
  else
    v7 = *(const std::string::value_type **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::string::append(&v14, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (v13 < 0)
    operator delete(__p);
  if (v16 >= 0)
    v11 = v15;
  else
    v11 = (void **)v15[0];
  nlohmann::detail::exception::exception(a3, a1, (const char *)v11);
  *(_QWORD *)a3 = &off_1E8204DF8;
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_1C8981058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(const char *a1@<X0>, std::string *a2@<X1>, std::string *a3@<X8>)
{
  size_t v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(a1);
  v7 = (__n128 *)std::string::insert(a2, 0, a1, v6);
  result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

const char *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(char *a1)
{
  unint64_t v1;

  v1 = *a1;
  if (v1 > 9)
    return "number";
  else
    return off_1E8204E78[v1];
}

void nlohmann::detail::type_error::~type_error(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&off_1E8204DB8;
  MEMORY[0x1CAA38B3C](&this[2]);
  std::exception::~exception(this);
}

{
  this->__vftable = (std::exception_vtbl *)&off_1E8204DB8;
  MEMORY[0x1CAA38B3C](&this[2]);
  std::exception::~exception(this);
  JUMPOUT(0x1CAA38D28);
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, void **a2)
{
  size_t v2;
  size_t v3;
  int v4;
  void *v5;
  size_t v6;

  v2 = *((unsigned __int8 *)a1 + 23);
  v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (_QWORD *)*a1;
    v2 = v3;
  }
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  return std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(a1, v2, v5, v6);
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(const void *a1, size_t a2, void *__s2, size_t a4)
{
  size_t v7;
  int v8;

  if (a4 >= a2)
    v7 = a2;
  else
    v7 = a4;
  v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0)
      return 1;
  }
  else
  {
    if (a2 == a4)
      return 0;
    if (a2 >= a4)
      return 1;
  }
  return 255;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
    std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>::destroy[abi:ne180100]<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void,void>(*(_QWORD *)a1, (uint64_t)__p + 32);
  if (__p)
    operator delete(__p);
}

void std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>::destroy[abi:ne180100]<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void,void>(uint64_t a1, uint64_t a2)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2 + 24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(a2 + 32), *(unsigned __int8 *)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[77],char [77],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[77]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[77]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1C89814D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void CACFDictionary::~CACFDictionary(CACFDictionary *this)
{
  const void *v2;

  if (*((_BYTE *)this + 8))
  {
    v2 = *(const void **)this;
    if (*(_QWORD *)this)
      CFRelease(v2);
  }
}

uint64_t std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__shared_ptr_emplace<nlohmann::detail::output_string_adapter<char,std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8204E20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<nlohmann::detail::output_string_adapter<char,std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8204E20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA38D28);
}

void nlohmann::detail::output_string_adapter<char,std::string>::~output_string_adapter()
{
  JUMPOUT(0x1CAA38D28);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(_QWORD *a1, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;
  char *v5;

  if (!a2)
    return (**(uint64_t (***)(_QWORD, uint64_t))*a1)(*a1, 48);
  LOBYTE(v2) = a2;
  if (a2 >= 0xA)
  {
    if (a2 >= 0x64)
    {
      *(_WORD *)((char *)a1 + 17) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(unsigned char)::digits_to_99[(a2 - 100 * ((41 * a2) >> 12))];
      v5 = (char *)a1 + 17;
      v2 = (41 * a2) >> 12;
      goto LABEL_10;
    }
    v3 = 2;
  }
  else
  {
    v3 = 1;
  }
  v5 = (char *)a1 + v3 + 16;
  if (a2 < 0xA)
  {
LABEL_10:
    *(v5 - 1) = v2 | 0x30;
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
  }
  *((_WORD *)v5 - 1) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(unsigned char)::digits_to_99[a2];
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
}

_QWORD *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::clear[abi:ne180100](_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned int v6;
  BOOL v7;

  v1 = result;
  v3 = *result;
  v2 = result[1];
  if (v2 != *result)
  {
    v4 = v2 - 16;
    v5 = (unsigned __int8 *)(v2 - 16);
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
      v6 = *v5;
      v5 -= 16;
      result = (_QWORD *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v4 + 8, v6);
      v7 = v4 == v3;
      v4 = (uint64_t)v5;
    }
    while (!v7);
  }
  v1[1] = v3;
  return result;
}

void std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  v15 = 0;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    v9 = a3 - 16;
    do
    {
      *(_BYTE *)(v7 - 16) = *(_BYTE *)v9;
      v10 = v7 - 16;
      *(_QWORD *)(v10 + 8) = *(_QWORD *)(v9 + 8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v9);
      *(_BYTE *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v10);
      v7 = *((_QWORD *)&v17 + 1) - 16;
      *((_QWORD *)&v17 + 1) -= 16;
      v11 = v9 == a5;
      v9 -= 16;
    }
    while (!v11);
    v12 = v17;
  }
  v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v15 = v3;
  v16 = v2;
  v17 = v3;
  v18 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v10 = v7;
  v11 = v6;
  v12 = v7;
  v13 = v6;
  return std::__allocator_destroy[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>,std::reverse_iterator<std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>>(v4, (uint64_t)v14, (uint64_t)v9);
}

uint64_t std::__allocator_destroy[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>,std::reverse_iterator<std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *i;
  uint64_t result;

  for (i = *(unsigned __int8 **)(a2 + 32); i != *(unsigned __int8 **)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)i);
    result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(i + 8, *i);
    i = (unsigned __int8 *)(*(_QWORD *)(a2 + 32) + 16);
  }
  return result;
}

uint64_t std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      *(_QWORD *)(v4 + 16) = v2 - 16;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v2 - 16);
      result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v2 - 8, *(unsigned __int8 *)(v2 - 16));
      v2 = *(_QWORD *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  unint64_t v7;

  v5 = a2;
  if (a2 != a3)
  {
    v7 = a4[1];
    do
    {
      if (v7 >= a4[2])
      {
        v7 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(a4, v5);
      }
      else
      {
        *(_BYTE *)v7 = *(_BYTE *)v5;
        *(_QWORD *)(v7 + 8) = *(_QWORD *)(v5 + 8);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v5);
        *(_BYTE *)v5 = 0;
        *(_QWORD *)(v5 + 8) = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
        v7 += 16;
      }
      a4[1] = v7;
      v5 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[5];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v15[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v7, v9);
  v11 = (uint64_t)&v10[16 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[16 * v12];
  *(_BYTE *)v11 = *(_BYTE *)a2;
  *(_QWORD *)(v11 + 8) = *(_QWORD *)(a2 + 8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  v15[2] = v11 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1C8981ABC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  BOOL v8;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  if (v4 != a2)
  {
    v5 = v4 - 16;
    v6 = (unsigned __int8 *)(v4 - 16);
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v5);
      v7 = *v6;
      v6 -= 16;
      result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v5 + 8, v7);
      v8 = v5 == a2;
      v5 = (uint64_t)v6;
    }
    while (!v8);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

void std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  uint64_t v6;
  char *v7;
  unsigned int v8;
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (uint64_t)(v4 - 16);
      v7 = v4 - 16;
      do
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
        v8 = *v7;
        v7 -= 16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v6 + 8, v8);
        v9 = v6 == (_QWORD)v2;
        v6 = (uint64_t)v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::for_each[abi:ne180100]<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::(std::initializer_list<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>,BOOL,nlohmann::detail::value_t)::{lambda(nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&)#2}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _BYTE v7[8];
  uint64_t *v8;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::moved_or_copied(v5, (uint64_t)v7);
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(*(uint64_t ***)(a3 + 8), *(void ***)(*v8 + 8), *(_QWORD *)(*v8 + 8), *v8 + 16);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v7);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v8, v7[0]);
      v5 += 32;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_1C8981C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t **v9;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v9, a9);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(uint64_t a1, uint64_t a2)
{
  std::string *v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  switch(*(_BYTE *)a1)
  {
    case 1:
      v4 = (std::string *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(*(_QWORD *)(a2 + 8));
      goto LABEL_8;
    case 2:
      v4 = (std::string *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(*(uint64_t **)(a2 + 8));
      goto LABEL_8;
    case 3:
      v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>(*(_QWORD *)(a2 + 8));
      goto LABEL_8;
    case 4:
      v4 = (std::string *)*(unsigned __int8 *)(a2 + 8);
      goto LABEL_8;
    case 5:
    case 6:
    case 7:
      v4 = *(std::string **)(a2 + 8);
      goto LABEL_8;
    case 8:
      v4 = (std::string *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<nlohmann::byte_container_with_subtype<std::vector<unsigned char>>,nlohmann::byte_container_with_subtype<std::vector<unsigned char>> const&>(*(_QWORD *)(a2 + 8));
LABEL_8:
      *(_QWORD *)(a1 + 8) = v4;
      break;
    default:
      break;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

uint64_t *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(uint64_t a1)
{
  uint64_t *v2;

  v2 = (uint64_t *)operator new(0x18uLL);
  std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::map[abi:ne180100](v2, a1);
  return v2;
}

void sub_1C8981D4C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *> *,long>>>(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_1C8981D9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *> *,long>>>(uint64_t *result, void **a2, void **a3)
{
  void **v4;
  uint64_t **v5;
  uint64_t v6;
  void **v7;
  void **v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t)(result + 1);
    do
    {
      result = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (void **)v4[2];
          v9 = *v8 == v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(uint64_t **a1, uint64_t a2, void **a3, __int128 *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  void **v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void **std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(_QWORD *a1, uint64_t a2, void ***a3, uint64_t *a4, void **a5)
{
  void **v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  void **v14;
  void **v15;
  _QWORD *v16;
  BOOL v17;
  void **v19;

  v9 = (void **)(a1 + 1);
  if (a1 + 1 == (_QWORD *)a2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, (void **)(a2 + 32)) & 0x80) != 0)
  {
    if (*a1 == a2)
    {
      v12 = (_QWORD *)a2;
    }
    else
    {
      v11 = *(_QWORD **)a2;
      if (*(_QWORD *)a2)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)v11[1];
        }
        while (v11);
      }
      else
      {
        v16 = (_QWORD *)a2;
        do
        {
          v12 = (_QWORD *)v16[2];
          v17 = *v12 == (_QWORD)v16;
          v16 = v12;
        }
        while (v17);
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12 + 4, a5) & 0x80) == 0)
        return (void **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
    }
    if (*(_QWORD *)a2)
    {
      *a3 = (void **)v12;
      return (void **)(v12 + 1);
    }
    else
    {
      *a3 = (void **)a2;
      return (void **)a2;
    }
  }
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a2 + 32), a5) & 0x80) != 0)
  {
    a4 = (uint64_t *)(a2 + 8);
    v13 = *(_QWORD *)(a2 + 8);
    if (v13)
    {
      v14 = *(void ***)(a2 + 8);
      do
      {
        v15 = v14;
        v14 = (void **)*v14;
      }
      while (v14);
    }
    else
    {
      v19 = (void **)a2;
      do
      {
        v15 = (void **)v19[2];
        v17 = *v15 == v19;
        v19 = v15;
      }
      while (!v17);
    }
    if (v15 == v9)
      goto LABEL_27;
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, v15 + 4) & 0x80) != 0)
    {
      v13 = *a4;
LABEL_27:
      if (v13)
      {
        *a3 = v15;
        return v15;
      }
      else
      {
        *a3 = (void **)a2;
      }
      return (void **)a4;
    }
    return (void **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
  }
  *a3 = (void **)a2;
  *a4 = a2;
  return (void **)a4;
}

std::string *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1C89820A0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(&this[1], (char *)a2 + 24);
  return this;
}

void sub_1C8982114(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(uint64_t *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = 0;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(v2, *a1, a1[1], (a1[1] - *a1) >> 4);
  return v2;
}

void sub_1C8982174(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1C89821EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v4, v6);
      v6 += 16;
      v4 = v11 + 16;
      v11 += 16;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1C89822D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::__allocator_destroy[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>(*(_QWORD *)a1, **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 8), **(_QWORD **)(a1 + 8));
  return a1;
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  BOOL v9;

  if (a3 != a5)
  {
    v6 = a3 - 16;
    v7 = (unsigned __int8 *)(a3 - 16);
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
      v8 = *v7;
      v7 -= 16;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v6 + 8), v8);
      v9 = v6 == a5;
      v6 = (uint64_t)v7;
    }
    while (!v9);
  }
}

std::string *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>(uint64_t a1)
{
  std::string *v2;
  std::string *v3;

  v2 = (std::string *)operator new(0x18uLL);
  v3 = v2;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  return v3;
}

void sub_1C89823DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<nlohmann::byte_container_with_subtype<std::vector<unsigned char>>,nlohmann::byte_container_with_subtype<std::vector<unsigned char>> const&>(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x20uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v2, *(const void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 8) - *(_QWORD *)a1);
  *((_WORD *)v2 + 12) = *(_WORD *)(a1 + 24);
  return v2;
}

void sub_1C8982438(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1C89824A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

_QWORD *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1C8982568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(v4, v6);
      v6 += 32;
      v4 = v11 + 16;
      v11 += 16;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1C8982614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[12]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[12]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1C89826A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[15]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[15]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1C8982734(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[13]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[13]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1C89827C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[44],char [44],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[44]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[44]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1C8982854(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[89],char [89],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[89]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[89]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1C89828E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1C898297C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1C8982A04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C8982C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<as::WorkloopPool>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void applesauce::dispatch::v1::queue::~queue(id *this)
{
  id v2;

  v2 = *this;
  *this = 0;

}

void sub_1C8982FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1C89831EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)AVAudioSessionXPCServer;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void as::server::ProcessInfo::~ProcessInfo(void **this)
{
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  objc_destroyWeak(this + 2);

}

void sub_1C89833B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},NSString * {__strong}>(caulk::xpc::reply_watchdog_factory *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v8;
  void *v9;
  _QWORD v10[4];
  id v11;
  id v12;

  v3 = a2;
  v4 = v3;
  if (*(_BYTE *)a1)
  {
    v5 = (void *)MEMORY[0x1CAA39148](v3);
  }
  else
  {
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3321888768;
    v10[2] = ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP8NSStringEEEU13block_pointerFvDpT_ESC_i_block_invoke;
    v10[3] = &__block_descriptor_48_ea8_32c143_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP8NSStringEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E__e30_v24__0__NSError_8__NSString_16l;
    caulk::xpc::reply_watchdog_factory::make_timer(a1);
    v9 = (void *)MEMORY[0x1CAA39148](v4);
    v11 = v8;
    v12 = (id)MEMORY[0x1CAA39148](v9);
    v5 = (void *)MEMORY[0x1CAA39148](v10);

    v6 = v11;
    v11 = 0;

  }
  return v5;
}

void sub_1C89834C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C89836DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  va_list va;

  va_start(va, a8);
  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)va);

  _Unwind_Resume(a1);
}

id caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},BOOL>(caulk::xpc::reply_watchdog_factory *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v8;
  void *v9;
  _QWORD v10[4];
  id v11;
  id v12;

  v3 = a2;
  v4 = v3;
  if (*(_BYTE *)a1)
  {
    v5 = (void *)MEMORY[0x1CAA39148](v3);
  }
  else
  {
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3321888768;
    v10[2] = ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorbEEEU13block_pointerFvDpT_ES9_i_block_invoke;
    v10[3] = &__block_descriptor_48_ea8_32c122_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorbEEEU13block_pointerFvDpT_ES9_iEUlS4_bE__e20_v20__0__NSError_8B16l;
    caulk::xpc::reply_watchdog_factory::make_timer(a1);
    v9 = (void *)MEMORY[0x1CAA39148](v4);
    v11 = v8;
    v12 = (id)MEMORY[0x1CAA39148](v9);
    v5 = (void *)MEMORY[0x1CAA39148](v10);

    v6 = v11;
    v11 = 0;

  }
  return v5;
}

void sub_1C8983830(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C89839F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C8983C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1C8984480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26)
{
  void *v26;

  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)&a26);

  _Unwind_Resume(a1);
}

void sub_1C8984EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  void *v40;
  void *v41;

  __cxa_guard_abort(&_ZGVZZ101__AVAudioSessionRemoteXPCClient_setProperties_values_MXProperties_batchStrategy_genericMXPipe_reply__EUb_E16allowSessionMute);

  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)&a40);
  _Unwind_Resume(a1);
}

uint64_t as::AudioSessionMuteEnabled(as *this)
{
  unsigned __int8 v1;

  {
    as::AudioSessionMuteEnabled(void)::enabled = _os_feature_enabled_impl();
  }
  return as::AudioSessionMuteEnabled(void)::enabled;
}

void sub_1C89850E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C89852B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C8985440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  va_list va;

  va_start(va, a8);

  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_1C89855AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)&a9);
  _Unwind_Resume(a1);
}

void sub_1C89857B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)va);

  _Unwind_Resume(a1);
}

id caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},double,unsigned long>(caulk::xpc::reply_watchdog_factory *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v8;
  void *v9;
  _QWORD v10[4];
  id v11;
  id v12;

  v3 = a2;
  v4 = v3;
  if (*(_BYTE *)a1)
  {
    v5 = (void *)MEMORY[0x1CAA39148](v3);
  }
  else
  {
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3321888768;
    v10[2] = ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrordmEEEU13block_pointerFvDpT_ES9_i_block_invoke;
    v10[3] = &__block_descriptor_48_ea8_32c124_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrordmEEEU13block_pointerFvDpT_ES9_iEUlS4_dmE__e23_v32__0__NSError_8d16Q24l;
    caulk::xpc::reply_watchdog_factory::make_timer(a1);
    v9 = (void *)MEMORY[0x1CAA39148](v4);
    v11 = v8;
    v12 = (id)MEMORY[0x1CAA39148](v9);
    v5 = (void *)MEMORY[0x1CAA39148](v10);

    v6 = v11;
    v11 = 0;

  }
  return v5;
}

void sub_1C8985914(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C8985A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  void *v14;
  os_unfair_lock_s *v15;

  os_unfair_lock_unlock(v15);
  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)&a14);

  _Unwind_Resume(a1);
}

void sub_1C8985C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  void *v7;
  va_list va;

  va_start(va, a6);

  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_1C8985FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, const void *a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  void *v26;
  void *v27;

  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  applesauce::CF::ObjectRef<void const*>::~ObjectRef(&a17);
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)&a26);

  _Unwind_Resume(a1);
}

const void **applesauce::CF::ObjectRef<void const*>::~ObjectRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void sub_1C89861F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  v18 = v17;

  _Unwind_Resume(a1);
}

void sub_1C8986344(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C8986918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  void *v28;
  void *v29;
  void *v30;

  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)&a28);
  _Unwind_Resume(a1);
}

void sub_1C8986B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)&a9);
  _Unwind_Resume(a1);
}

void sub_1C8986FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  void *v28;
  void *v29;
  void *v30;

  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)&a28);
  _Unwind_Resume(a1);
}

void sub_1C89871F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)&a9);
  _Unwind_Resume(a1);
}

void sub_1C89874C8(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);

  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_1C898771C(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);

  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_1C89878C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  va_list va;

  va_start(va, a10);

  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_1C8987D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id a25,id a26)
{
  void *v26;
  void *v27;
  uint64_t v28;

  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100](v28 + 16);
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

id caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},unsigned int>(caulk::xpc::reply_watchdog_factory *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v8;
  void *v9;
  _QWORD v10[4];
  id v11;
  id v12;

  v3 = a2;
  v4 = v3;
  if (*(_BYTE *)a1)
  {
    v5 = (void *)MEMORY[0x1CAA39148](v3);
  }
  else
  {
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3321888768;
    v10[2] = ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorjEEEU13block_pointerFvDpT_ES9_i_block_invoke;
    v10[3] = &__block_descriptor_48_ea8_32c122_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorjEEEU13block_pointerFvDpT_ES9_iEUlS4_jE__e20_v20__0__NSError_8I16l;
    caulk::xpc::reply_watchdog_factory::make_timer(a1);
    v9 = (void *)MEMORY[0x1CAA39148](v4);
    v11 = v8;
    v12 = (id)MEMORY[0x1CAA39148](v9);
    v5 = (void *)MEMORY[0x1CAA39148](v10);

    v6 = v11;
    v11 = 0;

  }
  return v5;
}

void sub_1C8987F70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C8988234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;
  void *v28;
  uint64_t v29;

  a15 = (void **)&a21;
  std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100](&a15);
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100](v29 + 16);
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a27);

  _Unwind_Resume(a1);
}

id BuildInvalidAudioAppError(as::server *a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v10;
  const __CFString *v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  as::server *v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(a1));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v5 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)buf = 136315906;
    v13 = "AVAudioSessionXPCServer.mm";
    v14 = 1024;
    v15 = 1507;
    v16 = 2080;
    v17 = a1;
    v18 = 1024;
    v19 = v5;
    _os_log_impl(&dword_1C895C000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d %s failed due to audio application (pid: %d) lookup failure", buf, 0x22u);
  }
  v6 = (void *)MEMORY[0x1E0CB35C8];
  v10 = *MEMORY[0x1E0CB2D50];
  v11 = CFSTR("AudioApp lookup failed");
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -50, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

void sub_1C898840C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C8988798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  uint64_t v15;
  va_list va;

  va_start(va, a13);

  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100](v15 + 16);
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1C8988C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  va_list va;

  va_start(va, a13);

  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100](v18 + 16);
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1C89890E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  va_list va;

  va_start(va, a13);

  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100](v18 + 16);
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1C898934C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;
  void *v28;
  uint64_t v29;

  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100](v29 + 16);
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a27);

  _Unwind_Resume(a1);
}

void sub_1C8989494(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C8989820(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void *as::server::forbid_acq::SystemController::Instance(as::server::forbid_acq::SystemController *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    as::server::forbid_acq::SystemController::SystemController((as::server::forbid_acq::SystemController *)&as::server::forbid_acq::SystemController::Instance(void)::sInstance);
  }
  return &as::server::forbid_acq::SystemController::Instance(void)::sInstance;
}

void sub_1C8989908(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C8989BA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t caulk::expected<NSDictionary * {__strong},NSError * {__strong}>::value(uint64_t result)
{
  void **v1;
  _QWORD *exception;

  if (!*(_BYTE *)(result + 8))
  {
    v1 = (void **)result;
    exception = __cxa_allocate_exception(0x10uLL);
    caulk::bad_expected_access<NSError * {__strong}>::bad_expected_access(exception, *v1);
  }
  return result;
}

void sub_1C8989C64(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1C8989DE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C8989FB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C898A228(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C898A2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

uint64_t std::__optional_destruct_base<as::server::SessionCreationDescription,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 104))
  {
    std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100](a1 + 88);

  }
  return a1;
}

uint64_t as::server::HandleDispatchBlockException(as::server *this, const char *a2, const char *a3, const char *a4, unint64_t a5, unint64_t a6)
{
  int v8;
  size_t v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  size_t v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  size_t v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  std::string::size_type size;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *p_p;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  uint64_t result;
  std::string __p;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  __int128 v54;
  std::string::size_type v55;

  v8 = (int)a4;
  std::string::basic_string[abi:ne180100]<0>(&v43, "Exception thrown: ");
  v12 = strlen((const char *)this);
  v13 = std::string::append(&v43, (const std::string::value_type *)this, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v44, ", ", 2uLL);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v17 = strlen(a2);
  v18 = std::string::append(&v45, a2, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = std::string::append(&v46, ", ", 2uLL);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v22 = strlen(a3);
  v23 = std::string::append(&v47, a3, v22);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v25 = std::string::append(&v48, ":", 1uLL);
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v42, v8);
  if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v27 = &v42;
  else
    v27 = (std::string *)v42.__r_.__value_.__r.__words[0];
  if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
  else
    size = v42.__r_.__value_.__l.__size_;
  v29 = std::string::append(&v49, (const std::string::value_type *)v27, size);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(", ", &v50, &v51);
  std::to_string(&v41, a5);
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v31 = &v41;
  else
    v31 = (std::string *)v41.__r_.__value_.__r.__words[0];
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v32 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
  else
    v32 = v41.__r_.__value_.__l.__size_;
  v33 = std::string::append(&v51, (const std::string::value_type *)v31, v32);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(", ", &v52, &v53);
  std::to_string(&__p, a6);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v36 = __p.__r_.__value_.__l.__size_;
  v37 = std::string::append(&v53, (const std::string::value_type *)p_p, v36);
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v55 = v37->__r_.__value_.__r.__words[2];
  v54 = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  result = abort_with_reason();
  __break(1u);
  return result;
}

void sub_1C898A710(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 73) < 0)
    operator delete(*(void **)(v1 - 96));
  _Unwind_Resume(a1);
}

void gsl::details::terminate(gsl::details *this)
{
  std::terminate();
}

void std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

as::server::forbid_acq::SystemController *as::server::forbid_acq::SystemController::SystemController(as::server::forbid_acq::SystemController *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = 0;
  v2 = objc_msgSend(objc_alloc(MEMORY[0x1E0D48568]), "initWithPID:", getpid());
  v3 = *(void **)this;
  *(_QWORD *)this = v2;

  return this;
}

void sub_1C898A944(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

_QWORD *caulk::bad_expected_access<NSError * {__strong}>::bad_expected_access(_QWORD *a1, void *a2)
{
  id v3;

  v3 = a2;
  *a1 = &off_1E82050B8;
  a1[1] = v3;
  return a1;
}

void caulk::bad_expected_access<NSError * {__strong}>::~bad_expected_access(std::exception *a1)
{

  std::exception::~exception(a1);
}

{

  std::exception::~exception(a1);
  JUMPOUT(0x1CAA38D28);
}

uint64_t std::unique_ptr<std::promise<void>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x1CAA38C80]();
    JUMPOUT(0x1CAA38D28);
  }
  return result;
}

void sub_1C898ABF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void AudioSessionServerXPCTimeout(char *a1)
{
  unsigned __int8 v2;
  std::string *v3;
  __int128 v4;
  std::string *v5;
  __int128 v6;
  NSObject *v7;
  void **v8;
  unsigned __int8 v9;
  void **v10;
  id v11;
  void **v12;
  void *v13;
  pid_t v14;
  uint64_t v15;
  NSObject *v16;
  void **v17;
  std::string v18;
  void *__p[2];
  int64_t v20;
  _BYTE v21[28];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  do
    v2 = __ldaxr(AudioSessionServerXPCTimeout(char const*)::onceFlag);
  while (__stlxr(1u, AudioSessionServerXPCTimeout(char const*)::onceFlag));
  if ((v2 & 1) == 0)
  {
    LogACQEvents();
    std::string::basic_string[abi:ne180100]<0>(&v18, a1);
    v3 = std::string::insert(&v18, 0, "XPC message timeout in ", 0x17uLL);
    v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    *(_QWORD *)&v21[16] = *((_QWORD *)&v3->__r_.__value_.__l + 2);
    *(_OWORD *)v21 = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    v5 = std::string::append((std::string *)v21, ", probably deadlocked. Writing a stackshot and terminating.", 0x3BuLL);
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v20 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if ((v21[23] & 0x80000000) != 0)
      operator delete(*(void **)v21);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    v7 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v5));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = __p;
      if (v20 < 0)
        v8 = (void **)__p[0];
      *(_DWORD *)v21 = 136315650;
      *(_QWORD *)&v21[4] = "AVAudioSessionXPCServer.mm";
      *(_WORD *)&v21[12] = 1024;
      *(_DWORD *)&v21[14] = 310;
      *(_WORD *)&v21[18] = 2080;
      *(_QWORD *)&v21[20] = v8;
      _os_log_impl(&dword_1C895C000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d %s", v21, 0x1Cu);
    }
    {
      as::PanicOnXPCTimeoutEnabled(void)::enabled = _os_feature_enabled_impl();
    }
    if (as::PanicOnXPCTimeoutEnabled(void)::enabled)
    {
      if (v20 >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      MEMORY[0x1CAA3928C](3072, v10);
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      v17 = __p;
      if (v20 < 0)
        v17 = (void **)__p[0];
      *(_DWORD *)v21 = 136315138;
      *(_QWORD *)&v21[4] = v17;
      _os_log_fault_impl(&dword_1C895C000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "%s", v21, 0xCu);
    }
    v11 = objc_alloc(MEMORY[0x1E0CB3940]);
    if (v20 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    v13 = (void *)objc_msgSend(v11, "initWithCString:encoding:", v12, 1);
    v14 = getpid();
    v15 = WriteStackshotReportWithPID();
    if ((v15 & 1) == 0)
    {
      v16 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v15));
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v21 = 136315394;
        *(_QWORD *)&v21[4] = "AVAudioSessionXPCServer.mm";
        *(_WORD *)&v21[12] = 1024;
        *(_DWORD *)&v21[14] = 330;
        _os_log_impl(&dword_1C895C000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d Writing stackshot failed", v21, 0x12u);
      }
    }
    kill(v14, 9);

    if (SHIBYTE(v20) < 0)
      operator delete(__p[0]);
  }
}

void sub_1C898AF3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP8NSStringEEEU13block_pointerFvDpT_ESC_i_block_invoke(uint64_t a1, void *a2, void *a3)
{
  caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},NSString * {__strong}>(void({block_pointer})(NSError * {__strong},NSString * {__strong}),int)::{lambda(NSError *,NSString *)#1}::operator()(a1 + 32, a2, a3);
}

void caulk::xpc::reply_watchdog_factory::reply_with_timeout<NSError * {__strong},NSString * {__strong}>(void({block_pointer})(NSError * {__strong},NSString * {__strong}),int)::{lambda(NSError *,NSString *)#1}::operator()(uint64_t a1, void *a2, void *a3)
{
  id v5;
  NSObject *v6;
  id v7;

  v5 = a3;
  v7 = a2;
  applesauce::dispatch::v1::queue::operator*((id *)a1);
  v6 = objc_claimAutoreleasedReturnValue();
  dispatch_source_cancel(v6);

  (*(void (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

void sub_1C898B034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c143_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP8NSStringEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E_(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  result = MEMORY[0x1CAA39148](*(_QWORD *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_ea8_32c143_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorU8__strongP8NSStringEEEU13block_pointerFvDpT_ESC_iEUlS4_S7_E_(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorbEEEU13block_pointerFvDpT_ES9_i_block_invoke(uint64_t a1, void *a2)
{
  id *v3;
  NSObject *v4;
  id v5;

  v3 = (id *)(a1 + 32);
  v5 = a2;
  applesauce::dispatch::v1::queue::operator*(v3);
  v4 = objc_claimAutoreleasedReturnValue();
  dispatch_source_cancel(v4);

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1C898B124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c122_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorbEEEU13block_pointerFvDpT_ES9_iEUlS4_bE_(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  result = MEMORY[0x1CAA39148](*(_QWORD *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_ea8_32c122_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorbEEEU13block_pointerFvDpT_ES9_iEUlS4_bE_(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrordmEEEU13block_pointerFvDpT_ES9_i_block_invoke(uint64_t a1, void *a2, double a3)
{
  id *v5;
  NSObject *v6;
  id v7;

  v5 = (id *)(a1 + 32);
  v7 = a2;
  applesauce::dispatch::v1::queue::operator*(v5);
  v6 = objc_claimAutoreleasedReturnValue();
  dispatch_source_cancel(v6);

  (*(void (**)(double))(*(_QWORD *)(a1 + 40) + 16))(a3);
}

void sub_1C898B220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c124_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrordmEEEU13block_pointerFvDpT_ES9_iEUlS4_dmE_(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  result = MEMORY[0x1CAA39148](*(_QWORD *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_ea8_32c124_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrordmEEEU13block_pointerFvDpT_ES9_iEUlS4_dmE_(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

}

void ___ZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorjEEEU13block_pointerFvDpT_ES9_i_block_invoke(uint64_t a1, void *a2)
{
  id *v3;
  NSObject *v4;
  id v5;

  v3 = (id *)(a1 + 32);
  v5 = a2;
  applesauce::dispatch::v1::queue::operator*(v3);
  v4 = objc_claimAutoreleasedReturnValue();
  dispatch_source_cancel(v4);

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1C898B30C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c122_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorjEEEU13block_pointerFvDpT_ES9_iEUlS4_jE_(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  result = MEMORY[0x1CAA39148](*(_QWORD *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_ea8_32c122_ZTSKZN5caulk3xpc22reply_watchdog_factory18reply_with_timeoutIJU8__strongP7NSErrorjEEEU13block_pointerFvDpT_ES9_iEUlS4_jE_(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

}

void sub_1C898B3E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL `anonymous namespace'::MSNAvailable(_anonymous_namespace_ *this)
{
  if (!MediaSafetyNetLibraryCore(char **)::frameworkLibrary)
    MediaSafetyNetLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  return MediaSafetyNetLibraryCore(char **)::frameworkLibrary != 0;
}

void *MediaSafetyNetLibrary(void)
{
  void *v0;
  void *v2;
  void *v3;

  if (!MediaSafetyNetLibraryCore(char **)::frameworkLibrary)
    MediaSafetyNetLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  v0 = (void *)MediaSafetyNetLibraryCore(char **)::frameworkLibrary;
  if (!MediaSafetyNetLibraryCore(char **)::frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *MediaSafetyNetLibrary()");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("MSNSoftLink.h"), 18, CFSTR("%s"), 0);

    __break(1u);
    free(v2);
  }
  return v0;
}

void sub_1C898B5E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, _Unwind_Exception *exception_object)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

void as::server::DeferredMessageState::EnqueueDefaultRouteChange(as::server::DeferredMessageState *this, const as::RouteIdentifier *a2)
{
  uint64_t *v4;
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  int v7;
  void (***v8)(_QWORD);
  BOOL v9;

  v6 = (void (***)(_QWORD))*((_QWORD *)this + 12);
  v5 = (void (***)(_QWORD))*((_QWORD *)this + 13);
  v4 = (uint64_t *)((char *)this + 96);
  if (v6 == v5)
  {
    v5 = (void (***)(_QWORD))*((_QWORD *)this + 12);
  }
  else
  {
    v7 = *((_DWORD *)a2 + 6);
    v8 = v6 + 4;
    while (*((_DWORD *)v8 - 2) != v7)
    {
      v9 = v8 == v5;
      v8 += 4;
      if (v9)
      {
        v6 = (void (***)(_QWORD))*((_QWORD *)this + 13);
        goto LABEL_14;
      }
    }
    v6 = v8 - 4;
    if (v8 - 4 != v5 && v8 != v5)
    {
      do
      {
        if (*((_DWORD *)v8 + 6) != v7)
        {
          as::RouteIdentifier::operator=();
          v6 += 4;
        }
        v8 += 4;
      }
      while (v8 != v5);
      v5 = (void (***)(_QWORD))*((_QWORD *)this + 13);
    }
  }
LABEL_14:
  std::vector<as::RouteIdentifier>::erase((uint64_t)v4, v6, v5);
  std::vector<as::RouteIdentifier>::push_back[abi:ne180100](v4, (RouteIdentifier *)a2);
  as::server::DeferredMessageState::EnqueueEventType(this, 1);
}

BOOL as::server::DeferredMessageState::SendSingleMessage(as::server::DeferredMessageState *this)
{
  NSObject *v2;
  std::string *p_p;
  int v4;
  std::string __p;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  std::string *v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)this)
  {
    v2 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(this));
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      as::ProcessToken::description((as::server::DeferredMessageState *)((char *)this + 16), &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v4 = *((_DWORD *)this + 1);
      *(_DWORD *)buf = 136315906;
      v8 = "AVAudioSessionXPCClientRelay.mm";
      v9 = 1024;
      v10 = 381;
      v11 = 2080;
      v12 = p_p;
      v13 = 1024;
      v14 = v4;
      _os_log_impl(&dword_1C895C000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d deferring message for client process %s. Count=%u", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }

    return 0;
  }
  else
  {
    if (*((_QWORD *)this + 4) - *((_QWORD *)this + 3) != 4)
      as::server::DeferredMessageState::SendSingleMessage();
    return as::server::DeferredMessageState::SendDeferredMessages(this);
  }
}

void sub_1C898BBD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL as::server::DeferredMessageState::SendInterruptionMessage(as::server::DeferredMessageState *this, int a2, NSDictionary *a3)
{
  NSDictionary *v5;
  _BOOL8 v6;

  v5 = a3;
  as::server::DeferredMessageState::EnqueueInterruptionMessage(this, a2, v5);
  v6 = as::server::DeferredMessageState::SendSingleMessage(this);

  return v6;
}

void sub_1C898BC40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void as::server::DeferredMessageState::EnqueueInterruptionMessage(as::server::DeferredMessageState *this, int a2, NSDictionary *a3)
{
  NSDictionary *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[5];

  v5 = a3;
  v6 = *((_QWORD *)this + 23);
  v7 = *((_QWORD *)this + 22);
  if (v7 >= v6)
  {
    v9 = *((_QWORD *)this + 21);
    v10 = (uint64_t)(v7 - v9) >> 4;
    if ((unint64_t)(v10 + 1) >> 60)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v11 = v6 - v9;
    v12 = (uint64_t)(v6 - v9) >> 3;
    if (v12 <= v10 + 1)
      v12 = v10 + 1;
    if (v11 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v24[4] = (char *)this + 184;
    v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>((uint64_t)this + 184, v13);
    v16 = &v14[16 * v10];
    *(_DWORD *)v16 = a2;
    *((_QWORD *)v16 + 1) = v5;
    v18 = *((_QWORD *)this + 21);
    v17 = *((_QWORD *)this + 22);
    v19 = v16;
    if (v17 != v18)
    {
      v20 = *((_QWORD *)this + 22);
      do
      {
        v21 = *(_DWORD *)(v20 - 16);
        v20 -= 16;
        *((_DWORD *)v19 - 4) = v21;
        v19 -= 16;
        v22 = *(_QWORD *)(v20 + 8);
        *(_QWORD *)(v20 + 8) = 0;
        *((_QWORD *)v19 + 1) = v22;
      }
      while (v20 != v18);
    }
    v8 = v16 + 16;
    *((_QWORD *)this + 21) = v19;
    *((_QWORD *)this + 22) = v16 + 16;
    v23 = *((_QWORD *)this + 23);
    *((_QWORD *)this + 23) = &v14[16 * v15];
    v24[2] = v17;
    v24[3] = v23;
    v24[0] = v18;
    v24[1] = v18;
    std::__split_buffer<std::pair<unsigned int,NSDictionary * {__strong}>>::~__split_buffer((uint64_t)v24);
  }
  else
  {
    *(_DWORD *)v7 = a2;
    *(_QWORD *)(v7 + 8) = v5;
    v8 = (char *)(v7 + 16);
  }
  *((_QWORD *)this + 22) = v8;
  as::server::DeferredMessageState::EnqueueEventType(this, 4);

}

void sub_1C898BD74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void as::server::DeferredMessageState::EnqueueStoppedForAppStateChange(as::server::DeferredMessageState *this, int a2)
{
  char *v3;
  _DWORD *v4;
  unint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  int v16;

  v16 = a2;
  v3 = (char *)this + 120;
  v4 = std::remove[abi:ne180100]<std::__wrap_iter<unsigned int *>,unsigned int>(*((_DWORD **)this + 15), *((_DWORD **)this + 16), &v16);
  if (*((_DWORD **)v3 + 1) != v4)
    *((_QWORD *)this + 16) = v4;
  v5 = *((_QWORD *)this + 17);
  if ((unint64_t)v4 >= v5)
  {
    v7 = *(_DWORD **)v3;
    v8 = ((uint64_t)v4 - *(_QWORD *)v3) >> 2;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 62)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v10 = v5 - (_QWORD)v7;
    if (v10 >> 1 > v9)
      v9 = v10 >> 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 136, v11);
      v7 = (_DWORD *)*((_QWORD *)this + 15);
      v4 = (_DWORD *)*((_QWORD *)this + 16);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[4 * v8];
    v14 = &v12[4 * v11];
    *(_DWORD *)v13 = v16;
    v6 = v13 + 4;
    while (v4 != v7)
    {
      v15 = *--v4;
      *((_DWORD *)v13 - 1) = v15;
      v13 -= 4;
    }
    *((_QWORD *)this + 15) = v13;
    *((_QWORD *)this + 16) = v6;
    *((_QWORD *)this + 17) = v14;
    if (v7)
      operator delete(v7);
  }
  else
  {
    *v4 = v16;
    v6 = v4 + 1;
  }
  *((_QWORD *)this + 16) = v6;
  as::server::DeferredMessageState::EnqueueEventType(this, 2);
}

void as::server::DeferredMessageState::EnqueueHasProxies(as::server::DeferredMessageState *this, unsigned int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  char **v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;

  v6 = *((_QWORD *)this + 24);
  v7 = *((_QWORD *)this + 25);
  v8 = (char **)((char *)this + 192);
  if (v6 != v7)
  {
    while (*(_DWORD *)v6 != a2)
    {
      v6 += 8;
      if (v6 == v7)
      {
        v6 = *((_QWORD *)this + 25);
        goto LABEL_11;
      }
    }
    if (v6 != v7)
    {
      for (i = v6 + 8; i != v7; i += 8)
      {
        if (*(_DWORD *)i != a2)
        {
          *(_DWORD *)v6 = *(_DWORD *)i;
          *(_BYTE *)(v6 + 4) = *(_BYTE *)(i + 4);
          v6 += 8;
        }
      }
    }
  }
LABEL_11:
  std::vector<std::pair<unsigned int,BOOL>>::erase((uint64_t)this + 192, v6, v7);
  v10 = 0x100000000;
  if (!a3)
    v10 = 0;
  v11 = v10 | a2;
  v12 = *((_QWORD *)this + 26);
  v13 = (uint64_t *)*((_QWORD *)this + 25);
  if ((unint64_t)v13 >= v12)
  {
    v15 = ((char *)v13 - *v8) >> 3;
    if ((unint64_t)(v15 + 1) >> 61)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v16 = v12 - (_QWORD)*v8;
    v17 = v16 >> 2;
    if (v16 >> 2 <= (unint64_t)(v15 + 1))
      v17 = v15 + 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v17;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<as::server::ObjectDescription>>>((uint64_t)this + 208, v18);
    else
      v19 = 0;
    v20 = (uint64_t *)&v19[8 * v15];
    v21 = &v19[8 * v18];
    *v20 = v11;
    v14 = v20 + 1;
    v23 = (char *)*((_QWORD *)this + 24);
    v22 = (char *)*((_QWORD *)this + 25);
    if (v22 != v23)
    {
      do
      {
        v24 = *((_QWORD *)v22 - 1);
        v22 -= 8;
        *--v20 = v24;
      }
      while (v22 != v23);
      v22 = *v8;
    }
    *((_QWORD *)this + 24) = v20;
    *((_QWORD *)this + 25) = v14;
    *((_QWORD *)this + 26) = v21;
    if (v22)
      operator delete(v22);
  }
  else
  {
    *v13 = v11;
    v14 = v13 + 1;
  }
  *((_QWORD *)this + 25) = v14;
  as::server::DeferredMessageState::EnqueueEventType(this, 5);
}

void as::server::DeferredMessageState::EnqueueNeedsStateSync(as::server::DeferredMessageState *this, int a2)
{
  char *v3;
  _DWORD *v4;
  unint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  int v16;

  v16 = a2;
  v3 = (char *)this + 144;
  v4 = std::remove[abi:ne180100]<std::__wrap_iter<unsigned int *>,unsigned int>(*((_DWORD **)this + 18), *((_DWORD **)this + 19), &v16);
  if (*((_DWORD **)v3 + 1) != v4)
    *((_QWORD *)this + 19) = v4;
  v5 = *((_QWORD *)this + 20);
  if ((unint64_t)v4 >= v5)
  {
    v7 = *(_DWORD **)v3;
    v8 = ((uint64_t)v4 - *(_QWORD *)v3) >> 2;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 62)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v10 = v5 - (_QWORD)v7;
    if (v10 >> 1 > v9)
      v9 = v10 >> 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 160, v11);
      v7 = (_DWORD *)*((_QWORD *)this + 18);
      v4 = (_DWORD *)*((_QWORD *)this + 19);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[4 * v8];
    v14 = &v12[4 * v11];
    *(_DWORD *)v13 = v16;
    v6 = v13 + 4;
    while (v4 != v7)
    {
      v15 = *--v4;
      *((_DWORD *)v13 - 1) = v15;
      v13 -= 4;
    }
    *((_QWORD *)this + 18) = v13;
    *((_QWORD *)this + 19) = v6;
    *((_QWORD *)this + 20) = v14;
    if (v7)
      operator delete(v7);
  }
  else
  {
    *v4 = v16;
    v6 = v4 + 1;
  }
  *((_QWORD *)this + 19) = v6;
  as::server::DeferredMessageState::EnqueueEventType(this, 3);
}

void as::server::DeferredMessageState::EnqueueConfigurationChange(as::server::DeferredMessageState *this, const as::server::ConfigChangeSummary *a2)
{
  as::server::ConfigChangeSummary *v3;
  _anonymous_namespace_ *v4;
  uint64_t **v5;
  as::server::ChangedObject *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  int v22;
  char *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  int64x2_t v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  int64x2_t v38;
  char *v39;
  char *v40;

  v3 = (as::server::DeferredMessageState *)((char *)this + 48);
  if (*((_BYTE *)this + 88))
  {
    as::server::ConfigChangeSummary::ConfigChangeSummary((as::server::ConfigChangeSummary *)&v34, a2);
    v4 = (_anonymous_namespace_ *)as::server::ConfigChangeSummary::mutableHardwareSystemChange(v3);
    v5 = (uint64_t **)as::server::ConfigChangeSummary::mutableHardwareSystemChange((as::server::ConfigChangeSummary *)&v34);
    v7 = v35;
    v8 = v36;
    if (v35 != v36)
    {
      v9 = (_QWORD *)((char *)this + 56);
      v10 = (_QWORD *)((char *)this + 72);
      v11 = (_QWORD *)*((_QWORD *)this + 8);
      do
      {
        v12 = (_QWORD *)*v9;
        if ((_QWORD *)*v9 == v11)
        {
LABEL_8:
          if ((unint64_t)v11 >= *v10)
          {
            v17 = v11 - v12;
            if ((unint64_t)(v17 + 1) >> 61)
              std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
            v18 = *v10 - (_QWORD)v12;
            v19 = v18 >> 2;
            if (v18 >> 2 <= (unint64_t)(v17 + 1))
              v19 = v17 + 1;
            if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
              v20 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v20 = v19;
            v40 = (char *)this + 72;
            if (v20)
              v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<as::server::ObjectDescription>>>((uint64_t)this + 72, v20);
            else
              v21 = 0;
            v23 = &v21[8 * v17];
            v24 = &v21[8 * v20];
            v39 = v24;
            v25 = *v7;
            *v7 = 0;
            *(_QWORD *)v23 = v25;
            v11 = v23 + 8;
            v38.i64[1] = (uint64_t)(v23 + 8);
            v27 = (_QWORD *)*((_QWORD *)this + 7);
            v26 = (_QWORD *)*((_QWORD *)this + 8);
            if (v26 == v27)
            {
              v29 = vdupq_n_s64((unint64_t)v26);
            }
            else
            {
              do
              {
                v28 = *--v26;
                *v26 = 0;
                *((_QWORD *)v23 - 1) = v28;
                v23 -= 8;
              }
              while (v26 != v27);
              v29 = *(int64x2_t *)v9;
              v11 = (_QWORD *)v38.i64[1];
              v24 = v39;
            }
            *((_QWORD *)this + 7) = v23;
            *((_QWORD *)this + 8) = v11;
            v38 = v29;
            v30 = (char *)*((_QWORD *)this + 9);
            *((_QWORD *)this + 9) = v24;
            v39 = v30;
            v37 = v29.i64[0];
            std::__split_buffer<std::unique_ptr<as::server::ObjectDescription>>::~__split_buffer((uint64_t)&v37);
          }
          else
          {
            v16 = *v7;
            *v7 = 0;
            *v11++ = v16;
          }
          *((_QWORD *)this + 8) = v11;
        }
        else
        {
          v13 = *v7;
          v14 = (_QWORD *)*v9;
          while (1)
          {
            v15 = (_DWORD *)*v14;
            if (*(_DWORD *)(*v7 + 12) == *(_DWORD *)(*v14 + 12))
              break;
            if (++v14 == v11)
              goto LABEL_8;
          }
          v15[4] |= *(_DWORD *)(v13 + 16);
          v22 = v15[2];
          v15[2] = v22 | 2;
          v15[5] = *(_DWORD *)(v13 + 20);
          v15[2] = v22 | 6;
        }
        ++v7;
      }
      while (v7 != v8);
      v31 = v35;
      v7 = v36;
      if (v36 != v35)
      {
        do
        {
          v33 = *--v7;
          v32 = v33;
          *v7 = 0;
          if (v33)
            (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        }
        while (v7 != v31);
        v7 = v31;
      }
    }
    v36 = v7;
    as::server::ConfigChangeSummary::~ConfigChangeSummary((as::server::ConfigChangeSummary *)&v34);
  }
  else
  {
    std::optional<as::server::ConfigChangeSummary>::operator=[abi:ne180100]<as::server::ConfigChangeSummary const&,void>((as::server::DeferredMessageState *)((char *)this + 48), a2);
  }
  as::server::DeferredMessageState::EnqueueEventType(this, 0);
}

void sub_1C898C394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  as::server::ConfigChangeSummary::~ConfigChangeSummary((as::server::ConfigChangeSummary *)&a9);
  _Unwind_Resume(a1);
}

void as::server::DeferredMessageState::EnqueueControlValueChanged(as::server::DeferredMessageState *this, ControlValue *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  _BYTE v10[56];
  uint64_t v11;

  v5 = *((_QWORD *)this + 27);
  v6 = *((_QWORD *)this + 28);
  v4 = (uint64_t *)((char *)this + 216);
  as::server::ControlValue::ControlValue((as::server::ControlValue *)v10, a2);
  if (v5 == v6)
  {
    v7 = v5;
  }
  else
  {
    v7 = v6;
    v8 = v5 + 80;
    while (*(_QWORD *)(v8 - 24) != v11)
    {
      v9 = v8 == v6;
      v8 += 80;
      if (v9)
        goto LABEL_14;
    }
    if (v8 - 80 != v6)
    {
      v7 = v8 - 80;
      while (v8 != v6)
      {
        if (*(_QWORD *)(v8 + 56) != v11)
        {
          as::server::ControlValue::operator=();
          v7 += 80;
        }
        v8 += 80;
      }
    }
  }
LABEL_14:
  as::server::ControlValue::~ControlValue((as::server::ControlValue *)v10);
  std::vector<as::server::ControlValue>::erase((uint64_t)v4, v7, *((_QWORD *)this + 28));
  std::vector<as::server::ControlValue>::push_back[abi:ne180100](v4, a2);
  as::server::DeferredMessageState::EnqueueEventType(this, 6);
}

as::server::ConfigChangeSummary *std::optional<as::server::ConfigChangeSummary>::operator=[abi:ne180100]<as::server::ConfigChangeSummary const&,void>(as::server::ConfigChangeSummary *this, const as::server::ConfigChangeSummary *a2)
{
  if (*((_BYTE *)this + 40))
  {
    as::server::ConfigChangeSummary::operator=();
  }
  else
  {
    as::server::ConfigChangeSummary::ConfigChangeSummary(this, a2);
    *((_BYTE *)this + 40) = 1;
  }
  return this;
}

void as::server::DeferredMessageState::EnqueueEventType(as::server::DeferredMessageState *this, int a2)
{
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  int v17;

  v5 = (char *)*((_QWORD *)this + 3);
  v6 = (char *)*((_QWORD *)this + 4);
  v7 = v5;
  if (v5 != v6)
  {
    v7 = v5;
    while (*(_DWORD *)v7 != a2)
    {
      v7 += 4;
      if (v7 == v6)
        goto LABEL_7;
    }
  }
  if (v7 == v6)
  {
LABEL_7:
    v8 = *((_QWORD *)this + 5);
    if ((unint64_t)v6 >= v8)
    {
      v10 = (v6 - v5) >> 2;
      if ((unint64_t)(v10 + 1) >> 62)
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      v11 = v8 - (_QWORD)v5;
      v12 = (uint64_t)(v8 - (_QWORD)v5) >> 1;
      if (v12 <= v10 + 1)
        v12 = v10 + 1;
      if (v11 >= 0x7FFFFFFFFFFFFFFCLL)
        v13 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
      {
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 40, v13);
        v5 = (char *)*((_QWORD *)this + 3);
        v6 = (char *)*((_QWORD *)this + 4);
      }
      else
      {
        v14 = 0;
      }
      v15 = &v14[4 * v10];
      v16 = &v14[4 * v13];
      *(_DWORD *)v15 = a2;
      v9 = v15 + 4;
      while (v6 != v5)
      {
        v17 = *((_DWORD *)v6 - 1);
        v6 -= 4;
        *((_DWORD *)v15 - 1) = v17;
        v15 -= 4;
      }
      *((_QWORD *)this + 3) = v15;
      *((_QWORD *)this + 4) = v9;
      *((_QWORD *)this + 5) = v16;
      if (v5)
        operator delete(v5);
    }
    else
    {
      *(_DWORD *)v6 = a2;
      v9 = v6 + 4;
    }
    *((_QWORD *)this + 4) = v9;
  }
  ++*((_DWORD *)this + 1);
}

void (***std::vector<as::RouteIdentifier>::erase(uint64_t a1, void (***a2)(_QWORD), void (***a3)(_QWORD)))(_QWORD)
{
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  uint64_t v7;
  void (***v8)(_QWORD);
  void (***v9)(_QWORD);
  void (***v10)(_QWORD);
  void (**v11)(_QWORD);
  BOOL v12;

  if (a2 != a3)
  {
    v5 = a3;
    v6 = *(void (****)(_QWORD))(a1 + 8);
    if (a3 == v6)
    {
      v8 = a2;
    }
    else
    {
      v7 = 4 * (((char *)a3 - (char *)a2) >> 5);
      v8 = a2;
      do
      {
        as::RouteIdentifier::operator=();
        v8 += 4;
      }
      while (&v8[v7] != v6);
      v5 = *(void (****)(_QWORD))(a1 + 8);
    }
    if (v5 != v8)
    {
      v9 = v5 - 4;
      v10 = v5 - 4;
      do
      {
        v11 = *v10;
        v10 -= 4;
        (*v11)(v9);
        v12 = v9 == v8;
        v9 = v10;
      }
      while (!v12);
    }
    *(_QWORD *)(a1 + 8) = v8;
  }
  return a2;
}

uint64_t std::vector<as::RouteIdentifier>::push_back[abi:ne180100](uint64_t *a1, RouteIdentifier *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  as::RouteIdentifier *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = (uint64_t)(v7 - *a1) >> 5;
    if ((unint64_t)(v10 + 1) >> 59)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v11 = v5 - *a1;
    v12 = v11 >> 4;
    if (v11 >> 4 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v13 = 0x7FFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<as::RouteIdentifier>>(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = (as::RouteIdentifier *)&v14[32 * v10];
    v18 = &v14[32 * v13];
    as::RouteIdentifier::RouteIdentifier(v16, a2);
    v17 = (char *)v16 + 32;
    std::vector<as::RouteIdentifier>::__swap_out_circular_buffer(a1, &v15);
    v9 = a1[1];
    result = std::__split_buffer<as::RouteIdentifier>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    result = as::RouteIdentifier::RouteIdentifier(*(as::RouteIdentifier **)(v4 - 8), a2);
    v9 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v9;
  return result;
}

void sub_1C898C7A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<as::RouteIdentifier>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<unsigned int,BOOL>>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a2 != a3)
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = a2;
    if (a3 != v3)
    {
      v5 = 8 * ((a3 - a2) >> 3);
      v4 = a2;
      do
      {
        *(_DWORD *)v4 = *(_DWORD *)(v4 + v5);
        *(_BYTE *)(v4 + 4) = *(_BYTE *)(v4 + v5 + 4);
        v4 += 8;
      }
      while (v4 + v5 != v3);
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  return a2;
}

_DWORD *std::remove[abi:ne180100]<std::__wrap_iter<unsigned int *>,unsigned int>(_DWORD *result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *i;

  if (result == a2)
  {
LABEL_4:
    result = a2;
  }
  else
  {
    while (*result != *a3)
    {
      if (++result == a2)
        goto LABEL_4;
    }
  }
  if (result != a2)
  {
    for (i = result + 1; i != a2; ++i)
    {
      if (*i != *a3)
        *result++ = *i;
    }
  }
  return result;
}

uint64_t std::vector<as::server::ControlValue>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void (***v7)(_QWORD);
  void (***v8)(_QWORD);
  void (***v9)(_QWORD);
  void (**v10)(_QWORD);
  BOOL v11;

  if (a2 != a3)
  {
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,as::server::ControlValue *,as::server::ControlValue *,as::server::ControlValue *,0>(a3, *(_QWORD *)(a1 + 8), a2);
    v6 = v5;
    v7 = *(void (****)(_QWORD))(a1 + 8);
    if (v7 != v5)
    {
      v8 = v7 - 10;
      v9 = v7 - 10;
      do
      {
        v10 = *v9;
        v9 -= 10;
        (*v10)(v8);
        v11 = v8 == v6;
        v8 = v9;
      }
      while (!v11);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

uint64_t std::vector<as::server::ControlValue>::push_back[abi:ne180100](uint64_t *a1, ControlValue *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  as::server::ControlValue *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 4);
    if (v10 + 1 > 0x333333333333333)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 4);
    v12 = 2 * v11;
    if (2 * v11 <= v10 + 1)
      v12 = v10 + 1;
    if (v11 >= 0x199999999999999)
      v13 = 0x333333333333333;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<as::server::ControlValue>>(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = (as::server::ControlValue *)&v14[80 * v10];
    v18 = &v14[80 * v13];
    as::server::ControlValue::ControlValue(v16, a2);
    v17 = (char *)v16 + 80;
    std::vector<as::server::ControlValue>::__swap_out_circular_buffer(a1, &v15);
    v9 = a1[1];
    result = std::__split_buffer<as::server::ControlValue>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    result = as::server::ControlValue::ControlValue(*(as::server::ControlValue **)(v4 - 8), a2);
    v9 = v7 + 80;
    a1[1] = v7 + 80;
  }
  a1[1] = v9;
  return result;
}

void sub_1C898CA00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<as::server::ControlValue>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL as::server::DeferredMessageState::SendDeferredMessages(as::server::DeferredMessageState *this)
{
  NSObject *v2;
  int v3;
  std::string *p_p;
  uint64_t v5;
  _BOOL8 result;
  std::string __p;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;
  __int16 v14;
  std::string *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)this = 0;
  if (*((_DWORD *)this + 1) >= 2u)
  {
    v2 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(this));
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = *((_DWORD *)this + 1);
      as::ProcessToken::description((as::server::DeferredMessageState *)((char *)this + 16), &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315906;
      v9 = "AVAudioSessionXPCClientRelay.mm";
      v10 = 1024;
      v11 = 392;
      v12 = 1024;
      v13 = v3;
      v14 = 2080;
      v15 = p_p;
      _os_log_impl(&dword_1C895C000, v2, OS_LOG_TYPE_INFO, "%25s:%-5d sending %u deferred messages for client process %s", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }

  }
  v5 = *((_QWORD *)this + 3);
  result = v5 != *((_QWORD *)this + 4);
  *(_BYTE *)this = result;
  *((_QWORD *)this + 4) = v5;
  *((_DWORD *)this + 1) = 0;
  return result;
}

void sub_1C898CB50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void as::ProcessToken::description(as::ProcessToken *this@<X0>, std::string *a2@<X8>)
{
  char *v4;
  std::string *p_p;
  std::string::size_type size;
  std::string *v7;
  std::string __p;
  std::string v9;

  if ((*(_DWORD *)this & 0x20000) != 0)
    v4 = "Test.";
  else
    v4 = "";
  std::string::basic_string[abi:ne180100]<0>(&v9, v4);
  std::to_string(&__p, *(_DWORD *)this & 0x1FFFF);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v7 = std::string::append(&v9, (const std::string::value_type *)p_p, size);
  *a2 = *v7;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
}

void sub_1C898CC20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_1C898CCAC(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1C898CD64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  void *v14;
  id *v15;

  objc_destroyWeak(v15);

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C898CDC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C898CE44(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1C898CEDC(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1C898CF64(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1C898CFFC(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1C898D080(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1C898D104(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1C898D188(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::MergeChangedHardwareObject(_anonymous_namespace_ *this, uint64_t **a2, as::server::ChangedObject *a3)
{
  uint64_t v5;
  int v6;
  int64x2_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  int64x2_t v24;
  char *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  int64x2_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  as::server::ChangedObject **v37;
  as::server::ChangedObject **v38;
  uint64_t v39;
  as::server::ChangedObject **i;
  uint64_t v41;
  as::server::ChangedObject *v42;
  as::server::ChangedObject *v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  as::server::ChangedObject *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  caulk::xstring *v66;
  caulk::xstring **v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  caulk::xstring *v71;
  caulk::xstring **v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  int64x2_t v94;
  char *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  as::server::ChangedObject **v99;
  as::server::ChangedObject **v100;
  _QWORD *v101;
  as::server::ChangedObject **v102;
  as::server::ChangedObject **v103;
  uint64_t v104;
  as::server::ChangedObject *v105;
  as::server::ChangedObject *v106;
  as::server::ChangedObject **v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  as::server::ChangedObject **v113;
  char *v114;
  as::server::ChangedObject *v115;
  _QWORD *v116;
  _QWORD *v117;
  as::server::ChangedObject *v118;
  int64x2_t v119;
  char *v120;
  as::server::ChangedObject **v121;
  uint64_t v122;
  uint64_t v123;
  as::server::ChangedObject *v125;
  int64x2_t *v126;
  caulk::xstring *v127;
  caulk::xstring *v128;
  uint64_t v129;
  caulk::xstring **v130;
  int64x2_t v131;
  char *v132;
  char *v133;

  v5 = *(_QWORD *)(as::server::ChangedObject::objectDescription(this) + 96);
  if (v5 != *(_QWORD *)(as::server::ChangedObject::objectDescription((as::server::ChangedObject *)a2) + 96))
  v6 = *(_DWORD *)(as::server::ChangedObject::objectDescription(this) + 104);
  if (v6 != *(_DWORD *)(as::server::ChangedObject::objectDescription((as::server::ChangedObject *)a2) + 104))
  v7 = (int64x2_t *)((char *)this + 56);
  v8 = a2[7];
  v9 = a2[8];
  if (v8 != v9)
  {
    v10 = (_QWORD *)((char *)this + 72);
    v11 = (_QWORD *)*((_QWORD *)this + 8);
    do
    {
      if ((unint64_t)v11 >= *v10)
      {
        v13 = ((uint64_t)v11 - v7->i64[0]) >> 3;
        if ((unint64_t)(v13 + 1) >> 61)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        v14 = *v10 - v7->i64[0];
        v15 = v14 >> 2;
        if (v14 >> 2 <= (unint64_t)(v13 + 1))
          v15 = v13 + 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        v133 = (char *)this + 72;
        if (v16)
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<as::server::ObjectDescription>>>((uint64_t)this + 72, v16);
        else
          v17 = 0;
        v18 = &v17[8 * v13];
        v19 = &v17[8 * v16];
        v132 = v19;
        v20 = *v8;
        *v8 = 0;
        *(_QWORD *)v18 = v20;
        v11 = v18 + 8;
        v131.i64[1] = (uint64_t)(v18 + 8);
        v22 = (_QWORD *)*((_QWORD *)this + 7);
        v21 = (_QWORD *)*((_QWORD *)this + 8);
        if (v21 == v22)
        {
          v24 = vdupq_n_s64((unint64_t)v21);
        }
        else
        {
          do
          {
            v23 = *--v21;
            *v21 = 0;
            *((_QWORD *)v18 - 1) = v23;
            v18 -= 8;
          }
          while (v21 != v22);
          v24 = *v7;
          v11 = (_QWORD *)v131.i64[1];
          v19 = v132;
        }
        *((_QWORD *)this + 7) = v18;
        *((_QWORD *)this + 8) = v11;
        v131 = v24;
        v25 = (char *)*((_QWORD *)this + 9);
        *((_QWORD *)this + 9) = v19;
        v132 = v25;
        v130 = (caulk::xstring **)v24.i64[0];
        std::__split_buffer<std::unique_ptr<as::server::ObjectDescription>>::~__split_buffer((uint64_t)&v130);
      }
      else
      {
        v12 = *v8;
        *v8 = 0;
        *v11++ = v12;
      }
      *((_QWORD *)this + 8) = v11;
      ++v8;
    }
    while (v8 != v9);
    v26 = a2[7];
    v8 = a2[8];
    if (v8 != v26)
    {
      do
      {
        v28 = *--v8;
        v27 = v28;
        *v8 = 0;
        if (v28)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
      }
      while (v8 != v26);
      v8 = v26;
    }
  }
  a2[8] = v8;
  v125 = (as::server::ChangedObject *)a2;
  v126 = (int64x2_t *)((char *)this + 104);
  v29 = a2[10];
  v30 = a2[11];
  if (v29 == v30)
  {
    v61 = v125;
  }
  else
  {
    v31 = (int64x2_t *)((char *)this + 80);
    do
    {
      v32 = (uint64_t *)*((_QWORD *)this + 7);
      v33 = (uint64_t *)*((_QWORD *)this + 8);
      if (v32 == v33)
      {
        v33 = (uint64_t *)*((_QWORD *)this + 7);
      }
      else
      {
        while (*(_QWORD *)(*v29 + 96) != *(_QWORD *)(*v32 + 96))
        {
          if (++v32 == v33)
          {
            v32 = (uint64_t *)*((_QWORD *)this + 8);
            goto LABEL_42;
          }
        }
        if (v32 != v33)
        {
          v34 = v32 + 1;
          if (v32 + 1 != v33)
          {
            do
            {
              v35 = *v34;
              if (*(_QWORD *)(*v29 + 96) != *(_QWORD *)(*v34 + 96))
              {
                *v34 = 0;
                v36 = *v32;
                *v32 = v35;
                if (v36)
                  (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
                ++v32;
              }
              ++v34;
            }
            while (v34 != v33);
            v33 = (uint64_t *)*((_QWORD *)this + 8);
          }
        }
      }
LABEL_42:
      std::vector<std::unique_ptr<as::server::ObjectDescription>>::erase((uint64_t)this + 56, v32, v33);
      v37 = (as::server::ChangedObject **)*((_QWORD *)this + 13);
      v38 = (as::server::ChangedObject **)*((_QWORD *)this + 14);
      if (v37 != v38)
      {
        while (1)
        {
          v39 = *(_QWORD *)(*v29 + 96);
          if (v39 == *(_QWORD *)(as::server::ChangedObject::objectDescription(*v37) + 96))
            break;
          if (++v37 == v38)
          {
            v37 = v38;
            goto LABEL_54;
          }
        }
        if (v37 != v38)
        {
          for (i = v37 + 1; i != v38; ++i)
          {
            v41 = *(_QWORD *)(*v29 + 96);
            if (v41 != *(_QWORD *)(as::server::ChangedObject::objectDescription(*i) + 96))
            {
              v42 = *i;
              *i = 0;
              v43 = *v37;
              *v37 = v42;
              if (v43)
                (*(void (**)(as::server::ChangedObject *))(*(_QWORD *)v43 + 8))(v43);
              ++v37;
            }
          }
        }
      }
LABEL_54:
      std::vector<std::unique_ptr<as::server::ObjectDescription>>::erase((uint64_t)v126, (uint64_t *)v37, *((uint64_t **)this + 14));
      v45 = (_QWORD *)*((_QWORD *)this + 11);
      v44 = *((_QWORD *)this + 12);
      if ((unint64_t)v45 >= v44)
      {
        v48 = ((uint64_t)v45 - v31->i64[0]) >> 3;
        if ((unint64_t)(v48 + 1) >> 61)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        v49 = v44 - v31->i64[0];
        v50 = v49 >> 2;
        if (v49 >> 2 <= (unint64_t)(v48 + 1))
          v50 = v48 + 1;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
          v51 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v51 = v50;
        v133 = (char *)this + 96;
        if (v51)
          v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<as::server::ObjectDescription>>>((uint64_t)this + 96, v51);
        else
          v52 = 0;
        v53 = &v52[8 * v48];
        v54 = &v52[8 * v51];
        v132 = v54;
        v55 = *v29;
        *v29 = 0;
        *(_QWORD *)v53 = v55;
        v47 = v53 + 8;
        v131.i64[1] = (uint64_t)(v53 + 8);
        v57 = (_QWORD *)*((_QWORD *)this + 10);
        v56 = (_QWORD *)*((_QWORD *)this + 11);
        if (v56 == v57)
        {
          v59 = vdupq_n_s64((unint64_t)v56);
        }
        else
        {
          do
          {
            v58 = *--v56;
            *v56 = 0;
            *((_QWORD *)v53 - 1) = v58;
            v53 -= 8;
          }
          while (v56 != v57);
          v59 = *v31;
          v47 = (_QWORD *)v131.i64[1];
          v54 = v132;
        }
        *((_QWORD *)this + 10) = v53;
        *((_QWORD *)this + 11) = v47;
        v131 = v59;
        v60 = (char *)*((_QWORD *)this + 12);
        *((_QWORD *)this + 12) = v54;
        v132 = v60;
        v130 = (caulk::xstring **)v59.i64[0];
        std::__split_buffer<std::unique_ptr<as::server::ObjectDescription>>::~__split_buffer((uint64_t)&v130);
      }
      else
      {
        v46 = *v29;
        *v29 = 0;
        *v45 = v46;
        v47 = v45 + 1;
      }
      *((_QWORD *)this + 11) = v47;
      ++v29;
    }
    while (v29 != v30);
    v61 = v125;
    v62 = (uint64_t *)*((_QWORD *)v125 + 10);
    v29 = (uint64_t *)*((_QWORD *)v125 + 11);
    if (v29 != v62)
    {
      do
      {
        v64 = *--v29;
        v63 = v64;
        *v29 = 0;
        if (v64)
          (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
      }
      while (v29 != v62);
      v29 = v62;
    }
  }
  v65 = *((_QWORD *)this + 1);
  v66 = (caulk::xstring *)*((_QWORD *)this + 2);
  v67 = (caulk::xstring **)((char *)this + 8);
  v68 = 126 - 2 * __clz(((uint64_t)v66 - v65) >> 4);
  *((_QWORD *)v61 + 11) = v29;
  if (v66 == (caulk::xstring *)v65)
    v69 = 0;
  else
    v69 = v68;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *,false>(v65, v66, (uint64_t)&v130, v69, 1);
  v70 = *((_QWORD *)v61 + 1);
  v71 = (caulk::xstring *)*((_QWORD *)v61 + 2);
  v72 = (caulk::xstring **)((char *)v61 + 8);
  v73 = 126 - 2 * __clz(((uint64_t)v71 - v70) >> 4);
  if (v71 == (caulk::xstring *)v70)
    v74 = 0;
  else
    v74 = v73;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *,false>(v70, v71, (uint64_t)&v130, v74, 1);
  v127 = 0;
  v128 = 0;
  v129 = 0;
  std::__set_union[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<caulk::xstring *>,std::__wrap_iter<caulk::xstring *>,std::__wrap_iter<caulk::xstring *>,std::__wrap_iter<caulk::xstring *>,std::back_insert_iterator<std::vector<caulk::xstring>>>(*v67, *v72, *((const caulk::xstring **)this + 2), *((const caulk::xstring **)v61 + 2), (uint64_t *)&v127, (caulk::xstring **)&v130);
  std::vector<caulk::xstring>::__base_destruct_at_end[abi:ne180100]((uint64_t)v61 + 8, *v72);
  if (v67 != &v127)
    std::vector<caulk::xstring>::__assign_with_size[abi:ne180100]<caulk::xstring*,caulk::xstring*>((uint64_t)this + 8, v127, v128, (v128 - v127) >> 4);
  v130 = &v127;
  std::vector<caulk::xstring>::__destroy_vector::operator()[abi:ne180100]((void ***)&v130);
  v75 = (uint64_t *)*((_QWORD *)v61 + 4);
  v76 = (uint64_t *)*((_QWORD *)v61 + 5);
  if (v75 != v76)
  {
    v77 = (_QWORD *)((char *)this + 32);
    v78 = (_QWORD *)((char *)this + 48);
    v79 = (_QWORD *)*((_QWORD *)this + 5);
    do
    {
      v80 = (_QWORD *)*v77;
      if ((_QWORD *)*v77 == v79)
        goto LABEL_93;
      while ((as::server::CustomPropertyAddress::operator==() & 1) == 0)
      {
        if (++v80 == v79)
        {
          v80 = v79;
          goto LABEL_92;
        }
      }
      v79 = v80;
LABEL_92:
      v81 = (_QWORD *)*((_QWORD *)this + 5);
      if (v80 == v81)
      {
LABEL_93:
        if ((unint64_t)v79 >= *v78)
        {
          v83 = ((uint64_t)v79 - *v77) >> 3;
          if ((unint64_t)(v83 + 1) >> 61)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          v84 = *v78 - *v77;
          v85 = v84 >> 2;
          if (v84 >> 2 <= (unint64_t)(v83 + 1))
            v85 = v83 + 1;
          if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8)
            v86 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v86 = v85;
          v133 = (char *)this + 48;
          if (v86)
            v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<as::server::ObjectDescription>>>((uint64_t)this + 48, v86);
          else
            v87 = 0;
          v88 = &v87[8 * v83];
          v89 = &v87[8 * v86];
          v132 = v89;
          v90 = *v75;
          *v75 = 0;
          *(_QWORD *)v88 = v90;
          v81 = v88 + 8;
          v131.i64[1] = (uint64_t)(v88 + 8);
          v92 = (_QWORD *)*((_QWORD *)this + 4);
          v91 = (_QWORD *)*((_QWORD *)this + 5);
          if (v91 == v92)
          {
            v94 = vdupq_n_s64((unint64_t)v91);
          }
          else
          {
            do
            {
              v93 = *--v91;
              *v91 = 0;
              *((_QWORD *)v88 - 1) = v93;
              v88 -= 8;
            }
            while (v91 != v92);
            v94 = *(int64x2_t *)v77;
            v81 = (_QWORD *)v131.i64[1];
            v89 = v132;
          }
          *((_QWORD *)this + 4) = v88;
          *((_QWORD *)this + 5) = v81;
          v131 = v94;
          v95 = (char *)*((_QWORD *)this + 6);
          *((_QWORD *)this + 6) = v89;
          v132 = v95;
          v130 = (caulk::xstring **)v94.i64[0];
          std::__split_buffer<std::unique_ptr<as::server::ObjectDescription>>::~__split_buffer((uint64_t)&v130);
        }
        else
        {
          v82 = *v75;
          *v75 = 0;
          *v79 = v82;
          v81 = v79 + 1;
        }
        *((_QWORD *)this + 5) = v81;
      }
      ++v75;
      v79 = v81;
    }
    while (v75 != v76);
    v61 = v125;
    v96 = (uint64_t *)*((_QWORD *)v125 + 4);
    v75 = (uint64_t *)*((_QWORD *)v125 + 5);
    if (v75 != v96)
    {
      do
      {
        v98 = *--v75;
        v97 = v98;
        *v75 = 0;
        if (v98)
          (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
      }
      while (v75 != v96);
      v75 = v96;
    }
  }
  *((_QWORD *)v61 + 5) = v75;
  v99 = (as::server::ChangedObject **)*((_QWORD *)v61 + 13);
  v100 = (as::server::ChangedObject **)*((_QWORD *)v61 + 14);
  if (v99 == v100)
    goto LABEL_147;
  v101 = (_QWORD *)((char *)this + 120);
  do
  {
    v103 = (as::server::ChangedObject **)*((_QWORD *)this + 13);
    v102 = (as::server::ChangedObject **)*((_QWORD *)this + 14);
    if (v103 != v102)
    {
      while (1)
      {
        v104 = *(_QWORD *)(as::server::ChangedObject::objectDescription(*v99) + 96);
        if (v104 == *(_QWORD *)(as::server::ChangedObject::objectDescription(*v103) + 96))
          break;
        if (++v103 == v102)
        {
          v103 = v102;
          break;
        }
      }
      if (v103 != *((as::server::ChangedObject ***)this + 14))
      {
        goto LABEL_142;
      }
      v103 = (as::server::ChangedObject **)*((_QWORD *)this + 14);
    }
    if ((unint64_t)v103 >= *v101)
    {
      v108 = ((uint64_t)v103 - v126->i64[0]) >> 3;
      if ((unint64_t)(v108 + 1) >> 61)
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      v109 = *v101 - v126->i64[0];
      v110 = v109 >> 2;
      if (v109 >> 2 <= (unint64_t)(v108 + 1))
        v110 = v108 + 1;
      if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF8)
        v111 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v111 = v110;
      v133 = (char *)this + 120;
      if (v111)
        v112 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<as::server::ObjectDescription>>>((uint64_t)this + 120, v111);
      else
        v112 = 0;
      v113 = (as::server::ChangedObject **)&v112[8 * v108];
      v114 = &v112[8 * v111];
      v132 = v114;
      v115 = *v99;
      *v99 = 0;
      *v113 = v115;
      v107 = v113 + 1;
      v131.i64[1] = (uint64_t)(v113 + 1);
      v117 = (_QWORD *)*((_QWORD *)this + 13);
      v116 = (_QWORD *)*((_QWORD *)this + 14);
      if (v116 == v117)
      {
        v119 = vdupq_n_s64((unint64_t)v116);
      }
      else
      {
        do
        {
          v118 = (as::server::ChangedObject *)*--v116;
          *v116 = 0;
          *--v113 = v118;
        }
        while (v116 != v117);
        v119 = *v126;
        v107 = (as::server::ChangedObject **)v131.i64[1];
        v114 = v132;
      }
      *((_QWORD *)this + 13) = v113;
      *((_QWORD *)this + 14) = v107;
      v131 = v119;
      v120 = (char *)*((_QWORD *)this + 15);
      *((_QWORD *)this + 15) = v114;
      v132 = v120;
      v130 = (caulk::xstring **)v119.i64[0];
      std::__split_buffer<std::unique_ptr<as::server::ObjectDescription>>::~__split_buffer((uint64_t)&v130);
    }
    else
    {
      v106 = *v99;
      *v99 = 0;
      *v103 = v106;
      v107 = v103 + 1;
    }
    *((_QWORD *)this + 14) = v107;
LABEL_142:
    ++v99;
  }
  while (v99 != v100);
  v99 = (as::server::ChangedObject **)*((_QWORD *)v61 + 13);
  v121 = (as::server::ChangedObject **)*((_QWORD *)v61 + 14);
  while (v121 != v99)
  {
    v123 = (uint64_t)*--v121;
    v122 = v123;
    *v121 = 0;
    if (v123)
      (*(void (**)(uint64_t))(*(_QWORD *)v122 + 8))(v122);
  }
LABEL_147:
  *((_QWORD *)v61 + 14) = v99;
  as::server::ChangedObject::objectDescription(v61);
  as::server::ChangedObject::mutableObjectDescription(this);
  return as::server::ObjectDescription::operator=();
}

void sub_1C898DA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::vector<caulk::xstring>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<as::server::ObjectDescription>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

uint64_t std::__split_buffer<std::unique_ptr<as::server::ObjectDescription>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *std::vector<std::unique_ptr<as::server::ObjectDescription>>::erase(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 != a3)
  {
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::unique_ptr<as::server::ObjectDescription> *,std::unique_ptr<as::server::ObjectDescription> *,std::unique_ptr<as::server::ObjectDescription> *,0>(a3, *(uint64_t **)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_QWORD **)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v9 = *--v7;
        v8 = v9;
        *v7 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

uint64_t *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::unique_ptr<as::server::ObjectDescription> *,std::unique_ptr<as::server::ObjectDescription> *,std::unique_ptr<as::server::ObjectDescription> *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      v6 = *v4;
      *v4 = 0;
      v7 = *a3;
      *a3 = v6;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      ++v4;
      ++a3;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *,false>(uint64_t result, caulk::xstring *a2, uint64_t a3, uint64_t a4, char a5)
{
  caulk::xstring *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  caulk::xstring *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  _BOOL4 v18;
  const caulk::xstring *v19;
  caulk::xstring *v20;

  v7 = a2;
  v8 = result;
  v19 = a2;
  v20 = (caulk::xstring *)result;
  while (2)
  {
    v9 = 1 - a4;
LABEL_3:
    v10 = (uint64_t)v7 - v8;
    v11 = ((uint64_t)v7 - v8) >> 4;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = caulk::xstring::compare((caulk::xstring *)((char *)v7 - 16), (const caulk::xstring *)v8);
        if ((result & 0x80000000) != 0)
          return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<caulk::xstring *&,caulk::xstring *&>();
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>((caulk::xstring *)v8, (caulk::xstring *)(v8 + 16), (caulk::xstring *)((char *)v7 - 16));
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>((caulk::xstring *)v8, (caulk::xstring *)(v8 + 16), (caulk::xstring *)(v8 + 32), (caulk::xstring *)((char *)v7 - 16));
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>((caulk::xstring *)v8, (caulk::xstring *)(v8 + 16), (caulk::xstring *)(v8 + 32), (caulk::xstring *)(v8 + 48), (caulk::xstring *)((char *)v7 - 16));
      default:
        if (v10 <= 383)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>(v8, (uint64_t)v7);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>(v8, v7);
        }
        if (v9 == 1)
        {
          if ((caulk::xstring *)v8 != v7)
            return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *,caulk::xstring *>((caulk::xstring *)v8, v7, v7, a3);
          return result;
        }
        v12 = v11 >> 1;
        v13 = (caulk::xstring *)((char *)v7 - 16);
        if ((unint64_t)v10 < 0x801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>((caulk::xstring *)(v8 + 16 * (v11 >> 1)), (caulk::xstring *)v8, v13);
          if ((a5 & 1) != 0)
          {
LABEL_11:
            v7 = v19;
            goto LABEL_12;
          }
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>((caulk::xstring *)v8, (caulk::xstring *)(v8 + 16 * (v11 >> 1)), v13);
          v14 = 16 * v12 - 16;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>((caulk::xstring *)((char *)v20 + 16), (caulk::xstring *)((char *)v20 + v14), (const caulk::xstring *)((char *)v19 - 32));
          v15 = 16 * v12 + 16;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>((caulk::xstring *)((char *)v20 + 32), (caulk::xstring *)((char *)v20 + v15), (const caulk::xstring *)((char *)v19 - 48));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>((caulk::xstring *)((char *)v20 + v14), (caulk::xstring *)((char *)v20 + 16 * v12), (caulk::xstring *)((char *)v20 + v15));
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<caulk::xstring *&,caulk::xstring *>();
          if ((a5 & 1) != 0)
            goto LABEL_11;
        }
        v7 = v19;
        if ((caulk::xstring::compare((caulk::xstring *)((char *)v20 - 16), v20) & 0x80000000) == 0)
        {
          result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,caulk::xstring *,std::__less<void,void> &>(v20, v19);
          v8 = result;
          goto LABEL_20;
        }
LABEL_12:
        v16 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,caulk::xstring *,std::__less<void,void> &>(v20, v7);
        if ((v17 & 1) == 0)
          goto LABEL_19;
        v18 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>(v20, (caulk::xstring *)v16);
        v8 = (uint64_t)(v16 + 16);
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>((caulk::xstring *)(v16 + 16), v7);
        if (!(_DWORD)result)
        {
          if (v18)
          {
            v20 = (caulk::xstring *)(v16 + 16);
            goto LABEL_18;
          }
LABEL_19:
          result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *,false>(v20, v16, a3, -v9, a5 & 1);
          v8 = (uint64_t)(v16 + 16);
LABEL_20:
          a5 = 0;
          v20 = (caulk::xstring *)v8;
          a4 = -v9;
          continue;
        }
        if (!v18)
        {
          v19 = (const caulk::xstring *)v16;
          v8 = (uint64_t)v20;
          v7 = (caulk::xstring *)v16;
LABEL_18:
          ++v9;
          goto LABEL_3;
        }
        return result;
    }
  }
}

uint64_t std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<caulk::xstring *&,caulk::xstring *&>()
{
  _QWORD v1[2];

  v1[0] = 0;
  v1[1] = 0;
  caulk::xstring::move();
  caulk::xstring::move();
  caulk::xstring::move();
  return caulk::xstring::clear((caulk::xstring *)v1);
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  caulk::xstring *v4;
  uint64_t v5;
  uint64_t v6;
  const caulk::xstring *v7;
  uint64_t v8;
  int v9;
  _QWORD v10[2];

  if (result != a2)
  {
    v3 = result;
    v4 = (caulk::xstring *)(result + 16);
    if (result + 16 != a2)
    {
      v5 = 0;
      v6 = result;
      do
      {
        v7 = (const caulk::xstring *)v6;
        v6 = (uint64_t)v4;
        result = caulk::xstring::compare(v4, v7);
        if ((result & 0x80000000) != 0)
        {
          v10[0] = 0;
          v10[1] = 0;
          caulk::xstring::move();
          v8 = v5;
          do
          {
            caulk::xstring::move();
            if (!v8)
              break;
            v9 = caulk::xstring::compare((caulk::xstring *)v10, (const caulk::xstring *)(v3 + v8 - 16));
            v8 -= 16;
          }
          while (v9 < 0);
          caulk::xstring::move();
          result = caulk::xstring::clear((caulk::xstring *)v10);
        }
        v4 = (caulk::xstring *)(v6 + 16);
        v5 += 16;
      }
      while (v6 + 16 != a2);
    }
  }
  return result;
}

void sub_1C898DF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  caulk::xstring::clear((caulk::xstring *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>(uint64_t result, caulk::xstring *a2)
{
  const caulk::xstring *v3;
  caulk::xstring *v4;
  caulk::xstring *v5;
  _QWORD v6[2];

  if ((caulk::xstring *)result != a2)
  {
    v3 = (const caulk::xstring *)result;
    v4 = (caulk::xstring *)(result + 16);
    while (v4 != a2)
    {
      v5 = v4;
      result = caulk::xstring::compare(v4, v3);
      if ((result & 0x80000000) != 0)
      {
        v6[0] = 0;
        v6[1] = 0;
        caulk::xstring::move();
        do
        {
          caulk::xstring::move();
          v3 = (const caulk::xstring *)((char *)v3 - 16);
        }
        while ((caulk::xstring::compare((caulk::xstring *)v6, v3) & 0x80000000) != 0);
        caulk::xstring::move();
        result = caulk::xstring::clear((caulk::xstring *)v6);
      }
      v4 = (caulk::xstring *)((char *)v5 + 16);
      v3 = v5;
    }
  }
  return result;
}

void sub_1C898E068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  caulk::xstring::clear((caulk::xstring *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>(caulk::xstring *a1, caulk::xstring *this, caulk::xstring *a3)
{
  int v5;
  int v6;

  v5 = caulk::xstring::compare(this, a1);
  v6 = caulk::xstring::compare(a3, this);
  if (v5 < 0)
  {
    if (v6 < 0)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<caulk::xstring *&,caulk::xstring *&>();
    }
    else
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<caulk::xstring *&,caulk::xstring *&>();
      if ((caulk::xstring::compare(a3, this) & 0x80000000) != 0)
      {
LABEL_8:
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<caulk::xstring *&,caulk::xstring *&>();
        return 2;
      }
    }
  }
  else
  {
    if ((v6 & 0x80000000) == 0)
      return 0;
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<caulk::xstring *&,caulk::xstring *&>();
    if ((caulk::xstring::compare(this, a1) & 0x80000000) != 0)
      goto LABEL_8;
  }
  return 1;
}

uint64_t std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<caulk::xstring *&,caulk::xstring *>()
{
  _QWORD v1[2];

  v1[0] = 0;
  v1[1] = 0;
  caulk::xstring::move();
  caulk::xstring::move();
  caulk::xstring::move();
  return caulk::xstring::clear((caulk::xstring *)v1);
}

const caulk::xstring *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,caulk::xstring *,std::__less<void,void> &>(const caulk::xstring *a1, const caulk::xstring *a2)
{
  const caulk::xstring *v4;
  const caulk::xstring *v5;
  int v6;
  const caulk::xstring *v7;
  const caulk::xstring *v8;
  _QWORD v10[2];
  const caulk::xstring *v11;
  const caulk::xstring *v12;

  v11 = a2;
  v12 = a1;
  v10[0] = 0;
  v10[1] = 0;
  caulk::xstring::move();
  if ((caulk::xstring::compare((caulk::xstring *)v10, (const caulk::xstring *)((char *)a2 - 16)) & 0x80000000) != 0)
  {
    v5 = a1;
    do
    {
      v5 = (const caulk::xstring *)((char *)v5 + 16);
      v12 = v5;
    }
    while ((caulk::xstring::compare((caulk::xstring *)v10, v5) & 0x80000000) == 0);
  }
  else
  {
    v4 = (const caulk::xstring *)((char *)a1 + 16);
    do
    {
      v5 = v4;
      v12 = v4;
      if (v4 >= v11)
        break;
      v6 = caulk::xstring::compare((caulk::xstring *)v10, v4);
      v4 = (const caulk::xstring *)((char *)v5 + 16);
    }
    while ((v6 & 0x80000000) == 0);
  }
  v7 = v11;
  if (v5 < v11)
  {
    do
    {
      v7 = (const caulk::xstring *)((char *)v7 - 16);
      v11 = v7;
    }
    while ((caulk::xstring::compare((caulk::xstring *)v10, v7) & 0x80000000) != 0);
    v5 = v12;
  }
  if (v5 < v7)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<caulk::xstring *&,caulk::xstring *&>();
      do
        v12 = (const caulk::xstring *)((char *)v12 + 16);
      while ((caulk::xstring::compare((caulk::xstring *)v10, v12) & 0x80000000) == 0);
      do
        v11 = (const caulk::xstring *)((char *)v11 - 16);
      while ((caulk::xstring::compare((caulk::xstring *)v10, v11) & 0x80000000) != 0);
      v5 = v12;
    }
    while (v12 < v11);
  }
  if ((const caulk::xstring *)((char *)v5 - 16) != a1)
    caulk::xstring::move();
  caulk::xstring::move();
  v8 = v12;
  caulk::xstring::clear((caulk::xstring *)v10);
  return v8;
}

void sub_1C898E30C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  caulk::xstring::clear((caulk::xstring *)&a9);
  _Unwind_Resume(a1);
}

char *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,caulk::xstring *,std::__less<void,void> &>(caulk::xstring *a1, caulk::xstring *a2)
{
  uint64_t v3;
  caulk::xstring *v4;
  caulk::xstring *v5;
  int v6;
  caulk::xstring *v7;
  caulk::xstring *v8;
  char *v9;
  _QWORD v11[2];
  caulk::xstring *v12;
  caulk::xstring *v13;

  v12 = a2;
  v13 = a1;
  v11[0] = 0;
  v11[1] = 0;
  caulk::xstring::move();
  v3 = 0;
  do
  {
    v13 = (caulk::xstring *)((char *)a1 + v3 + 16);
    v3 += 16;
  }
  while ((caulk::xstring::compare(v13, (const caulk::xstring *)v11) & 0x80000000) != 0);
  v4 = v12;
  if (v3 == 16)
  {
    v7 = (caulk::xstring *)((char *)a1 + 16);
    do
    {
      if (v7 >= v4)
        break;
      v4 = (caulk::xstring *)((char *)v4 - 16);
      v12 = v4;
    }
    while ((caulk::xstring::compare(v4, (const caulk::xstring *)v11) & 0x80000000) == 0);
  }
  else
  {
    v5 = (caulk::xstring *)((char *)v12 - 16);
    do
    {
      v12 = v5;
      v6 = caulk::xstring::compare(v5, (const caulk::xstring *)v11);
      v5 = (caulk::xstring *)((char *)v5 - 16);
    }
    while ((v6 & 0x80000000) == 0);
    v7 = v13;
  }
  v8 = v7;
  if (v7 < v12)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<caulk::xstring *&,caulk::xstring *&>();
      do
        v13 = (caulk::xstring *)((char *)v13 + 16);
      while ((caulk::xstring::compare(v13, (const caulk::xstring *)v11) & 0x80000000) != 0);
      do
        v12 = (caulk::xstring *)((char *)v12 - 16);
      while ((caulk::xstring::compare(v12, (const caulk::xstring *)v11) & 0x80000000) == 0);
      v8 = v13;
    }
    while (v13 < v12);
  }
  v9 = (char *)v8 - 16;
  if ((caulk::xstring *)((char *)v8 - 16) != a1)
    caulk::xstring::move();
  caulk::xstring::move();
  caulk::xstring::clear((caulk::xstring *)v11);
  return v9;
}

void sub_1C898E490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  caulk::xstring::clear((caulk::xstring *)&a9);
  _Unwind_Resume(a1);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>(caulk::xstring *a1, caulk::xstring *a2)
{
  uint64_t v4;
  _BOOL8 result;
  const caulk::xstring *v6;
  caulk::xstring *v7;
  int v8;
  caulk::xstring *v9;
  const caulk::xstring *v10;
  _QWORD v11[2];
  caulk::xstring *v12;
  caulk::xstring *v13;

  v12 = a2;
  v13 = a1;
  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v12 = (caulk::xstring *)((char *)a2 - 16);
      if ((caulk::xstring::compare((caulk::xstring *)((char *)a2 - 16), a1) & 0x80000000) != 0)
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<caulk::xstring *&,caulk::xstring *&>();
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>(a1, (caulk::xstring *)((char *)a1 + 16), (caulk::xstring *)((char *)a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>(a1, (caulk::xstring *)((char *)a1 + 16), (caulk::xstring *)((char *)a1 + 32), (caulk::xstring *)((char *)a2 - 16));
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>(a1, (caulk::xstring *)((char *)a1 + 16), (caulk::xstring *)((char *)a1 + 32), (caulk::xstring *)((char *)a1 + 48), (caulk::xstring *)((char *)a2 - 16));
      return 1;
    default:
      v6 = (caulk::xstring *)((char *)a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>(a1, (caulk::xstring *)((char *)a1 + 16), (caulk::xstring *)((char *)a1 + 32));
      v7 = (caulk::xstring *)((char *)a1 + 48);
      if (v7 == a2)
        return 1;
      v8 = 0;
      break;
  }
  while ((caulk::xstring::compare(v7, v6) & 0x80000000) == 0)
  {
    v9 = v12;
LABEL_12:
    v6 = v7;
    v7 = (caulk::xstring *)((char *)v7 + 16);
    if (v7 == v9)
      return 1;
  }
  v11[0] = 0;
  v11[1] = 0;
  caulk::xstring::move();
  do
  {
    v10 = v6;
    caulk::xstring::move();
    if (v6 == v13)
      break;
    v6 = (const caulk::xstring *)((char *)v6 - 16);
  }
  while ((caulk::xstring::compare((caulk::xstring *)v11, (const caulk::xstring *)((char *)v10 - 16)) & 0x80000000) != 0);
  caulk::xstring::move();
  v9 = v12;
  caulk::xstring::clear((caulk::xstring *)v11);
  if (++v8 != 8)
    goto LABEL_12;
  return (caulk::xstring *)((char *)v7 + 16) == v9;
}

void sub_1C898E668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  caulk::xstring::clear((caulk::xstring *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>(caulk::xstring *a1, caulk::xstring *a2, caulk::xstring *a3, caulk::xstring *a4)
{
  uint64_t result;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>(a1, a2, a3);
  result = caulk::xstring::compare(a4, a3);
  if ((result & 0x80000000) != 0)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<caulk::xstring *&,caulk::xstring *&>();
    result = caulk::xstring::compare(a3, a2);
    if ((result & 0x80000000) != 0)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<caulk::xstring *&,caulk::xstring *&>();
      result = caulk::xstring::compare(a2, a1);
      if ((result & 0x80000000) != 0)
        return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<caulk::xstring *&,caulk::xstring *&>();
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>(caulk::xstring *a1, caulk::xstring *a2, caulk::xstring *a3, caulk::xstring *a4, caulk::xstring *a5)
{
  uint64_t result;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>(a1, a2, a3, a4);
  result = caulk::xstring::compare(a5, a4);
  if ((result & 0x80000000) != 0)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<caulk::xstring *&,caulk::xstring *&>();
    result = caulk::xstring::compare(a4, a3);
    if ((result & 0x80000000) != 0)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<caulk::xstring *&,caulk::xstring *&>();
      result = caulk::xstring::compare(a3, a2);
      if ((result & 0x80000000) != 0)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<caulk::xstring *&,caulk::xstring *&>();
        result = caulk::xstring::compare(a2, a1);
        if ((result & 0x80000000) != 0)
          return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<caulk::xstring *&,caulk::xstring *&>();
      }
    }
  }
  return result;
}

caulk::xstring *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *,caulk::xstring *>(caulk::xstring *a1, caulk::xstring *this, caulk::xstring *a3, uint64_t a4)
{
  caulk::xstring *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  caulk::xstring *v12;
  caulk::xstring *v13;
  unint64_t v14;
  caulk::xstring *v17;

  if (a1 != this)
  {
    v6 = this;
    v7 = (uint64_t)a1;
    v8 = this - a1;
    v9 = (this - a1) >> 4;
    if (this - a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (caulk::xstring *)((char *)a1 + 16 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>(v7, a4, v9, v12);
        v12 = (caulk::xstring *)((char *)v12 - 16);
        --v11;
      }
      while (v11);
    }
    v17 = v6;
    if (v6 == a3)
    {
      a3 = v6;
    }
    else
    {
      v13 = v6;
      do
      {
        if ((caulk::xstring::compare(v13, a1) & 0x80000000) != 0)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<caulk::xstring *&,caulk::xstring *&>();
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>((uint64_t)a1, a4, v9, a1);
        }
        v13 = (caulk::xstring *)((char *)v17 + 16);
        v17 = v13;
      }
      while (v13 != a3);
      v7 = (uint64_t)a1;
      v8 = v6 - a1;
    }
    if (v8 >= 17)
    {
      v14 = (unint64_t)v8 >> 4;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,caulk::xstring *>(v7, (uint64_t)v6, a4, v14);
        v6 = (caulk::xstring *)((char *)v6 - 16);
      }
      while (v14-- > 2);
      return v17;
    }
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>(uint64_t result, int a2, uint64_t a3, caulk::xstring *a4)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 4)
    {
      v9 = ((uint64_t)a4 - result) >> 3;
      v10 = v9 + 1;
      v11 = result + 16 * (v9 + 1);
      v12 = v9 + 2;
      if (v9 + 2 < a3
        && (int)caulk::xstring::compare((caulk::xstring *)(result + 16 * (v9 + 1)), (const caulk::xstring *)(v11 + 16)) < 0)
      {
        v11 += 16;
        v10 = v12;
      }
      result = caulk::xstring::compare((caulk::xstring *)v11, a4);
      if ((result & 0x80000000) == 0)
      {
        v15[0] = 0;
        v15[1] = 0;
        caulk::xstring::move();
        do
        {
          caulk::xstring::move();
          if (v7 < v10)
            break;
          v13 = (2 * v10) | 1;
          v14 = v6 + 16 * v13;
          v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            v10 = v13;
          }
          else if ((int)caulk::xstring::compare((caulk::xstring *)(v6 + 16 * v13), (const caulk::xstring *)(v14 + 16)) >= 0)
          {
            v10 = v13;
          }
          else
          {
            v14 += 16;
          }
        }
        while ((caulk::xstring::compare((caulk::xstring *)v14, (const caulk::xstring *)v15) & 0x80000000) == 0);
        caulk::xstring::move();
        return caulk::xstring::clear((caulk::xstring *)v15);
      }
    }
  }
  return result;
}

void sub_1C898EA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  caulk::xstring::clear((caulk::xstring *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,caulk::xstring *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  if (a4 >= 2)
  {
    v7 = result;
    v9[0] = 0;
    v9[1] = 0;
    caulk::xstring::move();
    v8 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>(v7, a3, a4);
    caulk::xstring::move();
    if (v8 != a2 - 16)
    {
      caulk::xstring::move();
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>(v7, v8 + 16, a3, (v8 + 16 - v7) >> 4);
    }
    return caulk::xstring::clear((caulk::xstring *)v9);
  }
  return result;
}

void sub_1C898EB3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  caulk::xstring::clear((caulk::xstring *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = a1 + 16 * v5 + 16;
    v9 = 2 * v5;
    v5 = (2 * v5) | 1;
    v10 = v9 + 2;
    if (v9 + 2 < a3 && (int)caulk::xstring::compare((caulk::xstring *)v8, (const caulk::xstring *)(v8 + 16)) < 0)
    {
      v8 += 16;
      v5 = v10;
    }
    caulk::xstring::move();
    a1 = v8;
  }
  while (v5 <= v7);
  return v8;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,caulk::xstring *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v7[2];

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = result;
    v6 = v4 >> 1;
    result = caulk::xstring::compare((caulk::xstring *)(result + 16 * (v4 >> 1)), (const caulk::xstring *)(a2 - 16));
    if ((result & 0x80000000) != 0)
    {
      v7[0] = 0;
      v7[1] = 0;
      caulk::xstring::move();
      do
      {
        caulk::xstring::move();
        if (!v6)
          break;
        v6 = (v6 - 1) >> 1;
      }
      while ((caulk::xstring::compare((caulk::xstring *)(v5 + 16 * v6), (const caulk::xstring *)v7) & 0x80000000) != 0);
      caulk::xstring::move();
      return caulk::xstring::clear((caulk::xstring *)v7);
    }
  }
  return result;
}

void sub_1C898ECBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  caulk::xstring::clear((caulk::xstring *)&a9);
  _Unwind_Resume(a1);
}

const caulk::xstring *std::__set_union[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<caulk::xstring *>,std::__wrap_iter<caulk::xstring *>,std::__wrap_iter<caulk::xstring *>,std::__wrap_iter<caulk::xstring *>,std::back_insert_iterator<std::vector<caulk::xstring>>>@<X0>(caulk::xstring *a1@<X0>, caulk::xstring *this@<X2>, const caulk::xstring *a3@<X1>, const caulk::xstring *a4@<X3>, uint64_t *a5@<X4>, caulk::xstring **a6@<X8>)
{
  caulk::xstring *v8;
  const caulk::xstring *result;
  caulk::xstring *v12;
  uint64_t *v13;

  v8 = a1;
  v13 = a5;
  if (a1 == a3)
  {
LABEL_8:
    result = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<caulk::xstring *>,std::__wrap_iter<caulk::xstring *>,std::back_insert_iterator<std::vector<caulk::xstring>>,0>(this, a4, a5);
    a4 = result;
  }
  else
  {
    while (this != a4)
    {
      if ((caulk::xstring::compare(this, v8) & 0x80000000) != 0)
      {
        std::back_insert_iterator<std::vector<caulk::xstring>>::operator=[abi:ne180100](&v13, this);
        this = (caulk::xstring *)((char *)this + 16);
      }
      else
      {
        this = (caulk::xstring *)((char *)this + 16 * ((int)caulk::xstring::compare(v8, this) >= 0));
        std::back_insert_iterator<std::vector<caulk::xstring>>::operator=[abi:ne180100](&v13, v8);
        v8 = (caulk::xstring *)((char *)v8 + 16);
      }
      if (v8 == a3)
      {
        a5 = v13;
        v8 = a3;
        goto LABEL_8;
      }
    }
    result = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<caulk::xstring *>,std::__wrap_iter<caulk::xstring *>,std::back_insert_iterator<std::vector<caulk::xstring>>,0>(v8, a3, v13);
    v8 = result;
  }
  *a6 = v8;
  a6[1] = a4;
  a6[2] = v12;
  return result;
}

uint64_t **std::back_insert_iterator<std::vector<caulk::xstring>>::operator=[abi:ne180100](uint64_t **a1, const caulk::xstring *a2)
{
  uint64_t *v3;
  caulk::xstring *v4;
  uint64_t v5;

  v3 = *a1;
  v4 = (caulk::xstring *)(*a1)[1];
  if ((unint64_t)v4 >= (*a1)[2])
  {
    v5 = std::vector<caulk::xstring>::__push_back_slow_path<caulk::xstring const&>(*a1, a2);
  }
  else
  {
    *(_QWORD *)v4 = 0;
    *((_QWORD *)v4 + 1) = 0;
    caulk::xstring::assign(v4, a2);
    v5 = (uint64_t)v4 + 16;
    v3[1] = (uint64_t)v4 + 16;
  }
  v3[1] = v5;
  return a1;
}

void sub_1C898EE1C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

const caulk::xstring *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<caulk::xstring *>,std::__wrap_iter<caulk::xstring *>,std::back_insert_iterator<std::vector<caulk::xstring>>,0>(const caulk::xstring *a1, const caulk::xstring *a2, uint64_t *a3)
{
  const caulk::xstring *v3;
  const caulk::xstring *v4;
  uint64_t *v6;

  v3 = a1;
  v6 = a3;
  if (a1 == a2)
    return a1;
  v4 = a2;
  do
  {
    std::back_insert_iterator<std::vector<caulk::xstring>>::operator=[abi:ne180100](&v6, v3);
    v3 = (const caulk::xstring *)((char *)v3 + 16);
  }
  while (v3 != v4);
  return v4;
}

uint64_t std::vector<caulk::xstring>::__push_back_slow_path<caulk::xstring const&>(uint64_t *a1, const caulk::xstring *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  caulk::xstring *v11;
  uint64_t v12;
  _QWORD v14[2];
  caulk::xstring *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v7, v9);
  else
    v10 = 0;
  v11 = (caulk::xstring *)&v10[16 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[16 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  caulk::xstring::assign(v11, a2);
  v15 = (caulk::xstring *)((char *)v15 + 16);
  std::vector<caulk::xstring>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<caulk::xstring>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1C898EF58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<caulk::xstring>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<caulk::xstring>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<caulk::xstring>,std::reverse_iterator<caulk::xstring*>,std::reverse_iterator<caulk::xstring*>,std::reverse_iterator<caulk::xstring*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<caulk::xstring>,std::reverse_iterator<caulk::xstring*>,std::reverse_iterator<caulk::xstring*>,std::reverse_iterator<caulk::xstring*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 16;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      caulk::xstring::move();
      v7 = *((_QWORD *)&v15 + 1) - 16;
      *((_QWORD *)&v15 + 1) -= 16;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<caulk::xstring>,std::reverse_iterator<caulk::xstring*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<caulk::xstring>,std::reverse_iterator<caulk::xstring*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<caulk::xstring>,std::reverse_iterator<caulk::xstring*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

caulk::xstring *std::_AllocatorDestroyRangeReverse<std::allocator<caulk::xstring>,std::reverse_iterator<caulk::xstring*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v15 = v3;
  v16 = v2;
  v17 = v3;
  v18 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v10 = v7;
  v11 = v6;
  v12 = v7;
  v13 = v6;
  return std::__allocator_destroy[abi:ne180100]<std::allocator<caulk::xstring>,std::reverse_iterator<std::reverse_iterator<caulk::xstring*>>,std::reverse_iterator<std::reverse_iterator<caulk::xstring*>>>(v4, (uint64_t)v14, (uint64_t)v9);
}

caulk::xstring *std::__allocator_destroy[abi:ne180100]<std::allocator<caulk::xstring>,std::reverse_iterator<std::reverse_iterator<caulk::xstring*>>,std::reverse_iterator<std::reverse_iterator<caulk::xstring*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  caulk::xstring *result;

  for (result = *(caulk::xstring **)(a2 + 32); result != *(caulk::xstring **)(a3 + 32); *(_QWORD *)(a2 + 32) = result)
  {
    caulk::xstring::clear(result);
    result = (caulk::xstring *)(*(_QWORD *)(a2 + 32) + 16);
  }
  return result;
}

uint64_t std::__split_buffer<caulk::xstring>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<caulk::xstring>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__split_buffer<caulk::xstring>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = result;
  while (1)
  {
    v4 = *(_QWORD *)(v3 + 16);
    if (v4 == a2)
      break;
    *(_QWORD *)(v3 + 16) = v4 - 16;
    result = caulk::xstring::clear((caulk::xstring *)(v4 - 16));
  }
  return result;
}

uint64_t std::vector<caulk::xstring>::__base_destruct_at_end[abi:ne180100](uint64_t result, caulk::xstring *a2)
{
  uint64_t v3;
  caulk::xstring *i;

  v3 = result;
  for (i = *(caulk::xstring **)(result + 8); i != a2; result = caulk::xstring::clear(i))
    i = (caulk::xstring *)((char *)i - 16);
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

caulk::xstring *std::vector<caulk::xstring>::__assign_with_size[abi:ne180100]<caulk::xstring*,caulk::xstring*>(uint64_t a1, caulk::xstring *a2, caulk::xstring *a3, unint64_t a4)
{
  caulk::xstring *v6;
  uint64_t v8;
  caulk::xstring *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  caulk::xstring *result;
  caulk::xstring *v14;
  unint64_t v15;
  caulk::xstring *v16;
  uint64_t v17;
  caulk::xstring *v18;

  v6 = a2;
  v8 = a1 + 16;
  v9 = *(caulk::xstring **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    std::vector<caulk::xstring>::__vdeallocate(a1);
    if (a4 >> 60)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v11 = v10 >> 3;
    if (v10 >> 3 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vallocate[abi:ne180100]((_QWORD *)a1, v12);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<caulk::xstring>,caulk::xstring*,caulk::xstring*,caulk::xstring*>(v8, v6, a3, *(caulk::xstring **)(a1 + 8));
LABEL_15:
    *(_QWORD *)(a1 + 8) = result;
    return result;
  }
  v14 = *(caulk::xstring **)(a1 + 8);
  v15 = (v14 - v9) >> 4;
  if (v15 < a4)
  {
    v16 = (caulk::xstring *)((char *)a2 + 16 * v15);
    if (v14 != v9)
    {
      v17 = 16 * v15;
      do
      {
        caulk::xstring::assign(v9, v6);
        v6 = (caulk::xstring *)((char *)v6 + 16);
        v9 = (caulk::xstring *)((char *)v9 + 16);
        v17 -= 16;
      }
      while (v17);
      v9 = *(caulk::xstring **)(a1 + 8);
    }
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<caulk::xstring>,caulk::xstring*,caulk::xstring*,caulk::xstring*>(v8, v16, a3, v9);
    goto LABEL_15;
  }
  if (a2 == a3)
  {
    v18 = *(caulk::xstring **)a1;
  }
  else
  {
    v18 = *(caulk::xstring **)a1;
    do
    {
      caulk::xstring::assign(v9, v6);
      v6 = (caulk::xstring *)((char *)v6 + 16);
      v9 = (caulk::xstring *)((char *)v9 + 16);
      v18 = (caulk::xstring *)((char *)v18 + 16);
    }
    while (v6 != a3);
  }
  return (caulk::xstring *)std::vector<caulk::xstring>::__base_destruct_at_end[abi:ne180100](a1, v18);
}

void sub_1C898F3B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<caulk::xstring>::__vdeallocate(uint64_t a1)
{
  if (*(_QWORD *)a1)
  {
    std::vector<caulk::xstring>::__base_destruct_at_end[abi:ne180100](a1, *(caulk::xstring **)a1);
    operator delete(*(void **)a1);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
}

caulk::xstring *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<caulk::xstring>,caulk::xstring*,caulk::xstring*,caulk::xstring*>(uint64_t a1, caulk::xstring *a2, caulk::xstring *a3, caulk::xstring *this)
{
  caulk::xstring *v4;
  const caulk::xstring *v6;
  _QWORD v8[3];
  char v9;
  caulk::xstring *v10;
  caulk::xstring *v11;

  v4 = this;
  v10 = this;
  v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *((_QWORD *)v4 + 1) = 0;
      caulk::xstring::assign(v4, v6);
      v6 = (const caulk::xstring *)((char *)v6 + 16);
      v4 = (caulk::xstring *)((char *)v11 + 16);
      v11 = (caulk::xstring *)((char *)v11 + 16);
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<caulk::xstring>,caulk::xstring*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1C898F484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<caulk::xstring>,caulk::xstring*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<caulk::xstring>,caulk::xstring*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<caulk::xstring>,caulk::xstring*>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<caulk::xstring>,caulk::xstring*>::operator()[abi:ne180100](uint64_t result)
{
  caulk::xstring *v1;
  caulk::xstring *v2;

  v1 = **(caulk::xstring ***)(result + 16);
  v2 = **(caulk::xstring ***)(result + 8);
  while (v1 != v2)
  {
    v1 = (caulk::xstring *)((char *)v1 - 16);
    result = caulk::xstring::clear(v1);
  }
  return result;
}

void std::vector<caulk::xstring>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<caulk::xstring>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (caulk::xstring *)*v2);
    operator delete(**a1);
  }
}

void as::server::ConfigChangeSummary::~ConfigChangeSummary(as::server::ConfigChangeSummary *this)
{
  uint64_t v2;
  void **v3;

  *(_QWORD *)this = MEMORY[0x1E0CFF2D0] + 16;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<as::server::SessionUpdateSummary>>::__destroy_vector::operator()[abi:ne180100](&v3);
  PB::Base::~Base(this);
}

void std::vector<std::unique_ptr<as::server::SessionUpdateSummary>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<as::RouteIdentifier>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  result = a2[1];
  while (v4 != v5)
  {
    v4 -= 32;
    result = as::RouteIdentifier::RouteIdentifier();
  }
  a2[1] = result;
  v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<as::RouteIdentifier>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

uint64_t std::__split_buffer<as::RouteIdentifier>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 32);
    *(_QWORD *)(a1 + 16) = i - 32;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__split_buffer<std::pair<unsigned int,NSDictionary * {__strong}>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

void as::server::ControlValue::~ControlValue(as::server::ControlValue *this)
{
  void *v2;

  *(_QWORD *)this = MEMORY[0x1E0CFF2C8] + 16;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,as::server::ControlValue *,as::server::ControlValue *,as::server::ControlValue *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      as::server::ControlValue::operator=();
      v4 += 80;
      a3 += 80;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t std::vector<as::server::ControlValue>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  result = a2[1];
  while (v4 != v5)
  {
    v4 -= 80;
    result = as::server::ControlValue::ControlValue();
  }
  a2[1] = result;
  v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<as::server::ControlValue>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(80 * a2);
}

uint64_t std::__split_buffer<as::server::ControlValue>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 80);
    *(_QWORD *)(a1 + 16) = i - 80;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<as::server::ControlValue>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 80;
      v7 = v4 - 80;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 80;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::pair<unsigned int,NSDictionary * {__strong}>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  id *v2;
  id *v4;
  void *v5;
  id *v6;

  v1 = *a1;
  v2 = (id *)**a1;
  if (v2)
  {
    v4 = (id *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 2;

        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<as::RouteIdentifier>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 32;
      v7 = v4 - 32;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 32;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t CACFDictionary::AddSInt32(CFMutableDictionaryRef *this, const __CFString *a2, int a3)
{
  CFNumberRef v5;
  uint64_t v6;
  CFNumberRef v8;
  char v9;
  int valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v8 = v5;
  v9 = 1;
  if (*((_BYTE *)this + 9))
  {
    v6 = 0;
    if (v5 && *this)
    {
      CFDictionarySetValue(*this, a2, v5);
      v6 = 1;
    }
  }
  else
  {
    v6 = 0;
  }
  CACFNumber::~CACFNumber((CACFNumber *)&v8);
  return v6;
}

void sub_1C898FB84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CACFNumber::~CACFNumber((CACFNumber *)va);
  _Unwind_Resume(a1);
}

void CACFNumber::~CACFNumber(CACFNumber *this)
{
  const void *v2;

  if (*((_BYTE *)this + 8))
  {
    v2 = *(const void **)this;
    if (*(_QWORD *)this)
      CFRelease(v2);
  }
}

as::server::DeviceTimeObserver::SharedBlockOwner *as::server::DeviceTimeObserver::SharedBlockOwner::SharedBlockOwner(as::server::DeviceTimeObserver::SharedBlockOwner *this, as::server::DeviceTimeObserver *a2, uint64_t a3)
{
  caulk::ipc::mapped_memory *v4;
  _DWORD *raw_ptr;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  v4 = (caulk::ipc::mapped_memory *)MEMORY[0x1CAA38A64]((char *)this + 16, 0x10000, 90);
  *((_QWORD *)this + 15) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  raw_ptr = (_DWORD *)caulk::ipc::mapped_memory::get_raw_ptr(v4, 0);
  *raw_ptr = -1;
  v6 = (uint64_t)(raw_ptr + 2);
  v7 = 543;
  do
  {
    v6 = caulk::concurrent::atomic_value<as::SessionSharedState,2,3>::atomic_value(v6) + 104;
    --v7;
  }
  while (v7);
  v8 = raw_ptr + 14120;
  v9 = 66;
  do
  {
    *(_BYTE *)v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    v8[18] = 0;
    v8 += 34;
    --v9;
  }
  while (v9);
  return this;
}

void as::server::DeviceTimeObserver::SharedBlockOwner::~SharedBlockOwner(as::server::DeviceTimeObserver::SharedBlockOwner *this)
{
  caulk::ipc::mapped_memory *v1;

  v1 = (as::server::DeviceTimeObserver::SharedBlockOwner *)((char *)this + 16);
  if (*((_QWORD *)this + 2) && *((_QWORD *)this + 3))
    caulk::ipc::mapped_memory::get_ptr<as::DTSharedBlock>((as::server::DeviceTimeObserver::SharedBlockOwner *)((char *)this + 16), 0);
  caulk::ipc::mapped_memory::reset(v1);
}

uint64_t as::server::DeviceTimeObserver::SharedBlockOwner::deallocateDeviceSlot(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t v5;
  uint64_t result;
  __int128 v7[3];
  uint64_t v8;

  v5 = caulk::ipc::mapped_memory::get_ptr<as::DTSharedBlock>((caulk::ipc::mapped_memory *)(a1 + 16), 0);
  if (a3 >= 0x42uLL)
    std::__throw_out_of_range[abi:ne180100]("array::at");
  v8 = 0;
  memset(v7, 0, sizeof(v7));
  result = caulk::concurrent::atomic_value<as::MinimalTimeStamp,2,3>::store(v5 + 136 * a3 + 56480, v7);
  *(_QWORD *)(a1 + (((unint64_t)a3 >> 3) & 0x1FFFFFF8) + 40) &= ~(1 << a3);
  return result;
}

uint64_t __destroy_helper_block_ea8_40c67_ZTSNSt3__110shared_ptrIN2as6server18DeviceTimeObserver8TimeInfoEEE(uint64_t a1)
{
  return std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100](a1 + 40);
}

void std::vector<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 5);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 96 * a2;
    while (v3 != v7)
    {
      v3 -= 96;
      std::__destroy_at[abi:ne180100]<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>,0>(v3);
    }
    a1[1] = v7;
  }
}

uint64_t std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>::operator=[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::Data::operator=((_QWORD *)(a1 + 24), (_QWORD *)(a2 + 24));
  boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::Data::operator=((_QWORD *)(a1 + 48), (_QWORD *)(a2 + 48));
  std::shared_ptr<as::WorkloopPool>::operator=[abi:ne180100](a1 + 72, (__int128 *)(a2 + 72));
  v5 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  std::unique_ptr<as::server::DeviceLatencyPoll>::reset[abi:ne180100]((uint64_t *)(a1 + 88), v5);
  return a1;
}

uint64_t std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>::~pair(uint64_t a1)
{
  const void *v2;

  std::unique_ptr<as::server::DeviceLatencyPoll>::reset[abi:ne180100]((uint64_t *)(a1 + 88), 0);
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100](a1 + 72);
  if (*(_QWORD *)(a1 + 64))
    operator delete(*(void **)(a1 + 48));
  if (*(_QWORD *)(a1 + 40))
    operator delete(*(void **)(a1 + 24));
  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
  return a1;
}

void as::server::DeviceTimeObserver::DeviceInfo::~DeviceInfo(as::server::DeviceTimeObserver::DeviceInfo *this)
{
  std::unique_ptr<as::server::DeviceLatencyPoll>::reset[abi:ne180100]((uint64_t *)this + 8, 0);
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  if (*((_QWORD *)this + 5))
    operator delete(*((void **)this + 3));
  if (*((_QWORD *)this + 2))
    operator delete(*(void **)this);
}

BOOL as::server::DeviceTimeObserver::removeDevice(gsl::details *a1, CFTypeRef *a2, unint64_t a3)
{
  const __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  gsl::details *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  _BYTE v21[8];
  CFTypeRef cf;
  void *v23;
  uint64_t v24;
  void *__p;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  const __CFString *v29;

  v5 = (const __CFString *)*a2;
  if (*a2)
    CFRetain(*a2);
  v29 = v5;
  v6 = *((_QWORD *)a1 + 6);
  v7 = *((_QWORD *)a1 + 7);
  if (v6 != v7)
  {
    while (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((CFTypeRef *)(v6 + 8), &v29))
    {
      v6 += 96;
      if (v6 == v7)
      {
        v6 = v7;
        break;
      }
    }
    v5 = v29;
  }
  if (v5)
    CFRelease(v5);
  v8 = *((_QWORD *)a1 + 7);
  if (v6 != v8)
  {
    as::server::DeviceTimeObserver::unmapDevice(a1, v6, a3);
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *((_QWORD *)a1 + 6)) >> 5);
    if (HIDWORD(v10))
      goto LABEL_29;
    v11 = v10 / 0x42uLL;
    if (v11 >= (uint64_t)(*((_QWORD *)a1 + 1) - *(_QWORD *)a1) >> 7)
      as::server::DeviceTimeObserver::removeDevice();
    v12 = v10 % 0x42;
    v9 = (gsl::details *)(*(_QWORD *)a1 + (v11 << 7));
    v13 = v12 + 66 * *((_QWORD *)v9 + 1);
    if (v13 >= 0x100)
LABEL_29:
      gsl::details::terminate(v9);
    as::server::DeviceTimeObserver::SharedBlockOwner::deallocateDeviceSlot((uint64_t)v9, *(_QWORD *)a1 + (v11 << 7), v12);
    std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>::pair[abi:ne180100]<true,0>((uint64_t)v21);
    v14 = *((_QWORD *)a1 + 6);
    if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)a1 + 7) - v14) >> 5) <= v13)
      std::vector<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>>::__throw_out_of_range[abi:ne180100]();
    std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>::operator=[abi:ne180100](v14 + 96 * v13, (uint64_t)v21);
    v15 = v28;
    v28 = 0;
    if (v15)
    {
      v16 = std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100](v15);
      MEMORY[0x1CAA38D28](v16, 0x20C40A4A59CD2);
    }
    v17 = v27;
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v26)
      operator delete(__p);
    if (v24)
      operator delete(v23);
    if (cf)
      CFRelease(cf);
  }
  return v6 != v8;
}

void sub_1C8990104(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void as::server::DeviceTimeObserver::unmapDevice(gsl::details *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  const void **v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  void *__dst;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a2 - *((_QWORD *)a1 + 6)) >> 5);
  if (v3 >= 0x100)
    gsl::details::terminate(a1);
  v7 = (const void **)(a2 + 24);
  boost::container::vector_alloc_holder<boost::container::new_allocator<unsigned int>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::vector_alloc_holder<boost::container::new_allocator<unsigned int> const&,unsigned long>(&__dst, (const char *)(a2 + 24), *(_QWORD *)(a2 + 32));
  v8 = *(_QWORD *)(a2 + 32);
  if (v8)
    memmove(__dst, *v7, 4 * v8);
  v9 = *(const void **)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  if (!v9 && v10)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v16 = (uint64_t)v9 + 4 * v10;
  v17 = v9;
  boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::insert_unique<boost::container::vec_iterator<unsigned int *,false>>((uint64_t *)&__dst, &v17, &v16);
  v11 = (unsigned int *)__dst;
  if (!__dst && v14)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  if (v14)
  {
    v12 = 4 * v14;
    do
    {
      if (!v11)
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      as::server::DeviceTimeObserver::unmapSessionToDevice(a1, *v11++, v3, a3);
      v12 -= 4;
    }
    while (v12);
  }
  if (v15)
    operator delete(__dst);
}

void sub_1C8990288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (a12)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::set<unsigned int>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>(uint64_t *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int *v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>(v5, v6, v4 + 7, v4 + 7);
      v7 = (unsigned int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(unsigned int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (unsigned int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

void as::server::DeviceTimeObserver::sessionHasIOEventListeners(as::server::DeviceTimeObserver *this, unsigned int a2, int a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v11 = a2;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::find((uint64_t *)this + 3, &v11, &v12);
  v7 = *((_QWORD *)this + 3);
  v8 = *((_QWORD *)this + 4);
  if (v7)
    v9 = 1;
  else
    v9 = v8 == 0;
  if (!v9)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  if (v12 != v7 + 32 * v8)
  {
    v10 = 24;
    if (a3)
      v10 = 25;
    *(_BYTE *)(v12 + v10) = a4;
  }
}

void as::server::DeviceTimeObserver::unmapSessionToDevice(as::server::DeviceTimeObserver *this, unsigned int a2, int a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int *v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14[2];
  unsigned __int8 v15;
  unint64_t v16;
  unsigned int v17;
  char v18;
  unsigned int v19;

  v19 = a2;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::find((uint64_t *)this + 3, &v19, v14);
  v7 = *((_QWORD *)this + 3);
  v8 = *((_QWORD *)this + 4);
  if (v7)
    v9 = 1;
  else
    v9 = v8 == 0;
  if (!v9)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  if (v14[0] == v7 + 32 * v8)
    as::server::DeviceTimeObserver::unmapSessionToDevice();
  if (!*(_BYTE *)(v14[0] + 26))
  {
    v10 = *(int **)(v14[0] + 8);
    if (!*((_BYTE *)v10 + 4))
      as::server::DeviceTimeObserver::unmapSessionToDevice();
    v11 = *v10;
    v12 = v11 / 0x21FuLL;
    if (v12 >= (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 7)
      as::server::DeviceTimeObserver::removeDevice();
    v16 = *(_QWORD *)this + (v12 << 7);
    v17 = v11 % 0x21F;
    v18 = 1;
    v13 = as::server::DeviceTimeObserver::SessionSlot::sessionState((as::server::DeviceTimeObserver::SessionSlot *)&v16);
    caulk::concurrent::atomic_value<as::SessionSharedState,2,3>::load(v13, (uint64_t)v14);
    if (LOBYTE(v14[0]) == a3)
      as::server::DeviceTimeObserver::SessionSlot::setDeviceIndex((as::server::DeviceTimeObserver::SessionSlot *)&v16, 1, 0, 0xFFu, a4);
    if (v15 == a3)
      as::server::DeviceTimeObserver::SessionSlot::setDeviceIndex((as::server::DeviceTimeObserver::SessionSlot *)&v16, 0, 0, 0xFFu, a4);
  }
}

void as::server::DeviceTimeObserver::sessionDeviceIOPeriod(as::server::DeviceTimeObserver *this@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unint64_t v7;
  unsigned __int8 *v8;
  unint64_t v9;
  uint64_t v10;
  AudioObjectID v11;
  OSStatus PropertyData;
  char v13;
  __int128 v14;
  unsigned int v15;
  AudioObjectPropertyAddress inAddress;
  __int128 outData;
  __int128 v18;
  _BYTE v19[16];
  uint64_t v20;
  _BYTE v21[28];
  UInt32 ioDataSize;

  as::server::DeviceTimeObserver::findSessionSlot(this, a2, (uint64_t)v21);
  if (!v21[16])
    goto LABEL_9;
  v7 = as::server::DeviceTimeObserver::SessionSlot::sessionState((as::server::DeviceTimeObserver::SessionSlot *)v21);
  caulk::concurrent::atomic_value<as::SessionSharedState,2,3>::load(v7, (uint64_t)v19);
  v8 = (unsigned __int8 *)&v20;
  if (a3)
    v8 = v19;
  v9 = *v8;
  v10 = *((_QWORD *)this + 6);
  if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 7) - v10) >> 5) > v9)
  {
    v11 = *(_DWORD *)(v10 + 96 * v9);
    outData = 0u;
    v18 = 0u;
    *(_QWORD *)&inAddress.mSelector = 0x676C6F626E737274;
    inAddress.mElement = 0;
    ioDataSize = 8;
    PropertyData = AudioObjectGetPropertyData(v11, &inAddress, 0, 0, &ioDataSize, &outData);
    if (PropertyData
      || (v15 = 0,
          *(_QWORD *)&inAddress.mSelector = 0x676C6F626673697ALL,
          inAddress.mElement = 0,
          ioDataSize = 4,
          PropertyData = AudioObjectGetPropertyData(v11, &inAddress, 0, 0, &ioDataSize, &v15),
          *(_QWORD *)&v18 = v15,
          PropertyData))
    {
      v13 = 0;
      *(_DWORD *)a4 = PropertyData;
    }
    else
    {
      if (*(double *)&outData > 0.0)
        *((double *)&outData + 1) = (double)v15 / *(double *)&outData;
      v14 = v18;
      *(_OWORD *)a4 = outData;
      *(_OWORD *)(a4 + 16) = v14;
      v13 = 1;
    }
    *(_BYTE *)(a4 + 32) = v13;
  }
  else
  {
LABEL_9:
    *(_DWORD *)a4 = -1;
    *(_BYTE *)(a4 + 32) = 0;
  }
}

uint64_t std::unique_ptr<as::server::DeviceLatencyPoll>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100](result);
    JUMPOUT(0x1CAA38D28);
  }
  return result;
}

unint64_t as::server::DeviceTimeObserver::nanosecondLatency(as::server::DeviceTimeObserver *this, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unsigned __int128 *v14;
  unsigned __int128 v15;

  v3 = *((_QWORD *)this + 6);
  v4 = *((_QWORD *)this + 7);
  if (v3 != v4)
  {
    while (*(_DWORD *)v3 != a2)
    {
      v3 += 96;
      if (v3 == v4)
        return 0;
    }
  }
  if (v3 == v4)
    return 0;
  v5 = *(_QWORD *)(v3 + 72);
  v6 = *(std::__shared_weak_count **)(v3 + 80);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (!v5)
    goto LABEL_15;
  if (a3)
  {
    v9 = (unint64_t *)(v5 + 8);
LABEL_12:
    v10 = atomic_load(v9);
    goto LABEL_16;
  }
  if (*(_BYTE *)(v3 + 16))
  {
LABEL_15:
    v10 = 0;
    goto LABEL_16;
  }
  v14 = (unsigned __int128 *)(v5 + 32);
  do
  {
    v15 = __ldaxp(v14);
    v10 = v15;
  }
  while (__stlxp(v15, v14));
  if (!BYTE8(v15))
  {
    v9 = (unint64_t *)(v5 + 16);
    goto LABEL_12;
  }
LABEL_16:
  if (v6)
  {
    v11 = (unint64_t *)&v6->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v10;
}

uint64_t caulk::concurrent::atomic_value<as::SessionSharedState,2,3>::atomic_value(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = 0;
  *(_BYTE *)result = 0;
  *(_DWORD *)(result + 4) = 0;
  do
  {
    v2 = result + v1;
    *(_DWORD *)(v2 + 8) = 0;
    *(_BYTE *)(v2 + 16) = -1;
    *(_QWORD *)(v2 + 24) = 0;
    *(_BYTE *)(v2 + 32) = -1;
    *(_QWORD *)(v2 + 40) = 0;
    v1 += 48;
    *(_BYTE *)(v2 + 48) = 0;
  }
  while (v1 != 96);
  return result;
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
}

void sub_1C8990814(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

void std::vector<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE5048] + 16;
}

uint64_t *std::vector<as::server::DeviceTimeObserver::SharedBlockOwner>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_OWORD *)(v6 - 128) = *(_OWORD *)(v2 + v5 - 128);
      *(_BYTE *)(v6 - 96) = 0;
      *(_QWORD *)(v6 - 112) = 0;
      *(_QWORD *)(v6 - 104) = 0;
      v8 = *(_QWORD *)(v2 + v5 - 104);
      *(_QWORD *)(v6 - 112) = *(_QWORD *)(v2 + v5 - 112);
      *(_QWORD *)(v6 - 104) = v8;
      *(_QWORD *)(v7 - 112) = 0;
      *(_QWORD *)(v7 - 104) = 0;
      *(_BYTE *)(v6 - 96) = *(_BYTE *)(v2 + v5 - 96);
      *(_BYTE *)(v7 - 96) = 0;
      v9 = *(_QWORD *)(v2 + v5 - 8);
      v10 = *(_OWORD *)(v2 + v5 - 24);
      v11 = *(_OWORD *)(v2 + v5 - 40);
      *(_OWORD *)(v6 - 56) = *(_OWORD *)(v2 + v5 - 56);
      *(_OWORD *)(v6 - 40) = v11;
      *(_OWORD *)(v6 - 24) = v10;
      *(_QWORD *)(v6 - 8) = v9;
      v12 = *(_OWORD *)(v2 + v5 - 72);
      *(_OWORD *)(v6 - 88) = *(_OWORD *)(v2 + v5 - 88);
      *(_OWORD *)(v6 - 72) = v12;
      v5 -= 128;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v13 = *result;
  *result = v4;
  a2[1] = v13;
  v14 = result[1];
  result[1] = a2[2];
  a2[2] = v14;
  v15 = result[2];
  result[2] = a2[3];
  a2[3] = v15;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<as::server::DeviceTimeObserver::SharedBlockOwner>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 57)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(a2 << 7);
}

uint64_t std::__split_buffer<as::server::DeviceTimeObserver::SharedBlockOwner>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 128;
    as::server::DeviceTimeObserver::SharedBlockOwner::~SharedBlockOwner((as::server::DeviceTimeObserver::SharedBlockOwner *)(i - 128));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 5) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 96 * a2;
      v14 = 96 * a2;
      do
      {
        result = std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>::pair[abi:ne180100]<true,0>(v7);
        v7 += 96;
        v14 -= 96;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 5);
    v9 = v8 + a2;
    if (v8 + a2 > 0x2AAAAAAAAAAAAAALL)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 5);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x155555555555555)
      v11 = 0x2AAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v22 = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>>>(result, v11);
    else
      v12 = 0;
    v15 = (uint64_t)&v12[96 * v8];
    v19[0] = v12;
    v19[1] = v15;
    v20 = v15;
    v21 = &v12[96 * v11];
    v16 = 3 * a2;
    v17 = v15 + 96 * a2;
    v18 = 32 * v16;
    do
    {
      std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>::pair[abi:ne180100]<true,0>(v15);
      v15 += 96;
      v18 -= 96;
    }
    while (v18);
    v20 = v17;
    std::vector<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>>::__swap_out_circular_buffer(a1, v19);
    return std::__split_buffer<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>>::~__split_buffer((uint64_t)v19);
  }
  return result;
}

void sub_1C8990B1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v4 -= 96;
    std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>::pair[abi:ne180100](v6 - 96, v4);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(96 * a2);
}

__n128 std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  __n128 result;
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  result = *(__n128 *)(a2 + 72);
  *(__n128 *)(a1 + 72) = result;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  v3 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a1 + 88) = v3;
  return result;
}

void std::__destroy_at[abi:ne180100]<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>,0>(uint64_t a1)
{
  const void *v2;

  std::unique_ptr<as::server::DeviceLatencyPoll>::reset[abi:ne180100]((uint64_t *)(a1 + 88), 0);
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100](a1 + 72);
  if (*(_QWORD *)(a1 + 64))
    operator delete(*(void **)(a1 + 48));
  if (*(_QWORD *)(a1 + 40))
    operator delete(*(void **)(a1 + 24));
  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
}

uint64_t std::__split_buffer<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 96;
    std::__destroy_at[abi:ne180100]<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>,0>(i - 96);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void boost::container::throw_length_error(boost::container *this, const char *a2)
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  *exception = &unk_1E82053D8;
  exception[1] = this;
}

void boost::container::out_of_range::~out_of_range(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1CAA38D28);
}

const char *boost::container::exception::what(boost::container::exception *this)
{
  if (*((_QWORD *)this + 1))
    return (const char *)*((_QWORD *)this + 1);
  else
    return "unknown boost::container exception";
}

void as::server::DeviceTimeObserver::DeviceKey::~DeviceKey(as::server::DeviceTimeObserver::DeviceKey *this)
{
  const void *v1;

  v1 = (const void *)*((_QWORD *)this + 1);
  if (v1)
    CFRelease(v1);
}

uint64_t std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>::pair[abi:ne180100]<true,0>(uint64_t a1)
{
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  _ZNSt3__115allocate_sharedB8ne180100IN2as6server18DeviceTimeObserver8TimeInfoENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((_QWORD *)(a1 + 72));
  *(_QWORD *)(a1 + 88) = 0;
  return a1;
}

void sub_1C8990E18(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + 64))
    operator delete(*(void **)(v1 + 48));
  if (*(_QWORD *)(v1 + 40))
    operator delete(*(void **)(v1 + 24));
  as::server::DeviceTimeObserver::DeviceKey::~DeviceKey((as::server::DeviceTimeObserver::DeviceKey *)v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<as::server::DeviceTimeObserver::CommonSessionInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8205400;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<as::server::DeviceTimeObserver::CommonSessionInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8205400;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA38D28);
}

uint64_t caulk::concurrent::details::spinloop::spin(uint64_t this)
{
  int v1;
  _DWORD *v2;

  v1 = *(_DWORD *)this + 1;
  *(_DWORD *)this = v1;
  if (v1 == 100)
  {
    v2 = (_DWORD *)this;
    this = sched_yield();
    *v2 = 0;
  }
  return this;
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN2as6server18DeviceTimeObserver8TimeInfoENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;
  char *v4;

  result = operator new(0x140uLL, (std::align_val_t)0x40uLL);
  v3 = 0;
  *result = &off_1E8205438;
  result[1] = 0;
  *((_OWORD *)result + 4) = 0u;
  result[8] = 0x40E7700000000000;
  result[2] = 0;
  *((_OWORD *)result + 5) = 0u;
  *((_OWORD *)result + 6) = 0u;
  *((_OWORD *)result + 7) = 0u;
  *((_OWORD *)result + 8) = 0u;
  *((_OWORD *)result + 9) = 0u;
  *((_OWORD *)result + 10) = 0u;
  *((_OWORD *)result + 11) = 0u;
  *((_OWORD *)result + 12) = 0u;
  *((_OWORD *)result + 13) = 0u;
  *((_OWORD *)result + 14) = 0u;
  *((_OWORD *)result + 15) = 0u;
  *((_OWORD *)result + 16) = 0u;
  *((_OWORD *)result + 17) = 0u;
  *((_OWORD *)result + 18) = 0u;
  *((_OWORD *)result + 19) = 0u;
  result[9] = 0;
  result[10] = 0;
  result[12] = 0;
  result[13] = 0;
  do
  {
    v4 = (char *)&result[v3];
    *((_DWORD *)v4 + 48) = 0;
    v4[200] = 0;
    v4[224] = 0;
    v3 += 8;
  }
  while (v3 != 16);
  *a1 = result + 8;
  a1[1] = result;
  return result;
}

void std::__shared_ptr_emplace<as::server::DeviceTimeObserver::TimeInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8205438;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<as::server::DeviceTimeObserver::TimeInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8205438;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA38D1CLL);
}

void boost::container::vector<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  const char *v12;
  uint64_t v13;
  void *v14;

  v10 = *a1;
  v11 = boost::container::vector_alloc_holder<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >> 58)
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  v13 = v11;
  v14 = operator new(32 * v11);
  boost::container::vector<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>(a1, (uint64_t)v14, v13, a2, (uint64_t)a3, a4);
  *a5 = *a1 + a2 - v10;
}

unint64_t boost::container::vector_alloc_holder<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>(uint64_t a1, const char *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  const char *v9;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 - v2 >= (unint64_t)a2)
    boost::container::vector_alloc_holder<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>();
  v4 = 0x3FFFFFFFFFFFFFFLL;
  if (0x3FFFFFFFFFFFFFFLL - v3 < (unint64_t)&a2[v2 - v3])
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  v5 = v3 >> 61;
  v6 = 8 * v3;
  if (v5 > 4)
    v7 = -1;
  else
    v7 = v6;
  v8 = v6 / 5;
  if (v5)
    v8 = v7;
  v9 = &a2[v2];
  if (v8 < 0x3FFFFFFFFFFFFFFLL)
    v4 = v8;
  if ((unint64_t)v9 <= v4)
    return v4;
  else
    return (unint64_t)v9;
}

void boost::container::vector<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v10 = *a1;
  boost::container::uninitialized_move_and_insert_alloc<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>((uint64_t)a1, *a1, a4, *a1 + 32 * a1[1], a2, a5, a6);
  if (v10)
  {
    v11 = a1[1];
    if (v11)
    {
      v12 = v10 + 8;
      do
      {
        --v11;
        v12 = std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100](v12) + 32;
      }
      while (v11);
    }
    operator delete((void *)*a1);
  }
  v13 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v13;
  a1[2] = a3;
}

void sub_1C899114C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

__n128 boost::container::uninitialized_move_and_insert_alloc<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int16 v8;
  __n128 result;
  __int16 v10;
  uint64_t v11;
  __int16 v12;

  v7 = a5;
  if (a2 != a3)
  {
    v7 = a5;
    do
    {
      *(_DWORD *)v7 = *(_DWORD *)a2;
      *(_OWORD *)(v7 + 8) = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v8 = *(_WORD *)(a2 + 24);
      *(_BYTE *)(v7 + 26) = *(_BYTE *)(a2 + 26);
      *(_WORD *)(v7 + 24) = v8;
      v7 += 32;
      a2 += 32;
    }
    while (a2 != a3);
  }
  if (a6 != 1)
    __assert_rtn("uninitialized_copy_n_and_update", "advanced_insert_int.hpp", 209, "n == 1");
  *(_DWORD *)v7 = *(_DWORD *)a7;
  result = *(__n128 *)(a7 + 8);
  *(__n128 *)(v7 + 8) = result;
  *(_QWORD *)(a7 + 8) = 0;
  *(_QWORD *)(a7 + 16) = 0;
  v10 = *(_WORD *)(a7 + 24);
  *(_BYTE *)(v7 + 26) = *(_BYTE *)(a7 + 26);
  *(_WORD *)(v7 + 24) = v10;
  if (a3 != a4)
  {
    v11 = v7 + 56;
    do
    {
      *(_DWORD *)(v11 - 24) = *(_DWORD *)a3;
      result = *(__n128 *)(a3 + 8);
      *(__n128 *)(v11 - 16) = result;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      v12 = *(_WORD *)(a3 + 24);
      *(_BYTE *)(v11 + 2) = *(_BYTE *)(a3 + 26);
      *(_WORD *)v11 = v12;
      v11 += 32;
      a3 += 32;
    }
    while (a3 != a4);
  }
  return result;
}

uint64_t std::set<unsigned int>::set[abi:ne180100](uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 4 * a3;
    do
    {
      std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)a1, v4, a2, a2);
      ++a2;
      v6 -= 4;
    }
    while (v6);
  }
  return a1;
}

void sub_1C89912E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void **boost::container::vector_alloc_holder<boost::container::new_allocator<unsigned int>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::vector_alloc_holder<boost::container::new_allocator<unsigned int> const&,unsigned long>(void **a1, const char *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = (void *)a3;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 61)
      boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
    *a1 = operator new(4 * a3);
    a1[2] = (void *)a3;
  }
  return a1;
}

unint64_t *boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::insert_unique<boost::container::vec_iterator<unsigned int *,false>>(uint64_t *a1, const void **a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  int *v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t *result;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int *v21;
  char *v22;
  int *v23;
  int *v24;
  uint64_t v25;
  const void *v26;
  char *v27;
  char *v28;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
    v5 = 1;
  else
    v5 = v4 == 0;
  if (!v5)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v26 = *a2;
  v27 = (char *)(v3 + 4 * v4);
  v25 = *a3;
  boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::insert<boost::container::vec_iterator<unsigned int *,false>>(a1, &v27, &v26, &v25, &v28);
  v24 = (int *)v28;
  v7 = (int *)*a1;
  v8 = a1[1];
  v23 = v7;
  if (!v7 && v8)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v23 = &v7[v8];
  boost::movelib::pdqsort<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(&v24, &v23);
  v9 = (unsigned int *)*a1;
  v10 = a1[1];
  v20 = v9;
  v21 = (unsigned int *)v28;
  if (!v9 && v10)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v19 = v9;
  v20 = &v9[v10];
  v18 = (unsigned int *)v28;
  boost::movelib::inplace_set_unique_difference<boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(&v21, &v20, &v19, &v18, (unsigned int **)&v22);
  v11 = (char *)*a1;
  v12 = a1[1];
  v16 = v11;
  v17 = v22;
  if (!v11 && v12)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v16 = &v11[4 * v12];
  result = boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::erase((unint64_t *)a1, (void **)&v17, (const void **)&v16, &v15);
  if (v28 != v22)
  {
    v14 = a1[1];
    if (!*a1)
    {
      if (v14)
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
    }
    return (unint64_t *)boost::movelib::adaptive_merge<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>((unsigned int *)*a1, (unsigned int *)v28, (unsigned int *)(*a1 + 4 * v14), *a1 + 4 * v14, a1[2] - v14);
  }
  return result;
}

void boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::insert<boost::container::vec_iterator<unsigned int *,false>>(uint64_t *a1@<X0>, char **a2@<X1>, const void **a3@<X2>, _QWORD *a4@<X3>, char **a5@<X8>)
{
  char *v6;
  uint64_t v7;
  unint64_t v10;
  BOOL v11;
  char *v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  const void *v18;

  v6 = *a2;
  v7 = *a1;
  if (*a1 > (unint64_t)v6)
    goto LABEL_12;
  v10 = a1[1];
  if (v7)
    v11 = 1;
  else
    v11 = v10 == 0;
  if (!v11)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v13 = (char *)(v7 + 4 * v10);
  if (v6 > v13)
LABEL_12:
    boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::insert<boost::container::vec_iterator<unsigned int *,false>>();
  v14 = a1[2];
  v15 = v14 >= v10;
  v16 = v14 - v10;
  if (!v15)
    boost::container::vector<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>((uint64_t)a1, (uint64_t)v6, (uint64_t)v13);
  v17 = (uint64_t)(*a4 - (_QWORD)*a3) >> 2;
  v18 = *a3;
  if (v16 < v17)
  {
    boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_range_proxy<boost::container::new_allocator<unsigned int>,boost::container::vec_iterator<unsigned int *,false>,unsigned int *>>(a1, v6, (const char *)v17, &v18, a5);
  }
  else
  {
    boost::container::expand_forward_and_insert_alloc<boost::container::new_allocator<unsigned int>,unsigned int *,boost::container::dtl::insert_range_proxy<boost::container::new_allocator<unsigned int>,boost::container::vec_iterator<unsigned int *,false>,unsigned int *>>((int)a1, v6, v13, v17, &v18);
    a1[1] += v17;
    *a5 = *a2;
  }
}

int **boost::movelib::pdqsort<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(int **result, int **a2)
{
  int *v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  int *v8;
  int *v9;

  v2 = *result;
  v3 = *a2;
  if (*result != *a2)
  {
    v8 = *a2;
    v9 = v2;
    v4 = (char *)v3 - (char *)v2;
    if ((unint64_t)v4 >= 8)
    {
      v5 = 0;
      v6 = v4 >> 2;
      do
      {
        ++v5;
        v7 = v6 > 3;
        v6 >>= 1;
      }
      while (v7);
    }
    else
    {
      v5 = 0;
    }
    return boost::movelib::pdqsort_detail::pdqsort_loop<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(&v9, &v8, v5, 1);
  }
  return result;
}

unsigned int **boost::movelib::inplace_set_unique_difference<boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>@<X0>(unsigned int **result@<X0>, unsigned int **a2@<X1>, unsigned int **a3@<X2>, unsigned int **a4@<X3>, unsigned int **a5@<X8>)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int **v19;
  unsigned int **v20;
  unsigned int **v21;
  unsigned int **v22;
  unsigned int **v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int *v34;

  v5 = *result;
  if (*result == *a2)
  {
    v9 = *result;
LABEL_13:
    *a5 = v9;
  }
  else
  {
    while (1)
    {
      v6 = *a3;
      if (*a3 == *a4)
        break;
      if (!v6)
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      if (!v5)
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      v7 = *v5;
      if (*v6 >= *v5)
      {
        if (v7 >= *v6)
        {
          v12 = v5 + 1;
          while (1)
          {
            v13 = v12;
            *result = v12;
            v14 = *a2;
            if (v12 == *a2)
              break;
            ++v12;
            if (v7 < *v13)
              goto LABEL_34;
          }
          v14 = v12;
LABEL_34:
          v28 = v14;
          v29 = v13;
          v18 = *a3;
          v26 = *a4;
          v27 = v18;
          v25 = v5;
          v19 = &v29;
          v20 = &v28;
          v21 = &v27;
          v22 = &v26;
          v23 = &v25;
          return boost::movelib::set_unique_difference<boost::move_iterator<boost::container::vec_iterator<unsigned int *,false>>,boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(v19, v20, v21, v22, v23, a5);
        }
        v8 = v5 + 1;
        *result = v5 + 1;
        v9 = *a2;
        if (v5 + 1 == *a2)
        {
          v9 = v5 + 1;
          goto LABEL_13;
        }
        if (v7 >= *v8)
        {
          v15 = v5 + 2;
          while (1)
          {
            v16 = v15;
            *result = v15;
            v17 = *a2;
            if (v15 == *a2)
              break;
            ++v15;
            if (v7 < *v16)
              goto LABEL_36;
          }
          v17 = v15;
LABEL_36:
          v33 = v17;
          v34 = v16;
          v24 = *a3;
          v31 = *a4;
          v32 = v24;
          v30 = v8;
          v19 = &v34;
          v20 = &v33;
          v21 = &v32;
          v22 = &v31;
          v23 = &v30;
          return boost::movelib::set_unique_difference<boost::move_iterator<boost::container::vec_iterator<unsigned int *,false>>,boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(v19, v20, v21, v22, v23, a5);
        }
      }
      else
      {
        *a3 = v6 + 1;
        v8 = *result;
        v9 = *a2;
      }
      v5 = v8;
      if (v8 == v9)
        goto LABEL_13;
    }
    if (!v5)
      __assert_rtn("operator++", "vector.hpp", 168, "!!m_ptr");
    v10 = v5 + 1;
    *result = v5 + 1;
    if (v5 + 1 == *a2)
    {
      v11 = v5;
    }
    else
    {
      do
      {
        if (*v5 >= *v10)
        {
          v11 = v5;
        }
        else
        {
          v11 = v5 + 1;
          if (v10 - 1 != v5)
            *v11 = *v10;
        }
        *result = ++v10;
        v5 = v11;
      }
      while (v10 != *a2);
    }
    *a5 = v11 + 1;
  }
  return result;
}

unint64_t *boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::erase@<X0>(unint64_t *result@<X0>, void **a2@<X1>, const void **a3@<X2>, _QWORD *a4@<X8>)
{
  char *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v8;
  BOOL v9;
  char *v10;
  char *v12;
  uint64_t v14;
  char *v15;

  v4 = (char *)*a2;
  v5 = *result;
  if (*result > (unint64_t)*a2)
    goto LABEL_20;
  v6 = result;
  v8 = result[1];
  if (v5)
    v9 = 1;
  else
    v9 = v8 == 0;
  if (!v9)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v10 = (char *)(v5 + 4 * v8);
  if (v4 > v10)
LABEL_20:
    boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::erase();
  v12 = (char *)*a3;
  if (v5 > (unint64_t)*a3 || v12 > v10)
    boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::erase();
  if (v4 > v12)
    boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::erase();
  if (v4 != v12)
  {
    if (v12 && v4 && v12 != v10)
    {
      v14 = v10 - v12;
      result = (unint64_t *)memmove(v4, v12, v10 - v12);
      v15 = &v4[v14];
      v8 = v6[1];
      v4 = (char *)*a2;
    }
    else
    {
      v15 = v4;
    }
    v6[1] = v8 - ((v10 - v15) >> 2);
  }
  *a4 = v4;
  return result;
}

void boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_range_proxy<boost::container::new_allocator<unsigned int>,boost::container::vec_iterator<unsigned int *,false>,unsigned int *>>(uint64_t *a1@<X0>, char *a2@<X1>, const char *a3@<X2>, const void **a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  const char *v12;
  uint64_t v13;
  char *v14;
  const void *v15;

  v10 = *a1;
  v11 = boost::container::vector_alloc_holder<boost::container::new_allocator<unsigned int>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >> 61)
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  v13 = v11;
  v14 = (char *)operator new(4 * v11);
  v15 = *a4;
  boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_range_proxy<boost::container::new_allocator<unsigned int>,boost::container::vec_iterator<unsigned int *,false>,unsigned int *>>((uint64_t)a1, v14, v13, a2, (uint64_t)a3, &v15);
  *a5 = &a2[*a1 - v10];
}

void *boost::container::expand_forward_and_insert_alloc<boost::container::new_allocator<unsigned int>,unsigned int *,boost::container::dtl::insert_range_proxy<boost::container::new_allocator<unsigned int>,boost::container::vec_iterator<unsigned int *,false>,unsigned int *>>(int a1, _BYTE *__dst, _BYTE *a3, unint64_t a4, const void **a5)
{
  int64_t v9;
  char *v10;
  void *result;
  char *v12;
  char *v13;
  char *v14;
  char *v15;

  if (a4)
  {
    v9 = a3 - __dst;
    if (a3 == __dst)
    {
      v13 = (char *)*a5;
      result = memmove(a3, *a5, 4 * a4);
      if (!v13)
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      v12 = &v13[4 * a4];
    }
    else if (a4 <= v9 >> 2)
    {
      v14 = &a3[-4 * a4];
      memmove(a3, v14, 4 * a4);
      if (v14 != __dst)
        memmove(&a3[-(v14 - __dst)], __dst, v14 - __dst);
      v15 = (char *)*a5;
      result = memmove(__dst, *a5, 4 * a4);
      if (!v15)
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      v12 = &v15[4 * a4];
    }
    else
    {
      if (__dst)
        memmove(&__dst[4 * a4], __dst, a3 - __dst);
      v10 = (char *)*a5;
      result = memmove(__dst, *a5, v9);
      if (!v10)
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      v12 = &v10[4 * (v9 >> 2)];
      *a5 = v12;
      if (a4 != v9 >> 2)
      {
        result = memmove(a3, v12, 4 * (a4 - (v9 >> 2)));
        v12 = &v10[4 * a4];
      }
    }
    *a5 = v12;
  }
  return result;
}

void boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_range_proxy<boost::container::new_allocator<unsigned int>,boost::container::vec_iterator<unsigned int *,false>,unsigned int *>>(uint64_t a1, char *__dst, uint64_t a3, char *__src, uint64_t a5, const void **a6)
{
  char *v11;
  char *v12;
  uint64_t v13;
  const void *v14;

  v11 = *(char **)a1;
  v12 = (char *)(*(_QWORD *)a1 + 4 * *(_QWORD *)(a1 + 8));
  v14 = *a6;
  boost::container::uninitialized_move_and_insert_alloc<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int *,boost::container::dtl::insert_range_proxy<boost::container::new_allocator<unsigned int>,boost::container::vec_iterator<unsigned int *,false>,unsigned int *>>(a1, v11, __src, v12, __dst, a5, &v14);
  if (v11)
    operator delete(*(void **)a1);
  v13 = *(_QWORD *)(a1 + 8) + a5;
  *(_QWORD *)a1 = __dst;
  *(_QWORD *)(a1 + 8) = v13;
  *(_QWORD *)(a1 + 16) = a3;
}

void sub_1C8991CA0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void *boost::container::uninitialized_move_and_insert_alloc<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int *,boost::container::dtl::insert_range_proxy<boost::container::new_allocator<unsigned int>,boost::container::vec_iterator<unsigned int *,false>,unsigned int *>>(int a1, char *a2, char *__src, char *a4, char *__dst, uint64_t a6, const void **a7)
{
  char *v9;
  char *v12;
  void *result;
  char *v14;

  v9 = __dst;
  if (a2 && a2 != __src && __dst)
  {
    v12 = (char *)(__src - a2);
    result = memmove(__dst, a2, __src - a2);
    v9 = &v12[(_QWORD)v9];
  }
  v14 = (char *)*a7;
  if (a6)
  {
    result = memmove(v9, *a7, 4 * a6);
    if (!v14)
      __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
    v14 += 4 * a6;
  }
  *a7 = v14;
  if (__src && __src != a4)
  {
    if (v9)
      return memmove(&v9[4 * a6], __src, a4 - __src);
  }
  return result;
}

int **boost::movelib::pdqsort_detail::pdqsort_loop<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(int **a1, int **a2, uint64_t a3, char a4)
{
  int *v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  int *v14;
  int *v15;
  int *v16;
  int **result;
  int *v18;
  int *v19;
  uint64_t v20;
  unint64_t v21;
  int *v22;
  int *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int *v28;
  int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  int *v33;
  int *v34;
  int v35;
  int *v36;
  uint64_t v37;
  unint64_t v38;
  int *v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  int *v45;
  unsigned int *v46;
  int *v47;
  unint64_t v48;
  int *v49;
  int *v50;
  unint64_t v51;
  int *v52;
  int *v53;
  int *v54;
  int *v55;
  int *v56;
  int *v57;
  int *v58;
  int *v59;
  int *v60;
  int *v61;
  int *v62;
  int *v63;
  int *v64;
  int *v65;
  int *v66;
  int *v67;
  int *v68;
  int *v69;
  int *v70;
  int *v71;
  int *v72;
  int *v73;
  int *v74;
  int *v75;
  int *v76;
  int *v77;
  int *v78;
  int *v79;
  int *v80;
  int *v81;
  int *v82;
  int *v83;
  int *v84;
  int *v85;
  char v86;
  int *v87;
  int *v88;
  int *v89;
  int *v90;
  int *v91;
  int *v92;
  int *v93;
  int *v94;
  int *v95;
  int *v96;
  int *v97;
  int *v98;
  int *v99;
  int *v100;
  int *v101;
  int *v102;
  int *v103;
  int *v104;
  int *v105;
  unsigned int *v106;
  unsigned int *v107;
  int *v108;
  int *v109;

  while (1)
  {
    v8 = *a2;
    v9 = *a1;
    v10 = (char *)*a2 - (char *)*a1;
    if ((unint64_t)v10 <= 0x5F)
      break;
    v11 = v10 >> 2;
    v12 = (unint64_t)(v10 >> 2) >> 1;
    if ((unint64_t)v10 < 0x201)
    {
      if (!v9)
        __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
      v90 = *a1;
      v91 = &v9[v12];
      if (!v8)
        __assert_rtn("operator-", "vector.hpp", 196, "left.m_ptr || !off");
      v89 = v8 - 1;
      boost::movelib::pdqsort_detail::sort3<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(&v91, &v90, &v89);
    }
    else
    {
      v105 = *a1;
      if (!v9)
        __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
      v104 = &v9[v12];
      if (!v8)
        __assert_rtn("operator-", "vector.hpp", 196, "left.m_ptr || !off");
      v103 = v8 - 1;
      boost::movelib::pdqsort_detail::sort3<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(&v105, &v104, &v103);
      v13 = *a1;
      if (!*a1)
        __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
      v101 = &v13[v12 - 1];
      v102 = v13 + 1;
      if (!*a2)
        __assert_rtn("operator-", "vector.hpp", 196, "left.m_ptr || !off");
      v100 = *a2 - 2;
      boost::movelib::pdqsort_detail::sort3<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(&v102, &v101, &v100);
      v14 = *a1;
      if (!*a1)
        __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
      v98 = &v14[v12 + 1];
      v99 = v14 + 2;
      if (!*a2)
        __assert_rtn("operator-", "vector.hpp", 196, "left.m_ptr || !off");
      v97 = *a2 - 3;
      boost::movelib::pdqsort_detail::sort3<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(&v99, &v98, &v97);
      v15 = *a1;
      if (v12 != 1 && !v15)
        __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
      v96 = &v15[v12 - 1];
      if (!v15)
        __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
      v94 = &v15[v12 + 1];
      v95 = &v15[v12];
      boost::movelib::pdqsort_detail::sort3<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(&v96, &v95, &v94);
      v93 = *a1;
      if (!v93)
        __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
      v92 = &v93[v12];
      boost::adl_move_iter_swap<boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>>(&v93, &v92);
    }
    v16 = *a1;
    if ((a4 & 1) == 0)
    {
      if (!v16)
        __assert_rtn("operator-", "vector.hpp", 196, "left.m_ptr || !off");
      if (*(v16 - 1) >= *v16)
      {
        v88 = *a1;
        v87 = *a2;
        result = boost::movelib::pdqsort_detail::partition_left<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(&v88, (uint64_t *)&v87, &v85);
        if (!v85)
          __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
        a4 = 0;
        *a1 = v85 + 1;
        v35 = 2;
        goto LABEL_70;
      }
    }
    v84 = *a1;
    v83 = *a2;
    result = boost::movelib::pdqsort_detail::partition_right<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(&v84, &v83, (uint64_t)&v85);
    v18 = v85;
    if (!v85)
      __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
    v19 = *a1;
    v20 = (char *)v85 - (char *)*a1;
    v21 = v20 >> 2;
    v22 = v85 + 1;
    v23 = *a2;
    v24 = (char *)*a2 - (char *)(v85 + 1);
    v25 = v24 >> 2;
    if (v20 >> 2 < v11 >> 3 || v25 < v11 >> 3)
    {
      if (!--a3)
      {
        v108 = *a2;
        v109 = v19;
        result = (int **)boost::movelib::heap_sort_helper<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::sort((uint64_t *)&v109, (uint64_t *)&v108);
LABEL_69:
        v35 = 1;
        goto LABEL_70;
      }
      if ((unint64_t)v20 >= 0x5D)
      {
        v82 = *a1;
        if (!v19)
          __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
        v48 = v21 >> 2;
        v81 = &v19[v21 >> 2];
        boost::adl_move_iter_swap<boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>>(&v82, &v81);
        v79 = &v18[-v48];
        v80 = v18 - 1;
        boost::adl_move_iter_swap<boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>>(&v80, &v79);
        if ((unint64_t)v20 >= 0x201)
        {
          v49 = *a1;
          if (!*a1)
            __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
          v77 = &v49[v48 + 1];
          v78 = v49 + 1;
          boost::adl_move_iter_swap<boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>>(&v78, &v77);
          v50 = *a1;
          if (!*a1)
            __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
          v75 = &v50[v48 + 2];
          v76 = v50 + 2;
          boost::adl_move_iter_swap<boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>>(&v76, &v75);
          v73 = &v18[~v48];
          v74 = v18 - 2;
          boost::adl_move_iter_swap<boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>>(&v74, &v73);
          v71 = &v18[-2 - v48];
          v72 = v18 - 3;
          boost::adl_move_iter_swap<boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>>(&v72, &v71);
        }
      }
      if ((unint64_t)v24 >= 0x5D)
      {
        v51 = v25 >> 2;
        v69 = &v18[(v25 >> 2) + 1];
        v70 = v18 + 1;
        boost::adl_move_iter_swap<boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>>(&v70, &v69);
        v52 = *a2;
        if (!*a2)
          __assert_rtn("operator-", "vector.hpp", 196, "left.m_ptr || !off");
        v67 = &v52[-v51];
        v68 = v52 - 1;
        boost::adl_move_iter_swap<boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>>(&v68, &v67);
        if ((unint64_t)v24 >= 0x201)
        {
          v53 = &v18[v51];
          v65 = v53 + 2;
          v66 = v18 + 2;
          boost::adl_move_iter_swap<boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>>(&v66, &v65);
          v63 = v53 + 3;
          v64 = v18 + 3;
          boost::adl_move_iter_swap<boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>>(&v64, &v63);
          v54 = *a2;
          if (!*a2)
            __assert_rtn("operator-", "vector.hpp", 196, "left.m_ptr || !off");
          v61 = &v54[~v51];
          v62 = v54 - 2;
          boost::adl_move_iter_swap<boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>>(&v62, &v61);
          v55 = *a2;
          if (!*a2)
            __assert_rtn("operator-", "vector.hpp", 196, "left.m_ptr || !off");
          v59 = &v55[-2 - v51];
          v60 = v55 - 3;
          boost::adl_move_iter_swap<boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>>(&v60, &v59);
        }
      }
    }
    else if (v86)
    {
      if (v19 == v85)
        goto LABEL_38;
      if (!v19)
        __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
      if (v19 + 1 == v85)
        goto LABEL_38;
      v26 = 0;
      v27 = 0;
      v28 = v19 + 1;
      v29 = *a1;
      do
      {
        v31 = *v29;
        v30 = v29[1];
        v29 = v28;
        if (v30 < v31)
        {
          v32 = v26;
          while (1)
          {
            *(int *)((char *)v19 + v32 + 4) = v31;
            if (!v32)
              break;
            v31 = *(int *)((char *)v19 + v32 - 4);
            v32 -= 4;
            if (v30 >= v31)
            {
              v33 = (int *)((char *)v19 + v32 + 4);
              v34 = (int *)((char *)v19 + v32 + 4);
              goto LABEL_34;
            }
          }
          v33 = v19;
          v34 = v19;
LABEL_34:
          *v34 = v30;
          v27 += v29 - v33;
        }
        v28 = v29 + 1;
        if (v29 + 1 == v18)
          break;
        v26 += 4;
      }
      while (v27 < 9);
      if (v28 == v18)
      {
LABEL_38:
        v35 = 1;
        if (v22 == v23)
          goto LABEL_70;
        v36 = v18 + 2;
        if (v18 + 2 == v23)
          goto LABEL_70;
        v37 = 0;
        v38 = 0;
        v39 = v18 + 2;
        v40 = 2;
        v41 = (unsigned int *)(v18 + 1);
        do
        {
          v42 = (unsigned int *)&v18[v40];
          v43 = *v42;
          result = (int **)*v41;
          if (*v42 < result)
          {
            v44 = v37;
            v45 = v39;
            v46 = (unsigned int *)v36;
            while (1)
            {
              *v46 = result;
              if (!v44)
                break;
              result = (int **)*(v46 - 2);
              --v46;
              --v45;
              ++v44;
              if (v43 >= result)
                goto LABEL_47;
            }
            v45 = v18 + 1;
            v46 = (unsigned int *)(v18 + 1);
LABEL_47:
            *v46 = v43;
            v38 += ((char *)v42 - (char *)v45) >> 2;
          }
          v47 = &v18[++v40];
          if (v47 == v23)
            break;
          ++v36;
          ++v39;
          --v37;
          v41 = v42;
        }
        while (v38 < 9);
        if (v47 == v23)
          goto LABEL_69;
      }
    }
    v56 = *a1;
    v57 = v18;
    v58 = v56;
    result = (int **)boost::movelib::pdqsort_detail::pdqsort_loop<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(&v58, &v57, a3, a4 & 1);
    a4 = 0;
    v35 = 0;
    *a1 = v22;
LABEL_70:
    if (v35 == 1)
      return result;
  }
  v106 = (unsigned int *)*a2;
  v107 = (unsigned int *)v9;
  return (int **)boost::movelib::insertion_sort<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::container::vec_iterator<unsigned int *,false>>(&v107, &v106);
}

unsigned int **boost::movelib::insertion_sort<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::container::vec_iterator<unsigned int *,false>>(unsigned int **result, unsigned int **a2)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int v11;

  v2 = *result;
  v3 = *a2;
  if (*result != *a2)
  {
    if (!v2)
      __assert_rtn("operator++", "vector.hpp", 168, "!!m_ptr");
    v4 = v2 + 1;
    if (v2 + 1 != v3)
    {
      v5 = 0;
      v6 = *result;
      do
      {
        v7 = v4;
        v8 = v6[1];
        if (v8 < *v6)
        {
          v6[1] = *v6;
          v9 = v2;
          if (v6 != v2)
          {
            v10 = v5;
            while (1)
            {
              v9 = (unsigned int *)((char *)v2 + v10);
              v11 = *(unsigned int *)((char *)v2 + v10 - 4);
              if (v8 >= v11)
                break;
              *v9 = v11;
              v10 -= 4;
              if (!v10)
              {
                v9 = v2;
                break;
              }
            }
          }
          *v9 = v8;
        }
        v4 = v7 + 1;
        v5 += 4;
        v6 = v7;
      }
      while (v7 + 1 != v3);
    }
  }
  return result;
}

int **boost::movelib::pdqsort_detail::sort3<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(int **result, int **a2, int **a3)
{
  int *v3;
  int **v4;
  int *v5;
  int *v8;
  int *v9;
  int *v10;

  v3 = *a2;
  if (!*a2)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  v4 = result;
  v5 = *result;
  if (!*result)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  if (*v3 < *v5)
  {
    v9 = *a2;
    v10 = v5;
    result = boost::adl_move_iter_swap<boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>>(&v10, &v9);
    v3 = *a2;
  }
  if (!*a3)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  if (!v3)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  if (**a3 < *v3)
  {
    v9 = *a3;
    v10 = v3;
    result = boost::adl_move_iter_swap<boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>>(&v10, &v9);
    v3 = *a2;
    if (!*a2)
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  v8 = *v4;
  if (!*v4)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  if (*v3 < *v8)
  {
    v9 = v3;
    v10 = v8;
    return boost::adl_move_iter_swap<boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>>(&v10, &v9);
  }
  return result;
}

int **boost::adl_move_iter_swap<boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>>(int **result, int **a2)
{
  int *v2;
  int *v3;
  int v4;

  v2 = *result;
  if (!*result)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  v3 = *a2;
  if (!*a2)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  v4 = *v2;
  *v2 = *v3;
  *v3 = v4;
  return result;
}

int **boost::movelib::pdqsort_detail::partition_left<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>@<X0>(int **result@<X0>, uint64_t *a2@<X1>, int **a3@<X8>)
{
  int *v3;
  int **v4;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int *v10;
  int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int *v16;
  int *v17;

  v3 = *result;
  if (!*result)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  v4 = result;
  v6 = 0;
  v7 = *v3;
  v8 = *a2;
  do
  {
    if (!(v8 + v6))
      __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
    v9 = *(_DWORD *)(v8 + v6 - 4);
    v6 -= 4;
  }
  while (v7 < v9);
  v10 = (int *)(v8 + v6);
  v11 = *result;
  if (v6 == -4)
  {
    do
    {
      if (v11 >= v10)
        break;
      v13 = v11[1];
      ++v11;
    }
    while (v7 >= v13);
  }
  else
  {
    do
    {
      v12 = v11[1];
      ++v11;
    }
    while (v7 >= v12);
  }
  if (v11 < v10)
  {
    do
    {
      v16 = v10;
      v17 = v11;
      result = boost::adl_move_iter_swap<boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>>(&v17, &v16);
      do
      {
        v14 = *--v10;
        v9 = v14;
      }
      while (v7 < v14);
      do
      {
        v15 = v11[1];
        ++v11;
      }
      while (v7 >= v15);
    }
    while (v11 < v10);
    v3 = *v4;
  }
  *a3 = v10;
  if (!v3)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  *v3 = v9;
  *v10 = v7;
  return result;
}

int **boost::movelib::pdqsort_detail::partition_right<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>@<X0>(int **result@<X0>, int **a2@<X1>, uint64_t a3@<X8>)
{
  int *v4;
  int **v5;
  uint64_t v6;
  unsigned int v7;
  int *v8;
  unsigned int v9;
  int *v10;
  unsigned int v11;
  unsigned int v12;
  int *v13;
  int *v14;
  unsigned int v15;
  unsigned int v16;
  int *v17;
  int *v18;
  int *v19;

  v4 = *result;
  if (!*result)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  v5 = result;
  v6 = 0;
  v7 = *v4;
  v8 = *a2;
  do
    v9 = v4[++v6];
  while (v9 < v7);
  v10 = &v4[v6];
  if (v6 == 1)
  {
    do
    {
      if (v10 >= v8)
        break;
      v12 = *--v8;
    }
    while (v12 >= v7);
  }
  else
  {
    do
    {
      if (!v8)
        __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
      v11 = *--v8;
    }
    while (v11 >= v7);
  }
  if (v10 >= v8)
  {
    v17 = v10 - 1;
  }
  else
  {
    v13 = &v4[v6];
    v14 = v8;
    do
    {
      v18 = v14;
      v19 = v13;
      result = boost::adl_move_iter_swap<boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>>(&v19, &v18);
      do
      {
        v15 = v13[1];
        ++v13;
      }
      while (v15 < v7);
      do
        v16 = *--v14;
      while (v16 >= v7);
    }
    while (v13 < v14);
    v4 = *v5;
    v17 = v13 - 1;
  }
  if (!v4)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  *v4 = *v17;
  *v17 = v7;
  *(_QWORD *)a3 = v17;
  *(_BYTE *)(a3 + 8) = v10 >= v8;
  return result;
}

BOOL boost::movelib::heap_sort_helper<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::sort(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _DWORD *v5;
  _BOOL8 result;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *a1;
  v11 = *a2;
  boost::movelib::heap_sort_helper<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::make_heap(&v12, &v11);
  v4 = *a1;
  v9 = *a2;
  v10 = v4;
  boost::movelib::heap_sort_helper<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::sort_heap(&v10, &v9);
  v5 = (_DWORD *)*a1;
  v7 = *a2;
  v8 = v5;
  result = boost::movelib::is_sorted<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(&v8, &v7);
  if (!result)
    boost::movelib::heap_sort_helper<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::sort();
  return result;
}

uint64_t *boost::movelib::heap_sort_helper<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::make_heap(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  v2 = *a2 - *result;
  if ((unint64_t)v2 >= 5)
  {
    v3 = result;
    v4 = v2 >> 2;
    v5 = ((unint64_t)(v2 >> 2) >> 1) - 1;
    do
    {
      v8 = 0;
      v6 = *v3;
      if (v5 && !v6)
        __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
      if (!v6)
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      v8 = *(_DWORD *)(v6 + 4 * v5);
      v7 = v6;
      result = boost::movelib::heap_sort_helper<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::adjust_heap(&v7, v5--, v4, &v8);
    }
    while (v5 != -1);
  }
  return result;
}

uint64_t *boost::movelib::heap_sort_helper<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::sort_heap(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  unsigned int v10;

  v2 = *a2 - *result;
  if ((unint64_t)v2 >= 5)
  {
    v4 = result;
    v5 = v2 >> 2;
    do
    {
      v6 = *a2;
      if (!*a2)
        __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
      v7 = (_DWORD *)(v6 - 4);
      *a2 = v6 - 4;
      v10 = 0;
      v10 = *(_DWORD *)(v6 - 4);
      v8 = (_DWORD *)*v4;
      if (!*v4)
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      *v7 = *v8;
      v9 = v8;
      result = boost::movelib::heap_sort_helper<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::adjust_heap((uint64_t *)&v9, 0, --v5, &v10);
    }
    while (v5 > 1);
  }
  return result;
}

BOOL boost::movelib::is_sorted<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(_DWORD **a1, _QWORD *a2)
{
  _DWORD *v2;
  _DWORD *v3;
  _BOOL8 result;

  v2 = *a1;
  v3 = (_DWORD *)*a2;
  if (*a1 == (_DWORD *)*a2)
    return 1;
  do
  {
    if (!v2)
      __assert_rtn("operator++", "vector.hpp", 168, "!!m_ptr");
    result = ++v2 == v3;
  }
  while (v2 != v3 && *v2 >= *(v2 - 1));
  return result;
}

uint64_t *boost::movelib::heap_sort_helper<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::adjust_heap(uint64_t *result, unint64_t a2, unint64_t a3, unsigned int *a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v13;

  v4 = 2 * a2;
  v5 = 2 * a2 + 2;
  if (v5 >= a3)
  {
    v8 = a2;
  }
  else
  {
    v6 = *result;
    v7 = a2;
    do
    {
      if (v5 && !v6)
        __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
      if (!v6)
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      v8 = v4 | 1;
      if (*(_DWORD *)(v6 + 4 * v5) >= *(_DWORD *)(v6 + 4 * (v4 | 1)))
        v8 = v5;
      *(_DWORD *)(v6 + 4 * v7) = *(_DWORD *)(v6 + 4 * v8);
      v4 = 2 * v8;
      v5 = 2 * v8 + 2;
      v7 = v8;
    }
    while (v5 < a3);
  }
  v9 = *result;
  if (v5 == a3)
  {
    if (!v9)
      __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
    v10 = v4 | 1;
    *(_DWORD *)(v9 + 4 * v8) = *(_DWORD *)(v9 + 4 * v10);
    v8 = v10;
  }
  if (v8 <= a2)
  {
    if (v8 && !v9)
      __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
    if (!v9)
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  else
  {
    v11 = v8;
    while (1)
    {
      if (v11 - 1 >= 2 && v9 == 0)
        __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
      if (!v9)
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      v8 = (v11 - 1) >> 1;
      v13 = *(_DWORD *)(v9 + 4 * v8);
      if (v13 >= *a4)
        break;
      *(_DWORD *)(v9 + 4 * v11) = v13;
      v11 = (v11 - 1) >> 1;
      if (v8 <= a2)
        goto LABEL_29;
    }
    v8 = v11;
  }
LABEL_29:
  *(_DWORD *)(v9 + 4 * v8) = *a4;
  return result;
}

unsigned int **boost::movelib::set_unique_difference<boost::move_iterator<boost::container::vec_iterator<unsigned int *,false>>,boost::container::vec_iterator<unsigned int *,false>,boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>@<X0>(unsigned int **result@<X0>, unsigned int **a2@<X1>, unsigned int **a3@<X2>, unsigned int **a4@<X3>, unsigned int **a5@<X4>, unsigned int **a6@<X8>)
{
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int **v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;

  while (1)
  {
    v6 = *result;
    if (*result == *a2)
      break;
    v7 = *a3;
    if (*a3 == *a4)
    {
      if (!v6)
LABEL_23:
        __assert_rtn("operator++", "vector.hpp", 168, "!!m_ptr");
      v12 = *result;
      while (1)
      {
        *result = ++v6;
        if (v6 == *a2)
          break;
        if (!v12)
          __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
        if (*v12 < *v6)
        {
          v13 = *a5;
          if (!*a5)
            __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
          *v13 = *v12;
          *a5 = v13 + 1;
          v6 = *result;
          v12 = *result;
        }
        if (!v6)
          goto LABEL_23;
      }
      if (!v12)
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      v14 = *a5;
      if (!*a5)
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      *v14 = *v12;
      *a5 = v14 + 1;
      break;
    }
    if (!v6)
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    if (!v7)
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    v8 = *v6;
    if (*v6 >= *v7)
    {
      if (*v7 >= v8)
      {
        v11 = result;
      }
      else
      {
        v6 = *a3;
        v11 = a3;
      }
    }
    else
    {
      v9 = v6 + 1;
      do
      {
        *result = v9;
        if (v9 == *a2)
          break;
        v10 = *v9++;
      }
      while (v8 >= v10);
      v6 = *a5;
      if (!*a5)
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      *v6 = v8;
      v11 = a5;
    }
    *v11 = v6 + 1;
  }
  *a6 = *a5;
  return result;
}

unsigned int *boost::movelib::adaptive_merge<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(unsigned int *result, unsigned int *a2, unsigned int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  unsigned int v9;
  _QWORD v10[5];

  if (result != a2 && a2 != a3)
  {
    v10[3] = v5;
    v10[4] = v6;
    v7 = (char *)a2 - (char *)result;
    while (*a2 >= *result)
    {
      ++result;
      v7 -= 4;
      if (result == a2)
        return result;
    }
    for (i = (char *)a3 - (char *)a2; ; i -= 4)
    {
      v9 = *--a3;
      if (v9 < *(a2 - 1))
        break;
      if (a3 == a2)
        return result;
    }
    v10[0] = a4;
    v10[1] = 0;
    v10[2] = a5;
    return boost::movelib::detail_adaptive::adaptive_merge_impl<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>(result, v7 >> 2, i >> 2, (uint64_t)v10);
  }
  return result;
}

unsigned int *boost::movelib::detail_adaptive::adaptive_merge_impl<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>(unsigned int *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  char *v20;
  char *v21;
  unsigned int *result;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  _BOOL4 v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  unint64_t v46;
  BOOL v47;

  v7 = (char *)a1;
  v8 = *(_QWORD *)(a4 + 16);
  if (a2 >= a3)
    v9 = a3;
  else
    v9 = a2;
  if (v8 >= v9)
    return boost::movelib::op_buffered_merge<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>(a1, (char *)&a1[a2], (char *)&a1[a2 + a3], a4);
  v10 = 0;
  v11 = 0;
  v12 = -32;
  v13 = a3 + a2;
  do
  {
    v10 *= 2;
    *((_QWORD *)&v15 + 1) = v11;
    *(_QWORD *)&v15 = v13;
    v14 = v15 >> 62;
    v13 *= 4;
    v16 = v10 >= v14;
    if (v10 < v14)
      v17 = ~v10;
    else
      v17 = 0;
    v11 = v17 + v14;
    if (!v16)
      v10 += 2;
    v16 = __CFADD__(v12++, 1);
  }
  while (!v16);
  v18 = v10 >> 1;
  if ((a3 + a2) % (v10 >> 1))
    ++v18;
  if (2 * v18 >= a2 || 2 * v18 >= a3)
  {
    v20 = (char *)&a1[a2];
    v21 = &v20[4 * a3];
    return (unsigned int *)boost::movelib::merge_bufferless_ONlogN_recursive<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>((char *)a1, v20, v21, a2, a3);
  }
  if (v8 >= v18)
    v23 = 0;
  else
    v23 = v18;
  if (v8 <= v18)
    v24 = v18;
  else
    v24 = *(_QWORD *)(a4 + 16);
  v25 = a3 / v24;
  v26 = a3 / v24 + a2 / v24;
  do
  {
    v27 = v26;
    v28 = (a2 - (v23 + v26--)) / v24 + v25;
  }
  while (v27 >= v28);
  v29 = v27 + 1;
  if (v27 + 1 < (a2 - v23 + ~v27) / v24 + v25)
    boost::movelib::detail_adaptive::adaptive_merge_impl<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>();
  v46 = a3 + a2;
  if (v8)
  {
    v30 = (a2 - v23) / v24 + v25;
    v31 = *(_QWORD *)a4 + 4 * v8;
    v32 = (*(_QWORD *)a4 + 4 * v24 + 7) & 0xFFFFFFFFFFFFFFF8;
    v16 = v31 >= v32;
    v33 = (v31 - v32) >> 3;
    if (v16 && v30 <= v33)
      v29 = 0;
  }
  v36 = v29 + v23;
  v37 = (char *)&a1[a2];
  v38 = boost::movelib::detail_adaptive::collect_unique<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>((char *)a1, v37, v29 + v23, (int **)a4);
  v39 = v38;
  if (v38 != v29 + v23 && v38 <= 3)
  {
    boost::movelib::merge_bufferless_ONlogN_recursive<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(v7, &v7[4 * v38], &v7[4 * a2], v38, (v37 - &v7[4 * v38]) >> 2);
    v21 = &v37[4 * a3];
    a1 = (unsigned int *)v7;
    v20 = &v7[4 * a2];
    return (unsigned int *)boost::movelib::merge_bufferless_ONlogN_recursive<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>((char *)a1, v20, v21, a2, a3);
  }
  v47 = v38 == v36;
  if (v38 == v36)
  {
    v40 = *(_QWORD *)(a4 + 16) >= v24;
    v41 = 1;
    v42 = v46;
  }
  else
  {
    v42 = v46;
    v43 = boost::movelib::detail_adaptive::lblock_for_combine<unsigned long>(0, v38, v46, &v47);
    v24 = v43;
    v40 = 0;
    if (v47)
      v23 = v43;
    else
      v23 = 0;
    v41 = v47;
    v29 = v39;
  }
  result = boost::movelib::detail_adaptive::adaptive_merge_combine_blocks<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>((int *)v7, a2, a3, v39, v29, v24, v41, v40, (uint64_t *)a4);
  if (v39 != v23 || !v40)
  {
    if (*(_QWORD *)(a4 + 8))
      *(_QWORD *)(a4 + 8) = 0;
    if (v39 != v23 && v40)
      v44 = v23;
    else
      v44 = 0;
    v45 = &v7[4 * (v39 - v44)];
    boost::movelib::heap_sort_helper<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::sort((uint64_t)v7, (uint64_t)v45);
    return (unsigned int *)boost::movelib::detail_adaptive::stable_merge<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>((int *)v7, v45, &v7[4 * v42], a4);
  }
  return result;
}

unint64_t boost::movelib::detail_adaptive::collect_unique<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>(char *a1, char *a2, unint64_t a3, int **a4)
{
  char *v7;
  char *v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  unsigned int v14;
  char *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  unsigned int v19;
  char *v20;
  unsigned int *v21;
  unsigned int *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unsigned int *v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int *v29;
  unint64_t v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  int v34;
  char *v35;
  int v36;
  int *v37;
  int *v38;
  uint64_t v39;
  int v40;

  if (!a3)
    return 0;
  v7 = a1;
  v8 = a1 + 4;
  if ((unint64_t)a4[2] >= a3)
  {
    v21 = boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>::add<unsigned int *>(a4, a1);
    v9 = 1;
    if (v8 != a2 && a3 >= 2)
    {
      v22 = v21;
      v9 = 1;
      v23 = v7;
      v24 = v8;
      do
      {
        v25 = (uint64_t)&(*a4)[(_QWORD)a4[1]];
        v26 = v22;
        if ((unsigned int *)v25 == v22)
          goto LABEL_32;
        v26 = (unsigned int *)&(*a4)[(_QWORD)a4[1]];
        v27 = (v25 - (uint64_t)v22) >> 2;
        v28 = *(_DWORD *)v24;
        v29 = v22;
        do
        {
          v30 = v27 >> 1;
          v31 = &v29[v27 >> 1];
          v33 = *v31;
          v32 = v31 + 1;
          v27 += ~(v27 >> 1);
          if (v33 >= v28)
            v27 = v30;
          else
            v29 = v32;
        }
        while (v27);
        if (v29 == (unsigned int *)v25 || (v26 = v29, v28 < *v29))
        {
LABEL_32:
          while (v8 != v24)
          {
            v34 = *(_DWORD *)v8;
            v8 += 4;
            *(_DWORD *)v23 = v34;
            v23 += 4;
          }
          v8 = v24 + 4;
          ++v9;
          boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>::insert<unsigned int *>(a4, v26, v24);
        }
        v24 += 4;
      }
      while (v24 != a2 && v9 < a3);
      if (v23 != v7)
      {
        v35 = v23;
        do
        {
          v36 = *((_DWORD *)v35 - 1);
          v35 -= 4;
          *(_DWORD *)&v23[4 * v9 - 4] = v36;
          v23 = v35;
        }
        while (v35 != v7);
      }
    }
    v37 = a4[1];
    if (v37)
    {
      v38 = *a4;
      v39 = 4 * (_QWORD)v37;
      do
      {
        v40 = *v38++;
        *(_DWORD *)v7 = v40;
        v7 += 4;
        v39 -= 4;
      }
      while (v39);
    }
  }
  else
  {
    v9 = 1;
    v10 = a1;
    if (v8 != a2 && a3 >= 2)
    {
      v9 = 1;
      v10 = a1;
      v11 = a1 + 4;
      do
      {
        v12 = v10;
        if (v8 == v10)
          goto LABEL_14;
        v13 = (v8 - v10) >> 2;
        v14 = *(_DWORD *)v11;
        v15 = v10;
        do
        {
          v16 = v13 >> 1;
          v17 = &v15[4 * (v13 >> 1)];
          v19 = *(_DWORD *)v17;
          v18 = v17 + 4;
          v13 += ~(v13 >> 1);
          if (v19 >= v14)
            v13 = v16;
          else
            v15 = v18;
        }
        while (v13);
        v12 = v8;
        if (v15 == v8 || (v12 = v15, v14 < *(_DWORD *)v15))
        {
LABEL_14:
          v20 = boost::movelib::rotate_gcd<unsigned int *>(v10, v8, v11);
          v8 = v11 + 4;
          ++v9;
          boost::movelib::rotate_gcd<unsigned int *>(&v12[v20 - v10], v11, v11 + 4);
          v10 = v20;
        }
        v11 += 4;
      }
      while (v11 != a2 && v9 < a3);
    }
    boost::movelib::rotate_gcd<unsigned int *>(v7, v10, &v10[4 * v9]);
  }
  return v9;
}

unint64_t boost::movelib::detail_adaptive::lblock_for_combine<unsigned long>(unint64_t result, unint64_t a2, unint64_t a3, BOOL *a4)
{
  unint64_t v4;

  if (a3 <= 1)
    boost::movelib::detail_adaptive::lblock_for_combine<unsigned long>();
  if (result)
  {
    *a4 = 1;
    return result;
  }
  if (a2 <= 3)
    boost::movelib::detail_adaptive::lblock_for_combine<unsigned long>();
  v4 = a2 - (a2 >> 1);
  if (v4 < 4)
  {
    *a4 = 0;
    return a3 / a2;
  }
  result = a2 >> 1;
  *a4 = v4 >= a3 / (a2 >> 1);
  if (v4 < a3 / (a2 >> 1))
    return a3 / a2;
  return result;
}

unsigned int *boost::movelib::detail_adaptive::adaptive_merge_combine_blocks<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, int a7, int a8, uint64_t *a9)
{
  uint64_t v11;
  unint64_t v12;
  int *v13;
  unint64_t v14;
  unsigned int *result;
  unint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v11 = a3 + a2 - a4;
  v12 = a2 - a4;
  if (a5)
  {
    v13 = &a1[a4];
    if (a8)
    {
      v14 = a9[1];
      if (v14 < a6)
      {
        boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>::initialize_until(a9, a6, a1);
        v14 = a9[1];
      }
      if (v14 < a6)
        boost::movelib::detail_adaptive::adaptive_merge_combine_blocks<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>();
      v22 = 0;
      v23 = 0;
      v20 = 0;
      v21 = 0;
      boost::movelib::detail_adaptive::combine_params<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned long,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>((uint64_t)a1, v11, v12, a6, (uint64_t)a9, &v23, (unint64_t *)&v22, (unint64_t *)&v21, &v20, 1);
      return boost::movelib::detail_adaptive::op_merge_blocks_with_buf<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *>(a1, v13, a6, v21, v23, v22, v20, (int *)*a9);
    }
    else
    {
      v22 = 0;
      v23 = 0;
      v20 = 0;
      v21 = 0;
      boost::movelib::detail_adaptive::combine_params<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned long,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>((uint64_t)a1, a3 + a2 - a4, v12, a6, (uint64_t)a9, &v23, (unint64_t *)&v22, (unint64_t *)&v21, &v20, 1);
      if (a7)
        return boost::movelib::detail_adaptive::op_merge_blocks_with_buf<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::swap_op,unsigned int *>(a1, v13, a6, v21, v23, v22, v20, &v13[-a6]);
      else
        return (unsigned int *)boost::movelib::detail_adaptive::merge_blocks_bufferless<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(a1, (char *)v13, a6, v21, v23, v22, v20);
    }
  }
  else
  {
    v16 = a9[1];
    if (v16 <= a6)
    {
      if (v16 < a6)
        boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>::initialize_until(a9, a6, a1);
    }
    else
    {
      a9[1] = a6;
    }
    v18 = *a9 + 4 * a6;
    v22 = 0;
    v23 = 0;
    v19 = (_QWORD *)((v18 + 7) & 0xFFFFFFFFFFFFFFF8);
    v20 = 0;
    v21 = 0;
    boost::movelib::detail_adaptive::combine_params<unsigned long *,boost::movelib::detail_adaptive::less,unsigned long,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>((uint64_t)v19, v11, v12, a6, (uint64_t)a9, &v23, (unint64_t *)&v22, (unint64_t *)&v21, &v20, 1);
    if (a9[1] < a6)
      boost::movelib::detail_adaptive::adaptive_merge_combine_blocks<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>();
    result = boost::movelib::detail_adaptive::op_merge_blocks_with_buf<unsigned long *,boost::movelib::detail_adaptive::less,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *>(v19, a1, a6, v21, v23, v22, v20, (int *)*a9);
    if (a9[1])
      a9[1] = 0;
  }
  return result;
}

unsigned int *boost::movelib::op_buffered_merge<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>(unsigned int *result, char *a2, char *a3, uint64_t a4)
{
  unsigned int v6;
  int *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  _DWORD *v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  int *v17;
  int *v18;
  unsigned int v19;

  if (result != (unsigned int *)a2 && a2 != a3)
  {
    v6 = *((_DWORD *)a2 - 1);
    if (*(_DWORD *)a2 < v6)
    {
      v8 = (int *)result;
      if (a2 - (char *)result <= (unint64_t)(a3 - a2))
      {
        v15 = (a2 - (char *)result) >> 2;
        do
        {
          v16 = v15 >> 1;
          v17 = &v8[v15 >> 1];
          v19 = *v17;
          v18 = v17 + 1;
          v15 += ~(v15 >> 1);
          if (*(_DWORD *)a2 < v19)
            v15 = v16;
          else
            v8 = v18;
        }
        while (v15);
        boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>::move_assign<unsigned int *>(a4, v8, (a2 - (char *)v8) >> 2);
        return (unsigned int *)boost::movelib::op_merge_with_right_placed<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,unsigned int *,boost::movelib::move_op>(*(char **)a4, (char *)(*(_QWORD *)a4 + 4 * *(_QWORD *)(a4 + 8)), (char *)v8, a2, a3);
      }
      else
      {
        v9 = (a3 - a2) >> 2;
        v10 = (uint64_t)a2;
        do
        {
          v11 = v9 >> 1;
          v12 = (unsigned int *)(v10 + 4 * (v9 >> 1));
          v14 = *v12;
          v13 = v12 + 1;
          v9 += ~(v9 >> 1);
          if (v14 >= v6)
            v9 = v11;
          else
            v10 = (uint64_t)v13;
        }
        while (v9);
        boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>::move_assign<unsigned int *>(a4, (int *)a2, (v10 - (uint64_t)a2) >> 2);
        return boost::movelib::op_merge_with_left_placed<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *,unsigned int *>((unsigned int *)v8, (unsigned int *)a2, v10, *(_QWORD *)a4, *(_QWORD *)a4 + 4 * *(_QWORD *)(a4 + 8));
      }
    }
  }
  return result;
}

uint64_t boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>::move_assign<unsigned int *>(uint64_t result, int *a2, unint64_t a3)
{
  unint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  int *v6;
  int v7;
  int *v8;
  uint64_t v9;
  int v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;

  v3 = *(_QWORD *)(result + 8);
  if (v3 >= a3)
  {
    if (a3)
    {
      v11 = *(_DWORD **)result;
      v12 = 4 * a3;
      do
      {
        v13 = *a2++;
        *v11++ = v13;
        v12 -= 4;
      }
      while (v12);
    }
  }
  else
  {
    v4 = *(_DWORD **)result;
    if (v3)
    {
      v5 = 4 * v3;
      v6 = a2;
      do
      {
        v7 = *v6++;
        *v4++ = v7;
        v5 -= 4;
      }
      while (v5);
    }
    if (v3 != a3)
    {
      v8 = &a2[v3];
      v9 = 4 * a3 - 4 * v3;
      do
      {
        v10 = *v8++;
        *v4++ = v10;
        v9 -= 4;
      }
      while (v9);
    }
  }
  *(_QWORD *)(result + 8) = a3;
  return result;
}

char *boost::movelib::op_merge_with_right_placed<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,unsigned int *,boost::movelib::move_op>(char *result, char *a2, char *a3, char *a4, char *a5)
{
  int v5;
  _BOOL4 v6;
  uint64_t v7;

  if (a2 - result != a4 - a3)
    boost::movelib::op_merge_with_right_placed<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,unsigned int *,boost::movelib::move_op>();
  while (result != a2)
  {
    if (a4 == a5)
    {
      v7 = 0;
      do
      {
        *(_DWORD *)&a3[v7] = *(_DWORD *)&result[v7];
        v7 += 4;
      }
      while (&result[v7] != a2);
      if (&a3[v7] != a5)
        boost::movelib::op_merge_with_right_placed<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,unsigned int *,boost::movelib::move_op>();
      return result;
    }
    v5 = *(_DWORD *)a4;
    v6 = *(_DWORD *)a4 >= *(_DWORD *)result;
    if (*(_DWORD *)a4 >= *(_DWORD *)result)
      v5 = *(_DWORD *)result;
    a4 += 4 * (*(_DWORD *)a4 < *(_DWORD *)result);
    result += 4 * v6;
    *(_DWORD *)a3 = v5;
    a3 += 4;
  }
  return result;
}

unsigned int *boost::movelib::op_merge_with_left_placed<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *,unsigned int *>(unsigned int *result, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;

  if (a3 - (_QWORD)a2 != a5 - a4)
    boost::movelib::op_merge_with_left_placed<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *,unsigned int *>();
  if (a5 != a4)
  {
    v5 = (unsigned int *)(a3 - 4);
    while (a2 != result)
    {
      v6 = *(_DWORD *)(a5 - 4);
      v7 = *(a2 - 1);
      v8 = v6 >= v7;
      if (v6 <= v7)
        v6 = *(a2 - 1);
      if (v8)
        a5 -= 4;
      else
        --a2;
      *v5-- = v6;
      if (a5 == a4)
        return result;
    }
    v9 = 0;
    do
    {
      v5[v9] = *(_DWORD *)(a5 + v9 * 4 - 4);
      --v9;
    }
    while (a5 + v9 * 4 != a4);
    if (&v5[v9 + 1] != result)
      boost::movelib::op_merge_with_left_placed<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *,unsigned int *>();
  }
  return result;
}

char *boost::movelib::merge_bufferless_ONlogN_recursive<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(char *result, char *a2, char *a3, unint64_t a4, unint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unsigned int v21;
  char *v22;
  char *v23;
  BOOL v24;
  int v25;

  if (a5)
  {
    v5 = a4;
    if (a4)
    {
      v6 = a5;
      v7 = result;
      while ((v6 | v5) != 1)
      {
        if (v6 + v5 <= 0xF)
          return boost::movelib::merge_bufferless_ON2<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(v7, a2, a3);
        if (v5 <= v6)
        {
          v16 = v6 >> 1;
          v10 = &a2[4 * (v6 >> 1)];
          if (a2 == v7)
          {
            v9 = v7;
          }
          else
          {
            v17 = (a2 - v7) >> 2;
            v9 = v7;
            do
            {
              v18 = v17 >> 1;
              v19 = &v9[4 * (v17 >> 1)];
              v21 = *(_DWORD *)v19;
              v20 = v19 + 4;
              v17 += ~(v17 >> 1);
              if (*(_DWORD *)v10 < v21)
                v17 = v18;
              else
                v9 = v20;
            }
            while (v17);
          }
          v8 = (v9 - v7) >> 2;
        }
        else
        {
          v8 = v5 >> 1;
          v9 = &v7[4 * (v5 >> 1)];
          v10 = a3;
          if (a3 != a2)
          {
            v11 = (a3 - a2) >> 2;
            v10 = a2;
            do
            {
              v12 = v11 >> 1;
              v13 = &v10[4 * (v11 >> 1)];
              v15 = *(_DWORD *)v13;
              v14 = v13 + 4;
              v11 += ~(v11 >> 1);
              if (v15 >= *(_DWORD *)v9)
                v11 = v12;
              else
                v10 = v14;
            }
            while (v11);
          }
          v16 = (v10 - a2) >> 2;
        }
        v22 = boost::movelib::rotate_gcd<unsigned int *>(v9, a2, v10);
        v23 = v22;
        if (v16 + v8 >= v6 + v5 - (v16 + v8))
        {
          result = (char *)boost::movelib::merge_bufferless_ONlogN_recursive<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(v22, v10, a3, v5 - v8, v6 - v16);
          v10 = v9;
          a3 = v23;
        }
        else
        {
          result = (char *)boost::movelib::merge_bufferless_ONlogN_recursive<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(v7, v9, v22, v8, v16);
          v8 = v5 - v8;
          v16 = v6 - v16;
          v7 = v23;
        }
        if (v16)
          v24 = v8 == 0;
        else
          v24 = 1;
        v6 = v16;
        v5 = v8;
        a2 = v10;
        if (v24)
          return result;
      }
      v25 = *(_DWORD *)v7;
      if (*(_DWORD *)a2 < *(_DWORD *)v7)
      {
        *(_DWORD *)v7 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v25;
      }
    }
  }
  return result;
}

char *boost::movelib::merge_bufferless_ON2<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(char *result, char *a2, char *a3)
{
  char *v3;
  char *v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  unsigned int v10;
  char *v11;
  unsigned int v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  unsigned int v18;
  char *v19;
  unsigned int v20;
  char *v21;

  v3 = a3;
  v4 = result;
  if (a2 - result >= a3 - a2)
  {
    if (a2 == a3)
      return result;
    while (a2 != v4)
    {
      v13 = (a2 - v4) >> 2;
      v14 = v4;
      do
      {
        v15 = v13 >> 1;
        v16 = &v14[4 * (v13 >> 1)];
        v18 = *(_DWORD *)v16;
        v17 = v16 + 4;
        v13 += ~(v13 >> 1);
        if (*((_DWORD *)v3 - 1) < v18)
          v13 = v15;
        else
          v14 = v17;
      }
      while (v13);
      result = boost::movelib::rotate_gcd<unsigned int *>(v14, a2, v3);
      if (v14 != v4)
      {
        v19 = result - 4;
        while (v19 != v14)
        {
          v20 = *((_DWORD *)v19 - 1);
          v19 -= 4;
          if (v20 < *((_DWORD *)v14 - 1))
          {
            v3 = v19 + 4;
            goto LABEL_27;
          }
        }
        v3 = v14;
LABEL_27:
        a2 = v14;
        if (v14 != v3)
          continue;
      }
      return result;
    }
    v21 = v4;
    return boost::movelib::rotate_gcd<unsigned int *>(v21, a2, v3);
  }
  if (result == a2)
    return result;
LABEL_3:
  if (a2 == v3)
  {
    v21 = v4;
    a2 = v3;
    return boost::movelib::rotate_gcd<unsigned int *>(v21, a2, v3);
  }
  v5 = (v3 - a2) >> 2;
  v6 = a2;
  do
  {
    v7 = v5 >> 1;
    v8 = &v6[4 * (v5 >> 1)];
    v10 = *(_DWORD *)v8;
    v9 = v8 + 4;
    v5 += ~(v5 >> 1);
    if (v10 >= *(_DWORD *)v4)
      v5 = v7;
    else
      v6 = v9;
  }
  while (v5);
  result = boost::movelib::rotate_gcd<unsigned int *>(v4, a2, v6);
  if (v6 != v3)
  {
    v11 = result + 4;
    while (v11 != v6)
    {
      v12 = *(_DWORD *)v11;
      v11 += 4;
      if (*(_DWORD *)v6 < v12)
      {
        v4 = v11 - 4;
        a2 = v6;
        goto LABEL_3;
      }
    }
  }
  return result;
}

char *boost::movelib::rotate_gcd<unsigned int *>(char *a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  int v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v3 = a3;
  if (a1 != a2)
  {
    v4 = a1;
    if (a2 == a3)
    {
      return a1;
    }
    else
    {
      v5 = &a3[-(a2 - a1)];
      if (v5 == a2)
      {
        v15 = 0;
        do
        {
          v16 = *(_DWORD *)&a1[v15];
          *(_DWORD *)&a1[v15] = *(_DWORD *)&a2[v15];
          *(_DWORD *)&a2[v15] = v16;
          v15 += 4;
        }
        while (&a1[v15] != a2);
        return a2;
      }
      else
      {
        v6 = (a2 - a1) >> 2;
        v7 = boost::movelib::gcd<unsigned long>((a3 - a1) >> 2, v6);
        if (v7)
        {
          v8 = &v4[4 * v7];
          v9 = &v4[4 * v6];
          do
          {
            v10 = *(_DWORD *)v4;
            v11 = &v4[4 * v6];
            v12 = v4;
            do
            {
              v13 = v11;
              *(_DWORD *)v12 = *(_DWORD *)v11;
              v14 = v3 - v11;
              if (v6 >= v14 >> 2)
                v11 = &v9[-v14];
              else
                v11 = &v13[4 * v6];
              v12 = v13;
            }
            while (v11 != v4);
            *(_DWORD *)v13 = v10;
            v4 += 4;
          }
          while (v4 != v8);
        }
        return v5;
      }
    }
  }
  return v3;
}

unint64_t boost::movelib::gcd<unsigned long>(unint64_t result, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;

  if ((a2 - 1) & a2 | (result - 1) & result)
  {
    if (((a2 | result) & 1) != 0)
    {
      v2 = 1;
      if (!result)
        return (a2 + result) * v2;
    }
    else
    {
      v2 = 1;
      do
      {
        v2 *= 2;
        result >>= 1;
        a2 >>= 1;
      }
      while (((a2 | result) & 1) == 0);
      if (!result)
        return (a2 + result) * v2;
    }
    if (a2)
    {
      do
      {
        v3 = (a2 - result) >> 1;
        v4 = (result - a2) >> 1;
        if (result >= a2)
          v3 = a2;
        else
          v4 = result;
        if ((a2 & 1) == 0)
        {
          v4 = result;
          v3 = a2 >> 1;
        }
        v5 = (result & 1) == 0;
        if ((result & 1) != 0)
          result = v4;
        else
          result >>= 1;
        if (!v5)
          a2 = v3;
      }
      while (result && a2);
    }
    return (a2 + result) * v2;
  }
  if (result >= a2)
    return a2;
  return result;
}

_DWORD *boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>::add<unsigned int *>(_QWORD *a1, _DWORD *a2)
{
  unint64_t v2;
  _DWORD *v3;

  v2 = a1[1];
  if (v2 >= a1[2])
    boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>::add<unsigned int *>();
  v3 = (_DWORD *)(*a1 + 4 * v2);
  *v3 = *a2;
  a1[1] = v2 + 1;
  return v3;
}

_DWORD *boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>::insert<unsigned int *>(_QWORD *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v5;
  _DWORD *result;
  uint64_t v8;
  _DWORD *v9;

  v5 = *a1 + 4 * a1[1];
  if ((_DWORD *)v5 == a2)
    return boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>::add<unsigned int *>(a1, a3);
  result = boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>::add<unsigned int *>(a1, (_DWORD *)(v5 - 4));
  v8 = *a1 + 4 * a1[1];
  if ((_DWORD *)(v8 - 8) != a2)
  {
    v9 = (_DWORD *)(v8 - 12);
    do
      v9[1] = *v9;
    while (v9-- != a2);
  }
  *a2 = *a3;
  return result;
}

uint64_t *boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>::initialize_until(uint64_t *result, unint64_t a2, int *a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  _DWORD *v7;

  v3 = result[1];
  if (v3 >= result[2])
    boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>::initialize_until();
  if (v3 < a2)
  {
    v4 = *result;
    v5 = *a3;
    *(_DWORD *)(*result + 4 * v3) = *a3;
    if (v3 + 1 != a2)
    {
      v6 = ~v3 + a2;
      v7 = (_DWORD *)(v4 + 4 * v3 + 4);
      do
      {
        *v7++ = v5;
        --v6;
      }
      while (v6);
    }
    result[1] = a2;
    *a3 = v5;
  }
  return result;
}

uint64_t boost::movelib::detail_adaptive::combine_params<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned long,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>(uint64_t result, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, unint64_t *a6, unint64_t *a7, unint64_t *a8, unint64_t *a9, char a10)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v10 = a3 / a4;
  *a8 = a3 % a4;
  v11 = (a2 - a3 % a4) % a4;
  *a9 = v11;
  v12 = a2 - *a8 - v11;
  v13 = v12 / a4;
  if (v12 % a4)
    boost::movelib::detail_adaptive::combine_params<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned long,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>();
  *a6 = v10;
  v14 = v13 - v10;
  *a7 = v14;
  if (v13 < *a6)
    boost::movelib::detail_adaptive::combine_params<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned long,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>();
  if (a10)
    return boost::movelib::detail_adaptive::initialize_keys<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>(result, result + 4 * (*a6 + v14));
  return result;
}

unsigned int *boost::movelib::detail_adaptive::op_merge_blocks_with_buf<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *>(_DWORD *a1, int *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, int *a8)
{
  uint64_t v8;
  int *v9;
  uint64_t v10;
  int *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  int *v18;
  int *v19;
  uint64_t v20;
  int *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int *v27;
  int *v28;
  int *v29;
  int *v30;
  int *v31;
  _BOOL4 v32;
  int *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  int v38;
  unint64_t v39;
  int *v40;
  int *v41;
  int *v42;
  int *v43;
  int *v44;
  int v45;
  int v46;
  int *v47;
  int *v48;
  int v49;
  int v50;
  BOOL v51;
  BOOL v52;
  uint64_t v53;
  unsigned int *v54;
  char v55;
  int *v56;
  uint64_t v57;
  int *v58;
  int v59;
  uint64_t *v60;
  uint64_t v61;
  unsigned int *v62;
  _DWORD *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int *v68;
  int *v70;
  unint64_t v71;
  _BOOL4 v72;
  int *v73;
  unint64_t v74;
  int v75;
  uint64_t v76;
  unsigned int *v77;
  int *v78;
  int *v79;
  uint64_t v80;
  _DWORD *v81;
  char *v82;
  int *v83;
  int *v84;
  int *v85;
  int *v86;

  v8 = a3;
  v9 = a2;
  v10 = (uint64_t)&a1[a5];
  v85 = a8;
  v86 = a8;
  v11 = &a2[a4];
  v84 = v11;
  v12 = a6 + a5;
  v68 = &v11[(a6 + a5) * a3];
  if (!(a6 + a5))
  {
    LOBYTE(v15) = 1;
    goto LABEL_71;
  }
  if (a6)
    v13 = a5;
  else
    v13 = 0;
  if (v13 + 1 < v12)
    v14 = v13 + 1;
  else
    v14 = a6 + a5;
  v70 = &a1[v12];
  v66 = a5;
  v67 = 4 * a3;
  v15 = 1;
  v16 = a5;
  v64 = a1;
  v65 = a6;
  v17 = a6;
  v18 = a1;
  v19 = v11;
  v73 = a8;
  while (1)
  {
    v76 = (uint64_t)v19;
    v75 = v15;
    v20 = v8;
    v21 = (int *)v10;
    v22 = boost::movelib::detail_adaptive::find_next_block<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>((uint64_t)v18, (uint64_t)v11, v8, v13, v14);
    v10 = (uint64_t)v21;
    v15 = v75;
    v8 = v20;
    v24 = v22;
    v25 = v22 + 2;
    if (v14 > v22 + 2)
      v25 = v14;
    if (v25 >= v12)
      v26 = v12;
    else
      v26 = v25;
    v27 = v84;
    v28 = v85;
    v29 = &v84[v24 * v20];
    v11 = &v84[v20];
    v30 = v86;
    v74 = v12;
    if (v17)
      goto LABEL_17;
    if (a7)
    {
      if (*v68 < *v29)
        goto LABEL_66;
LABEL_17:
      v31 = &v18[v24];
      if (v21 == v70)
      {
        v32 = 1;
        v33 = (int *)v76;
        if ((v75 & 1) != 0)
          goto LABEL_25;
      }
      else
      {
        v32 = *v31 < *v21;
        v33 = (int *)v76;
        if (((v75 ^ v32) & 1) == 0)
          goto LABEL_25;
      }
      goto LABEL_37;
    }
    if ((v75 & 1) != 0)
      break;
    v31 = &v18[v24];
    v33 = (int *)v76;
    if (v21 == v70)
    {
      v32 = 1;
    }
    else
    {
      v32 = *v31 < *v21;
      if (((v75 ^ v32) & 1) == 0)
      {
LABEL_25:
        a8 = v73;
        if (v86 != v85)
        {
          do
          {
            v34 = *v30++;
            *v9++ = v34;
          }
          while (v30 != v28);
          v85 = v73;
          v86 = v73;
          if (v9 != v33)
            boost::movelib::detail_adaptive::op_merge_blocks_with_buf<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *>((uint64_t)v27, (uint64_t)v33, v23);
        }
        v86 = v73;
        v28 = v73;
        if (v24 * v20)
        {
          if (v20)
          {
            v35 = v67;
            v36 = v67 * v24;
            v28 = v73;
            v37 = v27;
            do
            {
              *v28++ = *(int *)((char *)v37 + v36);
              *(int *)((char *)v37 + v36) = *v37;
              ++v37;
              v35 -= 4;
            }
            while (v35);
          }
          v38 = *v31;
          *v31 = *v18;
          *v18 = v38;
          v23 = (uint64_t)v18;
          if (v21 == v31 || (v23 = (uint64_t)v31, v21 == v18))
            v10 = v23;
        }
        v85 = v28;
        v30 = v73;
        v39 = v74;
        goto LABEL_54;
      }
    }
LABEL_37:
    v72 = v32;
    v71 = v26;
    v40 = v9;
    v41 = &v84[v20];
    v42 = &v84[v24 * v20];
    v27 = boost::movelib::detail_adaptive::op_partial_merge_and_save<unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op>(v40, v33, &v84, v11, v29, &v86, &v85, v75 & 1);
    v33 = (int *)v76;
    v8 = v20;
    v44 = v85;
    v43 = v86;
    if (v85 != v86 && (char *)v85 - (char *)v86 != v76 + 4 * v20 - (_QWORD)v27)
      boost::movelib::detail_adaptive::op_merge_blocks_with_buf<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *>((uint64_t)v27, v76, v23);
    if (v86 == v85)
    {
      a8 = v73;
      v86 = v73;
      v47 = v84;
      v11 = v41;
      v48 = (int *)((char *)&v42[v20] + (char *)v84 - (char *)v41);
      v10 = (uint64_t)v21;
      v26 = v71;
      v32 = v72;
      v28 = v73;
      if (v84 != v48)
      {
        if (v84 != v41)
        {
          v28 = v73;
          do
          {
            *v28++ = *v48;
            v49 = *v47++;
            *v48++ = v49;
          }
          while (v47 != v41);
        }
        v50 = *v31;
        *v31 = *v18;
        *v18 = v50;
        v23 = (uint64_t)v18;
        if (v21 == v31 || (v23 = (uint64_t)v31, v21 == v18))
          v10 = v23;
      }
      v45 = v75;
      v85 = v28;
      v30 = v73;
    }
    else
    {
      v45 = v75;
      a8 = v73;
      v10 = (uint64_t)v21;
      v11 = v41;
      v26 = v71;
      v32 = v72;
      if (v24
        && ((v46 = *v31, *v31 = *v18, *v18 = v46, v23 = (uint64_t)v18, v21 == v31) || (v23 = (uint64_t)v31, v21 == v18)))
      {
        v28 = v44;
        v30 = v43;
        v10 = v23;
      }
      else
      {
        v28 = v44;
        v30 = v43;
      }
    }
    v39 = v74;
    v15 = v45 ^ (v43 == v44);
LABEL_54:
    if (v16)
      v51 = v32;
    else
      v51 = 0;
    if (v17)
      v52 = !v32;
    else
      v52 = 0;
    if (!v51 && !v52)
      boost::movelib::detail_adaptive::op_merge_blocks_with_buf<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *>((uint64_t)v27, (uint64_t)v33, v23);
    v16 -= v32;
    v17 -= !v32;
    v19 = &v33[v8];
    v84 = v11;
    ++v18;
    v13 -= v13 != 0;
    v14 = v26 - (v26 != 0);
    v9 = v27;
    v12 = v39 - 1;
    if (!v12)
    {
      v9 = v27;
      a6 = v65;
      a5 = v66;
      a1 = v64;
      goto LABEL_67;
    }
  }
  LOBYTE(v15) = 1;
LABEL_66:
  a8 = v73;
  a6 = v65;
  a5 = v66;
  a1 = v64;
  v19 = (int *)v76;
LABEL_67:
  if (v30 != v28)
  {
    v53 = 0;
    do
    {
      v9[v53] = v30[v53];
      ++v53;
    }
    while (&v30[v53] != v28);
  }
  v11 = v19;
LABEL_71:
  v54 = (unsigned int *)v11;
  v55 = v15;
  if (a7)
  {
    v56 = v68;
    v57 = 4 * a7;
    v58 = a8;
    do
    {
      v59 = *v56++;
      *v58++ = v59;
      v57 -= 4;
    }
    while (v57);
  }
  v85 = &a8[a7];
  v86 = a8;
  v83 = v85;
  v80 = v10;
  v81 = &a1[a6 + a5];
  v79 = v68;
  v77 = (unsigned int *)&v68[a7];
  v78 = a8;
  v60 = boost::movelib::detail_adaptive::op_merge_blocks_with_irreg<boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::move_op>((uint64_t *)&v81, &v80, 0, (uint64_t *)&v79, (uint64_t *)&v83, (uint64_t *)&v78, &v77, v8, (unsigned int **)&v82, v12, 0, v12, 0, 1u);
  v85 = v83;
  if (v82 - (char *)v54 != (char *)v83 - (char *)v86)
    boost::movelib::detail_adaptive::op_merge_blocks_with_buf<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *>((uint64_t)v60, v61, (uint64_t)v82);
  if ((v55 & 1) != 0)
    v62 = (unsigned int *)v9;
  else
    v62 = v54;
  return boost::movelib::op_merge_with_left_placed<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *,unsigned int *>(v62, v54, (uint64_t)v82, (uint64_t)v86, (uint64_t)v83);
}

unsigned int *boost::movelib::detail_adaptive::op_merge_blocks_with_buf<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::swap_op,unsigned int *>(_DWORD *a1, int *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, int *a8)
{
  uint64_t v8;
  int *v9;
  uint64_t v10;
  int *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  int *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int *v28;
  int *v29;
  int *v30;
  int *v31;
  int *v32;
  _BOOL4 v33;
  int *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  int v39;
  int v40;
  unint64_t v41;
  int *v42;
  int *v43;
  int *v44;
  int *v45;
  int *v46;
  int v47;
  int v48;
  int *v49;
  int *v50;
  int v51;
  int v52;
  BOOL v53;
  BOOL v54;
  uint64_t v55;
  int v56;
  unsigned int *v57;
  char v58;
  int *v59;
  uint64_t v60;
  int *v61;
  int v62;
  uint64_t *v63;
  uint64_t v64;
  unsigned int *v65;
  _DWORD *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int *v71;
  int *v73;
  int *v74;
  _BOOL4 v75;
  int *v76;
  unint64_t v77;
  unint64_t v78;
  int v79;
  int *v80;
  int *v81;
  int *v82;
  uint64_t v83;
  _DWORD *v84;
  char *v85;
  char *v86;
  int *v87;
  int *v88;
  int *v89;

  v8 = a3;
  v9 = a2;
  v10 = (uint64_t)&a1[a5];
  v88 = a8;
  v89 = a8;
  v11 = &a2[a4];
  v87 = v11;
  v12 = a6 + a5;
  v71 = &v11[(a6 + a5) * a3];
  if (!(a6 + a5))
  {
    LOBYTE(v15) = 1;
    goto LABEL_75;
  }
  if (a6)
    v13 = a5;
  else
    v13 = 0;
  if (v13 + 1 < v12)
    v14 = v13 + 1;
  else
    v14 = a6 + a5;
  v74 = &a1[v12];
  v69 = a5;
  v70 = 4 * a3;
  v15 = 1;
  v16 = a5;
  v67 = a1;
  v68 = a6;
  v17 = a6;
  v18 = a1;
  v19 = v11;
  v76 = a8;
  while (1)
  {
    v77 = v16;
    v20 = (uint64_t)v19;
    v79 = v15;
    v21 = v8;
    v22 = (int *)v10;
    v23 = boost::movelib::detail_adaptive::find_next_block<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>((uint64_t)v18, (uint64_t)v11, v8, v13, v14);
    v10 = (uint64_t)v22;
    v15 = v79;
    v8 = v21;
    v25 = v23;
    v26 = v23 + 2;
    if (v14 > v23 + 2)
      v26 = v14;
    if (v26 >= v12)
      v27 = v12;
    else
      v27 = v26;
    v28 = v87;
    v29 = v88;
    v30 = &v87[v25 * v21];
    v11 = &v87[v21];
    v31 = v89;
    v78 = v12;
    if (v17)
      goto LABEL_17;
    if (a7)
    {
      if (*v71 < *v30)
        goto LABEL_70;
LABEL_17:
      v32 = &v18[v25];
      if (v22 == v74)
      {
        v33 = 1;
        v34 = (int *)v20;
        if ((v79 & 1) != 0)
          goto LABEL_25;
      }
      else
      {
        v33 = *v32 < *v22;
        v34 = (int *)v20;
        if (((v79 ^ v33) & 1) == 0)
          goto LABEL_25;
      }
      goto LABEL_38;
    }
    if ((v79 & 1) != 0)
      break;
    v32 = &v18[v25];
    v34 = (int *)v20;
    if (v22 == v74)
    {
      v33 = 1;
    }
    else
    {
      v33 = *v32 < *v22;
      if (((v79 ^ v33) & 1) == 0)
      {
LABEL_25:
        a8 = v76;
        if (v89 != v88)
        {
          do
          {
            v35 = *v31;
            *v31++ = *v9;
            *v9++ = v35;
          }
          while (v31 != v29);
          v88 = v76;
          v89 = v76;
          if (v9 != v34)
            boost::movelib::detail_adaptive::op_merge_blocks_with_buf<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *>((uint64_t)v28, (uint64_t)v34, v24);
        }
        v89 = v76;
        v29 = v76;
        if (v25 * v21)
        {
          if (v21)
          {
            v36 = v70;
            v37 = v70 * v25;
            v29 = v76;
            v38 = v28;
            do
            {
              v39 = *v29;
              *v29++ = *(int *)((char *)v38 + v37);
              *(int *)((char *)v38 + v37) = *v38;
              *v38++ = v39;
              v36 -= 4;
            }
            while (v36);
          }
          v40 = *v32;
          *v32 = *v18;
          *v18 = v40;
          v24 = (uint64_t)v18;
          v41 = v77;
          if (v22 == v32 || (v24 = (uint64_t)v32, v22 == v18))
            v10 = v24;
        }
        else
        {
          v41 = v77;
        }
        v88 = v29;
        v31 = v76;
        goto LABEL_58;
      }
    }
LABEL_38:
    v75 = v33;
    v73 = v32;
    v42 = v9;
    v43 = &v87[v21];
    v44 = &v87[v25 * v21];
    v28 = boost::movelib::detail_adaptive::op_partial_merge_and_save<unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::swap_op>(v42, v34, &v87, v11, v30, &v89, &v88, v79 & 1);
    v34 = (int *)v20;
    v8 = v21;
    v46 = v88;
    v45 = v89;
    if (v88 != v89 && (char *)v88 - (char *)v89 != v20 + 4 * v21 - (_QWORD)v28)
      boost::movelib::detail_adaptive::op_merge_blocks_with_buf<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *>((uint64_t)v28, v20, v24);
    if (v89 == v88)
    {
      a8 = v76;
      v89 = v76;
      v49 = v87;
      v11 = v43;
      v50 = (int *)((char *)&v44[v21] + (char *)v87 - (char *)v43);
      v10 = (uint64_t)v22;
      v33 = v75;
      v29 = v76;
      if (v87 == v50)
      {
        v47 = v79;
        v41 = v77;
      }
      else
      {
        v41 = v77;
        if (v87 != v43)
        {
          v29 = v76;
          do
          {
            v51 = *v29;
            *v29++ = *v50;
            *v50++ = *v49;
            *v49++ = v51;
          }
          while (v49 != v43);
        }
        v52 = *v73;
        *v73 = *v18;
        *v18 = v52;
        v24 = (uint64_t)v18;
        if (v22 == v73 || (v24 = (uint64_t)v73, v22 == v18))
          v10 = v24;
        v47 = v79;
      }
      v88 = v29;
      v31 = v76;
      v12 = v78;
    }
    else
    {
      v47 = v79;
      a8 = v76;
      v10 = (uint64_t)v22;
      v11 = v43;
      v33 = v75;
      if (v25
        && ((v48 = *v73, *v73 = *v18, *v18 = v48, v24 = (uint64_t)v18, v22 == v73) || (v24 = (uint64_t)v73, v22 == v18)))
      {
        v29 = v46;
        v31 = v45;
        v10 = v24;
      }
      else
      {
        v29 = v46;
        v31 = v45;
      }
      v41 = v77;
      v12 = v78;
    }
    v15 = v47 ^ (v45 == v46);
LABEL_58:
    if (v41)
      v53 = v33;
    else
      v53 = 0;
    if (v17)
      v54 = !v33;
    else
      v54 = 0;
    if (!v53 && !v54)
      boost::movelib::detail_adaptive::op_merge_blocks_with_buf<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *>((uint64_t)v28, (uint64_t)v34, v24);
    v16 = v41 - v33;
    v17 -= !v33;
    v19 = &v34[v8];
    v87 = v11;
    ++v18;
    v13 -= v13 != 0;
    v14 = v27 - (v27 != 0);
    v9 = v28;
    if (!--v12)
    {
      v9 = v28;
      a6 = v68;
      a5 = v69;
      a1 = v67;
      goto LABEL_71;
    }
  }
  LOBYTE(v15) = 1;
LABEL_70:
  a8 = v76;
  a6 = v68;
  a5 = v69;
  a1 = v67;
  v19 = (int *)v20;
LABEL_71:
  if (v31 != v29)
  {
    v55 = 0;
    do
    {
      v56 = v31[v55];
      v31[v55] = v9[v55];
      v9[v55++] = v56;
    }
    while (&v31[v55] != v29);
  }
  v11 = v19;
LABEL_75:
  v57 = (unsigned int *)v11;
  v58 = v15;
  if (a7)
  {
    v59 = v71;
    v60 = 4 * a7;
    v61 = a8;
    do
    {
      v62 = *v59;
      *v59++ = *v61;
      *v61++ = v62;
      v60 -= 4;
    }
    while (v60);
  }
  v88 = &a8[a7];
  v89 = a8;
  v86 = (char *)v88;
  v83 = v10;
  v84 = &a1[a6 + a5];
  v82 = v71;
  v80 = &v71[a7];
  v81 = a8;
  v63 = boost::movelib::detail_adaptive::op_merge_blocks_with_irreg<boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::swap_op>((uint64_t *)&v84, &v83, 0, (uint64_t *)&v82, (uint64_t *)&v86, (uint64_t *)&v81, &v80, v8, (int **)&v85, v12, 0, v12, 0, 0, 1u);
  v88 = (int *)v86;
  if (v85 - (char *)v57 != v86 - (char *)v89)
    boost::movelib::detail_adaptive::op_merge_blocks_with_buf<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *>((uint64_t)v63, v64, (uint64_t)v85);
  if ((v58 & 1) != 0)
    v65 = (unsigned int *)v9;
  else
    v65 = v57;
  return boost::movelib::op_merge_with_left_placed<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::swap_op,unsigned int *,unsigned int *>(v65, v57, (uint64_t)v85, (char *)v89, v86);
}

char *boost::movelib::detail_adaptive::merge_blocks_bufferless<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(_DWORD *a1, char *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  char *v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  _DWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  _DWORD *v25;
  int v26;
  _DWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int v32;
  char *v33;
  char *v35;
  uint64_t v37;
  char *v39;
  unsigned __int8 v41;

  v7 = a2;
  v8 = a6 + a5;
  v39 = &a2[4 * a4 + 4 * (a6 + a5) * a3];
  if (a6 + a5)
  {
    v10 = 0;
    v37 = a6 + a5;
    v11 = (uint64_t)&a2[4 * a4];
    v12 = &a1[a5];
    if (a6)
      v13 = a5;
    else
      v13 = 0;
    if (v13 + 1 < v8)
      v14 = v13 + 1;
    else
      v14 = a6 + a5;
    v15 = 4 * a3;
    v16 = 1;
    v35 = &a2[4 * a4];
    v17 = a1;
    do
    {
      v18 = v10;
      v19 = boost::movelib::detail_adaptive::find_next_block<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>((uint64_t)v17, v11, a3, v13, v14);
      v20 = v19 + 2;
      if (v14 > v19 + 2)
        v20 = v14;
      if (v20 >= v8)
        v20 = v8;
      v21 = v19 * a3;
      if (a7 && v16)
        v16 = *(_DWORD *)v39 >= *(_DWORD *)(v11 + 4 * v21);
      if (v21)
      {
        if (a3)
        {
          v22 = 0;
          v23 = v11 + v15 * v19;
          do
          {
            v24 = *(_DWORD *)(v11 + v22);
            *(_DWORD *)(v11 + v22) = *(_DWORD *)(v23 + v22);
            *(_DWORD *)(v23 + v22) = v24;
            v22 += 4;
          }
          while (v15 != v22);
        }
        v25 = &v17[v19];
        v26 = *v25;
        *v25 = *v17;
        *v17 = v26;
        v27 = v17;
        if (v12 == v25 || (v27 = v25, v12 == v17))
          v12 = v27;
      }
      v10 = v18 + v16;
      v11 += v15;
      ++v17;
      v13 -= v13 != 0;
      v14 = v20 - (v20 != 0);
      --v8;
    }
    while (v8);
    v41 = 1;
    if (v10)
    {
      v28 = a1;
      v29 = 4 * (v18 + v16);
      v30 = a2;
      v31 = v35;
      do
      {
        v32 = v12 == &a1[v37] || *v28 < *v12;
        v33 = v31;
        if (v41 != v32)
          v33 = boost::movelib::detail_adaptive::partial_merge_bufferless<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(v30, v31, &v31[v15], (char *)&v41);
        ++v28;
        v31 += v15;
        v30 = v33;
        v29 -= 4;
      }
      while (v29);
      if (v41)
        v7 = v33;
      else
        v7 = v31;
    }
    else
    {
      v7 = a2;
    }
  }
  else
  {
    v41 = 1;
  }
  return boost::movelib::merge_bufferless_ONlogN_recursive<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(v7, v39, &v39[4 * a7], (v39 - v7) >> 2, a7);
}

uint64_t boost::movelib::detail_adaptive::combine_params<unsigned long *,boost::movelib::detail_adaptive::less,unsigned long,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>(uint64_t result, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, unint64_t *a6, unint64_t *a7, unint64_t *a8, unint64_t *a9, char a10)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t i;

  v10 = a3 / a4;
  *a8 = a3 % a4;
  v11 = (a2 - a3 % a4) % a4;
  *a9 = v11;
  v12 = a2 - *a8 - v11;
  v13 = v12 / a4;
  if (v12 % a4)
    boost::movelib::detail_adaptive::combine_params<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned long,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>();
  *a6 = v10;
  v14 = v13 - v10;
  *a7 = v14;
  if (v13 < *a6)
    boost::movelib::detail_adaptive::combine_params<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned long,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>();
  if (a10)
  {
    v15 = *a6 + v14;
    if (v15)
    {
      for (i = 0; i != v15; ++i)
        *(_QWORD *)(result + 8 * i) = i;
    }
  }
  return result;
}

unsigned int *boost::movelib::detail_adaptive::op_merge_blocks_with_buf<unsigned long *,boost::movelib::detail_adaptive::less,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *>(_QWORD *a1, int *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, int *a8)
{
  uint64_t v8;
  int *v9;
  uint64_t v10;
  int *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  int *v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int *v27;
  int *v28;
  int *v29;
  int *v30;
  uint64_t *v31;
  _BOOL4 v32;
  int *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  unint64_t v39;
  int *v40;
  int *v41;
  int *v42;
  int *v43;
  int *v44;
  int v45;
  uint64_t v46;
  int *v47;
  int *v48;
  int v49;
  uint64_t v50;
  BOOL v51;
  BOOL v52;
  uint64_t v53;
  unsigned int *v54;
  char v55;
  int *v56;
  uint64_t v57;
  int *v58;
  int v59;
  uint64_t *v60;
  uint64_t v61;
  unsigned int *v62;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int *v68;
  uint64_t *v70;
  unint64_t v71;
  _BOOL4 v72;
  int *v73;
  unint64_t v74;
  int v75;
  uint64_t v76;
  unsigned int *v77;
  int *v78;
  int *v79;
  uint64_t v80;
  _QWORD *v81;
  char *v82;
  int *v83;
  int *v84;
  int *v85;
  int *v86;

  v8 = a3;
  v9 = a2;
  v10 = (uint64_t)&a1[a5];
  v85 = a8;
  v86 = a8;
  v11 = &a2[a4];
  v84 = v11;
  v12 = a6 + a5;
  v68 = &v11[(a6 + a5) * a3];
  if (!(a6 + a5))
  {
    LOBYTE(v15) = 1;
    goto LABEL_71;
  }
  if (a6)
    v13 = a5;
  else
    v13 = 0;
  if (v13 + 1 < v12)
    v14 = v13 + 1;
  else
    v14 = a6 + a5;
  v70 = &a1[v12];
  v66 = a5;
  v67 = 4 * a3;
  v15 = 1;
  v16 = a5;
  v64 = a1;
  v65 = a6;
  v17 = a6;
  v18 = a1;
  v19 = v11;
  v73 = a8;
  while (1)
  {
    v76 = (uint64_t)v19;
    v75 = v15;
    v20 = v8;
    v21 = (uint64_t *)v10;
    v22 = boost::movelib::detail_adaptive::find_next_block<unsigned long *,boost::movelib::detail_adaptive::less,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>((uint64_t)v18, (uint64_t)v11, v8, v13, v14);
    v10 = (uint64_t)v21;
    v15 = v75;
    v8 = v20;
    v24 = v22;
    v25 = v22 + 2;
    if (v14 > v22 + 2)
      v25 = v14;
    if (v25 >= v12)
      v26 = v12;
    else
      v26 = v25;
    v27 = v84;
    v28 = v85;
    v29 = &v84[v24 * v20];
    v11 = &v84[v20];
    v30 = v86;
    v74 = v12;
    if (v17)
      goto LABEL_17;
    if (a7)
    {
      if (*v68 < *v29)
        goto LABEL_66;
LABEL_17:
      v31 = &v18[v24];
      if (v21 == v70)
      {
        v32 = 1;
        v33 = (int *)v76;
        if ((v75 & 1) != 0)
          goto LABEL_25;
      }
      else
      {
        v32 = *v31 < (unint64_t)*v21;
        v33 = (int *)v76;
        if (((v75 ^ v32) & 1) == 0)
          goto LABEL_25;
      }
      goto LABEL_37;
    }
    if ((v75 & 1) != 0)
      break;
    v31 = &v18[v24];
    v33 = (int *)v76;
    if (v21 == v70)
    {
      v32 = 1;
    }
    else
    {
      v32 = *v31 < (unint64_t)*v21;
      if (((v75 ^ v32) & 1) == 0)
      {
LABEL_25:
        a8 = v73;
        if (v86 != v85)
        {
          do
          {
            v34 = *v30++;
            *v9++ = v34;
          }
          while (v30 != v28);
          v85 = v73;
          v86 = v73;
          if (v9 != v33)
            boost::movelib::detail_adaptive::op_merge_blocks_with_buf<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *>((uint64_t)v27, (uint64_t)v33, v23);
        }
        v86 = v73;
        v28 = v73;
        if (v24 * v20)
        {
          if (v20)
          {
            v35 = v67;
            v36 = v67 * v24;
            v28 = v73;
            v37 = v27;
            do
            {
              *v28++ = *(int *)((char *)v37 + v36);
              *(int *)((char *)v37 + v36) = *v37;
              ++v37;
              v35 -= 4;
            }
            while (v35);
          }
          v38 = *v31;
          *v31 = *v18;
          *v18 = v38;
          v23 = (uint64_t)v18;
          if (v21 == v31 || (v23 = (uint64_t)v31, v21 == v18))
            v10 = v23;
        }
        v85 = v28;
        v30 = v73;
        v39 = v74;
        goto LABEL_54;
      }
    }
LABEL_37:
    v72 = v32;
    v71 = v26;
    v40 = v9;
    v41 = &v84[v20];
    v42 = &v84[v24 * v20];
    v27 = boost::movelib::detail_adaptive::op_partial_merge_and_save<unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op>(v40, v33, &v84, v11, v29, &v86, &v85, v75 & 1);
    v33 = (int *)v76;
    v8 = v20;
    v44 = v85;
    v43 = v86;
    if (v85 != v86 && (char *)v85 - (char *)v86 != v76 + 4 * v20 - (_QWORD)v27)
      boost::movelib::detail_adaptive::op_merge_blocks_with_buf<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *>((uint64_t)v27, v76, v23);
    if (v86 == v85)
    {
      a8 = v73;
      v86 = v73;
      v47 = v84;
      v11 = v41;
      v48 = (int *)((char *)&v42[v20] + (char *)v84 - (char *)v41);
      v10 = (uint64_t)v21;
      v26 = v71;
      v32 = v72;
      v28 = v73;
      if (v84 != v48)
      {
        if (v84 != v41)
        {
          v28 = v73;
          do
          {
            *v28++ = *v48;
            v49 = *v47++;
            *v48++ = v49;
          }
          while (v47 != v41);
        }
        v50 = *v31;
        *v31 = *v18;
        *v18 = v50;
        v23 = (uint64_t)v18;
        if (v21 == v31 || (v23 = (uint64_t)v31, v21 == v18))
          v10 = v23;
      }
      v45 = v75;
      v85 = v28;
      v30 = v73;
    }
    else
    {
      v45 = v75;
      a8 = v73;
      v10 = (uint64_t)v21;
      v11 = v41;
      v26 = v71;
      v32 = v72;
      if (v24
        && ((v46 = *v31, *v31 = *v18, *v18 = v46, v23 = (uint64_t)v18, v21 == v31) || (v23 = (uint64_t)v31, v21 == v18)))
      {
        v28 = v44;
        v30 = v43;
        v10 = v23;
      }
      else
      {
        v28 = v44;
        v30 = v43;
      }
    }
    v39 = v74;
    v15 = v45 ^ (v43 == v44);
LABEL_54:
    if (v16)
      v51 = v32;
    else
      v51 = 0;
    if (v17)
      v52 = !v32;
    else
      v52 = 0;
    if (!v51 && !v52)
      boost::movelib::detail_adaptive::op_merge_blocks_with_buf<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *>((uint64_t)v27, (uint64_t)v33, v23);
    v16 -= v32;
    v17 -= !v32;
    v19 = &v33[v8];
    v84 = v11;
    ++v18;
    v13 -= v13 != 0;
    v14 = v26 - (v26 != 0);
    v9 = v27;
    v12 = v39 - 1;
    if (!v12)
    {
      v9 = v27;
      a6 = v65;
      a5 = v66;
      a1 = v64;
      goto LABEL_67;
    }
  }
  LOBYTE(v15) = 1;
LABEL_66:
  a8 = v73;
  a6 = v65;
  a5 = v66;
  a1 = v64;
  v19 = (int *)v76;
LABEL_67:
  if (v30 != v28)
  {
    v53 = 0;
    do
    {
      v9[v53] = v30[v53];
      ++v53;
    }
    while (&v30[v53] != v28);
  }
  v11 = v19;
LABEL_71:
  v54 = (unsigned int *)v11;
  v55 = v15;
  if (a7)
  {
    v56 = v68;
    v57 = 4 * a7;
    v58 = a8;
    do
    {
      v59 = *v56++;
      *v58++ = v59;
      v57 -= 4;
    }
    while (v57);
  }
  v85 = &a8[a7];
  v86 = a8;
  v83 = v85;
  v80 = v10;
  v81 = &a1[a6 + a5];
  v79 = v68;
  v77 = (unsigned int *)&v68[a7];
  v78 = a8;
  v60 = boost::movelib::detail_adaptive::op_merge_blocks_with_irreg<boost::movelib::reverse_iterator<unsigned long *>,boost::movelib::inverse<boost::movelib::detail_adaptive::less>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::move_op>((uint64_t *)&v81, &v80, 0, (uint64_t *)&v79, (uint64_t *)&v83, (uint64_t *)&v78, &v77, v8, (unsigned int **)&v82, v12, 0, v12, 0, 1u);
  v85 = v83;
  if (v82 - (char *)v54 != (char *)v83 - (char *)v86)
    boost::movelib::detail_adaptive::op_merge_blocks_with_buf<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *>((uint64_t)v60, v61, (uint64_t)v82);
  if ((v55 & 1) != 0)
    v62 = (unsigned int *)v9;
  else
    v62 = v54;
  return boost::movelib::op_merge_with_left_placed<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *,unsigned int *>(v62, v54, (uint64_t)v82, (uint64_t)v86, (uint64_t)v83);
}

uint64_t boost::movelib::detail_adaptive::initialize_keys<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int *i;
  unsigned int v6;
  unsigned int v7;

  result = boost::movelib::heap_sort_helper<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::sort(a1, a2);
  if (a1 != a2)
  {
    for (i = (unsigned int *)(a1 + 4); i != (unsigned int *)a2; ++i)
    {
      v6 = *(i - 1);
      v7 = *i;
      if (v6 >= v7)
        boost::movelib::detail_adaptive::initialize_keys<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>();
    }
  }
  return result;
}

uint64_t boost::movelib::heap_sort_helper<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::sort(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int *i;
  unsigned int v6;
  unsigned int v7;

  boost::movelib::heap_sort_helper<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::make_heap(a1, a2);
  result = boost::movelib::heap_sort_helper<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::sort_heap(a1, a2);
  if (a1 != a2)
  {
    for (i = (unsigned int *)(a1 + 4); i != (unsigned int *)a2; ++i)
    {
      v7 = *(i - 1);
      v6 = *i;
      if (v6 < v7)
        boost::movelib::heap_sort_helper<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::sort();
    }
  }
  return result;
}

uint64_t boost::movelib::heap_sort_helper<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::make_heap(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a2 - result;
  if ((unint64_t)(a2 - result) >= 5)
  {
    v9 = v2;
    v10 = v3;
    v5 = result;
    v6 = v4 >> 2;
    v7 = ((unint64_t)(v4 >> 2) >> 1) - 1;
    do
    {
      v8 = *(_DWORD *)(v5 + 4 * v7);
      result = boost::movelib::heap_sort_helper<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::adjust_heap(v5, v7--, v6, &v8);
    }
    while (v7 != -1);
  }
  return result;
}

uint64_t boost::movelib::heap_sort_helper<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::sort_heap(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  if ((unint64_t)(a2 - result) >= 5)
  {
    v8 = v2;
    v9 = v3;
    v4 = (unsigned int *)result;
    v5 = (a2 - result) >> 2;
    v6 = (unsigned int *)(a2 - 4);
    do
    {
      v7 = *v6;
      *v6-- = *v4;
      result = boost::movelib::heap_sort_helper<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::adjust_heap((uint64_t)v4, 0, --v5, &v7);
    }
    while (v5 > 1);
  }
  return result;
}

uint64_t boost::movelib::heap_sort_helper<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::adjust_heap(uint64_t result, unint64_t a2, unint64_t a3, unsigned int *a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;

  v4 = 2 * a2;
  v5 = 2 * a2 + 2;
  if (v5 >= a3)
  {
    v7 = a2;
  }
  else
  {
    v6 = a2;
    do
    {
      v7 = v4 | 1;
      if (*(_DWORD *)(result + 4 * v5) >= *(_DWORD *)(result + 4 * (v4 | 1)))
        v7 = v5;
      *(_DWORD *)(result + 4 * v6) = *(_DWORD *)(result + 4 * v7);
      v4 = 2 * v7;
      v5 = 2 * v7 + 2;
      v6 = v7;
    }
    while (v5 < a3);
  }
  if (v5 == a3)
  {
    v8 = v4 | 1;
    *(_DWORD *)(result + 4 * v7) = *(_DWORD *)(result + 4 * v8);
    v7 = v8;
  }
  if (v7 > a2)
  {
    while (1)
    {
      v9 = (v7 - 1) >> 1;
      v10 = *(_DWORD *)(result + 4 * v9);
      if (v10 >= *a4)
        break;
      *(_DWORD *)(result + 4 * v7) = v10;
      v7 = (v7 - 1) >> 1;
      if (v9 <= a2)
        goto LABEL_15;
    }
  }
  v9 = v7;
LABEL_15:
  *(_DWORD *)(result + 4 * v9) = *a4;
  return result;
}

unint64_t boost::movelib::detail_adaptive::find_next_block<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  if (a4 > a5)
    boost::movelib::detail_adaptive::find_next_block<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(a1, a2, a3);
  v5 = 0;
  if (a4 < a5)
  {
    v6 = (unsigned int *)(a2 + 4 * a4 * a3);
    do
    {
      v7 = *(_DWORD *)(a2 + 4 * v5 * a3);
      if (*v6 < v7 || v7 >= *v6 && *(_DWORD *)(a1 + 4 * a4) < *(_DWORD *)(a1 + 4 * v5))
        v5 = a4;
      v6 += a3;
      ++a4;
    }
    while (a5 != a4);
  }
  return v5;
}

int *boost::movelib::detail_adaptive::op_partial_merge_and_save<unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op>(int *a1, int *a2, int **a3, int *a4, int *a5, int **a6, int **a7, int a8)
{
  if (a8)
    return boost::movelib::detail_adaptive::op_partial_merge_and_save_impl<unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op>(a1, a2, a3, a4, a5, a6, a7);
  else
    return boost::movelib::detail_adaptive::op_partial_merge_and_save_impl<unsigned int *,unsigned int *,boost::movelib::antistable<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::move_op>(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t *boost::movelib::detail_adaptive::op_merge_blocks_with_irreg<boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::move_op>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, unsigned __int8 a3@<W2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, unsigned int **a7@<X6>, uint64_t a8@<X7>, unsigned int **a9@<X8>, unint64_t a10, unint64_t a11, unint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  unint64_t v15;
  uint64_t *v17;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  uint64_t v44;
  uint64_t v49;
  unsigned int *v50;
  unsigned int *v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int *v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int *v57;
  uint64_t v58;
  uint64_t v59;

  v15 = a10;
  if (a10)
  {
    v17 = result;
    v44 = a3;
    v49 = -a8;
    v20 = *result;
    do
    {
      v59 = v20;
      v58 = *a4;
      v21 = boost::movelib::detail_adaptive::find_next_block<boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>>(&v59, v44, &v58, a8, a11, a12);
      v22 = v21;
      v23 = v21 + 2;
      if (a12 > v21 + 2)
        v23 = a12;
      if (v23 >= v15)
        v24 = v15;
      else
        v24 = v23;
      v25 = (unsigned int *)(*a4 + 4 * v49);
      v26 = (unsigned int *)(*a4 - 4 * v21 * a8);
      v57 = v26;
      v27 = *a6;
      if (v21)
      {
        v54 = v25;
        v55 = v27;
        v53 = *a7;
        result = boost::movelib::detail_adaptive::op_partial_merge_and_swap<boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::move_op>(a5, &v55, a4, (uint64_t *)&v54, &v57, &v53, a14, &v56);
        v28 = v56;
        *a7 = v56;
        v29 = *a4;
        if ((unsigned int *)*a4 == v28)
        {
          v35 = v57;
          while (v35 != &v26[v49])
          {
            v37 = *--v35;
            v36 = v37;
            v38 = *--v28;
            *v35 = v38;
            *v28 = v36;
          }
        }
        else if ((unsigned int *)v29 != v25)
        {
          v30 = v57 - 1;
          do
          {
            *--v28 = *v30;
            v31 = *(_DWORD *)(v29 - 4);
            v29 -= 4;
            *v30-- = v31;
          }
          while ((unsigned int *)v29 != v25);
        }
      }
      else
      {
        v51 = v25;
        v52 = v27;
        v50 = *a7;
        result = boost::movelib::detail_adaptive::op_partial_merge<boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::move_op>(a5, &v52, a4, (uint64_t *)&v51, &v50, a14, &v56);
        v32 = v56;
        *a7 = v56;
        v33 = *a4;
        v28 = v25;
        if ((unsigned int *)*a4 != v32)
        {
          v28 = v32;
          while ((unsigned int *)v33 != v25)
          {
            v34 = *(_DWORD *)(v33 - 4);
            v33 -= 4;
            *--v28 = v34;
          }
        }
      }
      *a7 = v28;
      if (v25 != v57)
      {
        v39 = *v17;
        v40 = *v17 - 4 * v22;
        v41 = *(_DWORD *)(v40 - 4);
        *(_DWORD *)(v40 - 4) = *(_DWORD *)(*v17 - 4);
        *(_DWORD *)(v39 - 4) = v41;
        if (v40 == *a2 || (v42 = *a2 == v39, v39 = v40, v42))
          *a2 = v39;
      }
      *a4 = (uint64_t)v25;
      v20 = *v17 - 4;
      *v17 = v20;
      a11 -= a11 != 0;
      a12 = v24 - (v24 != 0);
      --v15;
    }
    while (v15);
  }
  *a9 = *a7;
  return result;
}

int *boost::movelib::detail_adaptive::op_partial_merge_and_save_impl<unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op>(int *a1, int *a2, int **a3, int *a4, int *a5, int **a6, int **a7)
{
  int *v13;
  int *v14;
  int *v15;
  int *v16;
  int *v18;
  int *v19;
  int v20;
  int v21;
  int *v23;
  int v24;
  int v25;
  int *v27;
  int *v28;
  int *v29;

  v28 = 0;
  v29 = a5;
  v13 = *a6;
  v14 = *a7;
  v15 = *a3;
  v27 = *a3;
  if (v13 == v14)
  {
    v16 = a2;
    if (a1 != a2)
    {
      v16 = a1;
      while (*a5 >= *v16)
      {
        if (++v16 == a2)
        {
          v16 = a2;
          break;
        }
      }
    }
    v28 = (int *)((char *)v13 + (char *)v16 - (char *)a1);
    if (v15 == a5)
    {
      v14 = boost::movelib::detail_adaptive::op_buffered_partial_merge_to_range1_and_buffer<unsigned int *,unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op>(v16, a2, &v27, a4, &v28);
      a5 = v27;
      v13 = v28;
      a1 = a2;
LABEL_24:
      if (a5 != a4 && v13 != v14)
      {
        do
        {
          v23 = a1 + 1;
          while (1)
          {
            a1 = v23;
            v24 = *a5;
            v25 = *v13;
            if (*a5 >= *v13)
              break;
            ++a5;
            *(a1 - 1) = v24;
            v23 = a1 + 1;
            if (a5 == a4)
            {
              v15 = a4;
              goto LABEL_37;
            }
          }
          ++v13;
          *(a1 - 1) = v25;
        }
        while (v13 != v14);
        v15 = a5;
LABEL_36:
        v13 = v14;
        goto LABEL_37;
      }
      v15 = a5;
      goto LABEL_37;
    }
    v14 = boost::movelib::detail_adaptive::op_buffered_partial_merge_and_swap_to_range1_and_buffer<unsigned int *,unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op>(v16, a2, &v27, a4, &v29, &v28);
    v15 = v27;
    v13 = v28;
    a1 = a2;
  }
  else
  {
    if ((char *)a2 - (char *)a1 != (char *)v14 - (char *)v13)
      boost::movelib::detail_adaptive::op_partial_merge_and_save_impl<unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op>((uint64_t)v14, (uint64_t)a2, (uint64_t)a3);
    if (v15 == a5)
      goto LABEL_24;
  }
  if (v15 != a4 && v13 != v14)
  {
    v18 = v29;
    do
    {
      v19 = a1;
      while (1)
      {
        v20 = *v13;
        if (*v18 >= *v13)
          break;
        *v19++ = *v18;
        v21 = *v15++;
        *v18++ = v21;
        if (v15 == a4)
        {
          v15 = a4;
          a1 = v19;
          goto LABEL_37;
        }
      }
      ++v13;
      *v19 = v20;
      a1 = v19 + 1;
    }
    while (v13 != v14);
    a1 = v19 + 1;
    goto LABEL_36;
  }
LABEL_37:
  *a6 = v13;
  *a7 = v14;
  *a3 = v15;
  return a1;
}

int *boost::movelib::detail_adaptive::op_partial_merge_and_save_impl<unsigned int *,unsigned int *,boost::movelib::antistable<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::move_op>(int *a1, int *a2, int **a3, int *a4, int *a5, int **a6, int **a7)
{
  int *v13;
  int *v14;
  int *v15;
  int *v16;
  int *v18;
  int *v19;
  int v20;
  int v21;
  int *v23;
  int v24;
  int v25;
  int *v27;
  int *v28;
  int *v29;

  v28 = 0;
  v29 = a5;
  v13 = *a6;
  v14 = *a7;
  v15 = *a3;
  v27 = *a3;
  if (v13 == v14)
  {
    v16 = a2;
    if (a1 != a2)
    {
      v16 = a1;
      while (*v16 < *a5)
      {
        if (++v16 == a2)
        {
          v16 = a2;
          break;
        }
      }
    }
    v28 = (int *)((char *)v13 + (char *)v16 - (char *)a1);
    if (v15 == a5)
    {
      v14 = boost::movelib::detail_adaptive::op_buffered_partial_merge_to_range1_and_buffer<unsigned int *,unsigned int *,unsigned int *,boost::movelib::antistable<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::move_op>(v16, a2, &v27, a4, &v28);
      a5 = v27;
      v13 = v28;
      a1 = a2;
LABEL_24:
      if (a5 != a4 && v13 != v14)
      {
        do
        {
          v23 = a1 + 1;
          while (1)
          {
            a1 = v23;
            v24 = *v13;
            v25 = *a5;
            if (*v13 < *a5)
              break;
            ++a5;
            *(a1 - 1) = v25;
            v23 = a1 + 1;
            if (a5 == a4)
            {
              v15 = a4;
              goto LABEL_37;
            }
          }
          ++v13;
          *(a1 - 1) = v24;
        }
        while (v13 != v14);
        v15 = a5;
LABEL_36:
        v13 = v14;
        goto LABEL_37;
      }
      v15 = a5;
      goto LABEL_37;
    }
    v14 = boost::movelib::detail_adaptive::op_buffered_partial_merge_and_swap_to_range1_and_buffer<unsigned int *,unsigned int *,unsigned int *,boost::movelib::antistable<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::move_op>(v16, a2, &v27, a4, &v29, &v28);
    v15 = v27;
    v13 = v28;
    a1 = a2;
  }
  else
  {
    if ((char *)a2 - (char *)a1 != (char *)v14 - (char *)v13)
      boost::movelib::detail_adaptive::op_partial_merge_and_save_impl<unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op>((uint64_t)v14, (uint64_t)a2, (uint64_t)a3);
    if (v15 == a5)
      goto LABEL_24;
  }
  if (v15 != a4 && v13 != v14)
  {
    v18 = v29;
    do
    {
      v19 = a1;
      while (1)
      {
        v20 = *v13;
        if (*v13 < *v18)
          break;
        *v19++ = *v18;
        v21 = *v15++;
        *v18++ = v21;
        if (v15 == a4)
        {
          v15 = a4;
          a1 = v19;
          goto LABEL_37;
        }
      }
      ++v13;
      *v19 = v20;
      a1 = v19 + 1;
    }
    while (v13 != v14);
    a1 = v19 + 1;
    goto LABEL_36;
  }
LABEL_37:
  *a6 = v13;
  *a7 = v14;
  *a3 = v15;
  return a1;
}

int *boost::movelib::detail_adaptive::op_buffered_partial_merge_and_swap_to_range1_and_buffer<unsigned int *,unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op>(int *a1, int *a2, int **a3, int *a4, int **a5, int **a6)
{
  int *result;
  int *v8;
  int *v9;
  int *v10;
  int *v11;
  int *v12;
  int v13;
  int *v14;
  int *v15;
  int *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;

  result = *a6;
  if (a1 != a2)
  {
    v8 = *a3;
    if (*a3 != a4)
    {
      v9 = *a5;
      *result = *a1;
      v10 = result + 1;
      *a1 = *v9;
      v11 = a1 + 1;
      v13 = *v8;
      v12 = v8 + 1;
      *v9 = v13;
      v14 = v9 + 1;
      while (v11 != a2)
      {
        if (v12 == a4)
        {
          v18 = 0;
          do
          {
            v19 = (uint64_t)&v11[v18 + 1];
            result[v18] = v11[v18];
            ++v18;
          }
          while ((int *)v19 != a2);
          v10 = &result[v18];
          v12 = a4;
          break;
        }
        if (*v14 >= *result)
        {
          v15 = result++;
          v16 = v11;
          v17 = v10;
        }
        else
        {
          v15 = v12++;
          v16 = v14++;
          *v10 = *v11;
          v17 = v11;
        }
        *v17 = *v16;
        *v16 = *v15;
        ++v10;
        ++v11;
      }
      *a3 = v12;
      *a6 = result;
      result = v10;
      *a5 = v14;
    }
  }
  return result;
}

int *boost::movelib::detail_adaptive::op_buffered_partial_merge_to_range1_and_buffer<unsigned int *,unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op>(int *a1, int *a2, int **a3, int *a4, int **a5)
{
  int *result;
  int *v7;
  int *v8;
  int *v9;
  int v10;
  int *v11;
  BOOL v12;
  int *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;

  result = *a5;
  if (a1 != a2)
  {
    v7 = *a3;
    if (*a3 != a4)
    {
      *result = *a1;
      v8 = result + 1;
      v10 = *v7;
      v9 = v7 + 1;
      *a1 = v10;
      v11 = a1 + 1;
      if (v11 == a2)
      {
        v13 = result;
        v14 = v9;
      }
      else
      {
        while (v9 != a4)
        {
          v12 = *v9 >= *result;
          v13 = &result[v12];
          v14 = &v9[*v9 < *result];
          *v8++ = *v11;
          if (v12)
            v9 = result;
          *v11++ = *v9;
          v9 = v14;
          result += v12;
          if (v11 == a2)
            goto LABEL_13;
        }
        v15 = 0;
        do
        {
          v16 = (uint64_t)&v11[v15 + 1];
          result[v15] = v11[v15];
          ++v15;
        }
        while ((int *)v16 != a2);
        v8 = &result[v15];
        v13 = result;
        v14 = a4;
      }
LABEL_13:
      *a3 = v14;
      *a5 = v13;
      return v8;
    }
  }
  return result;
}

int *boost::movelib::detail_adaptive::op_buffered_partial_merge_and_swap_to_range1_and_buffer<unsigned int *,unsigned int *,unsigned int *,boost::movelib::antistable<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::move_op>(int *a1, int *a2, int **a3, int *a4, int **a5, int **a6)
{
  int *result;
  int *v8;
  int *v9;
  int *v10;
  int *v11;
  int *v12;
  int v13;
  int *v14;
  int *v15;
  int *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;

  result = *a6;
  if (a1 != a2)
  {
    v8 = *a3;
    if (*a3 != a4)
    {
      v9 = *a5;
      *result = *a1;
      v10 = result + 1;
      *a1 = *v9;
      v11 = a1 + 1;
      v13 = *v8;
      v12 = v8 + 1;
      *v9 = v13;
      v14 = v9 + 1;
      while (v11 != a2)
      {
        if (v12 == a4)
        {
          v18 = 0;
          do
          {
            v19 = (uint64_t)&v11[v18 + 1];
            result[v18] = v11[v18];
            ++v18;
          }
          while ((int *)v19 != a2);
          v10 = &result[v18];
          v12 = a4;
          break;
        }
        if (*result >= *v14)
        {
          v15 = v12++;
          v16 = v14++;
          *v10 = *v11;
          v17 = v11;
        }
        else
        {
          v15 = result++;
          v16 = v11;
          v17 = v10;
        }
        *v17 = *v16;
        *v16 = *v15;
        ++v10;
        ++v11;
      }
      *a3 = v12;
      *a6 = result;
      result = v10;
      *a5 = v14;
    }
  }
  return result;
}

int *boost::movelib::detail_adaptive::op_buffered_partial_merge_to_range1_and_buffer<unsigned int *,unsigned int *,unsigned int *,boost::movelib::antistable<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::move_op>(int *a1, int *a2, int **a3, int *a4, int **a5)
{
  int *result;
  int *v7;
  int *v8;
  int *v9;
  int v10;
  int *v11;
  BOOL v12;
  int *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;

  result = *a5;
  if (a1 != a2)
  {
    v7 = *a3;
    if (*a3 != a4)
    {
      *result = *a1;
      v8 = result + 1;
      v10 = *v7;
      v9 = v7 + 1;
      *a1 = v10;
      v11 = a1 + 1;
      if (v11 == a2)
      {
        v13 = result;
        v14 = v9;
      }
      else
      {
        while (v9 != a4)
        {
          v12 = *result >= *v9;
          v13 = &result[*result < *v9];
          v14 = &v9[v12];
          *v8++ = *v11;
          if (!v12)
            v9 = result;
          *v11++ = *v9;
          v9 = v14;
          result = v13;
          if (v11 == a2)
            goto LABEL_13;
        }
        v15 = 0;
        do
        {
          v16 = (uint64_t)&v11[v15 + 1];
          result[v15] = v11[v15];
          ++v15;
        }
        while ((int *)v16 != a2);
        v8 = &result[v15];
        v13 = result;
        v14 = a4;
      }
LABEL_13:
      *a3 = v14;
      *a5 = v13;
      return v8;
    }
  }
  return result;
}

unint64_t boost::movelib::detail_adaptive::find_next_block<boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>>(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  unint64_t result;
  uint64_t v8;
  unsigned int *v9;
  _DWORD *v10;
  unsigned int v11;

  if (a5 > a6)
    boost::movelib::detail_adaptive::find_next_block<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>((uint64_t)a1, a2, (uint64_t)a3);
  if (a5 >= a6)
    return 0;
  result = 0;
  v8 = *a1;
  v9 = (unsigned int *)(*a3 - 4 * a5 * a4 - 4);
  v10 = (_DWORD *)(v8 - 4 * a5 - 4);
  do
  {
    v11 = *(_DWORD *)(*a3 + 4 * ~(result * a4));
    if (v11 < *v9 || *v9 >= v11 && *(_DWORD *)(v8 + 4 * ~result) < *v10)
      result = a5;
    v9 -= a4;
    ++a5;
    --v10;
  }
  while (a6 != a5);
  return result;
}

uint64_t *boost::movelib::detail_adaptive::op_partial_merge_and_swap<boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::move_op>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, unsigned int **a5@<X4>, unsigned int **a6@<X5>, int a7@<W7>, unsigned int **a8@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;

  v8 = *a2;
  v9 = *a4;
  v10 = *a6;
  v11 = *result;
  v12 = *a3;
  v14 = *a3 == *a4 || v8 == v11;
  if (a7)
  {
    if (v14)
      goto LABEL_26;
    v15 = *a5;
    do
    {
      v16 = v15 - 1;
      --v10;
      v17 = v11;
      while (1)
      {
        v19 = *(_DWORD *)(v17 - 4);
        v17 -= 4;
        v18 = v19;
        if (v19 < *v16)
          break;
        *v10-- = v18;
        v11 = v17;
        if (v17 == v8)
          goto LABEL_24;
      }
      *v10 = *v16;
      v20 = *(_DWORD *)(v12 - 4);
      v12 -= 4;
      *v16 = v20;
      --v15;
    }
    while (v12 != v9);
  }
  else
  {
    if (v14)
      goto LABEL_26;
    v15 = *a5;
    while (2)
    {
      v16 = v15 - 1;
      --v10;
      v21 = v11;
      while (1)
      {
        v23 = *(_DWORD *)(v21 - 4);
        v21 -= 4;
        v22 = v23;
        if (*v16 >= v23)
          break;
        *v10-- = v22;
        v11 = v21;
        if (v21 == v8)
        {
LABEL_24:
          ++v10;
          goto LABEL_25;
        }
      }
      *v10 = *v16;
      v24 = *(_DWORD *)(v12 - 4);
      v12 -= 4;
      *v16 = v24;
      --v15;
      if (v12 != v9)
        continue;
      break;
    }
  }
  v15 = v16;
  v8 = v11;
  v12 = v9;
LABEL_25:
  *a5 = v15;
  *result = v8;
  *a3 = v12;
LABEL_26:
  *a8 = v10;
  return result;
}

uint64_t *boost::movelib::detail_adaptive::op_partial_merge<boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::move_op>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, unsigned int **a5@<X4>, int a6@<W6>, unsigned int **a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;

  v7 = *a2;
  v8 = *a4;
  v9 = *a5;
  v10 = *result;
  v11 = *a3;
  v13 = *a3 == *a4 || v7 == v10;
  if (a6)
  {
    if (!v13)
    {
      do
      {
        v14 = v9 - 1;
        v15 = v10;
        while (1)
        {
          v9 = v14;
          v17 = *(_DWORD *)(v15 - 4);
          v15 -= 4;
          v16 = v17;
          v18 = *(_DWORD *)(v11 - 4);
          if (v17 < v18)
            break;
          *v9 = v16;
          v14 = v9 - 1;
          v10 = v15;
          if (v15 == v7)
            goto LABEL_22;
        }
        v11 -= 4;
        *v9 = v18;
      }
      while (v11 != v8);
LABEL_21:
      v11 = v8;
    }
  }
  else if (!v13)
  {
    while (2)
    {
      v19 = v9 - 1;
      v20 = v10;
      while (1)
      {
        v9 = v19;
        v22 = *(_DWORD *)(v20 - 4);
        v20 -= 4;
        v21 = v22;
        v23 = *(_DWORD *)(v11 - 4);
        if (v23 >= v22)
          break;
        *v9 = v21;
        v19 = v9 - 1;
        v10 = v20;
        if (v20 == v7)
        {
LABEL_22:
          v10 = v7;
          goto LABEL_23;
        }
      }
      v11 -= 4;
      *v9 = v23;
      if (v11 != v8)
        continue;
      goto LABEL_21;
    }
  }
LABEL_23:
  *result = v10;
  *a3 = v11;
  *a7 = v9;
  return result;
}

int *boost::movelib::detail_adaptive::op_partial_merge_and_save<unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::swap_op>(int *a1, int *a2, int **a3, int *a4, int *a5, int **a6, int **a7, int a8)
{
  if (a8)
    return boost::movelib::detail_adaptive::op_partial_merge_and_save_impl<unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::swap_op>(a1, a2, a3, a4, a5, a6, a7);
  else
    return boost::movelib::detail_adaptive::op_partial_merge_and_save_impl<unsigned int *,unsigned int *,boost::movelib::antistable<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::swap_op>(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t *boost::movelib::detail_adaptive::op_merge_blocks_with_irreg<boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::swap_op>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, unsigned __int8 a3@<W2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int **a7@<X6>, uint64_t a8@<X7>, int **a9@<X8>, unint64_t a10, unint64_t a11, unint64_t a12, char a13, int a14, unsigned __int8 a15)
{
  unint64_t v16;
  uint64_t *v18;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int *v26;
  unsigned int *v27;
  uint64_t v28;
  int *v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int *v35;
  unsigned int *v36;
  int v37;
  int v38;
  unsigned int v39;
  unsigned int *v40;
  int v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  BOOL v47;
  uint64_t v49;
  uint64_t v54;
  unsigned int *v55;
  unsigned int *v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int *v59;
  uint64_t v60;
  int *v61;
  unsigned int *v62;
  unsigned int *v63;
  uint64_t v64;

  v16 = a10;
  if (a10)
  {
    v18 = result;
    v49 = a3;
    v54 = -a8;
    v21 = *result;
    do
    {
      v64 = v21;
      v63 = (unsigned int *)*a4;
      v22 = boost::movelib::detail_adaptive::find_next_block<boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>>(&v64, v49, &v63, a8, a11, a12);
      v23 = v22;
      v24 = v22 + 2;
      if (a12 > v22 + 2)
        v24 = a12;
      if (v24 >= v16)
        v25 = v16;
      else
        v25 = v24;
      v26 = (unsigned int *)(*a4 + 4 * v54);
      v27 = (unsigned int *)(*a4 - 4 * v22 * a8);
      v62 = v27;
      v28 = *a6;
      if (v22)
      {
        v59 = v26;
        v60 = v28;
        v58 = (unsigned int *)*a7;
        result = boost::movelib::detail_adaptive::op_partial_merge_and_swap<boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::swap_op>(a5, &v60, (_DWORD **)a4, (uint64_t *)&v59, &v62, (int **)&v58, a13, a15, &v61);
        v29 = v61;
        *a7 = v61;
        v30 = (unsigned int *)*a4;
        if ((int *)*a4 == v29)
        {
          v40 = v62;
          while (v40 != &v27[v54])
          {
            v42 = *--v40;
            v41 = v42;
            v43 = *--v29;
            *v40 = v43;
            *v29 = v41;
          }
        }
        else if (v30 != v26)
        {
          v31 = v62 - 1;
          do
          {
            v33 = *--v29;
            v32 = v33;
            *v29 = *v31;
            v34 = *--v30;
            *v31-- = v34;
            *v30 = v32;
          }
          while (v30 != v26);
        }
      }
      else
      {
        v56 = v26;
        v57 = v28;
        v55 = (unsigned int *)*a7;
        result = boost::movelib::detail_adaptive::op_partial_merge<boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::swap_op>(a5, &v57, a4, (uint64_t *)&v56, &v55, a15, (unsigned int **)&v61);
        v35 = v61;
        *a7 = v61;
        v36 = (unsigned int *)*a4;
        v29 = (int *)v26;
        if ((int *)*a4 != v35)
        {
          v29 = v35;
          while (v36 != v26)
          {
            v38 = *--v36;
            v37 = v38;
            v39 = *--v29;
            *v36 = v39;
            *v29 = v37;
          }
        }
      }
      *a7 = v29;
      if (v26 != v62)
      {
        v44 = *v18;
        v45 = *v18 - 4 * v23;
        v46 = *(_DWORD *)(v45 - 4);
        *(_DWORD *)(v45 - 4) = *(_DWORD *)(*v18 - 4);
        *(_DWORD *)(v44 - 4) = v46;
        if (v45 == *a2 || (v47 = *a2 == v44, v44 = v45, v47))
          *a2 = v44;
      }
      *a4 = (uint64_t)v26;
      v21 = *v18 - 4;
      *v18 = v21;
      a11 -= a11 != 0;
      a12 = v25 - (v25 != 0);
      --v16;
    }
    while (v16);
  }
  *a9 = *a7;
  return result;
}

unsigned int *boost::movelib::op_merge_with_left_placed<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::swap_op,unsigned int *,unsigned int *>(unsigned int *result, unsigned int *a2, uint64_t a3, char *a4, char *a5)
{
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int v12;

  if (a3 - (_QWORD)a2 != a5 - a4)
    boost::movelib::op_merge_with_left_placed<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *,unsigned int *>();
  if (a5 != a4)
  {
    v5 = (unsigned int *)(a3 - 4);
    while (a2 != result)
    {
      v6 = *((_DWORD *)a5 - 1);
      v7 = *(a2 - 1);
      v8 = *v5;
      v9 = v6 >= v7;
      if (v6 <= v7)
        v6 = *(a2 - 1);
      if (v9)
        v10 = (unsigned int *)a5;
      else
        v10 = a2;
      if (v9)
        a5 -= 4;
      else
        --a2;
      *v5-- = v6;
      *(v10 - 1) = v8;
      if (a5 == a4)
        return result;
    }
    v11 = 0;
    do
    {
      v12 = *(_DWORD *)&a5[v11 * 4 - 4];
      *(_DWORD *)&a5[v11 * 4 - 4] = v5[v11];
      v5[v11--] = v12;
    }
    while (&a5[v11 * 4] != a4);
    if (&v5[v11 + 1] != result)
      boost::movelib::op_merge_with_left_placed<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *,unsigned int *>();
  }
  return result;
}

int *boost::movelib::detail_adaptive::op_partial_merge_and_save_impl<unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::swap_op>(int *a1, int *a2, int **a3, int *a4, int *a5, int **a6, int **a7)
{
  int *v13;
  int *v14;
  int *v15;
  int *v16;
  int *v18;
  int *v19;
  int v20;
  int v21;
  int *v23;
  int v24;
  int *v26;
  int *v27;
  int *v28;

  v27 = 0;
  v28 = a5;
  v13 = *a6;
  v14 = *a7;
  v15 = *a3;
  v26 = *a3;
  if (v13 == v14)
  {
    v16 = a2;
    if (a1 != a2)
    {
      v16 = a1;
      while (*a5 >= *v16)
      {
        if (++v16 == a2)
        {
          v16 = a2;
          break;
        }
      }
    }
    v27 = (int *)((char *)v13 + (char *)v16 - (char *)a1);
    if (v15 == a5)
    {
      v14 = boost::movelib::detail_adaptive::op_buffered_partial_merge_to_range1_and_buffer<unsigned int *,unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::swap_op>(v16, a2, &v26, a4, &v27);
      a5 = v26;
      v13 = v27;
      a1 = a2;
LABEL_24:
      if (a5 != a4 && v13 != v14)
      {
        do
        {
          v23 = a1 + 1;
          while (1)
          {
            a1 = v23;
            v24 = *(v23 - 1);
            if (*a5 >= *v13)
              break;
            *(a1 - 1) = *a5;
            *a5++ = v24;
            v23 = a1 + 1;
            if (a5 == a4)
            {
              v15 = a4;
              goto LABEL_37;
            }
          }
          *(a1 - 1) = *v13;
          *v13++ = v24;
        }
        while (v13 != v14);
        v15 = a5;
LABEL_36:
        v13 = v14;
        goto LABEL_37;
      }
      v15 = a5;
      goto LABEL_37;
    }
    v14 = boost::movelib::detail_adaptive::op_buffered_partial_merge_and_swap_to_range1_and_buffer<unsigned int *,unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::swap_op>(v16, a2, &v26, a4, &v28, &v27);
    v15 = v26;
    v13 = v27;
    a1 = a2;
  }
  else
  {
    if ((char *)a2 - (char *)a1 != (char *)v14 - (char *)v13)
      boost::movelib::detail_adaptive::op_partial_merge_and_save_impl<unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op>((uint64_t)v14, (uint64_t)a2, (uint64_t)a3);
    if (v15 == a5)
      goto LABEL_24;
  }
  if (v15 != a4 && v13 != v14)
  {
    v18 = v28;
    do
    {
      v19 = a1;
      while (*v18 < *v13)
      {
        v20 = *v19;
        *v19++ = *v18;
        *v18++ = *v15;
        *v15++ = v20;
        if (v15 == a4)
        {
          v15 = a4;
          a1 = v19;
          goto LABEL_37;
        }
      }
      v21 = *v19;
      *v19 = *v13;
      a1 = v19 + 1;
      *v13++ = v21;
    }
    while (v13 != v14);
    a1 = v19 + 1;
    goto LABEL_36;
  }
LABEL_37:
  *a6 = v13;
  *a7 = v14;
  *a3 = v15;
  return a1;
}

int *boost::movelib::detail_adaptive::op_partial_merge_and_save_impl<unsigned int *,unsigned int *,boost::movelib::antistable<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::swap_op>(int *a1, int *a2, int **a3, int *a4, int *a5, int **a6, int **a7)
{
  int *v13;
  int *v14;
  int *v15;
  int *v16;
  int *v18;
  int *v19;
  int v20;
  int v21;
  int *v23;
  int v24;
  int *v26;
  int *v27;
  int *v28;

  v27 = 0;
  v28 = a5;
  v13 = *a6;
  v14 = *a7;
  v15 = *a3;
  v26 = *a3;
  if (v13 == v14)
  {
    v16 = a2;
    if (a1 != a2)
    {
      v16 = a1;
      while (*v16 < *a5)
      {
        if (++v16 == a2)
        {
          v16 = a2;
          break;
        }
      }
    }
    v27 = (int *)((char *)v13 + (char *)v16 - (char *)a1);
    if (v15 == a5)
    {
      v14 = boost::movelib::detail_adaptive::op_buffered_partial_merge_to_range1_and_buffer<unsigned int *,unsigned int *,unsigned int *,boost::movelib::antistable<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::swap_op>(v16, a2, &v26, a4, &v27);
      a5 = v26;
      v13 = v27;
      a1 = a2;
LABEL_24:
      if (a5 != a4 && v13 != v14)
      {
        do
        {
          v23 = a1 + 1;
          while (1)
          {
            a1 = v23;
            v24 = *(v23 - 1);
            if (*v13 < *a5)
              break;
            *(a1 - 1) = *a5;
            *a5++ = v24;
            v23 = a1 + 1;
            if (a5 == a4)
            {
              v15 = a4;
              goto LABEL_37;
            }
          }
          *(a1 - 1) = *v13;
          *v13++ = v24;
        }
        while (v13 != v14);
        v15 = a5;
LABEL_36:
        v13 = v14;
        goto LABEL_37;
      }
      v15 = a5;
      goto LABEL_37;
    }
    v14 = boost::movelib::detail_adaptive::op_buffered_partial_merge_and_swap_to_range1_and_buffer<unsigned int *,unsigned int *,unsigned int *,boost::movelib::antistable<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::swap_op>(v16, a2, &v26, a4, &v28, &v27);
    v15 = v26;
    v13 = v27;
    a1 = a2;
  }
  else
  {
    if ((char *)a2 - (char *)a1 != (char *)v14 - (char *)v13)
      boost::movelib::detail_adaptive::op_partial_merge_and_save_impl<unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op>((uint64_t)v14, (uint64_t)a2, (uint64_t)a3);
    if (v15 == a5)
      goto LABEL_24;
  }
  if (v15 != a4 && v13 != v14)
  {
    v18 = v28;
    do
    {
      v19 = a1;
      while (*v13 >= *v18)
      {
        v20 = *v19;
        *v19++ = *v18;
        *v18++ = *v15;
        *v15++ = v20;
        if (v15 == a4)
        {
          v15 = a4;
          a1 = v19;
          goto LABEL_37;
        }
      }
      v21 = *v19;
      *v19 = *v13;
      a1 = v19 + 1;
      *v13++ = v21;
    }
    while (v13 != v14);
    a1 = v19 + 1;
    goto LABEL_36;
  }
LABEL_37:
  *a6 = v13;
  *a7 = v14;
  *a3 = v15;
  return a1;
}

int *boost::movelib::detail_adaptive::op_buffered_partial_merge_and_swap_to_range1_and_buffer<unsigned int *,unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::swap_op>(int *a1, int *a2, int **a3, int *a4, int **a5, int **a6)
{
  int *result;
  int *v8;
  int *v9;
  int v10;
  int *v11;
  int *v12;
  int *v13;
  int *v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  result = *a6;
  if (a1 != a2)
  {
    v8 = *a3;
    if (*a3 != a4)
    {
      v9 = *a5;
      v10 = *result;
      *result = *a1;
      v11 = result + 1;
      *a1 = *v9;
      v12 = a1 + 1;
      *v9 = *v8;
      v13 = v9 + 1;
      *v8 = v10;
      v14 = v8 + 1;
      while (v12 != a2)
      {
        if (v14 == a4)
        {
          v16 = 0;
          do
          {
            v17 = v12[v16];
            v12[v16] = result[v16];
            v18 = (uint64_t)&v12[v16 + 1];
            result[v16++] = v17;
          }
          while ((int *)v18 != a2);
          v11 = &result[v16];
          v14 = a4;
          break;
        }
        v15 = *v11;
        if (*v13 >= *result)
        {
          *v11 = *v12;
          *v12 = *result;
          *result++ = v15;
        }
        else
        {
          *v11 = *v12;
          *v12 = *v13;
          *v13++ = *v14;
          *v14++ = v15;
        }
        ++v11;
        ++v12;
      }
      *a3 = v14;
      *a6 = result;
      result = v11;
      *a5 = v13;
    }
  }
  return result;
}

int *boost::movelib::detail_adaptive::op_buffered_partial_merge_to_range1_and_buffer<unsigned int *,unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::swap_op>(int *a1, int *a2, int **a3, int *a4, int **a5)
{
  int *result;
  int *v7;
  int v8;
  int *v9;
  int *v10;
  int *v11;
  BOOL v12;
  _BOOL4 v13;
  int v14;
  int *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  result = *a5;
  if (a1 != a2)
  {
    v7 = *a3;
    if (*a3 != a4)
    {
      v8 = *result;
      *result = *a1;
      v9 = result + 1;
      *a1 = *v7;
      v10 = a1 + 1;
      *v7 = v8;
      v11 = v7 + 1;
      while (v10 != a2)
      {
        if (v11 == a4)
        {
          v16 = 0;
          do
          {
            v17 = v10[v16];
            v10[v16] = result[v16];
            v18 = (uint64_t)&v10[v16 + 1];
            result[v16++] = v17;
          }
          while ((int *)v18 != a2);
          v9 = &result[v16];
          v11 = a4;
          break;
        }
        v12 = *v11 >= *result;
        v13 = *v11 < *result;
        v14 = *v9;
        *v9++ = *v10;
        if (v12)
          v15 = result;
        else
          v15 = v11;
        result += v12;
        v11 += v13;
        *v10++ = *v15;
        *v15 = v14;
      }
      *a3 = v11;
      *a5 = result;
      return v9;
    }
  }
  return result;
}

int *boost::movelib::detail_adaptive::op_buffered_partial_merge_and_swap_to_range1_and_buffer<unsigned int *,unsigned int *,unsigned int *,boost::movelib::antistable<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::swap_op>(int *a1, int *a2, int **a3, int *a4, int **a5, int **a6)
{
  int *result;
  int *v8;
  int *v9;
  int v10;
  int *v11;
  int *v12;
  int *v13;
  int *v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  result = *a6;
  if (a1 != a2)
  {
    v8 = *a3;
    if (*a3 != a4)
    {
      v9 = *a5;
      v10 = *result;
      *result = *a1;
      v11 = result + 1;
      *a1 = *v9;
      v12 = a1 + 1;
      *v9 = *v8;
      v13 = v9 + 1;
      *v8 = v10;
      v14 = v8 + 1;
      while (v12 != a2)
      {
        if (v14 == a4)
        {
          v16 = 0;
          do
          {
            v17 = v12[v16];
            v12[v16] = result[v16];
            v18 = (uint64_t)&v12[v16 + 1];
            result[v16++] = v17;
          }
          while ((int *)v18 != a2);
          v11 = &result[v16];
          v14 = a4;
          break;
        }
        v15 = *v11;
        if (*result >= *v13)
        {
          *v11 = *v12;
          *v12 = *v13;
          *v13++ = *v14;
          *v14++ = v15;
        }
        else
        {
          *v11 = *v12;
          *v12 = *result;
          *result++ = v15;
        }
        ++v11;
        ++v12;
      }
      *a3 = v14;
      *a6 = result;
      result = v11;
      *a5 = v13;
    }
  }
  return result;
}

int *boost::movelib::detail_adaptive::op_buffered_partial_merge_to_range1_and_buffer<unsigned int *,unsigned int *,unsigned int *,boost::movelib::antistable<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::swap_op>(int *a1, int *a2, int **a3, int *a4, int **a5)
{
  int *result;
  int *v7;
  int v8;
  int *v9;
  int *v10;
  int *v11;
  BOOL v12;
  _BOOL4 v13;
  int v14;
  int *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  result = *a5;
  if (a1 != a2)
  {
    v7 = *a3;
    if (*a3 != a4)
    {
      v8 = *result;
      *result = *a1;
      v9 = result + 1;
      *a1 = *v7;
      v10 = a1 + 1;
      *v7 = v8;
      v11 = v7 + 1;
      while (v10 != a2)
      {
        if (v11 == a4)
        {
          v16 = 0;
          do
          {
            v17 = v10[v16];
            v10[v16] = result[v16];
            v18 = (uint64_t)&v10[v16 + 1];
            result[v16++] = v17;
          }
          while ((int *)v18 != a2);
          v9 = &result[v16];
          v11 = a4;
          break;
        }
        v12 = *result >= *v11;
        v13 = *result < *v11;
        v14 = *v9;
        *v9++ = *v10;
        if (v12)
          v15 = v11;
        else
          v15 = result;
        result += v13;
        v11 += v12;
        *v10++ = *v15;
        *v15 = v14;
      }
      *a3 = v11;
      *a5 = result;
      return v9;
    }
  }
  return result;
}

uint64_t *boost::movelib::detail_adaptive::op_partial_merge_and_swap<boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::swap_op>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _DWORD **a3@<X2>, uint64_t *a4@<X3>, unsigned int **a5@<X4>, int **a6@<X5>, char a7@<W6>, int a8@<W7>, int **a9@<X8>)
{
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v17 = a7;
  if (a8)
  {
    v16 = *a2;
    v15 = *a4;
    v14 = *a6;
    return boost::movelib::detail_adaptive::op_partial_merge_and_swap_impl<boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::swap_op>(a1, &v16, a3, &v15, a5, &v14, a9);
  }
  else
  {
    v13 = *a2;
    v10 = *a4;
    v11 = *a6;
    v12 = v10;
    return boost::movelib::detail_adaptive::op_partial_merge_and_swap_impl<boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::antistable<boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>>,boost::movelib::swap_op>(a1, &v13, a3, &v12, a5, &v11, a9);
  }
}

uint64_t *boost::movelib::detail_adaptive::op_partial_merge<boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::swap_op>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, unsigned int **a5@<X4>, int a6@<W6>, unsigned int **a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;

  v7 = *a2;
  v8 = *a4;
  v9 = *a5;
  v10 = *result;
  v11 = *a3;
  v13 = *a3 == *a4 || v7 == v10;
  if (a6)
  {
    if (!v13)
    {
      do
      {
        v14 = v9 - 1;
        v15 = v10;
        while (1)
        {
          v9 = v14;
          v17 = *(_DWORD *)(v15 - 4);
          v15 -= 4;
          v16 = v17;
          v18 = *(_DWORD *)(v11 - 4);
          v19 = *v9;
          if (v17 < v18)
            break;
          *v9 = v16;
          v14 = v9 - 1;
          *(_DWORD *)(v10 - 4) = v19;
          v10 = v15;
          if (v15 == v7)
            goto LABEL_22;
        }
        *v9 = v18;
        *(_DWORD *)(v11 - 4) = v19;
        v11 -= 4;
      }
      while (v11 != v8);
LABEL_21:
      v11 = v8;
    }
  }
  else if (!v13)
  {
    while (2)
    {
      v20 = v9 - 1;
      v21 = v10;
      while (1)
      {
        v9 = v20;
        v23 = *(_DWORD *)(v21 - 4);
        v21 -= 4;
        v22 = v23;
        v24 = *(_DWORD *)(v11 - 4);
        v25 = *v9;
        if (v24 >= v23)
          break;
        *v9 = v22;
        v20 = v9 - 1;
        *(_DWORD *)(v10 - 4) = v25;
        v10 = v21;
        if (v21 == v7)
        {
LABEL_22:
          v10 = v7;
          goto LABEL_23;
        }
      }
      *v9 = v24;
      *(_DWORD *)(v11 - 4) = v25;
      v11 -= 4;
      if (v11 != v8)
        continue;
      goto LABEL_21;
    }
  }
LABEL_23:
  *result = v10;
  *a3 = v11;
  *a7 = v9;
  return result;
}

uint64_t *boost::movelib::detail_adaptive::op_partial_merge_and_swap_impl<boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::swap_op>@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X1>, _DWORD **a3@<X2>, _QWORD *a4@<X3>, unsigned int **a5@<X4>, int **a6@<X5>, int **a7@<X8>)
{
  _DWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int *v14;
  int v15;
  int *v16;
  int v17;
  unsigned int v18;

  v7 = *a3;
  if (*a3 != (_DWORD *)*a4)
  {
    v8 = *result;
    if (*a2 != *result)
    {
      v9 = *a5;
      do
      {
        v10 = v9 - 1;
        v11 = v8;
        while (1)
        {
          v13 = *(_DWORD *)(v11 - 4);
          v11 -= 4;
          v12 = v13;
          if (v13 < *v10)
            break;
          v14 = *a6 - 1;
          v15 = *v14;
          *a6 = v14;
          *v14 = v12;
          *(_DWORD *)(v8 - 4) = v15;
          v8 = v11;
          if (v11 == *a2)
          {
            v8 = v11;
            v10 = v9;
            goto LABEL_9;
          }
        }
        v16 = *a6 - 1;
        v17 = *v16;
        *v16 = *v10;
        v18 = *--v7;
        *a6 = v16;
        *v10 = v18;
        *v7 = v17;
        v9 = v10;
      }
      while (v7 != (_DWORD *)*a4);
LABEL_9:
      *a5 = v10;
      *result = v8;
      *a3 = v7;
    }
  }
  *a7 = *a6;
  return result;
}

uint64_t *boost::movelib::detail_adaptive::op_partial_merge_and_swap_impl<boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::antistable<boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>>,boost::movelib::swap_op>@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X1>, _DWORD **a3@<X2>, _QWORD *a4@<X3>, unsigned int **a5@<X4>, int **a6@<X5>, int **a7@<X8>)
{
  _DWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int *v14;
  int v15;
  int *v16;
  int v17;
  unsigned int v18;

  v7 = *a3;
  if (*a3 != (_DWORD *)*a4)
  {
    v8 = *result;
    if (*a2 != *result)
    {
      v9 = *a5;
      do
      {
        v10 = v9 - 1;
        v11 = v8;
        while (1)
        {
          v13 = *(_DWORD *)(v11 - 4);
          v11 -= 4;
          v12 = v13;
          if (*v10 >= v13)
            break;
          v14 = *a6 - 1;
          v15 = *v14;
          *a6 = v14;
          *v14 = v12;
          *(_DWORD *)(v8 - 4) = v15;
          v8 = v11;
          if (v11 == *a2)
          {
            v8 = v11;
            v10 = v9;
            goto LABEL_9;
          }
        }
        v16 = *a6 - 1;
        v17 = *v16;
        *v16 = *v10;
        v18 = *--v7;
        *a6 = v16;
        *v10 = v18;
        *v7 = v17;
        v9 = v10;
      }
      while (v7 != (_DWORD *)*a4);
LABEL_9:
      *a5 = v10;
      *result = v8;
      *a3 = v7;
    }
  }
  *a7 = *a6;
  return result;
}

char *boost::movelib::detail_adaptive::partial_merge_bufferless<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(char *a1, char *a2, char *a3, char *a4)
{
  if (*a4)
    return boost::movelib::detail_adaptive::partial_merge_bufferless_impl<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(a1, a2, a3, a4);
  else
    return boost::movelib::detail_adaptive::partial_merge_bufferless_impl<unsigned int *,boost::movelib::antistable<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>>(a1, a2, a3, a4);
}

char *boost::movelib::detail_adaptive::partial_merge_bufferless_impl<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(char *result, char *a2, char *a3, char *a4)
{
  char v5;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unsigned int v12;
  char *v13;
  unsigned int v14;

  if (a2 != a3)
  {
    v5 = *a4;
    if (result == a2 || *(_DWORD *)a2 >= *((_DWORD *)a2 - 1))
    {
LABEL_16:
      *a4 = v5 ^ 1;
      return a2;
    }
LABEL_4:
    if (a2 == a3)
      return boost::movelib::rotate_gcd<unsigned int *>(result, a3, a3);
    v7 = (a3 - a2) >> 2;
    v8 = a2;
    do
    {
      v9 = v7 >> 1;
      v10 = &v8[4 * (v7 >> 1)];
      v12 = *(_DWORD *)v10;
      v11 = v10 + 4;
      v7 += ~(v7 >> 1);
      if (v12 >= *(_DWORD *)result)
        v7 = v9;
      else
        v8 = v11;
    }
    while (v7);
    result = boost::movelib::rotate_gcd<unsigned int *>(result, a2, v8);
    if (v8 != a3)
    {
      v13 = result + 4;
      while (v13 != v8)
      {
        v14 = *(_DWORD *)v13;
        v13 += 4;
        if (*(_DWORD *)v8 < v14)
        {
          result = v13 - 4;
          a2 = v8;
          goto LABEL_4;
        }
      }
      a2 = v8;
      goto LABEL_16;
    }
  }
  return result;
}

char *boost::movelib::detail_adaptive::partial_merge_bufferless_impl<unsigned int *,boost::movelib::antistable<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>>(char *result, char *a2, char *a3, char *a4)
{
  char v5;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unsigned int v12;
  char *v13;
  unsigned int v14;

  if (a2 != a3)
  {
    v5 = *a4;
    if (result == a2 || *((_DWORD *)a2 - 1) < *(_DWORD *)a2)
    {
LABEL_16:
      *a4 = v5 ^ 1;
      return a2;
    }
LABEL_4:
    if (a2 == a3)
      return boost::movelib::rotate_gcd<unsigned int *>(result, a3, a3);
    v7 = (a3 - a2) >> 2;
    v8 = a2;
    do
    {
      v9 = v7 >> 1;
      v10 = &v8[4 * (v7 >> 1)];
      v12 = *(_DWORD *)v10;
      v11 = v10 + 4;
      v7 += ~(v7 >> 1);
      if (*(_DWORD *)result < v12)
        v7 = v9;
      else
        v8 = v11;
    }
    while (v7);
    result = boost::movelib::rotate_gcd<unsigned int *>(result, a2, v8);
    if (v8 != a3)
    {
      v13 = result + 4;
      while (v13 != v8)
      {
        v14 = *(_DWORD *)v13;
        v13 += 4;
        if (v14 >= *(_DWORD *)v8)
        {
          result = v13 - 4;
          a2 = v8;
          goto LABEL_4;
        }
      }
      a2 = v8;
      goto LABEL_16;
    }
  }
  return result;
}

unint64_t boost::movelib::detail_adaptive::find_next_block<unsigned long *,boost::movelib::detail_adaptive::less,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  if (a4 > a5)
    boost::movelib::detail_adaptive::find_next_block<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(a1, a2, a3);
  v5 = 0;
  if (a4 < a5)
  {
    v6 = (unsigned int *)(a2 + 4 * a4 * a3);
    do
    {
      v7 = *(_DWORD *)(a2 + 4 * v5 * a3);
      if (*v6 < v7 || v7 >= *v6 && *(_QWORD *)(a1 + 8 * a4) < *(_QWORD *)(a1 + 8 * v5))
        v5 = a4;
      v6 += a3;
      ++a4;
    }
    while (a5 != a4);
  }
  return v5;
}

uint64_t *boost::movelib::detail_adaptive::op_merge_blocks_with_irreg<boost::movelib::reverse_iterator<unsigned long *>,boost::movelib::inverse<boost::movelib::detail_adaptive::less>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::move_op>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, unsigned __int8 a3@<W2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, unsigned int **a7@<X6>, uint64_t a8@<X7>, unsigned int **a9@<X8>, unint64_t a10, unint64_t a11, unint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  unint64_t v15;
  uint64_t *v17;
  uint64_t v20;
  unsigned int *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int *v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int *v56;
  unsigned int *v57;
  uint64_t v58;

  v15 = a10;
  if (a10)
  {
    v17 = result;
    v43 = a3;
    v48 = -a8;
    v20 = *result;
    v21 = (unsigned int *)*a4;
    while (1)
    {
      v57 = v21;
      v58 = v20;
      v22 = boost::movelib::detail_adaptive::find_next_block<boost::movelib::reverse_iterator<unsigned long *>,boost::movelib::inverse<boost::movelib::detail_adaptive::less>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>>(&v58, v43, &v57, a8, a11, a12);
      v23 = v22;
      v24 = v22 + 2;
      if (a12 > v22 + 2)
        v24 = a12;
      if (v24 >= v15)
        v25 = v15;
      else
        v25 = v24;
      v21 = (unsigned int *)(*a4 + 4 * v48);
      v26 = (unsigned int *)(*a4 - 4 * v22 * a8);
      v56 = v26;
      v27 = *a6;
      if (v22)
      {
        v53 = v21;
        v54 = v27;
        v52 = *a7;
        result = boost::movelib::detail_adaptive::op_partial_merge_and_swap<boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::move_op>(a5, &v54, a4, (uint64_t *)&v53, &v56, &v52, a14, &v55);
        v28 = v55;
        *a7 = v55;
        v29 = *a4;
        if ((unsigned int *)*a4 == v28)
        {
          v35 = v56;
          while (v35 != &v26[v48])
          {
            v37 = *--v35;
            v36 = v37;
            v38 = *--v28;
            *v35 = v38;
            *v28 = v36;
          }
        }
        else if ((unsigned int *)v29 != v21)
        {
          v30 = v56 - 1;
          do
          {
            *--v28 = *v30;
            v31 = *(_DWORD *)(v29 - 4);
            v29 -= 4;
            *v30-- = v31;
          }
          while ((unsigned int *)v29 != v21);
        }
      }
      else
      {
        v50 = v21;
        v51 = v27;
        v49 = *a7;
        result = boost::movelib::detail_adaptive::op_partial_merge<boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>,boost::movelib::move_op>(a5, &v51, a4, (uint64_t *)&v50, &v49, a14, &v55);
        v32 = v55;
        *a7 = v55;
        v33 = *a4;
        v28 = v21;
        if ((unsigned int *)*a4 != v32)
        {
          v28 = v32;
          while ((unsigned int *)v33 != v21)
          {
            v34 = *(_DWORD *)(v33 - 4);
            v33 -= 4;
            *--v28 = v34;
          }
        }
      }
      *a7 = v28;
      v39 = *v17;
      if (v21 == v56)
        goto LABEL_27;
      v40 = v39 - 8 * v23;
      v41 = *(_QWORD *)(v40 - 8);
      *(_QWORD *)(v40 - 8) = *(_QWORD *)(v39 - 8);
      *(_QWORD *)(v39 - 8) = v41;
      if (v40 == *a2)
        break;
      if (*a2 == v39)
        goto LABEL_26;
LABEL_27:
      *a4 = (uint64_t)v21;
      v20 = v39 - 8;
      *v17 = v20;
      a11 -= a11 != 0;
      a12 = v25 - (v25 != 0);
      if (!--v15)
        goto LABEL_28;
    }
    v40 = v39;
LABEL_26:
    *a2 = v40;
    v39 = *v17;
    goto LABEL_27;
  }
LABEL_28:
  *a9 = *a7;
  return result;
}

unint64_t boost::movelib::detail_adaptive::find_next_block<boost::movelib::reverse_iterator<unsigned long *>,boost::movelib::inverse<boost::movelib::detail_adaptive::less>,boost::movelib::reverse_iterator<unsigned int *>,boost::movelib::inverse<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>>(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  unint64_t result;
  uint64_t v8;
  unsigned int *v9;
  _QWORD *v10;
  unsigned int v11;

  if (a5 > a6)
    boost::movelib::detail_adaptive::find_next_block<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>((uint64_t)a1, a2, (uint64_t)a3);
  if (a5 >= a6)
    return 0;
  result = 0;
  v8 = *a1;
  v9 = (unsigned int *)(*a3 - 4 * a5 * a4 - 4);
  v10 = (_QWORD *)(v8 - 8 * a5 - 8);
  do
  {
    v11 = *(_DWORD *)(*a3 + 4 * ~(result * a4));
    if (v11 < *v9 || *v9 >= v11 && *(_QWORD *)(v8 + 8 * ~result) < *v10)
      result = a5;
    v9 -= a4;
    ++a5;
    --v10;
  }
  while (a6 != a5);
  return result;
}

int *boost::movelib::detail_adaptive::stable_merge<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>(int *a1, char *a2, char *a3, uint64_t a4)
{
  unint64_t v5;
  char *v6;
  int *result;

  if (*(_QWORD *)(a4 + 8))
    boost::movelib::detail_adaptive::stable_merge<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>();
  v5 = (a2 - (char *)a1) >> 2;
  if (v5 >= (a3 - a2) >> 2)
    v5 = (a3 - a2) >> 2;
  v6 = *(char **)(a4 + 16);
  if ((unint64_t)v6 < v5)
    return boost::movelib::merge_adaptive_ONlogN<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *>(a1, a2, a3, *(char **)a4, v6);
  result = (int *)boost::movelib::op_buffered_merge<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>((unsigned int *)a1, a2, a3, a4);
  if (*(_QWORD *)(a4 + 8))
    *(_QWORD *)(a4 + 8) = 0;
  return result;
}

int *boost::movelib::merge_adaptive_ONlogN<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *>(int *result, char *a2, char *a3, char *a4, char *a5)
{
  unsigned int *v8;
  char *v9[3];

  if (result != (int *)a2 && a2 != a3)
  {
    v8 = (unsigned int *)result;
    if (a5)
    {
      v9[0] = a4;
      v9[1] = 0;
      v9[2] = a5;
      boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>::initialize_until((uint64_t *)v9, (unint64_t)a5, result);
      return (int *)boost::movelib::merge_adaptive_ONlogN_recursive<unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(v8, a2, a3, (a2 - (char *)v8) >> 2, (a3 - a2) >> 2, v9[0], (unint64_t)a5);
    }
    else
    {
      return (int *)boost::movelib::merge_bufferless_ONlogN_recursive<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>((char *)result, a2, a3, (a2 - (char *)result) >> 2, (a3 - a2) >> 2);
    }
  }
  return result;
}

unsigned int *boost::movelib::merge_adaptive_ONlogN_recursive<unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(unsigned int *result, char *a2, char *a3, unint64_t a4, unint64_t a5, char *a6, unint64_t a7)
{
  unint64_t v7;
  unint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int *v29;
  char *v30[3];

  if (a4)
  {
    v7 = a5;
    if (a5)
    {
      v9 = a4;
      v10 = result;
      while (1)
      {
        if (v9 <= a7 || v7 <= a7)
        {
          v30[0] = a6;
          v30[1] = a6;
          v30[2] = &a6[4 * a7];
          return boost::movelib::op_buffered_merge<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,boost::movelib::range_xbuf<unsigned int *,unsigned long,boost::movelib::move_op>>(v10, a2, a3, v30);
        }
        if (v7 + v9 == 2)
          break;
        if (v7 + v9 <= 0xF)
          return (unsigned int *)boost::movelib::merge_bufferless_ON2<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>((char *)v10, a2, a3);
        v29 = v10;
        if (v9 <= v7)
        {
          v19 = v7 >> 1;
          v13 = &a2[4 * (v7 >> 1)];
          v12 = a2;
          if (a2 != (char *)v10)
          {
            v20 = (a2 - (char *)v10) >> 2;
            v12 = (char *)v10;
            do
            {
              v21 = v20 >> 1;
              v22 = &v12[4 * (v20 >> 1)];
              v24 = *(_DWORD *)v22;
              v23 = v22 + 4;
              v20 += ~(v20 >> 1);
              if (*(_DWORD *)v13 < v24)
                v20 = v21;
              else
                v12 = v23;
            }
            while (v20);
          }
          v11 = (v12 - (char *)v10) >> 2;
        }
        else
        {
          v11 = v9 >> 1;
          v12 = (char *)&v10[v9 >> 1];
          v13 = a3;
          if (a2 != a3)
          {
            v14 = (a3 - a2) >> 2;
            v13 = a2;
            do
            {
              v15 = v14 >> 1;
              v16 = &v13[4 * (v14 >> 1)];
              v18 = *(_DWORD *)v16;
              v17 = v16 + 4;
              v14 += ~(v14 >> 1);
              if (v18 >= *(_DWORD *)v12)
                v14 = v15;
              else
                v13 = v17;
            }
            while (v14);
          }
          v19 = (v13 - a2) >> 2;
        }
        v9 -= v11;
        v10 = (unsigned int *)boost::movelib::rotate_adaptive<unsigned int *,unsigned int *>(v12, a2, v13, v9, v19, (int *)a6, a7);
        result = (unsigned int *)boost::movelib::merge_adaptive_ONlogN_recursive<unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(v29, v12, v10, v11, v19, a6, a7);
        v7 -= v19;
        if (v9)
          v25 = v7 == 0;
        else
          v25 = 1;
        a2 = v13;
        if (v25)
          return result;
      }
      v26 = *v10;
      if (*(_DWORD *)a2 < *v10)
      {
        *v10 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v26;
      }
    }
  }
  return result;
}

char *boost::movelib::rotate_adaptive<unsigned int *,unsigned int *>(char *result, char *a2, char *a3, unint64_t a4, unint64_t a5, int *a6, unint64_t a7)
{
  int *v7;
  char *v8;
  int v9;
  char *v10;
  int v11;
  int v12;
  int *v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;

  if (a4 <= a5 || a5 > a7)
  {
    if (a4 <= a7)
    {
      if (a4)
      {
        v13 = a6;
        if (result != a2)
        {
          v13 = a6;
          v14 = result;
          do
          {
            v15 = *(_DWORD *)v14;
            v14 += 4;
            *v13++ = v15;
          }
          while (v14 != a2);
        }
        while (a2 != a3)
        {
          v16 = *(_DWORD *)a2;
          a2 += 4;
          *(_DWORD *)result = v16;
          result += 4;
        }
        if (v13 != a6)
        {
          v17 = 0;
          do
          {
            *(_DWORD *)&result[v17 * 4] = a6[v17];
            ++v17;
          }
          while (&a6[v17] != v13);
        }
      }
      else
      {
        return a3;
      }
    }
    else
    {
      return boost::movelib::rotate_gcd<unsigned int *>(result, a2, a3);
    }
  }
  else if (a5)
  {
    v7 = a6;
    if (a2 != a3)
    {
      v7 = a6;
      v8 = a2;
      do
      {
        v9 = *(_DWORD *)v8;
        v8 += 4;
        *v7++ = v9;
      }
      while (v8 != a3);
    }
    if (a2 != result)
    {
      v10 = a3 - 4;
      do
      {
        v11 = *((_DWORD *)a2 - 1);
        a2 -= 4;
        *(_DWORD *)v10 = v11;
        v10 -= 4;
      }
      while (a2 != result);
    }
    for (; a6 != v7; result += 4)
    {
      v12 = *a6++;
      *(_DWORD *)result = v12;
    }
  }
  return result;
}

unsigned int *boost::movelib::op_buffered_merge<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,boost::movelib::range_xbuf<unsigned int *,unsigned long,boost::movelib::move_op>>(unsigned int *result, char *a2, char *a3, char **a4)
{
  unsigned int v6;
  int *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  _DWORD *v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  int *v17;
  int *v18;
  unsigned int v19;

  if (result != (unsigned int *)a2 && a2 != a3)
  {
    v6 = *((_DWORD *)a2 - 1);
    if (*(_DWORD *)a2 < v6)
    {
      v8 = (int *)result;
      if (a2 - (char *)result <= (unint64_t)(a3 - a2))
      {
        v15 = (a2 - (char *)result) >> 2;
        do
        {
          v16 = v15 >> 1;
          v17 = &v8[v15 >> 1];
          v19 = *v17;
          v18 = v17 + 1;
          v15 += ~(v15 >> 1);
          if (*(_DWORD *)a2 < v19)
            v15 = v16;
          else
            v8 = v18;
        }
        while (v15);
        boost::movelib::range_xbuf<unsigned int *,unsigned long,boost::movelib::move_op>::move_assign<unsigned int *>((uint64_t)a4, v8, (a2 - (char *)v8) >> 2);
        return (unsigned int *)boost::movelib::op_merge_with_right_placed<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,unsigned int *,boost::movelib::move_op>(*a4, a4[1], (char *)v8, a2, a3);
      }
      else
      {
        v9 = (a3 - a2) >> 2;
        v10 = (uint64_t)a2;
        do
        {
          v11 = v9 >> 1;
          v12 = (unsigned int *)(v10 + 4 * (v9 >> 1));
          v14 = *v12;
          v13 = v12 + 1;
          v9 += ~(v9 >> 1);
          if (v14 >= v6)
            v9 = v11;
          else
            v10 = (uint64_t)v13;
        }
        while (v9);
        boost::movelib::range_xbuf<unsigned int *,unsigned long,boost::movelib::move_op>::move_assign<unsigned int *>((uint64_t)a4, (int *)a2, (v10 - (uint64_t)a2) >> 2);
        return boost::movelib::op_merge_with_left_placed<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *,unsigned int *>((unsigned int *)v8, (unsigned int *)a2, v10, (uint64_t)*a4, (uint64_t)a4[1]);
      }
    }
  }
  return result;
}

uint64_t boost::movelib::range_xbuf<unsigned int *,unsigned long,boost::movelib::move_op>::move_assign<unsigned int *>(uint64_t result, int *a2, unint64_t a3)
{
  _DWORD *v3;
  uint64_t v4;
  int v5;

  v3 = *(_DWORD **)result;
  if (a3 > (uint64_t)(*(_QWORD *)(result + 16) - *(_QWORD *)result) >> 2)
    boost::movelib::range_xbuf<unsigned int *,unsigned long,boost::movelib::move_op>::move_assign<unsigned int *>();
  if (a3)
  {
    v4 = 4 * a3;
    do
    {
      v5 = *a2++;
      *v3++ = v5;
      v4 -= 4;
    }
    while (v4);
  }
  *(_QWORD *)(result + 8) = v3;
  return result;
}

_QWORD *std::__function::__func<as::server::DeviceTimeObserver::sessionsObservingDeviceEvent(unsigned int,AVAudioIOControllerEvent)::$_0,std::allocator<as::server::DeviceTimeObserver::sessionsObservingDeviceEvent(unsigned int,AVAudioIOControllerEvent)::$_0>,void ()(unsigned long long)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E8205470;
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<as::server::DeviceTimeObserver::sessionsObservingDeviceEvent(unsigned int,AVAudioIOControllerEvent)::$_0,std::allocator<as::server::DeviceTimeObserver::sessionsObservingDeviceEvent(unsigned int,AVAudioIOControllerEvent)::$_0>,void ()(unsigned long long)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E8205470;
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x1CAA38D28);
}

_QWORD *std::__function::__func<as::server::DeviceTimeObserver::sessionsObservingDeviceEvent(unsigned int,AVAudioIOControllerEvent)::$_0,std::allocator<as::server::DeviceTimeObserver::sessionsObservingDeviceEvent(unsigned int,AVAudioIOControllerEvent)::$_0>,void ()(unsigned long long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E8205470;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<as::server::DeviceTimeObserver::sessionsObservingDeviceEvent(unsigned int,AVAudioIOControllerEvent)::$_0,std::allocator<as::server::DeviceTimeObserver::sessionsObservingDeviceEvent(unsigned int,AVAudioIOControllerEvent)::$_0>,void ()(unsigned long long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E8205470;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<as::server::DeviceTimeObserver::sessionsObservingDeviceEvent(unsigned int,AVAudioIOControllerEvent)::$_0,std::allocator<as::server::DeviceTimeObserver::sessionsObservingDeviceEvent(unsigned int,AVAudioIOControllerEvent)::$_0>,void ()(unsigned long long)>::destroy(uint64_t a1)
{
  return std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<as::server::DeviceTimeObserver::sessionsObservingDeviceEvent(unsigned int,AVAudioIOControllerEvent)::$_0,std::allocator<as::server::DeviceTimeObserver::sessionsObservingDeviceEvent(unsigned int,AVAudioIOControllerEvent)::$_0>,void ()(unsigned long long)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<as::server::DeviceTimeObserver::sessionsObservingDeviceEvent(unsigned int,AVAudioIOControllerEvent)::$_0,std::allocator<as::server::DeviceTimeObserver::sessionsObservingDeviceEvent(unsigned int,AVAudioIOControllerEvent)::$_0>,void ()(unsigned long long)>::operator()(uint64_t result, unint64_t *a2)
{
  double *v2;
  unint64_t v3;
  unsigned __int128 *v4;

  v2 = *(double **)(result + 8);
  if (*v2 == 0.0)
    v3 = 0;
  else
    v3 = llround(1000000000.0 / *v2 * (double)*a2);
  v4 = (unsigned __int128 *)(v2 + 4);
  do
    __ldaxp(v4);
  while (__stlxp(__PAIR128__(1, v3), v4));
  return result;
}

uint64_t *std::set<unsigned int>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<unsigned int>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>(a1, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  return a1;
}

void sub_1C8998018(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 908, a4);
}

void OUTLINED_FUNCTION_1(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 292, a4);
}

void OUTLINED_FUNCTION_2(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 1331, a4);
}

void OUTLINED_FUNCTION_3(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 1317, a4);
}

void OUTLINED_FUNCTION_4(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 1350, a4);
}

void OUTLINED_FUNCTION_5(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 1383, a4);
}

uint64_t OUTLINED_FUNCTION_6()
{
  return _os_assert_log();
}

void OUTLINED_FUNCTION_7(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 2821, a4);
}

void sub_1C89980F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1C899817C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t as::server::AudioAppRemoteClient::AudioAppRemoteClient(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void *a6, uint64_t a7)
{
  id v13;
  uint64_t v14;
  __int128 v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t *v20;
  id v21;
  id v22;
  const char *v23;
  uint64_t *v24;
  char v25;
  uint64_t *v26;
  const char *v27;
  uint64_t *v28;
  char v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  unsigned __int8 v33;
  uint64_t *v34;
  uint64_t *v35;
  unsigned __int8 v36;
  uint64_t *v37;
  int v38;
  uint64_t *v39;
  char v40;
  uint64_t *v41;
  id v43;
  id v44;
  id v45;
  std::string v46;
  unsigned __int8 v47[8];
  uint64_t *v48;
  unsigned __int8 v49[8];
  uint64_t *v50;
  _BYTE v51[8];
  uint64_t *v52;
  _BYTE v53[8];
  uint64_t *v54;
  unsigned __int8 v55[8];
  uint64_t *v56;
  char __s;
  int v58;
  __int16 v59;
  uint64_t *v60[3];

  v60[1] = *(uint64_t **)MEMORY[0x1E0C80C00];
  v43 = a3;
  v44 = a5;
  v45 = a6;
  BaseOpaqueObject::BaseOpaqueObject((BaseOpaqueObject *)a1);
  *(_QWORD *)a1 = off_1E82054B8;
  *(_QWORD *)(a1 + 16) = 850045863;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a2;
  *(_QWORD *)(a1 + 88) = a1 + 88;
  *(_QWORD *)(a1 + 96) = a1 + 88;
  *(_QWORD *)(a1 + 104) = 0;
  v13 = v43;
  *(_QWORD *)(a1 + 112) = v13;
  v14 = *(_QWORD *)(a4 + 32);
  v15 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)a4;
  *(_OWORD *)(a1 + 136) = v15;
  *(_QWORD *)(a1 + 152) = v14;
  v16 = v45;
  *(_QWORD *)(a1 + 160) = v16;
  v17 = v44;
  *(_QWORD *)(a1 + 168) = v17;
  v18 = *(_QWORD *)(a1 + 80);
  v19 = *(void **)(a1 + 160);
  v20 = (uint64_t *)*(unsigned int *)(a1 + 8);
  v21 = v17;
  v22 = v19;
  v55[0] = 0;
  v56 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v55);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v55);
  if (v21)
    v23 = (const char *)objc_msgSend(objc_retainAutorelease(v21), "UTF8String", a1 + 88, a1 + 16, v43, v44, v45);
  else
    v23 = "?";
  v46.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v53, &v46.__r_.__value_.__l.__data_);
  v24 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v55, "creatorName");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v53);
  v25 = *(_BYTE *)v24;
  *(_BYTE *)v24 = v53[0];
  v53[0] = v25;
  v26 = (uint64_t *)v24[1];
  v24[1] = (uint64_t)v54;
  v54 = v26;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v53);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v54, v53[0]);
  if (v22)
    v27 = (const char *)objc_msgSend(objc_retainAutorelease(v22), "UTF8String");
  else
    v27 = "?";
  v46.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v51, &v46.__r_.__value_.__l.__data_);
  v28 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v55, "attributionID");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v51);
  v29 = *(_BYTE *)v28;
  *(_BYTE *)v28 = v51[0];
  v51[0] = v29;
  v30 = (uint64_t *)v28[1];
  v28[1] = (uint64_t)v52;
  v52 = v30;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v51);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v52, v51[0]);
  v31 = (uint64_t *)*(int *)(a7 + 36);
  v49[0] = 5;
  v50 = v31;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v49);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v49);
  v32 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v55, "sourcePID");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v49);
  v33 = *(_BYTE *)v32;
  *(_BYTE *)v32 = v49[0];
  v49[0] = v33;
  v34 = (uint64_t *)v32[1];
  v32[1] = (uint64_t)v50;
  v50 = v34;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v49);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v50, v49[0]);
  v47[0] = 6;
  v48 = v20;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v47);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v47);
  v35 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v55, "clientID");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v47);
  v36 = *(_BYTE *)v35;
  *(_BYTE *)v35 = v47[0];
  v47[0] = v36;
  v37 = (uint64_t *)v35[1];
  v35[1] = (uint64_t)v48;
  v48 = v37;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v35);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v47);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v48, v47[0]);
  v38 = bswap32(v18);
  v58 = v38;
  if (((char)v38 - 32) > 0x5E
    || (((__int16)v38 >> 8) - 32) > 0x5E
    || ((v38 << 8 >> 24) - 32) > 0x5E
    || ((v38 >> 24) - 32) > 0x5E)
  {
    std::to_string(&v46, v18);
  }
  else
  {
    v59 = 39;
    __s = 39;
    std::string::basic_string[abi:ne180100]<0>(&v46, &__s);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>((uint64_t)&__s, (uint64_t)&v46);
  v39 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v55, "type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&__s);
  v40 = *(_BYTE *)v39;
  *(_BYTE *)v39 = __s;
  __s = v40;
  v41 = (uint64_t *)v39[1];
  v39[1] = (uint64_t)v60[0];
  v60[0] = v41;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v39);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&__s);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v60, __s);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v55, -1, 0x20u, 0, 0, (_QWORD *)(a1 + 176));
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v55);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v56, v55[0]);

  return a1;
}

void sub_1C8998634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, std::mutex *a10, void *a11, void *a12, void *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t *a28)
{
  id *v28;
  void *v29;
  void *v30;

  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&a28);

  std::__list_imp<NSDictionary * {__strong}>::clear(a9);
  std::mutex::~mutex(a10);
  BaseOpaqueObject::~BaseOpaqueObject((BaseOpaqueObject *)v28);

  _Unwind_Resume(a1);
}

id as::server::AudioAppRemoteClient::GetDeferredMessages(as::server::AudioAppRemoteClient *this)
{
  std::mutex *v2;
  id v3;
  uint64_t *v4;
  uint64_t i;
  id v6;

  v2 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  v3 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v4 = (uint64_t *)((char *)this + 88);
  for (i = *((_QWORD *)this + 12); (uint64_t *)i != v4; i = *(_QWORD *)(i + 8))
  {
    v6 = *(id *)(i + 16);
    objc_msgSend(v3, "addObject:", v6);

  }
  std::__list_imp<NSDictionary * {__strong}>::clear(v4);
  std::mutex::unlock(v2);
  return v3;
}

void sub_1C89987B0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void as::server::AudioAppRemoteClient::DeferPropertyChangeCallback(as::server::AudioAppRemoteClient *this, NSString *a2, NSDictionary *a3, int a4)
{
  NSString *v7;
  NSDictionary *v8;
  as::server *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSString *v13;
  void *v14;
  NSObject *v15;
  _QWORD *v16;
  NSDictionary *v17;
  NSDictionary *v18;
  void *v19;
  NSString *v20;
  NSDictionary *v21;
  _BYTE buf[12];
  __int16 v23;
  int v24;
  __int16 v25;
  NSString *v26;
  __int16 v27;
  NSDictionary *v28;
  __int16 v29;
  _QWORD *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  std::mutex::lock((std::mutex *)((char *)this + 16));
  if (*((_QWORD *)this + 14))
  {
    v10 = (char *)this + 88;
    v11 = *((_QWORD *)this + 13);
    if (a4)
    {
      v12 = *((_QWORD *)this + 12);
      v13 = v7;
      while (1)
      {
        if ((char *)v12 == v10)
        {

          goto LABEL_10;
        }
        objc_msgSend(*(id *)(v12 + 16), "objectForKey:", v13);
        v14 = (void *)objc_claimAutoreleasedReturnValue();

        if (v14)
          break;
        v12 = *(_QWORD *)(v12 + 8);
      }

      if ((char *)v12 != v10)
        v9 = (as::server *)std::list<NSDictionary * {__strong}>::erase((uint64_t)this + 88, (uint64_t *)v12);
    }
LABEL_10:
    v15 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v9));
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      v16 = (_QWORD *)((char *)this + 176);
      if (*((char *)this + 199) < 0)
        v16 = (_QWORD *)*v16;
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "AudioApplicationInfoRemoteClient.mm";
      v23 = 1024;
      v24 = 90;
      v25 = 2112;
      v26 = v7;
      v27 = 2112;
      v28 = v8;
      v29 = 2080;
      v30 = v16;
      _os_log_impl(&dword_1C895C000, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d dispatching %@, payload: %@ to audio app client {%s}", buf, 0x30u);
    }
    if (v8)
      v17 = v8;
    else
      v17 = (NSDictionary *)objc_alloc_init(MEMORY[0x1E0C99D80]);
    v18 = v17;
    v20 = v7;
    v21 = v17;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v21, &v20, 1);
    *(_QWORD *)buf = objc_claimAutoreleasedReturnValue();
    std::list<NSDictionary * {__strong}>::push_back((uint64_t *)this + 11, (id *)buf);

    if (!v11)
    {
      objc_msgSend(*((id *)this + 14), "remoteObjectProxy");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "pingClient:", *((unsigned int *)this + 2));

    }
  }
  std::mutex::unlock((std::mutex *)((char *)this + 16));

}

void sub_1C89989F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;
  void *v12;
  std::mutex *v13;

  std::mutex::unlock(v13);

  _Unwind_Resume(a1);
}

uint64_t as::server::AudioAppRemoteClient::PrintObject(as::server::AudioAppRemoteClient *this, __sFILE *a2)
{
  const char *v2;

  v2 = (char *)this + 176;
  if (*((char *)this + 199) < 0)
    v2 = *(const char **)v2;
  return fprintf(a2, "<AudioAppRemoteClient { %s }>", v2);
}

void as::server::AudioAppRemoteClient::~AudioAppRemoteClient(as::server::AudioAppRemoteClient *this)
{
  *(_QWORD *)this = off_1E82054B8;
  if (*((char *)this + 199) < 0)
    operator delete(*((void **)this + 22));

  std::__list_imp<NSDictionary * {__strong}>::clear((uint64_t *)this + 11);
  std::mutex::~mutex((std::mutex *)((char *)this + 16));
  BaseOpaqueObject::~BaseOpaqueObject(this);
}

{
  *(_QWORD *)this = off_1E82054B8;
  if (*((char *)this + 199) < 0)
    operator delete(*((void **)this + 22));

  std::__list_imp<NSDictionary * {__strong}>::clear((uint64_t *)this + 11);
  std::mutex::~mutex((std::mutex *)((char *)this + 16));
  BaseOpaqueObject::~BaseOpaqueObject(this);
  JUMPOUT(0x1CAA38D28);
}

BOOL TOpaqueObject<as::server::AudioAppRemoteClient,unsigned int,BaseOpaqueObject>::isa(uint64_t a1, void *a2)
{
  return a2 == &TOpaqueRTTI<as::server::AudioAppRemoteClient>::sRTTI || a2 == &BaseOpaqueObject::sBaseRTTI;
}

void OpaqueObjectMgr::OpaqueObjectMgr(OpaqueObjectMgr *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E8205518;
  v6 = v5;
  v2 = std::__function::__value_func<unsigned int ()>::__value_func[abi:ne180100]((uint64_t)this, (uint64_t)v5);
  *(_DWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_DWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 80) = 850045863;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_QWORD *)(v2 + 136) = 0;
  v3 = v6;
  if (v6 == v5)
  {
    v4 = 4;
    v3 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  *((_DWORD *)this + 36) = 0;
  atomic_store((getpid() & 0x3FFFF) << 12, (unsigned int *)this + 36);
}

void sub_1C8998C80(_Unwind_Exception *a1)
{
  uint64_t v1;

  caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::~guarded_lookup_hash_table(v1);
  _Unwind_Resume(a1);
}

BOOL BaseOpaqueObject::isa(uint64_t a1, void *a2)
{
  return a2 == &BaseOpaqueObject::sBaseRTTI;
}

void std::__function::__func<OpaqueObjectMgr::OpaqueObjectMgr(void)::$_0,std::allocator<OpaqueObjectMgr::OpaqueObjectMgr(void)::$_0>,unsigned int ()(unsigned int)>::~__func()
{
  JUMPOUT(0x1CAA38D28);
}

_QWORD *std::__function::__func<OpaqueObjectMgr::OpaqueObjectMgr(void)::$_0,std::allocator<OpaqueObjectMgr::OpaqueObjectMgr(void)::$_0>,unsigned int ()(unsigned int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8205518;
  return result;
}

void std::__function::__func<OpaqueObjectMgr::OpaqueObjectMgr(void)::$_0,std::allocator<OpaqueObjectMgr::OpaqueObjectMgr(void)::$_0>,unsigned int ()(unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8205518;
}

uint64_t std::__function::__value_func<unsigned int ()(unsigned int)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned int)>>::~guarded_lookup_hash_table(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  void **v9;

  if (atomic_load((unsigned int *)(a1 + 48)))
  {
    _os_assert_log();
    v8 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v8);
  }
  v3 = atomic_load((unint64_t *)(a1 + 40));
  if (v3)
  {
    v4 = caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::table_impl::~table_impl(v3);
    MEMORY[0x1CAA38D28](v4, 0x1060C402CF69088);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 80));
  v9 = (void **)(a1 + 56);
  std::vector<std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::table_impl>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v5 = *(_QWORD **)(a1 + 24);
  if (v5 == (_QWORD *)a1)
  {
    v6 = 4;
    v5 = (_QWORD *)a1;
    goto LABEL_8;
  }
  if (v5)
  {
    v6 = 5;
LABEL_8:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned int)>>::table_impl::~table_impl(uint64_t a1)
{
  uint64_t v2;
  unsigned int **v3;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2)
  {
    v3 = (unsigned int **)(a1 + 16);
    do
    {
      if ((unint64_t)*v3 + 1 >= 2)
        caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::element_t::release(*v3);
      ++v3;
      --v2;
    }
    while (v2);
  }
  return a1;
}

void std::vector<std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned int)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned int)>>::table_impl>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::table_impl>>::reset[abi:ne180100](--v4, 0);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned int)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned int)>>::table_impl>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::table_impl::~table_impl(result);
    JUMPOUT(0x1CAA38D28);
  }
  return result;
}

_DWORD *caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned int)>>::rehash(unint64_t *a1, unsigned int a2)
{
  unint64_t *v4;
  unint64_t v5;
  _DWORD *v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t *v16;
  char *v17;
  unint64_t v18;
  __int128 v19;
  unint64_t v20;
  uint64_t v22;
  __int128 v23;
  char *v24;
  unint64_t *v25;

  v4 = a1 + 5;
  v5 = atomic_load(a1 + 5);
  v6 = operator new(8 * (a2 - 1) + 24);
  *(_QWORD *)v6 = a1;
  v6[2] = a2;
  *((_QWORD *)v6 + 2) = 0;
  bzero(v6 + 4, 8 * a2);
  if (v5)
  {
    caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::table_impl::copyAllElementsTo(v5, (uint64_t *)v6);
    atomic_store((unint64_t)v6, v4);
    v7 = a1[9];
    v8 = (unint64_t *)a1[8];
    if ((unint64_t)v8 >= v7)
    {
      v10 = (_QWORD *)a1[7];
      v11 = v8 - v10;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      v12 = v7 - (_QWORD)v10;
      v13 = (uint64_t)(v7 - (_QWORD)v10) >> 2;
      if (v13 <= v11 + 1)
        v13 = v11 + 1;
      if (v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      v25 = a1 + 9;
      if (v14)
      {
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<as::server::ObjectDescription>>>((uint64_t)(a1 + 9), v14);
        v10 = (_QWORD *)a1[7];
        v8 = (unint64_t *)a1[8];
      }
      else
      {
        v15 = 0;
      }
      v16 = (unint64_t *)&v15[8 * v11];
      v17 = &v15[8 * v14];
      v24 = v17;
      *v16 = v5;
      *((_QWORD *)&v23 + 1) = v16 + 1;
      if (v8 == v10)
      {
        v9 = v16 + 1;
      }
      else
      {
        do
        {
          v18 = *--v8;
          *v8 = 0;
          *--v16 = v18;
        }
        while (v8 != v10);
        v9 = (_QWORD *)*((_QWORD *)&v23 + 1);
        v17 = v24;
      }
      v19 = *(_OWORD *)(a1 + 7);
      a1[7] = (unint64_t)v16;
      a1[8] = (unint64_t)v9;
      v23 = v19;
      v20 = a1[9];
      a1[9] = (unint64_t)v17;
      v24 = (char *)v20;
      v22 = v19;
      std::__split_buffer<std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::table_impl>>>::~__split_buffer((uint64_t)&v22);
    }
    else
    {
      *v8 = v5;
      v9 = v8 + 1;
    }
    a1[8] = (unint64_t)v9;
  }
  else
  {
    atomic_store((unint64_t)v6, v4);
  }
  return v6;
}

unint64_t caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned int)>>::table_impl::copyAllElementsTo(unint64_t result, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t i;
  unint64_t v6;
  unsigned int v7;

  v2 = *(unsigned int *)(result + 8);
  if ((_DWORD)v2)
  {
    v4 = result;
    for (i = 0; i != v2; ++i)
    {
      v6 = *(_QWORD *)(v4 + 8 * i + 16);
      if (v6 + 1 >= 2)
      {
        result = caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::table_impl::findSlotForKey(a2, *(_DWORD *)(v6 + 4));
        if ((result & 1) == 0)
        {
          do
            v7 = __ldaxr((unsigned int *)v6);
          while (__stlxr(v7 + 0x10000, (unsigned int *)v6));
          atomic_store(v6, (unint64_t *)&a2[HIDWORD(result) + 2]);
        }
      }
    }
  }
  return result;
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1CAA38D28);
}

uint64_t std::__split_buffer<std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned int)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned int)>>::table_impl>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::table_impl>>::reset[abi:ne180100]((uint64_t *)(i - 8), 0);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::this_thread::sleep_for[abi:ne180100]<long long,std::ratio<1l,1000000l>>(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  BOOL v3;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v4;
  std::chrono::nanoseconds __ns;

  v1 = *a1;
  if (*a1 >= 1)
  {
    if ((double)v1 == 9.22337204e15)
      v2 = 0;
    else
      v2 = -127;
    if ((double)v1 > 9.22337204e15)
      v2 = 1;
    if ((double)v1 < 9.22337204e15)
      v2 = -1;
    v3 = v2 >= 0 || v2 == -127;
    v4 = 1000 * v1;
    if (v3)
      v4 = 0x7FFFFFFFFFFFFFFFLL;
    __ns.__rep_ = v4;
    std::this_thread::sleep_for (&__ns);
  }
}

void std::unique_lock<std::mutex>::unlock(std::unique_lock<std::mutex> *this)
{
  std::unique_lock<std::mutex> *v2;

  if (this->__owns_)
  {
    std::mutex::unlock(this->__m_);
    this->__owns_ = 0;
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    std::unique_lock<std::mutex>::lock(v2);
  }
}

void std::unique_lock<std::mutex>::lock(std::unique_lock<std::mutex> *this)
{
  std::unique_lock<std::mutex>::mutex_type *m;

  m = this->__m_;
  if (m)
  {
    if (!this->__owns_)
    {
      std::mutex::lock(m);
      this->__owns_ = 1;
      return;
    }
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::lock: references null mutex");
  }
  std::__throw_system_error(11, "unique_lock::lock: already locked");
  std::__call_once_proxy[abi:ne180100]<std::tuple<OpaqueObjectMgrInstance(void)::$_0 &&>>();
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<OpaqueObjectMgrInstance(void)::$_0 &&>>()
{
  OpaqueObjectMgr *v0;

  v0 = (OpaqueObjectMgr *)operator new();
  OpaqueObjectMgr::OpaqueObjectMgr(v0);
  OpaqueObjectMgr::sInstance = (uint64_t)v0;
}

void sub_1C8999308(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1CAA38D28](v1, 0x1020C400FEAF0FDLL);
  _Unwind_Resume(a1);
}

caulk::log_category *caulk::log_category::log_category(caulk::log_category *this, const char *subsystem, const char *category)
{
  os_log_t v4;
  void *v5;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v4 = os_log_create(subsystem, category);
  v5 = *(void **)this;
  *(_QWORD *)this = v4;

  return this;
}

void as::server::ProcessInfo::processName(as::server::ProcessInfo *this@<X0>, std::string *a2@<X8>)
{
  int v4;
  uint64_t v5;
  void **v6;
  void *v7;
  caulk::platform *v8;
  __int128 v9;
  uint64_t v10;
  audit_token_t atoken;

  v4 = *((char *)this + 47);
  if (v4 < 0)
    v5 = *((_QWORD *)this + 4);
  else
    v5 = *((unsigned __int8 *)this + 47);
  v6 = (void **)((char *)this + 24);
  if (v5)
  {
    if ((v4 & 0x80) == 0)
    {
LABEL_6:
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v6;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 5);
      return;
    }
  }
  else
  {
    v7 = (void *)*((_QWORD *)this + 1);
    if (v7)
      objc_msgSend(v7, "auditToken");
    else
      memset(&atoken, 0, sizeof(atoken));
    v8 = (caulk::platform *)audit_token_to_pid(&atoken);
    caulk::platform::process_name(v8);
    if (*((char *)this + 47) < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = v9;
    *((_QWORD *)this + 5) = v10;
    if ((*((_BYTE *)this + 47) & 0x80) == 0)
      goto LABEL_6;
  }
  std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return std::string::__assign_external(this, __s, v4);
}

const void **applesauce::CF::ArrayRef_iterator<applesauce::CF::TypeRef>::iterator_proxy::~iterator_proxy(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void applesauce::CF::ArrayRef::~ArrayRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

_QWORD *applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::~DictionaryRef_iterator(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::iterator_proxy::~iterator_proxy(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  return a1;
}

void applesauce::CF::convert_error(applesauce::CF *this)
{
  JUMPOUT(0x1CAA38B30);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

_QWORD *std::pair<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::pair[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  CFTypeRef v4;
  const void *v5;

  v4 = *(CFTypeRef *)a2;
  if (*(_QWORD *)a2)
    CFRetain(*(CFTypeRef *)a2);
  *a1 = v4;
  v5 = *(const void **)(a2 + 8);
  if (v5)
    CFRetain(v5);
  a1[1] = v5;
  return a1;
}

const __CFBoolean *applesauce::CF::details::treat_as_BOOL_for_convert_as<double>(const __CFBoolean *result)
{
  const __CFBoolean *v1;
  CFTypeID TypeID;

  if (*(double *)&result != 0.0)
  {
    v1 = result;
    TypeID = CFBooleanGetTypeID();
    if (TypeID == CFGetTypeID(v1))
      *(double *)&result = (double)CFBooleanGetValue(v1);
    else
      *(double *)&result = 0.0;
  }
  return result;
}

const __CFBoolean *applesauce::CF::details::treat_as_BOOL_for_convert_as<long long>(const __CFBoolean *result)
{
  const __CFBoolean *v1;
  CFTypeID TypeID;

  if (result)
  {
    v1 = result;
    TypeID = CFBooleanGetTypeID();
    if (TypeID == CFGetTypeID(v1))
      return (const __CFBoolean *)CFBooleanGetValue(v1);
    else
      return 0;
  }
  return result;
}

void applesauce::CF::not_found(applesauce::CF *this)
{
  JUMPOUT(0x1CAA38B30);
}

std::string *std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:ne180100]<std::string const&>(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  this[1].__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&this[1]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&this[1]);
  return this;
}

uint64_t std::stringbuf::str[abi:ne180100]<std::allocator<char>>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  unint64_t v4;
  const void *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  result = std::stringbuf::view[abi:ne180100](a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = (const void *)result;
  v6 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((_BYTE *)a2 + 23) = v4;
    if (!v4)
      goto LABEL_9;
  }
  result = (uint64_t)memmove(a2, v5, v6);
LABEL_9:
  *((_BYTE *)a2 + v6) = 0;
  return result;
}

uint64_t std::stringbuf::view[abi:ne180100](uint64_t a1)
{
  int v1;
  unint64_t v3;

  v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    v3 = *(_QWORD *)(a1 + 48);
    if (*(_QWORD *)(a1 + 88) < v3)
      *(_QWORD *)(a1 + 88) = v3;
    return *(_QWORD *)(a1 + 40);
  }
  else if ((v1 & 8) != 0)
  {
    return *(_QWORD *)(a1 + 16);
  }
  else
  {
    return 0;
  }
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x1CAA38BB4](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x1CAA38BC0](v13);
  return a1;
}

void sub_1C8999978(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x1CAA38BC0](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1C8999958);
}

void sub_1C89999C0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_1C8999AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1C8999B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1C8999C1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void `anonymous namespace'::HandleInterruptionWithIDNotification(_anonymous_namespace_ *this, int a2)
{
  int v3;
  NSObject *v4;
  _QWORD block[4];
  int v6;
  int v7;

  v3 = (int)this;
  as::server::GetASCallbackQueue(this);
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN12_GLOBAL__N_136HandleInterruptionWithIDNotificationEjj_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  v6 = v3;
  v7 = a2;
  dispatch_async(v4, block);

}

void as::server::HandleMXNotification(opaqueCMNotificationCenter *,void const*,__CFString const*,void const*,void const*)::$_0::operator()(id *a1, char a2)
{
  NSObject *v4;
  _QWORD block[4];
  id v6;
  id v7;
  int v8;
  char v9;

  as::server::GetASCallbackQueue((as::server *)a1);
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZZN2as6server20HandleMXNotificationEP26opaqueCMNotificationCenterPKvPK10__CFStringS4_S4_ENK3__0clEb_block_invoke;
  block[3] = &unk_1E8205638;
  v8 = *(_DWORD *)a1;
  v6 = a1[1];
  v7 = a1[2];
  v9 = a2;
  dispatch_async(v4, block);

}

void `anonymous namespace'::HandleCategoryOrModeChangedCallback(_anonymous_namespace_ *this, void *a2, NSString *a3, NSDictionary *a4)
{
  id v6;
  NSString *v7;
  int v8;
  as::server *v9;
  int v10;
  NSObject *v11;
  uint64_t isKindOfClass;
  const void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  NSObject *v18;
  objc_class *v19;
  std::string *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  const void *v28;
  id v29;
  unint64_t v30;
  void *v31;
  char v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  as::server::AudioSessionInfo *v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  unint64_t v40;
  as::server::AudioSessionInfo *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  as::server::AudioSessionInfo *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  NSObject *v53;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  as::server *v57;
  NSObject *v58;
  int v59;
  std::string::size_type v60;
  std::string *v61;
  void *v62;
  as::server::AudioSessionInfo *v63;
  unint64_t *v64;
  unint64_t v65;
  as::server::AudioSessionInfo *v66;
  unint64_t *v67;
  unint64_t v68;
  NSObject *v69;
  int v70;
  std::string::size_type v71;
  std::string *v72;
  void *v73;
  as::server::AudioSessionInfo *v74;
  unint64_t *v75;
  unint64_t v76;
  as::server::AudioSessionInfo *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  as::server *v81;
  as::server *v82;
  unint64_t v83;
  void *v84;
  as::server *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  _QWORD v94[4];
  as::server *v95;
  int v96;
  char *v97;
  char *v98;
  char v99[8];
  uint64_t *v100;
  std::string v101;
  as::server::AudioSessionInfo *v102;
  std::__shared_weak_count *v103;
  char v104;
  CFTypeRef cf[3];
  char v106;
  _BYTE v107[16];
  uint64_t v108;
  char v109;
  void *__p;
  char v111;
  void **p_p;
  char v113;
  _BYTE v114[16];
  uint64_t v115;
  char v116;
  _BYTE buf[28];
  __int16 v118;
  std::string *v119;
  __int16 v120;
  _QWORD v121[2];
  char v122;
  uint64_t v123;

  v123 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = a3;
  v8 = objc_msgSend(v6, "isEqualToString:", *MEMORY[0x1E0D492D0]);
  v9 = (as::server *)objc_msgSend(v6, "isEqualToString:", *MEMORY[0x1E0D492D8]);
  v10 = (int)v9;
  if (((v8 | v9) & 1) != 0)
  {
    -[NSString objectForKey:](v7, "objectForKey:", v6);
    v11 = objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    if ((isKindOfClass & 1) != 0)
    {
      as::server::ConstAudioSessionInfoAccessor::ConstAudioSessionInfoAccessor((as::server::ConstAudioSessionInfoAccessor *)buf, this);
      v13 = *(const void **)buf;
      if (*(_QWORD *)buf)
      {
        v14 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v15 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
          as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v13, cf);
          do
            v17 = __ldaxr(v15);
          while (__stlxr(v17 - 1, v15));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        else
        {
          as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(*(CFTypeRef *)buf, cf);
        }
        v24 = *(_QWORD *)buf;
        if (!*(_QWORD *)buf)
        {
          v86 = _os_crash();
          as::server::require_acq::AudioSessionServerSetClientPlayState(v86);
        }
        v25 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v26 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
          v29 = *(id *)(v24 + 96);
          do
            v30 = __ldaxr(v26);
          while (__stlxr(v30 - 1, v26));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          v29 = *(id *)(*(_QWORD *)buf + 96);
        }
        as::server::forbid_acq::CopyCMSessionAudioMode((as::server::forbid_acq *)cf[0], v28);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        as::server::GetSpatialPreferences(v29, (uint64_t)this, v31, (uint64_t)&__p);
        v93 = __p;
        v32 = v111;

        if (cf[0])
          CFRelease(cf[0]);
        v33 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v34 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor((as::server::AudioSessionInfoAccessor *)&v102, this);
        v36 = v102;
        if (!v102)
          goto LABEL_120;
        v37 = v103;
        if (v103)
        {
          p_shared_owners = (unint64_t *)&v103->__shared_owners_;
          do
            v39 = __ldxr(p_shared_owners);
          while (__stxr(v39 + 1, p_shared_owners));
          *((_BYTE *)v36 + 432) = v32;
          do
            v40 = __ldaxr(p_shared_owners);
          while (__stlxr(v40 - 1, p_shared_owners));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        else
        {
          *((_BYTE *)v102 + 432) = v32;
        }
        v41 = v102;
        if (!v102)
        {
          v87 = _os_crash();
          as::server::require_acq::AudioSessionServerSetClientPlayState(v87);
        }
        v42 = v103;
        *(_QWORD *)buf = v102;
        *(_QWORD *)&buf[8] = v103;
        if (v103)
        {
          v43 = (unint64_t *)&v103->__shared_owners_;
          do
            v44 = __ldxr(v43);
          while (__stxr(v44 + 1, v43));
        }
        as::server::AudioSessionInfo::SetSpatialPreferences((uint64_t)v41, v93);
        if (v42)
        {
          v45 = (unint64_t *)&v42->__shared_owners_;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        v47 = v102;
        if (!v102)
        {
          v88 = _os_crash();
          as::server::require_acq::AudioSessionServerSetClientPlayState(v88);
        }
        v48 = v103;
        *(_QWORD *)buf = v102;
        *(_QWORD *)&buf[8] = v103;
        if (v103)
        {
          v49 = (unint64_t *)&v103->__shared_owners_;
          do
            v50 = __ldxr(v49);
          while (__stxr(v50 + 1, v49));
        }
        if (*((char *)v47 + 223) < 0)
          std::string::__init_copy_ctor_external(&v101, *((const std::string::value_type **)v47 + 25), *((_QWORD *)v47 + 26));
        else
          v101 = *(std::string *)((char *)v47 + 200);
        if (v48)
        {
          v51 = (unint64_t *)&v48->__shared_owners_;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[4],char [4],0>((uint64_t)&__p, "key");
        p_p = &__p;
        v113 = 1;
        v98 = (char *)objc_msgSend(objc_retainAutorelease(v6), "UTF8String");
        v115 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v114, &v98);
        v116 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)buf, (uint64_t)&__p, 2, 1, 2);
        *(_QWORD *)&buf[16] = buf;
        buf[24] = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>((uint64_t)cf, "value");
        cf[2] = cf;
        v106 = 1;
        v53 = objc_retainAutorelease(v11);
        v97 = (char *)-[NSObject UTF8String](v53, "UTF8String");
        v108 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v107, &v97);
        v109 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v119 + 2, (uint64_t)cf, 2, 1, 2);
        v121[1] = (char *)&v119 + 2;
        v122 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v99, (uint64_t)buf, 2, 1, 2);
        for (i = 0; i != -8; i -= 4)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v119 + i * 8 + 2);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v121[i], *((unsigned __int8 *)&v119 + i * 8 + 2));
        }
        for (j = 0; j != -64; j -= 32)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v107[j]);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v107[j + 8], v107[j]);
        }
        for (k = 0; k != -64; k -= 32)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v114[k]);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v114[k + 8], v114[k]);
        }
        if (v8)
        {
          v58 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v57));
          if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
          {
            v59 = SHIBYTE(v101.__r_.__value_.__r.__words[2]);
            v60 = v101.__r_.__value_.__r.__words[0];
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v99, -1, 0x20u, 0, 0, &__p);
            v61 = &v101;
            if (v59 < 0)
              v61 = (std::string *)v60;
            if (SHIBYTE(p_p) >= 0)
              v62 = &__p;
            else
              v62 = __p;
            *(_DWORD *)buf = 136316162;
            *(_QWORD *)&buf[4] = "AudioSessionServerImpNotificationHandlers.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 499;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = "handle_audio_category_change";
            v118 = 2080;
            v119 = v61;
            v120 = 2080;
            v121[0] = v62;
            _os_log_impl(&dword_1C895C000, v58, OS_LOG_TYPE_INFO, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
            if (SHIBYTE(p_p) < 0)
              operator delete(__p);
          }

          v63 = v102;
          if (!v102)
          {
            v90 = _os_crash();
            as::server::require_acq::AudioSessionServerSetClientPlayState(v90);
          }
          *(_QWORD *)buf = v102;
          *(_QWORD *)&buf[8] = v103;
          if (v103)
          {
            v64 = (unint64_t *)&v103->__shared_owners_;
            do
              v65 = __ldxr(v64);
            while (__stxr(v65 + 1, v64));
          }
          *((_BYTE *)v63 + 312) = 1;
          std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          v66 = v102;
          if (!v102)
          {
            v91 = _os_crash();
            as::server::require_acq::AudioSessionServerSetClientPlayState(v91);
          }
          *(_QWORD *)buf = v102;
          *(_QWORD *)&buf[8] = v103;
          if (v103)
          {
            v67 = (unint64_t *)&v103->__shared_owners_;
            do
              v68 = __ldxr(v67);
            while (__stxr(v68 + 1, v67));
          }
          as::server::AudioSessionInfo::SetCachedCategory(v66, v53);
        }
        else
        {
          if (!v10)
          {
LABEL_107:
            v77 = v102;
            if (!v102)
            {
              v89 = _os_crash();
              as::server::require_acq::AudioSessionServerSetClientPlayState(v89);
            }
            v78 = v103;
            if (v103)
            {
              v79 = (unint64_t *)&v103->__shared_owners_;
              do
                v80 = __ldxr(v79);
              while (__stxr(v80 + 1, v79));
              v81 = (as::server *)*((id *)v77 + 12);
              v82 = v81;
              do
                v83 = __ldaxr(v79);
              while (__stlxr(v83 - 1, v79));
              if (!v83)
              {
                ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                std::__shared_weak_count::__release_weak(v78);
              }
            }
            else
            {
              v81 = (as::server *)*((id *)v102 + 12);
              v82 = v81;
            }
            if (v102)
            {
              os_unfair_lock_unlock((os_unfair_lock_t)v102 + 158);
              v104 = 0;
            }
            as::server::GetAudioControlQueue(v81);
            v84 = (void *)objc_claimAutoreleasedReturnValue();
            v94[0] = MEMORY[0x1E0C809B0];
            v94[1] = 3221225472;
            v94[2] = ___ZN12_GLOBAL__N_135HandleCategoryOrModeChangedCallbackEjP8NSStringP12NSDictionary_block_invoke;
            v94[3] = &unk_1E8205598;
            v96 = (int)this;
            v85 = v82;
            v95 = v85;
            as::server::DispatchBlock(v84, v94, 0, (uint64_t)"HandleCategoryOrModeChangedCallback", (uint64_t)"AudioSessionServerImpNotificationHandlers.mm", 519, 0, 0);

            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v99);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v100, v99[0]);
            if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v101.__r_.__value_.__l.__data_);
LABEL_120:
            as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)&v102);

            goto LABEL_121;
          }
          v69 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v57));
          if (os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
          {
            v70 = SHIBYTE(v101.__r_.__value_.__r.__words[2]);
            v71 = v101.__r_.__value_.__r.__words[0];
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v99, -1, 0x20u, 0, 0, &__p);
            v72 = &v101;
            if (v70 < 0)
              v72 = (std::string *)v71;
            if (SHIBYTE(p_p) >= 0)
              v73 = &__p;
            else
              v73 = __p;
            *(_DWORD *)buf = 136316162;
            *(_QWORD *)&buf[4] = "AudioSessionServerImpNotificationHandlers.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 503;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = "handle_audio_mode_change";
            v118 = 2080;
            v119 = v72;
            v120 = 2080;
            v121[0] = v73;
            _os_log_impl(&dword_1C895C000, v69, OS_LOG_TYPE_INFO, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
            if (SHIBYTE(p_p) < 0)
              operator delete(__p);
          }

          v74 = v102;
          if (!v102)
          {
            v92 = _os_crash();
            as::server::require_acq::AudioSessionServerSetClientPlayState(v92);
          }
          *(_QWORD *)buf = v102;
          *(_QWORD *)&buf[8] = v103;
          if (v103)
          {
            v75 = (unint64_t *)&v103->__shared_owners_;
            do
              v76 = __ldxr(v75);
            while (__stxr(v76 + 1, v75));
          }
          as::server::AudioSessionInfo::SetCachedMode(v74, v53);
        }
        std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        goto LABEL_107;
      }
      v21 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v22 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
    else
    {
      v18 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)isKindOfClass));
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        v19 = (objc_class *)objc_opt_class();
        NSStringFromClass(v19);
        v20 = (std::string *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "AudioSessionServerImpNotificationHandlers.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 461;
        *(_WORD *)&buf[18] = 2112;
        *(_QWORD *)&buf[20] = v6;
        v118 = 2112;
        v119 = v20;
        _os_log_impl(&dword_1C895C000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid value type: key = %@, value type = %@", buf, 0x26u);

      }
    }
  }
  else
  {
    v11 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v9));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AudioSessionServerImpNotificationHandlers.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 455;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = objc_msgSend(objc_retainAutorelease(v6), "UTF8String");
      _os_log_impl(&dword_1C895C000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed assertion. Unexpected CM notification key: %s", buf, 0x1Cu);
    }
  }
LABEL_121:

}

void sub_1C899A838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t *a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,os_unfair_lock_s *a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&a19);
  if (a26 < 0)
    operator delete(__p);
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor(&a27);

  _Unwind_Resume(a1);
}

void `anonymous namespace'::HandleInputMuteChange(_anonymous_namespace_ *this, void *a2, NSMutableDictionary *a3)
{
  unsigned int v3;
  as::server::LegacySessionManager *v4;
  as::server::LegacySessionManager *v5;
  os_unfair_lock_s *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  os_unfair_lock_s *v10;
  std::__shared_weak_count *v11;

  v3 = this;
  objc_msgSend(a2, "objectForKey:", *MEMORY[0x1E0D49310]);
  v4 = (as::server::LegacySessionManager *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v3 && v4)
  {
    v6 = (os_unfair_lock_s *)as::server::LegacySessionManager::Instance(v4);
    as::server::LegacySessionManager::FindAudioApplicationForSession(v6, v3, &v10);
    if (v10)
      as::server::AudioApplicationInfo::HandleSessionInputMuteChange(v10, v3, -[as::server::LegacySessionManager BOOLValue](v5, "BOOLValue"));
    v7 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }

}

void sub_1C899AB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void as::server::HandleCFNotification(as::server *this, __CFNotificationCenter *a2, void *a3, const __CFString *a4, const void *a5, const __CFDictionary *a6)
{
  int v6;
  void *v7;
  as::server *v8;
  NSObject *v9;
  _QWORD v10[4];
  id v11;
  int v12;

  v6 = (int)a2;
  v7 = a3;
  v8 = (as::server *)objc_msgSend(v7, "isEqualToString:", *MEMORY[0x1E0CFF320]);
  if ((_DWORD)v8)
  {
    as::server::GetASCallbackQueue(v8);
    v9 = objc_claimAutoreleasedReturnValue();
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = ___ZN2as6server20HandleCFNotificationEP22__CFNotificationCenterPvPK10__CFStringPKvPK14__CFDictionary_block_invoke;
    v10[3] = &unk_1E8205598;
    v12 = v6;
    v11 = v7;
    dispatch_async(v9, v10);

  }
}

void sub_1C899ABDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN2as6server20HandleCFNotificationEP22__CFNotificationCenterPvPK10__CFStringPKvPK14__CFDictionary_block_invoke(uint64_t a1)
{
  uint64_t v1;
  id v2;
  as::server::ConstAudioSessionInfo *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  const void *v7;
  unint64_t v8;
  NSObject *v9;
  void *v10;
  as::server::ConstAudioSessionInfo *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  id v17;
  unsigned __int8 v18;
  void *v19;
  NSDictionary *v20;
  as::server::ConstAudioSessionInfo *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  as::server::ConstAudioSessionInfo *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  as::server::ConstAudioSessionInfo *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  id v38;
  uint64_t i;
  as::server *v40;
  NSObject *v41;
  int v42;
  std::string::size_type v43;
  std::string *v44;
  void **v45;
  as::server::ConstAudioSessionInfo *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  _BYTE v58[8];
  uint64_t *v59;
  std::string v60;
  void *v61;
  unsigned __int8 v62;
  CFTypeRef cf;
  as::server::ConstAudioSessionInfo *v64;
  std::__shared_weak_count *v65;
  char v66;
  uint8_t buf[4];
  const char *v68;
  __int16 v69;
  _BYTE v70[14];
  __int16 v71;
  std::string *v72;
  __int16 v73;
  _QWORD v74[2];
  char v75;
  void **v76;
  uint64_t *v77;
  void **v78;
  char v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v1 = *(unsigned int *)(a1 + 40);
  v2 = *(id *)(a1 + 32);
  as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor((as::server::AudioSessionInfoAccessor *)&v64, v1);
  v3 = v64;
  if (v64)
  {
    v4 = v65;
    if (v65)
    {
      p_shared_owners = (unint64_t *)&v65->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v3, &cf);
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    else
    {
      as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v64, &cf);
    }
    if (v64)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)v64 + 158);
      v66 = 0;
    }
    as::server::forbid_acq::CopyCMSessionAudioMode((as::server::forbid_acq *)cf, v7);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v64;
    if (!v64)
    {
      v52 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v52);
    }
    v12 = v65;
    if (v65)
    {
      v13 = (unint64_t *)&v65->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    as::server::GetSpatialPreferences(*((void **)v11 + 12), v1, v10, (uint64_t)&v61);
    if (v12)
    {
      v15 = (unint64_t *)&v12->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v17 = objc_alloc(MEMORY[0x1E0C99D80]);
    v18 = v62;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v62);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = (NSDictionary *)objc_msgSend(v17, "initWithObjectsAndKeys:", v19, CFSTR("AVAudioSessionSpatializationEnabledKey"), 0);

    if (!v64 || (os_unfair_lock_lock((os_unfair_lock_t)v64 + 158), v66 = 1, (v21 = v64) == 0))
    {
      v56 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v56);
    }
    v22 = v65;
    if (v65)
    {
      v23 = (unint64_t *)&v65->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      *((_BYTE *)v21 + 432) = v18;
      do
        v25 = __ldaxr(v23);
      while (__stlxr(v25 - 1, v23));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    else
    {
      *((_BYTE *)v64 + 432) = v18;
    }
    v26 = v64;
    if (!v64)
    {
      v53 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v53);
    }
    v27 = v65;
    if (v65)
    {
      v28 = (unint64_t *)&v65->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    as::server::AudioSessionInfo::SetSpatialPreferences((uint64_t)v26, v61);
    if (v27)
    {
      v30 = (unint64_t *)&v27->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v32 = v64;
    if (!v64)
    {
      v54 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v54);
    }
    v33 = v65;
    if (v65)
    {
      v34 = (unint64_t *)&v65->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    if (*((char *)v32 + 223) < 0)
      std::string::__init_copy_ctor_external(&v60, *((const std::string::value_type **)v32 + 25), *((_QWORD *)v32 + 26));
    else
      v60 = *(std::string *)((char *)v32 + 200);
    if (v33)
    {
      v36 = (unint64_t *)&v33->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[4],char [4],0>((uint64_t)buf, "key");
    *(_QWORD *)&v70[2] = buf;
    v70[10] = 1;
    v38 = objc_retainAutorelease(v2);
    v57 = (char *)objc_msgSend(v38, "UTF8String");
    v74[1] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)&v72 + 2, &v57);
    v75 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v76, (uint64_t)buf, 2, 1, 2);
    v78 = (void **)&v76;
    v79 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v58, (uint64_t)&v76, 1, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v76);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v77, v76);
    for (i = 0; i != -8; i -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v72 + i * 8 + 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v74[i], *((unsigned __int8 *)&v72 + i * 8 + 2));
    }
    v41 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v40));
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      v42 = SHIBYTE(v60.__r_.__value_.__r.__words[2]);
      v43 = v60.__r_.__value_.__r.__words[0];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v58, -1, 0x20u, 0, 0, &v76);
      v44 = &v60;
      if (v42 < 0)
        v44 = (std::string *)v43;
      if (SHIBYTE(v78) >= 0)
        v45 = (void **)&v76;
      else
        v45 = v76;
      *(_DWORD *)buf = 136316162;
      v68 = "AudioSessionServerImpNotificationHandlers.mm";
      v69 = 1024;
      *(_DWORD *)v70 = 644;
      *(_WORD *)&v70[4] = 2080;
      *(_QWORD *)&v70[6] = "property_change";
      v71 = 2080;
      v72 = v44;
      v73 = 2080;
      v74[0] = v45;
      _os_log_impl(&dword_1C895C000, v41, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
      if (SHIBYTE(v78) < 0)
        operator delete(v76);
    }

    v46 = v64;
    if (!v64)
    {
      v55 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v55);
    }
    v47 = v65;
    if (v65)
    {
      v48 = (unint64_t *)&v65->__shared_owners_;
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
    as::server::AudioSessionInfo::DeferPropertyChangeCallback(v46, (NSString *)v38, v20, 1);
    if (v47)
    {
      v50 = (unint64_t *)&v47->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v58);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v59, v58[0]);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);

    if (cf)
      CFRelease(cf);
  }
  else
  {
    v9 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(0));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v68 = "AudioSessionServerImpNotificationHandlers.mm";
      v69 = 1024;
      *(_DWORD *)v70 = 616;
      _os_log_impl(&dword_1C895C000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid session pointer.", buf, 0x12u);
    }
  }
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)&v64);

}

void sub_1C899B24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,CFTypeRef cf,os_unfair_lock_s *a25,uint64_t a26,uint64_t a27,char a28)
{
  void *v28;
  void *v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v34;

  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }

  if (cf)
    CFRelease(cf);
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor(&a25);

  _Unwind_Resume(a1);
}

void as::server::HandleMicrophoneInjectionCapabilityChangeNotification(as::server *this, NSDictionary *a2)
{
  as::server *v2;
  id v3;
  as::server *v4;
  NSObject *v5;
  as::server *v6;
  _QWORD v7[4];
  id v8;
  as::server *v9;

  v2 = this;
  v3 = (id)*MEMORY[0x1E0CFF310];
  v4 = v2;
  as::server::GetASCallbackQueue(v4);
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3321888768;
  v7[2] = ___ZN2as6server53HandleMicrophoneInjectionCapabilityChangeNotificationEP12NSDictionary_block_invoke;
  v7[3] = &__block_descriptor_48_ea8_32c93_ZTSKZN2as6server53HandleMicrophoneInjectionCapabilityChangeNotificationEP12NSDictionaryE3__0_e5_v8__0l;
  v8 = v3;
  v9 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

void sub_1C899B51C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZN2as6server53HandleMicrophoneInjectionCapabilityChangeNotificationEP12NSDictionary_block_invoke(uint64_t a1)
{
  os_unfair_lock_s *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  as::server *v6;
  NSObject *v7;
  as::server::AudioSessionInfo *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  as::server::AudioSessionInfo *v17;
  std::__shared_weak_count *v18;
  _BYTE buf[18];
  __int16 v20;
  unsigned int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = (os_unfair_lock_s *)as::server::LegacySessionManager::Instance((as::server::LegacySessionManager *)a1);
  as::server::LegacySessionManager::GetMicrophoneInjectionSubscribersList(v2, (uint64_t)&v15);
  v3 = v15;
  v4 = v16;
  if (v15 != v16)
  {
    do
    {
      v5 = *v3;
      v6 = (as::server *)as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor((as::server::AudioSessionInfoAccessor *)&v17, *v3);
      if (v17)
      {
        v7 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v6));
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "AudioSessionServerImpNotificationHandlers.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 850;
          v20 = 1024;
          v21 = v5;
          _os_log_impl(&dword_1C895C000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Dispatching MicrophoneInjectionCapabilityChangeNotification for session:0x%x", buf, 0x18u);
        }
        v8 = v17;
        if (!v17)
        {
          v14 = _os_crash();
          as::server::require_acq::AudioSessionServerSetClientPlayState(v14);
        }
        v9 = v18;
        *(_QWORD *)buf = v17;
        *(_QWORD *)&buf[8] = v18;
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v11 = __ldxr(p_shared_owners);
          while (__stxr(v11 + 1, p_shared_owners));
        }
        as::server::AudioSessionInfo::DeferPropertyChangeCallback(v8, *(NSString **)(a1 + 32), *(NSDictionary **)(a1 + 40), 1);
        if (v9)
        {
          v12 = (unint64_t *)&v9->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
      }
      as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)&v17);
      ++v3;
    }
    while (v3 != v4);
    v3 = v15;
  }
  if (v3)
  {
    v16 = v3;
    operator delete(v3);
  }
}

void sub_1C899B6F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, os_unfair_lock_s *a14, uint64_t a15, uint64_t a16, char a17)
{
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor(&a14);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

id __copy_helper_block_ea8_32c93_ZTSKZN2as6server53HandleMicrophoneInjectionCapabilityChangeNotificationEP12NSDictionaryE3__0(uint64_t a1, uint64_t a2)
{
  id result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  result = *(id *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_ea8_32c93_ZTSKZN2as6server53HandleMicrophoneInjectionCapabilityChangeNotificationEP12NSDictionaryE3__0(uint64_t a1)
{

}

void ___ZN12_GLOBAL__N_132HandleAppStateChangeNotificationEjP12NSDictionary_block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  int v4;
  as::server::LegacySessionManager *v5;
  as::server::AudioSessionInfo *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  BOOL v11;
  unint64_t v12;
  BOOL v14;
  void *v15;
  as::server::AudioSessionInfo *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  as::server::AudioSessionInfo *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  id v27;
  unint64_t v28;
  as::server::AudioSessionInfo *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  as::server::AudioSessionInfo *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  int v40;
  unint64_t v41;
  as::server::AudioSessionInfo *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  as::server::AudioSessionInfo *v54;
  std::__shared_weak_count *v55;
  as::server::AudioSessionInfo *v56;
  std::__shared_weak_count *v57;
  as::server::AudioSessionInfo *v58;
  std::__shared_weak_count *v59;
  char v60;
  char v61[4];
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v2 = *(unsigned int *)(a1 + 40);
  v61[0] = 1;
  v62 = 3976;
  v63 = v2;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  kdebug_trace();
  as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor((as::server::AudioSessionInfoAccessor *)&v58, *(_DWORD *)(a1 + 40));
  if (v58)
  {
    objc_msgSend(*(id *)(a1 + 32), "objectForKey:", *MEMORY[0x1E0D492C0]);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "intValue");
    v5 = (as::server::LegacySessionManager *)objc_msgSend(v3, "intValue");
    v6 = v58;
    if (!v58)
    {
      v48 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v48);
    }
    v7 = v59;
    if (v59)
    {
      p_shared_owners = (unint64_t *)&v59->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      v11 = (_DWORD)v5 == 2 || v4 == 1;
      *((_BYTE *)v6 + 315) = v11;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    else
    {
      v14 = (_DWORD)v5 == 2 || v4 == 1;
      *((_BYTE *)v58 + 315) = v14;
    }
    if (v4 == 1)
    {
      v15 = as::server::LegacySessionManager::Instance(v5);
      v16 = v58;
      if (!v58)
      {
        v50 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v50);
      }
      v17 = v59;
      if (v59)
      {
        v18 = (unint64_t *)&v59->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v56 = v16;
      v57 = v17;
      as::server::LegacySessionManager::RemoveApplicationUponAppTermination((uint64_t)v15, (uint64_t *)&v56);
      v20 = v57;
      if (v57)
      {
        v21 = (unint64_t *)&v57->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
    }
    v23 = v58;
    if (!v58)
    {
      v49 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v49);
    }
    v24 = v59;
    if (v59)
    {
      v25 = (unint64_t *)&v59->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      v27 = *((id *)v23 + 12);
      do
        v28 = __ldaxr(v25);
      while (__stlxr(v28 - 1, v25));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    else
    {
      v27 = *((id *)v58 + 12);
    }
    if (!v58 || (os_unfair_lock_unlock((os_unfair_lock_t)v58 + 158), v60 = 0, (v29 = v58) == 0))
    {
      v52 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v52);
    }
    v30 = *(unsigned int *)(a1 + 40);
    v31 = v59;
    v54 = v58;
    v55 = v59;
    if (v59)
    {
      v32 = (unint64_t *)&v59->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    objc_msgSend(v27, "handleInterruptionWithID:clientPID:interruptionState:interruptionInfo:", v30, *((unsigned int *)v29 + 22), objc_msgSend(v3, "intValue", v54, v55) + 256, *(_QWORD *)(a1 + 32));
    if (v31)
    {
      v34 = (unint64_t *)&v31->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    if (!v58 || (os_unfair_lock_lock((os_unfair_lock_t)v58 + 158), v60 = 1, (v36 = v58) == 0))
    {
      v53 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v53);
    }
    v37 = v59;
    if (v59)
    {
      v38 = (unint64_t *)&v59->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
      v40 = *((_DWORD *)v36 + 23);
      do
        v41 = __ldaxr(v38);
      while (__stlxr(v41 - 1, v38));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
      if (v40 != 1935830119)
        goto LABEL_73;
    }
    else if (*((_DWORD *)v58 + 23) != 1935830119)
    {
LABEL_73:

      goto LABEL_74;
    }
    v42 = v58;
    if (!v58)
    {
      v51 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v51);
    }
    v43 = v59;
    if (v59)
    {
      v44 = (unint64_t *)&v59->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    as::server::AudioSessionInfo::DeferPropertyChangeCallback(v42, (NSString *)*MEMORY[0x1E0D49368], *(NSDictionary **)(a1 + 32), 1);
    if (v43)
    {
      v46 = (unint64_t *)&v43->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    goto LABEL_73;
  }
LABEL_74:
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)&v58);
  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)v61);
}

void sub_1C899BBF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  void *v6;
  os_unfair_lock_s *v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v8 = va_arg(va1, os_unfair_lock_s *);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);

  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)va);
  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)va1);
  _Unwind_Resume(a1);
}

void ___ZN12_GLOBAL__N_136HandleInterruptionWithIDNotificationEjj_block_invoke(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  as::server *v12;
  as::server *v13;
  unint64_t v14;
  void *v15;
  as::server *v16;
  int v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[4];
  as::server *v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  as::server::ConstAudioSessionInfoAccessor::ConstAudioSessionInfoAccessor((as::server::ConstAudioSessionInfoAccessor *)&v27, *(_DWORD *)(a1 + 32));
  v2 = v27;
  if (v27)
  {
    v3 = v28;
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
      v6 = *(_DWORD *)(v2 + 88);
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    else
    {
      v6 = *(_DWORD *)(v27 + 88);
    }
    v8 = v27;
    if (!v27)
    {
      v21 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v21);
    }
    v9 = v28;
    if (v28)
    {
      v10 = (unint64_t *)&v28->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      v12 = (as::server *)*(id *)(v8 + 96);
      v13 = v12;
      do
        v14 = __ldaxr(v10);
      while (__stlxr(v14 - 1, v10));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    else
    {
      v12 = (as::server *)*(id *)(v27 + 96);
      v13 = v12;
    }
    as::server::GetAudioControlQueue(v12);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = ___ZN12_GLOBAL__N_136HandleInterruptionWithIDNotificationEjj_block_invoke_2;
    v22[3] = &unk_1E82055F0;
    v24 = *(_DWORD *)(a1 + 32);
    v16 = v13;
    v23 = v16;
    v17 = *(_DWORD *)(a1 + 36);
    v25 = v6;
    v26 = v17;
    as::server::DispatchBlock(v15, v22, 0, (uint64_t)"HandleInterruptionWithIDNotification_block_invoke", (uint64_t)"AudioSessionServerImpNotificationHandlers.mm", 604, 0, 0);

  }
  v18 = v28;
  if (v28)
  {
    v19 = (unint64_t *)&v28->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1C899BE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a9);

  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN12_GLOBAL__N_136HandleInterruptionWithIDNotificationEjj_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  char v3[4];
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(unsigned int *)(a1 + 40);
  v3[0] = 1;
  v4 = 3977;
  v5 = v2;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  kdebug_trace();
  objc_msgSend(*(id *)(a1 + 32), "handleInterruptionWithID:clientPID:interruptionState:interruptionInfo:", *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44), *(unsigned int *)(a1 + 48), 0);
  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)v3);
}

void sub_1C899BEF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void ___ZZN2as6server20HandleMXNotificationEP26opaqueCMNotificationCenterPKvPK10__CFStringS4_S4_ENK3__0clEb_block_invoke(uint64_t a1)
{
  as::server::AudioSessionInfo *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  as::server::AudioSessionInfo *v8;
  std::__shared_weak_count *v9;

  as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor((as::server::AudioSessionInfoAccessor *)&v8, *(_DWORD *)(a1 + 48));
  v2 = v8;
  if (v8)
  {
    v3 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    as::server::AudioSessionInfo::DeferPropertyChangeCallback(v2, *(NSString **)(a1 + 32), *(NSDictionary **)(a1 + 40), *(unsigned __int8 *)(a1 + 52));
    if (v3)
    {
      v6 = (unint64_t *)&v3->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)&v8);
}

void sub_1C899BFAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)va);
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)va1);
  _Unwind_Resume(a1);
}

void ___ZN12_GLOBAL__N_130HandleInterruptionNotificationEjP12NSDictionary_block_invoke(uint64_t a1)
{
  as::server *v2;
  unsigned int v3;
  as::server *v4;
  const void *v5;
  as::server *v6;
  as::server *v7;
  as::server *v8;
  as::server::AudioSessionInfo *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  int v16;
  std::string::size_type v17;
  std::string *v18;
  void **v19;
  void *v20;
  void *v21;
  as::server *v22;
  NSObject *v23;
  NSDictionary *v24;
  void *v25;
  __CFString *v26;
  void *v27;
  as::server *v28;
  __CFString *v29;
  uint64_t *v30;
  uint64_t *v31;
  char v32;
  uint64_t *v33;
  as::server::AudioSessionInfo *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  id v40;
  uint64_t *v41;
  uint64_t *v42;
  char v43;
  uint64_t *v44;
  as::server::AudioSessionInfo *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  int v49;
  unint64_t v50;
  NSObject *v51;
  int v52;
  std::string::size_type v53;
  std::string *v54;
  void **v55;
  void *v56;
  void *v57;
  int v58;
  uint64_t v59;
  void *v60;
  as::server::AudioSessionInfo *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  as::server::AudioSessionInfo *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  as::server::AudioSessionInfo *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id *v84;
  uint64_t v85;
  as::server *v86;
  as::server *cf;
  _BYTE v88[8];
  uint64_t *v89;
  _BYTE v90[8];
  uint64_t *v91;
  unsigned __int8 v92[8];
  uint64_t *v93;
  void *__p[2];
  char v95;
  std::string v96;
  as::server::AudioSessionInfo *v97;
  std::__shared_weak_count *v98;
  _BYTE buf[18];
  __int16 v100;
  const char *v101;
  __int16 v102;
  std::string *v103;
  __int16 v104;
  void **v105;
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  v2 = *(as::server **)(a1 + 40);
  if (!v2)
  {
    v4 = (as::server *)*(id *)(a1 + 32);
LABEL_116:
    v84 = (id *)as::server::gSessionServerLog(v4);
    ___ZN12_GLOBAL__N_130HandleInterruptionNotificationEjP12NSDictionary_block_invoke_cold_2(v84);
    v85 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v85);
  }
  v3 = *(_DWORD *)(a1 + 56);
  CFRetain(*(CFTypeRef *)(a1 + 40));
  cf = v2;
  v4 = (as::server *)*(id *)(a1 + 32);
  v6 = v4;
  if (!v3)
    goto LABEL_116;
  as::server::GetPickableRoutesFromMX(v2, v5);
  v7 = (as::server *)objc_claimAutoreleasedReturnValue();
  v86 = v7;
  v8 = (as::server *)as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor((as::server::AudioSessionInfoAccessor *)&v97, v3);
  v9 = v97;
  if (!v97)
    goto LABEL_109;
  v10 = v98;
  *(_QWORD *)buf = v97;
  *(_QWORD *)&buf[8] = v98;
  if (v98)
  {
    p_shared_owners = (unint64_t *)&v98->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (*((char *)v9 + 223) < 0)
    std::string::__init_copy_ctor_external(&v96, *((const std::string::value_type **)v9 + 25), *((_QWORD *)v9 + 26));
  else
    v96 = *(std::string *)((char *)v9 + 200);
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v15 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v8));
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    v16 = SHIBYTE(v96.__r_.__value_.__r.__words[2]);
    v17 = v96.__r_.__value_.__r.__words[0];
    v92[0] = 0;
    v93 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v92);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v92);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v92, -1, 0x20u, 0, 0, __p);
    v18 = &v96;
    if (v16 < 0)
      v18 = (std::string *)v17;
    if (v95 >= 0)
      v19 = __p;
    else
      v19 = (void **)__p[0];
    *(_DWORD *)buf = 136316162;
    *(_QWORD *)&buf[4] = "AudioSessionServerImpNotificationHandlers.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 92;
    v100 = 2080;
    v101 = "handle_begin_interruption";
    v102 = 2080;
    v103 = v18;
    v104 = 2080;
    v105 = v19;
    _os_log_impl(&dword_1C895C000, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
    if (v95 < 0)
      operator delete(__p[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v92);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v93, v92[0]);
  }

  -[as::server objectForKey:](v6, "objectForKey:", *MEMORY[0x1E0D49258]);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = v20;
  if (!v20 || (v22 = (as::server *)objc_msgSend(v20, "BOOLValue"), !(_DWORD)v22))
  {
    v24 = (NSDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
    v25 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithUnsignedInt:", 1);
    -[NSDictionary setObject:forKey:](v24, "setObject:forKey:", v25, *MEMORY[0x1E0CFF2F8]);

    -[as::server objectForKey:](v6, "objectForKey:", *MEMORY[0x1E0D49278]);
    v26 = (__CFString *)objc_claimAutoreleasedReturnValue();
    -[as::server objectForKey:](v6, "objectForKey:", *MEMORY[0x1E0D49270]);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v92[0] = 0;
    v93 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v92);
    v28 = (as::server *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v92);
    if (!v26)
      goto LABEL_43;
    v29 = objc_retainAutorelease(v26);
    *(_QWORD *)buf = -[__CFString UTF8String](v29, "UTF8String");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v90, (char **)buf);
    v30 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v92, "interrupted_by");
    v31 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v30, "name");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v90);
    v32 = *(_BYTE *)v31;
    *(_BYTE *)v31 = v90[0];
    v90[0] = v32;
    v33 = (uint64_t *)v31[1];
    v31[1] = (uint64_t)v91;
    v91 = v33;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v31);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v90);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v91, v90[0]);
    v34 = v97;
    if (!v97)
    {
      v82 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v82);
    }
    v35 = v98;
    if (v98)
    {
      v36 = (unint64_t *)&v98->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
      v38 = *((unsigned __int8 *)v34 + 120);
      do
        v39 = __ldaxr(v36);
      while (__stlxr(v39 - 1, v36));
      if (v39)
      {
        if (!v38)
          goto LABEL_43;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
        if (!v38)
          goto LABEL_43;
      }
    }
    else if (!*((_BYTE *)v97 + 120))
    {
LABEL_43:
      if (!v27)
        goto LABEL_57;
      v40 = objc_retainAutorelease(v27);
      *(_QWORD *)buf = objc_msgSend(v40, "UTF8String");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v88, (char **)buf);
      v41 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v92, "interrupted_by");
      v42 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v41, "bundleID");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v88);
      v43 = *(_BYTE *)v42;
      *(_BYTE *)v42 = v88[0];
      v88[0] = v43;
      v44 = (uint64_t *)v42[1];
      v42[1] = (uint64_t)v89;
      v89 = v44;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v42);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v88);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v89, v88[0]);
      v45 = v97;
      if (!v97)
      {
        v83 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v83);
      }
      v46 = v98;
      if (v98)
      {
        v47 = (unint64_t *)&v98->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
        v49 = *((unsigned __int8 *)v45 + 120);
        do
          v50 = __ldaxr(v47);
        while (__stlxr(v50 - 1, v47));
        if (v50)
        {
          if (!v49)
            goto LABEL_57;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
          if (!v49)
            goto LABEL_57;
        }
      }
      else if (!*((_BYTE *)v97 + 120))
      {
LABEL_57:
        v51 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v28));
        if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
        {
          v52 = SHIBYTE(v96.__r_.__value_.__r.__words[2]);
          v53 = v96.__r_.__value_.__r.__words[0];
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v92, -1, 0x20u, 0, 0, __p);
          v54 = &v96;
          if (v52 < 0)
            v54 = (std::string *)v53;
          if (v95 >= 0)
            v55 = __p;
          else
            v55 = (void **)__p[0];
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = "AudioSessionServerImpNotificationHandlers.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 145;
          v100 = 2080;
          v101 = "begin_interruption_callback";
          v102 = 2080;
          v103 = v54;
          v104 = 2080;
          v105 = v55;
          _os_log_impl(&dword_1C895C000, v51, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
          if (v95 < 0)
            operator delete(__p[0]);
        }

        if (v21 && objc_msgSend(v21, "BOOLValue"))
          -[NSDictionary setObject:forKey:](v24, "setObject:forKey:", v21, *MEMORY[0x1E0CFF308]);
        -[as::server objectForKey:](v6, "objectForKey:", *MEMORY[0x1E0D49268]);
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        v57 = v56;
        if (v56)
        {
          v58 = objc_msgSend(v56, "unsignedIntValue");
          if (objc_msgSend(v57, "unsignedIntValue") == 4)
            v59 = 4;
          else
            v59 = 2 * (v58 == 1);
          if (!v21)
            goto LABEL_78;
        }
        else
        {
          v59 = 0;
          if (!v21)
          {
LABEL_78:
            v60 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithUnsignedInt:", v59);
            -[NSDictionary setObject:forKey:](v24, "setObject:forKey:", v60, *MEMORY[0x1E0CFF2E0]);

            v61 = v97;
            if (!v97)
            {
              v79 = _os_crash();
              as::server::require_acq::AudioSessionServerSetClientPlayState(v79);
            }
            v62 = v98;
            *(_QWORD *)buf = v97;
            *(_QWORD *)&buf[8] = v98;
            if (v98)
            {
              v63 = (unint64_t *)&v98->__shared_owners_;
              do
                v64 = __ldxr(v63);
              while (__stxr(v64 + 1, v63));
            }
            as::server::GetCurrentlyPickedRoute(v86, (as::server::PickableRoute **)__p);
            as::server::AudioSessionInfo::SetPickedRouteAtTimeOfInterruption((uint64_t)v61, (id **)__p);
            std::unique_ptr<as::server::PickableRoute>::reset[abi:ne180100]((id **)__p, 0);
            if (v62)
            {
              v65 = (unint64_t *)&v62->__shared_owners_;
              do
                v66 = __ldaxr(v65);
              while (__stlxr(v66 - 1, v65));
              if (!v66)
              {
                ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                std::__shared_weak_count::__release_weak(v62);
              }
            }
            v67 = v97;
            if (!v97)
            {
              v80 = _os_crash();
              as::server::require_acq::AudioSessionServerSetClientPlayState(v80);
            }
            v68 = v98;
            *(_QWORD *)buf = v97;
            *(_QWORD *)&buf[8] = v98;
            if (v98)
            {
              v69 = (unint64_t *)&v98->__shared_owners_;
              do
                v70 = __ldxr(v69);
              while (__stxr(v70 + 1, v69));
            }
            as::server::AudioSessionInfo::SetInterrupted(v67, 1, v26);
            if (v68)
            {
              v71 = (unint64_t *)&v68->__shared_owners_;
              do
                v72 = __ldaxr(v71);
              while (__stlxr(v72 - 1, v71));
              if (!v72)
              {
                ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                std::__shared_weak_count::__release_weak(v68);
              }
            }
            v73 = v97;
            if (!v97)
            {
              v81 = _os_crash();
              as::server::require_acq::AudioSessionServerSetClientPlayState(v81);
            }
            v74 = v98;
            *(_QWORD *)buf = v97;
            *(_QWORD *)&buf[8] = v98;
            if (v98)
            {
              v75 = (unint64_t *)&v98->__shared_owners_;
              do
                v76 = __ldxr(v75);
              while (__stxr(v76 + 1, v75));
            }
            as::server::AudioSessionInfo::DeferPropertyChangeCallback(v73, (NSString *)*MEMORY[0x1E0CFF2D8], v24, 0);
            if (v74)
            {
              v77 = (unint64_t *)&v74->__shared_owners_;
              do
                v78 = __ldaxr(v77);
              while (__stlxr(v78 - 1, v77));
              if (!v78)
              {
                ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                std::__shared_weak_count::__release_weak(v74);
              }
            }

            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v92);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v93, v92[0]);

            goto LABEL_106;
          }
        }
        if (objc_msgSend(v21, "BOOLValue"))
          v59 = 1;
        else
          v59 = v59;
        goto LABEL_78;
      }
      v28 = (as::server *)-[NSDictionary setObject:forKey:](v24, "setObject:forKey:", v40, *MEMORY[0x1E0CFF2E8]);
      goto LABEL_57;
    }
    v28 = (as::server *)-[NSDictionary setObject:forKey:](v24, "setObject:forKey:", v29, *MEMORY[0x1E0CFF2F0]);
    goto LABEL_43;
  }
  v23 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v22));
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AudioSessionServerImpNotificationHandlers.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 102;
    _os_log_impl(&dword_1C895C000, v23, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Dropping wasSuspended interruption notification (see rdar://91116492)", buf, 0x12u);
  }

LABEL_106:
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v96.__r_.__value_.__l.__data_);
  v7 = v86;
LABEL_109:
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)&v97);

  CFRelease(cf);
}

void sub_1C899C98C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, const void *a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,os_unfair_lock_s *a29,uint64_t a30,uint64_t a31,char a32)
{
  void *v32;
  void *v33;

  if (a28 < 0)
    operator delete(__p);
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor(&a29);

  applesauce::CF::ObjectRef<void const*>::~ObjectRef(&a11);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_40c36_ZTSN10applesauce2CF9ObjectRefIPKvEE(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = result;
  v3 = *(_QWORD *)(a2 + 40);
  if (v3)
    result = CFRetain(*(CFTypeRef *)(a2 + 40));
  v2[5] = v3;
  return result;
}

void __destroy_helper_block_ea8_40c36_ZTSN10applesauce2CF9ObjectRefIPKvEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    CFRelease(v1);
}

void ___ZN12_GLOBAL__N_130HandleInterruptionNotificationEjP12NSDictionary_block_invoke_59(uint64_t a1)
{
  as::server *v2;
  unsigned int v3;
  as::server *v4;
  const void *v5;
  as::server *v6;
  as::server *v7;
  as::server::AudioSessionInfo *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  int v15;
  std::string::size_type v16;
  std::string *v17;
  std::string *v18;
  const __CFString *v19;
  NSArray *v20;
  __CFString *v21;
  CFRange v22;
  _BOOL8 v23;
  int v24;
  uint64_t v25;
  as::server::AudioSessionInfo *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  as::server::AudioSessionInfo *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  NSArray *v35;
  unint64_t v36;
  char IsResumable;
  uint64_t i;
  uint64_t *v39;
  unsigned __int8 v40;
  uint64_t *v41;
  NSDictionary *v42;
  void *v43;
  void *v44;
  void *v45;
  as::server *v46;
  as::server *v47;
  id v48;
  uint64_t *v49;
  uint64_t *v50;
  unsigned __int8 v51;
  uint64_t *v52;
  as::server::AudioSessionInfo *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  int v57;
  unint64_t v58;
  as::server *v59;
  uint64_t *v60;
  uint64_t *v61;
  unsigned __int8 v62;
  uint64_t *v63;
  as::server::AudioSessionInfo *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  int v68;
  unint64_t v69;
  NSObject *v70;
  as::server::AudioSessionInfo *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  int v75;
  std::string::size_type v76;
  std::string *v77;
  void *p_p;
  unint64_t *v79;
  unint64_t v80;
  as::server::AudioSessionInfo *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  as::server::AudioSessionInfo *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  as::server::AudioSessionInfo *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  as::server::AudioSessionInfo *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  id *v113;
  uint64_t v114;
  as::server::PickableRoute *v115;
  as::server *v116;
  void *__p;
  uint64_t *v118;
  char v119;
  as::server::AudioSessionInfo *v120;
  std::__shared_weak_count *v121;
  char v122[8];
  uint64_t *v123;
  char v124[8];
  uint64_t *v125;
  char v126[8];
  uint64_t *v127;
  unsigned __int8 v128[8];
  uint64_t *v129;
  std::string v130;
  as::server::AudioSessionInfo *v131;
  std::__shared_weak_count *v132;
  _BYTE buf[28];
  __int16 v134;
  std::string *v135;
  __int16 v136;
  _QWORD v137[2];
  char v138;
  std::string v139;
  char v140;
  uint64_t v141;

  v141 = *MEMORY[0x1E0C80C00];
  v2 = *(as::server **)(a1 + 40);
  if (!v2)
  {
    v4 = (as::server *)*(id *)(a1 + 32);
LABEL_160:
    v113 = (id *)as::server::gSessionServerLog(v4);
    ___ZN12_GLOBAL__N_130HandleInterruptionNotificationEjP12NSDictionary_block_invoke_59_cold_2(v113);
    v114 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v114);
  }
  v3 = *(_DWORD *)(a1 + 56);
  CFRetain(*(CFTypeRef *)(a1 + 40));
  v116 = v2;
  v4 = (as::server *)*(id *)(a1 + 32);
  v6 = v4;
  if (!v3)
    goto LABEL_160;
  as::server::GetPickableRoutesFromMX(v2, v5);
  v115 = (as::server::PickableRoute *)objc_claimAutoreleasedReturnValue();
  v7 = (as::server *)as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor((as::server::AudioSessionInfoAccessor *)&v131, v3);
  v8 = v131;
  if (!v131)
    goto LABEL_147;
  v9 = v132;
  *(_QWORD *)buf = v131;
  *(_QWORD *)&buf[8] = v132;
  if (v132)
  {
    p_shared_owners = (unint64_t *)&v132->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  if (*((char *)v8 + 223) < 0)
    std::string::__init_copy_ctor_external(&v130, *((const std::string::value_type **)v8 + 25), *((_QWORD *)v8 + 26));
  else
    v130 = *(std::string *)((char *)v8 + 200);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v7));
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    v15 = SHIBYTE(v130.__r_.__value_.__r.__words[2]);
    v16 = v130.__r_.__value_.__r.__words[0];
    LOBYTE(__p) = 0;
    v118 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&__p);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&__p);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)&__p, -1, 0x20u, 0, 0, &v139);
    v17 = &v130;
    if (v15 < 0)
      v17 = (std::string *)v16;
    if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v139;
    else
      v18 = (std::string *)v139.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136316162;
    *(_QWORD *)&buf[4] = "AudioSessionServerImpNotificationHandlers.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 213;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = "end_interruption_callback";
    v134 = 2080;
    v135 = v17;
    v136 = 2080;
    v137[0] = v18;
    _os_log_impl(&dword_1C895C000, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
    if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v139.__r_.__value_.__l.__data_);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&__p);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v118, __p);
  }

  -[as::server objectForKey:](v6, "objectForKey:", *MEMORY[0x1E0D49290]);
  v19 = (const __CFString *)objc_claimAutoreleasedReturnValue();
  v21 = (__CFString *)v19;
  if (v19)
  {
    v22 = CFStringFind(v19, CFSTR("non-resumable"), 8uLL);
    if (v22.length)
    {
      if (!v22.location)
      {
        v23 = 0;
        v24 = 0;
        v25 = 561148781;
        goto LABEL_54;
      }
    }
  }
  v26 = v131;
  if (!v131)
  {
    v108 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v108);
  }
  v25 = 1769108333;
  v27 = v132;
  if (v132)
  {
    v28 = (unint64_t *)&v132->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
    v24 = *((unsigned __int8 *)v26 + 314);
    do
      v30 = __ldaxr(v28);
    while (__stlxr(v30 - 1, v28));
    if (v30)
    {
      if (!v24)
        goto LABEL_53;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
      if (!v24)
      {
LABEL_53:
        v23 = 1;
        goto LABEL_54;
      }
    }
  }
  else if (!*((_BYTE *)v131 + 314))
  {
    goto LABEL_52;
  }
  v31 = v131;
  if (!v131)
  {
    v112 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v112);
  }
  v32 = v132;
  if (v132)
  {
    v33 = (unint64_t *)&v132->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
    v35 = (NSArray *)*((_QWORD *)v31 + 42);
    do
      v36 = __ldaxr(v33);
    while (__stlxr(v36 - 1, v33));
    if (v36)
    {
      if (v35)
        goto LABEL_48;
      goto LABEL_52;
    }
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
    if (!v35)
    {
LABEL_52:
      v24 = 0;
      goto LABEL_53;
    }
  }
  else
  {
    v35 = (NSArray *)*((_QWORD *)v131 + 42);
    if (!v35)
      goto LABEL_52;
  }
LABEL_48:
  IsResumable = as::server::InterruptionIsResumable(v35, v115, v20);
  v23 = (IsResumable & 1) != 0;
  v24 = (IsResumable & 1) == 0;
  if ((IsResumable & 1) != 0)
    v25 = 1769108333;
  else
    v25 = 561148781;
LABEL_54:
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)buf, "resumable");
  *(_QWORD *)&buf[16] = buf;
  buf[24] = 1;
  BYTE2(v135) = 4;
  v137[0] = v23;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v135 + 2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v135 + 2);
  v137[1] = (char *)&v135 + 2;
  v138 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v139, (uint64_t)buf, 2, 1, 2);
  v139.__r_.__value_.__r.__words[2] = (std::string::size_type)&v139;
  v140 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v128, (uint64_t)&v139, 1, 1, 2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v139);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v139.__r_.__value_.__l.__size_, v139.__r_.__value_.__s.__data_[0]);
  for (i = 0; i != -8; i -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v135 + i * 8 + 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v137[i], *((unsigned __int8 *)&v135 + i * 8 + 2));
  }
  if (v24)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[110],char [110],0>((uint64_t)v126, "transformed resumable interruption to non-resumable interruption due to unplug event during the interruption.");
    v39 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v128, "side_effect");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v126);
    v40 = *(_BYTE *)v39;
    *(_BYTE *)v39 = v126[0];
    v126[0] = v40;
    v41 = (uint64_t *)v39[1];
    v39[1] = (uint64_t)v127;
    v127 = v41;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v39);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v126);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v127, v126[0]);
  }
  v42 = (NSDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
  v43 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithUnsignedInt:", 0);
  -[NSDictionary setObject:forKey:](v42, "setObject:forKey:", v43, *MEMORY[0x1E0CFF2F8]);

  v44 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithUnsignedInt:", v25);
  -[NSDictionary setObject:forKey:](v42, "setObject:forKey:", v44, *MEMORY[0x1E0CFF300]);

  -[as::server objectForKey:](v6, "objectForKey:", *MEMORY[0x1E0D49278]);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  -[as::server objectForKey:](v6, "objectForKey:", *MEMORY[0x1E0D49270]);
  v46 = (as::server *)objc_claimAutoreleasedReturnValue();
  v47 = v46;
  if (v45)
  {
    v48 = objc_retainAutorelease(v45);
    *(_QWORD *)buf = objc_msgSend(v48, "UTF8String");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v124, (char **)buf);
    v49 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v128, "interrupted_by");
    v50 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v49, "name");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v124);
    v51 = *(_BYTE *)v50;
    *(_BYTE *)v50 = v124[0];
    v124[0] = v51;
    v52 = (uint64_t *)v50[1];
    v50[1] = (uint64_t)v125;
    v125 = v52;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v50);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v124);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v125, v124[0]);
    v53 = v131;
    if (!v131)
    {
      v109 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v109);
    }
    v54 = v132;
    if (v132)
    {
      v55 = (unint64_t *)&v132->__shared_owners_;
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
      v57 = *((unsigned __int8 *)v53 + 120);
      do
        v58 = __ldaxr(v55);
      while (__stlxr(v58 - 1, v55));
      if (v58)
      {
        if (!v57)
          goto LABEL_72;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
        if (!v57)
          goto LABEL_72;
      }
LABEL_71:
      v46 = (as::server *)-[NSDictionary setObject:forKey:](v42, "setObject:forKey:", v48, *MEMORY[0x1E0CFF2F0]);
      goto LABEL_72;
    }
    if (*((_BYTE *)v131 + 120))
      goto LABEL_71;
  }
LABEL_72:
  if (v47)
  {
    v59 = objc_retainAutorelease(v47);
    *(_QWORD *)buf = -[as::server UTF8String](v59, "UTF8String");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v122, (char **)buf);
    v60 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v128, "interrupted_by");
    v61 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v60, "bundleID");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v122);
    v62 = *(_BYTE *)v61;
    *(_BYTE *)v61 = v122[0];
    v122[0] = v62;
    v63 = (uint64_t *)v61[1];
    v61[1] = (uint64_t)v123;
    v123 = v63;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v61);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v122);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v123, v122[0]);
    v64 = v131;
    if (!v131)
    {
      v110 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v110);
    }
    v65 = v132;
    if (!v132)
    {
      if (!*((_BYTE *)v131 + 120))
        goto LABEL_86;
      goto LABEL_85;
    }
    v66 = (unint64_t *)&v132->__shared_owners_;
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 1, v66));
    v68 = *((unsigned __int8 *)v64 + 120);
    do
      v69 = __ldaxr(v66);
    while (__stlxr(v69 - 1, v66));
    if (v69)
    {
      if (!v68)
        goto LABEL_86;
      goto LABEL_85;
    }
    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
    std::__shared_weak_count::__release_weak(v65);
    if (v68)
LABEL_85:
      v46 = (as::server *)-[NSDictionary setObject:forKey:](v42, "setObject:forKey:", v59, *MEMORY[0x1E0CFF2E8]);
  }
LABEL_86:
  v70 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v46));
  if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
  {
    v71 = v131;
    if (!v131)
    {
      v111 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v111);
    }
    v72 = v132;
    v120 = v131;
    v121 = v132;
    if (v132)
    {
      v73 = (unint64_t *)&v132->__shared_owners_;
      do
        v74 = __ldxr(v73);
      while (__stxr(v74 + 1, v73));
    }
    if (*((char *)v71 + 223) < 0)
      std::string::__init_copy_ctor_external(&v139, *((const std::string::value_type **)v71 + 25), *((_QWORD *)v71 + 26));
    else
      v139 = *(std::string *)((char *)v71 + 200);
    v75 = SHIBYTE(v139.__r_.__value_.__r.__words[2]);
    v76 = v139.__r_.__value_.__r.__words[0];
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v128, -1, 0x20u, 0, 0, &__p);
    v77 = &v139;
    if (v75 < 0)
      v77 = (std::string *)v76;
    if (v119 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136316162;
    *(_QWORD *)&buf[4] = "AudioSessionServerImpNotificationHandlers.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 288;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = "handle_end_interruption";
    v134 = 2080;
    v135 = v77;
    v136 = 2080;
    v137[0] = p_p;
    _os_log_impl(&dword_1C895C000, v70, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
    if (v119 < 0)
      operator delete(__p);
    if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v139.__r_.__value_.__l.__data_);
    if (v72)
    {
      v79 = (unint64_t *)&v72->__shared_owners_;
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
  }

  v81 = v131;
  if (!v131)
  {
    v104 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v104);
  }
  v82 = v132;
  *(_QWORD *)buf = v131;
  *(_QWORD *)&buf[8] = v132;
  if (v132)
  {
    v83 = (unint64_t *)&v132->__shared_owners_;
    do
      v84 = __ldxr(v83);
    while (__stxr(v84 + 1, v83));
  }
  as::server::AudioSessionInfo::DeferPropertyChangeCallback(v81, (NSString *)*MEMORY[0x1E0CFF2D8], v42, 0);
  if (v82)
  {
    v85 = (unint64_t *)&v82->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v87 = v131;
  if (!v131)
  {
    v105 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v105);
  }
  v88 = v132;
  if (v132)
  {
    v89 = (unint64_t *)&v132->__shared_owners_;
    do
      v90 = __ldxr(v89);
    while (__stxr(v90 + 1, v89));
    *((_BYTE *)v87 + 314) = 0;
    do
      v91 = __ldaxr(v89);
    while (__stlxr(v91 - 1, v89));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  else
  {
    *((_BYTE *)v131 + 314) = 0;
  }
  v92 = v131;
  if (!v131)
  {
    v106 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v106);
  }
  v93 = v132;
  *(_QWORD *)buf = v131;
  *(_QWORD *)&buf[8] = v132;
  if (v132)
  {
    v94 = (unint64_t *)&v132->__shared_owners_;
    do
      v95 = __ldxr(v94);
    while (__stxr(v95 + 1, v94));
  }
  v139.__r_.__value_.__r.__words[0] = 0;
  as::server::AudioSessionInfo::SetPickedRouteAtTimeOfInterruption((uint64_t)v92, (id **)&v139);
  std::unique_ptr<as::server::PickableRoute>::reset[abi:ne180100]((id **)&v139, 0);
  if (v93)
  {
    v96 = (unint64_t *)&v93->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v98 = v131;
  if (!v131)
  {
    v107 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v107);
  }
  v99 = v132;
  *(_QWORD *)buf = v131;
  *(_QWORD *)&buf[8] = v132;
  if (v132)
  {
    v100 = (unint64_t *)&v132->__shared_owners_;
    do
      v101 = __ldxr(v100);
    while (__stxr(v101 + 1, v100));
  }
  as::server::AudioSessionInfo::SetInterrupted(v98, 0, 0);
  if (v99)
  {
    v102 = (unint64_t *)&v99->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v128);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v129, v128[0]);

  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v130.__r_.__value_.__l.__data_);
  v2 = v116;
LABEL_147:
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)&v131);

  CFRelease(v2);
}

void sub_1C899D790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, const void *a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t *a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,os_unfair_lock_s *a33,uint64_t a34,uint64_t a35,char a36)
{
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a17);

  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&a25);
  if (a32 < 0)
    operator delete(__p);
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor(&a33);

  applesauce::CF::ObjectRef<void const*>::~ObjectRef(&a11);
  _Unwind_Resume(a1);
}

id **std::unique_ptr<as::server::PickableRoute>::reset[abi:ne180100](id **result, id *a2)
{
  id *v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {

    JUMPOUT(0x1CAA38D28);
  }
  return result;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[10]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[10]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1C899DA3C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[110],char [110],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[110]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[110]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1C899DACC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[8],char [8],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[8]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[8]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1C899DB5C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZN12_GLOBAL__N_129HandleRouteChangeNotificationEjP8NSStringP19NSMutableDictionary_block_invoke(uint64_t a1)
{
  as::server *v2;
  as::server::ConstAudioSessionInfo *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  NSObject *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t i;
  as::server *v11;
  NSObject *v12;
  int v13;
  std::string::size_type v14;
  std::string *v15;
  std::string *v16;
  as::server::ConstAudioSessionInfo *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  const void *v21;
  unint64_t v22;
  void *v23;
  as::server::ConstAudioSessionInfo *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  id v28;
  unint64_t v29;
  as::server::ConstAudioSessionInfo *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  as::server::ConstAudioSessionInfo *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  void *v41;
  id v42;
  void *v43;
  as::server::ConstAudioSessionInfo *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  int IsInterrupted;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  void *v52;
  uint64_t j;
  as::server *v54;
  NSObject *v55;
  as::server::ConstAudioSessionInfo *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  int v60;
  std::string::size_type v61;
  std::string *v62;
  void **v63;
  unint64_t *v64;
  unint64_t v65;
  as::server::ConstAudioSessionInfo *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  as::server::ConstAudioSessionInfo *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  int v75;
  unint64_t v76;
  as::server::ConstAudioSessionInfo *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *__p[2];
  char v93;
  as::server::ConstAudioSessionInfo *v94;
  std::__shared_weak_count *v95;
  char v96[8];
  uint64_t *v97;
  void *v98;
  unsigned __int8 v99;
  CFTypeRef cf;
  char v101[8];
  uint64_t *v102;
  std::string v103;
  as::server::ConstAudioSessionInfo *v104;
  std::__shared_weak_count *v105;
  char v106;
  _BYTE buf[28];
  __int16 v108;
  std::string *v109;
  __int16 v110;
  std::string *v111;
  uint64_t v112;
  char v113;
  std::string v114;
  char v115;
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  v2 = (as::server *)as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor((as::server::AudioSessionInfoAccessor *)&v104, *(_DWORD *)(a1 + 48));
  v3 = v104;
  if (v104 && *(_QWORD *)(a1 + 32))
  {
    v4 = v105;
    *(_QWORD *)buf = v104;
    *(_QWORD *)&buf[8] = v105;
    if (v105)
    {
      p_shared_owners = (unint64_t *)&v105->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    if (*((char *)v3 + 223) < 0)
      std::string::__init_copy_ctor_external(&v103, *((const std::string::value_type **)v3 + 25), *((_QWORD *)v3 + 26));
    else
      v103 = *(std::string *)((char *)v3 + 200);
    if (v4)
    {
      v8 = (unint64_t *)&v4->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[4],char [4],0>((uint64_t)buf, "key");
    *(_QWORD *)&buf[16] = buf;
    buf[24] = 1;
    __p[0] = (void *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 40)), "UTF8String");
    v112 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)&v109 + 2, (char **)__p);
    v113 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v114, (uint64_t)buf, 2, 1, 2);
    v114.__r_.__value_.__r.__words[2] = (std::string::size_type)&v114;
    v115 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v101, (uint64_t)&v114, 1, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v114);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v114.__r_.__value_.__l.__size_, v114.__r_.__value_.__s.__data_[0]);
    for (i = 0; i != -64; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v109 + i + 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&v111 + i), *((unsigned __int8 *)&v109 + i + 2));
    }
    v12 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v11));
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v13 = SHIBYTE(v103.__r_.__value_.__r.__words[2]);
      v14 = v103.__r_.__value_.__r.__words[0];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v101, -1, 0x20u, 0, 0, &v114);
      v15 = &v103;
      if (v13 < 0)
        v15 = (std::string *)v14;
      if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v16 = &v114;
      else
        v16 = (std::string *)v114.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "AudioSessionServerImpNotificationHandlers.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 387;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "property_change";
      v108 = 2080;
      v109 = v15;
      v110 = 2080;
      v111 = v16;
      _os_log_impl(&dword_1C895C000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
      if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v114.__r_.__value_.__l.__data_);
    }

    v17 = v104;
    if (!v104)
    {
      v83 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v83);
    }
    v18 = v105;
    if (v105)
    {
      v19 = (unint64_t *)&v105->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v17, &cf);
      do
        v22 = __ldaxr(v19);
      while (__stlxr(v22 - 1, v19));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    else
    {
      as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v104, &cf);
    }
    if (v104)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)v104 + 158);
      v106 = 0;
    }
    as::server::forbid_acq::CopyCMSessionAudioMode((as::server::forbid_acq *)cf, v21);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = v104;
    if (!v104)
    {
      v84 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v84);
    }
    v25 = v105;
    if (v105)
    {
      v26 = (unint64_t *)&v105->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
      v28 = *((id *)v24 + 12);
      do
        v29 = __ldaxr(v26);
      while (__stlxr(v29 - 1, v26));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    else
    {
      v28 = *((id *)v104 + 12);
    }
    as::server::GetSpatialPreferences(v28, *(unsigned int *)(a1 + 48), v23, (uint64_t)&v98);
    if (!v104 || (os_unfair_lock_lock((os_unfair_lock_t)v104 + 158), v106 = 1, (v30 = v104) == 0))
    {
      v91 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v91);
    }
    v31 = v105;
    if (v105)
    {
      v32 = (unint64_t *)&v105->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
      *((_BYTE *)v30 + 432) = v99;
      do
        v34 = __ldaxr(v32);
      while (__stlxr(v34 - 1, v32));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    else
    {
      *((_BYTE *)v104 + 432) = v99;
    }
    v35 = v104;
    if (!v104)
    {
      v85 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v85);
    }
    v36 = v105;
    *(_QWORD *)buf = v104;
    *(_QWORD *)&buf[8] = v105;
    if (v105)
    {
      v37 = (unint64_t *)&v105->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
    as::server::AudioSessionInfo::SetSpatialPreferences((uint64_t)v35, v98);
    if (v36)
    {
      v39 = (unint64_t *)&v36->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v41 = *(void **)(a1 + 32);
    v42 = objc_alloc(MEMORY[0x1E0CB37E8]);
    v43 = (void *)objc_msgSend(v42, "initWithBool:", v99);
    objc_msgSend(v41, "setObject:forKey:", v43, *MEMORY[0x1E0CFF318]);

    v44 = v104;
    if (!v104)
    {
      v86 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v86);
    }
    v45 = v105;
    *(_QWORD *)buf = v104;
    *(_QWORD *)&buf[8] = v105;
    if (v105)
    {
      v46 = (unint64_t *)&v105->__shared_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    IsInterrupted = as::server::AudioSessionInfo::IsInterrupted(v44);
    if (v45)
    {
      v49 = (unint64_t *)&v45->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v51 = (_QWORD *)MEMORY[0x1E0D485D8];
    if (IsInterrupted)
    {
      objc_msgSend(*(id *)(a1 + 32), "objectForKey:", *MEMORY[0x1E0D485D8]);
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v52, "intValue") == 2)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)buf, "side_effect");
        *(_QWORD *)&buf[16] = buf;
        buf[24] = 1;
        v112 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[86],char [86],0>((uint64_t)&v109 + 2, "Recording that the route changed due to port disconnect while session was interrupted");
        v113 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v114, (uint64_t)buf, 2, 1, 2);
        v114.__r_.__value_.__r.__words[2] = (std::string::size_type)&v114;
        v115 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v96, (uint64_t)&v114, 1, 1, 2);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v114);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v114.__r_.__value_.__l.__size_, v114.__r_.__value_.__s.__data_[0]);
        for (j = 0; j != -64; j -= 32)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v109 + j + 2);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&v111 + j), *((unsigned __int8 *)&v109 + j + 2));
        }
        v55 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v54));
        if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
        {
          v56 = v104;
          if (!v104)
          {
            v90 = _os_crash();
            as::server::require_acq::AudioSessionServerSetClientPlayState(v90);
          }
          v57 = v105;
          v94 = v104;
          v95 = v105;
          if (v105)
          {
            v58 = (unint64_t *)&v105->__shared_owners_;
            do
              v59 = __ldxr(v58);
            while (__stxr(v59 + 1, v58));
          }
          if (*((char *)v56 + 223) < 0)
            std::string::__init_copy_ctor_external(&v114, *((const std::string::value_type **)v56 + 25), *((_QWORD *)v56 + 26));
          else
            v114 = *(std::string *)((char *)v56 + 200);
          v60 = SHIBYTE(v114.__r_.__value_.__r.__words[2]);
          v61 = v114.__r_.__value_.__r.__words[0];
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v96, -1, 0x20u, 0, 0, __p);
          v62 = &v114;
          if (v60 < 0)
            v62 = (std::string *)v61;
          if (v93 >= 0)
            v63 = __p;
          else
            v63 = (void **)__p[0];
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = "AudioSessionServerImpNotificationHandlers.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 425;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "handle_route_change";
          v108 = 2080;
          v109 = v62;
          v110 = 2080;
          v111 = (std::string *)v63;
          _os_log_impl(&dword_1C895C000, v55, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
          if (v93 < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v114.__r_.__value_.__l.__data_);
          if (v57)
          {
            v64 = (unint64_t *)&v57->__shared_owners_;
            do
              v65 = __ldaxr(v64);
            while (__stlxr(v65 - 1, v64));
            if (!v65)
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v57);
            }
          }
        }

        v66 = v104;
        if (!v104)
        {
          v89 = _os_crash();
          as::server::require_acq::AudioSessionServerSetClientPlayState(v89);
        }
        v67 = v105;
        if (v105)
        {
          v68 = (unint64_t *)&v105->__shared_owners_;
          do
            v69 = __ldxr(v68);
          while (__stxr(v69 + 1, v68));
          *((_BYTE *)v66 + 314) = 1;
          do
            v70 = __ldaxr(v68);
          while (__stlxr(v70 - 1, v68));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
        }
        else
        {
          *((_BYTE *)v104 + 314) = 1;
        }
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v96);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v97, v96[0]);
      }

    }
    v71 = v104;
    if (!v104)
    {
      v87 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v87);
    }
    v72 = v105;
    if (v105)
    {
      v73 = (unint64_t *)&v105->__shared_owners_;
      do
        v74 = __ldxr(v73);
      while (__stxr(v74 + 1, v73));
      v75 = *((unsigned __int8 *)v71 + 315);
      do
        v76 = __ldaxr(v73);
      while (__stlxr(v76 - 1, v73));
      if (v76)
      {
        if (!v75)
          goto LABEL_124;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
        if (!v75)
        {
LABEL_124:
          v77 = v104;
          if (!v104)
          {
            v88 = _os_crash();
            as::server::require_acq::AudioSessionServerSetClientPlayState(v88);
          }
          v78 = v105;
          *(_QWORD *)buf = v104;
          *(_QWORD *)&buf[8] = v105;
          if (v105)
          {
            v79 = (unint64_t *)&v105->__shared_owners_;
            do
              v80 = __ldxr(v79);
            while (__stxr(v80 + 1, v79));
          }
          as::server::AudioSessionInfo::DeferPropertyChangeCallback(v77, *(NSString **)(a1 + 40), *(NSDictionary **)(a1 + 32), 1);
          if (v78)
          {
            v81 = (unint64_t *)&v78->__shared_owners_;
            do
              v82 = __ldaxr(v81);
            while (__stlxr(v82 - 1, v81));
            if (!v82)
            {
              ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
              std::__shared_weak_count::__release_weak(v78);
            }
          }

          if (cf)
            CFRelease(cf);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v101);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v102, v101[0]);
          if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v103.__r_.__value_.__l.__data_);
          goto LABEL_137;
        }
      }
    }
    else if (!*((_BYTE *)v104 + 315))
    {
      goto LABEL_124;
    }
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKey:", &unk_1E8208288, *v51);
    goto LABEL_124;
  }
  v7 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v2));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AudioSessionServerImpNotificationHandlers.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 378;
    _os_log_impl(&dword_1C895C000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid session pointer or payload", buf, 0x12u);
  }
LABEL_137:
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)&v104);
}

void sub_1C899E604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t *a16, uint64_t a17, void *a18, uint64_t a19, const void *a20,uint64_t *a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,os_unfair_lock_s *a29,uint64_t a30,uint64_t a31,char a32)
{
  void *v32;
  void *v33;
  void *v34;

  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a14);

  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&a16);
  applesauce::CF::ObjectRef<void const*>::~ObjectRef(&a20);
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&a21);
  if (a28 < 0)
    operator delete(__p);
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor(&a29);
  _Unwind_Resume(a1);
}

uint64_t std::optional<AVAudioSessionSpatialPreferences * {__strong}>::operator=[abi:ne180100]<AVAudioSessionSpatialPreferences * {__strong}&,void>(uint64_t a1, id *a2)
{
  int v3;
  id v4;
  void *v5;

  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = *a2;
  if (v3)
  {
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;

  }
  else
  {
    *(_QWORD *)a1 = v4;
    *(_BYTE *)(a1 + 8) = 1;
  }
  return a1;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[86],char [86],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[86]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[86]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1C899E89C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZN12_GLOBAL__N_135HandleCategoryOrModeChangedCallbackEjP8NSStringP12NSDictionary_block_invoke(uint64_t a1)
{
  uint64_t v2;
  char v3[4];
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(unsigned int *)(a1 + 40);
  v3[0] = 1;
  v4 = 3978;
  v5 = v2;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  kdebug_trace();
  objc_msgSend(*(id *)(a1 + 32), "handleCategoryOrModeChange:", *(unsigned int *)(a1 + 40));
  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)v3);
}

void sub_1C899E91C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

BOOL OUTLINED_FUNCTION_1_0(NSObject *a1)
{
  return os_log_type_enabled(a1, OS_LOG_TYPE_ERROR);
}

id OUTLINED_FUNCTION_2_0(id *a1)
{
  return objc_retainAutorelease(*a1);
}

void sub_1C899EA00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1C899EA88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id as::server::AudioApplicationInfo::GetAudioAppCallbackQueue(as::server::AudioApplicationInfo *this)
{
  unsigned __int8 v1;
  void *__p[2];
  char v4;

  if ((v1 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.coreaudio.AudioAppCallbackQueue");
    as::CreateFixedPriorityDispatchQueue((const void **)__p, QOS_CLASS_USER_INTERACTIVE, &as::server::AudioApplicationInfo::GetAudioAppCallbackQueue(void)::callbackQueue);
    if (v4 < 0)
      operator delete(__p[0]);
  }
  applesauce::dispatch::v1::queue::operator*(&as::server::AudioApplicationInfo::GetAudioAppCallbackQueue(void)::callbackQueue);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_1C899EB30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void as::server::AudioApplicationInfo::GetProperty(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  NSString *v7;
  NSString *v8;
  os_unfair_lock_s *v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = v7;
  if (a3 == 1634744890)
  {
    if (!-[NSString isEqualToString:](v7, "isEqualToString:", CFSTR("InputMute")))
    {
      v9 = (os_unfair_lock_s *)(a1 + 16);
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
      as::server::AudioAppInfoImpl::GetPropertyAudioApp((id *)(a1 + 24), v8, a4);
      goto LABEL_10;
    }
    v10 = as::server::AudioApplicationInfo::PrivateInputMuted((os_unfair_lock_s *)a1);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", (v10 & 0xFF00000000) != 0);
    v11 = objc_claimAutoreleasedReturnValue();
    *(_DWORD *)a4 = v10;
    *(_QWORD *)(a4 + 8) = v11;
  }
  else
  {
    if (a3 == 1836595770)
    {
      v9 = (os_unfair_lock_s *)(a1 + 16);
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
      as::server::AudioAppInfoImpl::GetPropertyMX((id *)(a1 + 24), v8, a4);
LABEL_10:
      os_unfair_lock_unlock(v9);
      goto LABEL_11;
    }
    v12 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v7));
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = 136315650;
      v14 = "AudioApplicationInfo.mm";
      v15 = 1024;
      v16 = 91;
      v17 = 1024;
      v18 = a3;
      _os_log_impl(&dword_1C895C000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d error property domain not recognized: %d", (uint8_t *)&v13, 0x18u);
    }
    *(_DWORD *)a4 = -50;
    *(_QWORD *)(a4 + 8) = 0;
  }
LABEL_11:

}

void sub_1C899ECFC(_Unwind_Exception *a1)
{
  void *v1;
  os_unfair_lock_s *v2;

  os_unfair_lock_unlock(v2);

  _Unwind_Resume(a1);
}

unint64_t as::server::AudioApplicationInfo::PrivateInputMuted(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  id *v6;
  uint64_t v7;
  unsigned int v8;
  id v9;
  int v10;
  NSObject *v11;
  _OWORD v13[2];
  unsigned __int8 v14;
  __int128 v15;
  __int128 v16;
  _BYTE buf[32];
  __int128 v18;
  unsigned __int8 v19;
  uint64_t v20;

  v1 = this;
  v20 = *MEMORY[0x1E0C80C00];
  v14 = 0;
  if ((v2 & 1) == 0)
  {
    if ((_DWORD)this)
    {
      as::AudioSessionMuteEnabled(void)::enabled = _os_feature_enabled_impl();
    }
  }
  if (as::AudioSessionMuteEnabled(void)::enabled)
  {
    as::server::AudioApplicationInfo::GetSessions(v1, (uint64_t)buf);
    v3 = *(_QWORD *)buf;
    v4 = *(_QWORD *)&buf[8];
    *(_QWORD *)&v15 = buf;
    std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
    v5 = v1 + 4;
    v6 = (id *)&v1[6];
    os_unfair_lock_lock(v5);
    if (v3 == v4)
    {
      as::server::AudioAppInfoImpl::GetPropertyAudioApp(v6, CFSTR("InputMute"), (uint64_t)buf);
      v8 = *(_DWORD *)buf;
      v7 = *(_QWORD *)&buf[8] != 0;

      os_unfair_lock_unlock(v5);
    }
    else
    {
      v7 = as::server::AudioAppInfoImpl::AllSessionForAppMuted((as::server::AudioAppInfoImpl *)v6);
      os_unfair_lock_unlock(v5);
      v8 = 0;
    }
  }
  else
  {
    v9 = *(id *)as::server::forbid_acq::SystemController::Instance((as::server::forbid_acq::SystemController *)this);
    if (v9)
    {
      caulk::synchronized<as::server::AudioAppInfoImpl,caulk::mach::unfair_lock,caulk::empty_atomic_interface<as::server::AudioAppInfoImpl>>::get(v1 + 4, (as::server::AudioAppInfoImpl *)buf);
      v15 = *(_OWORD *)&buf[16];
      v16 = v18;
      v10 = v19;
      as::server::AudioAppInfoImpl::~AudioAppInfoImpl((id *)buf);
      if (!v10)
        std::__throw_bad_optional_access[abi:ne180100]();
      v13[0] = v15;
      v13[1] = v16;
      v8 = objc_msgSend(v9, "getInputMute:outMuteValue:", v13, &v14);

      v7 = v14;
    }
    else
    {
      v11 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(0));
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "AudioApplicationInfo.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 358;
        _os_log_impl(&dword_1C895C000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Error - invalid MXSystemController", buf, 0x12u);
      }
      v7 = 0;
      v8 = -50;
    }
  }
  return v8 | (unint64_t)(v7 << 32);
}

void sub_1C899EF58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t as::server::AudioApplicationInfo::GetBoolPropertyDefaultToFalse(uint64_t a1, void *a2, unsigned int a3)
{
  id v5;
  uint64_t BoolDefaultToFalse;
  id v8[2];

  v5 = a2;
  as::server::AudioApplicationInfo::GetProperty(a1, v5, a3, (uint64_t)v8);
  BoolDefaultToFalse = as::server::AudioAppInfoImpl::ExtractBoolDefaultToFalse((uint64_t)v8, v5, a3);

  return BoolDefaultToFalse;
}

void sub_1C899F010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t as::server::AudioApplicationInfo::SetProperty(os_unfair_lock_s *a1, void *a2, void *a3)
{
  return as::server::AudioApplicationInfo::SetProperty(a1, a2, a3, 0);
}

uint64_t as::server::AudioApplicationInfo::SetProperty(os_unfair_lock_s *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  NSDictionary *v9;
  id v10;
  void *v11;
  uint64_t v12;
  os_unfair_lock_s *v13;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (objc_msgSend(v7, "isEqualToString:", CFSTR("InputMute")))
  {
    v10 = v8;
    v11 = v10;
    if (v10)
      v12 = as::server::AudioApplicationInfo::SetInputMuted(a1, objc_msgSend(v10, "BOOLValue"), v9);
    else
      v12 = 4294967246;

  }
  else
  {
    v13 = a1 + 4;
    os_unfair_lock_lock(a1 + 4);
    v12 = as::server::AudioAppInfoImpl::SetProperty((uint64_t)&a1[6], v7, v8);
    os_unfair_lock_unlock(v13);
  }

  return v12;
}

void sub_1C899F110(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  os_unfair_lock_s *v4;

  os_unfair_lock_unlock(v4);

  _Unwind_Resume(a1);
}

uint64_t as::server::AudioApplicationInfo::SetInputMuted(os_unfair_lock_s *this, uint64_t a2, NSDictionary *a3)
{
  NSDictionary *v5;
  void *v6;
  unsigned __int8 v7;
  void *v8;
  as::server *v9;
  void *v10;
  uint64_t v11;
  id v12;
  int v13;
  int v14;
  as::server *v15;
  NSObject *v16;
  _OWORD v18[2];
  _QWORD v19[6];
  char v20;
  __int128 v21;
  __int128 v22;
  _BYTE buf[32];
  __int128 v24;
  unsigned __int8 v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = v5;
  if ((v7 & 1) == 0)
  {
    if ((_DWORD)v5)
    {
      as::AudioSessionMuteEnabled(void)::enabled = _os_feature_enabled_impl();
    }
  }
  if (as::AudioSessionMuteEnabled(void)::enabled)
  {
    os_unfair_lock_lock(this + 4);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    as::server::AudioAppInfoImpl::SetProperty((uint64_t)&this[6], CFSTR("InputMute"), v8);

    os_unfair_lock_unlock(this + 4);
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    *(_DWORD *)&buf[24] = 0;
    as::server::GetAudioControlQueue(v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 3221225472;
    v19[2] = ___ZN2as6server20AudioApplicationInfo13SetInputMutedEbP12NSDictionary_block_invoke;
    v19[3] = &unk_1E82056F0;
    v19[4] = buf;
    v19[5] = this;
    v20 = a2;
    as::server::DispatchBlock(v10, v19, 1, (uint64_t)"SetInputMuted", (uint64_t)"AudioApplicationInfo.mm", 388, 0, 0);

    v11 = *(unsigned int *)(*(_QWORD *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
  }
  else
  {
    v12 = *(id *)as::server::forbid_acq::SystemController::Instance((as::server::forbid_acq::SystemController *)v5);
    if (v12)
    {
      caulk::synchronized<as::server::AudioAppInfoImpl,caulk::mach::unfair_lock,caulk::empty_atomic_interface<as::server::AudioAppInfoImpl>>::get(this + 4, (as::server::AudioAppInfoImpl *)buf);
      v21 = *(_OWORD *)&buf[16];
      v22 = v24;
      v13 = v25;
      v14 = v26;
      as::server::AudioAppInfoImpl::~AudioAppInfoImpl((id *)buf);
      if (!v13)
        std::__throw_bad_optional_access[abi:ne180100]();
      v18[0] = v21;
      v18[1] = v22;
      v15 = (as::server *)objc_msgSend(v12, "setInputMute:muteValue:", v18, a2);
      v11 = (uint64_t)v15;
      if ((_DWORD)v15)
      {
        v16 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v15));
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "AudioApplicationInfo.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 405;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v14;
          *(_WORD *)&buf[24] = 1024;
          *(_DWORD *)&buf[26] = v11;
          _os_log_impl(&dword_1C895C000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d Error - failed to set inputMuted, pid: %d, err: %d", buf, 0x1Eu);
        }
      }
    }
    else
    {
      v11 = 4294967246;
    }

  }
  return v11;
}

void sub_1C899F3DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t as::server::AudioApplicationInfo::UpdateProperty(uint64_t a1, void *a2, void *a3, int a4, int a5)
{
  os_unfair_lock_s *v8;
  id *v9;
  id v10;
  id v11;
  uint64_t updated;

  v8 = (os_unfair_lock_s *)(a1 + 16);
  v9 = (id *)(a1 + 24);
  v10 = a3;
  v11 = a2;
  os_unfair_lock_lock(v8);
  updated = as::server::AudioAppInfoImpl::UpdateProperty(v9, v11, v10, a4, a5, 0);

  os_unfair_lock_unlock(v8);
  return updated;
}

void sub_1C899F4E0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;
  void *v3;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t as::server::AudioApplicationInfo::UpdateProperty(uint64_t a1, void *a2, void *a3, int a4, int a5, void *a6)
{
  os_unfair_lock_s *v10;
  id *v11;
  id v12;
  id v13;
  id v14;
  uint64_t updated;

  v10 = (os_unfair_lock_s *)(a1 + 16);
  v11 = (id *)(a1 + 24);
  v12 = a6;
  v13 = a3;
  v14 = a2;
  os_unfair_lock_lock(v10);
  updated = as::server::AudioAppInfoImpl::UpdateProperty(v11, v14, v13, a4, a5, v12);

  os_unfair_lock_unlock(v10);
  return updated;
}

void sub_1C899F59C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;
  void *v3;
  void *v4;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void as::server::AudioApplicationInfo::ApplyAppProperties(os_unfair_lock_s *a1, uint64_t *a2)
{
  os_unfair_lock_s *v4;
  id *v5;
  void *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  id v12;
  void *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  as::server *v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::string v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  _QWORD v31[4];
  id v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  std::string __p;

  v4 = a1 + 4;
  v5 = (id *)&a1[6];
  os_unfair_lock_lock(a1 + 4);
  as::server::AudioAppInfoImpl::GetAppPropertiesExplicitlySet(v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  os_unfair_lock_unlock(v4);
  v8 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  v29 = v8;
  v30 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = (char *)as::server::AudioApplicationInfo::DebugString(a1);
  std::string::basic_string[abi:ne180100]<0>(&v28, v11);
  v12 = v6;
  v13 = v12;
  if (v12 && objc_msgSend(v12, "count"))
  {
    if (v7)
    {
      p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
      do
        v15 = __ldxr(p_shared_weak_owners);
      while (__stxr(v15 + 1, p_shared_weak_owners));
    }
    v31[0] = MEMORY[0x1E0C809B0];
    v31[1] = 3321888768;
    v31[2] = ___ZN2as6serverL25PrivateApplyAppPropertiesENSt3__110shared_ptrINS0_16AudioSessionInfoEEEP12NSDictionaryIP8NSStringPU25objcproto14NSSecureCoding11objc_objectENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke;
    v31[3] = &unk_1E8205718;
    v33 = v8;
    v34 = v7;
    if (v7)
    {
      v16 = (unint64_t *)&v7->__shared_weak_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      v32 = v13;
      v35 = v8;
      v36 = v7;
      v18 = (unint64_t *)&v7->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    else
    {
      v32 = v13;
      v35 = v8;
      v36 = 0;
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
    else
      __p = v28;
    v20 = (as::server *)MEMORY[0x1CAA39148](v31);
    as::server::GetAudioControlQueue(v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    as::server::DispatchBlock(v21, v20, 0, (uint64_t)"PrivateApplyAppProperties", (uint64_t)"AudioApplicationInfo.mm", 211, 0, 0);

    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v22 = v36;
    if (v36)
    {
      v23 = (unint64_t *)&v36->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }

    if (v34)
      std::__shared_weak_count::__release_weak(v34);
    if (v7)
      std::__shared_weak_count::__release_weak(v7);
  }

  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  v25 = v30;
  if (v30)
  {
    v26 = (unint64_t *)&v30->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }

}

void sub_1C899F834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;
  std::__shared_weak_count *v33;
  void *v34;
  uint64_t v35;

  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100](v35);

  if (a24)
    std::__shared_weak_count::__release_weak(a24);
  if (v33)
    std::__shared_weak_count::__release_weak(v33);

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a16);

  _Unwind_Resume(a1);
}

void as::server::AudioApplicationInfo::HandleSessionInputMuteChange(os_unfair_lock_s *this, unsigned int a2, uint64_t a3)
{
  os_unfair_lock_s *v5;
  as::server::AudioAppInfoImpl *v6;

  v5 = this + 4;
  v6 = (as::server::AudioAppInfoImpl *)&this[6];
  os_unfair_lock_lock(this + 4);
  as::server::AudioAppInfoImpl::HandleSessionInputMuteChange(v6, a2, a3);
  os_unfair_lock_unlock(v5);
}

void sub_1C899F920(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void as::server::AudioApplicationInfo::FindAudioAppClient(os_unfair_lock_s *this@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  os_unfair_lock_s *v5;
  as::server::AudioAppInfoImpl *v6;

  v5 = this + 4;
  v6 = (as::server::AudioAppInfoImpl *)&this[6];
  os_unfair_lock_lock(this + 4);
  as::server::AudioAppInfoImpl::FindAudioAppClient(v6, a2, a3);
  os_unfair_lock_unlock(v5);
}

void sub_1C899F980(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void as::server::AudioApplicationInfo::GetPrimaryClient(os_unfair_lock_s *this@<X0>, _QWORD *a2@<X8>)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v4 = this + 4;
  os_unfair_lock_lock(this + 4);
  v5 = *(_QWORD *)&this[42]._os_unfair_lock_opaque;
  *a2 = *(_QWORD *)&this[40]._os_unfair_lock_opaque;
  a2[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  os_unfair_lock_unlock(v4);
}

BOOL as::server::AudioApplicationInfo::SetPrimaryClient(os_unfair_lock_s *a1, uint64_t a2, void *a3)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  id v6;
  _BOOL8 v7;

  v4 = a1 + 4;
  v5 = (uint64_t)&a1[6];
  v6 = a3;
  os_unfair_lock_lock(v4);
  v7 = as::server::AudioAppInfoImpl::SetPrimaryClient(v5, a2, v6);

  os_unfair_lock_unlock(v4);
  return v7;
}

void sub_1C899FA4C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void as::server::AudioApplicationInfo::AddProxyAudioApp(os_unfair_lock_s *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  os_unfair_lock_s *v6;
  uint64_t v7;
  id v8;

  v6 = a1 + 4;
  v7 = (uint64_t)&a1[6];
  v8 = a3;
  os_unfair_lock_lock(v6);
  as::server::AudioAppInfoImpl::AddProxyAudioApp(v7, a2, v8, a4);

  os_unfair_lock_unlock(v6);
}

void sub_1C899FAC8(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void as::server::AudioApplicationInfo::AddDelegateAudioApp(os_unfair_lock_s *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  os_unfair_lock_s *v6;
  uint64_t v7;
  id v8;

  v6 = a1 + 4;
  v7 = (uint64_t)&a1[6];
  v8 = a3;
  os_unfair_lock_lock(v6);
  as::server::AudioAppInfoImpl::AddDelegateAudioApp(v7, a2, v8, a4);

  os_unfair_lock_unlock(v6);
}

void sub_1C899FB44(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void caulk::synchronized<as::server::AudioAppInfoImpl,caulk::mach::unfair_lock,caulk::empty_atomic_interface<as::server::AudioAppInfoImpl>>::get(os_unfair_lock_s *a1@<X0>, as::server::AudioAppInfoImpl *a2@<X8>)
{
  os_unfair_lock_lock(a1);
  as::server::AudioAppInfoImpl::AudioAppInfoImpl(a2, (const as::server::AudioAppInfoImpl *)&a1[2]);
  os_unfair_lock_unlock(a1);
}

void sub_1C899FB90(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void ___ZN2as6server20AudioApplicationInfo13SetInputMutedEbP12NSDictionary_block_invoke(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  _BOOL8 v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  NSObject *v20;
  NSObject *v21;
  uint64_t v22;
  _QWORD v23[3];
  void *__p[2];
  uint64_t v25;
  audit_token_t v26;
  int v27;
  _QWORD v28[2];
  uint64_t v29;
  std::__shared_weak_count *v30;
  _BYTE buf[18];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 16));
  v3 = *(_OWORD *)(v2 + 56);
  *(_OWORD *)v26.val = *(_OWORD *)(v2 + 40);
  *(_OWORD *)&v26.val[4] = v3;
  v27 = *(_DWORD *)(v2 + 72);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 16));
  if (!(_BYTE)v27)
    goto LABEL_31;
  v5 = *(unsigned __int8 *)(a1 + 48);
  as::server::AudioApplicationInfo::GetSessions((os_unfair_lock_s *)v2, (uint64_t)v23);
  __p[0] = 0;
  __p[1] = 0;
  v25 = 0;
  v6 = (uint64_t *)v23[0];
  v7 = (uint64_t *)v23[1];
  v28[0] = __p;
  v28[1] = 0;
  while (v6 != v7)
  {
    if (*v6)
    {
      v8 = (std::__shared_weak_count *)v6[1];
      v29 = *v6;
      v30 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor(buf, &v29);
      v11 = v30;
      if (v30)
      {
        v12 = (unint64_t *)&v30->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v14 = *(_QWORD *)buf;
      if (!*(_QWORD *)buf)
      {
        v22 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v22);
      }
      v15 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v16 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        v18 = *(_DWORD *)(v14 + 8);
        do
          v19 = __ldaxr(v16);
        while (__stlxr(v19 - 1, v16));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      else
      {
        v18 = *(_DWORD *)(*(_QWORD *)buf + 8);
      }
      as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)buf);
    }
    else
    {
      v18 = 0;
    }
    LODWORD(v29) = v18;
    std::insert_iterator<boost::container::flat_set<unsigned int,std::less<unsigned int>,void>>::operator=[abi:ne180100]((uint64_t)v28, (unsigned int *)&v29);
    v6 += 2;
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = as::server::require_acq::MuteAudioSessions(v5 != 0, (unsigned int **)__p, &v26);
  if (v25)
    operator delete(__p[0]);
  *(_QWORD *)buf = v23;
  std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v20 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v4));
    v4 = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
    if (v4)
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AudioApplicationInfo.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 384;
      _os_log_impl(&dword_1C895C000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to update mute state for audio sessions", buf, 0x12u);
    }
  }
  if (!(_BYTE)v27)
  {
LABEL_31:
    v21 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v4));
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AudioApplicationInfo.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 387;
      _os_log_impl(&dword_1C895C000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to get audit token for source process identity", buf, 0x12u);
    }
  }
}

void sub_1C899FE9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;

  if (a14)
    operator delete(__p);
  *(_QWORD *)(v24 - 96) = &a9;
  std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 96));
  _Unwind_Resume(a1);
}

void ___ZN2as6serverL24PrivateApplyMXPropertiesENSt3__110shared_ptrINS0_16AudioSessionInfoEEEP12NSDictionaryIP8NSStringPU25objcproto14NSSecureCoding11objc_objectENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  void *v8;
  void *v9;
  as::server::ConstAudioSessionInfo *v10;
  unsigned int v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  as::server *v16;
  int v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  NSObject *v21;
  uint64_t v22;
  as::server *v23;
  NSObject *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  id obj;
  uint64_t v33;
  std::__shared_weak_count *v34;
  std::string v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  as::server::ConstAudioSessionInfo *v40;
  std::__shared_weak_count *v41;
  _BYTE cf[12];
  __int16 v43;
  int v44;
  __int16 v45;
  _QWORD *v46;
  __int16 v47;
  _QWORD *v48;
  _BYTE v49[128];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v40 = 0;
  v41 = 0;
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2)
    goto LABEL_40;
  v41 = std::__shared_weak_count::lock(v2);
  if (!v41)
    goto LABEL_40;
  v40 = *(as::server::ConstAudioSessionInfo **)(a1 + 40);
  if (!v40)
    goto LABEL_40;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  obj = *(id *)(a1 + 32);
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v36, v49, 16);
  if (!v3)
  {

    goto LABEL_40;
  }
  v5 = *(_QWORD *)v37;
  v6 = 1;
  *(_QWORD *)&v4 = 136315650;
  v31 = v4;
  do
  {
    v7 = 0;
    do
    {
      if (*(_QWORD *)v37 != v5)
        objc_enumerationMutation(obj);
      v8 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * v7);
      objc_msgSend(*(id *)(a1 + 32), "valueForKey:", v8, v31);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = v40;
      v11 = *((_DWORD *)v40 + 2);
      if (*((char *)v40 + 223) < 0)
        std::string::__init_copy_ctor_external(&v35, *((const std::string::value_type **)v40 + 25), *((_QWORD *)v40 + 26));
      else
        v35 = *(std::string *)((char *)v40 + 200);
      as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v10, cf);
      v12 = *(_QWORD *)cf;
      if (*(_QWORD *)cf)
        CFRelease(*(CFTypeRef *)cf);
      v13 = (std::__shared_weak_count *)*((_QWORD *)v10 + 29);
      v33 = *((_QWORD *)v10 + 28);
      v34 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      v16 = (as::server *)as::server::require_acq::PrivateSetPropertyMX(v11, (uint64_t)&v35, v12, v8, v9, (uint64_t)&v33);
      v17 = (int)v16;
      v18 = v34;
      if (!v34)
        goto LABEL_21;
      v19 = (unint64_t *)&v34->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
        if (!v17)
          goto LABEL_25;
      }
      else
      {
LABEL_21:
        if (!(_DWORD)v16)
          goto LABEL_25;
      }
      v21 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v16));
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)cf = v31;
        *(_QWORD *)&cf[4] = "AudioApplicationInfo.mm";
        v43 = 1024;
        v44 = 164;
        v45 = 2112;
        v46 = v8;
        _os_log_impl(&dword_1C895C000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to set property: %@", cf, 0x1Cu);
      }
      v6 = 0;
LABEL_25:
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v35.__r_.__value_.__l.__data_);

      ++v7;
    }
    while (v7 != v3);
    v22 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v36, v49, 16);
    v3 = v22;
  }
  while (v22);

  if ((v6 & 1) == 0)
  {
    v24 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v23));
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      v25 = *(_QWORD *)(a1 + 56);
      v26 = (_QWORD *)(v25 + 176);
      if (*(char *)(v25 + 199) < 0)
        v26 = (_QWORD *)*v26;
      v27 = (_QWORD *)(a1 + 72);
      if (*(char *)(a1 + 95) < 0)
        v27 = (_QWORD *)*v27;
      *(_DWORD *)cf = 136315906;
      *(_QWORD *)&cf[4] = "AudioApplicationInfo.mm";
      v43 = 1024;
      v44 = 171;
      v45 = 2080;
      v46 = v26;
      v47 = 2080;
      v48 = v27;
      _os_log_impl(&dword_1C895C000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d Error - failed to apply MX properties to newly-created session (%s) (app:%s)", cf, 0x26u);
    }
  }
LABEL_40:
  v28 = v41;
  if (v41)
  {
    v29 = (unint64_t *)&v41->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_1C89A02B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  _Unwind_Resume(a1);
}

void __copy_helper_block_ea8_40c53_ZTSNSt3__18weak_ptrIN2as6server16AudioSessionInfoEEE56c56_ZTSNSt3__110shared_ptrIN2as6server16AudioSessionInfoEEE72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  std::string::size_type v3;
  unint64_t *v4;
  unint64_t v5;
  std::string::size_type v6;
  unint64_t *v7;
  unint64_t v8;
  std::string *v9;
  __int128 v10;

  v3 = *(_QWORD *)(a2 + 48);
  a1[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
  a1[2].__r_.__value_.__r.__words[0] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_QWORD *)(a2 + 64);
  a1[2].__r_.__value_.__l.__size_ = *(_QWORD *)(a2 + 56);
  a1[2].__r_.__value_.__r.__words[2] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = a1 + 3;
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a2 + 72), *(_QWORD *)(a2 + 80));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 72);
    a1[3].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 88);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
}

void sub_1C89A03CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v4;

  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100](v2);
  v4 = *(std::__shared_weak_count **)(v1 + 48);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_40c53_ZTSNSt3__18weak_ptrIN2as6server16AudioSessionInfoEEE56c56_ZTSNSt3__110shared_ptrIN2as6server16AudioSessionInfoEEE72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1 + 56;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100](v2);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void ___ZN2as6serverL25PrivateApplyAppPropertiesENSt3__110shared_ptrINS0_16AudioSessionInfoEEEP12NSDictionaryIP8NSStringPU25objcproto14NSSecureCoding11objc_objectENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unsigned __int8 v8;
  void *v9;
  BOOL v10;
  as::server::require_acq *v11;
  __int128 v12;
  NSNumber *v13;
  audit_token_t *v14;
  uint64_t v15;
  as::server *v16;
  NSObject *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  _BYTE buf[38];
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v29 = 0;
  v30 = 0;
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    v30 = std::__shared_weak_count::lock(v2);
    if (v30)
    {
      v29 = *(_QWORD *)(a1 + 40);
      if (v29)
      {
        v27 = 0u;
        v28 = 0u;
        v25 = 0u;
        v26 = 0u;
        v3 = *(id *)(a1 + 32);
        v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v25, v32, 16);
        if (v4)
        {
          v5 = *(_QWORD *)v26;
          v24 = 1;
          do
          {
            v6 = 0;
            do
            {
              if (*(_QWORD *)v26 != v5)
                objc_enumerationMutation(v3);
              v7 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * v6);
              {
                as::AudioSessionMuteEnabled(void)::enabled = _os_feature_enabled_impl();
              }
              if (as::AudioSessionMuteEnabled(void)::enabled)
              {
                if (objc_msgSend(v7, "isEqualToString:", CFSTR("InputMute")))
                {
                  objc_msgSend(*(id *)(a1 + 32), "valueForKey:", v7);
                  v9 = (void *)objc_claimAutoreleasedReturnValue();
                  v10 = v9 == 0;

                  if (!v10)
                  {
                    v11 = (as::server::require_acq *)*(unsigned int *)(v29 + 8);
                    v12 = *(_OWORD *)(v29 + 68);
                    *(_OWORD *)buf = *(_OWORD *)(v29 + 52);
                    *(_OWORD *)&buf[16] = v12;
                    *(_DWORD *)&buf[32] = *(_DWORD *)(v29 + 84);
                    objc_msgSend(*(id *)(a1 + 32), "objectForKey:", v7);
                    v14 = (audit_token_t *)objc_claimAutoreleasedReturnValue();
                    if (buf[32])
                      as::server::require_acq::MuteSessionInput(v11, (const audit_token_t *)buf, v14, v13);
                    else
                      v24 = 0;

                  }
                }
              }
              ++v6;
            }
            while (v4 != v6);
            v15 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v25, v32, 16);
            v4 = v15;
          }
          while (v15);

          if ((v24 & 1) == 0)
          {
            v17 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v16));
            if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
            {
              v18 = *(_QWORD *)(a1 + 56);
              v19 = (_QWORD *)(v18 + 176);
              if (*(char *)(v18 + 199) < 0)
                v19 = (_QWORD *)*v19;
              v20 = (_QWORD *)(a1 + 72);
              if (*(char *)(a1 + 95) < 0)
                v20 = (_QWORD *)*v20;
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = "AudioApplicationInfo.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 208;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = v19;
              *(_WORD *)&buf[28] = 2080;
              *(_QWORD *)&buf[30] = v20;
              _os_log_impl(&dword_1C895C000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d Error - failed to apply App properties to newly-created session (%s) (app:%s)", buf, 0x26u);
            }
          }
        }
        else
        {

        }
      }
    }
  }
  v21 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1C89A0720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);

  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void as::server::AudioAppInfoImpl::~AudioAppInfoImpl(id *this)
{

  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)(this + 17));
  std::__tree<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>>>::destroy((uint64_t)(this + 14), this[15]);
  std::__tree<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>>>::destroy((uint64_t)(this + 11), this[12]);
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);

}

void std::__tree<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>>>::destroy(a1, a2[1]);
    std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 5));
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>>>::destroy(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;

  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>>>::destroy(a1, a2[1]);
    v4 = (std::__shared_weak_count *)a2[6];
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
    operator delete(a2);
  }
}

uint64_t std::insert_iterator<boost::container::flat_set<unsigned int,std::less<unsigned int>,void>>::operator=[abi:ne180100](uint64_t a1, unsigned int *a2)
{
  uint64_t *v3;
  char *v4;
  char *v6;
  unsigned int *v7;

  v3 = *(uint64_t **)a1;
  v7 = *(unsigned int **)(a1 + 8);
  boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::insert_unique(v3, &v7, a2, &v6);
  v4 = v6;
  *(_QWORD *)(a1 + 8) = v6;
  if (!v4)
    __assert_rtn("operator++", "vector.hpp", 168, "!!m_ptr");
  *(_QWORD *)(a1 + 8) = v4 + 4;
  return a1;
}

void boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::insert_unique(uint64_t *a1@<X0>, unsigned int **a2@<X1>, unsigned int *a3@<X2>, char **a4@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  unsigned int *v10;
  char *v11;
  char *v12;

  v5 = *a1;
  if (*a1 > (unint64_t)*a2)
    goto LABEL_14;
  v7 = a1[1];
  if (v5)
    v8 = 1;
  else
    v8 = v7 == 0;
  if (!v8)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  if ((unint64_t)*a2 > v5 + 4 * v7)
LABEL_14:
    boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::insert_unique();
  v10 = *a2;
  v11 = 0;
  if (boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::priv_insert_unique_prepare((unsigned int **)a1, &v10, a3, (unsigned int **)&v11))
  {
    v12 = v11;
    boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::emplace<unsigned int>(a1, &v12, a3, a4);
  }
  else
  {
    if (!*a1)
    {
      if (v11)
        __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
    }
    *a4 = v11;
  }
}

BOOL boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::priv_insert_unique_prepare(unsigned int **a1, unsigned int **a2, unsigned int *a3, unsigned int **a4)
{
  unsigned int *v4;
  unsigned int *v5;
  BOOL v6;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  _BOOL8 result;
  uint64_t *v16;
  unsigned int **v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int *v21;

  v4 = *a1;
  v5 = a1[1];
  if (*a1)
    v6 = 1;
  else
    v6 = v5 == 0;
  if (!v6)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v9 = &v4[(_QWORD)v5];
  v10 = *a2;
  if (*a2 != v9)
  {
    if (!v10)
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    if (*a3 >= *v10)
    {
      v18 = v9;
      v19 = v10;
      v16 = (uint64_t *)&v19;
      v17 = &v18;
      return boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::priv_insert_unique_prepare((uint64_t)a1, v16, v17, a3, a4);
    }
  }
  *a4 = v10;
  v11 = *a2;
  if (*a2 == v4)
    return 1;
  if (!v11)
    __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
  v14 = *(v11 - 1);
  v12 = v11 - 1;
  v13 = v14;
  if (v14 < *a3)
    return 1;
  if (*a3 < v13)
  {
    v21 = v4;
    v20 = v12;
    v16 = (uint64_t *)&v21;
    v17 = &v20;
    return boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::priv_insert_unique_prepare((uint64_t)a1, v16, v17, a3, a4);
  }
  result = 0;
  *a4 = v12;
  return result;
}

void boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::emplace<unsigned int>(uint64_t *a1@<X0>, char **a2@<X1>, _DWORD *a3@<X2>, char **a4@<X8>)
{
  char *v4;
  uint64_t v5;
  unint64_t v7;
  BOOL v8;
  char *v9;
  unint64_t v10;
  char *v12;

  v4 = *a2;
  v5 = *a1;
  if (*a1 > (unint64_t)*a2)
    goto LABEL_16;
  v7 = a1[1];
  if (v5)
    v8 = 1;
  else
    v8 = v7 == 0;
  if (!v8)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v9 = (char *)(v5 + 4 * v7);
  if (v4 > v9)
LABEL_16:
    boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::insert_unique();
  v10 = a1[2];
  if (v10 < v7)
    boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::emplace<unsigned int>();
  if (v10 == v7)
  {
    boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int>>(a1, *a2, (const char *)1, a3, a4);
  }
  else
  {
    if (v9 == v4)
    {
      *(_DWORD *)v4 = *a3;
      a1[1] = v7 + 1;
    }
    else
    {
      *(_DWORD *)v9 = *((_DWORD *)v9 - 1);
      a1[1] = v7 + 1;
      v12 = v4;
      if (v9 - 4 != v4)
      {
        memmove(v4 + 4, v4, v9 - 4 - v4);
        v12 = *a2;
      }
      *(_DWORD *)v4 = *a3;
      v4 = v12;
    }
    *a4 = v4;
  }
}

void boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int>>(uint64_t *a1@<X0>, char *a2@<X1>, const char *a3@<X2>, _DWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  const char *v12;
  uint64_t v13;
  char *v14;

  v10 = *a1;
  v11 = boost::container::vector_alloc_holder<boost::container::new_allocator<unsigned int>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >> 61)
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  v13 = v11;
  v14 = (char *)operator new(4 * v11);
  boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int>>((uint64_t)a1, v14, v13, a2, (uint64_t)a3, a4);
  *a5 = &a2[*a1 - v10];
}

void boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int>>(uint64_t a1, char *__dst, uint64_t a3, char *__src, uint64_t a5, _DWORD *a6)
{
  char *v10;
  uint64_t v11;

  v10 = *(char **)a1;
  boost::container::uninitialized_move_and_insert_alloc<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int *,boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int>>(a1, *(char **)a1, __src, (char *)(*(_QWORD *)a1 + 4 * *(_QWORD *)(a1 + 8)), __dst, a5, a6);
  if (v10)
    operator delete(*(void **)a1);
  v11 = *(_QWORD *)(a1 + 8) + a5;
  *(_QWORD *)a1 = __dst;
  *(_QWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 16) = a3;
}

void sub_1C89A0D60(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void *boost::container::uninitialized_move_and_insert_alloc<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int *,boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int>>(int a1, char *a2, char *__src, char *a4, char *__dst, uint64_t a6, _DWORD *a7)
{
  char *v9;
  char *v12;
  void *result;

  v9 = __dst;
  if (a2 && a2 != __src && __dst)
  {
    v12 = (char *)(__src - a2);
    result = memmove(__dst, a2, __src - a2);
    v9 = &v12[(_QWORD)v9];
  }
  if (a6 != 1)
    boost::container::uninitialized_move_and_insert_alloc<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int *,boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int>>();
  *(_DWORD *)v9 = *a7;
  if (__src)
  {
    if (__src != a4)
      return memmove(v9 + 4, __src, a4 - __src);
  }
  return result;
}

as::server::AudioAppInfoImpl *as::server::AudioAppInfoImpl::AudioAppInfoImpl(as::server::AudioAppInfoImpl *this, const as::server::AudioAppInfoImpl *a2)
{
  void *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v4 = (void *)*((_QWORD *)a2 + 1);
  *(_QWORD *)this = *(_QWORD *)a2;
  *((_QWORD *)this + 1) = v4;
  v6 = *((_OWORD *)a2 + 1);
  v5 = *((_OWORD *)a2 + 2);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_OWORD *)this + 1) = v6;
  *((_OWORD *)this + 2) = v5;
  *((_QWORD *)this + 7) = *((id *)a2 + 7);
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), *((const std::string::value_type **)a2 + 8), *((_QWORD *)a2 + 9));
  }
  else
  {
    v7 = *((_OWORD *)a2 + 4);
    *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
    *((_OWORD *)this + 4) = v7;
  }
  std::map<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>::map[abi:ne180100]((uint64_t)this + 88, (uint64_t)a2 + 88);
  std::map<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>::map[abi:ne180100]((uint64_t)this + 112, (uint64_t)a2 + 112);
  v8 = *((_QWORD *)a2 + 18);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)this + 18) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *((_QWORD *)this + 19) = *((id *)a2 + 19);
  *((_QWORD *)this + 20) = *((id *)a2 + 20);
  *((_QWORD *)this + 21) = *((id *)a2 + 21);
  *((_QWORD *)this + 22) = *((id *)a2 + 22);
  return this;
}

void sub_1C89A0F0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

uint64_t std::map<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>::map[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  std::map<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::__tree_node<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,void *> *,long>>>((_DWORD *)a1, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  return a1;
}

void sub_1C89A0F90(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_DWORD *std::map<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::__tree_node<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,void *> *,long>>>(_DWORD *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int *v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t *)(result + 2);
    do
    {
      result = std::__tree<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int const,as::server::AudioAppInfoImpl::SessionDetails> const&>(v5, v6, v4 + 8, (uint64_t)(v4 + 8));
      v7 = (unsigned int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(unsigned int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (unsigned int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

_DWORD *std::__tree<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int const,as::server::AudioAppInfoImpl::SessionDetails> const&>(uint64_t **a1, uint64_t *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t *v6;
  _DWORD *v7;
  uint64_t **v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t *v15;

  v6 = std::__tree<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>>>::__find_equal<unsigned int>(a1, a2, &v15, &v14, a3);
  v7 = (_DWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v9 = operator new(0x40uLL);
    v7 = v9;
    v9[8] = *(_DWORD *)a4;
    v10 = *(_QWORD *)(a4 + 16);
    *((_QWORD *)v9 + 5) = *(_QWORD *)(a4 + 8);
    *((_QWORD *)v9 + 6) = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 16);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    *((_WORD *)v9 + 28) = *(_WORD *)(a4 + 24);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v15, v8, (uint64_t *)v9);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>>>::__find_equal<unsigned int>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t std::map<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>::map[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  std::map<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::__tree_node<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,void *> *,long>>>((_DWORD *)a1, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  return a1;
}

void sub_1C89A12BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_DWORD *std::map<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::__tree_node<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,void *> *,long>>>(_DWORD *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int *v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t *)(result + 2);
    do
    {
      result = std::__tree<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int const,std::shared_ptr<as::server::AudioAppRemoteClient>> const&>(v5, v6, v4 + 8, (uint64_t)(v4 + 8));
      v7 = (unsigned int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(unsigned int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (unsigned int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

_DWORD *std::__tree<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int const,std::shared_ptr<as::server::AudioAppRemoteClient>> const&>(uint64_t **a1, uint64_t *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t *v6;
  _DWORD *v7;
  uint64_t **v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v13[2];
  char v14;
  uint64_t v15;
  uint64_t *v16;

  v6 = std::__tree<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>>>::__find_equal<unsigned int>(a1, a2, &v16, &v15, a3);
  v7 = (_DWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x38uLL);
    v13[1] = a1 + 1;
    v7[8] = *(_DWORD *)a4;
    v9 = *(_QWORD *)(a4 + 16);
    *((_QWORD *)v7 + 5) = *(_QWORD *)(a4 + 8);
    *((_QWORD *)v7 + 6) = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v14 = 1;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v16, v8, (uint64_t *)v7);
    v13[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,void *>>>>::reset[abi:ne180100]((uint64_t)v13, 0);
  }
  return v7;
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 40);
    operator delete(v2);
  }
}

void sub_1C89A14EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1C89A1574(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t as::server::AudioAppInfoImpl::ExtractBoolDefaultToFalse(uint64_t a1, void *a2, unsigned int a3)
{
  id v5;
  as::server *v6;
  as::server *v7;
  BOOL v8;
  NSObject *v9;
  int v10;
  as::server *v11;
  NSObject *v12;
  int v13;
  std::string *v14;
  uint64_t v15;
  int v16;
  std::string::size_type v17;
  uint64_t v18;
  std::string *v19;
  std::string v21;
  _BYTE buf[12];
  __int16 v23;
  int v24;
  __int16 v25;
  id v26;
  __int16 v27;
  std::string *v28;
  __int16 v29;
  uint64_t v30;
  char __s;
  int v32;
  __int16 v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = (as::server *)*(id *)(a1 + 8);
  v7 = v6;
  if (*(_DWORD *)a1)
    v8 = 1;
  else
    v8 = v6 == 0;
  if (v8)
  {
    v9 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v6));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = bswap32(a3);
      *(_DWORD *)&buf[1] = v10;
      if (((char)v10 - 32) > 0x5E
        || (((__int16)v10 >> 8) - 32) > 0x5E
        || ((v10 << 8 >> 24) - 32) > 0x5E
        || ((v10 >> 24) - 32) > 0x5E)
      {
        std::to_string(&v21, a3);
      }
      else
      {
        strcpy(&buf[5], "'");
        buf[0] = 39;
        std::string::basic_string[abi:ne180100]<0>(&v21, buf);
      }
      v14 = &v21;
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "AudioApplicationInfoImpl.mm";
      v23 = 1024;
      v24 = 66;
      v25 = 2112;
      v26 = v5;
      v27 = 2080;
      v28 = v14;
      _os_log_impl(&dword_1C895C000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d failed to get property: %@, domain: %s", buf, 0x26u);
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v21.__r_.__value_.__l.__data_);
    }

    v15 = 0;
  }
  else
  {
    v11 = (as::server *)-[as::server unsignedLongValue](v6, "unsignedLongValue");
    if ((unint64_t)v11 >= 2)
    {
      v12 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v11));
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        v13 = bswap32(a3);
        v32 = v13;
        if (((char)v13 - 32) > 0x5E
          || (((__int16)v13 >> 8) - 32) > 0x5E
          || ((v13 << 8 >> 24) - 32) > 0x5E
          || ((v13 >> 24) - 32) > 0x5E)
        {
          std::to_string(&v21, a3);
        }
        else
        {
          v33 = 39;
          __s = 39;
          std::string::basic_string[abi:ne180100]<0>(&v21, &__s);
        }
        v16 = SHIBYTE(v21.__r_.__value_.__r.__words[2]);
        v17 = v21.__r_.__value_.__r.__words[0];
        v18 = -[as::server unsignedLongValue](v7, "unsignedLongValue");
        *(_QWORD *)&buf[4] = "AudioApplicationInfoImpl.mm";
        v19 = &v21;
        *(_DWORD *)buf = 136316162;
        if (v16 < 0)
          v19 = (std::string *)v17;
        v23 = 1024;
        v24 = 71;
        v25 = 2112;
        v26 = v5;
        v27 = 2080;
        v28 = v19;
        v29 = 2048;
        v30 = v18;
        _os_log_impl(&dword_1C895C000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d warning - property: %@ (domain: %s) has non-BOOL value: %lu", buf, 0x30u);
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v21.__r_.__value_.__l.__data_);
      }

    }
    v15 = -[as::server BOOLValue](v7, "BOOLValue");
  }

  return v15;
}

void sub_1C89A1890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

as::server::AudioAppInfoImpl *as::server::AudioAppInfoImpl::GetAlertTypeFromContextOrDefaultTo(as::server::AudioAppInfoImpl *this, void *a2, NSDictionary *a3)
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v4 = a2;
  v5 = v4;
  if (v4)
  {
    objc_msgSend(v4, "valueForKey:", CFSTR("AlertType"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (v6)
    {
      objc_msgSend(v5, "valueForKey:", CFSTR("AlertType"));
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = v7;
      if (v7)
      {
        this = (as::server::AudioAppInfoImpl *)objc_msgSend(v7, "intValue");

      }
    }
  }

  return this;
}

void sub_1C89A1968(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void as::server::AudioAppInfoImpl::DeferPropertyChangeCallback(uint64_t **a1, void *a2, void *a3, char a4)
{
  id v7;
  as::server::AudioApplicationInfo *v8;
  as::server::AudioApplicationInfo *v9;
  uint64_t *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  NSObject *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD block[5];
  as::server::AudioApplicationInfo *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  char v23;

  v7 = a2;
  v8 = a3;
  v9 = v8;
  v10 = *a1;
  v11 = a1[1];
  if (*a1 != v11)
  {
    do
    {
      v13 = *v10;
      v12 = (std::__shared_weak_count *)v10[1];
      if (v12)
      {
        p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
        do
          v15 = __ldxr(p_shared_weak_owners);
        while (__stxr(v15 + 1, p_shared_weak_owners));
      }
      as::server::AudioApplicationInfo::GetAudioAppCallbackQueue(v8);
      v16 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3321888768;
      block[2] = ___ZN2as6server16AudioAppInfoImpl27DeferPropertyChangeCallbackEONSt3__16vectorINS2_10shared_ptrINS0_20AudioAppRemoteClientEEENS2_9allocatorIS6_EEEEPK8NSStringP12NSDictionaryb_block_invoke;
      block[3] = &unk_1E8205750;
      v21 = v13;
      v22 = v12;
      if (v12)
      {
        v17 = (unint64_t *)&v12->__shared_weak_owners_;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      block[4] = v7;
      v20 = v9;
      v23 = a4;
      dispatch_async(v16, block);

      v8 = (as::server::AudioApplicationInfo *)v22;
      if (v22)
        std::__shared_weak_count::__release_weak(v22);
      if (v12)
        std::__shared_weak_count::__release_weak(v12);
      v10 += 2;
    }
    while (v10 != v11);
  }

}

void sub_1C89A1ABC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  std::__shared_weak_count *v3;

  if (v3)
    std::__shared_weak_count::__release_weak(v3);

  _Unwind_Resume(a1);
}

void ___ZN2as6server16AudioAppInfoImpl27DeferPropertyChangeCallbackEONSt3__16vectorINS2_10shared_ptrINS0_20AudioAppRemoteClientEEENS2_9allocatorIS6_EEEEPK8NSStringP12NSDictionaryb_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  as::server::AudioAppRemoteClient *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(as::server::AudioAppRemoteClient **)(a1 + 48);
      if (v5)
        as::server::AudioAppRemoteClient::DeferPropertyChangeCallback(v5, *(NSString **)(a1 + 32), *(NSDictionary **)(a1 + 40), *(unsigned __int8 *)(a1 + 64));
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1C89A1B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_48c57_ZTSNSt3__18weak_ptrIN2as6server20AudioAppRemoteClientEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_ea8_48c57_ZTSNSt3__18weak_ptrIN2as6server20AudioAppRemoteClientEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

BOOL as::server::AudioAppInfoImpl::SetPrimaryClient(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  _BOOL8 v7;
  NSObject *v8;
  int v9;
  NSObject *v10;
  _BOOL8 result;
  int v12;
  NSObject *v13;
  int v14;
  int v15;
  id *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  id v28;
  uint8_t buf[4];
  _BYTE v30[20];
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v28 = v5;
  if (!v5)
  {
    v10 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(0));
    result = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v12 = *(_DWORD *)(a2 + 92);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)v30 = "AudioApplicationInfoImpl.mm";
    *(_WORD *)&v30[8] = 1024;
    *(_DWORD *)&v30[10] = 455;
    *(_WORD *)&v30[14] = 1024;
    *(_DWORD *)&v30[16] = v12;
    _os_log_impl(&dword_1C895C000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Error - expected an XPC connection for an explicitly created audio app instance (pid: %d)", buf, 0x18u);
    return 0;
  }
  v6 = v5;
  v7 = as::server::ProcessIdentity::operator==(a1 + 16, a2 + 56);
  if (!v7)
  {
    v13 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v7));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = *(_DWORD *)(a1 + 52);
      v15 = *(_DWORD *)(a2 + 92);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)v30 = "AudioApplicationInfoImpl.mm";
      *(_WORD *)&v30[8] = 1024;
      *(_DWORD *)&v30[10] = 461;
      *(_WORD *)&v30[14] = 1024;
      *(_DWORD *)&v30[16] = v14;
      v31 = 1024;
      v32 = v15;
      _os_log_impl(&dword_1C895C000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d Error - source process mismatch: existing pid:%d, explicitly-created pid: %d", buf, 0x1Eu);
    }
    goto LABEL_11;
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v8 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v7));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = *(_DWORD *)(a2 + 92);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)v30 = "AudioApplicationInfoImpl.mm";
      *(_WORD *)&v30[8] = 1024;
      *(_DWORD *)&v30[10] = 467;
      *(_WORD *)&v30[14] = 1024;
      *(_DWORD *)&v30[16] = v9;
      _os_log_impl(&dword_1C895C000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d Error - valid primary client already present on audio app instance (pid:%d)", buf, 0x18u);
    }
LABEL_11:

    return 0;
  }
  v27 = 1886546285;
  v16 = (id *)(a2 + 8);
  std::allocate_shared[abi:ne180100]<as::server::AudioAppRemoteClient,std::allocator<as::server::AudioAppRemoteClient>,AVAudioApplicationType,NSXPCConnection * {__strong}&,as::server::ProcessIdentity const&,NSString * const {__strong}&,NSString * const {__strong},as::server::ProcessIdentity const&,void>(&v27, &v28, a2 + 16, (_QWORD *)(a2 + 8), (_QWORD *)a2, buf);
  std::shared_ptr<as::WorkloopPool>::operator=[abi:ne180100](a1 + 136, (__int128 *)buf);
  v17 = *(std::__shared_weak_count **)&v30[4];
  if (*(_QWORD *)&v30[4])
  {
    v18 = (unint64_t *)(*(_QWORD *)&v30[4] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v21 = *(_QWORD *)(a1 + 136);
  v20 = *(_QWORD *)(a1 + 144);
  *(_DWORD *)buf = *(_DWORD *)(v21 + 8);
  *(_QWORD *)&v30[4] = v21;
  *(_QWORD *)&v30[12] = v20;
  if (v20)
  {
    v22 = (unint64_t *)(v20 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  std::__tree<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::shared_ptr<as::server::AudioAppRemoteClient>>>((uint64_t **)(a1 + 112), (unsigned int *)buf, (uint64_t)buf);
  v24 = *(std::__shared_weak_count **)&v30[12];
  if (*(_QWORD *)&v30[12])
  {
    v25 = (unint64_t *)(*(_QWORD *)&v30[12] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (*v16)
    objc_storeStrong((id *)(a1 + 56), *v16);
  objc_storeStrong((id *)(a1 + 8), *(id *)a2);
  as::server::AudioAppInfoImpl::UpdateDebugString(a1, (uint64_t *)(a1 + 136));

  return 1;
}

void sub_1C89A1EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  uint64_t v11;

  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100](v11);

  _Unwind_Resume(a1);
}

void as::server::AudioAppInfoImpl::AddDelegateAudioApp(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  id v7;
  _BOOL8 v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t **v11;
  char v12;
  char v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  NSObject *v17;
  int v18;
  int v19;
  int v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  NSObject *v24;
  int v25;
  int v26;
  __int128 v27;
  id v28;
  _BYTE buf[24];
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v28 = v7;
  v8 = as::server::ProcessIdentity::operator==(a2 + 56, a1 + 16);
  if (v8)
  {
    *(_QWORD *)buf = 1684825972;
    std::allocate_shared[abi:ne180100]<as::server::AudioAppRemoteClient,std::allocator<as::server::AudioAppRemoteClient>,AVAudioApplicationType,NSXPCConnection * {__strong}&,as::server::ProcessIdentity const&,NSString * const {__strong}&,NSString * const {__strong},as::server::ProcessIdentity const&,void>(buf, &v28, a2 + 16, (_QWORD *)(a2 + 8), (_QWORD *)a2, &v27);
    *(_DWORD *)buf = *(_DWORD *)(v27 + 8);
    *(_OWORD *)&buf[8] = v27;
    if (*((_QWORD *)&v27 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = std::__tree<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::shared_ptr<as::server::AudioAppRemoteClient>>>((uint64_t **)(a1 + 112), (unsigned int *)buf, (uint64_t)buf);
    v13 = v12;
    v14 = *(std::__shared_weak_count **)&buf[16];
    if (!*(_QWORD *)&buf[16])
      goto LABEL_9;
    v15 = (unint64_t *)(*(_QWORD *)&buf[16] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      if ((v13 & 1) == 0)
        goto LABEL_10;
    }
    else
    {
LABEL_9:
      if ((v12 & 1) == 0)
      {
LABEL_10:
        v17 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v11));
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          v18 = *(_DWORD *)(v27 + 8);
          v19 = *(_DWORD *)(a1 + 52);
          v20 = *(_DWORD *)(a2 + 52);
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = "AudioApplicationInfoImpl.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 519;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v18;
          v30 = 1024;
          v31 = v19;
          v32 = 1024;
          v33 = v20;
          _os_log_impl(&dword_1C895C000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to add delegate instance (id: %u, source pid:%d, creator pid: %d)", buf, 0x24u);
        }
        *a4 = 0;
        a4[1] = 0;
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
        if (*((_QWORD *)&v27 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        goto LABEL_22;
      }
    }
    *(_OWORD *)a4 = v27;
LABEL_22:
    v7 = v28;
    goto LABEL_23;
  }
  v24 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v8));
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
  {
    v25 = *(_DWORD *)(a2 + 92);
    v26 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "AudioApplicationInfoImpl.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 510;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v25;
    v30 = 1024;
    v31 = v26;
    _os_log_impl(&dword_1C895C000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d Error - delegate source process (pid:%d) doesn't match this source process (pid:%d)", buf, 0x1Eu);
  }
  *a4 = 0;
  a4[1] = 0;
LABEL_23:

}

void sub_1C89A21CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, id a11)
{
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void as::AudioAppState::~AudioAppState(id *this)
{

}

void as::server::AudioAppInfoImpl::GetPropertyMX(id *this@<X0>, NSString *a2@<X1>, uint64_t a3@<X8>)
{
  as::AudioAppState::getPropertyMX(this + 19, a2, a3);
}

void as::AudioAppState::getPropertyMX(id *this@<X0>, NSString *a2@<X1>, uint64_t a3@<X8>)
{
  void *v4;
  id v5;
  int v6;
  void *v7;

  objc_msgSend(this[1], "objectForKey:", a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v7 = v4;
    v5 = v4;
    v4 = v7;
    v6 = 0;
  }
  else
  {
    v6 = -50;
  }
  *(_DWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v4;

}

void as::server::AudioAppInfoImpl::GetPropertyAudioApp(id *this@<X0>, NSString *a2@<X1>, uint64_t a3@<X8>)
{
  as::AudioAppState::getPropertyApp(this + 19, a2, a3);
}

void as::AudioAppState::getPropertyApp(id *this@<X0>, NSString *a2@<X1>, uint64_t a3@<X8>)
{
  void *v4;
  id v5;
  int v6;
  void *v7;

  objc_msgSend(*this, "objectForKey:", a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v7 = v4;
    v5 = v4;
    v4 = v7;
    v6 = 0;
  }
  else
  {
    v6 = -50;
  }
  *(_DWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v4;

}

id as::server::AudioAppInfoImpl::GetAppPropertiesExplicitlySet(id *this)
{
  return as::AudioAppState::getAppPropertiesExplicitlySet(this + 19);
}

id as::AudioAppState::getAppPropertiesExplicitlySet(id *this)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_opt_new();
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = this[2];
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v3);
        v7 = *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * i);
        objc_msgSend(*this, "valueForKey:", v7, (_QWORD)v10);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "setValue:forKey:", v8, v7);

      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v4);
  }

  return v2;
}

void sub_1C89A2450(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t as::server::AudioAppInfoImpl::UpdateProperty(id *a1, void *a2, void *a3, int a4, int a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  NSDictionary *v15;
  NSNumber *v16;
  uint64_t updated;

  v11 = a2;
  v12 = a3;
  v13 = a6;
  if (a4 == 1836595770)
  {
    v14 = as::AudioAppState::setPropertyMX((uint64_t)(a1 + 19), v11, v12);
LABEL_7:
    updated = v14;
    goto LABEL_10;
  }
  if (!objc_msgSend(v11, "isEqualToString:", CFSTR("InputMute")))
  {
    v14 = as::AudioAppState::setPropertyApp(a1 + 19, v11, v12);
    goto LABEL_7;
  }
  v16 = (NSNumber *)v12;
  if (v16)
  {
    as::server::AudioAppInfoImpl::GetAlertTypeFromContextOrDefaultTo((as::server::AudioAppInfoImpl *)2, v13, v15);
    updated = as::server::AudioAppInfoImpl::UpdateInputMuteState(a1, v16, a5);
  }
  else
  {
    updated = 4294967246;
  }

LABEL_10:
  return updated;
}

void sub_1C89A256C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t as::AudioAppState::setPropertyMX(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;

  v5 = a2;
  v6 = a3;
  objc_msgSend(*(id *)(a1 + 8), "setValue:forKey:", v6, v5);
  objc_msgSend(*(id *)(a1 + 24), "addObject:", v5);

  return 0;
}

void sub_1C89A25F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t as::server::AudioAppInfoImpl::UpdateInputMuteState(id *this, NSNumber *a2, int a3)
{
  NSNumber *v5;
  as::server *v6;
  void *v7;
  _BOOL4 v8;
  int v9;
  NSObject *v10;
  _BOOL4 v11;
  const char *v12;
  const char *v13;
  const char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;
  id v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  _QWORD *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  as::AudioAppState::getPropertyApp(this + 19, CFSTR("InputMute"), (uint64_t)&v18);
  v6 = (as::server *)v19;
  v7 = v6;
  if (v6)
  {
    v8 = -[NSNumber BOOLValue](v5, "BOOLValue");
    v6 = (as::server *)objc_msgSend(v7, "BOOLValue");
    v9 = v8 ^ v6;
  }
  else
  {
    v9 = 1;
  }
  v10 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v6));
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = -[NSNumber BOOLValue](v5, "BOOLValue");
    v12 = "YES";
    if (v9)
      v13 = "YES";
    else
      v13 = "NO";
    v14 = "UNMUTED";
    if (v11)
      v14 = "MUTED";
    if (!a3)
      v12 = "NO";
    v15 = this + 8;
    if (*((char *)this + 87) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136316418;
    v21 = "AudioApplicationInfoImpl.mm";
    v22 = 1024;
    v23 = 208;
    v24 = 2080;
    v25 = v13;
    v26 = 2080;
    v27 = v14;
    v28 = 2080;
    v29 = v12;
    v30 = 2080;
    v31 = v15;
    _os_log_impl(&dword_1C895C000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d input mute state has changed: %s, new value: %s (forceNotification: %s) (app: %s)", buf, 0x3Au);
  }

  if ((v9 | a3) == 1)
  {
    v16 = as::AudioAppState::setPropertyApp(this + 19, CFSTR("InputMute"), v5);
    as::server::AudioAppInfoImpl::IssueInputMuteNotifcation((as::server::AudioAppInfoImpl *)this, v5);
  }
  else
  {
    v16 = 0;
  }

  return v16;
}

void sub_1C89A27F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

uint64_t as::AudioAppState::setPropertyApp(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;

  v5 = a2;
  v6 = a3;
  objc_msgSend(*a1, "setValue:forKey:", v6, v5);
  objc_msgSend(a1[2], "addObject:", v5);

  return 0;
}

void sub_1C89A2894(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t as::server::AudioAppInfoImpl::SetProperty(uint64_t a1, void *a2, void *a3)
{
  return as::AudioAppState::setPropertyApp((id *)(a1 + 152), a2, a3);
}

void as::server::AudioAppInfoImpl::IssueInputMuteNotifcation(as::server::AudioAppInfoImpl *this, NSNumber *a2)
{
  NSNumber *v3;
  void *v4;
  uint64_t *v5[3];
  void **v6;
  const __CFString *v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v7 = CFSTR("AVAudioApplicationMuteStateKey");
  v8[0] = v3;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v8, &v7, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  as::server::AudioAppInfoImpl::GetAudioAppRemoteClients((uint64_t)this, (char **)v5);
  as::server::AudioAppInfoImpl::DeferPropertyChangeCallback(v5, CFSTR("AVAudioApplicationInputMuteStateChangeNotification"), v4, 0);
  v6 = (void **)v5;
  std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100](&v6);

}

void sub_1C89A2978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  void *v13;
  void *v14;

  a13 = (void **)&a10;
  std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100](&a13);

  _Unwind_Resume(a1);
}

uint64_t as::server::AudioAppInfoImpl::GetAudioAppRemoteClients@<X0>(uint64_t this@<X0>, char **a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  char *v5;
  _QWORD *v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  int64x2_t v21;
  char *v22;
  _QWORD *v23;
  _QWORD *v24;
  BOOL v25;
  __int128 v26;
  uint64_t v27;
  int64x2_t v28;
  char *v29;
  _QWORD *v30;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *(_QWORD **)(this + 112);
  v3 = (_QWORD *)(this + 120);
  if (v2 != (_QWORD *)(this + 120))
  {
    v5 = 0;
    v6 = a2 + 2;
    do
    {
      v7 = *(_OWORD *)(v2 + 5);
      if (*((_QWORD *)&v7 + 1))
      {
        v8 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
        v5 = a2[1];
      }
      if ((unint64_t)v5 >= *v6)
      {
        v26 = v7;
        v10 = (v5 - *a2) >> 4;
        if ((unint64_t)(v10 + 1) >> 60)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        v11 = *v6 - (_QWORD)*a2;
        v12 = v11 >> 3;
        if (v11 >> 3 <= (unint64_t)(v10 + 1))
          v12 = v10 + 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
          v13 = 0xFFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        v30 = v6;
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>((uint64_t)v6, v13);
        v16 = &v14[16 * v10];
        *(_OWORD *)v16 = v26;
        v18 = *a2;
        v17 = a2[1];
        if (v17 == *a2)
        {
          v21 = vdupq_n_s64((unint64_t)v17);
          v19 = &v14[16 * v10];
        }
        else
        {
          v19 = &v14[16 * v10];
          do
          {
            v20 = *((_OWORD *)v17 - 1);
            v17 -= 16;
            *((_OWORD *)v19 - 1) = v20;
            v19 -= 16;
            *(_QWORD *)v17 = 0;
            *((_QWORD *)v17 + 1) = 0;
          }
          while (v17 != v18);
          v21 = *(int64x2_t *)a2;
        }
        v5 = v16 + 16;
        *a2 = v19;
        a2[1] = v16 + 16;
        v28 = v21;
        v22 = a2[2];
        a2[2] = &v14[16 * v15];
        v29 = v22;
        v27 = v21.i64[0];
        this = std::__split_buffer<std::shared_ptr<as::server::AudioAppRemoteClient>>::~__split_buffer((uint64_t)&v27);
      }
      else
      {
        *(_OWORD *)v5 = v7;
        v5 += 16;
      }
      a2[1] = v5;
      v23 = (_QWORD *)v2[1];
      if (v23)
      {
        do
        {
          v24 = v23;
          v23 = (_QWORD *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (_QWORD *)v2[2];
          v25 = *v24 == (_QWORD)v2;
          v2 = v24;
        }
        while (!v25);
      }
      v2 = v24;
    }
    while (v24 != v3);
  }
  return this;
}

void sub_1C89A2B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t as::server::AudioAppInfoImpl::FindAudioAppClient@<X0>(as::server::AudioAppInfoImpl *this@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v5 = *((_QWORD *)this + 15);
  result = (uint64_t)this + 120;
  v4 = v5;
  if (!v5)
    goto LABEL_12;
  v6 = result;
  do
  {
    v7 = *(_DWORD *)(v4 + 32);
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 != result && *(_DWORD *)(v6 + 32) <= a2)
  {
    v11 = *(_QWORD *)(v6 + 40);
    v10 = *(_QWORD *)(v6 + 48);
    *a3 = v11;
    a3[1] = v10;
    if (v10)
    {
      v12 = (unint64_t *)(v10 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
  }
  else
  {
LABEL_12:
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

BOOL as::server::AudioAppInfoImpl::AllSessionForAppMuted(as::server::AudioAppInfoImpl *this)
{
  char *v1;
  char *v2;
  _BOOL8 result;
  char *v4;
  char *v5;
  BOOL v6;

  v1 = (char *)*((_QWORD *)this + 11);
  v2 = (char *)this + 96;
  if (v1 == (char *)this + 96)
    return 1;
  do
  {
    result = v1[57] != 0;
    if (!v1[57])
      break;
    v4 = (char *)*((_QWORD *)v1 + 1);
    if (v4)
    {
      do
      {
        v5 = v4;
        v4 = *(char **)v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        v5 = (char *)*((_QWORD *)v1 + 2);
        v6 = *(_QWORD *)v5 == (_QWORD)v1;
        v1 = v5;
      }
      while (!v6);
    }
    v1 = v5;
  }
  while (v5 != v2);
  return result;
}

uint64_t as::server::AudioAppInfoImpl::NumberofUnmutedSessions(as::server::AudioAppInfoImpl *this)
{
  char *v1;
  char *v2;
  uint64_t result;
  char *v4;
  char *v5;
  char *v6;
  BOOL v7;

  v1 = (char *)*((_QWORD *)this + 11);
  v2 = (char *)this + 96;
  if (v1 == (char *)this + 96)
    return 0;
  result = 0;
  do
  {
    v4 = (char *)*((_QWORD *)v1 + 1);
    v5 = v1;
    if (v4)
    {
      do
      {
        v6 = v4;
        v4 = *(char **)v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        v6 = (char *)*((_QWORD *)v5 + 2);
        v7 = *(_QWORD *)v6 == (_QWORD)v5;
        v5 = v6;
      }
      while (!v7);
    }
    result += v1[57];
    v1 = v6;
  }
  while (v6 != v2);
  return result;
}

void as::server::AudioAppInfoImpl::HandleSessionInputMuteChange(as::server::AudioAppInfoImpl *this, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  as::server::AudioAppInfoImpl *v6;
  _QWORD *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;
  NSNumber *v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  BOOL v15;
  uint64_t *v16;
  NSObject *v17;
  unsigned int v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v18 = a2;
  v4 = (_QWORD *)((char *)this + 96);
  v3 = *((_QWORD *)this + 12);
  if (!v3)
  {
LABEL_29:
    v17 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(this));
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v20 = "AudioApplicationInfoImpl.mm";
      v21 = 1024;
      v22 = 409;
      _os_log_impl(&dword_1C895C000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d Unable to find session in session map", buf, 0x12u);
    }
    return;
  }
  v6 = this;
  this = (as::server::AudioAppInfoImpl *)((char *)this + 88);
  v7 = v4;
  do
  {
    v8 = *(_DWORD *)(v3 + 32);
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = (uint64_t *)v3;
    else
      v10 = (uint64_t *)(v3 + 8);
    if (v9)
      v7 = (_QWORD *)v3;
    v3 = *v10;
  }
  while (*v10);
  if (v7 != v4 && *((_DWORD *)v7 + 8) <= a2)
  {
    this = (as::server::AudioAppInfoImpl *)std::map<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>::at((uint64_t)this, &v18);
    if (*((unsigned __int8 *)this + 17) != (_DWORD)a3)
    {
      *((_BYTE *)this + 17) = a3;
      if ((_DWORD)a3)
      {
        this = (as::server::AudioAppInfoImpl *)as::server::AudioAppInfoImpl::AllSessionForAppMuted(v6);
        if ((this & 1) == 0)
          goto LABEL_18;
        goto LABEL_17;
      }
      this = (as::server::AudioAppInfoImpl *)as::server::AudioAppInfoImpl::NumberofUnmutedSessions(v6);
      if (this == (as::server::AudioAppInfoImpl *)1)
      {
LABEL_17:
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a3);
        v11 = (NSNumber *)objc_claimAutoreleasedReturnValue();
        as::server::AudioAppInfoImpl::IssueInputMuteNotifcation(v6, v11);

      }
    }
  }
LABEL_18:
  v12 = *v4;
  if (!*v4)
    goto LABEL_29;
  v13 = v4;
  do
  {
    v14 = *(_DWORD *)(v12 + 32);
    v15 = v14 >= v18;
    if (v14 >= v18)
      v16 = (uint64_t *)v12;
    else
      v16 = (uint64_t *)(v12 + 8);
    if (v15)
      v13 = (_QWORD *)v12;
    v12 = *v16;
  }
  while (*v16);
  if (v13 == v4 || v18 < *((_DWORD *)v13 + 8))
    goto LABEL_29;
}

void sub_1C89A2E4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>::at(uint64_t a1, unsigned int *a2)
{
  uint64_t *v2;
  unsigned int v3;
  unsigned int v4;

  v2 = *(uint64_t **)(a1 + 8);
  if (!v2)
LABEL_8:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  v3 = *a2;
  while (1)
  {
    while (1)
    {
      v4 = *((_DWORD *)v2 + 8);
      if (v3 >= v4)
        break;
      v2 = (uint64_t *)*v2;
      if (!v2)
        goto LABEL_8;
    }
    if (v4 >= v3)
      return v2 + 5;
    v2 = (uint64_t *)v2[1];
    if (!v2)
      goto LABEL_8;
  }
}

void as::server::AudioAppInfoImpl::AddProxyAudioApp(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  id v7;
  _BOOL8 v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t **v11;
  char v12;
  char v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  NSObject *v17;
  int v18;
  int v19;
  int v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  NSObject *v24;
  int v25;
  int v26;
  __int128 v27;
  id v28;
  _BYTE buf[24];
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v28 = v7;
  v8 = as::server::ProcessIdentity::operator==(a2 + 56, a1 + 16);
  if (v8)
  {
    *(_QWORD *)buf = 1886547832;
    std::allocate_shared[abi:ne180100]<as::server::AudioAppRemoteClient,std::allocator<as::server::AudioAppRemoteClient>,AVAudioApplicationType,NSXPCConnection * {__strong}&,as::server::ProcessIdentity const&,NSString * const {__strong}&,decltype(nullptr),as::server::ProcessIdentity const&,void>(buf, &v28, a2 + 16, (_QWORD *)(a2 + 8), &v27);
    *(_DWORD *)buf = *(_DWORD *)(v27 + 8);
    *(_OWORD *)&buf[8] = v27;
    if (*((_QWORD *)&v27 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = std::__tree<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::shared_ptr<as::server::AudioAppRemoteClient>>>((uint64_t **)(a1 + 112), (unsigned int *)buf, (uint64_t)buf);
    v13 = v12;
    v14 = *(std::__shared_weak_count **)&buf[16];
    if (!*(_QWORD *)&buf[16])
      goto LABEL_9;
    v15 = (unint64_t *)(*(_QWORD *)&buf[16] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      if ((v13 & 1) == 0)
        goto LABEL_10;
    }
    else
    {
LABEL_9:
      if ((v12 & 1) == 0)
      {
LABEL_10:
        v17 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v11));
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          v18 = *(_DWORD *)(v27 + 8);
          v19 = *(_DWORD *)(a1 + 52);
          v20 = *(_DWORD *)(a2 + 52);
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = "AudioApplicationInfoImpl.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 498;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v18;
          v30 = 1024;
          v31 = v19;
          v32 = 1024;
          v33 = v20;
          _os_log_impl(&dword_1C895C000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to add proxy instance (id: %u, source pid:%d, creator pid: %d)", buf, 0x24u);
        }
        *a4 = 0;
        a4[1] = 0;
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
        if (*((_QWORD *)&v27 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        goto LABEL_22;
      }
    }
    *(_OWORD *)a4 = v27;
LABEL_22:
    v7 = v28;
    goto LABEL_23;
  }
  v24 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v8));
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
  {
    v25 = *(_DWORD *)(a2 + 92);
    v26 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "AudioApplicationInfoImpl.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 489;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v25;
    v30 = 1024;
    v31 = v26;
    _os_log_impl(&dword_1C895C000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d Error - proxy source process (pid:%d) doesn't match this source process (pid:%d)", buf, 0x1Eu);
  }
  *a4 = 0;
  a4[1] = 0;
LABEL_23:

}

void sub_1C89A3160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, id a13)
{
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a11);

  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  uint64_t v28;
  int64x2_t v29;
  char *v30;
  uint64_t v31;

  v6 = (unint64_t)a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v31 = result;
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(result, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = *a1;
    v22 = a1[1];
    if (v22 == *a1)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v16[16 * v12];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
      }
      while (v22 != v23);
      v26 = *(int64x2_t *)a1;
    }
    v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    v29 = v26;
    v27 = a1[2];
    a1[2] = &v16[16 * v17];
    v30 = v27;
    v28 = v26.i64[0];
    result = std::__split_buffer<std::shared_ptr<as::server::AudioAppRemoteClient>>::~__split_buffer((uint64_t)&v28);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
  return result;
}

void ___ZN2as6server20DefaultAudioAppStateEv_block_invoke()
{
  uint64_t v0;
  void *v1;
  const __CFString *v2;
  _QWORD v3[2];

  v3[1] = *MEMORY[0x1E0C80C00];
  v2 = CFSTR("InputMute");
  v3[0] = MEMORY[0x1E0C9AAA0];
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v3, &v2, 1);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)as::server::DefaultAudioAppState(void)::sDefaultState;
  as::server::DefaultAudioAppState(void)::sDefaultState = v0;

}

void ___ZN2as6server14DefaultMXStateEv_block_invoke()
{
  uint64_t v0;
  void *v1;
  const __CFString *v2;
  _QWORD v3[2];

  v3[1] = *MEMORY[0x1E0C80C00];
  v2 = CFSTR("PrefersBluetoothAccessoryMuting");
  v3[0] = MEMORY[0x1E0C9AAA0];
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v3, &v2, 1);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)as::server::DefaultMXState(void)::sDefaultState;
  as::server::DefaultMXState(void)::sDefaultState = v0;

}

void std::shared_ptr<as::server::AudioAppRemoteClient>::reset[abi:ne180100](_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<as::server::AudioAppRemoteClient,std::allocator<as::server::AudioAppRemoteClient>,AVAudioApplicationType,NSXPCConnection * {__strong}&,as::server::ProcessIdentity const&,NSString * const {__strong}&,NSString * const {__strong},as::server::ProcessIdentity const&,void>@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X4>, _QWORD *a5@<X5>, _QWORD *a6@<X8>)
{
  _QWORD *v12;
  _QWORD *result;

  v12 = operator new(0xE0uLL);
  result = std::__shared_ptr_emplace<as::server::AudioAppRemoteClient>::__shared_ptr_emplace[abi:ne180100]<AVAudioApplicationType,NSXPCConnection * {__strong}&,as::server::ProcessIdentity const&,NSString * const {__strong}&,NSString * const {__strong},as::server::ProcessIdentity const&,std::allocator<as::server::AudioAppRemoteClient>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_1C89A34D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<as::server::AudioAppRemoteClient>::__shared_ptr_emplace[abi:ne180100]<AVAudioApplicationType,NSXPCConnection * {__strong}&,as::server::ProcessIdentity const&,NSString * const {__strong}&,NSString * const {__strong},as::server::ProcessIdentity const&,std::allocator<as::server::AudioAppRemoteClient>,0>(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t a4, _QWORD *a5, _QWORD *a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E82057F0;
  as::server::AudioAppRemoteClient::AudioAppRemoteClient(a1 + 3, *a2, *a3, a4, *a5, *a6);
  return a1;
}

void sub_1C89A352C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<as::server::AudioAppRemoteClient>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E82057F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<as::server::AudioAppRemoteClient>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E82057F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA38D28);
}

uint64_t std::__shared_ptr_emplace<as::server::AudioAppRemoteClient>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t **std::__tree<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::shared_ptr<as::server::AudioAppRemoteClient>>>(uint64_t **a1, unsigned int *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  unsigned int v9;
  unsigned int v10;
  char *v11;
  _QWORD v13[2];
  char v14;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v10 = *((_DWORD *)v5 + 8);
        if (v9 >= v10)
          break;
        v5 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_9;
      }
      if (v10 >= v9)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v7 = v8 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v11 = (char *)operator new(0x38uLL);
    v13[1] = v6;
    *((_DWORD *)v11 + 8) = *(_DWORD *)a3;
    *(_OWORD *)(v11 + 40) = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v14 = 1;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v8, v7, (uint64_t *)v11);
    v13[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,std::shared_ptr<as::server::AudioAppRemoteClient>>,void *>>>>::reset[abi:ne180100]((uint64_t)v13, 0);
    return (uint64_t **)v11;
  }
  return v8;
}

_QWORD *std::allocate_shared[abi:ne180100]<as::server::AudioAppRemoteClient,std::allocator<as::server::AudioAppRemoteClient>,AVAudioApplicationType,NSXPCConnection * {__strong}&,as::server::ProcessIdentity const&,NSString * const {__strong}&,decltype(nullptr),as::server::ProcessIdentity const&,void>@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xE0uLL);
  result = std::__shared_ptr_emplace<as::server::AudioAppRemoteClient>::__shared_ptr_emplace[abi:ne180100]<AVAudioApplicationType,NSXPCConnection * {__strong}&,as::server::ProcessIdentity const&,NSString * const {__strong}&,decltype(nullptr),as::server::ProcessIdentity const&,std::allocator<as::server::AudioAppRemoteClient>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1C89A36F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<as::server::AudioAppRemoteClient>::__shared_ptr_emplace[abi:ne180100]<AVAudioApplicationType,NSXPCConnection * {__strong}&,as::server::ProcessIdentity const&,NSString * const {__strong}&,decltype(nullptr),as::server::ProcessIdentity const&,std::allocator<as::server::AudioAppRemoteClient>,0>(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t a4, _QWORD *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E82057F0;
  as::server::AudioAppRemoteClient::AudioAppRemoteClient(a1 + 3, *a2, *a3, a4, *a5, 0);
  return a1;
}

void sub_1C89A374C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1C89A37E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1C89A386C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id as::server::GetASCallbackQueue(as::server *this)
{
  unsigned __int8 v1;
  void *__p[2];
  char v4;

  {
    std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.coreaudio.ASCallbackQueue");
    as::CreateFixedPriorityDispatchQueue((const void **)__p, QOS_CLASS_USER_INTERACTIVE, &as::server::GetASCallbackQueue(void)::callbackQueue);
    if (v4 < 0)
      operator delete(__p[0]);
  }
  applesauce::dispatch::v1::queue::operator*(&as::server::GetASCallbackQueue(void)::callbackQueue);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_1C89A3914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t as::server::TranslateCMSessionErrorCode(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  as::server *v12;
  NSObject *v13;
  int v14;
  uint64_t *v15;
  uint64_t *v16;
  void **v17;
  NSObject *v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  void **v23;
  void *__p[2];
  char v25;
  _BYTE v26[8];
  uint64_t *v27;
  _BYTE v28[16];
  _BYTE *v29;
  char v30;
  _BYTE v31[8];
  _QWORD v32[2];
  char v33;
  _BYTE v34[16];
  _BYTE *v35;
  char v36;
  _BYTE v37[8];
  _QWORD v38[2];
  char v39;
  void *v40[2];
  void **v41;
  char v42;
  _BYTE v43[16];
  uint64_t v44;
  char v45;
  uint8_t buf[4];
  const char *v47;
  __int16 v48;
  _BYTE v49[14];
  __int16 v50;
  const char *v51;
  __int16 v52;
  uint64_t *v53;
  _BYTE v54[10];
  _BYTE v55[16];
  _BYTE *v56;
  char v57;
  uint64_t v58;

  v4 = a4;
  v58 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)v40, "error_string");
    v41 = v40;
    v42 = 1;
    AudioSession::GetCMSessionErrorString((AudioSession *)v4, __p);
    v44 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>((uint64_t)v43, (uint64_t)__p);
    v45 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)buf, (uint64_t)v40, 2, 1, 2);
    *(_QWORD *)&v49[2] = buf;
    v49[10] = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[11],char [11],0>((uint64_t)v34, "error_code");
    v35 = v34;
    v36 = 1;
    v37[0] = 5;
    v38[0] = (int)v4;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v37);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v37);
    v38[1] = v37;
    v39 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v51 + 2, (uint64_t)v34, 2, 1, 2);
    *(_QWORD *)v54 = (char *)&v51 + 2;
    v54[8] = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)v28, "calling_line");
    v29 = v28;
    v30 = 1;
    v31[0] = 5;
    v32[0] = a3;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v31);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v31);
    v32[1] = v31;
    v33 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v55, (uint64_t)v28, 2, 1, 2);
    v56 = v55;
    v57 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v26, (uint64_t)buf, 3, 1, 2);
    for (i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v55[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v55[i + 8], v55[i]);
    }
    for (j = 0; j != -8; j -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v31[j * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v32[j], v31[j * 8]);
    }
    for (k = 0; k != -8; k -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v37[k * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v38[k], v37[k * 8]);
    }
    for (m = 0; m != -64; m -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v43[m]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v43[m + 8], v43[m]);
    }
    if (v25 < 0)
      operator delete(__p[0]);
    if ((_DWORD)v4 == -12987)
    {
      v13 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v12));
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        v14 = *((char *)a2 + 23);
        v15 = (uint64_t *)*a2;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v26, -1, 0x20u, 0, 0, v40);
        if (v14 >= 0)
          v16 = a2;
        else
          v16 = v15;
        if (SHIBYTE(v41) >= 0)
          v17 = v40;
        else
          v17 = (void **)v40[0];
        *(_DWORD *)buf = 136316418;
        v47 = "AudioSessionServerImpCommon.mm";
        v48 = 1024;
        *(_DWORD *)v49 = 82;
        *(_WORD *)&v49[4] = 2080;
        *(_QWORD *)&v49[6] = a1;
        v50 = 2080;
        v51 = "translating CM session status";
        v52 = 2080;
        v53 = v16;
        *(_WORD *)v54 = 2080;
        *(_QWORD *)&v54[2] = v17;
        _os_log_impl(&dword_1C895C000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"note\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x3Au);
        if (SHIBYTE(v41) < 0)
          operator delete(v40[0]);
      }

      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v26[0]);
      return 1768386162;
    }
    else
    {
      v19 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v12));
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        v20 = *((char *)a2 + 23);
        v21 = (uint64_t *)*a2;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v26, -1, 0x20u, 0, 0, v40);
        v22 = (uint64_t)(v20 >= 0 ? a2 : v21);
        v23 = SHIBYTE(v41) >= 0 ? v40 : (void **)v40[0];
        *(_DWORD *)buf = 136316418;
        v47 = "AudioSessionServerImpCommon.mm";
        v48 = 1024;
        *(_DWORD *)v49 = 84;
        *(_WORD *)&v49[4] = 2080;
        *(_QWORD *)&v49[6] = a1;
        v50 = 2080;
        v51 = "translating CM session error";
        v52 = 2080;
        v53 = (uint64_t *)v22;
        *(_WORD *)v54 = 2080;
        *(_QWORD *)&v54[2] = v23;
        _os_log_impl(&dword_1C895C000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d { \"action\":\"%s\", \"error\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x3Au);
        if (SHIBYTE(v41) < 0)
          operator delete(v40[0]);
      }

      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v26[0]);
      if ((int)v4 <= -12990)
      {
        switch(v4)
        {
          case 0xFFFFBDA9:
            v4 = 560030580;
            break;
          case 0xFFFFBDAA:
LABEL_38:
            v4 = 561145203;
            break;
          case 0xFFFFBDAB:
            v4 = 561145187;
            break;
          case 0xFFFFBDAC:
            v4 = 561015905;
            break;
          default:
            if ((_DWORD)v4 == -15685)
LABEL_40:
              v4 = 561017449;
            else
LABEL_42:
              v4 = 2003329396;
            break;
        }
      }
      else
      {
        switch(v4)
        {
          case 0xFFFFCD43:
            v4 = 1936290409;
            break;
          case 0xFFFFCD44:
            v4 = 1701737535;
            break;
          case 0xFFFFCD45:
          case 0xFFFFCD48:
          case 0xFFFFCD4A:
            goto LABEL_42;
          case 0xFFFFCD46:
            goto LABEL_38;
          case 0xFFFFCD47:
            v4 = 560557684;
            break;
          case 0xFFFFCD49:
            goto LABEL_40;
          case 0xFFFFCD4B:
            v4 = 4294967246;
            break;
          default:
            if ((_DWORD)v4)
              goto LABEL_42;
            break;
        }
      }
    }
  }
  return v4;
}

void sub_1C89A3EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t *a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  void *v34;

  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&a16);
  _Unwind_Resume(a1);
}

uint64_t as::server::IsSessionActive(as::server *this, const void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  id v7;

  if ((_DWORD)a2)
  {
    as::server::MXAccessor<as::server::RequireACQ>::GetProperty((void *)*MEMORY[0x1E0D49880], (uint64_t)&v6);
    if (v6)
    {
      v4 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v4);
    }
  }
  else
  {
    as::server::MXAccessor<as::server::ForbidACQ>::GetProperty((void *)*MEMORY[0x1E0D49880], (uint64_t)&v6);
    if (v6)
    {
      v5 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v5);
    }
  }
  v2 = objc_msgSend(v7, "BOOLValue", 0);

  return v2;
}

void sub_1C89A41AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void as::server::MXAccessor<as::server::RequireACQ>::GetProperty(void *a1@<X2>, uint64_t a2@<X8>)
{
  id v3;

  v3 = a1;
  *(_DWORD *)a2 = _MXSessionCopyProperty();
  *(_QWORD *)(a2 + 8) = 0;

}

void sub_1C89A4234(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void as::server::MXAccessor<as::server::ForbidACQ>::GetProperty(void *a1@<X2>, uint64_t a2@<X8>)
{
  id v3;

  v3 = a1;
  *(_DWORD *)a2 = MXSessionCopyProperty();
  *(_QWORD *)(a2 + 8) = 0;

}

void sub_1C89A42A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t as::server::RemoveMXNotificationListener(as::server *this, const audit_token_t *a2, audit_token_t *a3, NSString *a4)
{
  unsigned int v5;
  audit_token_t *v6;
  as::server::AudioSessionInfo *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  as::server::AudioSessionInfo *v16;
  std::__shared_weak_count *v17;
  _BYTE buf[18];
  __int16 v19;
  unsigned int v20;
  uint64_t v21;

  v5 = this;
  v21 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor((as::server::AudioSessionInfoAccessor *)&v16, v5, a2, 0);
  v7 = v16;
  if (v16)
  {
    v8 = v17;
    *(_QWORD *)buf = v16;
    *(_QWORD *)&buf[8] = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    v11 = as::server::AudioSessionInfo::RemoveMXNotificationListener(v7, (NSString *)v6);
    if (v8)
    {
      v12 = (unint64_t *)&v8->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  else
  {
    v11 = 561210739;
    v14 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(0));
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AudioSessionServerImpCommon.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 177;
      v19 = 1024;
      v20 = v5;
      _os_log_impl(&dword_1C895C000, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cannot get session info for session ID: 0x%x", buf, 0x18u);
    }
  }
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)&v16);

  return v11;
}

void sub_1C89A441C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)va);

  _Unwind_Resume(a1);
}

id as::server::forbid_acq::CopyCMSessionAudioMode(as::server::forbid_acq *this, const void *a2)
{
  MXSessionCopyProperty();
  return 0;
}

uint64_t as::server::require_acq::PrivateSetPropertyMX(unsigned int a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6)
{
  as::server::require_acq *v10;
  as::server *v11;
  as::server *v12;
  as::server::require_acq *v13;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  as::server *v17;
  NSObject *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  NSString *v26;
  char v27;
  NSObject *v28;
  uint64_t v29;
  as::server::require_acq *v32;
  char v33[8];
  uint64_t *v34;
  char *v35;
  char v36[8];
  uint64_t *v37;
  _BYTE v38[16];
  _BYTE *v39;
  char v40;
  _BYTE v41[8];
  _QWORD v42[2];
  char v43;
  void *__p[2];
  void **v45;
  char v46;
  _BYTE v47[16];
  uint64_t v48;
  char v49;
  uint8_t buf[4];
  const char *v51;
  __int16 v52;
  _BYTE v53[14];
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  _QWORD v57[2];
  char v58;
  char v59[16];
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v10 = a4;
  v11 = a5;
  v12 = v11;
  if (a3)
  {
    strcpy(v59, "set_property");
    v32 = v10;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[4],char [4],0>((uint64_t)__p, "key");
    v45 = __p;
    v46 = 1;
    v13 = objc_retainAutorelease(v10);
    v35 = (char *)-[as::server::require_acq UTF8String](v13, "UTF8String");
    v48 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v47, &v35);
    v49 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)buf, (uint64_t)__p, 2, 1, 2);
    *(_QWORD *)&v53[2] = buf;
    v53[10] = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>((uint64_t)v38, "value");
    v39 = v38;
    v40 = 1;
    AudioSession::PropertyValueToJSON(v12, (uint64_t)v33);
    v41[0] = v33[0];
    v42[0] = v34;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v33);
    v33[0] = 0;
    v34 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v41);
    v42[1] = v41;
    v43 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v55 + 2, (uint64_t)v38, 2, 1, 2);
    v57[1] = (char *)&v55 + 2;
    v58 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v36, (uint64_t)buf, 2, 1, 2);
    for (i = 0; i != -8; i -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v55 + i * 8 + 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v57[i], *((unsigned __int8 *)&v55 + i * 8 + 2));
    }
    for (j = 0; j != -8; j -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v41[j * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v42[j], v41[j * 8]);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v33);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v34, v33[0]);
    for (k = 0; k != -64; k -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v47[k]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v47[k + 8], v47[k]);
    }
    v18 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v17));
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v19 = *(char *)(a2 + 23);
      v20 = *(_QWORD *)a2;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v36, -1, 0x20u, 0, 0, __p);
      if (v19 >= 0)
        v21 = a2;
      else
        v21 = v20;
      if (SHIBYTE(v45) >= 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      *(_DWORD *)buf = 136316162;
      v51 = "AudioSessionServerImpCommon.mm";
      v52 = 1024;
      *(_DWORD *)v53 = 362;
      *(_WORD *)&v53[4] = 2080;
      *(_QWORD *)&v53[6] = v59;
      v54 = 2080;
      v55 = v21;
      v56 = 2080;
      v57[0] = v22;
      _os_log_impl(&dword_1C895C000, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
      if (SHIBYTE(v45) < 0)
        operator delete(__p[0]);
      v10 = v32;
    }

    v23 = as::server::MXAccessor<as::server::RequireACQ>::SetProperty(a3, a6, v13, v12);
    v24 = as::server::TranslateCMSessionErrorCode((uint64_t)v59, (uint64_t *)a2, 365, v23);
    v25 = -[as::server::require_acq isEqualToString:](v13, "isEqualToString:", *MEMORY[0x1E0D494F8]);
    if ((_DWORD)v24)
      v27 = 0;
    else
      v27 = v25;
    if ((v27 & 1) != 0)
      v24 = as::server::require_acq::AudioSessionServerUpdatePhoneCallDummyPlayerState((as::server::require_acq *)a1, v12, v26);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v36);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v37, v36[0]);
  }
  else
  {
    v24 = 2003329396;
    v28 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v11));
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a2 + 23) >= 0)
        v29 = a2;
      else
        v29 = *(_QWORD *)a2;
      *(_DWORD *)buf = 136315650;
      v51 = "AudioSessionServerImpCommon.mm";
      v52 = 1024;
      *(_DWORD *)v53 = 356;
      *(_WORD *)&v53[4] = 2080;
      *(_QWORD *)&v53[6] = v29;
      _os_log_impl(&dword_1C895C000, v28, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cannot get MXSessionRef for session: %s", buf, 0x1Cu);
    }
  }

  return v24;
}

void sub_1C89A48F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a7);

  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t as::server::MXAccessor<as::server::RequireACQ>::SetProperty(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = a3;
  v6 = a4;
  if (!v6)
    goto LABEL_4;
  objc_opt_class();
  v7 = v6;
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {

LABEL_4:
    v7 = 0;
  }
  v8 = _MXSessionSetProperty();

  return v8;
}

void sub_1C89A4A98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t as::server::require_acq::SetPropertyMX(unsigned int a1, const audit_token_t *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  as::server *v9;
  as::server::ConstAudioSessionInfo *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  unint64_t *v16;
  unint64_t v17;
  as::server::ConstAudioSessionInfo *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  CFTypeRef v22;
  unint64_t *v23;
  unint64_t v24;
  as::server::ConstAudioSessionInfo *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  const void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v47;
  uint64_t v48;
  CFTypeRef v49;
  std::__shared_weak_count *v50;
  CFTypeRef cf;
  std::__shared_weak_count *v52;
  as::server::ConstAudioSessionInfo *v53;
  std::__shared_weak_count *v54;
  std::string buf;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  v9 = (as::server *)as::server::ConstAudioSessionInfoAccessor::ConstAudioSessionInfoAccessor((as::server::ConstAudioSessionInfoAccessor *)&v53, a1, a2, 1);
  v10 = v53;
  if (v53)
  {
    v11 = v54;
    cf = v53;
    v52 = v54;
    if (v54)
    {
      p_shared_owners = (unint64_t *)&v54->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    if (*((char *)v10 + 223) < 0)
      std::string::__init_copy_ctor_external(&buf, *((const std::string::value_type **)v10 + 25), *((_QWORD *)v10 + 26));
    else
      buf = *(std::string *)((char *)v10 + 200);
    if (v11)
    {
      v16 = (unint64_t *)&v11->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v18 = v53;
    if (!v53)
    {
      v47 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v47);
    }
    v19 = v54;
    if (v54)
    {
      v20 = (unint64_t *)&v54->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v18, &cf);
    v22 = cf;
    if (cf)
      CFRelease(cf);
    if (v19)
    {
      v23 = (unint64_t *)&v19->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v25 = v53;
    if (!v53)
    {
      v48 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v48);
    }
    v26 = v54;
    if (v54)
    {
      v27 = (unint64_t *)&v54->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    v30 = (const void *)*((_QWORD *)v25 + 28);
    v29 = (std::__shared_weak_count *)*((_QWORD *)v25 + 29);
    cf = v30;
    v52 = v29;
    if (v29)
    {
      v31 = (unint64_t *)&v29->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    if (v26)
    {
      v33 = (unint64_t *)&v26->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v49 = cf;
    v50 = v52;
    if (v52)
    {
      v35 = (unint64_t *)&v52->__shared_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    v14 = as::server::require_acq::PrivateSetPropertyMX(a1, (uint64_t)&buf, (uint64_t)v22, v7, v8, (uint64_t)&v49);
    v37 = v50;
    if (v50)
    {
      v38 = (unint64_t *)&v50->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v40 = v52;
    if (v52)
    {
      v41 = (unint64_t *)&v52->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
  }
  else
  {
    v14 = 561210739;
    v15 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v9));
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"AudioSessionServerImpCommon.mm";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = 391;
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = a1;
      _os_log_impl(&dword_1C895C000, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cannot get session info for session ID: 0x%x", (uint8_t *)&buf, 0x18u);
    }
  }
  v43 = v54;
  if (v54)
  {
    v44 = (unint64_t *)&v54->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }

  return v14;
}

void sub_1C89A4E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;

  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a13);

  _Unwind_Resume(a1);
}

void sub_1C89A4F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1C89A4FE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C89A5060(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C89A512C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C89A5600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&a13);
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1C89A59B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  uint64_t *v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, uint64_t *);
  v8 = va_arg(va1, _QWORD);

  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)va);
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)va1);
  _Unwind_Resume(a1);
}

void sub_1C89A5BC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C89A5FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,id a24)
{
  void *v24;

  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  as::server::SessionCreationDescription::~SessionCreationDescription(&a24);
  _Unwind_Resume(a1);
}

void as::server::SessionCreationDescription::~SessionCreationDescription(id *this)
{
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)(this + 11));

}

void sub_1C89A6608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t *a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  void *v34;

  if (a34 < 0)
    operator delete(__p);
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&a16);
  _Unwind_Resume(a1);
}

void sub_1C89A6864(_Unwind_Exception *a1)
{
  void *v1;
  os_unfair_lock_s *v2;
  void *v3;
  void *v4;

  v4 = v3;

  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void applesauce::CF::StringRef::~StringRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

void sub_1C89A6930(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1C89A6A1C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1C89A6B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1C89A6C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1C89A6D20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C89A6D90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C89A6E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1C89A6EB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

const void **applesauce::CF::ObjectRef<__SecTask *>::~ObjectRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **applesauce::CF::ObjectRef<opaqueCMSession *>::~ObjectRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void as::server::AudioSessionInfo::DebugState::~DebugState(void **this)
{
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void as::server::ConstAudioSessionInfo::SetClientName(as::server::ConstAudioSessionInfo *this, NSString *a2)
{
  NSString *v2;
  as::server *v3;
  int v4;
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  uint32_t v8;
  NSObject *v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  if (v2)
  {
    v3 = (as::server *)MXSessionSetProperty();
    v4 = (int)v3;
    if ((_DWORD)v3)
    {
      v5 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v3));
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v10 = 136315650;
        v11 = "AudioSessionInfo.mm";
        v12 = 1024;
        v13 = 616;
        v14 = 1024;
        v15 = v4;
        v6 = "%25s:%-5d MXSessionSetProperty for ClientName failed: %d";
        v7 = v5;
        v8 = 24;
LABEL_7:
        _os_log_impl(&dword_1C895C000, v7, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v10, v8);
      }
    }
  }
  else
  {
    v9 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(0));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = 136315394;
      v11 = "AudioSessionInfo.mm";
      v12 = 1024;
      v13 = 619;
      v6 = "%25s:%-5d Invalid client name";
      v7 = v9;
      v8 = 18;
      goto LABEL_7;
    }
  }

}

void sub_1C89A70F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id as::server::ConstAudioSessionInfo::buildClientNameString(as::server::ConstAudioSessionInfo *this)
{
  const char *v1;
  char __str[256];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = (char *)this + 176;
  if (*((char *)this + 199) < 0)
    v1 = *(const char **)v1;
  snprintf(__str, 0x100uLL, "%s", v1);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", __str);
  return (id)objc_claimAutoreleasedReturnValue();
}

void applesauce::CF::DataRef::~DataRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

void as::server::AudioSessionInfo::ResetAllPlayers(as::server::AudioSessionInfo *this)
{
  as::server::ConstAudioSessionInfo *v1;
  __int128 *v2;
  __int128 *v3;
  char *v4;
  __int128 v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  char *v12;
  char *v13;
  char *v14;
  __int128 v15;
  AudioSession **v16;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  NSObject *v22;
  id v23;
  int v24;
  std::string::size_type v25;
  std::string *v26;
  void **v27;
  AudioSession **v28;
  id v30;
  char *v31;
  char *v32;
  void *__p[2];
  char v34;
  char *v35;
  char v36[8];
  uint64_t *v37;
  void *v38;
  char *v39;
  char *v40;
  _BYTE v41[16];
  _BYTE *v42;
  char v43;
  _BYTE v44[16];
  _BYTE *v45;
  char v46;
  _BYTE v47[16];
  _BYTE *v48;
  char v49;
  _BYTE v50[16];
  _BYTE *v51;
  char v52;
  uint8_t buf[4];
  std::string *v54;
  __int16 v55;
  _BYTE v56[10];
  char v57;
  _BYTE v58[16];
  uint64_t v59;
  char v60;
  void *v61[2];
  void **v62;
  char v63;
  _BYTE v64[16];
  _BYTE *v65;
  char v66;
  std::string v67;
  char v68;
  _QWORD v69[3];
  char v70;
  _QWORD v71[3];
  char v72;
  _BYTE v73[16];
  uint64_t v74;
  char v75;
  uint64_t v76;

  v1 = this;
  v76 = *MEMORY[0x1E0C80C00];
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v2 = (__int128 *)*((_QWORD *)this + 57);
  v3 = (__int128 *)*((_QWORD *)this + 58);
  if (v2 != v3)
  {
    v4 = 0;
    do
    {
      if ((*((_BYTE *)v2 + 12) & 0x10) == 0)
      {
        if (v4 >= v40)
        {
          v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)v38) >> 3);
          v7 = v6 + 1;
          if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((v40 - (_BYTE *)v38) >> 3) > v7)
            v7 = 0x5555555555555556 * ((v40 - (_BYTE *)v38) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v40 - (_BYTE *)v38) >> 3) >= 0x555555555555555)
            v8 = 0xAAAAAAAAAAAAAAALL;
          else
            v8 = v7;
          if (v8)
            v9 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<as::server::AudioSessionInfo::PlayerState>>((uint64_t)&v40, v8);
          else
            v9 = 0;
          v10 = &v9[24 * v6];
          v11 = *v2;
          *((_QWORD *)v10 + 2) = *((_QWORD *)v2 + 2);
          *(_OWORD *)v10 = v11;
          v13 = (char *)v38;
          v12 = v39;
          v14 = v10;
          if (v39 != v38)
          {
            do
            {
              v15 = *(_OWORD *)(v12 - 24);
              *((_DWORD *)v14 - 2) = *((_DWORD *)v12 - 2);
              *(_OWORD *)(v14 - 24) = v15;
              v14 -= 24;
              v12 -= 24;
            }
            while (v12 != v13);
            v12 = (char *)v38;
          }
          v4 = v10 + 24;
          v38 = v14;
          v39 = v10 + 24;
          v40 = &v9[24 * v8];
          if (v12)
            operator delete(v12);
        }
        else
        {
          v5 = *v2;
          *((_QWORD *)v4 + 2) = *((_QWORD *)v2 + 2);
          *(_OWORD *)v4 = v5;
          v4 += 24;
        }
        v39 = v4;
      }
      v2 = (__int128 *)((char *)v2 + 24);
    }
    while (v2 != v3);
    v16 = (AudioSession **)v38;
    v28 = (AudioSession **)v4;
    v1 = this;
    if (v38 != v4)
    {
      do
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v61, "type");
        v62 = v61;
        v63 = 1;
        v35 = (char *)AudioSession::ClientPlayerAsCString(*((_DWORD *)v16 + 4));
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v64, &v35);
        v65 = v64;
        v66 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v67, (uint64_t)v61, 2, 1, 2);
        v67.__r_.__value_.__r.__words[2] = (std::string::size_type)&v67;
        v68 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[7],char [7],0>((uint64_t)buf, "player");
        *(_QWORD *)&v56[2] = buf;
        v57 = 1;
        AudioSession::FormatPointerAsHex(*v16, __p);
        v59 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>((uint64_t)v58, (uint64_t)__p);
        v60 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v69, (uint64_t)buf, 2, 1, 2);
        v69[2] = v69;
        v70 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>((uint64_t)v47, "modes");
        v48 = v47;
        v49 = 1;
        AudioSession::ClientActiveModesToString((AudioSession *)*((unsigned int *)v16 + 3));
        v30 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v32 = (char *)objc_msgSend(v30, "UTF8String");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v50, &v32);
        v51 = v50;
        v52 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v71, (uint64_t)v47, 2, 1, 2);
        v71[2] = v71;
        v72 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>((uint64_t)v41, "state");
        v42 = v41;
        v43 = 1;
        v31 = (char *)AudioSession::PlayStateToString(*((_DWORD *)v16 + 2));
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const*,char const*,0>((uint64_t)v44, &v31);
        v45 = v44;
        v46 = 1;
        v74 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v73, (uint64_t)v41, 2, 1, 2);
        v75 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v36, (uint64_t)&v67, 4, 1, 2);
        for (i = 0; i != -128; i -= 32)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v73[i]);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v73[i + 8], v73[i]);
        }
        for (j = 0; j != -64; j -= 32)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v44[j]);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v44[j + 8], v44[j]);
        }
        for (k = 0; k != -64; k -= 32)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v50[k]);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v50[k + 8], v50[k]);
        }

        for (m = 0; m != -64; m -= 32)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v58[m]);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v58[m + 8], v58[m]);
        }
        if (v34 < 0)
          operator delete(__p[0]);
        for (n = 0; n != -64; n -= 32)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v64[n]);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v64[n + 8], v64[n]);
        }
        v22 = MEMORY[0x1E0C81028];
        v23 = MEMORY[0x1E0C81028];
        v1 = this;
        if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
        {
          if (*((char *)this + 223) < 0)
            std::string::__init_copy_ctor_external(&v67, *((const std::string::value_type **)this + 25), *((_QWORD *)this + 26));
          else
            v67 = *(std::string *)((char *)this + 200);
          v24 = SHIBYTE(v67.__r_.__value_.__r.__words[2]);
          v25 = v67.__r_.__value_.__r.__words[0];
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v36, -1, 0x20u, 0, 0, v61);
          if (v24 >= 0)
            v26 = &v67;
          else
            v26 = (std::string *)v25;
          if (SHIBYTE(v62) >= 0)
            v27 = v61;
          else
            v27 = (void **)v61[0];
          *(_DWORD *)buf = 136315394;
          v54 = v26;
          v55 = 2080;
          *(_QWORD *)v56 = v27;
          _os_log_fault_impl(&dword_1C895C000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "I/O state fault, File a radar against 'Audio Toolbox - Session': action: deactivate session: %s. details:%s", buf, 0x16u);
          if (SHIBYTE(v62) < 0)
            operator delete(v61[0]);
          if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v67.__r_.__value_.__l.__data_);
          v22 = MEMORY[0x1E0C81028];
        }

        as::server::AudioSessionInfo::SetPlayerState((uint64_t)this, (uint64_t)*v16, *((_DWORD *)v16 + 3), 0, *((_DWORD *)v16 + 4));
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v36);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v37, v36[0]);
        v16 += 3;
      }
      while (v16 != v28);
    }
  }
  as::server::ConstAudioSessionInfo::DisableMicrophoneMonitor(v1);
  if (v38)
  {
    v39 = (char *)v38;
    operator delete(v38);
  }
}

void sub_1C89A77C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,char a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t as::server::AudioSessionInfo::IsSessionInputMuted(as::server::AudioSessionInfo *this)
{
  unsigned __int8 v2;
  id v3;
  uint64_t i;
  as::server *v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  std::string::size_type v9;
  std::string *v10;
  void *p_p;
  id v12;
  void *v13;
  as::server *v14;
  int v15;
  NSObject *v16;
  int v17;
  NSObject *v18;
  int v19;
  NSObject *v21;
  id v22;
  std::string *v23;
  void *exception;
  void *__p;
  uint64_t *v26;
  char v27;
  _BYTE v28[8];
  uint64_t *v29;
  _BYTE cf[12];
  __int16 v31;
  __int128 v32;
  std::string *v33;
  __int16 v34;
  _QWORD v35[2];
  char v36;
  std::string v37;
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  {
    as::AudioSessionMuteEnabled(void)::enabled = _os_feature_enabled_impl();
  }
  if (!as::AudioSessionMuteEnabled(void)::enabled)
    return *((unsigned __int8 *)this + 424);
  as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(this, cf);
  if (!*(_QWORD *)cf)
  {
    v21 = MEMORY[0x1E0C81028];
    v22 = MEMORY[0x1E0C81028];
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)this + 223) < 0)
        std::string::__init_copy_ctor_external(&v37, *((const std::string::value_type **)this + 25), *((_QWORD *)this + 26));
      else
        v37 = *(std::string *)((char *)this + 200);
      v23 = &v37;
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v23 = (std::string *)v37.__r_.__value_.__r.__words[0];
      *(_DWORD *)cf = 136315650;
      *(_QWORD *)&cf[4] = "AudioSessionInfo.mm";
      v31 = 1024;
      LODWORD(v32) = 707;
      WORD2(v32) = 2080;
      *(_QWORD *)((char *)&v32 + 6) = v23;
      _os_log_impl(&dword_1C895C000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%25s:%-5d  Cannot get MXSessionRef for %s", cf, 0x1Cu);
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v37.__r_.__value_.__l.__data_);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1CAA38B30](exception, "no valid mx session");
  }
  CFRelease(*(CFTypeRef *)cf);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[11],char [11],0>((uint64_t)cf, "properties");
  *(_QWORD *)((char *)&v32 + 2) = cf;
  BYTE10(v32) = 1;
  v3 = (id)*MEMORY[0x1E0D49920];
  AudioSession::PropertyValueToJSON(v3, (uint64_t)&__p);
  BYTE2(v33) = (_BYTE)__p;
  v35[0] = v26;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&__p);
  LOBYTE(__p) = 0;
  v26 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v33 + 2);
  v35[1] = (char *)&v33 + 2;
  v36 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v37, (uint64_t)cf, 2, 1, 2);
  v37.__r_.__value_.__r.__words[2] = (std::string::size_type)&v37;
  v38 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v28, (uint64_t)&v37, 1, 1, 2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v37);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v37.__r_.__value_.__l.__size_, v37.__r_.__value_.__s.__data_[0]);
  for (i = 0; i != -8; i -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v33 + i * 8 + 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v35[i], *((unsigned __int8 *)&v33 + i * 8 + 2));
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&__p);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v26, __p);

  v6 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v5));
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)this + 223) < 0)
      std::string::__init_copy_ctor_external(&v37, *((const std::string::value_type **)this + 25), *((_QWORD *)this + 26));
    else
      v37 = *(std::string *)((char *)this + 200);
    v8 = SHIBYTE(v37.__r_.__value_.__r.__words[2]);
    v9 = v37.__r_.__value_.__r.__words[0];
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v28, -1, 0x20u, 0, 0, &__p);
    v10 = &v37;
    if (v8 < 0)
      v10 = (std::string *)v9;
    if (v27 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)cf = 136316162;
    *(_QWORD *)&cf[4] = "AudioSessionInfo.mm";
    v31 = 1024;
    LODWORD(v32) = 713;
    WORD2(v32) = 2080;
    *(_QWORD *)((char *)&v32 + 6) = "get_properties";
    HIWORD(v32) = 2080;
    v33 = v10;
    v34 = 2080;
    v35[0] = p_p;
    _os_log_impl(&dword_1C895C000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", cf, 0x30u);
    if (v27 < 0)
      operator delete(__p);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
  }

  as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(this, cf);
  v12 = *(id *)cf;
  v13 = v12;
  if (v12)
  {
    CFRelease(v12);
    v37.__r_.__value_.__r.__words[0] = 0;
    v14 = (as::server *)objc_msgSend(v13, "copyPropertyForKey:valueOut:", v3, &v37);
    v15 = (int)v14;
    if ((_DWORD)v14 || (v14 = (as::server *)v37.__r_.__value_.__r.__words[0]) == 0)
    {
      v16 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v14));
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        v17 = *((_DWORD *)this + 2);
        *(_DWORD *)cf = 136315906;
        *(_QWORD *)&cf[4] = "AudioSessionInfo.mm";
        v31 = 1024;
        LODWORD(v32) = 726;
        WORD2(v32) = 1024;
        *(_DWORD *)((char *)&v32 + 6) = v17;
        WORD5(v32) = 1024;
        HIDWORD(v32) = v15;
        _os_log_impl(&dword_1C895C000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to get input mute state for session id: 0x%x with error %d", cf, 0x1Eu);
      }
      v14 = (as::server *)v37.__r_.__value_.__r.__words[0];
    }
    v7 = -[as::server BOOLValue](v14, "BOOLValue");

  }
  else
  {
    v18 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(0));
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v19 = *((_DWORD *)this + 2);
      *(_DWORD *)cf = 136315650;
      *(_QWORD *)&cf[4] = "AudioSessionInfo.mm";
      v31 = 1024;
      LODWORD(v32) = 717;
      WORD2(v32) = 1024;
      *(_DWORD *)((char *)&v32 + 6) = v19;
      _os_log_impl(&dword_1C895C000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to get MX session for session id: 0x%x", cf, 0x18u);
    }
    v7 = 0;
  }

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v29, v28[0]);
  return v7;
}

void sub_1C89A7F7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t as::server::AudioSessionInfo::SetSessionInputMuted(as::server::AudioSessionInfo *this, int a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  id v10;

  {
    as::AudioSessionMuteEnabled(void)::enabled = _os_feature_enabled_impl();
  }
  if (as::AudioSessionMuteEnabled(void)::enabled)
  {
    if (as::server::AudioSessionInfo::IsSessionInputMuted(this) == a2)
    {
      return 0;
    }
    else
    {
      as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(this, &v10);
      v6 = v10;
      v7 = v6;
      if (v6)
      {
        CFRelease(v6);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2 != 0);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v5 = objc_msgSend(v7, "setPropertyForKey:value:", *MEMORY[0x1E0D49920], v8);

      }
      else
      {
        v5 = 0;
      }

    }
  }
  else
  {
    v5 = 0;
    *((_BYTE *)this + 424) = a2;
  }
  return v5;
}

void sub_1C89A81A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void as::server::AudioSessionInfo::SetPickedRouteAtTimeOfInterruption(uint64_t a1, id **a2)
{
  id **v3;
  id *v4;
  id **v5;
  OS::CF *v6;
  uint64_t i;
  as::server *v8;
  NSObject *v9;
  NSObject *v10;
  int v11;
  std::string::size_type v12;
  std::string *v13;
  void *p_p;
  int v15;
  std::string::size_type v16;
  std::string *v17;
  void *v18;
  void *__p;
  uint64_t *v20;
  char v21;
  _BYTE v22[8];
  uint64_t *v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  _BYTE v27[14];
  __int16 v28;
  std::string *v29;
  __int16 v30;
  _QWORD v31[2];
  char v32;
  std::string v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v3 = (id **)(a1 + 336);
  v4 = *a2;
  *a2 = 0;
  v5 = std::unique_ptr<as::server::PickableRoute>::reset[abi:ne180100]((id **)(a1 + 336), v4);
  if (*(_QWORD *)(a1 + 336))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)buf, "cached_route");
    *(_QWORD *)&v27[2] = buf;
    v27[10] = 1;
    v6 = (OS::CF *)applesauce::dispatch::v1::queue::operator*(*v3);
    OS::CF::ToJSON(v6, (uint64_t)&__p);
    BYTE2(v29) = (_BYTE)__p;
    v31[0] = v20;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&__p);
    LOBYTE(__p) = 0;
    v20 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v29 + 2);
    v31[1] = (char *)&v29 + 2;
    v32 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v33, (uint64_t)buf, 2, 1, 2);
    v33.__r_.__value_.__r.__words[2] = (std::string::size_type)&v33;
    v34 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v22, (uint64_t)&v33, 1, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v33);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v33.__r_.__value_.__l.__size_, v33.__r_.__value_.__s.__data_[0]);
    for (i = 0; i != -8; i -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v29 + i * 8 + 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v31[i], *((unsigned __int8 *)&v29 + i * 8 + 2));
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&__p);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v20, __p);
    v9 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v8));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      if (*(char *)(a1 + 223) < 0)
        std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)(a1 + 200), *(_QWORD *)(a1 + 208));
      else
        v33 = *(std::string *)(a1 + 200);
      v11 = SHIBYTE(v33.__r_.__value_.__r.__words[2]);
      v12 = v33.__r_.__value_.__r.__words[0];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v22, -1, 0x20u, 0, 0, &__p);
      v13 = &v33;
      if (v11 < 0)
        v13 = (std::string *)v12;
      if (v21 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      *(_DWORD *)buf = 136316162;
      v25 = "AudioSessionInfo.mm";
      v26 = 1024;
      *(_DWORD *)v27 = 769;
      *(_WORD *)&v27[4] = 2080;
      *(_QWORD *)&v27[6] = "record_picked_route";
      v28 = 2080;
      v29 = v13;
      v30 = 2080;
      v31[0] = p_p;
      _os_log_impl(&dword_1C895C000, v9, OS_LOG_TYPE_INFO, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
      if (v21 < 0)
        operator delete(__p);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
    }

    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22[0]);
  }
  else
  {
    v10 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v5));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      if (*(char *)(a1 + 223) < 0)
        std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)(a1 + 200), *(_QWORD *)(a1 + 208));
      else
        v33 = *(std::string *)(a1 + 200);
      v15 = SHIBYTE(v33.__r_.__value_.__r.__words[2]);
      v16 = v33.__r_.__value_.__r.__words[0];
      v22[0] = 0;
      v23 = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v22, -1, 0x20u, 0, 0, &__p);
      v17 = &v33;
      if (v15 < 0)
        v17 = (std::string *)v16;
      if (v21 >= 0)
        v18 = &__p;
      else
        v18 = __p;
      *(_DWORD *)buf = 136316162;
      v25 = "AudioSessionInfo.mm";
      v26 = 1024;
      *(_DWORD *)v27 = 772;
      *(_WORD *)&v27[4] = 2080;
      *(_QWORD *)&v27[6] = "clear_picked_route";
      v28 = 2080;
      v29 = v17;
      v30 = 2080;
      v31[0] = v18;
      _os_log_impl(&dword_1C895C000, v10, OS_LOG_TYPE_INFO, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
      if (v21 < 0)
        operator delete(__p);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22[0]);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
    }

  }
}

void sub_1C89A85FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t as::server::AudioSessionInfo::CachedStateString@<X0>(as::server::AudioSessionInfo *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  const char *v7;
  size_t v8;
  _QWORD *v9;
  int v10;
  char *v11;
  uint64_t v12;
  char v13;
  char *v14;
  uint64_t v15;
  char v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[10];
  char v23;
  uint64_t v24;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"state: ", 7);
  v5 = *((int *)this + 98);
  if (v5 >= 3)
  {
    v20 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v20);
  }
  v6 = v4;
  v7 = off_1E8205910[v5];
  v8 = strlen(v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
  if (*((_DWORD *)this + 98) == 2)
  {
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)" by ", 4);
    v10 = *((char *)this + 423);
    if (v10 >= 0)
      v11 = (char *)this + 400;
    else
      v11 = (char *)*((_QWORD *)this + 50);
    if (v10 >= 0)
      v12 = *((unsigned __int8 *)this + 423);
    else
      v12 = *((_QWORD *)this + 51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v11, v12);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)", category: ", 12);
  v13 = *((_BYTE *)this + 367);
  if (v13 < 0)
  {
    if (*((_QWORD *)this + 44))
      goto LABEL_12;
LABEL_20:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"(not set/unknown)", 17);
    goto LABEL_21;
  }
  if (!*((_BYTE *)this + 367))
    goto LABEL_20;
LABEL_12:
  if (v13 >= 0)
    v14 = (char *)this + 344;
  else
    v14 = (char *)*((_QWORD *)this + 43);
  if (v13 >= 0)
    v15 = *((unsigned __int8 *)this + 367);
  else
    v15 = *((_QWORD *)this + 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)v14, v15);
LABEL_21:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)", mode: ", 8);
  v16 = *((_BYTE *)this + 391);
  if (v16 < 0)
  {
    if (*((_QWORD *)this + 47))
      goto LABEL_23;
  }
  else if (*((_BYTE *)this + 391))
  {
LABEL_23:
    if (v16 >= 0)
      v17 = (char *)this + 368;
    else
      v17 = (char *)*((_QWORD *)this + 46);
    if (v16 >= 0)
      v18 = *((unsigned __int8 *)this + 391);
    else
      v18 = *((_QWORD *)this + 47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)v17, v18);
    goto LABEL_32;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"(not set/unknown)", 17);
LABEL_32:
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v22, a2);
  v21 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v22[-1] + *(_QWORD *)(v21 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v22[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v23 < 0)
    operator delete((void *)v22[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA38CB0](&v24);
}

void sub_1C89A88D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x1E0DE4FE0] + 64;
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1C89A89AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1CAA38CB0](v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CAA38CB0](a1 + 112);
  return a1;
}

uint64_t as::server::AudioSessionInfo::PlayStateString@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v8;
  _QWORD v9[10];
  char v10;
  uint64_t v11;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v8);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" running inputs, ", 17);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" running outputs, ", 18);
  v5 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" running processors, ", 21);
  v6 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" active nodes", 13);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v9, a1);
  v8 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v9[-1] + *(_QWORD *)(v8 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v9[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA38CB0](&v11);
}

void sub_1C89A8B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void as::server::AudioSessionInfo::DebugStateStrings(as::server::AudioSessionInfo *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  __int128 v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  std::string *v22;
  std::string *v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  void *__p[2];
  std::string::size_type v28;
  std::__split_buffer<std::string> __v;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  as::server::AudioSessionInfo::CachedStateString(this, __p);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 >= v3)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *(_QWORD *)a2) >> 3);
    v7 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - *(_QWORD *)a2) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x555555555555555)
      v9 = 0xAAAAAAAAAAAAAAALL;
    else
      v9 = v7;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
    if (v9)
      v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<as::server::AudioSessionInfo::PlayerState>>(a2 + 16, v9);
    else
      v10 = 0;
    v11 = v10 + v6;
    __v.__first_ = v10;
    __v.__begin_ = v11;
    __v.__end_cap_.__value_ = &v10[v9];
    v12 = *(_OWORD *)__p;
    v11->__r_.__value_.__r.__words[2] = v28;
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
    __p[1] = 0;
    v28 = 0;
    __p[0] = 0;
    __v.__end_ = v11 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
    v13 = *(_QWORD *)(a2 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v14 = SHIBYTE(v28);
    *(_QWORD *)(a2 + 8) = v13;
    if (v14 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v5 = *(_OWORD *)__p;
    *(_QWORD *)(v4 + 16) = v28;
    *(_OWORD *)v4 = v5;
    *(_QWORD *)(a2 + 8) = v4 + 24;
  }
  as::server::AudioSessionInfo::PlayStateString(__p);
  v16 = *(_QWORD *)(a2 + 8);
  v15 = *(_QWORD *)(a2 + 16);
  if (v16 >= v15)
  {
    v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *(_QWORD *)a2) >> 3);
    v19 = v18 + 1;
    if (v18 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *(_QWORD *)a2) >> 3);
    if (2 * v20 > v19)
      v19 = 2 * v20;
    if (v20 >= 0x555555555555555)
      v21 = 0xAAAAAAAAAAAAAAALL;
    else
      v21 = v19;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
    if (v21)
      v22 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<as::server::AudioSessionInfo::PlayerState>>(a2 + 16, v21);
    else
      v22 = 0;
    v23 = v22 + v18;
    __v.__first_ = v22;
    __v.__begin_ = v23;
    __v.__end_cap_.__value_ = &v22[v21];
    v24 = *(_OWORD *)__p;
    v23->__r_.__value_.__r.__words[2] = v28;
    *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
    __p[1] = 0;
    v28 = 0;
    __p[0] = 0;
    __v.__end_ = v23 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
    v25 = *(_QWORD *)(a2 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v26 = SHIBYTE(v28);
    *(_QWORD *)(a2 + 8) = v25;
    if (v26 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v17 = *(_OWORD *)__p;
    *(_QWORD *)(v16 + 16) = v28;
    *(_OWORD *)v16 = v17;
    *(_QWORD *)(a2 + 8) = v16 + 24;
  }
}

void sub_1C89A8DD4(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::string> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a15);
  if (a14 < 0)
    operator delete(__pa);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(__p);
}

uint64_t as::server::AudioSessionInfo::IsInterrupted(as::server::AudioSessionInfo *this)
{
  return *((unsigned __int8 *)this + 313);
}

void as::server::AudioSessionInfo::SetInterrupted(as::server::AudioSessionInfo *this, int a2, const __CFString *a3)
{
  char v4;
  NSObject *v6;
  as::server::AudioSessionInfo *v7;
  int v8;
  const __CFString *v9;
  NSObject *v10;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v4 = a2;
  v15 = *MEMORY[0x1E0C80C00];
  if (!a2 && *((_BYTE *)this + 313) == 1)
  {
    v6 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(this));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      v11 = 136315394;
      v12 = "AudioSessionInfo.mm";
      v13 = 1024;
      v14 = 873;
      _os_log_impl(&dword_1C895C000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d Session interrupt stopped", (uint8_t *)&v11, 0x12u);
    }
    v7 = this;
    v8 = 0;
    v9 = 0;
LABEL_11:
    as::server::AudioSessionInfo::SetCachedActivationState((uint64_t)v7, v8, v9);
    goto LABEL_12;
  }
  if (a2 == 1 && !*((_BYTE *)this + 313))
  {
    v10 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(this));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v11 = 136315394;
      v12 = "AudioSessionInfo.mm";
      v13 = 1024;
      v14 = 876;
      _os_log_impl(&dword_1C895C000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Session interrupt started", (uint8_t *)&v11, 0x12u);
    }
    v7 = this;
    v8 = 2;
    v9 = a3;
    goto LABEL_11;
  }
LABEL_12:
  *((_BYTE *)this + 313) = v4;
}

uint64_t as::server::AudioSessionInfo::SetSiblingPlayerState(uint64_t a1, unint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t **v10;
  _QWORD *i;
  unint64_t v12;
  uint64_t *v13;
  void **v14;
  void **v15;
  _BYTE *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  _BYTE *v27;
  _BYTE *v28;
  int64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v39;
  unint64_t *v40;

  v39 = a2;
  if ((a4 & 2) == 0)
    as::server::AudioSessionInfo::SetSiblingPlayerState();
  if ((a6 & 0x71756575) == 0)
    as::server::AudioSessionInfo::SetSiblingPlayerState();
  v10 = (uint64_t **)(a1 + 480);
  for (i = *(_QWORD **)(a1 + 488); i; i = (_QWORD *)*i)
  {
    v12 = i[4];
    if (v12 <= a2)
    {
      if (v12 >= a2)
        goto LABEL_9;
      ++i;
    }
  }
  v40 = &v39;
  v13 = std::__tree<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::__map_value_compare<void const*,std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::less<void const*>,true>,std::allocator<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>>>::__emplace_unique_key_args<void const*,std::piecewise_construct_t const&,std::tuple<void const* const&>,std::tuple<>>((uint64_t **)(a1 + 480), &v39, (uint64_t)&std::piecewise_construct, (uint64_t **)&v40);
  std::vector<as::server::AudioSessionInfo::PlayerState>::__assign_with_size[abi:ne180100]<as::server::AudioSessionInfo::PlayerState const*,as::server::AudioSessionInfo::PlayerState const*>((char *)v13 + 40, 0, 0, 0);
LABEL_9:
  v14 = (void **)std::map<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>::at((uint64_t)v10, &v39);
  v15 = v14;
  v16 = *v14;
  v17 = (char *)v14[1];
  if (*v14 == v17)
  {
LABEL_13:
    if (!a5)
      goto LABEL_36;
    v19 = (uint64_t)(v14 + 2);
    v20 = (char *)v15[2];
    if (v17 >= v20)
    {
      v22 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3);
      if (v22 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      v23 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v16) >> 3);
      v24 = 2 * v23;
      if (2 * v23 <= v22 + 1)
        v24 = v22 + 1;
      if (v23 >= 0x555555555555555)
        v25 = 0xAAAAAAAAAAAAAAALL;
      else
        v25 = v24;
      if (v25)
        v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<as::server::AudioSessionInfo::PlayerState>>(v19, v25);
      else
        v26 = 0;
      v30 = &v26[24 * v22];
      v31 = &v26[24 * v25];
      *(_QWORD *)v30 = a3;
      *((_DWORD *)v30 + 2) = a5;
      *((_DWORD *)v30 + 3) = a4;
      *((_DWORD *)v30 + 4) = a6;
      v17 = v30 + 24;
      v33 = (char *)*v15;
      v32 = (char *)v15[1];
      if (v32 != *v15)
      {
        do
        {
          v34 = *(_OWORD *)(v32 - 24);
          *((_DWORD *)v30 - 2) = *((_DWORD *)v32 - 2);
          *(_OWORD *)(v30 - 24) = v34;
          v30 -= 24;
          v32 -= 24;
        }
        while (v32 != v33);
        v32 = (char *)*v15;
      }
      *v15 = v30;
      v15[1] = v17;
      v15[2] = v31;
      if (v32)
        operator delete(v32);
    }
    else
    {
      *(_QWORD *)v17 = a3;
      *((_DWORD *)v17 + 2) = a5;
      *((_DWORD *)v17 + 3) = a4;
      *((_DWORD *)v17 + 4) = a6;
      v17 += 24;
    }
  }
  else
  {
    v18 = 0;
    while (*(_QWORD *)&v16[v18] != a3)
    {
      v18 += 24;
      if (&v16[v18] == v17)
        goto LABEL_13;
    }
    if (a5)
    {
      v21 = &v16[v18];
      *((_DWORD *)v21 + 2) = a5;
      *((_DWORD *)v21 + 3) = a4;
      goto LABEL_36;
    }
    v27 = &v16[v18];
    v28 = &v16[v18 + 24];
    v29 = v17 - v28;
    if (v17 != v28)
      memmove(&v16[v18], v28, v29 - 4);
    v17 = &v27[v29];
  }
  v15[1] = v17;
LABEL_36:
  v35 = (char *)*v15;
  if (*v15 == v17)
  {
    v36 = 0;
  }
  else
  {
    LODWORD(v36) = 0;
    do
    {
      if (*((_DWORD *)v35 + 2) == 1)
        v36 = (v36 + 1);
      else
        v36 = v36;
      v35 += 24;
    }
    while (v35 != v17);
  }
  v40 = &v39;
  v37 = std::__tree<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::__map_value_compare<void const*,std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::less<void const*>,true>,std::allocator<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>>>::__emplace_unique_key_args<void const*,std::piecewise_construct_t const&,std::tuple<void const* const&>,std::tuple<>>(v10, &v39, (uint64_t)&std::piecewise_construct, (uint64_t **)&v40);
  if (v37[5] == v37[6])
    std::__tree<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::__map_value_compare<void const*,std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::less<void const*>,true>,std::allocator<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>>>::__erase_unique<void const*>((uint64_t)v10, &v39);
  return v36;
}

_QWORD *std::map<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>::at(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
LABEL_8:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  v3 = *a2;
  while (1)
  {
    while (1)
    {
      v4 = v2[4];
      if (v3 >= v4)
        break;
      v2 = (_QWORD *)*v2;
      if (!v2)
        goto LABEL_8;
    }
    if (v4 >= v3)
      return v2 + 5;
    v2 = (_QWORD *)v2[1];
    if (!v2)
      goto LABEL_8;
  }
}

void **std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::push_back[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  void **result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  void *v22[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    v12 = ((uint64_t)v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v14 = v5 - *a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v22[4] = result;
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>((uint64_t)result, v15);
    v17 = &v16[16 * v12];
    v22[0] = v16;
    v22[1] = v17;
    v22[3] = &v16[16 * v18];
    v19 = *a2;
    *(_OWORD *)v17 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 16);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22[2] = v17 + 16;
    std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::__swap_out_circular_buffer(a1, v22);
    v11 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::weak_ptr<as::server::AudioSessionInfo>>::~__split_buffer(v22);
  }
  else
  {
    *v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    v7[1] = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 16);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v11;
  return result;
}

void sub_1C89A939C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::weak_ptr<as::server::AudioSessionInfo>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void as::server::AudioSessionInfo::DeferPropertyChangeCallback(as::server::AudioSessionInfo *this, NSString *a2, NSDictionary *a3, int a4)
{
  NSString *v7;
  NSDictionary *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSString *v12;
  void *v13;
  NSDictionary *v14;
  NSDictionary *v15;
  void *v16;
  id v17;
  NSString *v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  if (*((_QWORD *)this + 32))
  {
    std::mutex::lock((std::mutex *)((char *)this + 568));
    v9 = (char *)this + 544;
    v10 = *((_QWORD *)this + 70);
    if (a4)
    {
      v11 = *((_QWORD *)this + 69);
      v12 = v7;
      while (1)
      {
        if ((char *)v11 == v9)
        {

          goto LABEL_10;
        }
        objc_msgSend(*(id *)(v11 + 16), "objectForKey:", v12);
        v13 = (void *)objc_claimAutoreleasedReturnValue();

        if (v13)
          break;
        v11 = *(_QWORD *)(v11 + 8);
      }

      if ((char *)v11 != v9)
        std::list<NSDictionary * {__strong}>::erase((uint64_t)this + 544, (uint64_t *)v11);
    }
LABEL_10:
    if (v8)
      v14 = v8;
    else
      v14 = (NSDictionary *)objc_alloc_init(MEMORY[0x1E0C99D80]);
    v15 = v14;
    v18 = v7;
    v19[0] = v14;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v19, &v18, 1);
    v17 = (id)objc_claimAutoreleasedReturnValue();
    std::list<NSDictionary * {__strong}>::push_back((uint64_t *)this + 68, &v17);

    std::mutex::unlock((std::mutex *)((char *)this + 568));
    if (!v10)
    {
      objc_msgSend(*((id *)this + 32), "remoteObjectProxy");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "pingClient:", *((unsigned int *)this + 2));

    }
  }

}

void sub_1C89A953C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  void *v9;
  void *v10;
  std::mutex *v11;

  std::mutex::unlock(v11);

  _Unwind_Resume(a1);
}

uint64_t as::server::ConstAudioSessionInfo::PrintObject(as::server::ConstAudioSessionInfo *this, __sFILE *a2)
{
  const char *v2;

  v2 = (char *)this + 176;
  if (*((char *)this + 199) < 0)
    v2 = *(const char **)v2;
  return fprintf(a2, "<AudioSessionInfo@%p %s>", this, v2);
}

BOOL TOpaqueObject<as::server::AudioSessionInfo,as::server::OpaqueAudioSession *,BaseOpaqueObject>::isa(uint64_t a1, void *a2)
{
  return a2 == &TOpaqueRTTI<as::server::AudioSessionInfo>::sRTTI || a2 == &BaseOpaqueObject::sBaseRTTI;
}

void sub_1C89A9690(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1CAA38D28](v1, 0xC0C40307D0248);
  _Unwind_Resume(a1);
}

void std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  std::__shared_weak_count *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 16)
  {
    v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
  }
  a1[1] = v2;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<as::server::AudioSessionInfo::PlayerState>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

void OS::CF::String::~String(OS::CF::String *this)
{
  OS::CF::UntypedObject::~UntypedObject(this);
  JUMPOUT(0x1CAA38D28);
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n)
{
  std::vector<char>::pointer end;
  char *v5;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v5 = &end[__n];
    bzero(end, __n);
    this->__end_ = v5;
  }
  return this;
}

void sub_1C89A9820(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::string *v4;
  std::string *begin;
  std::string *end;
  std::string *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100]((uint64_t)this, (void **)&this->__begin_->__r_.__value_.__l.__data_);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

char *std::vector<as::server::AudioSessionInfo::PlayerState>::__assign_with_size[abi:ne180100]<as::server::AudioSessionInfo::PlayerState const*,as::server::AudioSessionInfo::PlayerState const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  uint64_t v17;
  size_t v18;
  void *v19;
  char *v20;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v11;
    result = std::vector<as::server::AudioSessionInfo::PlayerState>::__vallocate[abi:ne180100](v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v17 - 4;
      v19 = v9;
      v20 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 3) >= a4)
    goto LABEL_16;
  v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9 - 4);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v17 - 4;
    v19 = v9;
    v20 = v16;
LABEL_18:
    result = (char *)memmove(v19, v20, v18);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

char *std::vector<as::server::AudioSessionInfo::PlayerState>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<as::server::AudioSessionInfo::PlayerState>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::weak_ptr<as::server::AudioSessionInfo>>,std::reverse_iterator<std::weak_ptr<as::server::AudioSessionInfo>*>,std::reverse_iterator<std::weak_ptr<as::server::AudioSessionInfo>*>,std::reverse_iterator<std::weak_ptr<as::server::AudioSessionInfo>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = (_OWORD *)(a7 - 16);
    do
    {
      v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((_QWORD *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<as::server::AudioSessionInfo>>,std::reverse_iterator<std::weak_ptr<as::server::AudioSessionInfo>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<as::server::AudioSessionInfo>>,std::reverse_iterator<std::weak_ptr<as::server::AudioSessionInfo>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<as::server::AudioSessionInfo>>,std::reverse_iterator<std::weak_ptr<as::server::AudioSessionInfo>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<as::server::AudioSessionInfo>>,std::reverse_iterator<std::weak_ptr<as::server::AudioSessionInfo>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    v1 += 16;
  }
}

void std::__split_buffer<std::weak_ptr<as::server::AudioSessionInfo>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v4;

  v2 = *(_QWORD *)(a1 + 8);
  v1 = *(_QWORD *)(a1 + 16);
  while (v1 != v2)
  {
    *(_QWORD *)(a1 + 16) = v1 - 16;
    v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_weak(v4);
      v1 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

__int128 *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::weak_ptr<as::server::AudioSessionInfo> *,std::weak_ptr<as::server::AudioSessionInfo> *,std::weak_ptr<as::server::AudioSessionInfo> *>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  __int128 v7;
  std::__shared_weak_count *v8;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      v7 = *v5;
      *(_QWORD *)v5 = 0;
      *((_QWORD *)v5 + 1) = 0;
      v8 = *(std::__shared_weak_count **)(a4 + 8);
      *(_OWORD *)a4 = v7;
      if (v8)
        std::__shared_weak_count::__release_weak(v8);
      ++v5;
      a4 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void std::__shared_ptr_emplace<as::server::LocalMXPropertyCache>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E82058E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<as::server::LocalMXPropertyCache>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E82058E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA38D28);
}

uint64_t *std::__tree<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::__map_value_compare<void const*,std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::less<void const*>,true>,std::allocator<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>>>::__emplace_unique_key_args<void const*,std::piecewise_construct_t const&,std::tuple<void const* const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x40uLL);
    v12 = **a4;
    v11[6] = 0;
    v11[7] = 0;
    v11[4] = v12;
    v11[5] = 0;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t std::__tree<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::__map_value_compare<void const*,std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::less<void const*>,true>,std::allocator<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>>>::__erase_unique<void const*>(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = (uint64_t *)(a1 + 8);
  do
  {
    v5 = v2[4];
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4])
    return 0;
  std::__tree<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::__map_value_compare<void const*,std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::less<void const*>,true>,std::allocator<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>>>::erase((uint64_t **)a1, v4);
  return 1;
}

uint64_t *std::__tree<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::__map_value_compare<void const*,std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>,std::less<void const*>,true>,std::allocator<std::__value_type<void const*,std::vector<as::server::AudioSessionInfo::PlayerState>>>>::erase(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;
  void *v4;

  v3 = std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::__remove_node_pointer(a1, a2);
  v4 = (void *)a2[5];
  if (v4)
  {
    a2[6] = (uint64_t)v4;
    operator delete(v4);
  }
  operator delete(a2);
  return v3;
}

id as::server::BundleIdentifierForPID(as::server *this)
{
  void *v1;
  void *v2;
  void *v3;

  as::server::GetProcessHandleForPID(this);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "bundle");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "identifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void sub_1C89AA020(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id as::server::GetProcessHandleForPID(as::server *this)
{
  int v1;
  void *v2;
  void *v3;
  as::server *v4;
  as::server *v5;
  NSObject *v6;
  NSObject *v7;
  id v9;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v1 = (int)this;
  v16 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D87D70], "identifierWithPid:", this);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    v9 = 0;
    objc_msgSend(MEMORY[0x1E0D87D68], "handleForIdentifier:error:", v2, &v9);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = (as::server *)v9;
    v5 = v4;
    if (v4)
    {
      v6 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v4));
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v11 = "RBS_Utility.mm";
        v12 = 1024;
        v13 = 32;
        v14 = 1024;
        v15 = v1;
        _os_log_impl(&dword_1C895C000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to get process handle for clientPID %d", buf, 0x18u);
      }
    }

  }
  else
  {
    v7 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(0));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v11 = "RBS_Utility.mm";
      v12 = 1024;
      v13 = 25;
      v14 = 1024;
      v15 = v1;
      _os_log_impl(&dword_1C895C000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to get process identifier for clientPID %d", buf, 0x18u);
    }
    v3 = 0;
  }

  return v3;
}

void sub_1C89AA1DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void AudioSession::GetCMSessionErrorString(AudioSession *this@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  std::string *v4;
  __int128 v5;
  std::string v6;

  switch(this)
  {
    case 0xFFFFCD43:
      v3 = "Operation denied. Siri is recording";
      break;
    case 0xFFFFCD44:
      v3 = "Missing entitlement";
      break;
    case 0xFFFFCD45:
      v3 = "Operation ignored";
      break;
    case 0xFFFFCD46:
      v3 = "Not routable";
      break;
    case 0xFFFFCD47:
      v3 = "Operation denied. Cannot interrupt others";
      break;
    case 0xFFFFCD48:
LABEL_8:
      v3 = "Unrecognized property";
      break;
    case 0xFFFFCD49:
      v3 = "Insufficient priority";
      break;
    case 0xFFFFCD4A:
      v3 = "Allocation failed";
      break;
    case 0xFFFFCD4B:
LABEL_9:
      v3 = "Invalid parameter";
      break;
    case 0xFFFFCD4C:
LABEL_10:
      v3 = "Missing required parameter";
      break;
    default:
      switch(this)
      {
        case 0xFFFFC2B9:
          v3 = "Operation Failed";
          goto LABEL_25;
        case 0xFFFFC2BA:
LABEL_11:
          v3 = "Operation denied. Cannot start playing";
          goto LABEL_25;
        case 0xFFFFC2BB:
          v3 = "Operation Denied";
          goto LABEL_25;
        case 0xFFFFC2BC:
          goto LABEL_8;
        case 0xFFFFC2BD:
LABEL_12:
          std::to_string(&v6, (int)this);
          v4 = std::string::insert(&v6, 0, "Unknown error code: ", 0x14uLL);
          v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
          a2[2] = *((_QWORD *)&v4->__r_.__value_.__l + 2);
          *(_OWORD *)a2 = v5;
          v4->__r_.__value_.__l.__size_ = 0;
          v4->__r_.__value_.__r.__words[2] = 0;
          v4->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v6.__r_.__value_.__l.__data_);
          return;
        case 0xFFFFC2BE:
          goto LABEL_10;
        case 0xFFFFC2BF:
          goto LABEL_9;
        case 0xFFFFC2C0:
          v3 = "Memory Allocation Failed";
          goto LABEL_25;
        default:
          switch(this)
          {
            case 0xFFFFBDA9:
              v3 = "Operation denied. IO currently running";
              goto LABEL_25;
            case 0xFFFFBDAA:
              v3 = "Budget not available";
              goto LABEL_25;
            case 0xFFFFBDAB:
              v3 = "Operation denied. Cannot start recording";
              goto LABEL_25;
            case 0xFFFFBDAC:
              goto LABEL_11;
            default:
              goto LABEL_12;
          }
      }
  }
LABEL_25:
  std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

void sub_1C89AA3C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<as::server::DeviceLatencyPoll::Impl,std::allocator<as::server::DeviceLatencyPoll::Impl>,unsigned int &,std::function<void ()(unsigned long long)> &,void>@<X0>(int *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x50uLL);
  result = std::__shared_ptr_emplace<as::server::DeviceLatencyPoll::Impl>::__shared_ptr_emplace[abi:ne180100]<unsigned int &,std::function<void ()(unsigned long long)> &,std::allocator<as::server::DeviceLatencyPoll::Impl>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1C89AA430(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<as::server::DeviceLatencyPoll::Impl>::__shared_ptr_emplace[abi:ne180100]<unsigned int &,std::function<void ()(unsigned long long)> &,std::allocator<as::server::DeviceLatencyPoll::Impl>,0>(_QWORD *a1, int *a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E8205988;
  std::construct_at[abi:ne180100]<as::server::DeviceLatencyPoll::Impl,unsigned int &,std::function<void ()(unsigned long long)> &,as::server::DeviceLatencyPoll::Impl*>((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1C89AA478(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<as::server::DeviceLatencyPoll::Impl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8205988;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<as::server::DeviceLatencyPoll::Impl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8205988;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA38D28);
}

uint64_t std::construct_at[abi:ne180100]<as::server::DeviceLatencyPoll::Impl,unsigned int &,std::function<void ()(unsigned long long)> &,as::server::DeviceLatencyPoll::Impl*>(uint64_t a1, int *a2, uint64_t a3)
{
  int v4;
  _QWORD *v5;
  uint64_t v6;
  _BYTE v8[24];
  _BYTE *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  std::__function::__value_func<void ()(unsigned long long)>::__value_func[abi:ne180100]((uint64_t)v8, a3);
  as::server::DeviceLatencyPoll::Impl::Impl(a1, v4, (uint64_t)v8);
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

void sub_1C89AA578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<void ()(unsigned long long)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1C89AA6A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1C89AA728(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id as::server::TranslateSetter_HostProcessAttribution(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id obj;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD v19[2];
  _QWORD v20[2];
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  obj = v3;
  v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v15, v21, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v16;
    v7 = *MEMORY[0x1E0D49E00];
    v8 = *MEMORY[0x1E0D49DF8];
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v16 != v6)
          objc_enumerationMutation(obj);
        v10 = *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * v9);
        v19[1] = v8;
        v20[0] = v10;
        v19[0] = v7;
        objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", a2, 32);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v20[1] = v11;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v20, v19, 2);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "addObject:", v12);

        ++v9;
      }
      while (v5 != v9);
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v15, v21, 16);
    }
    while (v5);
  }

  return v4;
}

void sub_1C89AA8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void as::server::SetAudioControlQueue(id obj)
{
  objc_storeStrong((id *)&gAudioControlQueue, obj);
}

id as::server::GetActivationQueue(as::server *this)
{
  unsigned __int8 v1;
  void *__p[2];
  char v4;

  {
    std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.coreaudio.ActivationQueue");
    as::CreateFixedPriorityDispatchQueue((const void **)__p, QOS_CLASS_USER_INTERACTIVE, &as::server::GetActivationQueue(void)::callbackQueue);
    if (v4 < 0)
      operator delete(__p[0]);
  }
  applesauce::dispatch::v1::queue::operator*(&as::server::GetActivationQueue(void)::callbackQueue);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_1C89AA9C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t as::server::GetVirtualAudioPlugin(as::server *this, unsigned int *a2)
{
  uint64_t result;
  unsigned int v4;
  UInt32 ioDataSize;
  const __CFString **outData;
  int v7;
  as::server *v8;
  int v9;
  AudioObjectPropertyAddress inAddress;
  const __CFString *v11;

  v11 = CFSTR("com.apple.audio.CoreAudio.VirtualAudio");
  ioDataSize = 32;
  *(_QWORD *)&inAddress.mSelector = 0x676C6F6270696269;
  inAddress.mElement = 0;
  outData = &v11;
  v7 = 8;
  v8 = this;
  v9 = 4;
  LODWORD(result) = AudioObjectGetPropertyData(1u, &inAddress, 0, 0, &ioDataSize, &outData);
  if (*(_DWORD *)this)
    v4 = 0;
  else
    v4 = -50;
  if ((_DWORD)result)
    return result;
  else
    return v4;
}

uint64_t as::server::require_acq::MuteSessionInput(as::server::require_acq *this, const audit_token_t *a2, audit_token_t *a3, NSNumber *a4)
{
  audit_token_t *v6;
  as::server *v7;
  uint64_t v8;
  as::server::AudioSessionInfo *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  as::server::AudioSessionInfo *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  int IsSessionInputMuted;
  unint64_t *v23;
  unint64_t v24;
  _BOOL4 v25;
  as::server::AudioSessionInfo *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  id v30;
  unint64_t v31;
  unsigned __int8 v32;
  as::server::AudioSessionInfo *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  as::server::AudioSessionInfo *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  as::server *v45;
  NSObject *v46;
  const char *v47;
  as::server::AudioSessionInfo *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  as::server::AudioSessionInfo *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  as::server::AudioSessionInfo *v68;
  std::__shared_weak_count *v69;
  char v70;
  _BYTE v71[18];
  __int16 v72;
  const char *v73;
  __int16 v74;
  uint64_t v75;
  _BYTE buf[24];
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  if (v6)
  {
    v7 = (as::server *)as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor((as::server::AudioSessionInfoAccessor *)&v68, this, a2, 1);
    if (!v68)
    {
      v16 = 561210739;
      v17 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v7));
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "AudioSessionServerImp.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 237;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = (_DWORD)this;
        _os_log_impl(&dword_1C895C000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot get session info for session ID: 0x%x", buf, 0x18u);
      }
      goto LABEL_84;
    }
    v8 = -[audit_token_t BOOLValue](v6, "BOOLValue");
    v9 = v68;
    if (!v68)
    {
      v61 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v61);
    }
    v10 = v8;
    v11 = v69;
    if (v69)
    {
      p_shared_owners = (unint64_t *)&v69->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      v14 = *((unsigned int *)v9 + 22);
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v14 = *((unsigned int *)v68 + 22);
    }
    v18 = v68;
    if (!v68)
    {
      v62 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v62);
    }
    v19 = v69;
    *(_QWORD *)buf = v68;
    *(_QWORD *)&buf[8] = v69;
    if (v69)
    {
      v20 = (unint64_t *)&v69->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    IsSessionInputMuted = as::server::AudioSessionInfo::IsSessionInputMuted(v18);
    if (v19)
    {
      v23 = (unint64_t *)&v19->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v25 = IsSessionInputMuted != 0;
    v26 = v68;
    if (!v68)
    {
      v63 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v63);
    }
    v27 = v69;
    if (v69)
    {
      v28 = (unint64_t *)&v69->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
      v30 = *((id *)v26 + 12);
      do
        v31 = __ldaxr(v28);
      while (__stlxr(v31 - 1, v28));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    else
    {
      v30 = *((id *)v68 + 12);
    }
    {
      as::AudioSessionMuteEnabled(void)::enabled = _os_feature_enabled_impl();
    }
    if (!as::AudioSessionMuteEnabled(void)::enabled)
    {
      v39 = v68;
      if (!v68)
      {
        v65 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v65);
      }
      v40 = v69;
      *(_QWORD *)buf = v68;
      *(_QWORD *)&buf[8] = v69;
      if (v69)
      {
        v41 = (unint64_t *)&v69->__shared_owners_;
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      as::server::AudioSessionInfo::SetSessionInputMuted(v39, v10);
      if (v40)
      {
        v43 = (unint64_t *)&v40->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      goto LABEL_54;
    }
    v33 = v68;
    if (!v68)
    {
      v64 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v64);
    }
    v34 = v69;
    if (v69)
    {
      v35 = (unint64_t *)&v69->__shared_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      v37 = *((_DWORD *)v33 + 70);
      do
        v38 = __ldaxr(v35);
      while (__stlxr(v38 - 1, v35));
      if (v38)
      {
        if (!v37)
          goto LABEL_73;
LABEL_54:
        if (v68)
        {
          os_unfair_lock_unlock((os_unfair_lock_t)v68 + 158);
          v70 = 0;
        }
        buf[0] = 1;
        *(_DWORD *)&buf[4] = 3974;
        *(_OWORD *)&buf[8] = this;
        v77 = 0;
        v78 = 0;
        kdebug_trace();
        v45 = (as::server *)objc_msgSend(v30, "muteSessionInput:clientPID:muted:", this, v14, v10);
        v16 = (uint64_t)v45;
        if ((_DWORD)v45)
        {
          v46 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v45));
          if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
          {
            v47 = "unmuted";
            *(_QWORD *)&v71[4] = "AudioSessionServerImp.mm";
            *(_WORD *)&v71[12] = 1024;
            *(_DWORD *)&v71[14] = 264;
            *(_DWORD *)v71 = 136315906;
            if ((_DWORD)v10)
              v47 = "muted";
            v72 = 2080;
            v73 = v47;
            v74 = 2048;
            v75 = (int)v16;
            _os_log_impl(&dword_1C895C000, v46, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to set session input: %s, err: %ld", v71, 0x26u);
          }
          if (!v68 || (os_unfair_lock_lock((os_unfair_lock_t)v68 + 158), v70 = 1, (v48 = v68) == 0))
          {
            v67 = _os_crash();
            as::server::require_acq::AudioSessionServerSetClientPlayState(v67);
          }
          v49 = v69;
          *(_QWORD *)v71 = v68;
          *(_QWORD *)&v71[8] = v69;
          if (v69)
          {
            v50 = (unint64_t *)&v69->__shared_owners_;
            do
              v51 = __ldxr(v50);
            while (__stxr(v51 + 1, v50));
          }
          as::server::AudioSessionInfo::SetSessionInputMuted(v48, v25);
          if (v49)
          {
            v52 = (unint64_t *)&v49->__shared_owners_;
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 - 1, v52));
            if (!v53)
            {
              ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
              std::__shared_weak_count::__release_weak(v49);
            }
          }
        }
        as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)buf);
        goto LABEL_83;
      }
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
      if (v37)
        goto LABEL_54;
    }
    else if (*((_DWORD *)v68 + 70))
    {
      goto LABEL_54;
    }
LABEL_73:
    v54 = v68;
    if (!v68)
    {
      v66 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v66);
    }
    v55 = v69;
    *(_QWORD *)buf = v68;
    *(_QWORD *)&buf[8] = v69;
    if (v69)
    {
      v56 = (unint64_t *)&v69->__shared_owners_;
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
    }
    as::server::AudioSessionInfo::SetSessionInputMuted(v54, v10);
    if (v55)
    {
      v58 = (unint64_t *)&v55->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    v16 = 0;
LABEL_83:

LABEL_84:
    as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)&v68);
    goto LABEL_85;
  }
  v16 = 4294967246;
LABEL_85:

  return v16;
}

void sub_1C89AB09C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);

  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)va);
  _Unwind_Resume(a1);
}

uint64_t as::server::forbid_acq::IsAudioAppAllInputSessionsMuted(as::server::forbid_acq *this)
{
  int v1;
  os_unfair_lock_s *v2;
  as::server *v3;
  id v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  as::server *v12;
  std::__shared_weak_count *v13;
  uint8_t buf[4];
  _BYTE v15[14];
  __int16 v16;
  int v17;
  uint64_t v18;

  v1 = (int)this;
  v18 = *MEMORY[0x1E0C80C00];
  v2 = (os_unfair_lock_s *)as::server::LegacySessionManager::Instance(this);
  as::server::LegacySessionManager::FindAudioApplicationForSession(v2, v1, &v12);
  v3 = v12;
  if (v12)
  {
    as::server::AudioApplicationInfo::GetProperty((uint64_t)v12, CFSTR("InputMute"), 1634744890, (uint64_t)buf);
    v4 = *(id *)&v15[4];
    v5 = v4;
    if (!*(_DWORD *)buf && v4)
    {
      v6 = objc_msgSend(v4, "BOOLValue");

      goto LABEL_9;
    }

  }
  v7 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v3));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)v15 = "AudioSessionServerImp.mm";
    *(_WORD *)&v15[8] = 1024;
    *(_DWORD *)&v15[10] = 344;
    v16 = 1024;
    v17 = v1;
    _os_log_impl(&dword_1C895C000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d failed to get audio app input muted state for session: 0x%x", buf, 0x18u);
  }
  v6 = 0;
LABEL_9:
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v6;
}

void sub_1C89AB2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;

  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t as::server::forbid_acq::MuteSessionInputsForAudioApp(as::server::forbid_acq *this, void *a2, NSNumber *a3)
{
  int v3;
  as::server::LegacySessionManager *v4;
  as::server::LegacySessionManager *v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  os_unfair_lock_s *v12;
  std::__shared_weak_count *v13;

  v3 = (int)this;
  v4 = a2;
  v5 = v4;
  if (v4)
  {
    v6 = (os_unfair_lock_s *)as::server::LegacySessionManager::Instance(v4);
    as::server::LegacySessionManager::FindAudioApplicationForSession(v6, v3, &v12);
    if (v12)
      v7 = as::server::AudioApplicationInfo::SetProperty(v12, CFSTR("InputMute"), v5);
    else
      v7 = 561210739;
    v8 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  else
  {
    v7 = 4294967246;
  }

  return v7;
}

void sub_1C89AB3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

id as::server::forbid_acq::SpatialPreferences(void *a1, uint64_t a2, const audit_token_t *a3)
{
  id v5;
  as::server::ConstAudioSessionInfo *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  id v11;
  unint64_t *v12;
  unint64_t v13;
  as::server::ConstAudioSessionInfo *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  const void *v18;
  unint64_t v19;
  void *v20;
  as::server::ConstAudioSessionInfo *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  as::server::ConstAudioSessionInfo *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  char v39;
  CFTypeRef cf;
  as::server::ConstAudioSessionInfo *v41;
  std::__shared_weak_count *v42;

  v5 = a1;
  if (!v5)
  {
    v33 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v33);
  }
  as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor((as::server::AudioSessionInfoAccessor *)&v41, a2, a3, 1);
  v6 = v41;
  if (!v41)
  {
    v34 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v34);
  }
  v7 = v42;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = *((unsigned __int8 *)v6 + 448);
  if (*((_BYTE *)v6 + 448))
  {
    v11 = *((id *)v6 + 55);
    if (!v7)
      goto LABEL_13;
  }
  else
  {
    v11 = 0;
    if (!v7)
      goto LABEL_13;
  }
  v12 = (unint64_t *)&v7->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
  {
LABEL_13:
    if (v10)
      goto LABEL_45;
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (v10)
    goto LABEL_45;
LABEL_14:
  v14 = v41;
  if (!v41)
  {
    v35 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v35);
  }
  v15 = v42;
  if (v42)
  {
    v16 = (unint64_t *)&v42->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v14, &cf);
    do
      v19 = __ldaxr(v16);
    while (__stlxr(v19 - 1, v16));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  else
  {
    as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v41, &cf);
  }
  as::server::forbid_acq::CopyCMSessionAudioMode((as::server::forbid_acq *)cf, v18);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  as::server::GetSpatialPreferences(v5, a2, v20, (uint64_t)&v38);
  v21 = v41;
  if (!v41)
  {
    v36 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v36);
  }
  v22 = v42;
  if (v42)
  {
    v23 = (unint64_t *)&v42->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  as::server::AudioSessionInfo::SetSpatialPreferences((uint64_t)v21, v38);
  if (v22)
  {
    v25 = (unint64_t *)&v22->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v27 = v41;
  if (!v41)
  {
    v37 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v37);
  }
  v28 = v42;
  if (v42)
  {
    v29 = (unint64_t *)&v42->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
    *((_BYTE *)v27 + 432) = v39;
    do
      v31 = __ldaxr(v29);
    while (__stlxr(v31 - 1, v29));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  else
  {
    *((_BYTE *)v41 + 432) = v39;
  }
  v11 = v38;

  if (cf)
    CFRelease(cf);
LABEL_45:
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)&v41);

  return v11;
}

void sub_1C89AB67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, const void *a13, os_unfair_lock_s *a14)
{
  void *v14;
  void *v15;

  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  applesauce::CF::ObjectRef<void const*>::~ObjectRef(&a13);
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor(&a14);

  _Unwind_Resume(a1);
}

void as::server::forbid_acq::GetPropertyLocal_Embedded(as::server::forbid_acq *this@<X0>, audit_token_t *a2@<X2>, audit_token_t *a3@<X1>, uint64_t a4@<X8>)
{
  audit_token_t *v8;
  as::server *v9;
  os_unfair_lock_s *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  os_unfair_lock_s *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  id v19;
  unint64_t v20;
  NSObject *v21;
  os_unfair_lock_s *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int os_unfair_lock_opaque_low;
  unint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  id v30;
  unint64_t v31;
  void *v32;
  unsigned __int8 v33;
  unsigned int *v34;
  OSStatus VirtualAudioPlugin;
  uint64_t v36;
  as::server::LegacySessionManager *v37;
  os_unfair_lock_s *v38;
  as::server::LegacySessionManager *v39;
  os_unfair_lock_s *v40;
  BOOL v41;
  as::server::LegacySessionManager *v42;
  as::server::LegacySessionManager *v43;
  audit_token_t *v44;
  int v45;
  uint64_t v46;
  as::server *v47;
  audit_token_t *v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t v51;
  AudioObjectID inObjectID;
  uint64_t v53;
  os_unfair_lock_s *v54;
  std::__shared_weak_count *v55;
  char v56;
  UInt32 ioDataSize;
  int outData;
  _BYTE buf[18];
  __int16 v60;
  audit_token_t *v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v8 = a2;
  v9 = (as::server *)as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor((as::server::AudioSessionInfoAccessor *)&v54, this, a3, 1);
  v10 = v54;
  if (v54)
  {
    v11 = v55;
    if (v55)
    {
      p_shared_owners = (unint64_t *)&v55->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v15 = v54;
    if (!v54)
    {
      v50 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v50);
    }
    v16 = v55;
    if (v55)
    {
      v17 = (unint64_t *)&v55->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      v19 = *(id *)&v15[24]._os_unfair_lock_opaque;
      do
        v20 = __ldaxr(v17);
      while (__stlxr(v20 - 1, v17));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    else
    {
      v19 = *(id *)&v54[24]._os_unfair_lock_opaque;
    }
    v22 = v54;
    if (!v54)
    {
      v51 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v51);
    }
    v23 = v55;
    if (v55)
    {
      v24 = (unint64_t *)&v55->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
      os_unfair_lock_opaque_low = LOBYTE(v22[108]._os_unfair_lock_opaque);
      do
        v27 = __ldaxr(v24);
      while (__stlxr(v27 - 1, v24));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    else
    {
      os_unfair_lock_opaque_low = LOBYTE(v54[108]._os_unfair_lock_opaque);
    }
    if (v54)
    {
      os_unfair_lock_unlock(v54 + 158);
      v56 = 0;
    }
    if (!-[audit_token_t isEqualToString:](v8, "isEqualToString:", CFSTR("MuteSessionInputs")))
      goto LABEL_85;
    {
      as::AudioSessionMuteEnabled(void)::enabled = _os_feature_enabled_impl();
    }
    if (!as::AudioSessionMuteEnabled(void)::enabled)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", as::server::forbid_acq::IsAudioAppAllInputSessionsMuted(this));
      v29 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
LABEL_85:
      if (-[audit_token_t isEqualToString:](v8, "isEqualToString:", CFSTR("IsSpatialEnabled")))
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", os_unfair_lock_opaque_low != 0);
        v29 = objc_claimAutoreleasedReturnValue();
      }
      else
      {
        if (-[audit_token_t isEqualToString:](v8, "isEqualToString:", CFSTR("DolbyDigitalEncoderAvailable")))
        {
          v30 = v19;
          if ((objc_opt_respondsToSelector() & 1) != 0)
          {
            if (objc_msgSend(v30, "dolbyDigitalEncoderAvailable"))
              v31 = 0x100000000;
            else
              v31 = 0;
          }
          else
          {
            v31 = 4294967292;
          }

          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", HIDWORD(v31));
          v29 = objc_claimAutoreleasedReturnValue();
          *(_DWORD *)a4 = v31;
          goto LABEL_47;
        }
        if (-[audit_token_t isEqualToString:](v8, "isEqualToString:", CFSTR("RecordingFromRemoteInput")))
        {
          v32 = (void *)MEMORY[0x1E0CB37E8];
          v33 = atomic_load((unsigned __int8 *)&v10[82]);
          objc_msgSend(v32, "numberWithBool:", v33 & 1);
          v29 = objc_claimAutoreleasedReturnValue();
        }
        else
        {
          if (-[audit_token_t isEqualToString:](v8, "isEqualToString:", CFSTR("EarpieceANCEnabled")))
          {
            inObjectID = 0;
            VirtualAudioPlugin = as::server::GetVirtualAudioPlugin((as::server *)&inObjectID, v34);
            if (VirtualAudioPlugin)
            {
              v36 = 0;
            }
            else
            {
              buf[9] = 0;
              *(_WORD *)&buf[10] = 0;
              strcpy(buf, "scnabolg");
              ioDataSize = 4;
              outData = 0;
              VirtualAudioPlugin = AudioObjectGetPropertyData(inObjectID, (const AudioObjectPropertyAddress *)buf, 0, 0, &ioDataSize, &outData);
              if (VirtualAudioPlugin)
                v41 = 1;
              else
                v41 = outData == 0;
              v36 = !v41;
            }
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v36);
            v29 = objc_claimAutoreleasedReturnValue();
            *(_DWORD *)a4 = VirtualAudioPlugin;
            goto LABEL_47;
          }
          v37 = (as::server::LegacySessionManager *)-[audit_token_t isEqualToString:](v8, "isEqualToString:", CFSTR("PreferredMicrophoneInjectionMode"));
          if ((_DWORD)v37)
          {
            v38 = (os_unfair_lock_s *)as::server::LegacySessionManager::Instance(v37);
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", as::server::LegacySessionManager::GetPreferredMicrophoneInjectionMode(v38, this));
            v29 = objc_claimAutoreleasedReturnValue();
          }
          else
          {
            v39 = (as::server::LegacySessionManager *)-[audit_token_t isEqualToString:](v8, "isEqualToString:", CFSTR("MicrophoneInjectionIsEnabled"));
            if ((_DWORD)v39)
            {
              v40 = (os_unfair_lock_s *)as::server::LegacySessionManager::Instance(v39);
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", as::server::LegacySessionManager::MicrophoneInjectionIsEnabled(v40));
              v29 = objc_claimAutoreleasedReturnValue();
            }
            else
            {
              v42 = (as::server::LegacySessionManager *)-[audit_token_t isEqualToString:](v8, "isEqualToString:", CFSTR("MicrophoneInjectionIsAllowedByUser"));
              if (!(_DWORD)v42)
              {
                if (-[audit_token_t isEqualToString:](v8, "isEqualToString:", CFSTR("AS_HostProcessAttribution")))
                {
                  v44 = (audit_token_t *)(id)*MEMORY[0x1E0D497D8];
                  as::server::forbid_acq::GetPropertyMX(this, v44, 0, a3, (uint64_t)buf);
                  v45 = *(_DWORD *)buf;
                  if (*(_DWORD *)buf)
                  {
                    v46 = 0;
                  }
                  else
                  {
                    v46 = objc_claimAutoreleasedReturnValue();
                    v45 = 0;
                  }
                  *(_DWORD *)a4 = v45;
                  *(_QWORD *)(a4 + 8) = v46;

                }
                else
                {
                  v47 = (as::server *)-[audit_token_t isEqualToString:](v8, "isEqualToString:", CFSTR("AS_DetailedActiveAudioRoute"));
                  if ((_DWORD)v47)
                  {
                    v48 = (audit_token_t *)(id)*MEMORY[0x1E0D49730];
                    as::server::forbid_acq::GetPropertyMX(this, v48, 0, a3, (uint64_t)buf);
                    if (*(_DWORD *)buf)
                    {
                      *(_DWORD *)a4 = *(_DWORD *)buf;
                      *(_QWORD *)(a4 + 8) = 0;
                    }
                    else
                    {
                      *(_DWORD *)a4 = inObjectID;
                      *(_QWORD *)(a4 + 8) = v53;
                    }

                  }
                  else
                  {
                    v49 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v47));
                    if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = 136315650;
                      *(_QWORD *)&buf[4] = "AudioSessionServerImp.mm";
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&buf[14] = 556;
                      v60 = 2112;
                      v61 = v8;
                      _os_log_impl(&dword_1C895C000, v49, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Unrecognized / unimplemented local property: %@", buf, 0x1Cu);
                    }
                    *(_DWORD *)a4 = -50;
                    *(_QWORD *)(a4 + 8) = 0;
                  }
                }
                goto LABEL_48;
              }
              v43 = (as::server::LegacySessionManager *)as::server::LegacySessionManager::Instance(v42);
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", as::server::LegacySessionManager::UserAllowsMicrophoneInjection(v43));
              v29 = objc_claimAutoreleasedReturnValue();
            }
          }
        }
      }
    }
    *(_DWORD *)a4 = 0;
LABEL_47:
    *(_QWORD *)(a4 + 8) = v29;
LABEL_48:

    goto LABEL_49;
  }
  v21 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v9));
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AudioSessionServerImp.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 502;
    v60 = 1024;
    LODWORD(v61) = (_DWORD)this;
    _os_log_impl(&dword_1C895C000, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cannot get session info for session ID: 0x%x", buf, 0x18u);
  }
  *(_DWORD *)a4 = 561210739;
  *(_QWORD *)(a4 + 8) = 0;
LABEL_49:
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor(&v54);

}

void sub_1C89ABD6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a3);

  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)va);
  _Unwind_Resume(a1);
}

id `anonymous namespace'::TranslateGetter_HostProcessAttribution(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v11;
    v6 = *MEMORY[0x1E0D49E00];
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v3);
        objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * v7), "valueForKey:", v6, (_QWORD)v10);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "addObject:", v8);

        ++v7;
      }
      while (v4 != v7);
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v4);
  }

  return v2;
}

void sub_1C89ABF84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id as::server::forbid_acq::SetPropertyMXOnAppSessions(__int128 *a1, _OWORD *a2, unsigned int a3, void *a4, void *a5)
{
  id v9;
  as::server::LegacySessionManager *v10;
  os_unfair_lock_s *v11;
  __int128 v12;
  __int128 v13;
  id v14;
  as::server::LegacySessionManager *v15;
  as::server *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  int updated;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD v35[4];
  id v36;
  as::server::LegacySessionManager *v37;
  __int128 *v38;
  _QWORD v39[3];
  __int128 v40;
  __int128 v41;
  void (*v42)(uint64_t);
  id v43;
  audit_token_t atoken;
  char v45;
  pid_t v46;
  as::server::AudioApplicationInfo *v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  audit_token_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  _QWORD v55[2];

  v55[1] = *MEMORY[0x1E0C80C00];
  v9 = a4;
  v10 = a5;
  v11 = (os_unfair_lock_s *)as::server::LegacySessionManager::Instance(v10);
  v12 = a1[1];
  v40 = *a1;
  v41 = v12;
  LOBYTE(v42) = 1;
  *(_OWORD *)atoken.val = v40;
  *(_OWORD *)&atoken.val[4] = v12;
  HIDWORD(v42) = audit_token_to_pid(&atoken);
  v13 = a2[1];
  *(_OWORD *)atoken.val = *a2;
  *(_OWORD *)&atoken.val[4] = v13;
  v45 = 1;
  *(_OWORD *)v51.val = *(_OWORD *)atoken.val;
  *(_OWORD *)&v51.val[4] = v13;
  v46 = audit_token_to_pid(&v51);
  as::server::LegacySessionManager::FindAudioApplicationAndVerifyOwnership(v11, (const as::server::ProcessIdentity *)&v40, (const as::server::ProcessIdentity *)&atoken, a3, 1, (uint64_t)&v47);
  if (v47 && v49)
  {
    as::server::AudioApplicationInfo::GetSessions((os_unfair_lock_s *)v47, (uint64_t)&atoken);
    *(_QWORD *)&v40 = 0;
    *((_QWORD *)&v40 + 1) = &v40;
    *(_QWORD *)&v41 = 0x3032000000;
    *((_QWORD *)&v41 + 1) = __Block_byref_object_copy_;
    v42 = __Block_byref_object_dispose_;
    v43 = 0;
    v35[0] = MEMORY[0x1E0C809B0];
    v35[1] = 3321888768;
    v35[2] = ___ZN2as6server10forbid_acq26SetPropertyMXOnAppSessionsERK13audit_token_tS4_jP8NSStringPU25objcproto14NSSecureCoding11objc_object_block_invoke;
    v35[3] = &unk_1E82059B8;
    memset(v39, 0, sizeof(v39));
    std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__init_with_size[abi:ne180100]<std::shared_ptr<as::server::AudioSessionInfo>*,std::shared_ptr<as::server::AudioSessionInfo>*>((char *)v39, *(_QWORD **)atoken.val, *(_QWORD **)&atoken.val[2], (uint64_t)(*(_QWORD *)&atoken.val[2] - *(_QWORD *)atoken.val) >> 4);
    v14 = v9;
    v36 = v14;
    v15 = v10;
    v37 = v15;
    v38 = &v40;
    v16 = (as::server *)MEMORY[0x1CAA39148](v35);
    as::server::GetAudioControlQueue(v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    as::server::DispatchBlock(v17, v16, 1, (uint64_t)"SetPropertyMXOnAppSessions", (uint64_t)"AudioSessionServerImp.mm", 602, 0, 0);

    v18 = *(void **)(*((_QWORD *)&v40 + 1) + 40);
    if (v18)
    {
      v19 = v18;
    }
    else
    {
      updated = as::server::AudioApplicationInfo::UpdateProperty((uint64_t)v47, v14, v15, 1836595770, 0);
      if (updated)
      {
        v23 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", as::server::AudioApplicationInfo::DebugString((os_unfair_lock_s *)v47));
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "stringWithFormat:", CFSTR("Failed to update MX cache in audio application info (app: %@)"), v24);
        v25 = (void *)objc_claimAutoreleasedReturnValue();

        v26 = (void *)MEMORY[0x1E0CB35C8];
        v52 = *MEMORY[0x1E0CB2D50];
        v53 = v25;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v53, &v52, 1);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v26, "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], updated, v27);
        v19 = (id)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        v19 = 0;
      }
    }

    *(_QWORD *)v51.val = v39;
    std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
    _Block_object_dispose(&v40, 8);

    *(_QWORD *)&v40 = &atoken;
    std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  }
  else
  {
    v20 = (void *)MEMORY[0x1E0CB35C8];
    v54 = *MEMORY[0x1E0CB2D50];
    v55[0] = CFSTR("Failed to verify AudioApp permissions");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v55, &v54, 1);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], 1701737535, v21);
    v19 = (id)objc_claimAutoreleasedReturnValue();

  }
  v28 = v50;
  if (v50)
  {
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v48;
  if (v48)
  {
    v32 = (unint64_t *)&v48->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }

  return v19;
}

void sub_1C89AC3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;

  *(_QWORD *)(v40 - 160) = v35;
  std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 160));
  _Block_object_dispose(&a21, 8);

  a21 = (void **)&a27;
  std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100](&a21);
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100](v39 + 16);
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a33);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void ___ZN2as6server10forbid_acq26SetPropertyMXOnAppSessionsERK13audit_token_tS4_jP8NSStringPU25objcproto14NSSecureCoding11objc_object_block_invoke(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  as::server *v22;
  NSObject *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  std::string v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  as::server *v39;
  _BYTE cf[12];
  __int16 v41;
  int v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v1 = (uint64_t *)a1[7];
  v2 = (uint64_t *)a1[8];
  if (v1 != v2)
  {
    while (1)
    {
      v5 = *v1;
      v4 = (std::__shared_weak_count *)v1[1];
      v36 = *v1;
      v37 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      v8 = *(unsigned int *)(v5 + 8);
      if (*(char *)(v5 + 223) < 0)
        std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)(v5 + 200), *(_QWORD *)(v5 + 208));
      else
        v35 = *(std::string *)(v5 + 200);
      as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef((CFTypeRef)v5, cf);
      v9 = *(_QWORD *)cf;
      if (*(_QWORD *)cf)
        CFRelease(*(CFTypeRef *)cf);
      v10 = (void *)a1[4];
      v11 = (void *)a1[5];
      v12 = *(std::__shared_weak_count **)(v5 + 232);
      v33 = *(_QWORD *)(v5 + 224);
      v34 = v12;
      if (v12)
      {
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v15 = as::server::require_acq::PrivateSetPropertyMX(v8, (uint64_t)&v35, v9, v10, v11, (uint64_t)&v33);
      v16 = v34;
      if (v34)
      {
        v17 = (unint64_t *)&v34->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      if (v15)
        break;
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v35.__r_.__value_.__l.__data_);
      v19 = v37;
      if (v37)
      {
        v20 = (unint64_t *)&v37->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v1 += 2;
      if (v1 == v2)
        return;
    }
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("MXSessionSetProperty error setting (session: 0x%x) property: %@"), v8, a1[4], v33);
    v22 = (as::server *)objc_claimAutoreleasedReturnValue();
    v23 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v22));
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      v24 = -[as::server UTF8String](objc_retainAutorelease(v22), "UTF8String");
      *(_DWORD *)cf = 136315650;
      *(_QWORD *)&cf[4] = "AudioSessionServerImp.mm";
      v41 = 1024;
      v42 = 594;
      v43 = 2080;
      v44 = v24;
      _os_log_impl(&dword_1C895C000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d %s", cf, 0x1Cu);
    }

    v25 = (void *)MEMORY[0x1E0CB35C8];
    v38 = *MEMORY[0x1E0CB2D50];
    v39 = v22;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v39, &v38, 1);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], v15, v26);
    v27 = objc_claimAutoreleasedReturnValue();
    v28 = *(_QWORD *)(a1[6] + 8);
    v29 = *(void **)(v28 + 40);
    *(_QWORD *)(v28 + 40) = v27;

    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    v30 = v37;
    if (v37)
    {
      v31 = (unint64_t *)&v37->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
  }
}

void sub_1C89AC7C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;
  void *v21;

  if (a18 < 0)
    operator delete(__p);
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

char *__copy_helper_block_ea8_56c89_ZTSKNSt3__16vectorINS_10shared_ptrIN2as6server16AudioSessionInfoEEENS_9allocatorIS5_EEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v2 = a1 + 56;
  *(_QWORD *)(v2 + 16) = 0;
  return std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__init_with_size[abi:ne180100]<std::shared_ptr<as::server::AudioSessionInfo>*,std::shared_ptr<as::server::AudioSessionInfo>*>((char *)v2, *(_QWORD **)(a2 + 56), *(_QWORD **)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 4);
}

void __destroy_helper_block_ea8_56c89_ZTSKNSt3__16vectorINS_10shared_ptrIN2as6server16AudioSessionInfoEEENS_9allocatorIS5_EEEE(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 56);
  std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t as::server::require_acq::AudioSessionSilenceOutput(as::server::require_acq *this, uint64_t a2)
{
  void *v3;
  void *v4;
  as::server *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  NSObject *v12;
  id v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  const __CFString *v35;
  _QWORD v36[2];

  v36[1] = *MEMORY[0x1E0C80C00];
  v35 = CFSTR("flags");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v36[0] = v3;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v36, &v35, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = (as::server *)as::server::ConstAudioSessionInfoAccessor::ConstAudioSessionInfoAccessor((as::server::ConstAudioSessionInfoAccessor *)&v27, this);
  v6 = v27;
  if (v27)
  {
    v7 = v28;
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      v10 = *(unsigned int *)(v6 + 88);
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    else
    {
      v10 = *(unsigned int *)(v27 + 88);
    }
    v14 = v27;
    if (!v27)
    {
      v25 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v25);
    }
    v15 = v28;
    if (v28)
    {
      v16 = (unint64_t *)&v28->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v13 = *(id *)(v14 + 96);
    if (v15)
    {
      v18 = (unint64_t *)&v15->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (!v13)
    {
      v26 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v26);
    }
  }
  else
  {
    v12 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v5));
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v30 = "AudioSessionServerImp.mm";
      v31 = 1024;
      v32 = 631;
      v33 = 1024;
      v34 = (int)this;
      _os_log_impl(&dword_1C895C000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot get session info for session ID: 0x%x", buf, 0x18u);
    }
    v13 = 0;
    v10 = 0xFFFFFFFFLL;
  }
  v20 = v28;
  if (v28)
  {
    v21 = (unint64_t *)&v28->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
      if (v6)
        goto LABEL_28;
LABEL_30:
      v23 = 561210739;
      goto LABEL_31;
    }
  }
  if (!v6)
    goto LABEL_30;
LABEL_28:
  objc_msgSend(v13, "handleInterruptionWithID:clientPID:interruptionState:interruptionInfo:", this, v10, 32769, v4);
  v23 = 0;
LABEL_31:

  return v23;
}

void sub_1C89ACB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t as::server::require_acq::AudioSessionServerInterruptDummyPlayers(as::server::require_acq *this)
{
  as::server *v2;
  os_unfair_lock_s *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  int *v8;
  unsigned __int8 *v9;
  int v10;
  os_unfair_lock_s *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  int *v16;
  unsigned __int8 *v17;
  int v18;
  os_unfair_lock_s *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  NSObject *v24;
  unint64_t *v25;
  unint64_t v26;
  NSObject *v27;
  int v28;
  std::string::size_type v29;
  std::string *v30;
  void **v31;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[8];
  uint64_t *v36;
  void *__p[2];
  char v38;
  std::string v39;
  os_unfair_lock_s *v40;
  std::__shared_weak_count *v41;
  char v42;
  _BYTE buf[18];
  __int16 v44;
  const char *v45;
  __int16 v46;
  std::string *v47;
  __int16 v48;
  void **v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v2 = (as::server *)as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor((as::server::AudioSessionInfoAccessor *)&v40, this);
  v3 = v40;
  if (v40)
  {
    v4 = v41;
    if (v41)
    {
      p_shared_owners = (unint64_t *)&v41->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v8 = (int *)&v3[79];
    v9 = (unsigned __int8 *)&v3[80];
    do
      v10 = __ldaxr(v9);
    while (__stlxr(0, v9));
    v11 = v40;
    if (!v40)
    {
      v33 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v33);
    }
    v12 = v41;
    if (v41)
    {
      v13 = (unint64_t *)&v41->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      do
        v15 = __ldaxr(v13);
      while (__stlxr(v15 - 1, v13));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v16 = (int *)&v11[81];
    v17 = (unsigned __int8 *)&v11[82];
    do
      v18 = __ldaxr(v17);
    while (__stlxr(0, v17));
    if (((v10 | v18) & 1) != 0)
    {
      v19 = v40;
      if (!v40)
      {
        v34 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v34);
      }
      v20 = v41;
      *(_QWORD *)buf = v40;
      *(_QWORD *)&buf[8] = v41;
      if (v41)
      {
        v21 = (unint64_t *)&v41->__shared_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      if (SHIBYTE(v19[55]._os_unfair_lock_opaque) < 0)
        std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)&v19[50]._os_unfair_lock_opaque, *(_QWORD *)&v19[52]._os_unfair_lock_opaque);
      else
        v39 = *(std::string *)&v19[50]._os_unfair_lock_opaque;
      if (v20)
      {
        v25 = (unint64_t *)&v20->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v27 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v2));
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        v28 = SHIBYTE(v39.__r_.__value_.__r.__words[2]);
        v29 = v39.__r_.__value_.__r.__words[0];
        v35[0] = 0;
        v36 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v35);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v35);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v35, -1, 0x20u, 0, 0, __p);
        v30 = &v39;
        if (v28 < 0)
          v30 = (std::string *)v29;
        if (v38 >= 0)
          v31 = __p;
        else
          v31 = (void **)__p[0];
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = "AudioSessionServerImp.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 664;
        v44 = 2080;
        v45 = "interrupt_dummy_players";
        v46 = 2080;
        v47 = v30;
        v48 = 2080;
        v49 = v31;
        _os_log_impl(&dword_1C895C000, v27, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
        if (v38 < 0)
          operator delete(__p[0]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v35);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v36, v35[0]);
      }

      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
    }
    if (v40)
    {
      os_unfair_lock_unlock(v40 + 158);
      v42 = 0;
    }
    if ((v10 & 1) != 0)
      as::server::require_acq::AudioSessionServerSetClientPlayState(this, *v8, (AudioSession *)v8, (AudioSession *)3, 0, 0, 0);
    if ((v18 & 1) != 0)
      as::server::require_acq::AudioSessionServerSetClientPlayState(this, *v16, (AudioSession *)v16, (AudioSession *)1, 0, 0, 0);
    v23 = 0;
  }
  else
  {
    v23 = 561210739;
    v24 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v2));
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AudioSessionServerImp.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 652;
      v44 = 1024;
      LODWORD(v45) = (_DWORD)this;
      _os_log_impl(&dword_1C895C000, v24, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Did not find matching audio session for session ID: 0x%x. Bailing.", buf, 0x18u);
    }
  }
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor(&v40);
  return v23;
}

void sub_1C89ACF78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,os_unfair_lock_s *a21,uint64_t a22,uint64_t a23,char a24)
{
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor(&a21);
  _Unwind_Resume(a1);
}

uint64_t as::server::require_acq::SetPropertyLocal(AudioSession *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  audit_token_t *v8;
  unsigned __int8 v9;
  NSNumber *v10;
  uint64_t v11;
  as::server *v12;
  os_unfair_lock_s *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  audit_token_t *v18;
  audit_token_t *v19;
  unsigned int v20;
  NSObject *v21;
  void *v22;
  as::server::LegacySessionManager *v23;
  os_unfair_lock_s *v24;
  int v25;
  os_unfair_lock_s *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  id v30;
  unint64_t v31;
  as::server::LegacySessionManager *v32;
  os_unfair_lock_s *v33;
  __int128 v34;
  as::server *v35;
  NSObject *v36;
  as::server::LegacySessionManager *v37;
  os_unfair_lock_s *v38;
  as::server *v39;
  NSObject *v40;
  uint64_t v41;
  NSObject *v42;
  NSObject *v43;
  uint64_t v45;
  audit_token_t v46;
  os_unfair_lock_s *v47;
  std::__shared_weak_count *v48;
  char v49;
  uint8_t buf[4];
  _BYTE v51[28];
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  {
    as::AudioSessionMuteEnabled(void)::enabled = _os_feature_enabled_impl();
  }
  if (!as::AudioSessionMuteEnabled(void)::enabled
    || !objc_msgSend(v7, "isEqualToString:", CFSTR("MuteSessionInputs")))
  {
    v12 = (as::server *)as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor((as::server::AudioSessionInfoAccessor *)&v47, a1, (const audit_token_t *)a2, 1);
    v13 = v47;
    if (!v47)
    {
      v11 = 561210739;
      v21 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v12));
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)v51 = "AudioSessionServerImp.mm";
        *(_WORD *)&v51[8] = 1024;
        *(_DWORD *)&v51[10] = 765;
        *(_WORD *)&v51[14] = 1024;
        *(_DWORD *)&v51[16] = (_DWORD)a1;
        _os_log_impl(&dword_1C895C000, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cannot get session info for session ID: 0x%x", buf, 0x18u);
      }
      goto LABEL_50;
    }
    v14 = v48;
    if (v48)
    {
      p_shared_owners = (unint64_t *)&v48->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v47)
    {
      os_unfair_lock_unlock(v47 + 158);
      v49 = 0;
    }
    if (objc_msgSend(v7, "isEqualToString:", CFSTR("RecordingFromRemoteInput")))
    {
      v18 = v8;
      v19 = v18;
      if (v18)
      {
        v20 = -[audit_token_t BOOLValue](v18, "BOOLValue");
        buf[0] = 1;
        *(_DWORD *)v51 = 3975;
        *(_QWORD *)&v51[4] = a1;
        *(_QWORD *)&v51[12] = 0;
        *(_QWORD *)&v51[20] = 0;
        v52 = 0;
        kdebug_trace();
        v11 = as::server::require_acq::AudioSessionServerSetClientPlayState(a1, v13[81]._os_unfair_lock_opaque, (AudioSession *)&v13[81], (AudioSession *)1, v20, 0, 0);
        if (!(_DWORD)v11)
          atomic_store(v20, (unsigned __int8 *)&v13[82]);
        as::ScopedTrace::~ScopedTrace((as::ScopedTrace *)buf);
      }
      else
      {
        v11 = 4294967246;
      }

    }
    else if (objc_msgSend(v7, "isEqualToString:", CFSTR("AS_HostProcessAttribution")))
    {
      as::server::TranslateSetter_HostProcessAttribution(v8, a2);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = as::server::require_acq::SetPropertyMX(a1, (const audit_token_t *)a2, (void *)*MEMORY[0x1E0D497D8], v22);

    }
    else
    {
      v23 = (as::server::LegacySessionManager *)objc_msgSend(v7, "isEqualToString:", CFSTR("PreferredMicrophoneInjectionMode"));
      if ((_DWORD)v23)
      {
        v24 = (os_unfair_lock_s *)as::server::LegacySessionManager::Instance(v23);
        v25 = -[audit_token_t intValue](v8, "intValue");
        as::server::LegacySessionManager::SetPreferredMicrophoneInjectionMode(v24, v25, a1);
        v26 = v47;
        if (!v47)
        {
          v45 = _os_crash();
          as::server::require_acq::AudioSessionServerSetClientPlayState(v45);
        }
        v27 = v48;
        if (v48)
        {
          v28 = (unint64_t *)&v48->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
          v30 = *(id *)&v26[24]._os_unfair_lock_opaque;
          do
            v31 = __ldaxr(v28);
          while (__stlxr(v31 - 1, v28));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        else
        {
          v30 = *(id *)&v47[24]._os_unfair_lock_opaque;
        }
        v41 = objc_opt_respondsToSelector();
        if ((v41 & 1) != 0)
        {
          v42 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v41));
          if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)v51 = "AudioSessionServerImp.mm";
            *(_WORD *)&v51[8] = 1024;
            *(_DWORD *)&v51[10] = 796;
            *(_WORD *)&v51[14] = 1024;
            *(_DWORD *)&v51[16] = v25;
            *(_WORD *)&v51[20] = 1024;
            *(_DWORD *)&v51[22] = (_DWORD)a1;
            _os_log_impl(&dword_1C895C000, v42, OS_LOG_TYPE_INFO, "%25s:%-5d Updating audio toolbox about preferredMicrophoneInjectionMode to %d for session:0x%x", buf, 0x1Eu);
          }
          objc_msgSend(v30, "updateMicrophoneInjectionPreference:forSession:", v25, a1);
        }
        else
        {
          v43 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v41));
          if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)v51 = "AudioSessionServerImp.mm";
            *(_WORD *)&v51[8] = 1024;
            *(_DWORD *)&v51[10] = 801;
            *(_WORD *)&v51[14] = 1024;
            *(_DWORD *)&v51[16] = v25;
            *(_WORD *)&v51[20] = 1024;
            *(_DWORD *)&v51[22] = (_DWORD)a1;
            _os_log_impl(&dword_1C895C000, v43, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot update audio toolbox about preferredMicrophoneInjectionMode to %d for session:0x%x", buf, 0x1Eu);
          }
        }

      }
      else
      {
        v32 = (as::server::LegacySessionManager *)objc_msgSend(v7, "isEqualToString:", CFSTR("SubscribeToMicrophoneInjectionCapabilityChangeNotification"));
        if (!(_DWORD)v32)
        {
          if (objc_msgSend(v7, "isEqualToString:", CFSTR("MicrophoneInjectionIsEnabled")))
          {
            v37 = (as::server::LegacySessionManager *)-[audit_token_t BOOLValue](v8, "BOOLValue");
            v38 = (os_unfair_lock_s *)as::server::LegacySessionManager::Instance(v37);
            as::server::LegacySessionManager::SetMicrophoneInjectionIsEnabled(v38, (uint64_t)v37);
            v40 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v39));
            if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)v51 = "AudioSessionServerImp.mm";
              *(_WORD *)&v51[8] = 1024;
              *(_DWORD *)&v51[10] = 820;
              *(_WORD *)&v51[14] = 1024;
              *(_DWORD *)&v51[16] = (_DWORD)v37;
              *(_WORD *)&v51[20] = 1024;
              *(_DWORD *)&v51[22] = (_DWORD)a1;
              _os_log_impl(&dword_1C895C000, v40, OS_LOG_TYPE_INFO, "%25s:%-5d Setting MicrophoneInjectionMode to %d for session:0x%x", buf, 0x1Eu);
            }
          }
          v11 = 4294967246;
          goto LABEL_50;
        }
        v33 = (os_unfair_lock_s *)as::server::LegacySessionManager::Instance(v32);
        v34 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)v46.val = *(_OWORD *)a2;
        *(_OWORD *)&v46.val[4] = v34;
        as::server::LegacySessionManager::SubscribeToMicrophoneInjectionCapabilityChangeNotification(v33, &v46, (NSString *)v8);
        v36 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v35));
        if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)v51 = "AudioSessionServerImp.mm";
          *(_WORD *)&v51[8] = 1024;
          *(_DWORD *)&v51[10] = 814;
          *(_WORD *)&v51[14] = 2112;
          *(_QWORD *)&v51[16] = v8;
          _os_log_impl(&dword_1C895C000, v36, OS_LOG_TYPE_INFO, "%25s:%-5d Setting SubscribeToMicrophoneInjectionCapabilityChangeNotification for process:%@", buf, 0x1Cu);
        }
      }
      v11 = 0;
    }
LABEL_50:
    as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor(&v47);
    goto LABEL_51;
  }
  v11 = as::server::require_acq::MuteSessionInput(a1, (const audit_token_t *)a2, v8, v10);
LABEL_51:

  return v11;
}

void sub_1C89AD608(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t as::server::require_acq::MuteAudioSessions(uint64_t a1, unsigned int **a2, const audit_token_t *a3)
{
  unsigned int *v3;
  unsigned int *v4;
  BOOL v5;
  uint64_t v8;
  as::server::require_acq *v9;
  audit_token_t *v10;
  NSNumber *v11;

  v4 = *a2;
  v3 = a2[1];
  if (*a2)
    v5 = 1;
  else
    v5 = v3 == 0;
  if (!v5)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  if (v3)
  {
    v8 = 4 * (_QWORD)v3;
    do
    {
      if (!v4)
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      v9 = (as::server::require_acq *)*v4;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
      v10 = (audit_token_t *)objc_claimAutoreleasedReturnValue();
      LODWORD(v9) = as::server::require_acq::MuteSessionInput(v9, a3, v10, v11);

      if ((_DWORD)v9)
        as::server::require_acq::MuteAudioSessions();
      ++v4;
      v8 -= 4;
    }
    while (v8);
  }
  return 0;
}

void sub_1C89AD794(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

as::server *as::server::ff_acq::DeactivateSecureSession()
{
  unsigned __int8 v0;
  as::server *v1;
  as::server *v2;
  NSObject *v3;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  {
    as::OffloadActivationOffACQ(void)::enabled = _os_feature_enabled_impl();
  }
  if (as::OffloadActivationOffACQ(void)::enabled)
    v1 = (as::server *)MXSessionEndInterruption_WithSecTaskAndStatus();
  else
    v1 = (as::server *)_MXSessionEndInterruption_WithSecTaskAndStatus();
  v2 = v1;
  if ((_DWORD)v1)
  {
    v3 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v1));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v5 = 136315650;
      v6 = "AudioSessionServerImp.mm";
      v7 = 1024;
      v8 = 853;
      v9 = 1024;
      v10 = (int)v2;
      _os_log_impl(&dword_1C895C000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d MXSessionEndInterruption failed with code: %d", (uint8_t *)&v5, 0x18u);
    }
  }
  return v2;
}

void sub_1C89AD8E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t as::server::ff_acq::AudioSessionServerActivateWithFlags(void *a1, AudioSession *a2, uint64_t a3, unsigned int a4)
{
  id v7;
  _anonymous_namespace_ *v8;
  const audit_token_t *v9;
  uint64_t ProxyProcessPID;
  os_unfair_lock_s *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  os_unfair_lock_s *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  as::server *DefaultSubsessionRef;
  const void *v24;
  as::server::ff_acq *v25;
  unint64_t *v26;
  unint64_t v27;
  void *InterruptionPriority;
  os_unfair_lock_s *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint32_t os_unfair_lock_opaque;
  unint64_t v34;
  os_unfair_lock_s *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __int128 v39;
  int os_unfair_lock_opaque_low;
  unint64_t v41;
  NSObject *v42;
  __int128 v43;
  SecTaskRef v44;
  __int128 v45;
  SecTaskRef v46;
  as::server *v47;
  uint64_t *v48;
  unsigned __int8 v49;
  uint64_t *v50;
  NSObject *v51;
  int v52;
  std::string::size_type v53;
  std::string *v54;
  void *p_p;
  NSObject *v56;
  std::string *v57;
  std::string *v58;
  unsigned __int8 v59;
  as::server *IsSessionActive;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unsigned __int8 v65;
  uint64_t v66;
  uint64_t *v67;
  unsigned __int8 v68;
  uint64_t *v69;
  as::server *v70;
  NSObject *v71;
  int v72;
  std::string::size_type v73;
  std::string *v74;
  std::string *v75;
  as::server *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  NSObject *v80;
  id v81;
  os_unfair_lock_s *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  as::server::LegacySessionManager *v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  os_unfair_lock_s *v90;
  os_unfair_lock_s *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t *v96;
  unsigned __int8 v97;
  uint64_t *v98;
  as::server *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  NSObject *v103;
  as::server *v104;
  uint64_t v105;
  as::server *v106;
  NSObject *v107;
  int v108;
  int v109;
  unsigned __int8 v110;
  void *v111;
  NSObject *v112;
  int v113;
  std::string::size_type v114;
  std::string *v115;
  std::string *v116;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD v126[4];
  id v127;
  os_unfair_lock_s *v128;
  int v129;
  int v130;
  char v131[8];
  uint64_t *v132;
  char v133[8];
  uint64_t *v134;
  CFMutableDictionaryRef Mutable;
  __int16 v136;
  void *__p;
  id v138;
  char v139;
  unsigned __int8 v140[8];
  uint64_t *v141;
  unsigned __int8 v142[8];
  uint64_t *v143;
  audit_token_t token;
  audit_token_t v145;
  CFTypeRef cf;
  std::string v147;
  os_unfair_lock_s *v148;
  std::__shared_weak_count *v149;
  char v150;
  char v151[16];
  _BYTE buf[38];
  __int16 v153;
  std::string *v154;
  __int16 v155;
  void *v156;
  uint64_t v157;

  v157 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  if (!v7)
  {
    v118 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v118);
  }
  v8 = (_anonymous_namespace_ *)as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor((as::server::AudioSessionInfoAccessor *)&v148, a2, (const audit_token_t *)a3, 1);
  if (!v148)
  {
    v16 = 561210739;
    goto LABEL_170;
  }
  v11 = v148;
  if (!v148)
  {
    v119 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v119);
  }
  v12 = ProxyProcessPID;
  v13 = v149;
  *(_QWORD *)buf = v148;
  *(_QWORD *)&buf[8] = v149;
  if (v149)
  {
    p_shared_owners = (unint64_t *)&v149->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  if (SHIBYTE(v11[55]._os_unfair_lock_opaque) < 0)
    std::string::__init_copy_ctor_external(&v147, *(const std::string::value_type **)&v11[50]._os_unfair_lock_opaque, *(_QWORD *)&v11[52]._os_unfair_lock_opaque);
  else
    v147 = *(std::string *)&v11[50]._os_unfair_lock_opaque;
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = v148;
  if (!v148)
  {
    v120 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v120);
  }
  v20 = v149;
  if (v149)
  {
    v21 = (unint64_t *)&v149->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  DefaultSubsessionRef = (as::server *)as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v19, buf);
  v25 = *(as::server::ff_acq **)buf;
  if (*(_QWORD *)buf)
    CFRelease(*(CFTypeRef *)buf);
  if (v20)
  {
    v26 = (unint64_t *)&v20->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (!v25)
  {
    v16 = 2003329396;
    v42 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(DefaultSubsessionRef));
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AudioSessionServerImp.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 926;
      _os_log_impl(&dword_1C895C000, v42, OS_LOG_TYPE_DEBUG, "%25s:%-5d No valid CMSession", buf, 0x12u);
    }
    goto LABEL_168;
  }
  InterruptionPriority = (void *)as::server::ff_acq::GetInterruptionPriority(v25, v24);
  cf = 0;
  if ((_DWORD)InterruptionPriority)
  {
    v29 = v148;
    if (!v148)
    {
      v121 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v121);
    }
    v30 = v149;
    if (v149)
    {
      v31 = (unint64_t *)&v149->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
      os_unfair_lock_opaque = v29[23]._os_unfair_lock_opaque;
      do
        v34 = __ldaxr(v31);
      while (__stlxr(v34 - 1, v31));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
      if (os_unfair_lock_opaque == 1935830119)
        goto LABEL_38;
    }
    else if (v148[23]._os_unfair_lock_opaque == 1935830119)
    {
LABEL_38:
      v35 = v148;
      if (!v148)
      {
        v123 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v123);
      }
      v36 = v149;
      if (v149)
      {
        v37 = (unint64_t *)&v149->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        v39 = *(_OWORD *)&v35[17]._os_unfair_lock_opaque;
        *(_OWORD *)buf = *(_OWORD *)&v35[13]._os_unfair_lock_opaque;
        *(_OWORD *)&buf[16] = v39;
        os_unfair_lock_opaque_low = LOBYTE(v35[21]._os_unfair_lock_opaque);
        do
          v41 = __ldaxr(v37);
        while (__stlxr(v41 - 1, v37));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      else
      {
        v45 = *(_OWORD *)&v148[17]._os_unfair_lock_opaque;
        *(_OWORD *)buf = *(_OWORD *)&v148[13]._os_unfair_lock_opaque;
        *(_OWORD *)&buf[16] = v45;
        os_unfair_lock_opaque_low = LOBYTE(v148[21]._os_unfair_lock_opaque);
      }
      if (!os_unfair_lock_opaque_low)
      {
        v46 = 0;
        goto LABEL_54;
      }
      v145 = *(audit_token_t *)buf;
      v44 = SecTaskCreateWithAuditToken(0, &v145);
LABEL_53:
      v46 = v44;
LABEL_54:
      InterruptionPriority = (void *)cf;
      cf = v46;
      if (InterruptionPriority)
        CFRelease(InterruptionPriority);
      if (!v46)
      {
        v142[0] = 0;
        v143 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v142);
        v47 = (as::server *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v142);
        if ((v12 & 0xFF00000000) != 0)
        {
          v140[0] = 5;
          v141 = (uint64_t *)(int)v12;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v140);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v140);
          v48 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v142, "controlling_PID");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v140);
          v49 = *(_BYTE *)v48;
          *(_BYTE *)v48 = v140[0];
          v140[0] = v49;
          v50 = (uint64_t *)v48[1];
          v48[1] = (uint64_t)v141;
          v141 = v50;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v48);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v140);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v141, v140[0]);
        }
        v51 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v47));
        if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
        {
          v52 = SHIBYTE(v147.__r_.__value_.__r.__words[2]);
          v53 = v147.__r_.__value_.__r.__words[0];
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v142, -1, 0x20u, 0, 0, &__p);
          v54 = &v147;
          if (v52 < 0)
            v54 = (std::string *)v53;
          if (v139 >= 0)
            p_p = &__p;
          else
            p_p = __p;
          *(_DWORD *)buf = 136316418;
          *(_QWORD *)&buf[4] = "AudioSessionServerImp.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 950;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "set_activation_state";
          *(_WORD *)&buf[28] = 2080;
          *(_QWORD *)&buf[30] = "could not get security task";
          v153 = 2080;
          v154 = v54;
          v155 = 2080;
          v156 = p_p;
          _os_log_impl(&dword_1C895C000, v51, OS_LOG_TYPE_ERROR, "%25s:%-5d { \"action\":\"%s\", \"error\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x3Au);
          if (v139 < 0)
            operator delete(__p);
        }

        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v142);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v143, v142[0]);
      }
      goto LABEL_68;
    }
    v43 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)token.val = *(_OWORD *)a3;
    *(_OWORD *)&token.val[4] = v43;
    v44 = SecTaskCreateWithAuditToken(0, &token);
    goto LABEL_53;
  }
LABEL_68:
  strcpy(v151, "activate");
  v56 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)InterruptionPriority));
  if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
  {
    if ((v147.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v57 = &v147;
    else
      v57 = (std::string *)v147.__r_.__value_.__r.__words[0];
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v142, -1, 0x20u, 0, 0, &__p);
    if (v139 >= 0)
      v58 = (std::string *)&__p;
    else
      v58 = (std::string *)__p;
    *(_DWORD *)buf = 136316162;
    *(_QWORD *)&buf[4] = "AudioSessionServerImp.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 957;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = v151;
    *(_WORD *)&buf[28] = 2080;
    *(_QWORD *)&buf[30] = v57;
    v153 = 2080;
    v154 = v58;
    _os_log_impl(&dword_1C895C000, v56, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
    if (v139 < 0)
      operator delete(__p);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v142);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v143, v142[0]);
  }

  {
    as::OffloadActivationOffACQ(void)::enabled = _os_feature_enabled_impl();
  }
  IsSessionActive = (as::server *)as::server::IsSessionActive(v25, (const void *)(as::OffloadActivationOffACQ(void)::enabled == 0));
  if ((a4 & 0x20008000) == 0 && (_DWORD)IsSessionActive)
    goto LABEL_157;
  if (!v148)
  {
    v122 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v122);
  }
  v61 = v149;
  if (v149)
  {
    v62 = (unint64_t *)&v149->__shared_owners_;
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
    do
      v64 = __ldaxr(v62);
    while (__stlxr(v64 - 1, v62));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (v148)
  {
    os_unfair_lock_unlock(v148 + 158);
    v150 = 0;
  }
  {
    as::OffloadActivationOffACQ(void)::enabled = _os_feature_enabled_impl();
  }
  if (as::OffloadActivationOffACQ(void)::enabled)
    v66 = MXSessionBeginInterruption_WithSecTaskAndFlags();
  else
    v66 = _MXSessionBeginInterruption_WithSecTaskAndFlags();
  if (!(_DWORD)v66)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    as::server::MXAccessor<as::server::FFDependentACQ>::GetProperty((void *)*MEMORY[0x1E0D494F8], (uint64_t)&__p);
    v77 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v78 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    if ((_DWORD)__p)
    {
      v80 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v76));
      if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "AudioSessionServerImp.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 893;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = v25;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = (_DWORD)__p;
        _os_log_impl(&dword_1C895C000, v80, OS_LOG_TYPE_DEFAULT, "%25s:%-5d kMXSessionProperty_AudioCategory for ref %p returned error %d", buf, 0x22u);
      }
      v81 = 0;
    }
    else
    {
      v81 = v138;
    }

    if (!v148 || (os_unfair_lock_lock(v148 + 158), v150 = 1, (v82 = v148) == 0))
    {
      v125 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v125);
    }
    v83 = v149;
    *(_QWORD *)buf = v148;
    *(_QWORD *)&buf[8] = v149;
    if (v149)
    {
      v84 = (unint64_t *)&v149->__shared_owners_;
      do
        v85 = __ldxr(v84);
      while (__stxr(v85 + 1, v84));
    }
    as::server::AudioSessionInfo::SetCachedActivationState((uint64_t)v82, 1, 0);
    if (v83)
    {
      v87 = (unint64_t *)&v83->__shared_owners_;
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
    }
    v89 = as::server::LegacySessionManager::Instance(v86);
    v90 = (os_unfair_lock_s *)*((_QWORD *)v89 + 31);
    if (v90)
    {
      os_unfair_lock_lock(*((os_unfair_lock_t *)v89 + 31));
      as::server::DeviceTimeObserver::sessionIsActive((as::server::DeviceTimeObserver *)&v90[2], a2, 1);
      os_unfair_lock_unlock(v90);
    }
    if ((objc_msgSend(v81, "isEqualToString:", *MEMORY[0x1E0D48F38]) & 1) != 0
      || objc_msgSend(v81, "isEqualToString:", *MEMORY[0x1E0D48FC8]))
    {
      v91 = v148;
      if (!v148)
      {
        v124 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v124);
      }
      v92 = v149;
      if (v149)
      {
        v93 = (unint64_t *)&v149->__shared_owners_;
        do
          v94 = __ldxr(v93);
        while (__stxr(v94 + 1, v93));
        do
          v95 = __ldaxr(v93);
        while (__stlxr(v95 - 1, v93));
        if (!v95)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
      atomic_store(1u, (unsigned __int8 *)&v91[80]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[57],char [57],0>((uint64_t)v131, "Setting Play state to Running for Phone/TTY dummy player");
      v96 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v142, "side_effect");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v131);
      v97 = *(_BYTE *)v96;
      *(_BYTE *)v96 = v131[0];
      v131[0] = v97;
      v98 = (uint64_t *)v96[1];
      v96[1] = (uint64_t)v132;
      v132 = v98;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v96);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v131);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v132, v131[0]);
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      as::server::MXAccessor<as::server::FFDependentACQ>::GetProperty((void *)*MEMORY[0x1E0D49C48], (uint64_t)&__p);
      v100 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v101 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v102 = __ldaxr(v101);
        while (__stlxr(v102 - 1, v101));
        if (!v102)
        {
          ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
          std::__shared_weak_count::__release_weak(v100);
        }
      }
      if ((_DWORD)__p)
      {
        v103 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v99));
        if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "AudioSessionServerImp.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 879;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = v25;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = (_DWORD)__p;
          _os_log_impl(&dword_1C895C000, v103, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ShouldSessionInputBeMuted _MXSessionCopyProperty for property kMXSessionProperty_ShouldInputBeMuted for subsession ref %p returned error %d", buf, 0x22u);
        }

        v105 = 3;
      }
      else
      {
        v106 = (as::server *)v138;
        v107 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v106));
        if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
        {
          v108 = -[as::server BOOLValue](v106, "BOOLValue");
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "AudioSessionServerImp.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 883;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = (_DWORD)a2;
          *(_WORD *)&buf[24] = 1024;
          *(_DWORD *)&buf[26] = v108;
          _os_log_impl(&dword_1C895C000, v107, OS_LOG_TYPE_DEFAULT, "%25s:%-5d MX set session 0x%x to input muted=%d", buf, 0x1Eu);
        }

        v109 = -[as::server BOOLValue](v106, "BOOLValue");
        if (v109)
          v105 = 67;
        else
          v105 = 3;
      }
      if (v148)
      {
        os_unfair_lock_unlock(v148 + 158);
        v150 = 0;
      }
      if ((v110 & 1) == 0)
      {
        if ((_DWORD)v104)
        {
          as::OffloadActivationOffACQ(void)::enabled = _os_feature_enabled_impl();
        }
      }
      if (as::OffloadActivationOffACQ(void)::enabled)
      {
        as::server::GetAudioControlQueue(v104);
        v111 = (void *)objc_claimAutoreleasedReturnValue();
        v126[0] = MEMORY[0x1E0C809B0];
        v126[1] = 3221225472;
        v126[2] = ___ZN2as6server6ff_acq35AudioSessionServerActivateWithFlagsEPU39objcproto28AVAudioSessionServerDelegate11objc_objectjRK13audit_token_tj_block_invoke;
        v126[3] = &unk_1E82059F0;
        v128 = v91 + 79;
        v129 = (int)a2;
        v130 = v105;
        v127 = v7;
        as::server::DispatchBlock(v111, v126, 1, (uint64_t)"AudioSessionServerActivateWithFlags", (uint64_t)"AudioSessionServerImp.mm", 1047, 0, 0);

      }
      else
      {
        as::server::require_acq::AudioSessionServerSetClientPlayState(a2, v91[79]._os_unfair_lock_opaque, (AudioSession *)&v91[79], (AudioSession *)v105, 1u, 0, 0);
        objc_msgSend(v7, "setTelephonyClientSessionID:", a2);
      }
    }

LABEL_157:
    v112 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(IsSessionActive));
    if (os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT))
    {
      v113 = SHIBYTE(v147.__r_.__value_.__r.__words[2]);
      v114 = v147.__r_.__value_.__r.__words[0];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v142, -1, 0x20u, 0, 0, &__p);
      v115 = &v147;
      if (v113 < 0)
        v115 = (std::string *)v114;
      if (v139 >= 0)
        v116 = (std::string *)&__p;
      else
        v116 = (std::string *)__p;
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "AudioSessionServerImp.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1056;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v151;
      *(_WORD *)&buf[28] = 2080;
      *(_QWORD *)&buf[30] = v115;
      v153 = 2080;
      v154 = v116;
      _os_log_impl(&dword_1C895C000, v112, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
      if (v139 < 0)
        operator delete(__p);
    }

    v16 = 0;
    goto LABEL_166;
  }
  v16 = as::server::TranslateCMSessionErrorCode((uint64_t)"cm_session_begin_interruption", (uint64_t *)&v147, 997, v66);
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v136 = 257;
  CACFDictionary::AddSInt32(&Mutable, CFSTR("cm_session_begin_interruption"), v16);
  CAReportingClientSendMessage();
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[26],char [26],0>((uint64_t)v133, "early exit due to failure");
  v67 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v142, "->");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v133);
  v68 = *(_BYTE *)v67;
  *(_BYTE *)v67 = v133[0];
  v133[0] = v68;
  v69 = (uint64_t *)v67[1];
  v67[1] = (uint64_t)v134;
  v134 = v69;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v67);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v133);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v134, v133[0]);
  v71 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v70));
  if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
  {
    v72 = SHIBYTE(v147.__r_.__value_.__r.__words[2]);
    v73 = v147.__r_.__value_.__r.__words[0];
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v142, -1, 0x20u, 0, 0, &__p);
    v74 = &v147;
    if (v72 < 0)
      v74 = (std::string *)v73;
    if (v139 >= 0)
      v75 = (std::string *)&__p;
    else
      v75 = (std::string *)__p;
    *(_DWORD *)buf = 136316162;
    *(_QWORD *)&buf[4] = "AudioSessionServerImp.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1006;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = v151;
    *(_WORD *)&buf[28] = 2080;
    *(_QWORD *)&buf[30] = v74;
    v153 = 2080;
    v154 = v75;
    _os_log_impl(&dword_1C895C000, v71, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
    if (v139 < 0)
      operator delete(__p);
  }

  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
LABEL_166:
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v142);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v143, v142[0]);
  if (cf)
    CFRelease(cf);
LABEL_168:
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v147.__r_.__value_.__l.__data_);
LABEL_170:
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor(&v148);

  return v16;
}

void sub_1C89AE9E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,const void *a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  void *v44;
  void *v45;
  uint64_t v46;

  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&a27);
  applesauce::CF::ObjectRef<void const*>::~ObjectRef(&a38);
  if (a44 < 0)
    operator delete(__p);
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)(v46 - 216));

  _Unwind_Resume(a1);
}

uint64_t as::server::ff_acq::GetInterruptionPriority(as::server::ff_acq *this, const void *a2)
{
  as::server *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  NSObject *v6;
  uint64_t v7;
  int v9;
  id v10;
  _BYTE buf[18];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  as::server::MXAccessor<as::server::FFDependentACQ>::GetProperty((void *)*MEMORY[0x1E0D495F8], (uint64_t)&v9);
  v3 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v4 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v9 || (v2 = (as::server *)v10) == 0)
  {
    v6 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v2));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AudioSessionServerImp.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 905;
      _os_log_impl(&dword_1C895C000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d Error reading kMXSessionProperty_ClientPriority. Assuming default priority.", buf, 0x12u);
    }
    v7 = 0;
  }
  else
  {
    v7 = objc_msgSend(v10, "intValue");
  }

  return v7;
}

void sub_1C89AED3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<int &,int,0>(uint64_t a1, int *a2)
{
  uint64_t v3;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = *a2;
  *(_BYTE *)a1 = 5;
  *(_QWORD *)(a1 + 8) = v3;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

uint64_t ___ZN2as6server6ff_acq35AudioSessionServerActivateWithFlagsEPU39objcproto28AVAudioSessionServerDelegate11objc_objectjRK13audit_token_tj_block_invoke(uint64_t a1)
{
  as::server::require_acq::AudioSessionServerSetClientPlayState((AudioSession *)*(unsigned int *)(a1 + 48), **(_DWORD **)(a1 + 40), *(AudioSession **)(a1 + 40), (AudioSession *)*(unsigned int *)(a1 + 52), 1u, 0, 0);
  return objc_msgSend(*(id *)(a1 + 32), "setTelephonyClientSessionID:", *(unsigned int *)(a1 + 48));
}

uint64_t as::server::ff_acq::AudioSessionServerDeactivateAndSetPriority(void *a1, uint64_t a2, as::server::AudioSessionInfoAccessor *a3, uint64_t a4)
{
  id v7;
  as::server::ConstAudioSessionInfo *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  as::server *DefaultSubsessionRef;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  as::server *v16;
  int v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  NSObject *v21;
  uint64_t i;
  as::server *v23;
  NSObject *v24;
  void **v25;
  uint64_t v26;
  NSObject *v27;
  const char *v28;
  NSObject *v29;
  as::server *v30;
  int v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  NSObject *v35;
  as::server *v36;
  void *v37;
  as::server *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  NSObject *v42;
  NSObject *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v48;
  void *__p[2];
  char v50;
  _BYTE v51[8];
  uint64_t *v52;
  as::server::ConstAudioSessionInfo *v53;
  std::__shared_weak_count *v54;
  _BYTE cf[28];
  __int16 v56;
  const char *v57;
  __int16 v58;
  unint64_t v59;
  _BYTE v60[10];
  void *v61;
  uint64_t *v62;
  void **v63;
  char v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  if (!v7)
  {
    v48 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v48);
  }
  as::server::ConstAudioSessionInfoAccessor::ConstAudioSessionInfoAccessor((as::server::ConstAudioSessionInfoAccessor *)&v53, a2);
  v8 = v53;
  if (!v53)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)cf, "sessionID");
    *(_QWORD *)&cf[16] = cf;
    cf[24] = 1;
    BYTE2(v57) = 6;
    v59 = a2;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v57 + 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v57 + 2);
    *(_QWORD *)v60 = (char *)&v57 + 2;
    v60[8] = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v61, (uint64_t)cf, 2, 1, 2);
    v63 = &v61;
    v64 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v51, (uint64_t)&v61, 1, 1, 2);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v61);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v62, v61);
    for (i = 0; i != -64; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v57 + i + 2);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v60[i - 8], *((unsigned __int8 *)&v57 + i + 2));
    }
    v24 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v23));
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      v61 = 0;
      v62 = 0;
      v63 = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v51, -1, 0x20u, 0, 0, __p);
      if (v50 >= 0)
        v25 = __p;
      else
        v25 = (void **)__p[0];
      *(_DWORD *)cf = 136316418;
      *(_QWORD *)&cf[4] = "AudioSessionServerImp.mm";
      *(_WORD *)&cf[12] = 1024;
      *(_DWORD *)&cf[14] = 1071;
      *(_WORD *)&cf[18] = 2080;
      *(_QWORD *)&cf[20] = "deactivate_and_set_priority";
      v56 = 2080;
      v57 = "Session lookup failed";
      v58 = 2080;
      v59 = (unint64_t)&v61;
      *(_WORD *)v60 = 2080;
      *(_QWORD *)&v60[2] = v25;
      _os_log_impl(&dword_1C895C000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d { \"action\":\"%s\", \"error\":\"%s\", \"session\":%s, \"details\":%s }", cf, 0x3Au);
      if (v50 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v63) < 0)
        operator delete(v61);
    }

    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v51);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v52, v51[0]);
    v26 = 561210739;
    goto LABEL_57;
  }
  v9 = v54;
  if (v54)
  {
    p_shared_owners = (unint64_t *)&v54->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  DefaultSubsessionRef = (as::server *)as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v8, cf);
  v13 = *(_QWORD *)cf;
  if (*(_QWORD *)cf)
    CFRelease(*(CFTypeRef *)cf);
  if (!v9)
    goto LABEL_12;
  v14 = (unint64_t *)&v9->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (v13)
      goto LABEL_13;
  }
  else
  {
LABEL_12:
    if (v13)
    {
LABEL_13:
      *(_QWORD *)cf = 0;
      *(_QWORD *)&cf[8] = 0;
      v16 = (as::server *)as::server::MXAccessor<as::server::FFDependentACQ>::SetProperty(v13, (uint64_t)cf, (void *)*MEMORY[0x1E0D49748], MEMORY[0x1E0C9AAB0]);
      v17 = (int)v16;
      v18 = *(std::__shared_weak_count **)&cf[8];
      if (!*(_QWORD *)&cf[8])
        goto LABEL_17;
      v19 = (unint64_t *)(*(_QWORD *)&cf[8] + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
        if (!v17)
          goto LABEL_35;
      }
      else
      {
LABEL_17:
        if (!(_DWORD)v16)
          goto LABEL_35;
      }
      v21 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v16));
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)cf = 136315650;
        *(_QWORD *)&cf[4] = "AudioSessionServerImp.mm";
        *(_WORD *)&cf[12] = 1024;
        *(_DWORD *)&cf[14] = 1089;
        *(_WORD *)&cf[18] = 1024;
        *(_DWORD *)&cf[20] = v17;
        _os_log_impl(&dword_1C895C000, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d SetProperty of kCMSessionProperty_DoNotNotifyOtherSessionsOnNextInactive failed with code %d", cf, 0x18u);
      }
LABEL_35:
      *(_QWORD *)cf = 0;
      *(_QWORD *)&cf[8] = 0;
      v30 = (as::server *)as::server::MXAccessor<as::server::FFDependentACQ>::SetProperty(v13, (uint64_t)cf, (void *)*MEMORY[0x1E0D49750], MEMORY[0x1E0C9AAB0]);
      v31 = (int)v30;
      v32 = *(std::__shared_weak_count **)&cf[8];
      if (!*(_QWORD *)&cf[8])
        goto LABEL_39;
      v33 = (unint64_t *)(*(_QWORD *)&cf[8] + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
        if (!v31)
          goto LABEL_43;
      }
      else
      {
LABEL_39:
        if (!(_DWORD)v30)
          goto LABEL_43;
      }
      v35 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v30));
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)cf = 136315650;
        *(_QWORD *)&cf[4] = "AudioSessionServerImp.mm";
        *(_WORD *)&cf[12] = 1024;
        *(_DWORD *)&cf[14] = 1095;
        *(_WORD *)&cf[18] = 1024;
        *(_DWORD *)&cf[20] = v31;
        _os_log_impl(&dword_1C895C000, v35, OS_LOG_TYPE_DEFAULT, "%25s:%-5d SetProperty of kCMSessionProperty_DoNotResetAudioCategoryOnNextInactive failed with code %d", cf, 0x18u);
      }
LABEL_43:
      v36 = (as::server *)as::server::ff_acq::AudioSessionServerDeactivateWithFlags(v7, a2, a3, 0);
      v26 = (uint64_t)v36;
      if (!(_DWORD)v36 || (_DWORD)v36 == 560030580)
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a4);
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        *(_QWORD *)cf = 0;
        *(_QWORD *)&cf[8] = 0;
        v38 = (as::server *)as::server::MXAccessor<as::server::FFDependentACQ>::SetProperty(v13, (uint64_t)cf, (void *)*MEMORY[0x1E0D495F8], v37);
        v26 = (uint64_t)v38;
        v39 = *(std::__shared_weak_count **)&cf[8];
        if (!*(_QWORD *)&cf[8])
          goto LABEL_49;
        v40 = (unint64_t *)(*(_QWORD *)&cf[8] + 8);
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
          if ((_DWORD)v26)
          {
LABEL_50:
            v42 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v38));
            if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)cf = 136315650;
              *(_QWORD *)&cf[4] = "AudioSessionServerImp.mm";
              *(_WORD *)&cf[12] = 1024;
              *(_DWORD *)&cf[14] = 1112;
              *(_WORD *)&cf[18] = 1024;
              *(_DWORD *)&cf[20] = v26;
              _os_log_impl(&dword_1C895C000, v42, OS_LOG_TYPE_DEFAULT, "%25s:%-5d SetProperty of kCMSessionProperty_ClientPriority failed with code %d", cf, 0x18u);
            }
          }
        }
        else
        {
LABEL_49:
          if ((_DWORD)v38)
            goto LABEL_50;
        }

        goto LABEL_57;
      }
      v43 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v36));
      if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)cf = 136315650;
        *(_QWORD *)&cf[4] = "AudioSessionServerImp.mm";
        *(_WORD *)&cf[12] = 1024;
        *(_DWORD *)&cf[14] = 1104;
        *(_WORD *)&cf[18] = 1024;
        *(_DWORD *)&cf[20] = v26;
        v28 = "%25s:%-5d Deactivation of session failed with code %d";
        v29 = v43;
        goto LABEL_54;
      }
      goto LABEL_57;
    }
  }
  v26 = 2003329396;
  v27 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(DefaultSubsessionRef));
  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)cf = 136315650;
    *(_QWORD *)&cf[4] = "AudioSessionServerImp.mm";
    *(_WORD *)&cf[12] = 1024;
    *(_DWORD *)&cf[14] = 1077;
    *(_WORD *)&cf[18] = 1024;
    *(_DWORD *)&cf[20] = a2;
    v28 = "%25s:%-5d Cannot get MXSessionRef for id: 0x%x";
    v29 = v27;
LABEL_54:
    _os_log_impl(&dword_1C895C000, v29, OS_LOG_TYPE_ERROR, v28, cf, 0x18u);
  }
LABEL_57:
  v44 = v54;
  if (v54)
  {
    v45 = (unint64_t *)&v54->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }

  return v26;
}

void sub_1C89AF4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t as::server::MXAccessor<as::server::FFDependentACQ>::SetProperty(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  void *v8;
  uint64_t v9;

  v6 = a3;
  v7 = a4;
  if (!v7)
    goto LABEL_4;
  objc_opt_class();
  v8 = v7;
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {

LABEL_4:
    v8 = 0;
  }
  v9 = as::server::FFDependentACQ::SetPropertyMX(a1, v6, v8);

  return v9;
}

void sub_1C89AF650(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t as::server::ff_acq::AudioSessionServerDeactivateWithFlags(void *a1, uint64_t a2, as::server::AudioSessionInfoAccessor *a3, unsigned int a4)
{
  id v7;
  _anonymous_namespace_ *v8;
  const audit_token_t *v9;
  uint64_t ProxyProcessPID;
  os_unfair_lock_s *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  os_unfair_lock_s *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  as::server *DefaultSubsessionRef;
  as::server::ff_acq *v24;
  unint64_t *v25;
  unint64_t v26;
  NSObject *v27;
  std::string *v28;
  void **v29;
  const void *v30;
  os_unfair_lock_s *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint32_t os_unfair_lock_opaque;
  unint64_t v36;
  os_unfair_lock_s *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  as::server *v41;
  unint64_t *v42;
  unint64_t v43;
  NSObject *v44;
  int v45;
  std::string::size_type v46;
  std::string *v47;
  void **v48;
  NSObject *v49;
  os_unfair_lock_s *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint32_t v54;
  unint64_t v55;
  os_unfair_lock_s *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  int os_unfair_lock_opaque_low;
  unint64_t v62;
  __int128 v63;
  SecTaskRef v64;
  __int128 v65;
  SecTaskRef v66;
  CFTypeRef v67;
  as::server *v68;
  uint64_t *v69;
  NSObject *v70;
  int v71;
  std::string::size_type v72;
  std::string *v73;
  void **v74;
  unsigned __int8 v75;
  const void *v76;
  uint64_t CMPlayState;
  os_unfair_lock_s *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unsigned __int8 v84;
  void *v85;
  const void *v86;
  as::server *v87;
  NSObject *v88;
  int v89;
  std::string::size_type v90;
  std::string *v91;
  void **v92;
  as::server *v93;
  NSObject *v94;
  id v95;
  int v96;
  as::server *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  NSObject *v101;
  uint64_t *v102;
  unsigned __int8 v103;
  uint64_t *v104;
  id v105;
  int v106;
  as::server *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  NSObject *v111;
  uint64_t *v112;
  unsigned __int8 v113;
  uint64_t *v114;
  id v115;
  int v116;
  as::server *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  NSObject *v121;
  id v122;
  int v123;
  as::server *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  NSObject *v128;
  unsigned __int8 v129;
  as::server *v130;
  int v131;
  NSObject *v132;
  os_unfair_lock_s *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  as::server::LegacySessionManager *v137;
  unint64_t *v138;
  unint64_t v139;
  void *v140;
  os_unfair_lock_s *v141;
  as::server::AudioSessionInfo *v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  as::server *v146;
  unint64_t *v147;
  unint64_t v148;
  NSObject *v149;
  int v150;
  std::string::size_type v151;
  std::string *v152;
  void **v153;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unsigned __int8 v165[8];
  uint64_t *v166;
  unsigned __int8 v167[8];
  uint64_t *v168;
  _QWORD v169[4];
  id v170;
  int v171;
  int v172;
  uint64_t *v173[2];
  unsigned __int8 v174[8];
  uint64_t *v175;
  audit_token_t token;
  audit_token_t v177;
  CFTypeRef v178;
  CFTypeRef cf;
  unsigned __int8 v180[8];
  uint64_t *v181;
  void *__p[2];
  char v183;
  std::string v184;
  os_unfair_lock_s *v185;
  std::__shared_weak_count *v186;
  char v187;
  _BYTE buf[38];
  __int16 v189;
  std::string *v190;
  __int16 v191;
  void **v192;
  char v193[16];
  uint64_t v194;

  v194 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  if (!v7)
  {
    v155 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v155);
  }
  strcpy(v193, "deactivate");
  v8 = (_anonymous_namespace_ *)as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor((as::server::AudioSessionInfoAccessor *)&v185, a2);
  if (!v185)
  {
    v16 = 561210739;
    goto LABEL_216;
  }
  v11 = v185;
  if (!v185)
  {
    v156 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v156);
  }
  v12 = ProxyProcessPID;
  v13 = v186;
  *(_QWORD *)buf = v185;
  *(_QWORD *)&buf[8] = v186;
  if (v186)
  {
    p_shared_owners = (unint64_t *)&v186->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  if (SHIBYTE(v11[55]._os_unfair_lock_opaque) < 0)
    std::string::__init_copy_ctor_external(&v184, *(const std::string::value_type **)&v11[50]._os_unfair_lock_opaque, *(_QWORD *)&v11[52]._os_unfair_lock_opaque);
  else
    v184 = *(std::string *)&v11[50]._os_unfair_lock_opaque;
  if (v13)
  {
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = v185;
  if (!v185)
  {
    v157 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v157);
  }
  v20 = v186;
  if (v186)
  {
    v21 = (unint64_t *)&v186->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  DefaultSubsessionRef = (as::server *)as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v19, buf);
  v24 = *(as::server::ff_acq **)buf;
  if (*(_QWORD *)buf)
    CFRelease(*(CFTypeRef *)buf);
  if (!v20)
    goto LABEL_26;
  v25 = (unint64_t *)&v20->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (v26)
  {
LABEL_26:
    if (v24)
      goto LABEL_27;
LABEL_68:
    v16 = 2003329396;
    v49 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(DefaultSubsessionRef));
    if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AudioSessionServerImp.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1137;
      _os_log_impl(&dword_1C895C000, v49, OS_LOG_TYPE_DEBUG, "%25s:%-5d No valid CMSession", buf, 0x12u);
    }
    goto LABEL_214;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (!v24)
    goto LABEL_68;
LABEL_27:
  v27 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(DefaultSubsessionRef));
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = &v184;
    else
      v28 = (std::string *)v184.__r_.__value_.__r.__words[0];
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v180, -1, 0x20u, 0, 0, __p);
    if (v183 >= 0)
      v29 = __p;
    else
      v29 = (void **)__p[0];
    *(_DWORD *)buf = 136316162;
    *(_QWORD *)&buf[4] = "AudioSessionServerImp.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1142;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = v193;
    *(_WORD *)&buf[28] = 2080;
    *(_QWORD *)&buf[30] = v28;
    v189 = 2080;
    v190 = (std::string *)v29;
    _os_log_impl(&dword_1C895C000, v27, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
    if (v183 < 0)
      operator delete(__p[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v180);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v181, v180[0]);
  }

  v31 = v185;
  if (!v185)
  {
    v158 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v158);
  }
  v32 = v186;
  if (v186)
  {
    v33 = (unint64_t *)&v186->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
    os_unfair_lock_opaque = v31[23]._os_unfair_lock_opaque;
    do
      v36 = __ldaxr(v33);
    while (__stlxr(v36 - 1, v33));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
    if (os_unfair_lock_opaque == 1935897189)
      goto LABEL_46;
LABEL_71:
    v178 = 0;
    if (!as::server::ff_acq::GetInterruptionPriority(v24, v30))
    {
LABEL_109:
      {
        as::OffloadActivationOffACQ(void)::enabled = _os_feature_enabled_impl();
      }
      if (as::server::IsSessionActive(v24, (const void *)(as::OffloadActivationOffACQ(void)::enabled == 0)))
      {
        if (v185)
        {
          os_unfair_lock_unlock(v185 + 158);
          v187 = 0;
        }
        CMPlayState = as::server::ff_acq::GetCMPlayState(v24, v76);
        v78 = v185;
        if (!v185)
        {
          v161 = _os_crash();
          as::server::require_acq::AudioSessionServerSetClientPlayState(v161);
        }
        v16 = CMPlayState;
        v79 = v186;
        if (v186)
        {
          v80 = (unint64_t *)&v186->__shared_owners_;
          do
            v81 = __ldxr(v80);
          while (__stxr(v81 + 1, v80));
          v82 = v78[22]._os_unfair_lock_opaque;
          do
            v83 = __ldaxr(v80);
          while (__stlxr(v83 - 1, v80));
          if (!v83)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
        else
        {
          v82 = v185[22]._os_unfair_lock_opaque;
        }
        if ((v84 & 1) == 0)
        {
          if ((_DWORD)CMPlayState)
          {
            as::OffloadActivationOffACQ(void)::enabled = _os_feature_enabled_impl();
          }
        }
        if (as::OffloadActivationOffACQ(void)::enabled)
        {
          as::server::GetAudioControlQueue((as::server *)CMPlayState);
          v85 = (void *)objc_claimAutoreleasedReturnValue();
          v169[0] = MEMORY[0x1E0C809B0];
          v169[1] = 3221225472;
          v169[2] = ___ZN2as6server6ff_acq37AudioSessionServerDeactivateWithFlagsEPU39objcproto28AVAudioSessionServerDelegate11objc_objectjRK13audit_token_tj_block_invoke;
          v169[3] = &unk_1E8205A18;
          v170 = v7;
          v171 = a2;
          v172 = v82;
          as::server::DispatchBlock(v85, v169, 1, (uint64_t)"AudioSessionServerDeactivateWithFlags", (uint64_t)"AudioSessionServerImp.mm", 1214, 0, 0);

        }
        else
        {
          objc_msgSend(v7, "handleInterruptionWithID:clientPID:interruptionState:interruptionInfo:", a2, v82, 0, 0);
        }
        if ((_DWORD)v16)
        {
          v87 = (as::server *)as::server::ff_acq::GetCMPlayState(v24, v86);
          v88 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v87));
          if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
          {
            v89 = SHIBYTE(v184.__r_.__value_.__r.__words[2]);
            v90 = v184.__r_.__value_.__r.__words[0];
            v174[0] = 0;
            v175 = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v174);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v174);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v174, -1, 0x20u, 0, 0, __p);
            v91 = &v184;
            if (v89 < 0)
              v91 = (std::string *)v90;
            v92 = (void **)__p[0];
            *(_DWORD *)buf = 136316418;
            if (v183 >= 0)
              v92 = __p;
            *(_QWORD *)&buf[4] = "AudioSessionServerImp.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1230;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = v193;
            *(_WORD *)&buf[28] = 2080;
            *(_QWORD *)&buf[30] = "deactivating a session that has running I/Os";
            v189 = 2080;
            v190 = v91;
            v191 = 2080;
            v192 = v92;
            _os_log_impl(&dword_1C895C000, v88, OS_LOG_TYPE_ERROR, "%25s:%-5d { \"action\":\"%s\", \"error\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x3Au);
            if (v183 < 0)
              operator delete(__p[0]);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v174);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v175, v174[0]);
          }

          v94 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v93));
          if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "AudioSessionServerImp.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1235;
            _os_log_impl(&dword_1C895C000, v94, OS_LOG_TYPE_DEBUG, "%25s:%-5d Session was active -- setting kCMSessionProperty_IsPlaying property to Stopped", buf, 0x12u);
          }

          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = 0;
          v95 = (id)*MEMORY[0x1E0D49908];
          v96 = as::server::MXAccessor<as::server::FFDependentACQ>::SetProperty((uint64_t)v24, (uint64_t)buf, v95, MEMORY[0x1E0C9AAA0]);

          v98 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v99 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v100 = __ldaxr(v99);
            while (__stlxr(v100 - 1, v99));
            if (!v100)
            {
              ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
              std::__shared_weak_count::__release_weak(v98);
            }
          }
          if (v96)
          {
            v101 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v97));
            if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "AudioSessionServerImp.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1240;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v96;
              _os_log_impl(&dword_1C895C000, v101, OS_LOG_TYPE_ERROR, "%25s:%-5d Set property for kCMSessionProperty_IsPlaying failed with code: %d", buf, 0x18u);
            }

          }
          v167[0] = 4;
          v168 = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v167);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v167);
          v102 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v180, "IsRecording");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v167);
          v103 = *(_BYTE *)v102;
          *(_BYTE *)v102 = v167[0];
          v167[0] = v103;
          v104 = (uint64_t *)v102[1];
          v102[1] = (uint64_t)v168;
          v168 = v104;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v102);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v167);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v168, v167[0]);
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = 0;
          v105 = (id)*MEMORY[0x1E0D49918];
          v106 = as::server::MXAccessor<as::server::FFDependentACQ>::SetProperty((uint64_t)v24, (uint64_t)buf, v105, MEMORY[0x1E0C9AAA0]);

          v108 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v109 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v110 = __ldaxr(v109);
            while (__stlxr(v110 - 1, v109));
            if (!v110)
            {
              ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
              std::__shared_weak_count::__release_weak(v108);
            }
          }
          if (v106)
          {
            v111 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v107));
            if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "AudioSessionServerImp.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1247;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v106;
              _os_log_impl(&dword_1C895C000, v111, OS_LOG_TYPE_ERROR, "%25s:%-5d Set property for kCMSessionProperty_IsRecording failed with code: %d", buf, 0x18u);
            }

          }
          v165[0] = 4;
          v166 = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v165);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v165);
          v112 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v180, "IsRecordingMuted");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v165);
          v113 = *(_BYTE *)v112;
          *(_BYTE *)v112 = v165[0];
          v165[0] = v113;
          v114 = (uint64_t *)v112[1];
          v112[1] = (uint64_t)v166;
          v166 = v114;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v112);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v165);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v166, v165[0]);
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = 0;
          v115 = (id)*MEMORY[0x1E0D49920];
          v116 = as::server::MXAccessor<as::server::FFDependentACQ>::SetProperty((uint64_t)v24, (uint64_t)buf, v115, MEMORY[0x1E0C9AAA0]);

          v118 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v119 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v120 = __ldaxr(v119);
            while (__stlxr(v120 - 1, v119));
            if (!v120)
            {
              ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
              std::__shared_weak_count::__release_weak(v118);
            }
          }
          v16 = 560030580;
          if (v116)
          {
            v121 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v117));
            if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "AudioSessionServerImp.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1254;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v116;
              _os_log_impl(&dword_1C895C000, v121, OS_LOG_TYPE_ERROR, "%25s:%-5d Set property for kCMSessionProperty_IsRecordingMuted failed with code: %d", buf, 0x18u);
            }

          }
        }
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        v122 = (id)*MEMORY[0x1E0D497C0];
        v123 = as::server::MXAccessor<as::server::FFDependentACQ>::SetProperty((uint64_t)v24, (uint64_t)buf, v122, MEMORY[0x1E0C9AAA0]);

        v125 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v126 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v127 = __ldaxr(v126);
          while (__stlxr(v127 - 1, v126));
          if (!v127)
          {
            ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
            std::__shared_weak_count::__release_weak(v125);
          }
        }
        if (v123)
        {
          v128 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v124));
          if (os_log_type_enabled(v128, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "AudioSessionServerImp.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1261;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v123;
            _os_log_impl(&dword_1C895C000, v128, OS_LOG_TYPE_ERROR, "%25s:%-5d Set property for kCMSessionProperty_HapticEngineIsPlaying failed with code: %d", buf, 0x18u);
          }

        }
        {
          as::OffloadActivationOffACQ(void)::enabled = _os_feature_enabled_impl();
        }
        if (as::OffloadActivationOffACQ(void)::enabled)
          v130 = (as::server *)MXSessionEndInterruption_WithSecTaskAndStatus();
        else
          v130 = (as::server *)_MXSessionEndInterruption_WithSecTaskAndStatus();
        v131 = (int)v130;
        if ((_DWORD)v130)
        {
          v132 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v130));
          if (os_log_type_enabled(v132, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "AudioSessionServerImp.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1278;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v131;
            _os_log_impl(&dword_1C895C000, v132, OS_LOG_TYPE_ERROR, "%25s:%-5d MXSessionEndInterruption failed with code: %d", buf, 0x18u);
          }

        }
        if (!v185 || (os_unfair_lock_lock(v185 + 158), v187 = 1, (v133 = v185) == 0))
        {
          v164 = _os_crash();
          as::server::require_acq::AudioSessionServerSetClientPlayState(v164);
        }
        v134 = v186;
        *(_QWORD *)buf = v185;
        *(_QWORD *)&buf[8] = v186;
        if (v186)
        {
          v135 = (unint64_t *)&v186->__shared_owners_;
          do
            v136 = __ldxr(v135);
          while (__stxr(v136 + 1, v135));
        }
        as::server::AudioSessionInfo::SetCachedActivationState((uint64_t)v133, 0, 0);
        if (v134)
        {
          v138 = (unint64_t *)&v134->__shared_owners_;
          do
            v139 = __ldaxr(v138);
          while (__stlxr(v139 - 1, v138));
          if (!v139)
          {
            ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
            std::__shared_weak_count::__release_weak(v134);
          }
        }
        v140 = as::server::LegacySessionManager::Instance(v137);
        v141 = (os_unfair_lock_s *)*((_QWORD *)v140 + 31);
        if (v141)
        {
          os_unfair_lock_lock(*((os_unfair_lock_t *)v140 + 31));
          as::server::DeviceTimeObserver::sessionIsActive((as::server::DeviceTimeObserver *)&v141[2], a2, 0);
          os_unfair_lock_unlock(v141);
        }
      }
      else
      {
        v16 = 0;
      }
      v142 = (as::server::AudioSessionInfo *)v185;
      if (!v185)
      {
        v159 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v159);
      }
      v143 = v186;
      *(_QWORD *)buf = v185;
      *(_QWORD *)&buf[8] = v186;
      if (v186)
      {
        v144 = (unint64_t *)&v186->__shared_owners_;
        do
          v145 = __ldxr(v144);
        while (__stxr(v145 + 1, v144));
      }
      as::server::AudioSessionInfo::ResetAllPlayers(v142);
      if (v143)
      {
        v147 = (unint64_t *)&v143->__shared_owners_;
        do
          v148 = __ldaxr(v147);
        while (__stlxr(v148 - 1, v147));
        if (!v148)
        {
          ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
          std::__shared_weak_count::__release_weak(v143);
        }
      }
      v149 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v146));
      if (os_log_type_enabled(v149, OS_LOG_TYPE_DEFAULT))
      {
        v150 = SHIBYTE(v184.__r_.__value_.__r.__words[2]);
        v151 = v184.__r_.__value_.__r.__words[0];
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v180, -1, 0x20u, 0, 0, __p);
        v152 = &v184;
        if (v150 < 0)
          v152 = (std::string *)v151;
        if (v183 >= 0)
          v153 = __p;
        else
          v153 = (void **)__p[0];
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = "AudioSessionServerImp.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1294;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = v193;
        *(_WORD *)&buf[28] = 2080;
        *(_QWORD *)&buf[30] = v152;
        v189 = 2080;
        v190 = (std::string *)v153;
        _os_log_impl(&dword_1C895C000, v149, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
        if (v183 < 0)
          operator delete(__p[0]);
      }

      if (v178)
        CFRelease(v178);
      goto LABEL_213;
    }
    v50 = v185;
    if (!v185)
    {
      v160 = _os_crash();
      as::server::require_acq::AudioSessionServerSetClientPlayState(v160);
    }
    v51 = v186;
    if (v186)
    {
      v52 = (unint64_t *)&v186->__shared_owners_;
      do
        v53 = __ldxr(v52);
      while (__stxr(v53 + 1, v52));
      v54 = v50[23]._os_unfair_lock_opaque;
      do
        v55 = __ldaxr(v52);
      while (__stlxr(v55 - 1, v52));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
      if (v54 == 1935830119)
        goto LABEL_81;
    }
    else if (v185[23]._os_unfair_lock_opaque == 1935830119)
    {
LABEL_81:
      v56 = v185;
      if (!v185)
      {
        v162 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v162);
      }
      v57 = v186;
      if (v186)
      {
        v58 = (unint64_t *)&v186->__shared_owners_;
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
        v60 = *(_OWORD *)&v56[17]._os_unfair_lock_opaque;
        *(_OWORD *)buf = *(_OWORD *)&v56[13]._os_unfair_lock_opaque;
        *(_OWORD *)&buf[16] = v60;
        os_unfair_lock_opaque_low = LOBYTE(v56[21]._os_unfair_lock_opaque);
        do
          v62 = __ldaxr(v58);
        while (__stlxr(v62 - 1, v58));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      else
      {
        v65 = *(_OWORD *)&v185[17]._os_unfair_lock_opaque;
        *(_OWORD *)buf = *(_OWORD *)&v185[13]._os_unfair_lock_opaque;
        *(_OWORD *)&buf[16] = v65;
        os_unfair_lock_opaque_low = LOBYTE(v185[21]._os_unfair_lock_opaque);
      }
      if (!os_unfair_lock_opaque_low)
      {
        v66 = 0;
        goto LABEL_95;
      }
      v177 = *(audit_token_t *)buf;
      v64 = SecTaskCreateWithAuditToken(0, &v177);
LABEL_94:
      v66 = v64;
LABEL_95:
      v67 = v178;
      v178 = v66;
      if (v67)
        CFRelease(v67);
      if (!v66)
      {
        v174[0] = 0;
        v175 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v174);
        v68 = (as::server *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v174);
        *(_QWORD *)buf = v12;
        if ((v12 & 0xFF00000000) != 0)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<int &,int,0>((uint64_t)v173, (int *)buf);
          v69 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v174, "controlling_PID");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator=((uint64_t)v69, (uint64_t)v173);
          v68 = (as::server *)nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(v173);
        }
        v70 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v68));
        if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
        {
          v71 = SHIBYTE(v184.__r_.__value_.__r.__words[2]);
          v72 = v184.__r_.__value_.__r.__words[0];
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v174, -1, 0x20u, 0, 0, __p);
          v73 = &v184;
          if (v71 < 0)
            v73 = (std::string *)v72;
          if (v183 >= 0)
            v74 = __p;
          else
            v74 = (void **)__p[0];
          *(_DWORD *)buf = 136316418;
          *(_QWORD *)&buf[4] = "AudioSessionServerImp.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1179;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "set_activation_state";
          *(_WORD *)&buf[28] = 2080;
          *(_QWORD *)&buf[30] = "could not get security task";
          v189 = 2080;
          v190 = v73;
          v191 = 2080;
          v192 = v74;
          _os_log_impl(&dword_1C895C000, v70, OS_LOG_TYPE_ERROR, "%25s:%-5d { \"action\":\"%s\", \"error\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x3Au);
          if (v183 < 0)
            operator delete(__p[0]);
        }

        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v174);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v175, v174[0]);
      }
      goto LABEL_109;
    }
    v63 = *((_OWORD *)a3 + 1);
    *(_OWORD *)token.val = *(_OWORD *)a3;
    *(_OWORD *)&token.val[4] = v63;
    v64 = SecTaskCreateWithAuditToken(0, &token);
    goto LABEL_94;
  }
  if (v185[23]._os_unfair_lock_opaque != 1935897189)
    goto LABEL_71;
LABEL_46:
  if (!v185 || (os_unfair_lock_unlock(v185 + 158), v187 = 0, (v37 = v185) == 0))
  {
    v163 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v163);
  }
  v38 = v186;
  *(_QWORD *)buf = v185;
  *(_QWORD *)&buf[8] = v186;
  if (v186)
  {
    v39 = (unint64_t *)&v186->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  as::server::ConstAudioSessionInfo::GetDefaultSubsessionRef(v37, &cf);
  v16 = (uint64_t)as::server::ff_acq::DeactivateSecureSession();
  v41 = (as::server *)cf;
  if (cf)
    CFRelease(cf);
  if (v38)
  {
    v42 = (unint64_t *)&v38->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v44 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v41));
  if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
  {
    v45 = SHIBYTE(v184.__r_.__value_.__r.__words[2]);
    v46 = v184.__r_.__value_.__r.__words[0];
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump((uint64_t)v180, -1, 0x20u, 0, 0, __p);
    v47 = &v184;
    if (v45 < 0)
      v47 = (std::string *)v46;
    if (v183 >= 0)
      v48 = __p;
    else
      v48 = (void **)__p[0];
    *(_DWORD *)buf = 136316162;
    *(_QWORD *)&buf[4] = "AudioSessionServerImp.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1155;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = v193;
    *(_WORD *)&buf[28] = 2080;
    *(_QWORD *)&buf[30] = v47;
    v189 = 2080;
    v190 = (std::string *)v48;
    _os_log_impl(&dword_1C895C000, v44, OS_LOG_TYPE_DEFAULT, "%25s:%-5d { \"action\":\"%s\", \"session\":%s, \"details\":%s }", buf, 0x30u);
    if (v183 < 0)
      operator delete(__p[0]);
  }

LABEL_213:
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v180);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v181, v180[0]);
LABEL_214:
  if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v184.__r_.__value_.__l.__data_);
LABEL_216:
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor(&v185);

  return v16;
}

void sub_1C89B0AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,const void *a34,uint64_t a35,uint64_t *a36)
{
  void *v36;
  uint64_t v37;

  applesauce::CF::ObjectRef<void const*>::~ObjectRef(&a34);
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&a36);
  if (*(char *)(v37 - 217) < 0)
    operator delete(*(void **)(v37 - 240));
  as::server::AudioSessionInfoAccessor::~AudioSessionInfoAccessor((os_unfair_lock_s **)(v37 - 216));

  _Unwind_Resume(a1);
}

uint64_t as::server::ff_acq::GetCMPlayState(as::server::ff_acq *this, const void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  id v7;

  as::server::MXAccessor<as::server::FFDependentACQ>::GetProperty((void *)*MEMORY[0x1E0D49550], (uint64_t)&v6);
  v2 = objc_msgSend(v7, "BOOLValue", 0);
  if (v6)
  {
    v5 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v5);
  }
  v3 = v2;

  return v3;
}

void sub_1C89B0DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ___ZN2as6server6ff_acq37AudioSessionServerDeactivateWithFlagsEPU39objcproto28AVAudioSessionServerDelegate11objc_objectjRK13audit_token_tj_block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleInterruptionWithID:clientPID:interruptionState:interruptionInfo:", *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44), 0, 0);
}

char *std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__init_with_size[abi:ne180100]<std::shared_ptr<as::server::AudioSessionInfo>*,std::shared_ptr<as::server::AudioSessionInfo>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1C89B0E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void as::server::MXAccessor<as::server::FFDependentACQ>::GetProperty(void *a1@<X2>, uint64_t a2@<X8>)
{
  id v3;
  int v4;
  id v5;

  as::server::FFDependentACQ::GetPropertyMX(a1, (uint64_t)&v4);
  *(_DWORD *)a2 = v4;
  v3 = v5;
  *(_QWORD *)(a2 + 8) = v3;

}

void as::server::FFDependentACQ::GetPropertyMX(void *a1@<X1>, uint64_t a2@<X8>)
{
  void *v5;
  unsigned __int8 v6;
  int v7;

  v5 = a1;
  {
    as::OffloadActivationOffACQ(void)::enabled = _os_feature_enabled_impl();
  }
  if (as::OffloadActivationOffACQ(void)::enabled)
    v7 = MXSessionCopyProperty();
  else
    v7 = _MXSessionCopyProperty();
  *(_DWORD *)a2 = v7;
  *(_QWORD *)(a2 + 8) = 0;

}

void sub_1C89B0F88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[57],char [57],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[57]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[57]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_1C89B1028(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t as::server::FFDependentACQ::SetPropertyMX(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a2;
  v5 = a3;
  {
    as::OffloadActivationOffACQ(void)::enabled = _os_feature_enabled_impl();
  }
  if (as::OffloadActivationOffACQ(void)::enabled)
    v7 = MXSessionSetProperty();
  else
    v7 = _MXSessionSetProperty();
  v8 = v7;

  return v8;
}

void sub_1C89B10FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C89B11A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1C89B1230(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t as::server::AudioSessionInfoAccessor::AudioSessionInfoAccessor(uint64_t a1, os_unfair_lock_s **a2)
{
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  unint64_t *p_os_unfair_lock_opaque;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    p_os_unfair_lock_opaque = (unint64_t *)&v4[2]._os_unfair_lock_opaque;
    do
      v6 = __ldxr(p_os_unfair_lock_opaque);
    while (__stxr(v6 + 1, p_os_unfair_lock_opaque));
    v3 = *(os_unfair_lock_s **)a1;
  }
  *(_BYTE *)(a1 + 16) = 0;
  if (v3)
  {
    os_unfair_lock_lock(v3 + 158);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

void sub_1C89B1324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1C89B13AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL as::server::PickableRoute::ValidateDictionary(as::server::PickableRoute *this, NSDictionary *a2)
{
  as::server::PickableRoute *v2;
  as::server::PickableRoute *v3;
  void *v4;
  void *v5;
  _BOOL8 v6;

  v2 = this;
  v3 = v2;
  v6 = 0;
  if (v2)
  {
    -[as::server::PickableRoute valueForKey:](v2, "valueForKey:", *MEMORY[0x1E0D49E50]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (v4)
    {
      -[as::server::PickableRoute valueForKey:](v3, "valueForKey:", *MEMORY[0x1E0D49E28]);
      v5 = (void *)objc_claimAutoreleasedReturnValue();

      if (v5)
        v6 = 1;
    }
  }

  return v6;
}

void sub_1C89B1444(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

as::server::PickableRoute *as::server::PickableRoute::PickableRoute(as::server::PickableRoute *this, NSDictionary *a2)
{
  NSDictionary *v3;
  NSDictionary *v4;
  std::logic_error *exception;

  v3 = a2;
  *(_QWORD *)this = v3;
  if (!as::server::PickableRoute::ValidateDictionary((as::server::PickableRoute *)v3, v4))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "bad input dictionary");
  }

  return this;
}

void sub_1C89B14D8(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;
  void *v3;

  __cxa_free_exception(v3);

  _Unwind_Resume(a1);
}

void as::server::PickableRoute::MakeUnique(as::server::PickableRoute *this@<X0>, as::server::PickableRoute **a2@<X8>)
{
  as::server::PickableRoute *v4;
  as::server::PickableRoute *v5;

  v5 = this;
  v4 = (as::server::PickableRoute *)operator new();
  as::server::PickableRoute::PickableRoute(v4, (NSDictionary *)v5);
  *a2 = v4;

}

void sub_1C89B1560(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1CAA38D28](v2, 0x80C40B8603338);
  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1C89B1548);
}

uint64_t as::server::PickableRoute::WasCurrentlyPickedRouted(id *this)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(*this, "objectForKey:", *MEMORY[0x1E0D49E48]);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "BOOLValue");

  return v2;
}

void sub_1C89B15E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t as::server::PickableRoute::IsPreferredExternalRoute(id *this)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(*this, "objectForKey:", *MEMORY[0x1E0D49E30]);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "BOOLValue");

  return v2;
}

void sub_1C89B1634(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t as::server::PickableRoute::IsActivePreferredExternalRoute(id *this)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(*this, "objectForKey:", *MEMORY[0x1E0D49E38]);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "BOOLValue");

  return v2;
}

void sub_1C89B1688(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id as::server::GetPickableRoutesFromMX(as::server *this, const void *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  void *v5;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  void *__p;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15[24];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!this)
    return (id)objc_opt_new();
  v2 = MXSessionCopyProperty();
  strcpy(v15, "get_pickable_routes");
  v13 = 0;
  v14 = 0;
  __p = 0;
  v12 = 0;
  v3 = as::server::TranslateCMSessionErrorCode((uint64_t)v15, (uint64_t *)&__p, 123, v2);
  v4 = v3;
  if (SHIBYTE(v13) < 0)
  {
    operator delete(__p);
    if (v4)
      goto LABEL_4;
LABEL_7:
    v7 = MXSessionCopyProperty();
    __p = 0;
    v12 = 0;
    v13 = 0;
    v8 = as::server::TranslateCMSessionErrorCode((uint64_t)v15, (uint64_t *)&__p, 132, v7);
    v9 = v8;
    if (SHIBYTE(v13) < 0)
    {
      operator delete(__p);
      if (v9)
        goto LABEL_9;
    }
    else if (v8)
    {
LABEL_9:
      v5 = (void *)objc_opt_new();
LABEL_13:

      goto LABEL_14;
    }
    v10 = CMSessionMgrCopyPickableRoutesForCategoryAndMode();
    v5 = 0;
    __p = 0;
    v12 = 0;
    v13 = 0;
    as::server::TranslateCMSessionErrorCode((uint64_t)v15, (uint64_t *)&__p, 141, v10);
    if (SHIBYTE(v13) < 0)
      operator delete(__p);
    goto LABEL_13;
  }
  if (!v3)
    goto LABEL_7;
LABEL_4:
  v5 = (void *)objc_opt_new();
LABEL_14:

  return v5;
}

void sub_1C89B184C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;
  void *v18;

  if (a16 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void as::server::GetCurrentlyPickedRoute(as::server *this@<X0>, as::server::PickableRoute **a2@<X8>)
{
  as::server *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  as::server *v8;
  as::server *v9;
  NSObject *v10;
  int v11;
  NSObject *v12;
  void *v13;
  id v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  void *v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v4 = this;
  v5 = -[as::server countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v15, v25, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v16;
    while (2)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v16 != v6)
          objc_enumerationMutation(v4);
        as::server::PickableRoute::MakeUnique(*(as::server::PickableRoute **)(*((_QWORD *)&v15 + 1) + 8 * i), a2);
        if (*a2)
        {
          v8 = (as::server *)as::server::PickableRoute::WasCurrentlyPickedRouted((id *)*a2);
          if ((_DWORD)v8)
          {
            v12 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v8));
            if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
            {
              v13 = *(void **)*a2;
              *(_DWORD *)buf = 136315650;
              v20 = "AS_RouteUtilities.mm";
              v21 = 1024;
              v22 = 154;
              v23 = 2112;
              v24 = v13;
              v14 = v13;
              _os_log_impl(&dword_1C895C000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d found the picked route:%@", buf, 0x1Cu);

            }
            goto LABEL_16;
          }
        }
        std::unique_ptr<as::server::PickableRoute>::reset[abi:ne180100]((id **)a2, 0);
      }
      v5 = -[as::server countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v15, v25, 16);
      if (v5)
        continue;
      break;
    }
  }

  v10 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v9));
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    v11 = -[as::server count](v4, "count", (_QWORD)v15);
    *(_DWORD *)buf = 136315650;
    v20 = "AS_RouteUtilities.mm";
    v21 = 1024;
    v22 = 161;
    v23 = 1024;
    LODWORD(v24) = v11;
    _os_log_impl(&dword_1C895C000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Did not find the picked route. Looked in %u possible routes.", buf, 0x18u);
  }

  *a2 = 0;
LABEL_16:

}

void sub_1C89B1AF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void as::server::FindMatchingPickableRoute(as::server *this@<X0>, NSArray *a2@<X1>, as::server::PickableRoute **a3@<X8>)
{
  as::server *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  const as::server::PickableRoute *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v6 = this;
  v7 = -[as::server countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v12;
    while (2)
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v12 != v8)
          objc_enumerationMutation(v6);
        as::server::PickableRoute::MakeUnique(*(as::server::PickableRoute **)(*((_QWORD *)&v11 + 1) + 8 * i), a3);
        if (*a3 && (as::server::RoutesAreEquivalent((id *)*a3, (id *)&a2->super.isa, v10) & 1) != 0)
        {

          goto LABEL_12;
        }
        std::unique_ptr<as::server::PickableRoute>::reset[abi:ne180100]((id **)a3, 0);
      }
      v7 = -[as::server countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v7)
        continue;
      break;
    }
  }

  *a3 = 0;
LABEL_12:

}

void sub_1C89B1C78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t as::server::RoutesAreEquivalent(id *this, id *a2, const as::server::PickableRoute *a3)
{
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;

  v5 = *MEMORY[0x1E0D49E50];
  v6 = (id)objc_msgSend(*this, "objectForKey:", *MEMORY[0x1E0D49E50]);
  v7 = (id)objc_msgSend(*a2, "objectForKey:", v5);
  if (objc_msgSend(v6, "isEqualToString:", v7))
  {
    v8 = *MEMORY[0x1E0D49E28];
    v9 = (id)objc_msgSend(*this, "objectForKey:", *MEMORY[0x1E0D49E28]);
    v10 = objc_msgSend(v9, "isEqualToString:", objc_msgSend(*a2, "objectForKey:", v8));

  }
  else
  {
    v10 = 0;
  }

  return v10;
}

void sub_1C89B1D78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t as::server::InterruptionIsResumable(NSArray *this, const as::server::PickableRoute *a2, NSArray *a3)
{
  const as::server::PickableRoute *v4;
  const as::server::PickableRoute *v5;
  uint64_t v6;
  as::server::PickableRoute *v8;
  as::server::PickableRoute *v9;

  v4 = a2;
  as::server::GetCurrentlyPickedRoute(v4, &v9);
  if (v9 && (as::server::RoutesAreEquivalent((id *)&this->super.isa, (id *)v9, v5) & 1) != 0)
    goto LABEL_7;
  if (!as::server::PickableRoute::IsPreferredExternalRoute((id *)&this->super.isa))
  {
LABEL_9:
    v6 = 0;
    goto LABEL_10;
  }
  as::server::FindMatchingPickableRoute(v4, this, &v8);
  if (!v8 || (as::server::PickableRoute::IsActivePreferredExternalRoute((id *)v8) & 1) == 0)
  {
    std::unique_ptr<as::server::PickableRoute>::reset[abi:ne180100]((id **)&v8, 0);
    goto LABEL_9;
  }
  std::unique_ptr<as::server::PickableRoute>::reset[abi:ne180100]((id **)&v8, 0);
LABEL_7:
  v6 = 1;
LABEL_10:
  std::unique_ptr<as::server::PickableRoute>::reset[abi:ne180100]((id **)&v9, 0);

  return v6;
}

void sub_1C89B1E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id *a9, id *a10)
{
  void *v10;

  std::unique_ptr<as::server::PickableRoute>::reset[abi:ne180100](&a9, 0);
  std::unique_ptr<as::server::PickableRoute>::reset[abi:ne180100](&a10, 0);

  _Unwind_Resume(a1);
}

void sub_1C89B1F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1C89B1F98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

as::server::LegacySessionManager *as::server::LegacySessionManager::LegacySessionManager(as::server::LegacySessionManager *this)
{
  uint64_t *v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  as::server *v6;
  int v7;
  NSObject *v8;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 4) = (char *)this + 40;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 8) = (char *)this + 72;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 11) = (char *)this + 96;
  *((_QWORD *)this + 14) = 850045863;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 28) = 0;
  *(_OWORD *)((char *)this + 164) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_QWORD *)this + 23) = (char *)this + 192;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 27) = (char *)this + 224;
  *((_DWORD *)this + 60) = 0;
  *((_QWORD *)this + 31) = 0;
  v2 = (uint64_t *)((char *)this + 248);
  {
    as::EmbeddedAudiomxdEnabled(void)::enabled = _os_feature_enabled_impl();
  }
  if (as::EmbeddedAudiomxdEnabled(void)::enabled)
  {
    v4 = operator new();
    *(_DWORD *)v4 = 0;
    *(_OWORD *)(v4 + 8) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + 56) = 0u;
    *(_QWORD *)(v4 + 72) = 0;
    v5 = *v2;
    *v2 = v4;
    if (v5)
      std::default_delete<caulk::synchronized<as::server::DeviceTimeObserver,caulk::mach::unfair_lock,caulk::empty_atomic_interface<as::server::DeviceTimeObserver>>>::operator()[abi:ne180100]((uint64_t)v2, v5);
  }
  v6 = (as::server *)CACentralStateDumpRegisterSubsystem();
  v7 = (int)v6;
  if ((_DWORD)v6)
  {
    v8 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v6));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v11 = "ServerSessionManager.mm";
      v12 = 1024;
      v13 = 89;
      v14 = 1024;
      v15 = v7;
      _os_log_impl(&dword_1C895C000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d CACentralStateDumpRegisterSubsystem failed with status:%d", buf, 0x18u);
    }
  }
  return this;
}

void sub_1C89B2208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  _QWORD **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::mutex *v11;
  uint64_t *v12;
  uint64_t v14;
  va_list va;

  va_start(va, a7);
  v14 = *v12;
  *v12 = 0;
  if (v14)
    std::default_delete<caulk::synchronized<as::server::DeviceTimeObserver,caulk::mach::unfair_lock,caulk::empty_atomic_interface<as::server::DeviceTimeObserver>>>::operator()[abi:ne180100]((uint64_t)v12, v14);
  caulk::synchronized<as::server::LegacySessionManager::MicrophoneInjectionManager,caulk::mach::unfair_lock,caulk::empty_atomic_interface<as::server::LegacySessionManager::MicrophoneInjectionManager>>::~synchronized((uint64_t)(v7 + 22));
  std::mutex::~mutex(v11);
  std::__tree<std::__value_type<NSString * {__strong},std::shared_ptr<as::server::BackgroundActivationInfo>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::shared_ptr<as::server::BackgroundActivationInfo>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::shared_ptr<as::server::BackgroundActivationInfo>>>>::destroy(v10, v7[12]);
  std::__tree<std::__value_type<int,RBSProcessHandle * {__strong}>,std::__map_value_compare<int,std::__value_type<int,RBSProcessHandle * {__strong}>,std::less<int>,true>,std::allocator<std::__value_type<int,RBSProcessHandle * {__strong}>>>::destroy(v9, v7[9]);
  std::__tree<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::__map_value_compare<as::server::ProcessIdentity,std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::less<as::server::ProcessIdentity>,true>,std::allocator<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>>>::destroy(v8, v7[5]);
  std::vector<std::shared_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void ___ZN2as6server20LegacySessionManagerC2Ev_block_invoke(uint64_t a1, __sFILE *a2)
{
  as::server::LegacySessionManager::DumpDebugState(*(os_unfair_lock_s **)(a1 + 32), a2);
}

void as::server::LegacySessionManager::DumpDebugState(os_unfair_lock_s *this, __sFILE *a2)
{
  as::server::AudioSessionInfo **v4;
  as::server::AudioSessionInfo **v5;
  int v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  void **v12;
  _BYTE buf[18];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    os_unfair_lock_lock(this);
    fprintf(a2, "There are %u sessions\n", (*(_QWORD *)&this[4]._os_unfair_lock_opaque - *(_QWORD *)&this[2]._os_unfair_lock_opaque) >> 4);
    v4 = *(as::server::AudioSessionInfo ***)&this[2]._os_unfair_lock_opaque;
    v5 = *(as::server::AudioSessionInfo ***)&this[4]._os_unfair_lock_opaque;
    if (v4 == v5)
      goto LABEL_14;
    v6 = 0;
    do
    {
      v7 = (char *)*v4 + 176;
      if (*((char *)*v4 + 199) < 0)
        v7 = *(const char **)v7;
      fprintf(a2, "%u: %s\n", ++v6, v7);
      as::server::AudioSessionInfo::DebugStateStrings(*v4, (uint64_t)buf);
      v8 = *(_QWORD *)buf;
      v9 = *(_QWORD *)&buf[8];
      while (v8 != v9)
      {
        if (*(char *)(v8 + 23) >= 0)
          v10 = (const char *)v8;
        else
          v10 = *(const char **)v8;
        fprintf(a2, "\t%s\n", v10);
        v8 += 24;
      }
      v12 = (void **)buf;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v12);
      v4 += 2;
    }
    while (v4 != v5);
    if (this)
LABEL_14:
      os_unfair_lock_unlock(this);
  }
  else
  {
    v11 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)this));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "ServerSessionManager.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 97;
      _os_log_impl(&dword_1C895C000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d State dump file null", buf, 0x12u);
    }
  }
}

void sub_1C89B2444(_Unwind_Exception *exception_object)
{
  os_unfair_lock_s *v1;

  if (v1)
    os_unfair_lock_unlock(v1);
  _Unwind_Resume(exception_object);
}

uint64_t caulk::synchronized<as::server::LegacySessionManager::MicrophoneInjectionManager,caulk::mach::unfair_lock,caulk::empty_atomic_interface<as::server::LegacySessionManager::MicrophoneInjectionManager>>::~synchronized(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 8;
  std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::destroy(a1 + 40, *(_QWORD **)(a1 + 48));
  std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::destroy(v2, *(_QWORD **)(a1 + 16));
  return a1;
}

_QWORD *std::shared_ptr<as::server::AudioSessionInfo>::operator=[abi:ne180100](_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void as::server::LegacySessionManager::RemoveSessionFromMicrophoneInjectionModeMap(os_unfair_lock_s *this, unsigned int a2)
{
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  unsigned int v4;

  v4 = a2;
  v2 = this + 44;
  v3 = this + 46;
  os_unfair_lock_lock(this + 44);
  std::__tree<std::__value_type<unsigned int,AVAudioSessionMicrophoneInjectionMode>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,AVAudioSessionMicrophoneInjectionMode>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,AVAudioSessionMicrophoneInjectionMode>>>::__erase_unique<unsigned int>((uint64_t)v3, &v4);
  os_unfair_lock_unlock(v2);
}

void sub_1C89B2558(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void as::server::LegacySessionManager::GetSessionIDsForToken(os_unfair_lock_s *this@<X0>, const audit_token_t *a2@<X1>, char **a3@<X8>)
{
  __int128 v5;
  pid_t v6;
  uint64_t v7;
  uint64_t v8;
  char **v9;
  int v10;
  char *v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  int v21;
  _OWORD v22[2];
  char v23;
  pid_t v24;
  char **v25;
  audit_token_t atoken;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v5 = *(_OWORD *)&a2->val[4];
  v27 = *(_OWORD *)a2->val;
  v28 = v5;
  *(_OWORD *)atoken.val = v27;
  *(_OWORD *)&atoken.val[4] = v5;
  v6 = audit_token_to_pid(&atoken);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  os_unfair_lock_lock(this);
  v7 = *(_QWORD *)&this[2]._os_unfair_lock_opaque;
  v8 = *(_QWORD *)&this[4]._os_unfair_lock_opaque;
  v22[0] = v27;
  v22[1] = v28;
  v23 = 1;
  v24 = v6;
  v25 = a3;
  if (v7 == v8)
    goto LABEL_22;
  do
  {
    if (as::server::ProcessIdentity::operator==(*(_QWORD *)v7 + 12, (uint64_t)v22))
    {
      v9 = v25;
      v10 = *(_DWORD *)(*(_QWORD *)v7 + 8);
      v11 = v25[1];
      v12 = (unint64_t)v25[2];
      if ((unint64_t)v11 >= v12)
      {
        v14 = *v25;
        v15 = (v11 - *v25) >> 2;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        v17 = v12 - (_QWORD)v14;
        if (v17 >> 1 > v16)
          v16 = v17 >> 1;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
          v18 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)(v25 + 2), v18);
          v14 = *v9;
          v11 = v9[1];
        }
        else
        {
          v19 = 0;
        }
        v20 = &v19[4 * v15];
        *(_DWORD *)v20 = v10;
        v13 = v20 + 4;
        while (v11 != v14)
        {
          v21 = *((_DWORD *)v11 - 1);
          v11 -= 4;
          *((_DWORD *)v20 - 1) = v21;
          v20 -= 4;
        }
        *v9 = v20;
        v9[1] = v13;
        v9[2] = &v19[4 * v18];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *(_DWORD *)v11 = v10;
        v13 = v11 + 4;
      }
      v9[1] = v13;
    }
    v7 += 16;
  }
  while (v7 != v8);
  if (this)
LABEL_22:
    os_unfair_lock_unlock(this);
}

void sub_1C89B271C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

_QWORD *as::server::LegacySessionManager::GenerateIOControllerEventForSessions(os_unfair_lock_s *this, uint64_t a2, int **a3)
{
  int *v3;
  int *v4;
  id v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  int v18;
  id v19;
  int v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[2];

  v23 = 0;
  v24 = 0;
  v25 = 0;
  v3 = *a3;
  v4 = a3[1];
  if (*a3 != v4)
  {
    do
    {
      as::server::LegacySessionManager::FindSession(this, *v3, &v21);
      if (v21)
      {
        v8 = *(id *)(v21 + 256);
        v20 = 0;
        v20 = objc_msgSend(v8, "processIdentifier");
        boost::container::dtl::flat_tree<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>,boost::container::dtl::select1st<int>,std::less<int>,boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>>::find(&v23, &v20, v26);
        if (!v23 && v24)
          __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
        if (v26[0] == v23 + 16 * v24)
        {
          v18 = v20;
          v19 = v8;
          boost::container::dtl::flat_tree<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>,boost::container::dtl::select1st<int>,std::less<int>,boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>>::insert_unique(&v23, &v18, (uint64_t)v26);

        }
      }
      v9 = v22;
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      ++v3;
    }
    while (v3 != v4);
    if (v24)
    {
      objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", *a3, (char *)a3[1] - (char *)*a3);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = v23;
      if (!v23 && v24)
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      if (v24)
      {
        v14 = v23 + 16 * v24;
        do
        {
          if (!v13)
            __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
          v15 = *(id *)(v13 + 8);
          objc_msgSend(v15, "remoteObjectProxy");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "IOControllerEvent:sessions:isDecoupledInput:", a2, v12, *((unsigned __int8 *)a3 + 24));

          v13 += 16;
        }
        while (v13 != v14);
      }

    }
  }
  return boost::container::vector<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>,boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,void>::~vector(&v23);
}

void sub_1C89B2964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  boost::container::vector<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>,boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,void>::~vector((uint64_t *)va);
  _Unwind_Resume(a1);
}

void as::server::LegacySessionManager::CreateAudioApplication(os_unfair_lock_s *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  as::server *v7;
  as::server *v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  uint64_t v12;
  NSObject *v13;
  unsigned int v14;
  int v15;
  std::string *v16;
  std::string v17;
  _BYTE buf[12];
  __int16 v19;
  int v20;
  __int16 v21;
  _DWORD v22[7];

  *(_QWORD *)&v22[5] = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = v7;
  if (!*(_BYTE *)(a2 + 88))
  {
    v10 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v7));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = *(_DWORD *)(a2 + 92);
      v12 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "ServerSessionManager.mm";
      v19 = 1024;
      v20 = 613;
      v21 = 1024;
      v22[0] = v11;
      LOWORD(v22[1]) = 2112;
      *(_QWORD *)((char *)&v22[1] + 2) = v12;
      _os_log_impl(&dword_1C895C000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Error - cannot create audio app since audit token invalid (pid: %d, bundle: %@)", buf, 0x22u);
    }
    goto LABEL_22;
  }
  v9 = *(_QWORD *)(a2 + 96);
  if (v9 == 1684825972)
  {
    as::server::LegacySessionManager::PrivateCreateDelegateAudioApp(a1, a2, v7, (_QWORD *)a4);
    goto LABEL_23;
  }
  if (v9 == 1886547832)
  {
    as::server::LegacySessionManager::PrivateCreateProxyAudioApp(a1, a2, v7, a4);
    goto LABEL_23;
  }
  if (v9 != 1886546285)
  {
    v13 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v7));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = *(_DWORD *)(a2 + 96);
      v15 = bswap32(v14);
      *(_DWORD *)&buf[1] = v15;
      if (((char)v15 - 32) > 0x5E
        || (((__int16)v15 >> 8) - 32) > 0x5E
        || ((v15 << 8 >> 24) - 32) > 0x5E
        || ((v15 >> 24) - 32) > 0x5E)
      {
        std::to_string(&v17, v14);
      }
      else
      {
        strcpy(&buf[5], "'");
        buf[0] = 39;
        std::string::basic_string[abi:ne180100]<0>(&v17, buf);
      }
      v16 = &v17;
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v16 = (std::string *)v17.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "ServerSessionManager.mm";
      v19 = 1024;
      v20 = 625;
      v21 = 2080;
      *(_QWORD *)v22 = v16;
      _os_log_impl(&dword_1C895C000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d Error - cannot create unknown application type: %s", buf, 0x1Cu);
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v17.__r_.__value_.__l.__data_);
    }

LABEL_22:
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    goto LABEL_23;
  }
  as::server::LegacySessionManager::PrivateExplicitCreatePrimaryAudioApp(a1, a2, v7, a4);
LABEL_23:

}

void sub_1C89B2C5C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void as::server::LegacySessionManager::PrivateExplicitCreatePrimaryAudioApp(os_unfair_lock_s *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  id v7;
  _BOOL8 v8;
  os_unfair_lock_s *v9;
  _BOOL8 v10;
  NSObject *v11;
  os_unfair_lock_s *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  NSObject *v18;
  int v19;
  int v20;
  NSObject *v21;
  os_unfair_lock_s *v22;
  as::server::AudioApplicationInfo *v23;
  std::__shared_weak_count *v24;
  char v25;
  os_unfair_lock_t lock[2];
  _BYTE buf[18];
  __int16 v28;
  _DWORD v29[7];

  *(_QWORD *)&v29[5] = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = as::server::ProcessIdentity::operator==(a2 + 16, a2 + 56);
  if (v8)
  {
    os_unfair_lock_lock(a1);
    lock[0] = a1;
    lock[1] = a1 + 2;
    as::server::LegacySessionManager::PrivateFindOrCreatePrimaryApplication((uint64_t)a1, (uint64_t)lock, a2, v7, (uint64_t)&v23);
    v9 = (os_unfair_lock_s *)v23;
    if (!v25)
    {
      v10 = as::server::AudioApplicationInfo::SetPrimaryClient((os_unfair_lock_s *)v23, a2, v7);
      if (!v10)
      {
        v21 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v10));
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          v22 = as::server::AudioApplicationInfo::DebugString(v9);
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "ServerSessionManager.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 649;
          v28 = 2080;
          *(_QWORD *)v29 = v22;
          _os_log_impl(&dword_1C895C000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to create primary client (app: %s)", buf, 0x1Cu);
        }

        *(_OWORD *)a4 = 0u;
        *(_OWORD *)(a4 + 16) = 0u;
        v13 = v24;
        if (!v24)
          goto LABEL_21;
LABEL_11:
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
LABEL_21:
        if (lock[0])
          os_unfair_lock_unlock(lock[0]);
        goto LABEL_23;
      }
      v11 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v10));
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v12 = as::server::AudioApplicationInfo::DebugString(v9);
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "ServerSessionManager.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 653;
        v28 = 2080;
        *(_QWORD *)v29 = v12;
        _os_log_impl(&dword_1C895C000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Explicitly created audio app from implicitly-created instance (app: %s)", buf, 0x1Cu);
      }

    }
    as::server::AudioApplicationInfo::GetPrimaryClient(v9, buf);
    v13 = v24;
    *(_QWORD *)a4 = v9;
    *(_QWORD *)(a4 + 8) = v13;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    *(_OWORD *)(a4 + 16) = *(_OWORD *)buf;
    if (!v13)
      goto LABEL_21;
    goto LABEL_11;
  }
  v18 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v8));
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    v19 = *(_DWORD *)(a2 + 52);
    v20 = *(_DWORD *)(a2 + 92);
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "ServerSessionManager.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 636;
    v28 = 1024;
    v29[0] = v19;
    LOWORD(v29[1]) = 1024;
    *(_DWORD *)((char *)&v29[1] + 2) = v20;
    _os_log_impl(&dword_1C895C000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d Error - primary application instances should have matching source\t\t\t\t\t   and creator process ids (source: %d, creator: %d)", buf, 0x1Eu);
  }
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
LABEL_23:

}

void sub_1C89B2F7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  os_unfair_lock_s *v3;
  void *v4;
  va_list va;

  va_start(va, a2);

  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (v3)
    os_unfair_lock_unlock(v3);

  _Unwind_Resume(a1);
}

void as::server::LegacySessionManager::PrivateCreateProxyAudioApp(os_unfair_lock_s *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  id v7;
  _BOOL8 v8;
  NSObject *v9;
  int v10;
  int v11;
  os_unfair_lock_s **v12;
  os_unfair_lock_s **v13;
  os_unfair_lock_s *v14;
  unint64_t *p_os_unfair_lock_opaque;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  NSObject *v23;
  int v24;
  _BYTE v25[18];
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = as::server::ProcessIdentity::operator==(a2 + 16, a2 + 56);
  if (v8)
  {
    v9 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v8));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = *(_DWORD *)(a2 + 92);
      v11 = *(_DWORD *)(a2 + 52);
      *(_DWORD *)v25 = 136315906;
      *(_QWORD *)&v25[4] = "ServerSessionManager.mm";
      *(_WORD *)&v25[12] = 1024;
      *(_DWORD *)&v25[14] = 687;
      v26 = 1024;
      v27 = v10;
      v28 = 1024;
      v29 = v11;
      _os_log_impl(&dword_1C895C000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Error - proxy application instances must not have matching source\t\t\t\t\t   and creator process ids (source: %d, creator: %d)", v25, 0x1Eu);
    }
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  else
  {
    os_unfair_lock_lock(a1);
    v12 = (os_unfair_lock_s **)std::__tree<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::__map_value_compare<as::server::ProcessIdentity,std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::less<as::server::ProcessIdentity>,true>,std::allocator<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>>>::find<as::server::ProcessIdentity>((uint64_t)&a1[8], a2 + 56);
    v13 = v12;
    if (&a1[10] == (os_unfair_lock_s *)v12)
    {
      v23 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v12));
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        v24 = *(_DWORD *)(a2 + 92);
        *(_DWORD *)v25 = 136315650;
        *(_QWORD *)&v25[4] = "ServerSessionManager.mm";
        *(_WORD *)&v25[12] = 1024;
        *(_DWORD *)&v25[14] = 695;
        v26 = 1024;
        v27 = v24;
        _os_log_impl(&dword_1C895C000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d Error - cannot create proxy instance - primary app instance (pid:%d) not found", v25, 0x18u);
      }
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
    }
    else
    {
      as::server::AudioApplicationInfo::AddProxyAudioApp(v12[9], a2, v7, v25);
      v14 = v13[10];
      *(_QWORD *)a4 = v13[9];
      *(_QWORD *)(a4 + 8) = v14;
      if (v14)
      {
        p_os_unfair_lock_opaque = (unint64_t *)&v14[2]._os_unfair_lock_opaque;
        do
          v16 = __ldxr(p_os_unfair_lock_opaque);
        while (__stxr(v16 + 1, p_os_unfair_lock_opaque));
      }
      v17 = *(_QWORD *)&v25[8];
      *(_QWORD *)(a4 + 16) = *(_QWORD *)v25;
      *(_QWORD *)(a4 + 24) = v17;
      if (v17)
      {
        v18 = (unint64_t *)(v17 + 8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
        v20 = *(std::__shared_weak_count **)&v25[8];
        if (*(_QWORD *)&v25[8])
        {
          v21 = (unint64_t *)(*(_QWORD *)&v25[8] + 8);
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
      }
    }
    if (a1)
      os_unfair_lock_unlock(a1);
  }

}

void sub_1C89B3228(_Unwind_Exception *a1)
{
  void *v1;
  os_unfair_lock_s *v2;

  if (v2)
    os_unfair_lock_unlock(v2);

  _Unwind_Resume(a1);
}

void as::server::LegacySessionManager::PrivateCreateDelegateAudioApp(os_unfair_lock_s *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  id v7;
  _BOOL8 v8;
  NSObject *v9;
  int v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  NSObject *v25;
  int v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  __int128 v35;
  os_unfair_lock_t lock[2];
  _BYTE buf[18];
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = as::server::ProcessIdentity::operator==(a2 + 16, a2 + 56);
  if (v8)
  {
    v9 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v8));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *(_DWORD *)(a2 + 92);
      v11 = *(_DWORD *)(a2 + 52);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "ServerSessionManager.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 709;
      v38 = 1024;
      v39 = v10;
      v40 = 1024;
      v41 = v11;
      _os_log_impl(&dword_1C895C000, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Warning - delegate application instances not expected to have matching source\t\t\t\t   and creator process ids (source: %d, creator: %d)", buf, 0x1Eu);
    }
  }
  os_unfair_lock_lock(a1);
  lock[0] = a1;
  lock[1] = a1 + 2;
  v35 = 0uLL;
  v12 = std::__tree<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::__map_value_compare<as::server::ProcessIdentity,std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::less<as::server::ProcessIdentity>,true>,std::allocator<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>>>::find<as::server::ProcessIdentity>((uint64_t)&a1[8], a2 + 56);
  if (&a1[10] == (os_unfair_lock_s *)v12)
  {
    v25 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v12));
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      v26 = *(_DWORD *)(a2 + 92);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "ServerSessionManager.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 718;
      v38 = 1024;
      v39 = v26;
      _os_log_impl(&dword_1C895C000, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Warning - source app instance (pid:%d) not found, will create delegate for this audit token anyway", buf, 0x18u);
    }
    as::server::LegacySessionManager::PrivateCreateAudioAppImpl((uint64_t)a1, (uint64_t)lock, a2, v7, buf);
    v27 = *(_OWORD *)buf;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v28 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
    v35 = v27;
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(p_shared_owners);
      while (__stlxr(v30 - 1, p_shared_owners));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v31 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v32 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
  else
  {
    std::shared_ptr<as::server::AudioSessionInfo>::operator=[abi:ne180100](&v35, v12 + 9);
  }
  if (!(_QWORD)v35)
  {
    v34 = _os_crash();
    as::server::require_acq::AudioSessionServerSetClientPlayState(v34);
  }
  as::server::AudioApplicationInfo::AddDelegateAudioApp((os_unfair_lock_s *)v35, a2, v7, buf);
  v13 = *((_QWORD *)&v35 + 1);
  *a4 = v35;
  a4[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = *(_QWORD *)&buf[8];
  a4[2] = *(_QWORD *)buf;
  a4[3] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v19 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v20 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
  if (*((_QWORD *)&v35 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (lock[0])
    os_unfair_lock_unlock(lock[0]);

}

void sub_1C89B3594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_unfair_lock_t lock)
{
  void *v11;

  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (lock)
    os_unfair_lock_unlock(lock);

  _Unwind_Resume(a1);
}

void as::server::LegacySessionManager::FindAudioApplicationAndVerifyOwnership(os_unfair_lock_s *this@<X0>, const as::server::ProcessIdentity *a2@<X1>, const as::server::ProcessIdentity *a3@<X2>, unsigned int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  as::server *v11;
  os_unfair_lock_s *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  as::server *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  NSObject *v23;
  int v24;
  NSObject *v25;
  int v26;
  int v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  os_unfair_lock_s *v37;
  std::__shared_weak_count *v38;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  unsigned int v46;
  __int16 v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (as::server::LegacySessionManager::VerifyAudioAppPermission((as::server::LegacySessionManager *)this, a2, a3, a5))
  {
    os_unfair_lock_lock(this);
    v11 = (as::server *)std::__tree<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::__map_value_compare<as::server::ProcessIdentity,std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::less<as::server::ProcessIdentity>,true>,std::allocator<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>>>::find<as::server::ProcessIdentity>((uint64_t)&this[8], (uint64_t)a2);
    if (&this[10] == (os_unfair_lock_s *)v11)
    {
      v23 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v11));
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        v24 = *((_DWORD *)a2 + 9);
        *(_DWORD *)buf = 136315650;
        v40 = "ServerSessionManager.mm";
        v41 = 1024;
        v42 = 740;
        v43 = 1024;
        v44 = v24;
        _os_log_impl(&dword_1C895C000, v23, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Error - app (pid:%d) not found!", buf, 0x18u);
      }
      *(_OWORD *)a6 = 0u;
      *(_OWORD *)(a6 + 16) = 0u;
    }
    else
    {
      v12 = (os_unfair_lock_s *)*((_QWORD *)v11 + 9);
      v13 = (std::__shared_weak_count *)*((_QWORD *)v11 + 10);
      v37 = v12;
      v38 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      if (!v12)
      {
        v34 = _os_crash();
        as::server::require_acq::AudioSessionServerSetClientPlayState(v34);
      }
      as::server::AudioApplicationInfo::FindAudioAppClient(v12, a4, &v35);
      v17 = v35;
      if (v35)
      {
        *(_QWORD *)a6 = v12;
        *(_QWORD *)(a6 + 8) = v13;
        if (v13)
        {
          v18 = (unint64_t *)&v13->__shared_owners_;
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
        v20 = v36;
        *(_QWORD *)(a6 + 16) = v17;
        *(_QWORD *)(a6 + 24) = v20;
        if (v20)
        {
          v21 = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
      }
      else
      {
        v25 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v16));
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          v26 = *((_DWORD *)a2 + 9);
          v27 = *((_DWORD *)a3 + 9);
          *(_DWORD *)buf = 136316162;
          v40 = "ServerSessionManager.mm";
          v41 = 1024;
          v42 = 750;
          v43 = 1024;
          v44 = v26;
          v45 = 1024;
          v46 = a4;
          v47 = 1024;
          v48 = v27;
          _os_log_impl(&dword_1C895C000, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Error - app (pid:%d) found but audio app client (id: %u) not found (caller pid: %d)", buf, 0x24u);
        }
        *(_OWORD *)a6 = 0u;
        *(_OWORD *)(a6 + 16) = 0u;
      }
      v28 = v36;
      if (v36)
      {
        v29 = (unint64_t *)&v36->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v31 = v38;
      if (v38)
      {
        v32 = (unint64_t *)&v38->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
    }
    if (this)
      os_unfair_lock_unlock(this);
  }
  else
  {
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
  }
}

void sub_1C89B38A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  os_unfair_lock_s *v11;

  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (v11)
    os_unfair_lock_unlock(v11);
  _Unwind_Resume(a1);
}

BOOL as::server::LegacySessionManager::VerifyAudioAppPermission(as::server::LegacySessionManager *this, const as::server::ProcessIdentity *a2, const as::server::ProcessIdentity *a3, int a4)
{
  _BOOL8 v7;
  _BOOL8 HasEntitlement;
  _BOOL8 result;
  NSObject *v10;
  _BOOL4 v11;
  int v12;
  int v13;
  const char *v14;
  NSObject *v15;
  os_log_type_t v16;
  NSObject *v17;
  int v18;
  int v19;
  int v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v7 = as::server::ProcessIdentity::operator==((uint64_t)a2, (uint64_t)a3);
  if (v7)
    return 1;
  if (!a4)
  {
    v10 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)v7));
    v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v11)
      return result;
    v12 = *((_DWORD *)a2 + 9);
    v13 = *((_DWORD *)a3 + 9);
    v20 = 136315906;
    v21 = "ServerSessionManager.mm";
    v22 = 1024;
    v23 = 776;
    v24 = 1024;
    v25 = v12;
    v26 = 1024;
    v27 = v13;
    v14 = "%25s:%-5d Failed to verify access to application with pid: %d from caller with pid:%d";
    v15 = v10;
    v16 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_9;
  }
  HasEntitlement = as::server::ProcessIdentity::ProcessHasEntitlement(a3, "com.apple.private.coreaudio.borrowaudioapplication.allow");
  if (HasEntitlement)
    return 1;
  v17 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog((as::server *)HasEntitlement));
  result = os_log_type_enabled(v17, OS_LOG_TYPE_INFO);
  if (result)
  {
    v18 = *((_DWORD *)a2 + 9);
    v19 = *((_DWORD *)a3 + 9);
    v20 = 136315906;
    v21 = "ServerSessionManager.mm";
    v22 = 1024;
    v23 = 770;
    v24 = 1024;
    v25 = v18;
    v26 = 1024;
    v27 = v19;
    v14 = "%25s:%-5d Lookup of audio app (pid:%d) succeeded, but calling client (pid:%d) does not have entitlement to use it";
    v15 = v17;
    v16 = OS_LOG_TYPE_INFO;
LABEL_9:
    _os_log_impl(&dword_1C895C000, v15, v16, v14, (uint8_t *)&v20, 0x1Eu);
    return 0;
  }
  return result;
}

void as::server::LegacySessionManager::FindAudioApplicationForSession(os_unfair_lock_s *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  as::server *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  __int128 v10;
  as::server *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  int v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  _BYTE v24[32];
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock(this);
  v7 = *(uint64_t **)&this[2]._os_unfair_lock_opaque;
  v8 = *(uint64_t **)&this[4]._os_unfair_lock_opaque;
  if (v7 != v8)
  {
    while (*(_DWORD *)(*v7 + 8) != a2)
    {
      v7 += 2;
      if (v7 == v8)
        goto LABEL_11;
    }
  }
  if (v7 == v8)
  {
LABEL_11:
    v15 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v6));
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v24 = 136315650;
      *(_QWORD *)&v24[4] = "ServerSessionManager.mm";
      *(_WORD *)&v24[12] = 1024;
      *(_DWORD *)&v24[14] = 789;
      *(_WORD *)&v24[18] = 1024;
      *(_DWORD *)&v24[20] = a2;
      v16 = "%25s:%-5d error - session not found: 0x%x";
      v17 = v24;
LABEL_15:
      _os_log_impl(&dword_1C895C000, v15, OS_LOG_TYPE_DEFAULT, v16, v17, 0x18u);
    }
LABEL_16:
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_17;
  }
  v9 = *v7;
  v10 = *(_OWORD *)(v9 + 68);
  *(_OWORD *)v24 = *(_OWORD *)(v9 + 52);
  *(_OWORD *)&v24[16] = v10;
  v25 = *(_QWORD *)(v9 + 84);
  v11 = (as::server *)std::__tree<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::__map_value_compare<as::server::ProcessIdentity,std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::less<as::server::ProcessIdentity>,true>,std::allocator<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>>>::find<as::server::ProcessIdentity>((uint64_t)&this[8], (uint64_t)v24);
  if (&this[10] == (os_unfair_lock_s *)v11)
  {
    v15 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v11));
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      v18 = 136315650;
      v19 = "ServerSessionManager.mm";
      v20 = 1024;
      v21 = 795;
      v22 = 1024;
      v23 = a2;
      v16 = "%25s:%-5d error - audio app instance not found for session: 0x%x";
      v17 = (uint8_t *)&v18;
      goto LABEL_15;
    }
    goto LABEL_16;
  }
  v12 = *((_QWORD *)v11 + 10);
  *a3 = *((_QWORD *)v11 + 9);
  a3[1] = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
LABEL_17:
  if (this)
    os_unfair_lock_unlock(this);
}

void sub_1C89B3C58(_Unwind_Exception *exception_object)
{
  os_unfair_lock_s *v1;

  if (v1)
    os_unfair_lock_unlock(v1);
  _Unwind_Resume(exception_object);
}

void as::server::LegacySessionManager::RemoveApplicationUponAppTermination(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  as::server *v6;
  as::server *v7;
  NSObject *v8;
  int v9;
  os_unfair_lock_s *v10;
  NSObject *v11;
  int v12;
  _OWORD v13[2];
  uint64_t v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  os_unfair_lock_s *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = *(_OWORD *)(*a2 + 68);
  v13[0] = *(_OWORD *)(*a2 + 52);
  v13[1] = v5;
  v14 = *(_QWORD *)(v4 + 84);
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v6 = (as::server *)std::__tree<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::__map_value_compare<as::server::ProcessIdentity,std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::less<as::server::ProcessIdentity>,true>,std::allocator<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>>>::find<as::server::ProcessIdentity>(a1 + 32, (uint64_t)v13);
  v7 = v6;
  if ((as::server *)(a1 + 40) == v6)
  {
    v11 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v6));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(_DWORD *)(*a2 + 8);
      *(_DWORD *)buf = 136315906;
      v16 = "ServerSessionManager.mm";
      v17 = 1024;
      v18 = 918;
      v19 = 1024;
      v20 = HIDWORD(v14);
      v21 = 1024;
      LODWORD(v22) = v12;
      _os_log_impl(&dword_1C895C000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Warning - app (pid:%d) not found for sessionID: 0x%x", buf, 0x1Eu);
    }
  }
  else
  {
    v8 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v6));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(_DWORD *)(*a2 + 8);
      v10 = as::server::AudioApplicationInfo::DebugString(*((os_unfair_lock_s **)v7 + 9));
      *(_DWORD *)buf = 136315906;
      v16 = "ServerSessionManager.mm";
      v17 = 1024;
      v18 = 922;
      v19 = 1024;
      v20 = v9;
      v21 = 2080;
      v22 = v10;
      _os_log_impl(&dword_1C895C000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Removing application due to session (0x%x) received app state terminated (app: %s)", buf, 0x22u);
    }

    std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::__remove_node_pointer((uint64_t **)(a1 + 32), (uint64_t *)v7);
    std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)v7 + 72);
    operator delete(v7);
  }
  if (a1)
    os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_1C89B3E60(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  if (v1)
    os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id as::server::LegacySessionManager::ToggleInputMuteForRecordingApplication(as::server::LegacySessionManager *this, const audit_token_t *a2)
{
  id v4;
  void *v5;
  as::server *v6;
  NSObject *v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  id v13;
  os_unfair_lock_s *v14;
  as::server *BoolPropertyDefaultToFalse;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  _QWORD v21[4];
  void *__dst[4];
  BOOL v23;
  os_unfair_lock_s *v24;
  std::__shared_weak_count *v25;
  unsigned int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  BOOL v31;
  id v32;
  _BYTE v33[128];
  uint8_t buf[24];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = *(id *)as::server::forbid_acq::SystemController::Instance(this);
  v5 = v4;
  if (v4)
  {
    v32 = 0;
    v31 = 0;
    v6 = (as::server *)objc_msgSend(v4, "copySessionIDsWithMuteValue:muteValue:", &v32, &v31);
    if ((_DWORD)v6)
    {
      v7 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v6));
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "ServerSessionManager.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 986;
        _os_log_impl(&dword_1C895C000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to get sessions to toggle mute", buf, 0x12u);
      }
    }
    else
    {
      memset(buf, 0, sizeof(buf));
      v27 = 0u;
      v28 = 0u;
      v29 = 0u;
      v30 = 0u;
      v9 = v32;
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v27, v33, 16);
      if (v10)
      {
        v11 = *(_QWORD *)v28;
        do
        {
          for (i = 0; i != v10; ++i)
          {
            if (*(_QWORD *)v28 != v11)
              objc_enumerationMutation(v9);
            v13 = *(id *)(*((_QWORD *)&v27 + 1) + 8 * i);
            v26 = objc_msgSend(v13, "unsignedIntegerValue");
            boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::insert_unique((uint64_t *)buf, &v26, (uint64_t)&v24);

          }
          v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v27, v33, 16);
        }
        while (v10);
      }

      if (*(_QWORD *)&buf[8])
      {
        if (!*(_QWORD *)buf)
          __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
        as::server::LegacySessionManager::FindAudioApplicationForSession((os_unfair_lock_s *)this, **(_DWORD **)buf, &v24);
        v14 = v24;
        BoolPropertyDefaultToFalse = (as::server *)as::server::AudioApplicationInfo::GetBoolPropertyDefaultToFalse((uint64_t)v24, (void *)*MEMORY[0x1E0D49B08], 0x6D783A3Au);
        if ((_DWORD)BoolPropertyDefaultToFalse)
        {
          as::server::AudioApplicationInfo::SetInputMuted(v14, v31, 0);
        }
        else
        {
          as::server::GetAudioControlQueue(BoolPropertyDefaultToFalse);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v21[0] = MEMORY[0x1E0C809B0];
          v21[1] = 3321888768;
          v21[2] = ___ZN2as6server20LegacySessionManager38ToggleInputMuteForRecordingApplicationERK13audit_token_t_block_invoke;
          v21[3] = &__block_descriptor_65_ea8_32c51_ZTSN5boost9container8flat_setIjNSt3__14lessIjEEvEE_e5_v8__0l;
          v23 = v31;
          boost::container::vector_alloc_holder<boost::container::new_allocator<unsigned int>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::vector_alloc_holder<boost::container::new_allocator<unsigned int> const&,unsigned long>(__dst, (const char *)buf, *(unint64_t *)&buf[8]);
          if (*(_QWORD *)&buf[8])
            memmove(__dst[0], *(const void **)buf, 4 * *(_QWORD *)&buf[8]);
          __dst[3] = (void *)a2;
          as::server::DispatchBlock(v16, v21, 1, (uint64_t)"ToggleInputMuteForRecordingApplication", (uint64_t)"ServerSessionManager.mm", 982, 0, 0);

          if (__dst[2])
            operator delete(__dst[0]);
        }
        v17 = v25;
        if (v25)
        {
          p_shared_owners = (unint64_t *)&v25->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
      }
      if (*(_QWORD *)&buf[16])
        operator delete(*(void **)buf);
    }

  }
  else
  {
    v8 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(0));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "ServerSessionManager.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 989;
      _os_log_impl(&dword_1C895C000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to get the MXSystemController instance", buf, 0x12u);
    }
  }

  NSErrorUnimplemented();
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_1C89B4250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  void *v30;
  void *v31;
  uint64_t v32;

  if (a15)
    operator delete(__p);

  std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  if (*(_QWORD *)(v32 - 96))
    operator delete(*(void **)(v32 - 112));

  _Unwind_Resume(a1);
}

uint64_t ___ZN2as6server20LegacySessionManager38ToggleInputMuteForRecordingApplicationERK13audit_token_t_block_invoke(uint64_t a1)
{
  return as::server::require_acq::MuteAudioSessions(*(unsigned __int8 *)(a1 + 64), (unsigned int **)(a1 + 32), *(const audit_token_t **)(a1 + 56));
}

void **__copy_helper_block_ea8_32c51_ZTSN5boost9container8flat_setIjNSt3__14lessIjEEvEE(uint64_t a1, uint64_t a2)
{
  const void **v3;
  void **result;
  uint64_t v5;

  v3 = (const void **)(a2 + 32);
  result = boost::container::vector_alloc_holder<boost::container::new_allocator<unsigned int>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::vector_alloc_holder<boost::container::new_allocator<unsigned int> const&,unsigned long>((void **)(a1 + 32), (const char *)(a2 + 32), *(_QWORD *)(a2 + 40));
  v5 = *(_QWORD *)(a2 + 40);
  if (v5)
    return (void **)memmove(*result, *v3, 4 * v5);
  return result;
}

void __destroy_helper_block_ea8_32c51_ZTSN5boost9container8flat_setIjNSt3__14lessIjEEvEE(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 48))
    operator delete(*(void **)(a1 + 32));
}

uint64_t as::server::LegacySessionManager::MuteInputsForRecordingApplications@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  NSErrorWithString(CFSTR("Unsupported platform"));
  result = objc_claimAutoreleasedReturnValue();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

void ___ZN2as6server20LegacySessionManager22StartProcessMonitoringEi_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  as::server *v6;
  as::server *v7;
  NSObject *v8;
  int v9;
  void *v10;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v5)
  {
    v8 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v6));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(_DWORD *)(a1 + 32);
      objc_msgSend(v5, "name");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 136315906;
      v12 = "ServerSessionManager.mm";
      v13 = 1024;
      v14 = 1054;
      v15 = 1024;
      v16 = v9;
      v17 = 2112;
      v18 = v10;
      _os_log_impl(&dword_1C895C000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Monitored process died, pid = %d, name = %@", (uint8_t *)&v11, 0x22u);

    }
  }
  as::server::LegacySessionManager::Instance(v6);
  as::server::LegacySessionManager::HandleProcessDeath((as::server::LegacySessionManager *)&as::server::LegacySessionManager::Instance(void)::sManager, *(_DWORD *)(a1 + 32));

}

void sub_1C89B44E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void as::server::LegacySessionManager::HandleProcessDeath(as::server::LegacySessionManager *this, signed int a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  _DWORD *v6;
  signed int v7;
  BOOL v8;
  uint64_t *v9;
  std::__shared_weak_count_vtbl **v10;
  std::__shared_weak_count_vtbl **v11;
  std::__shared_weak_count_vtbl **v12;
  std::__shared_weak_count_vtbl *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  uint64_t i;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unsigned int *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count_vtbl **v31;
  unint64_t v32;
  uint64_t *v33;
  std::__shared_weak_count *v34;
  uint64_t *p_shared_weak_owners;
  uint64_t *v36;
  unint64_t *v37;

  v4 = (os_unfair_lock_s *)((char *)this + 56);
  os_unfair_lock_lock((os_unfair_lock_t)this + 14);
  v5 = *((_QWORD *)this + 9);
  if (v5)
  {
    v6 = (_DWORD *)((char *)this + 72);
    do
    {
      v7 = *(_DWORD *)(v5 + 32);
      v8 = v7 < a2;
      if (v7 >= a2)
        v9 = (uint64_t *)v5;
      else
        v9 = (uint64_t *)(v5 + 8);
      if (!v8)
        v6 = (_DWORD *)v5;
      v5 = *v9;
    }
    while (*v9);
    if (v6 != (_DWORD *)((char *)this + 72) && v6[8] <= a2)
      std::__tree<std::__value_type<int,RBSProcessHandle * {__strong}>,std::__map_value_compare<int,std::__value_type<int,RBSProcessHandle * {__strong}>,std::less<int>,true>,std::allocator<std::__value_type<int,RBSProcessHandle * {__strong}>>>::erase((uint64_t **)this + 8, (uint64_t)v6);
  }
  os_unfair_lock_unlock(v4);
  v30 = 0;
  v31 = 0;
  v32 = 0;
  os_unfair_lock_lock((os_unfair_lock_t)this);
  v10 = (std::__shared_weak_count_vtbl **)*((_QWORD *)this + 1);
  v11 = (std::__shared_weak_count_vtbl **)*((_QWORD *)this + 2);
  if (v10 == v11)
    goto LABEL_30;
  v12 = 0;
  do
  {
    v13 = *v10;
    if (LODWORD((*v10)[1].~__shared_weak_count_0) == a2)
    {
      v14 = (uint64_t)v10[1];
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 16);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      if ((unint64_t)v12 >= v32)
      {
        v17 = ((uint64_t)v12 - v30) >> 4;
        if ((unint64_t)(v17 + 1) >> 60)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        v18 = (uint64_t)(v32 - v30) >> 3;
        if (v18 <= v17 + 1)
          v18 = v17 + 1;
        if (v32 - v30 >= 0x7FFFFFFFFFFFFFF0)
          v19 = 0xFFFFFFFFFFFFFFFLL;
        else
          v19 = v18;
        v37 = &v32;
        v20 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>((uint64_t)&v32, v19);
        v21 = (std::__shared_weak_count *)&v20[2 * v17];
        v33 = v20;
        v34 = v21;
        v36 = &v20[2 * v22];
        v21->__vftable = v13;
        v21->__shared_owners_ = v14;
        p_shared_weak_owners = &v21->__shared_weak_owners_;
        std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::__swap_out_circular_buffer(&v30, &v33);
        v12 = v31;
        std::__split_buffer<std::weak_ptr<as::server::AudioSessionInfo>>::~__split_buffer((void **)&v33);
      }
      else
      {
        *v12 = v13;
        v12[1] = (std::__shared_weak_count_vtbl *)v14;
        v12 += 2;
      }
      v31 = v12;
    }
    v10 += 2;
  }
  while (v10 != v11);
  if (this)
  {
LABEL_30:
    os_unfair_lock_unlock((os_unfair_lock_t)this);
    v12 = v31;
  }
  for (i = v30; (std::__shared_weak_count_vtbl **)i != v12; i += 16)
  {
    v24 = *(std::__shared_weak_count **)(i + 8);
    if (v24)
    {
      v25 = std::__shared_weak_count::lock(v24);
      v34 = v25;
      if (v25)
      {
        v26 = v25;
        v27 = *(unsigned int **)i;
        v33 = (uint64_t *)v27;
        if (v27)
          as::server::LegacySessionManager::RemoveSession(this, v27[2], (const as::server::ProcessIdentity *)(v27 + 3));
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v29 = __ldaxr(p_shared_owners);
        while (__stlxr(v29 - 1, p_shared_owners));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
    }
  }
  as::server::LegacySessionManager::RemoveProcessFromMicrophoneInjectionNotificationSubscription((os_unfair_lock_s *)this, a2);
  v33 = &v30;
  std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
}

void sub_1C89B4754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  os_unfair_lock_s *v18;

  os_unfair_lock_unlock(v18);
  _Unwind_Resume(a1);
}

void as::server::LegacySessionManager::RemoveProcessFromMicrophoneInjectionNotificationSubscription(os_unfair_lock_s *this, unsigned int a2)
{
  os_unfair_lock_s *v4;
  as::server *v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t **v9;
  __int128 v10;
  uint64_t *v11;
  uint64_t **v12;
  BOOL v13;
  NSObject *v14;
  audit_token_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = this + 44;
  os_unfair_lock_lock(this + 44);
  v8 = *(uint64_t ***)&this[54]._os_unfair_lock_opaque;
  v6 = (uint64_t **)&this[54];
  v7 = (uint64_t)v8;
  v9 = v6 + 1;
  if (v8 != v6 + 1)
  {
    while (1)
    {
      v10 = *(_OWORD *)(v7 + 56);
      *(_OWORD *)v15.val = *(_OWORD *)(v7 + 40);
      *(_OWORD *)&v15.val[4] = v10;
      v5 = (as::server *)audit_token_to_pid(&v15);
      if ((_DWORD)v5 == a2)
        break;
      v11 = *(uint64_t **)(v7 + 8);
      if (v11)
      {
        do
        {
          v12 = (uint64_t **)v11;
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = *(uint64_t ***)(v7 + 16);
          v13 = *v12 == (uint64_t *)v7;
          v7 = (uint64_t)v12;
        }
        while (!v13);
      }
      v7 = (uint64_t)v12;
      if (v12 == v9)
        goto LABEL_14;
    }
  }
  if ((uint64_t **)v7 != v9)
  {
    v14 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v5));
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v15.val[0] = 136315650;
      *(_QWORD *)&v15.val[1] = "ServerSessionManager.mm";
      LOWORD(v15.val[3]) = 1024;
      *(unsigned int *)((char *)&v15.val[3] + 2) = 1250;
      HIWORD(v15.val[4]) = 1024;
      v15.val[5] = a2;
      _os_log_impl(&dword_1C895C000, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Removing process with PID:%d from MicrophoneInjectionNotificationSubscription", (uint8_t *)&v15, 0x18u);
    }
    std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::erase(v6, v7);
  }
LABEL_14:
  os_unfair_lock_unlock(v4);
}

void sub_1C89B4928(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t as::server::LegacySessionManager::GetPreferredMicrophoneInjectionMode(os_unfair_lock_s *this, unsigned int a2)
{
  os_unfair_lock_s *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  unsigned int v9;
  BOOL v10;
  char **v11;
  uint64_t v12;

  if (as::server::LegacySessionManager::SessionIDIsValid(this, a2))
  {
    v4 = this + 44;
    os_unfair_lock_lock(this + 44);
    v7 = *(char **)&this[48]._os_unfair_lock_opaque;
    v6 = (char *)&this[48];
    v5 = v7;
    if (v7)
    {
      v8 = v6;
      do
      {
        v9 = *((_DWORD *)v5 + 8);
        v10 = v9 >= a2;
        if (v9 >= a2)
          v11 = (char **)v5;
        else
          v11 = (char **)(v5 + 8);
        if (v10)
          v8 = v5;
        v5 = *v11;
      }
      while (*v11);
      if (v8 != v6 && *((_DWORD *)v8 + 8) <= a2)
      {
        v12 = *((_QWORD *)v8 + 5);
        os_unfair_lock_unlock(v4);
        return v12;
      }
    }
    os_unfair_lock_unlock(v4);
  }
  else
  {
    as::server::LegacySessionManager::RemoveSessionFromMicrophoneInjectionModeMap(this, a2);
  }
  return 0;
}

BOOL as::server::LegacySessionManager::SetPreferredMicrophoneInjectionMode(os_unfair_lock_s *a1, uint64_t a2, unsigned int a3)
{
  _BOOL8 v5;
  os_unfair_lock_s *v6;
  as::server *v7;
  NSObject *v8;
  unsigned int v10;
  uint64_t v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  unsigned int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v11 = a2;
  v10 = a3;
  v5 = as::server::LegacySessionManager::SessionIDIsValid(a1, a3);
  if (v5)
  {
    v6 = a1 + 44;
    os_unfair_lock_lock(a1 + 44);
    v7 = (as::server *)std::map<unsigned int,AVAudioSessionMicrophoneInjectionMode>::insert_or_assign[abi:ne180100]<AVAudioSessionMicrophoneInjectionMode&>((uint64_t)&a1[46], &v10, &v11);
    v8 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v7));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315906;
      v13 = "ServerSessionManager.mm";
      v14 = 1024;
      v15 = 1168;
      v16 = 2048;
      v17 = v11;
      v18 = 1024;
      v19 = v10;
      _os_log_impl(&dword_1C895C000, v8, OS_LOG_TYPE_INFO, "%25s:%-5d Setting for PreferredMicrophoneInjectionMode to %ld for session: 0x%x", buf, 0x22u);
    }
    os_unfair_lock_unlock(v6);
  }
  else
  {
    as::server::LegacySessionManager::RemoveSessionFromMicrophoneInjectionModeMap(a1, a3);
  }
  return v5;
}

void sub_1C89B4B20(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

_DWORD *std::map<unsigned int,AVAudioSessionMicrophoneInjectionMode>::insert_or_assign[abi:ne180100]<AVAudioSessionMicrophoneInjectionMode&>(uint64_t a1, unsigned int *a2, _QWORD *a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;

  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
  {
    v5 = a1 + 8;
    return std::__tree<std::__value_type<unsigned int,AVAudioSessionMicrophoneInjectionMode>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,AVAudioSessionMicrophoneInjectionMode>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,AVAudioSessionMicrophoneInjectionMode>>>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&,AVAudioSessionMicrophoneInjectionMode&>((uint64_t **)a1, (uint64_t *)v5, a2, a2, a3);
  }
  v4 = *a2;
  v5 = a1 + 8;
  do
  {
    v6 = *(_DWORD *)(v3 + 32);
    v7 = v6 >= v4;
    if (v6 >= v4)
      v8 = (uint64_t *)v3;
    else
      v8 = (uint64_t *)(v3 + 8);
    if (v7)
      v5 = v3;
    v3 = *v8;
  }
  while (*v8);
  if (v5 == a1 + 8 || v4 < *(_DWORD *)(v5 + 32))
    return std::__tree<std::__value_type<unsigned int,AVAudioSessionMicrophoneInjectionMode>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,AVAudioSessionMicrophoneInjectionMode>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,AVAudioSessionMicrophoneInjectionMode>>>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&,AVAudioSessionMicrophoneInjectionMode&>((uint64_t **)a1, (uint64_t *)v5, a2, a2, a3);
  *(_QWORD *)(v5 + 40) = *a3;
  return (_DWORD *)v5;
}

uint64_t as::server::LegacySessionManager::MicrophoneInjectionIsEnabled(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  uint64_t os_unfair_lock_opaque_low;

  v2 = this + 44;
  os_unfair_lock_lock(this + 44);
  os_unfair_lock_opaque_low = LOBYTE(this[52]._os_unfair_lock_opaque);
  os_unfair_lock_unlock(v2);
  return os_unfair_lock_opaque_low;
}

void as::server::LegacySessionManager::SetMicrophoneInjectionIsEnabled(os_unfair_lock_s *this, uint64_t a2)
{
  os_unfair_lock_s *v4;
  int os_unfair_lock_opaque_low;
  void *v6;
  void *v7;
  as::server *v8;
  NSDictionary *v9;
  _QWORD v10[2];
  _QWORD v11[3];

  v11[2] = *MEMORY[0x1E0C80C00];
  v4 = this + 44;
  os_unfair_lock_lock(this + 44);
  os_unfair_lock_opaque_low = LOBYTE(this[52]._os_unfair_lock_opaque);
  LOBYTE(this[52]._os_unfair_lock_opaque) = a2;
  os_unfair_lock_unlock(v4);
  if (os_unfair_lock_opaque_low != (_DWORD)a2)
  {
    v10[0] = CFSTR("AVAudioSessionMicrophoneInjectionIsAvailableKey");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v10[1] = CFSTR("AVAudioSessionMicrophoneInjectionIsAllowedByUserKey");
    v11[0] = v6;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", _AXSAllowsMixToUplink() != 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v11[1] = v7;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v11, v10, 2);
    v8 = (as::server *)objc_claimAutoreleasedReturnValue();

    as::server::HandleMicrophoneInjectionCapabilityChangeNotification(v8, v9);
  }
}

void sub_1C89B4D00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  v2 = v1;

  _Unwind_Resume(a1);
}

BOOL as::server::LegacySessionManager::UserAllowsMicrophoneInjection(as::server::LegacySessionManager *this)
{
  return _AXSAllowsMixToUplink() != 0;
}

void as::server::LegacySessionManager::SubscribeToMicrophoneInjectionCapabilityChangeNotification(os_unfair_lock_s *this, audit_token_t *a2, NSString *a3)
{
  NSString *v5;
  os_unfair_lock_s *v6;
  as::server *v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t **v13;
  BOOL v14;
  __int128 v15;
  __int128 v16;
  NSObject *v17;
  _BYTE v18[40];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = this + 44;
  os_unfair_lock_lock(this + 44);
  v10 = *(uint64_t ***)&this[54]._os_unfair_lock_opaque;
  v8 = (uint64_t **)&this[54];
  v9 = v10;
  v11 = v8 + 1;
  if (v10 != v8 + 1)
  {
    while (1)
    {
      v7 = (as::server *)objc_msgSend(v9[4], "isEqualToString:", v5);
      if ((v7 & 1) != 0)
        break;
      v12 = v9[1];
      if (v12)
      {
        do
        {
          v13 = (uint64_t **)v12;
          v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (uint64_t **)v9[2];
          v14 = *v13 == (uint64_t *)v9;
          v9 = v13;
        }
        while (!v14);
      }
      v9 = v13;
      if (v13 == v11)
        goto LABEL_12;
    }
  }
  if (v9 == v11)
  {
LABEL_12:
    *(_QWORD *)v18 = v5;
    v16 = *(_OWORD *)&a2->val[4];
    *(_OWORD *)&v18[8] = *(_OWORD *)a2->val;
    *(_OWORD *)&v18[24] = v16;
    std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::__emplace_unique_key_args<NSString * {__strong},std::pair<NSString * const {__strong},audit_token_t>>(v8, (unint64_t *)v18, (uint64_t)v18);

  }
  else
  {
    v15 = *(_OWORD *)a2->val;
    *(_OWORD *)(v9 + 7) = *(_OWORD *)&a2->val[4];
    *(_OWORD *)(v9 + 5) = v15;
  }
  v17 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(v7));
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v18 = 136315650;
    *(_QWORD *)&v18[4] = "ServerSessionManager.mm";
    *(_WORD *)&v18[12] = 1024;
    *(_DWORD *)&v18[14] = 1217;
    *(_WORD *)&v18[18] = 2112;
    *(_QWORD *)&v18[20] = v5;
    _os_log_impl(&dword_1C895C000, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Process :%@ has subscribed for MicrophoneInjectionCapabilityChangeNotification", v18, 0x1Cu);
  }
  os_unfair_lock_unlock(v6);

}

void sub_1C89B4EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  os_unfair_lock_s *v10;

  os_unfair_lock_unlock(v10);
  _Unwind_Resume(a1);
}

void as::server::LegacySessionManager::GetMicrophoneInjectionSubscribersList(os_unfair_lock_s *this@<X0>, uint64_t a2@<X8>)
{
  os_unfair_lock_s *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;
  uint64_t *v9;
  _QWORD *v10[2];
  void *__p;
  char *v12;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v10[0] = 0;
  v10[1] = 0;
  v9 = (uint64_t *)v10;
  v4 = this + 44;
  os_unfair_lock_lock(this + 44);
  if (&v9 != (uint64_t **)&this[54])
    std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<NSString * {__strong},audit_token_t>,std::__tree_node<std::__value_type<NSString * {__strong},audit_token_t>,void *> *,long>>(&v9, *(_QWORD **)&this[54]._os_unfair_lock_opaque, &this[56]._os_unfair_lock_opaque);
  os_unfair_lock_unlock(v4);
  v5 = v9;
  if (v9 != (uint64_t *)v10)
  {
    do
    {
      as::server::LegacySessionManager::GetSessionIDsForToken(this, (const audit_token_t *)(v5 + 5), (char **)&__p);
      std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>>((std::vector<unsigned int> *)a2, *(_QWORD *)(a2 + 8), (char *)__p, v12, (v12 - (_BYTE *)__p) >> 2);
      if (__p)
      {
        v12 = (char *)__p;
        operator delete(__p);
      }
      v6 = (uint64_t *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (uint64_t *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != (uint64_t *)v10);
  }
  std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::destroy((uint64_t)&v9, v10[0]);
}

void sub_1C89B501C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;
  os_unfair_lock_s *v14;
  void *v16;

  os_unfair_lock_unlock(v14);
  std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::destroy((uint64_t)&a9, a10);
  v16 = *(void **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)(v13 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(a1);
}

CFDictionaryRef as::server::LegacySessionManager::GetSessionsWithMicrophoneInjectionPreference(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  CFDictionaryRef v3;
  CFDictionaryRef v5;

  v1 = this + 44;
  v2 = this + 46;
  os_unfair_lock_lock(this + 44);
  applesauce::CF::make_DictionaryRef<unsigned int,AVAudioSessionMicrophoneInjectionMode>(v2, &v5);
  v3 = v5;
  os_unfair_lock_unlock(v1);
  return v3;
}

void sub_1C89B50B8(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void applesauce::CF::make_DictionaryRef<unsigned int,AVAudioSessionMicrophoneInjectionMode>(_QWORD *a1@<X0>, CFDictionaryRef *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  CFDictionaryRef CFDictionaryRef;
  void **v11[3];
  void ***v12;

  memset(v11, 0, sizeof(v11));
  std::vector<applesauce::CF::TypeRefPair>::reserve(v11, a1[2]);
  v6 = (_QWORD *)*a1;
  v4 = a1 + 1;
  v5 = v6;
  if (v6 != v4)
  {
    do
    {
      std::vector<applesauce::CF::TypeRefPair>::emplace_back<unsigned int const&,AVAudioSessionMicrophoneInjectionMode const&>(v11, (int *)v5 + 8, v5 + 5);
      v7 = (_QWORD *)v5[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v5[2];
          v9 = *v8 == (_QWORD)v5;
          v5 = v8;
        }
        while (!v9);
      }
      v5 = v8;
    }
    while (v8 != v4);
  }
  CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef(v11);
  v12 = v11;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  *a2 = CFDictionaryRef;
}

void sub_1C89B5184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void as::server::LegacySessionManager::NotifyClientsMicrophoneInjectionUserPermissionChanged(os_unfair_lock_s *this)
{
  void *v2;
  os_unfair_lock_s *v3;
  uint64_t os_unfair_lock_opaque_low;
  void *v5;
  void *v6;
  as::server *v7;
  NSDictionary *v8;
  _QWORD v9[2];
  _QWORD v10[3];

  v10[2] = *MEMORY[0x1E0C80C00];
  v9[0] = CFSTR("AVAudioSessionMicrophoneInjectionIsAvailableKey");
  v2 = (void *)MEMORY[0x1E0CB37E8];
  v3 = this + 44;
  os_unfair_lock_lock(this + 44);
  os_unfair_lock_opaque_low = LOBYTE(this[52]._os_unfair_lock_opaque);
  os_unfair_lock_unlock(v3);
  objc_msgSend(v2, "numberWithBool:", os_unfair_lock_opaque_low);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9[1] = CFSTR("AVAudioSessionMicrophoneInjectionIsAllowedByUserKey");
  v10[0] = v5;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", _AXSAllowsMixToUplink() != 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v10[1] = v6;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, v9, 2);
  v7 = (as::server *)objc_claimAutoreleasedReturnValue();

  as::server::HandleMicrophoneInjectionCapabilityChangeNotification(v7, v8);
}

void sub_1C89B52A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  v2 = v1;

  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<int,RBSProcessHandle * {__strong}>,std::__map_value_compare<int,std::__value_type<int,RBSProcessHandle * {__strong}>,std::less<int>,true>,std::allocator<std::__value_type<int,RBSProcessHandle * {__strong}>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,RBSProcessHandle * {__strong}>,std::__map_value_compare<int,std::__value_type<int,RBSProcessHandle * {__strong}>,std::less<int>,true>,std::allocator<std::__value_type<int,RBSProcessHandle * {__strong}>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,RBSProcessHandle * {__strong}>,std::__map_value_compare<int,std::__value_type<int,RBSProcessHandle * {__strong}>,std::less<int>,true>,std::allocator<std::__value_type<int,RBSProcessHandle * {__strong}>>>::destroy(a1, a2[1]);

    operator delete(a2);
  }
}

_QWORD *std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::__init_with_size[abi:ne180100]<std::weak_ptr<as::server::AudioSessionInfo>*,std::weak_ptr<as::server::AudioSessionInfo>*>(_QWORD *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::weak_ptr<as::server::AudioSessionInfo>>,std::weak_ptr<as::server::AudioSessionInfo>*,std::weak_ptr<as::server::AudioSessionInfo>*,std::weak_ptr<as::server::AudioSessionInfo>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1C89B5378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::weak_ptr<as::server::AudioSessionInfo>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::weak_ptr<as::server::AudioSessionInfo>>,std::weak_ptr<as::server::AudioSessionInfo>*,std::weak_ptr<as::server::AudioSessionInfo>*,std::weak_ptr<as::server::AudioSessionInfo>*>(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v9[3];
  char v10;
  _QWORD *v11;
  _QWORD *v12;

  v4 = a4;
  v12 = a4;
  v11 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  if (a2 != a3)
  {
    do
    {
      *v4 = *a2;
      v5 = a2[1];
      v4[1] = v5;
      if (v5)
      {
        v6 = (unint64_t *)(v5 + 16);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      a2 += 2;
      v4 += 2;
    }
    while (a2 != a3);
    v12 = v4;
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<as::server::AudioSessionInfo>>,std::weak_ptr<as::server::AudioSessionInfo>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<as::server::AudioSessionInfo>>,std::weak_ptr<as::server::AudioSessionInfo>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<as::server::AudioSessionInfo>>,std::weak_ptr<as::server::AudioSessionInfo>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<as::server::AudioSessionInfo>>,std::weak_ptr<as::server::AudioSessionInfo>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v3;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    v3 = *(std::__shared_weak_count **)(v1 - 8);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    v1 -= 16;
  }
}

_QWORD *boost::container::vector<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>,boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,void>::~vector(_QWORD *a1)
{
  uint64_t v2;
  void **v3;
  void *v4;

  v2 = a1[1];
  if (v2)
  {
    v3 = (void **)(*a1 + 8);
    do
    {
      --v2;
      v4 = *v3;
      v3 += 2;

    }
    while (v2);
  }
  if (a1[2])
    operator delete((void *)*a1);
  return a1;
}

unsigned int *std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>>(std::vector<unsigned int> *a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  unsigned int *v5;
  unsigned int *v7;
  std::allocator<unsigned int> *p_end_cap;
  unsigned int *v10;
  unsigned int *value;
  unint64_t v12;
  std::vector<unsigned int>::pointer begin;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  std::__split_buffer<unsigned int> __v;

  v5 = (unsigned int *)__dst;
  if (a5 < 1)
    return v5;
  v7 = (unsigned int *)__src;
  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<unsigned int> *)&a1->__end_cap_;
  v10 = value;
  v12 = *((_QWORD *)p_end_cap - 1);
  if (a5 > (uint64_t)((uint64_t)value - v12) >> 2)
  {
    begin = a1->__begin_;
    v14 = a5 + ((uint64_t)(v12 - (unint64_t)a1->__begin_) >> 2);
    if (v14 >> 62)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)begin) >> 2;
    v16 = (char *)v10 - (char *)begin;
    if (v16 >> 1 > v14)
      v14 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v17)
      v18 = (unsigned int *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)p_end_cap, v17);
    else
      v18 = 0;
    v28 = &v18[v15];
    __v.__first_ = v18;
    __v.__begin_ = v28;
    __v.__end_cap_.__value_ = &v18[v17];
    v29 = 4 * a5;
    v30 = &v28[a5];
    do
    {
      v31 = *v7++;
      *v28++ = v31;
      v29 -= 4;
    }
    while (v29);
    __v.__end_ = v30;
    v5 = std::vector<unsigned int>::__swap_out_circular_buffer(a1, &__v, v5);
    if (__v.__end_ != __v.__begin_)
      __v.__end_ = (std::__split_buffer<unsigned int>::pointer)((char *)__v.__end_
                                                              + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_)
      operator delete(__v.__first_);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    v21 = &__src[4 * a5];
    v23 = (unsigned int *)*((_QWORD *)p_end_cap - 1);
LABEL_17:
    v24 = &v5[a5];
    v25 = &v23[-a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *v25++;
        *v26++ = v27;
      }
      while ((unint64_t)v25 < v12);
    }
    a1->__end_ = v26;
    if (v23 != v24)
      memmove(&v23[-(v23 - v24)], v5, (char *)v23 - (char *)v24);
    if (v21 != (char *)v7)
      memmove(v5, v7, v21 - (char *)v7);
    return v5;
  }
  v21 = &__src[4 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*((void **)p_end_cap - 1), &__src[4 * v20], a4 - v21);
  v23 = (unsigned int *)(v12 + v22);
  a1->__end_ = (std::vector<unsigned int>::pointer)(v12 + v22);
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_1C89B56CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::vector<unsigned int>::pointer std::vector<unsigned int>::__swap_out_circular_buffer(std::vector<unsigned int> *this, std::__split_buffer<unsigned int> *__v, std::vector<unsigned int>::pointer __p)
{
  unsigned int *begin;
  std::vector<unsigned int>::pointer v6;
  unsigned int *v7;
  std::vector<unsigned int>::pointer v8;
  unsigned int v9;
  unsigned int *end;
  std::__split_buffer<unsigned int>::pointer v11;
  int64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *value;

  begin = __v->__begin_;
  v6 = this->__begin_;
  v7 = begin;
  if (this->__begin_ != __p)
  {
    v8 = __p;
    v7 = __v->__begin_;
    do
    {
      v9 = *--v8;
      *--v7 = v9;
    }
    while (v8 != v6);
  }
  __v->__begin_ = v7;
  end = this->__end_;
  v11 = __v->__end_;
  v12 = (char *)end - (char *)__p;
  if (end != __p)
  {
    memmove(__v->__end_, __p, (char *)end - (char *)__p);
    v7 = __v->__begin_;
  }
  __v->__end_ = (std::__split_buffer<unsigned int>::pointer)((char *)v11 + v12);
  v13 = this->__begin_;
  this->__begin_ = v7;
  __v->__begin_ = v13;
  v14 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v14;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

void std::__tree<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::__map_value_compare<as::server::ProcessIdentity,std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::less<as::server::ProcessIdentity>,true>,std::allocator<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::__map_value_compare<as::server::ProcessIdentity,std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::less<as::server::ProcessIdentity>,true>,std::allocator<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::__map_value_compare<as::server::ProcessIdentity,std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,std::less<as::server::ProcessIdentity>,true>,std::allocator<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>>>::destroy(a1, a2[1]);
    std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 9));
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<NSString * {__strong},std::shared_ptr<as::server::BackgroundActivationInfo>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::shared_ptr<as::server::BackgroundActivationInfo>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::shared_ptr<as::server::BackgroundActivationInfo>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<NSString * {__strong},std::shared_ptr<as::server::BackgroundActivationInfo>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::shared_ptr<as::server::BackgroundActivationInfo>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::shared_ptr<as::server::BackgroundActivationInfo>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<NSString * {__strong},std::shared_ptr<as::server::BackgroundActivationInfo>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::shared_ptr<as::server::BackgroundActivationInfo>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::shared_ptr<as::server::BackgroundActivationInfo>>>>::destroy(a1, a2[1]);
    std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 5));

    operator delete(a2);
  }
}

void std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::destroy(a1, a2[1]);

    operator delete(a2);
  }
}

uint64_t std::default_delete<caulk::synchronized<as::server::DeviceTimeObserver,caulk::mach::unfair_lock,caulk::empty_atomic_interface<as::server::DeviceTimeObserver>>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void **v3;
  uint64_t result;
  void **v5;

  if (a2)
  {
    v3 = (void **)(a2 + 8);
    v5 = (void **)(a2 + 56);
    std::vector<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>>::__destroy_vector::operator()[abi:ne180100](&v5);
    boost::container::vector<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,void>::~vector(a2 + 32);
    v5 = v3;
    std::vector<as::server::DeviceTimeObserver::SharedBlockOwner>::__destroy_vector::operator()[abi:ne180100](&v5);
    return MEMORY[0x1CAA38D28](a2, 0x1020C40944F807DLL);
  }
  return result;
}

void std::vector<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        std::__destroy_at[abi:ne180100]<std::pair<as::server::DeviceTimeObserver::DeviceKey,as::server::DeviceTimeObserver::DeviceInfo>,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t boost::container::vector<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,void>::~vector(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)a1 + 8;
    do
    {
      --v2;
      v3 = std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100](v3) + 32;
    }
    while (v2);
  }
  if (*(_QWORD *)(a1 + 16))
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<as::server::DeviceTimeObserver::SharedBlockOwner>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        as::server::DeviceTimeObserver::SharedBlockOwner::~SharedBlockOwner((as::server::DeviceTimeObserver::SharedBlockOwner *)(v4 - 128));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<as::server::AudioSessionInfo,std::allocator<as::server::AudioSessionInfo>,as::server::SessionCreationDescription const&,NSXPCConnection * {__strong}&,objc_object  {objcproto28AVAudioSessionServerDelegate}* {__strong}&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x298uLL);
  result = std::__shared_ptr_emplace<as::server::AudioSessionInfo>::__shared_ptr_emplace[abi:ne180100]<as::server::SessionCreationDescription const&,NSXPCConnection * {__strong}&,objc_object  {objcproto28AVAudioSessionServerDelegate}* {__strong}&,std::allocator<as::server::AudioSessionInfo>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1C89B5A9C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<as::server::AudioSessionInfo>::__shared_ptr_emplace[abi:ne180100]<as::server::SessionCreationDescription const&,NSXPCConnection * {__strong}&,objc_object  {objcproto28AVAudioSessionServerDelegate}* {__strong}&,std::allocator<as::server::AudioSessionInfo>,0>(_QWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E8205AB8;
  as::server::AudioSessionInfo::AudioSessionInfo(a1 + 3, a2, *a3, *a4);
  return a1;
}

void sub_1C89B5AEC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<as::server::AudioSessionInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8205AB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<as::server::AudioSessionInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8205AB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA38D28);
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>,boost::container::dtl::select1st<int>,std::less<int>,boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>>::find(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *a1;
  v5 = a1[1];
  v14 = v4;
  if (v4)
    v6 = 1;
  else
    v6 = v5 == 0;
  if (!v6)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v13 = v4 + 16 * v5;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>,boost::container::dtl::select1st<int>,std::less<int>,boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>*,false>,int>(&v14, &v13, a2, a3);
  v9 = a1[1];
  if (*a1)
    v10 = 1;
  else
    v10 = v9 == 0;
  if (!v10)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v11 = *a1 + 16 * v9;
  v12 = (int *)*a3;
  if (*a3 != v11)
  {
    if (!v12)
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    if (*a2 < *v12)
      *a3 = v11;
  }
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>,boost::container::dtl::select1st<int>,std::less<int>,boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>*,false>,int>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, int *a3@<X3>, _QWORD *a4@<X8>)
{
  _DWORD *v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  _DWORD *v8;

  v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    v5 = (uint64_t)(*a2 - *a1) >> 4;
    v6 = *a3;
    v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4)
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      if (!v4)
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      v7 = v5 >> 1;
      v8 = &v4[4 * (v5 >> 1)];
      if (*v8 < v6)
      {
        v4 = v8 + 4;
        *a1 = v8 + 4;
        v7 = v5 + ~v7;
      }
      v5 = v7;
    }
    while (v7);
  }
  *a4 = v4;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>,boost::container::dtl::select1st<int>,std::less<int>,boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>>::insert_unique(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  _BOOL4 inserted;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int *v13;
  int *v14;
  int *v15;

  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 0;
  v13 = 0;
  v4 = *a1;
  v5 = a1[1];
  v15 = (int *)v4;
  if (v4)
    v6 = 1;
  else
    v6 = v5 == 0;
  if (!v6)
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  v14 = (int *)(v4 + 16 * v5);
  inserted = boost::container::dtl::flat_tree<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>,boost::container::dtl::select1st<int>,std::less<int>,boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>>::priv_insert_unique_prepare((uint64_t)a1, (uint64_t *)&v15, &v14, a2, &v13);
  *(_BYTE *)(a3 + 8) = inserted;
  if (inserted)
  {
    v15 = v13;
    v10 = *a1;
    if (*a1 > (unint64_t)v13)
      goto LABEL_15;
    v11 = a1[1];
    if (!v10 && v11)
      __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
    if ((unint64_t)v13 > v10 + 16 * v11)
LABEL_15:
      boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::insert_unique();
    boost::container::vector<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>,boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,boost::container::dtl::pair<int,NSXPCConnection * {__strong}>*,boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>>(a1, (uint64_t *)&v15, (const char *)1, (uint64_t)a2, (uint64_t *)&v14);
    v12 = v14;
  }
  else
  {
    v12 = v13;
    if (!*a1 && v13)
      __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
  }
  *(_QWORD *)a3 = v12;
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>,boost::container::dtl::select1st<int>,std::less<int>,boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>>::priv_insert_unique_prepare(uint64_t a1, uint64_t *a2, int **a3, int *a4, int **a5)
{
  uint64_t v8;
  int *v9;
  int *v11;
  uint64_t v12;
  int *v13;

  v8 = *a2;
  v11 = *a3;
  v12 = v8;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>,boost::container::dtl::select1st<int>,std::less<int>,boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>*,true>,int>(&v12, &v11, a4, &v13);
  v9 = v13;
  *a5 = v13;
  if (v9 == *a3)
    return 1;
  if (!v9)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  return *a4 < *v9;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>,boost::container::dtl::select1st<int>,std::less<int>,boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>*,true>,int>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, int *a3@<X3>, _QWORD *a4@<X8>)
{
  _DWORD *v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  _DWORD *v8;

  v4 = (_DWORD *)*a2;
  if (*a2 != *a1)
  {
    v5 = (uint64_t)(*a2 - *a1) >> 4;
    v6 = *a3;
    v4 = (_DWORD *)*a1;
    do
    {
      if (v5 != 1 && !v4)
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      if (!v4)
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      v7 = v5 >> 1;
      v8 = &v4[4 * (v5 >> 1)];
      if (*v8 < v6)
      {
        v4 = v8 + 4;
        *a1 = v8 + 4;
        v7 = v5 + ~v7;
      }
      v5 = v7;
    }
    while (v7);
  }
  *a4 = v4;
}

void boost::container::vector<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>,boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,boost::container::dtl::pair<int,NSXPCConnection * {__strong}>*,boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;

  v6 = a1[1];
  v7 = a1[2];
  if (v7 < v6)
    boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::emplace<unsigned int>();
  v10 = *a2;
  if (v7 - v6 < (unint64_t)a3)
  {
    boost::container::vector<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>,boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,boost::container::dtl::pair<int,NSXPCConnection * {__strong}>*,boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>>(a1, *a2, a3, a4, a5);
  }
  else
  {
    if (v7 == v6)
      boost::container::vector<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>();
    v11 = *a1 + 16 * v6;
    if (v11 == v10)
    {
      *(_DWORD *)v10 = *(_DWORD *)a4;
      v20 = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(v11 + 8) = v20;
      ++a1[1];
    }
    else
    {
      v12 = v11 - 16;
      *(_DWORD *)v11 = *(_DWORD *)(v11 - 16);
      v13 = *(_QWORD *)(v11 - 8);
      *(_QWORD *)(v11 - 8) = 0;
      *(_QWORD *)(v11 + 8) = v13;
      ++a1[1];
      if (v11 - 16 != v10)
      {
        v14 = v11 - 16;
        do
        {
          v15 = *(_DWORD *)(v14 - 16);
          v14 -= 16;
          *(_DWORD *)v12 = v15;
          v16 = *(_QWORD *)(v12 - 8);
          *(_QWORD *)(v12 - 8) = 0;
          v17 = *(void **)(v12 + 8);
          *(_QWORD *)(v12 + 8) = v16;

          v12 = v14;
        }
        while (v14 != v10);
      }
      *(_DWORD *)v10 = *(_DWORD *)a4;
      v18 = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(a4 + 8) = 0;
      v19 = *(void **)(v10 + 8);
      *(_QWORD *)(v10 + 8) = v18;

    }
    *a5 = *a2;
  }
}

void boost::container::vector<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>,boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,boost::container::dtl::pair<int,NSXPCConnection * {__strong}>*,boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  const char *v12;
  uint64_t v13;
  void *v14;

  v10 = *a1;
  v11 = boost::container::vector_alloc_holder<boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3, (uint64_t)a3);
  if (v11 >> 59)
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  v13 = v11;
  v14 = operator new(16 * v11);
  boost::container::vector<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>,boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,boost::container::dtl::pair<int,NSXPCConnection * {__strong}>*,boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>>(a1, (uint64_t)v14, v13, a2, (uint64_t)a3, a4);
  *a5 = *a1 + a2 - v10;
}

unint64_t boost::container::vector_alloc_holder<boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  const char *v10;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 - v3 >= (unint64_t)a2)
    boost::container::vector_alloc_holder<boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>(a1, (uint64_t)a2, a3);
  v5 = 0x7FFFFFFFFFFFFFFLL;
  if (0x7FFFFFFFFFFFFFFLL - v4 < (unint64_t)&a2[v3 - v4])
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  v6 = v4 >> 61;
  v7 = 8 * v4;
  if (v6 > 4)
    v8 = -1;
  else
    v8 = v7;
  v9 = v7 / 5;
  if (v6)
    v9 = v8;
  v10 = &a2[v3];
  if (v9 < 0x7FFFFFFFFFFFFFFLL)
    v5 = v9;
  if ((unint64_t)v10 <= v5)
    return v5;
  else
    return (unint64_t)v10;
}

void boost::container::vector<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>,boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,boost::container::dtl::pair<int,NSXPCConnection * {__strong}>*,boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  void **v12;
  void *v13;
  uint64_t v14;

  v10 = *a1;
  boost::container::uninitialized_move_and_insert_alloc<boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,boost::container::dtl::pair<int,NSXPCConnection * {__strong}>*,boost::container::dtl::pair<int,NSXPCConnection * {__strong}>*,boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,boost::container::dtl::pair<int,NSXPCConnection * {__strong}>*,boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>>((uint64_t)a1, *a1, a4, *a1 + 16 * a1[1], a2, a5, a6);
  if (v10)
  {
    v11 = a1[1];
    if (v11)
    {
      v12 = (void **)(v10 + 8);
      do
      {
        --v11;
        v13 = *v12;
        v12 += 2;

      }
      while (v11);
    }
    operator delete((void *)*a1);
  }
  v14 = a1[1] + a5;
  *a1 = a2;
  a1[1] = v14;
  a1[2] = a3;
}

void sub_1C89B62A8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void boost::container::uninitialized_move_and_insert_alloc<boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,boost::container::dtl::pair<int,NSXPCConnection * {__strong}>*,boost::container::dtl::pair<int,NSXPCConnection * {__strong}>*,boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,boost::container::dtl::pair<int,NSXPCConnection * {__strong}>*,boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v7 = a5;
  if (a2 != a3)
  {
    v7 = a5;
    do
    {
      *(_DWORD *)v7 = *(_DWORD *)a2;
      v8 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(v7 + 8) = v8;
      v7 += 16;
      a2 += 16;
    }
    while (a2 != a3);
  }
  if (a6 != 1)
    __assert_rtn("uninitialized_copy_n_and_update", "advanced_insert_int.hpp", 209, "n == 1");
  *(_DWORD *)v7 = *(_DWORD *)a7;
  v9 = *(_QWORD *)(a7 + 8);
  *(_QWORD *)(a7 + 8) = 0;
  *(_QWORD *)(v7 + 8) = v9;
  if (a3 != a4)
  {
    v10 = (_QWORD *)(v7 + 24);
    do
    {
      *((_DWORD *)v10 - 2) = *(_DWORD *)a3;
      v11 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = 0;
      *v10 = v11;
      v10 += 2;
      a3 += 16;
    }
    while (a3 != a4);
  }
}

void std::allocate_shared[abi:ne180100]<as::server::AudioApplicationInfo,std::allocator<as::server::AudioApplicationInfo>,as::server::ApplicationCreationDescription const&,NSXPCConnection * {__strong}&,void>(uint64_t a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0xE8uLL);
  std::__shared_ptr_emplace<as::server::AudioApplicationInfo>::__shared_ptr_emplace[abi:ne180100]<as::server::ApplicationCreationDescription const&,NSXPCConnection * {__strong}&,std::allocator<as::server::AudioApplicationInfo>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<as::server::AudioApplicationInfo>::__enable_weak_this[abi:ne180100]<as::server::AudioApplicationInfo,as::server::AudioApplicationInfo,void>((uint64_t)a3, v6 + 3, (uint64_t)(v6 + 3));
}

void sub_1C89B6400(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<as::server::AudioApplicationInfo>::__shared_ptr_emplace[abi:ne180100]<as::server::ApplicationCreationDescription const&,NSXPCConnection * {__strong}&,std::allocator<as::server::AudioApplicationInfo>,0>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E8205AF0;
  as::server::AudioApplicationInfo::AudioApplicationInfo(a1 + 3, a2, *a3);
  return a1;
}

void sub_1C89B644C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<as::server::AudioApplicationInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8205AF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<as::server::AudioApplicationInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8205AF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA38D28);
}

void std::__shared_ptr_emplace<as::server::AudioApplicationInfo>::__on_zero_shared(uint64_t a1)
{
  std::__destroy_at[abi:ne180100]<as::server::AudioApplicationInfo,0>(a1 + 24);
}

void std::__destroy_at[abi:ne180100]<as::server::AudioApplicationInfo,0>(uint64_t a1)
{
  std::__shared_weak_count *v2;

  as::server::AudioAppInfoImpl::~AudioAppInfoImpl((id *)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void std::shared_ptr<as::server::AudioApplicationInfo>::__enable_weak_this[abi:ne180100]<as::server::AudioApplicationInfo,as::server::AudioApplicationInfo,void>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  if (a2)
  {
    v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
        do
          v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4)
        std::__shared_weak_count::__release_weak(v4);
      if (v5)
      {
        v10 = (unint64_t *)&v5->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<as::server::ProcessIdentity,std::shared_ptr<as::server::AudioApplicationInfo>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<as::server::AudioApplicationInfo>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 72);
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<int,RBSProcessHandle * {__strong}>,std::__map_value_compare<int,std::__value_type<int,RBSProcessHandle * {__strong}>,std::less<int>,true>,std::allocator<std::__value_type<int,RBSProcessHandle * {__strong}>>>::erase(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::__remove_node_pointer(a1, (uint64_t *)a2);

  operator delete((void *)a2);
  return v3;
}

_DWORD *std::__tree<std::__value_type<unsigned int,AVAudioSessionMicrophoneInjectionMode>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,AVAudioSessionMicrophoneInjectionMode>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,AVAudioSessionMicrophoneInjectionMode>>>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&,AVAudioSessionMicrophoneInjectionMode&>(uint64_t **a1, uint64_t *a2, unsigned int *a3, _DWORD *a4, _QWORD *a5)
{
  uint64_t *v8;
  _DWORD *v9;
  uint64_t **v10;
  uint64_t v12;
  uint64_t *v13;

  v8 = std::__tree<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,as::server::AudioAppInfoImpl::SessionDetails>>>::__find_equal<unsigned int>(a1, a2, &v13, &v12, a3);
  v9 = (_DWORD *)*v8;
  if (!*v8)
  {
    v10 = (uint64_t **)v8;
    v9 = operator new(0x30uLL);
    v9[8] = *a4;
    *((_QWORD *)v9 + 5) = *a5;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v13, v10, (uint64_t *)v9);
  }
  return v9;
}

uint64_t std::__tree<std::__value_type<unsigned int,AVAudioSessionMicrophoneInjectionMode>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,AVAudioSessionMicrophoneInjectionMode>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,AVAudioSessionMicrophoneInjectionMode>>>::__erase_unique<unsigned int>(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = *(_DWORD *)(v2 + 32);
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32))
    return 0;
  std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::__remove_node_pointer((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

uint64_t **std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::__emplace_unique_key_args<NSString * {__strong},std::pair<NSString * const {__strong},audit_token_t>>(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  char *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (char *)operator new(0x48uLL);
    *((_QWORD *)v10 + 4) = *(id *)a3;
    *(_OWORD *)(v10 + 40) = *(_OWORD *)(a3 + 8);
    *(_OWORD *)(v10 + 56) = *(_OWORD *)(a3 + 24);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t **std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<NSString * {__strong},audit_token_t>,std::__tree_node<std::__value_type<NSString * {__strong},audit_token_t>,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  __int128 v10;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t *v17;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = v8;
    if (v8)
    {
      v16 = std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          objc_storeStrong((id *)v8 + 4, (id)v9[4]);
          v10 = *(_OWORD *)(v9 + 5);
          *(_OWORD *)(v8 + 7) = *(_OWORD *)(v9 + 7);
          *(_OWORD *)(v8 + 5) = v10;
          std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::__node_insert_multi(v5, v8);
          v8 = v16;
          v17 = v16;
          if (v16)
            v16 = std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (_QWORD *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v12 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::__emplace_multi<std::pair<NSString * const {__strong},audit_token_t> const&>(v5, (uint64_t)(a2 + 4));
      v13 = (_QWORD *)a2[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)a2[2];
          v12 = *v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1C89B6A4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::__node_insert_multi(uint64_t **a1, uint64_t *a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;

  v3 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (a2[4] >= (unint64_t)v4[4])
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v3, v5, a2);
  return a2;
}

_QWORD *std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

char *std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::__emplace_multi<std::pair<NSString * const {__strong},audit_token_t> const&>(uint64_t **a1, uint64_t a2)
{
  char *v4;
  id v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;

  v4 = (char *)operator new(0x48uLL);
  v5 = *(id *)a2;
  v6 = a1 + 1;
  v7 = a1[1];
  *((_QWORD *)v4 + 4) = v5;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 24);
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        if ((unint64_t)v5 >= v7[4])
          break;
        v7 = (uint64_t *)*v7;
        v8 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7);
    v8 = v6 + 1;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v6, v8, (uint64_t *)v4);
  return v4;
}

uint64_t *std::__tree<std::__value_type<NSString * {__strong},audit_token_t>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},audit_token_t>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},audit_token_t>>>::erase(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = std::__tree<std::pair<AVAudioMicrophoneMonitorClientType,unsigned long long>>::__remove_node_pointer(a1, (uint64_t *)a2);

  operator delete((void *)a2);
  return v3;
}

uint64_t std::vector<applesauce::CF::TypeRefPair>::reserve(_QWORD *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 16 * v6;
    std::vector<applesauce::CF::TypeRefPair>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1C89B6CC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t std::vector<applesauce::CF::TypeRefPair>::emplace_back<unsigned int const&,AVAudioSessionMicrophoneInjectionMode const&>(_QWORD *a1, int *a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v17;
  CFNumberRef *v18;
  CFNumberRef *v19;
  char *v20;
  uint64_t v21;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD *)(v6 - 8);
  if (v9 >= v8)
  {
    v11 = (uint64_t)(v9 - *a1) >> 4;
    if ((unint64_t)(v11 + 1) >> 60)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v12 = v7 - *a1;
    v13 = v12 >> 3;
    if (v12 >> 3 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v21 = v6;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v6, v14);
    else
      v15 = 0;
    v17 = v15;
    v18 = (CFNumberRef *)&v15[16 * v11];
    v20 = &v15[16 * v14];
    applesauce::CF::TypeRefPair::TypeRefPair<unsigned int const&,AVAudioSessionMicrophoneInjectionMode const&>(v18, a2, a3);
    v19 = v18 + 2;
    std::vector<applesauce::CF::TypeRefPair>::__swap_out_circular_buffer(a1, &v17);
    v10 = a1[1];
    std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)&v17);
  }
  else
  {
    applesauce::CF::TypeRefPair::TypeRefPair<unsigned int const&,AVAudioSessionMicrophoneInjectionMode const&>(*(CFNumberRef **)(v6 - 8), a2, a3);
    v10 = v9 + 16;
    a1[1] = v9 + 16;
  }
  a1[1] = v10;
  return v10 - 16;
}

void sub_1C89B6DDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

CFDictionaryRef applesauce::CF::details::make_CFDictionaryRef(void ***a1)
{
  uint64_t v2;
  void **v3;
  void **v4;
  void *v5;
  void **v6;
  void **v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  void **v12;
  void **v13;
  void **v14;
  void *v15;
  void *v16;
  void **v17;
  void **v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  void **v23;
  void **v24;
  void **v25;
  void *v26;
  CFDictionaryRef v27;
  void *exception;
  void *v30;
  void **values;
  void **v32;
  void **v33;
  void **keys;
  void **v35;
  void **v36;

  v2 = ((char *)a1[1] - (char *)*a1) >> 4;
  keys = 0;
  v35 = 0;
  v36 = 0;
  std::vector<void const*>::reserve((void **)&keys, v2);
  values = 0;
  v32 = 0;
  v33 = 0;
  std::vector<void const*>::reserve((void **)&values, v2);
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      v5 = *v3;
      if (!*v3 || !v3[1])
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1CAA38B30](exception, "Could not construct");
      }
      v6 = v35;
      if (v35 >= v36)
      {
        v8 = v35 - keys;
        if ((unint64_t)(v8 + 1) >> 61)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        v9 = ((char *)v36 - (char *)keys) >> 2;
        if (v9 <= v8 + 1)
          v9 = v8 + 1;
        if ((unint64_t)((char *)v36 - (char *)keys) >= 0x7FFFFFFFFFFFFFF8)
          v10 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10)
          v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<as::server::ObjectDescription>>>((uint64_t)&v36, v10);
        else
          v11 = 0;
        v12 = (void **)&v11[8 * v8];
        *v12 = v5;
        v7 = v12 + 1;
        v14 = keys;
        v13 = v35;
        if (v35 != keys)
        {
          do
          {
            v15 = *--v13;
            *--v12 = v15;
          }
          while (v13 != v14);
          v13 = keys;
        }
        keys = v12;
        v35 = v7;
        v36 = (void **)&v11[8 * v10];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *v35 = v5;
        v7 = v6 + 1;
      }
      v35 = v7;
      v16 = v3[1];
      v17 = v32;
      if (v32 >= v33)
      {
        v19 = v32 - values;
        if ((unint64_t)(v19 + 1) >> 61)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        v20 = ((char *)v33 - (char *)values) >> 2;
        if (v20 <= v19 + 1)
          v20 = v19 + 1;
        if ((unint64_t)((char *)v33 - (char *)values) >= 0x7FFFFFFFFFFFFFF8)
          v21 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v21 = v20;
        if (v21)
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<as::server::ObjectDescription>>>((uint64_t)&v33, v21);
        else
          v22 = 0;
        v23 = (void **)&v22[8 * v19];
        *v23 = v16;
        v18 = v23 + 1;
        v25 = values;
        v24 = v32;
        if (v32 != values)
        {
          do
          {
            v26 = *--v24;
            *--v23 = v26;
          }
          while (v24 != v25);
          v24 = values;
        }
        values = v23;
        v32 = v18;
        v33 = (void **)&v22[8 * v21];
        if (v24)
          operator delete(v24);
      }
      else
      {
        *v32 = v16;
        v18 = v17 + 1;
      }
      v32 = v18;
      v3 += 2;
    }
    while (v3 != v4);
  }
  v27 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, v2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v27)
  {
    v30 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1CAA38B30](v30, "Could not construct");
  }
  if (values)
  {
    v32 = values;
    operator delete(values);
  }
  if (keys)
  {
    v35 = keys;
    operator delete(keys);
  }
  return v27;
}

void sub_1C89B70C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  void *v13;

  __cxa_free_exception(v13);
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<applesauce::CF::TypeRefPair>::__swap_out_circular_buffer(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*result;
  v2 = (_QWORD *)result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(v2 - 2);
    v2 -= 2;
    *(_QWORD *)(v4 - 16) = v5;
    v4 -= 16;
    *v2 = 0;
    *(_QWORD *)(v4 + 8) = v2[1];
    v2[1] = 0;
  }
  a2[1] = v4;
  v6 = (_QWORD *)*result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::__destroy_at[abi:ne180100]<applesauce::CF::TypeRefPair,0>(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
}

void applesauce::CF::TypeRef::~TypeRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

uint64_t std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::__destroy_at[abi:ne180100]<applesauce::CF::TypeRefPair,0>(i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

CFNumberRef *applesauce::CF::TypeRefPair::TypeRefPair<unsigned int const&,AVAudioSessionMicrophoneInjectionMode const&>(CFNumberRef *a1, int *a2, uint64_t *a3)
{
  CFNumberRef v5;
  CFNumberRef v6;
  void *exception;
  void *v9;
  int valuePtr;
  uint64_t v11;

  valuePtr = *a2;
  v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *a1 = v5;
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1CAA38B30](exception, "Could not construct");
  }
  v11 = *a3;
  v6 = CFNumberCreate(0, kCFNumberLongType, &v11);
  a1[1] = v6;
  if (!v6)
  {
    v9 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1CAA38B30](v9, "Could not construct");
  }
  return a1;
}

void sub_1C89B7324(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

void std::vector<void const*>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<as::server::ObjectDescription>>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 16;
        std::__destroy_at[abi:ne180100]<applesauce::CF::TypeRefPair,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void OUTLINED_FUNCTION_0_1(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 473, a4);
}

void `anonymous namespace'::IsRemoteDeviceInputControlAllowed()
{
  _os_crash();
  __break(1u);
}

void as::server::require_acq::AudioSessionSetClientPlayState_Inner(unsigned int,AVAudioSessionClientPlayerType,void *,unsigned int,AVAudioSessionClientPlayState,AudioSessionDuckingInfo *,void const*)::$_0::operator()()
{
  _os_crash();
  __break(1u);
}

void nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump()
{
  __assert_rtn("dump", "serializer.hpp", 363, "false");
}

{
  __assert_rtn("dump", "serializer.hpp", 138, "i != val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "serializer.hpp", 139, "std::next(i) == val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "serializer.hpp", 166, "i != val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "serializer.hpp", 167, "std::next(i) == val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "serializer.hpp", 208, "not val.m_value.array->empty()");
}

{
  __assert_rtn("dump", "serializer.hpp", 229, "not val.m_value.array->empty()");
}

void nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped()
{
  __assert_rtn("dump_escaped", "serializer.hpp", 625, "false");
}

{
  __assert_rtn("dump_escaped", "serializer.hpp", 562, "false");
}

void nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>()
{
  __assert_rtn("dump_integer", "serializer.hpp", 726, "n_chars < number_buffer.size() - 1");
}

void nlohmann::detail::to_chars<double>()
{
  __assert_rtn("to_chars", "to_chars.hpp", 1082, "last - first >= std::numeric_limits<FloatType>::max_digits10");
}

{
  __assert_rtn("to_chars", "to_chars.hpp", 1092, "len <= std::numeric_limits<FloatType>::max_digits10");
}

{
  __assert_rtn("to_chars", "to_chars.hpp", 1100, "last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10");
}

{
  __assert_rtn("to_chars", "to_chars.hpp", 1101, "last - first >= std::numeric_limits<FloatType>::max_digits10 + 6");
}

{
  __assert_rtn("to_chars", "to_chars.hpp", 1064, "std::isfinite(value)");
}

void nlohmann::detail::dtoa_impl::grisu2<double>()
{
  __assert_rtn("grisu2", "to_chars.hpp", 890, "value > 0");
}

{
  __assert_rtn("grisu2", "to_chars.hpp", 889, "std::isfinite(value)");
}

void nlohmann::detail::dtoa_impl::format_buffer()
{
  __assert_rtn("format_buffer", "to_chars.hpp", 979, "min_exp < 0");
}

{
  __assert_rtn("format_buffer", "to_chars.hpp", 980, "max_exp > 0");
}

{
  __assert_rtn("append_exponent", "to_chars.hpp", 926, "e > -1000");
}

{
  __assert_rtn("append_exponent", "to_chars.hpp", 927, "e < 1000");
}

{
  __assert_rtn("format_buffer", "to_chars.hpp", 1006, "k > n");
}

void nlohmann::detail::dtoa_impl::compute_boundaries<double>()
{
  __assert_rtn("compute_boundaries", "to_chars.hpp", 186, "value > 0");
}

{
  __assert_rtn("compute_boundaries", "to_chars.hpp", 185, "std::isfinite(value)");
}

void nlohmann::detail::dtoa_impl::grisu2()
{
  __assert_rtn("grisu2", "to_chars.hpp", 828, "m_plus.e == v.e");
}

{
  __assert_rtn("grisu2", "to_chars.hpp", 827, "m_plus.e == m_minus.e");
}

void nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent()
{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 466, "e >= -1500");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 467, "e <= 1500");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 472, "index >= 0");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 476, "kAlpha <= cached.e + e + 64");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 477, "kGamma >= cached.e + e + 64");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 473, "static_cast<std::size_t>(index) < kCachedPowers.size()");
}

void nlohmann::detail::dtoa_impl::grisu2_digit_gen()
{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 601, "M_plus.e >= kAlpha");
}

{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 602, "M_plus.e <= kGamma");
}

{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 623, "p1 > 0");
}

{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 659, "d <= 9");
}

{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 757, "p2 <= (std::numeric_limits<std::uint64_t>::max)() / 10");
}

{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 766, "d <= 9");
}

{
  __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 746, "p2 > delta");
}

void nlohmann::detail::dtoa_impl::grisu2_round()
{
  __assert_rtn("grisu2_round", "to_chars.hpp", 545, "len >= 1");
}

{
  __assert_rtn("grisu2_round", "to_chars.hpp", 546, "dist <= delta");
}

{
  __assert_rtn("grisu2_round", "to_chars.hpp", 547, "rest <= delta");
}

{
  __assert_rtn("grisu2_round", "to_chars.hpp", 548, "ten_k > 0");
}

{
  __assert_rtn("grisu2_round", "to_chars.hpp", 573, "buf[len - 1] != '0'");
}

void as::server::DeferredMessageState::SendSingleMessage()
{
  _os_crash();
  __break(1u);
}

void `anonymous namespace'::MergeChangedHardwareObject()
{
  _os_crash();
  __break(1u);
}

{
  _os_crash();
  __break(1u);
}

void ___ZN2as6server18DeviceTimeObserver10DeviceSlot15timestampWriterEv_block_invoke_cold_1()
{
  _os_crash();
  __break(1u);
}

void ___ZN2as6server18DeviceTimeObserver10DeviceSlot15timestampWriterEv_block_invoke_cold_2()
{
  _os_crash();
  __break(1u);
}

void caulk::concurrent::atomic_value<as::MinimalTimeStamp,2,3>::load()
{
  OUTLINED_FUNCTION_6();
  _os_crash();
  __break(1u);
}

void as::server::DeviceTimeObserver::createDevice()
{
  _os_crash();
  __break(1u);
}

void as::server::DeviceTimeObserver::removeDevice()
{
  _os_crash();
  __break(1u);
}

void as::server::DeviceTimeObserver::createSession()
{
  _os_crash();
  __break(1u);
}

void as::server::DeviceTimeObserver::addSiblingToSameReferringSessionListsAsSource()
{
  _os_crash();
  __break(1u);
}

void as::server::DeviceTimeObserver::removeReferringSessionsFromDevice()
{
  _os_crash();
  __break(1u);
}

void as::server::DeviceTimeObserver::unmapSessionToDevice()
{
  _os_crash();
  __break(1u);
}

{
  _os_crash();
  __break(1u);
}

void as::server::DeviceTimeObserver::xpcSharedMemoryObject(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  _DWORD v3[2];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = (*a1 - *a2) >> 7;
  v3[0] = 67109120;
  v3[1] = v2;
  _os_log_fault_impl(&dword_1C895C000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "DeviceTimeObserver: expected exactly 1 shared block, have %d", (uint8_t *)v3, 8u);
}

void boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::priv_move_assign<boost::container::new_allocator<unsigned int>>()
{
  __assert_rtn("priv_move_assign", "vector.hpp", 2480, "this != &x || x.size() == 0");
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>::insert_unique()
{
  __assert_rtn("emplace", "vector.hpp", 1862, "this->priv_in_range_or_end(position)");
}

void boost::container::vector<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_7("priv_insert_forward_range", "vector.hpp", a3, "this->m_holder.capacity() >= this->m_holder.m_size");
}

void boost::container::vector<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,void>::priv_insert_forward_range<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>*,boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>>()
{
  __assert_rtn("priv_insert_forward_range_expand_forward", "vector.hpp", 2966, "this->room_enough()");
}

void boost::container::vector_alloc_holder<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>()
{
  __assert_rtn("next_capacity", "vector.hpp", 473, "additional_objects > size_type(this->m_capacity - this->m_size)");
}

void boost::container::vector<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,as::server::DeviceTimeObserver::SessionInfo>>,void>::erase()
{
  __assert_rtn("erase", "vector.hpp", 2092, "this->priv_in_range(position)");
}

void boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::insert<boost::container::vec_iterator<unsigned int *,false>>()
{
  __assert_rtn("insert", "vector.hpp", 2017, "this->priv_in_range_or_end(pos)");
}

void boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::erase()
{
  __assert_rtn("erase", "vector.hpp", 2116, "this->priv_in_range_or_end(first)");
}

{
  __assert_rtn("erase", "vector.hpp", 2117, "this->priv_in_range_or_end(last)");
}

{
  __assert_rtn("erase", "vector.hpp", 2118, "first <= last");
}

void boost::movelib::heap_sort_helper<boost::container::vec_iterator<unsigned int *,false>,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>::sort()
{
  __assert_rtn("sort", "heap_sort.hpp", 103, "boost::movelib::is_sorted(first, last, comp)");
}

void boost::movelib::detail_adaptive::adaptive_merge_impl<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>()
{
  __assert_rtn("adaptive_merge_n_keys_intbuf", "adaptive_merge.hpp", 166, "n_keys >= ((len1-l_intbuf-n_keys)/l_block + len2/l_block)");
}

void boost::movelib::detail_adaptive::lblock_for_combine<unsigned long>()
{
  __assert_rtn("lblock_for_combine", "adaptive_sort_merge.hpp", 577, "l_data > 1");
}

{
  __assert_rtn("lblock_for_combine", "adaptive_sort_merge.hpp", 588, "n_keys >= 4");
}

void boost::movelib::detail_adaptive::adaptive_merge_combine_blocks<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>()
{
  __assert_rtn("adaptive_merge_combine_blocks", "adaptive_merge.hpp", 94, "xbuf.size() >= l_block");
}

{
  __assert_rtn("adaptive_merge_combine_blocks", "adaptive_merge.hpp", 56, "xbuf.size() >= l_block");
}

void boost::movelib::op_merge_with_right_placed<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,unsigned int *,boost::movelib::move_op>()
{
  __assert_rtn("op_merge_with_right_placed", "merge.hpp", 692, "end == r_last");
}

{
  __assert_rtn("op_merge_with_right_placed", "merge.hpp", 688, "(last - first) == (r_first - dest_first)");
}

void boost::movelib::op_merge_with_left_placed<boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *,unsigned int *>()
{
  __assert_rtn("op_merge_with_left_placed", "merge.hpp", 729, "last == res");
}

{
  __assert_rtn("op_merge_with_left_placed", "merge.hpp", 725, "(dest_last - last) == (r_last - r_first)");
}

void boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>::add<unsigned int *>()
{
  __assert_rtn("add", "merge.hpp", 85, "m_size < m_capacity");
}

void boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>::initialize_until()
{
  __assert_rtn("initialize_until", "merge.hpp", 123, "m_size < m_capacity");
}

void boost::movelib::detail_adaptive::combine_params<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned long,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>()
{
  __assert_rtn("combine_params", "adaptive_sort_merge.hpp", 717, "n_reg_block>=n_block_a");
}

{
  __assert_rtn("combine_params", "adaptive_sort_merge.hpp", 713, "((l_combined-l_irreg1-l_irreg2)%l_block) == 0");
}

void boost::movelib::detail_adaptive::op_merge_blocks_with_buf<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op,unsigned int *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_5("op_merge_blocks_with_buf", "adaptive_sort_merge.hpp", a3, "(dest-last1) == (buffer_end-buffer)");
}

{
  OUTLINED_FUNCTION_4("op_merge_blocks_with_buf", "adaptive_sort_merge.hpp", a3, "(is_range2_A && n_block_a_left) || (!is_range2_A && n_block_b_left)");
}

{
  OUTLINED_FUNCTION_3("op_merge_blocks_with_buf", "adaptive_sort_merge.hpp", a3, "buffer_empty || res == last1");
}

{
  OUTLINED_FUNCTION_2("op_merge_blocks_with_buf", "adaptive_sort_merge.hpp", a3, "is_range_1_empty || (buffer_end-buffer) == (last1+l_block-unmerged)");
}

void boost::movelib::detail_adaptive::initialize_keys<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>()
{
  __assert_rtn("initialize_keys", "adaptive_sort_merge.hpp", 659, "boost::movelib::is_sorted_and_unique(first, last, comp)");
}

void boost::movelib::detail_adaptive::find_next_block<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_1("find_next_block", "adaptive_sort_merge.hpp", a3, "ix_first_block <= ix_last_block");
}

void boost::movelib::detail_adaptive::op_partial_merge_and_save_impl<unsigned int *,unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::move_op>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0("op_partial_merge_and_save_impl", "adaptive_sort_merge.hpp", a3, "(last1-first1) == (buf_last1 - buf_first1)");
}

void boost::movelib::detail_adaptive::stable_merge<unsigned int *,boost::container::dtl::flat_tree_value_compare<std::less<unsigned int>,unsigned int,boost::move_detail::identity<unsigned int>>,boost::movelib::adaptive_xbuf<unsigned int,unsigned int *,unsigned long>>()
{
  __assert_rtn("stable_merge", "adaptive_sort_merge.hpp", 637, "xbuf.empty()");
}

void boost::movelib::range_xbuf<unsigned int *,unsigned long,boost::movelib::move_op>::move_assign<unsigned int *>()
{
  __assert_rtn("move_assign", "merge.hpp", 236, "size_type(n) <= size_type(m_cap-m_first)");
}

void boost::container::uninitialized_move_and_insert_alloc<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int *,boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int const&>>()
{
  __assert_rtn("uninitialized_copy_n_and_update", "advanced_insert_int.hpp", 181, "n == 1");
}

void caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned int)>>::element_t::release()
{
  _os_assert_log();
  _os_crash();
  __break(1u);
}

void ___ZN12_GLOBAL__N_130HandleInterruptionNotificationEjP12NSDictionary_block_invoke_cold_2(id *a1)
{
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = OUTLINED_FUNCTION_2_0(a1);
  if (OUTLINED_FUNCTION_1_0(v1))
  {
    OUTLINED_FUNCTION_3_0();
    OUTLINED_FUNCTION_0_0(&dword_1C895C000, v2, v3, "%25s:%-5d Unexpected null session reference", v4, v5, v6, v7, v8);
  }
  OUTLINED_FUNCTION_4_0();
}

void ___ZN12_GLOBAL__N_130HandleInterruptionNotificationEjP12NSDictionary_block_invoke_59_cold_2(id *a1)
{
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = OUTLINED_FUNCTION_2_0(a1);
  if (OUTLINED_FUNCTION_1_0(v1))
  {
    OUTLINED_FUNCTION_3_0();
    OUTLINED_FUNCTION_0_0(&dword_1C895C000, v2, v3, "%25s:%-5d Unexpected null session reference", v4, v5, v6, v7, v8);
  }
  OUTLINED_FUNCTION_4_0();
}

void boost::container::dtl::flat_tree<unsigned int,boost::move_detail::identity<unsigned int>,std::less<unsigned int>,void>::insert_unique()
{
  __assert_rtn("insert_unique", "flat_tree.hpp", 879, "this->priv_in_range_or_end(hint)");
}

void boost::container::vector<unsigned int,boost::container::new_allocator<unsigned int>,void>::emplace<unsigned int>()
{
  __assert_rtn("priv_insert_forward_range", "vector.hpp", 2821, "this->m_holder.capacity() >= this->m_holder.m_size");
}

void boost::container::uninitialized_move_and_insert_alloc<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int *,boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<unsigned int>,unsigned int *,unsigned int>>()
{
  __assert_rtn("uninitialized_copy_n_and_update", "advanced_insert_int.hpp", 209, "n == 1");
}

void as::server::ConstAudioSessionInfo::CreateMXSession()
{
  _os_crash();
  __break(1u);
}

void as::server::ConstAudioSessionInfo::CreateCMSession()
{
  _os_crash();
  __break(1u);
}

void as::server::ConstAudioSessionInfo::CreateCMSession(as::server *a1)
{
  NSObject *v1;
  int v2;
  const char *v3;
  __int16 v4;
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v1 = objc_retainAutorelease(*(id *)as::server::gSessionServerLog(a1));
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    v2 = 136315394;
    v3 = "AudioSessionInfo.mm";
    v4 = 1024;
    v5 = 402;
    _os_log_impl(&dword_1C895C000, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR in CreateCMSession. mCMSession already exists!", (uint8_t *)&v2, 0x12u);
  }
  _os_crash();
  __break(1u);
}

void as::server::AudioSessionInfo::SetSiblingPlayerState()
{
  _os_crash();
  __break(1u);
}

{
  _os_crash();
  __break(1u);
}

void as::server::require_acq::MuteAudioSessions()
{
  _os_crash();
  __break(1u);
}

void boost::container::vector_alloc_holder<boost::container::new_allocator<boost::container::dtl::pair<int,NSXPCConnection * {__strong}>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0_1("next_capacity", "vector.hpp", a3, "additional_objects > size_type(this->m_capacity - this->m_size)");
}

uint64_t AddACQEventWithDispatchID()
{
  return MEMORY[0x1E0CFF370]();
}

OSStatus AudioObjectGetPropertyData(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress, UInt32 inQualifierDataSize, const void *inQualifierData, UInt32 *ioDataSize, void *outData)
{
  return MEMORY[0x1E0C975D0](*(_QWORD *)&inObjectID, inAddress, *(_QWORD *)&inQualifierDataSize, inQualifierData, ioDataSize, outData);
}

uint64_t CACentralStateDumpRegisterSubsystem()
{
  return MEMORY[0x1E0CFF610]();
}

uint64_t CAReportingClientSendMessage()
{
  return MEMORY[0x1E0DDE860]();
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1E0C97D90]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1E0C97FC8]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1E0C97FE0](BOOLean);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1E0C983A0](allocator, bytes, length);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1E0C98418]();
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98530](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1E0C98570](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
  MEMORY[0x1E0C985A0](theDict, keys, values);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1E0C985A8]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1E0C98620](cf1, cf2);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
  MEMORY[0x1E0C988B0](center, observer, callBack, name, object, suspensionBehavior);
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988D0]();
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
  MEMORY[0x1E0C98900](center, observer, name, object);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

CFNumberType CFNumberGetType(CFNumberRef number)
{
  return MEMORY[0x1E0C989A8](number);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1E0C989B8]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1E0C989C0](number, theType, valuePtr);
}

Boolean CFNumberIsFloatType(CFNumberRef number)
{
  return MEMORY[0x1E0C989D0](number);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1E0C98A78](key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
  MEMORY[0x1E0C98A80](key, value, applicationID);
}

CFPropertyListRef CFPropertyListCreateDeepCopy(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFOptionFlags mutabilityOption)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98AB0](allocator, propertyList, mutabilityOption);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C98F10](theString1, theString2, compareOptions);
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3;
  CFIndex v4;
  CFRange result;

  v3 = MEMORY[0x1E0C99050](theString, stringToFind, compareOptions);
  result.length = v4;
  result.location = v3;
  return result;
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x1E0C99080](theString, range.location, range.length, *(_QWORD *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1E0C990A0](theString, *(_QWORD *)&encoding);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1E0C99100](theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1E0C99170]();
}

uint64_t CMNotificationCenterAddListener()
{
  return MEMORY[0x1E0C9EEB8]();
}

uint64_t CMNotificationCenterGetDefaultLocalCenter()
{
  return MEMORY[0x1E0C9EEC8]();
}

uint64_t CMNotificationCenterRemoveListener()
{
  return MEMORY[0x1E0C9EEE8]();
}

uint64_t CMSessionCreateForRemoteDeviceID()
{
  return MEMORY[0x1E0D48340]();
}

uint64_t CMSessionMgrCopyPickableRoutesForCategoryAndMode()
{
  return MEMORY[0x1E0D48368]();
}

uint64_t CreateACQDispatchID()
{
  return MEMORY[0x1E0CFF628]();
}

uint64_t LogACQEvents()
{
  return MEMORY[0x1E0CFF6D8]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1E0DE2B50]();
}

uint64_t MXSessionBeginInterruption_WithSecTaskAndFlags()
{
  return MEMORY[0x1E0D484E0]();
}

uint64_t MXSessionCopyProperty()
{
  return MEMORY[0x1E0D484F0]();
}

uint64_t MXSessionCreate()
{
  return MEMORY[0x1E0D484F8]();
}

uint64_t MXSessionCreateWithOptions()
{
  return MEMORY[0x1E0D48500]();
}

uint64_t MXSessionEndInterruption_WithInterruptionNotification()
{
  return MEMORY[0x1E0D48508]();
}

uint64_t MXSessionEndInterruption_WithSecTaskAndStatus()
{
  return MEMORY[0x1E0D48510]();
}

uint64_t MXSessionSetProperty()
{
  return MEMORY[0x1E0D48520]();
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1E0CB3200](aClass);
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x1E0CD65F0](task, entitlement, error);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return (SecTaskRef)MEMORY[0x1E0CD6620](allocator, token);
}

uint64_t WriteStackshotReportWithPID()
{
  return MEMORY[0x1E0D1BD40]();
}

uint64_t _AXSAllowsMixToUplink()
{
  return MEMORY[0x1E0DDD538]();
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

uint64_t _MXSessionBeginInterruption_WithSecTaskAndFlags()
{
  return MEMORY[0x1E0D48580]();
}

uint64_t _MXSessionCopyProperty()
{
  return MEMORY[0x1E0D48590]();
}

uint64_t _MXSessionEndInterruption_WithSecTaskAndStatus()
{
  return MEMORY[0x1E0D48598]();
}

uint64_t _MXSessionSetProperty()
{
  return MEMORY[0x1E0D485A0]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

uint64_t NSErrorWithString(NSString *a1)
{
  return MEMORY[0x1E0CFF1F0](a1);
}

uint64_t NSErrorUnimplemented(void)
{
  return MEMORY[0x1E0CFF1F8]();
}

void PB::Base::~Base(PB::Base *this)
{
  MEMORY[0x1E0D82F18](this);
}

uint64_t as::WorkloopPool::dispatchAsync()
{
  return MEMORY[0x1E0CFF228]();
}

uint64_t as::WorkloopPool::Create(as::WorkloopPool *this)
{
  return MEMORY[0x1E0CFF230](this);
}

uint64_t as::RouteIdentifier::RouteIdentifier()
{
  return MEMORY[0x1E0CFF238]();
}

uint64_t as::RouteIdentifier::RouteIdentifier(as::RouteIdentifier *this, const RouteIdentifier *a2)
{
  return MEMORY[0x1E0CFF240](this, a2);
}

uint64_t as::RouteIdentifier::operator=()
{
  return MEMORY[0x1E0CFF248]();
}

uint64_t as::GetMXNotificationNames(as *this)
{
  return MEMORY[0x1E0CFF250](this);
}

uint64_t as::IsStandardMXNotificationName(as *this, NSString *a2)
{
  return MEMORY[0x1E0CFF260](this, a2);
}

uint64_t as::SetServerXPCListenerEndpoint(as *this, NSXPCListenerEndpoint *a2)
{
  return MEMORY[0x1E0CFF268](this, a2);
}

uint64_t as::GetSpecialMXNotificationNames(as *this)
{
  return MEMORY[0x1E0CFF270](this);
}

uint64_t as::server::ControlValue::ControlValue()
{
  return MEMORY[0x1E0CFF278]();
}

uint64_t as::server::ControlValue::ControlValue(as::server::ControlValue *this, const ControlValue *a2)
{
  return MEMORY[0x1E0CFF280](this, a2);
}

uint64_t as::server::ControlValue::operator=()
{
  return MEMORY[0x1E0CFF288]();
}

uint64_t as::server::ChangedObject::mutableObjectDescription(as::server::ChangedObject *this)
{
  return MEMORY[0x1E0CFF290](this);
}

uint64_t as::server::ObjectDescription::operator=()
{
  return MEMORY[0x1E0CFF298]();
}

uint64_t as::server::ConfigChangeSummary::mutableHardwareSystemChange(as::server::ConfigChangeSummary *this)
{
  return MEMORY[0x1E0CFF2A0](this);
}

uint64_t as::server::ConfigChangeSummary::ConfigChangeSummary(as::server::ConfigChangeSummary *this, const as::server::ConfigChangeSummary *a2)
{
  return MEMORY[0x1E0CFF2A8](this, a2);
}

uint64_t as::server::ConfigChangeSummary::operator=()
{
  return MEMORY[0x1E0CFF2B0]();
}

uint64_t caulk::is_debugger_attached(caulk *this)
{
  return MEMORY[0x1E0DDB4B0](this);
}

uint64_t caulk::ipc::mapped_memory::reset(caulk::ipc::mapped_memory *this)
{
  return MEMORY[0x1E0DDB500](this);
}

uint64_t caulk::ipc::mapped_memory::mapped_memory(caulk::ipc::mapped_memory *this)
{
  return MEMORY[0x1E0DDB510](this);
}

uint64_t caulk::xpc::reply_watchdog_factory::make_timer(caulk::xpc::reply_watchdog_factory *this)
{
  return MEMORY[0x1E0DDB590](this);
}

uint64_t caulk::xpc::reply_watchdog_factory::init2()
{
  return MEMORY[0x1E0DDB598]();
}

uint64_t caulk::xpc::reply_watchdog_factory::reply_watchdog_factory(caulk::xpc::reply_watchdog_factory *this)
{
  return MEMORY[0x1E0DDB5A0](this);
}

uint64_t caulk::xstring::move()
{
  return MEMORY[0x1E0DDB6D8]();
}

uint64_t caulk::xstring::clear(caulk::xstring *this)
{
  return MEMORY[0x1E0DDB6E0](this);
}

uint64_t caulk::xstring::assign(caulk::xstring *this, const caulk::xstring *a2)
{
  return MEMORY[0x1E0DDB6E8](this, a2);
}

uint64_t caulk::platform::process_name(caulk::platform *this)
{
  return MEMORY[0x1E0DDB6F0](this);
}

uint64_t as::server::ChangedObject::objectDescription(as::server::ChangedObject *this)
{
  return MEMORY[0x1E0CFF2B8](this);
}

uint64_t as::server::CustomPropertyAddress::operator==()
{
  return MEMORY[0x1E0CFF2C0]();
}

uint64_t caulk::xstring::compare(caulk::xstring *this, const caulk::xstring *a2)
{
  return MEMORY[0x1E0DDB750](this, a2);
}

const char *__cdecl std::runtime_error::what(const std::runtime_error *this)
{
  return (const char *)MEMORY[0x1E0DE4190](this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1E0DE4248](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1E0DE4258](this);
}

const char *__cdecl std::exception::what(const std::exception *this)
{
  return (const char *)MEMORY[0x1E0DE4270](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4278](this, a2);
}

{
  return (std::logic_error *)MEMORY[0x1E0DE4288](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4308](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
  MEMORY[0x1E0DE4338](this);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1E0DE4388](this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
  MEMORY[0x1E0DE43A8](a1, a2, a3);
}

void std::this_thread::sleep_for (const std::chrono::nanoseconds *__ns)
{
  MEMORY[0x1E0DE43C0](__ns);
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
  MEMORY[0x1E0DE43F8](this, __old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add, __p_new_stuff);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4428](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4470](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  MEMORY[0x1E0DE4480](this, __n, __c);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x1E0DE44B8](this, __c);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1E0DE44D8](this, __str);
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1E0DE46B0]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1E0DE46B8]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1E0DE46C8]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1E0DE4700]();
}

{
  return MEMORY[0x1E0DE4708]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1E0DE47E0]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1E0DE47E8]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE48F0](this);
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x1E0DE48F8](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE4900](this);
}

void std::__throw_system_error(int __ev, const char *__what_arg)
{
  MEMORY[0x1E0DE4920](*(_QWORD *)&__ev, __what_arg);
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA0](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA8](this);
}

void std::mutex::~mutex(std::mutex *this)
{
  MEMORY[0x1E0DE4AB8](this);
}

std::chrono::system_clock::time_point std::chrono::system_clock::now(void)
{
  return (std::chrono::system_clock::time_point)MEMORY[0x1E0DE4B48]();
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x1E0DE4B98](this);
}

void std::promise<void>::set_value(std::promise<void> *this)
{
  MEMORY[0x1E0DE4C20](this);
}

void std::promise<void>::~promise(std::promise<void> *this)
{
  MEMORY[0x1E0DE4C30](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x1E0DE4C50](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x1E0DE4C68](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x1E0DE4C80](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1E0DE4D28]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x1E0DE4D58](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x1E0DE4D60](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x1E0DE4D70](retstr, __val);
}

{
  return (std::string *)MEMORY[0x1E0DE4D80](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x1E0DE4D88]();
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x1E0DE4DD8](this);
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

void operator delete(void *__p)
{
  off_1E8204640(__p);
}

void operator delete(void *__p, std::align_val_t a2)
{
  off_1E8204648(__p, a2);
}

uint64_t operator delete()
{
  return off_1E8204650();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E8204658(__sz);
}

void *__cdecl operator new(size_t __sz, std::align_val_t a2)
{
  return (void *)off_1E8204660(__sz, a2);
}

uint64_t operator new()
{
  return off_1E8204668();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x1E0DE5098]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE50A0](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x1E0DE50B0](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1E0DE50B8](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x1E0DE50C0](a1);
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1E0C80B50](*(_QWORD *)&a1, a2);
}

uint64_t __udivti3()
{
  return MEMORY[0x1E0C80C80]();
}

uint64_t _os_assert_log()
{
  return MEMORY[0x1E0C80FF0]();
}

uint64_t _os_crash()
{
  return MEMORY[0x1E0C81000]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1E0C81010]();
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1E0DA88F0]();
}

uint64_t abort_with_reason()
{
  return MEMORY[0x1E0C813C0]();
}

pid_t audit_token_to_pid(audit_token_t *atoken)
{
  return MEMORY[0x1E0DE40F0](atoken);
}

int audit_token_to_pidversion(audit_token_t *atoken)
{
  return MEMORY[0x1E0DE40F8](atoken);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

void dispatch_activate(dispatch_object_t object)
{
  MEMORY[0x1E0C82BC0](object);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82BC8](when, queue, block);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

void dispatch_async_and_wait(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C08](queue, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(dispatch_queue_attr_t attr)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E20](attr);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E28](attr, frequency);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E50](label, attr, target);
}

const char *__cdecl dispatch_queue_get_label(dispatch_queue_t queue)
{
  return (const char *)MEMORY[0x1E0C82E58](queue);
}

void dispatch_set_qos_class_floor(dispatch_object_t object, dispatch_qos_class_t qos_class, int relative_priority)
{
  MEMORY[0x1E0C82F00](object, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x1E0C82F10](source);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

dispatch_workloop_t dispatch_workloop_create_inactive(const char *label)
{
  return (dispatch_workloop_t)MEMORY[0x1E0C82FE0](label);
}

uint64_t dispatch_workloop_set_scheduler_priority()
{
  return MEMORY[0x1E0C83010]();
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1E0C83038]();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x1E0C83760]();
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1E0C83A20]();
}

int kill(pid_t a1, int a2)
{
  return MEMORY[0x1E0C83A48](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

lconv *localeconv(void)
{
  return (lconv *)MEMORY[0x1E0C83B98]();
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1E0C83C50]();
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1E0C843F8](name);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7C38](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

void objc_moveWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7D18](to, from);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FB8](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1E0DE7FC8](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1E0DE7FD0](obj);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
  MEMORY[0x1E0C84990](lock);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

int reboot_np(int howto, const char *message)
{
  return MEMORY[0x1E0C85058](*(_QWORD *)&howto, message);
}

int sched_yield(void)
{
  return MEMORY[0x1E0C85270]();
}

uint64_t sessionManagerXPCCallbackInterface()
{
  return MEMORY[0x1E0CFF328]();
}

uint64_t sessionManagerXPCInterface()
{
  return MEMORY[0x1E0CFF330]();
}

unsigned int sleep(unsigned int a1)
{
  return MEMORY[0x1E0C85438](*(_QWORD *)&a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

xpc_object_t xpc_shmem_create(void *region, size_t length)
{
  return (xpc_object_t)MEMORY[0x1E0C866F0](region, length);
}

